{"id":0,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; out . println ( a > b ? \" ABC \" : \" ABD \" ) ; out . flush ( ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; System . out . println ( Math . max ( x , y ) ) ; } }","import java . io . PrintWriter ; import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { Scanner scan = new Scanner ( System . in ) ; int a = scan . nextInt ( ) ; int b = scan . nextInt ( ) ; int answer = 0 ; if ( a > b ) { answer = a ; } else { answer = b ; } PrintWriter out = new PrintWriter ( System . out ) ; out . println ( answer ) ; out . flush ( ) ; } }","import java . util . * ; import java . util . List ; import java . util . ArrayList ; import java . math . * ; class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; long X = scanner . nextLong ( ) ; long Y = scanner . nextLong ( ) ; System . out . println ( Math . max ( X , Y ) ) ; } }","import java . util . * ; import java . math . BigDecimal ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int one = sc . nextInt ( ) ; int two = sc . nextInt ( ) ; if ( one > two ) { System . out . println ( one ) ; } else { System . out . println ( two ) ; } } }","import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; long x = scanner . nextInt ( ) ; long y = scanner . nextInt ( ) ; scanner . close ( ) ; long max = Math . max ( x , y ) ; System . out . println ( max ) ; } }"],"bleu":0.2848454108848496,"rouge_l":0.46256913164946695}
{"id":1,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i ) ) count ++ ; } out . println ( count ) ; out . close ( ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } }"],"references":["import java . util . Scanner ; import java . util . TreeSet ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; if ( s . length ( ) == 26 ) { TreeSet < Character > set = new TreeSet < > ( ) ; set . add ( s . charAt ( 25 ) ) ; for ( int i = 24 ; 0 <= i ; i -- ) { if ( set . higher ( s . charAt ( i ) ) != null ) { System . out . println ( s . substring ( 0 , i ) + set . higher ( s . charAt ( i ) ) ) ; return ; } else { set . add ( s . charAt ( i ) ) ; } } System . out . println ( - 1 ) ; } else { for ( int i = ' a ' ; i <= ' z ' ; i ++ ) { if ( s . indexOf ( i ) == - 1 ) { System . out . println ( s + ( char ) i ) ; break ; } } } } }","import java . util . * ; import java . awt . * ; import static java . lang . System . * ; import static java . lang . Math . * ; public class Main { public static void main ( String [ ] $ ) { Scanner sc = new Scanner ( in ) ; boolean [ ] d = new boolean [ 26 ] ; for ( int i = 0 ; i < 26 ; i ++ ) { d [ i ] = false ; } char [ ] c = new char [ 26 ] ; for ( int i = 0 ; i < 26 ; i ++ ) { c [ i ] = ( char ) ( ' a ' + i ) ; } String s = sc . next ( ) ; if ( s . length ( ) < 26 ) { for ( int i = 0 ; i < s . length ( ) ; i ++ ) { char p = s . charAt ( i ) ; d [ p - 97 ] = true ; } for ( int i = 0 ; i < 26 ; i ++ ) { if ( ! d [ i ] ) { out . println ( s + c [ i ] ) ; break ; } } } else { int countR = 25 ; while ( countR > 0 && s . charAt ( countR ) < s . charAt ( countR - 1 ) ) { d [ s . charAt ( countR ) - 97 ] = true ; countR -- ; } if ( countR == 0 ) { out . println ( - 1 ) ; } else { TreeSet < Character > ts = new TreeSet < > ( ) ; for ( int i = countR ; i < 26 ; i ++ ) { if ( s . charAt ( countR - 1 ) < s . charAt ( i ) ) ts . add ( s . charAt ( i ) ) ; } for ( int i = 0 ; i < countR - 1 ; i ++ ) { out . print ( s . charAt ( i ) ) ; } out . println ( ts . pollFirst ( ) ) ; } } } }","import java . util . * ; public class Main { long INF = Long . MAX_VALUE ; public static void main ( String [ ] args ) { new Main ( ) . solve ( ) ; } void solve ( ) { Scanner sc = new Scanner ( System . in ) ; String S = sc . next ( ) ; char [ ] s = S . toCharArray ( ) ; boolean [ ] c = new boolean [ 26 ] ; Arrays . fill ( c , false ) ; for ( int i = 0 ; i < S . length ( ) ; i ++ ) { c [ s [ i ] - ' a ' ] = true ; } if ( S . length ( ) < 26 ) { for ( int i = 0 ; i < 26 ; i ++ ) { if ( ! c [ i ] ) { System . out . print ( S ) ; System . out . println ( ( char ) ( ' a ' + i ) ) ; return ; } } } if ( \" zyxwvutsrqponmlkjihgfedcba \" . equals ( S ) ) { System . out . println ( \" - 1\" ) ; return ; } char right ; for ( int i = 24 ; i >= 0 ; i -- ) { if ( ( s [ i + 1 ] ) > ( s [ i ] ) ) { right = s [ i + 1 ] ; for ( int j = i + 1 ; j < 26 ; j ++ ) { if ( ( s [ i ] ) < ( s [ j ] ) ) { right = ( char ) Math . min ( right , s [ j ] ) ; } } for ( int j = 0 ; j < i ; j ++ ) { System . out . print ( s [ j ] ) ; } System . out . println ( right ) ; return ; } } } }","import java . util . Scanner ; import java . util . Set ; import java . util . HashSet ; import java . util . TreeSet ; import java . util . Iterator ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; String atoz = \" abcdefghijklmnopqrstuvwxyz \" ; for ( String str : s . split ( \" \" ) ) { atoz = atoz . replace ( str , \" \" ) ; } if ( s . length ( ) != 26 ) { System . out . println ( s + atoz . charAt ( 0 ) ) ; return ; } int max = - 1 ; char maxc = ' ▁ ' ; for ( int i = 25 ; i >= 0 ; i -- ) { char tmp = s . charAt ( i ) ; for ( int j = i - 1 ; j >= 0 ; j -- ) { if ( s . charAt ( j ) < tmp ) { if ( max < j ) { max = j ; maxc = tmp ; } } } } if ( max != - 1 ) { System . out . println ( s . substring ( 0 , max ) + maxc ) ; return ; } System . out . println ( - 1 ) ; } }","import java . util . * ; import java . io . * ; import static java . lang . System . in ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; PrintWriter out = new PrintWriter ( System . out ) ; out . println ( help ( s ) ) ; out . flush ( ) ; } static String help ( String s ) { if ( s . equals ( \" zyxwvutsrqponmlkjihgfedcba \" ) ) return \" - 1\" ; char [ ] a = s . toCharArray ( ) ; int [ ] rec = new int [ 26 ] ; Arrays . fill ( rec , - 1 ) ; for ( int i = 0 ; i < a . length ; i ++ ) rec [ a [ i ] - ' a ' ] = i ; if ( a . length < 26 ) { for ( int i = 0 ; i < 26 ; i ++ ) { if ( rec [ i ] == - 1 ) return s + Character . toString ( ( char ) ( i + ' a ' ) ) ; } return \" - 1\" ; } else { for ( int start = 24 ; start >= 0 ; start -- ) { if ( a [ start ] == ' z ' ) continue ; char cur = a [ start ] ; for ( int i = cur - ' a ' + 1 ; i < 26 ; i ++ ) { if ( rec [ i ] > start ) { return s . substring ( 0 , start ) + Character . toString ( ( char ) ( i + ' a ' ) ) ; } } } return \" - 1\" ; } } }"],"bleu":0.431775932982418,"rouge_l":0.501100813644868}
{"id":2,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans += a [ i ] ; } out . println ( ans ) ; out . close ( ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int T = sc . nextInt ( ) ; int [ ] pushes = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { pushes [ i ] = sc . nextInt ( ) ; } int sum = 0 ; int till = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( till > pushes [ i ] ) { sum += ( pushes [ i ] - pushes [ i - 1 ] ) ; } else { sum += T ; } till = pushes [ i ] + T ; } System . out . println ( sum ) ; sc . close ( ) ; } }","import java . io . * ; import java . math . * ; import java . util . * ; public class Main { private static boolean debug = false ; private static boolean elapsed = false ; private static PrintWriter _out = new PrintWriter ( System . out ) ; private static PrintWriter _err = new PrintWriter ( System . err ) ; private void solve ( Scanner sc ) { int N = sc . nextInt ( ) ; long T = sc . nextInt ( ) ; long [ ] t = new long [ N ] ; long sum = 0 ; for ( int i = 0 ; i < N ; ++ i ) { t [ i ] = sc . nextInt ( ) ; if ( i > 0 ) { sum += Math . min ( t [ i ] - t [ i - 1 ] , T ) ; } } _out . println ( sum + T ) ; } private static BigInteger C ( long n , long r ) { BigInteger res = BigInteger . ONE ; for ( long i = n ; i > n - r ; -- i ) { res = res . multiply ( BigInteger . valueOf ( i ) ) ; } for ( long i = r ; i > 1 ; -- i ) { res = res . divide ( BigInteger . valueOf ( i ) ) ; } return res ; } private static BigInteger P ( long n , long r ) { BigInteger res = BigInteger . ONE ; for ( long i = n ; i > n - r ; -- i ) { res = res . multiply ( BigInteger . valueOf ( i ) ) ; } return res ; } public static void main ( String [ ] args ) { long S = System . currentTimeMillis ( ) ; Scanner sc = new Scanner ( System . in ) ; new Main ( ) . solve ( sc ) ; _out . flush ( ) ; long G = System . currentTimeMillis ( ) ; if ( elapsed ) { _err . println ( ( G - S ) + \" ms \" ) ; } _err . flush ( ) ; } }","import java . util . * ; public class Main { int ni ( ) { return cin . nextInt ( ) ; } String nl ( ) { return cin . nextLine ( ) ; } void println ( String str ) { System . out . println ( str ) ; } void print ( String str ) { System . out . print ( str ) ; } static final int MOD = 1000000007 ; Scanner cin = new Scanner ( System . in ) ; String output ; public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } public void run ( ) { input ( ) ; long res = solve ( ) ; output = res + \" \" ; println ( output ) ; } int N , T ; int [ ] times ; void input ( ) { N = ni ( ) ; T = ni ( ) ; times = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { times [ i ] = ni ( ) ; } } long solve ( ) { long sum = T ; long preEnd = T ; for ( int i = 1 ; i < N ; i ++ ) { if ( times [ i ] >= preEnd ) { preEnd = times [ i ] + T ; sum += T ; } else { long diff = times [ i ] - times [ i - 1 ] ; preEnd += diff ; sum += diff ; } } return sum ; } }","import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; Scanner in = new Scanner ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; TaskC solver = new TaskC ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class TaskC { public void solve ( int testNumber , Scanner in , PrintWriter out ) { int n = in . nextInt ( ) ; long time = in . nextLong ( ) ; long [ ] t = new long [ n ] ; long ans = time ; for ( int i = 0 ; i < n ; ++ i ) t [ i ] = in . nextLong ( ) ; for ( int i = 1 ; i < n ; ++ i ) { if ( t [ i ] - t [ i - 1 ] > time ) ans += time ; else ans += t [ i ] - t [ i - 1 ] ; } out . println ( ans ) ; } } }","import java . io . * ; import java . util . * ; class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; int tt = sc . nextInt ( ) ; int [ ] t = new int [ n ] ; for ( int i = 0 ; i < n ; ++ i ) t [ i ] = sc . nextInt ( ) ; int ans = 0 ; int c = t [ 0 ] ; for ( int i = 1 ; i < n ; ++ i ) { ans += Math . min ( tt , t [ i ] - c ) ; c = t [ i ] ; } out . println ( ans + tt ) ; out . close ( ) ; } public static PrintWriter out ; public static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"bleu":0.9607353784029206,"rouge_l":0.9068648885002185}
{"id":3,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; out . println ( n ) ; out . flush ( ) ; } static int l_min ( int [ ] a ) { Arrays . sort ( a ) ; return a [ 0 ] ; } static int l_max ( int [ ] a ) { int l = a . length ; Arrays . sort ( a ) ; return a [ l - 1 ] ; } public static PrintWriter out ; public static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scn = new Scanner ( System . in ) ; int num = scn . nextInt ( ) ; int ans = 0 ; if ( num % 2 == 0 ) { ans = num - 1 ; } else { ans = num + 1 ; } System . out . println ( ans ) ; } }","import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . io . UncheckedIOException ; import java . util . StringTokenizer ; import java . io . IOException ; import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . InputStream ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; LightScanner in = new LightScanner ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; B solver = new B ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class B { public void solve ( int testNumber , LightScanner in , PrintWriter out ) { int n = in . ints ( ) ; if ( n % 2 == 0 ) { out . println ( n - 1 ) ; } else { out . println ( n + 1 ) ; } } } static class LightScanner { private BufferedReader reader = null ; private StringTokenizer tokenizer = null ; public LightScanner ( InputStream in ) { reader = new BufferedReader ( new InputStreamReader ( in ) ) ; } public String string ( ) { if ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } } return tokenizer . nextToken ( ) ; } public int ints ( ) { return Integer . parseInt ( string ( ) ) ; } } }","import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; long n = Long . parseLong ( scanner . nextLine ( ) ) ; if ( n % 2 == 0 ) { System . out . println ( n - 1 ) ; } else { System . out . println ( n + 1 ) ; } } }","import java . util . Scanner ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; if ( n % 2 == 0 ) { System . out . println ( n - 1 ) ; } else { System . out . println ( n + 1 ) ; } } }","class Main { public static void main ( String [ ] a ) { int n = new java . util . Scanner ( System . in ) . nextInt ( ) ; System . out . println ( n % 2 == 0 ? n - 1 : n + 1 ) ; } }"],"bleu":0.3891479491777044,"rouge_l":0.6172565556865056}
{"id":4,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter pw = new PrintWriter ( System . out ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int N = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ M ] ; for ( int i = 0 ; i < M ; i ++ ) { a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int [ ] b = new int [ M ] ; for ( int i = 0 ; i < M ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < M ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int ans = 0 ; for ( int i = 0 ; i < M ; i ++ ) { for ( int j = 0 ; j < M ; j ++ ) { if ( b [ i ] % 2 == 0 ) { ans ++ ; } } } pw . println ( ans ) ; pw . flush ( ) ; pw . close ( ) ; } }"],"references":["import java . lang . reflect . Array ; import java . util . * ; public class Main { private void print ( ArrayList < Integer > arrayMid ) { StringBuilder Mid = new StringBuilder ( ) ; for ( int i = 0 ; i < arrayMid . size ( ) ; i ++ ) { Mid . append ( arrayMid . get ( i ) + \" ▁ \" ) ; } System . out . println ( Mid ) ; } private void Even ( int K , int N ) { ArrayList < Integer > arrayMid = new ArrayList < Integer > ( N ) ; arrayMid . add ( 0 , K \/ 2 ) ; for ( int i = 1 ; i < N ; i ++ ) { arrayMid . add ( i , K ) ; } print ( arrayMid ) ; } private void Odd ( int K , int N ) { ArrayList < Integer > arrayMid = new ArrayList < Integer > ( N ) ; for ( int i = 0 ; i < N ; i ++ ) { arrayMid . add ( i , ( K + 1 ) \/ 2 ) ; } for ( int i = 0 ; i < N \/ 2 ; i ++ ) { if ( arrayMid . get ( arrayMid . size ( ) - 1 ) == 1 ) arrayMid . remove ( arrayMid . size ( ) - 1 ) ; else { arrayMid . set ( ( arrayMid . size ( ) - 1 ) , arrayMid . get ( arrayMid . size ( ) - 1 ) - 1 ) ; for ( int j = arrayMid . size ( ) ; j < N ; j ++ ) arrayMid . add ( j , K ) ; } } print ( arrayMid ) ; } private void Judge ( int K , int N ) { if ( K % 2 == 0 ) Even ( K , N ) ; else Odd ( K , N ) ; } public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int [ ] in = new int [ 2 ] ; for ( int i = 0 ; i < 2 ; i ++ ) { in [ i ] = input . nextInt ( ) ; } Main myEncyclopedia = new Main ( ) ; myEncyclopedia . Judge ( in [ 0 ] , in [ 1 ] ) ; input . close ( ) ; } }","import java . io . PrintWriter ; import java . util . Deque ; import java . util . ArrayDeque ; import java . util . Scanner ; class Main { static int K ; static int N ; static void dec ( Deque < Integer > list ) { if ( list . peekLast ( ) == 1 ) list . pollLast ( ) ; else { list . addLast ( list . pollLast ( ) - 1 ) ; while ( list . size ( ) < N ) list . addLast ( K ) ; } } public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; K = scan . nextInt ( ) ; N = scan . nextInt ( ) ; Deque < Integer > ans = new ArrayDeque < > ( ) ; if ( K % 2 == 0 ) { ans . add ( K \/ 2 ) ; while ( N -- > 1 ) ans . add ( K ) ; } else { for ( int i = 0 ; i < N ; ++ i ) ans . add ( ( K + 1 ) \/ 2 ) ; for ( int i = 0 ; i < ( N \/ 2 ) ; ++ i ) dec ( ans ) ; } PrintWriter pw = new PrintWriter ( System . out ) ; StringBuffer sb = new StringBuffer ( ) ; for ( int i : ans ) if ( i != 0 ) sb . append ( i + \" ▁ \" ) ; System . out . println ( sb . toString ( ) ) ; } }","import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . List ; import java . util . Scanner ; import java . util . ArrayList ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; Scanner in = new Scanner ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; TaskE solver = new TaskE ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class TaskE { public void solve ( int testNumber , Scanner in , PrintWriter out ) { int k = in . nextInt ( ) ; int n = in . nextInt ( ) ; if ( k % 2 == 0 ) { out . print ( k \/ 2 ) ; for ( int i = 1 ; i < n ; ++ i ) { out . print ( \" ▁ \" + k ) ; } out . println ( ) ; } else { List < Integer > res = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; ++ i ) res . add ( ( k + 1 ) \/ 2 ) ; int cnt = n \/ 2 ; for ( int i = 0 ; i < cnt ; ++ i ) { if ( res . get ( res . size ( ) - 1 ) > 1 ) { res . set ( res . size ( ) - 1 , res . get ( res . size ( ) - 1 ) - 1 ) ; while ( res . size ( ) < n ) res . add ( k ) ; } else { res . remove ( res . size ( ) - 1 ) ; } } for ( int i = 0 ; i < res . size ( ) ; ++ i ) { out . print ( res . get ( i ) ) ; if ( i < res . size ( ) - 1 ) { out . print ( \" ▁ \" ) ; } else { out . println ( ) ; } } } } } }","import java . util . Arrays ; import java . util . Scanner ; public class Main { static int n , k ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; k = sc . nextInt ( ) ; n = sc . nextInt ( ) ; if ( ( k & 1 ) == 0 ) { System . out . print ( k \/ 2 ) ; for ( int i = 1 ; i < n ; i ++ ) { System . out . print ( \" ▁ \" ) ; System . out . print ( k ) ; } return ; } int [ ] ns = new int [ n ] ; Arrays . fill ( ns , ( k + 1 ) \/ 2 ) ; int cnt = n \/ 2 ; int trg = n - 1 ; for ( int i = 0 ; i < cnt ; i ++ ) { while ( trg >= 0 && ns [ trg ] == 0 ) trg -- ; if ( ns [ trg ] == 1 ) { ns [ trg ] = 0 ; continue ; } ns [ trg ] -- ; for ( int j = trg + 1 ; j < n ; j ++ ) { ns [ j ] = k ; trg ++ ; } } for ( int n : ns ) { if ( n != 0 ) { System . out . print ( n ) ; System . out . print ( \" ▁ \" ) ; } } } }","import java . util . * ; import java . io . * ; public class Main { private static void Even ( int K , int N , PrintWriter output ) { output . print ( K \/ 2 ) ; for ( int i = 1 ; i < N ; ++ i ) output . print ( \" ▁ \" + K ) ; output . println ( ) ; } private static void Odd ( int K , int N , PrintWriter output ) { ArrayList < Integer > arrayMid = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < N ; ++ i ) arrayMid . add ( i , ( K + 1 ) \/ 2 ) ; for ( int i = 0 ; i < N \/ 2 ; ++ i ) { if ( arrayMid . get ( arrayMid . size ( ) - 1 ) <= 1 ) arrayMid . remove ( arrayMid . size ( ) - 1 ) ; else { arrayMid . set ( ( arrayMid . size ( ) - 1 ) , arrayMid . get ( arrayMid . size ( ) - 1 ) - 1 ) ; while ( arrayMid . size ( ) < N ) arrayMid . add ( K ) ; } } for ( int i = 0 ; i < arrayMid . size ( ) ; ++ i ) { output . print ( arrayMid . get ( i ) ) ; if ( i < arrayMid . size ( ) - 1 ) output . print ( \" ▁ \" ) ; else output . println ( ) ; } } public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; Scanner input = new Scanner ( inputStream ) ; PrintWriter output = new PrintWriter ( outputStream ) ; int K = input . nextInt ( ) ; int N = input . nextInt ( ) ; if ( K % 2 == 0 ) Even ( K , N , output ) ; else Odd ( K , N , output ) ; input . close ( ) ; output . close ( ) ; } }"],"bleu":0.5086622432017402,"rouge_l":0.5036520955756799}
{"id":5,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; out . println ( Math . min ( a , b ) ) ; } static int l_min ( int [ ] a ) { Arrays . sort ( a ) ; return a [ 0 ] ; } static int l_max ( int [ ] a ) { int l = a . length ; Arrays . sort ( a ) ; return a [ l - 1 ] ; } public static PrintWriter out ; public static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner reader = new Scanner ( System . in ) ; System . out . println ( reader . nextInt ( ) <= 8 && reader . nextInt ( ) <= 8 ? \" Yay ! \" : \" : ( \" ) ; reader . close ( ) ; } }","import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { PrintWriter out = new PrintWriter ( System . out ) ; InputStreamScanner in = new InputStreamScanner ( System . in ) ; new Main ( ) . solve ( in , out ) ; out . flush ( ) ; } private void solve ( InputStreamScanner in , PrintWriter out ) { int x = in . nextInt ( ) ; int y = in . nextInt ( ) ; if ( x > 8 || y > 8 ) { out . println ( \" : ( \" ) ; } else { out . println ( \" Yay ! \" ) ; } } static class InputStreamScanner { private InputStream in ; private byte [ ] buf = new byte [ 1024 ] ; private int len = 0 ; private int off = 0 ; InputStreamScanner ( InputStream in ) { this . in = in ; } String next ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( int b = skip ( ) ; ! isSpace ( b ) ; ) { sb . appendCodePoint ( b ) ; b = read ( ) ; } return sb . toString ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } char nextChar ( ) { return ( char ) skip ( ) ; } int skip ( ) { for ( int b ; ( b = read ( ) ) != - 1 ; ) { if ( ! isSpace ( b ) ) { return b ; } } return - 1 ; } private boolean isSpace ( int c ) { return c < 33 || c > 126 ; } private int read ( ) { if ( len == - 1 ) { throw new InputMismatchException ( \" End ▁ of ▁ Input \" ) ; } if ( off >= len ) { off = 0 ; try { len = in . read ( buf ) ; } catch ( IOException e ) { throw new InputMismatchException ( e . getMessage ( ) ) ; } if ( len <= 0 ) { return - 1 ; } } return buf [ off ++ ] ; } } }","import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . util . ArrayDeque ; import java . util . Queue ; public class Main { public static void main ( String args [ ] ) throws Exception { Input input = new Input ( ) ; final Data l = input . readLine ( ) ; final int A = l . col [ 0 ] ; final int B = l . col [ 1 ] ; input . close ( ) ; System . out . println ( ( A <= 8 && B <= 8 ) ? \" Yay ! \" : \" : ( \" ) ; } static class Input { public BufferedReader input = new BufferedReader ( new InputStreamReader ( System . in ) ) ; public void close ( ) throws Exception { input . close ( ) ; } public Data readLine ( ) throws Exception { return new Data ( input . readLine ( ) . split ( \" ▁ \" ) ) ; } public Queue < Data > getDataQueue ( int num ) throws Exception { Queue < Data > q ; q = new ArrayDeque < > ( ) ; for ( int i = 0 ; i < num ; i ++ ) { q . offer ( readLine ( ) ) ; } return q ; } public Queue < Integer > getColQueue ( Data data ) { Queue < Integer > q ; q = new ArrayDeque < > ( ) ; for ( int i = 0 ; i < data . col . length ; i ++ ) { q . offer ( data . col [ i ] ) ; } return q ; } } static class Data { public int [ ] col ; public Data ( String [ ] values ) { col = new int [ values . length ] ; for ( int i = 0 ; i < values . length ; i ++ ) { col [ i ] = Integer . parseInt ( values [ i ] ) ; } } } }","import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { new Main ( ) . solveA ( ) ; } private void solveA ( ) { Scanner scanner = null ; int numA = 0 ; int numB = 0 ; try { scanner = new Scanner ( System . in ) ; numA = scanner . nextInt ( ) ; numB = scanner . nextInt ( ) ; if ( numA > 16 \/ 2 || numB > 16 \/ 2 ) { System . out . println ( \" : ( \" ) ; return ; } System . out . println ( \" Yay ! \" ) ; } finally { if ( scanner != null ) { scanner . close ( ) ; } } } private void solveB ( ) { Scanner scanner = null ; int numN = 0 ; int numK = 0 ; int numS = 0 ; try { scanner = new Scanner ( System . in ) ; numN = scanner . nextInt ( ) ; System . out . println ( \" \" ) ; } finally { if ( scanner != null ) { scanner . close ( ) ; } } } private void solveC ( ) { Scanner scanner = null ; int numN = 0 ; int numK = 0 ; int numS = 0 ; try { scanner = new Scanner ( System . in ) ; numN = scanner . nextInt ( ) ; System . out . println ( \" \" ) ; } finally { if ( scanner != null ) { scanner . close ( ) ; } } } private void solveD ( ) { Scanner scanner = null ; int numN = 0 ; int numK = 0 ; int numS = 0 ; try { scanner = new Scanner ( System . in ) ; numN = scanner . nextInt ( ) ; System . out . println ( \" \" ) ; } finally { if ( scanner != null ) { scanner . close ( ) ; } } } }","import java . io . * ; class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; String str = br . readLine ( ) ; int [ ] AB = new int [ 2 ] ; int cont = 0 ; for ( String s : str . split ( \" ▁ \" ) ) { AB [ cont ] = Integer . parseInt ( s ) ; cont ++ ; } if ( AB [ 0 ] <= 8 && AB [ 1 ] <= 8 ) { System . out . println ( \" Yay ! \" ) ; } else { System . out . println ( \" : ( \" ) ; } } }"],"bleu":0.5621984626373968,"rouge_l":0.6395302971487246}
{"id":6,"predictions":["import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; } public static long mod = 17352642619633L ; void run ( FastScanner in , PrintWriter out ) {"],"references":["import java . util . Arrays ; import java . util . Scanner ; public class Main { static long pow ( long b , long n , long mod ) { if ( n == 0 ) return 1 ; if ( n % 2 == 0 ) { long t = pow ( b , n \/ 2 , mod ) ; return t * t % mod ; } return b * pow ( b , n - 1 , mod ) % mod ; } public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a = sc . nextInt ( ) , b = sc . nextInt ( ) ; final int MOD = 1000000007 ; long [ ] as = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { as [ i ] = sc . nextInt ( ) ; } Arrays . sort ( as ) ; if ( a == 1 ) { for ( int i = 0 ; i < n ; i ++ ) { System . out . println ( as [ i ] ) ; } return ; } int cnt = 0 ; while ( cnt < b && as [ 0 ] * a < as [ n - 1 ] ) { as [ 0 ] *= a ; as [ 0 ] %= MOD ; Arrays . sort ( as ) ; cnt ++ ; } b -= cnt ; for ( int i = 0 ; i < b % n ; i ++ ) { as [ 0 ] *= a ; as [ 0 ] %= MOD ; long [ ] nxt = new long [ n ] ; for ( int j = 0 ; j < n - 1 ; j ++ ) { nxt [ j ] = as [ j + 1 ] ; } nxt [ n - 1 ] = as [ 0 ] ; as = nxt ; } for ( int i = 0 ; i < n ; i ++ ) { as [ i ] *= pow ( a , b \/ n , MOD ) ; System . out . println ( as [ i ] % MOD ) ; } } }","import java . util . * ; class Main { public static int mod = 1000000007 ; public static int power ( int a , int b ) { long ret = 1 ; for ( int i = 30 ; i >= 0 ; i -- ) { ret = ( long ) ( 1 ) * ret * ret % mod ; if ( ( b & ( 1 << i ) ) != 0 ) ret = ( long ) ( 1 ) * ret * a % mod ; } return ( int ) ( ret ) ; } public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) , A = sc . nextInt ( ) , B = sc . nextInt ( ) ; long a [ ] = new long [ N ] ; int c [ ] = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) a [ i ] = sc . nextLong ( ) ; if ( A == 1 ) B = 0 ; while ( B != 0 ) { int pos = 0 ; for ( int j = 1 ; j < N ; j ++ ) { if ( a [ pos ] > a [ j ] ) pos = j ; } a [ pos ] *= A ; c [ pos ] ++ ; B -- ; boolean flag = false ; for ( int j = 0 ; j < N ; j ++ ) { if ( c [ j ] == 0 ) { flag = true ; break ; } } if ( ! flag ) break ; } Arrays . sort ( a ) ; int p = power ( A , B \/ N ) ; for ( int i = B % N ; i < N ; i ++ ) System . out . println ( a [ i ] % mod * p % mod ) ; for ( int i = 0 ; i < B % N ; i ++ ) System . out . println ( a [ i ] % mod * p % mod * A % mod ) ; } }"],"bleu":0.012340600220677856,"rouge_l":0.2048283448156082}
{"id":7,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int K = sc . nextInt ( ) ; int [ ] a = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { ans += a [ i ] ; } System . out . println ( ans ) ; } }"],"references":["import java . util . HashMap ; import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int m = in . nextInt ( ) , n = in . nextInt ( ) , N = in . nextInt ( ) ; int ans = 0 , rem = 0 ; while ( N + rem >= m ) { ans += N ; N += rem ; rem = N % m ; N = N \/ m * n ; } System . out . println ( ans + N ) ; } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; public class Main { public static void main ( String [ ] args ) { FastScanner fs = new FastScanner ( System . in ) ; int m = fs . nextInt ( ) ; int n = fs . nextInt ( ) ; int N = fs . nextInt ( ) ; int rest = 0 ; int retrieve = N ; int ans = N ; int count = 0 ; while ( retrieve + rest >= m ) { int temp = retrieve + rest ; rest = temp % m ; retrieve = ( temp \/ m ) * n ; ans += retrieve ; } System . out . println ( ans ) ; } static class FastScanner { private BufferedReader reader = null ; private StringTokenizer tokenizer = null ; public FastScanner ( InputStream in ) { reader = new BufferedReader ( new InputStreamReader ( in ) ) ; tokenizer = null ; } public String next ( ) { if ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( ) ; } public String nextLine ( ) { if ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { return reader . readLine ( ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( \" \\n \" ) ; } public long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } public double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } public int [ ] nextIntArray ( int n ) { int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = nextInt ( ) ; return a ; } public long [ ] nextLongArray ( int n ) { long [ ] a = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = nextLong ( ) ; return a ; } } }","import java . io . * ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { BufferedReader reader = new BufferedReader ( new InputStreamReader ( System . in ) ) ; try { Scanner scan = new Scanner ( System . in ) ; String str_m = scan . next ( ) ; String str_n = scan . next ( ) ; String str_N = scan . next ( ) ; int m = Integer . parseInt ( str_m ) ; int n = Integer . parseInt ( str_n ) ; int N = Integer . parseInt ( str_N ) ; int total = N ; int amari = 0 ; int newPencil = 0 ; while ( true ) { if ( N >= m ) { amari += N % m ; newPencil = N \/ m ; newPencil *= n ; N = newPencil ; total += N ; } else if ( N < m && ( N + amari ) >= m ) { N += amari ; amari = N % m ; newPencil = N \/ m ; newPencil *= n ; N = newPencil ; total += N ; } else { break ; } } System . out . println ( total ) ; } catch ( Exception e ) { System . out . println ( e ) ; } } }","import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { int m = 0 ; int n = 0 ; int N = 0 ; int sum = 0 ; int temp = 0 ; int amari = 0 ; Scanner sc = new Scanner ( System . in ) ; m = sc . nextInt ( ) ; n = sc . nextInt ( ) ; N = sc . nextInt ( ) ; sum = N ; while ( N >= m ) { temp = ( N \/ m ) * n ; amari = N % m ; sum += temp ; N = temp + amari ; } System . out . println ( sum ) ; } }","import java . util . * ; import java . awt . * ; import java . awt . geom . * ; import static java . lang . System . * ; import static java . lang . Math . * ; public class Main { public static void main ( String [ ] $ ) { Scanner sc = new Scanner ( in ) ; int m = sc . nextInt ( ) , n = sc . nextInt ( ) , N = sc . nextInt ( ) ; int ans = 0 , c = 0 , a = N , b = 0 ; while ( c < 10 ) { ans += a ; b += a ; a = ( b \/ m ) * n ; b %= m ; if ( a == 0 ) c ++ ; } out . println ( ans ) ; } }"],"bleu":0.8519895963616881,"rouge_l":0.6810747102996569}
{"id":8,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; long [ ] a = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextLong ( ) ; } long [ ] b = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextLong ( ) ; b [ i ] = sc . nextLong ( ) ; } long ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { ans += Math . abs ( a [ i ] - b [ j ] ) ; } out . println ( ans ) ; out . close ( ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { Scanner scan = new Scanner ( System . in ) ; int w = scan . nextInt ( ) ; int h = scan . nextInt ( ) ; int n = scan . nextInt ( ) ; int x_min = 0 ; int y_min = 0 ; int x_max = w ; int y_max = h ; for ( int i = 0 ; i < n ; i ++ ) { int x = scan . nextInt ( ) ; int y = scan . nextInt ( ) ; int a = scan . nextInt ( ) ; if ( a == 1 ) { if ( x_min < x ) { x_min = x ; } } else if ( a == 2 ) { if ( x_max > x ) { x_max = x ; } } else if ( a == 3 ) { if ( y_min < y ) { y_min = y ; } } else if ( a == 4 ) { if ( y_max > y ) { y_max = y ; } } } int area = 0 ; if ( x_max > x_min && y_max > y_min ) { area = ( x_max - x_min ) * ( y_max - y_min ) ; } System . out . println ( area ) ; } }","import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { @ SuppressWarnings ( \" resource \" ) Scanner scan = new Scanner ( System . in ) ; int w = scan . nextInt ( ) ; int h = scan . nextInt ( ) ; int n = scan . nextInt ( ) ; int [ ] xn = new int [ n ] ; int [ ] yn = new int [ n ] ; int [ ] an = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { xn [ i ] = scan . nextInt ( ) ; yn [ i ] = scan . nextInt ( ) ; an [ i ] = scan . nextInt ( ) ; } int wl = 0 ; int wr = w ; int hl = 0 ; int ht = h ; for ( int i = 0 ; i < n ; i ++ ) { switch ( an [ i ] ) { case 1 : if ( wl < xn [ i ] ) { wl = xn [ i ] ; } break ; case 2 : if ( wr > xn [ i ] ) { wr = xn [ i ] ; } break ; case 3 : if ( hl < yn [ i ] ) { hl = yn [ i ] ; } break ; case 4 : if ( ht > yn [ i ] ) { ht = yn [ i ] ; } break ; } } if ( wr - wl < 0 || ht - hl < 0 ) { System . out . println ( 0 ) ; } else { System . out . println ( ( wr - wl ) * ( ht - hl ) ) ; } } }","import java . io . BufferedReader ; import java . io . InputStreamReader ; public class Main { static final BufferedReader in = new BufferedReader ( new InputStreamReader ( System . in ) ) ; public static void main ( String [ ] args ) throws Exception { int [ ] L1 = getNums ( in . readLine ( ) . split ( \" ▁ \" ) ) ; int [ ] [ ] data = getData ( L1 [ 2 ] ) ; in . close ( ) ; int white_w_start = 0 ; int white_h_start = 0 ; int white_w_end = L1 [ 0 ] ; int white_h_end = L1 [ 1 ] ; for ( int [ ] d : data ) { if ( d [ 2 ] == 1 ) { if ( white_w_start < d [ 0 ] ) white_w_start = d [ 0 ] ; } else if ( d [ 2 ] == 2 ) { if ( white_w_end > d [ 0 ] ) white_w_end = d [ 0 ] ; } else if ( d [ 2 ] == 3 ) { if ( white_h_start < d [ 1 ] ) white_h_start = d [ 1 ] ; } else if ( d [ 2 ] == 4 ) { if ( white_h_end > d [ 1 ] ) white_h_end = d [ 1 ] ; } } if ( ( white_w_end - white_w_start < 0 ) || ( white_h_end - white_h_start ) < 0 ) { System . out . println ( 0 ) ; } else { System . out . println ( ( white_w_end - white_w_start ) * ( white_h_end - white_h_start ) ) ; } } public static int [ ] [ ] getData ( int num ) throws Exception { int [ ] [ ] data = new int [ num ] [ ] ; for ( int i = 0 ; i < num ; i ++ ) { data [ i ] = getNums ( in . readLine ( ) . split ( \" ▁ \" ) ) ; } return data ; } public static int [ ] getNums ( String [ ] vals ) { int [ ] vAry = new int [ vals . length ] ; for ( int i = 0 ; i < vals . length ; i ++ ) { vAry [ i ] = Integer . parseInt ( vals [ i ] ) ; } return vAry ; } }","import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner scan = new Scanner ( System . in ) ; int A = scan . nextInt ( ) ; int B = scan . nextInt ( ) ; int C = scan . nextInt ( ) ; int d [ ] [ ] = new int [ B ] [ A ] ; for ( int i = 0 ; i != B ; i ++ ) { for ( int j = 0 ; j != A ; j ++ ) { d [ i ] [ j ] = 1 ; } } for ( int i = 0 ; i != C ; i ++ ) { int a = scan . nextInt ( ) ; int b = scan . nextInt ( ) ; int c = scan . nextInt ( ) ; if ( c == 1 ) { for ( int j = a - 1 ; j != - 1 ; j -- ) { for ( int k = 0 ; k != B ; k ++ ) { d [ k ] [ j ] = 0 ; } } } if ( c == 2 ) { for ( int j = a ; j != A ; j ++ ) { for ( int k = 0 ; k != B ; k ++ ) { d [ k ] [ j ] = 0 ; } } } if ( c == 3 ) { for ( int j = B - b ; j != B ; j ++ ) { for ( int k = 0 ; k != A ; k ++ ) { d [ j ] [ k ] = 0 ; } } } if ( c == 4 ) { for ( int j = B - b - 1 ; j != - 1 ; j -- ) { for ( int k = 0 ; k != A ; k ++ ) { d [ j ] [ k ] = 0 ; } } } } int ans = 0 ; for ( int j = 0 ; j != B ; j ++ ) { for ( int k = 0 ; k != A ; k ++ ) { if ( d [ j ] [ k ] == 1 ) { ans ++ ; } } } System . out . println ( ans ) ; } }","import java . util . Scanner ; public class Main { private static Scanner sc = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { int w = sc . nextInt ( ) , h = sc . nextInt ( ) , n = sc . nextInt ( ) ; boolean [ ] [ ] sq = new boolean [ h ] [ w ] ; for ( int i = 0 ; i < n ; i ++ ) { int x = sc . nextInt ( ) , y = sc . nextInt ( ) , a = sc . nextInt ( ) ; switch ( a ) { case 1 : for ( int j = 0 ; j < h ; j ++ ) { for ( int k = 0 ; k < x ; k ++ ) { sq [ j ] [ k ] = true ; } } break ; case 2 : for ( int j = 0 ; j < h ; j ++ ) { for ( int k = x ; k < w ; k ++ ) { sq [ j ] [ k ] = true ; } } break ; case 3 : for ( int j = 0 ; j < y ; j ++ ) { for ( int k = 0 ; k < w ; k ++ ) { sq [ j ] [ k ] = true ; } } break ; case 4 : for ( int j = y ; j < h ; j ++ ) { for ( int k = 0 ; k < w ; k ++ ) { sq [ j ] [ k ] = true ; } } break ; } } int ans = 0 ; for ( int i = 0 ; i < h ; i ++ ) { for ( int j = 0 ; j < w ; j ++ ) { if ( ! sq [ i ] [ j ] ) { ans ++ ; } } } System . out . println ( ans ) ; } }"],"bleu":0.44018877265212225,"rouge_l":0.48508946322067586}
{"id":9,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; out . println ( a > b ? \" ABC \" : \" ABD \" ) ; out . flush ( ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) throws Exception { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int L = s . length ( ) ; int same = 0 ; if ( s . charAt ( 0 ) == s . charAt ( L - 1 ) ) { same = 1 ; } if ( ( L + same ) % 2 == 0 ) { System . out . println ( \" Second \" ) ; } else { System . out . println ( \" First \" ) ; } } }","import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . StringTokenizer ; import java . io . IOException ; import java . util . InputMismatchException ; import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . InputStream ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; TaskD solver = new TaskD ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class TaskD { public void solve ( int testNumber , InputReader in , PrintWriter out ) { String s = in . nextString ( ) ; out . println ( ( s . charAt ( 0 ) == s . charAt ( s . length ( ) - 1 ) ) ^ ( s . length ( ) % 2 == 1 ) ? \" First \" : \" Second \" ) ; } } static class InputReader { BufferedReader in ; StringTokenizer tok ; public String nextString ( ) { while ( ! tok . hasMoreTokens ( ) ) { try { tok = new StringTokenizer ( in . readLine ( ) , \" ▁ \" ) ; } catch ( IOException e ) { throw new InputMismatchException ( ) ; } } return tok . nextToken ( ) ; } public InputReader ( InputStream inputStream ) { in = new BufferedReader ( new InputStreamReader ( inputStream ) ) ; tok = new StringTokenizer ( \" \" ) ; } } }","import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) throws Exception { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; String str = br . readLine ( ) ; int cnt [ ] = new int [ 26 ] ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { cnt [ str . charAt ( i ) - ' a ' ] ++ ; } int diff = 0 ; for ( int i = 0 ; i < cnt . length ; i ++ ) { if ( cnt [ i ] > 0 ) ++ diff ; } if ( diff == 2 ) { System . out . println ( \" Second \" ) ; } else { if ( str . charAt ( 0 ) == str . charAt ( str . length ( ) - 1 ) ) { String str1 = ( ( str . length ( ) - 3 ) & 1 ) == 0 ? \" Second \" : \" First \" ; System . out . println ( str1 ) ; } else { String str1 = ( ( str . length ( ) - 2 ) & 1 ) == 0 ? \" Second \" : \" First \" ; System . out . println ( str1 ) ; } } } }","import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; boolean isStrLenEvenNumber = ( s . length ( ) % 2 == 0 ) ; boolean isSameFirstAndLast = ( s . charAt ( 0 ) == ( s . charAt ( s . length ( ) - 1 ) ) ) ; System . out . println ( ( isStrLenEvenNumber && isSameFirstAndLast ) || ( ! isStrLenEvenNumber && ! isSameFirstAndLast ) ? \" First \" : \" Second \" ) ; } }","import java . util . * ; class Main { public static void main ( String args [ ] ) { try ( Scanner sc = new Scanner ( System . in ) ) { String S = sc . next ( ) ; if ( ( S . length ( ) - ( S . charAt ( 0 ) == S . charAt ( S . length ( ) - 1 ) ? 1 : 0 ) ) % 2 == 0 ) { System . out . println ( \" Second \" ) ; } else { System . out . println ( \" First \" ) ; } } } }"],"bleu":0.44267595815018584,"rouge_l":0.5638815034673412}
{"id":10,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter pw = new PrintWriter ( System . out ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int N = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int [ ] b = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < N ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < N ; j ++ ) { for ( int k = 0 ; k < N ; k ++ ) { for ( int k = 0 ; k < N ; k ++ ) { if ( a [ k ] > b [ k ] ) { ans ++ ; break ; } } } } pw . println ( ans ) ; pw . flush ( ) ; } }"],"references":["import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . IOException ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; String s = new String ( br . readLine ( ) ) ; long total = 0 , bit ; int lOprIndex , rOprIndex ; String tmp = new String ( ) ; for ( int i = 0 ; i < Math . pow ( 2 , s . length ( ) - 1 ) ; i ++ ) { lOprIndex = 0 ; rOprIndex = 1 ; for ( bit = i ; bit != 0 ; bit = bit >> 1 ) { if ( ( bit & 1 ) == 1 ) { tmp = s . substring ( lOprIndex , rOprIndex ) ; total += Long . parseLong ( tmp . toString ( ) ) ; lOprIndex = rOprIndex ; } rOprIndex ++ ; } tmp = s . substring ( lOprIndex , s . length ( ) ) ; total += Long . parseLong ( tmp . toString ( ) ) ; } System . out . println ( total ) ; } }","import java . util . Arrays ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; char [ ] c = sc . next ( ) . toCharArray ( ) ; int N = c . length ; long ans = 0L ; for ( int i = 0 ; i < ( 1 << N - 1 ) ; i ++ ) { long sub_sum = 0 ; int offset = 0 ; for ( int j = 0 ; j < N - 1 ; j ++ ) { if ( ( 1 & i >> j ) == 1 ) { char [ ] sub = Arrays . copyOfRange ( c , offset , j + 1 ) ; sub_sum += deci_sum ( sub ) ; offset = j + 1 ; } } char [ ] sub = Arrays . copyOfRange ( c , offset , c . length ) ; sub_sum += deci_sum ( sub ) ; ans += sub_sum ; } System . out . println ( ans ) ; sc . close ( ) ; } public static long deci_sum ( char [ ] number ) { String str = new String ( number ) ; return Long . parseLong ( str ) ; } }","import java . io . PrintStream ; import java . util . Arrays ; import java . util . Scanner ; import static java . util . stream . Collectors . * ; import static java . util . stream . IntStream . range ; public class Main { final static PrintStream so = System . out ; final static Scanner sc = new Scanner ( System . in ) ; static final String PLUS = \" p \" ; public static void main ( String [ ] args ) { int [ ] digits = sc . next ( ) . chars ( ) . map ( i -> i - '0' ) . toArray ( ) ; int minBits = 0 ; int supBits = 1 << ( digits . length - 1 ) ; long ans = range ( minBits , supBits ) . mapToObj ( bits -> toExprOfAddition ( digits , bits ) ) . mapToLong ( expr -> eval ( expr ) ) . sum ( ) ; so . println ( ans ) ; } static String toExprOfAddition ( int [ ] nums , int bits ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < nums . length ; i ++ ) { sb . append ( nums [ i ] ) ; if ( ( bits >> i & 1 ) == 1 ) { sb . append ( PLUS ) ; } } return sb . toString ( ) ; } static long eval ( String exprOfAddition ) { return Arrays . stream ( exprOfAddition . split ( PLUS ) ) . mapToLong ( Long :: parseLong ) . sum ( ) ; } }","import java . util . Scanner ; public class Main { private static long calc ( String s , boolean [ ] ifplus , int i ) { if ( i == s . length ( ) - 1 ) { long ans = 0 ; int before = - 1 ; for ( int j = 0 ; j < s . length ( ) - 1 ; j ++ ) { if ( ifplus [ j ] ) { ans += Long . parseLong ( s . substring ( before + 1 , j + 1 ) ) ; before = j ; } } ans += Long . parseLong ( s . substring ( before + 1 ) ) ; return ans ; } boolean [ ] next1 = new boolean [ s . length ( ) - 1 ] ; boolean [ ] next2 = new boolean [ s . length ( ) - 1 ] ; for ( int j = 0 ; j < i ; j ++ ) { next1 [ j ] = ifplus [ j ] ; next2 [ j ] = ifplus [ j ] ; } next1 [ i ] = true ; next2 [ i ] = false ; return calc ( s , next1 , i + 1 ) + calc ( s , next2 , i + 1 ) ; } public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; boolean [ ] tmp = new boolean [ s . length ( ) - 1 ] ; System . out . println ( calc ( s , tmp , 0 ) ) ; sc . close ( ) ; } }","import java . io . PrintStream ; import java . util . Scanner ; public class Main { private static final PrintStream so = System . out ; private static final Scanner sc = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { String s = sc . next ( ) ; int len = s . length ( ) ; long ans = 0 ; for ( int i = 0 ; i < ( 1 << len - 1 ) ; i ++ ) { ans += sumOf ( s , i ) ; } so . println ( ans ) ; } static long sumOf ( String s , int bits ) { long sum = 0 ; long temp = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { int digit = s . charAt ( i ) - '0' ; temp += digit ; if ( ( ( bits >> i ) & 1 ) == 1 ) { sum += temp ; temp = 0 ; } else { if ( i != s . length ( ) - 1 ) { temp *= 10 ; } } } sum += temp ; return sum ; } }"],"bleu":0.4292599623966635,"rouge_l":0.4541465908122793}
{"id":11,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { st = new StringTokenizer ( br . readLine ( ) ) ; a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { b [ j ] = Math . min ( b [ i ] , b [ j ] ) ; } } System . out . println ( count ) ; } }"],"references":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long length [ ] = { sc . nextInt ( ) , sc . nextInt ( ) } ; String st [ ] = { sc . next ( ) , sc . next ( ) } ; long gcd = gcd ( length [ 0 ] , length [ 1 ] ) ; boolean ok = true ; for ( int i = 0 ; i < gcd ; i ++ ) { if ( st [ 0 ] . charAt ( ( int ) ( length [ 0 ] \/ gcd * i ) ) != st [ 1 ] . charAt ( ( int ) ( length [ 1 ] \/ gcd * i ) ) ) { ok = false ; break ; } } System . out . println ( ok ? length [ 0 ] * length [ 1 ] \/ gcd : - 1 ) ; } public static long gcd ( long a , long b ) { return b == 0 ? a : gcd ( b , a % b ) ; } }","import static java . lang . Integer . parseInt ; import static java . lang . Long . parseLong ; import static java . lang . System . exit ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . StringTokenizer ; public class Main { static int gcd ( int a , int b ) { return b == 0 ? a : gcd ( b , a % b ) ; } static void solve ( ) throws Exception { int n = scanInt ( ) , m = scanInt ( ) ; String s = scanString ( ) , t = scanString ( ) ; int g = gcd ( n , m ) ; int ng = n \/ g , mg = m \/ g ; for ( int i = 0 ; i < g ; i ++ ) { if ( s . charAt ( ng * i ) != t . charAt ( mg * i ) ) { out . print ( - 1 ) ; return ; } } out . print ( ( long ) n * mg ) ; } static int scanInt ( ) throws IOException { return parseInt ( scanString ( ) ) ; } static long scanLong ( ) throws IOException { return parseLong ( scanString ( ) ) ; } static String scanString ( ) throws IOException { while ( tok == null || ! tok . hasMoreTokens ( ) ) { tok = new StringTokenizer ( in . readLine ( ) ) ; } return tok . nextToken ( ) ; } static BufferedReader in ; static PrintWriter out ; static StringTokenizer tok ; public static void main ( String [ ] args ) { try { in = new BufferedReader ( new InputStreamReader ( System . in ) ) ; out = new PrintWriter ( System . out ) ; solve ( ) ; in . close ( ) ; out . close ( ) ; } catch ( Throwable e ) { e . printStackTrace ( ) ; exit ( 1 ) ; } } }","import java . util . * ; import static java . lang . System . * ; public class Main { static Scanner sc = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { long N = ni ( ) ; long M = ni ( ) ; String S = ns ( ) ; String T = ns ( ) ; long L = lcm ( N , M ) ; Map < Integer , Character > map = new HashMap < > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { int index = ( int ) ( L \/ N ) * i + 1 ; map . put ( index , S . charAt ( i ) ) ; } boolean flag = true ; for ( int i = 0 ; i < M ; i ++ ) { int index = ( int ) ( L \/ M ) * i + 1 ; if ( map . containsKey ( index ) && T . charAt ( i ) != map . get ( index ) ) { flag = false ; break ; } } if ( flag ) { out . println ( L ) ; } else { out . println ( - 1 ) ; } } public static long gcd ( long m , long n ) { if ( m < n ) return gcd ( n , m ) ; if ( n == 0 ) return m ; return gcd ( n , m % n ) ; } public static long lcm ( long m , long n ) { return m * ( n \/ gcd ( m , n ) ) ; } static int ni ( ) { return sc . nextInt ( ) ; } static long nl ( ) { return sc . nextLong ( ) ; } static String ns ( ) { return sc . next ( ) ; } static int [ ] niarr ( int N ) { int [ ] a = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } return a ; } static long [ ] nlarr ( int N ) { long [ ] a = new long [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { a [ i ] = sc . nextLong ( ) ; } return a ; } }","import java . util . HashMap ; import java . util . Scanner ; public class Main { public static long gcd ( long a , long b ) { if ( a < b ) { return gcd ( b , a ) ; } else { if ( b == 0 ) { return a ; } else { return gcd ( b , a % b ) ; } } } public static void main ( String [ ] args ) { final Scanner scanner = new Scanner ( System . in ) ; long N = scanner . nextLong ( ) ; long M = scanner . nextLong ( ) ; String s = scanner . next ( ) ; String t = scanner . next ( ) ; final HashMap < Long , String > mapping = new HashMap < > ( ) ; final long length = N * M \/ gcd ( N , M ) ; final long k1 = length \/ N ; final long k2 = length \/ M ; for ( int j = 0 ; j < M ; ++ j ) { mapping . put ( j * k2 , String . valueOf ( t . charAt ( j ) ) ) ; } for ( int i = 0 ; i < N ; ++ i ) { long currentPos = i * k1 ; if ( ! mapping . containsKey ( currentPos ) ) { mapping . put ( currentPos , String . valueOf ( s . charAt ( i ) ) ) ; } else if ( ! mapping . get ( currentPos ) . equals ( String . valueOf ( s . charAt ( i ) ) ) ) { System . out . println ( - 1 ) ; return ; } } System . out . println ( length ) ; } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . UncheckedIOException ; import java . util . StringTokenizer ; class Main { public static void main ( String [ ] args ) { SC sc = new SC ( System . in ) ; int s = sc . nextInt ( ) ; int t = sc . nextInt ( ) ; String a = sc . next ( ) ; String b = sc . next ( ) ; int gcdd = ( int ) gcd ( a . length ( ) , b . length ( ) ) ; for ( int i = 0 ; i < gcdd ; i ++ ) { if ( a . charAt ( s \/ gcdd * i ) != b . charAt ( t \/ gcdd * i ) ) { System . out . println ( - 1 ) ; System . exit ( 0 ) ; } } System . out . println ( lcm ( a . length ( ) , b . length ( ) ) ) ; } public static long lcm ( long m , long n ) { return m \/ gcd ( m , n ) * n ; } public static long gcd ( long m , long n ) { if ( m < n ) return gcd ( n , m ) ; if ( n == 0 ) return m ; return gcd ( n , m % n ) ; } static class SC { private BufferedReader reader = null ; private StringTokenizer tokenizer = null ; public SC ( InputStream in ) { reader = new BufferedReader ( new InputStreamReader ( in ) ) ; } public String next ( ) { if ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } } return tokenizer . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } public long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } } }"],"bleu":0.49316806106355104,"rouge_l":0.5101773294355567}
{"id":12,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int K = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { ans += Math . abs ( sc . nextInt ( ) ) ; } System . out . println ( ans ) ; } }"],"references":["import java . util . HashSet ; import java . util . Scanner ; import java . util . Set ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; Set < Integer > set = new HashSet < > ( ) ; set . add ( sc . nextInt ( ) ) ; set . add ( sc . nextInt ( ) ) ; set . add ( sc . nextInt ( ) ) ; System . out . println ( set . size ( ) ) ; } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . OutputStream ; import java . io . PrintWriter ; import java . util . StringTokenizer ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; Task solver = new Task ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class Task { public void solve ( int testNumber , InputReader in , PrintWriter out ) { int a = in . nextInt ( ) ; int b = in . nextInt ( ) ; int c = in . nextInt ( ) ; if ( a == b && b == c ) { out . println ( \"1\" ) ; } else if ( ( ( a == b || a == c ) && b != c ) || ( ( b == c || b == a ) && c != a ) ) { out . println ( \"2\" ) ; } else { out . println ( \"3\" ) ; } } } static class InputReader { public BufferedReader reader ; public StringTokenizer tokenizer ; public InputReader ( InputStream stream ) { reader = new BufferedReader ( new InputStreamReader ( stream ) , 32768 ) ; tokenizer = null ; } public String next ( ) { while ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } public double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } } }","import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; Set < Integer > set = new HashSet < > ( ) ; set . add ( sc . nextInt ( ) ) ; set . add ( sc . nextInt ( ) ) ; set . add ( sc . nextInt ( ) ) ; System . out . println ( set . size ( ) ) ; } }","import java . util . * ; class Main { static Scanner sc = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { HashSet < Integer > set = new HashSet < > ( ) ; for ( int i = 0 ; i < 3 ; i ++ ) { set . add ( sc . nextInt ( ) ) ; } System . out . println ( set . size ( ) ) ; } }","import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; try { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int count = 1 ; if ( b != a ) { count ++ ; } if ( c != b && c != a ) { count ++ ; } System . out . println ( count ) ; } finally { sc . close ( ) ; } } }"],"bleu":0.7819932299466057,"rouge_l":0.7085050580741852}
{"id":13,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; out . println ( a > b ? \" ABC \" : \" ABD \" ) ; out . flush ( ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; String po = sc . nextLine ( ) ; System . out . println ( po . replace ( \" , \" , \" ▁ \" ) ) ; } }","import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { PrintWriter out = new PrintWriter ( System . out ) ; InputStreamScanner in = new InputStreamScanner ( System . in ) ; new Main ( ) . solve ( in , out ) ; out . flush ( ) ; } private void solve ( InputStreamScanner in , PrintWriter out ) { out . println ( in . next ( ) . replace ( \" , \" , \" ▁ \" ) ) ; } static class InputStreamScanner { private InputStream in ; private byte [ ] buf = new byte [ 1024 ] ; private int len = 0 ; private int off = 0 ; InputStreamScanner ( InputStream in ) { this . in = in ; } String next ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( int b = skip ( ) ; ! isSpace ( b ) ; ) { sb . appendCodePoint ( b ) ; b = read ( ) ; } return sb . toString ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } char nextChar ( ) { return ( char ) skip ( ) ; } int skip ( ) { for ( int b ; ( b = read ( ) ) != - 1 ; ) { if ( ! isSpace ( b ) ) { return b ; } } return - 1 ; } private boolean isSpace ( int c ) { return c < 33 || c > 126 ; } private int read ( ) { if ( len == - 1 ) { throw new InputMismatchException ( \" End ▁ of ▁ Input \" ) ; } if ( off >= len ) { off = 0 ; try { len = in . read ( buf ) ; } catch ( IOException e ) { throw new InputMismatchException ( e . getMessage ( ) ) ; } if ( len <= 0 ) { return - 1 ; } } return buf [ off ++ ] ; } } }","import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { new Main ( ) . solveA ( ) ; } private void solveA ( ) { Scanner scanner = null ; String wk = \" \" ; try { scanner = new Scanner ( System . in ) ; wk = scanner . next ( ) ; System . out . println ( wk . replaceAll ( \" , \" , \" ▁ \" ) ) ; } finally { if ( scanner != null ) { scanner . close ( ) ; } } } private void solveB ( ) { Scanner scanner = null ; int lineAB = 0 ; int lineBC = 0 ; int lineCA = 0 ; try { scanner = new Scanner ( System . in ) ; lineAB = scanner . nextInt ( ) ; System . out . println ( \" \" ) ; } finally { if ( scanner != null ) { scanner . close ( ) ; } } } private void solveC ( ) { Scanner scanner = null ; int lineAB = 0 ; int lineBC = 0 ; int lineCA = 0 ; try { scanner = new Scanner ( System . in ) ; lineAB = scanner . nextInt ( ) ; System . out . println ( \" \" ) ; } finally { if ( scanner != null ) { scanner . close ( ) ; } } } private void solveD ( ) { Scanner scanner = null ; int lineAB = 0 ; int lineBC = 0 ; int lineCA = 0 ; try { scanner = new Scanner ( System . in ) ; lineAB = scanner . nextInt ( ) ; System . out . println ( \" \" ) ; } finally { if ( scanner != null ) { scanner . close ( ) ; } } } }","import java . util . Scanner ; import java . util . Arrays ; import java . lang . Math ; class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String S = scanner . next ( ) ; System . out . println ( S . replace ( \" , \" , \" ▁ \" ) ) ; scanner . close ( ) ; } }","import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; String [ ] words = sc . nextLine ( ) . split ( \" , \" ) ; String haiku = words [ 0 ] + \" ▁ \" + words [ 1 ] + \" ▁ \" + words [ 2 ] ; System . out . println ( haiku ) ; } }"],"bleu":0.5953115140165861,"rouge_l":0.7187165470284251}
{"id":14,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; System . out . println ( Math . min ( a + b , c + d ) ) ; } static int l_min ( int [ ] a ) { Arrays . sort ( a ) ; return a [ 0 ] ; } static int l_max ( int [ ] a ) { int l = a . length ; Arrays . sort ( a ) ; return a [ l - 1 ] ; } static int l_max ( int [ ] a ) { int l = a . length ; Arrays . sort ( a ) ; return a [ l - 1 ] ; } public static PrintWriter out ; public static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long X = sc . nextLong ( ) ; long Y = sc . nextLong ( ) ; int ans = 0 ; while ( X <= Y ) { X *= 2 ; ans ++ ; } System . out . println ( ans ) ; } }","import java . util . * ; public class Main { private static void solve ( long X , long Y ) { int length = 1 ; while ( 2 * X <= Y ) { X = 2 * X ; length ++ ; } System . out . print ( length ) ; } public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; long X = input . nextLong ( ) ; long Y = input . nextLong ( ) ; input . close ( ) ; solve ( X , Y ) ; } }","import java . util . Scanner ; public class Main { public void main ( Scanner sc ) { long x = sc . nextLong ( ) ; long y = sc . nextLong ( ) ; int cnt = 0 ; for ( ; x <= y ; cnt ++ ) { x *= 2 ; } System . out . println ( cnt ) ; } public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; new Main ( ) . main ( sc ) ; sc . close ( ) ; } }","import java . util . ArrayList ; import java . util . Collections ; import java . util . HashMap ; import java . util . Map ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { try ( Scanner sc = new Scanner ( System . in ) ; ) { new Main ( ) . solve ( sc ) ; } } void solve ( Scanner sc ) { long x = sc . nextLong ( ) ; long y = sc . nextLong ( ) ; int ans = 0 ; while ( x <= y ) { x *= 2l ; ans ++ ; } System . out . println ( ans ) ; } }","import java . util . Arrays ; import java . util . List ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String line = sc . nextLine ( ) ; List < String > lines = Arrays . asList ( line . split ( \" ▁ \" ) ) ; Long x = Long . parseLong ( lines . get ( 0 ) ) ; Long y = Long . parseLong ( lines . get ( 1 ) ) ; Long ans = ( long ) 0 ; while ( x <= y ) { ans ++ ; x = x * 2 ; } System . out . println ( ans ) ; } }"],"bleu":0.18340983258783988,"rouge_l":0.37166793602437165}
{"id":15,"predictions":["import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; } public static long mod = 17352642619633L ; void run ( FastScanner in , PrintWriter out ) {"],"references":["import java . util . ArrayList ; import java . util . List ; import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { new Thread ( null , ( ) -> { int n ; int k ; List < Integer > as = new ArrayList < > ( ) ; try ( Scanner sc = new Scanner ( System . in ) ) { n = sc . nextInt ( ) ; k = sc . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { as . add ( sc . nextInt ( ) - 1 ) ; } } System . out . println ( new Calculator ( n , k , as ) . calculate ( ) ) ; } , \" \" , 1 << 27 ) . start ( ) ; } } class Calculator { private int k ; private int answer = 0 ; private boolean isCalculate = false ; private List < List < Integer > > lists = new ArrayList < > ( ) ; Calculator ( int n , int k , List < Integer > as ) { this . k = k ; for ( int i = 0 ; i < n ; i ++ ) { this . lists . add ( new ArrayList < > ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { int j = as . get ( i ) ; if ( 0 < i ) { this . lists . get ( j ) . add ( i ) ; } else if ( 0 < j ) { this . answer ++ ; } } } int calculate ( ) { if ( ! this . isCalculate ) { this . dfs ( 0 , 0 ) ; this . isCalculate = true ; } return this . answer ; } private int dfs ( int a , int pre ) { int h = 0 ; for ( int i : this . lists . get ( a ) ) { h = Math . max ( h , this . dfs ( i , a ) ) ; } if ( 0 < pre && h == this . k - 1 ) { h = 0 ; this . answer ++ ; } else { h ++ ; } return h ; } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . ArrayList ; import java . util . List ; import java . util . StringTokenizer ; public class Main implements Runnable { int ans , k ; List < Integer > [ ] r ; int dfs ( int q , int p ) { int h = 0 ; for ( int w : r [ q ] ) { h = Math . max ( h , dfs ( w , q ) + 1 ) ; } if ( h == k - 1 && p != 0 ) { ans ++ ; h = - 1 ; } return h ; } void solve ( ) throws IOException { int n = nextInt ( ) ; k = nextInt ( ) ; r = new List [ n ] ; for ( int i = 0 ; i < n ; i ++ ) r [ i ] = new ArrayList < > ( ) ; ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int q = nextInt ( ) ; if ( i != 0 ) r [ q - 1 ] . add ( i ) ; else if ( q != 1 ) ans ++ ; } dfs ( 0 , 0 ) ; out . println ( ans ) ; } public static void main ( String [ ] args ) { new Thread ( null , new Main ( ) , \" name \" , 1 << 27 ) . start ( ) ; } @ Override public void run ( ) { try { solve ( ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; System . exit ( 1 ) ; } finally { out . close ( ) ; } } BufferedReader in = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter out = new PrintWriter ( System . out ) ; StringTokenizer st ; String nextToken ( ) throws IOException { while ( st == null || ! st . hasMoreTokens ( ) ) st = new StringTokenizer ( in . readLine ( ) ) ; return st . nextToken ( ) ; } int nextInt ( ) throws IOException { return Integer . parseInt ( nextToken ( ) ) ; } } Note : . \/ Main . java uses unchecked or unsafe operations . Note : Recompile with - Xlint : unchecked for details .","import java . util . * ; class Main { private static int N , K ; private static List < Integer > [ ] vec ; private static int ans ; public static void main ( String args [ ] ) { new Thread ( null , ( ) -> { Scanner sc = new Scanner ( System . in ) ; N = sc . nextInt ( ) ; K = sc . nextInt ( ) ; ans = 0 ; vec = new ArrayList [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { vec [ i ] = new ArrayList < > ( 0 ) ; } for ( int i = 0 ; i < N ; i ++ ) { int a = sc . nextInt ( ) - 1 ; if ( i != 0 ) { vec [ a ] . add ( i ) ; } else { if ( a != 0 ) { ans ++ ; } } } dfs ( 0 , 0 ) ; System . out . println ( ans ) ; } , \" \" , 1 << 24 ) . start ( ) ; } private static int dfs ( int v , int pre ) { int hight = 0 ; for ( int j = 0 ; j < vec [ v ] . size ( ) ; j ++ ) { hight = Math . max ( hight , dfs ( vec [ v ] . get ( j ) , v ) ) ; } if ( pre != 0 && hight == K - 1 ) { hight = 0 ; ans ++ ; } else { hight ++ ; } return hight ; } } Note : . \/ Main . java uses unchecked or unsafe operations . Note : Recompile with - Xlint : unchecked for details .","import java . util . ArrayList ; import java . util . Arrays ; import java . util . Scanner ; public class Main { int n , k , cnt ; ArrayList < Integer > [ ] es ; int [ ] parent ; void run ( ) { Scanner sc = new Scanner ( System . in ) ; n = sc . nextInt ( ) ; k = sc . nextInt ( ) ; es = new ArrayList [ n ] ; parent = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) es [ i ] = new ArrayList < > ( ) ; cnt = sc . nextInt ( ) != 1 ? 1 : 0 ; for ( int i = 1 ; i < n ; i ++ ) { int next = sc . nextInt ( ) - 1 ; es [ next ] . add ( i ) ; parent [ i ] = next ; } dfs ( 0 ) ; System . out . println ( cnt ) ; } int dfs ( int p ) { int max = 0 ; for ( int next : es [ p ] ) { max = Math . max ( max , dfs ( next ) ) ; } max ++ ; if ( p == 0 ) return 0 ; debug ( p , max ) ; if ( max == k && parent [ p ] != 0 ) { cnt ++ ; return 0 ; } else { return max ; } } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } } Note : . \/ Main . java uses unchecked or unsafe operations . Note : Recompile with - Xlint : unchecked for details .","import java . util . ArrayList ; import java . util . List ; import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { new Thread ( null , new MyRunnable ( ) , \" \" , 1 << 26 ) . start ( ) ; } } class MyRunnable implements Runnable { @ Override public void run ( ) { int n ; int k ; List < Integer > as = new ArrayList < > ( ) ; try ( Scanner sc = new Scanner ( System . in ) ) { n = sc . nextInt ( ) ; k = sc . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { as . add ( sc . nextInt ( ) - 1 ) ; } } System . out . println ( new Calculator ( n , k , as ) . calculate ( ) ) ; } } class Calculator { private int k ; private int answer = 0 ; private boolean isCalculate = false ; private List < List < Integer > > lists = new ArrayList < > ( ) ; Calculator ( int n , int k , List < Integer > as ) { this . k = k ; for ( int i = 0 ; i < n ; i ++ ) { this . lists . add ( new ArrayList < > ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { int j = as . get ( i ) ; if ( 0 < i ) { this . lists . get ( j ) . add ( i ) ; } else if ( 0 < j ) { this . answer ++ ; } } } int calculate ( ) { if ( ! this . isCalculate ) { this . dfs ( 0 , 0 ) ; this . isCalculate = true ; } return this . answer ; } private int dfs ( int a , int pre ) { int h = 0 ; for ( int i : this . lists . get ( a ) ) { h = Math . max ( h , this . dfs ( i , a ) ) ; } if ( 0 < pre && h == this . k - 1 ) { h = 0 ; this . answer ++ ; } else { h ++ ; } return h ; } }"],"bleu":0.04627842995057263,"rouge_l":0.23783956535634387}
{"id":16,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { for ( int k = 0 ; k < n ; k ++ ) { for ( int k = 0 ; k < n ; k ++ ) { for ( int k = 0 ; k < n ; k ++ ) { if ( a [ k ] < b [ k ] ) { ans ++ ; } } } } } System . out . println ( ans ) ; } }"],"references":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; final int N = sc . nextInt ( ) ; int M = sc . nextInt ( ) ; final int Q = sc . nextInt ( ) ; int [ ] [ ] LR = new int [ N + 1 ] [ N + 1 ] ; int [ ] [ ] sum = new int [ N + 1 ] [ N + 1 ] ; for ( int i = 0 ; i < M ; i ++ ) { int li = sc . nextInt ( ) ; int ri = sc . nextInt ( ) ; LR [ li ] [ ri ] ++ ; } for ( int i = 1 ; i < N + 1 ; i ++ ) { for ( int j = 1 ; j < N + 1 ; j ++ ) { sum [ i ] [ j ] += sum [ i ] [ j - 1 ] + LR [ i ] [ j ] ; } } int [ ] ANS = new int [ Q ] ; for ( int i = 0 ; i < Q ; i ++ ) { int ans = 0 ; int pi = sc . nextInt ( ) ; int qi = sc . nextInt ( ) ; for ( int j = pi ; j <= qi ; j ++ ) { ans += sum [ j ] [ qi ] - sum [ j ] [ pi - 1 ] ; } ANS [ i ] = ans ; } for ( int i = 0 ; i < Q ; i ++ ) System . out . println ( ANS [ i ] ) ; } }","import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int q = sc . nextInt ( ) ; int [ ] L = new int [ m ] ; int [ ] R = new int [ m ] ; int [ ] [ ] map = new int [ n + 1 ] [ n + 1 ] ; for ( int i = 0 ; i < m ; i ++ ) { L [ i ] = sc . nextInt ( ) ; R [ i ] = sc . nextInt ( ) ; map [ L [ i ] ] [ R [ i ] ] ++ ; } int [ ] [ ] sum = new int [ n + 1 ] [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { sum [ i ] [ j ] = sum [ i ] [ j - 1 ] + map [ i ] [ j ] ; } } int [ ] P = new int [ q ] ; int [ ] Q = new int [ q ] ; for ( int i = 0 ; i < q ; i ++ ) { P [ i ] = sc . nextInt ( ) ; Q [ i ] = sc . nextInt ( ) ; long ans = 0 ; for ( int j = P [ i ] ; j <= Q [ i ] ; j ++ ) { ans += sum [ j ] [ Q [ i ] ] - sum [ j ] [ P [ i ] - 1 ] ; } System . out . println ( ans ) ; } } } class Pair implements Comparable { int from ; int end ; int num ; int bango ; @ Override public int compareTo ( Object other ) { Pair otherpair = ( Pair ) other ; return from - otherpair . from ; } }","import java . util . Arrays ; import java . util . Scanner ; public class Main { void run ( ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) , m = sc . nextInt ( ) , q = sc . nextInt ( ) ; int [ ] [ ] lr = new int [ m ] [ 2 ] ; int [ ] [ ] pq = new int [ q ] [ 2 ] ; for ( int i = 0 ; i < m ; i ++ ) { lr [ i ] [ 0 ] = sc . nextInt ( ) ; lr [ i ] [ 1 ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < q ; i ++ ) { pq [ i ] [ 0 ] = sc . nextInt ( ) ; pq [ i ] [ 1 ] = sc . nextInt ( ) ; } int [ ] [ ] board = new int [ n + 2 ] [ n + 2 ] ; for ( int i = 0 ; i < m ; i ++ ) { board [ lr [ i ] [ 1 ] ] [ lr [ i ] [ 0 ] ] += 1 ; } for ( int y = 1 ; y <= n ; y ++ ) for ( int x = 1 ; x <= n ; x ++ ) { board [ y ] [ x ] += board [ y - 1 ] [ x ] + board [ y ] [ x - 1 ] - board [ y - 1 ] [ x - 1 ] ; } for ( int i = 0 ; i < q ; i ++ ) { System . out . println ( query ( pq [ i ] [ 0 ] , pq [ i ] [ 1 ] , board ) ) ; } } int query ( int p , int q , int [ ] [ ] board ) { return board [ q ] [ q ] - board [ q ] [ p - 1 ] - board [ p - 1 ] [ q ] + board [ p - 1 ] [ p - 1 ] ; } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } }","import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int N = scanner . nextInt ( ) ; int M = scanner . nextInt ( ) ; int Q = scanner . nextInt ( ) ; int [ ] L = new int [ M ] ; int [ ] R = new int [ M ] ; for ( int i = 0 ; i < M ; i ++ ) { L [ i ] = scanner . nextInt ( ) ; R [ i ] = scanner . nextInt ( ) ; } int [ ] [ ] count = new int [ N + 1 ] [ N + 1 ] ; for ( int i = 0 ; i < M ; i ++ ) { count [ L [ i ] ] [ R [ i ] ] ++ ; } for ( int i = 1 ; i <= N ; i ++ ) { for ( int j = 0 ; j <= N ; j ++ ) { count [ i ] [ j ] = count [ i ] [ j ] + count [ i - 1 ] [ j ] ; } } for ( int i = 0 ; i <= N ; i ++ ) { for ( int j = 1 ; j <= N ; j ++ ) { count [ i ] [ j ] = count [ i ] [ j ] + count [ i ] [ j - 1 ] ; } } int [ ] p = new int [ Q ] ; int [ ] q = new int [ Q ] ; for ( int i = 0 ; i < Q ; i ++ ) { p [ i ] = scanner . nextInt ( ) ; q [ i ] = scanner . nextInt ( ) ; int ans = count [ q [ i ] ] [ q [ i ] ] + count [ p [ i ] - 1 ] [ p [ i ] - 1 ] - count [ q [ i ] ] [ p [ i ] - 1 ] - count [ p [ i ] - 1 ] [ q [ i ] ] ; System . out . println ( ans ) ; } } }","import java . util . ArrayList ; import java . util . Arrays ; import java . util . PriorityQueue ; import java . util . Scanner ; import java . util . TreeSet ; import org . omg . Messaging . SyncScopeHelper ; public class Main { Scanner sc = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { new Main ( ) ; } public Main ( ) { new ABC106 ( ) . doIt ( ) ; } class ABC106 { void doIt ( ) { int N = sc . nextInt ( ) ; int M = sc . nextInt ( ) ; int Q = sc . nextInt ( ) ; int station [ ] [ ] = new int [ N + 10 ] [ N + 10 ] ; int cnt [ ] [ ] = new int [ N + 10 ] [ N + 10 ] ; for ( int i = 0 ; i < M ; i ++ ) { int L = sc . nextInt ( ) ; int R = sc . nextInt ( ) ; station [ L ] [ R ] ++ ; } for ( int i = N + 1 ; i >= 0 ; i -- ) { for ( int j = 0 ; j < N + 1 ; j ++ ) { station [ i ] [ j ] = station [ i ] [ j ] + station [ i + 1 ] [ j ] ; } } for ( int i = N + 1 ; i >= 0 ; i -- ) { for ( int j = 0 ; j < N + 1 ; j ++ ) { station [ i ] [ j + 1 ] = station [ i ] [ j + 1 ] + station [ i ] [ j ] ; } } for ( int i = 0 ; i < Q ; i ++ ) { int qs = sc . nextInt ( ) ; int qg = sc . nextInt ( ) ; System . out . println ( station [ qs ] [ qg ] ) ; } } } }"],"bleu":0.5529951060608717,"rouge_l":0.5731627248719707}
{"id":17,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { ans += b [ i ] ; } } System . out . println ( ans ) ; } }"],"references":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int po [ ] = new int [ n + 1 ] ; for ( int i = 0 ; i < m ; i ++ ) { po [ sc . nextInt ( ) ] ++ ; } int r = 0 , l = 0 ; for ( int i = x ; i <= n ; i ++ ) { r += po [ i ] ; } for ( int i = 0 ; i <= x ; i ++ ) { l += po [ i ] ; } System . out . println ( Math . min ( r , l ) ) ; } }","import static java . lang . System . * ; import java . util . * ; public class Main { static Scanner sc = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { int n = sc . nextInt ( ) , m = sc . nextInt ( ) , x = sc . nextInt ( ) ; int [ ] ar = new int [ n + 1 ] ; for ( int i = 0 ; i < m ; i ++ ) { int temp = sc . nextInt ( ) ; ar [ temp ] ++ ; } int costL = 0 , costR = 0 ; for ( int i = x ; i >= 0 ; i -- ) costL += ar [ i ] ; for ( int i = x ; i <= n ; i ++ ) costR += ar [ i ] ; out . println ( Math . min ( costL , costR ) ) ; } }","import java . io . * ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader stdin = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int [ ] inputs = Arrays . stream ( stdin . readLine ( ) . split ( \" ▁ \" ) ) . mapToInt ( Integer :: parseInt ) . toArray ( ) ; int [ ] fee = Arrays . stream ( stdin . readLine ( ) . split ( \" ▁ \" ) ) . mapToInt ( Integer :: parseInt ) . toArray ( ) ; long left = Arrays . stream ( fee ) . filter ( i -> i < inputs [ 2 ] ) . count ( ) ; long right = Arrays . stream ( fee ) . filter ( i -> i > inputs [ 2 ] ) . count ( ) ; System . out . println ( Math . min ( left , right ) ) ; } }","import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int [ ] a = new int [ m ] ; int right = 0 ; int left = 0 ; for ( int i = 0 ; i < m ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 1 ; i < x ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( i == a [ j ] ) { left ++ ; } } } for ( int i = x + 1 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( i == a [ j ] ) { right ++ ; } } } if ( left <= right ) { System . out . println ( left ) ; } else { System . out . println ( right ) ; } sc . close ( ) ; } }","import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int M = sc . nextInt ( ) ; int X = sc . nextInt ( ) ; HashSet < Integer > set = new HashSet < > ( M ) ; for ( int i = 0 ; i < M ; i ++ ) set . add ( sc . nextInt ( ) ) ; int forward = 0 , backward = 0 ; for ( int i = X + 1 ; i < N ; i ++ ) if ( set . contains ( i ) ) forward ++ ; for ( int i = X - 1 ; i > 0 ; i -- ) if ( set . contains ( i ) ) backward ++ ; System . out . println ( Math . min ( forward , backward ) ) ; } }"],"bleu":0.7210525545613171,"rouge_l":0.7793863747306189}
{"id":18,"predictions":["import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; } public static long mod = 17352642619633L ; void run ( FastScanner in , PrintWriter out ) {"],"references":["import java . util . * ; public class Main { static ArrayList < Edge > edges [ ] ; static int d [ ] ; static int max ; static int maxt ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; edges = new ArrayList [ N ] ; for ( int i = 0 ; i < N ; i ++ ) edges [ i ] = new ArrayList < Edge > ( ) ; for ( int i = 0 ; i < N - 1 ; i ++ ) { int a = sc . nextInt ( ) - 1 ; int b = sc . nextInt ( ) - 1 ; edges [ a ] . add ( new Edge ( b , 1 ) ) ; edges [ b ] . add ( new Edge ( a , 1 ) ) ; } int s = 0 ; d = new int [ N ] ; Arrays . fill ( d , - 1 ) ; d [ s ] = 0 ; max = 0 ; maxt = - 1 ; dfs ( s ) ; s = maxt ; d = new int [ N ] ; Arrays . fill ( d , - 1 ) ; d [ s ] = 0 ; max = 0 ; maxt = - 1 ; dfs ( s ) ; System . out . printf ( \" % d ▁ % d % n \" , s + 1 , maxt + 1 ) ; } private static void dfs ( int i ) { for ( Edge e : edges [ i ] ) { if ( d [ e . v ] == - 1 ) { d [ e . v ] = d [ i ] + e . w ; if ( d [ e . v ] > max ) { max = d [ e . v ] ; maxt = e . v ; } dfs ( e . v ) ; } } return ; } private static class Edge { int u ; int v ; int w ; Edge ( int v , int w ) { this . u = u ; this . v = v ; this . w = w ; } } } Note : . \/ Main . java uses unchecked or unsafe operations . Note : Recompile with - Xlint : unchecked for details .","import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; edges = new ArrayList [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { edges [ i ] = new ArrayList < Edge > ( ) ; } for ( int i = 0 ; i < n - 1 ; i ++ ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; edges [ a - 1 ] . add ( new Edge ( b - 1 , 1 ) ) ; edges [ b - 1 ] . add ( new Edge ( a - 1 , 1 ) ) ; } int s = 0 ; d = new int [ n ] ; Arrays . fill ( d , - 1 ) ; d [ s ] = 0 ; max = 0 ; maxt = - 1 ; dfs ( s ) ; s = maxt ; d = new int [ n ] ; Arrays . fill ( d , - 1 ) ; d [ s ] = 0 ; max = 0 ; maxt = - 1 ; dfs ( s ) ; System . out . printf ( \" % d ▁ % d % n \" , s + 1 , maxt + 1 ) ; } private static void dfs ( int i ) { for ( Edge e : edges [ i ] ) { if ( d [ e . v ] == - 1 ) { d [ e . v ] = d [ i ] + e . w ; if ( d [ e . v ] > max ) { max = d [ e . v ] ; maxt = e . v ; } dfs ( e . v ) ; } } return ; } private static int max ; private static int maxt ; private static ArrayList < Edge > [ ] edges ; private static int [ ] d ; private static class Edge { int u ; int v ; int w ; Edge ( int v , int w ) { this . u = u ; this . v = v ; this . w = w ; } } } Note : . \/ Main . java uses unchecked or unsafe operations . Note : Recompile with - Xlint : unchecked for details ."],"bleu":0.007533551133665767,"rouge_l":0.1917075591332635}
{"id":19,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int d = sc ."],"references":["import java . util . HashSet ; import java . util . Scanner ; public class Main { void run ( ) { Scanner scan = new Scanner ( System . in ) ; int t = scan . nextInt ( ) ; while ( t -- != 0 ) { long a = scan . nextLong ( ) ; long b = scan . nextLong ( ) ; long c = scan . nextLong ( ) ; long d = scan . nextLong ( ) ; System . out . println ( eval ( a , b , c , d ) ? \" Yes \" : \" No \" ) ; } } boolean eval ( long a , long b , long c , long d ) { if ( b > a || b > d ) return false ; if ( c >= b ) return true ; if ( b - gcd ( b , d ) + ( a % gcd ( b , d ) ) > c ) return false ; else return true ; } long gcd ( long a , long b ) { if ( a % b == 0 ) return b ; return gcd ( b , a % b ) ; } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . StringTokenizer ; public class Main { static long gcd ( long a , long b ) { return b == 0 ? a : gcd ( b , a % b ) ; } public static void main ( String [ ] args ) throws IOException { MyScanner sc = new MyScanner ( ) ; PrintWriter out = new PrintWriter ( System . out ) ; int N = sc . nextInt ( ) ; for ( int i = 0 ; i < N ; i ++ ) { long A = sc . nextLong ( ) ; long B = sc . nextLong ( ) ; long C = sc . nextLong ( ) ; long D = sc . nextLong ( ) ; boolean yes = true ; if ( D < B || A < B ) yes = false ; if ( yes && C < B - 1 ) { long gcd = gcd ( B , D ) ; yes = C >= ( A % gcd ) + B - gcd ; } out . println ( yes ? \" Yes \" : \" No \" ) ; } out . flush ( ) ; } static class MyScanner { private BufferedReader br ; private StringTokenizer tokenizer ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } public String next ( ) { while ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } public long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } } }","import java . util . * ; public class Main { static long gcd ( long x , long y ) { if ( y == 0 ) return x ; return gcd ( y , x % y ) ; } public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; long a , b , c , d ; int t = in . nextInt ( ) ; while ( t -- > 0 ) { a = in . nextLong ( ) ; b = in . nextLong ( ) ; c = in . nextLong ( ) ; d = in . nextLong ( ) ; if ( a < b || d < b ) { System . out . printf ( \" No \\n \" ) ; continue ; } if ( c + 1 >= b ) { System . out . printf ( \" Yes \\n \" ) ; continue ; } long p = gcd ( b , d ) ; if ( ( a - c - 1 ) \/ p - ( a - b ) \/ p > 0 ) System . out . printf ( \" No \\n \" ) ; else System . out . printf ( \" Yes \\n \" ) ; } } }","import java . util . * ; public class Main { public void main ( Scanner sc ) { int t = sc . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { long a = sc . nextLong ( ) ; long b = sc . nextLong ( ) ; long c = sc . nextLong ( ) ; long d = sc . nextLong ( ) ; if ( a < b ) { System . out . println ( \" No \" ) ; } else if ( d < b ) { System . out . println ( \" No \" ) ; } else if ( b <= c ) { System . out . println ( \" Yes \" ) ; } else { long g = gcd ( b , d ) ; long max = b - g + ( a % g ) ; System . out . println ( max <= c ? \" Yes \" : \" No \" ) ; } } } private long gcd ( long a , long b ) { if ( b == 0 ) { return a ; } return gcd ( b , a % b ) ; } public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; new Main ( ) . main ( sc ) ; sc . close ( ) ; } }","import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int T = scan . nextInt ( ) ; long [ ] A = new long [ T ] ; long [ ] B = new long [ T ] ; long [ ] C = new long [ T ] ; long [ ] D = new long [ T ] ; for ( int i = 0 ; i < T ; i ++ ) { A [ i ] = scan . nextLong ( ) ; B [ i ] = scan . nextLong ( ) ; C [ i ] = scan . nextLong ( ) ; D [ i ] = scan . nextLong ( ) ; } scan . close ( ) ; StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < T ; i ++ ) { if ( B [ i ] > A [ i ] || B [ i ] > D [ i ] ) { sb . append ( \" No \" ) ; } else if ( C [ i ] >= B [ i ] - 1 ) { sb . append ( \" Yes \" ) ; } else { long g = gcd ( B [ i ] , D [ i ] ) ; long l = A [ i ] - B [ i ] + 1 ; long r = A [ i ] - C [ i ] - 1 ; long q = 0 ; long k = ( r - q + g ) \/ g - ( l - q + g - 1 ) \/ g ; if ( k > 0 ) { sb . append ( \" No \" ) ; } else { sb . append ( \" Yes \" ) ; } } sb . append ( \" \\n \" ) ; } System . out . print ( sb . toString ( ) ) ; } static long gcd ( long m , long n ) { if ( m < n ) return gcd ( n , m ) ; if ( n == 0 ) return m ; return gcd ( n , m % n ) ; } }"],"bleu":0.16527111567926975,"rouge_l":0.3921703407785991}
{"id":20,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { st = new StringTokenizer ( br . readLine ( ) ) ; a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % k == 0 ) { count ++ ; } } System . out . println ( count ) ; } }"],"references":["import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; if ( k == 1 ) { System . out . println ( 1 ) ; System . out . print ( 1 ) ; return ; } int n = 2 * ( ( k + 3 ) \/ 4 ) ; int curt = n * 2 - k ; int [ ] [ ] mat = new int [ n ] [ n ] ; for ( int r = 0 ; r < n ; r ++ ) { for ( int c = 0 ; c < n ; c ++ ) { if ( r % 2 == 1 && ( r + c ) % n < n - curt ) { mat [ r ] [ c ] = n + ( r + c ) % n ; mat [ r ] [ c ] ++ ; } else { mat [ r ] [ c ] = ( r + c ) % n ; mat [ r ] [ c ] ++ ; } } } int rr = 1 ; System . out . println ( n ) ; for ( int [ ] row : mat ) { int cc = 1 ; for ( int x : row ) { System . out . print ( x ) ; if ( cc < n ) System . out . print ( \" ▁ \" ) ; cc ++ ; } if ( rr < n ) System . out . println ( \" \" ) ; rr ++ ; } } }","import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; if ( k == 1 ) { System . out . println ( 1 ) ; System . out . print ( 1 ) ; return ; } int n = 2 * ( ( k + 3 ) \/ 4 ) ; int curt = n * 2 - k ; int [ ] [ ] mat = new int [ n ] [ n ] ; for ( int r = 0 ; r < n ; r ++ ) { for ( int c = 0 ; c < n ; c ++ ) { if ( r % 2 == 1 && ( r + c ) % n < n - curt ) { mat [ r ] [ c ] = n + ( r + c ) % n ; mat [ r ] [ c ] ++ ; } else { mat [ r ] [ c ] = ( r + c ) % n ; mat [ r ] [ c ] ++ ; } } } System . out . println ( n ) ; for ( int [ ] row : mat ) { for ( int x : row ) { System . out . print ( x + \" ▁ \" ) ; } System . out . println ( \" \" ) ; } } }","import static java . lang . Integer . parseInt ; import static java . lang . Long . parseLong ; import static java . lang . System . exit ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . StringTokenizer ; public class Main { static void solve ( ) throws Exception { int k = scanInt ( ) , n ; if ( k == 1 ) { n = 1 ; } else { n = ( k + 3 ) \/ 4 * 2 ; } out . println ( n ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { int d = ( i + j ) % n ; out . print ( ( d < k - n && j % 2 != 0 ? d + n : d ) + 1 + \" ▁ \" ) ; } out . println ( ) ; } } static int scanInt ( ) throws IOException { return parseInt ( scanString ( ) ) ; } static long scanLong ( ) throws IOException { return parseLong ( scanString ( ) ) ; } static String scanString ( ) throws IOException { while ( tok == null || ! tok . hasMoreTokens ( ) ) { tok = new StringTokenizer ( in . readLine ( ) ) ; } return tok . nextToken ( ) ; } static BufferedReader in ; static PrintWriter out ; static StringTokenizer tok ; public static void main ( String [ ] args ) { try { in = new BufferedReader ( new InputStreamReader ( System . in ) ) ; out = new PrintWriter ( System . out ) ; solve ( ) ; in . close ( ) ; out . close ( ) ; } catch ( Throwable e ) { e . printStackTrace ( ) ; exit ( 1 ) ; } } }","import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; if ( k == 1 ) { System . out . println ( \"1\" ) ; System . out . println ( \"1\" ) ; } else if ( k == 2 ) { System . out . println ( \"2\" ) ; System . out . println ( \"1 ▁ 2\" ) ; System . out . println ( \"2 ▁ 1\" ) ; } else if ( k == 3 ) { System . out . println ( \"2\" ) ; System . out . println ( \"1 ▁ 2\" ) ; System . out . println ( \"3 ▁ 1\" ) ; } else if ( k == 4 ) { System . out . println ( \"2\" ) ; System . out . println ( \"1 ▁ 2\" ) ; System . out . println ( \"3 ▁ 4\" ) ; } else { int cut = 4 - k % 4 ; int n ; int amari ; if ( cut != 4 ) { n = ( k + cut ) \/ 2 ; } else { n = k \/ 2 ; cut = 0 ; } System . out . println ( n ) ; for ( int r = 0 ; r < n ; r ++ ) { for ( int c = 0 ; c < n ; c ++ ) { if ( r % 2 == 0 ) { System . out . print ( ( c + r ) % n + 1 + \" ▁ \" ) ; } else { amari = ( c + r ) % n ; if ( amari == n - 1 && cut >= 1 || amari == n - 2 && cut >= 2 || amari == n - 3 && cut >= 3 ) { System . out . print ( ( c + r ) % n + 1 + \" ▁ \" ) ; } else { System . out . print ( ( c + r ) % n + n + 1 + \" ▁ \" ) ; } } } System . out . println ( ) ; } } } }"],"bleu":0.40197196229864585,"rouge_l":0.44795155887657817}
{"id":21,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] A = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { A [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { ans += A [ i ] ; } System . out . println ( ans ) ; } }"],"references":["import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { int n , s ; s = 0 ; Scanner sc = new Scanner ( System . in ) ; n = sc . nextInt ( ) ; int a [ ] = new int [ n + 1 ] ; a [ 1 ] = sc . nextInt ( ) ; for ( int i = 2 ; i <= n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; for ( int j = 1 ; j < i ; j ++ ) { if ( a [ j ] == a [ i ] ) { s = s + 1 ; break ; } } } System . out . println ( s ) ; } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . OutputStream ; import java . io . PrintWriter ; import java . util . HashSet ; import java . util . Set ; import java . util . StringTokenizer ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; Task solver = new Task ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class Task { public void solve ( int testNumber , InputReader in , PrintWriter out ) { int N = in . nextInt ( ) ; Set < Integer > set = new HashSet < > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { set . add ( in . nextInt ( ) ) ; } out . println ( N - set . size ( ) ) ; } } static class InputReader { public BufferedReader reader ; public StringTokenizer tokenizer ; public InputReader ( InputStream stream ) { reader = new BufferedReader ( new InputStreamReader ( stream ) , 32768 ) ; tokenizer = null ; } public String next ( ) { while ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( ) ; } public char nextChar ( ) { return next ( ) . charAt ( 0 ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } public double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } public long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } } }","import java . util . Arrays ; import java . util . Scanner ; public class Main { private static final int MAX_TYPE = 100000 ; public void solve ( ) { Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) ; int count = 0 ; boolean types [ ] = new boolean [ MAX_TYPE + 1 ] ; Arrays . fill ( types , false ) ; for ( int i = 0 ; i < n ; i ++ ) { int t = in . nextInt ( ) ; if ( types [ t ] ) { count ++ ; } else { types [ t ] = true ; } } in . close ( ) ; System . out . println ( count ) ; } public static void main ( String [ ] args ) { Main main = new Main ( ) ; main . solve ( ) ; } }","import java . util . Map ; import java . util . Scanner ; import java . util . TreeMap ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; Map < Integer , Integer > map = new TreeMap ( ) ; int a = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i < a ; i ++ ) { int m = sc . nextInt ( ) ; if ( map . containsKey ( m ) ) ans ++ ; else map . put ( m , 1 ) ; } System . out . println ( ans ) ; } } Note : . \/ Main . java uses unchecked or unsafe operations . Note : Recompile with - Xlint : unchecked for details .","import java . util . * ; public class Main { public static int [ ] dp ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = Integer . parseInt ( sc . nextLine ( ) ) ; Set < Integer > set = new HashSet < > ( ) ; int A = 0 ; int count = 0 ; for ( int i = 0 ; i < N ; i ++ ) { int B = Integer . parseInt ( sc . nextLine ( ) ) ; set . add ( B ) ; if ( A == set . size ( ) ) { count ++ ; } A = set . size ( ) ; } System . out . println ( count ) ; } }"],"bleu":0.6084563453327526,"rouge_l":0.687833827893175}
{"id":22,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans += a [ i ] ; } out . println ( ans ) ; out . flush ( ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Comparator ; import java . util . PriorityQueue ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int n = Integer . parseInt ( br . readLine ( ) ) ; int [ ] input = new int [ n ] ; String [ ] tmpArray = br . readLine ( ) . split ( \" ▁ \" ) ; for ( int i = 0 ; i < n ; i ++ ) { input [ i ] = Integer . parseInt ( tmpArray [ i ] ) ; } Arrays . sort ( input ) ; int a = 0 ; int b = n - 1 ; int med = input [ n - 1 ] \/ 2 ; for ( int i = 1 ; i < n - 2 ; i ++ ) { if ( Math . abs ( input [ a ] - med ) >= Math . abs ( input [ i ] - med ) ) { a = i ; } } System . out . println ( input [ b ] + \" ▁ \" + input [ a ] ) ; } }","import static java . lang . System . * ; import java . util . Arrays ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( in ) ; int n = sc . nextInt ( ) ; int [ ] num = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) num [ i ] = sc . nextInt ( ) ; Arrays . sort ( num ) ; int [ ] ans = new int [ 2 ] ; Arrays . fill ( ans , - 1 ) ; for ( int i = n - 1 ; i > 0 ; i -- ) { int l = 0 ; int h = i - 1 ; int mid = l ; while ( l < h ) { mid = ( l + h ) \/ 2 ; if ( num [ mid ] < num [ i ] \/ 2 ) l = mid ; else if ( num [ mid ] > num [ i ] \/ 2 ) h = mid ; else break ; if ( l == h - 1 ) { if ( Math . abs ( num [ l ] - num [ i ] \/ 2 ) < Math . abs ( num [ h ] - num [ i ] \/ 2 ) ) mid = l ; else mid = h ; break ; } } if ( ans [ 0 ] == - 1 && ans [ 1 ] == - 1 ) { ans [ 0 ] = num [ i ] ; ans [ 1 ] = num [ mid ] ; break ; } } out . println ( ans [ 0 ] + \" ▁ \" + ans [ 1 ] ) ; return ; } }","import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . Arrays ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; Scanner in = new Scanner ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; DBinomialCoefficients solver = new DBinomialCoefficients ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class DBinomialCoefficients { public void solve ( int testNumber , Scanner in , PrintWriter out ) { int n = in . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = in . nextInt ( ) ; } Arrays . sort ( a ) ; int col = a [ n - 1 ] ; int min = col \/ 2 ; int max = min + ( col % 2 == 0 ? 0 : 1 ) ; out . print ( col ) ; out . print ( ' ▁ ' ) ; int d = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { int cd = Math . min ( Math . abs ( max - a [ i ] ) , Math . abs ( min - a [ i ] ) ) ; if ( cd < d ) { d = cd ; } else { out . println ( a [ i - 1 ] ) ; return ; } } out . println ( a [ n - 1 ] ) ; } } }","import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; TreeSet < Integer > set = new TreeSet < > ( ) ; for ( int i = 0 ; i < n ; ++ i ) { set . add ( sc . nextInt ( ) ) ; } int N = set . last ( ) ; if ( set . contains ( N \/ 2 ) ) { System . out . printf ( \" % d ▁ % d \\n \" , N , N \/ 2 ) ; return ; } int rl = set . lower ( N \/ 2 ) ; int rr = set . higher ( N \/ 2 ) ; int R = rl >= N - rr ? rl : rr ; System . out . printf ( \" % d ▁ % d \\n \" , N , R ) ; } }","import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = sc . nextInt ( ) ; Arrays . sort ( a ) ; System . out . print ( Integer . toString ( a [ n - 1 ] ) + \" ▁ \" ) ; int ans = a [ n - 2 ] ; if ( a [ n - 1 ] % 2 == 0 ) { int target = a [ n - 1 ] \/ 2 ; for ( int i = n - 3 ; i >= 0 ; i -- ) { if ( Math . abs ( target - a [ i ] ) < Math . abs ( target - ans ) ) ans = a [ i ] ; } } else { int t1 = a [ n - 1 ] \/ 2 ; int t2 = a [ n - 1 ] \/ 2 + 1 ; for ( int i = n - 3 ; i >= 0 ; i -- ) { int old = Math . min ( Math . abs ( ans - t1 ) , Math . abs ( ans - t2 ) ) ; int cur = Math . min ( Math . abs ( a [ i ] - t1 ) , Math . abs ( a [ i ] - t2 ) ) ; if ( cur < old ) ans = a [ i ] ; } } System . out . print ( ans ) ; } }"],"bleu":0.5084941187597702,"rouge_l":0.5027156313269111}
{"id":23,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { ans += b [ i ] ; } } System . out . println ( ans ) ; } }"],"references":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] a = new int [ m ] ; for ( int i = 0 ; i < m ; ++ i ) { a [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; int [ ] d = new int [ m - 1 ] ; for ( int i = 0 ; i < m - 1 ; ++ i ) { d [ i ] = a [ i + 1 ] - a [ i ] ; } Arrays . sort ( d ) ; int c = 0 ; for ( int i = 0 ; i < m - n ; ++ i ) { c += d [ i ] ; } System . out . println ( c ) ; } }","import java . io . * ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader bf = new BufferedReader ( new InputStreamReader ( System . in ) ) ; String [ ] str = bf . readLine ( ) . split ( \" ▁ \" ) ; int N = Integer . parseInt ( str [ 0 ] ) , M = Integer . parseInt ( str [ 1 ] ) ; if ( N >= M ) { System . out . println ( \"0\" ) ; return ; } int [ ] X = new int [ M ] ; str = bf . readLine ( ) . split ( \" ▁ \" ) ; for ( int i = 0 ; i < M ; i ++ ) { X [ i ] = Integer . parseInt ( str [ i ] ) ; } Arrays . sort ( X ) ; int [ ] L = new int [ M - 1 ] ; for ( int i = 0 ; i < M - 1 ; i ++ ) { L [ i ] = X [ i + 1 ] - X [ i ] ; } Arrays . sort ( L ) ; int sumL = 0 ; for ( int i = 0 ; i < N - 1 ; i ++ ) { sumL += L [ M - i - 2 ] ; } System . out . println ( X [ M - 1 ] - X [ 0 ] - sumL ) ; } }","import java . util . ArrayList ; import java . util . LinkedList ; import java . util . Scanner ; public class Main { public static int mark_game ( ArrayList < Integer > lenge , int N ) { int result = 0 ; if ( N <= 1 ) { for ( int x : lenge ) { result += x ; } return result ; } lenge . remove ( lenge . size ( ) - 1 ) ; return mark_game ( lenge , N - 1 ) ; } public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int M = sc . nextInt ( ) ; ArrayList < Integer > data = new ArrayList < Integer > ( ) ; ArrayList < Integer > lenge = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < M ; i ++ ) { data . add ( sc . nextInt ( ) ) ; } data . sort ( ( a , b ) -> Integer . compare ( a , b ) ) ; for ( int i = 0 ; i < M - 1 ; i ++ ) { lenge . add ( Math . abs ( data . get ( i ) - data . get ( i + 1 ) ) ) ; } lenge . sort ( ( a , b ) -> Integer . compare ( a , b ) ) ; if ( N >= M ) { System . out . println ( 0 ) ; } else { System . out . println ( mark_game ( lenge , N ) ) ; } sc . close ( ) ; } }","import java . io . InputStream ; import java . io . PrintStream ; import java . util . Arrays ; import java . util . Scanner ; public class Main { InputStream in = System . in ; PrintStream out = System . out ; public void _main ( String [ ] args ) { Scanner sc = new Scanner ( in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] x = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { x [ i ] = sc . nextInt ( ) ; } sc . close ( ) ; Arrays . sort ( x ) ; int [ ] z = new int [ m - 1 ] ; if ( n >= m ) { out . println ( 0 ) ; return ; } for ( int i = 1 ; i < x . length ; i ++ ) { z [ i - 1 ] = ( x [ i ] - x [ i - 1 ] ) ; } Arrays . sort ( z ) ; int ans = x [ x . length - 1 ] - x [ 0 ] ; for ( int i = 0 ; i < n - 1 ; i ++ ) { ans -= z [ z . length - 1 - i ] ; } out . println ( ans ) ; } public static void main ( String [ ] args ) { new Main ( ) . _main ( args ) ; } }","import java . util . * ; public class Main { static Scanner sc = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { int N = sc . nextInt ( ) ; int M = sc . nextInt ( ) ; if ( N >= M ) { System . out . println ( 0 ) ; return ; } int [ ] X = new int [ M ] ; for ( int i = 0 ; i < M ; i ++ ) { X [ i ] = sc . nextInt ( ) ; } Arrays . sort ( X ) ; ArrayList < Integer [ ] > ranking = new ArrayList ( M - 1 ) ; for ( int i = 1 ; i < M ; i ++ ) { int dif = X [ i ] - X [ i - 1 ] ; ranking . add ( new Integer [ ] { i , dif } ) ; } Collections . sort ( ranking , ( x , y ) -> y [ 1 ] - x [ 1 ] ) ; while ( ranking . size ( ) >= N ) ranking . remove ( N - 1 ) ; Collections . sort ( ranking , ( x , y ) -> x [ 0 ] - y [ 0 ] ) ; ranking . add ( 0 , new Integer [ ] { 0 , - 1 } ) ; ranking . add ( new Integer [ ] { M , - 1 } ) ; int sum = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { sum += X [ ranking . get ( i ) [ 0 ] - 1 ] - X [ ranking . get ( i - 1 ) [ 0 ] ] ; } System . out . println ( sum ) ; } } Note : . \/ Main . java uses unchecked or unsafe operations . Note : Recompile with - Xlint : unchecked for details ."],"bleu":0.7039437074099432,"rouge_l":0.768970915382714}
{"id":24,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; System . out . println ( Math . min ( Math . abs ( a - b ) , Math . abs ( c - c ) ) ) ; } }"],"references":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long a = sc . nextLong ( ) ; long b = sc . nextLong ( ) ; long k = sc . nextLong ( ) ; long l = sc . nextLong ( ) ; long ans = k \/ l * b ; k -= k \/ l * l ; System . out . println ( ans + ( k == 0 ? 0 : Math . min ( k * a , b ) ) ) ; } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; public class Main { int a , b , k , l ; public static void main ( String args [ ] ) { new Main ( ) . run ( ) ; } void run ( ) { FastReader sc = new FastReader ( ) ; a = sc . nextInt ( ) ; b = sc . nextInt ( ) ; k = sc . nextInt ( ) ; l = sc . nextInt ( ) ; solve ( ) ; } void solve ( ) { long ans = 0 ; int bn = k \/ l ; System . out . println ( Math . min ( ( long ) bn * b + ( long ) a * ( k % l ) , ( long ) ( bn + 1 ) * b ) ) ; } static class FastReader { BufferedReader br ; StringTokenizer st ; public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }","import java . util . Scanner ; class Main { static Scanner s = new Scanner ( System . in ) ; static int gInt ( ) { return Integer . parseInt ( s . next ( ) ) ; } ; public static void main ( String [ ] $ ) { long a = gInt ( ) , b = gInt ( ) , k = gInt ( ) , l = gInt ( ) ; System . out . println ( Math . min ( k \/ l * b + ( k - k \/ l * l ) * a , ( k \/ l + 1 ) * b ) ) ; } }","import java . util . * ; public class Main { static int count = 0 ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long a = sc . nextInt ( ) ; long b = sc . nextInt ( ) ; long k = sc . nextInt ( ) ; long l = sc . nextInt ( ) ; long total ; if ( a * l <= b ) { total = a * k ; } else { total = Math . min ( ( k \/ l ) * b + ( k % l ) * a , ( k \/ l + 1 ) * b ) ; } System . out . println ( total ) ; } }","import java . util . * ; import static java . lang . System . * ; import static java . lang . Math . * ; public class Main { public static void main ( String [ ] $ ) { Scanner sc = new Scanner ( in ) ; long a = sc . nextLong ( ) , b = sc . nextLong ( ) , k = sc . nextLong ( ) , l = sc . nextLong ( ) ; out . println ( min ( ( k + l - 1 ) \/ l * b , k \/ l * b + ( k % l ) * a ) ) ; } }"],"bleu":0.638176069241104,"rouge_l":0.7076911633726153}
{"id":25,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { st = new StringTokenizer ( br . readLine ( ) ) ; a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { for ( int k = 0 ; k < n ; k ++ ) { if ( b [ i ] > b [ j ] ) { count ++ ; } } } System . out . println ( count ) ; } }"],"references":["import java . util . * ; public class Main { static Scanner sc = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { int N = sc . nextInt ( ) ; int [ ] values = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { values [ i ] = sc . nextInt ( ) ; } int ans = Integer . MIN_VALUE ; for ( int i = 0 ; i < N ; i ++ ) { int aokiSum = Integer . MIN_VALUE ; int aokiPosi = 0 ; for ( int j = 0 ; j < N ; j ++ ) { if ( i == j ) continue ; int tmp = 0 ; for ( int k = Math . min ( i , j ) ; k <= Math . max ( i , j ) ; k ++ ) { if ( ( k - Math . min ( i , j ) + 1 ) % 2 == 0 ) { tmp += values [ k ] ; } } if ( tmp > aokiSum ) { aokiPosi = j ; aokiSum = tmp ; } } int tmp = 0 ; for ( int k = Math . min ( i , aokiPosi ) ; k <= Math . max ( i , aokiPosi ) ; k ++ ) { if ( ( k - Math . min ( i , aokiPosi ) + 1 ) % 2 == 1 ) { tmp += values [ k ] ; } } ans = Math . max ( tmp , ans ) ; } System . out . println ( ans ) ; } }","import java . util . * ; import java . lang . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int max = - 50000 ; for ( int i = 0 ; i < n ; i ++ ) { int maxtaka = - 50000 ; int maxaoki = - 50000 ; for ( int j = 0 ; j < n ; j ++ ) { int taka = 0 ; int aoki = 0 ; if ( i == j ) { continue ; } else if ( i < j ) { for ( int k = i ; k <= j ; k ++ ) { if ( ( k - i + 1 ) % 2 == 0 ) { aoki += a [ k ] ; } else { taka += a [ k ] ; } } } else if ( i > j ) { for ( int k = j ; k <= i ; k ++ ) { if ( ( k - j + 1 ) % 2 == 0 ) { aoki += a [ k ] ; } else { taka += a [ k ] ; } } } if ( aoki > maxaoki ) { maxtaka = taka ; maxaoki = aoki ; } } max = Math . max ( max , maxtaka ) ; } System . out . println ( max ) ; } }","import java . util . * ; import java . awt . * ; import java . awt . geom . * ; import static java . lang . System . * ; import static java . lang . Math . * ; public class Main { public static void main ( String [ ] $ ) { Scanner sc = new Scanner ( in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n + 1 ] ; int [ ] t = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { int k = sc . nextInt ( ) ; if ( i % 2 == 0 ) a [ i ] = k ; else t [ i ] = k ; } for ( int i = 1 ; i <= n ; i ++ ) { a [ i ] += a [ i - 1 ] ; t [ i ] += t [ i - 1 ] ; } int takScore = Integer . MIN_VALUE , ans = Integer . MIN_VALUE ; for ( int tak = 1 ; tak <= n ; tak ++ ) { int aokScore = Integer . MIN_VALUE , c = 0 ; for ( int aok = n ; aok > 0 ; aok -- ) { int A = 0 , T = 0 ; if ( min ( tak , aok ) % 2 == 1 ) { A = a [ max ( aok , tak ) ] - a [ min ( aok , tak ) - 1 ] ; T = t [ max ( aok , tak ) ] - t [ min ( aok , tak ) - 1 ] ; } else { A = t [ max ( aok , tak ) ] - t [ min ( aok , tak ) - 1 ] ; T = a [ max ( aok , tak ) ] - a [ min ( aok , tak ) - 1 ] ; } if ( A >= aokScore && aok != tak ) { aokScore = A ; takScore = T ; c ++ ; } } if ( c > 0 ) ans = max ( takScore , ans ) ; } out . println ( ans ) ; } }","import java . util . stream . IntStream ; public class Main { private static java . util . Scanner scanner = new java . util . Scanner ( System . in ) ; public static void main ( String [ ] $ ) { int n = scanner . nextInt ( ) ; int [ ] a = IntStream . range ( 0 , n ) . map ( i -> scanner . nextInt ( ) ) . toArray ( ) ; IntStream . range ( 0 , n ) . map ( i -> { int k1 = - 50 * n , k2 = 0 ; for ( int j = n - 1 ; j >= 0 ; j -- ) { if ( i == j ) continue ; int s = 0 ; for ( int k = Math . min ( i , j ) + 1 ; k <= Math . max ( i , j ) ; k += 2 ) s += a [ k ] ; if ( k1 <= s ) { k1 = s ; k2 = j ; } } int s = 0 ; for ( int k = Math . min ( i , k2 ) ; k <= Math . max ( i , k2 ) ; k += 2 ) s += a [ k ] ; return s ; } ) . max ( ) . ifPresent ( System . out :: println ) ; } }","import java . util . Arrays ; import java . util . Scanner ; class Main { static int [ ] a ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { int taka = 0 ; int aoki = Integer . MIN_VALUE ; int tmp = 0 ; int ao = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( i == j ) { continue ; } else if ( i < j ) { tmp = culc ( i , j ) ; ao = culc ( i + 1 , j ) ; } else { tmp = culc ( j , i ) ; ao = culc ( j + 1 , i ) ; } if ( aoki < ao ) { aoki = ao ; taka = tmp ; } } b [ i ] = taka ; } Arrays . sort ( b ) ; System . out . println ( b [ n - 1 ] ) ; sc . close ( ) ; } public static int culc ( int pos , int pos2 ) { int ans = 0 ; for ( int i = pos ; i <= pos2 ; i ++ ) { ans += a [ i ] ; i ++ ; } return ans ; } }"],"bleu":0.49057059660799174,"rouge_l":0.5413254268051686}
{"id":26,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; long [ ] a = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextLong ( ) ; } Arrays . sort ( a ) ; long ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans += a [ i ] - a [ i ] ; } out . println ( ans ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int N = scanner . nextInt ( ) ; int K = scanner . nextInt ( ) ; int sum = 0 ; for ( int i = 0 ; i < N ; i ++ ) { int temp = scanner . nextInt ( ) ; if ( temp > Math . abs ( temp - K ) ) { sum += Math . abs ( ( temp - K ) * 2 ) ; } else { sum += temp * 2 ; } } System . out . println ( sum ) ; } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . OutputStream ; import java . io . PrintWriter ; import java . util . StringTokenizer ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; Task solver = new Task ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class Task { public void solve ( int testNumber , InputReader in , PrintWriter out ) { int N = in . nextInt ( ) ; int K = in . nextInt ( ) ; int [ ] x = new int [ N ] ; int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { x [ i ] = in . nextInt ( ) ; if ( Math . abs ( x [ i ] ) < Math . abs ( x [ i ] - K ) ) { ans += Math . abs ( x [ i ] ) * 2 ; } else { ans += Math . abs ( x [ i ] - K ) * 2 ; } } out . println ( ans ) ; } } static class InputReader { public BufferedReader reader ; public StringTokenizer tokenizer ; public InputReader ( InputStream stream ) { reader = new BufferedReader ( new InputStreamReader ( stream ) , 32768 ) ; tokenizer = null ; } public String next ( ) { while ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } public double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } } }","import java . util . ArrayList ; import java . util . List ; import java . util . Scanner ; import java . util . stream . IntStream ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; List < Integer > x = new ArrayList < > ( ) ; IntStream . range ( 0 , n ) . forEach ( i -> x . add ( sc . nextInt ( ) ) ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( x . get ( i ) < Math . abs ( x . get ( i ) - k ) ) { sum += 2 * x . get ( i ) ; continue ; } sum += 2 * Math . abs ( x . get ( i ) - k ) ; } System . out . println ( sum ) ; } }","import java . util . * ; class Main { static Scanner sc = new Scanner ( System . in ) ; static int mod = 1000000007 ; public static void main ( String [ ] args ) { int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int x = sc . nextInt ( ) ; ans += 2 * Math . min ( Math . abs ( x - 0 ) , Math . abs ( x - k ) ) ; } System . out . println ( ans ) ; } }","import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = Integer . parseInt ( scanner . nextLine ( ) ) ; int k = Integer . parseInt ( scanner . nextLine ( ) ) ; String [ ] line = scanner . nextLine ( ) . split ( \" ▁ \" , n ) ; int result = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int x = Integer . parseInt ( line [ i ] ) ; result += 2 * Math . min ( x , k - x ) ; } System . out . println ( result ) ; } }"],"bleu":0.5444895712947768,"rouge_l":0.661801594188467}
{"id":27,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { st = new StringTokenizer ( br . readLine ( ) ) ; a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( b [ i ] > b [ j ] ) { count ++ ; } } } System . out . println ( count ) ; } }"],"references":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] A = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) A [ i ] = sc . nextInt ( ) ; System . out . println ( win ( A ) ? \" First \" : \" Second \" ) ; sc . close ( ) ; } static boolean win ( int [ ] A ) { int N = A . length ; int even = 0 ; for ( int i = 0 ; i < N ; i ++ ) if ( A [ i ] % 2 == 0 ) even ++ ; if ( even % 2 == 1 ) { return true ; } else { if ( even == N - 1 ) { for ( int i = 0 ; i < N ; i ++ ) { if ( A [ i ] % 2 == 1 ) { if ( A [ i ] == 1 ) return false ; A [ i ] -- ; break ; } } int gcd = A [ 0 ] ; for ( int i = 1 ; i < N ; i ++ ) gcd = gcd ( gcd , A [ i ] ) ; for ( int i = 0 ; i < N ; i ++ ) A [ i ] \/= gcd ; return ! win ( A ) ; } else { return false ; } } } static int gcd ( int a , int b ) { return a % b == 0 ? b : gcd ( b , a % b ) ; } }","import java . util . ArrayList ; import java . util . Scanner ; public class Main { static Scanner sc = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { int N = sc . nextInt ( ) ; long [ ] A = new long [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { A [ i ] = sc . nextInt ( ) ; } System . out . println ( solve ( A ) ? \" First \" : \" Second \" ) ; } static boolean solve ( long [ ] A ) { int N = A . length ; long sum = 0 ; ArrayList < Integer > oddIdx = new ArrayList < > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { sum += A [ i ] ; if ( A [ i ] % 2 == 1 ) { oddIdx . add ( i ) ; } } sum -= N ; if ( sum % 2 == 1 ) { return true ; } if ( oddIdx . size ( ) != 1 ) { return false ; } if ( A [ oddIdx . get ( 0 ) ] == 1 ) { return false ; } A [ oddIdx . get ( 0 ) ] -- ; long gcd = A [ 0 ] ; for ( int i = 1 ; i < N ; i ++ ) { gcd = gcd ( gcd , A [ i ] ) ; } for ( int i = 0 ; i < N ; i ++ ) { A [ i ] \/= gcd ; } return ! solve ( A ) ; } static long gcd ( long a , long b ) { return b == 0 ? a : gcd ( b , a % b ) ; } }"],"bleu":0.37847030598064313,"rouge_l":0.5059165346011621}
{"id":28,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; if ( a == b ) out . println ( \" YES \" ) ; else out . println ( \" NO \" ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String [ ] s = sc . next ( ) . split ( \" \" ) ; for ( int i = 0 ; i < s . length ; i ++ ) { if ( s [ i ] . equals ( s [ s . length - i - 1 ] ) || s [ i ] . equals ( \" * \" ) || s [ s . length - i - 1 ] . equals ( \" * \" ) ) continue ; System . out . println ( \" NO \" ) ; return ; } System . out . println ( \" YES \" ) ; } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . UncheckedIOException ; import java . util . StringTokenizer ; class Main { public static void main ( String [ ] args ) { SC sc = new SC ( System . in ) ; String s = sc . next ( ) ; int l = s . length ( ) ; for ( int i = 0 ; i < l ; i ++ ) { if ( s . charAt ( i ) == ' * ' || s . charAt ( l - 1 - i ) == ' * ' ) { } else if ( s . charAt ( i ) == s . charAt ( l - 1 - i ) ) { } else { pl ( \" NO \" ) ; System . exit ( 0 ) ; } } pl ( \" YES \" ) ; } static class SC { private BufferedReader reader = null ; private StringTokenizer tokenizer = null ; public SC ( InputStream in ) { reader = new BufferedReader ( new InputStreamReader ( in ) ) ; } public String next ( ) { if ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } } return tokenizer . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } public long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } public double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } public String nextLine ( ) { try { return reader . readLine ( ) ; } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } } } public static void pl ( Object o ) { System . out . println ( o ) ; } public static void p ( Object o ) { System . out . print ( o ) ; } }","import java . util . * ; import java . awt . * ; import java . awt . geom . * ; import static java . lang . System . * ; import static java . lang . Math . * ; public class Main { public static void main ( String [ ] $ ) { Scanner sc = new Scanner ( in ) ; String s = sc . next ( ) ; for ( int i = 0 ; i < s . length ( ) \/ 2 ; i ++ ) { if ( s . charAt ( i ) != s . charAt ( s . length ( ) - 1 - i ) && s . charAt ( i ) != ' * ' && s . charAt ( s . length ( ) - 1 - i ) != ' * ' ) { out . println ( \" NO \" ) ; exit ( 0 ) ; } } out . println ( \" YES \" ) ; } }","import java . io . * ; import java . util . NoSuchElementException ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int a = s . length ( ) ; int b = a \/ 2 ; boolean t = true ; for ( int i = 0 ; t && i < b ; i ++ ) { if ( s . charAt ( i ) != s . charAt ( a - i - 1 ) ) if ( s . charAt ( i ) != ' * ' && s . charAt ( a - i - 1 ) != ' * ' ) { System . out . println ( \" NO \" ) ; t = false ; } } if ( t ) System . out . println ( \" YES \" ) ; } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader r = new BufferedReader ( new InputStreamReader ( System . in ) , 1 ) ; String s = r . readLine ( ) ; int n = s . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) != ' * ' && s . charAt ( n - 1 - i ) != ' * ' && s . charAt ( i ) != s . charAt ( n - 1 - i ) ) { System . out . println ( \" NO \" ) ; System . exit ( 0 ) ; } } System . out . println ( \" YES \" ) ; } }"],"bleu":0.6298417296485824,"rouge_l":0.6101439018636471}
{"id":29,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { ans += b [ i ] ; } } System . out . println ( ans ) ; } }"],"references":["import java . util . * ; import static java . lang . System . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int T = sc . nextInt ( ) ; int N = sc . nextInt ( ) ; int [ ] A = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { A [ i ] = sc . nextInt ( ) ; } int M = sc . nextInt ( ) ; int [ ] B = new int [ M ] ; for ( int i = 0 ; i < M ; i ++ ) { B [ i ] = sc . nextInt ( ) ; } int n = 0 ; for ( int m = 0 ; m < M ; m ++ ) { while ( true ) { if ( n >= N ) { out . println ( \" no \" ) ; return ; } if ( A [ n ] <= B [ m ] && B [ m ] <= A [ n ] + T ) { n ++ ; break ; } n ++ ; } } out . println ( \" yes \" ) ; } }","import java . util . Scanner ; public class Main { void run ( ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] b = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) b [ i ] = sc . nextInt ( ) ; System . out . println ( ok ( t , n , m , a , b ) ? \" yes \" : \" no \" ) ; } boolean ok ( int t , int n , int m , int [ ] a , int [ ] b ) { int idx = 0 ; for ( int i = 0 ; i < m ; i ++ ) { if ( idx == n ) return false ; if ( a [ idx ] > b [ i ] ) return false ; for ( ; idx < n && b [ i ] - a [ idx ] > t ; idx ++ ) ; if ( idx == n ) return false ; if ( b [ i ] - a [ idx ] > t ) return false ; idx ++ ; } return true ; } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } }","import java . util . Map ; import java . util . Scanner ; import java . util . TreeMap ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; Map < Integer , Integer > map = new TreeMap < > ( ) ; String ans = \" yes \" ; boolean sold = true ; int t = sc . nextInt ( ) ; int n = sc . nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) map . put ( i , sc . nextInt ( ) ) ; int m = sc . nextInt ( ) ; for ( int i = 0 ; i < m ; i ++ ) { int b = sc . nextInt ( ) ; sold = false ; for ( int j : map . keySet ( ) ) { if ( map . get ( j ) >= b - t && map . get ( j ) <= b ) { map . remove ( j ) ; sold = true ; break ; } } if ( sold != true ) ans = \" no \" ; } System . out . println ( ans ) ; } }","import java . io . InputStream ; import java . io . PrintStream ; import java . util . ArrayDeque ; import java . util . Deque ; import java . util . Scanner ; public class Main { InputStream in = System . in ; PrintStream out = System . out ; public void _main ( String [ ] args ) { Scanner sc = new Scanner ( in ) ; try { int t = sc . nextInt ( ) ; int n = sc . nextInt ( ) ; Deque < Integer > q = new ArrayDeque < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { q . addLast ( sc . nextInt ( ) ) ; } int m = sc . nextInt ( ) ; for ( int i = 0 ; i < m ; i ++ ) { int x = sc . nextInt ( ) ; while ( true ) { Integer h = q . poll ( ) ; if ( h == null || h > x ) { out . println ( \" no \" ) ; return ; } if ( h + t >= x ) { break ; } } } out . println ( \" yes \" ) ; } finally { sc . close ( ) ; } } public static void main ( String [ ] args ) { new Main ( ) . _main ( args ) ; } }","import java . util . Scanner ; import java . util . stream . IntStream ; public class Main { private static Scanner scanner = new Scanner ( System . in ) ; public static void main ( String [ ] $ ) { int t = scanner . nextInt ( ) , n = scanner . nextInt ( ) , a [ ] = IntStream . range ( 0 , n ) . map ( i -> scanner . nextInt ( ) ) . toArray ( ) ; for ( int i = scanner . nextInt ( ) , l = 0 ; i > 0 ; i -- ) { int b = scanner . nextInt ( ) ; do { if ( l >= n || b - a [ l ] < 0 ) { System . out . println ( \" no \" ) ; return ; } } while ( b - a [ l ++ ] > t ) ; } System . out . println ( \" yes \" ) ; } }"],"bleu":0.7743318168622366,"rouge_l":0.6794116417249902}
{"id":30,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int K = sc . nextInt ( ) ; int [ ] a = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { ans += a [ i ] ; } System . out . println ( ans ) ; } }"],"references":["import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int D = sc . nextInt ( ) ; int X = sc . nextInt ( ) ; int [ ] data = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { data [ i ] = sc . nextInt ( ) ; } int cnt = 0 ; for ( int i = 0 ; i < N ; i ++ ) { int x = 1 ; while ( x <= D ) { cnt ++ ; x += data [ i ] ; } } System . out . println ( X + cnt ) ; sc . close ( ) ; } }","import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int D = sc . nextInt ( ) ; int X = sc . nextInt ( ) ; int [ ] A = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) A [ i ] = sc . nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j * A [ i ] + 1 <= D ; j ++ ) { count ++ ; } } System . out . println ( count + X ) ; } }","import static java . lang . System . * ; import java . util . * ; public class Main { static Scanner sc = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { int n = sc . nextInt ( ) ; int day = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int total = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int a = sc . nextInt ( ) ; if ( day % a == 0 ) { total += day \/ a ; } else { total += day \/ a + 1 ; } } out . println ( total + x ) ; } }","import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; public class Main { public static void main ( String [ ] args ) throws Exception { BufferedReader input = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int n = Integer . parseInt ( input . readLine ( ) ) ; StringTokenizer tokenizer = new StringTokenizer ( input . readLine ( ) ) ; int d = Integer . parseInt ( tokenizer . nextToken ( ) ) ; int x = Integer . parseInt ( tokenizer . nextToken ( ) ) ; int sum , count , index ; for ( int i = 0 ; i < n ; i ++ ) { sum = 0 ; count = 0 ; index = 1 ; int value = Integer . parseInt ( input . readLine ( ) ) ; while ( count <= d ) { sum ++ ; count = ( index * value ) + 1 ; index ++ ; } x += sum ; } System . out . println ( x ) ; } }","import java . io . PrintWriter ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; int N = sc . nextInt ( ) ; long D = sc . nextLong ( ) ; long X = sc . nextLong ( ) ; long A [ ] = new long [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { A [ i ] = sc . nextLong ( ) ; } for ( int i = 0 ; i < N ; i ++ ) { X += 1 + ( ( D - 1 ) \/ A [ i ] ) ; } out . println ( X ) ; out . flush ( ) ; } }"],"bleu":0.7995415501758629,"rouge_l":0.8147449441593722}
{"id":31,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; out . println ( Math . max ( a , b ) ) ; out . close ( ) ; } static int l_min ( int [ ] a ) { Arrays . sort ( a ) ; return a [ 0 ] ; } static int l_max ( int [ ] a ) { int l = a . length ; Arrays . sort ( a ) ; return a [ l - 1 ] ; } public static PrintWriter out ; public static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . UncheckedIOException ; import java . util . StringTokenizer ; class Main { public static void main ( String [ ] args ) { SC sc = new SC ( System . in ) ; int sq = sc . nextInt ( ) ; String s = \" \" ; int t = 0 ; int a = 0 ; for ( int i = 0 ; i < sq ; i ++ ) { s = sc . next ( ) ; for ( int j = 0 ; j < sq ; j ++ ) { if ( s . charAt ( j ) == ' R ' ) { t ++ ; } else if ( s . charAt ( j ) == ' B ' ) { a ++ ; } } } if ( a == t ) { System . out . println ( \" DRAW \" ) ; } else if ( a > t ) { System . out . println ( \" AOKI \" ) ; } else if ( a < t ) { System . out . println ( \" TAKAHASHI \" ) ; } } static class SC { private BufferedReader reader = null ; private StringTokenizer tokenizer = null ; public SC ( InputStream in ) { reader = new BufferedReader ( new InputStreamReader ( in ) ) ; } public String next ( ) { if ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } } return tokenizer . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } public long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } } }","import java . util . * ; import java . util . stream . * ; public class Main { private static Scanner scanner = new Scanner ( System . in ) ; public static void main ( String [ ] $ ) { String s = IntStream . range ( 0 , scanner . nextInt ( ) ) . mapToObj ( i -> scanner . next ( ) ) . collect ( Collectors . joining ( ) ) . replace ( \" ▁ \" , \" \" ) ; int c = Integer . compare ( s . replace ( \" R \" , \" \" ) . length ( ) , s . replace ( \" B \" , \" \" ) . length ( ) ) ; System . out . println ( c == - 1 ? \" TAKAHASHI \" : c == 0 ? \" DRAW \" : \" AOKI \" ) ; } }","import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { final Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; long red = 0 ; long blue = 0 ; for ( int i = 0 ; i < n ; i ++ ) { String s = sc . next ( ) ; for ( char c : s . toCharArray ( ) ) { if ( c == ' R ' ) { red ++ ; } else if ( c == ' B ' ) { blue ++ ; } } } System . out . println ( red == blue ? \" DRAW \" : red > blue ? \" TAKAHASHI \" : \" AOKI \" ) ; } }","import java . util . * ; import java . awt . * ; import java . awt . geom . * ; import static java . lang . System . * ; import static java . lang . Math . * ; public class Main { public static void main ( String [ ] $ ) { Scanner sc = new Scanner ( in ) ; int n = sc . nextInt ( ) ; int t = 0 , a = 0 ; for ( int i = 0 ; i < n ; i ++ ) { String s = sc . next ( ) ; for ( int j = 0 ; j < n ; j ++ ) { if ( s . charAt ( j ) == ' R ' ) t ++ ; else if ( s . charAt ( j ) == ' B ' ) a ++ ; } } if ( t > a ) out . println ( \" TAKAHASHI \" ) ; else if ( a == t ) out . println ( \" DRAW \" ) ; else out . println ( \" AOKI \" ) ; } }","import java . util . Scanner ; public class Main { static Scanner s = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { int t = 0 , a = 0 ; for ( int i = s . nextInt ( ) ; i > 0 ; i -- ) { String st = s . next ( ) ; for ( int j = 0 ; j < st . length ( ) ; j ++ ) { if ( st . charAt ( j ) == ' R ' ) t ++ ; if ( st . charAt ( j ) == ' B ' ) a ++ ; } } System . out . println ( t > a ? \" TAKAHASHI \" : t < a ? \" AOKI \" : \" DRAW \" ) ; } }"],"bleu":0.43708835413616065,"rouge_l":0.5485508739719355}
{"id":32,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i < d ; i ++ ) { ans = Math . min ( ans , d ) ; } out . println ( ans ) ; } static int l_min ( int [ ] a ) { Arrays . sort ( a ) ; return a [ 0 ] ; } static int l_max ( int [ ] a ) { int l = a . length ; Arrays . sort ( a ) ; return a [ l - 1 ] ; } public static PrintWriter out ; public static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int A = sc . nextInt ( ) ; int B = sc . nextInt ( ) ; int C = sc . nextInt ( ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int T = sc . nextInt ( ) ; int ans = A * S + B * T ; if ( S + T >= K ) ans -= C * ( S + T ) ; System . out . println ( ans ) ; } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . OutputStream ; import java . io . PrintWriter ; import java . util . StringTokenizer ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; Task solver = new Task ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class Task { public void solve ( int testNumber , InputReader in , PrintWriter out ) { int A = in . nextInt ( ) ; int B = in . nextInt ( ) ; int C = in . nextInt ( ) ; int K = in . nextInt ( ) ; int S = in . nextInt ( ) ; int T = in . nextInt ( ) ; int ans = A * S + B * T ; if ( S + T >= K ) { ans -= C * ( S + T ) ; } out . println ( ans ) ; } } static class InputReader { public BufferedReader reader ; public StringTokenizer tokenizer ; public InputReader ( InputStream stream ) { reader = new BufferedReader ( new InputStreamReader ( stream ) , 32768 ) ; tokenizer = null ; } public String next ( ) { while ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } } }","import java . util . * ; import java . util . stream . * ; import static java . lang . System . * ; class Main { static Scanner sc = new Scanner ( System . in ) ; static int nextInt ( ) { return Integer . parseInt ( sc . next ( ) ) ; } static int [ ] nextIntArray ( int n ) { return IntStream . range ( 0 , n ) . map ( i -> nextInt ( ) ) . toArray ( ) ; } static int max ( int ... ar ) { Arrays . sort ( ar ) ; return ar [ ar . length - 1 ] ; } static int min ( int ... ar ) { Arrays . sort ( ar ) ; return ar [ 0 ] ; } static int maxInt = Integer . MAX_VALUE ; static int minInt = Integer . MIN_VALUE ; public static void main ( String [ ] args ) { int kodomo = nextInt ( ) , otona = nextInt ( ) , omake = nextInt ( ) , k = nextInt ( ) ; int s = nextInt ( ) , t = nextInt ( ) ; if ( s + t >= k ) { out . println ( kodomo * s + otona * t - ( s + t ) * omake ) ; } else { out . println ( kodomo * s + otona * t ) ; } } }","import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int t = sc . nextInt ( ) ; System . out . println ( s + t >= d ? s * ( a - c ) + t * ( b - c ) : s * a + t * b ) ; } static int l_min ( int [ ] a ) { Arrays . sort ( a ) ; return a [ 0 ] ; } static int l_max ( int [ ] a ) { int l = a . length ; Arrays . sort ( a ) ; return a [ l - 1 ] ; } public static PrintWriter out ; public static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }","import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] line = scanner . nextLine ( ) . split ( \" ▁ \" , 4 ) ; int childPer = Integer . parseInt ( line [ 0 ] ) ; int adultPer = Integer . parseInt ( line [ 1 ] ) ; int kDeduct = Integer . parseInt ( line [ 2 ] ) ; int k = Integer . parseInt ( line [ 3 ] ) ; line = scanner . nextLine ( ) . split ( \" ▁ \" , 2 ) ; int nChild = Integer . parseInt ( line [ 0 ] ) ; int nAdult = Integer . parseInt ( line [ 1 ] ) ; int sum = 0 ; if ( nChild + nAdult >= k ) { sum += ( childPer - kDeduct ) * nChild ; sum += ( adultPer - kDeduct ) * nAdult ; } else { sum += childPer * nChild ; sum += adultPer * nAdult ; } System . out . println ( sum ) ; } }"],"bleu":0.8998609274661687,"rouge_l":0.8950883050698533}
{"id":33,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter pw = new PrintWriter ( System . out ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int N = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int [ ] b = new int [ M ] ; for ( int i = 0 ; i < M ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int [ ] [ ] dp = new int [ M ] [ M ] ; for ( int i = 0 ; i < M ; i ++ ) { for ( int j = 0 ; j < M ; j ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { if ( a [ k ] > a [ k ] [ k ] ) { dp [ i ] [ j ] [ k ] = Math . max ( dp [ i ] [ j ] [ k ] , dp [ i ] [ k ] [ k ] [ k ] ) ; } } } } } } } } } pw . println ( dp [ M - 1 ] [ M - 1 ] ) ; pw . close ( ) ; } }"],"references":["import java . util . * ; import java . util . stream . Collectors ; import java . util . stream . Stream ; public class Main { static Map < Integer , List < Integer > > map ; static long ans = 0 ; static int [ ] keys ; public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int N = in . nextInt ( ) , W = in . nextInt ( ) ; map = new HashMap < > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { int w = in . nextInt ( ) , v = in . nextInt ( ) ; if ( ! map . containsKey ( w ) ) { List < Integer > list = new ArrayList < > ( ) ; list . add ( v ) ; map . put ( w , list ) ; } else { map . get ( w ) . add ( v ) ; } } keys = new int [ map . keySet ( ) . size ( ) ] ; int idx = 0 ; for ( int key : map . keySet ( ) ) { keys [ idx ++ ] = key ; } map . keySet ( ) . stream ( ) . map ( key -> map . get ( key ) ) . forEach ( list -> Collections . sort ( list , Collections . reverseOrder ( ) ) ) ; solve ( W , 0 , 0 , 0L ) ; System . out . println ( ans ) ; } public static void solve ( int W , int idx , int wSum , long vSum ) { if ( idx == keys . length ) { ans = Math . max ( ans , vSum ) ; } else { solve ( W , idx + 1 , wSum , vSum ) ; for ( int v : map . get ( keys [ idx ] ) ) { if ( W - wSum < keys [ idx ] ) return ; wSum += keys [ idx ] ; vSum += ( long ) v ; solve ( W , idx + 1 , wSum , vSum ) ; } } } }","import java . util . * ; public class Main { int ni ( ) { return cin . nextInt ( ) ; } String nl ( ) { return cin . nextLine ( ) ; } void println ( String str ) { System . out . println ( str ) ; } void print ( String str ) { System . out . print ( str ) ; } static final int MOD = 1000000007 ; Scanner cin = new Scanner ( System . in ) ; String output ; public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } public void run ( ) { input ( ) ; long res = dfs ( 0 , 0 ) ; output = res + \" \" ; println ( output ) ; } int N ; long W ; long [ ] weight ; long [ ] value ; Map < String , Long > map ; void input ( ) { N = ni ( ) ; W = cin . nextLong ( ) ; weight = new long [ N ] ; value = new long [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { weight [ i ] = cin . nextLong ( ) ; value [ i ] = cin . nextLong ( ) ; } map = new HashMap < > ( ) ; } long dfs ( int i , long w ) { String key = i + \" ▁ \" + w ; long res = 0 ; if ( i == N ) { res = 0 ; } else if ( map . containsKey ( key ) ) { return map . get ( key ) ; } else if ( w > W - weight [ i ] ) { res = dfs ( i + 1 , w ) ; } else { long r1 = dfs ( i + 1 , w ) ; long r2 = dfs ( i + 1 , w + weight [ i ] ) + value [ i ] ; res = Math . max ( r1 , r2 ) ; } map . put ( key , res ) ; return res ; } }"],"bleu":0.24258798572783039,"rouge_l":0.36689269432632265}
{"id":34,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { for ( int k = 0 ; k < n ; k ++ ) { for ( int k = 0 ; k < n ; k ++ ) { if ( a [ i ] > b [ j ] ) { ans ++ ; break ; } } } } out . println ( ans ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . util . Scanner ; import java . util . * ; public class Main { public static ArrayList < Integer > linkList [ ] [ ] ; public static int dists [ ] ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int M = sc . nextInt ( ) ; linkList = new ArrayList [ N + 1 ] [ 2 ] ; dists = new int [ N + 1 ] ; for ( int i = 0 ; i < N + 1 ; i ++ ) { dists [ i ] = Integer . MIN_VALUE ; linkList [ i ] [ 0 ] = new ArrayList < Integer > ( ) ; linkList [ i ] [ 1 ] = new ArrayList < Integer > ( ) ; } for ( int i = 0 ; i < M ; i ++ ) { int l = sc . nextInt ( ) ; int r = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; linkList [ l ] [ 0 ] . add ( r ) ; linkList [ l ] [ 1 ] . add ( d ) ; linkList [ r ] [ 0 ] . add ( l ) ; linkList [ r ] [ 1 ] . add ( - d ) ; } for ( int i = 0 ; i < N ; i ++ ) { if ( dists [ i ] != Integer . MIN_VALUE ) continue ; if ( ! dfs ( i , 0 ) ) { System . out . println ( \" No \" ) ; return ; } } System . out . println ( \" Yes \" ) ; } public static boolean dfs ( int i , int dist ) { if ( dists [ i ] != Integer . MIN_VALUE ) return dists [ i ] == dist ; dists [ i ] = dist ; for ( int j = 0 ; j < linkList [ i ] [ 0 ] . size ( ) ; j ++ ) { if ( ! dfs ( linkList [ i ] [ 0 ] . get ( j ) , dist + linkList [ i ] [ 1 ] . get ( j ) ) ) return false ; } return true ; } } Note : . \/ Main . java uses unchecked or unsafe operations . Note : Recompile with - Xlint : unchecked for details .","import java . util . * ; class Edge { int a , b , c ; public Edge ( int A , int B , int C ) { a = A ; b = B ; c = C ; } } class Main { static Scanner s = new Scanner ( System . in ) ; static int gInt ( ) { return Integer . parseInt ( s . next ( ) ) ; } public static void main ( String [ ] $ ) { final long INIT = Long . MAX_VALUE ; TreeMap < Integer , List < Edge > > a = new TreeMap < > ( ) ; int n = gInt ( ) , m = gInt ( ) ; long [ ] pos = new long [ n ] ; Arrays . fill ( pos , INIT ) ; for ( int q = 0 ; q < m ; ++ q ) { int l = gInt ( ) - 1 , r = gInt ( ) - 1 , d = gInt ( ) ; a . computeIfAbsent ( l , ( i ) -> new ArrayList < > ( 1 ) ) . add ( new Edge ( l , r , d ) ) ; a . computeIfAbsent ( r , ( i ) -> new ArrayList < > ( 1 ) ) . add ( new Edge ( r , l , - d ) ) ; } Deque < Edge > d = new ArrayDeque < > ( ) ; while ( ! a . isEmpty ( ) ) { d . addAll ( a . pollFirstEntry ( ) . getValue ( ) ) ; while ( ! d . isEmpty ( ) ) { Edge o = d . poll ( ) ; if ( pos [ o . a ] == INIT ) { pos [ o . a ] = 0 ; } if ( pos [ o . b ] == INIT ) { pos [ o . b ] = pos [ o . a ] + o . c ; List < Edge > v = a . remove ( o . b ) ; if ( v != null ) d . addAll ( v ) ; } if ( pos [ o . b ] - pos [ o . a ] != o . c ) { System . out . println ( \" No \" ) ; return ; } } } System . out . println ( \" Yes \" ) ; } }","import java . util . Scanner ; import java . util . * ; public class Main { public static ArrayList < Integer > linkList [ ] [ ] ; public static int dists [ ] ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int M = sc . nextInt ( ) ; linkList = new ArrayList [ N + 1 ] [ 2 ] ; dists = new int [ N + 1 ] ; for ( int i = 0 ; i < N + 1 ; i ++ ) { dists [ i ] = Integer . MIN_VALUE ; linkList [ i ] [ 0 ] = new ArrayList < Integer > ( ) ; linkList [ i ] [ 1 ] = new ArrayList < Integer > ( ) ; } for ( int i = 0 ; i < M ; i ++ ) { int l = sc . nextInt ( ) ; int r = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; linkList [ l ] [ 0 ] . add ( r ) ; linkList [ l ] [ 1 ] . add ( d ) ; linkList [ r ] [ 0 ] . add ( l ) ; linkList [ r ] [ 1 ] . add ( - d ) ; } for ( int i = 0 ; i < N ; i ++ ) { if ( dists [ i ] != Integer . MIN_VALUE ) continue ; if ( ! dfs ( i , 0 ) ) { System . out . println ( \" No \" ) ; return ; } } System . out . println ( \" Yes \" ) ; } public static boolean dfs ( int i , int dist ) { if ( dists [ i ] != Integer . MIN_VALUE ) return dists [ i ] == dist ; dists [ i ] = dist ; for ( int j = 0 ; j < linkList [ i ] [ 0 ] . size ( ) ; j ++ ) { if ( ! dfs ( linkList [ i ] [ 0 ] . get ( j ) , dist + linkList [ i ] [ 1 ] . get ( j ) ) ) return false ; } return true ; } } Note : . \/ Main . java uses unchecked or unsafe operations . Note : Recompile with - Xlint : unchecked for details ."],"bleu":0.39831210789608157,"rouge_l":0.4215291378736928}
{"id":35,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int A = sc . nextInt ( ) ; int B = sc . nextInt ( ) ; int C = sc . nextInt ( ) ; int D = sc . nextInt ( ) ; System . out . println ( Math . max ( A + B , C ) ) ; } }"],"references":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; System . out . println ( a == b ? c : b == c ? a : b ) ; } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . OutputStream ; import java . io . PrintWriter ; import java . util . StringTokenizer ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; Task solver = new Task ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class Task { public void solve ( int testNumber , InputReader in , PrintWriter out ) { int A = in . nextInt ( ) ; int B = in . nextInt ( ) ; int C = in . nextInt ( ) ; if ( A == B ) { out . println ( C ) ; } else if ( B == C ) { out . println ( A ) ; } else { out . println ( B ) ; } } } static class InputReader { public BufferedReader reader ; public StringTokenizer tokenizer ; public InputReader ( InputStream stream ) { reader = new BufferedReader ( new InputStreamReader ( stream ) , 32768 ) ; tokenizer = null ; } public String next ( ) { while ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } } }","import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int A = sc . nextInt ( ) ; int B = sc . nextInt ( ) ; int C = sc . nextInt ( ) ; if ( A == B ) { System . out . println ( C ) ; } else if ( A == C ) { System . out . println ( B ) ; } else { System . out . println ( A ) ; } } }","import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; public class Main { public static void main ( String [ ] args ) throws Exception { BufferedReader input = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer tokenizer = new StringTokenizer ( input . readLine ( ) ) ; int a = Integer . parseInt ( tokenizer . nextToken ( ) ) ; int b = Integer . parseInt ( tokenizer . nextToken ( ) ) ; int c = Integer . parseInt ( tokenizer . nextToken ( ) ) ; if ( a == c ) { System . out . println ( b ) ; } else if ( a == b ) { System . out . println ( c ) ; } else { System . out . println ( a ) ; } } }","import java . io . PrintWriter ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; int r = Integer . parseInt ( sc . next ( ) ) ; int g = Integer . parseInt ( sc . next ( ) ) ; int b = Integer . parseInt ( sc . next ( ) ) ; boolean a1 = r == g ; boolean a2 = g == b ; boolean a3 = b == r ; if ( a1 && ! a2 && ! a3 ) { out . println ( b ) ; } else if ( ! a1 && a2 && ! a3 ) { out . println ( r ) ; } else if ( ! a1 && ! a2 && a3 ) { out . println ( g ) ; } out . flush ( ) ; } }"],"bleu":0.8362717242238888,"rouge_l":0.8311251373955214}
{"id":36,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter pw = new PrintWriter ( System . out ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int N = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ M ] ; for ( int i = 0 ; i < M ; i ++ ) { st = new StringTokenizer ( br . readLine ( ) ) ; a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int [ ] b = new int [ M ] ; for ( int i = 0 ; i < M ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } Arrays . sort ( b ) ; long ans = 0 ; for ( int i = 0 ; i < M ; i ++ ) { ans += b [ i ] - b [ i ] ; } pw . println ( ans ) ; pw . flush ( ) ; pw . close ( ) ; } }"],"references":["import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . io . UncheckedIOException ; import java . util . StringTokenizer ; import java . io . IOException ; import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . InputStream ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; LightScanner in = new LightScanner ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; A solver = new A ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class A { public void solve ( int testNumber , LightScanner in , PrintWriter out ) { int y = in . ints ( ) , m = in . ints ( ) , d = in . ints ( ) ; if ( m <= 2 ) { y -= 1 ; m += 12 ; } int r = 365 * y + ( y \/ 4 ) - ( y \/ 100 ) + ( y \/ 400 ) + ( 306 * ( m + 1 ) \/ 10 ) + d - 429 ; out . println ( 735369 - r ) ; } } static class LightScanner { private BufferedReader reader = null ; private StringTokenizer tokenizer = null ; public LightScanner ( InputStream in ) { reader = new BufferedReader ( new InputStreamReader ( in ) ) ; } public String string ( ) { if ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } } return tokenizer . nextToken ( ) ; } public int ints ( ) { return Integer . parseInt ( string ( ) ) ; } } }","import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int y = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; if ( m == 1 ) { m = 13 ; } else if ( m == 2 ) { m = 14 ; } double A = distance ( y , m , d ) ; double B = distance ( 2014 , 5 , 17 ) ; System . out . println ( ( int ) ( B - A ) ) ; } static double distance ( int y , int m , int d ) { if ( y == 1 && m == 13 && d == 1 ) { return 0 ; } if ( m == 14 || m == 13 ) { y -- ; if ( m == 14 && d == 29 && y % 400 == 0 || y % 4 == 0 ) { d -- ; } } return 365 * y + Math . floor ( y \/ 4 ) - Math . floor ( y \/ 100 ) + Math . floor ( y \/ 400 ) + Math . floor ( 306 * ( m + 1 ) \/ 10 ) + d - 429 ; } }","import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int y = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int res = 365 * 2014 + 2014 \/ 4 - 2014 \/ 100 + 2014 \/ 400 + ( 306 * 6 ) \/ 10 + 17 - 429 ; int kk = 0 ; if ( m > 2 ) { kk = 365 * y + y \/ 4 - y \/ 100 + y \/ 400 + ( 306 * ( m + 1 ) ) \/ 10 + d - 429 ; } else { y -- ; m += 12 ; kk = 365 * y + y \/ 4 - y \/ 100 + y \/ 400 + ( 306 * ( m + 1 ) ) \/ 10 + d - 429 ; } System . out . println ( res - kk ) ; } }","import java . util . Scanner ; import java . util . stream . IntStream ; public class Main { static final Scanner s = new Scanner ( System . in ) ; static int getInt ( ) { return Integer . parseInt ( s . next ( ) ) ; } static IntStream REPS ( int r ) { return IntStream . range ( 0 , r ) ; } static IntStream REPS ( int l , int r ) { return IntStream . rangeClosed ( l , r ) ; } static IntStream INTS ( int l ) { return REPS ( l ) . map ( i -> getInt ( ) ) ; } public static void main ( String [ ] __ ) { System . out . println ( getDayFromEpic ( 2014 , 5 , 17 ) - getDayFromEpic ( getInt ( ) , getInt ( ) , getInt ( ) ) ) ; } public static long getDayFromEpic ( int y , int m , int d ) { if ( m <= 2 ) { y -- ; m += 12 ; } return 365 * y + y \/ 4 - y \/ 100 + y \/ 400 + ( 306 * ( m + 1 ) ) \/ 10 + d - 429 ; } public static boolean isLeap ( int y ) { return y % 4 == 0 && ( y % 100 != 0 || y % 400 == 0 ) ; } }","import java . util . * ; public class Main { private static int y ; private static int m ; private static int d ; public static void input ( ) { Scanner scan = new Scanner ( System . in ) ; y = scan . nextInt ( ) ; m = scan . nextInt ( ) ; d = scan . nextInt ( ) ; } public static void main ( String args [ ] ) { input ( ) ; int Y = 2014 ; int M = 5 ; int D = 17 ; if ( m == 1 ) { y = y - 1 ; m = 13 ; } if ( m == 2 ) { y = y - 1 ; m = 14 ; } int diffFrom = 365 * y + y \/ 4 - y \/ 100 + y \/ 400 + 306 * ( m + 1 ) \/ 10 + d - 429 ; int diffTo = 365 * Y + Y \/ 4 - Y \/ 100 + Y \/ 400 + 306 * ( M + 1 ) \/ 10 + D - 429 ; System . out . println ( diffTo - diffFrom ) ; } }"],"bleu":0.30946097954718244,"rouge_l":0.40897478875030346}
{"id":37,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { st = new StringTokenizer ( br . readLine ( ) ) ; a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( b [ i ] > b [ i ] ) { count ++ ; } } System . out . println ( count ) ; } }"],"references":["import java . util . LinkedHashSet ; import java . util . Scanner ; import java . util . Set ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long K = sc . nextLong ( ) ; Set < Long > sunekeSet = new LinkedHashSet < > ( ) ; for ( long m = 1 ; m <= 10e15 ; m *= 10 ) { boolean sunukeCheckFlag = true ; for ( int i = 1 ; sunukeCheckFlag ; i ++ ) { long x = i * m + m - 1 ; long y = ( i + 1 ) * m + m - 1 ; if ( x * Sn ( y ) <= y * Sn ( x ) ) { sunekeSet . add ( x ) ; if ( K == sunekeSet . size ( ) ) { sunekeSet . stream ( ) . forEach ( System . out :: println ) ; return ; } } else { sunukeCheckFlag = false ; } } } } public static long Sn ( long num ) { long Sn = 0 ; while ( num != 0 ) { Sn += num % 10 ; num \/= 10 ; } return Sn ; } }","import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long K = Long . parseLong ( sc . next ( ) ) ; long ans = 0 ; long ans1 , ans2 , s1 , s2 ; long add = 1 ; long count = 0 ; boolean flag = true ; int times = 9 ; while ( count < K ) { ans1 = ans + add ; s1 = 0 ; String a1 = String . valueOf ( ans1 ) ; for ( int i = 0 ; i < a1 . length ( ) ; i ++ ) { s1 += Long . valueOf ( String . valueOf ( a1 . charAt ( i ) ) ) ; } ans2 = ans1 + add ; s2 = 0 ; String a2 = String . valueOf ( ans2 ) ; for ( int i = 0 ; i < a2 . length ( ) ; i ++ ) { s2 += Long . valueOf ( String . valueOf ( a2 . charAt ( i ) ) ) ; } if ( ans2 * s1 - ans1 * s2 < 0 ) { add *= 10 ; flag = true ; continue ; } if ( flag ) { times = 9 ; } else { times = 10 ; } String a = String . valueOf ( ans + add ) ; for ( int i = 0 ; i < times ; i ++ ) { ans += add ; String ai = String . valueOf ( ans ) ; if ( a . length ( ) != ai . length ( ) ) { ans -= add ; break ; } System . out . println ( ans ) ; count ++ ; if ( count >= K ) { break ; } } flag = false ; } } }","import java . util . * ; public class Main { public void main ( Scanner sc ) { int k = sc . nextInt ( ) ; long n = 1 ; for ( int i = 0 ; i < k ; i ++ ) { System . out . println ( n ) ; n = next ( n + 1 ) ; } } private long next ( long n ) { double min = Double . MAX_VALUE ; long minn = 0 ; for ( long tmp = 1 ; tmp <= n ; tmp *= 10 ) { for ( int i = ( int ) ( ( n \/ tmp ) % 10 ) ; i <= 9 ; i ++ ) { long next = ( ( n \/ tmp \/ 10 ) * 10 + i ) * tmp + ( tmp - 1 ) ; int s = s ( next ) ; if ( min > ( next * 1.0 \/ s ) ) { min = ( next * 1.0 \/ s ) ; minn = next ; } } } return minn ; } private int s ( long n ) { int wa = 0 ; while ( n != 0 ) { wa += n % 10 ; n \/= 10 ; } return wa ; } public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; new Main ( ) . main ( sc ) ; sc . close ( ) ; } }","import java . util . Arrays ; import java . util . Comparator ; import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; long K = scanner . nextLong ( ) ; long n = 1 ; double s = 1.d ; for ( long i = 1 ; i <= K ; i ++ ) { long x = n ; long z = 0 ; long y = 1 ; while ( x > 0 ) { x \/= 10 ; z = z * 10 + 9 ; y *= 10 ; long t = x * y + z ; double ts = sunuke ( t ) ; if ( ts < s ) { n = t ; s = ts ; } } System . out . println ( n ) ; n ++ ; s = sunuke ( n ) ; } } private static double sunuke ( long n ) { return ( double ) n \/ sumDigits ( n ) ; } private static long sumDigits ( long i ) { long sum = 0 ; while ( i > 0 ) { sum += i % 10 ; i \/= 10 ; } return sum ; } private static long numDigits ( long i ) { long d = 0 ; while ( i > 0 ) { d ++ ; i \/= 10 ; } return d ; } }","import java . io . FileNotFoundException ; import java . io . PrintWriter ; import java . util . Arrays ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) throws FileNotFoundException { new Main ( ) . run ( ) ; } void run ( ) { Scanner sc = new Scanner ( System . in ) ; long K = sc . nextLong ( ) ; long ans = 0 ; long add = 1 ; PrintWriter pw = new PrintWriter ( System . out ) ; int cnt = 0 ; while ( cnt ++ < K ) { if ( ( ans + add ) * S ( ans + add * 10 ) > ( ans + add * 10 ) * S ( ans + add ) ) add = add * 10 ; ans += add ; pw . println ( ans ) ; } pw . close ( ) ; } long S ( long a ) { long ret = 0 ; while ( a > 0 ) { ret += a % 10 ; a \/= 10 ; } return ret ; } static void tr ( Object ... objects ) { System . out . println ( Arrays . deepToString ( objects ) ) ; } }"],"bleu":0.4088548900829304,"rouge_l":0.45731642835446445}
{"id":38,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans += a [ i ] - 1 ; } System . out . println ( ans ) ; } } }"],"references":["import java . util . Arrays ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { final Scanner sc = new Scanner ( System . in ) ; char [ ] s = sc . next ( ) . toCharArray ( ) ; int N = sc . nextInt ( ) ; int [ ] [ ] map = new int [ N ] [ 2 ] ; for ( int i = 0 ; i < N ; i ++ ) { map [ i ] [ 0 ] = sc . nextInt ( ) ; map [ i ] [ 1 ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < N ; i ++ ) { int start = map [ i ] [ 0 ] ; int end = map [ i ] [ 1 ] ; String tmp = new String ( s ) ; char [ ] target = tmp . substring ( start - 1 , end ) . toCharArray ( ) ; for ( int j = 0 ; j <= end - start ; j ++ ) { s [ start - 1 + j ] = target [ target . length - j - 1 ] ; } } System . out . println ( new String ( s ) ) ; } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . OutputStream ; import java . io . PrintWriter ; import java . util . StringTokenizer ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; Task solver = new Task ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class Task { public void solve ( int testNumber , InputReader in , PrintWriter out ) { String S = in . next ( ) ; int N = in . nextInt ( ) ; int [ ] l = new int [ N ] ; int [ ] r = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { l [ i ] = in . nextInt ( ) ; r [ i ] = in . nextInt ( ) ; S = S . substring ( 0 , l [ i ] - 1 ) + new StringBuffer ( S . substring ( l [ i ] - 1 , r [ i ] ) ) . reverse ( ) . toString ( ) + S . substring ( r [ i ] , S . length ( ) ) ; } out . println ( S ) ; } } static class InputReader { public BufferedReader reader ; public StringTokenizer tokenizer ; public InputReader ( InputStream stream ) { reader = new BufferedReader ( new InputStreamReader ( stream ) , 32768 ) ; tokenizer = null ; } public String next ( ) { while ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( ) ; } public char nextChar ( ) { return next ( ) . charAt ( 0 ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } public long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } public double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } } }","import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; StringBuilder sb = new StringBuilder ( sc . next ( ) ) ; int n = sc . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int left = sc . nextInt ( ) ; int right = sc . nextInt ( ) ; StringBuilder part = new StringBuilder ( sb . subSequence ( left - 1 , right ) ) ; part . reverse ( ) ; for ( int j = 0 ; j < part . length ( ) ; j ++ ) { sb . setCharAt ( left - 1 + j , part . charAt ( j ) ) ; } } System . out . println ( sb ) ; } }","import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String s = scanner . nextLine ( ) ; int n = Integer . parseInt ( scanner . nextLine ( ) ) ; for ( int i = 0 ; i < n ; i ++ ) { String [ ] line = scanner . nextLine ( ) . split ( \" ▁ \" , 2 ) ; int left = Integer . parseInt ( line [ 0 ] ) - 1 ; int right = Integer . parseInt ( line [ 1 ] ) - 1 ; s = String . format ( \" % s % s % s \" , s . substring ( 0 , left ) , new StringBuilder ( s . substring ( left , right + 1 ) ) . reverse ( ) . toString ( ) , s . substring ( right + 1 , s . length ( ) ) ) ; } System . out . println ( s ) ; } }","import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String str = sc . next ( ) ; char [ ] c = new char [ str . length ( ) ] ; char [ ] tmp = new char [ str . length ( ) ] ; for ( int i = 0 ; i < c . length ; i ++ ) { c [ i ] = str . charAt ( i ) ; } int n = sc . nextInt ( ) ; int tmpL ; int tmpR ; for ( int i = 0 ; i < n ; i ++ ) { tmpL = sc . nextInt ( ) - 1 ; tmpR = sc . nextInt ( ) - 1 ; for ( int j = 0 ; j < tmpR - tmpL + 1 ; j ++ ) { tmp [ j ] = c [ tmpL + j ] ; } for ( int j = 0 ; j < tmpR - tmpL + 1 ; j ++ ) { c [ tmpL + j ] = tmp [ tmpR - tmpL - j ] ; } } for ( char a : c ) { System . out . print ( a ) ; } System . out . println ( \" \" ) ; } }"],"bleu":0.6443813277807507,"rouge_l":0.6758073003683599}
{"id":39,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int A = sc . nextInt ( ) ; int B = sc . nextInt ( ) ; int C = sc . nextInt ( ) ; int D = sc . nextInt ( ) ; System . out . println ( Math . max ( A + B , C ) ) ; } }"],"references":["import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int x = sc . nextInt ( ) ; int t = sc . nextInt ( ) ; System . out . println ( ( x - t > 0 ) ? x - t : 0 ) ; sc . close ( ) ; } }","import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . StringTokenizer ; import java . io . IOException ; import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . InputStream ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; ASandglass2 solver = new ASandglass2 ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class ASandglass2 { public void solve ( int testNumber , InputReader in , PrintWriter out ) { int x = in . nextInt ( ) ; int t = in . nextInt ( ) ; if ( x > t ) { out . println ( x - t ) ; return ; } out . println ( 0 ) ; } } static class InputReader { public BufferedReader reader ; public StringTokenizer tokenizer ; public InputReader ( InputStream stream ) { reader = new BufferedReader ( new InputStreamReader ( stream ) , 32768 ) ; tokenizer = null ; } public String next ( ) { while ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } } }","import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collections ; import java . util . PriorityQueue ; import java . util . Scanner ; import java . util . TreeSet ; import org . omg . Messaging . SyncScopeHelper ; public class Main { Scanner sc = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { new Main ( ) ; } public Main ( ) { new Test_100 ( ) . doIt ( ) ; } class Test_100 { void doIt ( ) { int X = sc . nextInt ( ) ; int T = sc . nextInt ( ) ; int ans = X - T ; if ( ans < 0 ) System . out . println ( 0 ) ; else System . out . println ( ans ) ; } } }","import java . io . PrintWriter ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; int N = Integer . parseInt ( sc . next ( ) ) ; int T = Integer . parseInt ( sc . next ( ) ) ; if ( N - T > 0 ) { out . println ( N - T ) ; } else { out . println ( 0 ) ; } out . flush ( ) ; } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . OutputStream ; import java . io . PrintWriter ; import java . util . StringTokenizer ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; Task solver = new Task ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class Task { public void solve ( int testNumber , InputReader in , PrintWriter out ) { int X = in . nextInt ( ) ; int t = in . nextInt ( ) ; if ( X > t ) { out . println ( X - t ) ; } else { out . println ( 0 ) ; } } } static class InputReader { public BufferedReader reader ; public StringTokenizer tokenizer ; public InputReader ( InputStream stream ) { reader = new BufferedReader ( new InputStreamReader ( stream ) , 32768 ) ; tokenizer = null ; } public String next ( ) { while ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } } }"],"bleu":0.6540772495615031,"rouge_l":0.7349397590361446}
{"id":40,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int K = sc . nextInt ( ) ; int [ ] a = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < N ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } long ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < N ; j ++ ) { for ( int k = 0 ; k < N ; k ++ ) { for ( int k = 0 ; k < N ; k ++ ) { for ( int k = 0 ; k < N ; k ++ ) { if ( a [ k ] > b [ k ] ) { ans += b [ i ] - b [ j ] ; } } } } } System . out . println ( ans ) ; } }"],"references":["import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int q = scanner . nextInt ( ) ; for ( int i = 0 ; i < q ; i ++ ) { long a = scanner . nextLong ( ) ; long b = scanner . nextLong ( ) ; System . out . println ( solve ( a , b ) ) ; } } private static long solve ( long a , long b ) { if ( a > b ) return solve ( b , a ) ; if ( a == b ) return 2 * a - 2 ; if ( a + 1 == b ) return 2 * a - 2 ; long ab = a * b ; long c = findUpperRoot ( ab ) ; if ( c * ( c + 1 ) >= ab ) return 2 * c - 2 ; return 2 * c - 1 ; } private static long findUpperRoot ( long n ) { long ll = 0 ; long ul = ( long ) Math . sqrt ( n ) + 1 ; while ( ll + 1 < ul ) { long mid = ( ll + ul ) \/ 2 ; if ( mid * mid < n ) { ll = mid ; } else { ul = mid ; } } return ll ; } }","import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . StringTokenizer ; import java . io . IOException ; import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . InputStream ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; TaskD solver = new TaskD ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class TaskD { public void solve ( int testNumber , InputReader in , PrintWriter out ) { int N = in . nextInt ( ) ; for ( int i = 0 ; i < N ; i ++ ) { long A = in . nextLong ( ) ; long B = in . nextLong ( ) ; long a = Math . min ( A , B ) ; long b = Math . max ( A , B ) ; long ans ; if ( a == b || a + 1 == b ) { ans = 2 * ( a - 1 ) ; } else { long c = ( long ) Math . sqrt ( a * b ) ; if ( c * c == a * b ) c -- ; if ( c * ( c + 1 ) < a * b ) { ans = 2 * c - 1 ; } else { ans = 2 * c - 2 ; } } out . println ( ans ) ; } } } static class InputReader { public BufferedReader reader ; public StringTokenizer tokenizer ; public InputReader ( InputStream stream ) { reader = new BufferedReader ( new InputStreamReader ( stream ) , 32768 ) ; tokenizer = null ; } public String next ( ) { while ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( ) ; } public long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Comparator ; import java . util . PriorityQueue ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int q = Integer . parseInt ( br . readLine ( ) ) ; for ( int i = 0 ; i < q ; i ++ ) { String [ ] tmpArray = br . readLine ( ) . split ( \" ▁ \" ) ; int a = Integer . parseInt ( tmpArray [ 0 ] ) ; int b = Integer . parseInt ( tmpArray [ 1 ] ) ; if ( a > b ) { int tmp = a ; a = b ; b = tmp ; } long result = 0 ; if ( a == b ) { result = 2 * a - 2 ; } else if ( a + 1 == b ) { result = 2 * a - 2 ; } else { long c = ( long ) Math . sqrt ( ( long ) a * b ) ; if ( c * c == ( long ) a * b ) { c -- ; } if ( c * ( c + 1 ) >= ( long ) a * b ) { result = 2 * c - 2 ; } else { result = 2 * c - 1 ; } } System . out . println ( result ) ; } } }","import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int q = sc . nextInt ( ) ; long a , b ; for ( int i = 0 ; i < q ; i ++ ) { long tmpa = sc . nextLong ( ) ; long tmpb = sc . nextLong ( ) ; if ( tmpa > tmpb ) { a = tmpb ; b = tmpa ; } else { a = tmpa ; b = tmpb ; } long ans = 0 ; ans += ( a - 1 ) * 2 ; int count = 0 ; long score = a * b ; int l = 1 ; int r = 1000000000 ; while ( r > l + 1 ) { int m = ( l + r ) \/ 2 ; if ( ( long ) m * ( long ) m < score ) { l = m ; } else { r = m - 1 ; } } if ( l != r && ( long ) ( l + 1 ) * ( long ) ( l + 1 ) < score ) l ++ ; if ( l > a && l < b ) ans += ( l - a ) * 2 ; if ( ( long ) l * ( long ) ( l + 1 ) < score && l + 1 != b ) ans ++ ; System . out . println ( ans ) ; } } }","import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int q = scanner . nextInt ( ) ; for ( int i = 0 ; i < q ; i ++ ) { long a = scanner . nextLong ( ) ; long b = scanner . nextLong ( ) ; System . out . println ( solve ( a , b ) ) ; } } private static long solve ( long a , long b ) { if ( a > b ) return solve ( b , a ) ; long ab = Math . multiplyExact ( a , b ) ; long i = findUpperRoot ( ab ) ; if ( i == 0 ) return 0 ; long j = ( ab - 1 ) \/ i ; long res = Math . multiplyExact ( i , 2 ) ; if ( i == j ) res -- ; if ( i >= a ) res -- ; return res ; } private static long findUpperRoot ( long n ) { long ll = 0 ; long ul = ( long ) Math . sqrt ( n ) + 1 ; while ( Math . addExact ( ll , 1 ) < ul ) { long mid = Math . addExact ( ll , ul ) \/ 2 ; if ( Math . multiplyExact ( mid , mid ) < n ) { ll = mid ; } else { ul = mid ; } } return ll ; } }"],"bleu":0.40119510294239574,"rouge_l":0.4621483526164327}
{"id":41,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter pw = new PrintWriter ( System . out ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int N = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ M ] ; for ( int i = 0 ; i < M ; i ++ ) { st = new StringTokenizer ( br . readLine ( ) ) ; a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int [ ] b = new int [ M ] ; for ( int i = 0 ; i < M ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } long ans = 0 ; for ( int i = 0 ; i < M ; i ++ ) { for ( int j = 0 ; j < M ; j ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { if ( a [ k ] > b [ k ] ) { b [ k ] -= a [ k ] ; b [ k ] -= b [ k ] ; } } } } } for ( int i = 0 ; i < M ; i ++ ) { for ( int j = 0 ; j < M ; j ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { if ( b [ k ] > a [ k ] ) { b [ k ] -= b [ k ] ; } } } } } } pw . println ( ans ) ; pw . close ( ) ; } }"],"references":["import java . math . BigInteger ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long H = sc . nextInt ( ) - 1 ; long W = sc . nextInt ( ) - 1 ; long A = sc . nextInt ( ) - 1 ; long B = sc . nextInt ( ) - 1 ; long MOD = 1000000007L ; BigInteger BMOD = BigInteger . valueOf ( MOD ) ; long x = 1 ; long y = 1 ; for ( long i = W - B ; i <= W - B - 1 + H ; i ++ ) { y = ( y * i ) % MOD ; } for ( long i = 1 ; i <= H ; i ++ ) { y = ( y * BigInteger . valueOf ( i ) . modInverse ( BMOD ) . longValue ( ) ) % MOD ; } long ans = ( x * y ) % MOD ; long a1 = B + 1 ; long a2 = 1 ; long b1 = W - B - 1 + H ; long b2 = H ; for ( int i = 1 ; i < H - A ; i ++ ) { x = ( x * a1 ) % MOD ; x = ( x * BigInteger . valueOf ( a2 ) . modInverse ( BMOD ) . longValue ( ) ) % MOD ; a1 += 1 ; a2 += 1 ; y = ( y * b2 ) % MOD ; y = ( y * BigInteger . valueOf ( b1 ) . modInverse ( BMOD ) . longValue ( ) ) % MOD ; b1 -= 1 ; b2 -= 1 ; ans = ( ans + x * y ) % MOD ; } System . out . println ( ans ) ; } }","import java . util . Scanner ; public class Main { static final int MAX = 1000005 ; static final int MOD = 1000000007 ; static long [ ] fact = new long [ MAX ] ; static long [ ] factInv = new long [ MAX ] ; static long [ ] inv = new long [ MAX ] ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int H = sc . nextInt ( ) ; int W = sc . nextInt ( ) ; int A = sc . nextInt ( ) ; int B = sc . nextInt ( ) ; sc . close ( ) ; factMOD ( ) ; invMOD ( ) ; factInvMOD ( ) ; long ans = 0 ; for ( int i = B ; i < W ; i ++ ) { ans += combMOD ( H - A - 1 + i , i ) * combMOD ( W + A - i - 2 , A - 1 ) ; ans %= MOD ; } System . out . println ( ans ) ; } static void factMOD ( ) { fact [ 0 ] = 1 ; for ( int i = 1 ; i < MAX ; i ++ ) { fact [ i ] = fact [ i - 1 ] * i % MOD ; } } static void invMOD ( ) { inv [ 0 ] = 1 ; inv [ 1 ] = 1 ; for ( int i = 2 ; i < MAX ; i ++ ) { inv [ i ] = MOD - inv [ ( int ) ( MOD % i ) ] * ( MOD \/ i ) % MOD ; } } static void factInvMOD ( ) { factInv [ 0 ] = 1 ; for ( int i = 1 ; i < MAX ; i ++ ) { factInv [ i ] = factInv [ i - 1 ] * inv [ i ] % MOD ; } } static long combMOD ( int n , int k ) { if ( n < k ) return 0 ; if ( n < 0 || k < 0 ) return 0 ; return fact [ n ] * ( ( factInv [ k ] * factInv [ n - k ] ) % MOD ) % MOD ; } }"],"bleu":0.25139509112646147,"rouge_l":0.41661706656946984}
{"id":42,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { ans += b [ i ] ; } } System . out . println ( ans ) ; } }"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . ArrayList ; import java . util . Collections ; import java . util . List ; import java . util . Scanner ; import java . util . HashMap ; public class Main { public static void main ( String args [ ] ) { int leftNum , rightNum , cnt = 0 ; Scanner scan = new Scanner ( System . in ) ; leftNum = scan . nextInt ( ) ; rightNum = scan . nextInt ( ) ; ArrayList < Integer > l_list = new ArrayList < Integer > ( ) ; ArrayList < Integer > r_list = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < leftNum ; i ++ ) l_list . add ( scan . nextInt ( ) ) ; for ( int i = 0 ; i < rightNum ; i ++ ) r_list . add ( scan . nextInt ( ) ) ; for ( int i = 0 ; i < leftNum ; i ++ ) { int sameIndex = r_list . indexOf ( l_list . get ( i ) ) ; if ( sameIndex != - 1 ) { cnt ++ ; l_list . set ( i , - 1 ) ; r_list . set ( sameIndex , - 1 ) ; } } System . out . println ( cnt ) ; } }","import java . util . * ; public class Main { private static int L ; private static int R ; private static ArrayList < Integer > Left = new ArrayList < > ( ) ; private static ArrayList < Integer > Right = new ArrayList < > ( ) ; public static void input ( ) { Scanner scan = new Scanner ( System . in ) ; L = scan . nextInt ( ) ; R = scan . nextInt ( ) ; for ( int i = 0 ; i < L ; i ++ ) { Left . add ( scan . nextInt ( ) ) ; } for ( int i = 0 ; i < R ; i ++ ) { Right . add ( scan . nextInt ( ) ) ; } } public static void main ( String args [ ] ) { input ( ) ; int ans = 0 ; for ( int i = 0 ; i < L ; i ++ ) { for ( int j = 0 ; j < Right . size ( ) ; j ++ ) { if ( Left . get ( i ) == Right . get ( j ) ) { Right . remove ( j ) ; ans ++ ; break ; } } } System . out . println ( ans ) ; } }","import java . util . * ; import static java . lang . System . * ; public class Main { public static void main ( String [ ] $ ) { Scanner sc = new Scanner ( in ) ; int L = sc . nextInt ( ) ; int R = sc . nextInt ( ) ; int [ ] l = new int [ L ] ; int [ ] r = new int [ R ] ; for ( int i = 0 ; i < L ; i ++ ) { l [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < R ; i ++ ) { r [ i ] = sc . nextInt ( ) ; } Arrays . sort ( r ) ; Arrays . sort ( l ) ; int i = 0 , j = 0 , ans = 0 ; while ( i < L && j < R ) { if ( l [ i ] == r [ j ] ) { i ++ ; j ++ ; ans ++ ; } else if ( l [ i ] > r [ j ] ) { j ++ ; } else { i ++ ; } } out . println ( ans ) ; } }","import java . util . * ; public class Main { public static void main ( String [ ] args ) { String [ ] LArray = new String [ 100 ] ; String [ ] RArray = new String [ 100 ] ; int cnt = 0 ; Scanner sc = new Scanner ( System . in ) ; int R = sc . nextInt ( ) ; int L = sc . nextInt ( ) ; sc . nextLine ( ) ; String l = sc . nextLine ( ) ; String r = sc . nextLine ( ) ; LArray = l . split ( \" ▁ \" ) ; RArray = r . split ( \" ▁ \" ) ; char [ ] l2 = l . toCharArray ( ) ; Arrays . sort ( l2 ) ; String l2sort = new String ( l2 ) ; char [ ] r2 = r . toCharArray ( ) ; Arrays . sort ( r2 ) ; String r2sort = new String ( r2 ) ; List < String > LArray2 = Arrays . asList ( LArray ) ; List < String > RArray2 = Arrays . asList ( RArray ) ; for ( int i = 0 ; i < LArray . length ; i ++ ) { for ( int j = 0 ; j < RArray . length ; j ++ ) { String wkL = LArray [ i ] ; String wkR = RArray [ j ] ; if ( wkL . equals ( wkR ) ) { cnt ++ ; RArray = remove ( RArray , wkR ) ; break ; } } } System . out . println ( cnt ) ; } private static String [ ] remove ( String [ ] target , String removeStr ) { List < String > temp = new ArrayList < > ( Arrays . asList ( target ) ) ; temp . remove ( removeStr ) ; return temp . toArray ( new String [ 0 ] ) ; } }","import java . util . HashMap ; import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { Scanner cin = new Scanner ( System . in ) ; int L = cin . nextInt ( ) ; int R = cin . nextInt ( ) ; int tmp ; int result = 0 ; HashMap < Integer , Integer > l = new HashMap < Integer , Integer > ( ) ; HashMap < Integer , Integer > r = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < L ; i ++ ) { tmp = cin . nextInt ( ) ; if ( l . containsKey ( tmp ) ) { l . put ( tmp , l . get ( tmp ) + 1 ) ; } else { l . put ( tmp , 1 ) ; } } for ( int j = 0 ; j < R ; j ++ ) { tmp = cin . nextInt ( ) ; if ( l . containsKey ( tmp ) ) { if ( l . get ( tmp ) > 0 ) { result ++ ; l . put ( tmp , l . get ( tmp ) - 1 ) ; } } } System . out . println ( result ) ; } }"],"bleu":0.6471248622809945,"rouge_l":0.6594594594594595}
{"id":43,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } Arrays . sort ( a ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += a [ i ] ; } System . out . println ( sum ) ; } }"],"references":["import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int x = sc . nextInt ( ) ; int max = 1 ; for ( int i = 2 ; i <= x ; i ++ ) { int tmp = i * i ; while ( tmp <= x ) { if ( tmp > max ) { max = tmp ; } tmp *= i ; } } System . out . println ( max ) ; sc . close ( ) ; } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . OutputStream ; import java . io . PrintWriter ; import java . util . StringTokenizer ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; Task solver = new Task ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class Task { public void solve ( int testNumber , InputReader in , PrintWriter out ) { int X = in . nextInt ( ) ; int ans = 1 ; for ( int i = 1 ; i < X \/ 2 ; i ++ ) { for ( int j = 2 ; j < X \/ 2 ; j ++ ) { if ( Math . pow ( i , j ) <= X ) { ans = ( int ) Math . max ( ans , Math . pow ( i , j ) ) ; } } } out . println ( ans ) ; } } static class InputReader { public BufferedReader reader ; public StringTokenizer tokenizer ; public InputReader ( InputStream stream ) { reader = new BufferedReader ( new InputStreamReader ( stream ) , 32768 ) ; tokenizer = null ; } public String next ( ) { while ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } } }","import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int [ ] po = new int [ ] { 1 , 4 , 8 , 16 , 32 , 64 , 128 , 256 , 512 , 9 , 27 , 81 , 243 , 729 , 25 , 125 , 100 , 625 , 36 , 216 , 49 , 343 , 1000 , 121 , 144 , 169 , 196 , 225 , 289 , 324 , 361 , 400 , 441 , 484 , 529 , 576 , 676 , 784 , 841 , 900 , 961 , 1001 } ; Arrays . sort ( po ) ; int n = sc . nextInt ( ) ; int i = 0 ; for ( i = 0 ; po [ i ] <= n ; i ++ ) { } System . out . println ( po [ i - 1 ] ) ; } }","import static java . lang . System . * ; import java . util . * ; public class Main { static Scanner sc = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { int x = sc . nextInt ( ) ; TreeSet < Integer > set = new TreeSet < > ( ) ; set . add ( 1 ) ; for ( int i = 2 ; i <= 33 ; i ++ ) { for ( int j = 2 ; j <= 100 ; j ++ ) { if ( Math . pow ( i , j ) > x ) break ; set . add ( ( int ) Math . pow ( i , j ) ) ; } } int ans = 1 ; for ( Integer n : set ) { if ( n > x ) break ; ans = n ; } out . println ( ans ) ; } }","import java . util . Arrays ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int X = sc . nextInt ( ) ; int a = 1 ; int i = 2 ; int [ ] array ; if ( X == 1 || X == 2 || X == 3 ) { System . out . println ( 1 ) ; } else { array = new int [ 1000 ] ; Arrays . fill ( array , 0 ) ; int index = 0 ; while ( true ) { a = i * i ; if ( a > X ) break ; for ( int j = a ; j <= X ; j *= i ) { array [ index ] = j ; index ++ ; } i ++ ; } Arrays . parallelSort ( array ) ; int ans = array [ 999 ] ; System . out . println ( ans ) ; } } }"],"bleu":0.5769796110052708,"rouge_l":0.5954325112275234}
{"id":44,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( b [ i ] == 1 ) { count ++ ; } } System . out . println ( count ) ; } }"],"references":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int prev = - 1 ; int count = 0 ; int max = 0 ; for ( int i = 0 ; i < 2 * n ; i ++ ) { if ( prev == arr [ i % n ] ) { count ++ ; if ( max < count ) { max = count ; } } else { count = 1 ; } prev = arr [ i % n ] ; } if ( max > n ) { System . out . println ( - 1 ) ; } else { System . out . println ( ( max - 1 ) \/ 2 + 1 ) ; } } }","import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int a [ ] = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int cnt0 = 0 ; int cnt1 = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( a [ i ] == 0 ) { cnt0 ++ ; } if ( a [ i ] == 1 ) { cnt1 ++ ; } } if ( cnt0 == N || cnt1 == N ) { System . out . println ( - 1 ) ; return ; } int max = 0 ; cnt0 = 0 ; cnt1 = 0 ; for ( int i = 0 ; i < 2 * N ; i ++ ) { if ( a [ i % N ] == 0 ) { if ( cnt1 > 0 ) { max = Math . max ( max , cnt1 ) ; cnt1 = 0 ; } cnt0 ++ ; } if ( a [ i % N ] == 1 ) { if ( cnt0 > 0 ) { max = Math . max ( max , cnt0 ) ; cnt0 = 0 ; } cnt1 ++ ; } } System . out . println ( ( max - 1 ) \/ 2 + 1 ) ; } }","import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int prev = - 1 ; int count = 0 ; int max = 0 ; for ( int i = 0 ; i < 2 * n ; i ++ ) { if ( prev == arr [ i % n ] ) { count ++ ; if ( max < count ) { max = count ; } } else { count = 1 ; } prev = arr [ i % n ] ; } if ( max > n ) { System . out . println ( - 1 ) ; } else { System . out . println ( ( max - 1 ) \/ 2 + 1 ) ; } } }","import java . util . * ; public class Main { private static int N ; private static ArrayList < Integer > color = new ArrayList < > ( ) ; public static void input ( ) { Scanner scan = new Scanner ( System . in ) ; N = scan . nextInt ( ) ; for ( int i = 0 ; i < N ; i ++ ) { color . add ( scan . nextInt ( ) ) ; } } public static void main ( String args [ ] ) { input ( ) ; int cnt0 = 0 ; int cnt1 = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( color . get ( i ) == 0 ) cnt0 ++ ; if ( color . get ( i ) == 1 ) cnt1 ++ ; } if ( cnt0 == N || cnt1 == N ) { System . out . println ( - 1 ) ; return ; } int head = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( color . get ( i ) != color . get ( i + 1 ) ) { head = i + 1 ; break ; } } ArrayList < Integer > arrayList = new ArrayList < > ( ) ; for ( int i = head ; i < N ; i ++ ) arrayList . add ( color . get ( i ) ) ; for ( int i = 0 ; i < head ; i ++ ) arrayList . add ( color . get ( i ) ) ; int max = 0 ; int count = 0 ; for ( int i = 0 ; i < N - 1 ; i ++ ) { if ( arrayList . get ( i ) == arrayList . get ( i + 1 ) ) count ++ ; else count = 0 ; max = Math . max ( count , max ) ; } System . out . println ( max \/ 2 + 1 ) ; } }"],"bleu":0.5639553246894924,"rouge_l":0.6285076682018897}
{"id":45,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int m = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % m == 0 ) { count ++ ; } } System . out . println ( count ) ; } }"],"references":["import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scn = new Scanner ( System . in ) ; int n = scn . nextInt ( ) ; int ng1 = scn . nextInt ( ) ; int ng2 = scn . nextInt ( ) ; int ng3 = scn . nextInt ( ) ; String ans = \" \" ; if ( n == ng1 || n == ng2 || n == ng3 ) { ans = \" NO \" ; } else { for ( int i = 0 ; i < 100 ; i ++ ) { if ( n - 3 != ng1 && n - 3 != ng2 && n - 3 != ng3 ) n -= 3 ; else if ( n - 2 != ng1 && n - 2 != ng2 && n - 2 != ng3 ) n -= 2 ; else if ( n - 1 != ng1 && n - 1 != ng2 && n - 1 != ng3 ) n -= 1 ; } if ( n > 0 ) ans = \" NO \" ; else ans = \" YES \" ; } System . out . println ( ans ) ; } }","import java . util . * ; import static java . lang . System . * ; import static java . lang . Math . * ; public class Main { public static void main ( String [ ] $ ) { Scanner sc = new Scanner ( in ) ; int n = sc . nextInt ( ) ; int [ ] ng = new int [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { ng [ i ] = sc . nextInt ( ) ; } if ( n <= 3 || ! D ( ng , n ) ) { out . println ( D ( ng , n ) ? \" YES \" : \" NO \" ) ; exit ( 0 ) ; } int [ ] cnt = new int [ n + 1 ] ; for ( int i = 0 ; i <= n ; i ++ ) { cnt [ i ] = 101 ; } if ( D ( ng , n ) ) cnt [ n ] = 0 ; for ( int i = n - 1 ; i > n - 3 ; i -- ) { if ( D ( ng , i ) ) { cnt [ i ] = 1 ; } } for ( int i = n - 3 ; i >= 0 ; i -- ) { int min = 101 ; if ( D ( ng , i ) ) { if ( cnt [ i + 1 ] <= 100 ) min = min ( min , cnt [ i + 1 ] ) ; if ( cnt [ i + 2 ] <= 100 ) min = min ( min , cnt [ i + 2 ] ) ; if ( cnt [ i + 3 ] <= 100 ) min = min ( min , cnt [ i + 3 ] ) ; } cnt [ i ] = min + 1 ; } if ( cnt [ 0 ] <= 100 ) out . println ( \" YES \" ) ; else out . println ( \" NO \" ) ; } static boolean D ( int [ ] ng , int a ) { int c = 0 ; for ( int i = 0 ; i < ng . length ; i ++ ) { if ( ng [ i ] == a ) c ++ ; } return c == 0 ; } }","import java . util . * ; class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int ng [ ] = new int [ 3 ] ; int [ ] DP = new int [ 301 ] ; int [ ] DP2 = new int [ 301 ] ; Arrays . fill ( DP , 0 ) ; Arrays . fill ( DP2 , 999 ) ; for ( int i = 0 ; i < 3 ; i ++ ) { ng [ i ] = sc . nextInt ( ) ; DP [ ng [ i ] ] = - 1 ; } DP [ 0 ] = 1 ; DP2 [ 0 ] = 0 ; for ( int i = 1 ; i < 4 ; i ++ ) { boolean flag = false ; for ( int j = 0 ; j < 3 ; j ++ ) { if ( ng [ j ] == i ) flag = true ; } if ( flag ) { DP [ i ] = - 1 ; } else { DP [ i ] = 1 ; DP2 [ i ] = 1 ; } } for ( int i = 4 ; i <= n ; i ++ ) { if ( i != ng [ 0 ] && i != ng [ 1 ] && i != ng [ 2 ] ) { if ( DP [ i - 3 ] == 1 ) { DP [ i ] = 1 ; DP2 [ i ] = DP2 [ i - 3 ] + 1 ; } else if ( DP [ i - 2 ] == 1 ) { DP [ i ] = 1 ; DP2 [ i ] = DP2 [ i - 2 ] + 1 ; } else if ( DP [ i - 1 ] == 1 ) { DP [ i ] = 1 ; DP2 [ i ] = DP2 [ i - 1 ] + 1 ; } else { DP [ i ] = - 1 ; } } else { DP [ i ] = - 1 ; } } if ( DP2 [ n ] <= 100 ) { System . out . print ( \" YES \" ) ; } else { System . out . print ( \" NO \" ) ; } } }","import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long goal = sc . nextLong ( ) ; long ng1 = sc . nextLong ( ) ; long ng2 = sc . nextLong ( ) ; long ng3 = sc . nextLong ( ) ; int a = 100 ; if ( goal == ng1 || goal == ng2 || goal == ng3 ) { System . out . println ( \" NO \" ) ; return ; } while ( goal != 0 && a > 0 ) { if ( goal - 3 != ng1 && goal - 3 != ng2 && goal - 3 != ng3 && goal - 3 >= 0 ) { goal = goal - 3 ; } else if ( goal - 2 != ng1 && goal - 2 != ng2 && goal - 2 != ng3 && goal - 2 >= 0 ) { goal = goal - 2 ; } else if ( goal - 1 != ng1 && goal - 1 != ng2 && goal - 1 != ng3 ) { goal = goal - 1 ; } else { System . out . println ( \" NO \" ) ; return ; } a -- ; } if ( goal == 0 ) { System . out . println ( \" YES \" ) ; } else { System . out . println ( \" NO \" ) ; } } }","import java . util . * ; import java . util . stream . IntStream ; public class Main { private static Scanner scanner = new Scanner ( System . in ) ; public static void main ( String [ ] $ ) { int n = scanner . nextInt ( ) , ng [ ] = { scanner . nextInt ( ) , scanner . nextInt ( ) , scanner . nextInt ( ) } ; if ( ng [ 0 ] != n && ng [ 1 ] != n && ng [ 2 ] != n ) { for ( int i = 0 ; i < 100 && n > 0 ; i ++ ) { boolean [ ] b = new boolean [ 3 ] ; for ( int j = 0 ; j < 3 ; j ++ ) if ( n > ng [ j ] && n - ng [ j ] <= 3 ) b [ 3 - n + ng [ j ] ] = true ; OptionalInt j = IntStream . range ( 0 , 3 ) . filter ( k -> ! b [ k ] ) . findFirst ( ) ; if ( ! j . isPresent ( ) ) break ; n -= 3 - j . getAsInt ( ) ; } } System . out . println ( n > 0 ? \" NO \" : \" YES \" ) ; } }"],"bleu":0.5153721934747741,"rouge_l":0.5072640787838225}
{"id":46,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( a [ i ] > b [ j ] ) { ans ++ ; } } out . println ( ans ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . util . ArrayList ; import java . util . HashSet ; import java . util . List ; import java . util . Scanner ; import java . util . Set ; public class Main { private static List < Set < Integer > > edge ; private static boolean [ ] checked ; private static boolean dfs ( int i ) { if ( checked [ i ] ) return false ; checked [ i ] = true ; Set < Integer > set = edge . get ( i ) ; for ( int j : set ) { edge . get ( j ) . remove ( i ) ; if ( ! dfs ( j ) ) return false ; } set . clear ( ) ; return true ; } public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; edge = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { edge . add ( new HashSet < > ( ) ) ; } for ( int i = 0 ; i < m ; i ++ ) { int u = sc . nextInt ( ) - 1 ; int v = sc . nextInt ( ) - 1 ; edge . get ( u ) . add ( v ) ; edge . get ( v ) . add ( u ) ; } checked = new boolean [ n ] ; int res = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( dfs ( i ) ) res ++ ; } System . out . println ( res ) ; sc . close ( ) ; } }","import java . util . * ; import java . awt . Point ; class Main { static ArrayList < Integer > alist ; static Point [ ] p ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int M = sc . nextInt ( ) ; alist = new ArrayList < Integer > ( ) ; p = new Point [ M ] ; for ( int i = 0 ; i < N ; i ++ ) { alist . add ( i + 1 ) ; } for ( int i = 0 ; i < M ; i ++ ) { p [ i ] = new Point ( sc . nextInt ( ) , sc . nextInt ( ) ) ; } int cnt = 0 ; while ( alist . size ( ) != 0 ) { boolean isTrue = searchTree ( alist . get ( 0 ) ) ; if ( isTrue ) cnt ++ ; } System . out . println ( cnt ) ; } public static int nextLeaf ( int n ) { for ( int i = 0 ; i < p . length ; i ++ ) { if ( p [ i ] . getX ( ) == n ) { int num = ( int ) ( p [ i ] . getY ( ) ) ; p [ i ] . move ( - 1 , - 1 ) ; return num ; } else if ( p [ i ] . getY ( ) == n ) { int num = ( int ) ( p [ i ] . getX ( ) ) ; p [ i ] . move ( - 1 , - 1 ) ; return num ; } } return - 1 ; } public static boolean searchTree ( int i ) { if ( alist . contains ( ( Integer ) ( i ) ) ) { alist . remove ( ( Integer ) ( i ) ) ; } else { return false ; } int nextLeaf ; boolean isTree = true ; while ( ( nextLeaf = nextLeaf ( i ) ) > 0 ) { boolean isNext = searchTree ( nextLeaf ) ; isTree = isTree && isNext ; } return isTree ; } }","import java . util . Scanner ; import java . util . Collections ; import java . util . ArrayList ; import java . util . ArrayDeque ; import java . util . Deque ; import java . util . PriorityQueue ; public class Main { static class Edge { int to ; Edge ( int to ) { this . to = to ; } } static boolean visited [ ] ; static ArrayList < Edge > [ ] edges ; static boolean flag ; public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int N = scanner . nextInt ( ) ; int M = scanner . nextInt ( ) ; int [ ] u = new int [ M ] ; int [ ] v = new int [ M ] ; edges = new ArrayList [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { edges [ i ] = new ArrayList < Edge > ( ) ; } for ( int i = 0 ; i < M ; i ++ ) { u [ i ] = scanner . nextInt ( ) - 1 ; v [ i ] = scanner . nextInt ( ) - 1 ; edges [ u [ i ] ] . add ( new Edge ( v [ i ] ) ) ; edges [ v [ i ] ] . add ( new Edge ( u [ i ] ) ) ; } visited = new boolean [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { visited [ i ] = false ; } flag = false ; int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( ! visited [ i ] ) { flag = true ; dfs ( i , - 1 ) ; if ( flag ) { ans ++ ; } } } System . out . println ( ans ) ; } public static void dfs ( int now , int parent ) { for ( Edge e : edges [ now ] ) { if ( e . to == parent ) continue ; if ( visited [ e . to ] ) { flag = false ; } else { visited [ e . to ] = true ; dfs ( e . to , now ) ; } } return ; } } Note : . \/ Main . java uses unchecked or unsafe operations . Note : Recompile with - Xlint : unchecked for details .","import java . io . PrintStream ; import java . util . ArrayDeque ; import java . util . Deque ; import java . util . HashSet ; import java . util . Scanner ; import java . util . Set ; public class Main { final static PrintStream so = System . out ; final static Scanner sc = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] [ ] g = new int [ n ] [ n ] ; for ( int i = 0 ; i < m ; i ++ ) { int u = sc . nextInt ( ) - 1 ; int v = sc . nextInt ( ) - 1 ; g [ u ] [ v ] = 1 ; g [ v ] [ u ] = 1 ; } boolean [ ] visited = new boolean [ n ] ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( visited [ i ] ) continue ; Deque < Integer > deq = new ArrayDeque < > ( ) ; Set < Integer > tree = new HashSet < > ( ) ; deq . push ( i ) ; tree . add ( i ) ; boolean hasCircle = false ; while ( ! deq . isEmpty ( ) ) { int current = deq . pop ( ) ; visited [ current ] = true ; for ( int j = 0 ; j < n ; j ++ ) { if ( visited [ j ] ) continue ; if ( g [ current ] [ j ] == 1 ) { if ( tree . contains ( j ) ) hasCircle = true ; deq . push ( j ) ; tree . add ( j ) ; } } } if ( ! hasCircle ) count ++ ; } System . out . println ( count ) ; } }","import java . io . File ; import java . io . IOException ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { Scanner sc = new Scanner ( System . in ) ; int ans = 0 ; int N = sc . nextInt ( ) ; int M = sc . nextInt ( ) ; int [ ] [ ] uv = new int [ 2 * M ] [ 2 ] ; for ( int i = 0 ; i < M ; i ++ ) { int u = sc . nextInt ( ) ; int v = sc . nextInt ( ) ; int [ ] edge = { u , v } ; uv [ i ] = edge ; int [ ] edge2 = { v , u } ; uv [ i + M ] = edge2 ; } ArrayList < Integer [ ] > queue = new ArrayList < Integer [ ] > ( ) ; int [ ] check = new int [ N + 1 ] ; int checkNum = 0 ; for ( int nodeNum = 1 ; nodeNum <= N ; nodeNum ++ ) { if ( check [ nodeNum ] != 0 ) continue ; boolean tf = true ; checkNum = nodeNum ; check [ nodeNum ] = checkNum ; for ( int i = 0 ; i < 2 * M ; i ++ ) { if ( uv [ i ] [ 0 ] == nodeNum ) { Integer [ ] q = { uv [ i ] [ 1 ] , nodeNum } ; queue . add ( q ) ; check [ uv [ i ] [ 1 ] ] = checkNum ; } } while ( queue . size ( ) != 0 ) { Integer [ ] q = queue . remove ( 0 ) ; for ( int i = 0 ; i < 2 * M ; i ++ ) { if ( uv [ i ] [ 0 ] == q [ 0 ] && uv [ i ] [ 1 ] != q [ 1 ] ) { if ( check [ uv [ i ] [ 1 ] ] != 0 ) tf = false ; else { check [ uv [ i ] [ 1 ] ] = checkNum ; Integer [ ] qq = { uv [ i ] [ 1 ] , q [ 0 ] } ; queue . add ( qq ) ; } } } } if ( tf ) ans ++ ; } System . out . println ( ans ) ; } }"],"bleu":0.5311568898077198,"rouge_l":0.48617316749184886}
{"id":47,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; out . println ( c \/ a ) ; out . flush ( ) ; } static int l_min ( int [ ] a ) { Arrays . sort ( a ) ; return a [ 0 ] ; } static int l_max ( int [ ] a ) { int l = a . length ; Arrays . sort ( a ) ; return a [ l - 1 ] ; } public static PrintWriter out ; public static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; double R = sc . nextDouble ( ) ; double G = sc . nextDouble ( ) ; System . out . println ( ( int ) ( G + ( G - R ) ) ) ; } }","import java . io . PrintWriter ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; int r = Integer . parseInt ( sc . next ( ) ) ; int g = Integer . parseInt ( sc . next ( ) ) ; int ans = g * 2 - r ; out . println ( ans ) ; out . flush ( ) ; } }","import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Main main = new Main ( ) ; main . solve ( ) ; } void solve ( ) { Scanner sc = new Scanner ( System . in ) ; int a = Integer . parseInt ( sc . next ( ) ) ; int b = Integer . parseInt ( sc . next ( ) ) ; sc . close ( ) ; System . out . println ( a + ( ( b - a ) * 2 ) ) ; } }","import java . util . * ; public class Main { public static void main ( String [ ] args ) { A ( ) ; } public static void A ( ) { Scanner sc = new Scanner ( System . in ) ; int r = sc . nextInt ( ) ; int g = sc . nextInt ( ) ; System . out . println ( 2 * g - r ) ; } }","import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int R = sc . nextInt ( ) ; int G = sc . nextInt ( ) ; sc . close ( ) ; System . out . println ( 2 * G - R ) ; } }"],"bleu":0.25340615887448464,"rouge_l":0.4024734333870496}
{"id":48,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; out . println ( Math . min ( a , b ) ) ; out . close ( ) ; } static int l_min ( int [ ] a ) { Arrays . sort ( a ) ; return a [ 0 ] ; } static int l_max ( int [ ] a ) { int l = a . length ; Arrays . sort ( a ) ; return a [ l - 1 ] ; } public static PrintWriter out ; public static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = Integer . parseInt ( sc . next ( ) ) - 1 ; int b = Integer . parseInt ( sc . next ( ) ) - 1 ; System . out . println ( a * b ) ; } }","import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { new Main ( ) . solveA ( ) ; } private void solveA ( ) { Scanner scanner = null ; int numA = 0 ; int numB = 0 ; try { scanner = new Scanner ( System . in ) ; numA = scanner . nextInt ( ) ; numB = scanner . nextInt ( ) ; System . out . println ( ( numA - 1 ) * ( numB - 1 ) ) ; System . out . println ( \" \" ) ; } finally { if ( scanner != null ) { scanner . close ( ) ; } } } private void solveB ( ) { Scanner scanner = null ; int numN = 0 ; int numK = 0 ; int numS = 0 ; try { scanner = new Scanner ( System . in ) ; numN = scanner . nextInt ( ) ; System . out . println ( \" \" ) ; } finally { if ( scanner != null ) { scanner . close ( ) ; } } } private void solveC ( ) { Scanner scanner = null ; int numN = 0 ; int numK = 0 ; int numS = 0 ; try { scanner = new Scanner ( System . in ) ; numN = scanner . nextInt ( ) ; System . out . println ( \" \" ) ; } finally { if ( scanner != null ) { scanner . close ( ) ; } } } private void solveD ( ) { Scanner scanner = null ; int numN = 0 ; int numK = 0 ; int numS = 0 ; try { scanner = new Scanner ( System . in ) ; numN = scanner . nextInt ( ) ; System . out . println ( \" \" ) ; } finally { if ( scanner != null ) { scanner . close ( ) ; } } } }","import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; final int A = sc . nextInt ( ) ; final int B = sc . nextInt ( ) ; System . out . println ( ( A - 1 ) * ( B - 1 ) ) ; } }","import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; System . out . println ( ( a - 1 ) * ( b - 1 ) ) ; } }","import java . util . Scanner ; public class Main { public static String process ( int a , int b ) { return String . valueOf ( a * b - a - b + 1 ) ; } public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; final String result = process ( a , b ) ; System . out . println ( result ) ; } }"],"bleu":0.3727899718618261,"rouge_l":0.5972357156675375}
{"id":49,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans += a [ i ] - a [ i ] ; } out . println ( ans ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . util . * ; import java . lang . * ; import java . math . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int h = sc . nextInt ( ) ; int w = sc . nextInt ( ) ; String [ ] s = new String [ h ] ; for ( int i = 0 ; i < h ; i ++ ) { s [ i ] = sc . next ( ) ; } for ( int i = 0 ; i < h ; i ++ ) { System . out . println ( s [ i ] ) ; System . out . println ( s [ i ] ) ; } sc . close ( ) ; } }","import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { PrintWriter out = new PrintWriter ( System . out ) ; InputStreamScanner in = new InputStreamScanner ( System . in ) ; new Main ( ) . solve ( in , out ) ; out . flush ( ) ; } private void solve ( InputStreamScanner in , PrintWriter out ) { int y = in . nextInt ( ) ; int x = in . nextInt ( ) ; for ( int i = 0 ; i < y ; i ++ ) { String s = in . next ( ) ; out . println ( s ) ; out . println ( s ) ; } } static class InputStreamScanner { private InputStream in ; private byte [ ] buf = new byte [ 1024 ] ; private int len = 0 ; private int off = 0 ; InputStreamScanner ( InputStream in ) { this . in = in ; } String next ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( int b = skip ( ) ; ! isSpace ( b ) ; ) { sb . appendCodePoint ( b ) ; b = read ( ) ; } return sb . toString ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } char nextChar ( ) { return ( char ) skip ( ) ; } int skip ( ) { for ( int b ; ( b = read ( ) ) != - 1 ; ) { if ( ! isSpace ( b ) ) { return b ; } } return - 1 ; } private boolean isSpace ( int c ) { return c < 33 || c > 126 ; } private int read ( ) { if ( len == - 1 ) { throw new InputMismatchException ( \" End ▁ of ▁ Input \" ) ; } if ( off >= len ) { off = 0 ; try { len = in . read ( buf ) ; } catch ( IOException e ) { throw new InputMismatchException ( e . getMessage ( ) ) ; } if ( len <= 0 ) { return - 1 ; } } return buf [ off ++ ] ; } } }","import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; public class Main { public static void main ( String [ ] args ) throws Exception { BufferedReader input = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer tokenizer = new StringTokenizer ( input . readLine ( ) ) ; int x = Integer . parseInt ( tokenizer . nextToken ( ) ) ; int y = Integer . parseInt ( tokenizer . nextToken ( ) ) ; char [ ] [ ] image = new char [ x ] [ ] ; for ( int i = 0 ; i < x ; i ++ ) { image [ i ] = input . readLine ( ) . toCharArray ( ) ; } StringBuilder out = new StringBuilder ( ) ; for ( int i = 0 ; i < x * 2 ; i ++ ) { for ( int j = 0 ; j < y ; j ++ ) { out . append ( image [ ( i \/ 2 ) ] [ j ] ) ; } System . out . println ( out ) ; out = new StringBuilder ( ) ; } } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . OutputStream ; import java . io . PrintWriter ; import java . util . StringTokenizer ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; Task solver = new Task ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class Task { public void solve ( int testNumber , InputReader in , PrintWriter out ) { int H = in . nextInt ( ) ; int W = in . nextInt ( ) ; String [ ] C = new String [ H ] ; for ( int i = 0 ; i < H ; i ++ ) { C [ i ] = in . next ( ) ; out . println ( C [ i ] ) ; out . println ( C [ i ] ) ; } } } static class InputReader { public BufferedReader reader ; public StringTokenizer tokenizer ; public InputReader ( InputStream stream ) { reader = new BufferedReader ( new InputStreamReader ( stream ) , 32768 ) ; tokenizer = null ; } public String next ( ) { while ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( ) ; } public char nextChar ( ) { return next ( ) . charAt ( 0 ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } public long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } public double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } } }","import java . util . Scanner ; import java . util . ArrayList ; import java . util . List ; public class Main { public static void main ( String args [ ] ) { Scanner scan = new Scanner ( System . in ) ; int h = scan . nextInt ( ) ; int w = scan . nextInt ( ) ; List < String > list = new ArrayList < String > ( ) ; for ( int i = 0 ; i < h ; i ++ ) { String nextWord = scan . next ( ) ; list . add ( nextWord ) ; } for ( int i = 0 ; i < h ; i ++ ) { System . out . println ( list . get ( i ) + \" \\n \" + list . get ( i ) ) ; } } }"],"bleu":0.6559536237110315,"rouge_l":0.6957429718875502}
{"id":50,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { System . out . print ( a [ i ] + \" \" ) ; } System . out . println ( ) ; } } }"],"references":["import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = Integer . parseInt ( sc . next ( ) ) ; Set < String > set = new HashSet ( ) ; for ( int i = 0 ; i < N ; i ++ ) { set . add ( sc . next ( ) ) ; } System . out . println ( set . size ( ) ) ; } } Note : . \/ Main . java uses unchecked or unsafe operations . Note : Recompile with - Xlint : unchecked for details .","import java . io . BufferedReader ; import java . io . InputStreamReader ; public class Main { public static void main ( String [ ] args ) throws Exception { BufferedReader input = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int n = Integer . parseInt ( input . readLine ( ) ) ; boolean [ ] values = new boolean [ 101 ] ; int v ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { v = Integer . parseInt ( input . readLine ( ) ) ; if ( ! values [ v ] ) count ++ ; values [ v ] = true ; } System . out . println ( count ) ; } }","import java . util . ArrayList ; import java . util . Collections ; import java . util . Comparator ; import java . util . HashSet ; import java . util . List ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; HashSet < Integer > set = new HashSet < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int number = sc . nextInt ( ) ; set . add ( number ) ; } System . out . println ( set . size ( ) ) ; } }","import java . util . Scanner ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int a = scan . nextInt ( ) ; List < Integer > listA = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < a ; i ++ ) { listA . add ( new Integer ( scan . nextInt ( ) ) ) ; } List < Integer > listB = new ArrayList < Integer > ( new LinkedHashSet < > ( listA ) ) ; System . out . println ( listB . size ( ) ) ; } }","import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] hairetu = new int [ N ] ; int ans = 1 ; for ( int i = 0 ; i < N ; i ++ ) { hairetu [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < N - 1 ; i ++ ) { for ( int j = 0 ; j < N - 1 - i ; j ++ ) { if ( hairetu [ j ] < hairetu [ j + 1 ] ) { int temp = hairetu [ j ] ; hairetu [ j ] = hairetu [ j + 1 ] ; hairetu [ j + 1 ] = temp ; } } } int now = hairetu [ 0 ] ; for ( int i = 0 ; i < N ; i ++ ) { if ( now > hairetu [ i ] ) { now = hairetu [ i ] ; ans ++ ; } } System . out . println ( ans ) ; } }"],"bleu":0.8119120280605072,"rouge_l":0.6949019136599873}
{"id":51,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; System . out . println ( a > b ? a : b ) ; } static int l_min ( int [ ] a ) { Arrays . sort ( a ) ; return a [ 0 ] ; } static int l_max ( int [ ] a ) { int l = a . length ; Arrays . sort ( a ) ; return a [ l - 1 ] ; } public static PrintWriter out ; public static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . util . Scanner ; public class Main { static int ans , N ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . nextLine ( ) ; String S [ ] = s . split ( \" \" ) ; s = \" \" ; for ( int i = 0 ; i < S . length ; i ++ ) { s += 10 - Integer . parseInt ( S [ i ] ) ; } System . out . println ( s ) ; } }","import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { PrintWriter out = new PrintWriter ( System . out ) ; InputStreamScanner in = new InputStreamScanner ( System . in ) ; new Main ( ) . solve ( in , out ) ; out . flush ( ) ; } private void solve ( InputStreamScanner in , PrintWriter out ) { out . println ( in . next ( ) . replace ( '1' , '2' ) . replace ( '9' , '1' ) . replace ( '2' , '9' ) ) ; } static class InputStreamScanner { private InputStream in ; private byte [ ] buf = new byte [ 1024 ] ; private int len = 0 ; private int off = 0 ; InputStreamScanner ( InputStream in ) { this . in = in ; } String next ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( int b = skip ( ) ; ! isSpace ( b ) ; ) { sb . appendCodePoint ( b ) ; b = read ( ) ; } return sb . toString ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } char nextChar ( ) { return ( char ) skip ( ) ; } int skip ( ) { for ( int b ; ( b = read ( ) ) != - 1 ; ) { if ( ! isSpace ( b ) ) { return b ; } } return - 1 ; } private boolean isSpace ( int c ) { return c < 33 || c > 126 ; } private int read ( ) { if ( len == - 1 ) { throw new InputMismatchException ( \" End ▁ of ▁ Input \" ) ; } if ( off >= len ) { off = 0 ; try { len = in . read ( buf ) ; } catch ( IOException e ) { throw new InputMismatchException ( e . getMessage ( ) ) ; } if ( len <= 0 ) { return - 1 ; } } return buf [ off ++ ] ; } } }","import java . util . Arrays ; import java . util . Scanner ; import java . util . stream . Collectors ; public class Main { private enum Digit { NINE ( \"9\" , \"1\" ) , ONE ( \"1\" , \"9\" ) ; private final String from ; private final String to ; Digit ( String from , String to ) { this . from = from ; this . to = to ; } public static Digit fromString ( String from ) { return Arrays . stream ( values ( ) ) . filter ( digit -> digit . from . equals ( from ) ) . findFirst ( ) . orElseThrow ( ( ) -> new IllegalArgumentException ( \" Unknown ▁ digit : ▁ \" + from ) ) ; } public String convert ( ) { return to ; } } public static String process ( TestCase testCase ) { final int N = testCase . N ; return Arrays . stream ( String . valueOf ( N ) . split ( \" \" ) ) . map ( Digit :: fromString ) . map ( Digit :: convert ) . collect ( Collectors . joining ( ) ) ; } public static void main ( String [ ] args ) { TestCase testCase = readFromInput ( ) ; final String result = process ( testCase ) ; output ( result ) ; } private static TestCase readFromInput ( ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; return new TestCase ( N ) ; } private static void output ( String result ) { System . out . println ( result ) ; } public static class TestCase { final int N ; public TestCase ( int N ) { this . N = N ; } } }","import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { try { Scanner sc = new Scanner ( System . in ) ; int n ; n = Integer . parseInt ( sc . next ( ) ) ; if ( n == 111 ) { System . out . println ( 999 ) ; } else if ( n == 119 ) { System . out . println ( 991 ) ; } else if ( n == 191 ) { System . out . println ( 919 ) ; } else if ( n == 199 ) { System . out . println ( 911 ) ; } else if ( n == 911 ) { System . out . println ( 199 ) ; } else if ( n == 919 ) { System . out . println ( 191 ) ; } else if ( n == 991 ) { System . out . println ( 119 ) ; } else if ( n == 999 ) { System . out . println ( 111 ) ; } } catch ( Exception e ) { System . out . println ( \" out \" ) ; } } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . ArrayList ; import java . util . List ; public class Main { public static void main ( String [ ] args ) { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int n = 0 ; String s = \" \" ; try { s = br . readLine ( ) ; } catch ( NumberFormatException | IOException e ) { e . printStackTrace ( ) ; } String [ ] str = new String [ 3 ] ; str = s . split ( \" \" ) ; List < Integer > ret = new ArrayList < Integer > ( ) ; for ( int j = 0 ; j < 3 ; j ++ ) { if ( str [ j ] . equals ( \"1\" ) ) ret . add ( 9 ) ; else ret . add ( 1 ) ; } String ans = String . valueOf ( ret . get ( 0 ) ) + String . valueOf ( ret . get ( 1 ) ) + String . valueOf ( ret . get ( 2 ) ) ; System . out . println ( ans ) ; } }"],"bleu":0.5984831778332456,"rouge_l":0.5825537023251448}
{"id":52,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int N = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ M ] ; for ( int i = 0 ; i < M ; i ++ ) { st = new StringTokenizer ( br . readLine ( ) ) ; a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int [ ] b = new int [ M ] ; for ( int i = 0 ; i < M ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < M ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < M ; i ++ ) { for ( int j = 0 ; j < M ; j ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } } System . out . println ( b [ M - 1 ] ) ; } }"],"references":["import java . util . Scanner ; class Main { static long gcd ( long a , long b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; } public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; String in = scan . next ( ) ; String [ ] in2 = in . split ( \" \/ \" ) ; long x = Long . parseLong ( in2 [ 0 ] ) ; long y = Long . parseLong ( in2 [ 1 ] ) ; long g = gcd ( x , y ) ; x \/= g ; y \/= g ; scan . close ( ) ; long n = 2 * x \/ y ; n = Math . max ( n , 1 ) ; boolean f = true ; for ( ; n <= 2 * x \/ y + 1 ; n ++ ) { if ( n % y == 0 ) { System . out . println ( n + \" ▁ \" + ( n * ( n + 1 ) \/ 2 - n \/ y * x ) ) ; f = false ; } } if ( f ) System . out . println ( \" Impossible \" ) ; } }","import java . util . * ; public class Main { public static void main ( String ... argv ) { Scanner in = new Scanner ( System . in ) ; String [ ] s = in . next ( ) . split ( \" \/ \" ) ; long x = Long . parseLong ( s [ 0 ] ) ; long y = Long . parseLong ( s [ 1 ] ) ; long g = gcd ( x , y ) ; x \/= g ; y \/= g ; boolean flag = true ; for ( int i = 0 ; i < 2 ; i ++ ) { long n = 2 * x \/ y + i ; if ( n % y == 0 ) { long m = n * ( n + 1 ) \/ 2 - ( n \/ y ) * x ; if ( m <= n && m > 0 ) { System . out . println ( n + \" ▁ \" + m ) ; flag = false ; } } } if ( flag ) System . out . println ( \" Impossible \" ) ; } static long gcd ( long a , long b ) { if ( a < b ) { long temp = a ; a = b ; b = temp ; } while ( b != 0 ) { long c = a ; a = b ; b = c % b ; } return a ; } }","import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; String [ ] s = in . next ( ) . split ( \" \/ \" ) ; long x = Long . parseLong ( s [ 0 ] ) ; long y = Long . parseLong ( s [ 1 ] ) ; long g = gcd ( x , y ) ; x \/= g ; y \/= g ; boolean isFound = false ; if ( x < y ) { System . out . println ( \" Impossible \" ) ; return ; } for ( int i = 0 ; i < 2 ; i ++ ) { long n = 2 * x \/ y + i ; if ( n % y == 0 ) { long m = n * ( n + 1 ) \/ 2 - n \/ y * x ; if ( 1 <= m && m <= n ) { System . out . println ( n + \" ▁ \" + m ) ; isFound = true ; } } } if ( ! isFound ) { System . out . println ( \" Impossible \" ) ; } } public static long gcd ( long a , long b ) { return ( b == 0 ) ? a : gcd ( b , a % b ) ; } }","import java . util . Scanner ; class Main { static long gcd ( long a , long b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; } public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; String in = scan . next ( ) ; String [ ] in2 = in . split ( \" \/ \" ) ; long x = Long . parseLong ( in2 [ 0 ] ) ; long y = Long . parseLong ( in2 [ 1 ] ) ; long g = gcd ( x , y ) ; x \/= g ; y \/= g ; scan . close ( ) ; long s = ( 2 * x - y ) \/ y + 1 ; s = ( s + y - 1 ) \/ y * y ; long n = Math . max ( s , y ) ; boolean f = true ; while ( n * y + y - 2 * x <= 2 * y ) { long m = n * ( n + 1 ) \/ 2 - n \/ y * x ; System . out . println ( n + \" ▁ \" + m ) ; f = false ; n += y ; } if ( f ) System . out . println ( \" Impossible \" ) ; } }","import java . io . * ; import java . util . * ; import java . math . * ; public class Main { static boolean debug = false ; static boolean debug2 = false ; public static void main ( String [ ] args ) throws java . io . IOException { debug = 1 <= args . length ; debug2 = 2 <= args . length ; BufferedReader in = new BufferedReader ( new InputStreamReader ( System . in ) ) ; String [ ] ia = in . readLine ( ) . split ( \" \/ \" ) ; BigInteger X = new BigInteger ( ia [ 0 ] ) ; BigInteger Y = new BigInteger ( ia [ 1 ] ) ; boolean flag = true ; for ( long i = - 5 ; i < 5 ; ++ i ) { final BigInteger V = BigInteger . valueOf ( 2 ) . multiply ( X ) . divide ( Y ) ; final BigInteger N = V . add ( BigInteger . valueOf ( i ) ) ; if ( N . compareTo ( BigInteger . ZERO ) <= 0 ) { if ( debug ) { System . err . println ( ) ; } continue ; } final BigInteger U = N . multiply ( BigInteger . ONE . add ( N ) . multiply ( Y ) . subtract ( BigInteger . valueOf ( 2 ) . multiply ( X ) ) ) ; final BigInteger L = BigInteger . valueOf ( 2 ) . multiply ( Y ) ; if ( debug ) { System . err . println ( N ) ; System . err . println ( U ) ; System . err . println ( L ) ; } if ( U . mod ( L ) . compareTo ( BigInteger . ZERO ) > 0 ) { if ( debug ) { System . err . println ( ) ; } continue ; } final BigInteger M = U . divide ( L ) ; if ( 0 <= M . compareTo ( BigInteger . ONE ) && M . compareTo ( N ) <= 0 ) { System . out . println ( \" \" + N + \" ▁ \" + M ) ; if ( debug ) { System . err . println ( \" \" + N + \" ▁ \" + M ) ; } flag = false ; } if ( debug ) { System . err . println ( ) ; } } if ( flag ) { System . out . println ( \" Impossible \" ) ; } } }"],"bleu":0.3200869174975578,"rouge_l":0.4408933187789928}
{"id":53,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; int n = sc . nextInt ( ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans += Math . abs ( a - b ) ; } System . out . println ( ans ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { int n , a , b , digitsSum = 0 , totalSum = 0 ; Scanner sc = new Scanner ( System . in ) ; n = sc . nextInt ( ) ; a = sc . nextInt ( ) ; b = sc . nextInt ( ) ; for ( int i = 1 ; i <= n ; i ++ ) { int tmp = i ; for ( int j = 0 ; j < 5 ; j ++ ) { digitsSum += tmp % 10 ; tmp \/= 10 ; } if ( a <= digitsSum && digitsSum <= b ) totalSum += i ; digitsSum = 0 ; } System . out . println ( totalSum ) ; } }","import java . util . ArrayList ; import java . util . Collections ; import java . util . Comparator ; import java . util . List ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int result = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { int index = i ; int sum = 0 ; while ( index != 0 ) { sum += index % 10 ; index \/= 10 ; } if ( sum >= a && sum <= b ) { result += i ; } } System . out . println ( result ) ; } }","import java . io . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader bfr = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter out = new PrintWriter ( System . out ) ; String str = bfr . readLine ( ) ; String [ ] wa = str . split ( \" ▁ \" ) ; int N = Integer . parseInt ( wa [ 0 ] ) ; int a = Integer . parseInt ( wa [ 1 ] ) ; int b = Integer . parseInt ( wa [ 2 ] ) ; int sum = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { int tmpSum = 0 ; int num = i ; while ( num != 0 ) { tmpSum += num % 10 ; num \/= 10 ; } if ( tmpSum >= a && tmpSum <= b ) { sum += i ; } } out . println ( sum ) ; out . flush ( ) ; } }","import java . util . * ; class Main { public static int findSumOfDigits ( int n ) { int sum = 0 ; while ( n > 0 ) { sum += n % 10 ; n = n \/ 10 ; } return sum ; } public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = Integer . parseInt ( sc . next ( ) ) ; int A = Integer . parseInt ( sc . next ( ) ) ; int B = Integer . parseInt ( sc . next ( ) ) ; int total = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { int sum = findSumOfDigits ( i ) ; if ( A <= sum && sum <= B ) { total = total + i ; } } System . out . print ( total ) ; } }","import java . util . Scanner ; class Main { public static void main ( String arg [ ] ) { Scanner sc = new Scanner ( System . in ) ; String S = sc . nextLine ( ) ; sc . close ( ) ; System . out . println ( sum ( S ) ) ; } public static int sum ( String S ) { String s [ ] = S . split ( \" ▁ \" ) ; int N = Integer . parseInt ( s [ 0 ] ) ; int A = Integer . parseInt ( s [ 1 ] ) ; int B = Integer . parseInt ( s [ 2 ] ) ; String [ ] ss = new String [ N + 1 ] ; int a = 0 ; int sum = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { ss [ i ] = String . valueOf ( i ) ; } for ( int j = 1 ; j <= N ; j ++ ) { String [ ] tmp = ss [ j ] . split ( \" \" ) ; for ( int k = 0 ; k < tmp . length ; k ++ ) { a += Integer . parseInt ( tmp [ k ] ) ; } if ( a >= A && a <= B ) { sum += Integer . parseInt ( ss [ j ] ) ; } a = 0 ; } return sum ; } }"],"bleu":0.42987140896994486,"rouge_l":0.48686824848949256}
{"id":54,"predictions":["import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; } public static long mod = 17352642619633L ; void run ( FastScanner in , PrintWriter out ) {"],"references":["import java . util . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; String input = s . next ( ) ; int a = s . nextInt ( ) ; int b = s . nextInt ( ) ; int c = s . nextInt ( ) ; int d = s . nextInt ( ) ; for ( int i = 0 ; i < input . length ( ) ; i ++ ) { if ( i == a || i == b || i == c || i == d ) { System . out . print ( \" \\\" \" ) ; } System . out . print ( input . charAt ( i ) ) ; } if ( input . length ( ) == d ) { System . out . print ( \" \\\" \" ) ; } System . out . println ( ) ; } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . UncheckedIOException ; import java . util . StringTokenizer ; class Main { public static void main ( String [ ] args ) { SC sc = new SC ( System . in ) ; String s = sc . next ( ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) + 1 ; int c = sc . nextInt ( ) + 2 ; int d = sc . nextInt ( ) + 3 ; if ( a != 0 ) { s = s . substring ( 0 , a ) + \" \\\" \" + s . substring ( a ) ; } else if ( a == 0 ) { s = \" \\\" \" + s ; } s = s . substring ( 0 , b ) + \" \\\" \" + s . substring ( b ) ; s = s . substring ( 0 , c ) + \" \\\" \" + s . substring ( c ) ; s = s . substring ( 0 , d ) + \" \\\" \" + s . substring ( d ) ; System . out . println ( s ) ; } static class SC { private BufferedReader reader = null ; private StringTokenizer tokenizer = null ; public SC ( InputStream in ) { reader = new BufferedReader ( new InputStreamReader ( in ) ) ; } public String next ( ) { if ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } } return tokenizer . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } public long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } } }","import java . util . * ; import static java . lang . System . * ; public class Main { public static void main ( String [ ] $ ) { Scanner sc = new Scanner ( in ) ; String s = sc . next ( ) ; int a = sc . nextInt ( ) , b = sc . nextInt ( ) , c = sc . nextInt ( ) , d = sc . nextInt ( ) ; String [ ] sub = new String [ 5 ] ; sub [ 0 ] = s . substring ( 0 , a ) ; sub [ 1 ] = s . substring ( a , b ) ; sub [ 2 ] = s . substring ( b , c ) ; sub [ 3 ] = s . substring ( c , d ) ; sub [ 4 ] = s . substring ( d , s . length ( ) ) ; for ( int i = 0 ; i < 5 ; i ++ ) { out . print ( sub [ i ] ) ; if ( i < 4 ) out . print ( \" \\\" \" ) ; } out . println ( ) ; } }","import java . util . * ; public class Main { private static Scanner scanner = new Scanner ( System . in ) ; public static void main ( String [ ] $ ) { System . out . println ( scanner . next ( ) . replaceFirst ( \" . { \" + scanner . nextInt ( ) + \" } \" , \" $ 0 \\\" \" ) . replaceFirst ( \" . { \" + ( scanner . nextInt ( ) + 1 ) + \" } \" , \" $ 0 \\\" \" ) . replaceFirst ( \" . { \" + ( scanner . nextInt ( ) + 2 ) + \" } \" , \" $ 0 \\\" \" ) . replaceFirst ( \" . { \" + ( scanner . nextInt ( ) + 3 ) + \" } \" , \" $ 0 \\\" \" ) ) ; } }","import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { final Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; char [ ] arr = new char [ s . length ( ) * 2 + 1 ] ; for ( int i = 0 ; i < arr . length ; i ++ ) { arr [ i ] = ' : ' ; if ( i % 2 == 1 ) { arr [ i ] = s . charAt ( i \/ 2 ) ; } } for ( int i = 0 ; i < 4 ; i ++ ) { int p = sc . nextInt ( ) ; if ( p == 0 ) { arr [ 0 ] = ' \\\" ' ; } else { arr [ 2 * p ] = ' \\\" ' ; } } for ( char c : arr ) { if ( c == ' : ' ) continue ; System . out . print ( c ) ; } System . out . println ( ) ; } }"],"bleu":0.226791056057612,"rouge_l":0.3962556663110179}
{"id":55,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; out . println ( a > b ? \" ABC \" : \" ABD \" ) ; out . flush ( ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } }"],"references":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; for ( int i = 0 ; i <= n ; i += 7 ) { for ( int j = 0 ; i + j <= n ; j += 4 ) { if ( i + j == n ) { System . out . println ( \" Yes \" ) ; return ; } } } System . out . println ( \" No \" ) ; } }","import java . io . IOException ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) throws IOException { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String ans = \" No \" ; outer : for ( int i = 0 ; i * 4 <= n ; i ++ ) { for ( int j = 0 ; i * 4 + j * 7 <= n ; j ++ ) { if ( i * 4 + j * 7 == n ) { ans = \" Yes \" ; break outer ; } } } System . out . println ( ans ) ; sc . close ( ) ; } }","import java . util . Scanner ; public class Main { static int N = 0 ; public static void main ( String [ ] args ) { Scanner reader = new Scanner ( System . in ) ; N = reader . nextInt ( ) ; ; reader . close ( ) ; if ( execute ( 0 ) ) { System . out . print ( \" Yes \" ) ; } else { System . out . print ( \" No \" ) ; } } public static boolean execute ( int num ) { if ( num < N ) { return execute ( num + 4 ) || execute ( num + 7 ) ; } else { return ( num == N ) ; } } }","public class Main { private static java . util . Scanner scanner = new java . util . Scanner ( System . in ) ; public static void main ( String [ ] args ) { int n = scanner . nextInt ( ) ; if ( n % 4 == 0 ) { System . out . println ( \" Yes \" ) ; } else { for ( int i = 1 ; i <= n \/ 7 ; i ++ ) { if ( ( n - ( i * 7 ) ) % 4 == 0 ) { System . out . println ( \" Yes \" ) ; return ; } } System . out . println ( \" No \" ) ; } } }","import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int limit7 = N \/ 7 ; boolean check = false ; for ( int i = 0 ; i <= limit7 ; i ++ ) { int left = N - ( i * 7 ) ; if ( left % 4 == 0 ) { check = true ; } } if ( check ) { System . out . println ( \" Yes \" ) ; } else { System . out . println ( \" No \" ) ; } } }"],"bleu":0.23002496777158252,"rouge_l":0.42544365061073985}
{"id":56,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; out . println ( Math . min ( d , d ) ) ; out . close ( ) ; } static int l_min ( int [ ] a ) { Arrays . sort ( a ) ; return a [ 0 ] ; } static int l_max ( int [ ] a ) { int l = a . length ; Arrays . sort ( a ) ; return a [ l - 1 ] ; } public static PrintWriter out ; public static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long x = sc . nextLong ( ) ; long a = sc . nextLong ( ) ; long b = sc . nextLong ( ) ; System . out . println ( b <= a ? \" delicious \" : b <= x + a ? \" safe \" : \" dangerous \" ) ; } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . OutputStream ; import java . io . PrintWriter ; import java . util . StringTokenizer ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; Task solver = new Task ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class Task { public void solve ( int testNumber , InputReader in , PrintWriter out ) { int X = in . nextInt ( ) ; int A = in . nextInt ( ) ; int B = in . nextInt ( ) ; if ( A - B >= 0 ) { out . println ( \" delicious \" ) ; } else if ( Math . abs ( A - B ) <= X ) { out . println ( \" safe \" ) ; } else { out . println ( \" dangerous \" ) ; } } } static class InputReader { public BufferedReader reader ; public StringTokenizer tokenizer ; public InputReader ( InputStream stream ) { reader = new BufferedReader ( new InputStreamReader ( stream ) , 32768 ) ; tokenizer = null ; } public String next ( ) { while ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } } }","import java . io . PrintWriter ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; int N = Integer . parseInt ( sc . next ( ) ) ; int A = Integer . parseInt ( sc . next ( ) ) ; int B = Integer . parseInt ( sc . next ( ) ) ; if ( A >= B ) { out . println ( \" delicious \" ) ; } else if ( N >= ( B - A ) ) { out . println ( \" safe \" ) ; } else if ( N < ( B - A ) ) { out . println ( \" dangerous \" ) ; } out . flush ( ) ; } }","import java . util . Scanner ; public class Main { private static Scanner sc = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { int x = sc . nextInt ( ) , a = sc . nextInt ( ) , b = sc . nextInt ( ) ; if ( - a + b <= 0 ) { System . out . println ( \" delicious \" ) ; } else if ( - a + b <= x ) { System . out . println ( \" safe \" ) ; } else { System . out . println ( \" dangerous \" ) ; } } }","import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int X = sc . nextInt ( ) ; int A = sc . nextInt ( ) * - 1 ; int B = sc . nextInt ( ) ; if ( A + B > X ) { System . out . println ( \" dangerous \" ) ; } else if ( A + B > 0 ) { System . out . println ( \" safe \" ) ; } else { System . out . println ( \" delicious \" ) ; } } }"],"bleu":0.4093715251034064,"rouge_l":0.59438623218683}
{"id":57,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; out . println ( a > b ? \" ABC \" : \" ABD \" ) ; out . flush ( ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . io . UncheckedIOException ; import java . util . StringTokenizer ; import java . io . IOException ; import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . InputStream ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; LightScanner in = new LightScanner ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; AMoveAndWin solver = new AMoveAndWin ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class AMoveAndWin { public void solve ( int testNumber , LightScanner in , PrintWriter out ) { int n = in . ints ( ) , a = in . ints ( ) , b = in . ints ( ) ; if ( ( b - a ) % 2 == 0 ) { out . println ( \" Alice \" ) ; } else { out . println ( \" Borys \" ) ; } } } static class LightScanner { private BufferedReader reader = null ; private StringTokenizer tokenizer = null ; public LightScanner ( InputStream in ) { reader = new BufferedReader ( new InputStreamReader ( in ) ) ; } public String string ( ) { if ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } } return tokenizer . nextToken ( ) ; } public int ints ( ) { return Integer . parseInt ( string ( ) ) ; } } }","public class Main { private static java . util . Scanner scanner = new java . util . Scanner ( System . in ) ; public static void main ( String [ ] args ) { int n = scanner . nextInt ( ) ; System . out . println ( ( scanner . nextInt ( ) - scanner . nextInt ( ) & 1 ) == 1 ? \" Borys \" : \" Alice \" ) ; } }","import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int Alice = sc . nextInt ( ) ; int Borys = sc . nextInt ( ) ; int dif = Borys - Alice ; if ( dif % 2 == 0 ) { System . out . println ( \" Alice \" ) ; } else { System . out . println ( \" Borys \" ) ; } } }","import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner stdIn = new Scanner ( System . in ) ; int N = stdIn . nextInt ( ) ; int A = stdIn . nextInt ( ) ; int B = stdIn . nextInt ( ) ; if ( N == 2 ) System . out . println ( \" Borys \" ) ; else if ( ( A - B - 1 ) % 2 == 0 ) System . out . println ( \" Borys \" ) ; else System . out . println ( \" Alice \" ) ; } }","import java . util . * ; import java . lang . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; if ( ( b - a ) % 2 == 1 ) { System . out . println ( \" Borys \" ) ; } else { System . out . println ( \" Alice \" ) ; } } }"],"bleu":0.48837323926661996,"rouge_l":0.6578827926372189}
{"id":58,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; out . println ( n < 1000 ? \" ABC \" : \" ABD \" ) ; out . flush ( ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s [ ] = \" abcdefghijklmnopqrstuvwxyz \" . split ( \" \" , 0 ) ; String po = sc . next ( ) ; String a [ ] = po . split ( \" \" , 0 ) ; Map < String , Integer > map = new HashMap < > ( ) ; for ( int i = 0 ; i < a . length ; i ++ ) { map . put ( a [ i ] , 0 ) ; } if ( map . size ( ) == 26 ) System . out . println ( \" None \" ) ; else for ( int i = 0 ; i < s . length ; i ++ ) { if ( ! map . containsKey ( s [ i ] ) ) { System . out . println ( s [ i ] ) ; break ; } } } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . OutputStream ; import java . io . PrintWriter ; import java . util . ArrayList ; import java . util . List ; import java . util . Set ; import java . util . StringTokenizer ; import java . util . TreeSet ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; Task solver = new Task ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class Task { public void solve ( int testNumber , InputReader in , PrintWriter out ) { String s = in . next ( ) ; Set < Character > set = new TreeSet < > ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { set . add ( s . charAt ( i ) ) ; } List < Character > list = new ArrayList < > ( set ) ; if ( list . size ( ) == 26 ) { out . println ( \" None \" ) ; } else { for ( int i = ' a ' ; i <= ' z ' ; i ++ ) { if ( list . indexOf ( ( char ) i ) < 0 ) { out . println ( ( char ) i ) ; break ; } } } } } static class InputReader { public BufferedReader reader ; public StringTokenizer tokenizer ; public InputReader ( InputStream stream ) { reader = new BufferedReader ( new InputStreamReader ( stream ) , 32768 ) ; tokenizer = null ; } public String next ( ) { while ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } public double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } } }","import java . util . * ; class Main { static Scanner sc = new Scanner ( System . in ) ; static int mod = 1000000007 ; public static void main ( String [ ] args ) { String s = sc . next ( ) ; boolean [ ] alphabet = new boolean [ 26 ] ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { alphabet [ s . charAt ( i ) - 97 ] = true ; } for ( int i = 0 ; i < 26 ; i ++ ) { if ( alphabet [ i ] == false ) { char c = ( char ) ( i + 97 ) ; System . out . println ( c ) ; return ; } } System . out . println ( \" None \" ) ; } }","import java . util . HashSet ; import java . util . Scanner ; import java . util . TreeSet ; public class Main { public static void main ( String [ ] args ) { String alphabets = \" abcdefghijklmnopqrstuvwxyz \" ; String S ; Scanner sc = new Scanner ( System . in ) ; S = sc . nextLine ( ) ; absAlpha ( alphabets , S ) ; } private static void absAlpha ( String alphabets , String input ) { TreeSet < Character > inputset = new TreeSet < > ( ) ; boolean found = false ; for ( int i = 0 ; i < alphabets . length ( ) ; i ++ ) { String str = String . valueOf ( alphabets . charAt ( i ) ) ; if ( ! input . contains ( str ) ) { System . out . println ( str ) ; found = true ; break ; } } if ( ! found ) System . out . println ( \" None \" ) ; } }","import java . util . ArrayList ; import java . util . Collections ; import java . util . Comparator ; import java . util . HashSet ; import java . util . List ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String inputText = sc . nextLine ( ) ; HashSet < String > set = new HashSet < > ( ) ; for ( int i = 0 ; i < inputText . length ( ) ; i ++ ) { set . add ( String . valueOf ( inputText . charAt ( i ) ) ) ; } if ( set . size ( ) == 26 ) { System . out . println ( \" None \" ) ; return ; } char c = ' a ' ; for ( int i = 0 ; i < 26 ; i ++ ) { if ( set . contains ( String . valueOf ( c ) ) ) { c ++ ; continue ; } System . out . println ( c ) ; break ; } } }"],"bleu":0.5433694248577275,"rouge_l":0.5526305858378109}
{"id":59,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { a [ i ] = sc . nextInt ( ) ; } } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans += a [ i ] ; } System . out . println ( ans ) ; } }"],"references":["import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int sum = 0 ; int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int a = sc . nextInt ( ) ; max = Math . max ( max , a ) ; sum += a ; } if ( max < sum - max ) { System . out . println ( \" Yes \" ) ; } else { System . out . println ( \" No \" ) ; } sc . close ( ) ; } }","import java . util . Arrays ; import java . util . Scanner ; import java . util . stream . IntStream ; public class Main { public static void main ( String [ ] args ) { try ( Scanner scanner = new Scanner ( System . in ) ) { int n = scanner . nextInt ( ) ; int [ ] l = new int [ n ] ; IntStream . range ( 0 , n ) . forEach ( i -> l [ i ] = scanner . nextInt ( ) ) ; scanner . nextLine ( ) ; Arrays . sort ( l ) ; int sum = Arrays . stream ( l ) . limit ( n - 1 ) . sum ( ) ; if ( sum > l [ n - 1 ] ) { System . out . println ( \" Yes \" ) ; } else { System . out . println ( \" No \" ) ; } } } }","import java . io . InputStream ; import java . io . PrintStream ; import java . util . Arrays ; import java . util . Scanner ; public class Main { InputStream in = System . in ; PrintStream out = System . out ; public void _main ( String [ ] args ) { Scanner sc = new Scanner ( in ) ; int N = sc . nextInt ( ) ; int [ ] L = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { L [ i ] = sc . nextInt ( ) ; } Arrays . sort ( L ) ; int sum = 0 ; for ( int i = 0 ; i < L . length - 1 ; i ++ ) { sum += L [ i ] ; } if ( sum > L [ L . length - 1 ] ) { out . println ( \" Yes \" ) ; } else { out . println ( \" No \" ) ; } sc . close ( ) ; } public static void main ( String [ ] args ) { new Main ( ) . _main ( args ) ; } }","import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) throws Exception { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int n = Integer . parseInt ( br . readLine ( ) ) ; String [ ] s = br . readLine ( ) . split ( \" ▁ \" ) ; int [ ] a = new int [ 10 ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = Integer . parseInt ( s [ i ] ) ; } int max = 0 ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += a [ i ] ; max = Math . max ( max , a [ i ] ) ; } if ( max < sum - max ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }","import java . util . Scanner ; public class Main { static Scanner s = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { int n = s . nextInt ( ) ; int max = 0 ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int tmp = s . nextInt ( ) ; if ( max < tmp ) { max = tmp ; } sum += tmp ; } System . out . println ( max < ( sum - max ) ? \" Yes \" : \" No \" ) ; } }"],"bleu":0.7204350092259959,"rouge_l":0.6869638116529272}
{"id":60,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans += a [ i ] ; } System . out . println ( ans ) ; } }"],"references":["import java . util . * ; public class Main { private static long f ( long x ) { long ret = 0 ; while ( x > 0 ) { ret += x % 10 ; x \/= 10 ; } return ret ; } public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long N = sc . nextLong ( ) ; ArrayList < Long > set = new ArrayList < Long > ( ) ; for ( long i = Math . max ( 1 , N - 1000 ) ; i < N ; i ++ ) { long val = i + f ( i ) ; if ( val == N ) { set . add ( i ) ; } } System . out . println ( set . size ( ) ) ; for ( long c : set ) { System . out . println ( c ) ; } } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . UncheckedIOException ; import java . util . StringTokenizer ; class Main { public static void main ( String [ ] args ) { SC sc = new SC ( System . in ) ; int kazu = 0 ; long N = sc . nextLong ( ) ; boolean [ ] ans = new boolean [ 163 ] ; for ( long i = 1 ; i <= 162 ; i ++ ) { long zan = N - i ; if ( ketawa ( zan ) == i ) { ans [ ( int ) i ] = true ; kazu ++ ; } } pl ( kazu ) ; for ( int i = 162 ; i > 0 ; i -- ) { if ( ans [ i ] ) { pl ( N - ( ( long ) i ) ) ; } } } public static long ketawa ( long a ) { long sum = 0 ; while ( a > 0 ) { sum += a % 10 ; a \/= 10 ; } return sum ; } static class SC { private BufferedReader reader = null ; private StringTokenizer tokenizer = null ; public SC ( InputStream in ) { reader = new BufferedReader ( new InputStreamReader ( in ) ) ; } public String next ( ) { if ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } } return tokenizer . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } public long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } } public static void pl ( Object o ) { System . out . println ( o ) ; } public static void pl ( ) { System . out . println ( ) ; } public static void p ( Object o ) { System . out . print ( o ) ; } }","import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long n = sc . nextLong ( ) ; ArrayList < Long > list = new ArrayList < > ( ) ; for ( long i = Math . max ( n - 9 * 18 , 1 ) ; i < n ; i ++ ) { if ( i + f ( i ) == n ) { list . add ( i ) ; } } StringBuilder sb = new StringBuilder ( ) ; sb . append ( list . size ( ) ) . append ( \" \\n \" ) ; for ( long x : list ) { sb . append ( x ) . append ( \" \\n \" ) ; } System . out . print ( sb ) ; } static long f ( long x ) { long ans = 0 ; while ( x > 0 ) { ans += x % 10 ; x \/= 10 ; } return ans ; } }"],"bleu":0.41089446944975544,"rouge_l":0.5177968554065785}
{"id":61,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans += a [ i ] ; } System . out . println ( ans ) ; } }"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader input = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int n = Integer . parseInt ( input . readLine ( ) ) ; StringTokenizer tokenizer ; long sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { tokenizer = new StringTokenizer ( input . readLine ( ) ) ; sum += Math . abs ( Integer . parseInt ( tokenizer . nextToken ( ) ) - Integer . parseInt ( tokenizer . nextToken ( ) ) ) + 1 ; } System . out . println ( sum ) ; } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . OutputStream ; import java . io . PrintWriter ; import java . util . StringTokenizer ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; Task solver = new Task ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class Task { public void solve ( int testNumber , InputReader in , PrintWriter out ) { int N = in . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { int l = in . nextInt ( ) ; int r = in . nextInt ( ) ; ans += r - l + 1 ; } out . println ( ans ) ; } } static class InputReader { public BufferedReader reader ; public StringTokenizer tokenizer ; public InputReader ( InputStream stream ) { reader = new BufferedReader ( new InputStreamReader ( stream ) , 32768 ) ; tokenizer = null ; } public String next ( ) { while ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } public double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } } }","import java . util . ArrayList ; import java . util . List ; import java . util . Scanner ; import java . util . stream . IntStream ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; List < Integer > l = new ArrayList < > ( ) ; List < Integer > r = new ArrayList < > ( ) ; IntStream . range ( 0 , n ) . forEach ( i -> { l . add ( sc . nextInt ( ) ) ; r . add ( sc . nextInt ( ) ) ; } ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { count += r . get ( i ) - l . get ( i ) + 1 ; } System . out . println ( count ) ; } }","import java . util . Scanner ; public class Main { static long N ; static long ans ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { int l = sc . nextInt ( ) ; int r = sc . nextInt ( ) ; ans += r - l + 1 ; } System . out . println ( ans ) ; } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; public class Main { public static void main ( String [ ] a ) throws IOException { BufferedReader in = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int n = Integer . valueOf ( in . readLine ( ) ) ; String [ ] l ; int total = 0 ; for ( int i = 0 ; i < n ; i ++ ) { l = in . readLine ( ) . split ( \" ▁ \" ) ; total += Integer . valueOf ( l [ 1 ] ) - Integer . valueOf ( l [ 0 ] ) + 1 ; } System . out . println ( total ) ; } }"],"bleu":0.7044548391709741,"rouge_l":0.7507509757901988}
{"id":62,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { st = new StringTokenizer ( br . readLine ( ) ) ; a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( a [ i ] > b [ j ] ) { count ++ ; } } } System . out . println ( count ) ; } }"],"references":["import java . util . Arrays ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; char [ ] c = sc . next ( ) . toCharArray ( ) ; boolean sh [ ] = new boolean [ n + 2 ] ; for ( int z = 0 ; z < 4 ; z ++ ) { Arrays . fill ( sh , false ) ; sh [ 0 ] = ( z & 1 ) == 0 ; sh [ 1 ] = ( z & 2 ) == 0 ; for ( int i = 2 ; i < n + 2 ; i ++ ) { sh [ i ] = sh [ i - 1 ] ^ sh [ i - 2 ] ^ c [ ( i - 1 ) % n ] == ' o ' ; } if ( sh [ n ] == sh [ 0 ] && sh [ n + 1 ] == sh [ 1 ] ) { put ( sh ) ; return ; } } System . out . println ( - 1 ) ; } static void put ( boolean [ ] sh ) { for ( int i = 0 ; i < sh . length - 2 ; i ++ ) { System . out . print ( sh [ i ] ? \" S \" : \" W \" ) ; } System . out . println ( ) ; } }","import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; char [ ] s = sc . next ( ) . toCharArray ( ) ; boolean [ ] isSheep = solve ( s ) ; if ( isSheep == null ) { System . out . println ( - 1 ) ; } else { char [ ] ans = new char [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { ans [ i ] = isSheep [ i ] ? ' S ' : ' W ' ; } System . out . println ( ans ) ; } sc . close ( ) ; } static boolean [ ] solve ( char [ ] s ) { int N = s . length ; boolean [ ] v = new boolean [ N ] ; for ( int i = 0 ; i < 4 ; i ++ ) { boolean ok = true ; v [ 0 ] = i % 2 == 0 ; v [ 1 ] = i \/ 2 == 0 ; for ( int j = 0 ; j < N ; j ++ ) { boolean next = v [ j ] ^ v [ ( j + 1 ) % N ] ^ s [ ( j + 1 ) % N ] == ' o ' ; if ( N - 2 <= j ) { if ( v [ ( j + 2 ) % N ] != next ) { ok = false ; break ; } } v [ ( j + 2 ) % N ] = next ; } if ( ok ) return v ; } return null ; } }","import java . util . Scanner ; public class Main { static int N ; static int [ ] s ; static int [ ] B ; public static void main ( String args [ ] ) throws Exception { Scanner sc = new Scanner ( System . in ) ; N = sc . nextInt ( ) ; String S = sc . next ( ) ; s = new int [ N ] ; B = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { char c = S . charAt ( i ) ; if ( c == ' o ' ) { s [ i ] = 0 ; } else { s [ i ] = 1 ; } } if ( solve ( 0 , 0 ) ) { write ( B ) ; } else if ( solve ( 0 , 1 ) ) { write ( B ) ; } else if ( solve ( 1 , 0 ) ) { write ( B ) ; } else if ( solve ( 1 , 1 ) ) { write ( B ) ; } else { System . out . println ( - 1 ) ; } } private static void write ( int [ ] b2 ) { for ( int i = 0 ; i < N ; i ++ ) { if ( b2 [ i ] == 0 ) { System . out . print ( \" S \" ) ; } else { System . out . print ( \" W \" ) ; } } } static Boolean solve ( int i , int j ) { B [ 0 ] = i ; B [ 1 ] = j ; for ( int k = 2 ; k < N ; k ++ ) { if ( ( B [ k - 2 ] ^ B [ k - 1 ] ^ s [ k - 1 ] ) == 0 ) { B [ k ] = 0 ; } else { B [ k ] = 1 ; } } if ( ( ( B [ N - 2 ] ^ B [ N - 1 ] ^ s [ N - 1 ] ) == B [ 0 ] ) && ( B [ 0 ] ^ B [ 1 ] ^ s [ 0 ] ) == B [ N - 1 ] ) { return true ; } else { return false ; } } }"],"bleu":0.41258465067866895,"rouge_l":0.5154899188278217}
{"id":63,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; out . println ( a > b ? \" ABC \" : \" ABD \" ) ; out . flush ( ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int m = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; if ( m >= d ) { if ( m % d == 0 ) { System . out . println ( \" YES \" ) ; } else { System . out . println ( \" NO \" ) ; } } else { System . out . println ( \" NO \" ) ; } } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . OutputStream ; import java . io . PrintWriter ; import java . util . StringTokenizer ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; Task solver = new Task ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class Task { public void solve ( int testNumber , InputReader in , PrintWriter out ) { int M = in . nextInt ( ) ; int D = in . nextInt ( ) ; String ans = M % D == 0 ? \" YES \" : \" NO \" ; out . println ( ans ) ; } } static class InputReader { public BufferedReader reader ; public StringTokenizer tokenizer ; public InputReader ( InputStream stream ) { reader = new BufferedReader ( new InputStreamReader ( stream ) , 32768 ) ; tokenizer = null ; } public String next ( ) { while ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } } }","import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . InputMismatchException ; import java . io . IOException ; import java . io . InputStream ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; FastScanner in = new FastScanner ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; TaskA solver = new TaskA ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class TaskA { public void solve ( int testNumber , FastScanner in , PrintWriter out ) { out . println ( in . nextInt ( ) % in . nextInt ( ) == 0 ? \" YES \" : \" NO \" ) ; } } static class FastScanner { private InputStream in ; private byte [ ] buffer = new byte [ 1024 ] ; private int bufPointer ; private int bufLength ; public FastScanner ( InputStream in ) { this . in = in ; this . bufPointer = 0 ; this . bufLength = 0 ; } private int readByte ( ) { if ( bufPointer >= bufLength ) { if ( bufLength == - 1 ) throw new InputMismatchException ( ) ; bufPointer = 0 ; try { bufLength = in . read ( buffer ) ; } catch ( IOException e ) { throw new InputMismatchException ( ) ; } if ( bufLength <= 0 ) return - 1 ; } return buffer [ bufPointer ++ ] ; } private static boolean isSpaceChar ( int c ) { return c == ' ▁ ' || c == ' \\n ' || c == ' \\r ' || c == ' \\t ' || c == - 1 ; } public int nextInt ( ) { int n = 0 ; int b = readByte ( ) ; while ( isSpaceChar ( b ) ) b = readByte ( ) ; boolean minus = ( b == ' - ' ) ; if ( minus ) b = readByte ( ) ; while ( b >= '0' && b <= '9' ) { n *= 10 ; n += b - '0' ; b = readByte ( ) ; } if ( ! isSpaceChar ( b ) ) throw new NumberFormatException ( ) ; return minus ? - n : n ; } } }","import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; System . out . println ( a % b == 0 ? \" YES \" : \" NO \" ) ; } static int l_min ( int [ ] a ) { Arrays . sort ( a ) ; return a [ 0 ] ; } static int l_max ( int [ ] a ) { int l = a . length ; Arrays . sort ( a ) ; return a [ l - 1 ] ; } public static PrintWriter out ; public static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }","import java . util . * ; import java . util . stream . * ; import static java . lang . System . * ; class Main { static Scanner sc = new Scanner ( System . in ) ; static int nextInt ( ) { return Integer . parseInt ( sc . next ( ) ) ; } static int [ ] nextIntArray ( int n ) { return IntStream . range ( 0 , n ) . map ( i -> nextInt ( ) ) . toArray ( ) ; } static int max ( int ... ar ) { Arrays . sort ( ar ) ; return ar [ ar . length - 1 ] ; } static int min ( int ... ar ) { Arrays . sort ( ar ) ; return ar [ 0 ] ; } static int maxInt = Integer . MAX_VALUE ; static int minInt = Integer . MIN_VALUE ; public static void main ( String [ ] args ) { out . println ( nextInt ( ) % nextInt ( ) == 0 ? \" YES \" : \" NO \" ) ; } }"],"bleu":0.9251340987018455,"rouge_l":0.8419623059866963}
{"id":64,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter pw = new PrintWriter ( System . out ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int [ ] b = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 1 ; i <= n ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { for ( int k = 1 ; k <= n ; k ++ ) { ans += b [ i ] ; } } pw . println ( ans ) ; pw . close ( ) ; } }"],"references":["import java . util . * ; import java . awt . * ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] d = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { d [ i ] = sc . nextInt ( ) ; } long m = 1000000007 ; Arrays . sort ( d ) ; int [ ] two = new int [ n ] ; for ( int i = n - 1 ; i > 0 ; i -- ) { int j = i - 1 ; while ( true ) { if ( j < 0 ) { two [ i ] = - 1 ; break ; } if ( d [ j ] * 2 <= d [ i ] ) { two [ i ] = j ; break ; } else { j -- ; } } } long [ ] [ ] dp = new long [ n ] [ 4 ] ; dp [ 0 ] [ 0 ] = 1 ; for ( int i = 1 ; i < n ; i ++ ) { dp [ i ] [ 0 ] = ( dp [ i - 1 ] [ 0 ] + 1 ) % m ; if ( two [ i ] != - 1 ) { dp [ i ] [ 1 ] = ( dp [ i - 1 ] [ 1 ] + dp [ two [ i ] ] [ 0 ] ) % m ; dp [ i ] [ 2 ] = ( dp [ i - 1 ] [ 2 ] + dp [ two [ i ] ] [ 1 ] ) % m ; dp [ i ] [ 3 ] = ( dp [ i - 1 ] [ 3 ] + dp [ two [ i ] ] [ 2 ] ) % m ; } } System . out . println ( dp [ n - 1 ] [ 3 ] ) ; } }","import java . io . * ; import java . util . * ; import static java . lang . System . in ; class Main { static long mod = 1000000000 + 7 ; public static void main ( String [ ] args ) throws IOException { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] D = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) D [ i ] = sc . nextInt ( ) ; Arrays . sort ( D ) ; long [ ] dp = new long [ n + 1 ] , sum = new long [ n + 1 ] ; long [ ] dp0 = new long [ n + 1 ] , sum0 = new long [ n + 1 ] ; Arrays . fill ( dp , 1 ) ; dp [ 0 ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum [ i ] = i ; for ( int pass = 2 ; pass <= 4 ; pass ++ ) { System . arraycopy ( dp , 0 , dp0 , 0 , n + 1 ) ; System . arraycopy ( sum , 0 , sum0 , 0 , n + 1 ) ; Arrays . fill ( dp , 0 ) ; Arrays . fill ( sum , 0 ) ; int left = 0 ; for ( int i = pass ; i <= n ; i ++ ) { int target = D [ i ] \/ 2 + 1 ; while ( left <= n && 2 * D [ left ] <= D [ i ] ) left ++ ; dp [ i ] = sum0 [ left - 1 ] ; sum [ i ] = ( sum [ i - 1 ] + dp [ i ] ) % mod ; } } System . out . println ( sum [ n ] ) ; } }","import java . util . * ; public class Main { static final int MOD = 1000000007 ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int [ ] idxes = new int [ n ] ; Arrays . fill ( idxes , - 1 ) ; int idx = 1 ; for ( int i = 0 ; i < n ; i ++ ) { while ( arr [ idx ] < arr [ i ] * 2 ) { idx ++ ; if ( idx >= n ) { break ; } } if ( idx >= n ) { break ; } idxes [ i ] = idx ; } int [ ] third = new int [ n ] ; for ( int i = 1 ; i < n - 2 ; i ++ ) { if ( idxes [ n - 1 - i ] != - 1 ) { third [ n - 1 - i ] = ( third [ n - i ] + n - idxes [ n - 1 - i ] ) % MOD ; } } int [ ] second = new int [ n ] ; for ( int i = 2 ; i < n - 1 ; i ++ ) { if ( idxes [ n - 1 - i ] != - 1 ) { second [ n - 1 - i ] = ( second [ n - i ] + third [ idxes [ n - 1 - i ] ] ) % MOD ; } } int sum = 0 ; for ( int i = 3 ; i < n ; i ++ ) { if ( idxes [ n - 1 - i ] != - 1 ) { sum += second [ idxes [ n - 1 - i ] ] ; sum %= MOD ; } } System . out . println ( sum ) ; } }"],"bleu":0.3933160683605372,"rouge_l":0.5001464128843337}
{"id":65,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( b [ i ] == 1 ) { count ++ ; } } System . out . println ( count ) ; } }"],"references":["import java . util . Arrays ; import java . util . HashMap ; import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; long [ ] A = new long [ N ] ; long [ ] B = new long [ N ] ; HashMap < Long , Integer > map = new HashMap < Long , Integer > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { A [ i ] = sc . nextLong ( ) ; B [ i ] = A [ i ] ; } Arrays . sort ( A ) ; for ( int i = 0 ; i < N ; i ++ ) { map . put ( A [ i ] , i ) ; } int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( i % 2 != map . get ( B [ i ] ) % 2 ) { ans ++ ; } } System . out . println ( ans \/ 2 ) ; } }","import java . util . * ; public class Main { private class Data { int id , value ; public Data ( int id , int value ) { this . id = id ; this . value = value ; } } public void main ( Scanner sc ) { int n = sc . nextInt ( ) ; Data data [ ] = new Data [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { data [ i ] = new Data ( i , sc . nextInt ( ) ) ; } Arrays . sort ( data , ( d1 , d2 ) -> d1 . value - d2 . value ) ; int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) { cnt += Math . abs ( ( data [ i ] . id - i ) ) % 2 ; } System . out . println ( cnt \/ 2 ) ; } public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; new Main ( ) . main ( sc ) ; sc . close ( ) ; } }","import java . util . LinkedList ; import java . util . Scanner ; public class Main { private class Num implements Comparable < Num > { private int index = 0 ; private int num = 0 ; public Num ( int index , int num ) { this . index = index ; this . num = num ; } public boolean isEvenOrOdd ( int evenOrOdd ) { return ( this . index % 2 == evenOrOdd ) ; } @ Override public int compareTo ( Num o ) { return Integer . compare ( this . num , o . num ) ; } } public long solve ( ) { LinkedList < Num > list = new LinkedList < Num > ( ) ; try ( Scanner in = new Scanner ( System . in ) ) { int N = in . nextInt ( ) ; for ( int i = 0 ; i < N ; i ++ ) { list . addLast ( new Num ( i , in . nextInt ( ) ) ) ; } } list . sort ( null ) ; long count = 0 ; int index = 0 ; for ( Num n : list ) { if ( n . isEvenOrOdd ( index % 2 ) == false ) { count ++ ; } index ++ ; } return count \/ 2 ; } public static void main ( String [ ] args ) { Main main = new Main ( ) ; System . out . println ( main . solve ( ) ) ; } }","import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } sc . close ( ) ; if ( n == 1 ) { System . out . println ( 0 ) ; return ; } else if ( n == 2 ) { if ( a [ 0 ] > a [ 1 ] ) { System . out . println ( 1 ) ; } else { System . out . println ( 0 ) ; } return ; } int [ ] a1 , a2 ; if ( n % 2 == 0 ) { a1 = new int [ n \/ 2 ] ; a2 = new int [ n \/ 2 ] ; } else { a1 = new int [ n \/ 2 + 1 ] ; a2 = new int [ n \/ 2 ] ; } for ( int i = 0 ; i < a1 . length ; i ++ ) { a1 [ i ] = a [ i * 2 ] ; } for ( int i = 0 ; i < a2 . length ; i ++ ) { a2 [ i ] = a [ i * 2 + 1 ] ; } Arrays . sort ( a ) ; long ans = 0 ; for ( int i = 0 ; i < a1 . length ; i ++ ) { int pos = Arrays . binarySearch ( a , a1 [ i ] ) ; if ( pos % 2 == 1 ) ans ++ ; } System . out . println ( ans ) ; } }","import java . util . Arrays ; import java . util . HashMap ; import java . util . Map ; import java . util . Scanner ; public class Main { void run ( ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] as = new int [ n ] ; Map < Integer , Integer > dm = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { as [ i ] = sc . nextInt ( ) ; if ( i % 2 == 0 ) { dm . put ( as [ i ] , dm . getOrDefault ( as [ i ] , 0 ) + 1 ) ; } } Arrays . sort ( as ) ; int cnt = 0 ; for ( int i = 0 ; i < n ; i += 2 ) { if ( dm . containsKey ( as [ i ] ) && dm . get ( as [ i ] ) != 0 ) { dm . put ( as [ i ] , dm . get ( as [ i ] ) - 1 ) ; } else { cnt += 1 ; } } System . out . println ( cnt ) ; } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } }"],"bleu":0.5998716991245242,"rouge_l":0.6384389705330119}
{"id":66,"predictions":["import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; } public static long mod = 17352642619633L ; void run ( FastScanner in , PrintWriter out ) { int N = in . nextInt ( ) ; int [ ] a = new int [ N ] ; int [ ] b = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { a [ i ] = in . nextInt ( ) ; b [ i ] = in . nextInt ( ) ; } for ( int i = 0 ; i < N ; i ++ ) { b [ i ] = in . nextInt ( ) ; } long ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < N ; j ++ ) { for ( int k = 0 ; k < N ; k ++ ) { for ( int k = 0 ; k < N ; k ++ ) { ans += a [ i ] - b [ j ] ; } } } out . println ( ans ) ; } static class FastScanner { BufferedReader br ; StringTokenizer st ; public FastScanner ( InputStream in ) { br = new BufferedReader ( new InputStreamReader ( in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . Arrays ; import java . util . StringTokenizer ; import java . io . IOException ; import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . InputStream ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; FastScanner in = new FastScanner ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; ProblemC solver = new ProblemC ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class ProblemC { public void solve ( int testNumber , FastScanner in , PrintWriter out ) { int n = in . nextInt ( ) ; int [ ] l = new int [ n + 1 ] ; int [ ] r = new int [ n + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) { l [ i ] = in . nextInt ( ) ; r [ i ] = in . nextInt ( ) ; } Arrays . sort ( l ) ; Arrays . sort ( r ) ; long ans = 0 ; for ( int i = 0 ; i < n + 1 ; i ++ ) { ans += Math . max ( 0 , l [ n - i ] - r [ i ] ) ; } ans *= 2 ; out . println ( ans ) ; } } static class FastScanner { private BufferedReader in ; private StringTokenizer st ; public FastScanner ( InputStream stream ) { in = new BufferedReader ( new InputStreamReader ( stream ) ) ; } public String next ( ) { while ( st == null || ! st . hasMoreTokens ( ) ) { try { String rl = in . readLine ( ) ; if ( rl == null ) { return null ; } st = new StringTokenizer ( rl ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return st . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } } }","import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int L [ ] = new int [ N + 1 ] ; int R [ ] = new int [ N + 1 ] ; for ( int i = 0 ; i < N ; i ++ ) { L [ i ] = sc . nextInt ( ) ; R [ i ] = sc . nextInt ( ) ; } Arrays . sort ( L ) ; Arrays . sort ( R ) ; long ans = 0 ; for ( int i = 0 ; i <= N ; i ++ ) { ans += 2 * Math . max ( 0 , L [ N - i ] - R [ i ] ) ; } System . out . println ( ans ) ; } }","import java . io . FileNotFoundException ; import java . util . Arrays ; import java . util . Comparator ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) throws FileNotFoundException { new Main ( ) . run ( ) ; } void run ( ) throws FileNotFoundException { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] L = new int [ N + 1 ] ; int [ ] R = new int [ N + 1 ] ; for ( int i = 0 ; i < N ; ++ i ) { L [ i ] = sc . nextInt ( ) ; R [ i ] = - sc . nextInt ( ) ; } long ans = 0 ; Arrays . sort ( L ) ; Arrays . sort ( R ) ; for ( int i = N ; i >= 0 ; -- i ) { if ( L [ i ] + R [ i ] > 0 ) { ans += 2 * ( L [ i ] + R [ i ] ) ; } } System . out . println ( ans ) ; } void tr ( Object ... objects ) { System . out . println ( Arrays . deepToString ( objects ) ) ; } }"],"bleu":0.5409982236437385,"rouge_l":0.6885833307232123}
{"id":67,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { ans += b [ i ] ; } } System . out . println ( ans ) ; } }"],"references":["import java . util . * ; public class Main { private static Scanner scanner = new Scanner ( System . in ) ; public static void main ( String [ ] $ ) { int n = scanner . nextInt ( ) , a = scanner . nextInt ( ) , b = scanner . nextInt ( ) ; int [ ] s = java . util . stream . IntStream . range ( 0 , n ) . map ( i -> scanner . nextInt ( ) ) . toArray ( ) ; double d = Arrays . stream ( s ) . max ( ) . getAsInt ( ) - Arrays . stream ( s ) . min ( ) . getAsInt ( ) ; System . out . println ( d == 0 ? - 1 : b \/ d + \" ▁ \" + ( a - Arrays . stream ( s ) . average ( ) . getAsDouble ( ) * b \/ d ) ) ; } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . UncheckedIOException ; import java . util . StringTokenizer ; class Main { public static void main ( String [ ] args ) { SC sc = new SC ( System . in ) ; long N = sc . nextInt ( ) ; long A = sc . nextInt ( ) ; long B = sc . nextInt ( ) ; long diff = 0 ; long min = Integer . MAX_VALUE ; long max = 0 ; long sum = 0 ; for ( int i = 0 ; i < N ; i ++ ) { int tmp = sc . nextInt ( ) ; min = Math . min ( tmp , min ) ; max = Math . max ( tmp , max ) ; sum += tmp ; } diff = max - min ; double comperss = B \/ ( ( double ) max - min ) ; double hkn = ( ( double ) sum ) \/ N * comperss ; if ( diff == 0 ) { System . out . println ( - 1 ) ; } else { System . out . println ( comperss + \" ▁ \" + ( A - hkn ) ) ; } } static class SC { private BufferedReader reader = null ; private StringTokenizer tokenizer = null ; public SC ( InputStream in ) { reader = new BufferedReader ( new InputStreamReader ( in ) ) ; } public String next ( ) { if ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } } return tokenizer . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } public long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } } }","import java . util . Arrays ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; long [ ] s = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) s [ i ] = sc . nextLong ( ) ; Arrays . sort ( s ) ; long dis = s [ n - 1 ] - s [ 0 ] ; long sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += s [ i ] ; double avg = 1.0 * sum \/ n ; if ( dis == 0 ) { System . out . println ( - 1 ) ; return ; } double p = 1.0 * b \/ dis ; double q = 1.0 * a - 1.0 * b * avg \/ dis ; System . out . printf ( \" % .10f \" , p ) ; System . out . print ( \" ▁ \" ) ; System . out . printf ( \" % .10f \\n \" , q ) ; } }","import java . util . Arrays ; import java . util . Scanner ; import java . util . stream . IntStream ; public class Main { static final Scanner s = new Scanner ( System . in ) ; static IntStream REPS ( int v ) { return IntStream . range ( 0 , v ) ; } static IntStream REPS ( int l , int r ) { return IntStream . rangeClosed ( l , r ) ; } static IntStream INS ( int n ) { return REPS ( n ) . map ( i -> getInt ( ) ) ; } static int getInt ( ) { return Integer . parseInt ( s . next ( ) ) ; } public static void main ( String [ ] $ ) { int n = getInt ( ) , a = getInt ( ) , b = getInt ( ) ; double d [ ] = INS ( n ) . asDoubleStream ( ) . toArray ( ) ; double min = Arrays . stream ( d ) . min ( ) . getAsDouble ( ) , max = Arrays . stream ( d ) . max ( ) . getAsDouble ( ) , r = b \/ ( max - min ) ; REPS ( n ) . forEach ( i -> d [ i ] *= r ) ; if ( Double . isInfinite ( r ) ) { System . out . println ( - 1 ) ; } else { System . out . printf ( \" % f ▁ % f \\n \" , r , a - Arrays . stream ( d ) . average ( ) . getAsDouble ( ) ) ; } } }","import java . util . * ; import static java . lang . System . * ; import static java . lang . Math . * ; public class Main { public static void main ( String [ ] $ ) { Scanner sc = new Scanner ( in ) ; double n = sc . nextDouble ( ) ; double a = sc . nextDouble ( ) ; int b = sc . nextInt ( ) ; double sum = 0 ; double sax = 0 , sin = 1e9 ; for ( int i = 0 ; i < n ; i ++ ) { double s = sc . nextDouble ( ) ; sum += s ; sax = max ( sax , s ) ; sin = min ( sin , s ) ; } double d = sax - sin ; if ( d == 0 ) { out . println ( - 1 ) ; } else { out . println ( b \/ d + \" ▁ \" + ( a - b \/ d * sum \/ n ) ) ; } } }"],"bleu":0.5966291723358006,"rouge_l":0.5675023080747107}
{"id":68,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } Arrays . sort ( b ) ; long ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans += a [ i ] - b [ i ] ; } out . println ( ans ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; b [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; Arrays . sort ( b ) ; int users = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == 0 ) { users ++ ; } else { break ; } } int output = users ; int nowA = users ; int nowB = 0 ; int nowATmp = 0 ; int nowBTmp = 0 ; for ( int i = 1 ; i < 1000001 ; i ++ ) { nowATmp = nowA ; nowBTmp = nowB ; for ( int j = 0 ; j < n - nowA ; j ++ ) { if ( a [ nowA + j ] == i ) { users ++ ; nowATmp ++ ; } else { break ; } } nowA = nowATmp ; for ( int j = 0 ; j < n - nowB ; j ++ ) { if ( b [ nowB + j ] == i - 1 ) { users -- ; nowBTmp ++ ; } else { break ; } } nowB = nowBTmp ; if ( users > output ) { output = users ; } } System . out . println ( output ) ; } }","import java . util . * ; import static java . lang . System . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int colors = 1000002 ; int [ ] likes = new int [ colors ] ; for ( int i = 0 ; i < n ; i ++ ) { likes [ sc . nextInt ( ) ] ++ ; likes [ sc . nextInt ( ) + 1 ] -- ; } for ( int i = 1 ; i < colors ; i ++ ) { likes [ i ] = likes [ i - 1 ] + likes [ i ] ; } int ans = Integer . MIN_VALUE ; for ( int i = 0 ; i < colors ; i ++ ) { ans = Math . max ( ans , likes [ i ] ) ; } out . println ( ans ) ; } }","import java . util . * ; public class Main { private static java . util . Scanner scanner = new java . util . Scanner ( System . in ) ; public static void main ( String [ ] $ ) { Scanner s = new Scanner ( System . in ) ; int n = s . nextInt ( ) , a [ ] = new int [ 1000002 ] ; while ( n -- > 0 ) { a [ s . nextInt ( ) ] ++ ; a [ s . nextInt ( ) + 1 ] -- ; } Arrays . parallelPrefix ( a , Integer :: sum ) ; Arrays . sort ( a ) ; System . out . println ( a [ 1000001 ] ) ; } }","import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) throws InterruptedException { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ 1000001 ] ; int [ ] shita = new int [ n ] ; int [ ] ue = new int [ n ] ; int m = 0 ; for ( int i = 0 ; i < 1000001 ; i ++ ) { a [ i ] = 0 ; } for ( int i = 0 ; i < n ; i ++ ) { shita [ i ] = sc . nextInt ( ) ; ue [ i ] = sc . nextInt ( ) ; a [ shita [ i ] ] ++ ; if ( ue [ i ] != 1000000 ) { a [ ue [ i ] + 1 ] -- ; } } for ( int i = 0 ; i < 1000001 ; i ++ ) { if ( i > 0 ) { a [ i ] += a [ i - 1 ] ; } if ( a [ i ] > m ) { m = a [ i ] ; } } System . out . println ( m ) ; sc . close ( ) ; } public static int gcd ( int a , int b ) { if ( a < b ) { int tmp = a ; a = b ; b = tmp ; } int r = - 1 ; while ( r != 0 ) { r = a % b ; a = b ; b = r ; } return a ; } }","import java . util . * ; import java . awt . * ; import static java . lang . System . * ; import static java . lang . Math . * ; public class Main { public static void main ( String [ ] $ ) { Scanner sc = new Scanner ( in ) ; int n = sc . nextInt ( ) ; long [ ] imos = new long [ 1000002 ] ; for ( int i = 0 ; i < n ; i ++ ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; imos [ a ] ++ ; imos [ b + 1 ] -- ; } long ans = 0 ; for ( int i = 1 ; i < 1000002 ; i ++ ) { imos [ i ] += imos [ i - 1 ] ; ans = max ( ans , imos [ i ] ) ; } ans = max ( imos [ 0 ] , ans ) ; out . println ( ans ) ; } }"],"bleu":0.4752667970186553,"rouge_l":0.5838650865998177}
{"id":69,"predictions":["import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; } public static long mod = 17352642619633L ; void run ( FastScanner in , PrintWriter out ) {"],"references":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; String s = sc . next ( ) ; String [ ] field = new String [ 9 ] ; int count = 0 ; for ( int i = 0 ; i < 9 ; i ++ ) { field [ i ] = sc . next ( ) ; } int dx = 0 ; int dy = 0 ; if ( s . equals ( \" R \" ) ) { dx = 1 ; dy = 0 ; } else if ( s . equals ( \" L \" ) ) { dx = - 1 ; dy = 0 ; } else if ( s . equals ( \" U \" ) ) { dx = 0 ; dy = - 1 ; } else if ( s . equals ( \" D \" ) ) { dx = 0 ; dy = 1 ; } else if ( s . equals ( \" RU \" ) ) { dx = 1 ; dy = - 1 ; } else if ( s . equals ( \" RD \" ) ) { dx = 1 ; dy = 1 ; } else if ( s . equals ( \" LU \" ) ) { dx = - 1 ; dy = - 1 ; } else if ( s . equals ( \" LD \" ) ) { dx = - 1 ; dy = 1 ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < 4 ; i ++ ) { sb . append ( field [ y - 1 ] . charAt ( x - 1 ) ) ; if ( x == 1 && dx == - 1 ) { dx = 1 ; } if ( x == 9 && dx == 1 ) { dx = - 1 ; } if ( y == 1 && dy == - 1 ) { dy = 1 ; } if ( y == 9 && dy == 1 ) { dy = - 1 ; } x += dx ; y += dy ; } System . out . println ( sb ) ; } }","import java . util . * ; public class Main { private static int reverse ( int x ) { int temp = x ; if ( 9 < x ) { temp = 18 - x ; } if ( x < 1 ) { temp = 2 - x ; } return temp ; } private static char get ( char map [ ] [ ] , int y , int x ) { return map [ reverse ( y ) ] [ reverse ( x ) ] ; } public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; String W = sc . next ( ) ; char map [ ] [ ] = new char [ 10 ] [ 10 ] ; for ( int i = 1 ; i <= 9 ; i ++ ) { String line = sc . next ( ) ; for ( int j = 1 ; j <= 9 ; j ++ ) { map [ i ] [ j ] = line . charAt ( j - 1 ) ; } } int dy = 0 ; int dx = 0 ; if ( W . contains ( \" R \" ) ) { dx = 1 ; } else if ( W . contains ( \" L \" ) ) { dx = - 1 ; } if ( W . contains ( \" D \" ) ) { dy = 1 ; } else if ( W . contains ( \" U \" ) ) { dy = - 1 ; } for ( int i = 0 ; i < 4 ; i ++ ) { System . out . print ( get ( map , y + i * dy , x + i * dx ) ) ; } System . out . println ( ) ; } }","import java . io . * ; import java . net . Inet4Address ; import java . util . * ; import java . math . * ; public class Main { static boolean debug = false ; static boolean debug2 = false ; public static void main ( String [ ] args ) throws java . io . IOException { debug = 1 <= args . length ; debug2 = 2 <= args . length ; BufferedReader in = new BufferedReader ( new InputStreamReader ( System . in ) ) ; String [ ] ia = in . readLine ( ) . split ( \" ▁ \" ) ; int x = Integer . parseInt ( ia [ 0 ] ) - 1 ; int y = Integer . parseInt ( ia [ 1 ] ) - 1 ; int dx = 0 , dy = 0 ; if ( ia [ 2 ] . contains ( \" L \" ) ) { dx = - 1 ; } else if ( ia [ 2 ] . contains ( \" R \" ) ) { dx = 1 ; } if ( ia [ 2 ] . contains ( \" U \" ) ) { dy = - 1 ; } else if ( ia [ 2 ] . contains ( \" D \" ) ) { dy = 1 ; } char [ ] [ ] c = new char [ 9 ] [ ] ; for ( int i = 0 ; i < 9 ; ++ i ) { c [ i ] = in . readLine ( ) . toCharArray ( ) ; } for ( int i = 0 ; i < 4 ; ++ i ) { System . out . print ( c [ y ] [ x ] ) ; int tx = x + dx ; int ty = y + dy ; if ( tx < 0 || 9 <= tx ) { dx *= - 1 ; } if ( ty < 0 || 9 <= ty ) { dy *= - 1 ; } x += dx ; y += dy ; } System . out . println ( ) ; } }","import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; final int x = sc . nextInt ( ) ; final int y = sc . nextInt ( ) ; final String w = sc . next ( ) ; String c [ ] [ ] = new String [ 9 ] [ 9 ] ; for ( int i = 0 ; i < 9 ; i ++ ) { String tmp = sc . next ( ) ; for ( int j = 0 ; j < 9 ; j ++ ) { c [ i ] [ j ] = \" \" + tmp . charAt ( j ) ; } } System . out . println ( Main . getNum ( w , x , y , c ) ) ; } static String getNum ( String w , int x , int y , String c [ ] [ ] ) { int spx = 0 ; int spy = 0 ; int nx = x - 1 ; int ny = y - 1 ; if ( w . indexOf ( \" R \" ) != - 1 ) { spx ++ ; } if ( w . indexOf ( \" L \" ) != - 1 ) { spx -- ; } if ( w . indexOf ( \" U \" ) != - 1 ) { spy -- ; } if ( w . indexOf ( \" D \" ) != - 1 ) { spy ++ ; } String pnum = c [ ny ] [ nx ] ; for ( int i = 0 ; i < 3 ; i ++ ) { if ( ( nx + spx ) > 8 || ( nx + spx ) < 0 ) { spx = spx * - 1 ; } if ( ( ny + spy ) > 8 || ( ny + spy ) < 0 ) { spy = spy * - 1 ; } nx += spx ; ny += spy ; pnum += c [ ny ] [ nx ] ; } return pnum ; } }","import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; final int x = sc . nextInt ( ) ; final int y = sc . nextInt ( ) ; final String w = sc . next ( ) ; String c [ ] [ ] = new String [ 9 ] [ 9 ] ; for ( int i = 0 ; i < 9 ; i ++ ) { String tmp = sc . next ( ) ; for ( int j = 0 ; j < 9 ; j ++ ) { c [ i ] [ j ] = \" \" + tmp . charAt ( j ) ; } } System . out . println ( getNum ( w , x , y , c ) ) ; } static String getNum ( String w , int x , int y , String c [ ] [ ] ) { int spx = 0 ; int spy = 0 ; int nx = x - 1 ; int ny = y - 1 ; if ( w . indexOf ( \" R \" ) != - 1 ) { spx ++ ; } if ( w . indexOf ( \" L \" ) != - 1 ) { spx -- ; } if ( w . indexOf ( \" U \" ) != - 1 ) { spy -- ; } if ( w . indexOf ( \" D \" ) != - 1 ) { spy ++ ; } String pnum = c [ ny ] [ nx ] ; for ( int i = 0 ; i < 3 ; i ++ ) { if ( ( nx + spx ) > 8 || ( nx + spx ) < 0 ) { spx = spx * - 1 ; } if ( ( ny + spy ) > 8 || ( ny + spy ) < 0 ) { spy = spy * - 1 ; } nx += spx ; ny += spy ; pnum += c [ ny ] [ nx ] ; } return pnum ; } }"],"bleu":0.028757572678271833,"rouge_l":0.24382970623691388}
{"id":70,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int M = sc . nextInt ( ) ; int [ ] a = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { ans += Math . abs ( a [ i ] - a [ i ] ) ; } System . out . println ( ans ) ; } }"],"references":["import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . io . UncheckedIOException ; import java . util . StringTokenizer ; import java . io . IOException ; import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . InputStream ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; LightScanner in = new LightScanner ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; D solver = new D ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class D { public void solve ( int testNumber , LightScanner in , PrintWriter out ) { int n = in . ints ( ) , k = in . ints ( ) ; double p = 1L + 3L * ( n - 1L ) + 6L * ( n - k ) * ( k - 1L ) ; p \/= n ; p \/= n ; p \/= n ; out . println ( p ) ; } } static class LightScanner { private BufferedReader reader = null ; private StringTokenizer tokenizer = null ; public LightScanner ( InputStream in ) { reader = new BufferedReader ( new InputStreamReader ( in ) ) ; } public String string ( ) { if ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } } return tokenizer . nextToken ( ) ; } public int ints ( ) { return Integer . parseInt ( string ( ) ) ; } } }","import java . util . * ; import static java . lang . System . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long N = sc . nextInt ( ) ; long K = sc . nextInt ( ) ; long comb = 0 ; comb += ( K - 1 ) * ( N - K ) * 6 ; comb += ( K - 1 ) * 3 ; comb += ( N - K ) * 3 ; comb ++ ; double allComb = Math . pow ( N , 3 ) ; out . println ( ( double ) comb \/ allComb ) ; } }","import java . util . Arrays ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long N = sc . nextLong ( ) ; long K = sc . nextLong ( ) ; double ans = 0 ; ans += 1. \/ N \/ N \/ N ; ans += 1. \/ N \/ N * ( N - 1 ) \/ N * 3 ; ans += 1. \/ N * ( K - 1 ) \/ N * ( N - K ) \/ N * 6 ; System . out . println ( ans ) ; } static void tr ( Object ... objects ) { System . out . println ( Arrays . deepToString ( objects ) ) ; } }","import java . util . * ; public class Main { static final int MOD = 1_000_000_007 ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; double n = sc . nextInt ( ) ; double k = sc . nextInt ( ) ; double ans = ( ( k - 1 ) * ( n - k ) * 6 + ( n - 1 ) * 3 + 1 ) \/ n \/ n \/ n ; System . out . println ( ans ) ; } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . UncheckedIOException ; import java . util . StringTokenizer ; class Main { public static void main ( String [ ] args ) { SC sc = new SC ( System . in ) ; long N = sc . nextLong ( ) ; long K = sc . nextLong ( ) ; long souwa = N * N * N ; long kotae = 0 ; if ( N >= K ) { if ( K - 1 > 0 && N - K > 0 ) { kotae += ( K - 1 ) * ( N - K ) * 6 ; } if ( N - K > 0 ) { kotae += 3 * ( N - K ) ; } if ( K - 1 > 0 ) { kotae += ( K - 1 ) * 3 ; } kotae ++ ; double ans = ( ( double ) kotae ) \/ ( ( double ) souwa ) ; pl ( ans ) ; } else { pl ( 0 ) ; } } static class SC { private BufferedReader reader = null ; private StringTokenizer tokenizer = null ; public SC ( InputStream in ) { reader = new BufferedReader ( new InputStreamReader ( in ) ) ; } public String next ( ) { if ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } } return tokenizer . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } public long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } public String nextLine ( ) { try { return reader . readLine ( ) ; } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } } } public static void pl ( Object o ) { System . out . println ( o ) ; } public static void p ( Object o ) { System . out . print ( o ) ; } }"],"bleu":0.4710192908840539,"rouge_l":0.6207469922256054}
{"id":71,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException {"],"references":["import java . util . Scanner ; public class Main { static int sum ; static int [ ] dx = { 0 , 0 , 1 , - 1 } ; static int [ ] dy = { 1 , - 1 , 0 , 0 } ; static char [ ] [ ] map ; static int count ; static boolean [ ] [ ] ma ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; map = new char [ 10 ] [ 10 ] ; for ( int i = 0 ; i < 10 ; i ++ ) { String a = sc . next ( ) ; for ( int j = 0 ; j < 10 ; j ++ ) { map [ i ] [ j ] = a . charAt ( j ) ; if ( map [ i ] [ j ] == ' o ' ) { sum ++ ; } } } for ( int i = 0 ; i < 10 ; i ++ ) { for ( int j = 0 ; j < 10 ; j ++ ) { if ( map [ i ] [ j ] == ' x ' ) { map [ i ] [ j ] = ' o ' ; count = 0 ; ma = new boolean [ 10 ] [ 10 ] ; dfs ( j , i ) ; if ( count == ( sum + 1 ) ) { System . out . println ( \" YES \" ) ; return ; } else { map [ i ] [ j ] = ' x ' ; } } } } System . out . println ( \" NO \" ) ; } static boolean judge ( int x , int y ) { return x >= 0 && x < 10 && y >= 0 && y < 10 ; } static void dfs ( int x , int y ) { if ( ma [ y ] [ x ] == true ) { return ; } count ++ ; map [ y ] [ x ] = ' x ' ; ma [ y ] [ x ] = true ; for ( int i = 0 ; i < 4 ; i ++ ) { if ( judge ( x + dx [ i ] , y + dy [ i ] ) && map [ y + dy [ i ] ] [ x + dx [ i ] ] != ' x ' ) { dfs ( x + dx [ i ] , y + dy [ i ] ) ; } } map [ y ] [ x ] = ' o ' ; } }","import java . util . Scanner ; public class Main { static String [ ] [ ] country = new String [ 10 ] [ 10 ] ; static boolean [ ] [ ] done ; static int islandArea = 0 , islandCnt ; static int startX = - 1 , startY = - 1 ; static boolean isOne ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String line , point ; for ( int i = 0 ; i < 10 ; i ++ ) { line = sc . nextLine ( ) ; for ( int j = 0 ; j < 10 ; j ++ ) { point = line . substring ( j , j + 1 ) ; country [ i ] [ j ] = point ; if ( point . equals ( \" o \" ) ) { islandArea ++ ; if ( startX < 0 ) { startX = i ; startY = j ; } } } } for ( int i = 0 ; i < 10 ; i ++ ) { for ( int j = 0 ; j < 10 ; j ++ ) { if ( country [ i ] [ j ] . equals ( \" x \" ) ) { country [ i ] [ j ] = \" o \" ; done = new boolean [ 10 ] [ 10 ] ; islandCnt = 0 ; dfs ( i , j ) ; if ( isOne ) break ; country [ i ] [ j ] = \" x \" ; } } if ( isOne ) break ; } System . out . println ( isOne ? \" YES \" : \" NO \" ) ; } static void dfs ( int x , int y ) { if ( x < 0 || x > 9 || y < 0 || y > 9 ) return ; if ( country [ x ] [ y ] . equals ( \" x \" ) ) return ; if ( done [ x ] [ y ] ) return ; if ( country [ x ] [ y ] . equals ( \" o \" ) ) { islandCnt ++ ; isOne = isOne || islandArea + 1 == islandCnt ; } done [ x ] [ y ] = true ; dfs ( x + 1 , y ) ; dfs ( x - 1 , y ) ; dfs ( x , y + 1 ) ; dfs ( x , y - 1 ) ; } }","import java . util . * ; public class Main { static int H ; static int W ; static char [ ] [ ] table ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; H = 10 ; W = 10 ; int oNum = 0 ; table = new char [ H ] [ W ] ; for ( int i = 0 ; i < H ; i ++ ) { String line = sc . nextLine ( ) ; for ( int j = 0 ; j < W ; j ++ ) { char c = line . charAt ( j ) ; if ( c == ' o ' ) oNum ++ ; table [ i ] [ j ] = c ; } } for ( int i = 0 ; i < H ; i ++ ) { for ( int j = 0 ; j < W ; j ++ ) { if ( table [ i ] [ j ] == ' o ' ) continue ; table [ i ] [ j ] = ' o ' ; for ( int a = 0 ; a < H ; a ++ ) { for ( int b = 0 ; b < W ; b ++ ) { if ( table [ a ] [ b ] == ' x ' ) continue ; boolean [ ] [ ] visited = new boolean [ H ] [ W ] ; int dfsRet = dfs ( a , b , visited ) ; if ( dfsRet == oNum + 1 ) { System . out . println ( \" YES \" ) ; return ; } break ; } } table [ i ] [ j ] = ' x ' ; } } System . out . println ( \" NO \" ) ; } static int dfs ( int a , int b , boolean [ ] [ ] visited ) { if ( a < 0 || b < 0 || a >= H || b >= W || visited [ a ] [ b ] || table [ a ] [ b ] == ' x ' ) return 0 ; visited [ a ] [ b ] = true ; return dfs ( a + 1 , b , visited ) + dfs ( a - 1 , b , visited ) + dfs ( a , b - 1 , visited ) + dfs ( a , b + 1 , visited ) + 1 ; } }","import java . util . * ; public class Main { public static int area = 1 ; public static int count = 0 ; public static char [ ] [ ] map = new char [ 10 ] [ 10 ] ; public static boolean [ ] [ ] check ; public static boolean flag = false ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; for ( int i = 0 ; i < 10 ; i ++ ) { String str = sc . nextLine ( ) ; for ( int j = 0 ; j < 10 ; j ++ ) { map [ i ] [ j ] = str . charAt ( j ) ; if ( map [ i ] [ j ] == ' o ' ) { area ++ ; } } } c : for ( int i = 0 ; i < 10 ; i ++ ) { for ( int j = 0 ; j < 10 ; j ++ ) { if ( map [ i ] [ j ] == ' x ' ) { count = 0 ; check = new boolean [ 10 ] [ 10 ] ; map [ i ] [ j ] = ' o ' ; meth ( i , j ) ; map [ i ] [ j ] = ' x ' ; if ( flag ) { break c ; } } } } if ( flag ) { System . out . println ( \" YES \" ) ; } else { System . out . println ( \" NO \" ) ; } } public static void meth ( int h , int w ) { if ( h < 0 || w < 0 || h >= 10 || w >= 10 || map [ h ] [ w ] == ' x ' ) { return ; } if ( check [ h ] [ w ] ) { return ; } check [ h ] [ w ] = true ; count ++ ; if ( count == area ) { flag = true ; } meth ( h + 1 , w ) ; meth ( h - 1 , w ) ; meth ( h , w + 1 ) ; meth ( h , w - 1 ) ; } }","import java . util . * ; public class Main { public static int area = 1 ; public static int count = 0 ; public static char [ ] [ ] map = new char [ 10 ] [ 10 ] ; public static boolean [ ] [ ] check ; public static boolean flag = false ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; for ( int i = 0 ; i < 10 ; i ++ ) { String str = sc . nextLine ( ) ; for ( int j = 0 ; j < 10 ; j ++ ) { map [ i ] [ j ] = str . charAt ( j ) ; if ( map [ i ] [ j ] == ' o ' ) { area ++ ; } } } c : for ( int i = 0 ; i < 10 ; i ++ ) { for ( int j = 0 ; j < 10 ; j ++ ) { count = 0 ; check = new boolean [ 10 ] [ 10 ] ; if ( map [ i ] [ j ] == ' x ' ) { map [ i ] [ j ] = ' o ' ; meth ( i , j ) ; map [ i ] [ j ] = ' x ' ; if ( flag ) { break c ; } } } } if ( flag ) { System . out . println ( \" YES \" ) ; } else { System . out . println ( \" NO \" ) ; } } public static void meth ( int h , int w ) { if ( h < 0 || w < 0 || h >= 10 || w >= 10 || map [ h ] [ w ] == ' x ' ) { return ; } if ( check [ h ] [ w ] ) { return ; } check [ h ] [ w ] = true ; count ++ ; if ( count == area ) { flag = true ; } meth ( h + 1 , w ) ; meth ( h - 1 , w ) ; meth ( h , w + 1 ) ; meth ( h , w - 1 ) ; } }"],"bleu":2.790671900299959e-6,"rouge_l":0.08520093962288108}
{"id":72,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; out . println ( a > b ? \" ABC \" : \" ABD \" ) ; out . flush ( ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int [ ] arr = new int [ 26 ] ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { arr [ s . charAt ( i ) - ' a ' ] ++ ; } for ( int i = 0 ; i < 26 ; i ++ ) { if ( arr [ i ] % 2 != 0 ) { System . out . println ( \" No \" ) ; return ; } } System . out . println ( \" Yes \" ) ; } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . OutputStream ; import java . io . PrintWriter ; import java . util . ArrayDeque ; import java . util . Queue ; import java . util . StringTokenizer ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; Task solver = new Task ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class Task { public void solve ( int testNumber , InputReader in , PrintWriter out ) { String w = in . next ( ) ; int total ; String ans = \" Yes \" ; for ( int i = 0 ; i < w . length ( ) ; i ++ ) { total = 0 ; for ( int j = 0 ; j < w . length ( ) ; j ++ ) { if ( w . charAt ( i ) == w . charAt ( j ) ) { total ++ ; } } if ( total % 2 != 0 ) { ans = \" No \" ; break ; } } out . println ( ans ) ; } } static class InputReader { public BufferedReader reader ; public StringTokenizer tokenizer ; public InputReader ( InputStream stream ) { reader = new BufferedReader ( new InputStreamReader ( stream ) , 32768 ) ; tokenizer = null ; } public String next ( ) { while ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } } }","import java . util . HashMap ; import java . util . Map ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String [ ] w = sc . next ( ) . split ( \" \" ) ; Map < String , Integer > map = new HashMap < > ( ) ; for ( String s : w ) { if ( map . containsKey ( s ) ) { map . put ( s , map . get ( s ) + 1 ) ; continue ; } map . put ( s , 1 ) ; } for ( String key : map . keySet ( ) ) { if ( map . get ( key ) % 2 == 1 ) { System . out . println ( \" No \" ) ; return ; } } System . out . println ( \" Yes \" ) ; } }","import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . InputMismatchException ; import java . io . IOException ; import java . io . InputStream ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; FastScanner in = new FastScanner ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; TaskB solver = new TaskB ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class TaskB { public void solve ( int testNumber , FastScanner in , PrintWriter out ) { String s = in . next ( ) ; boolean [ ] odd = new boolean [ 26 ] ; for ( char c : s . toCharArray ( ) ) odd [ c - ' a ' ] = ! odd [ c - ' a ' ] ; for ( boolean o : odd ) { if ( o ) { out . println ( \" No \" ) ; return ; } } out . println ( \" Yes \" ) ; } } static class FastScanner { private InputStream in ; private byte [ ] buffer = new byte [ 1024 ] ; private int bufPointer ; private int bufLength ; public FastScanner ( InputStream in ) { this . in = in ; this . bufPointer = 0 ; this . bufLength = 0 ; } private int readByte ( ) { if ( bufPointer >= bufLength ) { if ( bufLength == - 1 ) throw new InputMismatchException ( ) ; bufPointer = 0 ; try { bufLength = in . read ( buffer ) ; } catch ( IOException e ) { throw new InputMismatchException ( ) ; } if ( bufLength <= 0 ) return - 1 ; } return buffer [ bufPointer ++ ] ; } private static boolean isPrintableChar ( int c ) { return c >= 33 && c <= 126 ; } public String next ( ) { StringBuilder sb = new StringBuilder ( ) ; int b = readByte ( ) ; while ( ! isPrintableChar ( b ) ) b = readByte ( ) ; while ( isPrintableChar ( b ) ) { sb . appendCodePoint ( b ) ; b = readByte ( ) ; } return sb . toString ( ) ; } } }","import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; String w = sc . next ( ) ; String ans = \" Yes \" ; int l = w . length ( ) ; for ( int i = 0 ; i < l ; i ++ ) { char x = w . charAt ( i ) ; int count = 0 ; for ( int j = 0 ; j < l ; j ++ ) { if ( w . charAt ( i ) == w . charAt ( j ) ) { count ++ ; } } if ( count % 2 != 0 ) { ans = \" No \" ; } } System . out . println ( ans ) ; } public static PrintWriter out ; public static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"bleu":0.8810287766153563,"rouge_l":0.7741610025488529}
{"id":73,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int N = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ M ] ; for ( int i = 0 ; i < M ; i ++ ) { st = new StringTokenizer ( br . readLine ( ) ) ; a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int [ ] b = new int [ M ] ; for ( int i = 0 ; i < M ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < M ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } long ans = 0 ; for ( int i = 0 ; i < M ; i ++ ) { for ( int j = 0 ; j < M ; j ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { if ( a [ k ] < b [ k ] && b [ k ] < b [ k ] ) { ans ++ ; } } } } } } System . out . println ( ans ) ; } }"],"references":["import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int L = scanner . nextInt ( ) ; int N = scanner . nextInt ( ) ; int [ ] x = new int [ N ] ; int [ ] y = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { x [ i ] = scanner . nextInt ( ) ; y [ N - i - 1 ] = L - x [ i ] ; } long [ ] x2 = new long [ N + 1 ] ; long [ ] y2 = new long [ N + 1 ] ; for ( int i = 1 ; i <= N ; i ++ ) x2 [ i ] = x2 [ i - 1 ] + x [ i - 1 ] * 2L ; for ( int i = 1 ; i <= N ; i ++ ) y2 [ i ] = y2 [ i - 1 ] + y [ i - 1 ] * 2L ; long max = x [ N - 1 ] ; for ( int n = N - 1 ; n > 0 ; n -- ) { int m = N - n ; if ( n > m ) { max = Math . max ( max , Math . max ( x2 [ n - 1 ] - x2 [ n - m - 1 ] + y2 [ m ] - y2 [ 0 ] + x [ n - 1 ] , x2 [ n ] - x2 [ n - m ] + y2 [ m - 1 ] - y2 [ 0 ] + y [ m - 1 ] ) ) ; } else { max = Math . max ( max , Math . max ( x2 [ n - 1 ] - x2 [ 0 ] + y2 [ m ] - y2 [ m - n ] + x [ n - 1 ] , x2 [ n ] - x2 [ 0 ] + y2 [ m - 1 ] - y2 [ Math . max ( m - n - 1 , 0 ) ] + y [ m - 1 ] ) ) ; } } max = Math . max ( max , y [ N - 1 ] ) ; System . out . println ( max ) ; } }","import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int L = scanner . nextInt ( ) ; int N = scanner . nextInt ( ) ; int [ ] x = new int [ N ] ; int [ ] y = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { x [ i ] = scanner . nextInt ( ) ; y [ N - i - 1 ] = L - x [ i ] ; } long [ ] x2 = new long [ N + 1 ] ; long [ ] y2 = new long [ N + 1 ] ; for ( int i = 1 ; i <= N ; i ++ ) x2 [ i ] = x2 [ i - 1 ] + x [ i - 1 ] * 2L ; for ( int i = 1 ; i <= N ; i ++ ) y2 [ i ] = y2 [ i - 1 ] + y [ i - 1 ] * 2L ; long max = x [ N - 1 ] ; for ( int n = N - 1 ; n > 0 ; n -- ) { int m = N - n ; max = Math . max ( max , Math . max ( x2 [ n - 1 ] - x2 [ Math . max ( n - m - 1 , 0 ) ] + y2 [ m ] - y2 [ Math . max ( m - n , 0 ) ] + x [ n - 1 ] , x2 [ n ] - x2 [ Math . max ( n - m , 0 ) ] + y2 [ m - 1 ] - y2 [ Math . max ( m - n - 1 , 0 ) ] + y [ m - 1 ] ) ) ; } max = Math . max ( max , y [ N - 1 ] ) ; System . out . println ( max ) ; } }","import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; long l = sc . nextLong ( ) ; int n = sc . nextInt ( ) ; long [ ] dis = new long [ n + 1 ] ; long [ ] sum = new long [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { dis [ i ] = sc . nextLong ( ) ; sum [ i ] = sum [ i - 1 ] + dis [ i ] ; } if ( n == 1 ) { System . out . println ( Math . max ( dis [ 1 ] , l - dis [ 1 ] ) ) ; return ; } long ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { int right = Math . min ( i - 1 , n - i ) ; int left = Math . min ( i , n - i ) ; ans = Math . max ( ans , dis [ i ] + ( sum [ i - 1 ] - sum [ i - 1 - right ] ) * 2 + left * 2 * l - 2 * ( sum [ left + i ] - sum [ i ] ) ) ; right = Math . min ( i - 1 , n - i + 1 ) ; left = Math . min ( n - i , i - 1 ) ; ans = Math . max ( ans , l - dis [ i ] + ( sum [ i - 1 ] - sum [ i - 1 - right ] ) * 2 + left * 2 * l - 2 * ( sum [ left + i ] - sum [ i ] ) ) ; } System . out . println ( ans ) ; } }","import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; long l = sc . nextLong ( ) ; int n = sc . nextInt ( ) ; long [ ] dis = new long [ n + 1 ] ; long [ ] sum = new long [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { dis [ i ] = sc . nextLong ( ) ; sum [ i ] = sum [ i - 1 ] + dis [ i ] ; } long ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { int right = Math . min ( i - 1 , n - i ) ; int left = Math . min ( i , n - i ) ; ans = Math . max ( ans , dis [ i ] + ( sum [ i - 1 ] - sum [ i - 1 - right ] ) * 2 + left * 2 * l - 2 * ( sum [ left + i ] - sum [ i ] ) ) ; right = Math . min ( i - 1 , n - i + 1 ) ; left = Math . min ( n - i , i - 1 ) ; ans = Math . max ( ans , l - dis [ i ] + ( sum [ i - 1 ] - sum [ i - 1 - right ] ) * 2 + left * 2 * l - 2 * ( sum [ left + i ] - sum [ i ] ) ) ; } System . out . println ( ans ) ; } }"],"bleu":0.30668297382541754,"rouge_l":0.4312214720728281}
{"id":74,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { System . out . print ( b [ i ] + \" \" ) ; } System . out . println ( ) ; } }"],"references":["import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int res = 0 ; Integer [ ] a = new Integer [ n ] ; Map < Integer , Integer > map = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; map . put ( a [ i ] , map . getOrDefault ( a [ i ] , 0 ) + 1 ) ; } Arrays . sort ( a , ( x , y ) -> y - x ) ; for ( int key : a ) { int countKey = map . getOrDefault ( key , 0 ) ; if ( countKey > 0 ) { map . put ( key , countKey - 1 ) ; int diff = Integer . highestOneBit ( key ) * 2 - key ; int countDiff = map . getOrDefault ( diff , 0 ) ; if ( countDiff > 0 ) { map . put ( diff , countDiff - 1 ) ; res ++ ; } else map . put ( key , countKey ) ; } } System . out . println ( res ) ; } }","import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . IOException ; import java . util . TreeMap ; public class Main { private int n ; private TreeMap < Integer , Integer > a ; public static void main ( String [ ] args ) { Main m = new Main ( ) ; m . solve ( ) ; } private void set ( ) { try ( BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ) { n = Integer . parseInt ( br . readLine ( ) ) ; a = new TreeMap < > ( ) ; for ( String str : br . readLine ( ) . split ( \" ▁ \" ) ) { int ai = Integer . parseInt ( str ) ; int num = a . getOrDefault ( ai , 0 ) + 1 ; a . put ( ai , num ) ; } } catch ( IOException e ) { e . printStackTrace ( ) ; } } private void solve ( ) { set ( ) ; int pair = 0 ; while ( ! a . isEmpty ( ) ) { int ai = a . lastKey ( ) ; int complement = 2 * Integer . highestOneBit ( ai ) - ai ; if ( ai == complement ) { int num = a . get ( ai ) ; pair += num \/ 2 ; a . remove ( ai ) ; continue ; } if ( a . containsKey ( complement ) ) { int numA = a . get ( ai ) ; int numC = a . get ( complement ) ; if ( numA < numC ) { pair += numA ; a . remove ( ai ) ; a . put ( complement , numC - numA ) ; } else { pair += numC ; a . remove ( ai ) ; a . remove ( complement ) ; } continue ; } a . remove ( ai ) ; } System . out . println ( pair ) ; } }","import java . util . * ; public class Main { static int left ( int x ) { int i = 1 ; while ( i <= x ) { i <<= 1 ; } return i - x ; } public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n + 11 ] ; int [ ] used = new int [ n + 11 ] ; Map < Integer , Integer > cnt = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; used [ i ] = 0 ; if ( cnt . containsKey ( a [ i ] ) ) { cnt . put ( a [ i ] , cnt . get ( a [ i ] ) + 1 ) ; } else { cnt . put ( a [ i ] , 1 ) ; } } Arrays . sort ( a , 0 , n ) ; int ans = 0 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { int x = a [ i ] ; if ( cnt . get ( x ) == 0 ) { continue ; } cnt . put ( x , cnt . get ( x ) - 1 ) ; int match = left ( x ) ; if ( cnt . containsKey ( match ) && cnt . get ( match ) > 0 ) { ans += 1 ; cnt . put ( match , cnt . get ( match ) - 1 ) ; } } System . out . println ( ans ) ; } }","import java . util . Arrays ; import java . util . HashMap ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = Integer . parseInt ( sc . next ( ) ) ; long [ ] a = new long [ N ] ; for ( int i = 0 ; i < N ; i ++ ) a [ i ] = Long . parseLong ( sc . next ( ) ) ; Arrays . sort ( a ) ; HashMap < Long , Integer > map = new HashMap < > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { if ( map . containsKey ( a [ i ] ) ) { map . put ( a [ i ] , 1 + map . get ( a [ i ] ) ) ; } else { map . put ( a [ i ] , 1 ) ; } } long res = 0 ; for ( int i = N - 1 ; i >= 0 ; i -- ) { if ( map . get ( a [ i ] ) == 0 ) continue ; map . put ( a [ i ] , map . get ( a [ i ] ) - 1 ) ; long diff = 2 * Long . highestOneBit ( a [ i ] ) - a [ i ] ; if ( map . containsKey ( diff ) && map . get ( diff ) > 0 ) { res ++ ; map . put ( diff , map . get ( diff ) - 1 ) ; } } System . out . println ( res ) ; } }","import java . util . * ; import java . lang . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; TreeMap < Long , Integer > tm = new TreeMap < Long , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { long tmp = sc . nextLong ( ) ; if ( tm . containsKey ( tmp ) ) { tm . put ( tmp , tm . get ( tmp ) + 1 ) ; } else { tm . put ( tmp , 1 ) ; } } int count = 0 ; while ( ! tm . isEmpty ( ) ) { long req = 0 ; for ( int j = 0 ; j < 33 ; j ++ ) { if ( Math . pow ( 2 , j ) > tm . lastKey ( ) ) { req = ( long ) Math . pow ( 2 , j ) - tm . lastKey ( ) ; break ; } } if ( tm . get ( tm . lastKey ( ) ) == 1 ) { tm . remove ( tm . lastKey ( ) ) ; } else { tm . put ( tm . lastKey ( ) , tm . get ( tm . lastKey ( ) ) - 1 ) ; } if ( tm . containsKey ( req ) ) { if ( tm . get ( req ) == 1 ) { tm . remove ( req ) ; } else { tm . put ( req , tm . get ( req ) - 1 ) ; } count ++ ; } } System . out . println ( count ) ; } }"],"bleu":0.5538980441454573,"rouge_l":0.5671542834281448}
{"id":75,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter pw = new PrintWriter ( System . out ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int N = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ M ] ; for ( int i = 0 ; i < M ; i ++ ) { st = new StringTokenizer ( br . readLine ( ) ) ; a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int [ ] b = new int [ M ] ; for ( int i = 0 ; i < M ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int [ ] [ ] dp = new int [ M ] [ M ] ; for ( int i = 0 ; i < M ; i ++ ) { for ( int j = 0 ; j < M ; j ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { if ( a [ k ] == b [ k ] [ k ] ) { dp [ i ] [ j ] [ k ] = Math . max ( dp [ i ] [ j ] [ k ] , dp [ i ] [ k ] [ k ] [ k ] ) ; } } } } } } } } } pw . println ( dp [ M - 1 ] [ M - 1 ] ) ; pw . close ( ) ; } }"],"references":["import java . util . * ; public class Main { public static Scanner sc ; public static void main ( String [ ] args ) { sc = new Scanner ( System . in ) ; final int INF = 1_000_000_000 ; int n = sc . nextInt ( ) ; long c = sc . nextLong ( ) ; long [ ] x = new long [ n ] ; long [ ] v = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { x [ i ] = sc . nextLong ( ) ; v [ i ] = sc . nextLong ( ) ; } long sum1 = 0 ; long sum2 = 0 ; long [ ] dp1 = new long [ n + 1 ] ; long [ ] dp2 = new long [ n + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) { sum1 += v [ i ] ; dp1 [ i + 1 ] = sum1 - x [ i ] ; dp1 [ i + 1 ] = Math . max ( dp1 [ i ] , dp1 [ i + 1 ] ) ; sum2 += v [ n - i - 1 ] ; dp2 [ i + 1 ] = sum2 - ( c - x [ n - i - 1 ] ) ; dp2 [ i + 1 ] = Math . max ( dp2 [ i ] , dp2 [ i + 1 ] ) ; } long ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { long a1 = Math . max ( dp1 [ i + 1 ] , dp1 [ i + 1 ] - x [ i ] + dp2 [ n - i - 1 ] ) ; long a2 = Math . max ( dp2 [ i + 1 ] , dp2 [ i + 1 ] - ( c - x [ n - i - 1 ] ) + dp1 [ n - i - 1 ] ) ; long aa = Math . max ( a1 , a2 ) ; ans = Math . max ( ans , aa ) ; } System . out . println ( ans ) ; } }"],"bleu":0.2352330404974107,"rouge_l":0.41825973542016026}
{"id":76,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; out . println ( Math . min ( a , b ) ) ; out . close ( ) ; } static int l_min ( int [ ] a ) { Arrays . sort ( a ) ; return a [ 0 ] ; } static int l_max ( int [ ] a ) { int l = a . length ; Arrays . sort ( a ) ; return a [ l - 1 ] ; } public static PrintWriter out ; public static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; System . out . println ( ( a - 1 ) * ( b - 1 ) ) ; } }","import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { PrintWriter out = new PrintWriter ( System . out ) ; InputStreamScanner in = new InputStreamScanner ( System . in ) ; new Main ( ) . solve ( in , out ) ; out . flush ( ) ; } private void solve ( InputStreamScanner in , PrintWriter out ) { int a = in . nextInt ( ) ; int b = in . nextInt ( ) ; out . println ( ( a - 1 ) * ( b - 1 ) ) ; } static class InputStreamScanner { private InputStream in ; private byte [ ] buf = new byte [ 1024 ] ; private int len = 0 ; private int off = 0 ; InputStreamScanner ( InputStream in ) { this . in = in ; } String next ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( int b = skip ( ) ; ! isSpace ( b ) ; ) { sb . appendCodePoint ( b ) ; b = read ( ) ; } return sb . toString ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } char nextChar ( ) { return ( char ) skip ( ) ; } int skip ( ) { for ( int b ; ( b = read ( ) ) != - 1 ; ) { if ( ! isSpace ( b ) ) { return b ; } } return - 1 ; } private boolean isSpace ( int c ) { return c < 33 || c > 126 ; } private int read ( ) { if ( len == - 1 ) { throw new InputMismatchException ( \" End ▁ of ▁ Input \" ) ; } if ( off >= len ) { off = 0 ; try { len = in . read ( buf ) ; } catch ( IOException e ) { throw new InputMismatchException ( e . getMessage ( ) ) ; } if ( len <= 0 ) { return - 1 ; } } return buf [ off ++ ] ; } } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . OutputStream ; import java . io . PrintWriter ; import java . util . StringTokenizer ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; Task solver = new Task ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class Task { public void solve ( int testNumber , InputReader in , PrintWriter out ) { int n = in . nextInt ( ) ; int m = in . nextInt ( ) ; out . println ( ( n - 1 ) * ( m - 1 ) ) ; } } static class InputReader { public BufferedReader reader ; public StringTokenizer tokenizer ; public InputReader ( InputStream stream ) { reader = new BufferedReader ( new InputStreamReader ( stream ) , 32768 ) ; tokenizer = null ; } public String next ( ) { while ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } } }","import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; System . out . println ( ( n - 1 ) * ( m - 1 ) ) ; } }","import java . io . PrintWriter ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; int N = Integer . parseInt ( sc . next ( ) ) ; int M = Integer . parseInt ( sc . next ( ) ) ; out . println ( ( N - 1 ) * ( M - 1 ) ) ; out . flush ( ) ; } }"],"bleu":0.5722131323748507,"rouge_l":0.7207619966240656}
{"id":77,"predictions":["import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; } public static long mod = 17352642619633L ; void run ( FastScanner in , PrintWriter out ) { int N = in . nextInt ( ) ; int [ ] a = new int [ N ] ; int [ ] b = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { a [ i ] = in . nextInt ( ) ; b [ i ] = in . nextInt ( ) ; } for ( int i = 0 ; i < N ; i ++ ) { b [ i ] = in . nextInt ( ) ; } long ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < N ; j ++ ) { ans += a [ i ] - b [ j ] ; } out . println ( ans ) ; } } static class FastScanner { BufferedReader br ; StringTokenizer st ; public FastScanner ( InputStream in ) { br = new BufferedReader ( new InputStreamReader ( in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . util . Scanner ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int ma = sc . nextInt ( ) ; int mb = sc . nextInt ( ) ; int [ ] [ ] dp = new int [ 401 ] [ 401 ] ; for ( int i = 0 ; i < 401 ; i ++ ) { Arrays . fill ( dp [ i ] , Integer . MAX_VALUE ) ; } dp [ 0 ] [ 0 ] = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; for ( int j = 400 ; j >= a ; j -- ) { for ( int k = 400 ; k >= b ; k -- ) { if ( dp [ j - a ] [ k - b ] != Integer . MAX_VALUE ) { dp [ j ] [ k ] = Math . min ( dp [ j ] [ k ] , c + dp [ j - a ] [ k - b ] ) ; } } } } int ans = Integer . MAX_VALUE ; for ( int i = 1 ; 401 > Math . max ( ma , mb ) * i ; i ++ ) { if ( dp [ ma * i ] [ mb * i ] != Integer . MAX_VALUE ) { ans = Math . min ( ans , dp [ ma * i ] [ mb * i ] ) ; } } if ( ans == Integer . MAX_VALUE ) { System . out . println ( - 1 ) ; } else { System . out . println ( ans ) ; } } }","import java . util . Arrays ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { try ( Scanner sc = new Scanner ( System . in ) ; ) { new Main ( ) . solve ( sc ) ; } } void solve ( Scanner sc ) { int n = sc . nextInt ( ) ; int ma = sc . nextInt ( ) ; int mb = sc . nextInt ( ) ; int [ ] [ ] [ ] dp = new int [ n + 1 ] [ 10 * n + 1 ] [ 10 * n + 1 ] ; int INF = 50 * 100 ; for ( int i = 0 ; i <= n ; i ++ ) { for ( int j = 0 ; j <= 10 * n ; j ++ ) { Arrays . fill ( dp [ i ] [ j ] , INF ) ; } } dp [ 0 ] [ 0 ] [ 0 ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; for ( int j = 0 ; j <= 10 * n ; j ++ ) { for ( int k = 0 ; k <= 10 * n ; k ++ ) { dp [ i ] [ j ] [ k ] = dp [ i - 1 ] [ j ] [ k ] ; if ( j - a >= 0 && k - b >= 0 ) { dp [ i ] [ j ] [ k ] = Math . min ( dp [ i ] [ j ] [ k ] , dp [ i - 1 ] [ j - a ] [ k - b ] + c ) ; } } } } int i = 1 ; int ans = INF ; while ( i * ma <= 10 * n && i * mb <= 10 * n ) { ans = Math . min ( ans , dp [ n ] [ i * ma ] [ i * mb ] ) ; i ++ ; } System . out . println ( ans == INF ? - 1 : ans ) ; } }"],"bleu":0.3292220844524878,"rouge_l":0.45909771220868073}
{"id":78,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans += a [ i ] ; } out . println ( ans ) ; out . close ( ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; if ( b == 100 ) { System . out . println ( 101 * ( int ) Math . pow ( 100 , a ) ) ; } else { System . out . println ( b * ( int ) Math . pow ( 100 , a ) ) ; } } }","import java . io . BufferedReader ; import java . io . InputStreamReader ; public class Main { public static void main ( String args [ ] ) throws Exception { Input input = new Input ( ) ; final Data l = input . readLine ( ) ; final int D = l . col [ 0 ] ; final int N = l . col [ 1 ] ; System . out . print ( ( int ) Math . pow ( 100 , D ) * ( N == 100 ? N + 1 : N ) ) ; } static class Input { public BufferedReader input = new BufferedReader ( new InputStreamReader ( System . in ) ) ; public void close ( ) throws Exception { input . close ( ) ; } public Data readLine ( ) throws Exception { return new Data ( input . readLine ( ) . split ( \" ▁ \" ) ) ; } } static class Data { public int [ ] col ; public Data ( String [ ] values ) { col = new int [ values . length ] ; for ( int i = 0 ; i < values . length ; i ++ ) { col [ i ] = Integer . parseInt ( values [ i ] ) ; } } } }","import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { new Main ( ) . solveB ( ) ; } private void solveA ( ) { Scanner scanner = null ; int numA = 0 ; int numB = 0 ; try { scanner = new Scanner ( System . in ) ; numA = scanner . nextInt ( ) ; numB = scanner . nextInt ( ) ; if ( numA > 16 \/ 2 || numB > 16 \/ 2 ) { System . out . println ( \" : ( \" ) ; return ; } System . out . println ( \" Yay ! \" ) ; } finally { if ( scanner != null ) { scanner . close ( ) ; } } } private void solveB ( ) { Scanner scanner = null ; int numD = 0 ; int numN = 0 ; try { scanner = new Scanner ( System . in ) ; numD = scanner . nextInt ( ) ; numN = scanner . nextInt ( ) ; if ( numN == 100 ) { numN ++ ; } switch ( numD ) { case 0 : System . out . println ( numN ) ; break ; case 1 : System . out . println ( numN * 100 ) ; break ; case 2 : System . out . println ( numN * 10000 ) ; break ; default : break ; } } finally { if ( scanner != null ) { scanner . close ( ) ; } } } private void solveC ( ) { Scanner scanner = null ; int numN = 0 ; int numK = 0 ; int numS = 0 ; try { scanner = new Scanner ( System . in ) ; numN = scanner . nextInt ( ) ; System . out . println ( \" \" ) ; } finally { if ( scanner != null ) { scanner . close ( ) ; } } } private void solveD ( ) { Scanner scanner = null ; int numN = 0 ; int numK = 0 ; int numS = 0 ; try { scanner = new Scanner ( System . in ) ; numN = scanner . nextInt ( ) ; System . out . println ( \" \" ) ; } finally { if ( scanner != null ) { scanner . close ( ) ; } } } }","import java . util . * ; public class Main { private static int calc ( int x ) { int ret = 0 ; while ( x % 100 == 0 ) { x \/= 100 ; ++ ret ; } return ret ; } public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int d = sc . nextInt ( ) ; int n = sc . nextInt ( ) ; int count = 0 ; int value = 0 ; while ( count < n ) { ++ value ; if ( calc ( value ) == d ) ++ count ; } System . out . println ( value ) ; sc . close ( ) ; } }","import java . io . * ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) throws IOException { String str = new BufferedReader ( new InputStreamReader ( System . in ) ) . readLine ( ) ; int [ ] input = Arrays . stream ( str . split ( \" ▁ \" ) ) . mapToInt ( Integer :: parseInt ) . toArray ( ) ; System . out . println ( ( int ) ( ( input [ 1 ] + input [ 1 ] \/ 100 ) * Math . pow ( 100 , input [ 0 ] ) ) ) ; } }"],"bleu":0.45745107647443395,"rouge_l":0.5856999955003132}
{"id":79,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; out . println ( a > b ? a : b ) ; out . close ( ) ; } static int l_min ( int [ ] a ) { Arrays . sort ( a ) ; return a [ 0 ] ; } static int l_max ( int [ ] a ) { int l = a . length ; Arrays . sort ( a ) ; return a [ l - 1 ] ; } static int l_max ( int [ ] a ) { int l = a . length ; Arrays . sort ( a ) ; return a [ l - 1 ] ; } public static PrintWriter out ; public static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = Integer . parseInt ( sc . next ( ) ) ; System . out . println ( n \/ 3 ) ; sc . close ( ) ; } }","import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collections ; import java . util . PriorityQueue ; import java . util . Scanner ; import java . util . TreeSet ; import org . omg . Messaging . SyncScopeHelper ; public class Main { Scanner sc = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { new Main ( ) ; } public Main ( ) { new Test_100 ( ) . doIt ( ) ; } class Test_100 { void doIt ( ) { int N = sc . nextInt ( ) ; int ans = N \/ 3 ; System . out . println ( ans ) ; } } }","import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Main main = new Main ( ) ; main . solve ( ) ; } void solve ( ) { Scanner sc = new Scanner ( System . in ) ; int n = Integer . parseInt ( sc . next ( ) ) ; sc . close ( ) ; int res = n \/ 3 ; System . out . println ( res ) ; } }","import java . util . * ; import static java . lang . System . * ; public class Main { static Scanner sc = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { int n = sc . nextInt ( ) ; out . println ( n \/ 3 ) ; } }","import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int x = n ; int sum = 0 ; while ( x > 2 ) { x = x - 3 ; sum ++ ; } System . out . println ( sum ) ; sc . close ( ) ; } }"],"bleu":0.19989217477752214,"rouge_l":0.3618073416600826}
{"id":80,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; out . println ( a > b ? \" ABC \" : \" ABD \" ) ; out . flush ( ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; sc . next ( ) ; System . out . println ( \" A \" + sc . next ( ) . charAt ( 0 ) + \" C \" ) ; sc . next ( ) ; } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . OutputStream ; import java . io . PrintWriter ; import java . util . StringTokenizer ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; Task solver = new Task ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class Task { public void solve ( int testNumber , InputReader in , PrintWriter out ) { String A = in . next ( ) ; String B = in . next ( ) ; String C = in . next ( ) ; out . println ( \" A \" + B . charAt ( 0 ) + \" C \" ) ; } } static class InputReader { public BufferedReader reader ; public StringTokenizer tokenizer ; public InputReader ( InputStream stream ) { reader = new BufferedReader ( new InputStreamReader ( stream ) , 32768 ) ; tokenizer = null ; } public String next ( ) { while ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } public double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } } }","import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; char a = sc . next ( ) . charAt ( 0 ) ; char b = sc . next ( ) . charAt ( 0 ) ; char c = sc . next ( ) . charAt ( 0 ) ; System . out . println ( \" \" + a + b + c ) ; } }","import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; public class Main { public static void main ( String [ ] args ) throws Exception { BufferedReader input = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer tokenizer = new StringTokenizer ( input . readLine ( ) ) ; StringBuilder output = new StringBuilder ( ) ; while ( tokenizer . hasMoreTokens ( ) ) output . append ( tokenizer . nextToken ( ) . charAt ( 0 ) ) ; System . out . println ( output ) ; } }","import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String A = sc . next ( ) ; String S = sc . next ( ) ; String C = sc . next ( ) ; String [ ] A_array = A . split ( \" \" ) ; String [ ] S_array = S . split ( \" \" ) ; String [ ] C_array = C . split ( \" \" ) ; System . out . println ( A_array [ 0 ] + S_array [ 0 ] + C_array [ 0 ] ) ; } }"],"bleu":0.5302776198858498,"rouge_l":0.724574474168247}
{"id":81,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; out . println ( a > b ? \" ABC \" : \" ABD \" ) ; out . flush ( ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . OutputStream ; import java . io . PrintWriter ; import java . util . StringTokenizer ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; Task solver = new Task ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class Task { public void solve ( int testNumber , InputReader in , PrintWriter out ) { String S = in . next ( ) ; out . println ( S . charAt ( S . length ( ) - 1 ) == ' T ' ? \" YES \" : \" NO \" ) ; } } static class InputReader { public BufferedReader reader ; public StringTokenizer tokenizer ; public InputReader ( InputStream stream ) { reader = new BufferedReader ( new InputStreamReader ( stream ) , 32768 ) ; tokenizer = null ; } public String next ( ) { while ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } public double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } } }","import java . util . * ; import java . util . stream . * ; import static java . lang . System . * ; class Main { static Scanner sc = new Scanner ( System . in ) ; static int nextInt ( ) { return Integer . parseInt ( sc . next ( ) ) ; } static int [ ] nextIntArray ( int n ) { return IntStream . range ( 0 , n ) . map ( i -> nextInt ( ) ) . toArray ( ) ; } static int max ( int ... ar ) { Arrays . sort ( ar ) ; return ar [ ar . length - 1 ] ; } static int min ( int ... ar ) { Arrays . sort ( ar ) ; return ar [ 0 ] ; } static String yesno ( boolean b ) { return b ? \" Yes \" : \" No \" ; } static int maxInt = Integer . MAX_VALUE ; static int minInt = Integer . MIN_VALUE ; public static void main ( String [ ] args ) { out . println ( sc . next ( ) . endsWith ( \" T \" ) ? \" YES \" : \" NO \" ) ; } }","import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . InputMismatchException ; import java . io . IOException ; import java . io . InputStream ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; FastScanner in = new FastScanner ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; TaskA solver = new TaskA ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class TaskA { public void solve ( int testNumber , FastScanner in , PrintWriter out ) { String s = in . next ( ) ; out . println ( s . charAt ( s . length ( ) - 1 ) == ' T ' ? \" YES \" : \" NO \" ) ; } } static class FastScanner { private InputStream in ; private byte [ ] buffer = new byte [ 1024 ] ; private int bufPointer ; private int bufLength ; public FastScanner ( InputStream in ) { this . in = in ; } private int readByte ( ) { if ( bufPointer >= bufLength ) { if ( bufLength == - 1 ) throw new InputMismatchException ( ) ; bufPointer = 0 ; try { bufLength = in . read ( buffer ) ; } catch ( IOException e ) { throw new InputMismatchException ( ) ; } if ( bufLength <= 0 ) return - 1 ; } return buffer [ bufPointer ++ ] ; } private static boolean isPrintableChar ( int c ) { return c >= 33 && c <= 126 ; } public String next ( ) { StringBuilder sb = new StringBuilder ( ) ; int b = readByte ( ) ; while ( ! isPrintableChar ( b ) ) b = readByte ( ) ; while ( isPrintableChar ( b ) ) { sb . appendCodePoint ( b ) ; b = readByte ( ) ; } return sb . toString ( ) ; } } }","import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; String s = sc . next ( ) ; int l = s . length ( ) ; System . out . println ( s . charAt ( l - 1 ) == ' T ' ? \" YES \" : \" NO \" ) ; } static int l_min ( int [ ] a ) { Arrays . sort ( a ) ; return a [ 0 ] ; } static int l_max ( int [ ] a ) { int l = a . length ; Arrays . sort ( a ) ; return a [ l - 1 ] ; } public static PrintWriter out ; public static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }","import java . util . Scanner ; public class Main { private static Scanner sc = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { String s = sc . next ( ) ; if ( s . charAt ( s . length ( ) - 1 ) == ' T ' ) { System . out . println ( \" YES \" ) ; } else { System . out . println ( \" NO \" ) ; } } }"],"bleu":0.896092267713155,"rouge_l":0.80368467089438}
{"id":82,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int K = sc . nextInt ( ) ; int [ ] a = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { ans += a [ i ] ; } System . out . println ( ans ) ; } }"],"references":["import java . util . * ; public class Main { static int [ ] [ ] [ ] dp ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int prev = - 1 ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int a = sc . nextInt ( ) ; if ( prev == a ) { count ++ ; prev = - 1 ; } else { prev = a ; } } System . out . println ( count ) ; } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . ArrayDeque ; import java . util . Queue ; public class Main { public static void main ( String args [ ] ) { try ( BufferedReader input = new BufferedReader ( new InputStreamReader ( System . in ) ) ) { final int line1 [ ] = InputUtil . readLine ( input . readLine ( ) ) ; final int col = line1 [ 0 ] ; Queue < Data > data = InputUtil . getCollection ( input , col ) ; int cnt = 0 ; int pre = 0 ; while ( ! data . isEmpty ( ) ) { Data d = data . poll ( ) ; if ( pre == d . a ) { cnt ++ ; pre = - 1 ; } else { pre = d . a ; } } System . out . println ( cnt ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } } } class InputUtil { public static int [ ] readLine ( String line ) { String [ ] vals = line . split ( \" ▁ \" ) ; int [ ] data = new int [ vals . length ] ; int i = 0 ; try { for ( String val : vals ) { data [ i ++ ] = Integer . parseInt ( val ) ; } } catch ( Exception e ) { e . printStackTrace ( ) ; } return data ; } public static Queue < Data > getCollection ( BufferedReader input , int num ) { Queue < Data > data = new ArrayDeque < > ( ) ; try { String [ ] line = input . readLine ( ) . split ( \" ▁ \" ) ; for ( int i = 0 ; i < num ; i ++ ) { data . add ( new Data ( line [ i ] ) ) ; } } catch ( IOException e ) { e . printStackTrace ( ) ; } return data ; } } class Data implements Comparable < Data > { int a ; public Data ( String value ) { this . a = Integer . parseInt ( value ) ; } @ Override public int compareTo ( Data d ) { return a - d . a ; } }","import java . util . * ; import static java . lang . System . * ; public class Main { static Scanner sc = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { int N = ni ( ) ; int [ ] a = niarr ( N ) ; int cnt = 0 ; for ( int i = 1 ; i < N ; i ++ ) { if ( a [ i - 1 ] == a [ i ] ) { cnt ++ ; i ++ ; } } out . print ( cnt ) ; } static int ni ( ) { return sc . nextInt ( ) ; } static long nl ( ) { return sc . nextLong ( ) ; } static String ns ( ) { return sc . next ( ) ; } static int [ ] niarr ( int N ) { int [ ] a = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } return a ; } static long [ ] nlarr ( int N ) { long [ ] a = new long [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { a [ i ] = sc . nextLong ( ) ; } return a ; } }","import java . util . * ; import java . lang . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int count = 0 ; for ( int i = 1 ; i < n ; i ++ ) { if ( a [ i ] == a [ i - 1 ] ) { count ++ ; i ++ ; } } System . out . println ( count ) ; } }","import java . util . Scanner ; public class Main { private static Scanner sc = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { int n = sc . nextInt ( ) ; int prev = - 1 ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int tmp = sc . nextInt ( ) ; if ( tmp == prev ) { ans ++ ; prev = - 1 ; } else { prev = tmp ; } } System . out . println ( ans ) ; } }"],"bleu":0.8724838510870073,"rouge_l":0.7985827528224838}
{"id":83,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter pw = new PrintWriter ( System . out ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int N = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ M ] ; for ( int i = 0 ; i < M ; i ++ ) { a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int [ ] b = new int [ M ] ; for ( int i = 0 ; i < M ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } long ans = 0 ; for ( int i = 0 ; i < M ; i ++ ) { for ( int j = 0 ; j < M ; j ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { b [ k ] += a [ k ] * b [ k ] * a [ k ] * b [ k ] * b [ k ] * b [ k ] * b [ k ] * b [ k ] * b [ k ] * b [ k ] * b [ k ] * b [ k ] * b [ k ] * b [ k ] * b [ k ] * b [ k ] * b [ k ] * b [ k ] * b [ k ] * b [ k ] * b [ k ] * b [ k ] * b [ k ] * b [ k ] * b [ k ] *"],"references":["import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; long X = sc . nextLong ( ) ; long [ ] positionArr = new long [ N ] ; long [ ] cumulativeSum = new long [ N + 1 ] ; for ( int i = 0 ; i < N ; i ++ ) { positionArr [ i ] = sc . nextLong ( ) ; cumulativeSum [ i + 1 ] = cumulativeSum [ i ] + positionArr [ i ] ; } long sum = X * N + 5 * cumulativeSum [ N ] ; for ( int i = 1 ; i < N ; i ++ ) { long cost = X * i + 5 * ( cumulativeSum [ N ] - cumulativeSum [ N - i ] ) ; for ( int j = 5 , k = N - i ; k >= 0 ; j += 2 , k -= i ) { if ( cost > sum ) { break ; } cost += j * ( cumulativeSum [ k ] - cumulativeSum [ Math . max ( k - i , 0 ) ] ) ; } sum = Math . min ( sum , cost ) ; } System . out . println ( sum + X * N ) ; } }","import java . io . * ; import java . util . * ; public class Main { static final Reader in = new Reader ( ) ; public static void main ( String [ ] args ) { int n = in . nextInt ( ) ; long x = in . nextInt ( ) , ans = Long . MAX_VALUE ; long [ ] ps = new long [ n + 1 ] ; for ( int i = 0 ; i < n ; ++ i ) ps [ i + 1 ] = ps [ i ] + in . nextInt ( ) ; for ( int i = 1 ; i <= n ; ++ i ) { long ca = 2 * ( ps [ n ] - ps [ n - i ] ) + i * x ; for ( int j = 0 ; n - i * j > 0 ; ++ j ) { long b = ( 2 * j + 3 ) * ( ps [ n - i * j ] - ps [ Math . max ( n - i * ( j + 1 ) , 0 ) ] ) ; if ( Long . MAX_VALUE - b < ca ) { ca = Long . MAX_VALUE ; break ; } ca += b ; } ans = Math . min ( ca , ans ) ; } System . out . println ( ans + n * x ) ; } static class Reader { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st ; String next ( ) { while ( st == null || ! st . hasMoreTokens ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( Exception e ) { } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } } }","import java . util . * ; public class Main { int INF = Integer . MAX_VALUE ; public static void main ( String [ ] args ) { new Main ( ) . solve ( ) ; } void solve ( ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; long X = sc . nextLong ( ) ; long [ ] x = new long [ N ] ; long [ ] xsum = new long [ N + 1 ] ; for ( int i = 0 ; i < N ; i ++ ) { x [ i ] = sc . nextInt ( ) ; xsum [ i + 1 ] = xsum [ i ] + x [ i ] ; } long ans = X * N + 5 * xsum [ N ] ; for ( int i = 1 ; i < N ; i ++ ) { long cost = X * i + 5 * ( xsum [ N ] - xsum [ N - i ] ) ; for ( int j = 5 , k = N - i ; k >= 0 ; j += 2 , k -= i ) { if ( cost > ans ) { break ; } cost += j * ( xsum [ k ] - xsum [ Math . max ( k - i , 0 ) ] ) ; } ans = Math . min ( ans , cost ) ; } System . out . println ( ans + N * X ) ; } }","import java . math . BigInteger ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; long e = sc . nextLong ( ) ; long [ ] x = new long [ n ] ; long [ ] xsum = new long [ n + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) { x [ i ] = sc . nextLong ( ) ; xsum [ i + 1 ] = xsum [ i ] + x [ i ] ; } sc . close ( ) ; BigInteger ans = BigInteger . valueOf ( Long . MAX_VALUE ) ; for ( int i = 1 ; i <= n ; i ++ ) { BigInteger mans = BigInteger . ZERO ; int pos = 0 ; int count = 0 ; while ( pos < n ) { int mcount = count == 0 ? 1 : count ; if ( n - pos >= i ) { long mval = ( xsum [ n - pos ] - xsum [ n - pos - i ] ) * ( 2 * mcount + 3 ) ; mans = mans . add ( BigInteger . valueOf ( mval ) ) ; count ++ ; pos += i ; } else { long mval = xsum [ n - pos ] * ( 2 * mcount + 3 ) ; mans = mans . add ( BigInteger . valueOf ( mval ) ) ; pos = n ; } } mans = mans . add ( BigInteger . valueOf ( ( n + i ) * e ) ) ; ans = ans . min ( mans ) ; } System . out . println ( ans . toString ( ) ) ; } }","import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; long x = sc . nextLong ( ) ; long [ ] a = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = sc . nextLong ( ) ; long [ ] psum = new long [ n ] ; long sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += a [ i ] ; psum [ i ] = sum ; } long res = Long . MAX_VALUE ; label : for ( int i = 1 ; i < n ; i ++ ) { long t = i * x ; for ( int j = 0 ; j * i < n ; j ++ ) { long pres = psum [ n - 1 - i * j ] - ( ( n - 1 - i * j - i ) < 0 ? 0 : psum [ n - 1 - i * j - i ] ) ; long coef = ( j == 0 ? 5 : 2 * j + 3 ) ; if ( 63 <= ( Math . log ( pres ) + Math . log ( coef ) ) \/ Math . log ( 2 ) ) continue label ; if ( ( Long . MAX_VALUE - t ) < coef * pres ) continue label ; t += coef * pres ; } res = Math . min ( res , t ) ; } res += n * x ; pl ( res ) ; } static void pl ( Object o ) { System . out . println ( o ) ; } }"],"bleu":0.3115694282014051,"rouge_l":0.39993158349989494}
{"id":84,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; out . println ( Math . min ( a , b ) ) ; out . flush ( ) ; } static int l_min ( int [ ] a ) { Arrays . sort ( a ) ; return a [ 0 ] ; } static int l_max ( int [ ] a ) { int l = a . length ; Arrays . sort ( a ) ; return a [ l - 1 ] ; } public static PrintWriter out ; public static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = Integer . parseInt ( sc . next ( ) ) ; int b = Integer . parseInt ( sc . next ( ) ) ; int h = Integer . parseInt ( sc . next ( ) ) ; System . out . println ( ( a + b ) * h \/ 2 ) ; } }","import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . InputMismatchException ; import java . io . IOException ; import java . io . InputStream ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; FastScanner in = new FastScanner ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; TaskA solver = new TaskA ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class TaskA { public void solve ( int testNumber , FastScanner in , PrintWriter out ) { int a = in . nextInt ( ) ; int b = in . nextInt ( ) ; int c = in . nextInt ( ) ; out . println ( ( a + b ) * c \/ 2 ) ; } } static class FastScanner { private InputStream in ; private byte [ ] buffer = new byte [ 1024 ] ; private int bufPointer ; private int bufLength ; public FastScanner ( InputStream in ) { this . in = in ; } private int readByte ( ) { if ( bufPointer >= bufLength ) { if ( bufLength == - 1 ) throw new InputMismatchException ( ) ; bufPointer = 0 ; try { bufLength = in . read ( buffer ) ; } catch ( IOException e ) { throw new InputMismatchException ( ) ; } if ( bufLength <= 0 ) return - 1 ; } return buffer [ bufPointer ++ ] ; } private static boolean isSpaceChar ( int c ) { return c == ' ▁ ' || c == ' \\n ' || c == ' \\r ' || c == ' \\t ' || c == - 1 ; } public int nextInt ( ) { int n = 0 ; int b = readByte ( ) ; while ( isSpaceChar ( b ) ) b = readByte ( ) ; boolean minus = ( b == ' - ' ) ; if ( minus ) b = readByte ( ) ; while ( b >= '0' && b <= '9' ) { n *= 10 ; n += b - '0' ; b = readByte ( ) ; } if ( ! isSpaceChar ( b ) ) throw new NumberFormatException ( ) ; return minus ? - n : n ; } } }","import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int h = sc . nextInt ( ) ; int ans = ( a + b ) * h \/ 2 ; System . out . println ( ans ) ; } }","import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . lang . reflect . Array ; import java . util . Arrays ; import java . util . ArrayList ; import java . util . Collections ; import java . util . StringTokenizer ; import java . io . IOException ; import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . InputStream ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; Task solver = new Task ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class Task { public void solve ( int testNumber , InputReader in , PrintWriter out ) { int a = in . nextInt ( ) ; int b = in . nextInt ( ) ; int h = in . nextInt ( ) ; out . println ( ( a + b ) * h \/ 2 ) ; } } static class InputReader { public BufferedReader reader ; public StringTokenizer tokenizer ; public InputReader ( InputStream stream ) { reader = new BufferedReader ( new InputStreamReader ( stream ) , 32768 ) ; tokenizer = null ; } public String next ( ) { while ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } } }","import java . io . PrintWriter ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; int A = Integer . parseInt ( sc . next ( ) ) ; int B = Integer . parseInt ( sc . next ( ) ) ; int C = Integer . parseInt ( sc . next ( ) ) ; out . println ( ( A + B ) * C \/ 2 ) ; out . flush ( ) ; } }"],"bleu":0.48523848915763507,"rouge_l":0.6393993185888742}
{"id":85,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { ans += a [ i ] ; } out . println ( ans ) ; } out . close ( ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } }"],"references":["import java . util . Arrays ; import java . util . Comparator ; import java . util . Scanner ; public class Main implements Runnable { public static void main ( String [ ] args ) { new Thread ( null , new Main ( ) , \" \" , Runtime . getRuntime ( ) . maxMemory ( ) ) . start ( ) ; } public void run ( ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; boolean [ ] [ ] a = new boolean [ n ] [ n ] ; for ( int i = 0 ; i < n ; ++ i ) { String s = sc . next ( ) ; for ( int j = 0 ; j < n ; ++ j ) { a [ i ] [ n - 1 - j ] = s . charAt ( j ) == ' o ' ; } } int cnt = 0 ; for ( int i = 0 ; i < n ; ++ i ) { for ( int j = 0 ; j < n ; ++ j ) { if ( a [ i ] [ j ] ) continue ; if ( ! a [ i ] [ j ] ) { ++ cnt ; for ( int k = j ; k < n ; ++ k ) { a [ i ] [ k ] = true ; } for ( int k = 0 ; i + 1 < n && k <= j ; ++ k ) { a [ i + 1 ] [ k ] = true ; } } } } System . out . println ( cnt ) ; } static void tr ( Object ... objects ) { System . out . println ( Arrays . deepToString ( objects ) ) ; } }","import java . util . * ; public class Main { static char [ ] [ ] g ; static int n ; static void p ( int r , int c ) { for ( int i = 0 ; i <= c ; i ++ ) g [ r ] [ i ] = ' o ' ; if ( r + 1 < n ) for ( int i = c ; i < n ; i ++ ) g [ r + 1 ] [ i ] = ' o ' ; } public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; n = sc . nextInt ( ) ; g = new char [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { String str = sc . next ( ) ; for ( int j = 0 ; j < n ; j ++ ) g [ i ] [ j ] = str . charAt ( j ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = n - 1 ; j >= 0 ; j -- ) { if ( g [ i ] [ j ] == ' . ' ) { ans ++ ; p ( i , j ) ; } } } System . out . println ( ans ) ; } }","import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; char [ ] [ ] field = new char [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { field [ i ] = sc . next ( ) . toCharArray ( ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( field [ i ] [ n - 1 - j ] == ' . ' ) { count ++ ; if ( i != n - 1 ) { for ( int k = n - 1 - j ; k < n ; k ++ ) { field [ i + 1 ] [ k ] = ' o ' ; } } break ; } } } System . out . println ( count ) ; } }"],"bleu":0.4498621717091711,"rouge_l":0.5774947531152257}
{"id":86,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter pw = new PrintWriter ( System . out ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int N = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int [ ] b = new int [ M ] ; for ( int i = 0 ; i < M ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int [ ] [ ] dp = new int [ M ] [ M ] ; for ( int i = 0 ; i < M ; i ++ ) { for ( int j = 0 ; j < M ; j ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { if ( a [ k ] > a [ k ] [ k ] ) { dp [ i ] [ j ] [ k ] = Math . max ( dp [ i ] [ j ] [ k ] , dp [ i ] [ k ] [ k ] [ k ] ) ; } } } } } } } } } pw . println ( dp [ M - 1 ] [ M - 1 ] ) ; pw . close ( ) ; } }"],"references":["import java . util . * ; public class Main { private class Section { int l , r , v ; public Section ( int now , int t , int v ) { this . l = now ; this . r = now + t ; this . v = v ; } public double getMaxV ( double t ) { if ( t < l ) { return v + ( l - t ) ; } else if ( r < t ) { return v + ( t - r ) ; } else { return v ; } } } public void main ( Scanner sc ) { int n = sc . nextInt ( ) ; int t [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { t [ i ] = sc . nextInt ( ) ; } Section secs [ ] = new Section [ n + 2 ] ; int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { int v = sc . nextInt ( ) ; secs [ i ] = new Section ( sum , t [ i - 1 ] , v ) ; sum += t [ i - 1 ] ; } secs [ 0 ] = new Section ( 0 , 0 , 0 ) ; secs [ n + 1 ] = new Section ( sum , 0 , 0 ) ; double ans = 0.0 ; for ( double now = 0.0 ; now <= sum - 0.5 ; now += 0.5 ) { double v1 = secs [ 0 ] . getMaxV ( now ) ; double v2 = secs [ 0 ] . getMaxV ( now + 0.5 ) ; for ( int i = 1 ; i < n + 2 ; i ++ ) { v1 = Math . min ( v1 , secs [ i ] . getMaxV ( now ) ) ; v2 = Math . min ( v2 , secs [ i ] . getMaxV ( now + 0.5 ) ) ; } ans += ( v1 + v2 ) * 0.25 ; } System . out . println ( ans ) ; } public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; new Main ( ) . main ( sc ) ; sc . close ( ) ; } }","import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) ; int [ ] t = new int [ n + 2 ] , v = new int [ n + 2 ] ; int tSum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { t [ i ] = in . nextInt ( ) * 2 ; tSum += t [ i ] ; } for ( int i = 1 ; i <= n ; i ++ ) { v [ i ] = in . nextInt ( ) ; } double [ ] vMax = new double [ tSum + 1 ] ; int idx = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 0 ; j < t [ i ] ; j ++ ) { vMax [ idx + j ] = v [ i ] ; } idx += t [ i ] ; } idx = 0 ; for ( int i = 0 ; i < n ; i ++ ) { double max = v [ i ] ; int tmp = idx + 1 ; while ( max < vMax [ tmp ] ) { max += 0.5 ; vMax [ tmp ++ ] = max ; if ( vMax . length <= tmp ) break ; } idx += t [ i + 1 ] ; } idx = tSum + 1 ; for ( int i = n + 1 ; i > 0 ; i -- ) { double max = v [ i ] ; int tmp = idx - 1 ; while ( max < vMax [ tmp ] ) { vMax [ tmp -- ] = max ; max += 0.5 ; if ( tmp < 0 ) break ; } idx -= t [ i - 1 ] ; } double ans = 0 , now = 0 ; for ( int i = 0 ; i < vMax . length - 1 ; i ++ ) { ans += now * 0.5 ; if ( vMax [ i ] < vMax [ i + 1 ] ) { ans += 0.125 ; now += 0.5 ; } if ( vMax [ i + 1 ] < vMax [ i ] ) { ans -= 0.125 ; now -= 0.5 ; } } System . out . println ( ans ) ; } }","import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int N = scanner . nextInt ( ) ; int [ ] t = new int [ N + 1 ] ; int [ ] v = new int [ N + 2 ] ; for ( int i = 0 ; i < N ; i ++ ) t [ i + 1 ] = scanner . nextInt ( ) * 2 + t [ i ] ; for ( int i = 0 ; i < N ; i ++ ) v [ i + 1 ] = scanner . nextInt ( ) * 2 ; long dist = 0 ; long cv = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { for ( int j = t [ i - 1 ] + 1 ; j <= t [ i ] ; j ++ ) { long f = v [ i ] ; for ( int k = 0 ; k < i ; k ++ ) f = Math . min ( f , v [ k ] + j - t [ k ] ) ; for ( int k = i + 1 ; k <= N + 1 ; k ++ ) f = Math . min ( f , v [ k ] + t [ k - 1 ] - j ) ; dist += cv + f ; cv = f ; } } System . out . println ( dist \/ 8.d ) ; } }","import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; double [ ] t = new double [ N ] ; double [ ] v = new double [ N ] ; for ( int i = 0 ; i < N ; i ++ ) t [ i ] = sc . nextDouble ( ) ; for ( int i = 0 ; i < N ; i ++ ) v [ i ] = sc . nextDouble ( ) ; sc . close ( ) ; v [ N - 1 ] = Math . min ( v [ N - 1 ] , t [ N - 1 ] ) ; for ( int i = N - 2 ; i >= 0 ; i -- ) { v [ i ] = Math . min ( v [ i ] , v [ i + 1 ] + t [ i ] ) ; } double ans = 0 ; double current = 0 ; for ( int i = 0 ; i < N ; i ++ ) { double next = i == N - 1 ? 0 : v [ i ] < v [ i + 1 ] ? v [ i ] : v [ i + 1 ] ; double maxV = 0 ; double previous = current ; if ( current + t [ i ] <= next ) { maxV = current + t [ i ] ; current = maxV ; } else { maxV = Math . min ( v [ i ] , ( current + next + t [ i ] ) \/ 2 ) ; ans -= ( maxV - next ) * ( maxV - next ) \/ 2 ; current = next ; } ans += maxV * t [ i ] ; ans -= ( maxV - previous ) * ( maxV - previous ) \/ 2 ; } System . out . println ( ans ) ; } }","import java . util . * ; class Main { public static void main ( String [ ] $ ) { Scanner s = new Scanner ( System . in ) ; int n = s . nextInt ( ) ; int [ ] t = new int [ n ] ; int [ ] v = new int [ n + 1 ] ; Arrays . setAll ( t , i -> s . nextInt ( ) ) ; for ( int i = 0 ; i < n ; ++ i ) v [ i ] = s . nextInt ( ) ; for ( int i = n - 1 ; i >= 0 ; -- i ) v [ i ] = Math . min ( v [ i ] , v [ i + 1 ] + t [ i ] ) ; Arrays . parallelPrefix ( t , Integer :: sum ) ; int cv = 0 , i = 0 , d = 0 ; for ( int T = 0 ; T < t [ n - 1 ] ; ++ T ) { int remain = t [ i ] - T ; if ( cv - v [ i + 1 ] == remain - 1 && cv < v [ i ] ) { d += cv * 4 + 1 ; } else { d += cv * 2 ; if ( cv - v [ i + 1 ] == remain ) cv -- ; else if ( cv + 1 <= v [ i ] ) cv ++ ; d += cv * 2 ; } if ( remain == 1 ) ++ i ; } System . out . println ( d \/ 4.0 ) ; } }"],"bleu":0.3828914361142578,"rouge_l":0.5201443816024356}
{"id":87,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { st = new StringTokenizer ( br . readLine ( ) ) ; a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } Arrays . sort ( b ) ; long ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans += b [ i ] - b [ i ] ; } System . out . println ( ans ) ; } }"],"references":["import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int M = sc . nextInt ( ) ; int l [ ] = new int [ N ] ; int r [ ] = new int [ N ] ; int s [ ] = new int [ N ] ; int point [ ] = new int [ M ] ; int sum = 0 ; for ( int i = 0 ; i < N ; i ++ ) { l [ i ] = sc . nextInt ( ) - 1 ; r [ i ] = sc . nextInt ( ) - 1 ; s [ i ] = sc . nextInt ( ) ; sum += s [ i ] ; point [ l [ i ] ] += s [ i ] ; if ( r [ i ] != M - 1 ) { point [ r [ i ] + 1 ] -= s [ i ] ; } } int min = Integer . MAX_VALUE ; int temp = 0 ; for ( int i = 0 ; i < M ; i ++ ) { temp += point [ i ] ; min = Math . min ( min , temp ) ; } System . out . println ( sum - min ) ; } }","import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; Scanner in = new Scanner ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; C solver = new C ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class C { public void solve ( int testNumber , Scanner in , PrintWriter out ) { int n = in . nextInt ( ) , m = in . nextInt ( ) ; int all = 0 ; int [ ] dif = new int [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { int l = in . nextInt ( ) - 1 , r = in . nextInt ( ) - 1 , s = in . nextInt ( ) ; all += s ; dif [ l ] += s ; if ( r + 1 < m ) { dif [ r + 1 ] -= s ; } } int min = dif [ 0 ] ; int sum = dif [ 0 ] ; for ( int i = 1 ; i < m ; i ++ ) { min = Math . min ( min , sum = sum + dif [ i ] ) ; } out . println ( all - min ) ; } } }","import java . util . Scanner ; public class Main { static int N , M ; static int [ ] value ; static int sum ; static int min ; static int ruikei ; public static void main ( String [ ] args ) { scanAndSet ( ) ; min = value [ 0 ] ; ruikei += value [ 0 ] ; for ( int i = 1 ; i < M ; i ++ ) { ruikei += value [ i ] ; min = min > ruikei ? ruikei : min ; } System . out . println ( sum - min ) ; } public static void scanAndSet ( ) { Scanner scan = new Scanner ( System . in ) ; int a , b , score ; N = scan . nextInt ( ) ; M = scan . nextInt ( ) ; sum = 0 ; value = new int [ M + 1 ] ; for ( int i = 0 ; i < M + 1 ; i ++ ) value [ i ] = 0 ; for ( int i = 0 ; i < N ; i ++ ) { a = scan . nextInt ( ) ; b = scan . nextInt ( ) ; score = scan . nextInt ( ) ; value [ a - 1 ] += score ; value [ b ] -= score ; sum += score ; } scan . close ( ) ; } }","import java . util . * ; import static java . lang . System . * ; import static java . lang . Math . * ; public class Main { public static void main ( String [ ] $ ) { Scanner sc = new Scanner ( in ) ; int n = Integer . parseInt ( sc . next ( ) ) ; int m = Integer . parseInt ( sc . next ( ) ) ; int [ ] score = new int [ m + 2 ] ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int l = Integer . parseInt ( sc . next ( ) ) , r = Integer . parseInt ( sc . next ( ) ) , s = Integer . parseInt ( sc . next ( ) ) ; score [ l ] += s ; score [ r + 1 ] -= s ; sum += s ; } for ( int i = 1 ; i <= m ; i ++ ) { score [ i ] += score [ i - 1 ] ; } int ans = 0 ; for ( int i = 1 ; i <= m ; i ++ ) { ans = max ( ans , sum - score [ i ] ) ; } out . println ( ans ) ; } }","public class Main { private static java . util . Scanner scanner = new java . util . Scanner ( System . in ) ; public static void main ( String [ ] $ ) { int n = scanner . nextInt ( ) , m = scanner . nextInt ( ) , sum = 0 ; int [ ] a = new int [ m + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) { int l = scanner . nextInt ( ) - 1 , r = scanner . nextInt ( ) , s = scanner . nextInt ( ) ; a [ l ] += s ; a [ r ] -= s ; sum += s ; } java . util . Arrays . parallelPrefix ( a , Integer :: sum ) ; System . out . println ( sum - java . util . Arrays . stream ( a ) . limit ( m ) . min ( ) . getAsInt ( ) ) ; } }"],"bleu":0.5672493794754802,"rouge_l":0.6052835051546391}
{"id":88,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; out . println ( n < 1000 ? \" ABC \" : \" ABD \" ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . util . * ; public class Main { static Scanner sc = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { int D = sc . nextInt ( ) ; String S = \" \" ; switch ( D ) { case 22 : S = \" Christmas ▁ Eve ▁ Eve ▁ Eve \" ; break ; case 23 : S = \" Christmas ▁ Eve ▁ Eve \" ; break ; case 24 : S = \" Christmas ▁ Eve \" ; break ; case 25 : S = \" Christmas \" ; break ; } System . out . println ( S ) ; } }","import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { PrintWriter out = new PrintWriter ( System . out ) ; InputStreamScanner in = new InputStreamScanner ( System . in ) ; new Main ( ) . solve ( in , out ) ; out . flush ( ) ; } private void solve ( InputStreamScanner in , PrintWriter out ) { int d = in . nextInt ( ) ; out . print ( \" Christmas \" ) ; for ( int i = 25 ; i > d ; i -- ) { out . print ( \" ▁ Eve \" ) ; } out . println ( ) ; } static class InputStreamScanner { private InputStream in ; private byte [ ] buf = new byte [ 1024 ] ; private int len = 0 ; private int off = 0 ; InputStreamScanner ( InputStream in ) { this . in = in ; } String next ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( int b = skip ( ) ; ! isSpace ( b ) ; ) { sb . appendCodePoint ( b ) ; b = read ( ) ; } return sb . toString ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } char nextChar ( ) { return ( char ) skip ( ) ; } int skip ( ) { for ( int b ; ( b = read ( ) ) != - 1 ; ) { if ( ! isSpace ( b ) ) { return b ; } } return - 1 ; } private boolean isSpace ( int c ) { return c < 33 || c > 126 ; } private int read ( ) { if ( len == - 1 ) { throw new InputMismatchException ( \" End ▁ of ▁ Input \" ) ; } if ( off >= len ) { off = 0 ; try { len = in . read ( buf ) ; } catch ( IOException e ) { throw new InputMismatchException ( e . getMessage ( ) ) ; } if ( len <= 0 ) { return - 1 ; } } return buf [ off ++ ] ; } } }","import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; Scanner sc = new Scanner ( System . in ) ; int d = sc . nextInt ( ) ; if ( d == 25 ) System . out . println ( \" Christmas \" ) ; else if ( d == 24 ) System . out . println ( \" Christmas ▁ Eve \" ) ; else if ( d == 23 ) System . out . println ( \" Christmas ▁ Eve ▁ Eve \" ) ; else if ( d == 22 ) System . out . println ( \" Christmas ▁ Eve ▁ Eve ▁ Eve \" ) ; } }","import java . util . HashMap ; import java . util . Map ; import java . util . Scanner ; public class Main { private static final Map < Integer , String > MAPPING = new HashMap < Integer , String > ( ) { { put ( 22 , \" Christmas ▁ Eve ▁ Eve ▁ Eve \" ) ; put ( 23 , \" Christmas ▁ Eve ▁ Eve \" ) ; put ( 24 , \" Christmas ▁ Eve \" ) ; put ( 25 , \" Christmas \" ) ; } } ; public static String process ( TestCase testCase ) { final int D = testCase . D ; return MAPPING . get ( D ) ; } public static void main ( String [ ] args ) { TestCase testCase = readFromInput ( ) ; final String result = process ( testCase ) ; output ( result ) ; } private static TestCase readFromInput ( ) { Scanner sc = new Scanner ( System . in ) ; int D = sc . nextInt ( ) ; sc . close ( ) ; return new TestCase ( D ) ; } private static void output ( String result ) { System . out . println ( result ) ; } public static class TestCase { final int D ; public TestCase ( int D ) { this . D = D ; } } }","import java . io . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader bf = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int D = Integer . parseInt ( bf . readLine ( ) ) ; String str ; switch ( D ) { case 25 : str = \" Christmas \" ; break ; case 24 : str = \" Christmas ▁ Eve \" ; break ; case 23 : str = \" Christmas ▁ Eve ▁ Eve \" ; break ; default : str = \" Christmas ▁ Eve ▁ Eve ▁ Eve \" ; } System . out . println ( str ) ; } }"],"bleu":0.6429038159203629,"rouge_l":0.5839458765801158}
{"id":89,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; out . println ( a > b ? \" ABC \" : \" ABD \" ) ; out . flush ( ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; String turn = \" Ant \" ; while ( n > 0 ) { if ( turn . equals ( \" Ant \" ) ) { n -= a ; turn = \" Bug \" ; } else { n -= b ; turn = \" Ant \" ; } } if ( turn . equals ( \" Ant \" ) ) { System . out . println ( \" Bug \" ) ; } else { System . out . println ( \" Ant \" ) ; } } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . UncheckedIOException ; import java . util . StringTokenizer ; class Main { public static void main ( String [ ] args ) { SC sc = new SC ( System . in ) ; int N = sc . nextInt ( ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; N = N % ( a + b ) ; if ( N == 0 ) { pl ( \" Bug \" ) ; } else if ( N <= a && N > 0 ) { pl ( \" Ant \" ) ; } else { pl ( \" Bug \" ) ; } } static class SC { private BufferedReader reader = null ; private StringTokenizer tokenizer = null ; public SC ( InputStream in ) { reader = new BufferedReader ( new InputStreamReader ( in ) ) ; } public String next ( ) { if ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } } return tokenizer . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } public long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } public double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } public String nextLine ( ) { try { return reader . readLine ( ) ; } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } } } public static void pl ( Object o ) { System . out . println ( o ) ; } public static void p ( Object o ) { System . out . print ( o ) ; } public static boolean isPrime ( int a ) { if ( a < 4 ) { if ( a == 2 || a == 3 ) { return true ; } else { return false ; } } else { for ( int j = 2 ; j * j <= a ; j ++ ) { if ( a % j == 0 ) { return false ; } if ( a % j != 0 && ( j + 1 ) * ( j + 1 ) > a ) { return true ; } } return true ; } } }","import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int A = sc . nextInt ( ) ; int B = sc . nextInt ( ) ; int count = 0 ; boolean aflag = false ; boolean bflag = false ; while ( true ) { if ( count % 2 == 0 ) { N -= A ; if ( N <= 0 ) { aflag = true ; break ; } } else { N -= B ; if ( N <= 0 ) { bflag = true ; break ; } } count ++ ; } if ( aflag ) { System . out . println ( \" Ant \" ) ; } if ( bflag ) { System . out . println ( \" Bug \" ) ; } } }","import java . util . * ; import java . awt . * ; import java . awt . geom . * ; import static java . lang . System . * ; import static java . lang . Math . * ; public class Main { public static void main ( String [ ] $ ) { Scanner sc = new Scanner ( in ) ; int n = sc . nextInt ( ) , a = sc . nextInt ( ) , b = sc . nextInt ( ) ; String ans = \" \" ; if ( n <= a ) ans = \" Ant \" ; else if ( a < n && n - a <= b ) ans = \" Bug \" ; else if ( n % ( a + b ) == 0 ) ans = \" Bug \" ; else if ( n % ( a + b ) <= a ) ans = \" Ant \" ; else ans = \" Bug \" ; out . println ( ans ) ; } }","import java . util . Scanner ; public class Main { static Scanner s = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { int n = s . nextInt ( ) , take [ ] = { s . nextInt ( ) , s . nextInt ( ) } ; for ( int i = 0 ; n > 0 ; i ++ ) { n -= take [ i % 2 ] ; if ( n <= 0 ) { System . out . println ( i % 2 == 0 ? \" Ant \" : \" Bug \" ) ; return ; } } } }"],"bleu":0.6479891754608235,"rouge_l":0.665151638676015}
{"id":90,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; out . println ( a > b ? \" ABC \" : \" ABD \" ) ; out . flush ( ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . UncheckedIOException ; import java . util . Scanner ; import java . util . StringTokenizer ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . nextLine ( ) ; String [ ] bu = s . split ( \" ▁ \" ) ; StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < bu . length - 1 ; i ++ ) { if ( bu [ i ] . charAt ( 0 ) == ' L ' ) { sb . append ( \" < ▁ \" ) ; } else if ( bu [ i ] . charAt ( 0 ) == ' R ' ) { sb . append ( \" > ▁ \" ) ; } else if ( bu [ i ] . charAt ( 0 ) == ' A ' ) { sb . append ( \" A ▁ \" ) ; } } if ( bu [ bu . length - 1 ] . charAt ( 0 ) == ' L ' ) { sb . append ( \" < \" ) ; } else if ( bu [ bu . length - 1 ] . charAt ( 0 ) == ' R ' ) { sb . append ( \" > \" ) ; } else if ( bu [ bu . length - 1 ] . charAt ( 0 ) == ' A ' ) { sb . append ( \" A \" ) ; } System . out . println ( sb . toString ( ) ) ; } static class SC { private BufferedReader reader = null ; private StringTokenizer tokenizer = null ; public SC ( InputStream in ) { reader = new BufferedReader ( new InputStreamReader ( in ) ) ; } public String next ( ) { if ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } } return tokenizer . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } public long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } } }","import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; String [ ] str = in . nextLine ( ) . split ( \" ▁ \" ) ; int len = str . length ; StringBuffer sb = new StringBuffer ( ) ; for ( int i = 0 ; i < len ; i ++ ) { char a = str [ i ] . charAt ( 0 ) ; char out = 0 ; if ( a == ' L ' ) { out = ' < ' ; } else if ( a == ' R ' ) { out = ' > ' ; } else if ( a == ' A ' ) { out = ' A ' ; } if ( i > 0 ) { sb . append ( \" ▁ \" ) ; } sb . append ( out ) ; } System . out . println ( sb . toString ( ) ) ; } }","import java . util . Scanner ; public class Main { static Scanner s = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { System . out . println ( s . nextLine ( ) . replaceAll ( \" Left \" , \" < \" ) . replaceAll ( \" Right \" , \" > \" ) . replaceAll ( \" AtCoder \" , \" A \" ) ) ; } }","import java . util . * ; import static java . lang . System . * ; public class Main { public static void main ( String [ ] $ ) { Scanner sc = new Scanner ( in ) ; Queue < String > q = new ArrayDeque < > ( ) ; String [ ] s = sc . nextLine ( ) . split ( \" ▁ \" ) ; for ( int i = 0 ; i < s . length ; i ++ ) { char c = s [ i ] . charAt ( 0 ) ; char t ; if ( c == ' R ' ) t = ' > ' ; else if ( c == ' L ' ) t = ' < ' ; else t = ' A ' ; out . print ( t ) ; if ( i < s . length - 1 ) out . print ( \" ▁ \" ) ; } out . println ( ) ; } }","import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { final Scanner sc = new Scanner ( System . in ) ; String s = sc . nextLine ( ) ; String ans = \" \" ; for ( String ss : s . split ( \" ▁ \" ) ) { if ( ss . equals ( \" Left \" ) ) { ans += \" < ▁ \" ; } else if ( ss . equals ( \" Right \" ) ) { ans += \" > ▁ \" ; } else { ans += \" A ▁ \" ; } } System . out . println ( ans . trim ( ) ) ; } }"],"bleu":0.5192342295660212,"rouge_l":0.5974180145422168}
{"id":91,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; out . println ( a > b ? \" ABC \" : \" ABD \" ) ; out . flush ( ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; String X = sc . next ( ) ; if ( X . charAt ( 0 ) == X . charAt ( 1 ) && X . charAt ( 1 ) == X . charAt ( 2 ) ) { System . out . println ( \" Yes \" ) ; } else if ( X . charAt ( 1 ) == X . charAt ( 2 ) && X . charAt ( 2 ) == X . charAt ( 3 ) ) { System . out . println ( \" Yes \" ) ; } else { System . out . println ( \" No \" ) ; } } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . OutputStream ; import java . io . PrintWriter ; import java . util . StringTokenizer ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; Task solver = new Task ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class Task { public void solve ( int testNumber , InputReader in , PrintWriter out ) { String N = in . next ( ) ; String ans = \" No \" ; if ( N . charAt ( 1 ) == N . charAt ( 2 ) && ( N . charAt ( 0 ) == N . charAt ( 1 ) || N . charAt ( 2 ) == N . charAt ( 3 ) ) ) { ans = \" Yes \" ; } out . println ( ans ) ; } } static class InputReader { public BufferedReader reader ; public StringTokenizer tokenizer ; public InputReader ( InputStream stream ) { reader = new BufferedReader ( new InputStreamReader ( stream ) , 32768 ) ; tokenizer = null ; } public String next ( ) { while ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } } }","import java . util . * ; public class Main { public static void main ( String [ ] args ) { A ( ) ; } public static void A ( ) { Scanner sc = new Scanner ( System . in ) ; Integer n = sc . nextInt ( ) ; sc . close ( ) ; String num = n . toString ( ) ; if ( num . charAt ( 1 ) != num . charAt ( 2 ) ) { System . out . println ( \" No \" ) ; return ; } char mid = num . charAt ( 1 ) ; if ( mid == num . charAt ( 0 ) || mid == num . charAt ( 3 ) ) { System . out . println ( \" Yes \" ) ; } else System . out . println ( \" No \" ) ; } }","import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; Scanner in = new Scanner ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; TaskA solver = new TaskA ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class TaskA { public void solve ( int testNumber , Scanner in , PrintWriter out ) { String str = in . nextLine ( ) ; if ( str . contains ( \"000\" ) ) { out . print ( \" Yes \" ) ; return ; } for ( int i = 111 ; i < 1000 ; i += 111 ) { if ( str . contains ( String . valueOf ( i ) ) ) { out . print ( \" Yes \" ) ; return ; } } out . print ( \" No \" ) ; } } }","import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int cnt = 0 ; int pre = 0 ; while ( N > 0 ) { if ( N % 10 == pre ) cnt ++ ; else cnt = 1 ; if ( cnt == 3 ) { System . out . println ( \" Yes \" ) ; return ; } pre = N % 10 ; N \/= 10 ; } System . out . println ( \" No \" ) ; } }"],"bleu":0.47957083380561194,"rouge_l":0.5841961968926263}
{"id":92,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } Arrays . sort ( b ) ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans += b [ i ] ; } System . out . println ( ans ) ; } }"],"references":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( sc . hasNextInt ( ) ) { int N = sc . nextInt ( ) ; int K = sc . nextInt ( ) ; Map < Integer , Integer > map = new HashMap < > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { int x = sc . nextInt ( ) ; if ( ! map . containsKey ( x ) ) { map . put ( x , 1 ) ; } else { map . put ( x , map . get ( x ) + 1 ) ; } } List < Integer > list = new ArrayList < > ( map . values ( ) ) ; Collections . sort ( list ) ; int ans = 0 ; for ( int i = 0 ; i < list . size ( ) - K ; i ++ ) { ans += list . get ( i ) ; } System . out . println ( ans ) ; } } }","import java . io . PrintWriter ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Comparator ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { new Main ( ) . solve ( new Scanner ( System . in ) , new PrintWriter ( System . out ) ) ; } private void solve ( Scanner in , PrintWriter out ) { int n = in . nextInt ( ) , k = in . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; ++ i ) { a [ i ] = in . nextInt ( ) ; } Arrays . sort ( a ) ; ArrayList < Integer > segs = new ArrayList < > ( ) ; int size = 1 ; for ( int i = 1 ; i < n ; ++ i ) { if ( a [ i ] == a [ i - 1 ] ) { ++ size ; } else { segs . add ( size ) ; size = 1 ; } } segs . add ( size ) ; segs . sort ( new Comparator < Integer > ( ) { @ Override public int compare ( Integer a , Integer b ) { return a - b ; } } ) ; int ans = 0 ; for ( int i = 0 ; i < segs . size ( ) - k ; ++ i ) { ans += segs . get ( i ) ; } System . out . println ( ans ) ; } }","import java . util . List ; import java . util . ArrayList ; import java . util . Collections ; import java . util . HashMap ; import java . util . HashSet ; import java . util . Map ; import java . util . Scanner ; import java . util . Set ; import java . util . concurrent . BlockingQueue ; import java . util . concurrent . LinkedBlockingDeque ; public class Main { static Scanner sc = new Scanner ( System . in ) ; static char c ; public static void main ( String [ ] args ) throws Exception { int k = sc . nextInt ( ) ; int max = sc . nextInt ( ) ; int [ ] arr = new int [ k ] ; Map < Integer , Integer > m = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < arr . length ; i ++ ) { int number = sc . nextInt ( ) ; int count = m . getOrDefault ( number , 0 ) ; m . put ( number , count + 1 ) ; } List < int [ ] > list = new ArrayList < int [ ] > ( ) ; for ( int i : m . keySet ( ) ) list . add ( new int [ ] { i , m . get ( i ) } ) ; Collections . sort ( list , ( ( i1 , i2 ) -> ( i1 [ 1 ] - i2 [ 1 ] ) ) ) ; int count = 0 ; for ( int i = 0 ; i < list . size ( ) - max ; i ++ ) { count += list . get ( i ) [ 1 ] ; } System . out . println ( count ) ; } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Arrays ; import java . util . StringTokenizer ; public class Main { int n , k ; public static void main ( String args [ ] ) { new Main ( ) . run ( ) ; } void run ( ) { FastReader sc = new FastReader ( ) ; n = sc . nextInt ( ) ; k = sc . nextInt ( ) ; int [ ] counts = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { counts [ sc . nextInt ( ) - 1 ] ++ ; } Arrays . sort ( counts ) ; int ans = 0 ; for ( int i = 0 ; i < n - k ; i ++ ) { if ( counts [ i ] > 0 ) { ans += counts [ i ] ; } } System . out . println ( ans ) ; } static class FastReader { BufferedReader br ; StringTokenizer st ; public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }","import java . util . HashMap ; import java . util . List ; import java . util . Map ; import java . util . Scanner ; import java . util . stream . Collectors ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] array = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { int x = sc . nextInt ( ) ; array [ x - 1 ] ++ ; } Map < Integer , Integer > map = new HashMap < > ( ) ; for ( int i = 0 ; i < array . length ; i ++ ) { if ( array [ i ] == 0 ) continue ; map . put ( i , array [ i ] ) ; } int sum = 0 ; List < Integer > list = map . entrySet ( ) . stream ( ) . sorted ( ( e1 , e2 ) -> e2 . getValue ( ) - e1 . getValue ( ) ) . map ( e -> e . getValue ( ) ) . collect ( Collectors . toList ( ) ) ; for ( int i = 0 ; i < list . size ( ) ; i ++ ) { if ( i < k ) continue ; sum += list . get ( i ) ; } System . out . println ( sum ) ; } }"],"bleu":0.730826803163588,"rouge_l":0.6575033422459893}
{"id":93,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; out . println ( Math . min ( Math . abs ( a - b ) , Math . abs ( c - c ) ) ) ; out . close ( ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int ans = Math . max ( a * b , c * d ) ; System . out . println ( ans ) ; sc . close ( ) ; } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . OutputStream ; import java . io . PrintWriter ; import java . util . StringTokenizer ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; Task solver = new Task ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class Task { public void solve ( int testNumber , InputReader in , PrintWriter out ) { int A = in . nextInt ( ) ; int B = in . nextInt ( ) ; int C = in . nextInt ( ) ; int D = in . nextInt ( ) ; out . println ( A * B > C * D ? A * B : C * D ) ; } } static class InputReader { public BufferedReader reader ; public StringTokenizer tokenizer ; public InputReader ( InputStream stream ) { reader = new BufferedReader ( new InputStreamReader ( stream ) , 32768 ) ; tokenizer = null ; } public String next ( ) { while ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( ) ; } public char nextChar ( ) { return next ( ) . charAt ( 0 ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } public double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } } }","import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int ans = ( a * b >= c * d ) ? a * b : c * d ; System . out . print ( ans ) ; } }","import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Main main = new Main ( ) ; main . solve ( ) ; } void solve ( ) { Scanner sc = new Scanner ( System . in ) ; int h1 = Integer . parseInt ( sc . next ( ) ) ; int w1 = Integer . parseInt ( sc . next ( ) ) ; int h2 = Integer . parseInt ( sc . next ( ) ) ; int w2 = Integer . parseInt ( sc . next ( ) ) ; sc . close ( ) ; long n1 = h1 * w1 , n2 = h2 * w2 ; System . out . println ( n1 > n2 ? n1 : n2 ) ; } }","import java . util . Scanner ; public class Main { private static Scanner sc = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { System . out . println ( Math . max ( sc . nextInt ( ) * sc . nextInt ( ) , sc . nextInt ( ) * sc . nextInt ( ) ) ) ; } }"],"bleu":0.5990103975115972,"rouge_l":0.741450665668715}
{"id":94,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; out . println ( a > b ? a : b ) ; out . flush ( ) ; } static int l_min ( int [ ] a ) { Arrays . sort ( a ) ; return a [ 0 ] ; } static int l_max ( int [ ] a ) { int l = a . length ; Arrays . sort ( a ) ; return a [ l - 1 ] ; } static int l_max ( int [ ] a ) { int l = a . length ; Arrays . sort ( a ) ; return a [ l - 1 ] ; } public static PrintWriter out ; public static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long a = sc . nextLong ( ) ; long b = sc . nextLong ( ) ; System . out . println ( ( b - a % b ) % b ) ; } }","import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . io . PrintStream ; import java . util . InputMismatchException ; import java . io . IOException ; import java . io . InputStream ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; FastScanner in = new FastScanner ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; TaskC solver = new TaskC ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class TaskC { public void solve ( int testNumber , FastScanner in , PrintWriter out ) { int a = in . nextInt ( ) ; int b = in . nextInt ( ) ; System . out . println ( a % b == 0 ? 0 : b - a % b ) ; } } static class FastScanner { private InputStream in ; private byte [ ] buffer = new byte [ 1024 ] ; private int bufPointer ; private int bufLength ; public FastScanner ( InputStream in ) { this . in = in ; this . bufPointer = 0 ; this . bufLength = 0 ; } private int readByte ( ) { if ( bufPointer >= bufLength ) { if ( bufLength == - 1 ) throw new InputMismatchException ( ) ; bufPointer = 0 ; try { bufLength = in . read ( buffer ) ; } catch ( IOException e ) { throw new InputMismatchException ( ) ; } if ( bufLength <= 0 ) return - 1 ; } return buffer [ bufPointer ++ ] ; } private static boolean isSpaceChar ( int c ) { return c == ' ▁ ' || c == ' \\n ' || c == ' \\r ' || c == ' \\t ' || c == - 1 ; } public int nextInt ( ) { int n = 0 ; int b = readByte ( ) ; while ( isSpaceChar ( b ) ) b = readByte ( ) ; boolean minus = ( b == ' - ' ) ; if ( minus ) b = readByte ( ) ; while ( b >= '0' && b <= '9' ) { n *= 10 ; n += b - '0' ; b = readByte ( ) ; } if ( ! isSpaceChar ( b ) ) throw new NumberFormatException ( ) ; return minus ? - n : n ; } } }","import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; System . out . println ( a % b == 0 ? \"0\" : b - a % b ) ; } static int l_min ( int [ ] a ) { Arrays . sort ( a ) ; return a [ 0 ] ; } static int l_max ( int [ ] a ) { int l = a . length ; Arrays . sort ( a ) ; return a [ l - 1 ] ; } public static PrintWriter out ; public static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }","import java . util . * ; import java . util . stream . * ; import static java . lang . System . * ; class Main { static Scanner sc = new Scanner ( System . in ) ; static int nextInt ( ) { return Integer . parseInt ( sc . next ( ) ) ; } static int [ ] nextIntArray ( int n ) { return IntStream . range ( 0 , n ) . map ( i -> nextInt ( ) ) . toArray ( ) ; } static int max ( int ... ar ) { Arrays . sort ( ar ) ; return ar [ ar . length - 1 ] ; } static int min ( int ... ar ) { Arrays . sort ( ar ) ; return ar [ 0 ] ; } static int maxInt = Integer . MAX_VALUE ; static int minInt = Integer . MIN_VALUE ; public static void main ( String [ ] args ) { int a = nextInt ( ) , b = nextInt ( ) ; out . println ( a % b == 0 ? 0 : b - ( a % b ) ) ; } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . OutputStream ; import java . io . PrintWriter ; import java . util . StringTokenizer ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; TaskA solver = new TaskA ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class TaskA { public void solve ( int testNumber , InputReader in , PrintWriter out ) { int a = in . nextInt ( ) ; int b = in . nextInt ( ) ; if ( a % b == 0 ) { out . println ( 0 ) ; } else { out . println ( b - a % b ) ; } } } static class InputReader { public BufferedReader reader ; public StringTokenizer tokenizer ; public InputReader ( InputStream stream ) { reader = new BufferedReader ( new InputStreamReader ( stream ) , 32768 ) ; tokenizer = null ; } public String next ( ) { while ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } } }"],"bleu":0.8707608547474218,"rouge_l":0.9147000983284169}
{"id":95,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter pw = new PrintWriter ( System . out ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int N = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ M ] ; for ( int i = 0 ; i < M ; i ++ ) { a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int [ ] b = new int [ M ] ; for ( int i = 0 ; i < M ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } long ans = 0 ; for ( int i = 0 ; i < M ; i ++ ) { for ( int j = 0 ; j < M ; j ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { if ( a [ k ] < b [ k ] && b [ k ] < a [ k ] ) { ans ++ ; } } } } } pw . println ( ans ) ; pw . close ( ) ; } }"],"references":["import java . math . BigDecimal ; import java . util . * ; public class Main { static Scanner sc = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { int W = sc . nextInt ( ) ; int H = sc . nextInt ( ) ; System . out . println ( calc ( W - 1 , H - 1 ) ) ; } private static long calc ( long w , long h ) { long start = Math . max ( w , h ) + 1 ; long a = 1 ; long b = 1 ; for ( long i = start ; i <= w + h ; i ++ ) { a *= i ; b *= i - start + 1 ; a = a % 1000000007l ; b = b % 1000000007l ; } return a * pow ( b , 1000000005l ) % 1000000007l ; } static long pow ( long a , long n ) { long mod = 1000000007l ; long tmp = 1 ; while ( n != 0 ) { if ( n % 2 == 1 ) tmp = tmp * a % mod ; a = a * a % mod ; n \/= 2 ; } return tmp ; } }","import java . util . * ; import java . awt . * ; import static java . lang . System . * ; import static java . lang . Math . * ; public class Main { public static void main ( String [ ] $ ) { Scanner sc = new Scanner ( in ) ; int h = sc . nextInt ( ) ; int w = sc . nextInt ( ) ; Init ( 200000 ) ; out . println ( combi ( h + w - 2 , w - 1 ) ) ; } static int mod = 1000000007 ; static long [ ] fact ; static long [ ] inv ; static void Init ( int n ) { fact = new long [ n ] ; inv = new long [ n ] ; fact [ 0 ] = inv [ 0 ] = 1 ; for ( int i = 1 ; i < n ; i ++ ) { fact [ i ] = ( fact [ i - 1 ] * i ) % mod ; inv [ i ] = power ( fact [ i ] , mod - 2 ) ; } } static long combi ( int n , int k ) { return ( ( fact [ n ] * inv [ n - k ] ) % mod * inv [ k ] ) % mod ; } static long power ( long x , int n ) { if ( n == 0 ) return 1 ; if ( n % 2 == 0 ) { long e = power ( x , n \/ 2 ) % mod ; return ( e * e ) % mod ; } long e = ( x * power ( x , n - 1 ) ) % mod ; return e ; } }","import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) - 1 ; int b = sc . nextInt ( ) - 1 ; System . out . println ( combination ( a + b , Math . min ( b , a ) , 1000000007 ) ) ; } public static long factorial ( int a , int p ) { long ans = 1 ; for ( int i = 1 ; i <= a ; i ++ ) { ans = ( p == 0 ) ? ans * i : ( ans * i ) % p ; } return ans ; } public static long permutation ( int a , int b , int p ) { long ans = 1 ; if ( a > b ) { int c = a ; a = b ; b = c ; } for ( int i = b ; i > b - a ; i -- ) { ans = ( p == 0 ) ? ans * i : ( ans * i ) % p ; } return ans ; } public static long combination ( int a , int b , int p ) { long c = permutation ( a , b , p ) ; long c2 = factorial ( b , p ) ; c = ( p == 0 ) ? c \/ c2 : ( p == 1 ) ? 0 : c * pow ( ( int ) c2 , p - 2 , p ) ; return ( p == 0 ) ? ( int ) c : ( int ) ( c % p ) ; } public static int pow ( int a , int b , int p ) { if ( b == 0 ) { return 1 ; } else if ( b % 2 == 0 ) { long c = ( p == 0 ) ? ( long ) a * a : ( ( long ) a * a ) % p ; return pow ( ( int ) c , b \/ 2 , p ) ; } else { long c = ( p == 0 ) ? ( long ) a * pow ( a , b - 1 , p ) : ( ( long ) a * pow ( a , b - 1 , p ) ) % p ; return ( int ) c ; } } }","import java . util . * ; import static java . lang . System . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int W = sc . nextInt ( ) ; int H = sc . nextInt ( ) ; int prime = 1_000_000_007 ; out . println ( combinationMod ( W - 1 , H - 1 , prime ) ) ; } public static long combinationMod ( int w , int h , long prime ) { int n = w + h ; long fac [ ] = new long [ n + 1 ] ; long finv [ ] = new long [ n + 1 ] ; long inv [ ] = new long [ n + 1 ] ; fac [ 0 ] = fac [ 1 ] = 1 ; finv [ 0 ] = finv [ 1 ] = 1 ; inv [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) { fac [ i ] = fac [ i - 1 ] * i % prime ; inv [ i ] = prime - inv [ ( int ) ( prime % Long . valueOf ( i ) ) ] * ( prime \/ i ) % prime ; finv [ i ] = finv [ i - 1 ] * inv [ i ] % prime ; } return fac [ w + h ] * ( finv [ w ] * finv [ h ] % prime ) % prime ; } }","public class Main { private static java . util . Scanner scanner = new java . util . Scanner ( System . in ) ; public static void main ( String [ ] $ ) { int w = scanner . nextInt ( ) , h = scanner . nextInt ( ) ; System . out . println ( facAndMod ( h + w - 2 ) * powAndMod ( facAndMod ( w - 1 ) * facAndMod ( h - 1 ) % 1000000007 , 1000000005 ) % 1000000007 ) ; } private static long powAndMod ( long a , long b ) { if ( b == 0 ) return 1 ; if ( ( b & 1 ) == 1 ) return a * powAndMod ( a , b - 1 ) % 1000000007 ; return powAndMod ( a * a % 1000000007 , b \/ 2 ) ; } private static long facAndMod ( long a ) { return a == 0 ? 1 : a * facAndMod ( a - 1 ) % 1000000007 ; } }"],"bleu":0.27245646028349657,"rouge_l":0.4174566321616497}
{"id":96,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter pw = new PrintWriter ( System . out ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int N = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ M ] ; for ( int i = 0 ; i < M ; i ++ ) { a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int [ ] b = new int [ M ] ; for ( int i = 0 ; i < M ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } long ans = 0 ; for ( int i = 0 ; i < M ; i ++ ) { for ( int j = 0 ; j < M ; j ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { if ( a [ k ] < b [ k ] && b [ k ] < a [ k ] ) { ans ++ ; } } } } } pw . println ( ans ) ; pw . close ( ) ; } }"],"references":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; long xor = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int a = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; xor ^= grundy ( a , k ) ; } System . out . println ( ( xor == 0 ) ? \" Aoki \" : \" Takahashi \" ) ; } static long grundy ( int a , int k ) { if ( a % k == 0 ) return a \/ k ; if ( a < k ) return 0 ; long d = a \/ k + 1 ; long rem = a % d ; long c = ( long ) Math . ceil ( ( double ) ( a \/ k * k - rem ) \/ d ) ; long b = d * c + rem ; if ( b % k == 0 ) return b \/ k ; a = ( int ) ( b - d ) ; return grundy ( a , k ) ; } }","import java . util . * ; class Main { public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } void run ( ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; long [ ] A = new long [ n ] ; long [ ] K = new long [ n ] ; long grundy = 0 ; for ( int i = 0 ; i < n ; ++ i ) { A [ i ] = sc . nextLong ( ) ; K [ i ] = sc . nextLong ( ) ; grundy ^= f ( A [ i ] , K [ i ] ) ; } if ( grundy == 0 ) { System . out . println ( \" Aoki \" ) ; } else { System . out . println ( \" Takahashi \" ) ; } } long f ( long A , long K ) { if ( A % K == 0 ) { return A \/ K ; } else { long tmp = ( A % K ) \/ ( A \/ K + 1 ) ; if ( tmp > 1 ) { return f ( A - ( A \/ K + 1 ) * tmp , K ) ; } else { return f ( A - A \/ K - 1 , K ) ; } } } }"],"bleu":0.2418978526616541,"rouge_l":0.4141022154348235}
{"id":97,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { for ( int k = 0 ; k < n ; k ++ ) { for ( int k = 0 ; k < n ; k ++ ) { if ( a [ i ] > b [ j ] ) { ans ++ ; break ; } } } } out . println ( ans ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . io . InputStream ; import java . io . PrintStream ; import java . util . Arrays ; import java . util . Comparator ; import java . util . Scanner ; public class Main { InputStream in = System . in ; PrintStream out = System . out ; void solv ( int [ ] [ ] x ) { Arrays . sort ( x , new Comparator < int [ ] > ( ) { @ Override public int compare ( int [ ] a , int [ ] b ) { int x = a [ 1 ] - b [ 1 ] ; if ( x == 0 ) { return a [ 2 ] - b [ 2 ] ; } return x ; } } ) ; int prev = - 1 ; int num = 0 ; for ( int i = 0 ; i < x . length ; i ++ ) { if ( x [ i ] [ 1 ] != prev ) { num = 1 ; prev = x [ i ] [ 1 ] ; } else { num ++ ; } x [ i ] [ 3 ] = num ; } Arrays . sort ( x , ( a , b ) -> a [ 0 ] - b [ 0 ] ) ; StringBuilder sb = new StringBuilder ( ) ; for ( int [ ] a : x ) { sb . append ( String . format ( \" % 06d % 06d \\n \" , a [ 1 ] , a [ 3 ] ) ) ; } out . print ( sb ) ; } public void _main ( String [ ] args ) { Scanner sc = new Scanner ( in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] [ ] x = new int [ m ] [ 4 ] ; for ( int i = 0 ; i < m ; i ++ ) { x [ i ] = new int [ ] { i , sc . nextInt ( ) , sc . nextInt ( ) , - 1 } ; } solv ( x ) ; sc . close ( ) ; } public static void main ( String [ ] args ) { new Main ( ) . _main ( args ) ; } }","import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int po [ ] = new int [ n + 1 ] ; ArrayList < Po > array = new ArrayList < > ( ) ; for ( int i = 0 ; i < m ; i ++ ) array . add ( new Po ( sc . nextInt ( ) , sc . nextInt ( ) , i ) ) ; array . sort ( new Comparator < Po > ( ) { public int compare ( Po a , Po b ) { return a . value - b . value ; } } ) ; for ( int i = 0 ; i < array . size ( ) ; i ++ ) { po [ array . get ( i ) . place ] ++ ; array . get ( i ) . make ( String . format ( \" % 012d \" , ( ( long ) 1000000 * array . get ( i ) . place ) + po [ array . get ( i ) . place ] ) ) ; } array . sort ( new Comparator < Po > ( ) { public int compare ( Po a , Po b ) { return a . index - b . index ; } } ) ; for ( int i = 0 ; i < array . size ( ) ; i ++ ) { System . out . println ( array . get ( i ) . id ) ; } } static class Po { int value ; int place ; int index ; String id ; public Po ( int a , int b , int i ) { place = a ; index = i ; value = b ; } public void make ( String po ) { id = po ; } } }","import java . util . * ; import static java . lang . System . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int M = sc . nextInt ( ) ; Map < Integer , int [ ] > map = new TreeMap < Integer , int [ ] > ( ) ; for ( int i = 0 ; i < M ; i ++ ) { int [ ] arr = new int [ 2 ] ; arr [ 0 ] = sc . nextInt ( ) ; arr [ 1 ] = i ; map . put ( sc . nextInt ( ) , arr ) ; } String [ ] ans = new String [ M ] ; int [ ] seq = new int [ N + 1 ] ; for ( int [ ] arr : map . values ( ) ) { seq [ arr [ 0 ] ] ++ ; ans [ arr [ 1 ] ] = String . format ( \" % 06d % 06d \" , arr [ 0 ] , seq [ arr [ 0 ] ] ) ; } for ( int i = 0 ; i < M ; i ++ ) { out . println ( ans [ i ] ) ; } } }","import java . util . * ; public class Main { public static void main ( String [ ] args ) { try ( Scanner scanner = new Scanner ( System . in ) ) { int N = scanner . nextInt ( ) ; int M = scanner . nextInt ( ) ; TreeSet < Triple > map = new TreeSet < > ( ( lhs , rhs ) -> lhs . Year - rhs . Year ) ; for ( int i = 0 ; i < M ; i ++ ) { int prefecture = scanner . nextInt ( ) ; int year = scanner . nextInt ( ) ; map . add ( new Triple ( i , prefecture , year ) ) ; } Map < Integer , Integer > prefectureToCount = new HashMap < > ( ) ; TreeMap < Integer , String > numToFormat = new TreeMap < > ( ) ; for ( final Triple triple : map ) { int count = prefectureToCount . compute ( triple . Prefecture , ( k , v ) -> v == null ? 1 : v + 1 ) ; String format = leftpad ( triple . Prefecture ) + leftpad ( count ) ; numToFormat . put ( triple . num , format ) ; } for ( final String format : numToFormat . values ( ) ) { System . out . println ( format ) ; } } } static String leftpad ( int v ) { StringBuilder sb = new StringBuilder ( ) ; while ( v != 0 ) { sb . append ( v % 10 ) ; v \/= 10 ; } while ( sb . length ( ) < 6 ) { sb . append ( \"0\" ) ; } return sb . reverse ( ) . toString ( ) ; } static class Triple { final int num ; final int Prefecture ; final int Year ; Triple ( int num , int prefecture , int y ) { this . num = num ; Prefecture = prefecture ; Year = y ; } } }","import java . util . * ; public class Main { static Scanner sc = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { int N = sc . nextInt ( ) ; int M = sc . nextInt ( ) ; ArrayList < City > cities = new ArrayList ( ) ; for ( int i = 0 ; i < M ; i ++ ) { cities . add ( new City ( i , sc . nextInt ( ) , sc . nextInt ( ) ) ) ; } cities . sort ( ( x , y ) -> { if ( x . p == y . p ) { return x . y - y . y ; } else { return x . p - y . p ; } } ) ; String [ ] ids = new String [ M ] ; int count = 0 ; for ( int i = 0 ; i < M ; i ++ ) { City c = cities . get ( i ) ; if ( i == 0 || c . p != cities . get ( i - 1 ) . p ) count = 0 ; else count ++ ; ids [ c . i ] = padding0 ( c . p , 6 ) + padding0 ( count + 1 , 6 ) ; } for ( int i = 0 ; i < M ; i ++ ) { System . out . println ( ids [ i ] ) ; } } static String padding0 ( int n , int m ) { String s = Integer . toString ( n ) ; while ( m - s . length ( ) > 0 ) s = \"0\" + s ; return s ; } static class City { int i , p , y ; City ( int i , int p , int y ) { this . i = i ; this . p = p ; this . y = y ; } } } Note : . \/ Main . java uses unchecked or unsafe operations . Note : Recompile with - Xlint : unchecked for details ."],"bleu":0.4111006732369963,"rouge_l":0.46566012368916376}
{"id":98,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { for ( int k = 0 ; k < n ; k ++ ) { ans += Math . abs ( a [ i ] - b [ j ] ) ; } } System . out . println ( ans ) ; } }"],"references":["import java . util . Arrays ; import java . util . PriorityQueue ; import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int N = scan . nextInt ( ) ; int K = scan . nextInt ( ) ; int Q = scan . nextInt ( ) ; int [ ] A = new int [ N ] ; int [ ] B = new int [ N ] ; for ( int i = 0 ; i < N ; ++ i ) { A [ i ] = scan . nextInt ( ) ; B [ i ] = A [ i ] ; } Arrays . sort ( B ) ; int ans = 1000000001 ; PriorityQueue < Integer > que = new PriorityQueue < > ( ) ; for ( int i = 0 ; i < N ; ++ i ) { if ( i + Q - 1 >= N || B [ i + Q - 1 ] - B [ i ] >= ans ) continue ; int left = - 1 , right = ans ; while ( right - left > 1 ) { int center = ( right + left ) \/ 2 ; int cnt = 0 ; que . clear ( ) ; for ( int j = 0 ; j < N ; ++ j ) { if ( A [ j ] < B [ i ] ) que . clear ( ) ; else { que . add ( A [ j ] ) ; if ( que . size ( ) >= K ) { if ( que . poll ( ) - B [ i ] <= center ) ++ cnt ; if ( cnt >= Q ) { break ; } } } } if ( cnt >= Q ) right = center ; else left = center ; } ans = Math . min ( ans , right ) ; } System . out . println ( ans ) ; } }","import java . util . Arrays ; import java . util . Comparator ; import java . util . PriorityQueue ; import java . util . Scanner ; public class Main { void run ( ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int K = sc . nextInt ( ) ; int Q = sc . nextInt ( ) ; int [ ] A = new int [ N ] ; int ans = Integer . MAX_VALUE ; for ( int i = 0 ; i < N ; ++ i ) { A [ i ] = sc . nextInt ( ) ; } for ( int trial = 0 ; trial < N ; ++ trial ) { PriorityQueue < PriorityQueue < Integer > > pq = new PriorityQueue < > ( new Comparator < PriorityQueue < Integer > > ( ) { @ Override public int compare ( PriorityQueue < Integer > o1 , PriorityQueue < Integer > o2 ) { return Integer . compare ( o1 . peek ( ) , o2 . peek ( ) ) ; } } ) ; for ( int i = 0 ; i < N ; ++ i ) { int t = i ; PriorityQueue < Integer > tmp = new PriorityQueue < > ( ) ; while ( t < N && A [ t ] >= A [ trial ] ) { tmp . add ( A [ t ] ) ; ++ t ; } if ( tmp . size ( ) >= K ) { pq . add ( tmp ) ; } i = t ; } int cnt = 0 ; int max = 0 ; while ( cnt < Q && ! pq . isEmpty ( ) ) { PriorityQueue < Integer > cand = pq . poll ( ) ; ++ cnt ; max = Math . max ( max , cand . poll ( ) ) ; if ( cand . size ( ) >= K ) pq . add ( cand ) ; } if ( cnt == Q ) { ans = Math . min ( ans , max - A [ trial ] ) ; } } System . out . println ( ans ) ; } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } void tr ( Object ... objects ) { System . out . println ( Arrays . deepToString ( objects ) ) ; } }","import java . awt . Checkbox ; import java . lang . invoke . ConstantCallSite ; import java . security . spec . ECPrivateKeySpec ; import java . util . Arrays ; import java . util . Scanner ; public class Main { static int a [ ] , b [ ] ; static int N , K , Q ; public static boolean check ( int low , int high ) { int last = - 1 ; int total = 0 ; int cnt = 0 ; for ( int i = 0 ; i <= N ; i ++ ) { if ( i == N || a [ i ] < low ) { total += Math . min ( cnt , Math . max ( 0 , ( i - 1 - ( last + 1 ) + 1 ) - K + 1 ) ) ; last = i ; cnt = 0 ; } else if ( a [ i ] >= low && a [ i ] <= high ) cnt ++ ; } if ( total >= Q ) return true ; else return false ; } public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; N = in . nextInt ( ) ; K = in . nextInt ( ) ; Q = in . nextInt ( ) ; a = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) a [ i ] = in . nextInt ( ) ; b = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) b [ i ] = a [ i ] ; Arrays . sort ( b ) ; int result = ( int ) 1e9 ; for ( int i = 0 ; i < N ; i ++ ) { int low = i , high = N - 1 , res = N ; while ( low <= high ) { int mid = ( low + high ) >> 1 ; if ( check ( b [ i ] , b [ mid ] ) ) { res = mid ; high = mid - 1 ; } else low = mid + 1 ; } if ( res >= i && res < N ) { result = Math . min ( result , b [ res ] - b [ i ] ) ; } } System . out . println ( result ) ; } }","import java . util . * ; import java . io . * ; import static java . lang . System . in ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) , K = sc . nextInt ( ) , Q = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = sc . nextInt ( ) ; HashSet < Integer > vis = new HashSet < > ( ) ; PriorityQueue < Integer > small = new PriorityQueue < > ( ) , big = new PriorityQueue < > ( ) ; int ans = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( ! vis . add ( a [ i ] ) ) continue ; big . clear ( ) ; int left = 0 ; while ( left < n ) { if ( a [ left ] < a [ i ] ) { left ++ ; continue ; } small . clear ( ) ; while ( left < n && a [ left ] >= a [ i ] ) { small . add ( a [ left ++ ] ) ; } while ( small . size ( ) >= K ) big . add ( small . poll ( ) ) ; } if ( big . size ( ) < Q ) continue ; for ( int j = 1 ; j < Q ; j ++ ) big . poll ( ) ; ans = Math . min ( ans , big . peek ( ) - a [ i ] ) ; } System . out . println ( ans ) ; } }","import java . util . * ; public class Main { static int n , k , q ; static int [ ] a ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; n = sc . nextInt ( ) ; k = sc . nextInt ( ) ; q = sc . nextInt ( ) ; a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } sc . close ( ) ; int ans = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { int y = a [ i ] ; int x = calcMax ( y ) ; if ( x > 0 ) { ans = Math . min ( ans , x - y ) ; } } System . out . println ( ans ) ; } public static int calcMax ( int min ) { int max = 0 ; ArrayList < Integer > all = new ArrayList < Integer > ( ) ; ArrayList < Integer > cont = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] >= min ) { cont . add ( a [ i ] ) ; } else { if ( cont . size ( ) >= k ) { Collections . sort ( cont ) ; for ( int j = 0 ; j < cont . size ( ) - k + 1 ; j ++ ) { all . add ( cont . get ( j ) ) ; } } cont . clear ( ) ; } } if ( cont . size ( ) >= k ) { Collections . sort ( cont ) ; for ( int j = 0 ; j < cont . size ( ) - k + 1 ; j ++ ) { all . add ( cont . get ( j ) ) ; } } if ( all . size ( ) >= q ) { Collections . sort ( all ) ; max = all . get ( q - 1 ) ; } else { max = - 1 ; } return max ; } }"],"bleu":0.5183660361107731,"rouge_l":0.5724483634209389}
{"id":99,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int A = sc . nextInt ( ) ; int B = sc . nextInt ( ) ; int C = sc . nextInt ( ) ; int D = sc . nextInt ( ) ; System . out . println ( Math . min ( B , D ) ) ; } }"],"references":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] a = new int [ 2 ] ; a [ 0 ] = sc . nextInt ( ) ; a [ 1 ] = sc . nextInt ( ) ; System . out . println ( a [ 1 ] + \" ▁ \" + a [ 0 ] ) ; } }","import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . InputMismatchException ; import java . io . IOException ; import java . io . InputStream ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; FastScanner in = new FastScanner ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; TaskA solver = new TaskA ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class TaskA { public void solve ( int testNumber , FastScanner in , PrintWriter out ) { String a = in . next ( ) ; String b = in . next ( ) ; out . printf ( \" % s ▁ % s \" , b , a ) ; } } static class FastScanner { private InputStream in ; private byte [ ] buffer = new byte [ 1024 ] ; private int bufPointer ; private int bufLength ; public FastScanner ( InputStream in ) { this . in = in ; this . bufPointer = 0 ; this . bufLength = 0 ; } private int readByte ( ) { if ( bufPointer >= bufLength ) { if ( bufLength == - 1 ) throw new InputMismatchException ( ) ; bufPointer = 0 ; try { bufLength = in . read ( buffer ) ; } catch ( IOException e ) { throw new InputMismatchException ( ) ; } if ( bufLength <= 0 ) return - 1 ; } return buffer [ bufPointer ++ ] ; } private static boolean isPrintableChar ( int c ) { return c >= 33 && c <= 126 ; } public String next ( ) { StringBuilder sb = new StringBuilder ( ) ; int b = readByte ( ) ; while ( ! isPrintableChar ( b ) ) b = readByte ( ) ; while ( isPrintableChar ( b ) ) { sb . appendCodePoint ( b ) ; b = readByte ( ) ; } return sb . toString ( ) ; } } }","import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; System . out . println ( b + \" ▁ \" + a ) ; } static int l_min ( int [ ] a ) { Arrays . sort ( a ) ; return a [ 0 ] ; } static int l_max ( int [ ] a ) { int l = a . length ; Arrays . sort ( a ) ; return a [ l - 1 ] ; } public static PrintWriter out ; public static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . OutputStream ; import java . io . PrintWriter ; import java . util . StringTokenizer ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; Task solver = new Task ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class Task { public void solve ( int testNumber , InputReader in , PrintWriter out ) { int A = in . nextInt ( ) ; int B = in . nextInt ( ) ; out . print ( B + \" ▁ \" + A ) ; } } static class InputReader { public BufferedReader reader ; public StringTokenizer tokenizer ; public InputReader ( InputStream stream ) { reader = new BufferedReader ( new InputStreamReader ( stream ) , 32768 ) ; tokenizer = null ; } public String next ( ) { while ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } } }","import java . util . * ; import java . util . stream . * ; import static java . lang . System . * ; class Main { static Scanner sc = new Scanner ( System . in ) ; static int nextInt ( ) { return Integer . parseInt ( sc . next ( ) ) ; } static int [ ] nextIntArray ( int n ) { return IntStream . range ( 0 , n ) . map ( i -> nextInt ( ) ) . toArray ( ) ; } static int max ( int ... ar ) { Arrays . sort ( ar ) ; return ar [ ar . length - 1 ] ; } static int min ( int ... ar ) { Arrays . sort ( ar ) ; return ar [ 0 ] ; } static int maxInt = Integer . MAX_VALUE ; static int minInt = Integer . MIN_VALUE ; public static void main ( String [ ] args ) { int n = nextInt ( ) , m = nextInt ( ) ; out . println ( m + \" ▁ \" + n ) ; } }"],"bleu":0.7129812344743901,"rouge_l":0.707355359760822}
{"id":100,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( a [ i ] > b [ j ] ) { ans ++ ; } } out . println ( ans ) ; } static class MyScanner { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( \" \" ) ; String next ( ) { while ( ! st . hasMoreTokens ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; char [ ] arr = new char [ ] { ' A ' , ' B ' , ' X ' , ' Y ' } ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < arr . length ; i ++ ) { for ( int j = 0 ; j < arr . length ; j ++ ) { for ( int k = 0 ; k < arr . length ; k ++ ) { for ( int l = 0 ; l < arr . length ; l ++ ) { if ( i == k && j == l ) { continue ; } String x = s . replaceAll ( String . valueOf ( arr [ i ] ) + String . valueOf ( arr [ j ] ) , \" L \" ) ; x = x . replaceAll ( String . valueOf ( arr [ k ] ) + String . valueOf ( arr [ l ] ) , \" R \" ) ; int len = x . length ( ) ; if ( min > len ) { min = len ; } } } } } System . out . println ( min ) ; } }","import java . util . ArrayList ; import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { String [ ] str_list = new String [ 4 ] ; str_list [ 0 ] = \" A \" ; str_list [ 1 ] = \" B \" ; str_list [ 2 ] = \" X \" ; str_list [ 3 ] = \" Y \" ; ArrayList < String > str2list = new ArrayList < String > ( ) ; for ( int i = 0 ; i < 4 ; i ++ ) { for ( int j = 0 ; j < 4 ; j ++ ) { String strTmp = str_list [ i ] + str_list [ j ] ; str2list . add ( strTmp ) ; } } Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; String command = scan . next ( ) ; scan . close ( ) ; int min = n ; for ( int i = 0 ; i < 16 ; i ++ ) { for ( int j = i + 1 ; j < 16 ; j ++ ) { String str1 = str2list . get ( i ) ; String str2 = str2list . get ( j ) ; int newMin = commandMin ( str1 , str2 , n , command ) ; if ( newMin < min ) min = newMin ; } } System . out . println ( min ) ; } public static int commandMin ( String str1 , String str2 , int n , String command ) { int i = 0 ; int m = n ; while ( true ) { if ( i > n - 2 ) break ; String comStr1 = String . valueOf ( command . charAt ( i ) ) ; String comStr2 = String . valueOf ( command . charAt ( i + 1 ) ) ; String strTmp = comStr1 + comStr2 ; if ( strTmp . equals ( str1 ) || strTmp . equalsIgnoreCase ( str2 ) ) { m -= 1 ; i += 2 ; } else { i ++ ; } } return m ; } }","import java . io . * ; public class Main { static boolean debug = false ; static boolean debug2 = false ; public static void main ( String [ ] args ) throws NumberFormatException , IOException { debug = 1 == args . length ; debug2 = 2 == args . length ; BufferedReader in = new BufferedReader ( new InputStreamReader ( System . in ) ) ; final String [ ] rules = { \" AA \" , \" AB \" , \" AX \" , \" AY \" , \" BA \" , \" BB \" , \" BX \" , \" BY \" , \" XA \" , \" XB \" , \" XX \" , \" XY \" , \" YA \" , \" YB \" , \" YX \" , \" YY \" } ; final int N = Integer . parseInt ( in . readLine ( ) ) ; final String is = in . readLine ( ) ; int ans = Integer . MAX_VALUE ; for ( int r = 0 ; r < rules . length ; ++ r ) { for ( int l = r + 1 ; l < rules . length ; ++ l ) { if ( r == l ) { continue ; } int [ ] dp = new int [ is . length ( ) ] ; for ( int i = 0 ; i < dp . length ; ++ i ) { dp [ i ] = i + 1 ; } for ( int i = 1 ; i < dp . length ; ++ i ) { for ( int rl = 0 ; rl < 2 ; ++ rl ) { if ( is . regionMatches ( i - 1 , rl == 0 ? rules [ r ] : rules [ l ] , 0 , 2 ) ) { dp [ i ] = Math . min ( dp [ i ] , 1 + ( 0 <= i - 2 && i - 2 < dp . length ? dp [ i - 2 ] : 0 ) ) ; } else { dp [ i ] = Math . min ( dp [ i ] , 1 + ( 0 <= i - 1 && i - 1 < dp . length ? dp [ i - 1 ] : 0 ) ) ; } } } ans = Math . min ( ans , dp [ dp . length - 1 ] ) ; } } System . out . println ( ans ) ; } }","import java . util . * ; public class Main { private static int n ; private static String command ; public static void input ( ) { Scanner scan = new Scanner ( System . in ) ; n = scan . nextInt ( ) ; command = scan . next ( ) ; } public static void main ( String args [ ] ) { input ( ) ; int min = Integer . MAX_VALUE ; String [ ] button = { \" A \" , \" B \" , \" X \" , \" Y \" } ; for ( int i = 0 ; i < button . length ; i ++ ) { for ( int j = 0 ; j < button . length ; j ++ ) { for ( int k = 0 ; k < button . length ; k ++ ) { for ( int l = 0 ; l < button . length ; l ++ ) { String shortA = button [ i ] + button [ j ] ; String shortB = button [ k ] + button [ l ] ; String tmpA = command . replace ( shortA , \" L \" ) . replace ( shortB , \" R \" ) ; String tmpB = command . replace ( shortB , \" L \" ) . replace ( shortA , \" R \" ) ; min = Math . min ( min , Math . min ( tmpA . length ( ) , tmpB . length ( ) ) ) ; } } } } System . out . println ( min ) ; } }","import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; sc . nextLine ( ) ; String line = sc . nextLine ( ) ; char [ ] commands = new char [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { commands [ i ] = line . charAt ( i ) ; } char [ ] resources = { ' A ' , ' B ' , ' X ' , ' Y ' } ; int ret = Integer . MAX_VALUE ; for ( char c1 : resources ) { for ( char c2 : resources ) { for ( char c3 : resources ) { for ( char c4 : resources ) { int num = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( i == N - 1 ) { num ++ ; break ; } if ( ( commands [ i ] == c1 && commands [ i + 1 ] == c2 ) || ( commands [ i ] == c3 && commands [ i + 1 ] == c4 ) ) i ++ ; num ++ ; } ret = Math . min ( ret , num ) ; } } } } System . out . println ( ret ) ; } }"],"bleu":0.43679275831518893,"rouge_l":0.49064791698532845}
{"id":101,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans += a [ i ] ; } out . println ( ans ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . util . Arrays ; import java . util . Comparator ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; Integer [ ] a = new Integer [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = sc . nextInt ( ) ; Arrays . sort ( a , Comparator . reverseOrder ( ) ) ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( i % 2 == 0 ) { ans += a [ i ] ; } } System . out . println ( ans ) ; } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . UncheckedIOException ; import java . util . Arrays ; import java . util . StringTokenizer ; class Main { public static void main ( String [ ] args ) { SC sc = new SC ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] a = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; int sum = 0 ; for ( int i = N - 1 ; i >= 0 ; i -= 2 ) { sum += a [ i ] ; } pl ( sum ) ; } static class SC { private BufferedReader reader = null ; private StringTokenizer tokenizer = null ; public SC ( InputStream in ) { reader = new BufferedReader ( new InputStreamReader ( in ) ) ; } public String next ( ) { if ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } } return tokenizer . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } public long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } public double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } public String nextLine ( ) { try { return reader . readLine ( ) ; } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } } } public static void pl ( Object o ) { System . out . println ( o ) ; } public static void p ( Object o ) { System . out . print ( o ) ; } }","import java . util . * ; import java . util . stream . * ; public class Main { private static Scanner scanner = new Scanner ( System . in ) ; public static void main ( String [ ] $ ) { int n = scanner . nextInt ( ) , a [ ] = IntStream . range ( 0 , n ) . map ( i -> scanner . nextInt ( ) ) . sorted ( ) . toArray ( ) ; System . out . println ( IntStream . range ( 0 , n ) . filter ( i -> i % 2 != n % 2 ) . map ( i -> a [ i ] ) . sum ( ) ) ; } }","import java . util . * ; import java . awt . * ; import java . awt . geom . * ; import static java . lang . System . * ; import static java . lang . Math . * ; public class Main { public static void main ( String [ ] $ ) { Scanner sc = new Scanner ( in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ n - 1 - i ] = a [ i ] ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( i % 2 == 0 ) ans += b [ i ] ; } out . println ( ans ) ; } }","import java . util . Comparator ; import java . util . PriorityQueue ; import java . util . Scanner ; public class Main { static Scanner s = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { int n = s . nextInt ( ) , sum = 0 ; PriorityQueue < Integer > que = new PriorityQueue < > ( Comparator . reverseOrder ( ) ) ; for ( int i = 0 ; i < n ; i ++ ) que . add ( s . nextInt ( ) ) ; for ( int i = 0 ; ! que . isEmpty ( ) ; i ++ ) if ( i % 2 == 0 ) sum += que . poll ( ) ; else que . poll ( ) ; System . out . println ( sum ) ; } }"],"bleu":0.7466492112268419,"rouge_l":0.7955391711898631}
{"id":102,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans += a [ i ] - a [ i ] ; } out . println ( ans ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } }"],"references":["import java . util . * ; public class Main { private static int n ; private static String [ ] x ; private static int count = 0 ; public static void input ( ) { Scanner scan = new Scanner ( System . in ) ; n = scan . nextInt ( ) ; x = new String [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { x [ i ] = scan . next ( ) ; } } public static void main ( String args [ ] ) { input ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( x [ i ] . contains ( \" x \" ) ) { int j = 0 ; while ( x [ i ] . indexOf ( ' x ' , j ) != - 1 ) { j = x [ i ] . indexOf ( ' x ' , j ) + 1 ; count ++ ; } } } boolean flag = true ; for ( int i = 0 ; i < 9 ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( x [ j ] . charAt ( i ) == ' o ' ) { if ( flag ) { count ++ ; flag = false ; } } else flag = true ; } flag = true ; } System . out . println ( count ) ; } }","import java . util . Scanner ; public class Main { static int [ ] dx = { - 1 , 1 } ; static int [ ] dy = { 0 , 0 } ; static int n ; static char [ ] [ ] s ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; n = sc . nextInt ( ) ; s = new char [ n ] [ 9 ] ; for ( int i = 0 ; i < n ; i ++ ) s [ i ] = sc . next ( ) . toCharArray ( ) ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 9 ; j ++ ) { if ( s [ i ] [ j ] == ' o ' ) { ans ++ ; dfs ( i , j ) ; } else if ( s [ i ] [ j ] == ' x ' ) { ans ++ ; s [ i ] [ j ] = ' . ' ; } } } System . out . println ( ans ) ; } static void dfs ( int x , int y ) { for ( int i = 0 ; i < 2 ; i ++ ) { int nx = x + dx [ i ] ; int ny = y + dy [ i ] ; if ( 0 <= nx && nx < n && 0 <= ny && ny < 9 && s [ nx ] [ ny ] == ' o ' ) { s [ nx ] [ ny ] = ' . ' ; dfs ( nx , ny ) ; } } return ; } }","import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int ans = 0 ; char [ ] [ ] music = new char [ N ] [ 9 ] ; for ( int i = 0 ; i < N ; i ++ ) { String s = sc . next ( ) ; for ( int j = 0 ; j < 9 ; j ++ ) { music [ i ] [ j ] = s . charAt ( j ) ; if ( music [ i ] [ j ] == ' x ' ) ans ++ ; } } for ( int j = 0 ; j < 9 ; j ++ ) { int flg = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( music [ i ] [ j ] == ' o ' && flg == 0 ) { flg = 1 ; ans ++ ; } else if ( music [ i ] [ j ] != ' o ' ) { flg = 0 ; } } } System . out . println ( ans ) ; } }","import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; char a [ ] [ ] = new char [ N ] [ ] ; for ( int i = 0 ; i < N ; i ++ ) { a [ i ] = sc . next ( ) . toCharArray ( ) ; } long count = 0 ; char [ ] prev = new char [ 9 ] ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < 9 ; j ++ ) { if ( a [ i ] [ j ] == ' x ' ) { count ++ ; } else if ( a [ i ] [ j ] == ' o ' && prev [ j ] != ' o ' ) { count ++ ; } prev [ j ] = a [ i ] [ j ] ; } } System . out . print ( count ) ; } }","import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; char [ ] [ ] field = new char [ n ] [ 9 ] ; for ( int i = 0 ; i < n ; i ++ ) { field [ i ] = sc . next ( ) . toCharArray ( ) ; } int count = 0 ; for ( int i = 0 ; i < 9 ; i ++ ) { char prev = ' a ' ; for ( int j = 0 ; j < n ; j ++ ) { char c = field [ j ] [ i ] ; if ( c == ' x ' || ( c == ' o ' && prev != ' o ' ) ) { count ++ ; } prev = c ; } } System . out . println ( count ) ; } }"],"bleu":0.40826729094853953,"rouge_l":0.5417609896562136}
{"id":103,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { st = new StringTokenizer ( br . readLine ( ) ) ; a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { b [ j ] = Math . min ( b [ i ] , b [ j ] ) ; } } System . out . println ( count ) ; } }"],"references":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; HashMap < Integer , ArrayList < Integer > > map = new HashMap < > ( ) ; boolean [ ] isVisited = new boolean [ n + 1 ] ; isVisited [ 0 ] = true ; for ( int i = 0 ; i < m ; i ++ ) { int num1 = sc . nextInt ( ) ; int num2 = sc . nextInt ( ) ; if ( map . containsKey ( num1 ) ) { map . get ( num1 ) . add ( num2 ) ; } else { ArrayList < Integer > list = new ArrayList < > ( ) ; list . add ( num2 ) ; map . put ( num1 , list ) ; } if ( map . containsKey ( num2 ) ) { map . get ( num2 ) . add ( num1 ) ; } else { ArrayList < Integer > list = new ArrayList < > ( ) ; list . add ( num1 ) ; map . put ( num2 , list ) ; } } System . out . println ( helper ( map , isVisited , 1 ) ) ; } private static int helper ( HashMap < Integer , ArrayList < Integer > > map , boolean [ ] isVisited , int current ) { if ( isVisited [ current ] || ! map . containsKey ( current ) ) return 0 ; isVisited [ current ] = true ; if ( check ( isVisited ) ) { isVisited [ current ] = false ; return 1 ; } ArrayList < Integer > list = map . get ( current ) ; int count = 0 ; for ( int num : list ) { count += helper ( map , isVisited , num ) ; } isVisited [ current ] = false ; return count ; } private static boolean check ( boolean [ ] isVisited ) { for ( int i = 0 ; i < isVisited . length ; i ++ ) { if ( ! isVisited [ i ] ) return false ; } return true ; } }","import java . util . ArrayList ; import java . util . HashSet ; import java . util . List ; import java . util . Scanner ; import java . util . Set ; public class Main { private static int n ; private static List < List < Integer > > edge ; private static int root ( Set < Integer > set , int from , int i ) { if ( i == n - 1 ) return 1 ; int res = 0 ; for ( int to : edge . get ( from ) ) { if ( ! set . contains ( to ) ) { Set < Integer > nset = new HashSet < > ( ) ; for ( int j : set ) { nset . add ( j ) ; } nset . add ( to ) ; res += root ( nset , to , i + 1 ) ; } } return res ; } public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; edge = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { edge . add ( new ArrayList < > ( ) ) ; } for ( int i = 0 ; i < m ; i ++ ) { int a = sc . nextInt ( ) - 1 ; int b = sc . nextInt ( ) - 1 ; edge . get ( a ) . add ( b ) ; edge . get ( b ) . add ( a ) ; } Set < Integer > set = new HashSet < > ( ) ; set . add ( 0 ) ; System . out . println ( root ( set , 0 , 0 ) ) ; sc . close ( ) ; } }","import java . util . * ; import java . util . stream . IntStream ; public class Main { public static void main ( String [ ] args ) { new Main ( ) . execute ( ) ; } public void execute ( ) { Scanner sc = new Scanner ( System . in ) ; final int N = sc . nextInt ( ) ; final int M = sc . nextInt ( ) ; boolean [ ] [ ] edges = new boolean [ N ] [ N ] ; for ( int i = 0 ; i < M ; i ++ ) { int from = sc . nextInt ( ) - 1 ; int to = sc . nextInt ( ) - 1 ; edges [ from ] [ to ] = edges [ to ] [ from ] = true ; } int [ ] path = IntStream . range ( 0 , N ) . toArray ( ) ; int count = 0 ; do { if ( path [ 0 ] != 0 ) { continue ; } boolean goodPath = true ; for ( int i = 0 ; i < path . length - 1 ; i ++ ) { if ( ! edges [ path [ i ] ] [ path [ i + 1 ] ] ) { goodPath = false ; break ; } } if ( goodPath ) { count += 1 ; } } while ( nextPermutation ( path ) ) ; System . out . println ( count ) ; sc . close ( ) ; } private boolean nextPermutation ( int [ ] array ) { int n = array . length ; int k = n - 1 ; while ( k > 0 && array [ k ] < array [ k - 1 ] ) { k -- ; } if ( k == 0 ) { return false ; } k -= 1 ; int l = n - 1 ; while ( l > k && array [ l ] < array [ k ] ) { l -- ; } int tmp ; tmp = array [ k ] ; array [ k ] = array [ l ] ; array [ l ] = tmp ; for ( int i = k + 1 , j = array . length - 1 ; i < j ; i ++ , j -- ) { tmp = array [ i ] ; array [ i ] = array [ j ] ; array [ j ] = tmp ; } return true ; } }","import java . util . Scanner ; public class Main { static long ans = 0 ; public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; boolean [ ] [ ] path = new boolean [ n + 1 ] [ n + 1 ] ; for ( int i = 0 ; i < m ; i ++ ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; path [ a ] [ b ] = true ; path [ b ] [ a ] = true ; } sc . close ( ) ; boolean [ ] flg = new boolean [ n + 1 ] ; dfs ( flg , path , 1 ) ; System . out . println ( ans ) ; } static void dfs ( boolean [ ] flg , boolean [ ] [ ] path , int node ) { if ( flg [ node ] ) { return ; } flg [ node ] = true ; boolean judge = true ; for ( int i = 1 ; i < flg . length ; i ++ ) { if ( ! flg [ i ] ) { judge = false ; break ; } } if ( judge ) { ans ++ ; return ; } for ( int i = 1 ; i < path [ node ] . length ; i ++ ) { if ( path [ node ] [ i ] ) { boolean [ ] nextFlg = new boolean [ flg . length ] ; System . arraycopy ( flg , 0 , nextFlg , 0 , flg . length ) ; dfs ( nextFlg , path , i ) ; } } } }","import java . math . BigDecimal ; import java . util . * ; public class Main { static Scanner sc = new Scanner ( System . in ) ; static int ans = 0 ; public static void main ( String [ ] args ) { int N = sc . nextInt ( ) ; int M = sc . nextInt ( ) ; boolean [ ] visited = new boolean [ N ] ; boolean [ ] [ ] bridges = new boolean [ N ] [ N ] ; for ( int i = 0 ; i < M ; i ++ ) { int from = sc . nextInt ( ) - 1 ; int to = sc . nextInt ( ) - 1 ; bridges [ from ] [ to ] = bridges [ to ] [ from ] = true ; } visited [ 0 ] = true ; dfs ( N , 0 , bridges , visited ) ; System . out . println ( ans ) ; } private static void dfs ( int N , int from , boolean [ ] [ ] bridges , boolean [ ] visited ) { boolean allVisit = true ; for ( int i = 0 ; i < N ; i ++ ) { allVisit &= visited [ i ] ; } if ( allVisit ) { ans ++ ; return ; } for ( int i = 0 ; i < N ; i ++ ) { if ( bridges [ from ] [ i ] && ! visited [ i ] ) { visited [ i ] = true ; dfs ( N , i , bridges , visited ) ; visited [ i ] = false ; } } } }"],"bleu":0.430649269645123,"rouge_l":0.5009155801190986}
{"id":104,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; out . println ( a > b ? a : b ) ; out . flush ( ) ; } static int l_min ( int [ ] a ) { Arrays . sort ( a ) ; return a [ 0 ] ; } static int l_max ( int [ ] a ) { int l = a . length ; Arrays . sort ( a ) ; return a [ l - 1 ] ; } public static PrintWriter out ; public static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . io . * ; import java . util . * ; import java . lang . Math . * ; public class Main { private static MyScanner scanner ; public static void main ( String [ ] args ) { Main instance = new Main ( ) ; scanner = instance . new MyScanner ( ) ; instance . solve ( ) ; } private void solve ( ) { try { Long counter = 0l ; Long N = scanner . nextLong ( ) ; Long M = scanner . nextLong ( ) ; Long amari ; if ( M > 2 * N ) { counter += N ; M -= 2 * N ; } else { counter += M \/ 2 ; M -= ( M \/ 2 ) * 2 ; } if ( M > 3 ) { counter += M \/ 4 ; } System . out . println ( counter ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } } private class MyScanner { String [ ] s ; int i ; BufferedReader br ; String reg = \" ▁ \" ; MyScanner ( ) { s = new String [ 0 ] ; i = 0 ; br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } public String next ( ) throws IOException { if ( i < s . length ) return s [ i ++ ] ; String line = br . readLine ( ) ; while ( line . equals ( \" \" ) ) { line = br . readLine ( ) ; } s = line . split ( reg , 0 ) ; i = 0 ; return s [ i ++ ] ; } public int nextInt ( ) throws NumberFormatException , IOException { return Integer . parseInt ( next ( ) ) ; } public double nextDouble ( ) throws NumberFormatException , IOException { return Double . parseDouble ( next ( ) ) ; } public long nextLong ( ) throws NumberFormatException , IOException { return Long . parseLong ( next ( ) ) ; } } }","import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . NoSuchElementException ; public class Main { long N , M ; public void solve ( ) { N = nextLong ( ) ; M = nextLong ( ) ; long ans = 0 ; ans = Math . min ( N , M \/ 2 ) ; M -= ans * 2 ; ans += M \/ 4 ; out . println ( ans ) ; } public static void main ( String [ ] args ) { out . flush ( ) ; new Main ( ) . solve ( ) ; out . close ( ) ; } private static final InputStream in = System . in ; private static final PrintWriter out = new PrintWriter ( System . out ) ; private final byte [ ] buffer = new byte [ 2048 ] ; private int p = 0 ; private int buflen = 0 ; private boolean hasNextByte ( ) { if ( p < buflen ) return true ; p = 0 ; try { buflen = in . read ( buffer ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } if ( buflen <= 0 ) return false ; return true ; } public boolean hasNext ( ) { while ( hasNextByte ( ) && ! isPrint ( buffer [ p ] ) ) { p ++ ; } return hasNextByte ( ) ; } private boolean isPrint ( int ch ) { if ( ch >= ' ! ' && ch <= ' ~ ' ) return true ; return false ; } private int nextByte ( ) { if ( ! hasNextByte ( ) ) return - 1 ; return buffer [ p ++ ] ; } public String next ( ) { if ( ! hasNext ( ) ) throw new NoSuchElementException ( ) ; StringBuilder sb = new StringBuilder ( ) ; int b = - 1 ; while ( isPrint ( ( b = nextByte ( ) ) ) ) { sb . appendCodePoint ( b ) ; } return sb . toString ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } public long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } public double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } }","import java . util . * ; import java . lang . * ; import java . math . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long s = sc . nextLong ( ) ; long c = sc . nextLong ( ) ; long ans = Math . min ( s , c \/ 2 ) ; s -= ans ; c -= ( ans * 2 ) ; if ( s == 0 ) { ans += c \/ 4 ; } System . out . println ( ans ) ; sc . close ( ) ; } }","import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . StringTokenizer ; import java . io . IOException ; import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . InputStream ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; MyReader in = new MyReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; TaskC solver = new TaskC ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class TaskC { private long n ; private long m ; public void solve ( int testNumber , MyReader in , PrintWriter out ) { n = in . nextLong ( ) ; m = in . nextLong ( ) ; long lo = 0 , hi = ( long ) 1E12 + 5L ; while ( hi - lo > 1 ) { long mid = ( lo + hi ) \/ 2 ; if ( ok ( mid ) ) { lo = mid ; } else { hi = mid ; } } if ( ok ( hi ) ) { out . println ( hi ) ; } else { out . println ( lo ) ; } } boolean ok ( long mid ) { long s = n ; long c = m ; if ( s < mid ) { c -= 2 * ( mid - s ) ; } if ( c < 0 ) return false ; if ( c < 2 * mid ) return false ; return true ; } } static class MyReader { public BufferedReader reader ; public StringTokenizer tokenizer ; public MyReader ( InputStream stream ) { reader = new BufferedReader ( new InputStreamReader ( stream ) , 32768 ) ; tokenizer = null ; } public String next ( ) { while ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( ) ; } public long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } } }","import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long N = sc . nextLong ( ) ; long M = sc . nextLong ( ) ; long result = 0 ; if ( N * 2 <= M ) { if ( ( M - N * 2 ) >= 4 ) { result = ( ( M - N * 2 ) \/ 4 ) + N ; } else { result = N ; } } else { result = M \/ 2 ; } System . out . println ( result ) ; } }"],"bleu":0.6035116636789077,"rouge_l":0.5661025132097739}
{"id":105,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; out . println ( a > b ? \" ABC \" : \" ABD \" ) ; out . flush ( ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . util . Scanner ; public class Main { private static Scanner sc = new Scanner ( System . in ) ; public static void main ( String args [ ] ) { String s = sc . nextLine ( ) ; long k = sc . nextLong ( ) ; int numOfOnes = 0 ; int ans = 1 ; for ( char ch : s . toCharArray ( ) ) { if ( ch != '1' ) { ans = Integer . valueOf ( String . valueOf ( ch ) ) ; break ; } else { numOfOnes ++ ; } } System . out . println ( k <= numOfOnes ? \"1\" : ans ) ; } }","import java . util . ArrayList ; import java . util . * ; public class Main { static Scanner sc = new Scanner ( System . in ) ; static String i = sc . next ( ) ; static long iga1 = sc . nextLong ( ) ; public static void main ( String [ ] args ) { if ( i . length ( ) > iga1 ) { String iti = i . substring ( 0 , ( int ) iga1 ) ; String [ ] itibara = iti . split ( \" \" ) ; itiiti1 ( iga1 , itibara ) ; } else { String [ ] itibara = i . split ( \" \" ) ; itiiti1 ( iga1 , itibara ) ; } } static void itiiti1 ( long iga11 , String [ ] itibara ) { if ( iga11 > 1000000000 ) { long count = 0L ; for ( long ii = 0 ; ii < iga11 ; ii ++ ) { if ( itibara [ ( int ) ii ] . equals ( \"1\" ) ) { count += 1 ; } else { System . out . println ( itibara [ ( int ) ii ] ) ; break ; } if ( count == iga11 ) { System . out . println ( \"1\" ) ; } } } else { long count = 0L ; for ( long ii = 0 ; ii < iga11 ; ii ++ ) { if ( itibara [ ( int ) ii ] . equals ( \"1\" ) ) { count += 1 ; } else { System . out . println ( itibara [ ( int ) ii ] ) ; break ; } } if ( count == iga11 ) { System . out . println ( \"1\" ) ; } } } }","import java . io . * ; import java . util . * ; import java . lang . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; String s = sc . next ( ) ; long k = sc . nextLong ( ) ; int i ; int l = s . length ( ) ; int ans = 1 ; for ( i = 0 ; i < l ; i ++ ) { if ( k == 0 ) { break ; } if ( ans == 1 && s . charAt ( i ) != '1' ) { ans = s . charAt ( i ) - '0' ; } k -- ; } System . out . println ( ans ) ; } static int l_min ( int [ ] a ) { Arrays . sort ( a ) ; return a [ 0 ] ; } static int l_max ( int [ ] a ) { int l = a . length ; Arrays . sort ( a ) ; return a [ l - 1 ] ; } public static PrintWriter out ; public static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }","import java . util . * ; import static java . lang . System . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String S = sc . next ( ) ; long K = sc . nextLong ( ) ; double days = 5.0 * Math . pow ( 10 , 15 ) ; char ans = S . charAt ( 0 ) ; for ( int i = 0 ; i < S . length ( ) ; i ++ ) { K -= Math . pow ( Character . getNumericValue ( S . charAt ( i ) ) , days ) ; if ( K <= 0 ) { ans = S . charAt ( i ) ; break ; } } out . println ( ans ) ; } }","import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; long k = sc . nextLong ( ) ; sc . close ( ) ; int idx = - 1 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == '1' ) { idx = i ; } else { break ; } } if ( idx == - 1 ) { System . out . println ( s . charAt ( 0 ) ) ; } else if ( idx >= k - 1 ) { System . out . println ( \"1\" ) ; } else { System . out . println ( s . charAt ( idx + 1 ) ) ; } } }"],"bleu":0.8611391235581796,"rouge_l":0.7175419757907069}
{"id":106,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int K = sc . nextInt ( ) ; int [ ] a = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { ans += a [ i ] ; } System . out . println ( ans ) ; } }"],"references":["import java . util . * ; import java . lang . * ; import java . math . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] pr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { pr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( pr ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( pr [ pr . length - 1 - i ] != pr [ pr . length - 1 - i - 1 ] ) { System . out . println ( pr [ pr . length - 1 - i - 1 ] ) ; break ; } } sc . close ( ) ; } }","import java . util . ArrayList ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; ArrayList < Integer > prices = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int price = scanner . nextInt ( ) ; if ( ! prices . contains ( price ) ) { prices . add ( price ) ; } } scanner . close ( ) ; int first = 0 , second = 0 ; for ( int price : prices ) { if ( price > first ) { second = first ; first = price ; } else if ( price > second ) { second = price ; } } System . out . println ( second ) ; } }","import java . util . * ; class Main { static Scanner sc = new Scanner ( System . in ) ; public static void main ( String args [ ] ) { int n = sc . nextInt ( ) ; TreeSet < Integer > set = new TreeSet < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) set . add ( sc . nextInt ( ) ) ; set . pollLast ( ) ; System . out . println ( set . pollLast ( ) ) ; } }","import java . util . ArrayList ; import java . util . Collection ; import java . util . Collections ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int num = sc . nextInt ( ) ; ArrayList < Long > list = new ArrayList < Long > ( ) ; for ( int i = 0 ; i < num ; i ++ ) { long n = sc . nextLong ( ) ; list . add ( n ) ; } Long i = Collections . max ( list ) ; ArrayList < Long > c = new ArrayList < Long > ( ) ; Collections . addAll ( c , i ) ; list . removeAll ( c ) ; Long a = Collections . max ( list ) ; System . out . println ( a ) ; } }","import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { try { Scanner sc = new Scanner ( System . in ) ; int n , ans ; n = Integer . parseInt ( sc . next ( ) ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = Integer . parseInt ( sc . next ( ) ) ; } Arrays . sort ( a ) ; ans = a [ n - 1 ] ; for ( int i = n - 1 ; i > 0 ; i -- ) { if ( a [ i ] > a [ i - 1 ] ) { ans = a [ i - 1 ] ; break ; } } System . out . println ( ans ) ; } catch ( Exception e ) { System . out . println ( \" out \" ) ; } } }"],"bleu":0.7783061898373989,"rouge_l":0.7254549126001101}
{"id":107,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; out . println ( Math . min ( a , b ) ) ; out . flush ( ) ; } static int l_min ( int [ ] a ) { Arrays . sort ( a ) ; return a [ 0 ] ; } static int l_max ( int [ ] a ) { int l = a . length ; Arrays . sort ( a ) ; return a [ l - 1 ] ; } public static PrintWriter out ; public static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . math . BigInteger ; import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] abc = scanner . nextLine ( ) . split ( \" ▁ \" , 3 ) ; BigInteger a = new BigInteger ( abc [ 0 ] ) ; BigInteger b = new BigInteger ( abc [ 1 ] ) ; BigInteger c = new BigInteger ( abc [ 2 ] ) ; BigInteger x = a . multiply ( b ) . multiply ( c ) ; BigInteger mod = new BigInteger ( \"1000000007\" ) ; System . out . println ( x . mod ( mod ) ) ; } }","import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . InputMismatchException ; import java . io . IOException ; import java . io . InputStream ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; FastScanner in = new FastScanner ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; TaskB solver = new TaskB ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class TaskB { public void solve ( int testNumber , FastScanner in , PrintWriter out ) { long mod = 1000000007 ; long ans = 1 ; for ( int i = 0 ; i < 3 ; i ++ ) ans = ans * in . nextLong ( ) % mod ; out . println ( ans ) ; } } static class FastScanner { private InputStream in ; private byte [ ] buffer = new byte [ 1024 ] ; private int bufPointer ; private int bufLength ; public FastScanner ( InputStream in ) { this . in = in ; } private int readByte ( ) { if ( bufPointer >= bufLength ) { if ( bufLength == - 1 ) throw new InputMismatchException ( ) ; bufPointer = 0 ; try { bufLength = in . read ( buffer ) ; } catch ( IOException e ) { throw new InputMismatchException ( ) ; } if ( bufLength <= 0 ) return - 1 ; } return buffer [ bufPointer ++ ] ; } private static boolean isSpaceChar ( int c ) { return c == ' ▁ ' || c == ' \\n ' || c == ' \\r ' || c == ' \\t ' || c == - 1 ; } public long nextLong ( ) { long n = 0 ; int b = readByte ( ) ; while ( isSpaceChar ( b ) ) b = readByte ( ) ; boolean minus = ( b == ' - ' ) ; if ( minus ) b = readByte ( ) ; while ( b >= '0' && b <= '9' ) { n *= 10 ; n += b - '0' ; b = readByte ( ) ; } if ( ! isSpaceChar ( b ) ) throw new NumberFormatException ( ) ; return minus ? - n : n ; } } }","import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . io . UncheckedIOException ; import java . util . StringTokenizer ; import java . io . IOException ; import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . InputStream ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; LightScanner in = new LightScanner ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; B solver = new B ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class B { private static final int MOD = ( int ) 1e9 + 7 ; public void solve ( int testNumber , LightScanner in , PrintWriter out ) { long v = 1 ; for ( int i = 0 ; i < 3 ; i ++ ) { v *= in . longs ( ) ; v %= MOD ; } out . println ( v ) ; } } static class LightScanner { private BufferedReader reader = null ; private StringTokenizer tokenizer = null ; public LightScanner ( InputStream in ) { reader = new BufferedReader ( new InputStreamReader ( in ) ) ; } public String string ( ) { if ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } } return tokenizer . nextToken ( ) ; } public long longs ( ) { return Long . parseLong ( string ( ) ) ; } } }","import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; System . out . println ( sc . nextLong ( ) * sc . nextLong ( ) % 1000000007 * sc . nextLong ( ) % 1000000007 ) ; } }","import java . util . * ; public class Main { static final long MOD = 1000000007L ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long a = sc . nextLong ( ) ; long b = sc . nextLong ( ) ; long c = sc . nextLong ( ) ; long total = a * b ; total %= MOD ; total *= c ; total %= MOD ; System . out . println ( total ) ; } }"],"bleu":0.3989434695481205,"rouge_l":0.6132190213317316}
{"id":108,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { st = new StringTokenizer ( br . readLine ( ) ) ; a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } Arrays . sort ( b ) ; long ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans += b [ i ] ; } System . out . println ( ans ) ; } }"],"references":["import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int p = sc . nextInt ( ) ; int even = 0 ; int odd = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int a = sc . nextInt ( ) ; if ( a % 2 == 0 ) { even ++ ; } else { odd ++ ; } } if ( p == 0 ) { if ( odd == 0 ) { System . out . println ( ( long ) Math . pow ( 2 , n ) ) ; } else { System . out . println ( ( long ) Math . pow ( 2 , n - 1 ) ) ; } } else { if ( odd == 0 ) { System . out . println ( 0 ) ; } else { System . out . println ( ( long ) Math . pow ( 2 , n - 1 ) ) ; } } } }","import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . io . UncheckedIOException ; import java . util . StringTokenizer ; import java . io . IOException ; import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . InputStream ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; LightScanner in = new LightScanner ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; ABiscuits solver = new ABiscuits ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class ABiscuits { public void solve ( int testNumber , LightScanner in , PrintWriter out ) { int n = in . ints ( ) , p = in . ints ( ) ; int f = 0 ; for ( int i = 0 ; i < n ; i ++ ) { f |= in . ints ( ) & 1 ; } if ( f == 1 ) { out . println ( 1L << ( n - 1 ) ) ; } else if ( p == 0 ) { out . println ( 1L << n ) ; } else { out . println ( 0 ) ; } } } static class LightScanner { private BufferedReader reader = null ; private StringTokenizer tokenizer = null ; public LightScanner ( InputStream in ) { reader = new BufferedReader ( new InputStreamReader ( in ) ) ; } public String string ( ) { if ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } } return tokenizer . nextToken ( ) ; } public int ints ( ) { return Integer . parseInt ( string ( ) ) ; } } }","import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int P = sc . nextInt ( ) ; int [ ] A = new int [ N ] ; int e = 0 ; int o = 0 ; long pat = 1 ; for ( int i = 0 ; i < N ; i ++ ) { A [ i ] = sc . nextInt ( ) ; if ( A [ i ] % 2 == 0 ) { o ++ ; } else { e ++ ; } } for ( ; o > 0 ; o -- ) { pat = pat * 2 ; } if ( P == 0 ) { if ( e == 0 ) { System . out . println ( pat ) ; } else { for ( ; e > 1 ; e -- ) { pat = pat * 2 ; } System . out . println ( pat ) ; } } else { if ( e == 0 ) { System . out . println ( 0 ) ; } else { for ( ; e > 1 ; e -- ) { pat = pat * 2 ; } System . out . println ( pat ) ; } } } }","import java . util . * ; import java . awt . * ; import static java . lang . System . * ; import static java . lang . Math . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( in ) ; int n = sc . nextInt ( ) ; int p = sc . nextInt ( ) ; long M0 = 0 , M1 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( sc . nextInt ( ) % 2 == 0 ) M0 ++ ; else M1 ++ ; } long ans = 0 ; long temp = 0 ; if ( p == 0 ) { for ( long i = 0 ; i <= M0 ; i ++ ) { ans += comb ( M0 , i ) ; } long i = 0 ; while ( i * 2 <= M1 ) { temp += comb ( M1 , i * 2 ) ; i ++ ; } } else { long i = 0 ; while ( i * 2 + 1 <= M1 ) { ans += comb ( M1 , 2 * i + 1 ) ; i ++ ; } for ( long j = 0 ; j <= M0 ; j ++ ) { temp += comb ( M0 , j ) ; } } out . println ( ans * temp ) ; } static long comb ( long a , long b ) { if ( b == 0 ) return 1 ; return comb ( a - 1 , b - 1 ) * a \/ b ; } }","import java . util . * ; import java . lang . * ; public class Main { static long dp [ ] [ ] = new long [ 51 ] [ 51 ] ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int p = sc . nextInt ( ) ; int a [ ] = new int [ n ] ; int odd = 0 ; int even = 0 ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; if ( a [ i ] % 2 == 0 ) { even ++ ; } else { odd ++ ; } } long count = 0 ; long sumo = 0 ; long sume = 0 ; if ( p == 0 ) { for ( int i = 0 ; i <= odd ; i += 2 ) { sumo += combination ( odd , i ) ; } for ( int i = 0 ; i <= even ; i ++ ) { sume += combination ( even , i ) ; } count = sumo * sume ; System . out . println ( count ) ; } else { for ( int i = 1 ; i <= odd ; i += 2 ) { sumo += combination ( odd , i ) ; } for ( int i = 0 ; i <= even ; i ++ ) { sume += combination ( even , i ) ; } count = sumo * sume ; System . out . println ( count ) ; } } static long combination ( int n , int k ) { if ( n == k || k == 0 ) { return 1 ; } else if ( dp [ n ] [ k ] != 0 ) { return dp [ n ] [ k ] ; } return dp [ n ] [ k ] = combination ( n - 1 , k ) + combination ( n - 1 , k - 1 ) ; } }"],"bleu":0.572271233571524,"rouge_l":0.5443871732640762}
{"id":109,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; out . println ( Math . max ( a , b ) ) ; out . close ( ) ; } static int l_min ( int [ ] a ) { Arrays . sort ( a ) ; return a [ 0 ] ; } static int l_max ( int [ ] a ) { int l = a . length ; Arrays . sort ( a ) ; return a [ l - 1 ] ; } public static PrintWriter out ; public static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . io . * ; import java . util . * ; import java . math . * ; public class Main { static boolean debug = false ; static boolean debug2 = false ; public static void main ( String [ ] args ) throws java . io . IOException { debug = 1 <= args . length ; debug2 = 2 <= args . length ; BufferedReader in = new BufferedReader ( new InputStreamReader ( System . in ) ) ; String [ ] e = in . readLine ( ) . split ( \" ▁ \" ) ; char b = in . readLine ( ) . charAt ( 0 ) ; String l = in . readLine ( ) ; int n = 0 ; for ( int i = 0 ; i < e . length ; ++ i ) { if ( 0 <= l . indexOf ( e [ i ] ) ) { ++ n ; } } boolean f = 0 <= l . indexOf ( b ) ; switch ( n ) { case 6 : System . out . println ( 1 ) ; break ; case 5 : System . out . println ( f ? 2 : 3 ) ; break ; case 4 : System . out . println ( 4 ) ; break ; case 3 : System . out . println ( 5 ) ; break ; default : System . out . println ( 0 ) ; break ; } } }","import java . util . * ; import static java . lang . System . * ; public class Main { public static void main ( String [ ] $ ) { Scanner sc = new Scanner ( in ) ; HashMap < Integer , Integer > E = new HashMap < > ( ) ; HashMap < Integer , Integer > L = new HashMap < > ( ) ; for ( int i = 0 ; i < 6 ; i ++ ) { int k = sc . nextInt ( ) ; E . put ( k , E . getOrDefault ( k , 0 ) + 1 ) ; } int B = sc . nextInt ( ) ; for ( int i = 0 ; i < 6 ; i ++ ) { int k = sc . nextInt ( ) ; L . put ( k , L . getOrDefault ( k , 0 ) + 1 ) ; } int c = 0 ; for ( Integer k : E . keySet ( ) ) { if ( L . get ( k ) != null ) { if ( E . get ( k ) == L . get ( k ) ) { c += E . get ( k ) ; E . put ( k , 0 ) ; L . put ( k , 0 ) ; } else if ( E . get ( k ) > L . get ( k ) ) { c += L . get ( k ) ; E . put ( k , E . get ( k ) - L . get ( k ) ) ; L . put ( k , 0 ) ; } else { c += E . get ( k ) ; E . put ( k , 0 ) ; L . put ( k , L . get ( k ) - E . get ( k ) ) ; } } } int ans = 0 ; if ( c == 6 ) ans = 1 ; if ( c == 4 ) ans = 4 ; if ( c == 3 ) ans = 5 ; if ( c == 5 ) { int f = 0 ; for ( Integer k : L . keySet ( ) ) { if ( L . get ( k ) > 0 && k == B ) { f ++ ; } } if ( f > 0 ) ans = 2 ; else ans = 3 ; } out . println ( ans ) ; } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; String inputWinNumber = br . readLine ( ) ; String bonusNumber = br . readLine ( ) ; String inputChosenNumber = br . readLine ( ) ; String [ ] winNumbers = inputWinNumber . split ( \" ▁ \" ) ; String [ ] chosenNumbers = inputChosenNumber . split ( \" ▁ \" ) ; int count = 0 ; int bonusFlag = 0 ; for ( String chosenNumber : chosenNumbers ) { for ( String winNumber : winNumbers ) { if ( chosenNumber . equals ( winNumber ) ) { count ++ ; } } if ( chosenNumber . equals ( bonusNumber ) ) { bonusFlag = 1 ; } } int result = 0 ; switch ( count ) { case 0 : case 1 : case 2 : result = 0 ; break ; case 3 : result = 5 ; break ; case 4 : result = 4 ; break ; case 5 : if ( bonusFlag == 1 ) { result = 2 ; } else { result = 3 ; } break ; case 6 : result = 1 ; break ; } System . out . println ( result ) ; } }","import java . util . ArrayList ; import java . util . Scanner ; public class Main { static Scanner s = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { int b , c [ ] = new int [ 6 ] ; ArrayList < Integer > a = new ArrayList < > ( ) ; boolean bonus = false ; int count = 0 ; for ( int i = 0 ; i < 6 ; i ++ ) a . add ( s . nextInt ( ) ) ; b = s . nextInt ( ) ; for ( int i = 0 ; i < 6 ; i ++ ) c [ i ] = s . nextInt ( ) ; for ( int i = 0 ; i < 6 ; i ++ ) { if ( a . remove ( Integer . valueOf ( c [ i ] ) ) ) count ++ ; else bonus |= c [ i ] == b ; } int res = 0 ; switch ( count ) { case 3 : case 4 : res = 8 - count ; break ; case 5 : res = bonus ? 2 : 3 ; break ; case 6 : res = 1 ; break ; } System . out . println ( res ) ; } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; public class Main { public static void main ( String [ ] args ) { try { InputStreamReader isr = new InputStreamReader ( System . in ) ; BufferedReader br = new BufferedReader ( isr ) ; String strArr [ ] = br . readLine ( ) . split ( \" ▁ \" ) ; int e [ ] = new int [ 10 ] ; for ( int i = 0 ; i < 6 ; i ++ ) { int tmp = Integer . parseInt ( strArr [ i ] ) ; e [ tmp ] ++ ; } int bonus = Integer . parseInt ( br . readLine ( ) ) ; strArr = br . readLine ( ) . split ( \" ▁ \" ) ; int l [ ] = new int [ 10 ] ; for ( int i = 0 ; i < 6 ; i ++ ) { int tmp = Integer . parseInt ( strArr [ i ] ) ; l [ tmp ] ++ ; } int count = 0 ; for ( int i = 0 ; i < 10 ; i ++ ) { if ( e [ i ] == 1 && l [ i ] == 1 ) { count ++ ; } } boolean bonusFlag = false ; if ( l [ bonus ] == 1 ) { bonusFlag = true ; } if ( count == 6 ) { System . out . println ( 1 ) ; } else if ( count == 5 ) { if ( bonusFlag ) { System . out . println ( 2 ) ; } else { System . out . println ( 3 ) ; } } else if ( count == 4 ) { System . out . println ( 4 ) ; } else if ( count == 3 ) { System . out . println ( 5 ) ; } else { System . out . println ( 0 ) ; } } catch ( IOException e ) { e . printStackTrace ( ) ; } } }"],"bleu":0.41945914691370656,"rouge_l":0.45205722165301865}
{"id":110,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter pw = new PrintWriter ( System . out ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int m = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] b = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < m ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } long ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { ans = Math . max ( ans , b [ i ] ) ; } } pw . println ( ans ) ; pw . flush ( ) ; pw . close ( ) ; } }"],"references":["import java . awt . * ; import java . util . * ; public class Main { static Scanner s = new Scanner ( System . in ) ; static int g ( ) { return Integer . parseInt ( s . next ( ) ) ; } public static void main ( String [ ] $ ) { Point st = new Point ( g ( ) , g ( ) ) , go = new Point ( g ( ) , g ( ) ) ; if ( st . y > go . y ) { Point buf = go ; go = st ; st = buf ; } Comparator < Point > c = Comparator . comparingDouble ( Point :: getX ) ; TreeSet < Point > p = new TreeSet < > ( st . x < go . x ? c : c . reversed ( ) ) ; for ( int i = g ( ) ; i > 0 ; -- i ) { int x = g ( ) , y = g ( ) ; if ( st . y <= y && y <= go . y ) p . add ( new Point ( x , y ) ) ; } int v = lis ( p . subSet ( st , true , go , true ) ) ; System . out . println ( ( Math . abs ( st . x - go . x ) + Math . abs ( st . y - go . y ) ) * 100L + v * - 20 + ( v == Math . min ( go . y - st . y , Math . abs ( go . x - st . x ) ) + 1 ? v + 1 : v ) * 5 * Math . PI ) ; } static int lis ( NavigableSet < Point > p ) { ArrayList < Integer > l = new ArrayList < > ( ) ; l . add ( Integer . MIN_VALUE ) ; while ( ! p . isEmpty ( ) ) { int y = p . pollFirst ( ) . y ; if ( l . get ( l . size ( ) - 1 ) < y ) l . add ( y ) ; else { int v = Collections . binarySearch ( l , y ) ; if ( v < 0 ) l . set ( ~ v , y ) ; } } return l . size ( ) - 1 ; } }","import java . awt . * ; import java . util . * ; class Main { static Scanner s = new Scanner ( System . in ) ; static int getInt ( ) { return Integer . parseInt ( s . next ( ) ) ; } public static void main ( String [ ] $ ) { Point st = new Point ( getInt ( ) , getInt ( ) ) , go = new Point ( getInt ( ) , getInt ( ) ) ; if ( st . y > go . y ) { Point buf = go ; go = st ; st = buf ; } Comparator < Point > c = Comparator . comparingDouble ( Point :: getX ) ; TreeSet < Point > p = new TreeSet < > ( st . x < go . x ? c : c . reversed ( ) ) ; for ( int i = getInt ( ) ; i > 0 ; -- i ) { int x = getInt ( ) , y = getInt ( ) ; if ( st . y <= y && y <= go . y ) p . add ( new Point ( x , y ) ) ; } int v = lis ( p . subSet ( st , true , go , true ) ) ; System . out . println ( ( Math . abs ( st . x - go . x ) + Math . abs ( st . y - go . y ) ) * 100L + v * - 20 + ( v == Math . min ( go . y - st . y , Math . abs ( go . x - st . x ) ) + 1 ? ( v + 1 ) : v ) * 5 * Math . PI ) ; } private static int lis ( NavigableSet < Point > p ) { if ( p . isEmpty ( ) ) return 0 ; ArrayList < Integer > l = new ArrayList < > ( ) ; l . add ( p . pollFirst ( ) . y ) ; while ( ! p . isEmpty ( ) ) { int y = p . pollFirst ( ) . y ; if ( l . get ( l . size ( ) - 1 ) < y ) l . add ( y ) ; else { int v = Collections . binarySearch ( l , y ) ; if ( v < 0 ) l . set ( ~ v , y ) ; } } return l . size ( ) ; } }"],"bleu":0.165246664828239,"rouge_l":0.34924150612227844}
{"id":111,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter pw = new PrintWriter ( System . out ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int N = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ M ] ; for ( int i = 0 ; i < M ; i ++ ) { a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int [ ] b = new int [ M ] ; for ( int i = 0 ; i < M ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int ans = 0 ; for ( int i = 0 ; i < M ; i ++ ) { for ( int j = 0 ; j < M ; j ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { if ( a [ i ] > b [ j ] ) { ans ++ ; } } } } pw . println ( ans ) ; pw . close ( ) ; } }"],"references":["import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = Integer . parseInt ( sc . next ( ) ) ; int Y = Integer . parseInt ( sc . next ( ) ) ; for ( int a = 0 ; a <= N ; a ++ ) { for ( int b = 0 ; b <= N - a ; b ++ ) { if ( a * 10000 + b * 5000 + ( N - a - b ) * 1000 == Y ) { System . out . println ( a + \" ▁ \" + b + \" ▁ \" + ( N - a - b ) ) ; return ; } } } System . out . println ( \" - 1 ▁ - 1 ▁ - 1\" ) ; } }","import java . io . BufferedReader ; import java . io . InputStreamReader ; public class Main { static final BufferedReader in = new BufferedReader ( new InputStreamReader ( System . in ) ) ; public static void main ( String [ ] args ) throws Exception { String [ ] vals = in . readLine ( ) . split ( \" ▁ \" ) ; int num = Integer . parseInt ( vals [ 0 ] ) ; int price = Integer . parseInt ( vals [ 1 ] ) ; in . close ( ) ; for ( int sen = 0 ; sen <= num ; sen ++ ) { for ( int gosen = 0 ; gosen <= num - sen ; gosen ++ ) { int man = num - sen - gosen ; if ( price == 10000 * man + 5000 * gosen + 1000 * sen ) { System . out . println ( man + \" ▁ \" + gosen + \" ▁ \" + sen ) ; return ; } } } System . out . println ( \" - 1 ▁ - 1 ▁ - 1\" ) ; } }","import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int Y = sc . nextInt ( ) \/ 1000 ; int yukichi = - 1 ; int higuchi = - 1 ; int noguchi = - 1 ; for ( int i = 0 ; i <= N ; i ++ ) { for ( int j = 0 ; j <= N - i ; j ++ ) { if ( Y == N + 9 * i + 4 * j ) { yukichi = i ; higuchi = j ; noguchi = N - yukichi - higuchi ; break ; } } } System . out . println ( yukichi + \" ▁ \" + higuchi + \" ▁ \" + noguchi ) ; sc . close ( ) ; } }","import java . util . Scanner ; public class Main { static int N , Y ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; N = sc . nextInt ( ) ; Y = sc . nextInt ( ) ; sc . close ( ) ; int sen = 0 ; int gsen = 0 ; int jsen = 0 ; boolean f = false ; int pp = 10000 * N ; if ( pp == Y ) { System . out . println ( N + \" ▁ 0 ▁ 0\" ) ; } else { int qq = pp - Y ; for ( int i = 0 ; i < N + 1 ; i ++ ) { for ( int j = 0 ; j < N + 1 ; j ++ ) { if ( i + j > N ) { continue ; } else if ( 5000 * i + 9000 * j == qq ) { f = true ; gsen = i ; sen = j ; jsen = N - i - j ; break ; } else { continue ; } } } if ( ! f ) { System . out . println ( \" - 1 ▁ - 1 ▁ - 1\" ) ; } else { System . out . println ( jsen + \" ▁ \" + gsen + \" ▁ \" + sen ) ; } } } }","import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner reader = new Scanner ( System . in ) ; int N = reader . nextInt ( ) ; int Y = reader . nextInt ( ) ; int max = Y \/ 10000 ; int [ ] ans = new int [ 3 ] ; for ( int i = max ; i >= 0 ; i -- ) { ans [ 0 ] = i ; ans [ 2 ] = ( 5000 * ( N - ans [ 0 ] ) - ( Y - ans [ 0 ] * 10000 ) ) \/ 4000 ; ans [ 1 ] = N - ans [ 0 ] - ans [ 2 ] ; if ( ans [ 0 ] * 10000 + ans [ 1 ] * 5000 + ans [ 2 ] * 1000 == Y && ans [ 0 ] >= 0 && ans [ 1 ] >= 0 && ans [ 2 ] >= 0 ) { System . out . print ( ans [ 0 ] + \" ▁ \" + ans [ 1 ] + \" ▁ \" + ans [ 2 ] ) ; return ; } } System . out . print ( \" - 1 ▁ - 1 ▁ - 1\" ) ; reader . close ( ) ; } }"],"bleu":0.3853948279662291,"rouge_l":0.49517954993576624}
{"id":112,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; out . println ( Math . min ( Math . abs ( a - b ) , Math . abs ( c - c ) ) ) ; out . close ( ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int s = ( a * c ) + ( a * b ) + ( b * c ) ; System . out . print ( s * 2 ) ; } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . OutputStream ; import java . io . PrintWriter ; import java . util . StringTokenizer ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; Task solver = new Task ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class Task { public void solve ( int testNumber , InputReader in , PrintWriter out ) { int A = in . nextInt ( ) ; int B = in . nextInt ( ) ; int C = in . nextInt ( ) ; out . println ( ( A * B + B * C + C * A ) * 2 ) ; } } static class InputReader { public BufferedReader reader ; public StringTokenizer tokenizer ; public InputReader ( InputStream stream ) { reader = new BufferedReader ( new InputStreamReader ( stream ) , 32768 ) ; tokenizer = null ; } public String next ( ) { while ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } public double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } } }","import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; System . out . println ( 2 * ( a * b + a * c + b * c ) ) ; } static int l_min ( int [ ] a ) { Arrays . sort ( a ) ; return a [ 0 ] ; } static int l_max ( int [ ] a ) { int l = a . length ; Arrays . sort ( a ) ; return a [ l - 1 ] ; } public static PrintWriter out ; public static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }","import java . util . * ; import java . util . stream . * ; import static java . lang . System . * ; class Main { static Scanner sc = new Scanner ( System . in ) ; static int nextInt ( ) { return Integer . parseInt ( sc . next ( ) ) ; } static int [ ] nextIntArray ( int n ) { return IntStream . range ( 0 , n ) . map ( i -> nextInt ( ) ) . toArray ( ) ; } static int max ( int ... ar ) { Arrays . sort ( ar ) ; return ar [ ar . length - 1 ] ; } static int min ( int ... ar ) { Arrays . sort ( ar ) ; return ar [ 0 ] ; } static String yesno ( boolean b ) { return b ? \" Yes \" : \" No \" ; } static int maxInt = Integer . MAX_VALUE ; static int minInt = Integer . MIN_VALUE ; public static void main ( String [ ] args ) { int a = nextInt ( ) , b = nextInt ( ) , c = nextInt ( ) ; out . println ( ( a * b + b * c + a * c ) * 2 ) ; } }","import java . util . Scanner ; public class Main { private static Scanner sc = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { int a = sc . nextInt ( ) , b = sc . nextInt ( ) , c = sc . nextInt ( ) ; System . out . println ( a * b * 2 + a * c * 2 + b * c * 2 ) ; } }"],"bleu":0.8874507151024021,"rouge_l":0.8375473711630408}
{"id":113,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans += a [ i ] ; } out . println ( ans ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . util . * ; public class Main { long INF = Long . MAX_VALUE ; public static void main ( String [ ] args ) { new Main ( ) . solve ( ) ; } void solve ( ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; String S = sc . next ( ) ; String T = sc . next ( ) ; char [ ] s = S . toCharArray ( ) ; char [ ] t = T . toCharArray ( ) ; int ans = 2 * N ; lavel : for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < N - ( i ) ; j ++ ) { if ( s [ i + j ] != t [ j ] ) { continue lavel ; } if ( j == N - i - 1 ) { System . out . println ( ( N + i ) ) ; return ; } } } System . out . println ( ans ) ; } }","import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . io . UncheckedIOException ; import java . util . StringTokenizer ; import java . io . IOException ; import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . InputStream ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; LightScanner in = new LightScanner ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; APrefixAndSuffix solver = new APrefixAndSuffix ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class APrefixAndSuffix { public void solve ( int testNumber , LightScanner in , PrintWriter out ) { int n = in . ints ( ) ; String s = in . string ( ) , t = in . string ( ) ; for ( int i = 0 ; i <= n ; i ++ ) { if ( t . startsWith ( s . substring ( i ) ) ) { out . println ( n + i ) ; return ; } } } } static class LightScanner { private BufferedReader reader = null ; private StringTokenizer tokenizer = null ; public LightScanner ( InputStream in ) { reader = new BufferedReader ( new InputStreamReader ( in ) ) ; } public String string ( ) { if ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } } return tokenizer . nextToken ( ) ; } public int ints ( ) { return Integer . parseInt ( string ( ) ) ; } } }","import java . util . * ; import java . io . * ; public class Main { public static int solve ( int N , String S , String T ) { for ( int single = 0 ; single <= N ; single ++ ) { boolean flag = true ; for ( int i = 0 ; i < N - single ; i ++ ) { if ( S . charAt ( i + single ) != T . charAt ( i ) ) flag = false ; } if ( flag ) return N + single ; } return 2 * N ; } public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; String S = sc . next ( ) ; String T = sc . next ( ) ; System . out . println ( solve ( N , S , T ) ) ; } }","import java . util . Scanner ; public class Main { public static void main ( String [ ] srgs ) { Scanner scan = new Scanner ( System . in ) ; int a = scan . nextInt ( ) ; String str1 = scan . next ( ) ; String str2 = scan . next ( ) ; int len = str1 . length ( ) < str2 . length ( ) ? str1 . length ( ) : str2 . length ( ) ; int lon = 0 ; for ( int i = 0 ; i < len ; i ++ ) { if ( str1 . substring ( i , str1 . length ( ) ) . equals ( str2 . substring ( 0 , str2 . length ( ) - i ) ) ) { lon = len - i ; break ; } } System . out . println ( str1 . length ( ) + str2 . length ( ) - lon ) ; } }","import java . io . InputStream ; import java . io . IOException ; import java . io . BufferedReader ; import java . io . InputStreamReader ; class Main { public static void main ( String args [ ] ) { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; try { int n = Integer . parseInt ( br . readLine ( ) ) ; char [ ] s = br . readLine ( ) . toCharArray ( ) , t = br . readLine ( ) . toCharArray ( ) ; for ( int i = 0 ; i <= n ; ++ i ) { boolean ok = true ; for ( int j = 0 ; j < n - i ; ++ j ) { if ( s [ i + j ] != t [ j ] ) { ok = false ; break ; } } if ( ok ) { System . out . println ( n + i ) ; return ; } } } catch ( IOException e ) { e . printStackTrace ( ) ; } } }"],"bleu":0.4880647030829475,"rouge_l":0.5506991392367653}
{"id":114,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int m = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { st = new StringTokenizer ( br . readLine ( ) ) ; a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int [ ] b = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < m ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int count = 0 ; for ( int i = 0 ; i < m ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( a [ i ] > b [ j ] ) { count ++ ; } } } System . out . println ( count ) ; } }"],"references":["import java . util . * ; class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; double inA = sc . nextDouble ( ) ; double inB = sc . nextDouble ( ) ; double A = Math . min ( inA , inB ) ; double B = Math . max ( inA , inB ) ; double r = Math . sqrt ( Math . pow ( A , 2 ) + Math . pow ( B , 2 ) ) ; double p = Math . atan ( A \/ B ) ; int N = sc . nextInt ( ) ; for ( int i = 0 ; i < N ; i ++ ) { double inC = sc . nextDouble ( ) ; double inD = sc . nextDouble ( ) ; double C = Math . min ( inC , inD ) ; double D = Math . max ( inC , inD ) ; if ( C >= A && D >= B ) { System . out . println ( \" YES \" ) ; } else if ( C < A && D < B || r < D ) { System . out . println ( \" NO \" ) ; } else if ( C >= r * Math . cos ( Math . asin ( D \/ r ) - 2 * p ) ) { System . out . println ( \" YES \" ) ; } else { System . out . println ( \" NO \" ) ; } } } }","import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; double a = scan . nextDouble ( ) ; double b = scan . nextDouble ( ) ; if ( b < a ) { double t = a ; a = b ; b = t ; } double center = ( a + b ) \/ Math . sqrt ( 2 ) ; double ridge = Math . atan ( a \/ b ) ; int n = scan . nextInt ( ) ; for ( int i = 0 ; i < n ; ++ i ) { double c = scan . nextDouble ( ) ; double d = scan . nextDouble ( ) ; if ( d < c ) { double t = c ; c = d ; d = t ; } if ( center < c ) { System . out . println ( \" YES \" ) ; continue ; } if ( c < a ) { System . out . println ( \" NO \" ) ; continue ; } double p = Math . PI \/ 4.0 ; double f = 0.0 ; for ( int j = 0 ; j < 50 ; ++ j ) { double x = ( p + f ) \/ 2 ; if ( a * Math . cos ( x ) + b * Math . sin ( x ) >= c ) p = x ; else f = x ; } System . out . println ( Math . min ( b , a * Math . sin ( p ) + b * Math . cos ( p ) ) <= d ? \" YES \" : \" NO \" ) ; } } }"],"bleu":0.27352367851325027,"rouge_l":0.4413412498517397}
{"id":115,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int K = sc . nextInt ( ) ; int [ ] a = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < N ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { ans += b [ i ] ; } System . out . println ( ans ) ; } }"],"references":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int ans [ ] = new int [ n ] ; int a [ ] = new int [ 2 * m ] ; for ( int i = 0 ; i <= 2 * m - 2 ; i = i + 2 ) { a [ i ] = sc . nextInt ( ) ; a [ i + 1 ] = sc . nextInt ( ) ; ans [ a [ i ] - 1 ] ++ ; ans [ a [ i + 1 ] - 1 ] ++ ; } for ( int i = 0 ; i < n ; i ++ ) { System . out . println ( ans [ i ] ) ; } } static int l_min ( int [ ] a ) { Arrays . sort ( a ) ; return a [ 0 ] ; } static int l_max ( int [ ] a ) { int l = a . length ; Arrays . sort ( a ) ; return a [ l - 1 ] ; } public static PrintWriter out ; public static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }","import java . util . Scanner ; public class Main { public static void main ( String [ ] srgs ) { Scanner scan = new Scanner ( System . in ) ; int a = scan . nextInt ( ) ; int b = scan . nextInt ( ) ; int an [ ] = new int [ a ] ; for ( int i = 0 ; i != b ; i ++ ) { int c = scan . nextInt ( ) ; int d = scan . nextInt ( ) ; an [ c - 1 ] ++ ; an [ d - 1 ] ++ ; } for ( int i = 0 ; i != a ; i ++ ) { System . out . println ( an [ i ] ) ; } } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . OutputStream ; import java . io . PrintWriter ; import java . util . StringTokenizer ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; Task solver = new Task ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class Task { public void solve ( int testNumber , InputReader in , PrintWriter out ) { int N = in . nextInt ( ) ; int M = in . nextInt ( ) ; int [ ] a = new int [ M ] ; int [ ] b = new int [ M ] ; for ( int i = 0 ; i < M ; i ++ ) { a [ i ] = in . nextInt ( ) ; b [ i ] = in . nextInt ( ) ; } for ( int i = 1 ; i <= N ; i ++ ) { int ans = 0 ; for ( int j = 0 ; j < M ; j ++ ) { if ( a [ j ] == i || b [ j ] == i ) { ans ++ ; } } out . println ( ans ) ; } } } static class InputReader { public BufferedReader reader ; public StringTokenizer tokenizer ; public InputReader ( InputStream stream ) { reader = new BufferedReader ( new InputStreamReader ( stream ) , 32768 ) ; tokenizer = null ; } public String next ( ) { while ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( ) ; } public char nextChar ( ) { return next ( ) . charAt ( 0 ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } public double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } } }","import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; public class Main { public static void main ( String [ ] args ) throws Exception { BufferedReader input = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer tokenizer = new StringTokenizer ( input . readLine ( ) ) ; int a = Integer . parseInt ( tokenizer . nextToken ( ) ) ; int b = Integer . parseInt ( tokenizer . nextToken ( ) ) ; int [ ] city = new int [ a + 1 ] ; for ( int i = 0 ; i < b ; i ++ ) { tokenizer = new StringTokenizer ( input . readLine ( ) ) ; city [ Integer . parseInt ( tokenizer . nextToken ( ) ) ] ++ ; city [ Integer . parseInt ( tokenizer . nextToken ( ) ) ] ++ ; } StringBuilder output = new StringBuilder ( ) ; for ( int i = 1 ; i <= a ; i ++ ) { output . append ( city [ i ] ) . append ( \" \\n \" ) ; } System . out . print ( output ) ; } }","import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int city = scanner . nextInt ( ) ; int road = scanner . nextInt ( ) ; Integer [ ] list = new Integer [ city ] ; for ( int indexCity = 0 ; indexCity < city ; indexCity ++ ) { list [ indexCity ] = 0 ; } for ( int indexRoad = 0 ; indexRoad < road ; indexRoad ++ ) { int city1 = scanner . nextInt ( ) ; int city2 = scanner . nextInt ( ) ; int temp = list [ city1 - 1 ] ; list [ city1 - 1 ] = temp + 1 ; temp = list [ city2 - 1 ] ; list [ city2 - 1 ] = temp + 1 ; } for ( int indexCity = 0 ; indexCity < city ; indexCity ++ ) { System . out . println ( list [ indexCity ] ) ; } } }"],"bleu":0.7238454607707825,"rouge_l":0.7280699052596267}
{"id":116,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; long [ ] a = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextLong ( ) ; } long [ ] b = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextLong ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextLong ( ) ; } long ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { ans += ( b [ i ] - a [ j ] ) * ( b [ i ] - b [ i ] ) * ( b [ i ] - b [ j ] ) * ( b [ i ] - b [ i ] ) * ( b [ i ] - b [ j ] ) * ( b [ i ] - b [ i ] ) * ( b [ i ] - b [ i ] ) * ( b [ i ] - b [ i ] ) * ( b [ i ] - b [ i ] ) * ( b [ i ] - b [ i ] ) * ( b [ i ] - b [ i ] ) * ( b [ i ] - b [ i ] ) * ( b [ i ] - b [ i ] ) * ( b [ i ] - b [ i ] ) * ( b [ i ] - b [ i ] ) * ( b [ i ] - b [ i ] ) * ( b [ i ] - b [ i ] ) * ( b [ i ] - b [ i ] ) * ( b [ i ] - b [ i ] ) * ( b [ i ] - b [ i ] ) * ( b [ i ] - b [ i ] ) * ( b [ i ] - b [ i ] ) * ( b [ i ] - b [ i ] ) * ( b [ i ] - b [ i ] ) * ( b [ i ] - b [ i"],"references":["import java . util . Scanner ; public class Main { static final int MOD = 1000000007 ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; final long A = sc . nextLong ( ) ; final long B = sc . nextLong ( ) ; final long C = sc . nextLong ( ) ; sc . close ( ) ; long div = getInverse ( getMod ( A * ( B + C ) - B * C ) ) ; long c = getMod ( getMod ( B * ( C - A ) ) * div ) ; long r = getMod ( getMod ( C * ( B - A ) ) * div ) ; System . out . println ( r + \" ▁ \" + c ) ; } static long getPower ( long a , int n ) { if ( n == 0 ) { return 1 ; } else if ( n % 2 == 0 ) { return getPower ( getMod ( a * a ) , n \/ 2 ) ; } else { return getMod ( a * getPower ( a , n - 1 ) ) ; } } static long getInverse ( long a ) { return getPower ( a , MOD - 2 ) ; } static long getMod ( long a ) { if ( a >= 0 ) { return a % MOD ; } else { return MOD + a % MOD ; } } }"],"bleu":0.11369941887890574,"rouge_l":0.2947392187852788}
{"id":117,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int K = sc . nextInt ( ) ; int [ ] a = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { ans += a [ i ] ; } System . out . println ( ans ) ; } }"],"references":["import java . util . * ; import static java . lang . System . * ; public class Main { public static void main ( String [ ] $ ) { Scanner sc = new Scanner ( in ) ; int n = sc . nextInt ( ) ; long ans = 1 ; for ( int i = 0 ; i < n ; i ++ ) { long t = sc . nextLong ( ) ; long g = gcd ( ans , t ) ; ans = t \/ g * ans ; } out . println ( ans ) ; } static long gcd ( long a , long b ) { long temp ; while ( ( temp = a % b ) != 0 ) { a = b ; b = temp ; } return b ; } }","import java . util . Arrays ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner stdIn = new Scanner ( System . in ) ; int N = stdIn . nextInt ( ) ; long T [ ] = new long [ N ] ; int z = 0 , s = 0 , t = 0 ; long y = 0 , x = 0 , w = 0 ; while ( z < N ) { T [ z ] = stdIn . nextLong ( ) ; z ++ ; } z = 0 ; Arrays . sort ( T ) ; while ( z < N - 1 ) { y = T [ z ] ; x = T [ z + 1 ] ; while ( true ) { if ( x == y ) { s = 2 ; break ; } if ( x > y ) { s = 0 ; if ( x % y == 0 ) break ; else { w = y ; y = x % y ; x = w ; } } if ( y > x ) { s = 1 ; if ( y % x == 0 ) break ; else { w = x ; x = y % x ; y = w ; } } } if ( s == 0 ) T [ z + 1 ] = T [ z ] \/ y * T [ z + 1 ] ; if ( s == 1 ) T [ z + 1 ] = T [ z ] \/ x * T [ z + 1 ] ; if ( s == 2 ) t = 0 ; z ++ ; } System . out . println ( T [ z ] ) ; } }","import java . util . * ; import java . lang . * ; import java . math . * ; class Main { static int n ; static long [ ] times ; static int m ; static long ans ; static int [ ] rate ; static int var ; static int ansmin ; static int ansmax ; static int [ ] w ; static int [ ] ww ; static boolean [ ] visit ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; n = sc . nextInt ( ) ; ans = 1 ; times = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { times [ i ] = sc . nextLong ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { ans = lcm ( ans , times [ i ] ) ; } System . out . println ( ans ) ; sc . close ( ) ; } public static long gcd ( long a , long b ) { if ( a < b ) { long tmpp = a ; a = b ; b = tmpp ; } if ( b == 0 ) { return a ; } else { return gcd ( b , a % b ) ; } } public static long lcm ( long a , long b ) { long gcd = gcd ( a , b ) ; return a \/ gcd * b ; } public static void dfs ( int placenow ) { visit [ placenow ] = true ; boolean success = true ; for ( int i = 0 ; i < n ; i ++ ) { if ( visit [ i ] == false ) { success = false ; break ; } } if ( success ) { ans ++ ; visit [ placenow ] = false ; return ; } for ( int i = 0 ; i < m ; i ++ ) { if ( w [ i ] == placenow && visit [ ww [ i ] ] == false ) { dfs ( ww [ i ] ) ; } else if ( ww [ i ] == placenow && visit [ w [ i ] ] == false ) { dfs ( w [ i ] ) ; } else { continue ; } } visit [ placenow ] = false ; return ; } }","import java . math . BigInteger ; import java . util . stream . IntStream ; public class Main { private static java . util . Scanner scanner = new java . util . Scanner ( System . in ) ; public static void main ( String [ ] args ) { System . out . println ( lcm ( IntStream . range ( 0 , scanner . nextInt ( ) ) . mapToLong ( i -> scanner . nextLong ( ) ) . toArray ( ) ) ) ; } public static long lcm ( long ... array ) { BigInteger j = BigInteger . valueOf ( array [ 0 ] ) , temp ; for ( int i = 1 ; i < array . length ; i ++ ) j = j . multiply ( temp = BigInteger . valueOf ( array [ i ] ) ) . divide ( j . gcd ( temp ) ) ; return j . longValue ( ) ; } }","import java . util . * ; import static java . lang . System . * ; public class Main { public static void main ( String [ ] args ) { long a = 1000000000000000000L ; Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; long [ ] T = new long [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { T [ i ] = sc . nextLong ( ) ; } solver ( N , T ) ; } public static void solver ( int N , long [ ] T ) { long ans = 1 ; for ( int n = 0 ; n < N ; n ++ ) { ans = lcm ( ans , T [ n ] ) ; } out . println ( ans ) ; } static long gcd ( long m , long n ) { if ( m < n ) return gcd ( n , m ) ; if ( n == 0 ) return m ; return gcd ( n , m % n ) ; } static long lcm ( long m , long n ) { return m * ( n \/ gcd ( m , n ) ) ; } }"],"bleu":0.6961187983196714,"rouge_l":0.6009119225428754}
{"id":118,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . OutputStream ; import java . io . PrintWriter ; import java . util . StringTokenizer ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; Task solver = new Task ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class Task { public void solve ( int testNumber , InputReader in , PrintWriter out ) { int N = in . nextInt ( ) ; int A = in . nextInt ( ) ; int B = in . nextInt ( ) ; if ( N % 2 == 0 ) { out . println ( A + B ) ; } else { out . println ( B - A ) ; } } } static class InputReader { public BufferedReader reader ; public StringTokenizer tokenizer ; public InputReader ( InputStream stream ) { reader = new BufferedReader ( new InputStreamReader ( stream ) , 32768 ) ; tokenizer = null ; } public String next ( ) { while ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } } }"],"references":["import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int buf = n \/ 2 ; System . out . println ( buf * ( n - buf ) ) ; } }","import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { PrintWriter out = new PrintWriter ( System . out ) ; InputStreamScanner in = new InputStreamScanner ( System . in ) ; new Main ( ) . solve ( in , out ) ; out . flush ( ) ; } private void solve ( InputStreamScanner in , PrintWriter out ) { int a = in . nextInt ( ) ; int e = a \/ 2 ; int o = a % 2 == 0 ? e : e + 1 ; out . println ( e * o ) ; } static class InputStreamScanner { private InputStream in ; private byte [ ] buf = new byte [ 1024 ] ; private int len = 0 ; private int off = 0 ; InputStreamScanner ( InputStream in ) { this . in = in ; } String next ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( int b = skip ( ) ; ! isSpace ( b ) ; ) { sb . appendCodePoint ( b ) ; b = read ( ) ; } return sb . toString ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } char nextChar ( ) { return ( char ) skip ( ) ; } int skip ( ) { for ( int b ; ( b = read ( ) ) != - 1 ; ) { if ( ! isSpace ( b ) ) { return b ; } } return - 1 ; } private boolean isSpace ( int c ) { return c < 33 || c > 126 ; } private int read ( ) { if ( len == - 1 ) { throw new InputMismatchException ( \" End ▁ of ▁ Input \" ) ; } if ( off >= len ) { off = 0 ; try { len = in . read ( buf ) ; } catch ( IOException e ) { throw new InputMismatchException ( e . getMessage ( ) ) ; } if ( len <= 0 ) { return - 1 ; } } return buf [ off ++ ] ; } } }","import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { new Main ( ) . solveA ( ) ; } private void solveA ( ) { Scanner scanner = null ; int numK = 0 ; int eqaC = 0 ; int oddC = 0 ; try { scanner = new Scanner ( System . in ) ; numK = scanner . nextInt ( ) ; for ( int i = 1 ; i <= numK ; i ++ ) { if ( i % 2 == 0 ) { eqaC ++ ; } else { oddC ++ ; } } System . out . println ( eqaC * oddC ) ; } finally { if ( scanner != null ) { scanner . close ( ) ; } } } private void solveB ( ) { Scanner scanner = null ; int numN = 0 ; int numK = 0 ; int numS = 0 ; try { scanner = new Scanner ( System . in ) ; numN = scanner . nextInt ( ) ; System . out . println ( \" \" ) ; } finally { if ( scanner != null ) { scanner . close ( ) ; } } } private void solveC ( ) { Scanner scanner = null ; int numN = 0 ; int numK = 0 ; int numS = 0 ; try { scanner = new Scanner ( System . in ) ; numN = scanner . nextInt ( ) ; System . out . println ( \" \" ) ; } finally { if ( scanner != null ) { scanner . close ( ) ; } } } private void solveD ( ) { Scanner scanner = null ; int numN = 0 ; int numK = 0 ; int numS = 0 ; try { scanner = new Scanner ( System . in ) ; numN = scanner . nextInt ( ) ; System . out . println ( \" \" ) ; } finally { if ( scanner != null ) { scanner . close ( ) ; } } } }","import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { try { Scanner sc = new Scanner ( System . in ) ; int k ; k = Integer . parseInt ( sc . next ( ) ) ; if ( k % 2 == 0 ) { System . out . println ( ( k \/ 2 ) * ( k \/ 2 ) ) ; } else { System . out . println ( ( k \/ 2 ) * ( k \/ 2 + 1 ) ) ; } } catch ( Exception e ) { System . out . println ( \" out \" ) ; } } }","import java . util . Scanner ; import java . util . stream . IntStream ; public class Main { public static String process ( int K ) { final int sum = IntStream . range ( 1 , K + 1 ) . map ( i -> ( ( K - i ) + 1 ) \/ 2 ) . sum ( ) ; return String . valueOf ( sum ) ; } public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int K = sc . nextInt ( ) ; final String result = process ( K ) ; System . out . println ( result ) ; } }"],"bleu":0.5009877884404431,"rouge_l":0.6481250958764935}
{"id":119,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( b [ i ] > b [ j ] ) { count ++ ; } } } System . out . println ( count ) ; } }"],"references":["import java . util . Arrays ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner reader = new Scanner ( System . in ) ; int [ ] [ ] arr = new int [ 3 ] [ 3 ] ; int [ ] A = new int [ 2 ] ; int [ ] B = new int [ 2 ] ; Arrays . fill ( A , 101 ) ; Arrays . fill ( B , 101 ) ; String ans = \" Yes \" ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { arr [ i ] [ j ] = reader . nextInt ( ) ; } } A [ 0 ] = arr [ 0 ] [ 0 ] - arr [ 1 ] [ 0 ] ; A [ 1 ] = arr [ 1 ] [ 0 ] - arr [ 2 ] [ 0 ] ; B [ 0 ] = arr [ 0 ] [ 0 ] - arr [ 0 ] [ 1 ] ; B [ 1 ] = arr [ 0 ] [ 1 ] - arr [ 0 ] [ 2 ] ; for ( int i = 1 ; i < 3 ; i ++ ) { for ( int j = 1 ; j < 3 ; j ++ ) { if ( arr [ i - 1 ] [ j ] - A [ i - 1 ] != arr [ i ] [ j ] || arr [ i ] [ j - 1 ] - B [ j - 1 ] != arr [ i ] [ j ] ) { ans = \" No \" ; } } } System . out . print ( ans ) ; reader . close ( ) ; } }","import java . io . PrintStream ; import java . util . Scanner ; public class Main { static void exec ( Scanner in , PrintStream out ) { int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i += 1 ) { for ( int j = 0 ; j < 3 ; j += 1 ) { c [ i ] [ j ] = in . nextInt ( ) ; } } for ( int i = 0 ; i <= 100 ; i += 1 ) { int a1 = i ; int b1 = c [ 0 ] [ 0 ] - a1 ; int b2 = c [ 0 ] [ 1 ] - a1 ; int b3 = c [ 0 ] [ 2 ] - a1 ; int a2 = c [ 1 ] [ 0 ] - b1 ; if ( a2 + b2 != c [ 1 ] [ 1 ] || a2 + b3 != c [ 1 ] [ 2 ] ) { continue ; } int a3 = c [ 2 ] [ 0 ] - b1 ; if ( a3 + b2 != c [ 2 ] [ 1 ] || a3 + b3 != c [ 2 ] [ 2 ] ) { continue ; } out . println ( \" Yes \" ) ; return ; } out . println ( \" No \" ) ; } public static void main ( String [ ] args ) { exec ( new Scanner ( System . in ) , System . out ) ; } }","public class Main { private static java . util . Scanner scanner = new java . util . Scanner ( System . in ) ; public static void main ( String [ ] args ) { int max1 = 100 , max2 = 100 , max3 = 100 , a [ ] = new int [ 9 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { max1 = Math . min ( max1 , a [ i * 3 ] = scanner . nextInt ( ) ) ; max2 = Math . min ( max2 , a [ i * 3 + 1 ] = scanner . nextInt ( ) ) ; max3 = Math . min ( max3 , a [ i * 3 + 2 ] = scanner . nextInt ( ) ) ; } System . out . println ( ( a [ 0 ] - max1 == a [ 1 ] - max2 && a [ 1 ] - max2 == a [ 2 ] - max3 ) && ( a [ 3 ] - max1 == a [ 4 ] - max2 && a [ 4 ] - max2 == a [ 5 ] - max3 ) && ( a [ 6 ] - max1 == a [ 7 ] - max2 && a [ 7 ] - max2 == a [ 8 ] - max3 ) ? \" Yes \" : \" No \" ) ; } }","import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int [ ] c = new int [ 9 ] ; for ( int i = 0 ; i < 9 ; i ++ ) { c [ i ] = sc . nextInt ( ) ; } sc . close ( ) ; if ( c [ 3 ] - c [ 0 ] == c [ 4 ] - c [ 1 ] && c [ 3 ] - c [ 0 ] == c [ 5 ] - c [ 2 ] && c [ 6 ] - c [ 3 ] == c [ 7 ] - c [ 4 ] && c [ 6 ] - c [ 3 ] == c [ 8 ] - c [ 5 ] && c [ 1 ] - c [ 0 ] == c [ 4 ] - c [ 3 ] && c [ 1 ] - c [ 0 ] == c [ 7 ] - c [ 6 ] && c [ 2 ] - c [ 1 ] == c [ 5 ] - c [ 4 ] && c [ 2 ] - c [ 1 ] == c [ 8 ] - c [ 7 ] ) { System . out . println ( \" Yes \" ) ; } else { System . out . println ( \" No \" ) ; } } }","import java . util . * ; import static java . lang . System . * ; public class Main { public static void main ( String [ ] $ ) { Scanner sc = new Scanner ( in ) ; int [ ] [ ] c = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] a = new int [ 3 ] ; int [ ] b = new int [ 3 ] ; for ( int i = 0 ; i <= 100 ; i ++ ) { b [ 0 ] = i ; a [ 0 ] = c [ 0 ] [ 0 ] - i ; a [ 1 ] = c [ 1 ] [ 0 ] - i ; a [ 2 ] = c [ 2 ] [ 0 ] - i ; b [ 1 ] = c [ 0 ] [ 1 ] - c [ 0 ] [ 0 ] + i ; b [ 2 ] = c [ 0 ] [ 2 ] - c [ 0 ] [ 0 ] + i ; int d = 0 ; for ( int j = 1 ; j <= 2 ; j ++ ) { for ( int k = 1 ; k <= 2 ; k ++ ) { if ( a [ j ] + b [ k ] != c [ j ] [ k ] ) d ++ ; } } if ( d == 0 ) { out . println ( \" Yes \" ) ; break ; } else if ( i == 100 ) out . println ( \" No \" ) ; } } }"],"bleu":0.5137231137055872,"rouge_l":0.47904064522975703}
{"id":120,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] A = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { A [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { ans += A [ i ] ; } System . out . println ( ans ) ; } }"],"references":["import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; ArrayList < Integer > A = new ArrayList < > ( ) ; ArrayList < Integer > B = new ArrayList < > ( ) ; for ( int i = 0 ; i < 3 ; i ++ ) { int a = sc . nextInt ( ) ; A . add ( a ) ; B . add ( a ) ; } Collections . sort ( A , Comparator . reverseOrder ( ) ) ; for ( int i = 0 ; i < A . size ( ) ; i ++ ) { System . out . println ( A . indexOf ( B . get ( i ) ) + 1 ) ; } } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . OutputStream ; import java . io . PrintWriter ; import java . util . StringTokenizer ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; Task solver = new Task ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class Task { public void solve ( int testNumber , InputReader in , PrintWriter out ) { int A = in . nextInt ( ) ; int B = in . nextInt ( ) ; int C = in . nextInt ( ) ; int a = 1 ; int b = 1 ; int c = 1 ; if ( A < B ) a ++ ; else b ++ ; if ( A < C ) a ++ ; else c ++ ; if ( B < C ) b ++ ; else c ++ ; out . println ( a ) ; out . println ( b ) ; out . println ( c ) ; } } static class InputReader { public BufferedReader reader ; public StringTokenizer tokenizer ; public InputReader ( InputStream stream ) { reader = new BufferedReader ( new InputStreamReader ( stream ) , 32768 ) ; tokenizer = null ; } public String next ( ) { while ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } } }","import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int A = scan . nextInt ( ) ; int B = scan . nextInt ( ) ; int C = scan . nextInt ( ) ; if ( A < B && B < C ) { System . out . println ( 3 ) ; System . out . println ( 2 ) ; System . out . println ( 1 ) ; } else if ( A < C && C < B ) { System . out . println ( 3 ) ; System . out . println ( 1 ) ; System . out . println ( 2 ) ; } else if ( B < C && C < A ) { System . out . println ( 1 ) ; System . out . println ( 3 ) ; System . out . println ( 2 ) ; } else if ( B < A && A < C ) { System . out . println ( 2 ) ; System . out . println ( 3 ) ; System . out . println ( 1 ) ; } else if ( C < A && A < B ) { System . out . println ( 2 ) ; System . out . println ( 1 ) ; System . out . println ( 3 ) ; } else if ( C < B && B < A ) { System . out . println ( 1 ) ; System . out . println ( 2 ) ; System . out . println ( 3 ) ; } } }","import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; int x [ ] = new int [ 3 ] ; x [ 0 ] = sc . nextInt ( ) ; x [ 1 ] = sc . nextInt ( ) ; x [ 2 ] = sc . nextInt ( ) ; int a [ ] = new int [ 3 ] ; a [ 0 ] = x [ 0 ] ; a [ 1 ] = x [ 1 ] ; a [ 2 ] = x [ 2 ] ; Arrays . sort ( x ) ; int ans [ ] = new int [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { if ( a [ i ] > x [ 1 ] ) { ans [ i ] = 1 ; } else if ( a [ i ] == x [ 1 ] ) { ans [ i ] = 2 ; } else { ans [ i ] = 3 ; } System . out . println ( ans [ i ] ) ; } } static int l_min ( int [ ] a ) { Arrays . sort ( a ) ; return a [ 0 ] ; } static int l_max ( int [ ] a ) { int l = a . length ; Arrays . sort ( a ) ; return a [ l - 1 ] ; } public static PrintWriter out ; public static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }","import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int a = scan . nextInt ( ) ; int b = scan . nextInt ( ) ; int c = scan . nextInt ( ) ; if ( a > b && b > c && a > c ) { System . out . println ( 1 + \" \\n \" + 2 + \" \\n \" + 3 ) ; } if ( a > b && b < c && a > c ) { System . out . println ( 1 + \" \\n \" + 3 + \" \\n \" + 2 ) ; } if ( a < b && b > c && a > c ) { System . out . println ( 2 + \" \\n \" + 1 + \" \\n \" + 3 ) ; } if ( a < b && b > c && a < c ) { System . out . println ( 3 + \" \\n \" + 1 + \" \\n \" + 2 ) ; } if ( a < b && b < c && a < c ) { System . out . println ( 3 + \" \\n \" + 2 + \" \\n \" + 1 ) ; } if ( a > b && b < c && a < c ) { System . out . println ( 2 + \" \\n \" + 3 + \" \\n \" + 1 ) ; } } }"],"bleu":0.5790129197975313,"rouge_l":0.6270026189356667}
{"id":121,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { st = new StringTokenizer ( br . readLine ( ) ) ; a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; count ++ ; } } System . out . println ( count ) ; } }"],"references":["import java . util . * ; import java . io . * ; import java . awt . geom . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringBuilder sb = new StringBuilder ( ) ; int n = Integer . parseInt ( br . readLine ( ) ) ; Node [ ] nodes = new Node [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { nodes [ i ] = new Node ( i ) ; } for ( int i = 0 ; i < n - 1 ; i ++ ) { String [ ] s = br . readLine ( ) . split ( \" ▁ \" ) ; int a = Integer . parseInt ( s [ 0 ] ) - 1 ; int b = Integer . parseInt ( s [ 1 ] ) - 1 ; nodes [ a ] . adj . add ( nodes [ b ] ) ; nodes [ b ] . adj . add ( nodes [ a ] ) ; } if ( solve ( nodes [ 0 ] , - 1 ) != 0 ) { System . out . println ( \" Alice \" ) ; } else { System . out . println ( \" Bob \" ) ; } } static int solve ( Node a , int from ) { if ( a . adj . size ( ) == 1 && a . i != 0 ) { return 0 ; } int ans = 0 ; for ( Node n : a . adj ) { if ( n . i != from ) { ans ^= 1 + solve ( n , a . i ) ; } } return ans ; } } class Node { int i ; ArrayList < Node > adj ; public Node ( int ii ) { i = ii ; adj = new ArrayList < Node > ( ) ; } }","import java . util . * ; public class Main { static ArrayList [ ] edge ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; edge = new ArrayList [ N + 1 ] ; for ( int i = 1 ; i < N + 1 ; i ++ ) { edge [ i ] = new ArrayList < Integer > ( ) ; } for ( int i = 0 ; i < N - 1 ; i ++ ) { int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; edge [ x ] . add ( y ) ; edge [ y ] . add ( x ) ; } String ans = \" Alice \" ; if ( dfs ( 1 , 0 ) == 0 ) ans = \" Bob \" ; System . out . println ( ans ) ; } public static int dfs ( int v , int p ) { ArrayList < Integer > list = edge [ v ] ; int ret = 0 ; for ( int i = 0 ; i < list . size ( ) ; i ++ ) { int u = list . get ( i ) ; if ( u != p ) { ret = ( ret ^ ( dfs ( u , v ) + 1 ) ) ; } } return ret ; } } Note : . \/ Main . java uses unchecked or unsafe operations . Note : Recompile with - Xlint : unchecked for details .","import java . util . ArrayList ; import java . util . List ; import java . util . HashSet ; import java . util . Scanner ; import java . util . Set ; class Main { static int grundy ( int v , int pare ) { int res = 0 ; for ( int u : Edge [ v ] ) if ( u != pare ) res ^= ( 1 + grundy ( u , v ) ) ; return res ; } static List < Integer > Edge [ ] ; public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int N = scan . nextInt ( ) ; Edge = new ArrayList [ N ] ; for ( int i = 0 ; i < N ; ++ i ) Edge [ i ] = new ArrayList < > ( ) ; for ( int i = 0 ; i < N - 1 ; ++ i ) { int x = scan . nextInt ( ) - 1 ; int y = scan . nextInt ( ) - 1 ; Edge [ x ] . add ( y ) ; Edge [ y ] . add ( x ) ; } if ( grundy ( 0 , - 1 ) == 0 ) { System . out . println ( \" Bob \" ) ; } else { System . out . println ( \" Alice \" ) ; } } } Note : . \/ Main . java uses unchecked or unsafe operations . Note : Recompile with - Xlint : unchecked for details ."],"bleu":0.4966889911531073,"rouge_l":0.4744183056948194}
{"id":122,"predictions":["import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; } public static long mod = 17352642619633L ; void run ( FastScanner in , PrintWriter out ) { int N = in . nextInt ( ) ; int [ ] a = new int [ N ] ; int [ ] b = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { a [ i ] = in . nextInt ( ) ; b [ i ] = in . nextInt ( ) ; } for ( int i = 0 ; i < N ; i ++ ) { b [ i ] = in . nextInt ( ) ; } long ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < N ; j ++ ) { ans += a [ i ] ; } out . println ( ans ) ; } } static class FastScanner { BufferedReader br ; StringTokenizer st ; public FastScanner ( InputStream in ) { br = new BufferedReader ( new InputStreamReader ( in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . util . HashMap ; import java . util . HashSet ; import java . util . Map ; import java . util . Scanner ; import java . util . Set ; public class Main { private static Map < Integer , Set < Integer > > neighborsMap = new HashMap < > ( ) ; private static Set < Integer > p = new HashSet < Integer > ( ) ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; final int N = sc . nextInt ( ) ; final int G = sc . nextInt ( ) ; final int E = sc . nextInt ( ) ; for ( int i = 0 ; i <= N ; i ++ ) neighborsMap . put ( i , new HashSet < Integer > ( ) ) ; for ( int i = 0 ; i < G ; i ++ ) p . add ( sc . nextInt ( ) ) ; for ( int i = 0 ; i < E ; i ++ ) { int id1 = sc . nextInt ( ) ; int id2 = sc . nextInt ( ) ; neighborsMap . get ( id1 ) . add ( id2 ) ; neighborsMap . get ( id2 ) . add ( id1 ) ; } sc . close ( ) ; int ans = 0 ; while ( p . size ( ) > 0 && calcMaxFlow ( 0 , new HashSet < Integer > ( ) ) ) { ans ++ ; } System . out . println ( ans ) ; } private static boolean calcMaxFlow ( int currentId , Set < Integer > visited ) { visited . add ( currentId ) ; if ( p . contains ( currentId ) ) { p . remove ( currentId ) ; return true ; } Integer [ ] neighbors = neighborsMap . get ( currentId ) . toArray ( new Integer [ neighborsMap . get ( currentId ) . size ( ) ] ) ; if ( neighbors . length == 0 ) { return false ; } for ( int n : neighbors ) { if ( visited . contains ( n ) ) { continue ; } neighborsMap . get ( currentId ) . remove ( n ) ; if ( ! calcMaxFlow ( n , visited ) ) { neighborsMap . get ( currentId ) . add ( n ) ; } else { return true ; } } visited . remove ( currentId ) ; return false ; } }"],"bleu":0.2778409087919457,"rouge_l":0.42815094339622645}
{"id":123,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int A = sc . nextInt ( ) ; int B = sc . nextInt ( ) ; int C = sc . nextInt ( ) ; int D = sc . nextInt ( ) ; int D = sc . nextInt ( ) ; int D = sc . nextInt ( ) ; int D = sc . nextInt ( ) ; int D = sc . nextInt ( ) ; if ( D < D ) { System . out . println ( D - D ) ; } else { System . out . println ( D - D ) ; } } }"],"references":["import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { int x , a , b ; Scanner sc = new Scanner ( System . in ) ; x = sc . nextInt ( ) ; a = sc . nextInt ( ) ; b = sc . nextInt ( ) ; simpleDist ( x , a , b ) ; } private static void simpleDist ( int x , int a , int b ) { int max = 1000 , min = 1 ; if ( ( x <= max && a <= max && b <= max ) && ( x >= min && a >= min && b >= min ) ) { String res = Math . abs ( x - a ) < Math . abs ( x - b ) ? \" A \" : \" B \" ; System . out . println ( res ) ; } } }","import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { PrintWriter out = new PrintWriter ( System . out ) ; InputStreamScanner in = new InputStreamScanner ( System . in ) ; new Main ( ) . solve ( in , out ) ; out . flush ( ) ; } private void solve ( InputStreamScanner in , PrintWriter out ) { int x = in . nextInt ( ) ; int a = in . nextInt ( ) ; int b = in . nextInt ( ) ; out . println ( Math . abs ( x - a ) > Math . abs ( x - b ) ? \" B \" : \" A \" ) ; } static class InputStreamScanner { private InputStream in ; private byte [ ] buf = new byte [ 1024 ] ; private int len = 0 ; private int off = 0 ; InputStreamScanner ( InputStream in ) { this . in = in ; } String next ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( int b = skip ( ) ; ! isSpace ( b ) ; ) { sb . appendCodePoint ( b ) ; b = read ( ) ; } return sb . toString ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } char nextChar ( ) { return ( char ) skip ( ) ; } int skip ( ) { for ( int b ; ( b = read ( ) ) != - 1 ; ) { if ( ! isSpace ( b ) ) { return b ; } } return - 1 ; } private boolean isSpace ( int c ) { return c < 33 || c > 126 ; } private int read ( ) { if ( len == - 1 ) { throw new InputMismatchException ( \" End ▁ of ▁ Input \" ) ; } if ( off >= len ) { off = 0 ; try { len = in . read ( buf ) ; } catch ( IOException e ) { throw new InputMismatchException ( e . getMessage ( ) ) ; } if ( len <= 0 ) { return - 1 ; } } return buf [ off ++ ] ; } } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . OutputStream ; import java . io . PrintWriter ; import java . util . StringTokenizer ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; Task solver = new Task ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class Task { public void solve ( int testNumber , InputReader in , PrintWriter out ) { int x = in . nextInt ( ) ; int a = in . nextInt ( ) ; int b = in . nextInt ( ) ; if ( Math . abs ( x - a ) < Math . abs ( x - b ) ) { out . println ( \" A \" ) ; } else { out . println ( \" B \" ) ; } } } static class InputReader { public BufferedReader reader ; public StringTokenizer tokenizer ; public InputReader ( InputStream stream ) { reader = new BufferedReader ( new InputStreamReader ( stream ) , 32768 ) ; tokenizer = null ; } public String next ( ) { while ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } } }","import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int x = sc . nextInt ( ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int diff_xa = ( x - a > 0 ) ? x - a : - 1 * ( x - a ) ; int diff_xb = ( x - b > 0 ) ? x - b : - 1 * ( x - b ) ; System . out . println ( ( diff_xa < diff_xb ) ? \" A \" : \" B \" ) ; } }","import java . io . PrintWriter ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; int N = Integer . parseInt ( sc . next ( ) ) ; int A = Integer . parseInt ( sc . next ( ) ) ; int B = Integer . parseInt ( sc . next ( ) ) ; boolean flg = Math . abs ( A - N ) > Math . abs ( B - N ) ; if ( flg ) { out . println ( \" B \" ) ; } else { out . println ( \" A \" ) ; } out . flush ( ) ; } }"],"bleu":0.6077979135592958,"rouge_l":0.6517237581231413}
{"id":124,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter pw = new PrintWriter ( System . out ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int m = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] b = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int ans = 0 ; for ( int i = 0 ; i < m ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { for ( int k = 0 ; k < m ; k ++ ) { for ( int k = 0 ; k < m ; k ++ ) { for ( int k = 0 ; k < m ; k ++ ) { if ( b [ k ] > a [ k ] ) { ans ++ ; } } } } } pw . println ( ans ) ; pw . close ( ) ; } }"],"references":["import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int input1 = scan . nextInt ( ) ; int input2 = scan . nextInt ( ) ; int [ ] [ ] sui = new int [ input1 ] [ 3 ] ; for ( int [ ] _sui : sui ) { _sui [ 0 ] = scan . nextInt ( ) ; _sui [ 1 ] = scan . nextInt ( ) ; _sui [ 2 ] = scan . nextInt ( ) ; } for ( int repeatCount = 0 ; repeatCount < input2 ; repeatCount ++ ) { int a = scan . nextInt ( ) ; int b = scan . nextInt ( ) ; double answer = 0.0 ; double normal = 0.0 ; double rate1 = 1.0 ; double rate2 = 0.0 ; for ( int i = 0 ; i < sui . length ; i ++ ) { normal = sui [ i ] [ 1 ] * sui [ i ] [ 1 ] * sui [ i ] [ 2 ] \/ 3.0 * Math . PI ; boolean flag = true ; if ( sui [ i ] [ 0 ] <= a && sui [ i ] [ 0 ] + sui [ i ] [ 2 ] >= a ) { rate1 = ( sui [ i ] [ 0 ] + sui [ i ] [ 2 ] - a ) \/ ( double ) sui [ i ] [ 2 ] ; flag = false ; } if ( sui [ i ] [ 0 ] + sui [ i ] [ 2 ] >= b && sui [ i ] [ 0 ] <= b ) { rate2 = ( sui [ i ] [ 0 ] + sui [ i ] [ 2 ] - b ) \/ ( double ) sui [ i ] [ 2 ] ; flag = false ; } if ( sui [ i ] [ 0 ] >= a && sui [ i ] [ 0 ] + sui [ i ] [ 2 ] <= b ) { rate1 = 1.0 ; rate2 = 0.0 ; flag = false ; } if ( flag ) { rate1 = 0.0 ; rate2 = 0.0 ; } answer += normal * ( rate1 * rate1 * rate1 - rate2 * rate2 * rate2 ) ; rate1 = 1.0 ; rate2 = 0.0 ; } System . out . println ( String . format ( \" % 6f \" , answer ) ) ; } } }","import java . io . PrintWriter ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { solve2 ( ) ; } private static void solve2 ( ) { Scanner scn = new Scanner ( System . in ) ; PrintWriter pw = new PrintWriter ( System . out ) ; int N = scn . nextInt ( ) ; int Q = scn . nextInt ( ) ; double [ ] v = new double [ 200001 ] ; for ( int k = 0 ; k < N ; k ++ ) { int X = scn . nextInt ( ) ; int R = scn . nextInt ( ) ; int H = scn . nextInt ( ) ; double tmpr = R ; for ( int s = X ; s < X + H ; s ++ ) { v [ s ] += ( tmpr * tmpr + tmpr * ( tmpr - ( double ) R \/ H ) + ( tmpr - ( double ) R \/ H ) * ( tmpr - ( double ) R \/ H ) ) * Math . PI \/ 3 ; tmpr -= ( double ) R \/ H ; } } for ( int k = 0 ; k < Q ; k ++ ) { int A = scn . nextInt ( ) ; int B = scn . nextInt ( ) ; double tmp = 0 ; for ( int s = A ; s < B ; s ++ ) { tmp += v [ s ] ; } pw . println ( tmp ) ; } pw . flush ( ) ; scn . close ( ) ; } }","import java . util . Scanner ; public class Main { int N , Q ; long [ ] [ ] ensui ; public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } public void run ( ) { Scanner sc = new Scanner ( System . in ) ; N = sc . nextInt ( ) ; Q = sc . nextInt ( ) ; ensui = new long [ N ] [ 3 ] ; for ( int i = 0 ; i < N ; i ++ ) { ensui [ i ] [ 0 ] = sc . nextLong ( ) ; ensui [ i ] [ 1 ] = sc . nextLong ( ) ; ensui [ i ] [ 2 ] = sc . nextLong ( ) ; } double [ ] ans = new double [ Q ] ; for ( int i = 0 ; i < Q ; i ++ ) { int A = sc . nextInt ( ) ; int B = sc . nextInt ( ) ; ans [ i ] = solve ( A , B ) ; } for ( int i = 0 ; i < Q ; i ++ ) { System . out . println ( ans [ i ] ) ; } sc . close ( ) ; } private double solve ( int a , int b ) { double ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { long X = ensui [ i ] [ 0 ] ; long R = ensui [ i ] [ 1 ] ; long H = ensui [ i ] [ 2 ] ; if ( X + H <= a || b <= X ) { continue ; } else { double S = ( Math . PI * R * R * H ) \/ 3 ; double sumS , subS ; if ( X < a ) { sumS = S * Math . pow ( ( ( double ) ( H - ( a - X ) ) ) \/ H , 3 ) ; } else sumS = S ; ans += sumS ; if ( b < X + H ) { subS = S * Math . pow ( ( ( double ) ( H + X - b ) ) \/ H , 3 ) ; ans -= subS ; } } } return ans ; } }","import java . util . Scanner ; public class Main { public static double calc ( double r , double h ) { return Math . PI * r * r * h \/ 3.0 ; } public static void main ( String [ ] args ) { final Scanner sc = new Scanner ( System . in ) ; final int N = sc . nextInt ( ) ; final int Q = sc . nextInt ( ) ; int [ ] xs = new int [ N ] ; int [ ] rs = new int [ N ] ; int [ ] hs = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { final int x = sc . nextInt ( ) ; final int r = sc . nextInt ( ) ; final int h = sc . nextInt ( ) ; xs [ i ] = x ; rs [ i ] = r ; hs [ i ] = h ; } for ( int q = 0 ; q < Q ; q ++ ) { final int A = sc . nextInt ( ) ; final int B = sc . nextInt ( ) ; double sum = 0 ; for ( int i = 0 ; i < N ; i ++ ) { final int max_x = xs [ i ] + hs [ i ] ; final int min_x = xs [ i ] ; if ( max_x <= A ) { continue ; } if ( min_x >= B ) { continue ; } final double lower_h = max_x - Math . max ( min_x , A ) ; final double lower_r = ( lower_h \/ hs [ i ] ) * rs [ i ] ; final double upper_h = Math . max ( 0 , max_x - B ) ; final double upper_r = ( upper_h \/ hs [ i ] ) * rs [ i ] ; sum += calc ( lower_r , lower_h ) - calc ( upper_r , upper_h ) ; } System . out . printf ( \" % .9f \\n \" , sum ) ; } } }"],"bleu":0.456833312776836,"rouge_l":0.5195887096396763}
{"id":125,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += Integer . parseInt ( st . nextToken ( ) ) ; } System . out . println ( sum ) ; } }"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . OutputStream ; import java . io . PrintWriter ; import java . util . StringTokenizer ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; Task solver = new Task ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class Task { public void solve ( int testNumber , InputReader in , PrintWriter out ) { int N = in . nextInt ( ) ; int h = N \/ 3600 ; int m = N \/ 60 % 60 ; int s = N % 60 ; out . printf ( \" % 02d : %02d : %02d \" , h , m , s ) ; out . println ( ) ; } } static class InputReader { public BufferedReader reader ; public StringTokenizer tokenizer ; public InputReader ( InputStream stream ) { reader = new BufferedReader ( new InputStreamReader ( stream ) , 32768 ) ; tokenizer = null ; } public String next ( ) { while ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( ) ; } public char nextChar ( ) { return next ( ) . charAt ( 0 ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } public long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } public double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } } }","import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; System . out . print ( n \/ 3600 < 10 ? \"0\" + n \/ 3600 : n \/ 3600 ) ; System . out . print ( \" : \" ) ; System . out . print ( n % 3600 \/ 60 < 10 ? \"0\" + n % 3600 \/ 60 : n % 3600 \/ 60 ) ; System . out . print ( \" : \" ) ; System . out . println ( n % 60 < 10 ? \"0\" + n % 60 : n % 60 ) ; } }","import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long second = sc . nextLong ( ) ; long date = second \/ 3600 ; String d = ( String . format ( \" % 02d \" , date ) ) ; long minute = ( second % 3600 ) \/ 60 ; String m = ( String . format ( \" % 02d \" , minute ) ) ; long sec = ( ( second % 360 ) ) % 60 ; String s = ( String . format ( \" % 02d \" , sec ) ) ; System . out . println ( d + \" : \" + m + \" : \" + s ) ; } }","import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; Scanner in = new Scanner ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; ABC_012_B solver = new ABC_012_B ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class ABC_012_B { public void solve ( int testNumber , Scanner in , PrintWriter out ) { int n = in . nextInt ( ) ; int hour = 0 ; int minute = 0 ; int second = 0 ; while ( n >= 3600 ) { hour ++ ; n -= 3600 ; } while ( n >= 60 ) { minute ++ ; n -= 60 ; } second = n ; out . print ( String . format ( \" % 02d \" , hour ) + \" : \" + String . format ( \" % 02d \" , minute ) + \" : \" + String . format ( \" % 02d \" , second ) ) ; } } }","import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; String base = \"00\" ; String h = base + ( N \/ 3600 ) ; N %= 3600 ; String m = base + ( N \/ 60 ) ; N %= 60 ; String s = base + N ; System . out . println ( h . substring ( h . length ( ) - 2 , h . length ( ) ) + \" : \" + m . substring ( m . length ( ) - 2 , m . length ( ) ) + \" : \" + s . substring ( s . length ( ) - 2 , s . length ( ) ) ) ; } }"],"bleu":0.4947084918960675,"rouge_l":0.5094974698038637}
{"id":126,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans += a [ i ] - a [ i ] ; } out . println ( ans ) ; out . flush ( ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . util . * ; import java . io . * ; class Main { public static void main ( String [ ] args ) throws IOException { Scanner sc = new Scanner ( System . in ) ; PrintWriter pw = new PrintWriter ( System . out ) ; int n = sc . nextInt ( ) , k = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int idx = 0 ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; if ( a [ i ] == 1 ) idx = i ; } int ans = n ; int x = k - 1 ; for ( int i = Math . max ( idx - k , 1 ) - 1 ; i < Math . min ( idx + k , n ) ; i ++ ) { int curr = 1 + ( i + x - 1 ) \/ x ; int tmp = n - ( i + k ) ; curr += ( tmp + x - 1 ) \/ x ; ans = Math . min ( ans , curr ) ; } pw . println ( ans ) ; pw . close ( ) ; } static class Scanner { StringTokenizer st ; BufferedReader br ; public Scanner ( InputStream s ) { br = new BufferedReader ( new InputStreamReader ( s ) ) ; } public Scanner ( FileReader s ) { br = new BufferedReader ( s ) ; } public String next ( ) throws IOException { while ( st == null || ! st . hasMoreTokens ( ) ) st = new StringTokenizer ( br . readLine ( ) ) ; return st . nextToken ( ) ; } public int nextInt ( ) throws IOException { return Integer . parseInt ( next ( ) ) ; } public long nextLong ( ) throws IOException { return Long . parseLong ( next ( ) ) ; } public String nextLine ( ) throws IOException { return br . readLine ( ) ; } public boolean ready ( ) throws IOException { return br . ready ( ) ; } public double nextDouble ( ) throws IOException { return Double . parseDouble ( next ( ) ) ; } } }","import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int N = scanner . nextInt ( ) ; int K = scanner . nextInt ( ) ; if ( N == K ) { System . out . println ( 1 ) ; } else { System . out . println ( 1 + ( N - K - 1 ) \/ ( K - 1 ) + 1 ) ; } } }","import java . util . ArrayList ; import java . util . List ; import java . util . Scanner ; public class Main { private static final int MINIMUM = 1 ; public static String process ( TestCase testCase ) { final int N = testCase . N ; final int K = testCase . K ; return String . valueOf ( numOpsNeeded ( K , N - 1 ) ) ; } private static long numOpsNeeded ( int k , long count ) { return ( count + ( k - 1 ) - 1 ) \/ ( k - 1 ) ; } public static void main ( String [ ] args ) { TestCase testCase = readFromInput ( ) ; final String result = process ( testCase ) ; output ( result ) ; } private static TestCase readFromInput ( ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int K = sc . nextInt ( ) ; List < Integer > A = new ArrayList < > ( ) ; for ( int i = 0 ; i < N ; ++ i ) { A . add ( sc . nextInt ( ) ) ; } return new TestCase ( N , K , A ) ; } private static void output ( String result ) { System . out . println ( result ) ; } public static class TestCase { final int N ; final int K ; final List < Integer > A ; public TestCase ( int N , int K , List < Integer > A ) { this . N = N ; this . K = K ; this . A = A ; } } }","import java . util . * ; public class Main { public static void main ( String [ ] args ) { final Scanner sc = new Scanner ( System . in ) ; final int n ; final int k ; n = sc . nextInt ( ) ; k = sc . nextInt ( ) ; final int [ ] number = new int [ n ] ; int minIdx = 0 ; for ( int i = 0 ; i < n ; ++ i ) { number [ i ] = sc . nextInt ( ) ; if ( number [ i ] == 1 ) { minIdx = i ; } } if ( k >= n ) { System . out . println ( 1 ) ; return ; } if ( n == 1 ) { System . out . println ( 0 ) ; return ; } int minCount = Integer . MAX_VALUE ; for ( int left = 1 ; left <= k ; ++ left ) { int leftCount = ( minIdx + 1 - left ) % ( k - 1 ) == 0 ? ( minIdx + 1 - left ) \/ ( k - 1 ) + 1 : ( minIdx + 1 - left ) \/ ( k - 1 ) + 1 + 1 ; int right = k - left ; int rightCount = ( n - 1 - minIdx - right ) % ( k - 1 ) == 0 ? ( n - 1 - minIdx - right ) \/ ( k - 1 ) : ( n - 1 - minIdx - right ) \/ ( k - 1 ) + 1 ; int currentCount = leftCount + rightCount ; if ( currentCount < minCount ) { minCount = currentCount ; } } System . out . println ( minCount ) ; } }","import java . util . * ; class Main { static Scanner sc = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { int n = sc . nextInt ( ) , k = sc . nextInt ( ) ; int [ ] ar = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) ar [ i ] = sc . nextInt ( ) ; System . out . println ( ( int ) Math . ceil ( ( double ) ( n - 1 ) \/ ( double ) ( k - 1 ) ) ) ; } }"],"bleu":0.6802376515510884,"rouge_l":0.7376502170149778}
{"id":127,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter pw = new PrintWriter ( System . out ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int N = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { st = new StringTokenizer ( br . readLine ( ) ) ; a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int [ ] b = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < N ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int count = 0 ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < N ; j ++ ) { if ( a [ i ] > b [ j ] ) { count ++ ; } } } pw . println ( count ) ; pw . flush ( ) ; } }"],"references":["import java . util . Scanner ; class Main { static boolean [ ] al ; static int [ ] c ; static int [ ] t ; static int n ; static int search ( ) { boolean f = true ; for ( int i = 0 ; i < n ; i ++ ) f = ( f && t [ i ] > 0 ) ; if ( f ) return 0 ; int min = n ; for ( int i = 0 ; i < n ; i ++ ) { if ( ! al [ i ] ) { al [ i ] = true ; for ( int j = 0 ; j < n ; j ++ ) t [ j ] += ( c [ ( j + i ) % n ] > 0 ) ? 1 : 0 ; min = Math . min ( min , search ( ) + 1 ) ; for ( int j = 0 ; j < n ; j ++ ) t [ j ] -= ( c [ ( j + i ) % n ] > 0 ) ? 1 : 0 ; al [ i ] = false ; } } return min ; } public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; String cin = scan . next ( ) ; n = cin . length ( ) ; c = new int [ n ] ; t = new int [ n ] ; al = new boolean [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = t [ i ] = ( cin . charAt ( i ) == ' o ' ) ? 1 : 0 ; al [ i ] = false ; } al [ 0 ] = true ; System . out . println ( search ( ) + 1 ) ; } }","import java . io . * ; import java . util . * ; import java . math . * ; public class Main { static boolean debug = false ; static boolean debug2 = false ; public static void main ( String [ ] args ) throws java . io . IOException { debug = 1 <= args . length ; debug2 = 2 <= args . length ; BufferedReader in = new BufferedReader ( new InputStreamReader ( System . in ) ) ; final String pattern = in . readLine ( ) ; final int p = Integer . parseInt ( pattern . replaceAll ( \" o \" , \"1\" ) . replaceAll ( \" x \" , \"0\" ) , 2 ) ; int ans = Integer . MAX_VALUE ; for ( int v = 1 ; v < 1 << pattern . length ( ) ; ++ v ) { int c = 0 ; int r = 0 ; for ( int i = 0 ; i < pattern . length ( ) ; ++ i ) { if ( ( v >> i & 1 ) == 1 ) { ++ c ; r |= p << i ; } } final int mask = ( 1 << pattern . length ( ) ) - 1 ; final int loop1 = r & mask ; final int loop2 = r >> pattern . length ( ) ; if ( ( loop1 | loop2 ) == mask ) { ans = Math . min ( ans , c ) ; if ( debug ) { System . err . println ( String . format ( \" % 10s ▁ % 20s ▁ % 10s ▁ % 10s\\t % d \" , Integer . toString ( v , 2 ) , Integer . toString ( r , 2 ) , Integer . toString ( loop2 , 2 ) , Integer . toString ( loop1 , 2 ) , c ) ) ; } } } System . out . println ( ans ) ; } }","import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Main main = new Main ( ) ; main . run ( ) ; } void run ( ) { Scanner sc = new Scanner ( System . in ) ; String input = sc . next ( ) ; int n = input . length ( ) ; boolean [ ] signal = new boolean [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( input . charAt ( i ) == ' o ' ) { signal [ i ] = true ; } else { signal [ i ] = false ; } } int result = 99999 ; for ( int i = 0 ; i < ( 1 << n ) ; i ++ ) { boolean [ ] now = new boolean [ n ] ; int counter = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( ( i >> j ) % 2 == 0 ) { continue ; } counter ++ ; for ( int k = 0 ; k < n ; k ++ ) { if ( ! signal [ k ] ) { continue ; } now [ ( j + k ) % n ] = true ; } } boolean flag = true ; for ( int j = 0 ; j < n ; j ++ ) { if ( ! now [ j ] ) { flag = false ; } } if ( flag ) { result = Math . min ( result , counter ) ; } } System . out . println ( result ) ; } }","import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String c = sc . next ( ) ; int n = c . length ( ) ; int [ ] [ ] televi = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( c . charAt ( i ) == ' o ' ) televi [ 0 ] [ i ] = 1 ; } for ( int i = 1 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { televi [ i ] [ ( j + i ) % n ] = televi [ 0 ] [ j ] ; } } int ans = 20 ; for ( int i = 1 ; i < ( int ) Math . pow ( 2 , n ) ; i ++ ) { int [ ] watch = new int [ n ] ; int count = 0 ; for ( int k = 0 ; k < n ; k ++ ) { if ( ( i & ( 1 << k ) ) != 0 ) { for ( int j = 0 ; j < n ; j ++ ) { watch [ j ] += televi [ k ] [ j ] ; } count ++ ; } } boolean flg = true ; for ( int j = 0 ; j < n ; j ++ ) { if ( watch [ j ] == 0 ) flg = false ; } if ( flg ) ans = Math . min ( ans , count ) ; } System . out . println ( ans ) ; } }","import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String str = sc . next ( ) ; int [ ] tv = new int [ str . length ( ) ] ; int n = str . length ( ) ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { if ( str . charAt ( i ) == ' o ' ) { tv [ i ] = 1 ; } else { tv [ i ] = 0 ; } } boolean can = false ; int ret = 9999 ; for ( int i = 0 ; i < ( 1 << n ) ; i ++ ) { int cnt = 0 ; boolean [ ] now = new boolean [ n ] ; for ( int j = 0 ; j < n ; j ++ ) { if ( ( i >> j ) % 2 == 0 ) continue ; cnt ++ ; for ( int k = 0 ; k < n ; k ++ ) { if ( tv [ k ] == 0 ) continue ; now [ ( j + k ) % n ] = true ; } } boolean flag = true ; for ( int j = 0 ; j < n ; j ++ ) if ( ! now [ j ] ) flag = false ; if ( flag ) ret = Math . min ( ret , cnt ) ; } System . out . println ( ret ) ; } }"],"bleu":0.5351518967527362,"rouge_l":0.5395900755124057}
{"id":128,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { st = new StringTokenizer ( br . readLine ( ) ) ; a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( b [ i ] == 1 ) { count ++ ; } } System . out . println ( count ) ; } }"],"references":["import java . util . * ; public class Main { private final static long MOD = 1000000007 ; public static long mul ( long n , long m ) { return ( n * m ) % MOD ; } public static long fact ( long n ) { long ans = 1 ; for ( long i = n ; i >= 1 ; i -- ) { ans = mul ( ans , i ) ; } return ans ; } public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; int N = s . nextInt ( ) ; int t [ ] = new int [ N ] ; int counter [ ] = new int [ 10001 ] ; for ( int i = 0 ; i < N ; i ++ ) { t [ i ] = s . nextInt ( ) ; counter [ t [ i ] ] ++ ; } Arrays . sort ( t ) ; long currenttime = 0 ; long penalty = 0 ; for ( int time : t ) { currenttime += time ; penalty += currenttime ; } long count = 1 ; for ( int i = 0 ; i < counter . length ; i ++ ) { count = mul ( count , fact ( counter [ i ] ) ) ; } System . out . println ( penalty ) ; System . out . println ( count ) ; } }","import java . util . * ; public class Main { int n ; int [ ] t ; long q = 1000000007 ; Main ( ) { Scanner sc = new Scanner ( System . in ) ; n = sc . nextInt ( ) ; t = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { t [ i ] = sc . nextInt ( ) ; } Arrays . sort ( t ) ; System . out . println ( calc ( 0 , 0 ) ) ; if ( n == 1 ) { System . out . println ( 1 ) ; return ; } int idx = 0 , cnt = 0 ; long ans = 1 ; for ( ; idx < n ; idx ++ ) { if ( cnt == 0 ) { cnt ++ ; continue ; } if ( t [ idx ] == t [ idx - 1 ] ) { cnt ++ ; } else { ans = ( ans * kaijo ( cnt ) ) % q ; cnt = 1 ; } if ( idx == n - 1 ) { ans = ( ans * kaijo ( cnt ) ) % q ; } } System . out . println ( ans ) ; } long calc ( int idx , long sum ) { if ( idx < n ) { sum += t [ idx ] ; return calc ( idx + 1 , sum ) + sum ; } else { return 0 ; } } long kaijo ( long a ) { return ( a == 1 ? 1 : a * kaijo ( a - 1 ) % q ) ; } public static void main ( String [ ] args ) { new Main ( ) ; } }","import java . util . * ; public class Main { static final long MOD = 1000000007L ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; ArrayList < Long > list = new ArrayList < > ( ) ; long [ ] arr = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; long sum = 0 ; long total = 0 ; long prev = 0 ; long count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { total += sum + arr [ i ] ; sum += arr [ i ] ; if ( i == 0 ) { count = 1 ; } else if ( prev == arr [ i ] ) { count ++ ; } else { if ( count != 1 ) { list . add ( count ) ; } count = 1 ; } prev = arr [ i ] ; } if ( count != 1 ) { list . add ( count ) ; } long ans = 1 ; for ( long x : list ) { ans *= kaijo ( x ) ; ans %= MOD ; } System . out . println ( total ) ; System . out . println ( ans ) ; } static long kaijo ( long x ) { if ( x == 1 ) { return 1 ; } else { long ans = x * kaijo ( x - 1 ) ; ans %= MOD ; return ans ; } } }"],"bleu":0.4620344102941572,"rouge_l":0.47931901312658926}
{"id":129,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { for ( int k = 0 ; k < n ; k ++ ) { for ( int k = 0 ; k < n ; k ++ ) { if ( b [ i ] < b [ j ] ) { ans ++ ; } } } } System . out . println ( ans ) ; } }"],"references":["import java . util . ArrayList ; import java . util . Collections ; import java . util . List ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int C = sc . nextInt ( ) ; int K = sc . nextInt ( ) ; List < Integer > TList = new ArrayList < > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { TList . add ( sc . nextInt ( ) ) ; } Collections . sort ( TList ) ; int cnt = 0 ; int bus = 0 ; int start = TList . get ( 0 ) ; for ( int i : TList ) { if ( cnt < C && i <= start + K ) { cnt ++ ; continue ; } cnt = 1 ; start = i ; bus ++ ; } bus ++ ; System . out . println ( bus ) ; } }","import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . stream . IntStream ; import java . io . UncheckedIOException ; import java . util . Arrays ; import java . util . StringTokenizer ; import java . io . IOException ; import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . InputStream ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; LightScanner in = new LightScanner ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; AAirportBus solver = new AAirportBus ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class AAirportBus { public void solve ( int testNumber , LightScanner in , PrintWriter out ) { int n = in . ints ( ) , c = in . ints ( ) , k = in . ints ( ) ; int [ ] t = in . ints ( n ) ; Arrays . sort ( t ) ; int arrival = t [ 0 ] ; int cap = 0 ; int ans = 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( t [ i ] <= arrival + k && cap < c ) { cap ++ ; } else { arrival = t [ i ] ; cap = 1 ; ans ++ ; } } out . println ( ans ) ; } } static class LightScanner { private BufferedReader reader = null ; private StringTokenizer tokenizer = null ; public LightScanner ( InputStream in ) { reader = new BufferedReader ( new InputStreamReader ( in ) ) ; } public String string ( ) { if ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } } return tokenizer . nextToken ( ) ; } public int ints ( ) { return Integer . parseInt ( string ( ) ) ; } public int [ ] ints ( int length ) { return IntStream . range ( 0 , length ) . map ( x -> ints ( ) ) . toArray ( ) ; } } }","import java . util . ArrayList ; import java . util . Collections ; import java . util . List ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] nck = scanner . nextLine ( ) . split ( \" ▁ \" ) ; int N = Integer . parseInt ( nck [ 0 ] ) ; int C = Integer . parseInt ( nck [ 1 ] ) ; int K = Integer . parseInt ( nck [ 2 ] ) ; List < Integer > passengers = new ArrayList < > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { passengers . add ( Integer . parseInt ( scanner . nextLine ( ) ) ) ; } passengers . sort ( Collections . reverseOrder ( ) ) ; int bus = 0 ; int current = 0 ; int firstPassenger = 0 ; for ( Integer passenger : passengers ) { if ( current == 0 ) { current = 1 ; firstPassenger = passenger ; } else if ( ( firstPassenger - passenger ) > K ) { bus ++ ; current = 1 ; firstPassenger = passenger ; } else { current ++ ; } if ( current == C ) { bus ++ ; current = 0 ; firstPassenger = 0 ; } } if ( current > 0 ) { bus ++ ; } System . out . println ( bus ) ; } }","import java . util . * ; import java . util . stream . IntStream ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; Long c = sc . nextLong ( ) ; Long k = sc . nextLong ( ) ; List < Long > t = new ArrayList < > ( ) ; IntStream . range ( 0 , n ) . forEach ( i -> t . add ( sc . nextLong ( ) ) ) ; Collections . sort ( t ) ; Deque < Long > queue = new ArrayDeque < > ( t ) ; Long count = 0L ; while ( queue . size ( ) != 0 ) { count ++ ; Long target = queue . remove ( ) ; Long rider = 1L ; while ( queue . size ( ) != 0 && queue . element ( ) <= target + k && rider < c ) { rider ++ ; queue . remove ( ) ; } } System . out . println ( count ) ; } }","import java . util . Arrays ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { try ( Scanner sc = new Scanner ( System . in ) ; ) { new Main ( ) . solve ( sc ) ; } } void solve ( Scanner sc ) { int n = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] ts = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { ts [ i ] = sc . nextInt ( ) ; } Arrays . sort ( ts ) ; int ans = 0 ; int departT = ts [ 0 ] + k ; int count = 1 ; for ( int i = 1 ; i < n - 1 ; i ++ ) { if ( ts [ i ] > departT ) { ans ++ ; count = 0 ; departT = ts [ i ] + k ; } count ++ ; if ( count == c ) { ans ++ ; count = 0 ; departT = ts [ i + 1 ] + k ; } } if ( ts [ n - 1 ] > departT ) { ans ++ ; count = 0 ; } ans ++ ; System . out . println ( ans ) ; } }"],"bleu":0.5873817481393214,"rouge_l":0.6092431157240006}
{"id":130,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { st = new StringTokenizer ( br . readLine ( ) ) ; a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { b [ j ] = Math . min ( b [ i ] , b [ j ] ) ; } } System . out . println ( count ) ; } }"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . ArrayList ; public class Main { private static int n ; private static long a , b ; private static long [ ] enemy ; private static boolean C ( long k ) { long cnt = 0 ; for ( long hp : enemy ) { hp -= b * k ; if ( hp > 0 ) { cnt += Math . ceil ( ( double ) hp \/ ( a - b ) ) ; } } if ( cnt > k ) return false ; else return true ; } public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; String [ ] str = br . readLine ( ) . split ( \" ▁ \" ) ; n = Integer . parseInt ( str [ 0 ] ) ; a = Long . parseLong ( str [ 1 ] ) ; b = Long . parseLong ( str [ 2 ] ) ; enemy = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) enemy [ i ] = Long . parseLong ( br . readLine ( ) ) ; long l = 0 , r = ( long ) 1e9 + 1 , med = - 1 ; while ( r - l > 0 ) { med = ( r + l ) \/ 2 ; if ( C ( med ) ) { r = med ; } else { l = med + 1 ; } } System . out . println ( l ) ; } }","import java . util . * ; import java . util . function . Consumer ; import java . util . function . Function ; import java . util . stream . IntStream ; import static java . util . stream . Collectors . toList ; public class Main { private static final Scanner scanner = new Scanner ( System . in ) ; private static final Consumer < List < String > > consumer = solve ( ) ; public static void main ( String [ ] args ) { consumer . accept ( readInput ( ) ) ; } private static List < String > readInput ( ) { final List < String > lineList = new ArrayList < > ( ) ; while ( scanner . hasNextLine ( ) ) { lineList . add ( scanner . nextLine ( ) ) ; } return lineList ; } private static Consumer < List < String > > solve ( ) { return args -> { final List < Long > NAB = Arrays . stream ( args . get ( 0 ) . split ( \" ▁ \" ) ) . map ( Long :: valueOf ) . collect ( toList ( ) ) ; final Long A = NAB . get ( 1 ) ; final Long B = NAB . get ( 2 ) ; final List < Long > numList = args . stream ( ) . skip ( 1 ) . map ( Long :: valueOf ) . collect ( toList ( ) ) ; Long leftExc = 0L ; Long rightInc = 1_000_000_000L ; final Function < AbstractMap . SimpleEntry < Long , Long > , Long > ceil = ( entry ) -> Double . valueOf ( Math . ceil ( entry . getKey ( ) . doubleValue ( ) \/ entry . getValue ( ) . doubleValue ( ) ) ) . longValue ( ) ; while ( rightInc - leftExc > 1 ) { Long ans = ( rightInc + leftExc ) \/ 2 ; if ( numList . stream ( ) . mapToLong ( x -> ceil . apply ( new AbstractMap . SimpleEntry < > ( Math . max ( 0 , x - ans * B ) , A - B ) ) ) . sum ( ) <= ans ) { rightInc = ans ; } else { leftExc = ans ; } } System . out . println ( rightInc ) ; } ; } }","import java . util . * ; class Main { static int [ ] h ; static int n , A , B ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; n = sc . nextInt ( ) ; A = sc . nextInt ( ) ; B = sc . nextInt ( ) ; h = new int [ n + 1 ] ; int max = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { h [ i ] = sc . nextInt ( ) ; max = Math . max ( max , h [ i ] ) ; } int lo = 0 ; int hi = ( max - 1 ) \/ B + 1 ; while ( hi - lo > 1 ) { int mid = ( hi + lo ) \/ 2 ; if ( check ( mid ) ) hi = mid ; else lo = mid ; } System . out . println ( hi ) ; } static boolean check ( int target ) { int cnt = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { int temp = h [ i ] - target * B ; if ( temp > 0 ) cnt += ( temp - 1 ) \/ ( A - B ) + 1 ; if ( cnt > target ) return false ; } return true ; } }","import java . util . * ; public class Main { public void main ( Scanner sc ) { int n = sc . nextInt ( ) ; long a = sc . nextLong ( ) ; long b = sc . nextLong ( ) ; long h [ ] = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { h [ i ] = sc . nextLong ( ) ; } long l = 1 ; long r = 1_000_000_000 ; while ( l != r ) { long mid = ( l + r ) \/ 2 ; if ( count ( mid , h , a , b ) <= mid ) { r = mid ; } else { l = mid + 1 ; } } System . out . println ( l ) ; } private long count ( long mid , long h [ ] , long a , long b ) { long sa = a - b ; long cnt = 0 ; for ( int i = 0 ; i < h . length ; i ++ ) { cnt += Math . max ( ( h [ i ] - mid * b + sa - 1 ) \/ sa , 0 ) ; } return cnt ; } public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; new Main ( ) . main ( sc ) ; sc . close ( ) ; } }","import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; long a = scanner . nextLong ( ) ; long b = scanner . nextLong ( ) ; long [ ] health = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { health [ i ] = scanner . nextInt ( ) ; } long min = 1 ; long max = ( long ) Math . pow ( 10 , 9 ) ; long ans = 0 ; while ( min < max ) { long med = ( min + max ) \/ 2 ; long count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { long k = ( health [ i ] - med * b + a - b - 1 ) \/ ( a - b ) ; k = Math . max ( 0 , k ) ; count += k ; } if ( count <= med ) { ans = med ; max = med ; } else { min = med + 1 ; } } System . out . println ( ans ) ; scanner . close ( ) ; } }"],"bleu":0.4431944462086119,"rouge_l":0.4996302826915421}
{"id":131,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { st = new StringTokenizer ( br . readLine ( ) ) ; a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( b [ i ] > b [ j ] ) { count ++ ; } } } System . out . println ( count ) ; } }"],"references":["import java . io . PrintWriter ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; PrintWriter pw = new PrintWriter ( System . out ) ; int N = sc . nextInt ( ) ; int K = sc . nextInt ( ) ; char [ ] S = sc . next ( ) . toCharArray ( ) ; boolean [ ] a = new boolean [ N ] ; for ( int i = 0 ; i < N ; i ++ ) a [ i ] = S [ i ] == ' A ' ; boolean flip = false ; int idx = 0 ; int T = Math . min ( 2 * N , K ) ; for ( int i = 0 ; i < T ; i ++ ) { if ( a [ idx ] ^ flip ) { a [ idx ] = false ^ flip ; } else { flip ^= true ; a [ idx ] = true ^ flip ; idx = ( idx + 1 ) % N ; } } if ( T < K && N % 2 == 1 ) a [ idx ] ^= ( K - T ) % 2 == 1 ; for ( int i = 0 ; i < N ; i ++ ) pw . print ( a [ ( i + idx ) % N ] ^ flip ? ' A ' : ' B ' ) ; pw . println ( ) ; sc . close ( ) ; pw . close ( ) ; } }","import java . util . * ; public class Main { static Scanner sc = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; String s = sc . next ( ) ; char [ ] ss = s . toCharArray ( ) ; boolean [ ] a = new boolean [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( ss [ i ] == ' A ' ) { a [ i ] = true ; } } boolean flip = false ; int index = 0 ; for ( int i = 0 ; i < Math . min ( k , 2 * n + k % 2 ) ; i ++ ) { if ( a [ index ] ^ flip ) { a [ index ] = ! a [ index ] ; } else { flip = ! flip ; index = ( index + 1 ) % n ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( a [ ( index + i ) % n ] ^ flip ) { System . out . print ( ' A ' ) ; } else { System . out . print ( ' B ' ) ; } } } }"],"bleu":0.4238877519921844,"rouge_l":0.5224662465777691}
{"id":132,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; out . println ( a > b ? a : a ) ; out . flush ( ) ; } static int l_min ( int [ ] a ) { Arrays . sort ( a ) ; return a [ 0 ] ; } static int l_max ( int [ ] a ) { int l = a . length ; Arrays . sort ( a ) ; return a [ l - 1 ] ; } public static PrintWriter out ; public static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . util . Scanner ; public class Main { public static void main ( String [ ] arg ) { Scanner in = new Scanner ( System . in ) ; int a = in . nextInt ( ) ; String op = in . next ( ) ; int b = in . nextInt ( ) ; if ( op . equals ( \" + \" ) ) { System . out . print ( a + b ) ; } else if ( op . equals ( \" - \" ) ) { System . out . print ( a - b ) ; } } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . OutputStream ; import java . io . PrintWriter ; import java . util . StringTokenizer ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; Task solver = new Task ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class Task { public void solve ( int testNumber , InputReader in , PrintWriter out ) { int A = in . nextInt ( ) ; String str = in . next ( ) ; int B = in . nextInt ( ) ; out . println ( str . equals ( \" + \" ) ? A + B : A - B ) ; } } static class InputReader { public BufferedReader reader ; public StringTokenizer tokenizer ; public InputReader ( InputStream stream ) { reader = new BufferedReader ( new InputStreamReader ( stream ) , 32768 ) ; tokenizer = null ; } public String next ( ) { while ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( ) ; } public char nextChar ( ) { return next ( ) . charAt ( 0 ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } public double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } } }","import java . math . BigDecimal ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String line = scanner . nextLine ( ) ; String [ ] formula = line . split ( \" ▁ \" ) ; if ( formula [ 1 ] . equals ( \" + \" ) ) { System . out . println ( new BigDecimal ( formula [ 0 ] ) . add ( new BigDecimal ( formula [ 2 ] ) ) ) ; } if ( formula [ 1 ] . equals ( \" - \" ) ) { System . out . println ( new BigDecimal ( formula [ 0 ] ) . subtract ( new BigDecimal ( formula [ 2 ] ) ) ) ; } } }","import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; char op = sc . next ( ) . charAt ( 0 ) ; int b = sc . nextInt ( ) ; int ans = ( op == ' + ' ) ? a + b : a - b ; System . out . println ( ans ) ; } }","import java . util . Scanner ; public class Main { private static Scanner sc = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { int a = sc . nextInt ( ) ; String s = sc . next ( ) ; int b = sc . nextInt ( ) ; System . out . println ( s . equals ( \" + \" ) ? a + b : a - b ) ; } }"],"bleu":0.5014662951497315,"rouge_l":0.636860954517084}
{"id":133,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { st = new StringTokenizer ( br . readLine ( ) ) ; a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( b [ i ] == 1 ) { count ++ ; } } System . out . println ( count ) ; } }"],"references":["import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner io = new Scanner ( System . in ) ; String S = io . next ( ) ; long ans = 0 ; for ( int i = 0 ; i < S . length ( ) ; i ++ ) { if ( S . charAt ( i ) == ' U ' ) { ans += ( ( S . length ( ) - 1 ) - i ) + i * 2 ; } else { ans += ( ( S . length ( ) - 1 ) - i ) * 2 + i ; } } System . out . println ( ans ) ; } }","import java . util . Scanner ; import java . util . Collections ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Queue ; import java . util . ArrayDeque ; import java . util . Deque ; import java . util . PriorityQueue ; import java . util . Set ; import java . util . HashSet ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String s = scanner . next ( ) ; int n = s . length ( ) ; char [ ] c = new char [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = s . charAt ( i ) ; } long ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( i == 0 || i == n - 1 ) { ans += n - 1 ; } else { if ( c [ i ] == ' U ' ) { ans += n + i - 1 ; } else if ( c [ i ] == ' D ' ) { ans += 2 * n - i - 2 ; } } } System . out . println ( ans ) ; } }","import java . util . * ; import java . awt . * ; import static java . lang . System . * ; import static java . lang . Math . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( in ) ; String s = sc . next ( ) ; long ans = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == ' U ' ) { ans += s . length ( ) - i - 1 + 2 * ( i ) ; } else { ans += i + 2 * ( s . length ( ) - i - 1 ) ; } } out . println ( ans ) ; } }","import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int len = s . length ( ) ; long ans = len - 1 ; for ( int i = 1 ; i < len - 1 ; i ++ ) { if ( s . charAt ( i ) == ' U ' ) { ans += len - 1 - i ; ans += 2 * i ; } else { ans += i ; ans += 2 * ( len - 1 - i ) ; } } ans += len - 1 ; System . out . println ( ans ) ; } }","import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String N = sc . next ( ) ; char S [ ] = new char [ N . length ( ) ] ; long ans = ( N . length ( ) - 1 ) * 2 ; for ( int i = 0 ; N . length ( ) > i ; i ++ ) { S [ i ] = N . charAt ( i ) ; } for ( int j = 1 ; N . length ( ) - 1 > j ; j ++ ) { if ( S [ j ] == ' U ' ) { ans += j * 2 + N . length ( ) - j - 1 ; } else { ans += j + ( N . length ( ) - j - 1 ) * 2 ; } } System . out . println ( ans ) ; } }"],"bleu":0.395000352660658,"rouge_l":0.5687918584856044}
{"id":134,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; long ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans += a [ i ] - a [ i ] ; } out . println ( ans ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . util . List ; import java . util . Scanner ; import java . util . stream . Collectors ; import java . util . stream . IntStream ; public class Main { public static String process ( TestCase testCase ) { final int N = testCase . N ; final int X = testCase . X ; final List < Integer > x = testCase . x ; final int num = x . stream ( ) . map ( xi -> Math . abs ( X - xi ) ) . reduce ( Main :: gcd ) . orElseThrow ( ( ) -> new IllegalArgumentException ( \" x ▁ is ▁ empty \" ) ) ; return String . valueOf ( num ) ; } private static int gcd ( int a , int b ) { if ( b == 0 ) { return a ; } else { return gcd ( b , a % b ) ; } } public static void main ( String [ ] args ) { TestCase testCase = readFromInput ( ) ; final String result = process ( testCase ) ; output ( result ) ; } private static TestCase readFromInput ( ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int X = sc . nextInt ( ) ; final List < Integer > x = IntStream . range ( 0 , N ) . mapToObj ( i -> sc . nextInt ( ) ) . collect ( Collectors . toList ( ) ) ; return new TestCase ( N , X , x ) ; } private static void output ( String result ) { System . out . println ( result ) ; } public static class TestCase { final int N ; final int X ; final List < Integer > x ; public TestCase ( int N , int X , List < Integer > x ) { this . N = N ; this . X = X ; this . x = x ; } } }","import java . util . * ; import static java . lang . System . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int X = sc . nextInt ( ) ; int [ ] a = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { a [ i ] = Math . abs ( sc . nextInt ( ) - X ) ; } long ans = Long . MAX_VALUE ; for ( int i = 0 ; i < N ; i ++ ) { long tmp_ans = gcd ( a [ i ] , a [ 0 ] ) ; ans = Math . min ( ans , tmp_ans ) ; } out . println ( ans ) ; } public static long gcd ( long m , long n ) { if ( m < n ) return gcd ( n , m ) ; if ( n == 0 ) return m ; return gcd ( n , m % n ) ; } }","import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner reader = new Scanner ( System . in ) ; int A = reader . nextInt ( ) ; int previous = reader . nextInt ( ) ; int tmp = reader . nextInt ( ) ; int result = Math . abs ( tmp - previous ) ; for ( int i = 1 ; i < A ; i ++ ) { previous = tmp ; tmp = reader . nextInt ( ) ; result = gcd ( Math . abs ( tmp - previous ) , result ) ; } System . out . print ( result ) ; } private static int gcd ( int x , int y ) { if ( y > x ) { int tmp = y ; y = x ; x = tmp ; } int next ; while ( ( next = x % y ) != 0 ) { x = y ; y = next ; } return y ; } }","import java . io . InputStream ; import java . io . PrintStream ; import java . util . Arrays ; import java . util . Scanner ; public class Main { InputStream in = System . in ; PrintStream out = System . out ; int gcd ( int a , int b ) { while ( a % b != 0 ) { int tmp = b ; b = a % b ; a = tmp ; } return b ; } public void _main ( String [ ] args ) { Scanner sc = new Scanner ( in ) ; int N = sc . nextInt ( ) ; int X = sc . nextInt ( ) ; int [ ] x = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { int a = sc . nextInt ( ) ; x [ i ] = Math . abs ( a - X ) ; } sc . close ( ) ; if ( N == 1 ) { out . println ( x [ 0 ] ) ; return ; } Arrays . sort ( x ) ; int ans = x [ 0 ] ; for ( int i = 1 ; i < N ; i ++ ) { ans = gcd ( ans , x [ i ] ) ; } out . println ( ans ) ; } public static void main ( String [ ] args ) { new Main ( ) . _main ( args ) ; } }","import java . math . BigInteger ; import java . util . Arrays ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] x = new int [ n + 1 ] ; for ( int i = 0 ; i <= n ; i ++ ) { x [ i ] = sc . nextInt ( ) ; ; } sc . close ( ) ; Arrays . parallelSort ( x ) ; BigInteger ans = BigInteger . valueOf ( x [ 1 ] - x [ 0 ] ) ; for ( int i = 1 ; i < n ; i ++ ) { BigInteger d = BigInteger . valueOf ( x [ i + 1 ] - x [ i ] ) ; ans = ans . gcd ( d ) ; } System . out . println ( ans . toString ( ) ) ; } }"],"bleu":0.4614051637468274,"rouge_l":0.5404813600036956}
{"id":135,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; System . out . println ( Math . min ( Math . abs ( a - b ) , c ) ) ; } static int l_min ( int [ ] a ) { Arrays . sort ( a ) ; return a [ 0 ] ; } static int l_max ( int [ ] a ) { int l = a . length ; Arrays . sort ( a ) ; return a [ l - 1 ] ; } public static PrintWriter out ; public static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long N = sc . nextLong ( ) ; long K = sc . nextLong ( ) ; long ans ; ans = N - K + 1 ; System . out . println ( ans ) ; } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; String [ ] abc = br . readLine ( ) . split ( \" ▁ \" ) ; int a = Integer . parseInt ( abc [ 0 ] ) ; int b = Integer . parseInt ( abc [ 1 ] ) ; System . out . println ( a - b + 1 ) ; } }","import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { new Main ( ) . solveA ( ) ; } private void solveA ( ) { Scanner scanner = null ; try { scanner = new Scanner ( System . in ) ; System . out . println ( ( scanner . nextInt ( ) - scanner . nextInt ( ) ) + 1 ) ; } finally { if ( scanner != null ) { scanner . close ( ) ; } } } private void solveB ( ) { Scanner scanner = null ; int numN = 0 ; int numK = 0 ; int numS = 0 ; try { scanner = new Scanner ( System . in ) ; numN = scanner . nextInt ( ) ; System . out . println ( \" \" ) ; } finally { if ( scanner != null ) { scanner . close ( ) ; } } } private void solveC ( ) { Scanner scanner = null ; int numN = 0 ; int numK = 0 ; int numS = 0 ; try { scanner = new Scanner ( System . in ) ; numN = scanner . nextInt ( ) ; System . out . println ( \" \" ) ; } finally { if ( scanner != null ) { scanner . close ( ) ; } } } private void solveD ( ) { Scanner scanner = null ; int numN = 0 ; int numK = 0 ; int numS = 0 ; try { scanner = new Scanner ( System . in ) ; numN = scanner . nextInt ( ) ; System . out . println ( \" \" ) ; } finally { if ( scanner != null ) { scanner . close ( ) ; } } } }","import java . util . Scanner ; public class Main { public static String process ( int N , int i ) { return String . valueOf ( N - i + 1 ) ; } public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int i = sc . nextInt ( ) ; final String result = process ( N , i ) ; System . out . println ( result ) ; } }","public class Main { private static java . util . Scanner scanner = new java . util . Scanner ( System . in ) ; public static void main ( String [ ] args ) { System . out . println ( scanner . nextInt ( ) - scanner . nextInt ( ) + 1 ) ; } }"],"bleu":0.3657290626919435,"rouge_l":0.5636770265490277}
{"id":136,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { st = new StringTokenizer ( br . readLine ( ) ) ; a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; count += b [ i ] ; } System . out . println ( count ) ; } }"],"references":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int A = sc . nextInt ( ) ; int B = sc . nextInt ( ) ; int sq = ( int ) Math . sqrt ( ( double ) N ) ; if ( ( A + B > N + 1 ) || ( A < sq && B < sq ) ) System . out . println ( - 1 ) ; else if ( A + B == N + 1 ) { for ( int i = B ; i <= N ; ++ i ) System . out . print ( i + \" ▁ \" ) ; for ( int i = B - 1 ; i >= 1 ; -- i ) System . out . print ( i + \" ▁ \" ) ; System . out . println ( ) ; } else { int tempA = ( N \/ B ) + ( N % B != 0 ? 1 : 0 ) ; int hidari = 0 ; while ( tempA + hidari != A ) { hidari ++ ; if ( hidari > N ) { System . out . println ( - 1 ) ; return ; } if ( ( N - hidari ) % B == 0 ) tempA -- ; } int nowN = N - hidari ; for ( int i = 1 ; i <= hidari ; ++ i ) System . out . print ( i + \" ▁ \" ) ; for ( int i = 1 ; i <= nowN \/ B ; i ++ ) { for ( int j = i * B ; j > ( i - 1 ) * B ; j -- ) { System . out . print ( ( j + hidari ) + \" ▁ \" ) ; } } for ( int j = nowN ; j > B * ( nowN \/ B ) ; -- j ) System . out . print ( ( j + hidari ) + \" ▁ \" ) ; System . out . println ( ) ; } return ; } }","import java . util . * ; import java . io . * ; import java . lang . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) throws Exception { BufferedReader bf = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter out = new PrintWriter ( new OutputStreamWriter ( System . out ) ) ; StringTokenizer st = new StringTokenizer ( bf . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int a = Integer . parseInt ( st . nextToken ( ) ) ; int b = Integer . parseInt ( st . nextToken ( ) ) ; if ( a + b > n + 1 ) out . println ( \" - 1\" ) ; else if ( n > 1L * a * b ) out . println ( \" - 1\" ) ; else { StringBuilder sb = new StringBuilder ( ) ; int [ ] lengths = new int [ b ] ; Arrays . fill ( lengths , 1 ) ; lengths [ 0 ] = a ; int count = a + b - 1 ; for ( int i = 1 ; i < b ; i ++ ) { while ( count < n ) { lengths [ i ] ++ ; count ++ ; if ( lengths [ i ] == a ) break ; } } int cur = n ; for ( int i = 0 ; i < b ; i ++ ) { for ( int j = cur - lengths [ i ] + 1 ; j <= cur ; j ++ ) sb . append ( j + \" ▁ \" ) ; cur -= lengths [ i ] ; } out . println ( sb . toString ( ) ) ; } out . close ( ) ; System . exit ( 0 ) ; } }","import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Main m = new Main ( ) ; m . run ( ) ; } Scanner sc = new Scanner ( System . in ) ; void run ( ) { int n = sc . nextInt ( ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; if ( a + b > n + 1 ) { System . out . println ( - 1 ) ; return ; } if ( ( long ) a * b < n ) { System . out . println ( - 1 ) ; return ; } x ( a , b , n ) ; } void x ( int a , int b , int n ) { int z = n ; int [ ] res = new int [ n ] ; for ( int ind = 0 ; ind < n ; ) { int x = ( int ) Math . min ( ( long ) a * ( b - 1 ) + 1 , z ) ; for ( int y = x ; y <= z ; y ++ ) { res [ ind ] = y ; ind ++ ; } b -- ; z = x - 1 ; } for ( int i = 0 ; i < n - 1 ; i ++ ) { System . out . print ( res [ i ] + \" ▁ \" ) ; } System . out . println ( res [ n - 1 ] ) ; } }","import java . util . * ; import java . io . * ; import static java . lang . System . in ; public class Main { static long ans = 0 ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) , A = sc . nextInt ( ) , B = sc . nextInt ( ) ; if ( ! check ( n , A , B ) ) { System . out . println ( - 1 ) ; System . exit ( 0 ) ; } int [ ] ans = new int [ n + 1 ] ; int lowerBound = 0 ; int start = 1 ; for ( int cnt = 1 ; cnt <= A ; cnt ++ ) { int len = Math . min ( B , n - start - A + cnt + 1 ) ; for ( int j = 0 ; j < len ; j ++ ) { ans [ start ++ ] = lowerBound + len - j ; } lowerBound += len ; } PrintWriter out = new PrintWriter ( System . out ) ; for ( int i = 1 ; i <= n ; i ++ ) out . print ( Integer . toString ( ans [ i ] ) + \" ▁ \" ) ; out . flush ( ) ; } static boolean check ( int n , int a , int b ) { if ( a > n || b > n || b > n - a + 1 ) return false ; int shortest = n % a == 0 ? n \/ a : ( n \/ a + 1 ) ; return b >= shortest ; } }","import java . util . ArrayList ; import java . util . List ; import java . util . Scanner ; import java . io . PrintWriter ; class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; long N = scan . nextLong ( ) ; long A = scan . nextLong ( ) ; long B = scan . nextLong ( ) ; if ( A + B - 1 > N || A * B < N ) { System . out . println ( - 1 ) ; return ; } List < Long > ansList = new ArrayList < > ( ) ; long n = 0 , m = 0 , l = 0 ; for ( int i = 1 ; i <= N ; ++ i ) { if ( N - i * B <= ( A - i - 1 ) + B ) { n = i ; m = A - i - 1 ; l = N - n * B - m ; break ; } } for ( long i = 0 ; i < n ; ++ i ) { for ( long j = B ; j > 0 ; -- j ) ansList . add ( i * B + j ) ; } for ( long i = n * B + l ; i > n * B ; -- i ) ansList . add ( i ) ; for ( long i = n * B + l + 1 ; i <= N ; ++ i ) ansList . add ( i ) ; PrintWriter pw = new PrintWriter ( System . out ) ; for ( int i = 0 ; i < N ; ++ i ) pw . print ( ansList . get ( i ) + ( i == N - 1 ? \" \\n \" : \" ▁ \" ) ) ; pw . flush ( ) ; pw . close ( ) ; } }"],"bleu":0.5534360299955364,"rouge_l":0.5453511053315995}
{"id":137,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] A = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { A [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { ans += A [ i ] ; } System . out . println ( ans ) ; } }"],"references":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int min = Integer . MAX_VALUE ; for ( char c = ' a ' ; c <= ' z ' ; c = ( char ) ( c + 1 ) ) { int max = 0 ; int current = 0 ; String t = String . valueOf ( c ) ; int idx = s . indexOf ( t ) ; while ( idx != - 1 ) { if ( max < idx - current ) { max = idx - current ; } current = idx + 1 ; idx = s . indexOf ( t , current ) ; } if ( max < s . length ( ) - current + 1 ) { max = s . length ( ) - current ; } if ( min > max ) { min = max ; } } System . out . println ( min ) ; } }","import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . stream . IntStream ; import java . io . UncheckedIOException ; import java . util . StringTokenizer ; import java . io . IOException ; import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . InputStream ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; LightScanner in = new LightScanner ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; AShrinking solver = new AShrinking ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class AShrinking { public void solve ( int testNumber , LightScanner in , PrintWriter out ) { String s = in . string ( ) ; int [ ] n = new int [ 26 ] ; for ( char c : s . toCharArray ( ) ) { n [ c - ' a ' ] ++ ; } int min = 100000 ; for ( char c = ' a ' ; c <= ' z ' ; c ++ ) { String t = s ; int ans = 0 ; while ( t . chars ( ) . distinct ( ) . count ( ) > 1 ) { char [ ] ns = new char [ t . length ( ) - 1 ] ; for ( int i = 0 ; i < ns . length ; i ++ ) { ns [ i ] = t . charAt ( i ) == c || t . charAt ( i + 1 ) == c ? c : t . charAt ( i ) ; } t = String . valueOf ( ns ) ; ans ++ ; } min = Math . min ( min , ans ) ; } out . println ( min ) ; } } static class LightScanner { private BufferedReader reader = null ; private StringTokenizer tokenizer = null ; public LightScanner ( InputStream in ) { reader = new BufferedReader ( new InputStreamReader ( in ) ) ; } public String string ( ) { if ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } } return tokenizer . nextToken ( ) ; } } }","import java . util . * ; public class Main { long INF = Long . MAX_VALUE ; public static void main ( String [ ] args ) { new Main ( ) . solve ( ) ; } void solve ( ) { Scanner sc = new Scanner ( System . in ) ; String S = sc . next ( ) ; char [ ] s = S . toCharArray ( ) ; long ans = INF ; int c = 0 ; for ( int i = 0 ; i < 26 ; i ++ ) { int count = 0 ; c = 0 ; for ( int j = 0 ; j < S . length ( ) ; j ++ ) { if ( s [ j ] == ( char ) ( ' a ' + i ) ) { count = 0 ; } else { count ++ ; } c = Math . max ( count , c ) ; } ans = Math . min ( ans , c ) ; } System . out . println ( ans ) ; } }","import java . util . * ; import static java . lang . System . * ; import static java . lang . Math . * ; public class Main { public static void main ( String [ ] $ ) { Scanner sc = new Scanner ( in ) ; String s = sc . next ( ) ; int ans = s . length ( ) ; for ( char i = ' a ' ; i <= ' z ' ; i ++ ) { ans = min ( ans , solve ( s , i , 0 ) ) ; } out . println ( ans ) ; } static boolean d ( String s ) { int c = 0 ; for ( int i = 0 ; i < s . length ( ) - 1 ; i ++ ) { if ( s . charAt ( i ) != s . charAt ( i + 1 ) ) { c ++ ; break ; } } return c == 0 ; } static int solve ( String s , char c , int ans ) { if ( d ( s ) ) return ans ; else { return solve ( DaikuStr ( s , c ) , c , ans + 1 ) ; } } static String DaikuStr ( String s , char c ) { String t = \" \" ; for ( int i = 0 ; i < s . length ( ) - 1 ; i ++ ) { t += s . charAt ( i + 1 ) == c ? c : s . charAt ( i ) ; } return t ; } }","import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; TreeMap < Character , Integer > map = new TreeMap < > ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { char c = s . charAt ( i ) ; if ( map . containsKey ( c ) ) { map . put ( c , map . get ( c ) + 1 ) ; } else { map . put ( c , 1 ) ; } } int ans = 0 ; if ( map . size ( ) > 1 ) { int min = Integer . MAX_VALUE ; for ( Character c : map . keySet ( ) ) { String tmp = s ; int count = 0 ; while ( ! check ( tmp , c ) ) { String after = tmp . substring ( 0 , tmp . length ( ) - 1 ) ; for ( int i = 1 ; i < tmp . length ( ) ; i ++ ) { if ( tmp . charAt ( i ) == c ) { char [ ] afterAry = after . toCharArray ( ) ; afterAry [ i - 1 ] = c ; after = new String ( afterAry ) ; } } tmp = after ; count ++ ; } if ( count < min ) { min = count ; } } ans = min ; } System . out . println ( ans ) ; } public static boolean check ( String s , char c ) { boolean allSame = true ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) != c ) { allSame = false ; } } return allSame ; } }"],"bleu":0.4025959053184238,"rouge_l":0.5566819370819016}
{"id":138,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans += a [ i ] ; } System . out . println ( ans ) ; } }"],"references":["import java . util . * ; import static java . lang . System . in ; import static java . lang . System . out ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( in ) ; String [ ] input = sc . nextLine ( ) . split ( \" ▁ \" , 0 ) ; int [ ] lh = new int [ 2 ] ; lh [ 0 ] = Integer . parseInt ( input [ 0 ] ) ; lh [ 1 ] = Integer . parseInt ( input [ 1 ] ) ; int num = sc . nextInt ( ) ; int [ ] st = new int [ num ] ; for ( int i = 0 ; i < num ; i ++ ) st [ i ] = sc . nextInt ( ) ; for ( int i = 0 ; i < num ; i ++ ) if ( st [ i ] < lh [ 0 ] ) out . println ( lh [ 0 ] - st [ i ] ) ; else if ( st [ i ] > lh [ 1 ] ) out . println ( - 1 ) ; else out . println ( \"0\" ) ; } }","import java . util . Scanner ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int l = sc . nextInt ( ) ; int h = sc . nextInt ( ) ; int n = sc . nextInt ( ) ; List < Integer > a = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { a . add ( sc . nextInt ( ) ) ; } List < Integer > ans = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int x = a . get ( i ) ; if ( l <= x && x <= h ) { ans . add ( 0 ) ; } else if ( x < l ) { ans . add ( l - x ) ; } else if ( x > h ) { ans . add ( - 1 ) ; } } for ( int i = 0 ; i < n ; i ++ ) { System . out . println ( ans . get ( i ) ) ; } } }","import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int L = sc . nextInt ( ) ; int H = sc . nextInt ( ) ; int N = sc . nextInt ( ) ; for ( int i = 0 ; i < N ; i ++ ) { int time = sc . nextInt ( ) ; if ( time <= L ) { System . out . println ( L - time ) ; } else if ( L < time && time <= H ) { System . out . println ( 0 ) ; } else { System . out . println ( - 1 ) ; } } } }","import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Main main = new Main ( ) ; main . solve ( ) ; } void solve ( ) { Scanner sc = new Scanner ( System . in ) ; int l = Integer . parseInt ( sc . next ( ) ) ; int h = Integer . parseInt ( sc . next ( ) ) ; int n = Integer . parseInt ( sc . next ( ) ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = Integer . parseInt ( sc . next ( ) ) ; sc . close ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( h < a [ i ] ) { System . out . println ( - 1 ) ; continue ; } if ( l > a [ i ] ) System . out . println ( l - a [ i ] ) ; else System . out . println ( 0 ) ; } } }","import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] line = scanner . nextLine ( ) . split ( \" ▁ \" , 2 ) ; int l = Integer . parseInt ( line [ 0 ] ) ; int h = Integer . parseInt ( line [ 1 ] ) ; int n = Integer . parseInt ( scanner . nextLine ( ) ) ; for ( int i = 0 ; i < n ; i ++ ) { int a = Integer . parseInt ( scanner . nextLine ( ) ) ; if ( h < a ) { System . out . println ( - 1 ) ; } else if ( a < l ) { System . out . println ( l - a ) ; } else { System . out . println ( 0 ) ; } } } }"],"bleu":0.8107636553634826,"rouge_l":0.7126891625152738}
{"id":139,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int m = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { st = new StringTokenizer ( br . readLine ( ) ) ; a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int [ ] b = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int [ ] [ ] dp = new int [ m ] [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { for ( int k = 0 ; k < m ; k ++ ) { for ( int k = 0 ; k < m ; k ++ ) { for ( int k = 0 ; k < m ; k ++ ) { for ( int k = 0 ; k < m ; k ++ ) { for ( int k = 0 ; k < m ; k ++ ) { for ( int k = 0 ; k < m ; k ++ ) { if ( a [ k ] [ k ] == a [ k ] [ k ] ) { dp [ i ] [ j ] [ k ] = Math . max ( dp [ i ] [ j ] [ k ] , dp [ i ] [ k ] [ k ] + dp [ j ] [ k ] [ k ] + dp [ j ] [ k ] [ k ] + dp [ i ] [ j ] [ k ] + dp [ j ] [ k ] + dp [ i ] [ j ] [ j ] + dp [ j ] [ j ] + dp [ i ] [ j ] + dp [ j ] [ j ] + dp [ i ] [ j ] + dp [ i ] [ j ] +"],"references":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int M = sc . nextInt ( ) ; int [ ] a = new int [ N ] ; int [ ] b = new int [ N + 1 ] ; int [ ] c = new int [ N ] ; for ( int i = 1 ; i < N + 1 ; i ++ ) { b [ i ] = i ; } for ( int i = 0 ; i < N ; i ++ ) { a [ i ] = sc . nextInt ( ) ; b [ a [ i ] ] -- ; if ( b [ a [ i ] ] >= 0 ) c [ b [ a [ i ] ] ] ++ ; } int L = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( c [ i ] == 0 ) L ++ ; } for ( int i = 0 ; i < M ; i ++ ) { int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; if ( b [ a [ x - 1 ] ] >= 0 ) c [ b [ a [ x - 1 ] ] ] -- ; if ( b [ a [ x - 1 ] ] >= 0 && c [ b [ a [ x - 1 ] ] ] == 0 ) L ++ ; b [ a [ x - 1 ] ] ++ ; a [ x - 1 ] = y ; b [ y ] -- ; if ( b [ y ] >= 0 && c [ b [ y ] ] == 0 ) L -- ; if ( b [ y ] >= 0 ) c [ b [ y ] ] ++ ; System . out . println ( L ) ; } } }","import java . util . Arrays ; import java . util . Scanner ; import java . util . stream . IntStream ; class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int N = scan . nextInt ( ) ; int M = scan . nextInt ( ) ; int [ ] A = IntStream . range ( 0 , N ) . map ( i -> scan . nextInt ( ) ) . toArray ( ) ; int [ ] num = new int [ N + 1 ] ; int [ ] line = new int [ N + 1 ] ; Arrays . fill ( num , 0 ) ; Arrays . fill ( line , 0 ) ; for ( int i = 0 ; i < N ; ++ i ) num [ A [ i ] ] ++ ; for ( int i = 1 ; i <= N ; ++ i ) { for ( int j = 0 ; j < num [ i ] ; j ++ ) { if ( i > j ) line [ i - j ] ++ ; } } int gap = 0 ; for ( int i = 1 ; i <= N ; ++ i ) if ( line [ i ] <= 0 ) ++ gap ; while ( M -- > 0 ) { int x = scan . nextInt ( ) - 1 ; int y = scan . nextInt ( ) ; int a = A [ x ] ; A [ x ] = y ; -- num [ a ] ; if ( a - num [ a ] > 0 ) { -- line [ a - num [ a ] ] ; if ( line [ a - num [ a ] ] == 0 ) ++ gap ; } ++ num [ y ] ; if ( y - num [ y ] + 1 > 0 ) { if ( line [ y - num [ y ] + 1 ] == 0 ) -- gap ; ++ line [ y - num [ y ] + 1 ] ; } System . out . println ( gap ) ; } } }"],"bleu":0.29184293883015483,"rouge_l":0.44619826756496633}
{"id":140,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { for ( int k = 0 ; k < n ; k ++ ) { for ( int k = 0 ; k < n ; k ++ ) { if ( a [ i ] < b [ j ] ) { ans ++ ; } } } } System . out . println ( ans ) ; } }"],"references":["import java . io . PrintWriter ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int K = sc . nextInt ( ) ; sc . nextLine ( ) ; String [ ] s = sc . nextLine ( ) . split ( \" ▁ \" ) ; int [ ] n = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { n [ i ] = Integer . parseInt ( s [ i ] ) ; } PriorityQueue < int [ ] > pq = new PriorityQueue < int [ ] > ( new MyComp ( ) ) ; PrintWriter out = new PrintWriter ( System . out ) ; for ( int i = 0 ; i < N ; i ++ ) { pq . add ( new int [ ] { i + 1 , n [ i ] } ) ; if ( i >= K - 1 ) { if ( i >= K ) pq . poll ( ) ; int [ ] p = pq . poll ( ) ; out . println ( p [ 0 ] ) ; pq . add ( p ) ; } } out . flush ( ) ; } } class MyComp implements Comparator { @ Override public int compare ( Object arg1 , Object arg2 ) { int v1 = ( ( int [ ] ) arg1 ) [ 1 ] ; int v2 = ( ( int [ ] ) arg2 ) [ 1 ] ; return Integer . compare ( v2 , v1 ) ; } } Note : . \/ Main . java uses unchecked or unsafe operations . Note : Recompile with - Xlint : unchecked for details .","import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . IOException ; import java . util . Arrays ; import java . util . PriorityQueue ; public class Main { public static void main ( String [ ] args ) { Main m = new Main ( ) ; m . run ( ) ; } private void run ( ) { int n = 0 ; int k = 0 ; int [ ] x = new int [ 0 ] ; try ( BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; ) { String [ ] s = br . readLine ( ) . split ( \" \\\\ s + \" ) ; n = Integer . parseInt ( s [ 0 ] ) ; k = Integer . parseInt ( s [ 1 ] ) ; x = Arrays . stream ( br . readLine ( ) . split ( \" \\\\ s + \" ) ) . mapToInt ( Integer :: parseInt ) . toArray ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } PriorityQueue < Person > pq = new PriorityQueue < > ( ) ; for ( int i = 0 ; i < k ; i ++ ) { pq . add ( new Person ( x [ i ] , i + 1 , x [ i ] ) ) ; } Person p = pq . poll ( ) ; System . out . println ( p . rank ) ; for ( int i = k ; i < n ; i ++ ) { if ( p . age > x [ i ] ) { pq . add ( new Person ( x [ i ] , i + 1 , x [ i ] ) ) ; p = pq . poll ( ) ; } System . out . println ( p . rank ) ; } } private class Person implements Comparable < Person > { private int age ; private int rank ; private int priority ; private Person ( int age , int rank , int priority ) { this . age = age ; this . rank = rank ; this . priority = priority ; } @ Override public int compareTo ( Person other ) { return - this . priority + other . priority ; } } }","import java . io . PrintWriter ; import java . util . Comparator ; import java . util . PriorityQueue ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; int n = Integer . parseInt ( sc . next ( ) ) ; int k = Integer . parseInt ( sc . next ( ) ) ; int [ ] x = new int [ n + 1 ] ; int [ ] rank = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { x [ i ] = Integer . parseInt ( sc . next ( ) ) ; rank [ x [ i ] ] = i ; } PriorityQueue p = new PriorityQueue ( k , new MyComparator ( ) ) ; for ( int i = 1 ; i <= k ; i ++ ) p . add ( x [ i ] ) ; for ( int i = k + 1 ; i <= n ; i ++ ) { out . println ( rank [ ( int ) p . peek ( ) ] ) ; p . add ( x [ i ] ) ; p . poll ( ) ; } out . println ( rank [ ( int ) p . peek ( ) ] ) ; out . flush ( ) ; } } class MyComparator implements Comparator { @ Override public int compare ( Object o1 , Object o2 ) { return ( int ) o2 - ( int ) o1 ; } } Note : . \/ Main . java uses unchecked or unsafe operations . Note : Recompile with - Xlint : unchecked for details .","import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) throws Exception { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; String [ ] arr = br . readLine ( ) . split ( \" ▁ \" , 2 ) ; int n = Integer . parseInt ( arr [ 0 ] ) ; int k = Integer . parseInt ( arr [ 1 ] ) ; arr = br . readLine ( ) . split ( \" ▁ \" , n ) ; Person last = null ; TreeSet < Person > set = new TreeSet < > ( new Comparator < Person > ( ) { public int compare ( Person p1 , Person p2 ) { return p1 . age - p2 . age ; } } ) ; StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < n ; i ++ ) { Person p = new Person ( i + 1 , Integer . parseInt ( arr [ i ] ) ) ; set . add ( p ) ; if ( i == 0 ) { last = p ; } else if ( i <= k - 1 ) { if ( last . age < p . age ) { last = p ; } } else { if ( last . age > p . age ) { last = set . lower ( last ) ; } } if ( i >= k - 1 ) { sb . append ( last . rank ) . append ( \" \\n \" ) ; } } System . out . print ( sb ) ; } static class Person { int rank ; int age ; public Person ( int rank , int age ) { this . rank = rank ; this . age = age ; } public boolean equals ( Object o ) { Person p = ( Person ) o ; return p . rank == rank && p . age == age ; } public int hashCode ( ) { return rank + age ; } } }","import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] x = new int [ n ] ; Queue < Integer > pq = new PriorityQueue < Integer > ( k , Comparator . reverseOrder ( ) ) ; Map < Integer , Integer > map = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int tmp = sc . nextInt ( ) ; map . put ( tmp , i + 1 ) ; x [ i ] = tmp ; if ( i < k ) { pq . add ( tmp ) ; } } System . out . println ( map . get ( pq . peek ( ) ) ) ; for ( int i = k ; i < n ; i ++ ) { int t = x [ i ] ; if ( pq . peek ( ) > t ) { pq . add ( t ) ; pq . poll ( ) ; } System . out . println ( map . get ( pq . peek ( ) ) ) ; } } }"],"bleu":0.5895642132569393,"rouge_l":0.5815993188790006}
{"id":141,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int K = sc . nextInt ( ) ; int [ ] a = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < N ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { ans += b [ i ] ; } System . out . println ( ans ) ; } }"],"references":["import java . util . Arrays ; import java . util . Collections ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N , b , c = 0 , d = 0 ; N = sc . nextInt ( ) ; Integer [ ] a = new Integer [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { b = sc . nextInt ( ) ; a [ i ] = b ; } Arrays . sort ( a , Collections . reverseOrder ( ) ) ; for ( int i = 0 ; i < N ; i ++ ) { c += a [ i ] ; i ++ ; if ( i < N ) { d += a [ i ] ; } } System . out . println ( c - d ) ; sc . close ( ) ; } }","import java . util . * ; public class Main { public static void main ( String [ ] args ) { try ( Scanner scan = new Scanner ( System . in ) ) { int N = Integer . parseInt ( scan . next ( ) ) ; List < Integer > list = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { list . add ( Integer . parseInt ( scan . next ( ) ) ) ; } int turn = 1 ; List < Integer > aliceCard = new ArrayList < Integer > ( ) ; List < Integer > bobCard = new ArrayList < Integer > ( ) ; while ( list . size ( ) > 0 ) { int currentMax = getMax ( list ) ; if ( turn == 1 ) { aliceCard . add ( currentMax ) ; } else { bobCard . add ( currentMax ) ; } turn = turn * - 1 ; deleteMax ( list , currentMax ) ; } int aliceSum = getSum ( aliceCard ) ; int bobSum = getSum ( bobCard ) ; System . out . println ( aliceSum - bobSum ) ; } } public static int getMax ( List < Integer > list ) { int max = 0 ; for ( int num : list ) { if ( num > max ) { max = num ; } } return max ; } public static void deleteMax ( List < Integer > list , int max ) { Iterator < Integer > ite = list . iterator ( ) ; while ( ite . hasNext ( ) ) { int elm = ite . next ( ) ; if ( elm == max ) { ite . remove ( ) ; break ; } } } public static int getSum ( List < Integer > list ) { int sum = 0 ; for ( int elm : list ) { sum = sum + elm ; } return sum ; } }","import java . util . * ; public class Main { static Scanner sc = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { int n = sc . nextInt ( ) ; int alice = 0 ; int bob = 0 ; Integer [ ] ar = new Integer [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { ar [ i ] = sc . nextInt ( ) ; } Arrays . sort ( ar , Comparator . reverseOrder ( ) ) ; for ( int i = 0 ; i < n ; i ++ ) { int a = ar [ i ] ; if ( i % 2 == 0 ) { alice += a ; } else { bob += a ; } } System . out . println ( Math . abs ( alice - bob ) ) ; } }","import java . util . Arrays ; import java . util . Comparator ; import java . util . Scanner ; class Main { public static void main ( String arg [ ] ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; sc . nextLine ( ) ; String A = sc . nextLine ( ) ; Integer [ ] a = new Integer [ N ] ; sc . close ( ) ; for ( int i = 0 ; i < N ; i ++ ) { String [ ] s = A . split ( \" ▁ \" ) ; a [ i ] = Integer . parseInt ( s [ i ] ) ; } System . out . println ( calc ( a ) ) ; } public static int calc ( Integer [ ] a ) { int Alice = 0 ; int Bob = 0 ; Arrays . sort ( a , Comparator . reverseOrder ( ) ) ; for ( int i = 0 ; i < a . length ; i ++ ) { if ( i % 2 == 0 ) { Alice += a [ i ] ; } else { Bob += a [ i ] ; } } return Alice - Bob ; } }","import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . util . Arrays ; import java . util . StringTokenizer ; public class Main { public static void main ( String [ ] args ) throws Exception { BufferedReader input = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int n = Integer . parseInt ( input . readLine ( ) ) ; StringTokenizer tokenizer = new StringTokenizer ( input . readLine ( ) ) ; int [ ] values = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { values [ i ] = Integer . parseInt ( tokenizer . nextToken ( ) ) ; } Arrays . sort ( values ) ; boolean state = true ; int sum1 = 0 , sum2 = 0 ; for ( int i = n - 1 ; i > - 1 ; i -- ) { if ( state ) { sum1 += values [ i ] ; state = false ; } else { sum2 += values [ i ] ; state = true ; } } System . out . println ( Math . abs ( sum1 - sum2 ) ) ; } }"],"bleu":0.6782956231797801,"rouge_l":0.6680977832296504}
{"id":142,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; out . println ( a > b ? \" ABC \" : \" ABD \" ) ; out . flush ( ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . util . Scanner ; public class Main { static Scanner s = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { String [ ] days = { \" Monday \" , \" Tuesday \" , \" Wednesday \" , \" Thursday \" , \" Friday \" , \" Saturday \" , \" Sunday \" } ; String in = s . next ( ) ; for ( int i = 0 ; i < 7 ; i ++ ) { if ( days [ i ] . equals ( in ) ) { System . out . println ( Math . max ( 5 - i , 0 ) ) ; return ; } } } }","import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . Map ; import java . util . HashMap ; import java . util . InputMismatchException ; import java . io . IOException ; import java . io . InputStream ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; FastScanner in = new FastScanner ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; TaskA solver = new TaskA ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class TaskA { public void solve ( int testNumber , FastScanner in , PrintWriter out ) { Map < String , Integer > map = new HashMap < > ( ) ; map . put ( \" Monday \" , 5 ) ; map . put ( \" Tuesday \" , 4 ) ; map . put ( \" Wednesday \" , 3 ) ; map . put ( \" Thursday \" , 2 ) ; map . put ( \" Friday \" , 1 ) ; out . println ( map . getOrDefault ( in . next ( ) , 0 ) ) ; } } static class FastScanner { private InputStream in ; private byte [ ] buffer = new byte [ 1024 ] ; private int bufPointer ; private int bufLength ; public FastScanner ( InputStream in ) { this . in = in ; this . bufPointer = 0 ; this . bufLength = 0 ; } private int readByte ( ) { if ( bufPointer >= bufLength ) { if ( bufLength == - 1 ) throw new InputMismatchException ( ) ; bufPointer = 0 ; try { bufLength = in . read ( buffer ) ; } catch ( IOException e ) { throw new InputMismatchException ( ) ; } if ( bufLength <= 0 ) return - 1 ; } return buffer [ bufPointer ++ ] ; } private static boolean isPrintableChar ( int c ) { return c >= 33 && c <= 126 ; } public String next ( ) { StringBuilder sb = new StringBuilder ( ) ; int b = readByte ( ) ; while ( ! isPrintableChar ( b ) ) b = readByte ( ) ; while ( isPrintableChar ( b ) ) { sb . appendCodePoint ( b ) ; b = readByte ( ) ; } return sb . toString ( ) ; } } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; public class Main { static String S ; public static void main ( String [ ] args ) { FastScanner fc = new FastScanner ( System . in ) ; S = fc . next ( ) ; System . out . println ( solve ( ) ) ; } static int solve ( ) { switch ( S ) { case \" Monday \" : return 5 ; case \" Tuesday \" : return 4 ; case \" Wednesday \" : return 3 ; case \" Thursday \" : return 2 ; case \" Friday \" : return 1 ; default : return 0 ; } } @ SuppressWarnings ( \" unused \" ) static class FastScanner { private BufferedReader reader ; private StringTokenizer tokenizer ; FastScanner ( InputStream in ) { reader = new BufferedReader ( new InputStreamReader ( in ) ) ; tokenizer = null ; } String next ( ) { if ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( ) ; } String nextLine ( ) { if ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { return reader . readLine ( ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( \" \\n \" ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } int [ ] nextIntArray ( int n ) { int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = nextInt ( ) ; return a ; } long [ ] nextLongArray ( int n ) { long [ ] a = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = nextLong ( ) ; return a ; } } }","import java . util . HashMap ; import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; HashMap < String , Integer > map = new HashMap < > ( ) ; map . put ( \" Sunday \" , 0 ) ; map . put ( \" Monday \" , 5 ) ; map . put ( \" Tuesday \" , 4 ) ; map . put ( \" Wednesday \" , 3 ) ; map . put ( \" Thursday \" , 2 ) ; map . put ( \" Friday \" , 1 ) ; map . put ( \" Saturday \" , 0 ) ; System . out . println ( map . get ( in . next ( ) ) ) ; } }","import java . util . * ; import static java . lang . System . * ; public class Main { public static void main ( String [ ] $ ) { Scanner sc = new Scanner ( in ) ; String d = sc . next ( ) ; int a = 0 ; if ( d . equals ( \" Monday \" ) ) a = 5 ; else if ( d . equals ( \" Tuesday \" ) ) a = 4 ; else if ( d . equals ( \" Wednesday \" ) ) a = 3 ; else if ( d . equals ( \" Thursday \" ) ) a = 2 ; else if ( d . equals ( \" Friday \" ) ) a = 1 ; out . println ( a ) ; } }"],"bleu":0.6374010375509334,"rouge_l":0.6077589353057103}
{"id":143,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter pw = new PrintWriter ( new OutputStreamWriter ( System . out ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int m = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } Arrays . sort ( b ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( b [ i ] < b [ j ] ) { count ++ ; } } } pw . println ( count ) ; pw . close ( ) ; } }"],"references":["import java . util . * ; import static java . lang . Math . * ; public class A { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int T = in . nextInt ( ) ; for ( int zz = 1 ; zz <= T ; zz ++ ) { int N = in . nextInt ( ) ; long [ ] M = new long [ N ] ; for ( int i = 0 ; i < N ; i ++ ) M [ i ] = in . nextInt ( ) ; long ans1 = 0 ; for ( int i = 0 ; i < N - 1 ; i ++ ) { ans1 += max ( 0 , M [ i ] - M [ i + 1 ] ) ; } long max = 0 ; for ( int i = 0 ; i < N - 1 ; i ++ ) { max = max ( max , M [ i ] - M [ i + 1 ] ) ; } long ans2 = 0 ; for ( int i = 0 ; i < N - 1 ; i ++ ) ans2 += min ( max , M [ i ] ) ; System . out . format ( \" Case ▁ # % d : ▁ % d ▁ % d \\n \" , zz , ans1 , ans2 ) ; } } }","import java . io . * ; import java . util . * ; public class taskA { PrintWriter out ; BufferedReader br ; StringTokenizer st ; String nextToken ( ) throws IOException { while ( ( st == null ) || ( ! st . hasMoreTokens ( ) ) ) st = new StringTokenizer ( br . readLine ( ) ) ; return st . nextToken ( ) ; } public int nextInt ( ) throws IOException { return Integer . parseInt ( nextToken ( ) ) ; } public long nextLong ( ) throws IOException { return Long . parseLong ( nextToken ( ) ) ; } public double nextDouble ( ) throws IOException { return Double . parseDouble ( nextToken ( ) ) ; } public void solve ( ) throws IOException { int n = nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = nextInt ( ) ; } int y = 0 ; int z = 0 ; int minS = 0 ; for ( int i = 1 ; i < n ; i ++ ) { if ( a [ i ] < a [ i - 1 ] ) { y += a [ i - 1 ] - a [ i ] ; minS = Math . max ( minS , a [ i - 1 ] - a [ i ] ) ; } } for ( int i = 0 ; i < n - 1 ; i ++ ) { z += Math . min ( a [ i ] , minS ) ; } out . println ( y + \" ▁ \" + z ) ; } public void run ( ) { try { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; out = new PrintWriter ( System . out ) ; br = new BufferedReader ( new FileReader ( \" taskA . in \" ) ) ; out = new PrintWriter ( \" taskA . out \" ) ; int n = nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { out . print ( \" Case ▁ # \" + ( i + 1 ) + \" : ▁ \" ) ; solve ( ) ; } out . close ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } public static void main ( String [ ] args ) { new taskA ( ) . run ( ) ; } }","package gcj2015 . r1 ; import java . io . * ; import java . util . Scanner ; public class Mushroom { static PrintWriter out ; public static void main ( String [ ] args ) throws IOException { String name = \" gcj2015 \/ r1 \/ A - large \" ; Scanner s = new Scanner ( new File ( name + \" . in \" ) ) ; int count = s . nextInt ( ) ; out = new PrintWriter ( new BufferedWriter ( new FileWriter ( name + \" . out \" ) ) ) ; for ( int cc = 1 ; cc <= count ; cc ++ ) { out . print ( \" Case ▁ # \" + cc + \" : ▁ \" ) ; int n = s . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = s . nextInt ( ) ; } int res1 = solve1 ( n , a ) ; int res2 = solve2 ( n , a ) ; out . print ( res1 ) ; out . print ( ' ▁ ' ) ; out . print ( res2 ) ; out . println ( ) ; } out . close ( ) ; } static int solve1 ( int n , int [ ] a ) { int res = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { res += Math . max ( a [ i ] - a [ i + 1 ] , 0 ) ; } return res ; } static int solve2 ( int n , int [ ] a ) { int res = 0 ; int max = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { max = Math . max ( a [ i ] - a [ i + 1 ] , max ) ; } for ( int i = 0 ; i < n - 1 ; i ++ ) { res += Math . min ( a [ i ] , max ) ; } return res ; } }","import java . io . BufferedReader ; import java . io . BufferedWriter ; import java . io . FileReader ; import java . io . FileWriter ; import java . io . IOException ; import java . io . PrintWriter ; public class mushroom { public static void main ( String [ ] args ) throws IOException { BufferedReader buf = new BufferedReader ( new FileReader ( \" mushroom . in \" ) ) ; PrintWriter out = new PrintWriter ( new BufferedWriter ( new FileWriter ( \" mushroom . out \" ) ) ) ; Long n = Long . parseLong ( buf . readLine ( ) ) ; for ( int i = 1 ; i <= n ; i ++ ) { Long m = Long . parseLong ( buf . readLine ( ) ) ; String [ ] s = buf . readLine ( ) . split ( \" ▁ \" ) ; long fsum = 0 ; long largest = 0 ; for ( int j = 1 ; j < m ; j ++ ) { if ( Long . parseLong ( s [ j ] ) - Long . parseLong ( s [ j - 1 ] ) < 0 ) { fsum = fsum + Long . parseLong ( s [ j - 1 ] ) - Long . parseLong ( s [ j ] ) ; if ( Long . parseLong ( s [ j - 1 ] ) - Long . parseLong ( s [ j ] ) > largest ) largest = Long . parseLong ( s [ j - 1 ] ) - Long . parseLong ( s [ j ] ) ; } } long nsum = 0 ; for ( int j = 0 ; j < m - 1 ; j ++ ) { nsum = nsum + Math . min ( Long . parseLong ( s [ j ] ) , largest ) ; } out . println ( \" Case ▁ # \" + i + \" : ▁ \" + fsum + \" ▁ \" + nsum ) ; } buf . close ( ) ; out . close ( ) ; } }","import java . util . * ; import java . io . * ; import java . math . * ; public class Mushroom { final static String PROBLEM_NAME = \" mushroom \" ; final static String WORK_DIR = \" D : \\\\ GCJ\\ \\\" + PROBLEM_NAME + \" \\ \\\" ; void solve ( Scanner sc , PrintWriter pw ) { int N = sc . nextInt ( ) ; int [ ] A = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { A [ i ] = sc . nextInt ( ) ; } int ans1 = 0 ; int speed = 0 ; for ( int i = 0 ; i + 1 < N ; i ++ ) { if ( A [ i + 1 ] < A [ i ] ) { ans1 += A [ i ] - A [ i + 1 ] ; speed = Math . max ( speed , A [ i ] - A [ i + 1 ] ) ; } } int ans2 = 0 ; for ( int i = 0 ; i + 1 < N ; i ++ ) { ans2 += Math . min ( A [ i ] , speed ) ; } pw . println ( ans1 + \" ▁ \" + ans2 ) ; } public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( new FileReader ( WORK_DIR + \" input . txt \" ) ) ; PrintWriter pw = new PrintWriter ( new FileWriter ( WORK_DIR + \" output . txt \" ) ) ; int caseCnt = sc . nextInt ( ) ; for ( int caseNum = 0 ; caseNum < caseCnt ; caseNum ++ ) { System . out . println ( \" Processing ▁ test ▁ case ▁ \" + ( caseNum + 1 ) ) ; pw . print ( \" Case ▁ # \" + ( caseNum + 1 ) + \" : ▁ \" ) ; new Mushroom ( ) . solve ( sc , pw ) ; } pw . flush ( ) ; pw . close ( ) ; sc . close ( ) ; } }"],"bleu":0.6625944636467858,"rouge_l":0.586664013941254}
{"id":144,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter pw = new PrintWriter ( new OutputStreamWriter ( System . out ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int N = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ M ] ; for ( int i = 0 ; i < M ; i ++ ) a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] b = new int [ M ] ; for ( int i = 0 ; i < M ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < M ; i ++ ) { for ( int j = 0 ; j < M ; j ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { if ( a [ k ] > 0 && b [ k ] > a [ k ] ) { b [ k ] -= a [ k ] ; b [ k ] -= b [ k ] ; b [ k ] -= b [ k ] ; } } } } } } } } } pw . println ( \" Case # \" + ( i + 1 ) + \" : \" + ( i + 1 ) ; pw . close ( ) ; } pw . close ( ) ; } }"],"references":["import java . util . * ; import java . io . * ; public class Main implements Runnable { public Scanner in ; public PrintWriter out ; Main ( ) throws IOException { in = new Scanner ( new File ( \" in \" ) ) ; out = new PrintWriter ( new File ( \" out \" ) ) ; } void close ( ) throws IOException { out . close ( ) ; } public void run ( ) { int tn = in . nextInt ( ) ; for ( int test = 1 ; test <= tn ; test ++ ) { int n = in . nextInt ( ) ; double [ ] x = new double [ n ] ; double [ ] y = new double [ n ] ; double [ ] r = new double [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { x [ i ] = in . nextDouble ( ) ; y [ i ] = in . nextDouble ( ) ; r [ i ] = in . nextDouble ( ) ; } double res = 1E100 ; if ( n == 1 ) { res = r [ 0 ] ; } else if ( n == 2 ) { res = Math . max ( r [ 0 ] , r [ 1 ] ) ; } else { for ( int i = 0 ; i < 3 ; i ++ ) { int j = ( i + 1 ) % 3 ; int k = ( i + 2 ) % 3 ; res = Math . min ( res , Math . max ( r [ i ] , 0.5 * ( Math . hypot ( x [ j ] - x [ k ] , y [ j ] - y [ k ] ) + r [ j ] + r [ k ] ) ) ) ; } } out . println ( \" Case ▁ # \" + test + \" : ▁ \" + res ) ; } try { close ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } public static void main ( String [ ] args ) throws IOException { new Thread ( new Main ( ) ) . start ( ) ; } }","import java . io . BufferedReader ; import java . io . FileOutputStream ; import java . io . FileReader ; import java . io . IOException ; import java . io . PrintStream ; public class D { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new FileReader ( \" D - small . in \" ) ) ; PrintStream ps = new PrintStream ( new FileOutputStream ( \" D - small . out \" ) ) ; int cases = Integer . parseInt ( br . readLine ( ) ) ; for ( int itr = 1 ; itr <= cases ; itr ++ ) { int flowers = Integer . parseInt ( br . readLine ( ) ) ; int [ ] x = new int [ flowers ] ; int [ ] y = new int [ flowers ] ; int [ ] r = new int [ flowers ] ; for ( int i = 0 ; i < flowers ; i ++ ) { String [ ] sp = br . readLine ( ) . split ( \" ▁ \" ) ; x [ i ] = Integer . parseInt ( sp [ 0 ] ) ; y [ i ] = Integer . parseInt ( sp [ 1 ] ) ; r [ i ] = Integer . parseInt ( sp [ 2 ] ) ; } double out = 0 ; if ( flowers < 3 ) out = Math . max ( r [ 0 ] , r [ flowers - 1 ] ) ; else { out = 1e100 ; for ( int i = 0 ; i < flowers ; i ++ ) { int j = ( i == 0 ) ? 1 : 0 ; int k = ( i == 2 ) ? 1 : 2 ; double d = Math . sqrt ( ( x [ j ] - x [ k ] ) * ( x [ j ] - x [ k ] ) + ( y [ j ] - y [ k ] ) * ( y [ j ] - y [ k ] ) ) ; out = Math . min ( out , Math . max ( r [ i ] , ( d + r [ j ] + r [ k ] ) \/ 2 ) ) ; } } ps . println ( \" Case ▁ # \" + itr + \" : ▁ \" + out ) ; } br . close ( ) ; ps . close ( ) ; } }","import java . util . * ; import java . io . * ; public class x { public static void main ( String args [ ] ) throws Exception { Scanner in = new Scanner ( System . in ) ; int t = in . nextInt ( ) ; for ( int tt = 1 ; tt <= t ; tt ++ ) { int n = in . nextInt ( ) ; int [ ] x = new int [ n ] , y = new int [ n ] , r = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { x [ i ] = in . nextInt ( ) ; y [ i ] = in . nextInt ( ) ; r [ i ] = in . nextInt ( ) ; } double ans = - 1 ; if ( n == 1 ) ans = r [ 0 ] ; else if ( n == 2 ) ans = Math . max ( r [ 0 ] , r [ 1 ] ) ; else if ( n == 3 ) { ans = Math . max ( r [ 0 ] , 0.5 * ( Math . hypot ( x [ 2 ] - x [ 1 ] , y [ 2 ] - y [ 1 ] ) + r [ 1 ] + r [ 2 ] ) ) ; ans = Math . min ( ans , Math . max ( r [ 1 ] , 0.5 * ( Math . hypot ( x [ 2 ] - x [ 0 ] , y [ 2 ] - y [ 0 ] ) + r [ 0 ] + r [ 2 ] ) ) ) ; ans = Math . min ( ans , Math . max ( r [ 2 ] , 0.5 * ( Math . hypot ( x [ 1 ] - x [ 0 ] , y [ 1 ] - y [ 0 ] ) + r [ 0 ] + r [ 1 ] ) ) ) ; } System . out . println ( \" Case ▁ # \" + tt + \" : ▁ \" + ans ) ; } ; } ; } ;"],"bleu":0.372322067976583,"rouge_l":0.49362910381543923}
{"id":145,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter pw = new PrintWriter ( new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int N = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ M ] ; for ( int i = 0 ; i < M ; i ++ ) { a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int [ ] b = new int [ M ] ; for ( int i = 0 ; i < M ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < M ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int count = 0 ; for ( int i = 0 ; i < M ; i ++ ) { for ( int j = 0 ; j < M ; j ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { if ( a [ k ] > a [ k ] ) { b [ k ] -= a [ k ] ; b [ k ] -= b [ k ] ; b [ k ] -= b [ k ] ; } } } } } } } pw . println ( count ) ; } pw . close ( ) ; } }"],"references":["import java . util . * ; import static java . lang . Math . * ; public class A { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int T = in . nextInt ( ) ; int [ ] num = { 0 , 6 , 2 , 8 , 3 , 4 , 5 , 7 , 1 , 9 } ; char [ ] ch = { ' Z ' , ' X ' , ' W ' , ' G ' , ' H ' , ' R ' , ' F ' , ' V ' , ' O ' , ' E ' } ; String [ ] word = { \" ZERO \" , \" SIX \" , \" TWO \" , \" EIGHT \" , \" THREE \" , \" FOUR \" , \" FIVE \" , \" SEVEN \" , \" ONE \" , \" NINE \" } ; for ( int zz = 1 ; zz <= T ; zz ++ ) { String S = in . next ( ) ; int [ ] C = new int [ 26 ] ; for ( int i = 0 ; i < S . length ( ) ; i ++ ) { C [ ( int ) ( S . charAt ( i ) - ' A ' ) ] ++ ; } int [ ] ans = new int [ 10 ] ; for ( int i = 0 ; i < 10 ; i ++ ) { int count = C [ ( int ) ( ch [ i ] - ' A ' ) ] ; ans [ num [ i ] ] += count ; for ( int j = 0 ; j < word [ i ] . length ( ) ; j ++ ) { C [ ( int ) ( word [ i ] . charAt ( j ) - ' A ' ) ] -= count ; } } for ( int i = 0 ; i < 10 ; i ++ ) { if ( C [ i ] != 0 ) { throw new RuntimeException ( ) ; } } System . out . format ( \" Case ▁ # % d : ▁ \" , zz ) ; for ( int i = 0 ; i < 10 ; i ++ ) for ( int j = 0 ; j < ans [ i ] ; j ++ ) System . out . print ( i ) ; System . out . println ( ) ; } } }","package r1b2016 ; import java . io . File ; import java . io . PrintWriter ; import java . util . Scanner ; public class A { public static void main ( String [ ] args ) throws Exception { Scanner in = new Scanner ( System . in ) ; PrintWriter out = new PrintWriter ( new File ( \" A . out \" ) ) ; for ( int t = Integer . valueOf ( in . nextLine ( ) ) , cs = 1 ; t > 0 ; t -- , cs ++ ) { out . print ( \" Case ▁ # \" + cs + \" : ▁ \" ) ; int [ ] cnt = new int [ 256 ] ; char [ ] s = in . next ( ) . toCharArray ( ) ; for ( char c : s ) { cnt [ c ] ++ ; } int [ ] ans = new int [ 10 ] ; for ( int i = 0 ; i < 10 ; i ++ ) { while ( cnt [ oo [ i ] ] > 0 ) { ans [ dd [ i ] ] ++ ; for ( int j = 0 ; j < ss [ i ] . length ( ) ; j ++ ) { cnt [ ss [ i ] . charAt ( j ) ] -- ; } } } for ( int i = 0 ; i < 10 ; i ++ ) { for ( int j = 0 ; j < ans [ i ] ; j ++ ) { out . print ( i ) ; } } out . println ( ) ; } out . flush ( ) ; } static char [ ] oo = { ' X ' , ' G ' , ' U ' , ' W ' , ' Z ' , ' F ' , ' V ' , ' R ' , ' I ' , ' O ' } ; static String [ ] ss = { \" SIX \" , \" EIGHT \" , \" FOUR \" , \" TWO \" , \" ZERO \" , \" FIVE \" , \" SEVEN \" , \" THREE \" , \" NINE \" , \" ONE \" } ; static int [ ] dd = { 6 , 8 , 4 , 2 , 0 , 5 , 7 , 3 , 9 , 1 } ; }"],"bleu":0.32760145403186114,"rouge_l":0.4192475231932598}
{"id":146,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter pw = new PrintWriter ( new OutputStreamWriter ( System . out ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int m = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { for ( int k = 0 ; k < m ; k ++ ) { if ( arr [ i ] > arr [ j ] ) { count ++ ; } } } pw . println ( count ) ; pw . close ( ) ; } }"],"references":["import java . io . * ; import java . util . * ; public class AAA { boolean getsum1 ( int n , int k ) { TreeSet < Integer > y = new TreeSet < Integer > ( ) ; while ( true ) { if ( y . contains ( n ) ) return false ; y . add ( n ) ; int res = 0 ; while ( n != 0 ) { res += ( n % k ) * ( n % k ) ; n \/= k ; } n = res ; if ( n == 1 ) return true ; } } TreeMap < Integer , Integer > result = new TreeMap < Integer , Integer > ( ) ; void solve ( ) throws IOException { Scanner in = new Scanner ( new FileInputStream ( \" input . txt \" ) ) ; PrintWriter out = new PrintWriter ( new FileOutputStream ( \" output . txt \" ) ) ; String s ; int n = in . nextInt ( ) ; in . nextLine ( ) ; for ( int t = 1 ; t <= n ; ++ t ) { s = in . nextLine ( ) ; if ( s == null ) break ; ArrayList < Integer > a = new ArrayList < Integer > ( ) ; Scanner in2 = new Scanner ( s ) ; while ( in2 . hasNextInt ( ) ) a . add ( in2 . nextInt ( ) ) ; int mask = 0 ; for ( int i = 0 ; i < a . size ( ) ; ++ i ) mask += 1 << a . get ( i ) ; if ( a . size ( ) == 9 ) result . put ( mask , 11814485 ) ; int tr = 2 ; if ( result . containsKey ( mask ) ) { tr = result . get ( mask ) ; } else { while ( true ) { boolean good = true ; for ( int i = a . size ( ) - 1 ; i >= 0 ; -- i ) if ( ! getsum1 ( tr , a . get ( i ) ) ) { good = false ; break ; } if ( good ) break ; tr ++ ; } result . put ( mask , tr ) ; } out . println ( \" Case ▁ # \" + t + \" : ▁ \" + tr ) ; out . flush ( ) ; } out . close ( ) ; } public static void main ( String [ ] args ) throws IOException { AAA a = new AAA ( ) ; a . solve ( ) ; } }"],"bleu":0.16136003028047913,"rouge_l":0.3571398912095669}
{"id":147,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter pw = new PrintWriter ( new OutputStreamWriter ( System . out ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int m = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } Arrays . sort ( b ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( b [ i ] < b [ j ] ) { count ++ ; } } } pw . println ( count ) ; pw . close ( ) ; } }"],"references":["import java . io . FileReader ; import java . io . FileWriter ; import java . io . IOException ; import java . io . PrintWriter ; import java . util . ArrayList ; import java . util . Scanner ; public class FullBinaryTree { public final static String INPUT_FILE_NAME = \" B - large ( 1 ) . in \" ; public final static String OUTPUT_FILE_NAME = \" FullBinaryTree . out \" ; public static void main ( String [ ] args ) { try ( Scanner in = new Scanner ( new FileReader ( INPUT_FILE_NAME ) ) ; PrintWriter out = new PrintWriter ( new FileWriter ( OUTPUT_FILE_NAME ) ) ) { int numT = in . nextInt ( ) ; for ( int t = 1 ; t <= numT ; t ++ ) { System . out . println ( \" Case ▁ \" + t ) ; int numNode = in . nextInt ( ) ; ArrayList < Node > nodes = new ArrayList < > ( ) ; for ( int i = 0 ; i < numNode ; i ++ ) { nodes . add ( new Node ( ) ) ; } for ( int i = 0 ; i < numNode - 1 ; i ++ ) { int a = in . nextInt ( ) - 1 ; int b = in . nextInt ( ) - 1 ; nodes . get ( a ) . addChild ( nodes . get ( b ) ) ; nodes . get ( b ) . addChild ( nodes . get ( a ) ) ; } int best = 0 ; for ( Node n : nodes ) { best = Math . max ( best , n . maxChildren ( null ) ) ; } int res = numNode - best ; out . println ( \" Case ▁ # \" + t + \" : ▁ \" + res ) ; } } catch ( IOException e ) { e . printStackTrace ( ) ; } } public static class Node { ArrayList < Node > children ; public Node ( ) { children = new ArrayList < > ( ) ; } public void addChild ( Node n ) { children . add ( n ) ; } public int maxChildren ( Node parent ) { int best = 0 ; int best2 = 0 ; for ( Node n : children ) { if ( n != parent ) { int nv = n . maxChildren ( this ) ; if ( nv > best ) { best2 = best ; best = nv ; } else if ( nv > best2 ) { best2 = nv ; } } } if ( best2 == 0 ) return 1 ; return best + best2 + 1 ; } } }","import java . io . File ; import java . io . FileNotFoundException ; import java . io . PrintWriter ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collections ; import java . util . HashSet ; import java . util . Scanner ; public class FullBinaryTree { public static int ans ; public static int tans ; public static boolean [ ] vis ; public static ArrayList < Integer > [ ] adj ; public static void main ( String [ ] Args ) throws FileNotFoundException { Scanner sc = new Scanner ( new File ( \" B - large ▁ ( 2 ) . in \" ) ) ; PrintWriter out = new PrintWriter ( new File ( \" things . out \" ) ) ; int t = sc . nextInt ( ) , cc = 0 ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; adj = new ArrayList [ n ] ; for ( int k = 0 ; k < n ; k ++ ) adj [ k ] = new ArrayList < Integer > ( ) ; for ( int k = 0 ; k < n - 1 ; k ++ ) { int a = sc . nextInt ( ) - 1 ; int b = sc . nextInt ( ) - 1 ; adj [ a ] . add ( b ) ; adj [ b ] . add ( a ) ; } vis = new boolean [ n ] ; ans = n ; for ( int k = 0 ; k < n ; k ++ ) { Arrays . fill ( vis , false ) ; ans = Math . min ( n - dfs ( k ) , ans ) ; } out . printf ( \" Case ▁ # % d : ▁ % d % n \" , ++ cc , ans ) ; } out . close ( ) ; } private static int dfs ( int k ) { vis [ k ] = true ; ArrayList < Integer > al = new ArrayList < Integer > ( ) ; for ( Integer i : adj [ k ] ) if ( ! vis [ i ] ) al . add ( dfs ( i ) ) ; if ( al . size ( ) < 2 ) return 1 ; Collections . sort ( al ) ; return 1 + al . get ( al . size ( ) - 1 ) + al . get ( al . size ( ) - 2 ) ; } private static long make ( String s ) { return Long . parseLong ( s , 2 ) ; } }"],"bleu":0.2251155628206,"rouge_l":0.40446484620213424}
{"id":148,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter pw = new PrintWriter ( new OutputStreamWriter ( System . out ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int N = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ M ] ; for ( int i = 0 ; i < M ; i ++ ) { a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int [ ] b = new int [ M ] ; for ( int i = 0 ; i < M ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < M ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int count = 0 ; for ( int i = 0 ; i < M ; i ++ ) { for ( int j = 0 ; j < M ; j ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { if ( a [ k ] > a [ k ] ) { b [ k ] -= a [ k ] ; b [ k ] -= b [ k ] ; b [ k ] -= b [ k ] ; } } } } } } count ++ ; } } pw . println ( count ) ; } pw . close ( ) ; } }"],"references":["import java . math . BigInteger ; import java . util . Scanner ; public class B { private static int parse ( String s ) { BigInteger integer = new BigInteger ( s ) ; integer = integer . mod ( BigInteger . valueOf ( 210 ) ) ; return integer . intValue ( ) ; } public static void main ( String [ ] args ) { final Scanner scanner = new Scanner ( System . in ) ; final int N = scanner . nextInt ( ) ; for ( int testCase = 1 ; testCase <= N ; ++ testCase ) { final String line = scanner . next ( ) ; final int n = line . length ( ) ; final int [ ] [ ] partsTable = new int [ n ] [ n + 1 ] ; for ( int begin = 0 ; begin < n ; ++ begin ) { for ( int end = begin + 1 ; end <= n ; ++ end ) { partsTable [ begin ] [ end ] = parse ( line . substring ( begin , end ) ) ; } } final long [ ] [ ] memo = new long [ n + 1 ] [ 210 ] ; ++ memo [ 0 ] [ 0 ] ; for ( int endIndex = 1 ; endIndex <= n ; ++ endIndex ) { for ( int beginIndex = 0 ; beginIndex < endIndex ; ++ beginIndex ) { { for ( int prevMod = 0 ; prevMod < 210 ; ++ prevMod ) { final int nextMod = ( prevMod + partsTable [ beginIndex ] [ endIndex ] ) % 210 ; memo [ endIndex ] [ nextMod ] += memo [ beginIndex ] [ prevMod ] ; } } if ( beginIndex != 0 ) { for ( int prevMod = 0 ; prevMod < 210 ; ++ prevMod ) { final int nextMod = ( prevMod - partsTable [ beginIndex ] [ endIndex ] + 210 ) % 210 ; memo [ endIndex ] [ nextMod ] += memo [ beginIndex ] [ prevMod ] ; } } } } long answer = 0 ; for ( int mod = 0 ; mod < 210 ; ++ mod ) { if ( mod % 2 == 0 || mod % 3 == 0 || mod % 5 == 0 || mod % 7 == 0 ) { answer += memo [ n ] [ mod ] ; } } System . out . printf ( \" Case ▁ # % d : ▁ % d \\n \" , testCase , answer ) ; } } }","import java . io . * ; import java . util . * ; public class b { long sol = 0 ; String s ; long nrt ; long calc ( int lop , long bef , long now ) { switch ( lop ) { case 0 : return now ; case 1 : return bef + now ; case 2 : return bef - now ; } return 0 ; } boolean ugly ( long x ) { if ( x < 0 ) x = - x ; if ( x % 2 == 0 ) return true ; if ( x % 3 == 0 ) return true ; if ( x % 5 == 0 ) return true ; if ( x % 7 == 0 ) return true ; return false ; } void count ( int poz , int lop , long bef , long now ) { if ( poz == s . length ( ) - 1 ) { if ( ugly ( calc ( lop , bef , now ) ) ) sol ++ ; else { } } else { long c = ( long ) ( s . charAt ( poz + 1 ) - '0' ) ; count ( poz + 1 , lop , bef , 10 * now + c ) ; if ( poz != s . length ( ) - 1 ) { count ( poz + 1 , 1 , calc ( lop , bef , now ) , c ) ; count ( poz + 1 , 2 , calc ( lop , bef , now ) , c ) ; } } } b ( ) { try { File f = new File ( \" B - small - attempt1 . in \" ) ; BufferedReader input = new BufferedReader ( new FileReader ( f ) ) ; BufferedWriter out = new BufferedWriter ( new FileWriter ( \" small . out \" ) ) ; long nrtests = Integer . parseInt ( input . readLine ( ) ) ; for ( nrt = 0 ; nrt < nrtests ; nrt ++ ) { s = input . readLine ( ) ; sol = 0 ; count ( 0 , 0 , 0 , ( long ) ( s . charAt ( 0 ) - '0' ) ) ; out . write ( \" Case ▁ # \" + ( nrt + 1 ) + \" : ▁ \" + sol + \" \\n \" ) ; } out . close ( ) ; } catch ( IOException e ) { } } public static void main ( String [ ] args ) { new b ( ) ; } }"],"bleu":0.2629470040826161,"rouge_l":0.42336863194046936}
{"id":149,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter pw = new PrintWriter ( new OutputStreamWriter ( System . out ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int m = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( a [ i ] > b [ j ] ) { b [ i ] = b [ j ] ; count ++ ; } } } pw . println ( count ) ; pw . close ( ) ; } }"],"references":["package common ; import java . io . BufferedReader ; import java . io . File ; import java . io . FileReader ; import java . io . FileWriter ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; public class Helper { public static String [ ] getAllFileContentAsArray ( String filename ) throws Exception { BufferedReader in = new BufferedReader ( new FileReader ( filename ) ) ; List < String > all = new ArrayList < String > ( ) ; String s = in . readLine ( ) ; while ( s != null ) { all . add ( s ) ; s = in . readLine ( ) ; } in . close ( ) ; return all . toArray ( new String [ 0 ] ) ; } public static void writeToFile ( String [ ] cont , String filename ) throws Exception { File file = new File ( filename ) ; file . delete ( ) ; FileWriter w = null ; try { w = new FileWriter ( file , true ) ; for ( String s : cont ) { w . write ( s + \" \\n \" ) ; } } finally { if ( w != null ) { w . close ( ) ; } } } public static int [ ] getIntegersFromString ( String s ) throws Exception { List < Integer > a = new ArrayList < Integer > ( ) ; for ( String se : s . split ( \" ▁ \" ) ) { try { Integer x = Integer . parseInt ( se ) ; a . add ( x ) ; } catch ( Exception e ) { } } int [ ] ret = new int [ a . size ( ) ] ; for ( int i = 0 ; i < a . size ( ) ; ++ i ) { ret [ i ] = a . get ( i ) . intValue ( ) ; } return ret ; } private Helper ( ) { } }","import java . util . Scanner ; import java . io . File ; import java . io . FileWriter ; import java . io . PrintWriter ; public class B { static int parents [ ] ; public static void main ( String args [ ] ) throws Exception { Scanner in = new Scanner ( new File ( \" B . in \" ) ) ; FileWriter fw = new FileWriter ( \" B . out \" ) ; PrintWriter out = new PrintWriter ( fw ) ; int test = in . nextInt ( ) ; for ( int t = 1 ; t <= test ; t ++ ) { long A = in . nextLong ( ) ; long B = in . nextLong ( ) ; long P = in . nextLong ( ) ; parents = new int [ ( int ) ( B - A + 1 ) ] ; for ( int i = 0 ; i < parents . length ; i ++ ) { parents [ i ] = i ; } int group = parents . length ; for ( long i = P ; i <= B - A ; i ++ ) { if ( isPrime ( i ) == true ) { long number = A \/ i * i ; if ( number < A ) { number += i ; } int root1 = getRoot ( ( int ) ( number - A ) ) ; for ( long j = number + i ; j <= B ; j += i ) { int root2 = getRoot ( ( int ) ( j - A ) ) ; if ( root1 != root2 ) { parents [ root2 ] = root1 ; group -- ; } } } } out . println ( \" Case ▁ # \" + t + \" : ▁ \" + group ) ; } out . close ( ) ; fw . close ( ) ; } static boolean isPrime ( long number ) { for ( long i = 2 ; i * i <= number ; i ++ ) { if ( number % i == 0 ) { return false ; } } return true ; } static int getRoot ( int node ) { int root = node ; while ( parents [ root ] != root ) { root = parents [ root ] ; } while ( node != root ) { int temp = parents [ node ] ; parents [ node ] = root ; node = temp ; } return root ; } }","import java . math . BigInteger ; import java . util . HashSet ; import java . util . Scanner ; public class R1B_B { public static void main ( String [ ] args ) { Scanner scin = new Scanner ( System . in ) ; int N = scin . nextInt ( ) ; for ( int z = 1 ; z <= N ; ++ z ) { long A = scin . nextLong ( ) ; long B = scin . nextLong ( ) ; long P = scin . nextLong ( ) ; int [ ] equiv = new int [ ( int ) ( B + 1 ) ] ; for ( int i = ( int ) A ; i <= B ; ++ i ) equiv [ i ] = i ; for ( int i = ( int ) A ; i <= B ; ++ i ) { for ( int j = i + 1 ; j <= B ; ++ j ) { if ( equiv [ i ] == equiv [ j ] ) continue ; int gcd = ( int ) gcd ( i , j ) ; boolean ok = false ; for ( int k = ( int ) P ; k <= gcd ; ++ k ) { if ( new BigInteger ( \" \" + k ) . isProbablePrime ( 1024 ) && gcd % k == 0 ) { ok = true ; break ; } } if ( ok ) { for ( int k = ( int ) A ; k <= B ; ++ k ) { if ( equiv [ k ] == equiv [ j ] ) equiv [ k ] = equiv [ i ] ; } } } } HashSet < Integer > set = new HashSet < Integer > ( ) ; for ( int i : equiv ) set . add ( i ) ; System . out . println ( \" Case ▁ # \" + z + \" : ▁ \" + ( set . size ( ) - 1 ) ) ; } } static long gcd ( long a , long b ) { return new BigInteger ( \" \" + a ) . gcd ( new BigInteger ( \" \" + b ) ) . longValue ( ) ; } }"],"bleu":0.35172991892361066,"rouge_l":0.4307391046033985}
{"id":150,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter pw = new PrintWriter ( new OutputStreamWriter ( System . out ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int N = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ M ] ; for ( int i = 0 ; i < M ; i ++ ) { a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int [ ] b = new int [ M ] ; for ( int i = 0 ; i < M ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < M ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int count = 0 ; for ( int i = 0 ; i < M ; i ++ ) { for ( int j = 0 ; j < M ; j ++ ) { if ( a [ i ] > b [ j ] ) { b [ i ] -= a [ i ] ; b [ j ] -= b [ i ] ; count ++ ; } } } pw . println ( count ) ; pw . close ( ) ; } }"],"references":["public class Point { public double x , y ; public Point ( double x , double y ) { this . x = x ; this . y = y ; } public Point ( ) { x = 0 ; y = 0 ; } @ Override public boolean equals ( Object arg0 ) { Point pt = ( Point ) arg0 ; return CG . dblcmp ( pt . x , x ) == 0 && CG . dblcmp ( pt . y , y ) == 0 ; } public Point minus ( Point p ) { return new Point ( x - p . x , y - p . y ) ; } public Point add ( Point p ) { return new Point ( x + p . x , y + p . y ) ; } public Point mul ( double n ) { return new Point ( n * x , n * y ) ; } public double abs ( ) { return Math . sqrt ( x * x + y * y ) ; } public void copy ( Point p ) { this . x = p . x ; this . y = p . y ; } }"],"bleu":0.03395372307679105,"rouge_l":0.2509528707120818}
{"id":151,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter pw = new PrintWriter ( new OutputStreamWriter ( System . out ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int m = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { st = new StringTokenizer ( br . readLine ( ) ) ; a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( a [ i ] > b [ j ] ) { b [ i ] -= a [ i ] ; b [ j ] -= b [ i ] ; count ++ ; } } } pw . println ( count ) ; pw . close ( ) ; } }"],"references":["import java . util . * ; import java . io . * ; import java . math . * ; import static java . lang . Math . * ; import static java . lang . Integer . * ; import static java . lang . System . * ; public class B { public static String [ ] parts ( BufferedReader br ) throws Exception { String line = br . readLine ( ) ; if ( line == null ) return null ; return line . trim ( ) . split ( \" \\\\ s + \" ) ; } public static void main ( String args [ ] ) throws Exception { BufferedReader br = new BufferedReader ( new InputStreamReader ( in ) ) ; int cas = parseInt ( br . readLine ( ) ) ; for ( int z = 1 ; z <= cas ; z ++ ) { int n = parseInt ( br . readLine ( ) ) ; String [ ] ss = parts ( br ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = parseInt ( ss [ i ] ) ; int [ ] cl = new int [ n ] ; int [ ] cr = new int [ n ] ; HashMap < Integer , Integer > where = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { where . put ( arr [ i ] , i ) ; for ( int j = 0 ; j < n ; j ++ ) { if ( i == j ) continue ; if ( i < j && arr [ j ] > arr [ i ] ) cl [ i ] ++ ; if ( i > j && arr [ j ] > arr [ i ] ) cr [ i ] ++ ; } } int ans = 0 ; Arrays . sort ( arr ) ; for ( int i = n - 2 ; i >= 0 ; i -- ) { int x = arr [ i ] ; int j = where . get ( x ) ; ans += min ( cl [ j ] , cr [ j ] ) ; } out . println ( \" Case ▁ # \" + z + \" : ▁ \" + ans ) ; } } }","import java . io . FileReader ; import java . io . FileWriter ; import java . io . OutputStreamWriter ; import java . io . PrintWriter ; import java . util . Scanner ; public class UpAndDown { private static Scanner input ; private static PrintWriter out ; public static void main ( String [ ] args ) throws Exception { input = new Scanner ( new FileReader ( \" B - large . in \" ) ) ; out = new PrintWriter ( new FileWriter ( \" B - large . out \" ) ) ; int testCases = input . nextInt ( ) ; for ( int testCase = 1 ; testCase <= testCases ; testCase ++ ) { out . println ( \" Case ▁ # \" + testCase + \" : ▁ \" + solveCase ( ) ) ; } out . close ( ) ; } public static int solveCase ( ) { int n = input . nextInt ( ) ; int [ ] values = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { values [ i ] = input . nextInt ( ) ; } boolean [ ] done = new boolean [ n ] ; int res = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int index = - 1 ; for ( int j = 0 ; j < n ; j ++ ) { if ( ! done [ j ] && ( index == - 1 || values [ j ] < values [ index ] ) ) index = j ; } int left = 0 , right = 0 ; for ( int j = 0 ; j < index ; j ++ ) if ( ! done [ j ] ) left ++ ; for ( int j = index + 1 ; j < n ; j ++ ) if ( ! done [ j ] ) right ++ ; res += Math . min ( left , right ) ; done [ index ] = true ; } return res ; } }","import static java . lang . Math . * ; import static java . util . Arrays . * ; import java . io . * ; import java . util . * ; public class B { Scanner sc = new Scanner ( System . in ) ; int N ; int [ ] A ; void read ( ) { N = sc . nextInt ( ) ; A = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) A [ i ] = sc . nextInt ( ) ; } void solve ( ) { int num = 0 ; for ( int i = 0 ; i < N ; i ++ ) { int p = 0 ; for ( int j = 0 ; j < N - i ; j ++ ) if ( A [ p ] > A [ j ] ) { p = j ; } num += min ( p , N - i - 1 - p ) ; for ( int j = p ; j < N - i - 1 ; j ++ ) A [ j ] = A [ j + 1 ] ; } System . out . println ( num ) ; } void run ( ) { int caseN = sc . nextInt ( ) ; for ( int caseID = 1 ; caseID <= caseN ; caseID ++ ) { read ( ) ; System . out . printf ( \" Case ▁ # % d : ▁ \" , caseID ) ; solve ( ) ; System . out . flush ( ) ; } } void debug ( Object ... os ) { System . err . println ( deepToString ( os ) ) ; } public static void main ( String [ ] args ) { try { System . setIn ( new BufferedInputStream ( new FileInputStream ( args . length > 0 ? args [ 0 ] : ( B . class . getName ( ) + \" . in \" ) ) ) ) ; } catch ( Exception e ) { } new B ( ) . run ( ) ; } }","import java . io . BufferedReader ; import java . io . FileReader ; import java . io . IOException ; import java . io . PrintWriter ; import java . util . StringTokenizer ; public class SolB3 { public static void main ( String [ ] args ) { try { new SolB3 ( ) . run ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } public void run ( ) throws IOException { br = new BufferedReader ( new FileReader ( FNAME + \" . in \" ) ) ; out = new PrintWriter ( FNAME + \" . out \" ) ; solve ( ) ; out . close ( ) ; } BufferedReader br ; PrintWriter out ; StringTokenizer st ; boolean eof ; String nextToken ( ) { while ( st == null || ! st . hasMoreTokens ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) , \" ▁ \\n \\t \/ \" ) ; } catch ( IOException e ) { eof = true ; return \"0\" ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( nextToken ( ) ) ; } long nextLong ( ) { return Long . parseLong ( nextToken ( ) ) ; } String FNAME = \" B - large \" ; void solve ( ) { int tests = nextInt ( ) ; for ( int test = 1 ; test <= tests ; test ++ ) { out . print ( \" Case ▁ # \" + test + \" : ▁ \" ) ; int n = nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int imin = 0 ; for ( int j = 0 ; j < n - i ; j ++ ) { if ( a [ j ] < a [ imin ] ) { imin = j ; } } ans += Math . min ( imin , n - 1 - i - imin ) ; for ( int j = imin ; j < n - i - 1 ; j ++ ) { a [ j ] = a [ j + 1 ] ; } } out . println ( ans ) ; } } }"],"bleu":0.5603262358248046,"rouge_l":0.5362908031275515}
{"id":152,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter pw = new PrintWriter ( new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int N = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ M ] ; for ( int i = 0 ; i < M ; i ++ ) a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] b = new int [ M ] ; for ( int i = 0 ; i < M ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int count = 0 ; for ( int i = 0 ; i < M ; i ++ ) { for ( int j = 0 ; j < M ; j ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { if ( a [ k ] > 0 && b [ k ] > a [ k ] ) { b [ k ] -= a [ k ] ; b [ k ] -= b [ k ] ; b [ k ] -= b [ k ] ; } } } } } } count ++ ; } } pw . println ( count ) ; pw . close ( ) ; } pw . close ( ) ; } }"],"references":["import java . util . * ; public class WorldCup { static Scanner sc = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { int T = sc . nextInt ( ) ; for ( int i = 1 ; i <= T ; i ++ ) { System . out . println ( \" Case ▁ # \" + i + \" : ▁ \" + solveCase ( ) ) ; } } static long solveCase ( ) { N = sc . nextInt ( ) ; req = new int [ 1 << N ] ; for ( int i = 0 ; i < req . length ; i ++ ) req [ i ] = sc . nextInt ( ) ; cost = new int [ N ] [ ] ; memo = new long [ N ] [ ] [ ] ; for ( int i = N - 1 ; i >= 0 ; i -- ) { cost [ i ] = new int [ 1 << i ] ; memo [ i ] = new long [ i + 1 ] [ 1 << i ] ; for ( long [ ] arr : memo [ i ] ) Arrays . fill ( arr , - 1L ) ; for ( int j = 0 ; j < cost [ i ] . length ; j ++ ) cost [ i ] [ j ] = sc . nextInt ( ) ; } return solve ( 0 , 0 , 0 ) ; } static int N ; static int [ ] req ; static int [ ] [ ] cost ; static long [ ] [ ] [ ] memo ; static final long INF = Integer . MAX_VALUE * 1000L ; static long solve ( int index , int level , int count ) { if ( level >= N ) return count >= N - req [ index ] ? 0 : INF ; if ( memo [ level ] [ count ] [ index ] == - 1 ) { long skip = solve ( index * 2 , level + 1 , count ) + solve ( index * 2 + 1 , level + 1 , count ) ; long choose = solve ( index * 2 , level + 1 , count + 1 ) + solve ( index * 2 + 1 , level + 1 , count + 1 ) + cost [ level ] [ index ] ; memo [ level ] [ count ] [ index ] = Math . min ( skip , choose ) ; } return memo [ level ] [ count ] [ index ] ; } }","import java . util . * ; import java . io . * ; public class x { static int p , z , M [ ] , A [ ] [ ] ; static long D [ ] [ ] [ ] ; static boolean F [ ] [ ] [ ] ; static long rec ( int m , int l , int v ) { if ( l == p ) { if ( m > M [ v ] ) { return Integer . MAX_VALUE ; } else { return 0 ; } } if ( F [ m ] [ l ] [ v ] ) { return D [ m ] [ l ] [ v ] ; } D [ m ] [ l ] [ v ] = Math . min ( rec ( m + 1 , l + 1 , 2 * v ) + rec ( m + 1 , l + 1 , 2 * v + 1 ) , rec ( m , l + 1 , 2 * v ) + rec ( m , l + 1 , 2 * v + 1 ) + A [ p - l - 1 ] [ v ] ) ; F [ m ] [ l ] [ v ] = true ; return D [ m ] [ l ] [ v ] ; } public static void main ( String args [ ] ) throws Exception { Scanner in = new Scanner ( System . in ) ; int t = in . nextInt ( ) ; for ( int tt = 1 ; tt <= t ; tt ++ ) { p = in . nextInt ( ) ; z = 1 << p ; M = new int [ z ] ; A = new int [ p ] [ z ] ; for ( int i = 0 ; i < z ; i ++ ) M [ i ] = in . nextInt ( ) ; for ( int i = 0 ; i < p ; i ++ ) for ( int j = 0 ; j < ( 1 << ( p - i - 1 ) ) ; j ++ ) A [ i ] [ j ] = in . nextInt ( ) ; D = new long [ p ] [ p ] [ z ] ; F = new boolean [ p ] [ p ] [ z ] ; System . out . println ( \" Case ▁ # \" + tt + \" : ▁ \" + rec ( 0 , 0 , 0 ) ) ; } ; } ; } ;"],"bleu":0.26477711400306053,"rouge_l":0.3546386667136464}
{"id":153,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter pw = new PrintWriter ( new OutputStreamWriter ( System . out ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int N = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ M ] ; for ( int i = 0 ; i < M ; i ++ ) { a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int [ ] b = new int [ M ] ; for ( int i = 0 ; i < M ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < M ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int count = 0 ; for ( int i = 0 ; i < M ; i ++ ) { for ( int j = 0 ; j < M ; j ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { if ( a [ k ] > a [ k ] ) { b [ k ] -= a [ k ] ; b [ k ] -= b [ k ] ; b [ k ] -= b [ k ] ; } } } } } count ++ ; } } pw . println ( count ) ; } pw . close ( ) ; } }"],"references":["import java . io . * ; import java . math . BigInteger ; import java . util . * ; public class Solution { BufferedReader in ; PrintWriter out ; StringTokenizer st ; String nextToken ( ) throws IOException { while ( st == null || ! st . hasMoreTokens ( ) ) { st = new StringTokenizer ( in . readLine ( ) ) ; } return st . nextToken ( ) ; } int nextInt ( ) throws IOException { return Integer . parseInt ( nextToken ( ) ) ; } long nextLong ( ) throws IOException { return Long . parseLong ( nextToken ( ) ) ; } double nextDouble ( ) throws IOException { return Double . parseDouble ( nextToken ( ) ) ; } void solve ( ) throws IOException { st = new StringTokenizer ( in . readLine ( ) , \" \/ \" ) ; long p = nextLong ( ) ; long q = nextLong ( ) ; long gcd = BigInteger . valueOf ( p ) . gcd ( BigInteger . valueOf ( q ) ) . longValue ( ) ; long qq = q \/ gcd ; if ( ( qq & ( qq - 1 ) ) == 0 ) { p \/= gcd ; int ans = 1 ; while ( p < qq \/ 2 ) { ans ++ ; qq \/= 2 ; } out . println ( ans ) ; } else { out . println ( \" impossible \" ) ; } } void run ( ) { try { in = new BufferedReader ( new FileReader ( \" input . txt \" ) ) ; out = new PrintWriter ( \" output . txt \" ) ; Locale . setDefault ( Locale . UK ) ; int tt = nextInt ( ) ; for ( int t = 1 ; t <= tt ; t ++ ) { out . print ( \" Case ▁ # \" + t + \" : ▁ \" ) ; solve ( ) ; } } catch ( Exception e ) { e . printStackTrace ( ) ; } finally { out . close ( ) ; } } public static void main ( String Args [ ] ) { new Solution ( ) . run ( ) ; } }","import java . io . File ; import java . io . FileReader ; import java . io . PrintWriter ; import java . math . BigInteger ; import java . util . * ; public class A { private final Scanner in ; private final PrintWriter out ; public A ( Scanner in , PrintWriter out ) { this . in = in ; this . out = out ; } public static void main ( String [ ] args ) { try ( Scanner in = new Scanner ( new FileReader ( new File ( \" A - large . in \" ) ) ) ; PrintWriter out = new PrintWriter ( \" A - large . out \" ) ) { new A ( in , out ) . solve ( ) ; } catch ( Throwable t ) { t . printStackTrace ( ) ; System . exit ( - 1 ) ; } } private void solve ( ) { int tests = in . nextInt ( ) ; for ( int test = 1 ; test <= tests ; ++ test ) { StringTokenizer st = new StringTokenizer ( in . next ( ) , \" \/ \" ) ; BigInteger P = new BigInteger ( st . nextToken ( ) ) ; BigInteger Q = new BigInteger ( st . nextToken ( ) ) ; BigInteger d = P . gcd ( Q ) ; P = P . divide ( d ) ; Q = Q . divide ( d ) ; long p = P . longValue ( ) ; long q = Q . longValue ( ) ; out . print ( \" Case ▁ # \" + test + \" : ▁ \" ) ; if ( q != Long . highestOneBit ( q ) ) { out . println ( \" impossible \" ) ; } else { int ans ; for ( ans = 0 ; p < q ; ++ ans , q >>= 1 ) ; out . println ( ans ) ; } } } }","package contest ; import java . io . FileReader ; import java . io . FileWriter ; import java . io . PrintWriter ; import java . util . Scanner ; public class PartElf { final static String PROBLEM_NAME = \" PartElf \" ; final static String WORK_DIR = \" D : \\\\ GCJ\\ \\\" + PROBLEM_NAME + \" \\ \\\" ; long gcd ( long P , long Q ) { while ( P > 0 && Q > 0 ) if ( P > Q ) P %= Q ; else Q %= P ; return P + Q ; } void solve ( Scanner sc , PrintWriter pw ) { String s = sc . next ( ) ; String [ ] items = s . split ( \" \/ \" ) ; long P = Long . parseLong ( items [ 0 ] ) ; long Q = Long . parseLong ( items [ 1 ] ) ; long G = gcd ( P , Q ) ; P \/= G ; Q \/= G ; if ( ( Q & ( Q - 1 ) ) != 0 ) { pw . println ( \" impossible \" ) ; return ; } int ans = 0 ; while ( P < Q ) { P *= 2 ; ans ++ ; } pw . println ( ans ) ; } public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( new FileReader ( WORK_DIR + \" input . txt \" ) ) ; PrintWriter pw = new PrintWriter ( new FileWriter ( WORK_DIR + \" output . txt \" ) ) ; int caseCnt = sc . nextInt ( ) ; for ( int caseNum = 0 ; caseNum < caseCnt ; caseNum ++ ) { System . out . println ( \" Processing ▁ test ▁ case ▁ \" + ( caseNum + 1 ) ) ; pw . print ( \" Case ▁ # \" + ( caseNum + 1 ) + \" : ▁ \" ) ; new PartElf ( ) . solve ( sc , pw ) ; } pw . flush ( ) ; pw . close ( ) ; sc . close ( ) ; } }","package at . jaki . round1C . A ; import java . io . BufferedReader ; import java . io . FileReader ; import java . io . IOException ; import java . io . PrintWriter ; public class A { private static final String INPUT = \" A - small - attempt0 . in \" ; private static final String OUTPUT = \" A - small - attempt0 . out \" ; public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new FileReader ( INPUT ) ) ; PrintWriter pw = new PrintWriter ( OUTPUT ) ; int totalTests = Integer . parseInt ( br . readLine ( ) ) ; for ( int testNo = 1 ; testNo <= totalTests ; testNo ++ ) { String [ ] temp = br . readLine ( ) . split ( \" \/ \" ) ; long p = Long . parseLong ( temp [ 0 ] ) ; long q = Long . parseLong ( temp [ 1 ] ) ; System . out . println ( p + \" ▁ \/ ▁ \" + q ) ; while ( p % 2 == 0 && q % 2 == 0 ) { p \/= 2 ; q \/= 2 ; } for ( long i = 3 ; i <= Math . sqrt ( p ) ; i += 2 ) { if ( p % i == 0 && q % i == 0 ) { p \/= i ; q \/= i ; } } if ( q % p == 0 ) { q \/= p ; p = 1 ; } String result ; if ( ! is2Fac ( q ) ) { result = \" impossible \" ; } else { while ( p > 1 ) { q \/= 2 ; p \/= 2 ; } result = \" \" + count ( q ) ; } System . out . println ( p + \" ▁ \/ ▁ \" + q ) ; pw . print ( \" Case ▁ # \" + testNo + \" : ▁ \" ) ; pw . println ( result ) ; System . out . println ( result ) ; } pw . flush ( ) ; pw . close ( ) ; } private static int count ( long q ) { int total = 0 ; while ( q > 1 ) { q \/= 2 ; total ++ ; } return total ; } private static boolean is2Fac ( long q ) { while ( q > 1 ) { if ( q % 2 == 0 ) { q \/= 2 ; } else { return false ; } } return true ; } }","import java . io . * ; import java . util . HashSet ; import java . util . Set ; public class CodeJam2014R1C1 { public static void main ( String [ ] args ) { try { BufferedReader br = new BufferedReader ( new InputStreamReader ( new FileInputStream ( \" A - large . in \" ) ) ) ; PrintWriter pw = new PrintWriter ( new FileOutputStream ( \" A - large . out \" ) ) ; String line = br . readLine ( ) ; int T = Integer . parseInt ( line ) ; for ( int i = 0 ; i < T ; i ++ ) { System . out . println ( ( i + 1 ) + \" ▁ \/ ▁ \" + T + \" . . . \" ) ; line = br . readLine ( ) ; String [ ] values = line . split ( \" \/ \" ) ; long P = Long . parseLong ( values [ 0 ] ) ; long Q = Long . parseLong ( values [ 1 ] ) ; long cmmdc = cmmdc ( P , Q ) ; P \/= cmmdc ; Q \/= cmmdc ; System . out . println ( cmmdc ) ; int total = 0 ; while ( P < Q ) { P *= 2 ; total ++ ; } int result = total ; while ( P % Q != 0 && result < 40 ) { P *= 2 ; result ++ ; } if ( P % Q == 0 ) { pw . println ( \" Case ▁ # \" + ( i + 1 ) + \" : ▁ \" + total ) ; } else { pw . println ( \" Case ▁ # \" + ( i + 1 ) + \" : ▁ impossible \" ) ; } } pw . close ( ) ; System . out . println ( \" DONE \" ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } private static long cmmdc ( long P , long Q ) { return Q == 0 ? P : cmmdc ( Q , P % Q ) ; } }"],"bleu":0.3286837019788479,"rouge_l":0.3866471553654731}
{"id":154,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter pw = new PrintWriter ( new OutputStreamWriter ( System . out ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int m = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int [ ] [ ] dp = new int [ n ] [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { for ( int k = 0 ; k < m ; k ++ ) { for ( int k = 0 ; k < m ; k ++ ) { for ( int k = 0 ; k < m ; k ++ ) { for ( int k = 0 ; k < m ; k ++ ) { for ( int k = 0 ; k < m ; k ++ ) { if ( a [ k ] [ k ] == a [ k ] ) continue ; for ( int k = 0 ; k < m ; k ++ ) { for ( int k = 0 ; k < m ; k ++ ) { if ( b [ k ] == a [ k ] ) continue ; if ( b [ k ] == b [ k ] ) continue ; if ( b [ k ] == b [ k ] ) continue ; if ( b [ k ] == b [ k ] ) continue ; if ( b [ k ] == b [ k ] ) continue ; if ( b [ k ] == a [ k ] ) continue ; if ( b [ k ] == b [ k ] ) continue ; if ( b [ k ] == b [ k ] ) continue ; if ("],"references":["import java . util . Scanner ; import java . io . * ; import java . math . BigInteger ; public class A { public static void main ( String [ ] args ) throws Throwable { Scanner in = new Scanner ( new File ( \" in . txt \" ) ) ; PrintStream out = new PrintStream ( new File ( \" out . txt \" ) ) ; int t = in . nextInt ( ) ; in . nextLine ( ) ; for ( int c = 1 ; c <= t ; c ++ ) { out . print ( \" Case ▁ # \" ) ; out . print ( c ) ; out . print ( \" : ▁ \" ) ; out . println ( getSolution ( in ) ) ; } } private static String getSolution ( Scanner in ) { long n ; int pd , pg ; n = in . nextLong ( ) ; pd = in . nextInt ( ) ; pg = in . nextInt ( ) ; int factor = gcf ( 100 , pd ) ; if ( 100 \/ factor > n ) return \" Broken \" ; if ( ( pg == 100 && pd != 100 ) || ( pg == 0 && pd != 0 ) ) return \" Broken \" ; return \" Possible \" ; } public static int gcf ( int a , int b ) { int s ; if ( a > b ) s = b ; else s = a ; for ( int i = s ; i > 0 ; i -- ) { if ( ( a % i == 0 ) && ( b % i == 0 ) ) return i ; } return - 1 ; } }","package round1a ; import java . io . File ; import java . util . ArrayList ; import java . util . Scanner ; public class A { int caseNo ; double epsilon = 0.00000001 ; boolean equals ( double a , double b ) { return ( Math . abs ( a - b ) < epsilon ) ; } public void test ( Scanner in ) { long maxGamesToday = in . nextLong ( ) ; int rateToday = in . nextInt ( ) ; int rateTotal = in . nextInt ( ) ; boolean possible = true ; if ( maxGamesToday < 100 ) { boolean found = false ; if ( maxGamesToday >= 1 ) { found |= ( rateToday % 100 == 0 ) ; } if ( maxGamesToday >= 2 ) { found |= ( rateToday % 50 == 0 ) ; } if ( maxGamesToday >= 4 ) { found |= ( rateToday % 25 == 0 ) ; } if ( maxGamesToday >= 5 ) { found |= ( rateToday % 20 == 0 ) ; } if ( maxGamesToday >= 10 ) { found |= ( rateToday % 10 == 0 ) ; } if ( maxGamesToday >= 20 ) { found |= ( rateToday % 5 == 0 ) ; } if ( maxGamesToday >= 25 ) { found |= ( rateToday % 4 == 0 ) ; } if ( maxGamesToday >= 50 ) { found |= ( rateToday % 2 == 0 ) ; } possible = found ; } if ( possible ) { if ( rateTotal == 0 && rateToday != 0 ) possible = false ; if ( rateTotal == 100 && rateToday != 100 ) possible = false ; } if ( possible ) System . out . println ( \" Case ▁ # \" + caseNo + \" : ▁ Possible \" ) ; else System . out . println ( \" Case ▁ # \" + caseNo + \" : ▁ Broken \" ) ; } public static void main ( String [ ] args ) throws Exception { ( new A ( ) ) . test ( ) ; } public void test ( ) throws Exception { Scanner s = new Scanner ( new File ( \" A - large . in \" ) ) ; int numTests = s . nextInt ( ) ; for ( caseNo = 1 ; caseNo <= numTests ; caseNo ++ ) { test ( s ) ; } } }","package jam2011 ; import java . io . * ; import java . util . * ; public class AA { public static void main ( String [ ] args ) throws Exception { BufferedReader inputFile = new BufferedReader ( new InputStreamReader ( new FileInputStream ( args [ 0 ] ) ) ) ; int cases = Integer . parseInt ( inputFile . readLine ( ) ) ; PrintStream outFile = new PrintStream ( new FileOutputStream ( args [ 1 ] ) ) ; for ( int i = 1 ; i <= cases ; i ++ ) { String lineT [ ] = tokenize ( inputFile . readLine ( ) ) ; long n = Long . parseLong ( lineT [ 0 ] ) ; long pd = Long . parseLong ( lineT [ 1 ] ) ; long pg = Long . parseLong ( lineT [ 2 ] ) ; String out = null ; if ( pg == 0 ) out = pd == 0 ? \" Possible \" : \" Broken \" ; else if ( pg == 100 ) out = pd == 100 ? \" Possible \" : \" Broken \" ; else { if ( n >= 100 ) out = \" Possible \" ; else { int nnn = 100 ; while ( pd % 2 == 0 && nnn % 2 == 0 || pd % 5 == 0 && nnn % 5 == 0 ) { if ( pd % 2 == 0 && nnn % 2 == 0 ) { nnn \/= 2 ; pd \/= 2 ; } if ( pd % 5 == 0 && nnn % 5 == 0 ) { nnn \/= 5 ; pd \/= 5 ; } } out = nnn <= n ? \" Possible \" : \" Broken \" ; } } outFile . println ( \" Case ▁ # \" + i + \" : ▁ \" + out ) ; } outFile . close ( ) ; inputFile . close ( ) ; } public static String [ ] tokenize ( String input ) { StringTokenizer st = new StringTokenizer ( input ) ; String [ ] k = new String [ st . countTokens ( ) ] ; for ( int i = 0 ; i < k . length ; i ++ ) k [ i ] = st . nextToken ( ) ; return k ; } public static String [ ] tokenize ( String input , String sep ) { StringTokenizer st = new StringTokenizer ( input , sep ) ; String [ ] k = new String [ st . countTokens ( ) ] ; for ( int i = 0 ; i < k . length ; i ++ ) k [ i ] = st . nextToken ( ) ; return k ; } }","import java . io . * ; import java . util . * ; import java . text . * ; public class A { public PrintStream out = System . out ; public PrintStream err = System . err ; public Scanner in = new Scanner ( System . in ) ; public DecimalFormat fmt = new DecimalFormat ( \"0.000000000\" ) ; public int p , q , n ; public void main ( ) { try { int TCase = in . nextInt ( ) ; for ( int cc = 1 ; cc <= TCase ; ++ cc ) { n = in . nextInt ( ) ; p = in . nextInt ( ) ; q = in . nextInt ( ) ; out . println ( \" Case ▁ # \" + cc + \" : ▁ \" + ( poss ( ) ? \" Possible \" : \" Broken \" ) ) ; } } catch ( Exception e ) { e . printStackTrace ( ) ; } } public boolean poss ( ) { for ( int D = 1 ; D <= n ; ++ D ) { if ( ( p * D ) % 100 != 0 ) continue ; int W = p * D \/ 100 ; int c = 100 * W - q * D ; for ( int DD = 0 ; DD <= 1000000 ; ++ DD ) { if ( ( q * DD - c ) % 100 != 0 ) continue ; int WW = ( q * DD - c ) \/ 100 ; if ( 0 <= WW && WW <= DD ) return true ; } } return false ; } public static void main ( String [ ] args ) { long startTime = System . currentTimeMillis ( ) ; ( new A ( ) ) . main ( ) ; long endTime = System . currentTimeMillis ( ) ; long ms = endTime - startTime ; long sec = ms \/ 1000 ; ms = ms % 1000 ; long min = sec \/ 60 ; sec = sec % 60 ; System . err . println ( \" Time ▁ Spent : ▁ \" + min + \" ▁ minute ( s ) ▁ \" + sec + \" ▁ second ( s ) ▁ \" + ms + \" ▁ ( ms ) \" ) ; } public int iInt ( ) { return in . nextInt ( ) ; } public long iLong ( ) { return in . nextLong ( ) ; } public String iToken ( ) { return in . next ( ) ; } public String iLine ( ) { return in . nextLine ( ) ; } }","package r1a ; import java . util . Scanner ; public class A { static long gcd ( long a , long b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; } static boolean solve ( long N , long PD , long PG ) { long dcoeff = 100 \/ gcd ( 100 , PD ) ; long gcoeff = 100 \/ gcd ( 100 , PG ) ; long dw = dcoeff * PD \/ 100 ; long gw = gcoeff * PG \/ 100 ; long dl = dcoeff - dw ; long gl = gcoeff - gw ; if ( gw == 0 && dw != 0 ) return false ; if ( gl == 0 && dl != 0 ) return false ; if ( dcoeff > N ) return false ; return true ; } public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int T = sc . nextInt ( ) ; for ( int cn = 1 ; cn <= T ; ++ cn ) { long N = sc . nextLong ( ) ; int PD = sc . nextInt ( ) ; int PG = sc . nextInt ( ) ; if ( solve ( N , PD , PG ) ) { System . out . printf ( \" Case ▁ # % d : ▁ Possible \\n \" , cn ) ; } else { System . out . printf ( \" Case ▁ # % d : ▁ Broken \\n \" , cn ) ; } } } }"],"bleu":0.29678119051107366,"rouge_l":0.39468519960751697}
{"id":155,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter pw = new PrintWriter ( new OutputStreamWriter ( System . out ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int m = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { for ( int k = 0 ; k < n ; k ++ ) { for ( int k = 0 ; k < n ; k ++ ) { for ( int k = 0 ; k < n ; k ++ ) { if ( b [ k ] > a [ k ] ) { b [ k ] -= a [ k ] ; count ++ ; } } } } } pw . println ( count ) ; pw . close ( ) ; } }"],"references":["import java . util . * ; public class c { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int T = input . nextInt ( ) ; for ( int t = 1 ; t <= T ; t ++ ) { System . out . print ( \" Case ▁ # \" + t + \" : ▁ \" ) ; int n = input . nextInt ( ) ; PriorityQueue < Double > finish = new PriorityQueue < Double > ( ) ; PriorityQueue < Hiker > lap = new PriorityQueue < Hiker > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int d = input . nextInt ( ) ; int h = input . nextInt ( ) ; int m = input . nextInt ( ) ; for ( int j = 0 ; j < h ; j ++ ) { int time = m + j ; double ft = time * ( 360.0 - d ) \/ 360 ; finish . add ( ft ) ; lap . add ( new Hiker ( ft + time , time ) ) ; } } int size = lap . size ( ) ; int res = size , count = size ; while ( ! finish . isEmpty ( ) ) { while ( count < 2 * size && lap . peek ( ) . time <= finish . peek ( ) ) { Hiker h = lap . poll ( ) ; count ++ ; h . time += h . add ; lap . add ( h ) ; } if ( count == 2 * size ) break ; count -- ; res = Math . min ( res , count ) ; double x = finish . poll ( ) ; } System . out . println ( res ) ; } } static class Hiker implements Comparable < Hiker > { double time ; double add ; public Hiker ( double tt , double aa ) { time = tt ; add = aa ; } @ Override public int compareTo ( Hiker o ) { return Double . compare ( time , o . time ) ; } } }","import java . util . * ; import java . io . * ; public class C { public static void main ( String ... orange ) throws Exception { Scanner input = new Scanner ( System . in ) ; int numCases = input . nextInt ( ) ; for ( int n = 0 ; n < numCases ; n ++ ) { int N = input . nextInt ( ) ; PriorityQueue < Hiker > hikers = new PriorityQueue < Hiker > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { int D = input . nextInt ( ) ; int H = input . nextInt ( ) ; int M = input . nextInt ( ) ; for ( int j = 0 ; j < H ; j ++ ) hikers . add ( new Hiker ( D , M + j ) ) ; } long minEncounters = Long . MAX_VALUE ; int numHikers = hikers . size ( ) ; int numEncounters = 0 ; int numPassed = 0 ; for ( int i = 0 ; i < 3 * numHikers ; i ++ ) { Hiker next = hikers . poll ( ) ; if ( next . passed ) numEncounters ++ ; else numPassed ++ ; next . passed = true ; next . cross += 360L * next . M ; hikers . add ( next ) ; if ( numEncounters + numHikers - numPassed < minEncounters ) minEncounters = numEncounters + numHikers - numPassed ; } System . out . printf ( \" Case ▁ # % d : ▁ \" , n + 1 ) ; System . out . println ( minEncounters ) ; } } static class Hiker implements Comparable < Hiker > { int D ; int M ; long cross ; boolean passed ; Hiker ( int D , int M ) { this . D = D ; this . M = M ; this . cross = ( 360L - D ) * M ; this . passed = false ; } public int compareTo ( Hiker other ) { if ( cross > other . cross ) return 1 ; else if ( cross < other . cross ) return - 1 ; else if ( passed && ! other . passed ) return - 1 ; else if ( ! passed && other . passed ) return 1 ; return 0 ; } } }","import java . util . * ; public class C { private class Hiker implements Comparable < Hiker > { long nextCompletion ; long timeForLap ; int lap ; Hiker ( long nextCompletion , long timeForLap , int lap ) { this . nextCompletion = nextCompletion ; this . timeForLap = timeForLap ; this . lap = lap ; } @ Override public int compareTo ( Hiker that ) { if ( this . nextCompletion < that . nextCompletion ) { return - 1 ; } else if ( this . nextCompletion > that . nextCompletion ) { return 1 ; } else { return that . lap - this . lap ; } } } String solve ( Scanner sc ) { PriorityQueue < Hiker > pq = new PriorityQueue < Hiker > ( ) ; int N = sc . nextInt ( ) ; for ( int i = 0 ; i < N ; i ++ ) { int D = sc . nextInt ( ) ; int H = sc . nextInt ( ) ; long M = sc . nextLong ( ) ; for ( int j = 0 ; j < H ; j ++ ) { long timeForLap = M + j ; pq . add ( new Hiker ( ( 360 - D ) * timeForLap , timeForLap , 0 ) ) ; } } int s = pq . size ( ) ; int limit = s * 2 ; int min = s ; for ( int i = 0 ; i < 10 * limit ; i ++ ) { Hiker h = pq . poll ( ) ; if ( h . lap == 0 ) { s -- ; } else { s ++ ; } min = Math . min ( min , s ) ; pq . add ( new Hiker ( h . nextCompletion + 360 * h . timeForLap , h . timeForLap , h . lap + 1 ) ) ; } return \" \" + min ; } public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int T = sc . nextInt ( ) ; for ( int cs = 1 ; cs <= T ; cs ++ ) { String res = new C ( ) . solve ( sc ) ; System . out . println ( \" Case ▁ # \" + cs + \" : ▁ \" + res ) ; } sc . close ( ) ; } }","import java . util . * ; public class Herb { static int val ( ) { int groups = sc . nextInt ( ) ; long [ ] start = new long [ groups ] ; long [ ] size = new long [ groups ] ; long [ ] period = new long [ groups ] ; int total = 0 ; for ( int i = 0 ; i < groups ; i ++ ) { start [ i ] = sc . nextInt ( ) ; size [ i ] = sc . nextInt ( ) ; total += size [ i ] ; period [ i ] = sc . nextInt ( ) ; } long [ ] first = new long [ total ] ; long [ ] diff = new long [ total ] ; { int j = 0 ; for ( int i = 0 ; i < groups ; i ++ ) { for ( int k = 0 ; k < size [ i ] ; k ++ ) { first [ j ] = ( period [ i ] + k ) * 2 * ( 360 - start [ i ] ) ; diff [ j ] = 2 * 360 * period [ i ] ; j ++ ; } } } long opt = total + 1 ; for ( int i = 0 ; i < total ; i ++ ) { long crossings = 0 ; for ( int j = 0 ; j < total ; j ++ ) { if ( first [ i ] + 1 <= first [ j ] ) crossings += 1 ; else if ( first [ i ] + 1 <= first [ j ] + diff [ j ] ) crossings += 0 ; else crossings += ( first [ i ] + 1 - first [ j ] ) \/ diff [ j ] ; } opt = Math . min ( opt , crossings ) ; } return ( int ) opt ; } static Scanner sc = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { int k = sc . nextInt ( ) ; for ( int kk = 1 ; kk <= k ; kk ++ ) System . out . println ( \" Case ▁ # \" + kk + \" : ▁ \" + val ( ) ) ; } }","import java . io . File ; import java . io . FileNotFoundException ; import java . io . PrintWriter ; import java . util . Locale ; import java . util . Scanner ; public class C { private static final int MAXH = 10 ; static void solve ( ) { int tn = in . nextInt ( ) ; for ( int test = 1 ; test <= tn ; test ++ ) { int hn = 0 ; long [ ] start = new long [ MAXH ] ; long [ ] min = new long [ MAXH ] ; long [ ] t = new long [ MAXH ] ; int n = in . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int d = in . nextInt ( ) ; int h = in . nextInt ( ) ; int m = in . nextInt ( ) ; for ( int j = 0 ; j < h ; j ++ ) { start [ hn ] = d ; min [ hn ] = m + j ; t [ hn ] = min [ hn ] * ( 360 - start [ hn ] ) ; hn ++ ; } } long r = hn ; for ( int i = 0 ; i < hn ; i ++ ) { long rr = hn ; for ( int j = 0 ; j < hn ; j ++ ) { if ( t [ j ] <= t [ i ] ) { rr -- ; rr += ( t [ i ] - t [ j ] ) \/ ( 360 * min [ j ] ) ; } } r = Math . min ( r , rr ) ; } out . println ( \" Case ▁ # \" + test + \" : ▁ \" + r ) ; } } static Scanner in ; static PrintWriter out ; public static void main ( String [ ] args ) throws FileNotFoundException { Locale . setDefault ( Locale . US ) ; in = new Scanner ( new File ( \" C : \\\\ programming \\\\ contests \\\\ GCJ \\\\ GCJ _ 2015 \\\\ 2015.05.02 _ Round _ 1B \\\\ in \" ) ) ; out = new PrintWriter ( new File ( \" C : \\\\ programming \\\\ contests \\\\ GCJ \\\\ GCJ _ 2015 \\\\ 2015.05.02 _ Round _ 1B \\\\ out \" ) ) ; solve ( ) ; out . close ( ) ; } }"],"bleu":0.44223091854678714,"rouge_l":0.4023746701846966}
{"id":156,"predictions":["import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; } public static long mod = 17352642619633L ; void run ( FastScanner in , PrintWriter out ) { int N = in . nextInt ( ) ; int [ ] a = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { a [ i ] = in . nextInt ( ) ; } for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < N ; j ++ ) { a [ i ] = in . nextInt ( ) ; } } out . println ( \" Case # \" + ( i + 1 ) + \" : \" + Long . toString ( ) ) ; } static class FastScanner { BufferedReader br ; StringTokenizer st ; public FastScanner ( InputStream in ) { br = new BufferedReader ( new InputStreamReader ( in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . io . * ; import java . util . * ; public class Round0A { int cases ; long calc ( long N ) { boolean seen [ ] = new boolean [ 10 ] ; int nSeen = 0 ; long x = N ; while ( true ) { String s = \" \" + x ; for ( int n = 0 ; n < s . length ( ) ; n ++ ) { char c = s . charAt ( n ) ; if ( ! seen [ c - '0' ] ) { seen [ c - '0' ] = true ; nSeen ++ ; } } if ( nSeen == 10 ) break ; x += N ; } return x ; } String calcS ( long N ) { if ( N == 0 ) return \" INSOMNIA \" ; return \" \" + calc ( N ) ; } void process ( Scanner scanner , PrintStream out ) throws IOException { cases = scanner . nextInt ( ) ; scanner . nextLine ( ) ; for ( int curCase = 0 ; curCase < cases ; curCase ++ ) { long N = scanner . nextLong ( ) ; out . println ( \" Case ▁ # \" + ( curCase + 1 ) + \" : ▁ \" + calcS ( N ) ) ; } } Round0A ( ) throws IOException { Scanner in = new Scanner ( new File ( \" C : \\\\ Users \\\\ Olaf \\\\ Downloads \\\\ A - large . in \" ) ) ; PrintStream out = new PrintStream ( \" out - A - large . txt \" ) ; process ( in , out ) ; in . close ( ) ; out . close ( ) ; } public static void main ( String [ ] args ) throws IOException { new Round0A ( ) ; } }","package gcj2016 . qualif ; import java . io . FileNotFoundException ; import java . io . FileReader ; import java . io . PrintWriter ; import java . util . Scanner ; import java . util . logging . Level ; import java . util . logging . Logger ; public class ExoA { public static void main ( final String [ ] args ) { final String base = \" \/ home \/ jfortin \/ workspace - gcj \/ Codejam2016 \/ q \/ ExoA \/ \" ; final String input = base + \" b1 . in \" ; final String output = base + \" b1 . out \" ; try { final Scanner sc = new Scanner ( new FileReader ( input ) ) ; final PrintWriter pw = new PrintWriter ( output ) ; final int n = sc . nextInt ( ) ; sc . nextLine ( ) ; for ( int c = 0 ; c < n ; c ++ ) { System . out . println ( \" Test ▁ case ▁ \" + ( c + 1 ) + \" . . . \" ) ; pw . print ( \" Case ▁ # \" + ( c + 1 ) + \" : ▁ \" ) ; test ( sc , pw ) ; pw . println ( ) ; } pw . println ( ) ; pw . flush ( ) ; pw . close ( ) ; sc . close ( ) ; } catch ( final FileNotFoundException ex ) { Logger . getLogger ( ExoA . class . getName ( ) ) . log ( Level . SEVERE , null , ex ) ; } } private static void test ( final Scanner sc , final PrintWriter pw ) { int N = sc . nextInt ( ) ; if ( N == 0 ) { pw . print ( \" INSOMNIA \" ) ; return ; } int i = 0 ; long n = 0 ; boolean digits [ ] = new boolean [ 10 ] ; while ( notFull ( digits ) ) { i ++ ; n += N ; if ( i > 100000 || n < 0 ) { pw . print ( \" INSOMNIA \" ) ; return ; } fillDigits ( n , digits ) ; } pw . print ( n ) ; } private static void fillDigits ( long n , final boolean [ ] digits ) { while ( n > 0 ) { long d = n % 10 ; digits [ ( int ) d ] = true ; n = n \/ 10 ; } } private static boolean notFull ( final boolean [ ] digits ) { for ( boolean b : digits ) { if ( ! b ) { return true ; } } return false ; } }","import java . io . * ; import java . util . * ; public class countingsheep { private static InputReader in ; private static PrintWriter out ; public static boolean SUBMIT = true ; public static final String NAME = \" A - large \" ; private static void main2 ( ) throws IOException { int n = in . nextInt ( ) ; if ( n == 0 ) { out . println ( \" INSOMNIA \" ) ; return ; } HashSet < Integer > seen = new HashSet < > ( ) ; int cur = n ; while ( true ) { int m = cur ; while ( m > 0 ) { seen . add ( m % 10 ) ; m \/= 10 ; } boolean ok = true ; for ( int i = 0 ; i <= 9 ; i ++ ) { if ( ! seen . contains ( i ) ) { ok = false ; } } if ( ok ) break ; cur += n ; } out . println ( cur ) ; } public static void main ( String [ ] args ) throws IOException { if ( SUBMIT ) { in = new InputReader ( new FileInputStream ( new File ( NAME + \" . in \" ) ) ) ; out = new PrintWriter ( new BufferedWriter ( new FileWriter ( NAME + \" . out \" ) ) ) ; } else { in = new InputReader ( System . in ) ; out = new PrintWriter ( System . out , true ) ; } int numCases = in . nextInt ( ) ; for ( int test = 1 ; test <= numCases ; test ++ ) { out . print ( \" Case ▁ # \" + test + \" : ▁ \" ) ; main2 ( ) ; } out . close ( ) ; System . exit ( 0 ) ; } static class InputReader { public BufferedReader reader ; public StringTokenizer tokenizer ; public InputReader ( InputStream stream ) { reader = new BufferedReader ( new InputStreamReader ( stream ) , 32768 ) ; tokenizer = null ; } public String next ( ) { while ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } } }","package qualification ; import java . io . * ; public class A_CountingSheep { private static final String FILENAME = \" data \/ qualification \/ A - large \" ; private static final boolean STANDARD_OUTPUT = false ; private static BufferedReader in = null ; private static PrintWriter out = null ; public static void main ( String [ ] args ) throws Throwable { try ( BufferedReader reader = in = new BufferedReader ( new FileReader ( FILENAME + \" . in \" ) ) ) { try ( PrintWriter writer = out = ! STANDARD_OUTPUT ? new PrintWriter ( FILENAME + \" . out \" ) : new PrintWriter ( System . out ) ) { process ( ) ; } } } private static void process ( ) throws Throwable { for ( int caseNumber = 1 , T = Integer . parseInt ( in . readLine ( ) ) ; caseNumber <= T ; caseNumber ++ ) { long N = Long . parseLong ( in . readLine ( ) ) ; long n = 0L , m = 0L ; if ( N > 0 ) { boolean [ ] visited = new boolean [ 10 ] ; int visitedCount = 0 ; loop : for ( n = N ; visitedCount < 10 ; n += N ) { for ( m = n ; m > 0 ; m \/= 10 ) { if ( ! visited [ ( int ) ( m % 10 ) ] ) { visited [ ( int ) ( m % 10 ) ] = true ; visitedCount ++ ; if ( visitedCount == 10 ) break loop ; } } } } out . println ( \" Case ▁ # \" + caseNumber + \" : ▁ \" + ( n == 0L ? \" INSOMNIA \" : n ) ) ; } } }","import java . io . * ; public class A { static void mark ( boolean [ ] bb , int n ) { if ( n > 0 ) { bb [ n % 10 ] = true ; mark ( bb , n \/ 10 ) ; } } static boolean check ( boolean [ ] bb ) { for ( int d = 0 ; d <= 9 ; d ++ ) if ( ! bb [ d ] ) return false ; return true ; } static int count ( int n ) { boolean [ ] bb = new boolean [ 10 ] ; for ( int i = 1 ; ; i ++ ) { mark ( bb , n * i ) ; if ( check ( bb ) ) return n * i ; } } public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter pw = new PrintWriter ( System . out ) ; int T = Integer . parseInt ( br . readLine ( ) ) ; for ( int t = 1 ; t <= T ; t ++ ) { int n = Integer . parseInt ( br . readLine ( ) ) ; pw . println ( \" Case ▁ # \" + t + \" : ▁ \" + ( n == 0 ? \" INSOMNIA \" : count ( n ) ) ) ; } pw . close ( ) ; } }"],"bleu":0.5508671895403082,"rouge_l":0.4754180264157065}
{"id":157,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter pw = new PrintWriter ( new OutputStreamWriter ( System . out ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int m = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( b [ i ] > b [ j ] ) { count ++ ; } } } pw . println ( count ) ; pw . close ( ) ; } }"],"references":["import java . util . * ; import java . io . * ; import java . math . * ; import static java . lang . Math . * ; import static java . lang . Integer . * ; import static java . lang . System . * ; public class A { public static String [ ] parts ( BufferedReader br ) throws Exception { String line = br . readLine ( ) ; if ( line == null ) return null ; return line . trim ( ) . split ( \" \\\\ s + \" ) ; } public static void main ( String args [ ] ) throws Exception { BufferedReader br = new BufferedReader ( new InputStreamReader ( in ) ) ; int cas = parseInt ( br . readLine ( ) ) ; for ( int z = 1 ; z <= cas ; z ++ ) { String [ ] ss = parts ( br ) ; int n = parseInt ( ss [ 0 ] ) ; int m = parseInt ( ss [ 1 ] ) ; ss = parts ( br ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = parseInt ( ss [ i ] ) ; Arrays . sort ( arr ) ; int ans = 0 ; for ( int i = 0 , j = n - 1 ; i <= j ; ) { while ( i < j && arr [ i ] + arr [ j ] > m ) { j -- ; ans ++ ; } i ++ ; j -- ; ans ++ ; } out . println ( \" Case ▁ # \" + z + \" : ▁ \" + ans ) ; } } }","package contest ; import java . util . * ; import java . io . * ; import java . math . * ; public class DataPacking { final static String PROBLEM_NAME = \" dpack \" ; final static String WORK_DIR = \" D : \\\\ GCJ\\ \\\" + PROBLEM_NAME + \" \\ \\\" ; void solve ( Scanner sc , PrintWriter pw ) { int N = sc . nextInt ( ) ; int X = sc . nextInt ( ) ; int [ ] sz = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) sz [ i ] = sc . nextInt ( ) ; Arrays . sort ( sz ) ; int ans = N ; for ( int t = 0 ; 2 * t <= N ; t ++ ) { boolean ok = true ; for ( int i = 0 , j = 2 * t - 1 ; i < j ; i ++ , j -- ) if ( sz [ i ] + sz [ j ] > X ) ok = false ; if ( ok ) ans = Math . min ( ans , N - t ) ; } pw . println ( ans ) ; } public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( new FileReader ( WORK_DIR + \" input . txt \" ) ) ; PrintWriter pw = new PrintWriter ( new FileWriter ( WORK_DIR + \" output . txt \" ) ) ; int caseCnt = sc . nextInt ( ) ; for ( int caseNum = 0 ; caseNum < caseCnt ; caseNum ++ ) { System . out . println ( \" Processing ▁ test ▁ case ▁ \" + ( caseNum + 1 ) ) ; pw . print ( \" Case ▁ # \" + ( caseNum + 1 ) + \" : ▁ \" ) ; new DataPacking ( ) . solve ( sc , pw ) ; } pw . flush ( ) ; pw . close ( ) ; sc . close ( ) ; } }","package com . google . codejam2014 . round2 ; import java . io . * ; import java . util . Arrays ; import java . util . StringTokenizer ; public class DataPacking { BufferedReader reader = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter writer = new PrintWriter ( System . out ) ; StringTokenizer stringTokenizer ; DataPacking ( ) throws IOException { reader = new BufferedReader ( new FileReader ( \" input . txt \" ) ) ; writer = new PrintWriter ( new FileWriter ( \" output . txt \" ) ) ; } String next ( ) throws IOException { while ( stringTokenizer == null || ! stringTokenizer . hasMoreTokens ( ) ) { stringTokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } return stringTokenizer . nextToken ( ) ; } int nextInt ( ) throws IOException { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) throws IOException { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) throws IOException { return Double . parseDouble ( next ( ) ) ; } void solveTestCase ( int testNumber ) throws IOException { writer . printf ( \" Case ▁ # % d : ▁ \" , testNumber ) ; int n = nextInt ( ) ; int x = nextInt ( ) ; int [ ] s = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { s [ i ] = nextInt ( ) ; } Arrays . sort ( s ) ; int limit = x \/ 2 ; int i1 = 0 ; int i2 = n - 1 ; int ans = 0 ; while ( s [ i2 ] > limit && i2 > i1 ) { ans ++ ; if ( s [ i2 ] + s [ i1 ] <= x ) { i1 ++ ; } i2 -- ; } int left = i2 - i1 + 1 ; ans += left \/ 2 + left % 2 ; writer . println ( ans ) ; } void solve ( ) throws IOException { int testsNumber = nextInt ( ) ; for ( int i = 1 ; i <= testsNumber ; i ++ ) { solveTestCase ( i ) ; writer . flush ( ) ; } writer . close ( ) ; } public static void main ( String [ ] args ) throws IOException { new DataPacking ( ) . solve ( ) ; } }","import java . io . FileReader ; import java . io . FileWriter ; import java . io . OutputStreamWriter ; import java . io . PrintWriter ; import java . util . Arrays ; import java . util . Scanner ; public class DataPacking { private static Scanner input ; private static PrintWriter out ; public static void main ( String [ ] args ) throws Exception { input = new Scanner ( new FileReader ( \" A - large . in \" ) ) ; out = new PrintWriter ( new FileWriter ( \" A - large . out \" ) ) ; int testCases = input . nextInt ( ) ; for ( int testCase = 1 ; testCase <= testCases ; testCase ++ ) { out . println ( \" Case ▁ # \" + testCase + \" : ▁ \" + solveCase ( ) ) ; } out . close ( ) ; } public static int solveCase ( ) { int n = input . nextInt ( ) , max = input . nextInt ( ) ; int [ ] values = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) values [ i ] = input . nextInt ( ) ; Arrays . sort ( values ) ; int lower = 0 , upper = n - 1 , res = 0 ; while ( lower <= upper ) { if ( lower == upper ) { res ++ ; lower ++ ; } else { if ( values [ upper ] + values [ lower ] <= max ) { res ++ ; lower ++ ; upper -- ; } else { res ++ ; upper -- ; } } } return res ; } }","import static java . lang . Math . * ; import static java . util . Arrays . * ; import java . io . * ; import java . util . * ; public class A { Scanner sc = new Scanner ( System . in ) ; int N , X ; int [ ] S ; void read ( ) { N = sc . nextInt ( ) ; X = sc . nextInt ( ) ; S = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) S [ i ] = sc . nextInt ( ) ; } void solve ( ) { boolean [ ] used = new boolean [ N ] ; int num = 0 ; sort ( S ) ; for ( int i = 0 ; i < N ; i ++ ) if ( ! used [ i ] ) { used [ i ] = true ; for ( int j = N - 1 ; j >= 0 ; j -- ) if ( ! used [ j ] && S [ i ] + S [ j ] <= X ) { used [ i ] = used [ j ] = true ; break ; } num ++ ; } System . out . println ( num ) ; } void run ( ) { int caseN = sc . nextInt ( ) ; for ( int caseID = 1 ; caseID <= caseN ; caseID ++ ) { read ( ) ; System . out . printf ( \" Case ▁ # % d : ▁ \" , caseID ) ; solve ( ) ; System . out . flush ( ) ; } } void debug ( Object ... os ) { System . err . println ( deepToString ( os ) ) ; } public static void main ( String [ ] args ) { try { System . setIn ( new BufferedInputStream ( new FileInputStream ( args . length > 0 ? args [ 0 ] : ( A . class . getName ( ) + \" . in \" ) ) ) ) ; } catch ( Exception e ) { } new A ( ) . run ( ) ; } }"],"bleu":0.5520922796379163,"rouge_l":0.490991882194925}
{"id":158,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter pw = new PrintWriter ( new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int N = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int [ ] b = new int [ M ] ; for ( int i = 0 ; i < M ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int count = 0 ; for ( int i = 0 ; i < M ; i ++ ) { for ( int j = 0 ; j < M ; j ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { if ( a [ k ] > a [ k ] ) { b [ k ] -= a [ k ] ; b [ k ] -= b [ k ] ; b [ k ] -= b [ k ] ; } } } } } count ++ ; } } pw . println ( count ) ; pw . close ( ) ; } }"],"references":["import java . util . ArrayList ; import java . util . Collections ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import java . util . Scanner ; public class B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int numCases = sc . nextInt ( ) ; for ( int caseNum = 1 ; caseNum <= numCases ; caseNum ++ ) { int N = sc . nextInt ( ) ; Map < Integer , Integer > counts = new HashMap < > ( ) ; for ( int i = 0 ; i < 2 * N - 1 ; i ++ ) { for ( int j = 0 ; j < N ; j ++ ) { int height = sc . nextInt ( ) ; if ( counts . containsKey ( height ) ) { counts . put ( height , counts . get ( height ) + 1 ) ; } else { counts . put ( height , 1 ) ; } } } List < Integer > heights = new ArrayList < > ( ) ; for ( Map . Entry < Integer , Integer > entry : counts . entrySet ( ) ) { if ( entry . getValue ( ) % 2 != 0 ) { heights . add ( entry . getKey ( ) ) ; } } Collections . sort ( heights ) ; System . out . print ( \" Case ▁ # \" + caseNum + \" : \" ) ; for ( int h : heights ) { System . out . print ( \" ▁ \" + h ) ; } System . out . println ( ) ; } } }","import java . io . * ; import java . util . * ; public class B { String solveOne ( Scanner in ) { boolean odd [ ] = new boolean [ 2501 ] ; int n = in . nextInt ( ) ; for ( int i = 0 ; i < 2 * n - 1 ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { int value = in . nextInt ( ) ; odd [ value ] = ! odd [ value ] ; } } String res = \" \" ; for ( int i = 0 ; i < odd . length ; i ++ ) { if ( odd [ i ] ) { res += \" ▁ \" + i ; } } return res ; } void solve ( Scanner in , PrintWriter out ) { int nTests = in . nextInt ( ) ; for ( int iTest = 1 ; iTest <= nTests ; iTest ++ ) { out . printf ( \" Case ▁ # % d : % s % n \" , iTest , solveOne ( in ) ) ; } } void run ( ) { try ( Scanner in = new Scanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; ) { solve ( in , out ) ; } } public static void main ( String args [ ] ) { new B ( ) . run ( ) ; } }","package Round1A2016 ; import java . util . Scanner ; public class B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int T = sc . nextInt ( ) ; for ( int testCase = 1 ; testCase <= T ; ++ testCase ) { final int n = sc . nextInt ( ) ; final int [ ] count = new int [ 2500 + 1 ] ; for ( int i = 0 ; i < n * ( 2 * n - 1 ) ; ++ i ) count [ sc . nextInt ( ) ] ++ ; int [ ] row = new int [ n ] ; int rowInd = 0 ; for ( int i = 0 ; i < count . length ; ++ i ) { if ( count [ i ] % 2 == 1 ) { row [ rowInd ++ ] = i ; } } System . out . printf ( \" Case ▁ # % d : ▁ \" , testCase ) ; for ( int x : row ) { System . out . print ( x + \" ▁ \" ) ; } System . out . println ( ) ; } } }","import java . io . BufferedReader ; import java . io . BufferedWriter ; import java . io . File ; import java . io . FileReader ; import java . io . FileWriter ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . StringTokenizer ; public class b { public static void main ( String [ ] Args ) throws Exception { FS sc = new FS ( new File ( \" B - large . in \" ) ) ; PrintWriter out = new PrintWriter ( new BufferedWriter ( new FileWriter ( new File ( \" b . out \" ) ) ) ) ; int cc = 0 ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; boolean [ ] con = new boolean [ 2501 ] ; for ( int i = 0 ; i < ( n * 2 - 1 ) * n ; i ++ ) { int k = sc . nextInt ( ) ; con [ k ] = ! con [ k ] ; } out . printf ( \" Case ▁ # % d : \" , ++ cc ) ; for ( int i = 0 ; i < 2501 ; i ++ ) { if ( con [ i ] ) { out . printf ( \" ▁ % d \" , i ) ; } } out . println ( ) ; } out . close ( ) ; } public static class FS { BufferedReader br ; StringTokenizer st ; FS ( InputStream in ) throws Exception { br = new BufferedReader ( new InputStreamReader ( in ) ) ; st = new StringTokenizer ( br . readLine ( ) ) ; } FS ( File in ) throws Exception { br = new BufferedReader ( new FileReader ( in ) ) ; st = new StringTokenizer ( br . readLine ( ) ) ; } String next ( ) throws Exception { if ( st . hasMoreTokens ( ) ) return st . nextToken ( ) ; st = new StringTokenizer ( br . readLine ( ) ) ; return next ( ) ; } int nextInt ( ) throws Exception { return Integer . parseInt ( next ( ) ) ; } } }","import java . io . File ; import java . io . IOException ; import java . io . PrintWriter ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Scanner ; public class Rank { public static void main ( String [ ] args ) throws IOException { Scanner input = new Scanner ( new File ( \" input . txt \" ) ) ; PrintWriter out = new PrintWriter ( new File ( \" output . txt \" ) ) ; int cs = input . nextInt ( ) ; for ( int i = 1 ; i <= cs ; i ++ ) { int [ ] arr = new int [ 2501 ] ; int sz = input . nextInt ( ) ; for ( int x = 0 ; x < sz * ( 2 * sz - 1 ) ; x ++ ) { arr [ input . nextInt ( ) ] ++ ; } out . printf ( \" Case ▁ # % d : \" , i ) ; for ( int j = 0 ; j < arr . length ; j ++ ) if ( arr [ j ] % 2 == 1 ) out . print ( \" ▁ \" + j ) ; out . println ( ) ; } out . close ( ) ; } }"],"bleu":0.42301642809943124,"rouge_l":0.4692278471947616}
{"id":159,"predictions":["import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; } public static long mod = 17352642619633L ; void run ( FastScanner in , PrintWriter out ) {"],"references":["import java . io . * ; import java . util . * ; import java . math . * ; public class Main implements Runnable { StreamTokenizer ST ; PrintWriter out ; BufferedReader br ; Scanner in ; String FileName = \" test \" ; int inf = 1000000000 ; int nextInt ( ) throws IOException { ST . nextToken ( ) ; return ( int ) ST . nval ; } String next ( ) throws IOException { ST . nextToken ( ) ; return ST . sval ; } double nextD ( ) throws IOException { ST . nextToken ( ) ; return ST . nval ; } public static void main ( String [ ] args ) throws IOException { new Thread ( new Main ( ) ) . start ( ) ; } public void run ( ) { try { out = new PrintWriter ( new BufferedWriter ( new FileWriter ( new File ( \" output . txt \" ) ) ) ) ; br = new BufferedReader ( new FileReader ( \" input . txt \" ) ) ; in = new Scanner ( br ) ; ST = new StreamTokenizer ( br ) ; solve ( ) ; out . close ( ) ; } catch ( IOException e ) { throw new IllegalStateException ( e ) ; } } public void solve ( ) throws IOException { BigDecimal d = BigDecimal . valueOf ( 5 ) ; BigDecimal l = BigDecimal . valueOf ( 2 ) ; BigDecimal r = BigDecimal . valueOf ( 3 ) ; BigDecimal e = BigDecimal . valueOf ( 1 ) ; e = e . divide ( BigDecimal . TEN . pow ( 100 ) ) ; while ( r . subtract ( l ) . compareTo ( e ) > 0 ) { BigDecimal m = l . add ( r ) . divide ( BigDecimal . valueOf ( 2 ) ) ; if ( m . multiply ( m ) . compareTo ( d ) > 0 ) r = m ; else l = m ; } r = r . add ( BigDecimal . valueOf ( 3 ) ) ; int tests = nextInt ( ) ; for ( int test = 1 ; test <= tests ; test ++ ) { out . print ( \" Case ▁ # \" + test + \" : ▁ \" ) ; BigDecimal x = r . pow ( nextInt ( ) ) ; String s = x . toString ( ) ; s = \"0\" + s . substring ( 0 , s . indexOf ( ' . ' ) ) ; out . println ( s . substring ( s . length ( ) - 3 , s . length ( ) ) ) ; } } }","import org . apfloat . * ; import java . util . * ; import java . math . * ; public class Numbers { static int [ ] jojojo = { 143 , 751 , 935 , 607 , 903 , 991 , 335 , 47 , 943 , 471 , 55 , 447 , 463 , 991 , 95 , 607 , 263 , 151 , 855 , 527 , 743 , 351 , 135 , 407 , 903 , 791 , 135 , 647 , 343 , 471 , 455 , 847 , 263 , 191 , 95 , 807 , 463 , 551 , 455 , 527 , 343 , 951 , 335 , 207 , 903 , 591 , 935 , 247 , 743 , 471 , 855 , 247 , 63 , 391 , 95 , 7 , 663 , 951 , 55 , 527 , 943 , 551 , 535 , 7 , 903 , 391 , 735 , 847 , 143 , 471 , 255 , 647 , 863 , 591 , 95 , 207 , 863 , 351 , 655 , 527 , 543 , 151 , 735 , 807 , 903 , 191 , 535 , 447 , 543 , 471 , 655 , 47 , 663 , 791 , 95 , 407 , 63 , 751 , 255 , 527 } ; static String jojojofunction ( long l ) { if ( l == 0 ) return \"001\" ; if ( l == 1 ) return \"005\" ; if ( l == 2 ) return \"027\" ; String s = \" \" + jojojo [ ( int ) ( ( l - 3 ) % jojojo . length ) ] ; while ( s . length ( ) < 3 ) s = \"0\" + s ; return s ; } public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; for ( int c = 0 , T = sc . nextInt ( ) ; c < T ; c ++ ) { System . out . println ( \" Case ▁ # \" + ( c + 1 ) + \" : ▁ \" + jojojofunction ( sc . nextLong ( ) ) ) ; } } }","import java . io . * ; import java . util . * ; import java . math . * ; public class C { public static void main ( String [ ] args ) throws Throwable { StreamTokenizer in = new StreamTokenizer ( new BufferedReader ( new InputStreamReader ( System . in ) ) ) ; PrintWriter out = new PrintWriter ( new BufferedWriter ( new FileWriter ( \" A - small . out \" ) ) ) ; BigDecimal X = new BigDecimal ( \"3\" ) . add ( new BigDecimal ( \"2.2360679774997896964091736687312762354406183596115257242708972454105209256378048994144144083787822749695081761507737835042532677244470738635863601215334527088667781731918791658112766453226398565805357613504175337850034233924140644420864325390972525926272288762995174024406816117759089094984923713907297288984820886415426898940991316935770197486788844250897541329561831769214999774248015304341150359576683325124988151781394080005624208552435422355561063063428202340933319829339597463522712013417496142026359047378855043896870611356600457571399565955669569175645782219525000605392312340050092867648755297220567662536660744858535052623306784946334222423176372770266324076801044433158257335058930981362263431986864719469899701808189524264459620345221411922329125981963258111041704958070481204034559949435068555518555725123886416550102624363125710244496187894246829034044747161154557232017376765904609185295756035779843980541553807790643936397230287560629994822138521773485924535151210463455550407072278724215347787529112121211843317893351910380080111181790045906188462496471042442483088801294068113146959532794478989989316915774607924618075006798771242048473805027736082915599139624489149435606834625290644083279446426808889897460463083535378750420613747576068834018790881925591179735744641902485378711461940901919136880351103976384360412810581103786989518520146970456420217638928908844463778263858937924400460288754053984601560617052236150903857754100421936849872542718503752155576933167230047782698666624462106784642724863852745782134100679856453052711241805959728494551954513101723097508714965294362829025400120477803241554644899887061779981900336065622438864096392877535172662959714382279563079561495230154442350165389172786409130419793971113562821393674576811749220675621088878188736716716276226233798771115395096829828906830182590814010038955097232615084528345878936073463961172366783665719826079214402891190089955842415224957129183232167411899757201394037881977280152887234186683454183828673002743153202296076286125247610286423469630201118026912202360158101276284305418617176185751406901015616290917639812672259655962823490678546241618579455844426596128589375648549748034901108135575141664746219518302355259568865694958163530361955745368322352650077224225828736687534047007422326614517397665174206726444762196180242203979835368298350246626803054676876744690018695720995\" ) ) ; String [ ] ans = new String [ 31 ] ; for ( int i = 2 ; i < 31 ; i ++ ) { ans [ i ] = m3 ( X . pow ( i ) . toBigInteger ( ) . toString ( ) ) ; System . out . println ( i ) ; } System . out . println ( \" Ready . \" ) ; in . nextToken ( ) ; int t = ( int ) in . nval , iter = 0 ; while ( t -- > 0 ) { iter ++ ; in . nextToken ( ) ; out . println ( \" Case ▁ # \" + iter + \" : ▁ \" + ans [ ( int ) in . nval ] ) ; } out . close ( ) ; System . exit ( 0 ) ; } static String m3 ( String s ) { if ( s . length ( ) > 3 ) s = s . substring ( s . length ( ) - 3 ) ; while ( s . length ( ) < 3 ) s = \"0\" + s ; return s ; } }","import java . util . * ; import java . io . * ; import java . math . BigInteger ; public class Main { final static String FNAME = \" c1\" ; public Scanner in ; public PrintWriter out ; void open ( ) throws IOException { in = new Scanner ( new File ( FNAME + \" . in \" ) ) ; out = new PrintWriter ( new File ( FNAME + \" . out \" ) ) ; } void close ( ) throws IOException { out . close ( ) ; } void run ( ) { BigInteger two = new BigInteger ( \"2\" ) ; BigInteger l = new BigInteger ( \"2\" ) . multiply ( BigInteger . TEN . pow ( 35 ) ) ; BigInteger r = new BigInteger ( \"3\" ) . multiply ( BigInteger . TEN . pow ( 35 ) ) ; BigInteger p = new BigInteger ( \"5\" ) . multiply ( BigInteger . TEN . pow ( 70 ) ) ; while ( ! r . equals ( l ) ) { BigInteger m = l . add ( r ) . divide ( two ) ; if ( m . multiply ( m ) . compareTo ( p ) > 0 ) { r = m ; } else { l = m . add ( BigInteger . ONE ) ; } } l = l . add ( new BigInteger ( \"3\" ) . multiply ( BigInteger . TEN . pow ( 35 ) ) ) ; int tn = in . nextInt ( ) ; for ( int test = 1 ; test <= tn ; test ++ ) { int d = in . nextInt ( ) ; String s = \" \" + l . pow ( d ) . divide ( BigInteger . TEN . pow ( d * 35 ) ) . remainder ( new BigInteger ( \"1000\" ) ) ; while ( s . length ( ) < 3 ) { s = '0' + s ; } out . println ( \" Case ▁ # \" + test + \" : ▁ \" + s ) ; } } public static void main ( String [ ] args ) throws IOException { new Thread ( ) { public void run ( ) { try { Main solution = new Main ( ) ; solution . open ( ) ; solution . run ( ) ; solution . close ( ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } } . start ( ) ; } }","import java . math . * ; import java . util . * ; public class z { static BigDecimal sqrt ( BigDecimal z ) { BigDecimal l = BigDecimal . valueOf ( 2 ) ; BigDecimal r = BigDecimal . valueOf ( 3 ) ; for ( int i = 0 ; i < 100 ; i ++ ) { BigDecimal x = l . add ( r ) . divide ( BigDecimal . valueOf ( 2 ) ) ; if ( x . multiply ( x ) . compareTo ( z ) >= 0 ) r = x ; else l = x ; } ; return l . add ( r ) . divide ( BigDecimal . valueOf ( 2 ) ) ; } ; public static void main ( String args [ ] ) { BigDecimal t1 = BigDecimal . valueOf ( 3 ) ; BigDecimal t2 = t1 . add ( sqrt ( BigDecimal . valueOf ( 5 ) ) ) ; String s [ ] = new String [ 31 ] ; BigDecimal p = t2 ; for ( int i = 1 ; i <= 30 ; i ++ ) { String q = \" \" + p ; int h = q . indexOf ( ' . ' ) ; int b = Math . max ( h - 3 , 0 ) ; q = q . substring ( b , h ) ; while ( q . length ( ) < 3 ) q = \"0\" + q ; s [ i ] = q ; p = p . multiply ( t2 ) ; } ; Scanner in = new Scanner ( System . in ) ; int t = in . nextInt ( ) ; for ( int i = 1 ; i <= t ; i ++ ) { int h = in . nextInt ( ) ; System . out . println ( \" Case ▁ # \" + i + \" : ▁ \" + s [ h ] ) ; } ; } ; } ;"],"bleu":0.06176499275355812,"rouge_l":0.3204903677758319}
{"id":160,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter pw = new PrintWriter ( new OutputStreamWriter ( System . out ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int N = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ M ] ; for ( int i = 0 ; i < M ; i ++ ) { a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int [ ] b = new int [ M ] ; for ( int i = 0 ; i < M ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < M ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int count = 0 ; for ( int i = 0 ; i < M ; i ++ ) { for ( int j = 0 ; j < M ; j ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { if ( a [ i ] > b [ j ] ) { count ++ ; } } } } pw . println ( count ) ; pw . close ( ) ; } }"],"references":["package c_2015 ; import java . util . Scanner ; public class C { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int kases = in . nextInt ( ) ; for ( int kas = 1 ; kas <= kases ; kas ++ ) { int C = in . nextInt ( ) ; int D = in . nextInt ( ) ; int V = in . nextInt ( ) ; if ( kas == 31 ) { C = C ; } long max = 0 ; int added = 0 ; for ( int i = 0 ; i < D ; i ++ ) { long coin = in . nextLong ( ) ; while ( max + 1 < coin ) { max += C * ( max + 1 ) ; added ++ ; } max += C * coin ; } while ( max < V ) { max += C * ( max + 1 ) ; added ++ ; } System . out . println ( \" Case ▁ # \" + kas + \" : ▁ \" + added ) ; } } }","package round1c ; import java . io . BufferedOutputStream ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . OutputStream ; import java . io . PrintWriter ; import java . util . StringTokenizer ; public class Kattio extends PrintWriter { public Kattio ( InputStream i ) { super ( new BufferedOutputStream ( System . out ) ) ; r = new BufferedReader ( new InputStreamReader ( i ) ) ; } public Kattio ( InputStream i , OutputStream o ) { super ( new BufferedOutputStream ( o ) ) ; r = new BufferedReader ( new InputStreamReader ( i ) ) ; } public boolean hasMoreTokens ( ) { return peekToken ( ) != null ; } public int getInt ( ) { return Integer . parseInt ( nextToken ( ) ) ; } public double getDouble ( ) { return Double . parseDouble ( nextToken ( ) ) ; } public long getLong ( ) { return Long . parseLong ( nextToken ( ) ) ; } public String getWord ( ) { return nextToken ( ) ; } private BufferedReader r ; private String line ; private StringTokenizer st ; private String token ; private String peekToken ( ) { if ( token == null ) try { while ( st == null || ! st . hasMoreTokens ( ) ) { line = r . readLine ( ) ; if ( line == null ) return null ; st = new StringTokenizer ( line ) ; } token = st . nextToken ( ) ; } catch ( IOException e ) { } return token ; } private String nextToken ( ) { String ans = peekToken ( ) ; token = null ; return ans ; } }","import java . io . * ; import java . util . * ; public class SolutionD { static Scanner scan = new Scanner ( System . in ) ; static PrintStream out = System . out ; private static boolean doable ( TreeSet < Long > demo , long C , long value ) { Iterator iter = demo . descendingIterator ( ) ; while ( iter . hasNext ( ) ) { long d = ( Long ) ( iter . next ( ) ) ; if ( value % d == 0 && value \/ d <= C ) return true ; value -= Math . min ( value \/ d , C ) * d ; } return false ; } private static void solve ( ) { long C = scan . nextLong ( ) , D = scan . nextLong ( ) , V = scan . nextLong ( ) ; TreeSet < Long > demo = new TreeSet < Long > ( ) ; for ( int i = 0 ; i < D ; ++ i ) demo . add ( scan . nextLong ( ) ) ; long value = 1 ; while ( value <= V ) { if ( demo . contains ( value ) ) { value = value * ( C + 1 ) ; } else if ( ! doable ( demo , C , value ) ) { demo . add ( value ) ; value = value * ( C + 1 ) ; } else { long sum = 0 ; for ( long t : demo ) { if ( t <= value ) sum += C * t ; } value = Math . max ( value + 1 , sum ) ; } } out . println ( demo . size ( ) - D ) ; } public static void main ( String [ ] args ) { int T = scan . nextInt ( ) ; for ( int i = 1 ; i <= T ; ++ i ) { System . out . print ( \" Case ▁ # \" + i + \" : ▁ \" ) ; solve ( ) ; } } }","import java . io . BufferedReader ; import java . io . FileReader ; import java . io . IOException ; import java . util . LinkedList ; public class LessMoneyMoreProblems { public static void main ( String [ ] args ) throws NumberFormatException , IOException { FileReader input = new FileReader ( args [ 0 ] ) ; BufferedReader buffer = new BufferedReader ( input ) ; int max = Integer . parseInt ( buffer . readLine ( ) . trim ( ) ) ; for ( int i = 1 ; i <= max ; i ++ ) { System . out . println ( \" Case ▁ # \" + i + \" : ▁ \" + solve ( buffer ) ) ; } } public static long solve ( BufferedReader buffer ) throws NumberFormatException , IOException { String [ ] split = buffer . readLine ( ) . trim ( ) . split ( \" \\\\ s + \" ) ; long C = Long . parseLong ( split [ 0 ] ) ; int D = Integer . parseInt ( split [ 1 ] ) ; long V = Long . parseLong ( split [ 2 ] ) ; String [ ] sCoins = buffer . readLine ( ) . trim ( ) . split ( \" \\\\ s + \" ) ; long [ ] coins = new long [ D ] ; for ( int i = 0 ; i < D ; i ++ ) { coins [ i ] = Long . parseLong ( sCoins [ i ] ) ; } int index = 0 ; long current = 0 ; long count = 0 ; while ( current < V ) { if ( index < D && coins [ index ] <= current + 1 ) { current += C * coins [ index ] ; index ++ ; } else { current += C * ( current + 1 ) ; count ++ ; } } return count ; } }","import java . io . BufferedWriter ; import java . io . FileInputStream ; import java . io . FileNotFoundException ; import java . io . FileWriter ; import java . io . IOException ; import java . util . Arrays ; import java . util . Locale ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { try { Scanner scanner = new Scanner ( new FileInputStream ( \" input . txt \" ) ) ; scanner . useLocale ( Locale . ENGLISH ) ; BufferedWriter out = new BufferedWriter ( new FileWriter ( \" output1 . txt \" ) ) ; int tests = scanner . nextInt ( ) ; for ( int i = 0 ; i < tests ; i ++ ) { long c = scanner . nextLong ( ) ; int d = scanner . nextInt ( ) ; long v = scanner . nextLong ( ) ; long [ ] values = new long [ d ] ; for ( int j = 0 ; j < d ; j ++ ) { values [ j ] = scanner . nextLong ( ) ; } long result = 0 ; long netWorth = 0 ; int j = 0 ; while ( netWorth < v ) { if ( j < values . length && values [ j ] <= netWorth + 1 ) { netWorth += c * values [ j ] ; j ++ ; } else { netWorth += c * ( netWorth + 1 ) ; result ++ ; } } out . write ( \" Case ▁ # \" + ( i + 1 ) + \" : ▁ \" + result + \" \\n \" ) ; out . flush ( ) ; } out . close ( ) ; } catch ( FileNotFoundException e ) { } catch ( IOException e ) { } } }"],"bleu":0.45545782344955715,"rouge_l":0.48626329370628674}
{"id":161,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter pw = new PrintWriter ( new OutputStreamWriter ( System . out ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int m = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { st = new StringTokenizer ( br . readLine ( ) ) ; a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { for ( int k = 0 ; k < n ; k ++ ) { for ( int k = 0 ; k < n ; k ++ ) { for ( int k = 0 ; k < n ; k ++ ) { if ( a [ k ] > a [ k ] ) { b [ k ] -= a [ k ] ; b [ k ] -= b [ k ] ; } } } } } pw . println ( count ) ; pw . close ( ) ; } pw . close ( ) ; } }"],"references":["import java . io . IOException ; public class ProblemC extends CodeJammer { public void print ( boolean [ ] [ ] g , int l ) { for ( int i = 0 ; i < l ; i ++ ) { String s = \" \" ; for ( int j = 0 ; j < l ; j ++ ) { if ( g [ i ] [ j ] ) { s += \"1\" ; } else { s += \"0\" ; } } System . out . println ( s ) ; } } @ Override public void process ( ) throws IOException { int r = reader . readInt ( ) ; boolean [ ] [ ] g = new boolean [ 101 ] [ 101 ] ; for ( int i = 0 ; i < 101 ; i ++ ) { for ( int j = 0 ; j < 101 ; j ++ ) { g [ i ] [ j ] = false ; } } for ( int n = 0 ; n < r ; n ++ ) { int [ ] data = reader . readArray ( ) ; for ( int i = data [ 0 ] ; i <= data [ 2 ] ; i ++ ) { for ( int j = data [ 1 ] ; j <= data [ 3 ] ; j ++ ) { g [ i ] [ j ] = true ; } } } long alive = 1 ; int turns = 0 ; while ( alive > 0 ) { alive = 0 ; for ( int s = 200 ; s >= 0 ; s -- ) { for ( int i = 0 ; i <= s && i <= 100 ; i ++ ) { int j = s - i ; if ( j >= 0 && j <= 100 ) { int neighs = 0 ; if ( i > 0 && g [ i - 1 ] [ j ] ) neighs ++ ; if ( j > 0 && g [ i ] [ j - 1 ] ) neighs ++ ; if ( neighs == 0 ) g [ i ] [ j ] = false ; if ( neighs == 2 ) g [ i ] [ j ] = true ; if ( g [ i ] [ j ] ) alive ++ ; } } } turns ++ ; } output ( turns ) ; } public static void main ( String [ ] args ) { ProblemC p = new ProblemC ( ) ; p . run ( args ) ; } }","import java . util . * ; import java . io . * ; public class x { public static void main ( String args [ ] ) throws Exception { Scanner in = new Scanner ( System . in ) ; int t = in . nextInt ( ) ; for ( int tt = 1 ; tt <= t ; tt ++ ) { boolean [ ] [ ] z = new boolean [ 101 ] [ 101 ] ; int r = in . nextInt ( ) , cnt = 0 ; for ( int i = 0 ; i < r ; i ++ ) { int x1 = in . nextInt ( ) , y1 = in . nextInt ( ) , x2 = in . nextInt ( ) , y2 = in . nextInt ( ) ; for ( int a = x1 ; a <= x2 ; a ++ ) for ( int b = y1 ; b <= y2 ; b ++ ) { if ( ! z [ a ] [ b ] ) ++ cnt ; z [ a ] [ b ] = true ; } } int s ; for ( s = 1 ; ; s ++ ) { for ( int i = 100 ; i >= 1 ; i -- ) for ( int j = 100 ; j >= 1 ; j -- ) { if ( z [ i - 1 ] [ j ] && z [ i ] [ j - 1 ] && ! z [ i ] [ j ] ) { z [ i ] [ j ] = true ; ++ cnt ; } if ( ! z [ i - 1 ] [ j ] && ! z [ i ] [ j - 1 ] && z [ i ] [ j ] ) { z [ i ] [ j ] = false ; -- cnt ; } } if ( cnt == 0 ) break ; } System . out . println ( \" Case ▁ # \" + tt + \" : ▁ \" + s ) ; } ; } ; } ;","import java . util . * ; public class Bacteria { static Scanner sc = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { int T = sc . nextInt ( ) ; for ( int i = 1 ; i <= T ; i ++ ) { System . out . println ( \" Case ▁ # \" + i + \" : ▁ \" + solveCase ( ) ) ; } } static int solveCase ( ) { boolean [ ] [ ] grid = new boolean [ 300 ] [ 300 ] ; boolean [ ] [ ] temp = new boolean [ 300 ] [ 300 ] ; int R = sc . nextInt ( ) ; for ( int i = 0 ; i < R ; i ++ ) { int x1 = sc . nextInt ( ) , y1 = sc . nextInt ( ) ; int x2 = sc . nextInt ( ) , y2 = sc . nextInt ( ) ; x1 -- ; x2 -- ; y1 -- ; y2 -- ; for ( int x = x1 ; x <= x2 ; x ++ ) for ( int y = y1 ; y <= y2 ; y ++ ) grid [ y ] [ x ] = true ; } int res = 0 ; while ( true ) { boolean alive = false ; for ( int i = 0 ; i < grid . length ; i ++ ) for ( int j = 0 ; j < grid [ i ] . length ; j ++ ) alive |= grid [ i ] [ j ] ; if ( ! alive ) break ; for ( boolean [ ] arr : temp ) Arrays . fill ( arr , false ) ; for ( int i = 0 ; i < grid . length ; i ++ ) { for ( int j = 0 ; j < grid [ i ] . length ; j ++ ) { boolean north = i > 0 && grid [ i - 1 ] [ j ] ; boolean west = j > 0 && grid [ i ] [ j - 1 ] ; temp [ i ] [ j ] = ( grid [ i ] [ j ] && ( north || west ) ) || ( north && west ) ; } } boolean [ ] [ ] t = temp ; temp = grid ; grid = t ; res ++ ; } return res ; } }","import java . io . * ; import java . util . Scanner ; public class C { public static void main ( String [ ] args ) throws IOException { Scanner in = new Scanner ( new File ( \" C - small - attempt0 . in \" ) ) ; PrintWriter out = new PrintWriter ( \" c . out \" ) ; int C = in . nextInt ( ) ; for ( int c = 1 ; c <= C ; c ++ ) { int R = in . nextInt ( ) ; boolean [ ] [ ] gr = new boolean [ 110 ] [ 110 ] ; int k = 0 ; for ( int i = 0 ; i < R ; i ++ ) { int x1 = in . nextInt ( ) ; int y1 = in . nextInt ( ) ; int x2 = in . nextInt ( ) ; int y2 = in . nextInt ( ) ; for ( int x = x1 ; x <= x2 ; x ++ ) { for ( int y = y1 ; y <= y2 ; y ++ ) { if ( ! gr [ x ] [ y ] ) k ++ ; gr [ x ] [ y ] = true ; } } } int t = 0 ; boolean [ ] [ ] gr2 = new boolean [ 110 ] [ 110 ] , tt ; while ( k > 0 ) { for ( int x = 0 ; x < gr . length ; x ++ ) { for ( int y = 0 ; y < gr [ 0 ] . length ; y ++ ) { if ( x == 0 || y == 0 ) gr2 [ x ] [ y ] = false ; else { gr2 [ x ] [ y ] = gr [ x ] [ y ] && ( gr [ x - 1 ] [ y ] || gr [ x ] [ y - 1 ] ) || ! gr [ x ] [ y ] && gr [ x - 1 ] [ y ] && gr [ x ] [ y - 1 ] ; } if ( gr2 [ x ] [ y ] && ! gr [ x ] [ y ] ) k ++ ; if ( ! gr2 [ x ] [ y ] && gr [ x ] [ y ] ) k -- ; } } tt = gr ; gr = gr2 ; gr2 = tt ; t ++ ; } out . println ( \" Case ▁ # \" + c + \" : ▁ \" + t ) ; } in . close ( ) ; out . close ( ) ; } }"],"bleu":0.40562498869600266,"rouge_l":0.4534029262928056}
{"id":162,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter pw = new PrintWriter ( new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int N = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int [ ] b = new int [ M ] ; for ( int i = 0 ; i < M ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int count = 0 ; for ( int i = 0 ; i < M ; i ++ ) { for ( int j = 0 ; j < M ; j ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { if ( a [ k ] > a [ k ] ) { b [ k ] -= a [ k ] ; b [ k ] -= b [ k ] ; b [ k ] -= b [ k ] ; } } } } } count ++ ; } } pw . println ( count ) ; pw . close ( ) ; } }"],"references":["import java . util . Scanner ; public class A { static Scanner sc = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { int T = sc . nextInt ( ) ; for ( int i = 1 ; i <= T ; ++ i ) { long N = sc . nextLong ( ) ; System . out . printf ( \" Case ▁ # % d : ▁ % d \\n \" , i , solve ( N ) ) ; } } static long solve ( long v ) { if ( v <= 10 ) return v ; int len = ( \" \" + v ) . length ( ) ; long mod = 1 ; for ( int i = 0 ; i < len \/ 2 ; ++ i ) { mod *= 10 ; } if ( v % mod == 0 ) return solve ( v - 1 ) + 1 ; long add = v % mod - 1 ; v -= add ; long rev = 0 ; long tmp = v ; while ( tmp > 0 ) { rev *= 10 ; rev += tmp % 10 ; tmp \/= 10 ; } if ( rev != v ) return solve ( rev ) + add + 1 ; return solve ( v - 1 ) + add + 1 ; } }","import java . util . * ; import java . io . * ; public class A { static long [ ] POW10 = new long [ 20 ] ; static { POW10 [ 0 ] = 1 ; for ( int i = 1 ; i < POW10 . length ; i ++ ) POW10 [ i ] = POW10 [ i - 1 ] * 10 ; } public static void main ( String ... orange ) throws Exception { Scanner input = new Scanner ( System . in ) ; int numCases = input . nextInt ( ) ; for ( int n = 0 ; n < numCases ; n ++ ) { String s = input . next ( ) ; long l = Long . parseLong ( s ) ; boolean zero = l % POW10 [ s . length ( ) \/ 2 ] == 0 ; if ( zero ) { l -- ; s = l + \" \" ; } long ans = 0 ; for ( int d = 1 ; d < s . length ( ) ; d ++ ) ans += POW10 [ d \/ 2 ] + POW10 [ ( d + 1 ) \/ 2 ] - 1 ; String sb = \"0\" + s . substring ( 0 , s . length ( ) \/ 2 ) ; if ( s . length ( ) > 1 && Long . parseLong ( sb ) != POW10 [ s . length ( ) \/ 2 - 1 ] ) { ans += Long . parseLong ( \"0\" + new StringBuilder ( s . substring ( 0 , s . length ( ) \/ 2 ) ) . reverse ( ) . toString ( ) ) ; } ans += Long . parseLong ( \"0\" + s . substring ( s . length ( ) \/ 2 ) ) ; if ( zero ) ans ++ ; System . out . printf ( \" Case ▁ # % d : ▁ \" , n + 1 ) ; System . out . println ( ans ) ; } } }","import java . util . * ; public class Slam { static int [ ] basic = new int [ 15 ] ; { basic [ 1 ] = 10 ; for ( int i = 2 ; i < 15 ; i ++ ) { if ( i % 2 == 0 ) { basic [ i ] = basic [ i - 1 ] + 2 * ( int ) ( Math . pow ( 10 , i \/ 2 ) ) - 1 ; } else { basic [ i ] = basic [ i - 1 ] + ( int ) ( ( Math . pow ( 10 , i \/ 2 ) ) + ( Math . pow ( 10 , ( i + 1 ) \/ 2 ) ) - 1 ) ; } } } static boolean allzero ( String t ) { for ( char ch : t . toCharArray ( ) ) if ( ch != '0' ) return false ; return true ; } static long f ( long v ) { if ( v < 10 ) return v ; int L = ( \" \" + v ) . length ( ) ; String right = ( \" \" + v ) . substring ( L \/ 2 , L ) ; String left = ( \" \" + v ) . substring ( 0 , L \/ 2 ) ; if ( allzero ( right ) ) return 1 + f ( v - 1 ) ; long result = basic [ L - 1 ] + Integer . parseInt ( right ) + Integer . parseInt ( new StringBuilder ( left ) . reverse ( ) . toString ( ) ) ; result = Math . min ( result , basic [ L - 1 ] + ( v - ( long ) Math . pow ( 10 , L - 1 ) ) ) ; return result ; } public static void main ( String [ ] args ) { new Slam ( ) ; Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; for ( int kk = 1 ; kk <= k ; kk ++ ) System . out . println ( \" Case ▁ # \" + kk + \" : ▁ \" + f ( sc . nextLong ( ) ) ) ; } }","import java . util . * ; public class Main { public static void main ( String args [ ] ) { ( new Main ( ) ) . solve ( ) ; } void solve ( ) { Scanner cin = new Scanner ( System . in ) ; int T = cin . nextInt ( ) ; for ( int C = 1 ; C <= T ; ++ C ) { String s = cin . next ( ) ; System . out . println ( \" Case ▁ # \" + C + \" : ▁ \" + solve ( s ) ) ; } } long solve ( String s ) { if ( Long . parseLong ( s ) == 0 ) { return 0 ; } int N = s . length ( ) ; String head = s . substring ( 0 , N \/ 2 ) ; String tail = s . substring ( N \/ 2 ) ; long tmp = Long . parseLong ( tail ) ; if ( tmp == 0 ) { return 1 + solve ( \" \" + ( Long . parseLong ( s ) - 1 ) ) ; } String next = \" \" + ( Long . parseLong ( s ) - ( tmp - 1 ) ) ; String rev = rev ( next ) ; if ( Long . parseLong ( next ) == Long . parseLong ( rev ) ) { return tmp + solve ( \" \" + ( Long . parseLong ( s ) - tmp ) ) ; } return tmp + solve ( rev ) ; } String rev ( String s ) { return ( new StringBuilder ( s ) ) . reverse ( ) . toString ( ) ; } }","import java . util . * ; public class A { String solve ( Scanner sc ) { int N = sc . nextInt ( ) ; int [ ] dp = new int [ N + 1 ] ; dp [ 1 ] = 1 ; for ( int i = 2 ; i <= N ; i ++ ) { dp [ i ] = Integer . MAX_VALUE ; } for ( int i = 1 ; i < N ; i ++ ) { dp [ i + 1 ] = Math . min ( dp [ i + 1 ] , dp [ i ] + 1 ) ; int r = reverse ( i ) ; if ( r <= N ) { dp [ r ] = Math . min ( dp [ r ] , dp [ i ] + 1 ) ; } } return \" \" + dp [ N ] ; } int reverse ( int N ) { int r = 0 ; while ( N > 0 ) { r *= 10 ; r += N % 10 ; N \/= 10 ; } return r ; } public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int T = sc . nextInt ( ) ; for ( int cs = 1 ; cs <= T ; cs ++ ) { String res = new A ( ) . solve ( sc ) ; System . out . println ( \" Case ▁ # \" + cs + \" : ▁ \" + res ) ; } sc . close ( ) ; } }"],"bleu":0.31882149382472863,"rouge_l":0.3746641074856046}
{"id":163,"predictions":["import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; } public static long mod = 17352642619633L ; void run ( FastScanner in , PrintWriter out ) { int N = in . nextInt ( ) ; int K = in . nextInt ( ) ; int [ ] a = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { a [ i ] = in . nextInt ( ) ; } int [ ] b = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { b [ i ] = in . nextInt ( ) ; } for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < N ; j ++ ) { b [ i ] = in . nextInt ( ) ; } for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < N ; j ++ ) { for ( int k = 0 ; k < N ; k ++ ) { for ( int k = 0 ; k < N ; k ++ ) { for ( int k = 0 ; k < N ; k ++ ) { for ( int k = 0 ; k < N ; k ++ ) { for ( int k = 0 ; k < N ; k ++ ) { for ( int k = 0 ; k < N ; k ++ ) { for ( int k = 0 ; k < N ; k ++ ) { if ( a [ k ] < a [ k ] && b [ k ] < a [ k ] ) { b [ k ] += a [ k ] ; } } } } } } } } out . println ( \" Case # \" + ( i + 1 ) + \" : \" + out ) ; } out . close ( ) ; } }"],"references":["import java . util . * ; public class B { static int a , b , k ; static long doit ( ) { int i , j ; long l = 0 ; if ( a < 1001 && b < 1001 && k < 1001 ) { for ( i = 0 ; i < a ; i ++ ) for ( j = 0 ; j < b ; j ++ ) if ( ( i & j ) < k ) l ++ ; } return l ; } public static void main ( String arg [ ] ) throws Exception { int tc , t ; long ans ; Scanner s = new Scanner ( System . in ) ; String line = s . nextLine ( ) ; tc = Integer . parseInt ( line ) ; for ( t = 1 ; t <= tc ; t ++ ) { line = s . nextLine ( ) ; String ss [ ] = line . split ( \" ▁ + \" ) ; a = Integer . parseInt ( ss [ 0 ] ) ; b = Integer . parseInt ( ss [ 1 ] ) ; k = Integer . parseInt ( ss [ 2 ] ) ; ans = doit ( ) ; System . out . println ( \" Case ▁ # \" + t + \" : ▁ \" + ans ) ; } } }","import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; public class Lottery { static BufferedReader stdin = new BufferedReader ( new InputStreamReader ( System . in ) ) ; static StringTokenizer st = new StringTokenizer ( \" \" ) ; static String readString ( ) throws Exception { while ( ! st . hasMoreTokens ( ) ) { st = new StringTokenizer ( stdin . readLine ( ) ) ; } return st . nextToken ( ) ; } static int readInt ( ) throws Exception { return Integer . parseInt ( readString ( ) ) ; } static double readDouble ( ) throws Exception { return Double . parseDouble ( readString ( ) ) ; } public static void main ( String [ ] args ) throws Exception { int T = readInt ( ) ; for ( int t = 1 ; t <= T ; t ++ ) { System . out . printf ( \" Case ▁ # % d : ▁ \" , t ) ; solve ( ) ; } } static void solve ( ) throws Exception { int A , B , K ; A = readInt ( ) ; B = readInt ( ) ; K = readInt ( ) ; long total = 0L ; for ( int a = 0 ; a < A ; a ++ ) { for ( int b = 0 ; b < B ; b ++ ) { if ( ( a & b ) < K ) total ++ ; } } System . out . printf ( \" % d \\n \" , total ) ; } }"],"bleu":0.23105830644607278,"rouge_l":0.38549330315034896}
{"id":164,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter pw = new PrintWriter ( new OutputStreamWriter ( System . out ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int m = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( arr [ i ] > arr [ j ] ) { count ++ ; } } } pw . println ( count ) ; pw . close ( ) ; } }"],"references":["import java . util . * ; import java . io . * ; import java . math . * ; public class b { public static void main ( String [ ] args ) throws Exception { BufferedReader br = new BufferedReader ( new FileReader ( args [ 0 ] ) ) ; String str ; int numCases = Integer . parseInt ( br . readLine ( ) ) ; for ( int nCase = 1 ; nCase <= numCases ; nCase ++ ) { String [ ] sa = br . readLine ( ) . split ( \" ▁ \" ) ; int L = Integer . parseInt ( sa [ 0 ] ) ; int P = Integer . parseInt ( sa [ 1 ] ) ; int C = Integer . parseInt ( sa [ 2 ] ) ; double R = ( double ) P \/ L ; int count = 0 ; while ( R > C ) { R = Math . sqrt ( R ) ; count ++ ; } System . out . println ( \" Case ▁ # \" + nCase + \" : ▁ \" + count ) ; } br . close ( ) ; } }","package round_1B_2010 ; import java . io . File ; import java . io . FileWriter ; import java . util . Scanner ; public class LoadTestingR { public static void main ( String [ ] args ) { Scanner reader = new Scanner ( System . in ) ; try { FileWriter writer = new FileWriter ( new File ( \" D : \/ ltrout _ large . txt \" ) ) ; int t = reader . nextInt ( ) ; for ( int cc = 1 ; cc <= t ; ++ cc ) { long l = reader . nextInt ( ) ; long p = reader . nextInt ( ) ; int c = reader . nextInt ( ) ; int sum = 0 ; long now = p ; if ( l * c >= p ) { writer . write ( \" Case ▁ # \" + cc + \" : ▁ 0 \\r \\n \" ) ; } else { while ( true ) { sum ++ ; now = ( now + c - 1 ) \/ c ; if ( l * c >= now ) break ; } int result = ( int ) Math . ceil ( Math . log ( sum + 1 ) \/ Math . log ( 2 ) ) ; writer . write ( \" Case ▁ # \" + cc + \" : ▁ \" + result + \" \\r \\n \" ) ; } writer . flush ( ) ; } writer . close ( ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } } }","import java . io . FileNotFoundException ; import java . io . IOException ; import java . io . RandomAccessFile ; import java . util . LinkedList ; import java . util . List ; public class LoadTesting { public static List < Integer > ans = new LinkedList < Integer > ( ) ; public static void main ( String [ ] args ) throws IOException { ans . clear ( ) ; for ( int i = 0 ; i < 40 ; i ++ ) { ans . add ( pToTestCount ( i ) ) ; System . out . println ( i + \" : \" + pToTestCount ( i ) ) ; } RandomAccessFile in = new RandomAccessFile ( args [ 0 ] , \" r \" ) ; RandomAccessFile out = new RandomAccessFile ( args [ 1 ] , \" rw \" ) ; int caseCount = Integer . parseInt ( in . readLine ( ) ) ; for ( int i = 1 ; i <= caseCount ; i ++ ) { long L , P , C ; String temp [ ] = in . readLine ( ) . trim ( ) . split ( \" ▁ \" ) ; L = Integer . parseInt ( temp [ 0 ] ) ; P = Integer . parseInt ( temp [ 1 ] ) ; C = Integer . parseInt ( temp [ 2 ] ) ; int p = 0 ; while ( L < P ) { p ++ ; L = L * C ; } p -- ; String result = \" Case ▁ # \" ; int retCode = ans . get ( p ) ; result = result + i + \" : ▁ \" + retCode + \" \\n \" ; out . writeBytes ( result ) ; } } public static int pToTestCount ( int p ) { if ( p == 0 ) return 0 ; int ret = 1 ; return ret + pToTestCount ( p \/ 2 ) ; } }","import java . util . Scanner ; import java . util . Locale ; import java . util . Arrays ; import java . io . File ; import java . io . FileNotFoundException ; import java . io . PrintWriter ; public class Load implements Runnable { private final Scanner scanner ; private final PrintWriter printer ; private String solveSingle ( ) { int l = scanner . nextInt ( ) ; int p = scanner . nextInt ( ) ; int c = scanner . nextInt ( ) ; int mults = 0 ; long ll = l ; while ( ll * c < p ) { ll *= c ; mults ++ ; } int naive = 0 ; while ( ( 1 << naive ) <= mults ) { naive ++ ; } return String . valueOf ( naive ) ; } private void solve ( ) throws Exception { int cases = scanner . nextInt ( ) ; for ( int test = 1 ; test <= cases ; test ++ ) { printer . println ( \" Case ▁ # \" + test + \" : ▁ \" + solveSingle ( ) ) ; } } private Load ( ) throws FileNotFoundException { scanner = new Scanner ( new File ( \" b - large . in \" ) ) ; printer = new PrintWriter ( new File ( \" b - large . out \" ) ) ; } public void run ( ) { try { solve ( ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; throw new RuntimeException ( e ) ; } finally { printer . close ( ) ; } } public static void main ( String [ ] args ) throws FileNotFoundException { Locale . setDefault ( Locale . US ) ; new Thread ( new Load ( ) ) . start ( ) ; } }","import java . io . BufferedReader ; import java . io . BufferedWriter ; import java . io . FileReader ; import java . io . FileWriter ; import java . util . StringTokenizer ; public class ab { public static void main ( String args [ ] ) throws Exception { BufferedReader f = new BufferedReader ( new FileReader ( \" A . in \" ) ) ; BufferedWriter w = new BufferedWriter ( new FileWriter ( \" A . txt \" ) ) ; int t = Integer . parseInt ( f . readLine ( ) ) ; StringTokenizer g ; int l , p , c ; for ( int d = 1 ; d <= t ; d ++ ) { g = new StringTokenizer ( f . readLine ( ) ) ; l = Integer . parseInt ( g . nextToken ( ) ) ; p = Integer . parseInt ( g . nextToken ( ) ) ; c = Integer . parseInt ( g . nextToken ( ) ) ; int ans = ( int ) ( ( Math . ceil ( Math . log ( Math . ceil ( Math . log ( p \/ ( double ) l ) \/ Math . log ( c ) ) ) ) \/ Math . log ( 2 ) ) ) ; w . write ( \" Case ▁ # \" + d + \" : ▁ \" + \" \" + ans + \" \\n \" ) ; } w . close ( ) ; } }"],"bleu":0.5032516869450713,"rouge_l":0.5099312294958203}
{"id":165,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter pw = new PrintWriter ( new OutputStreamWriter ( System . out ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int m = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( b [ i ] > b [ j ] ) { count ++ ; } } } pw . println ( count ) ; pw . close ( ) ; } }"],"references":["import java . util . * ; import java . io . * ; public class D { public static void main ( String [ ] args ) throws Exception { Scanner in = new Scanner ( new File ( \" D - large . in \" ) ) ; PrintWriter out = new PrintWriter ( new FileWriter ( new File ( \" D - large . out \" ) ) ) ; int t = in . nextInt ( ) ; for ( int x = 0 ; x < t ; x ++ ) { int n = in . nextInt ( ) ; double [ ] naomi = new double [ n ] ; for ( int y = 0 ; y < n ; y ++ ) { naomi [ y ] = in . nextDouble ( ) ; } double [ ] ken = new double [ n ] ; for ( int z = 0 ; z < n ; z ++ ) { ken [ z ] = in . nextDouble ( ) ; } Arrays . sort ( naomi ) ; Arrays . sort ( ken ) ; int index = 0 ; int win1 = 0 ; for ( int a = 0 ; a < ken . length ; a ++ ) { while ( index < n && naomi [ index ] < ken [ a ] ) { index ++ ; } if ( index < n ) { win1 ++ ; index ++ ; } } index = 0 ; int win2 = 0 ; for ( int b = 0 ; b < naomi . length ; b ++ ) { while ( index < n && ken [ index ] < naomi [ b ] ) { index ++ ; win2 ++ ; } index ++ ; } out . println ( \" Case ▁ # \" + ( x + 1 ) + \" : ▁ \" + win1 + \" ▁ \" + win2 ) ; } out . close ( ) ; } }","import java . io . BufferedWriter ; import java . io . FileReader ; import java . io . FileWriter ; import java . io . IOException ; import java . util . Scanner ; public class War { public static void main ( String [ ] args ) throws IOException { Scanner sc = new Scanner ( new FileReader ( \" jam . in \" ) ) ; BufferedWriter bw = new BufferedWriter ( new FileWriter ( \" jam . out \" ) ) ; int cases ; cases = sc . nextInt ( ) ; for ( int z = 1 ; z <= cases ; z ++ ) { int n = sc . nextInt ( ) ; double [ ] nami = new double [ n ] ; double [ ] ken = new double [ n ] ; int i , j ; for ( i = 0 ; i < n ; i ++ ) nami [ i ] = sc . nextDouble ( ) ; for ( i = 0 ; i < n ; i ++ ) ken [ i ] = sc . nextDouble ( ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = i + 1 ; j < n ; j ++ ) { double t ; if ( nami [ i ] > nami [ j ] ) { t = nami [ i ] ; nami [ i ] = nami [ j ] ; nami [ j ] = t ; } if ( ken [ i ] > ken [ j ] ) { t = ken [ i ] ; ken [ i ] = ken [ j ] ; ken [ j ] = t ; } } int q1 = 0 ; int q2 = n - 1 ; int ans1 = 0 ; for ( i = 0 ; i < n ; i ++ ) if ( nami [ i ] > ken [ q1 ] ) { ans1 ++ ; q1 ++ ; } else { q2 -- ; } int ans2 = 0 ; q1 = 0 ; for ( i = 0 ; i < n ; i ++ ) { while ( q1 < n && ken [ q1 ] < nami [ i ] ) q1 ++ ; if ( q1 == n ) break ; ans2 ++ ; q1 ++ ; } bw . write ( \" Case ▁ # \" + z + \" : ▁ \" ) ; bw . write ( \" \" + ans1 + \" ▁ \" + ( n - ans2 ) + \" \\n \" ) ; } sc . close ( ) ; bw . close ( ) ; } }","import java . io . BufferedWriter ; import java . io . File ; import java . io . FileWriter ; import java . util . Arrays ; import java . util . Scanner ; public class Exe4 { public static void main ( String [ ] args ) throws Exception { Scanner input = new Scanner ( new File ( \" input \" ) ) ; BufferedWriter output = new BufferedWriter ( new FileWriter ( new File ( \" output \" ) ) ) ; int T = input . nextInt ( ) ; for ( int i = 0 ; i < T ; i ++ ) { int N = input . nextInt ( ) ; double [ ] Noemi = new double [ N ] ; double [ ] Ken = new double [ N ] ; for ( int j = 0 ; j < N ; j ++ ) { Noemi [ j ] = input . nextDouble ( ) ; } for ( int j = 0 ; j < N ; j ++ ) { Ken [ j ] = input . nextDouble ( ) ; } Arrays . sort ( Noemi ) ; Arrays . sort ( Ken ) ; int ans1 = 0 ; int ans2 = 0 ; int k ; int j ; k = 0 ; j = 0 ; while ( k < N ) { while ( k < N && Noemi [ j ] > Ken [ k ] ) { k ++ ; } if ( k < N ) { j ++ ; k ++ ; } } ans1 = N - j ; k = 0 ; j = 0 ; while ( j < N ) { while ( j < N && Noemi [ j ] < Ken [ k ] ) { j ++ ; } if ( j < N ) { j ++ ; k ++ ; } } ans2 = k ; output . write ( \" Case ▁ # \" + ( i + 1 ) + \" : ▁ \" + ans2 + \" ▁ \" + ans1 ) ; output . newLine ( ) ; output . flush ( ) ; } output . flush ( ) ; input . close ( ) ; output . close ( ) ; } }","import java . util . * ; public class D { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int inputs = in . nextInt ( ) ; for ( int caseNum = 1 ; caseNum <= inputs ; caseNum ++ ) { int blocks = in . nextInt ( ) ; double [ ] naomi = new double [ blocks ] ; double [ ] ken = new double [ blocks ] ; for ( int i = 0 ; i < blocks ; i ++ ) { naomi [ i ] = in . nextDouble ( ) ; } for ( int i = 0 ; i < blocks ; i ++ ) { ken [ i ] = in . nextDouble ( ) ; } Arrays . sort ( ken ) ; Arrays . sort ( naomi ) ; int normal = 0 ; int i = 0 ; int j = 0 ; while ( i < blocks && j < blocks ) { if ( naomi [ i ] < ken [ j ] ) { i ++ ; j ++ ; normal ++ ; } else { j ++ ; } } normal = blocks - normal ; int cheat = 0 ; i = 0 ; j = 0 ; while ( i < blocks && j < blocks ) { if ( naomi [ i ] > ken [ j ] ) { i ++ ; j ++ ; cheat ++ ; } else { i ++ ; } } System . out . printf ( \" Case ▁ # % d : ▁ % d ▁ % d \\n \" , caseNum , cheat , normal ) ; } } }","import java . util . * ; public class d { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int T = input . nextInt ( ) ; for ( int t = 0 ; t < T ; t ++ ) { System . out . printf ( \" Case ▁ # % d : ▁ \" , t + 1 ) ; int n = input . nextInt ( ) ; double [ ] as = new double [ n ] , bs = new double [ n ] ; TreeSet < Double > second = new TreeSet < Double > ( ) ; for ( int i = 0 ; i < n ; i ++ ) as [ i ] = input . nextDouble ( ) ; for ( int i = 0 ; i < n ; i ++ ) bs [ i ] = input . nextDouble ( ) ; for ( double d : bs ) second . add ( d ) ; Arrays . sort ( as ) ; Arrays . sort ( bs ) ; int res1 = 0 , res2 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { Double cur = second . ceiling ( as [ i ] ) ; if ( cur == null ) { res2 ++ ; second . remove ( second . first ( ) ) ; } else second . remove ( cur ) ; } res1 = 0 ; for ( int elim = 0 ; elim < n ; elim ++ ) { int count = 0 ; for ( int i = elim ; i < n ; i ++ ) { if ( as [ i ] > bs [ i - elim ] ) count ++ ; } res1 = Math . max ( res1 , count ) ; } System . out . println ( res1 + \" ▁ \" + res2 ) ; } } }"],"bleu":0.5634717448250123,"rouge_l":0.5462389269387276}
{"id":166,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter pw = new PrintWriter ( new OutputStreamWriter ( System . out ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int N = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ M ] ; for ( int i = 0 ; i < M ; i ++ ) { a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int [ ] b = new int [ M ] ; for ( int i = 0 ; i < M ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < M ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int ans = 0 ; for ( int i = 0 ; i < M ; i ++ ) { for ( int j = 0 ; j < M ; j ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { if ( a [ k ] > a [ k ] ) { b [ k ] -= a [ k ] ; b [ k ] -= b [ k ] ; b [ k ] -= b [ k ] ; } } } } } } } } pw . println ( ans ) ; pw . close ( ) ; } pw . close ( ) ; } }"],"references":["import java . util . Arrays ; import java . util . Scanner ; public class Space { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int T = sc . nextInt ( ) ; for ( int i = 1 ; i <= T ; i ++ ) { int L = sc . nextInt ( ) ; long t = sc . nextLong ( ) ; int N = sc . nextInt ( ) ; int C = sc . nextInt ( ) ; long time = t ; int [ ] a = new int [ 1000001 ] ; for ( int j = 0 ; j < C ; j ++ ) { a [ j ] = sc . nextInt ( ) ; } for ( int j = C ; j < N ; j ++ ) { a [ j ] = a [ j - C ] ; } int index = 0 ; while ( t > 0 && index < N ) { if ( a [ index ] > ( t \/ 2 ) ) { a [ index ] -= t \/ 2 ; t = - 1 ; } else { t -= a [ index ] * 2 ; index ++ ; } } if ( t > 0 ) { time -= t ; } if ( index < N ) { Arrays . sort ( a , index , ( int ) N ) ; for ( int j = ( int ) ( N - 1 ) ; j >= index ; j -- ) { if ( L > 0 ) { time += a [ j ] ; L -- ; } else { time += a [ j ] * 2 ; } } } System . out . println ( \" Case ▁ # \" + i + \" : ▁ \" + time ) ; } } }","import java . io . File ; import java . io . FileNotFoundException ; import java . io . PrintWriter ; import java . util . * ; public class SquareTiles { public static void main ( String args [ ] ) throws FileNotFoundException { new SquareTiles ( ) ; } public SquareTiles ( ) throws FileNotFoundException { Scanner scanner = new Scanner ( System . in ) ; PrintWriter writer = new PrintWriter ( new File ( \" C : \/ res . txt \" ) ) ; int COUNT = scanner . nextInt ( ) ; for ( int y = 1 ; y <= COUNT ; y ++ ) { int N = scanner . nextInt ( ) , M = scanner . nextInt ( ) ; char matrix [ ] [ ] = new char [ N ] [ M ] ; for ( int i = 0 ; i < N ; i ++ ) { String t = scanner . next ( ) ; for ( int j = 0 ; j < M ; j ++ ) matrix [ i ] [ j ] = t . charAt ( j ) ; } boolean impossible = false ; loop : for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < M ; j ++ ) { if ( matrix [ i ] [ j ] == ' # ' ) { if ( i < N - 1 && j < M - 1 && matrix [ i ] [ j ] == ' # ' && matrix [ i ] [ j + 1 ] == ' # ' && matrix [ i + 1 ] [ j ] == ' # ' && matrix [ i + 1 ] [ j + 1 ] == ' # ' ) { matrix [ i ] [ j ] = ' \/ ' ; matrix [ i ] [ j + 1 ] = ' \\ \\' ; matrix [ i + 1 ] [ j ] = ' \\ \\' ; matrix [ i + 1 ] [ j + 1 ] = ' \/ ' ; } else { impossible = true ; break loop ; } } } } writer . write ( String . format ( \" Case ▁ # % d : \\n \" , y ) ) ; if ( impossible ) writer . write ( \" Impossible \\n \" ) ; else { for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < M ; j ++ ) writer . write ( matrix [ i ] [ j ] ) ; writer . write ( \" \\n \" ) ; } } } writer . close ( ) ; } }","import java . io . * ; import java . util . ArrayList ; import java . util . Collections ; import java . util . List ; import java . util . Scanner ; public class BL { private static final String FILE_NAME = \" B - large \" ; public static void main ( String [ ] args ) throws IOException { BufferedReader in = new BufferedReader ( new FileReader ( FILE_NAME + \" . in \" ) ) ; Scanner scanner = new Scanner ( in ) ; BufferedWriter out = new BufferedWriter ( new FileWriter ( FILE_NAME + \" L . out \" ) ) ; int t = scanner . nextInt ( ) ; for ( int c = 1 ; c <= t ; ++ c ) { int speedN = scanner . nextInt ( ) ; long speedT = scanner . nextLong ( ) ; int n = scanner . nextInt ( ) ; int cc = scanner . nextInt ( ) ; long totalTime = 0 ; List < Long > savedTimes = new ArrayList < Long > ( ) ; int [ ] d = new int [ cc ] ; for ( int i = 0 ; i < n ; ++ i ) { int time ; if ( i < cc ) { d [ i ] = 2 * scanner . nextInt ( ) ; time = d [ i ] ; } else { time = d [ i % cc ] ; } if ( totalTime >= speedT ) { savedTimes . add ( ( long ) time \/ 2 ) ; } else if ( totalTime + time > speedT ) { savedTimes . add ( ( ( totalTime + time ) - speedT ) \/ 2 ) ; } totalTime += time ; } Collections . sort ( savedTimes ) ; int len = savedTimes . size ( ) ; for ( int i = 0 ; i < speedN && i < len ; ++ i ) { totalTime -= savedTimes . get ( len - i - 1 ) ; } StringBuilder ans = new StringBuilder ( ) ; ans . append ( \" Case ▁ # \" ) ; ans . append ( c ) ; ans . append ( \" : ▁ \" ) ; ans . append ( totalTime ) ; out . write ( ans . toString ( ) + \" \\n \" ) ; System . out . println ( ans . toString ( ) ) ; } out . close ( ) ; } }","import java . util . * ; import java . io . * ; public class Solution { public void doMain ( ) throws Exception { Scanner sc = new Scanner ( new FileReader ( \" input . txt \" ) ) ; PrintWriter pw = new PrintWriter ( new FileWriter ( \" output . txt \" ) ) ; int T = sc . nextInt ( ) ; for ( int caseNum = 1 ; caseNum <= T ; caseNum ++ ) { System . out . println ( \" case ▁ \" + caseNum ) ; int L = sc . nextInt ( ) ; long t = sc . nextLong ( ) ; int N = sc . nextInt ( ) ; int C = sc . nextInt ( ) ; long [ ] a = new long [ N ] ; for ( int i = 0 ; i < C ; i ++ ) a [ i ] = sc . nextLong ( ) ; for ( int i = C ; i < N ; i ++ ) a [ i ] = a [ i - C ] ; long res = 0 ; for ( int i = 0 ; i < N ; i ++ ) res += 4 * a [ i ] ; int pos = 0 ; while ( pos < N && 2 * a [ pos ] <= t ) { t -= 2 * a [ pos ] ; pos ++ ; } if ( pos < N ) { List < Long > ll = new ArrayList < Long > ( ) ; ll . add ( 2 * a [ pos ] - t ) ; for ( int i = pos + 1 ; i < N ; i ++ ) ll . add ( 2 * a [ i ] ) ; Collections . sort ( ll ) ; for ( int i = ll . size ( ) - 1 ; i >= 0 && i >= ll . size ( ) - L ; i -- ) { res -= ll . get ( i ) ; } } if ( res % 2 == 1 ) { System . out . println ( \" failure \" ) ; System . exit ( 0 ) ; } else pw . println ( \" Case ▁ # \" + caseNum + \" : ▁ \" + res \/ 2 ) ; } sc . close ( ) ; pw . flush ( ) ; pw . close ( ) ; } public static void main ( String [ ] args ) throws Exception { ( new Solution ( ) ) . doMain ( ) ; } }","package CodeJam ; import java . util . * ; import java . io . * ; public class B { private static String inFilename = \" B - large . in \" ; public static void main ( String [ ] args ) throws IOException { Scanner in = new Scanner ( new FileReader ( \" src \/ CodeJam \/ \" + inFilename ) ) ; PrintWriter out = new PrintWriter ( new FileWriter ( \" src \/ CodeJam \/ output . txt \" ) ) ; int T = in . nextInt ( ) ; for ( int tt = 0 ; tt < T ; tt ++ ) { long result = 0 ; int L = in . nextInt ( ) ; long t = in . nextLong ( ) ; int N = in . nextInt ( ) ; int C = in . nextInt ( ) ; int [ ] a = new int [ C ] ; for ( int i = 0 ; i < C ; i ++ ) { a [ i ] = in . nextInt ( ) ; } int [ ] d = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { d [ i ] = a [ i % C ] ; } for ( int i = 0 ; i < N ; i ++ ) { if ( result + d [ i ] * 2 <= t ) { result += d [ i ] * 2 ; } else { int left0 = ( int ) ( d [ i ] - ( t - result ) \/ 2 ) ; result = t ; int [ ] left = new int [ N - i ] ; left [ 0 ] = left0 ; for ( int j = 1 ; j < N - i ; j ++ ) { left [ j ] = d [ i + j ] ; } Arrays . sort ( left ) ; int j = left . length - 1 ; for ( int l = 0 ; l < L && j >= 0 ; l ++ ) { result += left [ j -- ] ; } for ( int k = j ; k >= 0 ; k -- ) { result += left [ k ] * 2 ; } break ; } } out . print ( \" Case ▁ # \" + ( tt + 1 ) + \" : ▁ \" + result + \" \\n \" ) ; } in . close ( ) ; out . close ( ) ; } }"],"bleu":0.45744372306257913,"rouge_l":0.5019784991420667}
{"id":167,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter pw = new PrintWriter ( new OutputStreamWriter ( System . out ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int m = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( a [ i ] > b [ j ] ) { b [ i ] = b [ j ] ; count ++ ; } } } pw . println ( count ) ; pw . close ( ) ; } }"],"references":["package c_2015 ; import java . util . Scanner ; public class B { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int kases = in . nextInt ( ) ; for ( int kas = 1 ; kas <= kases ; kas ++ ) { int K = in . nextInt ( ) ; int L = in . nextInt ( ) ; int S = in . nextInt ( ) ; String keyboard = in . next ( ) ; String target = in . next ( ) ; int [ ] keys = new int [ 26 ] ; for ( int i = 0 ; i < K ; i ++ ) keys [ keyboard . charAt ( i ) - ' A ' ] ++ ; boolean possible = true ; for ( int i = 0 ; i < L ; i ++ ) if ( keys [ target . charAt ( i ) - ' A ' ] == 0 ) possible = false ; if ( ! possible ) { System . out . println ( \" Case ▁ # \" + kas + \" : ▁ 0.0\" ) ; continue ; } int [ ] EV = new int [ S ] ; int p ; outer : for ( p = L - 1 ; p > 0 ; p -- ) { for ( int i = 0 ; i < p ; i ++ ) { if ( target . charAt ( i ) != target . charAt ( L - p + i ) ) continue outer ; } break ; } int max = ( S - p ) \/ ( L - p ) ; double prob_word = 1 ; for ( int i = 0 ; i < L ; i ++ ) { prob_word *= keys [ target . charAt ( i ) - ' A ' ] \/ ( 0.0 + K ) ; } System . out . println ( \" Case ▁ # \" + kas + \" : ▁ \" + ( max - prob_word * ( S - L + 1 ) ) ) ; } } }","import java . io . BufferedReader ; import java . io . FileReader ; import java . io . IOException ; import java . util . LinkedList ; public class TypewriterMonkey { public static void main ( String [ ] args ) throws NumberFormatException , IOException { FileReader input = new FileReader ( args [ 0 ] ) ; BufferedReader buffer = new BufferedReader ( input ) ; int max = Integer . parseInt ( buffer . readLine ( ) . trim ( ) ) ; for ( int i = 1 ; i <= max ; i ++ ) { System . out . println ( \" Case ▁ # \" + i + \" : ▁ \" + solve ( buffer ) ) ; } } public static double solve ( BufferedReader buffer ) throws NumberFormatException , IOException { String [ ] split = buffer . readLine ( ) . trim ( ) . split ( \" \\\\ s + \" ) ; int K = Integer . parseInt ( split [ 0 ] ) ; int L = Integer . parseInt ( split [ 1 ] ) ; int S = Integer . parseInt ( split [ 2 ] ) ; String keys = buffer . readLine ( ) . trim ( ) ; String target = buffer . readLine ( ) . trim ( ) ; int differentStrings = ( int ) Math . pow ( K , S ) ; int max = 0 ; int sum = 0 ; for ( int i = 0 ; i < differentStrings ; i ++ ) { int number = i ; String result = new String ( ) ; for ( int j = 0 ; j < S ; j ++ ) { result = result . concat ( \" \" + keys . charAt ( number % K ) ) ; number \/= K ; } int count = 0 ; int from = 0 ; while ( ( from = result . indexOf ( target , from ) + 1 ) > 0 ) { count ++ ; } sum += count ; if ( count > max ) max = count ; } return 1.0 * max - 1.0 * sum \/ differentStrings ; } }","import java . util . Arrays ; import java . util . Scanner ; public final class B { public static void main ( final String ... args ) { final Scanner sc = new Scanner ( System . in ) ; final int t = sc . nextInt ( ) ; for ( int i = 0 ; i < t ; ++ i ) { System . out . println ( String . format ( \" Case ▁ # % d : ▁ % .7f \" , i + 1 , testcase ( sc ) ) ) ; } } private static double testcase ( final Scanner sc ) { final int k = sc . nextInt ( ) ; final int l = sc . nextInt ( ) ; final int s = sc . nextInt ( ) ; final String keyboard = sc . next ( ) ; final String text = sc . next ( ) ; final int [ ] perm = new int [ s ] ; Arrays . fill ( perm , 0 ) ; int maxOccurences = 0 ; double sum = 0.0 ; double denominator = 0 ; do { final StringBuilder builder = new StringBuilder ( s ) ; for ( int i = 0 ; i < s ; ++ i ) { builder . append ( keyboard . charAt ( perm [ i ] ) ) ; } final String result = builder . toString ( ) ; int howMany = 0 ; for ( int i = 0 ; i < s - l + 1 ; ++ i ) { if ( result . substring ( i , i + l ) . equals ( text ) ) { ++ howMany ; } } maxOccurences = Math . max ( maxOccurences , howMany ) ; sum += howMany ; ++ denominator ; } while ( nextPermutation ( perm , k ) ) ; return maxOccurences - ( sum \/ denominator ) ; } private static boolean nextPermutation ( final int [ ] perm , final int k ) { int i = 0 ; while ( i < perm . length && perm [ i ] == k - 1 ) { perm [ i ] = 0 ; ++ i ; } if ( i == perm . length ) { return false ; } ++ perm [ i ] ; return true ; } }","import java . io . * ; import java . util . * ; public class SolutionB { static Scanner scan = new Scanner ( System . in ) ; static PrintStream out = System . out ; private static void solve ( ) { int K = scan . nextInt ( ) , L = scan . nextInt ( ) , S = scan . nextInt ( ) ; String keys = scan . next ( ) ; String word = scan . next ( ) ; int [ ] keyCounts = new int [ 26 ] ; for ( char c : keys . toCharArray ( ) ) { int k = ( int ) ( c - ' A ' ) ; keyCounts [ k ] ++ ; } int idx = 1 ; while ( idx < L ) { if ( word . substring ( 0 , L - idx ) . equals ( word . substring ( idx ) ) ) break ; ++ idx ; } int totalB = ( idx == L ) ? S \/ L : ( S - L ) \/ idx + 1 ; double percentage = 1 ; for ( char c : word . toCharArray ( ) ) { int k = ( int ) ( c - ' A ' ) ; int cnt = keyCounts [ k ] ; if ( cnt == 0 ) { out . println ( \"0.0\" ) ; return ; } percentage *= ( double ) cnt \/ K ; } out . println ( totalB - percentage * ( S - L + 1 ) ) ; } public static void main ( String [ ] args ) { int T = scan . nextInt ( ) ; for ( int i = 1 ; i <= T ; ++ i ) { out . print ( \" Case ▁ # \" + i + \" : ▁ \" ) ; solve ( ) ; } } }"],"bleu":0.48111933339649404,"rouge_l":0.45378413292351555}
{"id":168,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter pw = new PrintWriter ( new OutputStreamWriter ( System . out ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int m = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { st = new StringTokenizer ( br . readLine ( ) ) ; a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { for ( int k = 0 ; k < n ; k ++ ) { for ( int k = 0 ; k < n ; k ++ ) { for ( int k = 0 ; k < n ; k ++ ) { if ( b [ k ] > a [ k ] ) { b [ j ] = b [ k ] ; break ; } } } } count ++ ; } pw . println ( count ) ; pw . close ( ) ; } }"],"references":["import java . util . * ; import java . io . * ; public class SolB implements Runnable { public static void main ( String [ ] args ) { new Thread ( new SolB ( ) ) . start ( ) ; } @ Override public void run ( ) { try { br = new BufferedReader ( new FileReader ( FNAME + \" . in \" ) ) ; out = new PrintWriter ( FNAME + \" . out \" ) ; solve ( ) ; out . close ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } BufferedReader br ; StringTokenizer st ; PrintWriter out ; boolean eof = false ; String nextToken ( ) { while ( st == null || ! st . hasMoreTokens ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( Exception e ) { eof = true ; return \"0\" ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( nextToken ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( nextToken ( ) ) ; } long nextLong ( ) { return Long . parseLong ( nextToken ( ) ) ; } private final String FNAME = \" B - small - attempt0\" ; int [ ] dx = new int [ ] { - 1 , 0 , 0 , 1 } ; int [ ] dy = new int [ ] { 0 , - 1 , 1 , 0 } ; char [ ] dirch = new char [ ] { ' W ' , ' S ' , ' N ' , ' E ' } ; void solve ( ) { int tests = nextInt ( ) ; for ( int test = 1 ; test <= tests ; test ++ ) { out . print ( \" Case ▁ # \" + test + \" : ▁ \" ) ; int xf = nextInt ( ) ; int yf = nextInt ( ) ; String ans = \" \" ; for ( int i = 0 ; i < Math . abs ( xf ) ; i ++ ) { if ( xf < 0 ) { ans += \" EW \" ; } else { ans += \" WE \" ; } } for ( int i = 0 ; i < Math . abs ( yf ) ; i ++ ) { if ( yf < 0 ) { ans += \" NS \" ; } else { ans += \" SN \" ; } } out . println ( ans ) ; } } }","import java . io . File ; import java . io . FileWriter ; import java . io . PrintWriter ; import java . util . Scanner ; public class GCJ_2013_C2 { public static String solve ( int x , int y ) { StringBuffer s = new StringBuffer ( \" \" ) ; for ( int i = 0 ; i < Math . abs ( x ) ; i ++ ) { if ( x < 0 ) s . append ( \" EW \" ) ; else s . append ( \" WE \" ) ; } for ( int i = 0 ; i < Math . abs ( y ) ; i ++ ) { if ( y < 0 ) s . append ( \" NS \" ) ; else s . append ( \" SN \" ) ; } return s . toString ( ) ; } public static void main ( String [ ] args ) throws Exception { String fname = \" B _ small \" ; File file = new File ( fname + \" _ in . txt \" ) ; Scanner scanner = new Scanner ( file ) ; FileWriter outFile = new FileWriter ( fname + \" _ out . txt \" ) ; PrintWriter outp = new PrintWriter ( outFile ) ; int T = scanner . nextInt ( ) ; for ( int i = 1 ; i <= T ; i ++ ) { int x = scanner . nextInt ( ) ; int y = scanner . nextInt ( ) ; outp . printf ( \" Case ▁ # % d : ▁ % s \\n \" , i , solve ( x , y ) ) ; } outp . close ( ) ; } }","import java . io . * ; import java . util . StringTokenizer ; public class B { FastScanner in ; PrintWriter out ; public void solve ( ) throws IOException { int tests = in . nextInt ( ) ; for ( int testcase = 1 ; testcase <= tests ; testcase ++ ) { int x = in . nextInt ( ) ; int y = in . nextInt ( ) ; StringBuilder answer = new StringBuilder ( ) ; while ( x > 0 ) { answer . append ( \" WE \" ) ; x -- ; } while ( x < 0 ) { answer . append ( \" EW \" ) ; x ++ ; } while ( y > 0 ) { answer . append ( \" SN \" ) ; y -- ; } while ( y < 0 ) { answer . append ( \" NS \" ) ; y ++ ; } out . println ( \" Case ▁ # \" + testcase + \" : ▁ \" + answer . toString ( ) ) ; } } public void run ( ) { try { in = new FastScanner ( new File ( \" B - small - attempt0 . in \" ) ) ; out = new PrintWriter ( new File ( \" B - small . out \" ) ) ; solve ( ) ; out . close ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } class FastScanner { BufferedReader br ; StringTokenizer st ; FastScanner ( File f ) { try { br = new BufferedReader ( new FileReader ( f ) ) ; } catch ( FileNotFoundException e ) { e . printStackTrace ( ) ; } } String next ( ) { while ( st == null || ! st . hasMoreTokens ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } } public static void main ( String [ ] arg ) { new B ( ) . run ( ) ; } }","import java . io . FileReader ; import java . io . FileWriter ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . LineNumberReader ; public class B { static String result ( int x , int y ) { StringBuilder sb = new StringBuilder ( ) ; while ( x < 0 ) { x ++ ; sb . append ( \" EW \" ) ; } while ( x > 0 ) { x -- ; sb . append ( \" WE \" ) ; } while ( y < 0 ) { y ++ ; sb . append ( \" NS \" ) ; } while ( y > 0 ) { y -- ; sb . append ( \" SN \" ) ; } return sb . toString ( ) ; } static void go ( String inputFile ) throws Exception { LineNumberReader in = new LineNumberReader ( new FileReader ( inputFile ) ) ; FileWriter out = new FileWriter ( inputFile + \" . out \" ) ; int nCases = Integer . parseInt ( in . readLine ( ) ) ; for ( int c = 1 ; c <= nCases ; c ++ ) { int [ ] dims = toInts ( in . readLine ( ) ) ; String res = result ( dims [ 0 ] , dims [ 1 ] ) ; String line = \" Case ▁ # \" + c + \" : ▁ \" + res ; System . out . println ( line ) ; out . write ( line + \" \\n \" ) ; } out . close ( ) ; } static int [ ] toInts ( String s ) { String [ ] tmp = s . trim ( ) . split ( \" ▁ \" ) ; int n = tmp . length ; int [ ] res = new int [ n ] ; for ( int a = 0 ; a < n ; a ++ ) res [ a ] = Integer . parseInt ( tmp [ a ] ) ; return res ; } public static void main ( String [ ] args ) throws Exception { LineNumberReader sysIn = new LineNumberReader ( new InputStreamReader ( System . in ) ) ; String line ; while ( ( line = sysIn . readLine ( ) ) != null ) { go ( line . trim ( ) ) ; } } }"],"bleu":0.41757464346719597,"rouge_l":0.4257568809785332}
{"id":169,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . io . * ; import java . util . * ;    public class Main { public static Scanner in = new Scanner ( new BufferedReader ( new InputStreamReader ( System . in ) , 640000 ) ) ; public static PrintWriter out = new PrintWriter ( System . out ) ;    public static void solve ( ) { String s = in . next ( ) ; s += ' ; ' ;    boolean isNumber = true ; boolean first = true ; boolean leadingZero = false ; StringBuilder part = new StringBuilder ( ) ;","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . StringTokenizer ;   public class Edu600A { public static void main ( String [ ] args ) { Edu600A ob = new Edu600A ( ) ; ob . run ( ) ; }   private void run ( ) { String [ ] sin = nextLine ( ) . split ( \" [ , ; ] \" , - 1 ) ; StringBuilder sw = new StringBuilder ( ) ; StringBuilder sn = new StringBuilder ( ) ; boolean wb = false ; boolean nb = false ; sw . append ( ' \" ' ) ; sn . append ( ' \" ' ) ; for ( int i = 0 ; i < sin . length ; i ++ ) { if ( sin [ i ] . equals ( \"0\" ) || sin [ i ] . matches ( \" [ 1-9 ] \\\\ d * \" ) ) { if ( ! nb ) { nb = true ; sn . append ( sin [ i ] ) ; } else sn . append ( \" , \" + sin [ i ] ) ; } else { if ( ! wb ) { wb = true ; sw . append ( sin [ i ] ) ; } else { sw . append ( \" , \" + sin [ i ] ) ; } } } sw . append ( ' \" ' ) ; sn . append ( ' \" ' ) ; out . println ( nb ? sn : \" - \" ) ; out . println ( wb ? sw : \" - \" ) ; out . close ( ) ; }  ","import java . io . * ; import java . util . * ;    public class Main { public static Scanner in = new Scanner ( new BufferedReader ( new InputStreamReader ( System . in ) , 640000 ) ) ; public static PrintWriter out = new PrintWriter ( System . out ) ;    public static void solve ( ) { String s = in . next ( ) ; s += ' ; ' ;    boolean isNumber = true ; boolean first = true ; boolean leadingZero = false ; StringBuilder part = new StringBuilder ( ) ;"],"bleu":0.28100031799323155,"rouge_l":0.3794310287101364}
{"id":170,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . Scanner ;   public class A1207 { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int t = scanner . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int r = 0 ; int b = scanner . nextInt ( ) , p = scanner . nextInt ( ) , f = scanner . nextInt ( ) ; int h = scanner . nextInt ( ) , c = scanner . nextInt ( ) ; if ( h > c ) { if ( b \/ 2 >= p ) { r = p * h ; b = b \/ 2 - p ; if ( b > f ) { r += f * c ; } else { r += b * c ; } } else { r = b \/ 2 * h ; } } else { if ( b \/ 2 >= f ) { r = f * c ; b = b \/ 2 - f ; if ( b > p ) { r += p * h ; } else { r += b * h ; } } else { r = b \/ 2 * c ; } } System . out . println ( r ) ; } } }","import java . util . * ;   public class questionCF {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int b = sc . nextInt ( ) ; int p = sc . nextInt ( ) ; int f = sc . nextInt ( ) ; int h = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int price = 0 ; if ( c > h ) { while ( f -- > 0 ) { if ( b >= 2 ) { b = b - 2 ; price += c ; } else break ; } while ( p -- > 0 ) { if ( b >= 2 ) { b = b - 2 ; price += h ; } else break ; } System . out . println ( price ) ; } else { while ( p -- > 0 ) { if ( b >= 2 ) { b = b - 2 ; price += h ; } else break ; } while ( f -- > 0 ) { if ( b >= 2 ) { b = b - 2 ; price += c ; } else break ; } System . out . println ( price ) ; } } } }","import java . util . Scanner ;   public class ThereAreTwoTypesOfBurgers {   public static void main ( String args [ ] ) { Scanner scan = new Scanner ( System . in ) ; int t = scan . nextInt ( ) ; while ( t -- > 0 ) { int b = scan . nextInt ( ) ; int p = scan . nextInt ( ) ; int f = scan . nextInt ( ) ; int h = scan . nextInt ( ) ; int c = scan . nextInt ( ) ; if ( h > c ) { int k = Math . min ( b \/ 2 , p ) ; b -= k * 2 ; k *= h ; k += Math . min ( b \/ 2 , f ) * c ; System . out . println ( k ) ; } else { int k = Math . min ( b \/ 2 , f ) ; b -= k * 2 ; k *= c ;   k += Math . min ( b \/ 2 , p ) * h ; System . out . println ( k ) ; } } }   }"],"bleu":0.015831445443051994,"rouge_l":0.17088749439713136}
{"id":171,"predictions":["import java . io . * ; import java . util . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) throws java . lang . Exception { Reader pm = new Reader ( ) ;"],"references":["import java . util . * ;   public class Absolutezero { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; String t = sc . next ( ) ; String [ ] s1 = s . split ( \" : \" ) ; String [ ] t1 = t . split ( \" : \" ) ; int h1 = Integer . parseInt ( s1 [ 0 ] ) ; int m1 = Integer . parseInt ( s1 [ 1 ] ) ;   int h2 = Integer . parseInt ( t1 [ 0 ] ) ; int m2 = Integer . parseInt ( t1 [ 1 ] ) ;  ","import java . util . * ;   public class Practise {   static int [ ] [ ] dp ;    public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; String s1 = sc . next ( ) ; int a = Integer . parseInt ( s . substring ( 0 , 2 ) ) ; int b = Integer . parseInt ( s . substring ( 3 ) ) ; int aa = Integer . parseInt ( s1 . substring ( 0 , 2 ) ) ; int bb = Integer . parseInt ( s1 . substring ( 3 ) ) ; int mm = 0 ; int hh = 0 ;","import java . util . * ;   public class Practise {   static int [ ] [ ] dp ;    public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; String s1 = sc . next ( ) ; int a = Integer . parseInt ( s . substring ( 0 , 2 ) ) ; int b = Integer . parseInt ( s . substring ( 3 ) ) ; int aa = Integer . parseInt ( s1 . substring ( 0 , 2 ) ) ; int bb = Integer . parseInt ( s1 . substring ( 3 ) ) ; int mm = 0 ; int hh = 0 ;","import java . util . Scanner ;   public class Main { public static void main ( String [ ] args ) {   Scanner sc = new Scanner ( System . in ) ;   String timeNow = sc . next ( ) ; String timeLast = sc . next ( ) ; String [ ] strArr1 = timeNow . split ( \" : \" ) ; int h1 = Integer . parseInt ( strArr1 [ 0 ] ) ; int m1 = Integer . parseInt ( strArr1 [ 1 ] ) ; String [ ] strArr2 = timeLast . split ( \" : \" ) ; int h2 = Integer . parseInt ( strArr2 [ 0 ] ) ; int m2 = Integer . parseInt ( strArr2 [ 1 ] ) ; int timeSleep = ( h1 * 60 + m1 ) - ( h2 * 60 + m2 ) ; if ( timeSleep < 0 ) { timeSleep += 24 * 60 ; }   int h3 = timeSleep \/ 60 ; int m3 = timeSleep % 60 ; System . out . print ( h3 >= 10 ? h3 : \"0\" + h3 ) ; System . out . print ( \" : \" ) ; System . out . print ( m3 >= 10 ? m3 : \"0\" + m3 ) ; } }","import java . util . * ;   public class Absolutezero { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; String t = sc . next ( ) ; String [ ] s1 = s . split ( \" : \" ) ; String [ ] t1 = t . split ( \" : \" ) ; int h1 = Integer . parseInt ( s1 [ 0 ] ) ; int m1 = Integer . parseInt ( s1 [ 1 ] ) ;   int h2 = Integer . parseInt ( t1 [ 0 ] ) ; int m2 = Integer . parseInt ( t1 [ 1 ] ) ;  "],"bleu":0.0982178670107864,"rouge_l":0.2631184407796102}
{"id":172,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException {"],"references":["import java . lang . * ; import java . util . * ;   public class Abhishek {   public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int m = sc . nextInt ( ) ; int [ ] g = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { g [ i ] = sc . nextInt ( ) ; } Arrays . sort ( b ) ; Arrays . sort ( g ) ; int i = 0 , j = 0 , count = 0 ; while ( i < n && j < m ) { if ( Math . abs ( b [ i ] - g [ j ] ) <= 1 ) { count ++ ; i ++ ; j ++ ; } else if ( b [ i ] < g [ j ] ) { i ++ ; } else { j ++ ; } } System . out . println ( count ) ;   }   }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Arrays ;   public class CF489B { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int n = Integer . parseInt ( br . readLine ( ) ) ; int [ ] a = Arrays . stream ( br . readLine ( ) . split ( \" \\\\ s + \" ) ) . mapToInt ( Integer :: parseInt ) . sorted ( ) . toArray ( ) ; int m = Integer . parseInt ( br . readLine ( ) ) ; int [ ] b = Arrays . stream ( br . readLine ( ) . split ( \" \\\\ s + \" ) ) . mapToInt ( Integer :: parseInt ) . sorted ( ) . toArray ( ) ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( Math . abs ( a [ i ] - b [ j ] ) <= 1 ) { b [ j ] = 102 ; ans ++ ; break ; } } } System . out . print ( ans ) ; } }","import static java . lang . Math . abs ; import java . util . Arrays ; import java . util . Scanner ;   public class Codeforces {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int siz1 = sc . nextInt ( ) ; int boys [ ] = new int [ siz1 ] ; for ( int i = 0 ; i < siz1 ; i ++ ) { boys [ i ] = sc . nextInt ( ) ; } int siz2 = sc . nextInt ( ) ; int girls [ ] = new int [ siz2 ] ; for ( int i = 0 ; i < siz2 ; i ++ ) { girls [ i ] = sc . nextInt ( ) ; } Arrays . sort ( boys ) ; Arrays . sort ( girls ) ; int [ ] [ ] dp = new int [ siz1 ] [ siz2 ] ; for ( int i = 0 ; i < siz1 ; i ++ ) { for ( int j = 0 ; j < siz2 ; j ++ ) { if ( i - 1 >= 0 && j - 1 >= 0 ) dp [ i ] [ j ] = Math . max ( dp [ i ] [ j ] , dp [ i - 1 ] [ j - 1 ] ) ; if ( abs ( boys [ i ] - girls [ j ] ) <= 1 ) dp [ i ] [ j ] ++ ; if ( i - 1 >= 0 ) dp [ i ] [ j ] = Math . max ( dp [ i ] [ j ] , dp [ i - 1 ] [ j ] ) ; if ( j - 1 >= 0 ) dp [ i ] [ j ] = Math . max ( dp [ i ] [ j ] , dp [ i ] [ j - 1 ] ) ; } } System . out . println ( dp [ siz1 - 1 ] [ siz2 - 1 ] ) ; } }","import java . util . * ;   public class Example { static int [ ] dp ;   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ;","import java . util . Arrays ; import java . util . Scanner ;   public class solution { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int boy = sc . nextInt ( ) ; int [ ] boys = new int [ boy ] ; for ( int i = 0 ; i < boy ; i ++ ) { boys [ i ] = sc . nextInt ( ) ; } int girl = sc . nextInt ( ) ; int [ ] girls = new int [ girl ] ; for ( int i = 0 ; i < girl ; i ++ ) { girls [ i ] = sc . nextInt ( ) ; } int ans = 0 ; Arrays . sort ( boys ) ; Arrays . sort ( girls ) ; for ( int i = 0 , j = 0 ; i < boy && j < girl ; ) { if ( Math . abs ( boys [ i ] - girls [ j ] ) <= 1 ) { ans ++ ; i ++ ; j ++ ; } else if ( boys [ i ] < girls [ j ] ) { i ++ ; } else j ++ ; } System . out . println ( ans ) ; } }"],"bleu":0.6863276449340052,"rouge_l":0.6226759022967553}
{"id":173,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . Scanner ;   public class Vsa {   public static void main ( String [ ] args ) {   Scanner in = new Scanner ( System . in ) ;   int n = in . nextInt ( ) ; System . out . println ( ( n % 2 == 0 ) ? \" Mahmoud \" : \" Ehab \" ) ;   } }","import java . util . Scanner ;   public class Main {   public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) ; if ( n % 2 == 0 ) System . out . println ( \" Mahmoud \" ) ; else System . out . println ( \" Ehab \" ) ;    }","import java . io . * ; import java . util . StringTokenizer ;","import java . util . * ; public class P2 {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; if ( ( n & 1 ) == 0 ) { System . out . println ( \" Mahmoud \" ) ; } else { System . out . println ( \" Ehab \" ) ; } } }","import java . util . Scanner ;   public class Singleton_Pattern { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int i = sc . nextInt ( ) ; if ( i % 2 == 0 ) System . out . println ( \" Mahmoud \" ) ; else System . out . println ( \" Ehab \" ) ; } }"],"bleu":0.2915638383035485,"rouge_l":0.5446428571428571}
{"id":174,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a [ ] = new int [ n ] ; int b [ ] = new int [ n ] ; int c [ ] = new int [ n ] ; int d [ ] = new int [ 2 ] ; boolean num [ ] = new boolean [ n + 1 ] ;   for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; c [ i ] = a [ i ] ; num [ i ] = false ; }   for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; }   int flag = 0 ;   for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] != b [ i ] ) { d [ flag ] = i ; flag ++ ; } else { num [ a [ i ] ] = true ; num [ b [ i ] ] = true ; } }   if ( flag == 2 ) { if ( num [ a [ d [ 1 ] ] ] || num [ b [ d [ 0 ] ] ] ) { a [ d [ 1 ] ] = b [ d [ 1 ] ] ; } else { a [ d [ 0 ] ] = b [ d [ 0 ] ] ; } for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( a [ i ] + \" ▁ \" ) ; } } if ( flag == 1 ) { for ( int i = 1 ; i <= n ; i ++ ) { if ( num [ i ] != true ) { a [ d [ 0 ] ] = i ; } } for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( a [ i ] + \" ▁ \" ) ; } }    }   }","import java . util . * ; import java . util . Scanner ; import java . io . * ; import javax . lang . model . util . ElementScanner6 ; import static java . lang . System . out ; import java . util . Stack ; import java . util . Queue ; import java . util . LinkedList ;   public class B814 {   public static void main ( String args [ ] ) {   FastReader in = new FastReader ( ) ; PrintWriter pr = new PrintWriter ( new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ) ; int tc = 1 ;","import java . io . * ; import java . util . * ;   public class Solution { public static void main ( String [ ] args ) throws Exception { int n = in . readInt ( ) ; int [ ] A = in . readA ( ) ; int [ ] B = in . readA ( ) ; int [ ] ans = new int [ n ] ;   int d1 = - 1 , d2 = - 1 , xor = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( ( A [ i ] ^ B [ i ] ) == 0 ) ans [ i ] = A [ i ] ; else { if ( d1 == - 1 ) { d1 = i ; } else { d2 = i ; } } } for ( int i = 0 ; i < n ; i ++ ) { xor = xor ^ ans [ i ] ^ ( i + 1 ) ; } if ( d1 != - 1 && d2 != - 1 ) {"],"bleu":0.14389531934454347,"rouge_l":0.368141916605706}
{"id":175,"predictions":["import java . util . * ; import java . io . * ; import java . math . BigInteger ; import java . text . * ; public class Main { static long mod = 1000_000_007 ; static long mod1 = 998244353 ; static boolean fileIO = false ; static boolean memory = true ; static FastScanner f ; static PrintWriter pw ; static double eps = ( double ) 1e-6 ; static long oo = Long . MAX_VALUE ;"],"references":["import java . util . Scanner ;   public class TrafficLights {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int l = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int v = sc . nextInt ( ) ; int g = sc . nextInt ( ) ; int r = sc . nextInt ( ) ;   double ans = l * 1.0 \/ v ; double v1 = ( d * 1.0 \/ v ) % ( g + r ) ; if ( v1 >= g ) ans += g + r - v1 ;   System . out . println ( ans ) ; } }","import java . util . * ; import java . io . * ;    public class Forces {   public static PrintWriter cout ;   public static int [ ] dp ; public static void main ( String ... arg ) throws IOException {","import java . util . * ; import java . io . * ; import java . lang . * ; import java . util . stream . Collectors ;   public class B { private static void insertInMap ( Map < String , Long > map , String names ) {   if ( ! map . containsKey ( names ) ) { map . put ( names , 1l ) ; } else { map . put ( names , map . get ( names ) + 1l ) ; }   }   public static void main ( String [ ] args ) throws Exception { try {   InputStreamReader isr = new InputStreamReader ( System . in ) ; BufferedReader br = new BufferedReader ( isr ) ; String str [ ] = br . readLine ( ) . split ( \" ▁ \" ) ; int l = Integer . parseInt ( str [ 0 ] ) ; int d = Integer . parseInt ( str [ 1 ] ) ; int v = Integer . parseInt ( str [ 2 ] ) ; int g = Integer . parseInt ( str [ 3 ] ) ; int r = Integer . parseInt ( str [ 4 ] ) ;   if ( d % ( ( g + r ) * v ) >= g * v ) { l += ( g + r ) * v - d % ( ( g + r ) * v ) ; } System . out . println ( l * 1.0 \/ v ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } } }     ","import java . io . * ; import java . util . * ; import java . util . HashSet ; import java . util . Scanner ; import java . util . Set ; import java . util . ArrayList ; import java . util . Collections ; import java . util . HashMap ; import java . util . Map ; import java . text . DecimalFormat ; import java . lang . Math ; import java . util . Iterator ; public class b98 { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; double l = sc . nextDouble ( ) ; double d = sc . nextDouble ( ) ; double v = sc . nextDouble ( ) ; int g = sc . nextInt ( ) ; int r = sc . nextInt ( ) ; double d1 = d \/ v ; int [ ] t = new int [ ( int ) l + 5 + g + r ] ; for ( int i = 1 ; i < t . length ; i ++ ) { if ( i % ( g + r ) == 0 ) { t [ i ] = 0 ; } else if ( i % ( g + r ) <= g ) { t [ i ] = 1 ; } else { t [ i ] = 0 ; } } int t1 = ( int ) d1 + 1 ; if ( t [ t1 ] != 1 ) { while ( t [ t1 ] != 1 ) { t1 ++ ; } d1 += t1 - 1 - d1 ; } d1 += ( l - d ) \/ v ; System . out . println ( d1 ) ; } }","import java . util . * ; import java . lang . * ; import java . io . * ;   public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) {"],"bleu":0.35877602868524394,"rouge_l":0.6338928856914469}
{"id":176,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . StringTokenizer ;   public class NiceTable {   static int [ ] [ ] bestAns ; static int leastChanged ; static int w , h ; public static void main ( String [ ] args ) { FastScanner fs = new FastScanner ( ) ; h = fs . nextInt ( ) ; w = fs . nextInt ( ) ; int [ ] [ ] board = new int [ w ] [ h ] ; String letters = \" ACGT \" ; for ( int y = 0 ; y < h ; y ++ ) { String next = fs . next ( ) ; for ( int x = 0 ; x < w ; x ++ ) { board [ x ] [ y ] = letters . indexOf ( next . charAt ( x ) + \" \" ) ; } } leastChanged = w * h ; solveHLines ( board , 0 , 1 ) ; solveHLines ( board , 0 , 2 ) ; solveHLines ( board , 0 , 3 ) ; solveHLines ( board , 1 , 2 ) ; solveHLines ( board , 1 , 3 ) ; solveHLines ( board , 2 , 3 ) ; solveVLines ( board , 0 , 1 ) ; solveVLines ( board , 0 , 2 ) ; solveVLines ( board , 0 , 3 ) ; solveVLines ( board , 1 , 2 ) ; solveVLines ( board , 1 , 3 ) ; solveVLines ( board , 2 , 3 ) ; PrintWriter out = new PrintWriter ( System . out ) ; for ( int y = 0 ; y < h ; y ++ ) { for ( int x = 0 ; x < w ; x ++ ) { char toPrint = letters . charAt ( bestAns [ x ] [ y ] ) ; out . print ( toPrint ) ; } out . println ( ) ; } out . close ( ) ;"],"bleu":0.0024356531019548923,"rouge_l":0.18512274076072294}
{"id":177,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["   import java . io . * ; import java . util . * ; public class pt { public static void main ( String [ ] args ) { FastReader sc = new FastReader ( ) ; PrintWriter out = new PrintWriter ( System . out ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int a2 = sc . nextInt ( ) ; int b2 = sc . nextInt ( ) ; int c2 = sc . nextInt ( ) ; if ( a == 0 && b == 0 && a2 == 0 && b2 == 0 ) { if ( c == 0 && c2 == 0 ) out . println ( \" - 1\" ) ; else out . println ( \"0\" ) ; } else if ( a * b2 == b * a2 ) { if ( c * b2 == b * c2 && c * a2 == a * c2 ) out . println ( \" - 1\" ) ; else out . println ( \"0\" ) ; } else { out . println ( \"1\" ) ; }   out . flush ( ) ; }   static class FastReader { BufferedReader br ; StringTokenizer st ; public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }","import java . io . * ; import java . util . * ;","import java . util . * ; public class Problem21B { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int a1 = sc . nextInt ( ) ; int b1 = sc . nextInt ( ) ; int c1 = sc . nextInt ( ) ; int a2 = sc . nextInt ( ) ; int b2 = sc . nextInt ( ) ; int c2 = sc . nextInt ( ) ; if ( ( a1 == 0 && b1 == 0 && c1 != 0 ) || ( a2 == 0 && b2 == 0 && c2 != 0 ) ) { System . out . println ( 0 ) ; } else if ( ( a1 * b2 != a2 * b1 ) ) { System . out . println ( 1 ) ; } else if ( ( a1 * b2 == a2 * b1 ) && ( a1 * c2 == a2 * c1 ) && ( b1 * c2 == b2 * c1 ) ) { System . out . println ( - 1 ) ; } else System . out . println ( 0 ) ; } }"],"bleu":0.317172186076442,"rouge_l":0.7139855942376951}
{"id":178,"predictions":["import java . util . * ; import java . io . * ; import java . math . * ; public class Main { static PrintWriter out ; static Reader in ; public static void main ( String [ ] args ) throws IOException {"],"references":["import java . util . * ; import java . io . * ;   public class Codeforces {   InputStream is ; PrintWriter out ; String INPUT = \" \" ;  ","import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;  "],"bleu":0.5223872236712032,"rouge_l":0.5479041916167664}
{"id":179,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException {"],"references":["import java . util . * ; import java . io . * ; public class EdE { static long [ ] mods = { 1000000007 , 998244353 , 1000000009 } ; static long mod = mods [ 0 ] ; public static MyScanner sc ; public static PrintWriter out ; public static void main ( String [ ] omkar ) throws Exception {","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;   public class Good_Str { static class FastReader { BufferedReader br ; StringTokenizer st ; public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } } public static void main ( String [ ] args ) { FastReader in = new FastReader ( ) ; int t = in . nextInt ( ) ; while ( t -- > 0 ) { int n = in . nextInt ( ) ; String s = in . nextLine ( ) ; if ( s . charAt ( 0 ) == ' > ' || s . charAt ( n - 1 ) == ' < ' ) { System . out . println ( 0 ) ; } else { int c = 0 ; int i = 0 ; while ( i < n && s . charAt ( i ) == ' < ' ) { i ++ ; c ++ ; } int j = s . length ( ) - 1 ; int c1 = 0 ; while ( j >= 0 && s . charAt ( j ) == ' > ' ) { j -- ; c1 ++ ; }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;   public class pre450 { static class FastReader { BufferedReader br ; StringTokenizer st ;   public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; }   String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   long nextLong ( ) { return Long . parseLong ( next ( ) ) ; }   double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; }   String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } public static void main ( String args [ ] ) throws Exception { FastReader obj = new FastReader ( ) ; int tc = obj . nextInt ( ) ; while ( tc -- != 0 ) { int n = obj . nextInt ( ) ; StringBuilder s = new StringBuilder ( obj . next ( ) ) ; int count = n - 1 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == ' > ' || s . charAt ( n - i - 1 ) == ' < ' ) count = Math . min ( count , i ) ; } System . out . println ( count ) ; } } }"],"bleu":0.2826502222011462,"rouge_l":0.515102305943488}
{"id":180,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ; import java . io . * ; import java . math . * ;   public class Main { static PrintWriter pw = new PrintWriter ( System . out ) ;   public static void main ( String [ ] args ) throws IOException , InterruptedException { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; w : while ( t -- > 0 ) { int n = sc . nextInt ( ) , m = sc . nextInt ( ) ; char [ ] s = sc . next ( ) . toCharArray ( ) , f = sc . next ( ) . toCharArray ( ) ; pair [ ] q = new pair [ m ] ; for ( int i = 0 ; i < q . length ; i ++ ) { q [ i ] = new pair ( sc . nextInt ( ) , sc . nextInt ( ) ) ; } int N = 1 ; while ( N < n ) N <<= 1 ;","import java . util . * ; import java . util . Map . Entry ;   import java . math . * ; import java . io . * ;   public class Main { public static void main ( String [ ] args ) throws FileNotFoundException { InputReader in = new InputReader ( System . in ) ;"],"bleu":0.3703030803072799,"rouge_l":0.5331038135593221}
{"id":181,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException {"],"references":["import java . util . * ; import java . io . * ; public class Main2 { static class FastReader { BufferedReader br ; StringTokenizer st ; public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } static FastReader sc = new FastReader ( ) ; static PrintWriter out = new PrintWriter ( System . out ) ; public static void main ( String [ ] args ) { int z = 1 ;","import java . util . * ; import java . io . * ; public class Main2 { static class FastReader { BufferedReader br ; StringTokenizer st ; public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } static FastReader sc = new FastReader ( ) ; static PrintWriter out = new PrintWriter ( System . out ) ; public static void main ( String [ ] args ) { int z = 1 ;","import java . util . * ; import java . io . * ;   public class New_Year_Permutation {   static class FastReader { BufferedReader br ; StringTokenizer st ;   public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; }   String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   long nextLong ( ) { return Long . parseLong ( next ( ) ) ; }   double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; }   String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; }   }   public static void shuffle ( int [ ] a ) { Random r = new Random ( ) ;   for ( int i = 0 ; i <= a . length - 2 ; i ++ ) { int j = i + r . nextInt ( a . length - i ) ;   swap ( a , i , j ) ; } }   public static void swap ( int [ ] a , int i , int j ) { int temp = a [ i ] ; a [ i ] = a [ j ] ; a [ j ] = temp ; }   public static void main ( String [ ] args ) {","import java . util . * ; import java . io . * ; public class Solution { public static class Suffix implements Comparable < Suffix > { int index ; int rank ; int next ; public Suffix ( int ind , int r , int nr ) { index = ind ; rank = r ; next = nr ; }"],"bleu":0.29263048848509343,"rouge_l":0.42595477251973995}
{"id":182,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;   public class Maximizer { public static void main ( String [ ] args ) throws IOException { BufferedReader reader = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( reader . readLine ( ) ) ;   String num = st . nextToken ( ) ; int n = num . length ( ) ; char [ ] a = num . toCharArray ( ) ;   int k = Integer . parseInt ( st . nextToken ( ) ) ;   for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( k == 0 ) break ; int max = i ;   for ( int j = i + 1 ; j < i + k + 1 && j < n ; j ++ ) if ( a [ j ] > a [ max ] ) max = j ;   int ok = max - i ; if ( ok > 0 ) { char x = a [ max ] ; while ( max > i ) { a [ max ] = a [ max - 1 ] ; max -- ; } a [ max ] = x ; k -= ok ; } }   StringBuilder ans = new StringBuilder ( ) ;   for ( int i = 0 ; i < n ; i ++ ) { ans . append ( a [ i ] ) ; }   System . out . println ( ans ) ; } }","import java . util . Arrays ; import java . util . Scanner ;   public class CF435_D2_B { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String num = scanner . next ( ) ; int k = scanner . nextInt ( ) ; for ( int i = 0 ; i < num . length ( ) && k > 0 ; i ++ ) { int m = maxIndex ( num . substring ( i , Math . min ( i + k + 1 , num . length ( ) ) ) . toCharArray ( ) ) + i ; num = num . substring ( 0 , i ) + num . charAt ( m ) + num . substring ( i , m ) + num . substring ( m + 1 ) ; k = k - ( m - i ) ; } System . out . println ( num ) ; }   public static int maxIndex ( char [ ] arr ) { char max = arr [ 0 ] ; int i = 0 ; for ( int j = 1 ; j < arr . length ; j ++ ) { if ( arr [ j ] > max ) { max = arr [ j ] ; i = j ; } } return i ; } }"],"bleu":0.020462717718365712,"rouge_l":0.2213060686015831}
{"id":183,"predictions":["import java . io . * ; import java . util . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) throws java . lang . Exception { Reader pm = new Reader ( ) ;"],"references":["import java . util . Scanner ;   public class Balanced_Matrix {   public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ;   int t = in . nextInt ( ) ; int n ; while ( t -- != 0 ) { n = in . nextInt ( ) ; if ( n % 4 != 0 ) { System . out . println ( \" NO \" ) ; } else { System . out . println ( \" YES \" ) ; for ( int i = 2 ; i <= n ; i += 2 ) { System . out . print ( i + \" ▁ \" ) ; }   for ( int i = 1 ; i < n - 1 ; i += 2 ) { System . out . print ( i + \" ▁ \" ) ; } System . out . println ( n + n \/ 2 - 1 ) ; }   }   }   }","  import java . util . Scanner ;   public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ;   int t = in . nextInt ( ) ;   while ( t > 0 ) { t -- ; int n = in . nextInt ( ) ; if ( n % 4 != 0 ) System . out . println ( \" NO \" ) ; else { System . out . println ( \" YES \" ) ; for ( int i = 2 ; i <= n ; i += 2 ) System . out . print ( i + \" ▁ \" ) ; for ( int i = 1 ; i < n - 1 ; i += 2 ) System . out . print ( i + \" ▁ \" ) ;   System . out . println ( n + n \/ 2 - 1 ) ; }   } }","import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t > 0 ) { int n = sc . nextInt ( ) ; if ( n % 4 != 0 ) { System . out . println ( \" NO \" ) ; } else { System . out . println ( \" YES \" ) ; int e = 2 , o = 1 , evensum = 0 , oddsum = 0 ; for ( int i = 0 ; i < n \/ 2 ; i ++ ) { System . out . print ( e + \" ▁ \" ) ; evensum += e ; e = e + 2 ; } for ( int i = 0 ; i < ( n \/ 2 ) - 1 ; i ++ ) { System . out . print ( o + \" ▁ \" ) ; oddsum += o ; o = o + 2 ; } System . out . println ( evensum - oddsum ) ; } t -- ; } } }","import java . util . * ; import java . io . * ; public class Main { static boolean flag [ ] ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; while ( n -- > 0 ) { int x = sc . nextInt ( ) ; if ( ( x \/ 2 ) % 2 == 1 ) { System . out . println ( \" NO \" ) ; } else { System . out . println ( \" YES \" ) ; int eventot = 0 ; for ( int i = 2 ; i <= x ; i += 2 ) { System . out . print ( i + \" ▁ \" ) ; eventot += i ; } int oddtot = 0 ; for ( int i = 1 ; i < x - 2 ; i += 2 ) { System . out . print ( i + \" ▁ \" ) ; oddtot += i ; } System . out . println ( eventot - oddtot ) ; } } } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . OutputStream ; import java . io . PrintWriter ; import java . util . StringTokenizer ;   public class Main {   public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; TaskB solver = new TaskB ( ) ; solver . solve ( in , out ) ; out . close ( ) ; }   static class TaskB { public void solve ( InputReader in , PrintWriter out ) { int t = in . nextInt ( ) ; while ( t -- != 0 ) { int n = in . nextInt ( ) ; if ( ( n \/ 2 & 1 ) == 1 ) out . println ( \" NO \" ) ; else { out . println ( \" YES \" ) ; int sta = 2 ; for ( int i = 1 ; i <= n \/ 2 ; i ++ ) { out . print ( sta + \" ▁ \" ) ; sta += 2 ; } sta = 1 ; for ( int i = 1 ; i <= n \/ 2 ; i ++ ) { out . print ( sta + \" ▁ \" ) ; sta += 2 ; if ( i == n \/ 2 - 1 ) sta += n \/ 2 ; } out . println ( ) ; } } } }   static class InputReader { public BufferedReader reader ; public StringTokenizer tokenizer ;   public InputReader ( InputStream stream ) { reader = new BufferedReader ( new InputStreamReader ( stream ) ) ; tokenizer = null ; }   public String next ( ) { while ( tokenizer == null || ! tokenizer . hasMoreElements ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( ) ; }   public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } } }"],"bleu":0.06214270280308411,"rouge_l":0.2440453334984827}
{"id":184,"predictions":["import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;"],"references":["import java . util . * ; import java . lang . * ; import java . io . * ; public class Choosing_Symbol_Pairs {   public static void main ( String [ ] args ) throws java . lang . Exception { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; String s = br . readLine ( ) ; Map < Character , Integer > m = new HashMap < > ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( m . containsKey ( s . charAt ( i ) ) ) m . put ( s . charAt ( i ) , m . get ( s . charAt ( i ) ) + 1 ) ; else m . put ( s . charAt ( i ) , 1 ) ; } long ans = 0 ; for ( Character c : m . keySet ( ) ) ans += Math . pow ( m . get ( c ) , 2 ) ; System . out . println ( ans ) ; }   }","import java . util . * ; public class j2 { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; String str = sc . next ( ) ; char ch [ ] = str . toCharArray ( ) ; Arrays . sort ( ch ) ; int n = ch . length ; long ans = n ; long tmp = 0 ; for ( int i = 1 ; i < n ; i ++ ) { if ( ch [ i ] == ch [ i - 1 ] ) tmp ++ ; else { long k = ( tmp * ( tmp + 1 ) \/ 2 ) ; ans += ( 2 * k ) ; tmp = 0 ; }   } long k = ( tmp * ( tmp + 1 ) \/ 2 ) ; ans += ( 2 * k ) ; System . out . println ( ans ) ;   }   }","import java . math . BigInteger ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collections ; import java . util . HashMap ; import java . util . Iterator ; import java . util . List ; import java . util . Scanner ; public class SequenceWithDigits { static Scanner sc = new Scanner ( System . in ) ; static List < Integer > C ; static List < Integer > B ; public static void main ( String [ ] args ) { String s = sc . next ( ) ; HashMap < Character , Long > map = new HashMap < > ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { char key = s . charAt ( i ) ; if ( ! map . containsKey ( key ) ) map . put ( key , 1l ) ; else map . put ( key , map . get ( key ) + 1l ) ; } long ans = 0 ; for ( HashMap . Entry < Character , Long > entry : map . entrySet ( ) ) { ans += Math . pow ( entry . getValue ( ) , 2 ) ; } System . out . println ( ans ) ; } }","  import javax . print . DocFlavor ; import javax . swing . * ; import javax . swing . text . StyleContext ; import java . awt . image . AreaAveragingScaleFilter ;   import javax . print . attribute . Attribute ; import javax . print . attribute . HashAttributeSet ; import java . io . * ; import java . lang . reflect . Array ; import java . math . BigInteger ; import java . nio . channels . AcceptPendingException ; import java . nio . charset . IllegalCharsetNameException ; import java . util . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . util . Collections ; import java . io . InputStreamReader ; import java . util . logging . SimpleFormatter ;    public class Main1 {       public static void main ( String [ ] args ) {      FastScanner in = new FastScanner ( ) ; PrintWriter out = new PrintWriter ( System . out ) ;   char a [ ] = in . next ( ) . toCharArray ( ) ; Arrays . sort ( a ) ; int ct = 1 ; long temp = 0 ; for ( int i = 1 ; i < a . length ; i ++ ) { if ( a [ i ] == a [ i - 1 ] ) ct ++ ; else { temp += ( long ) ct * ct ; ct = 1 ; } }   System . out . println ( temp + ( long ) ct * ct ) ;                   out . flush ( ) ; out . close ( ) ;      }                    static class FastScanner { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( \" \" ) ;   String next ( ) { while ( ! st . hasMoreTokens ( ) ) try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   int [ ] readArray ( int n ) { int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = nextInt ( ) ; return a ; }    long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } }    }        "],"bleu":0.04074625727366357,"rouge_l":0.22171579146873074}
{"id":185,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . ArrayList ; import java . util . Collections ; import java . util . HashSet ; import java . util . Scanner ;   public class bingo { static class Joe implements Comparable < Joe > { ArrayList < Integer > list ; int ogIndex ; public Joe ( ArrayList < Integer > list , int ogIndex ) { this . list = list ; this . ogIndex = ogIndex ; } @ Override public int compareTo ( Joe other ) { int min = Math . min ( list . size ( ) , other . list . size ( ) ) ; for ( int i = 0 ; i < min ; i ++ ) { if ( list . get ( i ) != other . list . get ( i ) ) return list . get ( i ) - other . list . get ( i ) ; } return other . list . size ( ) - list . size ( ) ; } public boolean isSuperSet ( Joe in ) { if ( in . list . size ( ) > list . size ( ) ) return false ; HashSet < Integer > inSet = new HashSet < Integer > ( ) ; for ( int e : list ) inSet . add ( e ) ; for ( int e : in . list ) if ( ! inSet . contains ( e ) ) return false ; return true ; } public String toString ( ) { return list . toString ( ) ; } } public static void main ( String [ ] args ) {","import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) ; HashSet < Integer > [ ] ary = new HashSet [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { int m = in . nextInt ( ) ; HashSet < Integer > cards = new HashSet < Integer > ( ) ; for ( int j = 0 ; j < m ; j ++ ) cards . add ( in . nextInt ( ) ) ; ary [ i ] = cards ; } for ( int i = 0 ; i < n ; i ++ ) { boolean flag = true ; HashSet < Integer > source = ary [ i ] ; for ( int j = 0 ; j < n ; j ++ ) { if ( i == j ) continue ; HashSet < Integer > target = ary [ j ] ; boolean containsEverything = true ; for ( int k : target ) { if ( ! source . contains ( k ) ) { containsEverything = false ; break ; } } if ( containsEverything ) { flag = false ; break ; } } System . out . println ( flag ? \" YES \" : \" NO \" ) ; } } }"],"bleu":0.009545806715129466,"rouge_l":0.1947704521919227}
{"id":186,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Scanner ; import java . util . StringTokenizer ; import java . util . * ; import java . math . * ; public class er10a {"],"references":["import java . util . Arrays ; import java . util . HashMap ; import java . util . Scanner ; import java . util . Vector ; import javafx . util . Pair ;   public class NewClass {   static int n11 = 100000 ; static boolean a11 [ ] = new boolean [ n11 + 1 ] ; static Vector < Long > v11 = new Vector ( ) ;   static int gcd ( int a , int b ) { if ( b == 0 ) { return a ; } return gcd ( b , a % b ) ; }   static void seive ( ) {","import java . util . Scanner ;   public class B1450 {   public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int T = in . nextInt ( ) ; for ( int t = 0 ; t < T ; t ++ ) { int N = in . nextInt ( ) ; int K = in . nextInt ( ) ; int [ ] X = new int [ N ] ; int [ ] Y = new int [ N ] ; for ( int n = 0 ; n < N ; n ++ ) { X [ n ] = in . nextInt ( ) ; Y [ n ] = in . nextInt ( ) ; } boolean found = false ; for ( int n = 0 ; n < N ; n ++ ) { boolean ok = true ; for ( int i = 0 ; i < N ; i ++ ) { int dist = Math . abs ( X [ n ] - X [ i ] ) + Math . abs ( Y [ n ] - Y [ i ] ) ; if ( dist > K ) { ok = false ; break ; } } if ( ok ) { found = true ; break ; } } System . out . println ( found ? 1 : - 1 ) ; } }   }","import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . ArrayDeque ; import java . util . Arrays ; import java . util . Deque ; import java . util . Map ; import java . util . Set ; import java . util . StringTokenizer ; import java . util . TreeMap ; import java . util . TreeSet ;   public class ProblemG12B { public static void main ( String [ ] args ) throws Exception { BufferedReader reader = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter writer = new PrintWriter ( System . out ) ;   int t = Integer . parseInt ( reader . readLine ( ) ) ; for ( int tt = 0 ; tt < t ; tt ++ ) { StringTokenizer info = new StringTokenizer ( reader . readLine ( ) ) ; int n = Integer . parseInt ( info . nextToken ( ) ) ; int k = Integer . parseInt ( info . nextToken ( ) ) ; Point [ ] points = new Point [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { StringTokenizer tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; int x = Integer . parseInt ( tokenizer . nextToken ( ) ) ; int y = Integer . parseInt ( tokenizer . nextToken ( ) ) ; points [ i ] = new Point ( x , y ) ; } boolean good = false ; for ( int i = 0 ; i < n ; i ++ ) { int maxDistance = 0 ; for ( int j = 0 ; j < n ; j ++ ) { int distance = Math . abs ( points [ i ] . x - points [ j ] . x ) + Math . abs ( points [ i ] . y - points [ j ] . y ) ; maxDistance = Math . max ( maxDistance , distance ) ; } if ( maxDistance <= k ) { good = true ; } } writer . println ( good ? \"1\" : \" - 1\" ) ; }   reader . close ( ) ; writer . close ( ) ; } static class Point { int x , y ; public Point ( int x , int y ) { this . x = x ; this . y = y ; } } }","import java . util . Arrays ; import java . util . HashMap ; import java . util . Scanner ; import java . util . Vector ; import javafx . util . Pair ;   public class NewClass {   static int n11 = 100000 ; static boolean a11 [ ] = new boolean [ n11 + 1 ] ; static Vector < Long > v11 = new Vector ( ) ;   static int gcd ( int a , int b ) { if ( b == 0 ) { return a ; } return gcd ( b , a % b ) ; }   static void seive ( ) {"],"bleu":0.2676499000407234,"rouge_l":0.37843199526666355}
{"id":187,"predictions":["import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ;   public class CF749A { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int n = Integer . parseInt ( br . readLine ( ) ) ; System . out . println ( n \/ 2 ) ; for ( int i = 1 ; i < n \/ 2 ; i ++ ) { System . out . print ( \"2 ▁ \" ) ; } System . out . print ( ( n & 1 ) == 0 ? 2 : 3 ) ; }   }","import java . util . Scanner ; import java . lang . Math ; import java . util . Arrays ;   public class pa { static Scanner sc = new Scanner ( System . in ) ; public static void main ( String args [ ] ) { int n , i ; n = sc . nextInt ( ) ; System . out . println ( n \/ 2 ) ; if ( n % 2 == 0 ) { for ( i = 0 ; i < n \/ 2 - 1 ; i ++ ) { System . out . println ( \"2 ▁ \" ) ; } System . out . println ( \"2 \\n \" ) ; } if ( n % 2 == 1 ) { for ( i = 0 ; i < n \/ 2 - 1 ; i ++ ) { System . out . println ( \"2 ▁ \" ) ; } System . out . println ( \"3 \\n \" ) ; } } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ;   public class BachGoldProblem {   public static void main ( String [ ] args ) throws IOException { BufferedReader reader = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int n = Integer . parseInt ( reader . readLine ( ) ) ; int num = n \/ 2 ; if ( n % 2 == 1 ) { num -- ; System . out . println ( num + 1 ) ; for ( int i = 0 ; i < num ; i ++ ) { System . out . printf ( 2 + \" ▁ \" ) ; } System . out . printf ( \"3 \\n \" ) ; } else { System . out . println ( num ) ; for ( int i = 0 ; i < num ; i ++ ) { System . out . printf ( 2 + \" ▁ \" ) ; } } reader . close ( ) ; } }","import java . util . Scanner ;   public class A749 { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int t = n \/ 2 ; if ( n % 2 == 1 ) { System . out . println ( t ) ; for ( int i = 0 ; i < t - 1 ; i ++ ) { System . out . print ( 2 + \" ▁ \" ) ; } System . out . print ( 3 ) ; } if ( n % 2 == 0 ) { System . out . println ( t ) ; for ( int i = 0 ; i < t ; i ++ ) { System . out . print ( 2 + \" ▁ \" ) ; } } } }"],"bleu":0.08080499442579925,"rouge_l":0.27678883071553234}
{"id":188,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;  ","import java . util . * ; import java . io . * ; public class c4    { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) ; int m = in . nextInt ( ) ; int k = in . nextInt ( ) ; if ( n < 1 || n > 10000 || m > 10000 || m < 1 || k < 1 || k > 2 * n * m ) System . exit ( 0 ) ; int c = 1 ; int i ; String ch = \" \" ; if ( k % 2 == 0 ) { i = k \/ 2 ; ch = \" R \" ; } else { i = ( k + 1 ) \/ 2 ; ch = \" L \" ; } int y ; for ( y = 0 ; y < n ; y ++ ) { if ( m * y >= i ) break ; } int r = i - ( m * ( y - 1 ) ) ; System . out . print ( y + \" ▁ \" + r + \" ▁ \" + ch ) ; } }","import java . util . Scanner ;   public class SantaClausAndAPlaceInAClass { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int place = 1 ; int row = 1 , col = 1 , i = 1 ; while ( place != k ) { col = col % ( n + 1 ) ; row = row % ( m + 1 ) ; if ( place == 2 * m * i ) { col ++ ; row = 0 ; i ++ ; } if ( place % 2 == 0 ) { row ++ ; } place ++ ; } char side ; if ( k % 2 == 0 ) { side = ' R ' ; } else { side = ' L ' ; } System . out . println ( col + \" ▁ \" + row + \" ▁ \" + side ) ; } }","import java . util . Scanner ;   public class PlaceInClass { public static void main ( String [ ] args ) {   Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) , m = in . nextInt ( ) , k = in . nextInt ( ) , x , y , z ;   outer : for ( x = 1 ; x <= n ; x ++ ) { for ( y = 1 ; y <= m ; y ++ ) { for ( z = 0 ; z < 2 ; z ++ ) {   k -- ; if ( k <= 0 ) { System . out . println ( z == 0 ? x + \" ▁ \" + y + \" ▁ L \" : x + \" ▁ \" + y + \" ▁ R \" ) ; break outer ; } } } } in . close ( ) ; } }","import java . util . Scanner ; import java . util . Arrays ; import java . util . Vector ; import java . util . Collections ;    public class Problem_Solving1 { public static int binarysearch ( long arr [ ] , long x , int m ) { int l = 0 , r = m - 1 ; while ( l <= r ) { int mid = l + ( r - l ) \/ 2 ; if ( arr [ mid ] == x ) return mid + 1 ; else if ( arr [ mid ] > x ) r = mid - 1 ; else l = mid + 1 ; } return - 1 ; } public static void main ( String [ ] args ) {"],"bleu":0.6101325231431937,"rouge_l":0.6192277070063693}
{"id":189,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; out . println ( a [ n - 1 ] ) ; out . close ( ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . util . * ;   public class M_Round_4 {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ;  ","import java . util . * ; import java . io . * ;   public class cf_1 { public static void main ( String [ ] args ) { new Solution ( ) . solve ( ) ; } }   class Solution { public void solve ( ) { FastScanner fs = new FastScanner ( ) ; int tests = fs . nextInt ( ) ; for ( int i = 0 ; i < tests ; i ++ ) { int length = fs . nextInt ( ) ; String word = fs . next ( ) ; char [ ] cArr = word . toCharArray ( ) ; Arrays . sort ( cArr ) ; System . out . println ( cArr ) ; } } }   class FastScanner { private BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; private StringTokenizer st = new StringTokenizer ( \" \" ) ; public String next ( ) { while ( ! st . hasMoreTokens ( ) ) try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return st . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } public int [ ] readArray ( int n ) { int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = nextInt ( ) ; } return arr ; } public long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } }","import java . util . * ; import java . io . * ;   public class cf_1 { public static void main ( String [ ] args ) { new Solution ( ) . solve ( ) ; } }   class Solution { public void solve ( ) { FastScanner fs = new FastScanner ( ) ; int tests = fs . nextInt ( ) ; for ( int i = 0 ; i < tests ; i ++ ) { int length = fs . nextInt ( ) ; String word = fs . next ( ) ; char [ ] cArr = word . toCharArray ( ) ; sort ( cArr ) ; System . out . println ( cArr ) ; } }   private void sort ( char [ ] cArr ) { List < Character > list = new ArrayList < > ( ) ; for ( char c : cArr ) { list . add ( c ) ; } Collections . sort ( list ) ; for ( int i = 0 ; i < list . size ( ) ; i ++ ) { cArr [ i ] = list . get ( i ) ; } } }   class FastScanner { private BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; private StringTokenizer st = new StringTokenizer ( \" \" ) ; public String next ( ) { while ( ! st . hasMoreTokens ( ) ) try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return st . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } public int [ ] readArray ( int n ) { int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = nextInt ( ) ; } return arr ; } public long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } }","import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner in = new Scanner ( System . in ) ; int t = in . nextInt ( ) ; while ( t -- > 0 ) { int n = in . nextInt ( ) ; String s = in . next ( ) ; char c [ ] = s . toCharArray ( ) ; Arrays . sort ( c ) ; System . out . println ( String . valueOf ( c ) ) ; } } }","import java . util . * ; public class Main {   public static void main ( String [ ] args ) { int t , n ; String s ; s = \" \" ;   Scanner sc = new Scanner ( System . in ) ;   t = sc . nextInt ( ) ;   while ( t -- > 0 ) { n = sc . nextInt ( ) ; s = sc . next ( ) ;   char ch [ ] = s . toCharArray ( ) ;   Arrays . sort ( ch ) ;   System . out . println ( String . valueOf ( ch ) ) ; }"],"bleu":0.6262230806586163,"rouge_l":0.715875819682048}
{"id":190,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ;   public class Codeforces {   private static final Scanner sc = new Scanner ( System . in ) ; private static final BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; private static final long MOD = ( long ) ( 1e9 + 7 ) ;   public static int [ ] LPS ( String p ) { int [ ] lps = new int [ p . length ( ) ] ;   int i = 1 ; int j = 0 ; while ( i < p . length ( ) ) { if ( p . charAt ( i ) == p . charAt ( j ) ) { lps [ i ] = j + 1 ; i ++ ; j ++ ; } else { if ( j == 0 ) { lps [ i ] = 0 ; i ++ ; } else { j = lps [ j - 1 ] ; } } } return lps ; }   public static void KMP ( String text , String pattern ) { int [ ] lps = LPS ( pattern ) ; int i = 0 ; int j = 0 ; ArrayList < Integer > matches = new ArrayList < > ( ) ; while ( i < text . length ( ) ) { if ( text . charAt ( i ) == pattern . charAt ( j ) ) { i ++ ; j ++ ; } else { if ( j != 0 ) { j = lps [ j - 1 ] ; } else { i ++ ; } } if ( j == pattern . length ( ) ) { matches . add ( i - j ) ; j = lps [ j - 1 ] ; } } for ( int x : matches ) { System . out . println ( \" Match ▁ at ▁ : ▁ \" + x ) ; } }   private static class SegmentTree { private long [ ] st ; private int size ; private int n ; private long [ ] a ; SegmentTree ( long [ ] a , int n ) { this . size = 4 * n ; this . n = n ; this . a = a ; st = new long [ size ] ;","import java . util . * ;   public class CodeForces371B { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int a = input . nextInt ( ) ; int b = input . nextInt ( ) ; if ( a == b ) { System . out . println ( 0 ) ; return ; } int [ ] arr = { 2 , 3 , 5 } ; int [ ] a1 = new int [ 3 ] ; int [ ] b1 = new int [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { int x = arr [ i ] ; while ( a % x == 0 ) { a \/= x ; a1 [ i ] ++ ; } if ( a == 1 ) { break ; } }   for ( int i = 0 ; i < 3 ; i ++ ) { int x = arr [ i ] ; while ( b % x == 0 ) { b \/= x ; b1 [ i ] ++ ; }   if ( b == 1 ) { break ; } }   if ( a != b ) { System . out . println ( - 1 ) ; } else { int ans = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) { ans += Math . abs ( a1 [ i ] - b1 [ i ] ) ; }   System . out . println ( ans ) ; }   } }","import java . io . * ; import java . util . * ; public class Asd { static PrintWriter w = new PrintWriter ( System . out ) ; static FastScanner s = new FastScanner ( ) ;   public static void main ( String [ ] args ) {"],"bleu":0.6806483110599487,"rouge_l":0.6309308816286324}
{"id":191,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ; import java . io . * ; import java . lang . * ; import java . math . * ;   public class cp { static BufferedReader br ; static StringTokenizer st ;   public static void main ( String [ ] args ) throws IOException {   br = new BufferedReader ( new InputStreamReader ( System . in ) ) ;   st = readLine ( ) ; int n = tokenInt ( ) ; int t = tokenInt ( ) ;   st = readLine ( ) ; int [ ] array = readIntArray ( n ) ;  ","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;   public class New_Year_Transportation { static class RealScanner { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( \" \" ) ;   String next ( ) { while ( ! st . hasMoreTokens ( ) ) try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   int [ ] readArray ( int n ) { int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = nextInt ( ) ; return a ; }   long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } } public static void main ( String [ ] args ) { RealScanner sc = new RealScanner ( ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] arr = new int [ n - 1 ] ; for ( int i = 0 ; i < n - 1 ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } if ( n == 1 && k == 1 ) { System . out . println ( \" YES \" ) ; return ; } else if ( n == 1 && k != 1 ) { System . out . println ( \" NO \" ) ; } else { for ( int i = 0 ; i < n - 1 ; ) { i += arr [ i ] ; if ( i + 1 == k ) { System . out . println ( \" YES \" ) ; return ; } } System . out . println ( \" NO \" ) ; } } }","import java . util . * ;   public class Codeforces { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) ; int currentCell = 1 ; int cellToGo = in . nextInt ( ) ;   boolean [ ] visited = new boolean [ n + 1 ] ; int [ ] portals = new int [ n + 1 ] ;   for ( int i = 1 ; i < n ; i ++ ) { portals [ i ] = in . nextInt ( ) ; } while ( ! visited [ currentCell ] ) { visited [ currentCell ] = true ; if ( currentCell == cellToGo ) { System . out . println ( \" YES \" ) ; return ; } else { currentCell += portals [ currentCell ] ; if ( currentCell > n ) { break ; } } } System . out . println ( \" NO \" ) ;   }   }     ","import java . util . * ;   public class Solve {   static Scanner scan = new Scanner ( System . in ) ;    public static void solve ( int n , int t , int [ ] a ) {    int i = 1 ;   while ( i < t ) { i += a [ i ] ;","import java . util . * ; import java . io . * ; import java . lang . * ; import java . math . * ;   public class cp { static BufferedReader br ; static StringTokenizer st ;   public static void main ( String [ ] args ) throws IOException {   br = new BufferedReader ( new InputStreamReader ( System . in ) ) ;   st = readLine ( ) ; int n = tokenInt ( ) ; int t = tokenInt ( ) ;   st = readLine ( ) ; int [ ] array = readIntArray ( n ) ;  "],"bleu":0.5929050470270669,"rouge_l":0.4331826985151711}
{"id":192,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ; public class VanyaL { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; int n = s . nextInt ( ) ; int l = s . nextInt ( ) ; double [ ] arr = new double [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = s . nextInt ( ) ; } Arrays . sort ( arr ) ; double dis = arr [ 0 ] - 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { double k = ( arr [ i + 1 ] - arr [ i ] ) \/ 2 ; if ( k > dis ) { dis = k ; } } if ( ( l - arr [ n - 1 ] ) > dis ) { dis = l - arr [ n - 1 ] ; } System . out . println ( dis ) ; } }","import java . util . Arrays ; import java . util . Scanner ;   public class n492B { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; long l = scanner . nextLong ( ) ; long [ ] lattern = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { lattern [ i ] = scanner . nextLong ( ) ; } Arrays . sort ( lattern ) ; long max ; if ( lattern [ 0 ] != 0 ) max = lattern [ 0 ] * 2 ; else max = lattern [ 0 ] ; for ( int i = 1 ; i < n - 1 ; i ++ ) { max = Math . max ( lattern [ i ] - lattern [ i - 1 ] , max ) ; } if ( lattern [ n - 1 ] != l ) { max = Math . max ( ( l - lattern [ n - 1 ] ) * 2 , max ) ; } else { if ( n == 1 ) max = Math . max ( l * 2 , max ) ; else max = Math . max ( l - lattern [ n - 2 ] , max ) ; } System . out . println ( ( double ) max \/ 2 ) ; } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Arrays ; import java . util . StringTokenizer ;   public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int l = Integer . parseInt ( st . nextToken ( ) ) ; int lanterns [ ] = new int [ n ] ; st = new StringTokenizer ( br . readLine ( ) ) ; for ( int i = 0 ; i < n ; i ++ ) { lanterns [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } Arrays . sort ( lanterns ) ; double res = Math . max ( lanterns [ 0 ] , l - lanterns [ n - 1 ] ) ; for ( int i = 1 ; i < n ; i ++ ) { res = Math . max ( res , Math . max ( res , ( lanterns [ i ] - lanterns [ i - 1 ] ) \/ 2.0 ) ) ; } System . out . println ( res ) ; } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Arrays ; import java . util . StringTokenizer ;   public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int l = Integer . parseInt ( st . nextToken ( ) ) ; int lanterns [ ] = new int [ n ] ; st = new StringTokenizer ( br . readLine ( ) ) ; for ( int i = 0 ; i < n ; i ++ ) { lanterns [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } Arrays . sort ( lanterns ) ; double res = - 1.000000000 ;","import java . util . Arrays ; import java . util . Scanner ;       public class Main { static double binarySearch ( int arr [ ] , int l , int r , double x ) {   if ( r >= l ) { int mid = l ;   if ( ( arr [ mid ] - arr [ mid - 1 ] ) \/ 2.0 > x ) { x = ( arr [ mid ] - arr [ mid - 1 ] ) \/ 2.0 ;   }   return binarySearch ( arr , mid + 1 , r , x ) ; }  "],"bleu":0.26481206524768675,"rouge_l":0.34534225424601134}
{"id":193,"predictions":["import java . util . * ; import java . io . * ; import java . math . BigInteger ; import java . text . * ; public class Main { static long mod = 1000_000_007 ; static long mod1 = 998244353 ; static boolean fileIO = false ; static boolean memory = true ; static FastScanner f ; static PrintWriter pw ; static double eps = ( double ) 1e-6 ; static long oo = Long . MAX_VALUE ;"],"references":["import java . io . IOException ; import java . io . InputStream ; import java . io . OutputStream ; import java . io . PrintWriter ; import java . math . BigInteger ; import java . util . * ;     public class DivisibilitySeven {   public static void main ( String [ ] args ) {   InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader sc = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; Solver solver = new Solver ( ) ;","import java . awt . Point ; import java . util . * ; import java . io . * ; import static java . lang . Math . * ;   public class PracticeProblem { public static class FastReader { BufferedReader br ; StringTokenizer st ;   public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; }   String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   long nextLong ( ) { return Long . parseLong ( next ( ) ) ; }   double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; }   String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } }   public static FastReader in = new FastReader ( ) ; public static PrintWriter out = new PrintWriter ( System . out ) ; public static final int MOD = ( int ) 1e9 + 7 ;   public static void main ( String [ ] args ) { solve ( ) ;   out . close ( ) ; }   public static int subtract ( int a , int b , int mod ) { return ( a % mod - b % mod + mod ) % mod ; } public static int [ ] pow ; public static void solve ( ) { int [ ] perm = { 1869 , 1968 , 1689 , 6198 , 1698 , 1986 , 1896 } ;","import java . util . * ; import java . lang . * ; import java . math . * ; import java . io . * ; import java . util . HashSet ; import java . util . Scanner ; import java . util . Set ; import java . util . ArrayList ; import java . util . Collections ; import java . util . HashMap ; import java . util . Map ; import java . text . DecimalFormat ; import java . lang . Math ; import java . util . Iterator ; public class C47 { static class Pair implements Comparable < Pair > { int v ; int i ; public Pair ( int v , int i ) { this . v = v ; this . i = i ; } @ Override public int compareTo ( Pair o ) {"],"bleu":0.35888883257894283,"rouge_l":0.46610988806187464}
{"id":194,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ; public class Main {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int i = 0 ; int j = 0 ; int t = sc . nextInt ( ) ; for ( int f = 0 ; f < t ; f ++ ) {   int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int count = 0 ; int [ ] row = new int [ n ] ; int [ ] column = new int [ m ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < m ; j ++ ) { int current = sc . nextInt ( ) ; if ( current == 1 ) { row [ i ] = 1 ; column [ j ] = 1 ; } } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < m ; j ++ ) { if ( row [ i ] == 0 && column [ j ] == 0 ) { count ++ ; row [ i ] = 1 ; column [ j ] = 1 ; } } } if ( count % 2 == 0 ) { System . out . println ( \" Vivek \" ) ; } else { System . out . println ( \" Ashish \" ) ; }   count = 0 ; }   sc . close ( ) ; }   }","import java . util . * ; public class Main {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int i = 0 ; int j = 0 ; int t = sc . nextInt ( ) ; for ( int f = 0 ; f < t ; f ++ ) {   int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int count = 0 ; int [ ] row = new int [ n ] ; int [ ] column = new int [ m ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < m ; j ++ ) { int current = sc . nextInt ( ) ; if ( current == 1 ) { row [ i ] = 1 ; column [ j ] = 1 ; } } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < m ; j ++ ) { if ( row [ i ] != 1 && column [ j ] != 1 ) { count ++ ; row [ i ] = 1 ; column [ j ] = 1 ; } } } if ( count % 2 == 0 ) { System . out . println ( \" Vivek \" ) ; } else { System . out . println ( \" Ashish \" ) ; }   count = 0 ; }   sc . close ( ) ; }   }","import java . util . * ; public class matrixGame {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) {   int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int count = 0 ; int [ ] row = new int [ n ] ; int [ ] column = new int [ m ] ; for ( int k = 0 ; k < n ; k ++ ) { for ( int j = 0 ; j < m ; j ++ ) { int current = sc . nextInt ( ) ; if ( current == 1 ) { row [ k ] = 1 ; column [ j ] = 1 ; } } } for ( int s = 0 ; s < n ; s ++ ) { for ( int x = 0 ; x < m ; x ++ ) { if ( row [ s ] != 1 && column [ x ] != 1 ) { count ++ ; row [ s ] = 1 ; column [ x ] = 1 ; } } } if ( count % 2 == 0 ) { System . out . println ( \" Vivek \" ) ; } else { System . out . println ( \" Ashish \" ) ; }   count = 0 ; }   sc . close ( ) ; }   }","import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int tt = sc . nextInt ( ) ; while ( tt -- > 0 ) { int [ ] cols = new int [ 51 ] ; int [ ] rows = new int [ 51 ] ; int r = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; for ( int i = 0 ; i < r ; i ++ ) { for ( int j = 0 ; j < c ; j ++ ) { int t ; t = sc . nextInt ( ) ; if ( t == 1 ) { cols [ j ] = 1 ; rows [ i ] = 1 ; } } } int cnt1 = 0 , cnt2 = 0 ; for ( int i = 0 ; i < r ; i ++ ) { if ( rows [ i ] == 0 ) cnt1 ++ ; } for ( int i = 0 ; i < c ; i ++ ) { if ( cols [ i ] == 0 ) cnt2 ++ ; } int t = Math . min ( cnt1 , cnt2 ) ; if ( t % 2 == 0 ) { System . out . println ( \" Vivek \" ) ; } else { System . out . println ( \" Ashish \" ) ; } } } }","import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; int d = 0 ; int r , c ; while ( d < t ) { int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; r = 0 ; c = 0 ; int x [ ] [ ] = new int [ n ] [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { x [ i ] [ j ] = sc . nextInt ( ) ; } } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( x [ i ] [ j ] == 1 ) { r ++ ; break ; } } } for ( int j = 0 ; j < m ; j ++ ) { for ( int i = 0 ; i < n ; i ++ ) { if ( x [ i ] [ j ] == 1 ) { c ++ ; break ; } } } if ( ( n - r ) < ( m - c ) ) if ( ( n - r ) % 2 == 0 ) System . out . println ( \" Vivek \" ) ; else System . out . println ( \" Ashish \" ) ; else if ( ( m - c ) % 2 == 0 ) System . out . println ( \" Vivek \" ) ; else System . out . println ( \" Ashish \" ) ; d ++ ; } } }"],"bleu":0.004959395678855559,"rouge_l":0.13232104121475055}
{"id":195,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ; public class question { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int sum = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { char ch = s . charAt ( i ) ; int x = Character . getNumericValue ( ch ) ; if ( ( x & 1 ) == 0 ) { sum += i + 1 ; } } System . out . println ( sum ) ;   } }","import java . io . * ; import java . util . * ; public class Main { public static void main ( String args [ ] ) { FastReader input = new FastReader ( ) ; PrintWriter out = new PrintWriter ( System . out ) ; int T = 1 ; while ( T -- > 0 ) { int n = input . nextInt ( ) ; String s = input . next ( ) ; long sum = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { int d = s . charAt ( i ) - 48 ; if ( d % 2 == 0 ) { int v = ( i + 1 ) ; sum += v ; } } out . println ( sum ) ; } out . close ( ) ; } static class FastReader { BufferedReader br ; StringTokenizer st ; public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }","import java . util . * ; import java . io . * ; public final class Codeforces { public static BufferedReader buffer = new BufferedReader ( new InputStreamReader ( System . in ) ) ; public static BufferedWriter logger = new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ; public static void main ( String [ ] args ) { try { int n = Integer . parseInt ( buffer . readLine ( ) ) ; String s = buffer . readLine ( ) ; long even = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( ( ( int ) s . charAt ( i ) ) % 2 == 0 ) { even += ( i + 1 ) ; } } logger . write ( even + \" ▁ \" ) ; logger . flush ( ) ; } catch ( IOException exc ) { } } }","import java . io . BufferedInputStream ; import java . util . * ;   import static java . lang . Math . * ;   public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( new BufferedInputStream ( System . in ) ) ; int n = in . nextInt ( ) ; String str = in . next ( ) ; int sum = 0 ; for ( int i = 0 ; i < n ; ++ i ) { if ( str . charAt ( i ) % 2 == 0 ) { sum += i + 1 ; } } System . out . println ( sum ) ; } }","import java . util . Scanner ;   public class Main {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String str = sc . next ( ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( Integer . parseInt ( \" \" + str . charAt ( i ) ) % 2 == 0 ) sum += ( i + 1 ) ; } System . out . println ( sum ) ; } }  "],"bleu":0.12644179313028267,"rouge_l":0.32685867381111855}
{"id":196,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException {"],"references":["import java . io . * ; import java . util . * ; public class CF1361B {   static class FastReader { BufferedReader br ; StringTokenizer st ; public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } } static int MOD = 1000000007 ; public static void main ( String [ ] args ) { FastReader br = new FastReader ( ) ; int T = br . nextInt ( ) ; StringBuilder sb = new StringBuilder ( ) ; int n , p = 0 ; int [ ] a = new int [ 0 ] ; int num = 0 ; int cur = 0 ; long ans = 0 ;","import java . io . * ; import java . util . * ; public class CF1361B {   static class FastReader { BufferedReader br ; StringTokenizer st ; public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } } static int MOD = 1000000007 ; public static void main ( String [ ] args ) { FastReader br = new FastReader ( ) ; int T = br . nextInt ( ) ; StringBuilder sb = new StringBuilder ( ) ; int n , p = 0 ; int [ ] a = new int [ 0 ] ; int num = 0 ; int cur = 0 ; long ans = 0 ;","import java . util . * ; import java . io . * ;   public class B { public static long MOD = 1000000007 ; public static void main ( String [ ] args ) throws IOException { BufferedReader f = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter out = new PrintWriter ( new OutputStreamWriter ( System . out ) ) ; int t = Integer . parseInt ( f . readLine ( ) ) ; while ( t -- > 0 ) { StringTokenizer st = new StringTokenizer ( f . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; long p = Long . parseLong ( st . nextToken ( ) ) ; Long [ ] arr = new Long [ n ] ; st = new StringTokenizer ( f . readLine ( ) ) ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = Long . parseLong ( st . nextToken ( ) ) ; } Arrays . sort ( arr ) ; long screwedThreshold = Long . MAX_VALUE ; if ( p != 1 ) { int ct = 0 ; long res = 1L ; while ( res <= 1000000000L ) { res *= p ; ct ++ ; } screwedThreshold = ct ; }   long diff = 0 ; long lastOne = - 1 ; boolean found = false ; boolean screwed = false ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( i < n - 1 && diff != 0 ) { if ( ! screwed && lastOne - arr [ i ] >= screwedThreshold ) screwed = true ; diff *= power ( p , arr [ i + 1 ] - arr [ i ] , MOD ) ; diff %= MOD ; diff += MOD ; diff %= MOD ; } if ( ! found ) { found = true ; diff ++ ; lastOne = arr [ i ] ; } else { if ( screwed ) diff -- ; else { diff -- ; if ( diff == 0 ) { found = false ; } } } } out . println ( ( ( diff * power ( p , arr [ 0 ] , MOD ) ) % MOD + MOD ) % MOD ) ; }     out . close ( ) ; } public static long power ( long x , long y , long p ) {","import java . util . * ; import java . io . * ;   public class B { public static long MOD = 1000000007 ; public static void main ( String [ ] args ) throws IOException { BufferedReader f = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter out = new PrintWriter ( new OutputStreamWriter ( System . out ) ) ; int t = Integer . parseInt ( f . readLine ( ) ) ; while ( t -- > 0 ) { StringTokenizer st = new StringTokenizer ( f . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; long p = Long . parseLong ( st . nextToken ( ) ) ; Long [ ] arr = new Long [ n ] ; st = new StringTokenizer ( f . readLine ( ) ) ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = Long . parseLong ( st . nextToken ( ) ) ; } Arrays . sort ( arr ) ; long screwedThreshold = Long . MAX_VALUE ; if ( p != 1 ) { int ct = 0 ; long res = 1L ; while ( res <= 1000000000L ) { res *= p ; ct ++ ; } screwedThreshold = ct ; }   long diff = 0 ; long lastOne = - 1 ; boolean found = false ; boolean screwed = false ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( i < n - 1 && diff != 0 ) { if ( ! screwed && lastOne - arr [ i ] >= screwedThreshold ) screwed = true ; diff *= power ( p , arr [ i + 1 ] - arr [ i ] , MOD ) ; diff %= MOD ; diff += MOD ; diff %= MOD ; } if ( ! found ) { found = true ; diff ++ ; lastOne = arr [ i ] ; } else { if ( screwed ) diff -- ; else { diff -- ; if ( diff == 0 ) { found = false ; } } } } out . println ( ( ( diff * power ( p , arr [ 0 ] , MOD ) ) % MOD + MOD ) % MOD ) ; }     out . close ( ) ; } public static long power ( long x , long y , long p ) {","import java . io . * ; import java . util . * ; public class Solution { private static final int mod = 1000000007 ; private static int max = 1000001 ; public static void main ( String [ ] args ) throws Exception { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter out = new PrintWriter ( System . out ) ; int t = Integer . parseInt ( br . readLine ( ) ) ; while ( t > 0 ) { t -- ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int p = Integer . parseInt ( st . nextToken ( ) ) ; if ( p == 1 ) { out . println ( ( n % 2 == 0 ) ? 0 : 1 ) ; st = new StringTokenizer ( br . readLine ( ) ) ; continue ; } Map < Integer , Integer > map = new HashMap ( ) ; st = new StringTokenizer ( br . readLine ( ) ) ; for ( int i = 0 ; i < n ; i ++ ) { int key = Integer . parseInt ( st . nextToken ( ) ) ; map . put ( key , map . getOrDefault ( key , 0 ) + 1 ) ; } int [ ] a = getArray ( map ) ;"],"bleu":0.004423423690205666,"rouge_l":0.2178494774990324}
{"id":197,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ; import java . io . * ; public class Main implements Runnable { FastScanner sc ; PrintWriter pw ; final class FastScanner { BufferedReader br ; StringTokenizer st ; public FastScanner ( ) { try { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } } public long nlo ( ) { return Long . parseLong ( next ( ) ) ; } public String next ( ) { if ( st . hasMoreTokens ( ) ) return st . nextToken ( ) ; try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } return st . nextToken ( ) ; } public int ni ( ) { return Integer . parseInt ( next ( ) ) ; } public String nli ( ) { String line = \" \" ; if ( st . hasMoreTokens ( ) ) line = st . nextToken ( ) ; else try { return br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } while ( st . hasMoreTokens ( ) ) line += \" ▁ \" + st . nextToken ( ) ; return line ; } public double nd ( ) { return Double . parseDouble ( next ( ) ) ; } } public static void main ( String [ ] args ) { new Thread ( null , new Main ( ) , \" codeforces \" , 1 << 25 ) . start ( ) ; } public void run ( ) { sc = new FastScanner ( ) ; pw = new PrintWriter ( System . out ) ; solve ( ) ; pw . flush ( ) ; pw . close ( ) ; } public long gcd ( long a , long b ) { return b == 0L ? a : gcd ( b , a % b ) ; } public long ppow ( long a , long b , long mod ) { if ( b == 0L ) return 1L ; long tmp = 1 ; while ( b > 1L ) { if ( ( b & 1L ) == 1 ) tmp *= a ; a *= a ; a %= mod ; tmp %= mod ; b >>= 1 ; } return ( tmp * a ) % mod ; }","  import java . io . * ; import java . util . * ;    public class test { int INF = ( int ) 1e9 ; long MOD = 1000000007 ;   void solve ( InputReader in , PrintWriter out ) throws IOException { int a = in . nextInt ( ) ; int b = in . nextInt ( ) ; int [ ] sqrt = new int [ 5000000 ] ; for ( int i = 0 ; i <= 2100 ; i ++ ) { sqrt [ i * i ] = i ; } int as = a * a ; int bs = b * b ; int ss = as + bs ;   for ( int i = 1 ; i <= a ; i ++ ) { int is = i * i ; if ( as <= is || sqrt [ as - is ] == 0 ) { continue ; }   int x = i ; int y = sqrt [ as - is ] ;   int p = - y ; int q = x ; int m = sqrt [ p * p + q * q ] ; if ( m == 0 || ( p * b ) % m != 0 || ( q * b ) % m != 0 ) continue ;   p = p * b \/ m ; q = q * b \/ m ;   if ( p == x || q == y ) continue ;   out . println ( \" YES \" ) ; out . println ( \"0 ▁ 0\" ) ; out . println ( x + \" ▁ \" + y ) ; out . println ( p + \" ▁ \" + q ) ; return ; }   out . println ( \" NO \" ) ; }   public static void main ( String [ ] args ) throws IOException { InputReader in = new InputReader ( ) ; PrintWriter out = new PrintWriter ( System . out ) ; int t = 1 ;","import java . io . DataInputStream ; import java . io . FileInputStream ; import java . io . IOException ;   public class Triangle { static int mod = 1000000007 ;   static class Reader { final private int BUFFER_SIZE = 1 << 16 ; private DataInputStream din ; private byte [ ] buffer ; private int bufferPointer , bytesRead ;   public Reader ( ) { din = new DataInputStream ( System . in ) ; buffer = new byte [ BUFFER_SIZE ] ; bufferPointer = bytesRead = 0 ; }   public Reader ( String file_name ) throws IOException { din = new DataInputStream ( new FileInputStream ( file_name ) ) ; buffer = new byte [ BUFFER_SIZE ] ; bufferPointer = bytesRead = 0 ; }   public String readLine ( ) throws IOException { byte [ ] buf = new byte [ 10005 ] ;"],"bleu":0.11220100224127409,"rouge_l":0.3139705882352941}
{"id":198,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ;   public class Check2 { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] ar = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { ar [ i ] = sc . nextInt ( ) ; } int c = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { int sum = ar [ i ] + ar [ i + 1 ] ; if ( sum < k ) { ar [ i + 1 ] += k - sum ; c += k - sum ; } } System . out . println ( c ) ; for ( Integer integer : ar ) { System . out . print ( integer + \" ▁ \" ) ; } System . out . println ( ) ;     }    public static long power ( long a , long b , long c ) { long ans = 1 ; while ( b != 0 ) { if ( b % 2 == 1 ) { ans = ans * a ; ans %= c ; } a = a * a ; a %= c ; b \/= 2 ; } return ans ; }   public static long power1 ( long a , long b , long c ) { long ans = 1 ; while ( b != 0 ) { if ( b % 2 == 1 ) { ans = multiply ( ans , a , c ) ; } a = multiply ( a , a , c ) ; b \/= 2 ;   } return ans ;   }   public static long multiply ( long a , long b , long c ) { long res = 0 ; a %= c ; while ( b > 0 ) { if ( b % 2 == 1 ) { res = ( res + a ) % c ; } a = ( a + a ) % c ; b \/= 2 ; }   return res % c ;   }   public static long totient ( long n ) { long result = n ; for ( long i = 2 ; i * i <= n ; i ++ ) { if ( n % i == 0 ) {","import java . util . * ;   public class Example { static int [ ] dp ;   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ;","import java . util . * ; import java . io . * ;   public class B { static class FastReader { BufferedReader br ; StringTokenizer st ; public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } static class Pair { int first ; int second ; } public static void main ( String args [ ] ) { FastReader fs = new FastReader ( ) ; StringBuilder ans = new StringBuilder ( ) ; int n = fs . nextInt ( ) ; int k = fs . nextInt ( ) ; int arr [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = fs . nextInt ( ) ; } int c = 0 ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] + arr [ i - 1 ] < k ) { int t1 = arr [ i ] + arr [ i - 1 ] ; c += ( k - t1 ) ; arr [ i ] += ( k - t1 ) ; } } ans . append ( c + \" \\n \" ) ; for ( int i = 0 ; i < n ; i ++ ) { ans . append ( arr [ i ] + \" ▁ \" ) ; } ans . append ( \" \\n \" ) ; System . out . print ( ans ) ; } }","import java . util . Scanner ;   public class Main {   public static void main ( String [ ] args ) {"],"bleu":0.3457322713363548,"rouge_l":0.5331038135593221}
{"id":199,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . Arrays ; import java . util . Scanner ;   public class B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long n = sc . nextLong ( ) ; String s = sc . next ( ) ; char [ ] ch = s . toCharArray ( ) ; long arr [ ] = new long [ 10 ] ; for ( long i = 1 ; i <= 9 ; i ++ ) { arr [ ( int ) i ] = sc . nextLong ( ) ; }","import javax . print . DocFlavor ; import java . io . * ; import java . net . Inet4Address ; import java . sql . ClientInfoStatus ; import java . util . * ;  "],"bleu":0.3507706709137676,"rouge_l":0.5429566563467494}
{"id":200,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . io . * ; import java . util . * ; public class Main implements Runnable { private void solve ( ) throws IOException { char s [ ] = ( \" ▁ \" + nextLine ( ) ) . toCharArray ( ) ; int n = s . length - 1 ; int dp [ ] = new int [ n + 1 ] ;","import java . io . * ; import java . util . * ;   public class practice { static class Reader { final private int BUFFER_SIZE = 1 << 16 ; private DataInputStream din ; private byte [ ] buffer ; private int bufferPointer , bytesRead ; public Reader ( ) { din = new DataInputStream ( System . in ) ; buffer = new byte [ BUFFER_SIZE ] ; bufferPointer = bytesRead = 0 ; } public Reader ( String file_name ) throws IOException { din = new DataInputStream ( new FileInputStream ( file_name ) ) ; buffer = new byte [ BUFFER_SIZE ] ; bufferPointer = bytesRead = 0 ; } public String readLine ( ) throws IOException { byte [ ] buf = new byte [ 64 ] ;","import java . io . * ; import java . util . * ;   public class practice { static class Reader { final private int BUFFER_SIZE = 1 << 16 ; private DataInputStream din ; private byte [ ] buffer ; private int bufferPointer , bytesRead ; public Reader ( ) { din = new DataInputStream ( System . in ) ; buffer = new byte [ BUFFER_SIZE ] ; bufferPointer = bytesRead = 0 ; } public Reader ( String file_name ) throws IOException { din = new DataInputStream ( new FileInputStream ( file_name ) ) ; buffer = new byte [ BUFFER_SIZE ] ; bufferPointer = bytesRead = 0 ; } public String readLine ( ) throws IOException { byte [ ] buf = new byte [ 64 ] ;","import java . util . Scanner ;   public class BracketSequence {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; boolean debug = false ; int depth = 0 ;","import java . util . * ; import java . io . * ; import static java . lang . Math . * ;   public class PracticeProblem { public static class FastReader { BufferedReader br ; StringTokenizer st ;   public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; }   String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   long nextLong ( ) { return Long . parseLong ( next ( ) ) ; }   double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; }   String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } }   public static FastReader in = new FastReader ( ) ; public static PrintWriter out = new PrintWriter ( System . out ) ;   public static void main ( String [ ] args ) { solve ( ) ; out . close ( ) ; }   private static void solve ( ) { char [ ] arr = ( \" | \" + in . nextLine ( ) + \" | \" ) . toCharArray ( ) ;"],"bleu":0.3373952446389564,"rouge_l":0.43405103134208417}
{"id":201,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ; import java . util . Arrays ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int count = 0 ; if ( b == 0 ) { System . out . println ( 0 ) ; } else { if ( a == 0 ) { while ( b != 0 && c > 1 ) { count = count + 3 ; b = b - 1 ; c = c - 2 ; } System . out . println ( count ) ; } else if ( c == 0 ) { while ( a != 0 && b > 1 ) { count = count + 3 ; a = a - 1 ; b = b - 2 ; } System . out . println ( count ) ; } else { while ( b != 0 && c > 1 ) { count = count + 3 ; b = b - 1 ; c = c - 2 ; } while ( a != 0 && b > 1 ) { count = count + 3 ; a = a - 1 ; b = b - 2 ; } System . out . println ( count ) ; } } } } }","import java . util . * ; public class Solution { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; int t = s . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int a = s . nextInt ( ) ; int b = s . nextInt ( ) ; int c = s . nextInt ( ) ; int count = 0 ; if ( ( a == 0 && b == 0 ) || ( b == 0 && c == 0 ) || ( a == 0 && c == 0 ) ) { count = 0 ; } else { if ( b > 0 && c > 0 ) { int g = c \/ 2 ; int min = Math . min ( b , g ) ; for ( int j = 0 ; j < min ; j ++ ) { count = count + 2 ; count = count + 1 ; } b = b - min ; } if ( a > 0 && b > 0 ) { int g1 = b \/ 2 ; int min1 = Math . min ( a , g1 ) ; for ( int j1 = 0 ; j1 < min1 ; j1 ++ ) { count = count + 2 ; count = count + 1 ; } a = a - min1 ; } } System . out . println ( count ) ; } } }","import java . util . * ; public class Solution { public static void main ( String [ ] args ) { Scanner cin = new Scanner ( System . in ) ; int t = cin . nextInt ( ) ; while ( t > 0 ) { t -- ; int a [ ] = new int [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) a [ i ] = cin . nextInt ( ) ; int cnt1 = 0 , cnt2 = 0 , b = a [ 0 ] , c = a [ 1 ] , d = a [ 2 ] ; while ( b >= 1 && c >= 2 ) { b -= 1 ; c -= 2 ; cnt1 += 3 ; } while ( c >= 1 && d >= 2 ) { c -= 1 ; d -= 2 ; cnt1 += 3 ; } while ( a [ 1 ] >= 1 && a [ 2 ] >= 2 ) { a [ 1 ] -= 1 ; a [ 2 ] -= 2 ; cnt2 += 3 ; } while ( a [ 0 ] >= 1 && a [ 1 ] >= 2 ) { a [ 0 ] -= 1 ; a [ 1 ] -= 2 ; cnt2 += 3 ; } System . out . println ( Max ( cnt1 , cnt2 ) ) ; } } static int Max ( int a , int b ) { if ( a >= b ) return a ; else return b ; } }","import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int t = scan . nextInt ( ) ; while ( t > 0 ) { int a = scan . nextInt ( ) ; int b = scan . nextInt ( ) ; int c = scan . nextInt ( ) ; t -- ; if ( b == 0 ) { System . out . println ( 0 ) ; } else { if ( b >= c \/ 2 ) { int count_two = c \/ 2 ; int r_b = b - count_two ; if ( a >= r_b \/ 2 ) { int count_one = r_b \/ 2 ; System . out . println ( 3 * ( count_one + count_two ) ) ; } else { int count_one = a ; System . out . println ( 3 * ( count_one + count_two ) ) ; } } else { int count_two = b ; int count_one = 0 ; System . out . println ( 3 * ( count_one + count_two ) ) ; } } } } }"],"bleu":0.017598144899322606,"rouge_l":0.17876166780770453}
{"id":202,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . io . * ; import java . util . * ; import static java . lang . Math . * ;   public class LipschitzSequenceMaxIslands { public static void main ( String [ ] args ) { FastScanner sc = new FastScanner ( ) ; PrintWriter out = new PrintWriter ( System . out ) ; int N = sc . nextInt ( ) ; int Q = sc . nextInt ( ) ; int [ ] a = new int [ N ] ; int [ ] diff = new int [ N - 1 ] ; Arrays . setAll ( a , i -> sc . nextInt ( ) ) ; Arrays . setAll ( diff , i -> abs ( a [ i + 1 ] - a [ i ] ) ) ; int [ ] [ ] bounds = new int [ 2 ] [ N ] ; ArrayDeque < Integer > decr = new ArrayDeque < > ( ) ; for ( int i = 0 ; i < N - 1 ; i ++ ) {","import java . io . * ; import java . util . * ; import static java . lang . Math . * ;   public class LipschitzSequenceMaxIslands { public static void main ( String [ ] args ) { FastScanner sc = new FastScanner ( ) ; PrintWriter out = new PrintWriter ( System . out ) ; int N = sc . nextInt ( ) ; int Q = sc . nextInt ( ) ; int [ ] a = new int [ N ] ; int [ ] diff = new int [ N - 1 ] ; Arrays . setAll ( a , i -> sc . nextInt ( ) ) ; Arrays . setAll ( diff , i -> abs ( a [ i + 1 ] - a [ i ] ) ) ; int [ ] [ ] bounds = new int [ 2 ] [ N ] ; ArrayDeque < Integer > decr = new ArrayDeque < > ( ) ; for ( int i = 0 ; i < N - 1 ; i ++ ) {"],"bleu":0.03726059510555052,"rouge_l":0.25617588932806323}
{"id":203,"predictions":["import java . io . * ; import java . util . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) throws java . lang . Exception { Reader pm = new Reader ( ) ;"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Arrays ; import java . util . Scanner ;   public class _0697IntegerPoints {   public static void main ( String [ ] args ) throws NumberFormatException , IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int cases = Integer . parseInt ( br . readLine ( ) ) ; while ( cases > 0 ) { int n = Integer . parseInt ( br . readLine ( ) ) ; String [ ] arr = new String [ n ] ; arr = br . readLine ( ) . trim ( ) . split ( \" ▁ \" ) ; int m = Integer . parseInt ( br . readLine ( ) ) ; String [ ] arr1 = new String [ m ] ; arr1 = br . readLine ( ) . trim ( ) . split ( \" ▁ \" ) ; long count = 0 ; long even1 = 0 ; long even2 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int val = Integer . parseInt ( arr [ i ] ) ; if ( val % 2 == 0 ) even1 ++ ; } for ( int i = 0 ; i < m ; i ++ ) { int val = Integer . parseInt ( arr1 [ i ] ) ; if ( val % 2 == 0 ) even2 ++ ; } count += even1 * even2 ; count += ( n - even1 ) * ( m - even2 ) ; System . out . println ( count ) ; cases -- ; } }   }","import java . util . * ; public class Solution { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; int t = s . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int n = s . nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int j = 0 ; j < n ; j ++ ) a [ j ] = s . nextInt ( ) ; int m = s . nextInt ( ) ; int b [ ] = new int [ m ] ; for ( int k = 0 ; k < m ; k ++ ) b [ k ] = s . nextInt ( ) ; long even = 0 , odd = 0 , even1 = 0 , odd1 = 0 ; for ( int d = 0 ; d < n ; d ++ ) { if ( a [ d ] % 2 == 0 ) even ++ ; else odd ++ ; } for ( int d1 = 0 ; d1 < m ; d1 ++ ) { if ( b [ d1 ] % 2 == 0 ) even1 ++ ; else odd1 ++ ; } long ans = even * even1 + odd * odd1 ; System . out . println ( ans ) ; ans = 0 ; } } }","import java . util . * ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { long n = sc . nextLong ( ) ; long p1 = 0 , p2 = 0 , q1 = 0 , q2 = 0 ; for ( int j = 0 ; j < n ; j ++ ) { long n1 = sc . nextLong ( ) ; if ( n1 % 2 == 0 ) { p1 ++ ; } else { q1 ++ ; } } long m = sc . nextLong ( ) ; for ( int j = 0 ; j < m ; j ++ ) { long m1 = sc . nextLong ( ) ; if ( m1 % 2 == 0 ) { p2 ++ ; } else { q2 ++ ; } } long total = ( ( p1 * p2 ) + ( q1 * q2 ) ) ; System . out . println ( total ) ; } } }"],"bleu":0.02394217714652743,"rouge_l":0.22787753182744386}
{"id":204,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["# include < iostream > # include < vector > # include < iomanip > # include < cstring > # include < string . h > # include < iterator > # include < math . h > # include < set > # include < queue > # include < stack > # include < algorithm > # include < tuple > # include < limits . h > # include < string > # include < bitset > # include < map > # include < numeric > # include < unordered_map >   # define endl cout << \" \\n \" # define lli long long int # define ld long double # define M_PI ( 3.14159265358979323846264338327950288 ) # define MOD ( 1000000007 )   using namespace std ;  "],"bleu":0.007941879042797475,"rouge_l":0.06900452488687782}
{"id":205,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ;   public class A { public static void main ( String [ ] args ) { List < String > pre = new ArrayList < > ( ) ; List < String > post = new ArrayList < > ( ) ; Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { pre . add ( sc . next ( ) ) ; post . add ( sc . next ( ) ) ; }","import java . io . * ; import java . math . BigInteger ; import java . util . * ; import java . util . StringTokenizer ;   public class Main2 {   public static void main ( String [ ] args ) throws IOException { FastReader fr = new FastReader ( ) ; PrintWriter pw = new PrintWriter ( System . out ) ;   int N = fr . nextInt ( ) ; HashMap < String , String > map = new HashMap < > ( ) ;   for ( int i = 0 ; i < N ; ++ i ) { String first = fr . next ( ) , second = fr . next ( ) ; if ( map . get ( first ) == null ) map . put ( second , first ) ; else { String old = map . get ( first ) ; map . put ( second , old ) ; map . put ( first , null ) ; } }   int n = 0 ; for ( String s : map . keySet ( ) ) if ( map . get ( s ) != null ) n ++ ; pw . println ( n ) ;   for ( String s : map . keySet ( ) ) if ( map . get ( s ) != null ) pw . println ( map . get ( s ) + \" ▁ \" + s ) ;   pw . close ( ) ; }   static class FastReader { BufferedReader br ; StringTokenizer st ;   public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; }   String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   long nextLong ( ) { return Long . parseLong ( next ( ) ) ; }   double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; }   String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } st = null ; return str ; } }   }","import java . util . Scanner ;   public class Demo01 { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String [ ] [ ] names = new String [ 1000 ] [ 2 ] ; int q = sc . nextInt ( ) ; int num = 0 ; for ( int i = 0 ; i < q ; i ++ ) { String originalName = sc . next ( ) ; String newName = sc . next ( ) ; boolean isExist = false ; int j ; for ( j = 0 ; j < num ; j ++ ) { if ( names [ j ] [ 1 ] . equals ( originalName ) ) { isExist = true ; break ; } } if ( isExist ) { names [ j ] [ 1 ] = newName ; } else { names [ num ] [ 0 ] = originalName ; names [ num ] [ 1 ] = newName ; num ++ ; } } System . out . println ( num ) ; for ( int i = 0 ; i < num ; i ++ ) { System . out . println ( names [ i ] [ 0 ] + \" ▁ \" + names [ i ] [ 1 ] ) ; } }   }  ","import java . util . HashMap ; import java . util . HashSet ; import java . util . Map ; import java . util . Scanner ; import java . util . Set ;   public class MishaAndChangingHandles {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int q = sc . nextInt ( ) ; Map < String , String > map = new HashMap < String , String > ( ) ; Set < String > newSet = new HashSet < String > ( ) ; String OLD , NEW ; while ( q -- > 0 ) { OLD = sc . next ( ) ; NEW = sc . next ( ) ; map . put ( OLD , NEW ) ; newSet . add ( NEW ) ; } Map < String , String > ans = new HashMap < > ( ) ; String curr ; for ( String key : map . keySet ( ) ) { if ( newSet . contains ( key ) ) continue ; curr = map . get ( key ) ; while ( map . containsKey ( curr ) ) curr = map . get ( curr ) ; ans . put ( key , curr ) ; } System . out . println ( ans . size ( ) ) ; for ( String key : ans . keySet ( ) ) { System . out . println ( key + \" ▁ \" + ans . get ( key ) ) ; } sc . close ( ) ; } }","import java . util . * ;   public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int q = input . nextInt ( ) ; input . nextLine ( ) ; HashMap < String , String > map = new HashMap ( ) ; int i ; for ( i = 0 ; i < q ; i ++ ) { addOrReplace ( map , input . next ( ) , input . next ( ) ) ; input . nextLine ( ) ; } System . out . println ( map . size ( ) ) ; Iterator it = map . entrySet ( ) . iterator ( ) ; while ( it . hasNext ( ) ) { Map . Entry pair = ( Map . Entry ) it . next ( ) ; System . out . println ( pair . getValue ( ) + \" ▁ \" + pair . getKey ( ) ) ; it . remove ( ) ; } } private static void addOrReplace ( HashMap < String , String > map , String old , String _new ) { if ( map . containsKey ( old ) ) { String first = map . get ( old ) ; map . remove ( old ) ; map . put ( _new , first ) ; } else { map . put ( _new , old ) ; } } }"],"bleu":0.1598805808740144,"rouge_l":0.2781247912352195}
{"id":206,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . io . File ; import java . io . FileNotFoundException ; import java . io . IOException ; import java . io . PrintWriter ; import java . util . * ;   public class Main { public static void main ( String [ ] args ) throws FileNotFoundException { Scanner input = new Scanner ( System . in ) ; int a = input . nextInt ( ) ; int b = input . nextInt ( ) ; int temp = 0 ; int i = 1 ; while ( a >= 0 && b >= 0 ) { if ( temp == 0 ) { a -= i ; if ( a < 0 ) { System . out . println ( \" Vladik \" ) ; return ; } temp = ++ temp % 2 ; } else if ( temp == 1 ) { b -= i ; if ( b < 0 ) { System . out . println ( \" Valera \" ) ; return ; } temp = ++ temp % 2 ; } i ++ ; } } }","import java . io . FileInputStream ; import java . io . FileNotFoundException ; import java . io . IOException ; import java . io . PrintWriter ; import java . util . Arrays ; import java . util . Collection ; import java . util . List ; import java . util . Scanner ; import java . util . function . Function ; import java . util . stream . Collectors ; public class _p000811A { static public void main ( final String [ ] args ) throws IOException { p000811A . _main ( args ) ; }","import java . util . Scanner ;   public class NewMain4 {   public static void main ( String [ ] args ) {","  import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collections ; import java . util . Scanner ;    @ SuppressWarnings ( \" unused \" ) public class A { public static Scanner scan = new Scanner ( System . in ) ; public static void solve ( ) { long a = scan . nextLong ( ) ; long b = scan . nextLong ( ) ; int max = 1000000010 ; int i = 1 ; while ( true ) { a -= i ++ ; b -= i ++ ; if ( a < 0 ) { System . out . println ( \" Vladik \" ) ; break ; } if ( b < 0 ) { System . out . println ( \" Valera \" ) ; break ; } } } public static void main ( String [ ] args ) { solve ( ) ; scan . close ( ) ; }   }  ","  import java . util . Scanner ;   public class CF7 { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long a = sc . nextLong ( ) ; long b = sc . nextLong ( ) ;   int i = 1 ; while ( true ) { if ( i > a ) { System . out . println ( \" Vladik \" ) ; break ; } else { a -= i ; i ++ ; }   if ( i > b ) { System . out . println ( \" Valera \" ) ; break ; } else { b -= i ; i ++ ; } }   }   }"],"bleu":0.5141327249677666,"rouge_l":0.5746783088235293}
{"id":207,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . io . * ; import java . util . Arrays ; import java . util . StringTokenizer ;","import java . util . Arrays ; import java . util . Scanner ;   public class BusRoute { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) ; Integer [ ] stations = new Integer [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { stations [ i ] = in . nextInt ( ) ; } Arrays . sort ( stations ) ; int sd = stations [ 1 ] - stations [ 0 ] ; for ( int i = 1 ; i < n - 1 ; i ++ ) { if ( stations [ i + 1 ] - stations [ i ] < sd ) { sd = stations [ i + 1 ] - stations [ i ] ; } } int count = 0 ; for ( int i = n - 1 ; i > 0 ; i -- ) { for ( int j = i - 1 ; j >= 0 ; j -- ) { if ( ( stations [ i ] - stations [ j ] ) > sd ) { break ; } if ( ( stations [ i ] - stations [ j ] ) == sd ) { count ++ ; if ( j != 0 ) { if ( stations [ j ] != stations [ j - 1 ] ) { break ; } } } } } System . out . print ( sd + \" ▁ \" + count ) ; } }","import java . util . Arrays ; import java . util . Scanner ; public class Main   { public static void main ( String args [ ] ) { Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) ; Long a [ ] = new Long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = in . nextLong ( ) ; Arrays . sort ( a ) ; int count = 0 ; long min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( Math . abs ( a [ i ] - a [ i + 1 ] ) == min ) count ++ ; if ( Math . abs ( a [ i ] - a [ i + 1 ] ) < min ) { min = Math . abs ( a [ i ] - a [ i + 1 ] ) ; count = 1 ; }   }    System . out . println ( min + \" ▁ \" + count ) ; } }"],"bleu":0.3474990313086646,"rouge_l":0.6457036114570361}
{"id":208,"predictions":["import java . util . * ; import java . io . * ; import java . math . * ; public class Main { static PrintWriter out ; static Reader in ; public static void main ( String [ ] args ) throws IOException {"],"references":["import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;  ","import java . util . Scanner ;   public class B761 {   public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int N = in . nextInt ( ) ; int L = in . nextInt ( ) ; int [ ] A = new int [ N ] ; for ( int n = 0 ; n < N ; n ++ ) { A [ n ] = in . nextInt ( ) ; } int [ ] B = new int [ N ] ; for ( int n = 0 ; n < N ; n ++ ) { B [ n ] = in . nextInt ( ) ; } boolean foundMatch = false ; for ( int shift = 0 ; shift < N ; shift ++ ) { boolean match = true ; for ( int n = 0 ; n < N ; n ++ ) { int distA = ( L + A [ ( n + 1 ) % N ] - A [ n ] ) % L ; int distB = ( L + B [ ( n + 1 + shift ) % N ] - B [ ( n + shift ) % N ] ) % L ; if ( distA != distB ) { match = false ; } } if ( match ) { foundMatch = true ; break ; } } System . out . println ( foundMatch ? \" YES \" : \" NO \" ) ; }   }","  import java . util . ArrayList ; import java . util . List ; import java . util . Scanner ;   public class Solution716B { public static void main ( String args [ ] ) { Scanner scanner = new Scanner ( System . in ) ; int l = Integer . parseInt ( scanner . nextLine ( ) . split ( \" ▁ \" ) [ 1 ] ) ; String [ ] one = scanner . nextLine ( ) . split ( \" ▁ \" ) ;   String [ ] two = scanner . nextLine ( ) . split ( \" ▁ \" ) ; List < Integer > firstStore = get ( one , l ) ; List < Integer > seconStore = get ( two , l ) ;   if ( firstStore . size ( ) != seconStore . size ( ) ) { System . out . println ( \" NO \" ) ; return ; }   while ( l -- > 0 ) {   if ( firstStore . equals ( seconStore ) ) { System . out . println ( \" YES \" ) ; return ; } Integer element = firstStore . remove ( 0 ) ; firstStore . add ( element ) ; } System . out . println ( \" NO \" ) ;   }   private static List < Integer > get ( String [ ] one , int l ) { List < Integer > tmp = new ArrayList < Integer > ( ) ;   for ( int i = 1 ; i < one . length ; i ++ ) { tmp . add ( Integer . parseInt ( one [ i ] ) - Integer . parseInt ( one [ i - 1 ] ) ) ; } tmp . add ( l - Integer . parseInt ( one [ one . length - 1 ] ) + Integer . parseInt ( one [ 0 ] ) ) ;","import java . io . BufferedReader ; import java . io . ByteArrayInputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . OutputStream ; import java . io . PrintWriter ; import java . util . StringTokenizer ;   public class TaskB { public static void main ( String [ ] args ) { InputStream inputStream ; String str = null ; if ( str == null ) { inputStream = System . in ; } else { inputStream = new ByteArrayInputStream ( str . getBytes ( ) ) ; } OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; Solver solver = new Solver ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; }   static class Solver { public void solve ( int testNumber , InputReader in , PrintWriter out ) { int numBarriers = in . nextInt ( ) ; int trackLength = in . nextInt ( ) ; int [ ] kefa = new int [ numBarriers ] ; int [ ] sasha = new int [ numBarriers ] ; int [ ] trackA = new int [ numBarriers ] ;"],"bleu":0.6767906326409759,"rouge_l":0.5270737327188939}
{"id":209,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ; public class Main {   static int civ [ ] = new int [ 1000006 + 1 ] ; static void feed ( ) { for ( int i = 0 ; i < civ . length ; i ++ ) {   civ [ i ] = 1 ; }   civ [ 0 ] = civ [ 1 ] = 0 ;   for ( int i = 2 ; i * i < civ . length ; i ++ ) { if ( civ [ i ] == 1 ) { for ( int j = i ; j * i < civ . length ; j ++ ) civ [ i * j ] = 0 ; } }   }   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; long arr [ ] = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) {   arr [ i ] = sc . nextLong ( ) ; } feed ( ) ; for ( int i = 0 ; i < n ; i ++ ) { long tp = ( long ) Math . sqrt ( arr [ i ] ) ;   if ( tp * tp == arr [ i ] && civ [ ( int ) tp ] == 1 ) { System . out . println ( \" YES \" ) ; } else System . out . println ( \" NO \" ) ;    } } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . StringTokenizer ;    public class Main { static class FastReader { BufferedReader br ; StringTokenizer st ; public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; }   }   public static boolean isPrime ( long n ) {   if ( n < 2 ) { return false ; } else if ( n == 2 ) { return true ; } else if ( n % 2 == 0 ) { return false ; } else { long sqrt = ( long ) Math . sqrt ( n ) ; for ( int i = 3 ; i <= sqrt ; i += 2 ) { if ( n % i == 0 ) { return false ; } } } return true ; }   public static void main ( String [ ] args ) { FastReader s = new FastReader ( ) ; int n = s . nextInt ( ) ; PrintWriter pw = new PrintWriter ( System . out ) ; while ( n -- > 0 ) { long num = s . nextLong ( ) ; long sqrt = ( long ) Math . sqrt ( num ) ; if ( sqrt * sqrt == num && isPrime ( sqrt ) ) { pw . println ( \" YES \" ) ; } else { pw . println ( \" NO \" ) ; } } pw . close ( ) ; } }","import java . io . * ; import java . util . * ;   public class Main { final static int finum = 1000001 ; static boolean isPrime [ ] = new boolean [ finum ] ; private void solve ( ) throws Exception { findPrime ( ) ; int n = nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { long num = nextLong ( ) ; long sqrt = ( long ) Math . sqrt ( num ) ; if ( sqrt * sqrt == num && isPrime [ ( int ) sqrt ] ) out . println ( \" YES \" ) ; else out . println ( \" NO \" ) ; } }   private void findPrime ( ) { Arrays . fill ( isPrime , true ) ; isPrime [ 0 ] = isPrime [ 1 ] = false ; for ( int i = 2 ; i * i < finum ; i ++ ) { if ( isPrime [ i ] ) { for ( int j = i * i ; j < finum ; j += i ) {"],"bleu":0.05055659627337462,"rouge_l":0.21778399552322322}
{"id":210,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Scanner ; import java . util . StringTokenizer ; import java . util . * ; import java . math . * ; public class er10a {"],"references":["  import java . util . * ; import java . lang . * ; import java . io . * ;   public class B { public static void main ( String [ ] args ) throws java . lang . Exception { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int N = Integer . parseInt ( st . nextToken ( ) ) ; st = new StringTokenizer ( br . readLine ( ) ) ; int [ ] [ ] ip = new int [ N ] [ 2 ] ; int negs = 0 ; for ( int i = 0 ; i < N ; i ++ ) { ip [ i ] [ 1 ] = i ; ip [ i ] [ 0 ] = Integer . parseInt ( st . nextToken ( ) ) ; if ( ip [ i ] [ 0 ] >= 0 ) { ip [ i ] [ 0 ] = - ip [ i ] [ 0 ] - 1 ; } if ( ip [ i ] [ 0 ] < 0 ) { negs ++ ; } }   if ( negs % 2 == 1 ) { int min = 1 , idx = - 1 ; for ( int i = 0 ; i < N ; i ++ ) { if ( min > ip [ i ] [ 0 ] ) { min = ip [ i ] [ 0 ] ; idx = i ; } } ip [ idx ] [ 0 ] = - ip [ idx ] [ 0 ] - 1 ; }    for ( int i = 0 ; i < N ; i ++ ) { System . out . print ( ip [ i ] [ 0 ] + \" ▁ \" ) ; } System . out . println ( ) ;   } }","import java . util . * ; import java . io . * ;   public class Nick_And_Array {   static class FastReader { BufferedReader br ; StringTokenizer st ;   public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; }   String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   long nextLong ( ) { return Long . parseLong ( next ( ) ) ; }   double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; }   String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; }   }   public static void shuffle ( int [ ] a ) { Random r = new Random ( ) ;   for ( int i = 0 ; i <= a . length - 2 ; i ++ ) { int j = i + r . nextInt ( a . length - i ) ;   swap ( a , i , j ) ; }   Arrays . sort ( a ) ; }   public static void swap ( int [ ] a , int i , int j ) { int temp = a [ i ] ; a [ i ] = a [ j ] ; a [ j ] = temp ; }   public static void main ( String [ ] args ) {","import java . util . * ; import java . io . * ; import java . math . BigInteger ; import java . text . * ; public class Main { static long mod = 1000_000_007 ; static long mod1 = 998244353 ; static boolean fileIO = false ; static boolean memory = true ; static FastScanner f ; static FileWriter fw ; static PrintWriter pw ; static double eps = ( double ) 1e-6 ; static long oo = Long . MAX_VALUE ;"],"bleu":0.24824259590569517,"rouge_l":0.3662197318391035}
{"id":211,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException {"],"references":["import java . util . Scanner ;   public class Solutions { static long dp [ ] [ ] ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int arr [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = sc . nextInt ( ) ; int c [ ] = new int [ n ] ; c [ n - 1 ] = arr [ n - 1 ] ; for ( int i = n - 2 ; i >= 0 ; i -- ) c [ i ] = Math . max ( c [ i + 1 ] , arr [ i ] ) ; int max = b ; for ( int i = 0 ; i < n ; i ++ ) { int temp = b % arr [ i ] + ( b \/ arr [ i ] ) * c [ i ] ; if ( temp > max ) max = temp ; } System . out . println ( max ) ; } }","  import java . io . * ; import java . util . Scanner ; import java . util . Arrays ; public class Codeforces { public static void main ( String [ ] args ) { Scanner x = new Scanner ( System . in ) ; int n = x . nextInt ( ) ; int b = x . nextInt ( ) ; int [ ] d = new int [ n ] ; for ( int k = 0 ; k < n ; k ++ ) { d [ k ] = x . nextInt ( ) ; } x . close ( ) ; int intial = 0 ; int maximum = b ; for ( int k = 0 ; k < n ; k ++ ) { for ( int j = k ; j < n ; j ++ ) { intial = b \/ d [ k ] ; int sold = b % d [ k ] ; sold += intial * d [ j ] ; if ( sold > maximum ) { maximum = sold ; } } } System . out . println ( maximum ) ; } }","import java . util . * ; import java . lang . * ;   public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; int b = scan . nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = scan . nextInt ( ) ; } int max = b ; for ( int i = 1 ; i < n ; i ++ ) { for ( int j = 0 ; j < i ; j ++ ) { int curr = ( ( b \/ a [ j ] ) * a [ i ] ) + ( b % a [ j ] ) ; max = Math . max ( curr , max ) ; } } System . out . println ( max ) ; } }","import java . util . * ; import java . lang . * ; import java . io . * ;   public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) {"],"bleu":0.7737468095529888,"rouge_l":0.6173528773501155}
{"id":212,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ;   public class Main {   public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; String s = input . next ( ) ; StringBuilder ans = new StringBuilder ( ) ; ArrayList < Integer > a1 = new ArrayList < > ( ) , a2 = new ArrayList < > ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == ' r ' ) ans . append ( ( i + 1 ) + \" \\n \" ) ; } for ( int i = s . length ( ) - 1 ; i >= 0 ; i -- ) { if ( s . charAt ( i ) == ' l ' ) ans . append ( ( i + 1 ) + \" \\n \" ) ; } System . out . println ( ans ) ;","import java . util . * ; import java . io . * ; import java . math . * ;   public class Practice   { static FastReader sc = new FastReader ( ) ; static int mod = ( int ) Math . pow ( 10 , 9 ) + 7 ;   public static void main ( String [ ] args ) { int ttt = 1 ;","import java . util . * ; import java . io . * ; import java . math . * ;  ","import java . util . * ;   public class Main {   public static void main ( String args [ ] ) { Scanner scn = new Scanner ( System . in ) ; String s = scn . next ( ) ; int n = s . length ( ) ;   int ans [ ] = new int [ n ] ; int sn = 1 ;   int l = 0 , r = n - 1 ; while ( sn <= n ) { if ( s . charAt ( sn - 1 ) == ' l ' ) { ans [ r -- ] = sn ++ ; } else { ans [ l ++ ] = sn ++ ; } } StringBuilder sb = new StringBuilder ( ) ; for ( int v : ans ) sb . append ( v + \" \\n \" ) ; System . out . print ( sb ) ; } }","import java . util . * ;   public class Main { public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } void run ( ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; Stack < Integer > L = new Stack < > ( ) ; Stack < Integer > R = new Stack < > ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == ' l ' ) L . push ( i + 1 ) ; else R . push ( i + 1 ) ; } while ( ! R . isEmpty ( ) ) { L . push ( R . pop ( ) ) ; } StringBuilder ans = new StringBuilder ( ) ; while ( ! L . isEmpty ( ) ) { ans . append ( L . pop ( ) ) . append ( \" \\n \" ) ; } System . out . print ( ans ) ; } }"],"bleu":0.3637485385728273,"rouge_l":0.6752401106951001}
{"id":213,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collections ; import java . util . HashMap ; import java . util . Scanner ; import java . util . TreeMap ; import java . util . TreeSet ;    public class Main {   public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int x = input . nextInt ( ) ; int t = input . nextInt ( ) ; int a = input . nextInt ( ) ; int b = input . nextInt ( ) ; int da = input . nextInt ( ) ; int db = input . nextInt ( ) ; if ( x == 0 ) { System . out . println ( \" YES \" ) ; return ; } for ( int i = 0 ; i < t ; i ++ ) { if ( ( a - da * i ) == x ) { System . out . println ( \" YES \" ) ; return ; } } for ( int i = 0 ; i < t ; i ++ ) { if ( ( b - db * i ) == x ) { System . out . println ( \" YES \" ) ; return ; } } for ( int i = 0 ; i < t ; i ++ ) { for ( int j = 0 ; j < t ; j ++ ) { if ( ( a - da * i ) + ( b - db * j ) == x ) { System . out . println ( \" YES \" ) ; return ; } } } for ( int i = t - 1 ; i >= 0 ; i -- ) { for ( int j = 0 ; j < t ; j ++ ) { if ( ( a - da * i ) + ( b - db * j ) == x ) { System . out . println ( \" YES \" ) ; return ; } } } System . out . println ( \" NO \" ) ; } }","import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . StringTokenizer ; import java . io . IOException ; import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . InputStream ;   public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; ATwoProblems solver = new ATwoProblems ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; }   static class ATwoProblems { public void solve ( int testNumber , InputReader in , PrintWriter out ) { int points = in . nextInt ( ) ; int t = in . nextInt ( ) ; int a = in . nextInt ( ) ; int b = in . nextInt ( ) ; int ta = in . nextInt ( ) ; int tb = in . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { for ( int j = 0 ; j < t ; j ++ ) { if ( points == a - i * ta + b - j * tb || ( points == 0 ) || points == a - ta * i || points == b - tb * j ) { out . println ( \" YES \" ) ; return ; } } } out . println ( \" NO \" ) ;   }   }   static class InputReader { public BufferedReader reader ; public StringTokenizer tokenizer ;   public InputReader ( InputStream stream ) { reader = new BufferedReader ( new InputStreamReader ( stream ) , 32768 ) ; tokenizer = null ; }   public String next ( ) { while ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( ) ; }   public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   } }  ","import java . util . Scanner ;   public class A203 {   public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int X = in . nextInt ( ) ; int T = in . nextInt ( ) ; int A = in . nextInt ( ) ; int B = in . nextInt ( ) ; int DA = in . nextInt ( ) ; int DB = in . nextInt ( ) ; boolean possible = ( X == 0 ) ; for ( int a = 0 ; a < T ; a ++ ) { int scoreA = A - a * DA ; for ( int b = 0 ; b < T ; b ++ ) { int scoreB = B - b * DB ; int scoreBoth = scoreA + scoreB ; if ( scoreA == X || scoreB == X || scoreBoth == X ) { possible = true ; } } } System . out . println ( possible ? \" YES \" : \" NO \" ) ; }   }","  import java . io . * ; import java . util . * ; public class S { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int x = in . nextInt ( ) , t = in . nextInt ( ) , a = in . nextInt ( ) , b = in . nextInt ( ) , da = in . nextInt ( ) , db = in . nextInt ( ) ; int p = a , q = b , temp = 0 ; if ( x == 0 ) System . out . print ( \" YES \" ) ; else { l : for ( int i = 0 ; i < t ; i ++ ) { a = a - ( i * da ) ; if ( a == x ) { temp = 1 ; break ; } if ( a < 0 ) a = 0 ; for ( int j = 0 ; j < t ; j ++ ) { b = b - ( j * db ) ; if ( b == x ) { temp = 1 ; break ; } if ( b < 0 ) b = 0 ; int sum = a + b ; if ( sum == x ) { temp = 1 ; break l ; } b = q ; } a = p ; } if ( temp == 1 ) System . out . print ( \" YES \" ) ; else System . out . print ( \" NO \" ) ; } } }","import java . io . File ; import java . io . FileNotFoundException ; import java . io . PrintWriter ; import java . util . Arrays ; import java . util . Scanner ; import java . util . Stack ; public class test { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ;    int x = sc . nextInt ( ) , t = sc . nextInt ( ) , a = sc . nextInt ( ) , b = sc . nextInt ( ) , da = sc . nextInt ( ) , db = sc . nextInt ( ) ; boolean found = x == 0 ; for ( int xa = 0 ; xa < t ; xa ++ ) { if ( a - da * xa == x ) found = true ; for ( int xb = 0 ; xb < t ; xb ++ ) { int points = ( a - da * xa ) + ( b - db * xb ) ; if ( points == x || b - db * xb == x ) { found = true ; } } } if ( found ) { System . out . println ( \" YES \" ) ; } else System . out . println ( \" NO \" ) ; } }"],"bleu":0.0543663099518591,"rouge_l":0.23313665012739707}
{"id":214,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ; public class Solution { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; int n = s . nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = s . nextInt ( ) ; Arrays . sort ( a ) ; boolean v = false ; for ( int j = 0 ; j < n - 2 ; j ++ ) { if ( ( a [ j ] + a [ j + 1 ] ) > a [ j + 2 ] ) { v = true ; break ; } } if ( v == false ) System . out . println ( \" NO \" ) ; else System . out . println ( \" YES \" ) ; } }","import java . util . Scanner ; import java . util . Arrays ; public class Section { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int s = sc . nextInt ( ) , f = 0 ; int [ ] m = new int [ s ] ; boolean r = false ; for ( int i = 0 ; i < s ; i ++ ) { m [ i ] = sc . nextInt ( ) ; } Arrays . sort ( m ) ; for ( int i = 1 ; i < s - 1 ; i ++ ) { if ( m [ i ] + m [ i - 1 ] > m [ i + 1 ] ) { r = true ; break ; } } if ( r ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ; } }  ","import java . util . Scanner ; import java . util . Arrays ; public class Section { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int s = sc . nextInt ( ) , f = 0 ; int [ ] m = new int [ s ] ; boolean r = false ; for ( int i = 0 ; i < s ; i ++ ) { m [ i ] = sc . nextInt ( ) ; } Arrays . sort ( m ) ; if ( s == 3 ) { if ( m [ 0 ] + m [ 1 ] > m [ 2 ] && m [ 1 ] + m [ 2 ] > m [ 0 ] && m [ 0 ] + m [ 2 ] > m [ 1 ] ) { r = true ; } } else { for ( int i = 1 ; i < s - 1 ; i ++ ) { if ( m [ i ] + m [ i - 1 ] > m [ i + 1 ] ) { r = true ; break ; } } } if ( r ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ; } }  ","import java . util . * ; import java . util . Scanner ; import java . io . * ; import javax . lang . model . util . ElementScanner6 ; import static java . lang . System . out ; import java . util . Stack ; import java . util . Queue ; import java . util . LinkedList ;   public class B766M2 {   static int mod = ( int ) ( 1e9 + 7 ) ; static long MOD = ( long ) ( 1e9 + 7 ) ; static FastReader in = new FastReader ( ) ; static PrintWriter pr = new PrintWriter ( new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ) ; public static void main ( String args [ ] ) {   int tc = 1 ;"],"bleu":0.09271087133707218,"rouge_l":0.3579369981470043}
{"id":215,"predictions":["import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;"],"references":["import java . lang . * ; import java . util . * ;   public class Main {   public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; char [ ] a = sc . nextLine ( ) . toCharArray ( ) ; char s = a [ 0 ] ; for ( int i = 0 ; i < a . length ; i ++ ) { if ( s < a [ i ] ) s = a [ i ] ; } int count = 0 ; for ( int i = 0 ; i < a . length ; i ++ ) { if ( a [ i ] == s ) { count ++ ; } } for ( int i = 0 ; i < count ; i ++ ) System . out . print ( s ) ;   } }","import java . util . Scanner ;   public class NewMain1 {   public static void main ( String [ ] args ) {","import java . util . * ; public class Llps {   public static void main ( String [ ] args ) {","import java . util . * ;   public class question { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; HashMap < Character , Integer > h = new HashMap < > ( ) ; int large = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { char ch = s . charAt ( i ) ; if ( ! h . containsKey ( ch ) ) h . put ( ch , 1 ) ; else { int v = h . get ( ch ) ; h . put ( ch , v + 1 ) ; } int x = ch ; if ( large < x ) large = x ; }   for ( int i = 0 ; i < h . get ( ( char ) large ) ; i ++ ) System . out . print ( ( char ) large ) ; } }"],"bleu":0.3029847338492217,"rouge_l":0.37209214215351977}
{"id":216,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ; public class DesignTutorialLearnFromMath { public static void main ( String [ ] args ) {   Scanner sc = new Scanner ( System . in ) ; int val = sc . nextInt ( ) ;   int val1 ; if ( val % 2 == 0 ) { val1 = 8 ; } else { val1 = 9 ;   } System . out . println ( val1 + \" ▁ \" + ( val - val1 ) ) ; } }","import java . io . * ; import java . util . * ; public class Solution { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; int n = s . nextInt ( ) ; int res = 0 ; if ( n % 2 == 0 ) { res = n - 4 ; System . out . println ( 4 + \" ▁ \" + res ) ; } else { res = n - 9 ; System . out . println ( 9 + \" ▁ \" + res ) ; } } }","import java . util . Scanner ;   public class Code { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int x = sc . nextInt ( ) ; if ( x % 2 == 0 ) { System . out . println ( x - 4 + \" ▁ 4\" ) ; } else { System . out . println ( x - 9 + \" ▁ 9\" ) ; } } }","import java . util . Scanner ;   public class LearnFromMath { public static boolean isPrime ( int n ) { if ( n <= 1 ) { return false ; } if ( n == 2 ) { return true ; } for ( int i = 3 ; i < n ; i += 2 ) { if ( n % i == 0 ) { return false ; } } return true ; }   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ;   int n = sc . nextInt ( ) ;   if ( n % 2 == 0 ) { int x = n \/ 2 ; int y = n \/ 2 ;","import java . util . * ;   public class DesignTutorial { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) ; if ( n % 2 == 0 ) { System . out . println ( \"8 ▁ \" + ( n - 8 ) ) ; } else { System . out . println ( \"9 ▁ \" + ( n - 9 ) ) ; } } }"],"bleu":0.17519860735927326,"rouge_l":0.31653076352853965}
{"id":217,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ;"],"references":["import java . util . * ; import java . io . * ;   public class Main { private StreamTokenizer in ; private PrintWriter out ;   public static void main ( String [ ] args ) throws IOException { new Main ( ) . run ( ) ; }   private String substring ( String str , int idx , int len ) { return str . substring ( idx , str . offsetByCodePoints ( idx , len ) ) ; }   private void run ( ) throws IOException { in = new StreamTokenizer ( new BufferedReader ( new InputStreamReader ( System . in ) ) ) ; out = new PrintWriter ( System . out ) ;   solve ( ) ;   out . flush ( ) ; }   private int nextInt ( ) throws IOException { in . nextToken ( ) ;   return ( int ) in . nval ; }   private String nextString ( ) throws IOException { in . nextToken ( ) ;   return in . sval ; }   private void solve ( ) throws IOException { final int rows = nextInt ( ) ; final int cols = nextInt ( ) ;  ","import java . util . * ; import java . io . * ;   public class Main { private StreamTokenizer in ; private PrintWriter out ;   public static void main ( String [ ] args ) throws IOException { new Main ( ) . run ( ) ; }   private String substring ( String str , int idx , int len ) { return str . substring ( idx , str . offsetByCodePoints ( idx , len ) ) ; }   private void run ( ) throws IOException { in = new StreamTokenizer ( new BufferedReader ( new InputStreamReader ( System . in ) ) ) ; out = new PrintWriter ( System . out ) ;   solve ( ) ;   out . flush ( ) ; }   private int nextInt ( ) throws IOException { in . nextToken ( ) ;   return ( int ) in . nval ; }   private String nextString ( ) throws IOException { in . nextToken ( ) ;   return in . sval ; }   private void solve ( ) throws IOException { final int rows = nextInt ( ) ; final int cols = nextInt ( ) ;  ","import java . math . BigInteger ; import java . util . * ;   public class Example { public static void main ( String [ ] args ) {    Scanner sc = new Scanner ( System . in ) ;    int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; String [ ] ans = new String [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { ans [ i ] = sc . next ( ) ; } int count = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) {   for ( int j = 0 ; j < m - 1 ; j ++ ) { int f = 0 ; int a = 0 ; int c = 0 ; int e = 0 ; char cc = ans [ i ] . charAt ( j ) ; char cc1 = ans [ i + 1 ] . charAt ( j ) ; char cc2 = ans [ i + 1 ] . charAt ( j + 1 ) ; char cc3 = ans [ i ] . charAt ( j + 1 ) ; char [ ] arr = new char [ 4 ] ; arr [ 0 ] = cc ; arr [ 1 ] = cc1 ; arr [ 2 ] = cc2 ; arr [ 3 ] = cc3 ; Arrays . sort ( arr ) ; String ss = String . valueOf ( String . valueOf ( arr [ 0 ] ) + String . valueOf ( arr [ 1 ] ) + String . valueOf ( arr [ 2 ] ) + arr [ 3 ] ) ;"],"bleu":0.08727543934457485,"rouge_l":0.3338918677390527}
{"id":218,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException {"],"references":["import java . awt . * ; import java . util . * ; import java . io . * ;   public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; StringBuilder sb = new StringBuilder ( ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) , k = sc . nextInt ( ) ; int [ ] arr = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) arr [ i ] = sc . nextInt ( ) ; boolean [ ] peak = new boolean [ n + 1 ] ; for ( int i = 2 ; i < n ; i ++ ) { if ( arr [ i ] > arr [ i - 1 ] && arr [ i ] > arr [ i + 1 ] ) peak [ i ] = true ; } int count = 0 ; for ( int i = 2 ; i < k ; i ++ ) { if ( peak [ i ] ) count ++ ; } int max = count ; int l = 1 ; int L = 2 , R = k + 1 ; while ( R <= n ) { if ( peak [ L ] ) count -- ; if ( peak [ R - 1 ] ) count ++ ; if ( count > max ) { max = count ; l = L ; } R ++ ; L ++ ; } sb . append ( ( max + 1 ) + \" ▁ \" + l + \" \\n \" ) ; } System . out . println ( sb ) ; } }","import java . io . BufferedReader ; import java . io . File ; import java . io . FileWriter ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . math . BigInteger ; import java . util . * ;   public class Main {   public static void main ( String [ ] args ) throws IOException {   FastScanner input = new FastScanner ( ) ; int tc = input . nextInt ( ) ; while ( tc -- > 0 ) { int n = input . nextInt ( ) ; int k = input . nextInt ( ) ; long a [ ] = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = input . nextLong ( ) ;   } int sum [ ] = new int [ n ] ; for ( int i = 1 ; i < n ; i ++ ) { sum [ i ] += sum [ i - 1 ] ; if ( i + 1 < n && a [ i - 1 ] < a [ i ] && a [ i ] > a [ i + 1 ] ) { sum [ i ] ++ ; } }","import java . util . Scanner ;   public class Pracise1 {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; long arr [ ] = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = sc . nextLong ( ) ; int mx = - 1 , cnt = 0 , j = 1 ; for ( int i = 1 ; i < k - 1 ; i ++ ) { if ( arr [ i ] > arr [ i - 1 ] && arr [ i ] > arr [ i + 1 ] ) cnt ++ ; } mx = cnt ; int ind = j ; for ( int i = k - 1 ; i < n - 1 ; i ++ ) { j ++ ; if ( arr [ i ] > arr [ i - 1 ] && arr [ i ] > arr [ i + 1 ] ) cnt ++ ; if ( arr [ ( i - k + 2 ) ] > arr [ ( i - k + 2 ) - 1 ] && arr [ ( i - k + 2 ) ] > arr [ ( i - k + 2 ) + 1 ] ) cnt -- ; if ( cnt > mx ) { mx = cnt ; ind = j ; } } System . out . print ( mx + 1 + \" ▁ \" ) ; System . out . println ( ind ) ; } } }","import java . util . * ; import java . io . * ;   public class Practice { BufferedReader br ; PrintWriter out ; StringTokenizer st ; boolean eof ; private static final long MOD = 1000L * 1000L * 1000L + 7 ; private static final int [ ] dx = { 0 , - 1 , 0 , 1 } ; private static final int [ ] dy = { 1 , 0 , - 1 , 0 } ; private static final String yes = \" Yes \" ; private static final String no = \" No \" ;   void solve ( ) {","import java . io . * ; import java . util . * ;   public class Main {   public static void main ( String [ ] args ) throws IOException { FastReader in = new FastReader ( System . in ) ; PrintWriter pw = new PrintWriter ( System . out ) ; int t = in . nextInt ( ) ; for ( int t1 = 0 ; t1 < t ; t1 ++ ) { int n = in . nextInt ( ) , k = in . nextInt ( ) ; int [ ] arr = new int [ n + 2 ] ; for ( int i = 1 ; i <= n ; i ++ ) arr [ i ] = in . nextInt ( ) ; pw . println ( solve ( arr , n , k ) ) ; } pw . close ( ) ; }   static String solve ( int [ ] arr , int n , int k ) { int res = 0 ; int [ ] freq = new int [ n + 2 ] , cnt = new int [ n + 2 ] ; for ( int i = 2 ; i <= n - 1 ; i ++ ) { if ( arr [ i ] > arr [ i - 1 ] && arr [ i ] > arr [ i + 1 ] ) { cnt [ i ] ++ ; freq [ i ] ++ ; }   }"],"bleu":0.08615451547953641,"rouge_l":0.2757685352622062}
{"id":219,"predictions":["import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;"],"references":["import java . util . * ;   public class codeforces { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String x = \" \" ;   int n = sc . nextInt ( ) ; String s = sc . next ( ) ;   ArrayList < String > gram = new ArrayList < String > ( ) ; ArrayList < Integer > count = new ArrayList < Integer > ( ) ;   for ( int i = 0 ; i < n - 1 ; i ++ ) { x = \" \" + s . charAt ( i ) + s . charAt ( i + 1 ) ; boolean flag = false ; for ( int j = 0 ; j < gram . size ( ) ; j ++ ) { if ( x . equals ( gram . get ( j ) ) ) { count . set ( j , count . get ( j ) + 1 ) ; flag = true ; } } if ( flag == false ) { gram . add ( x ) ; count . add ( 1 ) ; } } String ans = \" \" ; int start = 0 ; for ( int i = 0 ; i < count . size ( ) ; i ++ ) { if ( count . get ( i ) > start ) { start = count . get ( i ) ; ans = gram . get ( i ) ; }   } System . out . println ( ans ) ;     } }","import java . util . * ;   public class CodeForces { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; String s = sc . next ( ) ; String s1 = \" \" ; int max = 0 ; boolean isTrue = false ; for ( int i = 0 ; i < t - 1 ; i ++ ) { String str = s . substring ( i , i + 2 ) ; int count = 0 ; for ( int j = 0 ; j < t - 1 ; j ++ ) { if ( s . substring ( j , j + 2 ) . equals ( str ) ) { count ++ ; } if ( count > max ) { isTrue = true ; s1 = str ; max = count ; count = 0 ; } } } if ( isTrue ) { System . out . println ( s1 ) ; } else { System . out . println ( s . substring ( 0 , 2 ) ) ; } } }","import java . util . Scanner ;    public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; String [ ] ss = new String [ n - 1 ] ; for ( int i = 0 ; i < ss . length ; i ++ ) { ss [ i ] = \" \" ; } int [ ] book = new int [ n - 1 ] ; char [ ] a = s . toCharArray ( ) ; for ( int i = 0 ; i < a . length - 1 ; i ++ ) { for ( int j = 0 ; j <= i ; j ++ ) { if ( ss [ j ] == \" \" ) { ss [ j ] += a [ i ] ; ss [ j ] += a [ i + 1 ] ; book [ j ] ++ ; break ; } else if ( a [ i ] == ss [ j ] . charAt ( 0 ) && a [ i + 1 ] == ss [ j ] . charAt ( 1 ) ) { book [ j ] ++ ; break ; } } } int max = book [ 0 ] ; int temp = 0 ; for ( int i = 0 ; i < book . length ; i ++ ) { if ( max < book [ i ] ) { max = book [ i ] ; temp = i ; } } System . out . println ( ss [ temp ] ) ; } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . HashMap ; import java . util . Map ; import java . util . StringTokenizer ; import java . util . TreeMap ; public class TwoGram { public static void main ( String [ ] args ) { FastScanner fs = new FastScanner ( ) ; int T = 1 ; PrintWriter out = new PrintWriter ( System . out ) ; for ( int tt = 0 ; tt < T ; tt ++ ) { int n = fs . nextInt ( ) ; String s = fs . next ( ) ; HashMap < String , Integer > hs = new HashMap < > ( ) ; for ( int i = 0 ; i < n - 1 ; i ++ ) { String str = s . substring ( i , i + 2 ) ; if ( hs . containsKey ( str ) ) { hs . put ( str , hs . get ( str ) + 1 ) ; } else { hs . put ( str , 1 ) ; } } int count = 0 ; String ans = \" \" ; for ( Map . Entry m : hs . entrySet ( ) ) { if ( Integer . parseInt ( m . getValue ( ) . toString ( ) ) > count ) { count = Integer . parseInt ( m . getValue ( ) . toString ( ) ) ; ans = m . getKey ( ) . toString ( ) ; } } System . out . println ( ans ) ; } out . close ( ) ; } static class FastScanner { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( \" \" ) ; public String next ( ) { while ( ! st . hasMoreElements ( ) ) try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return st . nextToken ( ) ; } int [ ] readArray ( int n ) { int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = nextInt ( ) ; return a ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } } }"],"bleu":0.018075060803789386,"rouge_l":0.16577291421429713}
{"id":220,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException {"],"references":["import java . io . File ; import java . util . Scanner ; import java . util . StringTokenizer ;   public class p007 { public static void main ( String args [ ] ) throws Exception { StringTokenizer stok = new StringTokenizer ( new Scanner ( System . in ) . useDelimiter ( \" \\\\ A \" ) . next ( ) ) ; StringBuilder sb = new StringBuilder ( ) ; char [ ] s = new char [ ( int ) 1e7 ] ; long mod = ( long ) 1e9 + 7 ; int T = Integer . parseInt ( stok . nextToken ( ) ) ; while ( T -- > 0 ) { int x = Integer . parseInt ( stok . nextToken ( ) ) ; char [ ] ss = stok . nextToken ( ) . toCharArray ( ) ; for ( int i = 0 ; i < ss . length ; i ++ ) s [ i ] = ss [ i ] ; long n = ss . length ; boolean fl = true ; for ( int i = 0 ; i < x ; i ++ ) { int v = s [ i ] - 49 , cnt = 0 ; long d = ( n - i - 1 ) ; long nn = ( n + v * d ) % mod ; while ( ++ cnt <= v ) { if ( n <= x && fl ) { for ( int j = i + 1 ; j <= n ; j ++ ) s [ j + ( int ) ( cnt * d ) ] = s [ j ] ; } else fl = false ; } n = nn ; } sb . append ( ( n + mod ) % mod + \" \\n \" ) ; } System . out . println ( sb ) ; } }","import java . io . File ; import java . util . Scanner ; import java . util . StringTokenizer ;   public class p007 { public static void main ( String args [ ] ) throws Exception { StringTokenizer stok = new StringTokenizer ( new Scanner ( System . in ) . useDelimiter ( \" \\\\ A \" ) . next ( ) ) ; StringBuilder sb = new StringBuilder ( ) ; char [ ] s = new char [ ( int ) 1e7 ] ; long mod = ( long ) 1e9 + 7 ; int T = Integer . parseInt ( stok . nextToken ( ) ) ; while ( T -- > 0 ) { int x = Integer . parseInt ( stok . nextToken ( ) ) ; char [ ] ss = stok . nextToken ( ) . toCharArray ( ) ; for ( int i = 0 ; i < ss . length ; i ++ ) s [ i ] = ss [ i ] ; long n = ss . length ; boolean fl = true ; for ( int i = 0 ; i < x ; i ++ ) { int v = s [ i ] - 49 , cnt = 0 ; long d = ( n - i - 1 ) ; long nn = ( n + v * d ) % mod ; while ( ++ cnt <= v ) { if ( n <= x && fl ) { for ( int j = i + 1 ; j <= n ; j ++ ) s [ j + ( int ) ( cnt * d ) ] = s [ j ] ; } else fl = false ; } n = nn ; } sb . append ( ( n + mod ) % mod + \" \\n \" ) ; } System . out . println ( sb ) ; } }","import java . io . PrintWriter ; import java . util . ArrayList ; import java . util . List ; import java . util . Scanner ;   public class Main { static Scanner in ; static PrintWriter out ;   public static void main ( String [ ] args ) { in = new Scanner ( System . in ) ; out = new PrintWriter ( System . out ) ; int t = in . nextInt ( ) ; while ( t -- > 0 ) { int x = in . nextInt ( ) ; String s = in . next ( ) ; List < Character > lsb = new ArrayList < > ( ) ; for ( Character ch : s . toCharArray ( ) ) { lsb . add ( ch ) ; } long realLen = s . length ( ) ; for ( int i = 0 ; i < x ; i ++ ) { long c = lsb . get ( i ) - '0' ; if ( lsb . size ( ) < x ) { int start = i + 1 ; int end = lsb . size ( ) - 1 ; long add = c - 1 ; while ( lsb . size ( ) < x && add > 0 ) { for ( int j = start ; j <= end && lsb . size ( ) < x ; j ++ ) { lsb . add ( lsb . get ( j ) ) ; } add -- ; } } long dt = realLen - i - 1 ; realLen += ( ( c - 1 ) * dt ) ; realLen %= 1_000_000_007l ; } out . println ( ( realLen + 1_000_000_007l ) % 1_000_000_007l ) ; } out . close ( ) ; } }","import java . io . ByteArrayInputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . * ; import java . io . * ; import java . math . * ; public class Main { InputStream is ; PrintWriter out ; String INPUT = \" \" ;","# include < bits \/ stdc ++ . h > using namespace std ; # define ll long long # define F first # define S second   const ll mod = 1e9 + 7 ; string s , ens ; ll t , x , l ; ll sz = 0 ; const int N = 2e5 + 100 ;   void en ( ) { ens = s ; int i = 0 , sizee = ens . size ( ) ; string sr = \" \" ; while ( sizee < x && sizee != i ) { if ( ens [ i ] == '1' ) { i ++ ; continue ; } sr = ens . substr ( i + 1 ) ; if ( ens [ i ] == '2' ) ens += sr ; else if ( ens [ i ] == '3' ) ens += sr + sr ; i ++ ; sizee = ens . size ( ) ; } }   int main ( ) { ios :: sync_with_stdio ( 0 ) ; cin . tie ( 0 ) ; cout . tie ( 0 ) ;"],"bleu":0.30224034069602546,"rouge_l":0.3843640606767795}
{"id":221,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . io . * ; import java . util . * ;   public class Main { private static String smallest ( String a ) { if ( a . length ( ) % 2 == 1 ) { return a ; } String first = smallest ( a . substring ( 0 , a . length ( ) \/ 2 ) ) ; String second = smallest ( a . substring ( a . length ( ) \/ 2 ) ) ; if ( first . compareTo ( second ) < 0 ) { return first + second ; } return second + first ; } private static boolean equal ( String a , String b ) { return smallest ( a ) . equals ( smallest ( b ) ) ; } public static void main ( String [ ] args ) throws IOException {","import java . io . * ; import java . util . * ; import java . awt . * ;   public class Main { static HashSet < String > hs = new HashSet < > ( ) ; public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; StringBuilder sb = new StringBuilder ( ) ; String a = sc . next ( ) , b = sc . next ( ) ; if ( check ( a , b ) ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ; } static boolean check ( String a , String b ) { if ( hs . contains ( a + b ) ) return true ; if ( a . length ( ) == 1 && b . length ( ) == 1 ) { if ( a . charAt ( 0 ) == b . charAt ( 0 ) ) { return true ; } else { return false ; } } if ( a . length ( ) != b . length ( ) ) return false ; if ( a . equals ( b ) ) return true ; if ( a . length ( ) % 2 == 1 ) return false ; String a1 = a . substring ( 0 , a . length ( ) \/ 2 ) ; String a2 = a . substring ( a . length ( ) \/ 2 , a . length ( ) ) ; String b1 = b . substring ( 0 , b . length ( ) \/ 2 ) ; String b2 = b . substring ( b . length ( ) \/ 2 , b . length ( ) ) ; boolean z = ( ( check ( a1 , b1 ) && check ( a2 , b2 ) ) || ( check ( a1 , b2 ) && check ( a2 , b1 ) ) ) ; if ( z ) hs . add ( a + b ) ; return z ; } }"],"bleu":0.06683490526468673,"rouge_l":0.2439437052987772}
{"id":222,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ;"],"references":["import java . util . * ; import java . io . * ; import java . math . BigInteger ; import java . text . * ; public class Main { static long mod = 1000_000_007 ; static long mod1 = 998244353 ; static boolean fileIO = false ; static boolean memory = true ; static FastScanner f ; static PrintWriter pw ; static double eps = ( double ) 1e-6 ; static FileWriter fw ; static long oo = Long . MAX_VALUE ;","import java . util . * ;   public class Round538B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] [ ] a = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = new int [ ] { sc . nextInt ( ) , i } ; } Arrays . sort ( a , Comparator . comparingInt ( x -> - x [ 0 ] ) ) ; int [ ] set = new int [ m * k ] ; long sum = 0 ; for ( int i = 0 ; i < m * k ; i ++ ) { set [ i ] = a [ i ] [ 1 ] ; sum += a [ i ] [ 0 ] ; } Arrays . sort ( set ) ; System . out . println ( sum ) ; StringBuilder sb = new StringBuilder ( ) ; for ( int i = 1 ; i < k ; i ++ ) { sb . append ( set [ i * m - 1 ] + 1 ) . append ( \" ▁ \" ) ; } System . out . println ( sb . toString ( ) ) ; } }","import java . util . * ; import java . math . * ; import java . io . * ; import java . lang . * ;   public class Main {"],"bleu":0.7460925931189254,"rouge_l":0.5866892969191997}
{"id":223,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["  import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Scanner ; import java . util . StringTokenizer ; import java . util . * ; import java . math . * ; public class c705b {","import java . util . * ; import java . util . Scanner ; import java . io . * ; import javax . lang . model . util . ElementScanner6 ; import static java . lang . System . out ; import java . util . Stack ; import java . util . Queue ; import java . util . LinkedList ;   public class A911 {   static int mod = ( int ) ( 1e9 + 7 ) ; static long MOD = ( long ) ( 1e9 + 7 ) ; static FastReader in = new FastReader ( ) ; static PrintWriter pr = new PrintWriter ( new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ) ; public static void main ( String args [ ] ) {   int tc = 1 ;"],"bleu":0.6316841702635023,"rouge_l":0.6127464356368101}
{"id":224,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException {"],"references":["import java . util . Scanner ;   public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; sc . nextLine ( ) ; while ( t -- > 0 ) { String s1 = sc . nextLine ( ) ; StringBuilder s2 = new StringBuilder ( ) ; int cr = 0 , cs = 0 , cp = 0 ; for ( int i = 0 ; i < s1 . length ( ) ; i ++ ) { if ( s1 . charAt ( i ) == ' R ' ) { cp ++ ; } else if ( s1 . charAt ( i ) == ' P ' ) { cs ++ ; } else { cr ++ ; } } char c ; if ( cp >= cs && cp >= cr ) { c = ' P ' ; } else if ( cs >= cp && cs >= cr ) { c = ' S ' ; } else { c = ' R ' ; } for ( int i = 0 ; i < s1 . length ( ) ; i ++ ) { s2 . append ( c ) ; } System . out . println ( s2 . toString ( ) ) ; } } }  ","import java . io . BufferedReader ; import java . io . File ; import java . io . FileWriter ; import java . io . IOException ; import java . io . InputStreamReader ; import java . math . BigInteger ; import java . util . * ;   import javafx . util . Pair ;   public class Main {   public static void main ( String args [ ] ) { FastScanner input = new FastScanner ( ) ;   int tc = input . nextInt ( ) ; while ( tc -- > 0 ) { String s = input . next ( ) ; int S = 0 , P = 0 , R = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == ' S ' ) S ++ ; else if ( s . charAt ( i ) == ' R ' ) R ++ ; else P ++ ; } StringBuilder ans = new StringBuilder ( ) ; char c = ' * ' ; if ( S >= R && S >= P ) { c = ' R ' ; } else if ( P >= S && P >= R ) { c = ' S ' ; } else c = ' P ' ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { ans . append ( c ) ; } System . out . println ( ans ) ; } }   static class FastScanner {   BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( \" \" ) ;   String next ( ) { while ( ! st . hasMoreTokens ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   long nextLong ( ) {   return Long . parseLong ( next ( ) ) ; }   double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; }   String nextLine ( ) throws IOException { return br . readLine ( ) ; } }   }","import java . util . * ;    public class Main { static int [ ] nums ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; sc . nextLine ( ) ; while ( t -- > 0 ) { int [ ] cnt = new int [ 3 ] ; String s = sc . nextLine ( ) ; int len = s . length ( ) ; for ( int i = 0 ; i < len ; i ++ ) switch ( s . charAt ( i ) ) { case ' R ' : cnt [ 0 ] ++ ; break ; case ' S ' : cnt [ 1 ] ++ ; break ; case ' P ' : cnt [ 2 ] ++ ; break ; } int max = 0 ; for ( int i = 1 ; i < 3 ; i ++ ) if ( cnt [ max ] < cnt [ i ] ) max = i ; StringBuilder ret = new StringBuilder ( \" \" ) ; if ( max == 0 ) for ( int i = 0 ; i < len ; i ++ ) ret . append ( ' P ' ) ; if ( max == 1 ) for ( int i = 0 ; i < len ; i ++ ) ret . append ( ' R ' ) ; if ( max == 2 ) for ( int i = 0 ; i < len ; i ++ ) ret . append ( ' S ' ) ; System . out . println ( ret ) ; } } }  ","import java . util . Scanner ;   public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; sc . nextLine ( ) ; while ( t -- > 0 ) { String s1 = sc . nextLine ( ) ; StringBuilder s2 = new StringBuilder ( ) ; int cr = 0 , cs = 0 , cp = 0 ; for ( int i = 0 ; i < s1 . length ( ) ; i ++ ) { if ( s1 . charAt ( i ) == ' R ' ) { cp ++ ; } else if ( s1 . charAt ( i ) == ' P ' ) { cs ++ ; } else { cr ++ ; } } int c = Math . max ( cp , Math . max ( cs , cr ) ) ; if ( c == cp ) { for ( int i = 0 ; i < s1 . length ( ) ; i ++ ) s2 . append ( \" P \" ) ; } else if ( c == cs ) { for ( int i = 0 ; i < s1 . length ( ) ; i ++ ) s2 . append ( \" S \" ) ; } else { for ( int i = 0 ; i < s1 . length ( ) ; i ++ ) s2 . append ( \" R \" ) ; } System . out . println ( s2 . toString ( ) ) ; } } }"],"bleu":0.0010441866511912091,"rouge_l":0.1376057073642334}
{"id":225,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;  ","import java . io . * ; import java . util . * ; import java . math . * ;   public class Main { public static void main ( String [ ] args ) throws java . lang . Exception {","import java . util . * ;   public class CodeForces989B { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; int m = input . nextInt ( ) ; input . nextLine ( ) ; char [ ] s = input . nextLine ( ) . toCharArray ( ) ; boolean b = false ; for ( int i = 0 ; i < n - m ; i ++ ) { if ( s [ i ] == ' . ' && s [ i + m ] == ' . ' ) { s [ i ] = '0' ; s [ i + m ] = '1' ; b = true ; } else if ( s [ i ] == ' . ' ) { s [ i ] = s [ i + m ] == '0' ? '1' : '0' ; b = true ; } else if ( s [ i + m ] == ' . ' ) { s [ i + m ] = s [ i ] == '0' ? '1' : '0' ; b = true ; } else if ( s [ i ] != s [ i + m ] ) { b = true ; } } if ( b ) { for ( Character c : s ) { System . out . print ( c != ' . ' ? c : '0' ) ; } System . out . println ( ) ; } else System . out . println ( \" No \" ) ; } }"],"bleu":0.6022774485691839,"rouge_l":0.5586838534599728}
{"id":226,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; out . println ( Math . max ( a , b ) ) ; out . close ( ) ; } static int l_min ( int [ ] a ) { Arrays . sort ( a ) ; return a [ 0 ] ; } static int l_max ( int [ ] a ) { int l = a . length ; Arrays . sort ( a ) ; return a [ l - 1 ] ; } public static PrintWriter out ; public static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . util . Scanner ; public class Acm2challenge3 { public static void main ( String [ ] args ) {","import java . util . Scanner ;   public class Main { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; int t = s . nextInt ( ) ; int a ; int b ; int mn ; for ( int i = 0 ; i < t ; i ++ ) { a = s . nextInt ( ) ; b = s . nextInt ( ) ; mn = Math . min ( a , b ) ; System . out . println ( ( a ^ mn ) + ( b ^ mn ) ) ; } } }","import java . util . * ; public class sol { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int t = in . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int x = in . nextInt ( ) ; int y = in . nextInt ( ) ; System . out . println ( x ^ y ) ; } } }","import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; long a , b , t = input . nextInt ( ) ; while ( t != 0 ) { long d = 0 ; a = input . nextInt ( ) ; b = input . nextInt ( ) ; d = a ^ b ; System . out . println ( d ) ; t -- ; } } }","import java . util . Scanner ; public class Acm2challenge3 { public static void main ( String [ ] args ) {"],"bleu":0.1658336987333806,"rouge_l":0.3823673911938605}
{"id":227,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . text . * ; import java . util . * ;   public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int r = scanner . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] flag = new int [ n ] ; for ( int i = 0 ; i < n ; ++ i ) { a [ i ] = scanner . nextInt ( ) ; flag [ i ] = 0 ; } int cnt = 0 ; int begin = 0 ; if ( r - 1 < n ) begin = r - 1 ; else begin = n - 1 ; for ( int i = begin ; ; ) { if ( a [ i ] == 1 ) { cnt ++ ; flag [ i ] = 1 ; if ( i + r - 1 >= n - 1 ) break ; if ( i + 2 * r - 1 <= n - 1 ) i = i + 2 * r - 1 ; else i = n - 1 ; continue ; } while ( i >= 0 && a [ i ] == 0 && flag [ i ] == 0 ) i -- ; if ( i == - 1 || flag [ i ] == 1 ) { System . out . println ( \" - 1\" ) ; return ; } cnt ++ ; flag [ i ] = 1 ; if ( i + r - 1 >= n - 1 ) break ; if ( i + 2 * r - 1 <= n - 1 ) i = i + 2 * r - 1 ; else i = n - 1 ; } if ( cnt == 0 ) System . out . println ( \" - 1\" ) ; else System . out . println ( cnt ) ; scanner . close ( ) ; }","import java . text . * ; import java . util . * ;   public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int r = scanner . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] flag = new int [ n ] ; for ( int i = 0 ; i < n ; ++ i ) { a [ i ] = scanner . nextInt ( ) ; flag [ i ] = 0 ; } int cnt = 0 ; int begin = 0 ; if ( r - 1 < n ) begin = r - 1 ; else begin = n - 1 ; for ( int i = begin ; ; ) { if ( a [ i ] == 1 ) { cnt ++ ; flag [ i ] = 1 ; if ( i + r - 1 >= n - 1 ) break ; if ( i + 2 * r - 1 <= n - 1 ) i = i + 2 * r - 1 ; else i = n - 1 ; continue ; } while ( i >= 0 && a [ i ] == 0 && flag [ i ] == 0 ) i -- ; if ( i == - 1 || flag [ i ] == 1 ) { System . out . println ( \" - 1\" ) ; return ; } cnt ++ ; flag [ i ] = 1 ; if ( i + r - 1 >= n - 1 ) break ; if ( i + 2 * r - 1 <= n - 1 ) i = i + 2 * r - 1 ; else i = n - 1 ; } if ( cnt == 0 ) System . out . println ( \" - 1\" ) ; else System . out . println ( cnt ) ; scanner . close ( ) ; }"],"bleu":0.0010606711390336884,"rouge_l":0.11717892425905599}
{"id":228,"predictions":["import java . util . * ; import java . lang . * ; import java . io . * ; public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) {"],"references":["  import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; String str = \" \" ; String ans = \" \" ; boolean f = false ; for ( int i = 0 ; i < n ; ++ i ) { String in = sc . next ( ) ; str += in + \" ) \" ; } for ( int i = ' a ' ; i <= ' z ' ; ++ i ) { if ( ! str . contains ( \" \" + ( char ) i ) ) { f = true ; out . println ( ( char ) i ) ; break ; } } if ( ! f ) { String in = \" \" ; for ( int i = ' a ' ; i <= ' z ' ; ++ i ) { for ( int j = ' a ' ; j <= ' z ' ; ++ j ) { in = ( char ) i + \" \" ; in += ( char ) j ; if ( ! str . contains ( in ) ) { out . println ( in ) ; f = true ; break ; } } if ( f ) break ; } } out . close ( ) ;   }  ","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . ArrayList ; import java . util . StringTokenizer ;   public class Main { public static void main ( String [ ] args ) { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st ; try { st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; ArrayList < String > arrayList = new ArrayList < String > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { st = new StringTokenizer ( br . readLine ( ) ) ; arrayList . add ( st . nextToken ( ) ) ; } int len = 1 ; int changing = 1 ; char [ ] name = new char [ 1 ] ; name [ 0 ] = ' a ' ; while ( true ) { if ( changing == 0 ) { len ++ ; changing = len ; name = new char [ len ] ; for ( int i = 0 ; i < len ; i ++ ) name [ i ] = ' a ' ; } if ( name [ changing - 1 ] == ' z ' ) { boolean flag1 = false ; for ( String anArrayList : arrayList ) if ( anArrayList . contains ( String . valueOf ( name ) ) ) { name [ changing - 1 ] ++ ; flag1 = true ; break ; } if ( ! flag1 ) break ; changing -- ; continue ; } if ( changing < len ) { for ( int i = changing ; i < name . length ; i ++ ) name [ i ] = ' a ' ; name [ changing - 1 ] ++ ; changing ++ ; continue ; }   boolean flag1 = false ; for ( String anArrayList : arrayList ) if ( anArrayList . contains ( String . valueOf ( name ) ) ) { name [ changing - 1 ] ++ ; flag1 = true ; break ; } if ( ! flag1 ) break ;   } System . out . println ( String . valueOf ( name ) ) ; } catch ( IOException e ) { }   } }","import java . util . * ; import java . io . * ; import java . math . * ; public class Main { static PrintWriter out ; static Reader in ; public static void main ( String [ ] args ) throws IOException {"],"bleu":0.5336332383205787,"rouge_l":0.6682316118935838}
{"id":229,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . Scanner ;   public class DigitGame { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ;   String t = scanner . nextLine ( ) ; int tt = Integer . parseInt ( t ) ;   while ( tt -- != 0 ) { String n = scanner . nextLine ( ) ; int nn = Integer . parseInt ( n ) ; String number = scanner . nextLine ( ) ; System . out . println ( solve ( nn , number ) ) ; } }   public static int solve ( int n , String number ) {   if ( n % 2 == 1 ) { int counter = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( Integer . parseInt ( String . valueOf ( number . charAt ( i ) ) ) % 2 == 0 ) { counter ++ ; } i ++ ; } if ( counter > ( n - 1 ) \/ 2 ) { return 2 ; } else { return 1 ; } } else { int counter = 0 ; for ( int i = 1 ; i < n ; i ++ ) { if ( Integer . parseInt ( String . valueOf ( number . charAt ( i ) ) ) % 2 == 1 ) { counter ++ ; } i ++ ; } if ( counter > ( n - 2 ) \/ 2 ) { return 1 ; } else { return 2 ; } }   } }","import java . util . Scanner ;   public class DigitGame { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int testCase = Integer . parseInt ( scanner . nextLine ( ) ) ; for ( int i = 0 ; i < testCase ; i ++ ) { solve ( Integer . parseInt ( scanner . nextLine ( ) ) , scanner . nextLine ( ) ) ; } }   public static void solve ( int length , String numbers ) {   if ( length % 2 == 1 ) { if ( hasOdd ( numbers ) ) System . out . println ( 1 ) ; else System . out . println ( 2 ) ; } else { if ( hasEven ( numbers ) ) System . out . println ( 2 ) ; else System . out . println ( 1 ) ; }   }   public static boolean hasOdd ( String numbers ) { boolean isSuccess = false ; for ( int i = 0 ; i < numbers . length ( ) && ! isSuccess ; i += 2 ) { if ( Integer . parseInt ( String . valueOf ( numbers . charAt ( i ) ) ) % 2 == 1 ) isSuccess = true ; } return isSuccess ; }   public static boolean hasEven ( String numbers ) { boolean isSuccess = false ; for ( int i = 1 ; i < numbers . length ( ) ; i += 2 ) { if ( Integer . parseInt ( String . valueOf ( numbers . charAt ( i ) ) ) % 2 == 0 ) isSuccess = true ; } return isSuccess ; } }","import java . util . Scanner ;   public class DigitGAme { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String testcase = scanner . nextLine ( ) ; int t = Integer . parseInt ( testcase ) ; String [ ] ns = new String [ t ] ; String [ ] digits = new String [ t ] ;    for ( int i = 0 ; i < t ; i ++ ) { ns [ i ] = scanner . nextLine ( ) ; digits [ i ] = scanner . nextLine ( ) ;   }   for ( int i = 0 ; i < t ; i ++ ) solve ( ns [ i ] , digits [ i ] ) ;    }   public static void solve ( String n , String d ) { boolean oddExists = false ; boolean evenExists = false ;   int num = Integer . parseInt ( n ) ; if ( num == 1 && Integer . parseInt ( d ) % 2 != 0 ) System . out . println ( 1 ) ; else {   for ( int i = 0 , j = 1 ; i < num && j < num && ! ( oddExists && evenExists ) ; i = i + 2 , j = j + 2 ) {   if ( Character . getNumericValue ( d . charAt ( i ) ) % 2 != 0 ) oddExists = true ;   if ( Character . getNumericValue ( d . charAt ( j ) ) % 2 == 0 ) evenExists = true ; }   if ( num % 2 != 0 && oddExists ) System . out . println ( 1 ) ; else if ( num % 2 != 0 && ! oddExists ) System . out . println ( 2 ) ; else if ( evenExists ) System . out . println ( 2 ) ; else System . out . println ( 1 ) ;   }    } }","import java . util . Scanner ;   public class DigitGAme { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String testcase = scanner . nextLine ( ) ; int t = Integer . parseInt ( testcase ) ; String [ ] ns = new String [ t ] ; String [ ] digits = new String [ t ] ;    for ( int i = 0 ; i < t ; i ++ ) { ns [ i ] = scanner . nextLine ( ) ; digits [ i ] = scanner . nextLine ( ) ;   }   for ( int i = 0 ; i < t ; i ++ ) solve ( ns [ i ] , digits [ i ] ) ;    }   public static void solve ( String n , String d ) { boolean oddExists = false ; boolean evenExists = false ;   int num = Integer . parseInt ( n ) ; if ( num == 1 && Integer . parseInt ( d ) % 2 != 0 ) System . out . println ( 1 ) ; else {   for ( int i = 0 , j = 1 ; i < num && j < num ; i = i + 2 , j = j + 2 ) {   if ( Character . getNumericValue ( d . charAt ( i ) ) % 2 != 0 ) oddExists = true ;   if ( Character . getNumericValue ( d . charAt ( j ) ) % 2 == 0 ) evenExists = true ; }   if ( num % 2 != 0 && oddExists ) System . out . println ( 1 ) ; else if ( num % 2 != 0 && ! oddExists ) System . out . println ( 2 ) ; else if ( evenExists ) System . out . println ( 2 ) ; else System . out . println ( 1 ) ;   }    } }  ","  import java . util . * ; import java . lang . * ; import java . io . * ;   public class Main { public static void main ( String [ ] args ) throws java . lang . Exception { Scanner scn = new Scanner ( System . in ) ; int t = scn . nextInt ( ) ; while ( t -- > 0 ) { int n = scn . nextInt ( ) ; String s = scn . next ( ) ; int rodd = 0 , reven = 0 , bodd = 0 , beven = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( i % 2 == 0 ) { if ( ( s . charAt ( i ) - '0' ) % 2 != 0 ) { rodd ++ ; } else { reven ++ ; } } else { if ( ( s . charAt ( i ) - '0' ) % 2 != 0 ) { bodd ++ ; } else { beven ++ ; } } } if ( n % 2 == 0 ) { if ( beven > 0 ) { System . out . println ( 2 ) ; } else { System . out . println ( 1 ) ; } } else { if ( rodd > 0 ) { System . out . println ( 1 ) ; } else { System . out . println ( 2 ) ; } } } } }"],"bleu":0.009014562975715835,"rouge_l":0.17784256559766762}
{"id":230,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ; public class Solution { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; String s1 = s . nextLine ( ) ; if ( s1 . contains ( \" ABC \" ) || s1 . contains ( \" ACB \" ) || s1 . contains ( \" BAC \" ) || s1 . contains ( \" BCA \" ) || s1 . contains ( \" CBA \" ) || s1 . contains ( \" CAB \" ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }","  import java . util . * ; import java . lang . * ; import java . io . * ;   public class Balloons { public static void main ( String [ ] args ) throws java . lang . Exception { try { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; char s [ ] = br . readLine ( ) . toCharArray ( ) ; boolean t = false ; for ( int i = 0 ; i < s . length - 2 ; i ++ ) { if ( s [ i ] != s [ i + 1 ] && s [ i + 1 ] != s [ i + 2 ] && s [ i ] != s [ i + 2 ] && s [ i ] != ' . ' && s [ i + 1 ] != ' . ' && s [ i + 2 ] != ' . ' ) {","import java . io . IOException ; import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . PrintWriter ;   public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter out = new PrintWriter ( System . out ) ; String s = br . readLine ( ) ; int n = s . length ( ) ; if ( n <= 2 ) { out . println ( \" No \" ) ; } else { boolean ans = false ;","import java . util . * ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; char [ ] a = new char [ s . length ( ) ] ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { a [ i ] = s . charAt ( i ) ; } int flag = 0 ; for ( int i = 1 ; i < s . length ( ) - 1 ; i ++ ) { if ( a [ i ] == ' A ' && ( ( a [ i - 1 ] == ' B ' && a [ i + 1 ] == ' C ' ) || ( a [ i - 1 ] == ' C ' && a [ i + 1 ] == ' B ' ) ) ) { flag = 1 ; } else if ( a [ i ] == ' B ' && ( ( a [ i - 1 ] == ' A ' && a [ i + 1 ] == ' C ' ) || ( a [ i - 1 ] == ' C ' && a [ i + 1 ] == ' A ' ) ) ) { flag = 1 ; } else if ( a [ i ] == ' C ' && ( ( a [ i - 1 ] == ' B ' && a [ i + 1 ] == ' A ' ) || ( a [ i - 1 ] == ' A ' && a [ i + 1 ] == ' B ' ) ) ) { flag = 1 ; } if ( flag == 1 ) { break ; } } if ( flag == 1 ) { System . out . println ( \" Yes \" ) ; } else { System . out . println ( \" No \" ) ; } } }"],"bleu":0.21764408137245717,"rouge_l":0.4100654069767442}
{"id":231,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { st = new StringTokenizer ( br . readLine ( ) ) ; a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( b [ i ] > b [ j ] ) { count ++ ; } } } System . out . println ( count ) ; } }"],"references":["import java . util . * ; public class ApplejackStorage { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ 100001 ] ; int [ ] freq = new int [ 100001 ] ; for ( int i = 0 ; i < n ; i ++ ) { int num = sc . nextInt ( ) ; arr [ num ] ++ ; freq [ arr [ num ] ] ++ ; } int q = sc . nextInt ( ) ; for ( int i = 0 ; i < q ; i ++ ) { String s = sc . next ( ) ; int x = sc . nextInt ( ) ; if ( s . equals ( \" + \" ) ) { arr [ x ] ++ ; freq [ arr [ x ] ] ++ ; } else { freq [ arr [ x ] ] -- ; arr [ x ] -- ; } if ( freq [ 8 ] > 0 || ( freq [ 6 ] > 0 && freq [ 2 ] > 1 ) || ( freq [ 4 ] > 1 ) || ( freq [ 4 ] > 0 && freq [ 2 ] > 2 ) ) { System . out . println ( \" YES \" ) ; } else { System . out . println ( \" NO \" ) ; } } } }","import java . util . Scanner ; public class ApplejackandStorages { public static void main ( String args [ ] ) { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] f = new int [ 100010 ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = scan . nextInt ( ) ; ++ f [ a [ i ] ] ; } int sq = 0 ; int re = 0 ; for ( int i = 0 ; i < 100010 ; i ++ ) { sq += ( f [ i ] \/ 4 ) ; re += ( f [ i ] \/ 2 ) ; } StringBuilder sb = new StringBuilder ( ) ; int q = scan . nextInt ( ) ; while ( q -- > 0 ) { char s = scan . next ( ) . charAt ( 0 ) ; int k = Integer . valueOf ( scan . next ( ) ) ; sq -= ( f [ k ] \/ 4 ) ; re -= ( f [ k ] \/ 2 ) ; if ( s == ' - ' ) { -- f [ k ] ; } else { ++ f [ k ] ; } sq += ( f [ k ] \/ 4 ) ; re += ( f [ k ] \/ 2 ) ; if ( sq >= 1 && re >= 4 ) { sb . append ( \" YES \\n \" ) ; } else { sb . append ( \" NO \\n \" ) ; } } System . out . println ( sb ) ; } }"],"bleu":0.40946730009963794,"rouge_l":0.48674195924380065}
{"id":232,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ; import java . io . * ; import java . math . * ;   public class A { public static void main ( String hi [ ] ) throws Exception { BufferedReader infile = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( infile . readLine ( ) ) ; int K = Integer . parseInt ( st . nextToken ( ) ) ; if ( K == 0 ) { System . out . println ( \" a \" ) ; return ; } StringBuilder sb = new StringBuilder ( ) ; for ( int c = 0 ; c < 26 ; c ++ ) { if ( K == 0 ) break ; int low = 1 ; int high = 446 ; while ( low != high ) { int mid = ( low + high + 1 ) \/ 2 ; if ( mid * ( mid + 1 ) \/ 2 > K ) high = mid - 1 ; else low = mid ; } K -= low * ( low + 1 ) \/ 2 ; while ( low -- > - 1 ) sb . append ( ( char ) ( ' a ' + c ) ) ; } if ( K > 0 ) { int lol = 4 \/ 0 ; } System . out . print ( sb ) ; } }","import java . util . * ; import java . io . * ; import java . math . * ;   public class A { public static void main ( String hi [ ] ) throws Exception { BufferedReader infile = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( infile . readLine ( ) ) ; int K = Integer . parseInt ( st . nextToken ( ) ) ; if ( K == 0 ) { System . out . println ( \" a \" ) ; return ; } StringBuilder sb = new StringBuilder ( ) ; for ( int c = 0 ; c < 26 ; c ++ ) { if ( K == 0 ) break ; int low = 1 ; int high = 446 ; while ( low != high ) { int mid = ( low + high + 1 ) \/ 2 ; if ( mid * ( mid + 1 ) \/ 2 > K ) high = mid - 1 ; else low = mid ; } K -= low * ( low + 1 ) \/ 2 ; while ( low -- > - 1 ) sb . append ( ( char ) ( ' a ' + c ) ) ; } if ( K > 0 ) { int lol = 4 \/ 0 ; } System . out . print ( sb ) ; } }","import java . io . FileNotFoundException ; import java . io . BufferedInputStream ; import java . io . FileInputStream ; import java . io . PrintStream ; import java . util . * ;     public class Main { public static void main ( String args [ ] ) { Scanner cin ; PrintStream cout ; try { cin = new Scanner ( new FileInputStream ( \" in . in \" ) ) ; cout = new PrintStream ( \" out . out \" ) ; } catch ( FileNotFoundException e ) { cin = new Scanner ( new BufferedInputStream ( System . in ) ) ; cout = System . out ; } String ch = \" abcdefghijklmnopqrstuvwxyz \" ; int k ; k = cin . nextInt ( ) ; for ( int i = 10000 , j = 0 ; i > 0 ; i -- ) { while ( i * ( i - 1 ) \/ 2 <= k ) { k -= i * ( i - 1 ) \/ 2 ; for ( int l = 0 ; l < i ; l ++ ) { cout . print ( ch . charAt ( j ) ) ; } j = j + 1 ; if ( k == 0 ) { break ; } } } cout . print ( ' \\n ' ) ; } }","import java . io . FileNotFoundException ; import java . io . BufferedInputStream ; import java . io . FileInputStream ; import java . io . PrintStream ; import java . util . * ;","# include < cstdio > # include < cstring > # include < string > # include < algorithm > # include < cctype > using namespace std ;   template < typename T > inline void read ( T & x ) { x = 0 ; char temp = getchar ( ) ; bool f = false ; while ( ! isdigit ( temp ) ) { if ( temp == ' - ' ) f = true ; temp = getchar ( ) ; } while ( isdigit ( temp ) ) { x = ( x << 1 ) + ( x << 3 ) + temp - '0' ; temp = getchar ( ) ; } if ( f ) x = - x ; } template < typename T > void print ( T x ) { if ( x < 0 ) putchar ( ' - ' ) , x = - x ; if ( x > 9 ) print ( x \/ 10 ) ; putchar ( x % 10 + '0' ) ; }  "],"bleu":0.4691734855299003,"rouge_l":0.7142857142857143}
{"id":233,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . Scanner ;   public class rasberryandhoney { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int days = sc . nextInt ( ) ; int cost = sc . nextInt ( ) ;   int [ ] arr = new int [ days ] ;   for ( int i = 0 ; i < days ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int max = Integer . MIN_VALUE ; for ( int i = 0 ; i < days - 1 ; i ++ ) { max = Math . max ( max , arr [ i ] - arr [ i + 1 ] ) ; }   if ( max <= 0 ) System . out . println ( 0 ) ; else { if ( cost > max ) System . out . println ( 0 ) ; else System . out . println ( max - cost ) ; } } }","import java . util . * ; public class BearAndRaspberry { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ;   int n = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ;   for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } sc . close ( ) ;   int maxDiff = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { int a = arr [ i ] ; int b = arr [ i + 1 ] ; if ( a - b > maxDiff ) maxDiff = a - b ;   }   if ( maxDiff > c ) { System . out . println ( maxDiff - c ) ; } else System . out . println ( 0 ) ; } }","import java . util . * ;   public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int [ ] ori = new int [ n ] ; int ans = 0 ; for ( int i = 0 ; i < ori . length ; i ++ ) ori [ i ] = sc . nextInt ( ) ; for ( int i = 0 ; i < ori . length - 1 ; i ++ ) { if ( ori [ i ] - ori [ i + 1 ] > ans ) { ans = ori [ i ] - ori [ i + 1 ] ; } } if ( ans - c < 0 ) { System . out . println ( 0 ) ; } else { System . out . println ( ans - c ) ; } } }","import java . util . * ; public class CleaverBear {   public static void main ( String [ ] args ) {"],"bleu":0.24348455356536494,"rouge_l":0.4998949359109056}
{"id":234,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException {"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;   public class K_good { public static void main ( String [ ] args ) throws IOException { BufferedReader reader = new BufferedReader ( new InputStreamReader ( System . in ) ) ;   StringTokenizer st = new StringTokenizer ( reader . readLine ( ) ) ;   int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int count = 0 ;   for ( int i = 0 ; i < n ; i ++ ) { String num = reader . readLine ( ) ; boolean [ ] check = new boolean [ 10 ] ; boolean flag = true ;   for ( int j = 0 ; j < num . length ( ) ; j ++ ) { check [ num . charAt ( j ) - '0' ] = true ; }   for ( int j = 0 ; j < k + 1 ; j ++ ) { if ( ! check [ j ] ) flag = false ; }   if ( flag ) count ++ ; }   System . out . println ( count ) ; } }","import java . util . * ;   public class ICPC { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int c = 0 ; process : for ( int i = 1 ; i <= n ; i ++ ) { String [ ] s = sc . next ( ) . split ( \" \" ) ; boolean [ ] ar = new boolean [ k + 1 ] ; for ( String s1 : s ) { int num = Integer . parseInt ( s1 ) ; if ( num > k ) {","import java . util . Scanner ;   public class GoodNumber { public static void main ( String [ ] args ) {   Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) , k = in . nextInt ( ) , i , j , c = 0 ; for ( i = 0 ; i < n ; i ++ ) {   String s = in . next ( ) ; char [ ] a = new char [ 10 ] ; boolean b = true ; for ( j = 0 ; j < s . length ( ) ; j ++ ) { int l = Integer . valueOf ( s . substring ( j , j + 1 ) ) ; a [ l ] ++ ; } for ( j = 0 ; j < 10 ; j ++ ) { if ( a [ j ] < 1 && j <= k ) { b = false ; break ; } } if ( b ) c ++ ; } in . close ( ) ; System . out . println ( c ) ; } }","import java . util . * ; public class Test { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) ; int k = in . nextInt ( ) ; String [ ] a = new String [ n ] ; int coun = 0 ; for ( int ind = 0 ; ind < n ; ind ++ ) { a [ ind ] = in . next ( ) ; } for ( int i = 0 ; i < a . length ; i ++ ) { String st = a [ i ] ; int j ; for ( j = 48 ; j <= k + 48 ; j ++ ) { if ( ! st . contains ( \" \" + ( ( char ) j ) ) ) break ; } if ( j == ( k + 49 ) ) { coun ++ ; } } System . out . println ( coun ) ; } }","import java . util . HashSet ; import java . util . Scanner ;      public class PlayGroundHug {   private static final Scanner in = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { int n = in . nextInt ( ) ; int k = in . nextInt ( ) ; int res = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int c = 0 ; HashSet < Integer > visited = new HashSet < > ( ) ; String str = in . next ( ) ; for ( int j = 0 ; j < str . length ( ) ; j ++ ) { int num = Integer . parseInt ( str . charAt ( j ) + \" \" ) ; if ( num <= k && ! visited . contains ( num ) ) { visited . add ( num ) ; c ++ ; } } if ( k == 0 ) { if ( c >= 1 ) { res ++ ; } } else { if ( c > k ) { res ++ ; } } } System . out . println ( res ) ; } }"],"bleu":0.03629106508698294,"rouge_l":0.2451557341753983}
{"id":235,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException {"],"references":["import java . util . * ; import java . math . * ; public class YoungExplorers { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int runs = sc . nextInt ( ) ; while ( runs -- > 0 ) { int size = sc . nextInt ( ) ;   int [ ] arr = new int [ size ] ; for ( int i = 0 ; i < size ; i ++ ) arr [ i ] = sc . nextInt ( ) ; shuffleArray ( arr ) ; Arrays . sort ( arr ) ; int out = 0 ; int num = 0 ; int goal = 0 ; outer : for ( int i = 0 ; i < size ; ) { goal = arr [ i ] ; num ++ ; if ( goal <= num ) { out ++ ; num = 0 ; goal = 0 ; } i ++ ;   } System . out . println ( out ) ; } } static void shuffleArray ( int [ ] arr ) { int n = arr . length ; Random rnd = new Random ( ) ; for ( int i = 0 ; i < n ; ++ i ) { int tmp = arr [ i ] ; int randomPos = i + rnd . nextInt ( n - i ) ; arr [ i ] = arr [ randomPos ] ; arr [ randomPos ] = tmp ; } } }","import java . util . * ; public class YoungExplorers {   public static void main ( String [ ] args ) {","import java . util . * ;   public class StackBracket { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int n = sc . nextInt ( ) ; int [ ] e = new int [ n ] ; for ( int j = 0 ; j < n ; j ++ ) { e [ j ] = sc . nextInt ( ) ; } Arrays . sort ( e ) ; int [ ] dp = new int [ n ] ;"],"bleu":0.7365589940842712,"rouge_l":0.8810411872073645}
{"id":236,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . Scanner ; public class Decoding { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int num = sc . nextInt ( ) ; String text = sc . next ( ) ; String newText = \" \" ; int i = 0 ; while ( num != 0 ) { if ( num % 2 != 0 ) { newText = newText + text . toCharArray ( ) [ i ] ; } else { newText = text . toCharArray ( ) [ i ] + newText ; } num -- ; i ++ ; } System . out . println ( newText ) ; } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;   public class Decoding { public static void main ( String [ ] args ) { FastReader fs = new FastReader ( ) ; int n = fs . nextInt ( ) ; String word = fs . nextLine ( ) ; if ( n == 1 ) { System . out . println ( word ) ; return ; } char [ ] newWord = new char [ n ] ; boolean left = n % 2 != 0 ; int startPoint = left ? ( int ) Math . ceil ( n \/ 2 ) : ( n \/ 2 ) - 1 ; int leftPointer = startPoint - 1 ; int rightPointer = startPoint + 1 ; newWord [ startPoint ] = word . charAt ( 0 ) ; for ( int i = 1 ; i < n ; i ++ ) { if ( left && leftPointer >= 0 ) { newWord [ leftPointer -- ] = word . charAt ( i ) ; left = ! left ; } else { if ( ! left && rightPointer < n ) { newWord [ rightPointer ++ ] = word . charAt ( i ) ; left = ! left ; } } } System . out . println ( new String ( newWord ) ) ; }   static class FastReader { BufferedReader br ; StringTokenizer st ; public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }","import java . util . * ; public class Solution { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; int n = s . nextInt ( ) ; s . nextLine ( ) ; String line = s . nextLine ( ) ; char a [ ] = new char [ n ] ; int index = n \/ 2 ; int i = 1 ; int j = 1 ; if ( n % 2 != 0 ) { a [ index ] = line . charAt ( 0 ) ; while ( i < n ) { a [ index - j ] = line . charAt ( i ) ; i ++ ; if ( i == n ) break ; a [ index + j ] = line . charAt ( i ) ; i ++ ; if ( i == n ) break ; j ++ ; } } else { index -- ; a [ index ] = line . charAt ( 0 ) ; while ( i < n ) { a [ index + j ] = line . charAt ( i ) ; i ++ ; if ( i == n ) break ; a [ index - j ] = line . charAt ( i ) ; i ++ ; if ( i == n ) break ; j ++ ; } } String result = String . valueOf ( a ) ; System . out . println ( result ) ; } }"],"bleu":0.17942556246933403,"rouge_l":0.2461482024944974}
{"id":237,"predictions":["import java . io . * ; import java . util . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) throws java . lang . Exception { Reader pm = new Reader ( ) ;"],"references":["import java . io . * ; import java . util . * ;   public class Main { private static long binarySearch1 ( long [ ] arr , long tar ) { int low = 0 ; int high = arr . length - 1 ; long ans = - 1 ; while ( low <= high ) { int mid = ( low + high ) \/ 2 ; if ( arr [ mid ] <= tar ) { low = mid + 1 ; ans = arr [ mid ] ; } else { high = mid - 1 ; } } return ans ; } private static long binarySearch2 ( long [ ] arr , long tar ) { int low = 0 ; int high = arr . length - 1 ; long ans = - 1 ; while ( low <= high ) { int mid = ( low + high ) \/ 2 ; if ( arr [ mid ] >= tar ) { high = mid - 1 ; ans = arr [ mid ] ; } else { low = mid + 1 ; } } return ans ; } private static long solve ( long [ ] a , long [ ] b , long [ ] c ) { long min = Long . MAX_VALUE ; for ( long i : b ) { long j = binarySearch1 ( a , i ) ; long k = binarySearch2 ( c , i ) ; if ( j == - 1 || k == - 1 ) { continue ; } min = Math . min ( min , ( i - j ) * ( i - j ) + ( k - i ) * ( k - i ) + ( k - j ) * ( k - j ) ) ; } return min ; } public static void main ( String [ ] args ) throws IOException {","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Arrays ;   public class Solution { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int t = Integer . parseInt ( br . readLine ( ) ) ; while ( t -- > 0 ) { br . readLine ( ) . split ( \" ▁ \" ) ; Integer [ ] r = Arrays . stream ( br . readLine ( ) . split ( \" ▁ \" ) ) . map ( Integer :: parseInt ) . sorted ( ) . toArray ( Integer [ ] :: new ) ; Integer [ ] g = Arrays . stream ( br . readLine ( ) . split ( \" ▁ \" ) ) . map ( Integer :: parseInt ) . sorted ( ) . toArray ( Integer [ ] :: new ) ; Integer [ ] b = Arrays . stream ( br . readLine ( ) . split ( \" ▁ \" ) ) . map ( Integer :: parseInt ) . sorted ( ) . toArray ( Integer [ ] :: new ) ;   long ans = Math . min ( solve ( r , g , b ) , solve ( g , r , b ) ) ; ans = Math . min ( ans , solve ( b , r , g ) ) ;  ","import java . io . File ; import java . io . FileInputStream ; import java . io . FileNotFoundException ; import java . io . IOException ; import java . nio . file . Paths ; import java . util . InputMismatchException ; import java . util . TreeSet ;   public class Main {   public Main ( ) throws FileNotFoundException {  "],"bleu":0.5379909353148143,"rouge_l":0.4963597430406852}
{"id":238,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ;   public class Main { static Scanner input = new Scanner ( System . in ) ; static int mod = 1000000007 ;   public static void main ( String [ ] args ) { int n = input . nextInt ( ) , l , r , lenth ; for ( int i = 0 ; i < n ; i ++ ) { l = input . nextInt ( ) ; r = input . nextInt ( ) ; lenth = r - l + 1 ; if ( l % 2 == 1 ) { if ( lenth % 2 == 1 ) { System . out . println ( - l - ( lenth - 1 ) \/ 2 ) ; } else { System . out . println ( lenth \/ 2 ) ; } } else { if ( lenth % 2 == 1 ) { System . out . println ( l + ( lenth - 1 ) \/ 2 ) ; } else { System . out . println ( - lenth \/ 2 ) ; } } } input . close ( ) ; }   public static int modulo ( int dividend ) { while ( dividend >= mod ) dividend -= mod ; return dividend ; }   public static int combination ( int n , int r ) { int ans = 1 ; for ( int i = 1 ; i <= r ; i ++ ) { ans *= ( n - i + 1 ) ; ans \/= i ; } return ans ; } }  ","import java . util . * ; import java . io . * ;   public class MargariteAndTheBestPresent { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; Task solver = new Task ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; }   static class Task { public void solve ( int testNumber , InputReader in , PrintWriter out ) { int N = in . nextInt ( ) ; int sum = 0 ; for ( int i = 0 ; i < N ; i ++ ) { int first = in . nextInt ( ) ; int second = in . nextInt ( ) ;   if ( second % 2 == 0 ) { if ( first % 2 == 0 ) sum = ( second + first ) \/ 2 ; else sum = ( second - first + 1 ) \/ 2 ; }   else { if ( first % 2 == 0 ) sum = - 1 * ( second - first + 1 ) \/ 2 ; else sum = - 1 * ( first + second ) \/ 2 ; } out . println ( sum ) ; } } }   static class InputReader { public BufferedReader reader ; public StringTokenizer tokenizer ;   public InputReader ( InputStream stream ) { reader = new BufferedReader ( new InputStreamReader ( stream ) , 32_768 ) ; tokenizer = null ; }   public String next ( ) { while ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( ) ; }   public String nextLine ( ) { try { return reader . readLine ( ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } public long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } public double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } } }","import java . util . * ; public class MargariteAndTheBestPresent {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int q = sc . nextInt ( ) ; int l = 0 ; int r = 0 ; List < Integer > z = new ArrayList < > ( ) ; for ( int j = 0 ; j < q ; j ++ ) { l = sc . nextInt ( ) ; r = sc . nextInt ( ) ; System . out . println ( func ( r ) - func ( l - 1 ) ) ; } } static long func ( long x ) { if ( x % 2 == 0 ) { return x \/ 2 ; } else { return - x + func ( x - 1 ) ; } } }"],"bleu":0.057308535213823376,"rouge_l":0.21071602898659558}
{"id":239,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . io . * ; import java . util . * ;   public class B_1095 { static PrintWriter pw = new PrintWriter ( System . out ) ;   public static void main ( String arg [ ] ) throws IOException { InputStreamReader isr = new InputStreamReader ( System . in ) ; BufferedReader br = new BufferedReader ( isr ) ; StringTokenizer token = new StringTokenizer ( \" ▁ \" ) ;   int i = 0 ; int j = 0 ; int x = 0 ; int n = 0 ; int arr [ ] ;   n = Integer . parseInt ( br . readLine ( ) ) ; arr = new int [ n ] ;   token = new StringTokenizer ( br . readLine ( ) ) ;   for ( j = 0 ; j <= n - 1 ; j ++ ) arr [ j ] = Integer . parseInt ( token . nextToken ( ) ) ;   pw . println ( getResult ( n , arr ) ) ;   pw . close ( ) ;   }   private static int getResult ( int n , int arr [ ] ) {   int i = 0 ; int sum = 0 ; int min = Integer . MAX_VALUE ; int min2 = Integer . MAX_VALUE ; int max = Integer . MIN_VALUE ; int max2 = Integer . MIN_VALUE ;   int minpos = - 1 ; int maxpos = - 1 ;    for ( i = 0 ; i <= n - 1 ; i ++ ) { if ( arr [ i ] > max ) { max = arr [ i ] ; maxpos = i ; }   if ( arr [ i ] < min ) { min = arr [ i ] ; minpos = i ; } }   for ( i = 0 ; i <= n - 1 ; i ++ ) { if ( arr [ i ] > max2 && i != maxpos ) max2 = arr [ i ] ;   if ( arr [ i ] < min2 && i != minpos ) min2 = arr [ i ] ; } return Math . min ( max - min2 , max2 - min ) ;   } }","import java . io . BufferedReader ; import java . io . BufferedWriter ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . OutputStreamWriter ; import java . util . Arrays ; import java . util . StringTokenizer ;   public class temp4 { static class FastReader { BufferedReader br ; StringTokenizer st ; public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } static class Print { private final BufferedWriter bw ; public Print ( ) { bw = new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ; } public void print ( String str ) throws IOException { bw . append ( str ) ; } public void println ( String str ) throws IOException { print ( str ) ; bw . append ( \" \\n \" ) ; } public void close ( ) throws IOException { bw . close ( ) ; } } public static void main ( String [ ] args ) throws IOException { FastReader scn = new FastReader ( ) ; Print pr = new Print ( ) ; int n = scn . nextInt ( ) ; Integer [ ] arr = new Integer [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = scn . nextInt ( ) ; } Arrays . sort ( arr ) ; int ans = Math . min ( arr [ n - 2 ] - arr [ 0 ] , arr [ n - 1 ] - arr [ 1 ] ) ; System . out . println ( ans ) ; } }","import java . util . * ; import java . io . * ; import java . math . * ;  ","import java . util . * ; import java . io . * ; import java . math . BigInteger ; import java . text . * ; public class Main { static long mod = 1000_000_007 ; static long mod1 = 998244353 ; static boolean fileIO = false ; static boolean memory = true ; static FastScanner f ; static FileWriter fw ; static PrintWriter pw ; static double eps = ( double ) 1e-6 ; static int oo = Integer . MAX_VALUE ;"],"bleu":0.6887057646267406,"rouge_l":0.7779975446733051}
{"id":240,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . Scanner ;   public class Problem275A {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a [ ] [ ] = new int [ 5 ] [ 5 ] ; for ( int i = 1 ; i <= 3 ; i ++ ) for ( int j = 1 ; j <= 3 ; j ++ ) a [ i ] [ j ] = sc . nextInt ( ) ; for ( int i = 1 ; i <= 3 ; i ++ ) { for ( int j = 1 ; j <= 3 ; j ++ ) { if ( ( a [ i ] [ j ] + a [ i ] [ j + 1 ] + a [ i + 1 ] [ j ] + a [ i - 1 ] [ j ] + a [ i ] [ j - 1 ] ) % 2 == 0 ) System . out . print ( \"1\" ) ; else System . out . print ( \"0\" ) ; } System . out . println ( ) ; } } }"],"bleu":0.01040163188156893,"rouge_l":0.14296875}
{"id":241,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["  import java . util . Scanner ; import java . util . Arrays ; public class Codechef { public static void main ( String [ ] args ) throws java . lang . Exception { try { Scanner sc = new Scanner ( System . in ) ; int n , m , i , j , c , k ; n = sc . nextInt ( ) ; m = sc . nextInt ( ) ; int a [ ] [ ] = new int [ n ] [ m ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < m ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } k = 0 ; for ( i = 0 ; i < n ; i ++ ) { c = a [ i ] [ 0 ] ; for ( j = 0 ; j < m ; j ++ ) { if ( a [ i ] [ j ] < c ) c = a [ i ] [ j ] ; } if ( c > k ) k = c ; } System . out . println ( k ) ; } catch ( Exception e ) { } } }","import java . util . * ; import java . util . Scanner ; import java . io . * ; import javax . lang . model . util . ElementScanner6 ; import static java . lang . System . out ;    public class B616 {   public static void main ( String args [ ] ) {   FastReader in = new FastReader ( ) ; PrintWriter pr = new PrintWriter ( new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ) ; int tc = 1 ;","import java . util . * ; import java . io . * ;   public class Main {   public static void main ( String [ ] args ) {   Scanner sc = new Scanner ( ) ;   int r = sc . nextInt ( ) ;   int c = sc . nextInt ( ) ;   int ar [ ] [ ] = new int [ r ] [ c ] ;   int ans = 0 ;   for ( int i = 0 ; i < r ; i ++ ) { int min = Integer . MAX_VALUE ; for ( int j = 0 ; j < c ; j ++ ) { ar [ i ] [ j ] = sc . nextInt ( ) ; min = Math . min ( min , ar [ i ] [ j ] ) ; } ans = Math . max ( ans , min ) ; }   out . println ( ans ) ;    out . close ( ) ; }   static PrintWriter out = new PrintWriter ( System . out ) ; static class Scanner { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( \" \" ) ; String nextLine ( ) { while ( ! st . hasMoreTokens ( ) ) try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( nextLine ( ) ) ; } Double nextDouble ( ) { return Double . parseDouble ( nextLine ( ) ) ; } long nextLong ( ) { return Long . parseLong ( nextLine ( ) ) ; } } }  "],"bleu":0.23336783806707656,"rouge_l":0.41426146010186754}
{"id":242,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . io . BufferedReader ; import java . io . File ; import java . io . FileInputStream ; import java . io . FileNotFoundException ; import java . io . FileOutputStream ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . math . BigInteger ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . BitSet ; import java . util . Calendar ; import java . util . Collections ; import java . util . Comparator ; import java . util . HashMap ; import java . util . HashSet ; import java . util . LinkedList ; import java . util . PriorityQueue ; import java . util . SortedSet ; import java . util . Stack ; import java . util . StringTokenizer ; import java . util . TreeMap ; import java . util . TreeSet ;   public class B_VK2017_Round3 {   public static long MOD = 1000000007 ;   public static void main ( String [ ] args ) throws FileNotFoundException {"],"bleu":0.04705066365416526,"rouge_l":0.26138589618021546}
{"id":243,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ; import java . io . * ;   public class freebies { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; String a = br . readLine ( ) ; a = br . readLine ( ) ; String [ ] info = a . split ( \" ▁ \" ) ; int [ ] left = new int [ 1002 ] ; int max = 0 ; for ( int z = 0 ; z < info . length ; z ++ ) { int current = Integer . parseInt ( info [ z ] ) ; left [ current ] ++ ; max = Math . max ( max , left [ current ] ) ; } for ( int z = 1 ; z < left . length ; z ++ ) { left [ z ] += left [ z - 1 ] ; } a = br . readLine ( ) ; int dist = Integer . parseInt ( a ) + 1 ; for ( int z = dist ; z < left . length ; z ++ ) { max = Math . max ( max , left [ z ] - left [ z - dist ] ) ; } System . out . println ( max ) ; } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Arrays ; import java . util . StringTokenizer ;   public class CF386B {   public static void main ( String [ ] args ) { int n = fs . nextInt ( ) ; int [ ] array = fs . readArray ( n ) ; int timeInterval = fs . nextInt ( ) ; Arrays . sort ( array ) ;   int max = Integer . MIN_VALUE ; for ( int i = 0 ; i < n - 1 ; i ++ ) { int currVal = 1 ; for ( int j = i + 1 ; j < n ; j ++ ) { if ( array [ j ] - array [ i ] <= timeInterval ) currVal ++ ; else break ; } max = Math . max ( currVal , max ) ; } max = Math . max ( max , 1 ) ;   System . out . println ( max ) ; }   static class FastScanner { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( \" \" ) ;   String next ( ) { while ( ! st . hasMoreTokens ( ) ) try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   int [ ] readArray ( int n ) { int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = nextInt ( ) ; return a ; }   long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } } static FastScanner fs = new FastScanner ( ) ; }","import java . io . * ; import java . util . * ;   public final class Template { public static void main ( String [ ] args ) { FastScanner sc = new FastScanner ( System . in ) ;   Integer n = sc . nextInt ( ) ; Integer elapsedTime [ ] = new Integer [ n ] ;   for ( int i = 0 ; i < n ; i ++ ) elapsedTime [ i ] = sc . nextInt ( ) ; int freebieElapsedTime = sc . nextInt ( ) ;   Arrays . sort ( elapsedTime ) ;   int ans = 0 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { int studentsCount = 0 ; for ( int j = i ; j >= 0 ; j -- ) { if ( elapsedTime [ i ] - elapsedTime [ j ] <= freebieElapsedTime ) studentsCount ++ ; else break ; } ans = Math . max ( ans , studentsCount ) ; }   System . out . println ( ans ) ; } }   class FastScanner { BufferedReader br ; StringTokenizer st ;   public FastScanner ( InputStream stream ) { br = new BufferedReader ( new InputStreamReader ( stream ) ) ; }   public String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   public long nextLong ( ) { return Long . parseLong ( next ( ) ) ; }   public double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; }   public String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; }   public int [ ] readArray ( int n ) { int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = nextInt ( ) ; return a ; } }","import java . util . Scanner ;   public class B {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = sc . nextInt ( ) ; bit b = new bit ( 1001 ) ; for ( int i = 0 ; i < n ; i ++ ) b . add ( arr [ i ] , 1 ) ; int k = sc . nextInt ( ) ; int max = 0 ; for ( int i = 0 ; i <= 1000 - k ; i ++ ) { max = Math . max ( max , b . sum ( i , i + k ) ) ; } System . out . println ( max ) ; } static class bit { int n ; int [ ] table ; public bit ( int myn ) { n = 1 ; while ( n <= myn ) { n = ( n << 1 ) ; } table = new int [ n + 1 ] ; } public void add ( int i , int v ) { while ( i <= n ) { table [ i ] += v ; i += ( i & ( - i ) ) ; } } public int sum ( int i ) { int res = 0 ; while ( i > 0 ) { res += table [ i ] ; i -= ( i & ( - i ) ) ; } return res ; } public int sum ( int i , int j ) { return sum ( j ) - ( ( i - 1 >= 0 ) ? sum ( i - 1 ) : 0 ) ; } } }"],"bleu":0.02473304837978943,"rouge_l":0.2013755158184319}
{"id":244,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ; import java . io . * ;   public class CF { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter pw = new PrintWriter ( new OutputStreamWriter ( System . out ) ) ;  ","  import java . util . ArrayList ; import java . util . Comparator ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import java . util . Scanner ; import java . util . regex . Matcher ; import java . util . regex . Pattern ;   public class Problem19A {    public static void main ( String [ ] args ) { Problem19A problemAplusB = new Problem19A ( ) ; problemAplusB . inputParams . readInputParamsFromStream ( ) ; problemAplusB . solve ( ) ; problemAplusB . outputParams . writeOutputParamsToStream ( ) ; }  "],"bleu":0.34306259837885655,"rouge_l":0.4412296564195298}
{"id":245,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException {"],"references":["import java . util . * ; import java . math . * ; public class RockAndLever { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int runs = sc . nextInt ( ) ; while ( runs -- > 0 ) { int size = sc . nextInt ( ) ; long [ ] arr = new long [ 33 ] ; for ( int i = 0 ; i < size ; i ++ ) { arr [ Integer . numberOfLeadingZeros ( sc . nextInt ( ) ) ] ++ ; } long out = 0 ; for ( int i = 1 ; i < 33 ; i ++ ) { out += arr [ i ] * ( arr [ i ] - 1 ) \/ 2 ; } System . out . println ( out ) ; } } }","import java . io . BufferedOutputStream ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ;","import java . util . * ; import java . io . * ; public class A { static FastReader in = new FastReader ( ) ; static final Random random = new Random ( ) ; static long mod = 1000000007L ; static HashMap < Integer , Integer > map = new HashMap < > ( ) ;   public static void main ( String args [ ] ) throws IOException { int t = in . nextInt ( ) ; StringBuilder res = new StringBuilder ( ) ; loop : while ( t -- > 0 ) { int n = in . nextInt ( ) ; long freq [ ] = new long [ 100 ] ; for ( int i = 0 ; i < n ; i ++ ) { long x = in . nextLong ( ) ; int cnt = - 1 ; while ( x > 0 ) { x \/= 2 ; cnt ++ ; } freq [ cnt ] ++ ; } long total = 0 ; for ( int i = 0 ; i < 100 ; i ++ ) { if ( freq [ i ] > 0 ) {","import java . util . Scanner ;   public class B1420 {   public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int T = in . nextInt ( ) ; for ( int t = 0 ; t < T ; t ++ ) { int N = in . nextInt ( ) ; int [ ] A = new int [ N ] ; for ( int n = 0 ; n < N ; n ++ ) { A [ n ] = in . nextInt ( ) ; } long answer = 0 ; for ( int bit = 29 ; bit >= 0 ; bit -- ) { int mask = 1 << bit ; int zeros = 0 ; int ones = 0 ; for ( int n = 0 ; n < N ; n ++ ) { if ( A [ n ] != 0 ) { if ( ( A [ n ] & mask ) == 0 ) { zeros ++ ; } else { ones ++ ; A [ n ] = 0 ; } } } answer += ( ones - 1 ) * ( long ) ones ; } System . out . println ( answer \/ 2 ) ; } }   }"],"bleu":0.7808533719955268,"rouge_l":0.4562326869806094}
{"id":246,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans += a [ i ] ; } out . println ( ans ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . StringTokenizer ; public class Main { static class FastScanner { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( \" \" ) ; String next ( ) { while ( ! st . hasMoreTokens ( ) ) try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } int [ ] nextArray ( int n ) { int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = nextInt ( ) ; return a ; } long [ ] nextArray ( long n ) { long [ ] a = new long [ ( int ) n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = nextLong ( ) ; return a ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } } static class FastWriter extends PrintWriter { FastWriter ( ) { super ( System . out ) ; } void println ( int [ ] array ) { for ( int i = 0 ; i < array . length ; i ++ ) { print ( array [ i ] + \" ▁ \" ) ; } println ( ) ; } void println ( long [ ] array ) { for ( int i = 0 ; i < array . length ; i ++ ) { print ( array [ i ] + \" ▁ \" ) ; } println ( ) ; } } public static void main ( String [ ] args ) { FastScanner in = new FastScanner ( ) ; FastWriter out = new FastWriter ( ) ; int t = in . nextInt ( ) ; while ( t -- > 0 ) { int n = in . nextInt ( ) ; for ( int i = 1 ; i <= n ; i ++ ) { out . print ( i + \" ▁ \" ) ; } out . println ( ) ; } out . close ( ) ; } }","import java . util . Scanner ; public class Codeforces { public static Scanner scanner = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { int t = scanner . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int n = scanner . nextInt ( ) ; for ( int j = 1 ; j <= n ; j ++ ) { System . out . print ( j + \" ▁ \" ) ; } System . out . println ( ) ; } } }","import java . util . * ; public class Main { static Scanner in = new Scanner ( System . in ) ; static int N = 110 ; public static void main ( String [ ] args ) { int t = in . nextInt ( ) ; while ( t -- > 0 ) { int n = in . nextInt ( ) ; for ( int i = n ; i >= 1 ; i -- ) System . out . print ( i + \" ▁ \" ) ; System . out . println ( ) ; } } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . ArrayList ; import java . util . Collections ; import java . util . StringTokenizer ; public class A { public static void main ( String [ ] args ) { FastScanner fs = new FastScanner ( ) ; int t = fs . nextInt ( ) ; while ( t -- > 0 ) { int n = fs . nextInt ( ) ; ArrayList < Integer > a = new ArrayList < > ( ) ; String ans = \" \" ; for ( int i = 1 ; i <= n ; i ++ ) { System . out . print ( i + \" ▁ \" ) ; } System . out . println ( ) ; } } static class FastScanner { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( \" \" ) ; String next ( ) { while ( ! st . hasMoreTokens ( ) ) try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } int [ ] readArray ( int n ) { int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = nextInt ( ) ; return a ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } } }"],"bleu":0.6577568990788348,"rouge_l":0.6310331725214043}
{"id":247,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . math . BigInteger ; import java . util . * ;   import javafx . util . Pair ;   public class Main {   public static void main ( String [ ] args ) { FastScanner input = new FastScanner ( ) ;   int n = input . nextInt ( ) ; String s = input . next ( ) ; int a [ ] = new int [ n ] ; int left = - 1 ; int right = - 1 ; int count = 0 ; int ans [ ] = new int [ n ] ; Arrays . fill ( ans , 1 ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == ' L ' && right == - 1 ) { for ( int j = 0 ; j <= i ; j ++ ) { ans [ j ] = 0 ; } left = - 1 ; right = - 1 ; } else if ( s . charAt ( i ) == ' L ' && right != - 1 ) { for ( int j = right ; j <= i ; j ++ ) { ans [ j ] = 0 ; } if ( ( i - right + 1 ) % 2 != 0 ) ans [ right ] = 1 ; left = - 1 ; right = - 1 ; } else if ( s . charAt ( i ) == ' R ' && right != - 1 ) { for ( int j = right ; j < n ; j ++ ) { ans [ j ] = 0 ; } } else if ( s . charAt ( i ) == ' R ' ) { right = i ; } } if ( right != - 1 && left == - 1 ) { for ( int i = right ; i < n ; i ++ ) { ans [ i ] = 0 ; } } for ( int i = 0 ; i < n ; i ++ ) { count += ans [ i ] ; }","import java . io . * ;   public class CF405B { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int n = Integer . parseInt ( br . readLine ( ) ) ; char [ ] aa = br . readLine ( ) . toCharArray ( ) ; int l = - 1 , r = - 1 , k = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( aa [ i ] == ' L ' ) { l = i ; if ( r >= 0 && ( l - r ) % 2 == 0 ) k ++ ; } else if ( aa [ i ] == ' R ' ) { r = i ; k += r - l - 1 ; } } if ( r <= l ) k += n - l - 1 ; System . out . println ( k ) ; } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ;   public class Domino { public static void main ( String [ ] args ) throws IOException { BufferedReader reader = new BufferedReader ( new InputStreamReader ( System . in ) ) ;   int n = Integer . parseInt ( reader . readLine ( ) ) ;   String s = reader . readLine ( ) ;   int count = 0 ; int r = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == ' L ' ) { if ( r == - 1 ) { count = 0 ; } else { if ( ( i - r ) % 2 == 0 ) count ++ ; } r = - 2 ; } else if ( s . charAt ( i ) == ' R ' ) { r = i ; } else if ( r < 0 ) count ++ ; }   System . out . println ( count ) ; } }"],"bleu":0.0654157675293258,"rouge_l":0.26230000000000003}
{"id":248,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["  import java . util . ArrayList ; import java . util . Arrays ; import java . util . Scanner ; import java . util . Stack ;    public class UkkonenForPreXSufEditTest { static int [ ] suffixOccurrences ; static Node root ;","  import java . util . ArrayList ; import java . util . Arrays ; import java . util . Scanner ; import java . util . Stack ;    public class UkkForTesting { static int [ ] suffixOccurrences ; static Node root ;","  import java . util . ArrayList ; import java . util . Arrays ; import java . util . Scanner ; import java . util . Stack ;    public class UkkForTesting { static int [ ] suffixOccurrences ; static Node root ;","  import java . util . ArrayList ; import java . util . Arrays ; import java . util . Scanner ; import java . util . Stack ;    public class UkkForTesting { static int [ ] suffixOccurrences ; static Node root ;","import java . util . * ; import java . io . * ;   public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; }   public static long mod = 17352642619633L ;"],"bleu":0.42377988075263245,"rouge_l":0.592828418230563}
{"id":249,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ; import java . io . * ;   public class Main { class FastScanner { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( \" \" ) ; String next ( ) { while ( ! st . hasMoreTokens ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } }   public static void main ( String [ ] args ) { FastScanner scan = new Main ( ) . new FastScanner ( ) ; int t = scan . nextInt ( ) ; while ( t -- > 0 ) {   int n = scan . nextInt ( ) ; int a [ ] = new int [ n ] ; int sum = 0 ; for ( int i = 0 ; i < n ; ++ i ) { a [ i ] = scan . nextInt ( ) ; if ( a [ i ] <= 2048 ) { sum += a [ i ] ; } } if ( sum >= 2048 ) { System . out . println ( \" YES \" ) ; } else { System . out . println ( \" NO \" ) ; } } } }","import java . util . Scanner ;   public class _0661twozerofoureightGame {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int q = sc . nextInt ( ) ; while ( q > 0 ) { int n = sc . nextInt ( ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int temp = sc . nextInt ( ) ; if ( temp > 2048 ) { continue ; } else { sum += temp ; } } if ( sum >= 2048 ) { System . out . println ( \" YES \" ) ; } else { System . out . println ( \" NO \" ) ; } q -- ; } }   }","  import java . util . Arrays ; import java . util . Scanner ;   public class Game2048 { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] < 2049 ) { sum += a [ i ] ; }   } if ( sum > 2047 ) System . out . println ( \" yes \" ) ; else System . out . println ( \" no \" ) ; } } }"],"bleu":0.0738278731782821,"rouge_l":0.21701749184702046}
{"id":250,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ;   public class VotingPhotos {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; HashMap < Integer , Integer > hm = new HashMap < > ( ) ; int n = sc . nextInt ( ) ; int a [ ] = new int [ n ] ; int like = 1 ; int id = 0 ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; if ( ! hm . containsKey ( a [ i ] ) ) { hm . put ( a [ i ] , 1 ) ; } else { int value = hm . get ( a [ i ] ) ; value ++ ; hm . put ( a [ i ] , value ) ; if ( value > like ) { like = value ; id = a [ i ] ; } } } if ( id == 0 ) { System . out . println ( a [ 0 ] ) ; } else { System . out . println ( id ) ; } } }","import java . io . * ; import java . util . * ;   public class voting { public static void main ( String args [ ] ) { FScanner in = new FScanner ( ) ; PrintWriter out = new PrintWriter ( System . out ) ; int n = in . nextInt ( ) ; int ans = 0 , max = 0 ; int a [ ] = new int [ 1000001 ] ; for ( int i = 0 ; i < n ; i ++ ) { int b = in . nextInt ( ) ; a [ b ] ++ ; if ( a [ b ] > max ) { max = a [ b ] ; ans = b ; }   } out . print ( ans ) ;   out . close ( ) ; }   static class FScanner { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer sb = new StringTokenizer ( \" \" ) ;   String next ( ) { while ( ! sb . hasMoreTokens ( ) ) { try { sb = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { } } return sb . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } } }","import java . util . Scanner ; import java . util . Arrays ; public class Quiz { Scanner in = new Scanner ( System . in ) ; public void run ( ) { int n ; int [ ] arr = new int [ 1001 ] ; int [ ] arr2 = new int [ 1000001 ] ; n = in . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = in . nextInt ( ) ; arr2 [ arr [ i ] ] ++ ; } int b = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( arr2 [ arr [ j ] ] > b ) b = arr2 [ arr [ j ] ] ; } for ( int i = 0 ; i < arr2 . length ; i ++ ) { arr2 [ i ] = 0 ; } for ( int i = 0 ; i < n ; i ++ ) { arr2 [ arr [ i ] ] ++ ; if ( arr2 [ arr [ i ] ] == b ) { System . out . println ( arr [ i ] ) ; break ; } } } public static void main ( String [ ] args ) { Quiz a = new Quiz ( ) ; a . run ( ) ; } }","import java . util . * ; public class M_Round_5 { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ;"],"bleu":0.317172186076442,"rouge_l":0.5044796691936596}
{"id":251,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException {"],"references":["  import java . util . * ; import java . lang . * ; import java . io . * ;   public class Main { public static void main ( String [ ] args ) throws java . lang . Exception { Scanner scn = new Scanner ( System . in ) ; int t = scn . nextInt ( ) ; while ( t -- > 0 ) { int d = scn . nextInt ( ) ; long a = d + 1 ; a = primeNext ( a ) ; long b = a + d ; b = primeNext ( b ) ; long ans = a * b ; System . out . println ( ans ) ; } } public static long primeNext ( long n ) { while ( true ) { if ( isPrime ( n ) ) { break ; } else { n ++ ; } } return n ; } public static boolean isPrime ( long n ) { boolean flag = true ; for ( long i = 2 ; i * i <= n ; i ++ ) { if ( n % i == 0 ) { flag = false ; break ; } } return flag ; } }","import java . io . BufferedReader ; import java . io . FileNotFoundException ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . concurrent . ArrayBlockingQueue ;   public class DifferentDivisors { public static void main ( String [ ] args ) { try { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; String linea ; linea = br . readLine ( ) ; int limite = Integer . parseInt ( linea ) ; long d , a ; for ( int l = 1 ; l <= limite ; l ++ ) { d = Long . parseLong ( br . readLine ( ) ) ; if ( d == 1 ) { System . out . println ( 6 ) ; } else { a = EncontrarPrimo ( d + 1 ) ; d = a + d ; a = a * EncontrarPrimo ( d ) ; System . out . println ( a ) ; } } br . close ( ) ; } catch ( FileNotFoundException e ) {","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ;","import java . util . * ; import java . io . * ;   public class B_Different_Divisors {   static class FastReader { BufferedReader br ; StringTokenizer st ;   public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; }   String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   long nextLong ( ) { return Long . parseLong ( next ( ) ) ; }   double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; }   String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } }   public static void main ( String [ ] args ) { FastReader scan = new FastReader ( ) ; int t = scan . nextInt ( ) ; while ( t -- > 0 ) { long d = scan . nextLong ( ) ; long x = findNextPrime ( 1 + d ) ; long y = findNextPrime ( x + d ) ;","import java . util . Arrays ; import java . util . Scanner ; public class Main { static boolean isPrime ( long n ) { if ( n % 2 == 0 ) return false ; long root = ( long ) Math . sqrt ( n ) ; for ( int i = 3 ; i <= root ; i += 2 ) { if ( n % i == 0 ) return false ; } return true ; } public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int tc = sc . nextInt ( ) ; boolean is_prime [ ] = new boolean [ 100001 ] ; Arrays . fill ( is_prime , true ) ; is_prime [ 0 ] = is_prime [ 1 ] = false ; for ( int i = 2 ; i * i <= 100000 ; i ++ ) { if ( is_prime [ i ] ) { for ( int j = i * i ; j <= 100000 ; j += i ) is_prime [ j ] = false ; } } while ( tc -- > 0 ) { int d = sc . nextInt ( ) ; int count = 2 , ans = 1 , i = 2 , last = 1 ; if ( d == 1 ) { System . out . println ( 6 ) ; continue ; } while ( count > 0 ) { if ( is_prime [ i ] && i - last >= d ) { ans *= i ; count -- ; last = i ; i += d - 1 ; } i ++ ; } System . out . println ( ans ) ; } sc . close ( ) ; } }"],"bleu":0.9495322324999256,"rouge_l":0.632741723638568}
{"id":252,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ;"],"references":["import java . io . * ; import java . util . * ;   public class Main { public static void main ( String [ ] args ) throws IOException {","import java . util . * ; import java . io . * ;   public class Dreamoon_Likes_Coloring {   static class FastReader { BufferedReader br ; StringTokenizer st ;   public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; }   String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   long nextLong ( ) { return Long . parseLong ( next ( ) ) ; }   double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; }   String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; }   }   public static void shuffle ( int [ ] a ) { Random r = new Random ( ) ;   for ( int i = 0 ; i <= a . length - 2 ; i ++ ) { int j = i + r . nextInt ( a . length - i ) ;   swap ( a , i , j ) ; } }   public static void swap ( int [ ] a , int i , int j ) { int temp = a [ i ] ; a [ i ] = a [ j ] ; a [ j ] = temp ; }   public static void main ( String [ ] args ) {","import java . io . BufferedOutputStream ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . ArrayList ; import java . util . List ; import java . util . StringTokenizer ;   public class DreamoonLikesColoring { public static PrintWriter out ; public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ;"],"bleu":0.9056937901703723,"rouge_l":0.8594679946556539}
{"id":253,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException {"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . * ;   public class Solution { private static final BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ;   public static void main ( String [ ] args ) throws IOException {   int n = nextInt ( ) ; int inp [ ] = readIntArray ( ) ; int min1 = inp [ 0 ] , max1 = inp [ 1 ] ; inp = readIntArray ( ) ; int min2 = inp [ 0 ] , max2 = inp [ 1 ] ; inp = readIntArray ( ) ; int min3 = inp [ 0 ] , max3 = inp [ 1 ] ;   int res1 = min1 , res2 = min2 , res3 = min3 ; int tot = ( res1 + res2 + res3 ) ; if ( tot < n ) { res1 += Math . min ( ( n - tot ) , ( max1 - res1 ) ) ; tot = ( res1 + res2 + res3 ) ; } if ( tot < n ) { res2 += Math . min ( ( n - tot ) , ( max2 - res2 ) ) ; tot = ( res1 + res2 + res3 ) ; }   if ( tot < n ) { res3 += Math . min ( ( n - tot ) , ( max3 - res3 ) ) ; } println ( res1 + \" ▁ \" + res2 + \" ▁ \" + res3 ) ; }   public static void swap ( int arr [ ] , int from , int to ) { println ( \" swapping : ▁ \" + from + \" ▁ & ▁ \" + to ) ; int temp = arr [ from ] ; arr [ from ] = arr [ to ] ; arr [ to ] = temp ; }   ","import java . io . * ; import java . util . * ;   public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] min = new int [ 3 ] , max = new int [ 3 ] ;   for ( int i = 0 ; i < 3 ; i ++ ) { st = new StringTokenizer ( br . readLine ( ) ) ; min [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; max [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; n -= min [ i ] ; }   for ( int i = 0 ; i < 3 ; i ++ ) { if ( n > 0 ) { int res = Math . min ( n , max [ i ] - min [ i ] ) ; min [ i ] += res ; n -= res ; } } System . out . println ( min [ 0 ] + \" ▁ \" + min [ 1 ] + \" ▁ \" + min [ 2 ] ) ; } }","  import java . io . * ; import java . math . BigInteger ; import java . util . * ; import java . util . Stack ;    public class Main { public static class FastReader { BufferedReader br ; StringTokenizer root ; public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( root == null || ! root . hasMoreTokens ( ) ) { try { root = new StringTokenizer ( br . readLine ( ) ) ; } catch ( Exception r ) { r . printStackTrace ( ) ; } } return root . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( Exception r ) { r . printStackTrace ( ) ; } return str ; } } public static PrintWriter out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; static int mod = ( int ) ( 1e9 + 7 ) ; static long cf = 998244353 ; static final int MAX = ( int ) ( 1e5 + 1 ) ; static int dfs = 0 , bridges = 0 ; public static List < Integer > [ ] edges ; public static int [ ] [ ] parent ; public static int col = 20 ; public static long [ ] Bit ; public static long [ ] fac , inv ; public static int [ ] prime ; public static long [ ] dp , idx , low ; public static boolean found = false ; public static boolean [ ] vis ; public static TreeSet < Pair > st = new TreeSet < > ( ) ; public static FastReader sc = new FastReader ( ) ; public static void main ( String [ ] args ) {"],"bleu":0.0009726523166145275,"rouge_l":0.19416777903275487}
{"id":254,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException {"],"references":["import javax . print . DocFlavor ; import java . io . * ; import java . net . Inet4Address ; import java . sql . ClientInfoStatus ; import java . util . * ;  ","  import java . io . BufferedReader ; import java . io . BufferedWriter ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . OutputStream ; import java . io . OutputStreamWriter ; import java . io . PrintWriter ; import java . util . Scanner ; import java . util . StringTokenizer ; import java . util . * ;   import static java . lang . System . out ; public class c693a {","import java . util . Scanner ;   public class ZuhairStr { public static void main ( String [ ] args ) {   Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) , k = in . nextInt ( ) , j , o = 0 ; String s = in . next ( ) ; in . close ( ) ;   for ( char i = ' a ' ; i <= ' z ' ; i ++ ) { int x = 0 , y = 0 ; for ( j = 0 ; j < n ; j ++ ) {   if ( s . charAt ( j ) == i ) { x ++ ; } else { x = 0 ; } if ( x >= k ) { y ++ ; x = 0 ; } } o = Math . max ( o , y ) ; } System . out . println ( o ) ; } }","import java . util . * ; public class ch1 { public static void main ( String [ ] args ) { int n , k ; Scanner reader = new Scanner ( System . in ) ; n = reader . nextInt ( ) ; k = reader . nextInt ( ) ; char [ ] b = new char [ n ] ; int i , j , l = 0 ; String str = reader . next ( ) ; boolean flag2 = true ; for ( i = 0 ; i < n ; ++ i ) { boolean flag = true ; for ( j = 0 ; j < k - 1 ; ++ j ) { if ( i + 1 == n ) { flag = false ; ++ i ; break ; } if ( str . charAt ( i ) != str . charAt ( ++ i ) ) { flag = false ; break ; } } if ( flag ) { b [ l ++ ] = str . charAt ( i ) ; flag2 = false ; } else -- i ; } if ( flag2 ) System . out . println ( \"0\" ) ; else { Arrays . sort ( b , 0 , l ) ; int max = 1 , max1 = 1 ; for ( i = 0 ; i < l - 1 ; ++ i ) { if ( b [ i ] == b [ i + 1 ] ) ++ max1 ; else { if ( max < max1 ) max = max1 ; max1 = 1 ; } } System . out . println ( max > max1 ? max : max1 ) ; } } }"],"bleu":0.7305272195514341,"rouge_l":0.47112909157778604}
{"id":255,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["  import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ;   public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;  ","import java . util . * ;   public class Problem_276B { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; String str = s . next ( ) ;   int [ ] freqOf = new int [ 26 ] ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) freqOf [ str . charAt ( i ) - ' a ' ] ++ ;   HashMap < Integer , Integer > oddFreqChars = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < 26 ; i ++ ) if ( freqOf [ i ] % 2 == 1 ) oddFreqChars . put ( i , freqOf [ i ] ) ;   int player = 0 ; Iterator < Map . Entry < Integer , Integer > > it = oddFreqChars . entrySet ( ) . iterator ( ) ; while ( it . hasNext ( ) ) { if ( oddFreqChars . size ( ) == 1 ) break ; int oddFreq = it . next ( ) . getValue ( ) ; player = ( player + oddFreq ) % 2 ; it . remove ( ) ; }  ","   import java . util . * ;    public class dummycodes {   public static class data { int prevIndex ; int comDiff ; public data ( int i ) { prevIndex = i ; comDiff = 0 ; } } public static void solve ( String s ) { int arr [ ] = new int [ 26 ] ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { arr [ s . charAt ( i ) - ' a ' ] ++ ; } int cnt = 0 ; for ( int i = 0 ; i < 26 ; i ++ ) { if ( arr [ i ] % 2 != 0 ) cnt ++ ; } if ( cnt == 0 ) { System . out . println ( \" First \" ) ; return ; } if ( cnt % 2 == 0 ) System . out . println ( \" Second \" ) ; else System . out . println ( \" First \" ) ; }   public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . nextLine ( ) ;     solve ( s ) ;    } }                                                                                                                                                                                                           ","import java . util . * ; public class LittleGirlandGame { public static void main ( String arg [ ] ) { Scanner sc = new Scanner ( System . in ) ;   String str = sc . nextLine ( ) ;    int [ ] arr = new int [ 26 ] ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { arr [ str . charAt ( i ) - ' a ' ] ++ ; }   int numOdds = 0 ; for ( int i = 0 ; i < 26 ; i ++ ) { if ( arr [ i ] % 2 != 0 ) { numOdds ++ ; } }   if ( numOdds == 0 || numOdds % 2 != 0 ) System . out . println ( \" First \" ) ; else System . out . println ( \" Second \" ) ;   } }"],"bleu":1.0,"rouge_l":0.9693530079455164}
{"id":256,"predictions":["import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;"],"references":["import java . util . * ; import static java . lang . Math . pow ;   public class Test { public static void main ( String [ ] args ) {   Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; System . out . println ( ( ( n & 1 ) == 0 ) ? ( int ) pow ( 2 , n \/ 2 ) : 0 ) ; } }","import java . io . * ; import java . util . * ; public class FS { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ;   int n = Integer . parseInt ( br . readLine ( ) ) ; if ( n % 2 == 0 ) System . out . println ( ( int ) ( Math . pow ( 2 , n \/ 2 ) ) ) ; else System . out . println ( \"0\" ) ; } }","import java . util . * ;   public class Absolutezero {    public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t1 = sc . nextInt ( ) ; if ( t1 % 2 != 0 ) { System . out . println ( 0 ) ; } else { System . out . println ( ( int ) Math . pow ( 2 , t1 \/ 2 ) ) ; }     }   }","import java . util . * ;   public class Absolutezero {    public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t1 = sc . nextInt ( ) ; if ( t1 % 2 != 0 ) { System . out . println ( 0 ) ; } else { System . out . println ( ( int ) Math . pow ( 2 , t1 \/ 2 ) ) ; }     }   }","import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int n ; n = in . nextInt ( ) ; long ans = 1 ; if ( n % 2 == 1 ) ans = 0 ; else { n \/= 2 ; for ( int i = 0 ; i < n ; i ++ ) { ans *= 2 ; } } System . out . print ( ans ) ; } }"],"bleu":0.12974254386355674,"rouge_l":0.3016036802957995}
{"id":257,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . io . BufferedReader ; import java . io . FileReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Scanner ; import java . util . StringTokenizer ; import java . util . * ; import java . io . * ; public class codeforces { static class Student { int x , y , z ; Student ( int x , int y , int z ) { this . x = x ; this . y = y ; this . z = z ; } } static int prime [ ] ; static void sieveOfEratosthenes ( int n ) {","import java . util . * ; import java . io . * ;"],"bleu":0.6004849362860224,"rouge_l":0.8010890454836642}
{"id":258,"predictions":["import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; } public static long mod = 17352642619633L ; void run ( FastScanner in , PrintWriter out ) {"],"references":["import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collections ; import java . util . Scanner ; import java . lang . Math ; public class Account { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; ArrayList < Integer > list = new ArrayList < > ( ) ; list . add ( 1 ) ; if ( n == 1 ) { System . out . println ( \"1\" ) ; return ; } int i = 2 , d = 1 ; while ( i < n ) { if ( n % i == 0 ) { list . add ( i ) ; d = i ; } i += d ; } list . add ( n ) ; for ( i = list . size ( ) - 1 ; i >= 0 ; i -- ) { System . out . print ( list . get ( i ) + \" ▁ \" ) ; } } }","import java . util . * ; import java . lang . * ; import java . io . * ;   public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) {","import java . io . * ; import java . util . * ; public class Asd { static PrintWriter w = new PrintWriter ( System . out ) ; static FastScanner s = new FastScanner ( ) ; static HashSet < Long > list = new HashSet < > ( ) ; public static void main ( String [ ] args ) {","import java . util . * ;   public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int flag = 0 ; while ( n != 1 ) { System . out . print ( n + \" ▁ \" ) ; flag = 0 ; for ( int i = 2 ; i <= Math . sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { flag = 1 ; n \/= i ; break ; } } if ( flag == 0 ) break ; } System . out . println ( 1 ) ; } }"],"bleu":0.5387409530761049,"rouge_l":0.6201229557600353}
{"id":259,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . StringTokenizer ; public class Cv {"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import static java . lang . Math . * ; import static java . lang . System . out ; import java . util . * ; import java . io . PrintStream ; import java . io . PrintWriter ; public class A { static final int N = ( int ) ( 1e5 + 100 ) ; static final int mod = 1000000007 ; static final long temp = 998244353 ; static final long MOD = 1000000007 ; static final long M = ( long ) 1e9 + 7 ; static class Pair implements Comparable < Pair > { long first , second ; public Pair ( long aa , long bb ) { first = aa ; second = bb ; } public int compareTo ( Pair o ) { return ( int ) ( o . first - this . first ) ; } } static class Tuple implements Comparable < Tuple > { long first , second , third ; public Tuple ( long first , long second , long third ) { this . first = first ; this . second = second ; this . third = third ; } public int compareTo ( Tuple o ) { return ( int ) ( o . third - this . third ) ; } } public static class DSU { int [ ] parent ; int [ ] rank ;","  import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Scanner ; import java . util . StringTokenizer ; import java . util . * ; public class er10a {","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import static java . lang . Math . * ; import static java . lang . System . out ; import java . util . * ; import java . io . PrintStream ; import java . io . PrintWriter ; public class A { static final int N = ( int ) ( 1e5 + 100 ) ; static final int mod = 1000000007 ; static final long temp = 998244353 ; static final long MOD = 1000000007 ; static final long M = ( long ) 1e9 + 7 ; static class Pair implements Comparable < Pair > { long first , second ; public Pair ( long aa , long bb ) { first = aa ; second = bb ; } public int compareTo ( Pair o ) { return ( int ) ( o . first - this . first ) ; } } static class Tuple implements Comparable < Tuple > { long first , second , third ; public Tuple ( long first , long second , long third ) { this . first = first ; this . second = second ; this . third = third ; } public int compareTo ( Tuple o ) { return ( int ) ( o . third - this . third ) ; } } public static class DSU { int [ ] parent ; int [ ] rank ;"],"bleu":0.7626037984336882,"rouge_l":0.8233970753655794}
{"id":260,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ;"],"references":["import java . util . * ; public class ChessCheater {   public static void main ( String [ ] args ) {","import java . util . * ; import java . lang . * ; import java . io . * ; public class Main { PrintWriter out ; FastReader sc ; int mod = ( int ) ( 1e9 + 7 ) ; public void sol ( ) { int t = ni ( ) ; while ( t -- > 0 ) { int n = ni ( ) , k = ni ( ) ; char [ ] s = rl ( ) ; ArrayList < Integer > l = new ArrayList < > ( ) ; int a = 0 , b = n - 1 ; while ( a < n && s [ a ] != ' W ' ) { a ++ ; } while ( b > a && s [ b ] != ' W ' ) { b -- ; } int i = a ; int count = 0 ; while ( true ) { int q = 0 ; while ( i <= b && s [ i ] == ' W ' ) { i ++ ; count ++ ; } while ( i <= b && s [ i ] == ' L ' ) { i ++ ; q ++ ; } if ( q != 0 ) l . add ( q ) ; if ( i > b ) break ; } Collections . sort ( l ) ; int x = 1 ;","  import java . awt . Desktop ;    import java . io . BufferedReader ;    import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . net . URI ; import java . net . URISyntaxException ; import java . sql . Array ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collections ; import java . util . Comparator ; import java . util . HashMap ; import java . util . HashSet ; import java . util . Iterator ; import java . util . LinkedHashMap ; import java . util . LinkedHashSet ; import java . util . LinkedList ; import java . util . List ; import java . util . Map ; import java . util . PriorityQueue ; import java . util . Queue ; import java . util . Scanner ; import java . util . Set ; import java . util . Stack ; import java . util . StringTokenizer ; import java . util . TreeSet ; import java . util . Vector ;     public class codechef3 { static class comp implements Comparator < Integer > {   @ Override public int compare ( Integer o1 , Integer o2 ) { if ( Math . abs ( o1 ) > Math . abs ( o2 ) ) return - 1 ; else return 1 ; } }"],"bleu":0.5951852236098214,"rouge_l":0.7731084429197635}
{"id":261,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . nio . file . LinkOption ; import java . util . * ; public class Example { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t > 0 ) { int n = sc . nextInt ( ) ; String s = sc . next ( ) ; if ( s . length ( ) == 2 ) { int a = Integer . parseInt ( String . valueOf ( s . charAt ( 0 ) ) ) ; int b = Integer . parseInt ( String . valueOf ( s . charAt ( 1 ) ) ) ; if ( b > a ) { System . out . println ( \" YES \" ) ; System . out . println ( 2 ) ; System . out . println ( s . charAt ( 0 ) + \" ▁ \" + s . charAt ( 1 ) ) ; } else System . out . println ( \" NO \" ) ; } else { System . out . println ( \" YES \" ) ; System . out . println ( 2 ) ; System . out . println ( s . substring ( 0 , 1 ) + \" ▁ \" + s . substring ( 1 ) ) ; }   t -- ; } } }","import java . awt . image . AreaAveragingScaleFilter ; import java . util . * ;   public class StackBracket { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int l = sc . nextInt ( ) ; String s = sc . next ( ) ;","import java . util . * ; import java . io . * ; public class EdE { static long [ ] mods = { 1000000007 , 998244353 , 1000000009 } ; static long mod = mods [ 0 ] ; public static MyScanner sc ; public static PrintWriter out ; public static void main ( String [ ] omkar ) throws Exception {","import java . awt . image . AreaAveragingScaleFilter ; import java . util . * ;   public class StackBracket { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int l = sc . nextInt ( ) ; String s = sc . next ( ) ;"],"bleu":0.2874789715561498,"rouge_l":0.4228011472275334}
{"id":262,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ; public class Pangram { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; int n = s . nextInt ( ) ; String str = s . next ( ) ; if ( n < 26 ) { System . out . println ( \" NO \" ) ; } else { int [ ] arr = new int [ 26 ] ; for ( int i = 0 ; i < n ; i ++ ) { char a = str . charAt ( i ) ; if ( a >= 65 && a <= 91 ) { arr [ a - 65 ] ++ ; } else if ( a >= 97 && a <= 122 ) { arr [ a - 97 ] ++ ; } } int flag = 0 ; for ( int i = 0 ; i < 26 ; i ++ ) { if ( arr [ i ] == 0 ) { System . out . println ( \" NO \" ) ; flag = 1 ; break ; } } if ( flag == 0 ) { System . out . println ( \" YES \" ) ; } } } }","import java . util . * ; public class Pangram { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int count = 0 ; for ( char c = ' a ' ; c <= ' z ' ; c ++ ) { if ( s . toLowerCase ( ) . contains ( String . valueOf ( c ) ) ) count ++ ; } if ( count == 26 ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ; } }","import java . util . Locale ; import java . util . Scanner ;   public class Pangram { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = Integer . parseInt ( scanner . nextLine ( ) ) ; String line = scanner . nextLine ( ) . toLowerCase ( Locale . US ) ;   boolean [ ] items = new boolean [ 26 ] ;   for ( int i = 0 ; i < n ; i ++ ) { char ch = line . charAt ( i ) ; items [ ch - ' a ' ] = true ; }   boolean allTrue = true ; for ( int i = 0 ; i < items . length ; i ++ ) { if ( ! items [ i ] ) { allTrue = false ; } }   System . out . println ( allTrue ? \" YES \" : \" NO \" ) ; } }","import javax . print . DocFlavor ; import java . util . * ;   public class Pangram { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; String s = scanner . next ( ) ; Map < Character , Integer > map = new HashMap < > ( ) ; for ( char i : s . toCharArray ( ) ) { char c = Character . toLowerCase ( i ) ; map . put ( c , map . getOrDefault ( c , 1 ) ) ; } if ( map . size ( ) == 26 ) { System . out . println ( \" YES \" ) ; } else { System . out . println ( \" NO \" ) ; } }   }","import java . io . * ; import java . util . * ; public class anagram { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; s = s . toLowerCase ( ) ; int a [ ] = new int [ 26 ] ; char ch ; for ( int i = 0 ; i < n ; i ++ ) { ch = s . charAt ( i ) ; a [ ( int ) ch - 97 ] ++ ;   }   for ( int i = 0 ; i < 26 ; i ++ ) { if ( a [ i ] == 0 ) { System . out . println ( \" NO \" ) ; System . exit ( 0 ) ; } } System . out . println ( \" YES \" ) ; } }"],"bleu":0.08824444734947816,"rouge_l":0.23296122209165687}
{"id":263,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ; import java . io . * ; import java . math . * ; public class Main {","import com . sun . org . apache . bcel . internal . generic . AALOAD ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . math . BigInteger ; import java . util . * ; import java . util . stream . IntStream ; import javafx . util . Pair ;   public class Main {   static void sort ( double a [ ] ) { Random ran = new Random ( ) ; for ( int i = 0 ; i < a . length ; i ++ ) { int r = ran . nextInt ( a . length ) ; double temp = a [ r ] ; a [ r ] = a [ i ] ; a [ i ] = temp ; }   Arrays . sort ( a ) ; }   public static void main ( String [ ] args ) throws IOException { InputStreamReader r = new InputStreamReader ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; BufferedReader input = new BufferedReader ( r ) ; String a = input . readLine ( ) . replaceFirst ( \"0 * \" , \" \" ) ; String b = input . readLine ( ) . replaceFirst ( \"0 * \" , \" \" ) ; if ( a . length ( ) > b . length ( ) ) { out . println ( \" > \" ) ; } else if ( a . length ( ) < b . length ( ) ) { out . println ( \" < \" ) ; } else if ( a . compareTo ( b ) > 0 ) { out . println ( \" > \" ) ; } else if ( a . compareTo ( b ) < 0 ) { out . println ( \" < \" ) ; } else out . println ( \" = \" ) ; out . close ( ) ; }   }  ","import com . sun . org . apache . bcel . internal . generic . AALOAD ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . math . BigInteger ; import java . util . * ; import java . util . stream . IntStream ; import javafx . util . Pair ;   public class Main {   static void sort ( double a [ ] ) { Random ran = new Random ( ) ; for ( int i = 0 ; i < a . length ; i ++ ) { int r = ran . nextInt ( a . length ) ; double temp = a [ r ] ; a [ r ] = a [ i ] ; a [ i ] = temp ; }   Arrays . sort ( a ) ; }   public static void main ( String [ ] args ) throws IOException { InputStreamReader r = new InputStreamReader ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; BufferedReader input = new BufferedReader ( r ) ; String a = input . readLine ( ) . replaceFirst ( \" ^ 0 * \" , \" \" ) ; String b = input . readLine ( ) . replaceFirst ( \" ^ 0 * \" , \" \" ) ; if ( a . length ( ) > b . length ( ) ) { out . println ( \" > \" ) ; } else if ( a . length ( ) < b . length ( ) ) { out . println ( \" < \" ) ; } else if ( a . compareTo ( b ) > 0 ) { out . println ( \" > \" ) ; } else if ( a . compareTo ( b ) < 0 ) { out . println ( \" < \" ) ; } else out . println ( \" = \" ) ; out . close ( ) ; }   }  ","import java . util . * ; import java . io . * ; import java . util . stream . * ; public class Solution { public static void main ( String [ ] args ) throws Exception { BufferedReader in = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringBuilder a = new StringBuilder ( ) ; StringBuilder b = new StringBuilder ( ) ; int ch ; do { ch = in . read ( ) ; } while ( ch == '0' ) ; a . append ( ch ) . append ( in . readLine ( ) ) ; do { ch = in . read ( ) ; } while ( ch == '0' ) ; b . append ( ch ) . append ( in . readLine ( ) ) ; char result = ' = ' ; if ( a . length ( ) > b . length ( ) ) { result = ' > ' ; } else if ( a . length ( ) < b . length ( ) ) { result = ' < ' ; } else { int len = a . length ( ) ; int ind = 0 ; while ( ind < len && a . charAt ( ind ) == b . charAt ( ind ) ) { ind ++ ; } if ( ind < len ) { if ( a . charAt ( ind ) < b . charAt ( ind ) ) { result = ' < ' ; } else { result = ' > ' ; } } } System . out . println ( result ) ; } }"],"bleu":0.6101325231431937,"rouge_l":0.8014598540145985}
{"id":264,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Scanner ; import java . util . StringTokenizer ; import java . util . * ; import java . math . * ; public class er10a {"],"references":["import java . util . * ; import java . io . * ; public class A { static FastReader in = new FastReader ( ) ; static final Random random = new Random ( ) ; static long mod = 1000000007L ; static HashMap < Integer , Integer > map = new HashMap < > ( ) ;   public static void main ( String args [ ] ) throws IOException { int t = 1 ;","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ;   public class MaxSubArray {   public static void main ( String [ ] args ) throws IOException {    BufferedReader reader = new BufferedReader ( new InputStreamReader ( System . in ) ) ;   int n = Integer . parseInt ( reader . readLine ( ) ) ; String str = reader . readLine ( ) ; String arr [ ] = str . split ( \" ▁ \" ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = Integer . parseInt ( arr [ i ] ) ; } int ans = 1 ; for ( int i = 0 ; i < arr . length ; i ++ ) { int j = i ; while ( j + 1 < n && a [ j + 1 ] <= 2 * a [ j ] ) { j ++ ; } ans = Math . max ( ans , j - i + 1 ) ; i = j ; } System . out . println ( ans ) ;   }    }","import java . util . * ; import java . io . * ; import java . math . * ;   public class First { public static void process ( ) throws IOException { int n = ni ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = ni ( ) ; } int i = 0 , j = 0 ; int ans = Integer . MIN_VALUE ; while ( i < n ) { if ( i == n - 1 ) { int len = ( i + 1 ) - j ; ans = Math . max ( ans , len ) ; break ; }   if ( a [ i + 1 ] > ( 2 * a [ i ] ) ) { int len = ( i + 1 ) - j ; ans = Math . max ( ans , len ) ; i ++ ; j = i ; } else { i ++ ; } } pn ( ans ) ;   }    static AnotherReader sc ; static PrintWriter out ; public static void main ( String [ ] args ) throws IOException { out = new PrintWriter ( System . out ) ; sc = new AnotherReader ( ) ; boolean oj = true ;  ","import java . io . * ;   import java . util . * ; public class Solution { public static void main ( String [ ] args ) throws Exception { FastReader fr = new FastReader ( ) ; int n = fr . nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = fr . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; ++ i ) { int j = i ; while ( j + 1 < n && a [ j + 1 ] <= a [ j ] * 2 ) ++ j ; ans = Math . max ( ans , j - i + 1 ) ; i = j ; } System . out . println ( ans ) ; } public static boolean check ( String s ) {"],"bleu":0.4027122078864916,"rouge_l":0.29880420688661574}
{"id":265,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ; import java . util . Scanner ; import java . io . * ; import javax . lang . model . util . ElementScanner6 ; import static java . lang . System . out ; import java . util . Stack ; import java . util . Queue ; import java . util . LinkedList ;   public class B911 {   static int mod = ( int ) ( 1e9 + 7 ) ; static long MOD = ( long ) ( 1e9 + 7 ) ; static FastReader in = new FastReader ( ) ; static PrintWriter pr = new PrintWriter ( new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ) ; public static void main ( String args [ ] ) {   int tc = 1 ;","import java . util . Scanner ;   public class TwoCakes { public static void main ( String [ ] args ) {   Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) , a = in . nextInt ( ) , b = in . nextInt ( ) , i , o = 0 ; in . close ( ) ;   for ( i = 1 ; i < n ; i ++ ) o = Math . max ( o , Math . min ( a \/ i , b \/ ( n - i ) ) ) ; System . out . println ( o ) ; } }","import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;   public class Two_Cake { static class FastReader { BufferedReader br ; StringTokenizer st ;   public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; }   String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( Exception e ) {   e . printStackTrace ( ) ; }   } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } return str ; }   long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } }   public static void main ( String [ ] args ) { FastReader in = new FastReader ( ) ; int n = in . nextInt ( ) ; int a = in . nextInt ( ) ; int b = in . nextInt ( ) ;   System . out . println ( Solve ( n , a , b ) ) ; } static int Solve ( int n , int a , int b ) { int l = 1 ; int r = Math . min ( a , b ) ; int ans = 0 ; while ( l <= r ) { int mid = ( l + r ) \/ 2 ; if ( good ( mid , n , a , b ) ) { l = mid + 1 ; ans = mid ; } else { r = mid - 1 ; } } return ans ; } static boolean good ( int mid , int n , int a , int b ) { return a \/ mid + b \/ mid >= n ; }   }","  import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collections ; import java . util . Scanner ; import java . util . TreeMap ; import java . util . TreeSet ;    public class Main {   public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; int a = input . nextInt ( ) ; int b = input . nextInt ( ) ; int result = - 1 ; int j = 1 ; while ( j < n ) { result = Math . max ( result , Math . min ( a \/ j , b \/ ( n - j ) ) ) ; j ++ ; } System . out . println ( result ) ; } }","  import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Scanner ; import java . util . StringTokenizer ; import java . util . * ; import java . math . * ; public class c705b {"],"bleu":0.6392655586028764,"rouge_l":0.6127464356368101}
{"id":266,"predictions":["import java . util . * ; import java . lang . * ; import java . io . * ; public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) {"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Arrays ; import java . util . Scanner ; import java . util . StringTokenizer ; import java . util . ArrayList ; import java . util . TreeSet ; import java . util . Collections ; import java . util . List ; public class Hello { static class FastReader { BufferedReader br ; StringTokenizer st ; public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } public static void main ( String [ ] args ) { FastReader in = new FastReader ( ) ;","import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . OutputStream ; import java . util . Arrays ; import java . io . IOException ; import java . util . stream . Collectors ; import java . io . UncheckedIOException ; import java . util . List ; import java . util . stream . Stream ; import java . util . Map ; import java . io . Closeable ; import java . io . Writer ; import java . io . OutputStreamWriter ; import java . io . InputStream ;   public class Main { public static void main ( String [ ] args ) throws Exception { Thread thread = new Thread ( null , new TaskAdapter ( ) , \" \" , 1 << 27 ) ; thread . start ( ) ; thread . join ( ) ; }   static class TaskAdapter implements Runnable { @ Override public void run ( ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; FastInput in = new FastInput ( inputStream ) ; FastOutput out = new FastOutput ( outputStream ) ; BGameWithString solver = new BGameWithString ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } }   static class BGameWithString { public void solve ( int testNumber , FastInput in , FastOutput out ) { char [ ] s = in . readString ( ) . toCharArray ( ) ; int n = s . length ; Rotate [ ] rotates = new Rotate [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { rotates [ i ] = new Rotate ( s , i ) ; } Map < Integer , List < Rotate > > groupByFirst = Stream . of ( rotates ) . collect ( Collectors . groupingBy ( x -> x . get ( 0 ) ) ) ;   Rotate [ ] appear = new Rotate [ ' z ' - ' a ' + 1 ] ; long sum = 0 ; Rotate dump = new Rotate ( s , 0 ) ; for ( List < Rotate > list : groupByFirst . values ( ) ) {"],"bleu":0.0009220849837978585,"rouge_l":0.16828386605783865}
{"id":267,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ; import java . io . * ; import java . math . * ; public class Main {","import java . util . * ; public class lever { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; String s = in . next ( ) ; int p = s . indexOf ( \" ^ \" ) ; long l = 0 , r = 0 ; for ( int i = 0 ; i < p ; i ++ ) if ( s . charAt ( i ) != ' = ' ) l += Integer . valueOf ( s . substring ( i , i + 1 ) ) * ( p - i ) ; for ( int i = p + 1 ; i < s . length ( ) ; i ++ ) if ( s . charAt ( i ) != ' = ' ) r += Integer . valueOf ( s . substring ( i , i + 1 ) ) * ( i - p ) ;","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; import java . util . StringTokenizer ; public class Main { static class FastReader { BufferedReader br ; StringTokenizer st ; public FastReader ( ) { br = new BufferedReader ( newInputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } }    public static void main ( String [ ] args ) { FastReader fs = new FastReader ( ) ; char [ ] a = fs . nextLine ( ) . toCharArray ( ) ; int n = a . length ; int pol = 0 ;   for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == ' ^ ' ) pol = i ; }   long force = 0 ;   for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] >= '0' && a [ i ] <= '9' ) { long val = ( long ) ( ( pol - i ) ) * ( long ) ( a [ i ] - '0' ) ;","  import java . util . * ; import java . lang . * ; import java . io . * ;   public class Ideone { public static void main ( String [ ] args ) throws java . lang . Exception {","import java . util . * ; import java . io . * ; import java . util . regex . * ; public class Solution { public static void main ( String [ ] args ) throws Exception { Scanner scan = new Scanner ( System . in ) ; String s = scan . nextLine ( ) ; long rPlace = s . indexOf ( \" ^ \" ) ; long rSum = 0 ; long lSum = 0 ; boolean leftSide = true ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { char ch = s . charAt ( i ) ; if ( ch == ' ^ ' ) { leftSide = false ; } else if ( ch != ' = ' ) { long shoulder ; int w = ch - '0' ; if ( leftSide ) { shoulder = rPlace - i ; lSum += shoulder * w ; } else { shoulder = i - rPlace ; rSum += shoulder * w ; } } } String result = ( lSum == rSum ) ? \" balance \" : ( lSum > rSum ) ? \" left \" : \" right \" ; System . out . println ( result ) ; } }"],"bleu":0.6306828664643522,"rouge_l":0.8014598540145985}
{"id":268,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ;   public class Check2 { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int q = sc . nextInt ( ) ; for ( int i = 1 ; i <= q ; i ++ ) { int l = sc . nextInt ( ) ; int r = sc . nextInt ( ) ; int d = sc . nextInt ( ) ;   int ans1 = ( l - 1 ) \/ d ; if ( ans1 > 0 ) { ans1 = d ; } else { ans1 = ( int ) ( Math . ceil ( ( r + 1 ) \/ ( double ) d ) ) * d ; } System . out . println ( ans1 ) ; }    }      public static long power ( long a , long b , long c ) { long ans = 1 ; while ( b != 0 ) { if ( b % 2 == 1 ) { ans = ans * a ; ans %= c ; } a = a * a ; a %= c ; b \/= 2 ; } return ans ; }   public static long power1 ( long a , long b , long c ) { long ans = 1 ; while ( b != 0 ) { if ( b % 2 == 1 ) { ans = multiply ( ans , a , c ) ; } a = multiply ( a , a , c ) ; b \/= 2 ;   } return ans ;   }   public static long multiply ( long a , long b , long c ) { long res = 0 ; a %= c ; while ( b > 0 ) { if ( b % 2 == 1 ) { res = ( res + a ) % c ; } a = ( a + a ) % c ; b \/= 2 ; }   return res % c ;   }   public static long totient ( long n ) { long result = n ; for ( long i = 2 ; i * i <= n ; i ++ ) { if ( n % i == 0 ) {","import java . util . * ; import java . util . jar . JarOutputStream ;   public class Practise {   public static int [ ] [ ] dp ; public static void main ( String [ ] args ) {","import java . util . * ; import java . math . * ; public class MinimumInteger { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int runs = sc . nextInt ( ) ; while ( runs -- > 0 ) { double l = sc . nextDouble ( ) ; double r = sc . nextDouble ( ) ; double x = sc . nextDouble ( ) ; if ( x < l || x > r ) { System . out . println ( ( long ) x ) ; } else { if ( r % x == 0 ) r ++ ; System . out . println ( ( long ) ( x * Math . ceil ( r \/ x ) ) ) ; } } } }","import java . util . Scanner ;   public class _0668MinimumInteger {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int q = sc . nextInt ( ) ; while ( q > 0 ) { int l = sc . nextInt ( ) ; int r = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; if ( ( l - 1 ) \/ d != 0 ) { System . out . println ( d ) ; } else if ( ( r + 1 ) % d == 0 ) { System . out . println ( r + 1 ) ; } else { System . out . println ( ( ( ( r + 1 ) \/ d ) + 1 ) * d ) ; } q -- ; } }   }"],"bleu":0.27226778719570743,"rouge_l":0.4786121120539346}
{"id":269,"predictions":["import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;"],"references":["import java . util . * ;   public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; int z = sc . nextInt ( ) ; int a ; int sum = 0 ; if ( x > y ) { sum += y ; a = x - y ; } else { sum += x ; a = y - x ; } if ( a <= z ) { sum = sum + ( a + z ) \/ 2 ; } else { sum = sum + z ; } sum *= 2 ; System . out . println ( sum ) ; } }","import java . util . * ; import java . util . Arrays ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int l = sc . nextInt ( ) ; int r = sc . nextInt ( ) ; int a = sc . nextInt ( ) ; int d = 0 , e = 0 ; if ( l < r ) { d = r - l ; } else if ( l > r ) { e = l - r ; } else { a = a \/ 2 ; l = l + a ; r = r + a ; a = 0 ; } if ( d != '0' ) { if ( a > d ) { l = l + d ; a = a - d ; } else { l = l + a ; a = 0 ; } } if ( e != '0' ) { if ( a > e ) { r = r + e ; a = a - e ; } else { r = r + a ; a = 0 ; } } if ( a != '0' ) { a = a \/ 2 ; l = l + a ; r = r + a ; a = 0 ; } int b = Math . min ( l , r ) ; System . out . println ( 2 * b ) ; } }","import java . util . * ; public class Solution { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; int l = s . nextInt ( ) ; int r = s . nextInt ( ) ; int a = s . nextInt ( ) ; int min = Math . min ( l , r ) ; int max = Math . max ( l , r ) ; int diff = max - min ; if ( diff == 0 ) { min = min + a \/ 2 ; max = max + a \/ 2 ; } else { if ( a >= diff ) { min = min + diff ; a = a - diff ; min = min + a \/ 2 ; max = max + a \/ 2 ; } else { min = min + a ; } } System . out . println ( min * 2 ) ; } }","import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int l = sc . nextInt ( ) ; int r = sc . nextInt ( ) ; int a = sc . nextInt ( ) ; int ans = 0 ; if ( l == r ) { ans = l + r + ( a % 2 == 0 ? a : a - 1 ) ; } else { int min = Math . min ( l , r ) ; int max = Math . max ( l , r ) ; int diff = Math . abs ( l - r ) ; if ( a == diff ) { ans = l + r + a ; } else if ( a < diff ) { ans = ( a + min ) * 2 ; } else { a = a - diff ; ans = 2 * max + ( a % 2 == 0 ? a : a - 1 ) ; } } System . out . println ( ans ) ; } }","import java . util . ArrayList ; import java . util . Arrays ; import java . util . Scanner ;   public class Singleton_Pattern { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int l = sc . nextInt ( ) ; int r = sc . nextInt ( ) ; int a = sc . nextInt ( ) ; int count = 0 ; int min = Integer . min ( l , r ) ; count += 2 * min ; l -= min ; r -= min ; if ( r == 0 ) { l = l ^ r ; r = l ^ r ; l = l ^ r ; } min = Integer . min ( r , a ) ; count += 2 * min ; a -= min ; r -= min ; count += 2 * ( a \/ 2 ) ; System . out . println ( count ) ; } }"],"bleu":0.03437091545703307,"rouge_l":0.20447841244301423}
{"id":270,"predictions":["import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;"],"references":["import java . util . * ; import java . io . * ; public class Main { int a ; public static void main ( String args [ ] ) { Scanner scan = new Scanner ( System . in ) ; int t = scan . nextInt ( ) ; int a [ ] = new int [ t ] ; int temp [ ] = new int [ 4 ] ; TreeMap < Integer , Integer > T = new TreeMap < > ( ) ; for ( int i = 0 ; i < t ; ++ i ) { a [ i ] = scan . nextInt ( ) ; temp [ a [ i ] ] ++ ; } Arrays . sort ( temp ) ; System . out . print ( temp [ 1 ] + temp [ 2 ] ) ; } }","import java . util . Scanner ;    public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int num1 = 0 , num2 = 0 , num3 = 0 ; for ( int i = 0 ; i < a . length ; i ++ ) { a [ i ] = sc . nextInt ( ) ; if ( a [ i ] - 1 == 0 ) num1 ++ ; if ( a [ i ] - 2 == 0 ) num2 ++ ; if ( a [ i ] - 3 == 0 ) num3 ++ ; } int max = num1 ; if ( max < num2 ) max = num2 ; if ( max < num3 ) max = num3 ; System . out . println ( n - max ) ; } }","import java . util . * ;   public class P3 { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ;   int n = sc . nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int one = 0 ; int two = 0 ; int three = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == 1 ) { one ++ ; } else if ( a [ i ] == 2 ) { two ++ ; } else { three ++ ; } }   int e = Math . max ( one , two ) ; int d = Math . max ( e , three ) ; System . out . println ( n - d ) ; } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . OutputStream ; import java . io . PrintWriter ; import java . util . StringTokenizer ; import java . util . Arrays ;   public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; TaskA solver = new TaskA ( ) ; solver . solve ( in , out ) ; out . close ( ) ; } static class TaskA { public void solve ( InputReader in , PrintWriter out ) { int n = in . nextInt ( ) ; int [ ] sum = new int [ 3 ] ; for ( int i = 1 ; i <= n ; i ++ ) sum [ in . nextInt ( ) - 1 ] ++ ; Arrays . sort ( sum ) ; out . println ( sum [ 0 ] + sum [ 1 ] ) ; } } static class InputReader { public BufferedReader reader ; public StringTokenizer tokenizer ; public InputReader ( InputStream stream ) { reader = new BufferedReader ( new InputStreamReader ( stream ) ) ; tokenizer = null ; } public String next ( ) { while ( tokenizer == null || ! tokenizer . hasMoreElements ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } } }"],"bleu":0.06858979395241303,"rouge_l":0.22902383284361738}
{"id":271,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException {"],"references":["import java . io . BufferedReader ; import java . io . File ; import java . io . FileWriter ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . math . BigInteger ; import java . util . * ;     public class Main { public static void main ( String [ ] args ) { FastScanner input = new FastScanner ( ) ; int n , c ; n = input . nextInt ( ) ; c = input . nextInt ( ) ; long limak = 0 , Rad = 0 ; int a [ ] = new int [ n ] ; int t [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = input . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { t [ i ] = input . nextInt ( ) ; } long time = 0 ; for ( int i = 0 ; i < n ; i ++ ) { time += t [ i ] ; limak += Math . max ( 0 , a [ i ] - ( c * time ) ) ; } time = 0 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { time += t [ i ] ; Rad += Math . max ( 0 , a [ i ] - ( c * time ) ) ; }","import java . io . FileInputStream ; import java . io . FileNotFoundException ; import java . io . IOException ; import java . io . PrintWriter ; import java . util . Arrays ; import java . util . Collection ; import java . util . List ; import java . util . Scanner ; import java . util . function . Function ; import java . util . stream . Collectors ; public class _p000658A { static public void main ( final String [ ] args ) throws IOException { p000658A . _main ( args ) ; }","import java . util . Scanner ; import java . util . StringTokenizer ;   public class BearAndReverse { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String line = scanner . nextLine ( ) ;   StringTokenizer tokenizer = new StringTokenizer ( line ) ;   int n = Integer . parseInt ( tokenizer . nextToken ( ) ) ; int c = Integer . parseInt ( tokenizer . nextToken ( ) ) ;   String l1 = scanner . nextLine ( ) ; String l2 = scanner . nextLine ( ) ;   int [ ] arr1 = new int [ n ] ; int [ ] arr2 = new int [ n ] ;   StringTokenizer s1 = new StringTokenizer ( l1 ) ; StringTokenizer s2 = new StringTokenizer ( l2 ) ; for ( int i = 0 ; i < n ; i ++ ) { arr1 [ i ] = Integer . parseInt ( s1 . nextToken ( ) ) ; arr2 [ i ] = Integer . parseInt ( s2 . nextToken ( ) ) ; }   int scoreLimak = 0 ; int prevTime = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int timeSpent = arr2 [ i ] ; prevTime += timeSpent ; int score = Math . max ( arr1 [ i ] - c * prevTime , 0 ) ; scoreLimak += score ; }   int scoreRade = 0 ; int prevTimeRade = 0 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { int timeSpent = arr2 [ i ] ; prevTimeRade += timeSpent ; int score = Math . max ( arr1 [ i ] - c * prevTimeRade , 0 ) ;   scoreRade += score ; }   if ( scoreLimak > scoreRade ) { System . out . println ( \" Limak \" ) ; } else if ( scoreRade > scoreLimak ) { System . out . println ( \" Radewoosh \" ) ; } else { System . out . println ( \" Tie \" ) ; }   } }"],"bleu":0.09966662369319633,"rouge_l":0.37885397412199634}
{"id":272,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . io . * ; import java . util . * ;   public class Test {   static FastScanner sc ; static boolean [ ] visited ; static int four = 0 , seven = 0 ;   public static void main ( String args [ ] ) { sc = new FastScanner ( System . in ) ; solve ( ) ; }   public static void solve ( ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; }   int a = 0 , b = 0 , c = 0 , d = 0 ; for ( int i = 1 ; i < arr . length ; i ++ ) { a = Math . min ( arr [ i - 1 ] , arr [ i ] ) ; b = Math . max ( arr [ i - 1 ] , arr [ i ] ) ;   for ( int j = i + 1 ; j < arr . length ; j ++ ) { c = Math . min ( arr [ j - 1 ] , arr [ j ] ) ; d = Math . max ( arr [ j - 1 ] , arr [ j ] ) ;  ","import java . util . Scanner ;   public class SemiCircles { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ;   int n = scanner . nextInt ( ) ; Integer [ ] point = new Integer [ n ] ;   if ( n > 3 ) { point [ 0 ] = scanner . nextInt ( ) ; point [ 1 ] = scanner . nextInt ( ) ; point [ 2 ] = scanner . nextInt ( ) ;   for ( int i = 3 ; i < n ; i ++ ) { point [ i ] = scanner . nextInt ( ) ;   for ( int j = 1 ; j < i - 1 ; j ++ ) { int a = Math . max ( point [ i ] , point [ i - 1 ] ) ; int b = Math . min ( point [ i ] , point [ i - 1 ] ) ; int c = Math . max ( point [ j ] , point [ j - 1 ] ) ; int d = Math . min ( point [ j ] , point [ j - 1 ] ) ;   if ( ( b > d && b < c && a > c ) || ( d > b && d < a && c > a ) ) { System . out . println ( \" yes \" ) ; return ; } } } } System . out . println ( \" no \" ) ; } }","import java . util . * ; import java . util . Scanner ; import java . io . * ; import javax . lang . model . util . ElementScanner6 ; import static java . lang . System . out ;    public class A358 {   public static void main ( String args [ ] ) {   FastReader in = new FastReader ( ) ; PrintWriter pr = new PrintWriter ( new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ) ; int tc = 1 ;","import java . util . * ; public class GivenLength { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int A [ ] = new int [ n ] ; priorityqueue m = new priorityqueue ( n ) ;","import java . util . * ; import java . lang . * ; import java . io . * ;   public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) {"],"bleu":0.41389251312289554,"rouge_l":0.614609571788413}
{"id":273,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . Scanner ;   public class pROBLEM39 {   public static void main ( String [ ] args ) {","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . * ; public class C { static class FastScanner { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( \" \" ) ;   String next ( ) { while ( ! st . hasMoreTokens ( ) ) try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   int [ ] nextArray ( int n ) { int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = nextInt ( ) ; return a ; }   long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } } static class FastWriter extends PrintWriter { FastWriter ( ) { super ( System . out ) ; }   void println ( int [ ] array ) { for ( int i = 0 ; i < array . length ; i ++ ) { print ( array [ i ] + \" ▁ \" ) ; } println ( ) ; }   void println ( long [ ] array ) { for ( int i = 0 ; i < array . length ; i ++ ) { print ( array [ i ] + \" ▁ \" ) ; } println ( ) ; } } public static void main ( String [ ] args ) {","import java . util . Scanner ;   public class HelloWorld {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] yrs = new int [ n - 1 ] ; for ( int i = 0 ; i < n - 1 ; i ++ ) { yrs [ i ] = sc . nextInt ( ) ; } int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int sum = 0 ; for ( int i = a - 1 ; i < b - 1 ; i ++ ) { sum += yrs [ i ] ; } System . out . println ( sum ) ; }   }","import java . util . Scanner ;     public class MAIN {   public static void main ( String [ ] args ) {","import java . util . Scanner ;   public class Army { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ;   int n = scanner . nextInt ( ) ;   int [ ] d = new int [ n ] ; for ( int i = 1 ; i < n ; i ++ ) { d [ i ] = scanner . nextInt ( ) ; }   int a = scanner . nextInt ( ) ; int b = scanner . nextInt ( ) ;   int result = 0 ; for ( int i = a ; i < b ; i ++ ) { result += d [ i ] ; }   System . out . println ( result ) ;    } }"],"bleu":0.6243541742237071,"rouge_l":0.5875656742556917}
{"id":274,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . Scanner ;   public class Holidays { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ;   int n = scanner . nextInt ( ) ;   int min = 0 ; int max = 0 ;   for ( int i = 1 ; i <= n ; i ++ ) { if ( i % 7 == 0 || ( i + 1 ) % 7 == 0 ) { min ++ ; } if ( i % 7 == 1 || i % 7 == 2 ) { max ++ ; } }   System . out . println ( min ) ; System . out . println ( max ) ;   } }","  import java . util . Scanner ;   public class Holidays { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int days = scanner . nextInt ( ) ; solve ( days ) ; }   public static void solve ( int n ) { int min = 0 ; int max = 0 ; int daysOff ; daysOff = n \/ 7 * 2 ;   if ( n == 1 ) { min = 0 ; max = 1 ; } if ( n >= 2 && n <= 5 ) { min = 0 ; max = 2 ; } if ( n == 6 ) { min = 1 ; max = 2 ; } if ( n % 7 == 0 ) { min = daysOff ; max = daysOff ; } if ( n % 7 == 1 ) { min = daysOff ; max = daysOff + 1 ; } if ( n % 7 >= 2 && n % 7 <= 5 ) { min = daysOff ; max = daysOff + 2 ; } if ( n % 7 == 6 ) { min = daysOff + 1 ; max = daysOff + 2 ; } System . out . println ( min + \" ▁ \" + max ) ;   } }","import java . util . Scanner ;   public class Holidays { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int number = scanner . nextInt ( ) ; int [ ] ints ; ints = solve ( number ) ; for ( int i = 0 ; i < ints . length ; i ++ ) { System . out . print ( ints [ i ] + \" ▁ \" ) ; } }   public static int [ ] solve ( int number ) { int [ ] minMax = new int [ 2 ] ; int divNumber = number \/ 7 ; int remainNumber = number % 7 ; if ( remainNumber == 0 ) { minMax [ 0 ] = divNumber * 2 ; minMax [ 1 ] = divNumber * 2 ; } else { if ( remainNumber == 1 ) { minMax [ 0 ] = divNumber * 2 ; minMax [ 1 ] = divNumber * 2 + 1 ; } else if ( remainNumber >= 2 && remainNumber <= 5 ) { minMax [ 0 ] = divNumber * 2 ; minMax [ 1 ] = divNumber * 2 + 2 ; } else { minMax [ 0 ] = divNumber * 2 + 1 ; minMax [ 1 ] = divNumber * 2 + 2 ; } } return minMax ; } }","import java . util . Scanner ;   public class Main { static Scanner scanner = new Scanner ( System . in ) ;   public static void main ( String [ ] args ) { Holidays ( ) ; }   public static void Holidays ( ) { int n = scanner . nextInt ( ) ; int counterMin = 0 ; int counterMax = 0 ;   counterMax = n \/ 7 * 2 ; counterMin = n \/ 7 * 2 ; if ( n % 7 == 6 ) counterMin ++ ; if ( n % 7 >= 2 ) { counterMax += 2 ; } else if ( n % 7 == 1 ) { counterMax ++ ; }   System . out . println ( counterMin ) ; System . out . println ( counterMax ) ; }   }","import java . util . Scanner ;   public class Main {   public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; int x1 = ( n \/ 7 ) * 2 ; int x2 = ( n \/ 7 ) * 2 ; x1 += Math . min ( 2 , n % 7 ) ; x2 += Math . max ( 0 , ( n % 7 ) - 5 ) ; System . out . println ( x2 + \" ▁ \" + x1 ) ; }   }"],"bleu":0.06247972520052594,"rouge_l":0.2335375191424196}
{"id":275,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int f = 0 ; for ( int i = 0 ; i < 5 ; i ++ ) { String s1 = sc . next ( ) ; if ( s1 . charAt ( 0 ) == s . charAt ( 0 ) || s1 . charAt ( 1 ) == s . charAt ( 1 ) ) { f = 1 ; } } if ( f == 1 ) { System . out . println ( \" YES \" ) ; } else { System . out . println ( \" NO \" ) ; } } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . HashMap ; import java . util . HashSet ; import java . util . LinkedList ; import java . util . List ; import java . util . Map ; import java . util . Set ;   public class Main { static class FastReader { BufferedReader br ; StringTokenizer st ; public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } }   public static void main ( String [ ] args ) { FastReader sc = new FastReader ( ) ;","import java . util . * ;     import java . io . * ; import java . lang . * ; import java . math . BigInteger ;   public class Main { public static void main ( String [ ] args ) throws java . lang . Exception { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; String a = br . readLine ( ) ; String x [ ] = br . readLine ( ) . trim ( ) . split ( \" ▁ \" ) ; boolean check = false ; for ( int i = 0 ; i < x . length ; i ++ ) { if ( a . charAt ( 0 ) == x [ i ] . charAt ( 0 ) ) { check = true ; break ; } if ( a . charAt ( 1 ) == x [ i ] . charAt ( 1 ) ) { check = true ; break ; } } if ( check ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ; } }","import java . util . * ; import java . io . * ;   public class Main { public static void main ( String args [ ] ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; String s = br . readLine ( ) ; String a [ ] = br . readLine ( ) . split ( \" \\\\ s + \" ) ; boolean f = false ; for ( String x : a ) { if ( x . charAt ( 0 ) == s . charAt ( 0 ) || x . charAt ( 0 ) == s . charAt ( 1 ) || x . charAt ( 1 ) == s . charAt ( 0 ) || x . charAt ( 1 ) == s . charAt ( 1 ) ) { f = true ; break ; } } if ( f ) System . out . print ( \" YES \" ) ; else System . out . print ( \" NO \" ) ; } }","import java . io . * ; import java . util . * ; public class Main { static BufferedReader in = new BufferedReader ( new InputStreamReader ( System . in ) ) ; static PrintWriter out = new PrintWriter ( new OutputStreamWriter ( System . out ) ) ; public static void main ( String [ ] args ) throws IOException { String s = in . readLine ( ) ; String [ ] ss = in . readLine ( ) . split ( \" ▁ \" ) ; for ( int i = 0 ; i < ss . length ; i ++ ) { if ( s . charAt ( 0 ) == ss [ i ] . charAt ( 0 ) || s . charAt ( 0 ) == ss [ i ] . charAt ( 1 ) ) { out . println ( \" YES \" ) ; break ; } if ( s . charAt ( 1 ) == ss [ i ] . charAt ( 0 ) || s . charAt ( 1 ) == ss [ i ] . charAt ( 1 ) ) { out . println ( \" YES \" ) ; break ; } if ( i == ss . length - 1 ) out . println ( \" NO \" ) ; } out . close ( ) ; } }"],"bleu":0.1322949980959618,"rouge_l":0.2527364526323904}
{"id":276,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . math . BigDecimal ; import java . math . BigInteger ; import java . util . StringTokenizer ;   public class Main { public static void main ( String [ ] args )"],"bleu":0.4616401644955203,"rouge_l":0.5477983777520279}
{"id":277,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . io . File ; import java . io . FileNotFoundException ; import java . io . PrintWriter ; import java . util . * ;    public class LOL {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) {    int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; List < Integer > list = new ArrayList < > ( ) ; for ( int j = 0 ; j < n ; j ++ ) { list . add ( sc . nextInt ( ) ) ; } SortedSet < Integer > sortedSet = new TreeSet < > ( list ) ; for ( Integer integer : sortedSet ) { if ( integer <= k + 1 ) { k = k + 1 ; } } System . out . println ( k ) ; } } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . Arrays ;   public class Main { static final int MOD = 998244353 ; public static void main ( String [ ] args ) throws IOException { BufferedReader in = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter out = new PrintWriter ( System . out ) ; int _ = Integer . parseInt ( in . readLine ( ) ) ; while ( _ -- > 0 ) { String [ ] s = in . readLine ( ) . split ( \" ▁ \" ) ; int n = Integer . parseInt ( s [ 0 ] ) ; int x = Integer . parseInt ( s [ 1 ] ) ; int [ ] ns = Arrays . stream ( in . readLine ( ) . split ( \" ▁ \" ) ) . mapToInt ( Integer :: parseInt ) . distinct ( ) . sorted ( ) . toArray ( ) ; int ans = x ; for ( int i = 0 ; i < ns . length ; i ++ ) { int required = ns [ i ] - 1 - i ; if ( x >= required ) { ans = Math . max ( ans , ns [ i ] + x - required ) ; } } out . println ( ans ) ; } out . close ( ) ; } }","import java . util . * ; import java . lang . * ; import java . io . * ;   public class rough {   public static void main ( String args [ ] ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ;   int t = Integer . parseInt ( br . readLine ( ) . trim ( ) ) ;   while ( t -- > 0 ) { String temps1 [ ] = br . readLine ( ) . trim ( ) . split ( \" ▁ \" ) ;   int n = Integer . parseInt ( temps1 [ 0 ] ) ; int x = Integer . parseInt ( temps1 [ 1 ] ) ;   String temps2 [ ] = br . readLine ( ) . trim ( ) . split ( \" ▁ \" ) ;   int a [ ] = new int [ n ] ;   for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = Integer . parseInt ( temps2 [ i ] ) ; }   Arrays . sort ( a ) ;   int count = 0 ;   for ( int i = 0 ; i < n ; i ++ ) { int dif = a [ i ] - count - 1 ;   if ( dif == 0 || dif == - 1 ) { count = a [ i ] ; } else if ( x != 0 && dif >= 1 && dif <= x ) { x -= dif ; count = a [ i ] ; } else if ( x != 0 && dif >= 1 && dif > x ) { count += x ; x = 0 ; } }   if ( x != 0 ) count += x ;   System . out . println ( count ) ; }   }   }","import java . util . * ; import java . io . * ;   public class CFA { BufferedReader br ; PrintWriter out ; StringTokenizer st ; boolean eof ; private static final long MOD = 1000L * 1000L * 1000L + 7 ; private static final int [ ] dx = { 0 , - 1 , 0 , 1 } ; private static final int [ ] dy = { 1 , 0 , - 1 , 0 } ; private static final String yes = \" Yes \" ; private static final String no = \" No \" ;   void solve ( ) { int T = nextInt ( ) ;"],"bleu":0.22657894495187716,"rouge_l":0.34694932781799376}
{"id":278,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . io . * ; import java . util . * ; public class Ishu { static class Reader { final private int BUFFER_SIZE = 1 << 16 ; private DataInputStream din ; private byte [ ] buffer ; private int bufferPointer , bytesRead ; public Reader ( ) { din = new DataInputStream ( System . in ) ; buffer = new byte [ BUFFER_SIZE ] ; bufferPointer = bytesRead = 0 ; } public Reader ( String file_name ) throws IOException { din = new DataInputStream ( new FileInputStream ( file_name ) ) ; buffer = new byte [ BUFFER_SIZE ] ; bufferPointer = bytesRead = 0 ; } public String readLine ( ) throws IOException { byte [ ] buf = new byte [ 64 ] ;"],"bleu":0.07636224362061982,"rouge_l":0.2875487646293888}
{"id":279,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException {"],"references":["import java . util . * ;   public class _1437B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int zero = 0 , one = 0 ; for ( int i = 0 ; i < s . length ( ) - 1 ; i ++ ) { if ( s . charAt ( i ) == '1' && s . charAt ( i + 1 ) == '1' ) one ++ ; if ( s . charAt ( i ) == '0' && s . charAt ( i + 1 ) == '0' ) zero ++ ; } System . out . println ( Math . max ( zero , one ) ) ; } } }","import java . io . * ; public class ReverseBinaryStrings { public static void main ( String [ ] args ) throws IOException { InputStreamReader ir = new InputStreamReader ( System . in ) ; BufferedReader br = new BufferedReader ( ir ) ; int test = Integer . parseInt ( br . readLine ( ) ) ; for ( int cas = 1 ; cas <= test ; cas ++ ) { String [ ] line1 = br . readLine ( ) . split ( \" ▁ \" ) ; int n = Integer . parseInt ( line1 [ 0 ] ) ; int arr [ ] = new int [ n ] ; int ans1 = 0 ; int ans2 = 0 ; String [ ] line2 = br . readLine ( ) . split ( \" \" ) ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = Integer . parseInt ( line2 [ i ] ) ; } for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] == 1 && arr [ i - 1 ] == 1 ) ans1 ++ ; if ( arr [ i ] == 0 && arr [ i - 1 ] == 0 ) ans2 ++ ; } System . out . println ( Math . max ( ans1 , ans2 ) ) ;    } }   }","import java . util . * ; import java . math . * ; public class ReverseBinary { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int runs = sc . nextInt ( ) ; while ( runs -- > 0 ) { int size = sc . nextInt ( ) ; char [ ] arr = sc . next ( ) . toCharArray ( ) ; int ou = 0 ; for ( int i = 0 ; i < size - 1 ; i ++ ) { if ( arr [ i ] == arr [ i + 1 ] ) { ou ++ ; } } System . out . println ( ( ou + 1 ) \/ 2 ) ; } } }","  import java . io . * ; import java . lang . * ; import java . util . * ;   public class B1437 { public static void main ( String [ ] args ) throws IOException { StringBuffer ans = new StringBuffer ( ) ; StringTokenizer st ; BufferedReader f = new BufferedReader ( new InputStreamReader ( System . in ) ) ; st = new StringTokenizer ( f . readLine ( ) ) ; int t = Integer . parseInt ( st . nextToken ( ) ) ; for ( int i = 0 ; i < t ; i ++ ) { st = new StringTokenizer ( f . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; st = new StringTokenizer ( f . readLine ( ) ) ; String r = st . nextToken ( ) ; r += \"0\" ; int op = 0 ; int curr = 0 ; int curr1 = 0 ; int op1 = 0 ; for ( int x = 0 ; x < n ; x ++ ) { if ( r . charAt ( x ) == '1' ) { curr ++ ; op += Math . max ( 0 , curr1 - 1 ) ; curr1 = 0 ; } else { op1 += Math . max ( 0 , curr - 1 ) ; curr = 0 ; curr1 ++ ; } } ans . append ( Math . max ( op , op1 ) ) ; ans . append ( \" \\n \" ) ; } f . close ( ) ;    System . out . println ( ans ) ;   } }","import java . util . Scanner ;   public class B1437 {   public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int T = in . nextInt ( ) ; for ( int t = 0 ; t < T ; t ++ ) { int N = in . nextInt ( ) ; char [ ] S = in . next ( ) . toCharArray ( ) ; int count = 0 ; for ( int n = 1 ; n < N ; n ++ ) { if ( S [ n - 1 ] == S [ n ] ) { count ++ ; } } int answer = ( count + 1 ) \/ 2 ; System . out . println ( answer ) ; } }   }"],"bleu":0.02634590971249097,"rouge_l":0.2759380618221887}
{"id":280,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . Scanner ; public class Main {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int tc = sc . nextInt ( ) ; while ( tc -- > 0 ) { int n = sc . nextInt ( ) ; if ( n % 2020 <= n \/ 2020 ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ; } sc . close ( ) ; } }","import java . util . Scanner ;   public class problem69 {   public static void main ( String [ ] args ) {","  import java . util . * ; import java . lang . * ; import java . io . * ;   public class Main { public static void main ( String [ ] args ) throws java . lang . Exception { Scanner scn = new Scanner ( System . in ) ; int t = scn . nextInt ( ) ; while ( t -- > 0 ) { int n = scn . nextInt ( ) ; int x = n \/ 2020 ; if ( n % 2020 <= x ) { System . out . println ( \" YES \" ) ; } else { System . out . println ( \" NO \" ) ; } } } }","import java . util . * ; import java . lang . * ; import java . io . * ; public class NewYearsNumber { public static void main ( String args [ ] ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; BufferedWriter bw = new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ; int t = Integer . parseInt ( br . readLine ( ) ) ; while ( t -- > 0 ) { int n = Integer . parseInt ( br . readLine ( ) ) ; int rem = n % 2020 ; int q = n \/ 2020 ; if ( rem <= q ) { bw . write ( \" Yes \\n \" ) ; } else { bw . write ( \" No \\n \" ) ; } } bw . close ( ) ; } }","import java . io . * ; import java . util . * ;     public class newyear { public static void main ( String [ ] args ) throws IOException { BufferedReader f = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter out = new PrintWriter ( System . out ) ; StringTokenizer st = new StringTokenizer ( f . readLine ( ) ) ; int t = Integer . parseInt ( st . nextToken ( ) ) ; for ( int i = 0 ; i < t ; i ++ ) { st = new StringTokenizer ( f . readLine ( ) ) ; int a = Integer . parseInt ( st . nextToken ( ) ) ; int k = divides ( a ) ; int ans = ( a - k ) \/ 2020 - k ; if ( ans >= 0 ) { out . println ( \" YES \" ) ; } else { out . println ( \" NO \" ) ; } } out . close ( ) ; } public static int divides ( int num ) { return num % 2020 ; } }  "],"bleu":0.3741875327530242,"rouge_l":0.5331038135593221}
{"id":281,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ;"],"references":["import java . io . * ; import java . util . * ; public class Solution { static class FastReader { BufferedReader br ; StringTokenizer st ; public FastReader ( ) { boolean env = System . getProperty ( \" ONLINE _ JUDGE \" ) != null ; if ( ! env ) { try { br = new BufferedReader ( new FileReader ( \" src \\\\ input . txt \" ) ) ; } catch ( FileNotFoundException e ) { e . printStackTrace ( ) ; } } else br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } static FastReader sc = new FastReader ( ) ; static PrintWriter out = new PrintWriter ( System . out ) ; static long gcd ( long a , long b ) { return b == 0 ? a : gcd ( b , a % b ) ; }"],"bleu":0.00941761683010159,"rouge_l":0.21387801696020872}
{"id":282,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ; public class MyClass { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int x = sc . nextInt ( ) ; int i = 1 ; int s = 0 , count = 0 ; while ( s < x ) { s = s + i ; i ++ ; count ++ ; } int d = s - x ; if ( s == x ) System . out . println ( count ) ; else { if ( d == 1 ) System . out . println ( count + 1 ) ; else System . out . println ( count ) ; } } } }","import java . util . * ; import java . math . * ; public class Jumps { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int runs = sc . nextInt ( ) ; while ( runs -- > 0 ) { int x = sc . nextInt ( ) ; int cur = 0 ; int i = 1 ; while ( cur < x ) { cur += i ++ ; } if ( cur == x + 1 ) System . out . println ( i ) ; else System . out . println ( i - 1 ) ; }   } }","import java . io . * ; import java . util . * ;   public class Jumps {   public static void main ( String [ ] args ) throws IOException {","import java . util . Scanner ; public class Jumps {   public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int tc = in . nextInt ( ) ; int x ; while ( tc -- != 0 ) { x = in . nextInt ( ) ; int c = 0 ; int i = 1 ; while ( c < x ) { c += i ; i ++ ; } if ( c == x + 1 ) System . out . println ( i ) ; else System . out . println ( i - 1 ) ; } } }","import java . util . Scanner ;   public class B1455 {   public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int T = in . nextInt ( ) ; for ( int t = 0 ; t < T ; t ++ ) { int X = in . nextInt ( ) ; int jump = 1 ; while ( X > 0 ) { X -= jump ++ ; } int answer = ( X == - 1 ) ? jump : ( jump - 1 ) ; System . out . println ( answer ) ; } }   }"],"bleu":0.3047499664220833,"rouge_l":0.5241789590871139}
{"id":283,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["   import java . io . * ; import java . util . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ;    public class Main1 {   static class pair implements Comparable < pair > { int a ; int b ; public pair ( int a , int b ) { this . a = a ; this . b = b ; } @ Override public int compareTo ( pair o ) {","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . OutputStream ; import java . io . PrintWriter ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Comparator ; import java . util . Objects ; import java . util . StringTokenizer ; import java . util . function . BiFunction ; import java . util . function . Function ;   public class Main {   static BiFunction < Integer , Integer , Integer > ADD = ( x , y ) -> ( x + y ) ; static BiFunction < ArrayList < Integer > , ArrayList < Integer > , ArrayList < Integer > > ADD_ARRAY_LIST = ( x , y ) -> { x . addAll ( y ) ; return x ; } ;   static Function < Pair < Integer , Integer > , Integer > GET_FIRST = ( x ) -> ( x . first ) ; static Function < Pair < Integer , Integer > , Integer > GET_SECOND = ( x ) -> ( x . second ) ; static Comparator < Pair < Integer , Integer > > C = Comparator . comparing ( GET_FIRST ) . thenComparing ( GET_SECOND ) ;   public static void main ( String [ ] args ) throws Exception { long startTime = System . nanoTime ( ) ; int t = 1 ; while ( t -- > 0 ) { solve ( ) ; } long endTime = System . nanoTime ( ) ; err . println ( \" Execution ▁ Time ▁ : ▁ + \" + ( endTime - startTime ) \/ 1000000 + \" ▁ ms \" ) ; exit ( 0 ) ; }   static void solve ( ) { String s = in . next ( ) ; int [ ] [ ] grid = new int [ 4 ] [ 4 ] ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { Pair < Integer , Integer > v ; if ( s . charAt ( i ) == '0' ) { v = setZero ( grid ) ; } else { v = setOne ( grid ) ; } out . println ( v . first + \" ▁ \" + v . second ) ; clear ( grid ) ; }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . math . BigInteger ;   import java . util . * ; import javafx . util . Pair ;   public class Main { public static void main ( String args [ ] ) { FastScanner input = new FastScanner ( ) ; String s = input . next ( ) ; int H = 0 , V = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == '0' ) { if ( H == 0 ) { System . out . println ( \"3 ▁ 1\" ) ; H = 1 ; } else { System . out . println ( \"1 ▁ 1\" ) ; H = 0 ;   } } else { if ( V == 0 ) { System . out . println ( \"1 ▁ 3\" ) ; V = 1 ; } else { System . out . println ( \"1 ▁ 1\" ) ; V = 0 ;   } } } }   static class FastScanner {   BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( \" \" ) ;   String next ( ) { while ( ! st . hasMoreTokens ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   long nextLong ( ) {   return Long . parseLong ( next ( ) ) ; }   double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; }   String nextLine ( ) throws IOException { return br . readLine ( ) ; } }   }"],"bleu":0.37999492558405384,"rouge_l":0.4959099171884468}
{"id":284,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . io . * ; import java . util . StringTokenizer ;   public class Main { public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; }   void run ( ) { long n = in . nextInt ( ) ; long n2 = n * n ; long result = 0 ; for ( long x = 0 ; x >= 1 - n ; x -- ) { long y2 = ( long ) Math . sqrt ( n2 - x * x ) - 1 ; while ( ( x - 1 ) * ( x - 1 ) + y2 * y2 > n2 ) { result += 1 ; y2 -= 1 ; } } result += n ; result *= 4 ;   if ( result <= 0 ) result = 1 ; out . println ( result ) ;   out . close ( ) ; }  ","import java . io . * ; import java . util . StringTokenizer ;   public class P392A { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; Task solver = new Task ( ) ; solver . solve ( in , out ) ; out . close ( ) ; }   static class Task { public void solve ( InputReader in , PrintWriter out ) { int n = in . nextInt ( ) ; int x = 0 , y = n , d = 0 ; int cnt = 0 ; while ( x < y ) { int de = d + 2 * x + 1 ; int dse = d + 2 * x - 2 * y + 2 ; x ++ ; if ( de > 0 ) { y -- ; d = dse ; } else { d = de ; } if ( x < y ) cnt += 2 ; else if ( x == y ) cnt ++ ; } out . println ( n == 0 ? 1 : ( cnt + 1 ) << 2 ) ; } }   static class InputReader { public BufferedReader reader ; public StringTokenizer tokenizer ;   public InputReader ( InputStream stream ) { reader = new BufferedReader ( new InputStreamReader ( stream ) , 32768 ) ; tokenizer = null ; }   public String next ( ) { while ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( ) ; }   public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   public long nextLong ( ) { return Long . parseLong ( next ( ) ) ; }   public String nextLine ( ) { try { return reader . readLine ( ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } }   public int [ ] nextIntArray ( int n ) { int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = nextInt ( ) ; return arr ; }   } }","import java . lang . Math ; import java . io . * ; public class HelloWorld { public static void main ( String [ ] args ) throws IOException { BufferedReader bf = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int n = Integer . parseInt ( bf . readLine ( ) ) ; PrintWriter pw = new PrintWriter ( new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ) ; pw . write ( ( int ) Math . max ( 1 , 4 * ( int ) ( Math . sqrt ( 2 ) * n ) ) + \" \\n \" ) ; pw . flush ( ) ; } }","import java . io . ByteArrayInputStream ; import java . io . File ; import java . io . PrintWriter ; import java . util . Scanner ; import static java . lang . Math . sqrt ; public class A { int USE_FILE = 0 ; int HAS_TESTCASES = 0 ; String INPUT = \"30426905\" ; void solve ( int caseNr ) { int n = in . nextInt ( ) ; if ( n == 0 ) { System . out . println ( 1 ) ; return ; } int ans = 4 * ( int ) ( n * sqrt ( 2.0 ) ) ; System . out . println ( ans ) ; } private int inf = Integer . MAX_VALUE ; private int MOD = ( int ) 1e9 + 7 ; static boolean LOCAL = java . lang . System . getProperty ( \" ONLINE _ JUDGE \" ) == null ; static Scanner in ; static PrintWriter output_writer = new PrintWriter ( java . lang . System . out ) ; static class System { static PrintWriter out = null ; } void setup ( ) throws Exception { System . out = output_writer ; if ( LOCAL && USE_FILE == 0 ) { java . lang . System . setIn ( new ByteArrayInputStream ( INPUT . getBytes ( ) ) ) ; in = new Scanner ( java . lang . System . in ) ; } if ( LOCAL && USE_FILE > 0 ) { String filename = String . format ( \" in \/ cf % d . txt \" , USE_FILE ) ; File inputFile = new File ( filename ) ; in = new Scanner ( inputFile ) ; System . out . printf ( \" [ % s ] \\n \" , filename ) ; } if ( ! LOCAL ) { in = new Scanner ( java . lang . System . in ) ; } long startTime = java . lang . System . currentTimeMillis ( ) ; int t = HAS_TESTCASES > 0 ? in . nextInt ( ) : 1 ; for ( int i = 1 ; i <= t ; i ++ ) { solve ( i ) ; } in . close ( ) ; if ( LOCAL ) { System . out . printf ( \" [ % dms ] \\n \" , java . lang . System . currentTimeMillis ( ) - startTime ) ; } output_writer . flush ( ) ; } public static void main ( String [ ] args ) throws Exception { new A ( ) . setup ( ) ; } }"],"bleu":0.1551775186260328,"rouge_l":0.32073109664496746}
{"id":285,"predictions":["import java . util . * ; import java . io . * ; import java . math . BigInteger ; import java . text . * ; public class Main { static long mod = 1000_000_007 ; static long mod1 = 998244353 ; static boolean fileIO = false ; static boolean memory = true ; static FastScanner f ; static PrintWriter pw ; static double eps = ( double ) 1e-6 ; static long oo = Long . MAX_VALUE ;"],"references":["import java . io . BufferedReader ; import java . io . InputStreamReader ;   public class AandB { public static void main ( String [ ] args ) throws Exception { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int t = Integer . parseInt ( br . readLine ( ) ) ; while ( t -- > 0 ) { String [ ] inp = br . readLine ( ) . split ( \" ▁ \" ) ; long a = Long . parseLong ( inp [ 0 ] ) ; long b = Long . parseLong ( inp [ 1 ] ) ; if ( b > a ) { long tmp = b ; b = a ; a = tmp ; } long diff = a - b ; int i = 0 ; while ( true ) { long val = i * ( i + 1 ) ; if ( val >= 2 * diff && ( ( val \/ 2 ) - diff ) % 2 == 0 ) { break ; } i ++ ; } System . out . println ( i ) ; } } }","import java . util . * ; import java . util . Scanner ; import java . io . * ; import javax . lang . model . util . ElementScanner6 ; import static java . lang . System . out ; import java . util . Stack ; import java . util . Queue ; import java . util . LinkedList ;   public class B1278 {   static int mod = ( int ) ( 1e9 + 7 ) ; static long MOD = ( long ) ( 1e9 + 7 ) ; static FastReader in = new FastReader ( ) ; static PrintWriter pr = new PrintWriter ( new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ) ; public static void main ( String args [ ] ) {   int tc = 1 ; tc = in . nextInt ( ) ; tcloop : while ( tc -- > 0 ) { long a = in . nextLong ( ) ; long b = in . nextLong ( ) ; if ( a > b ) { long t = a ; a = b ; b = t ; } long dif = b - a ; if ( dif == 0 ) { pr . println ( 0 ) ; continue ; } long add = 0 ; int c = 0 ; while ( add < dif ) { add = add + ( c + 1 ) ; c ++ ;","import java . util . * ; import java . io . * ; import java . math . BigInteger ; import java . text . * ; public class Main { static long mod = 1000_000_007 ; static long mod1 = 998244353 ; static boolean fileIO = false ; static boolean memory = true ; static FastScanner f ; static FileWriter fw ; static PrintWriter pw ; static double eps = ( double ) 1e-6 ; static long oo = Long . MAX_VALUE ;"],"bleu":0.9487903016483623,"rouge_l":0.9716814159292035}
{"id":286,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ;   public class Main {   public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int a1 = scanner . nextInt ( ) ; int a2 = scanner . nextInt ( ) ; int a3 = scanner . nextInt ( ) ; int b1 = scanner . nextInt ( ) ; int b2 = scanner . nextInt ( ) ; int b3 = scanner . nextInt ( ) ; int n = scanner . nextInt ( ) ;   int cups = ( int ) Math . ceil ( ( double ) ( a1 + a2 + a3 ) \/ 5 ) ; int medals = ( int ) Math . ceil ( ( double ) ( b1 + b2 + b3 ) \/ 10 ) ;   if ( cups + medals <= n ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ;   } }","import java . util . * ; import java . io . * ; import java . math . BigInteger ; import java . text . * ; public class Main { static long mod = 1000_000_007 ; static long mod1 = 998244353 ; static boolean fileIO = false ; static boolean memory = true ; static FastScanner f ; static PrintWriter pw ; static double eps = ( double ) 1e-6 ; static int oo = ( int ) 1e7 ;","import java . util . Scanner ;   public class Main {   public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int a1 = scan . nextInt ( ) , a2 = scan . nextInt ( ) , a3 = scan . nextInt ( ) ; int b1 = scan . nextInt ( ) , b2 = scan . nextInt ( ) , b3 = scan . nextInt ( ) ; int n = scan . nextInt ( ) ; int copas ; int medallas ; copas = a1 + a2 + a3 ; medallas = b1 + b2 + b3 ; int total = 0 ; if ( copas % 5 == 0 ) { total += copas \/ 5 ; } else total += copas \/ 5 + 1 ; if ( medallas % 10 == 0 ) { total += medallas \/ 10 ; } else total += medallas \/ 10 + 1 ; if ( total > n ) System . out . println ( \" NO \" ) ; else System . out . println ( \" YES \" ) ; } }  ","import java . util . Scanner ;   public class Main {   public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int [ ] copas = new int [ 3 ] ; int [ ] medallas = new int [ 3 ] ; for ( int i = 0 ; i < copas . length ; i ++ ) { copas [ i ] = in . nextInt ( ) ; } for ( int i = 0 ; i < medallas . length ; i ++ ) { medallas [ i ] = in . nextInt ( ) ; } int n = in . nextInt ( ) ; System . out . println ( Rewards ( copas , medallas , n ) ) ; }   public static String Rewards ( int [ ] copas , int [ ] medallas , int n ) { int sumacop = 0 ; int sumamed = 0 ; double estantesausarcop , estantesausarmed ; for ( int i = 0 ; i < copas . length ; i ++ ) { sumacop = sumacop + copas [ i ] ; } for ( int i = 0 ; i < medallas . length ; i ++ ) { sumamed = sumamed + medallas [ i ] ; }   double op1 = ( sumacop \/ 5.0 ) ; double op2 = ( sumamed \/ 10.0 ) ; if ( op1 % 1 != 0 ) { estantesausarcop = ( ( op1 ) + ( 1 - ( ( op1 ) % 1 ) ) ) ; } else { estantesausarcop = op1 ; } if ( op2 % 1 != 0 ) { estantesausarmed = ( ( op2 ) + ( 1 - ( ( op2 ) % 1 ) ) ) ; } else { estantesausarmed = op2 ; } if ( ( ( int ) ( ( estantesausarcop ) + ( estantesausarmed ) ) ) <= n ) { return \" YES \" ; } return \" NO \" ; } }  ","import java . util . Scanner ;   public class A448 { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int a1 = scanner . nextInt ( ) , a2 = scanner . nextInt ( ) , a3 = scanner . nextInt ( ) ; int b1 = scanner . nextInt ( ) , b2 = scanner . nextInt ( ) , b3 = scanner . nextInt ( ) ; int n = scanner . nextInt ( ) ; int sum1 , sum2 ; sum1 = a1 + a2 + a3 ; sum2 = b1 + b2 + b3 ; int count = 0 ; if ( sum1 % 5 == 0 ) { count += sum1 \/ 5 ; } else count += sum1 \/ 5 + 1 ; if ( sum2 % 10 == 0 ) { count += sum2 \/ 10 ; } else count += sum2 \/ 10 + 1 ; if ( count > n ) System . out . println ( \" NO \" ) ; else System . out . println ( \" YES \" ) ; } }"],"bleu":0.25350115125235295,"rouge_l":0.5186121323529411}
{"id":287,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; out . println ( n ) ; out . flush ( ) ; } static int l_min ( int [ ] a ) { Arrays . sort ( a ) ; return a [ 0 ] ; } static int l_max ( int [ ] a ) { int l = a . length ; Arrays . sort ( a ) ; return a [ l - 1 ] ; } public static PrintWriter out ; public static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ;   public class CF579A { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int x = Integer . parseInt ( br . readLine ( ) ) ; int set_bits = 0 ; while ( x != 0 ) { set_bits += x & 1 ; x >>= 1 ; } System . out . print ( set_bits ) ; } }","import java . util . * ;   public class Solve {   static Scanner scan = new Scanner ( System . in ) ;    public static void solve ( int a ) {   System . out . println ( Integer . bitCount ( a ) ) ; }   public static void main ( String [ ] args ) {   int a = scan . nextInt ( ) ;   solve ( a ) ;   } }","import java . util . Arrays ; import java . util . Locale ; import java . util . Scanner ; import java . lang . String ; import java . util . Random ;   public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; n != 0 ; i ++ ) { if ( n % 2 == 0 ) { n = n \/ 2 ; } else { n -- ; ans ++ ; }   } System . out . println ( ans ) ; } }","import java . util . Scanner ; import java . lang . Math ; import java . util . Arrays ;   public class pa { static Scanner sc = new Scanner ( System . in ) ; public static void main ( String args [ ] ) { long n = sc . nextInt ( ) ; long i , x = 0 ; while ( n >= 1 ) { if ( n % 2 == 1 ) { x ++ ; n -- ; } else n \/= 2 ; } System . out . println ( x ) ; } }","import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; PrintWriter pw = new PrintWriter ( System . out ) ; int x = sc . nextInt ( ) ; int i = 0 ; int count = 0 ; for ( i = 0 ; i < 32 ; i ++ ) { if ( ( x & ( 1 << i ) ) != 0 ) count ++ ; } pw . print ( count ) ;      pw . close ( ) ; }               "],"bleu":0.28035470319502537,"rouge_l":0.3976072607260726}
{"id":288,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["  import java . util . * ; import java . lang . * ; import java . io . * ;   public class Main { public static void main ( String [ ] args ) throws java . lang . Exception { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int t = Integer . parseInt ( br . readLine ( ) ) ; int [ ] a1 = new int [ t - 1 ] ; int [ ] a2 = new int [ t - 1 ] ; int [ ] b = new int [ t ] ; int [ ] sum1 = new int [ t ] ; int sum = 0 ; int homer = 0 ; int marketr = 0 ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; StringTokenizer st1 = new StringTokenizer ( br . readLine ( ) ) ; StringTokenizer st2 = new StringTokenizer ( br . readLine ( ) ) ; for ( int i = 0 ; i < t ; i ++ ) { if ( i < t - 1 ) { a1 [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; a2 [ i ] = Integer . parseInt ( st1 . nextToken ( ) ) ; homer += a2 [ i ] ; } b [ i ] = Integer . parseInt ( st2 . nextToken ( ) ) ; } for ( int i = 0 ; i < t ; i ++ ) { sum = 0 ; if ( i != 0 ) { homer -= a2 [ i - 1 ] ; marketr += a1 [ i - 1 ] ; } sum = homer + marketr ; sum1 [ i ] = sum + b [ i ] ; } Arrays . sort ( sum1 ) ; System . out . println ( sum1 [ 0 ] + sum1 [ 1 ] ) ; } }","import com . sun . org . apache . bcel . internal . generic . AALOAD ; import com . sun . org . apache . bcel . internal . generic . GOTO ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . math . BigInteger ; import java . util . * ; import java . util . stream . IntStream ; import javafx . util . Pair ; import static jdk . nashorn . internal . runtime . regexp . joni . Syntax . Java ;   public class Main { public static void main ( String [ ] args ) throws IOException {   Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; int roadCross [ ] = new int [ n ] ; int firstRow [ ] = new int [ n ] ; int secondRow [ ] = new int [ n ] ; ArrayList < Long > ans = new ArrayList < > ( ) ; for ( int i = 1 ; i <= n - 1 ; i ++ ) { firstRow [ i ] = input . nextInt ( ) ; } long secondSum = 0 ; for ( int i = 1 ; i <= n - 1 ; i ++ ) { secondRow [ i ] = input . nextInt ( ) ; secondSum += secondRow [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { roadCross [ i ] = input . nextInt ( ) ; } long left = 0 ; long right = secondSum ; for ( int i = 0 ; i < n ; i ++ ) { long oneRoad = 0 ; left += firstRow [ i ] ; oneRoad += left ; oneRoad += roadCross [ i ] ; right -= secondRow [ i ] ; oneRoad += right ; ans . add ( oneRoad ) ; } Collections . sort ( ans ) ; System . out . println ( ans . get ( 0 ) + ans . get ( 1 ) ) ; }       }"],"bleu":0.0036387489699451366,"rouge_l":0.16870337020838697}
{"id":289,"predictions":["import java . util . * ; import java . io . * ; import java . math . BigInteger ; import java . text . * ; public class Main { static long mod = 1000_000_007 ; static long mod1 = 998244353 ; static boolean fileIO = false ; static boolean memory = true ; static FastScanner f ; static PrintWriter pw ; static double eps = ( double ) 1e-6 ; static long oo = Long . MAX_VALUE ;"],"references":["import java . lang . * ; import java . util . * ; import java . io . * ;   public class Compressing { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; Map < Integer , List < Integer > > map = new HashMap < Integer , List < Integer > > ( ) ; Map < Integer , List < Integer > > win = new HashMap < Integer , List < Integer > > ( ) ; List < Integer > temp ; int tot = n * ( n - 1 ) \/ 2 ; for ( int i = 0 ; i < tot - 1 ; i ++ ) { int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; if ( map . containsKey ( x ) ) map . get ( x ) . add ( y ) ; else { temp = new ArrayList < Integer > ( ) ; temp . add ( y ) ; map . put ( x , temp ) ; } if ( map . containsKey ( y ) ) map . get ( y ) . add ( x ) ; else { temp = new ArrayList < Integer > ( ) ; temp . add ( x ) ; map . put ( y , temp ) ; } if ( win . containsKey ( x ) ) win . get ( x ) . add ( y ) ; else { temp = new ArrayList < Integer > ( ) ; temp . add ( y ) ; win . put ( x , temp ) ; } }","  import java . lang . * ; import java . util . * ; import java . io . * ;   public class Codeforces {   public void solve ( ) throws IOException { FastScanner fs = new FastScanner ( ) ; StringBuilder ans = new StringBuilder ( \" \" ) ; int n = fs . nextInt ( ) ; int m = n * ( n - 1 ) ; m \/= 2 ; m -= 1 ; int [ ] parent = new int [ n + 1 ] ; ArrayList < Integer > [ ] winnerGraph = new ArrayList [ n + 1 ] ; ArrayList < Integer > [ ] loserGraph = new ArrayList [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { winnerGraph [ i ] = new ArrayList < > ( ) ; loserGraph [ i ] = new ArrayList < > ( ) ; } for ( int i = 0 ; i < m ; i ++ ) { int win = fs . nextInt ( ) ; int loss = fs . nextInt ( ) ; winnerGraph [ win ] . add ( loss ) ; loserGraph [ loss ] . add ( win ) ; } int x = - 1 , y = - 1 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( winnerGraph [ i ] . size ( ) + loserGraph [ i ] . size ( ) < n - 1 ) { if ( x == - 1 ) x = i ; else y = i ; } } boolean ok = false ;   for ( int i : winnerGraph [ x ] ) { if ( loserGraph [ y ] . contains ( i ) ) ok = true ; } if ( ok ) System . out . println ( x + \" ▁ \" + y ) ; else System . out . println ( y + \" ▁ \" + x ) ;   System . out . println ( ans ) ; } public static void main ( String [ ] args ) throws IOException { try { new Codeforces ( ) . solve ( ) ; } catch ( Exception e ) {","import java . util . * ; import java . lang . * ; import java . io . * ;   public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) {"],"bleu":0.31948251075627554,"rouge_l":0.5988860568299821}
{"id":290,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ; import java . io . * ; public class MyClass { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) , sum = 0 ; int [ ] arr = new int [ 6 ] ; for ( int i = 0 ; i < n ; i ++ ) { int num = sc . nextInt ( ) ; arr [ num ] += 1 ; } for ( int i = 0 ; i < n ; i ++ ) { int num = sc . nextInt ( ) ; arr [ num ] -= 1 ; } boolean flag = true ; for ( int i = 1 ; i < 6 ; i ++ ) { int num = Math . abs ( arr [ i ] ) ; if ( num % 2 != 0 ) { flag = false ; break ; } sum += num ; } if ( ! flag ) System . out . println ( - 1 ) ; else System . out . println ( ( sum \/ 2 ) \/ 2 ) ; } }","import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int arr1 [ ] = new int [ n ] ; int arr2 [ ] = new int [ n ] ; int cnt [ ] = new int [ 6 ] ; for ( int i = 0 ; i < n ; i ++ ) { arr1 [ i ] = sc . nextInt ( ) ; cnt [ arr1 [ i ] ] ++ ; } for ( int i = 0 ; i < n ; i ++ ) { arr2 [ i ] = sc . nextInt ( ) ; cnt [ arr2 [ i ] ] -- ; } boolean f = true ; for ( int i = 1 ; i <= 5 ; i ++ ) { if ( cnt [ i ] < 0 ) cnt [ i ] = - cnt [ i ] ; if ( cnt [ i ] % 2 != 0 ) f = false ; } if ( f ) { int ans = 0 ; for ( int i = 1 ; i <= 5 ; i ++ ) ans += cnt [ i ] ; System . out . println ( ans \/ 4 ) ; } else System . out . println ( \" - 1\" ) ; } }","import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner s = new Scanner ( System . in ) ; int n = s . nextInt ( ) ; int dp1 [ ] = new int [ 6 ] ; int dp2 [ ] = new int [ 6 ] ; for ( int i = 0 ; i < n ; i ++ ) { dp1 [ s . nextInt ( ) ] ++ ; } for ( int i = 0 ; i < n ; i ++ ) { dp2 [ s . nextInt ( ) ] ++ ; } for ( int i = 1 ; i < 6 ; i ++ ) { if ( ( dp1 [ i ] + dp2 [ i ] ) % 2 != 0 ) { System . out . println ( - 1 ) ; return ; } } int opt = 0 ; for ( int i = 1 ; i < 6 ; i ++ ) { int req = dp1 [ i ] - dp2 [ i ] ; if ( req > 0 ) { opt += req \/ 2 ; } } System . out . println ( opt ) ;   } }"],"bleu":0.017696311010054463,"rouge_l":0.18687089715536104}
{"id":291,"predictions":["import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; } public static long mod = 17352642619633L ; void run ( FastScanner in , PrintWriter out ) {"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . OutputStream ; import java . io . PrintWriter ; import java . util . StringTokenizer ;   public class Main { public static void main ( String [ ] args ) throws Exception { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ;   Task task = new Task ( ) ; task . solve ( in , out ) ; out . close ( ) ;   } static class Rectangle { int x1 , y1 ; int x2 , y2 ; } static class Task { public void solve ( InputReader in , PrintWriter out ) { int n = in . nextInt ( ) ;","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . OutputStream ; import java . io . PrintWriter ; import java . util . StringTokenizer ;   public class Main { public static void main ( String [ ] args ) throws Exception { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ;   Task task = new Task ( ) ; task . solve ( in , out ) ; out . close ( ) ;   } static class Rectangle { int x1 , y1 ; int x2 , y2 ; } static class Task { public void solve ( InputReader in , PrintWriter out ) { int n = in . nextInt ( ) ;"],"bleu":0.2647691671417951,"rouge_l":0.5177758641899373}
{"id":292,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import sysfrom collections import defaultdict as ddinput = sys . stdin . readlineI = lambda : list ( map ( int , input ( ) . split ( ) ) )   n , a , b = I ( ) l = I ( ) dic = dd ( int ) for i in range ( n ) : dic [ l [ i ] ] = 1 bs = [ ] pa = dd ( int ) for i in range ( n ) : if dic [ a - l [ i ] ] == 0 : bs . append ( l [ i ] ) else : pa [ l [ i ] ] = a - l [ i ] j = 0 while j < len ( bs ) : for i in range ( j , len ( bs ) ) : cr = bs [ i ] dic [ cr ] = 2 if dic [ b - cr ] == 0 : print ( \" NO \" ) ; exit ( ) dic [ b - cr ] = 2 if dic [ a - b + cr ] == 1 : dic [ a - b + cr ] = 2 bs . append ( a - b + cr ) j += 1 # ct = 0 ; vt = a - b + cr # while vt != pa [ pa [ vt ] ] : # vt = pa [ vt ] ; dic [ b - vt ] = 2 # dic [ vt ] = 2 an = [ 0 ] * nfor i in range ( n ) : an [ i ] = dic [ l [ i ] ] - 1 print ( \" YES \" ) print ( * an )"],"bleu":0.0005403603244174772,"rouge_l":0.07285031847133759}
{"id":293,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . Scanner ;   public class _0678BalancedRatingChanges {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int countoddneg = 0 ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { int temp = sc . nextInt ( ) ; arr [ i ] = temp ; if ( temp % 2 != 0 ) { if ( temp < 0 ) { countoddneg ++ ; } else { countoddneg -- ; } } } countoddneg = countoddneg \/ 2 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { System . out . println ( arr [ i ] \/ 2 ) ; } else { if ( arr [ i ] > 0 && countoddneg < 0 ) { System . out . println ( ( arr [ i ] \/ 2 ) + 1 ) ; countoddneg ++ ; } else if ( arr [ i ] < 0 && countoddneg > 0 ) { System . out . println ( ( arr [ i ] \/ 2 ) - 1 ) ; countoddneg -- ; } else { System . out . println ( arr [ i ] \/ 2 ) ; } } } }   }","import java . util . * ; import java . math . * ; public class RatingChanges { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int size = sc . nextInt ( ) ; int [ ] arr = new int [ size ] ; int [ ] out = new int [ size ] ; int sum = 0 ; boolean up = false ; for ( int i = 0 ; i < size ; i ++ ) { int temp = sc . nextInt ( ) ; if ( temp % 2 == 0 ) { arr [ i ] = temp \/ 2 ; } else { if ( up ) { if ( temp < 0 ) arr [ i ] = temp \/ 2 ; else arr [ i ] = temp \/ 2 + 1 ; } else { if ( temp < 0 ) arr [ i ] = temp \/ 2 - 1 ; else arr [ i ] = temp \/ 2 ; } up = ! up ; } } int i = 0 ;","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; import java . io . PrintWriter ; import java . util . Arrays ;      public class A {    public static void main ( String [ ] args ) throws IOException { FastReader sc = new FastReader ( ) ; PrintWriter out = new PrintWriter ( System . out ) ; int n = sc . nextInt ( ) ; int flag = 1 ; while ( n -- > 0 ) { int a = sc . nextInt ( ) ; if ( a % 2 == 0 ) { out . println ( a \/ 2 ) ; }   else { out . println ( ( a + flag ) \/ 2 ) ; flag *= - 1 ; } }   out . close ( ) ; }     ","import java . util . * ; import java . lang . * ; import java . io . * ; public class Main { PrintWriter out ; FastReader sc ; long mod = ( long ) ( 1e9 + 7 ) ; long maxlong = Long . MAX_VALUE ; long minlong = Long . MIN_VALUE ; public void sol ( ) { int n = ni ( ) ; boolean f = false ; StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int p = ni ( ) ; if ( p % 2 == 0 ) sb . append ( p \/ 2 + \" \\n \" ) ; else { if ( f ) { if ( p >= 0 ) p ++ ; p = p \/ 2 ; sb . append ( p + \" \\n \" ) ; f = false ; } else { if ( p < 0 ) p -- ; p = p \/ 2 ; sb . append ( p + \" \\n \" ) ; f = true ; } } } pl ( sb ) ; } public static void main ( String [ ] args ) { Main g = new Main ( ) ; g . out = new PrintWriter ( System . out ) ; g . sc = new FastReader ( ) ; int t = 1 ;"],"bleu":0.10205879777528609,"rouge_l":0.34582411504424776}
{"id":294,"predictions":["import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; } public static long mod = 17352642619633L ; void run ( FastScanner in , PrintWriter out ) {"],"references":["import java . util . ArrayList ; import java . util . Collections ; import java . util . List ; import java . util . Locale ; import java . util . Scanner ;   public class A1495 {   public static void main ( String [ ] args ) { Locale . setDefault ( Locale . US ) ; Scanner in = new Scanner ( System . in ) ; int T = in . nextInt ( ) ; for ( int t = 0 ; t < T ; t ++ ) { int N = in . nextInt ( ) ; List < Integer > miners = new ArrayList < > ( N ) ; List < Integer > diamonds = new ArrayList < > ( N ) ; for ( int n = 0 ; n < 2 * N ; n ++ ) { int x = in . nextInt ( ) ; int y = in . nextInt ( ) ; if ( x == 0 ) { miners . add ( Math . abs ( y ) ) ; } else { diamonds . add ( Math . abs ( x ) ) ; } } Collections . sort ( miners ) ; Collections . sort ( diamonds ) ; double answer = 0 ; for ( int n = 0 ; n < N ; n ++ ) { int x = diamonds . get ( n ) ; int y = miners . get ( n ) ; answer += Math . sqrt ( x * ( long ) x + y * ( long ) y ) ; } System . out . println ( answer ) ; } }   }","import java . io . BufferedReader ; import java . io . File ; import java . io . FileReader ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . OutputStream ; import java . io . PrintWriter ; import java . util . Arrays ; import java . util . StringTokenizer ;    public class a_706 {   public static void main ( String [ ] args ) throws Exception {","import java . util . * ;   public final class App { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int t = in . nextInt ( ) ; while ( t -- > 0 ) { int n = in . nextInt ( ) ; int [ ] miner = new int [ n ] ; int [ ] mine = new int [ n ] ; int j = 0 , k = 0 ; for ( int i = 0 ; i < 2 * n ; i ++ ) { int x = Math . abs ( in . nextInt ( ) ) ; int y = Math . abs ( in . nextInt ( ) ) ; if ( x == 0 ) { miner [ j ++ ] = y ; } else { mine [ k ++ ] = x ; } } Arrays . sort ( miner ) ; Arrays . sort ( mine ) ; double ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans += ( double ) Math . sqrt ( ( long ) miner [ i ] * miner [ i ] + ( long ) mine [ i ] * mine [ i ] ) ; } System . out . println ( ans ) ; } in . close ( ) ; } }"],"bleu":0.4481213779327358,"rouge_l":0.39980717691076184}
{"id":295,"predictions":["import java . util . * ; import java . io . * ; import java . math . BigInteger ; import java . text . * ; public class Main { static long mod = 1000_000_007 ; static long mod1 = 998244353 ; static boolean fileIO = false ; static boolean memory = true ; static FastScanner f ; static PrintWriter pw ; static double eps = ( double ) 1e-6 ; static long oo = Long . MAX_VALUE ;"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . math . BigInteger ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collections ; import java . util . HashMap ; import java . util . HashSet ; import java . util . List ; import java . util . PriorityQueue ; import java . util . Random ; import java . util . StringTokenizer ; import java . util . TreeMap ;   public class A {   public static void main ( String [ ] args ) throws IOException {   FastScanner sc = new FastScanner ( ) ; PrintWriter out = new PrintWriter ( System . out ) ; String str = sc . next ( ) ; int n = str . length ( ) ;","import java . io . * ; import java . util . * ; public class time1 { static boolean valid ( String s ) { if ( ! s . substring ( 3 , 5 ) . contains ( \" - \" ) && ! s . substring ( 0 , 2 ) . contains ( \" - \" ) && ! s . substring ( 6 , 10 ) . contains ( \" - \" ) && s . charAt ( 2 ) == ' - ' && s . charAt ( 5 ) == ' - ' ) { int a = Integer . parseInt ( s . substring ( 0 , 2 ) ) ; int b = Integer . parseInt ( s . substring ( 3 , 5 ) ) ; int c = Integer . parseInt ( s . substring ( 6 , 10 ) ) ; int [ ] days = { 0 , 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ; if ( 1 <= b && b <= 12 && a >= 1 && days [ b ] >= a && c >= 2013 && c <= 2015 ) return true ; else return false ; } return false ; } public static void main ( String [ ] args ) throws IOException { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; HashMap < String , Long > map = new HashMap < String , Long > ( ) ; for ( int i = 0 ; i <= ( s . length ( ) - 10 ) ; i ++ ) { String t = s . substring ( i , i + 10 ) ; if ( valid ( t ) ) { if ( map . containsKey ( t ) ) map . put ( t , map . get ( t ) + 1 ) ; else map . put ( t , ( long ) 1 ) ; } } long max = - 1 ; String maxVal = \" \" ; for ( String key : map . keySet ( ) ) { if ( map . get ( key ) > max ) { max = map . get ( key ) ; maxVal = key ; } } System . out . println ( maxVal ) ; } }","import java . io . BufferedInputStream ; import java . util . HashMap ; import java . util . Map ; import java . util . Scanner ;   public class Main {    public static boolean check ( char [ ] chars , int l , int r ) { if ( chars [ l + 2 ] != ' - ' ) return false ; if ( chars [ l + 5 ] != ' - ' ) return false ; int count = 0 ; for ( int i = l ; i <= r ; i ++ ) { if ( chars [ i ] == ' - ' ) count ++ ; } return count == 2 ; } public static void main ( String [ ] args ) { Scanner in = new Scanner ( new BufferedInputStream ( System . in ) ) ; String s = in . next ( ) . trim ( ) ; int [ ] days = new int [ ] { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ;"],"bleu":0.15558837749288104,"rouge_l":0.30664252232879685}
{"id":296,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Arrays ; import java . util . StringTokenizer ;   public class Main {   public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ;   StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; long p = Long . parseLong ( st . nextToken ( ) ) ; long q = Long . parseLong ( st . nextToken ( ) ) ; long r = Long . parseLong ( st . nextToken ( ) ) ;   st = new StringTokenizer ( br . readLine ( ) ) ; long arr [ ] = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = Long . parseLong ( st . nextToken ( ) ) ; }   long [ ] pmax = new long [ n ] ; pmax [ 0 ] = p * arr [ 0 ] ;   for ( int i = 1 ; i < n ; i ++ ) { pmax [ i ] = Math . max ( pmax [ i - 1 ] , p * arr [ i ] ) ; }","import java . util . Scanner ;   public class MaxExpression {   public static void main ( String [ ] args ) {   Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; long p = sc . nextLong ( ) ; long q = sc . nextLong ( ) ; long r = sc . nextLong ( ) ;   long [ ] arr = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; }   System . out . println ( func ( arr , p , q , r ) ) ; }   static public long func ( long arr [ ] , long p , long q , long r ) { int n = arr . length ;   long pmax [ ] = new long [ n ] ; pmax [ 0 ] = p * arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { pmax [ i ] = Math . max ( pmax [ i - 1 ] , p * arr [ i ] ) ; } long smax [ ] = new long [ n ] ; smax [ n - 1 ] = r * arr [ n - 1 ] ; for ( int i = n - 2 ; i >= 0 ; i -- ) { smax [ i ] = Math . max ( smax [ i + 1 ] , r * arr [ i ] ) ; }   long ans = Long . MIN_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { ans = Math . max ( ans , ( pmax [ i ] + q * arr [ i ] + smax [ i ] ) ) ; } return ans ; } }","import java . util . Scanner ;   import static java . lang . Math . max ;  "],"bleu":0.5758248918753223,"rouge_l":0.6438677140051773}
{"id":297,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ; import java . lang . * ; import java . io . * ;   public class sample { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) , cnt = 0 ; int arr [ ] = new int [ n ] ;   for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = sc . nextInt ( ) ;   for ( int i = 1 ; i <= n - 2 ; i ++ ) { if ( arr [ i - 1 ] == 1 && arr [ i ] == 0 && arr [ i + 1 ] == 1 ) { cnt ++ ; arr [ i + 1 ] = 0 ; } }   System . out . println ( cnt ) ; } }","import java . util . Scanner ;   public class _0659DisturbedPeople {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; int k = 0 ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } for ( int i = 1 ; i < n - 1 ; i ++ ) { if ( arr [ i ] == 0 && ( arr [ i + 1 ] + arr [ i - 1 ] == 2 ) ) { k ++ ; arr [ i + 1 ] = 0 ; } } System . out . println ( k ) ; }   }","import java . util . * ; import java . math . * ; public class DisturbedPeople { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int size = sc . nextInt ( ) ; int dist = 0 ; int [ ] arr = new int [ size ] ; for ( int i = 0 ; i < size ; i ++ ) arr [ i ] = sc . nextInt ( ) ; for ( int i = 1 ; i < size ; i ++ ) { if ( i + 1 >= size ) break ; if ( arr [ i ] == 0 && arr [ i - 1 ] == 1 && arr [ i + 1 ] == 1 ) { i += 2 ; dist ++ ; } } System . out . println ( dist ) ; } }","import java . util . * ; import java . io . * ; public class main { public static void main ( String [ ] args ) { FastScanner scan = new main ( ) . new FastScanner ( ) ; int t = scan . nextInt ( ) ; int a [ ] = new int [ t ] ; for ( int i = 0 ; i < t ; ++ i ) { a [ i ] = scan . nextInt ( ) ; } int count = 0 ; for ( int i = 1 ; i < t - 1 ; ++ i ) { if ( a [ i - 1 ] == 1 && a [ i ] == 0 && a [ i + 1 ] == 1 ) { ++ count ; a [ i + 1 ] = 0 ; }   } System . out . println ( count ) ; } class FastScanner { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( \" \" ) ; String next ( ) { while ( ! st . hasMoreTokens ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"bleu":0.06689871280557218,"rouge_l":0.25957446808510637}
{"id":298,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int t = 1 ;"],"references":["import java . util . * ; public class CodeForces1496B { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int t = input . nextInt ( ) ; for ( int j = 0 ; j < t ; j ++ ) { int n = input . nextInt ( ) ; int k = input . nextInt ( ) ; Set < Integer > set = new HashSet < > ( ) ; int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int c = input . nextInt ( ) ; set . add ( c ) ; max = Math . max ( max , c ) ; } if ( k == 0 ) { System . out . println ( set . size ( ) ) ; continue ; } int min = 0 ; while ( set . contains ( min ) ) { min ++ ; } if ( min < max ) { int count = ( max + min + 1 ) \/ 2 ; set . add ( count ) ; System . out . println ( set . size ( ) ) ; } else { System . out . println ( set . size ( ) + k ) ; } } } }","import java . util . HashSet ; import java . util . Scanner ; public class p1496B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; StringBuilder sb = new StringBuilder ( ) ; for ( int t = sc . nextInt ( ) ; t -- > 0 ; ) { int n = sc . nextInt ( ) , k = sc . nextInt ( ) , x , max = - 1 ; HashSet < Integer > hs = new HashSet < > ( ) ; while ( n -- > 0 ) { hs . add ( x = sc . nextInt ( ) ) ; max = Math . max ( x , max ) ; } int mex = 0 ; while ( hs . contains ( mex ) ) mex ++ ; if ( mex > max || k == 0 ) sb . append ( hs . size ( ) + k + \" \\n \" ) ; else { hs . add ( ( int ) Math . ceil ( ( max + mex ) \/ 2.0 ) ) ; sb . append ( hs . size ( ) + \" \\n \" ) ; } } System . out . println ( sb ) ; } }","import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; boolean [ ] vis = new boolean [ 100005 ] ; int [ ] a = new int [ 100005 ] ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int mex = 0 ; int max = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; if ( a [ i ] <= n ) vis [ a [ i ] ] = true ; max = Math . max ( max , a [ i ] ) ; } while ( vis [ mex ] ) mex ++ ; for ( int i = 1 ; i <= n ; i ++ ) if ( a [ i ] <= n ) vis [ a [ i ] ] = false ; int mcx = ( mex + 1 + max ) \/ 2 ; if ( mcx > max ) System . out . println ( n + k ) ; else { boolean ok = false ; for ( int i = 1 ; i <= n ; i ++ ) ok |= ( a [ i ] == mcx ) ; System . out . println ( n + ( ( ( k > 0 ) && ! ok ) ? 1 : 0 ) ) ; } } } }","import java . util . * ; public class Main { private static final int N = ( int ) 1e6 + 10 ; public static void main ( String [ ] args ) { int t , n , k ; Scanner r = new Scanner ( System . in ) ; t = r . nextInt ( ) ; while ( t -- > 0 ) { int [ ] a = new int [ N ] ; n = r . nextInt ( ) ; k = r . nextInt ( ) ; int i ; for ( i = 1 ; i <= n ; i ++ ) a [ i ] = r . nextInt ( ) ; Arrays . sort ( a , 1 , n + 1 ) ; int mex = n , max = a [ n ] ; for ( i = 1 ; i <= n ; i ++ ) if ( a [ i ] != i - 1 ) { mex = i - 1 ; break ; } if ( k == 0 ) System . out . println ( n ) ; else if ( max == n - 1 && mex == n ) System . out . println ( ( n + k ) ) ; else { int v = ( mex + max + 1 ) \/ 2 , f = 1 ; for ( i = 1 ; i <= n ; i ++ ) if ( a [ i ] == v ) { f = 0 ; break ; } System . out . println ( n + f ) ; } } } }","import java . util . * ; public class ayaa { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int m = sc . nextInt ( ) ; for ( int i = 0 ; i < m ; i ++ ) { int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; HashSet < Integer > x = new HashSet < Integer > ( ) ; int max = 0 ; for ( int j = 0 ; j < n ; j ++ ) { int t = sc . nextInt ( ) ; if ( t > max ) max = t ; x . add ( t ) ; } int mex = 0 ; while ( mex <= max + 1 ) { if ( ! x . contains ( mex ) ) { break ; } mex ++ ; } if ( mex > max ) System . out . println ( x . size ( ) + k ) ; else { if ( k > 0 ) x . add ( ( mex + max ) \/ 2 + ( ( mex + max ) % 2 ) ) ; System . out . println ( x . size ( ) ) ; } } } }"],"bleu":0.027717362801983586,"rouge_l":0.26996706463565256}
{"id":299,"predictions":["import java . io . * ; import java . util . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) throws java . lang . Exception { Reader pm = new Reader ( ) ;"],"references":["  import java . io . * ; import java . util . * ; public class Main { static MyScanner sc = new MyScanner ( ) ; public static void main ( String [ ] args ) { int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] a = init ( n + 1 ) ; int [ ] b = init ( m + 1 ) ; if ( n > m ) { if ( a [ 0 ] * b [ 0 ] < 0 ) out . print ( \" - \" ) ; out . println ( \" Infinity \" ) ; } else if ( n < m ) out . println ( \"0\/1\" ) ; else { int high = gcd ( Math . abs ( a [ 0 ] ) , Math . abs ( b [ 0 ] ) ) ; if ( a [ 0 ] * b [ 0 ] < 0 ) out . print ( \" - \" ) ; out . println ( Math . abs ( a [ 0 ] ) \/ high + \" \/ \" + Math . abs ( b [ 0 ] ) \/ high ) ; } out . close ( ) ; }","import java . util . * ; import java . lang . * ; import java . io . * ;   public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) {"],"bleu":0.6959013216407706,"rouge_l":0.6854372672402722}
{"id":300,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException {"],"references":["import java . util . * ; public class Main { public static Scanner ayah = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { int t , n ; t = ayah . nextInt ( ) ; while ( t > 0 ) { n = ayah . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = ayah . nextInt ( ) ; int min = Math . abs ( arr [ 0 ] - arr [ 1 ] ) ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) { if ( j == i ) continue ; else { if ( Math . abs ( arr [ i ] - arr [ j ] ) <= min ) min = Math . abs ( arr [ i ] - arr [ j ] ) ; } } System . out . println ( min ) ; t -- ; } } }","import java . util . * ;   public class Main { public static Scanner sc = new Scanner ( System . in ) ;   public static void main ( String [ ] args ) { int cases = sc . nextInt ( ) ; for ( int i = cases ; i != 0 ; i -- ) { int n = sc . nextInt ( ) ; ArrayList < Integer > arr = new ArrayList < Integer > ( ) ; for ( int j = n ; j != 0 ; j -- ) { arr . add ( sc . nextInt ( ) ) ; } Collections . sort ( arr ) ;   int result = arr . get ( n - 1 ) - arr . get ( 0 ) ; for ( int j = 0 ; j < arr . size ( ) ; j ++ ) { for ( int k = j + 1 ; k < arr . size ( ) ; k ++ ) { result = Math . min ( result , arr . get ( k ) - arr . get ( j ) ) ; } } System . out . println ( result ) ; } } }  ","import java . util . Scanner ; import java . util . Arrays ;   public class HonestCoach { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = Integer . parseInt ( sc . nextLine ( ) ) ; for ( ; t > 0 ; t -- ) { int n = Integer . parseInt ( sc . nextLine ( ) ) ; int [ ] s = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) s [ i ] = sc . nextInt ( ) ; sc . nextLine ( ) ; Arrays . sort ( s ) ; int menorDiferencia = Integer . MAX_VALUE ; for ( int i = 1 ; i < n ; i ++ ) menorDiferencia = Math . min ( s [ i ] - s [ i - 1 ] , menorDiferencia ) ; System . out . println ( menorDiferencia ) ; } } }","import java . io . * ; import java . util . Arrays ; import java . util . StringTokenizer ;","import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int ar [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { ar [ i ] = sc . nextInt ( ) ; } Arrays . sort ( ar ) ; int dif = Integer . MAX_VALUE ; for ( int i = 1 ; i < n ; i ++ ) { if ( dif > ( ar [ i ] - ar [ i - 1 ] ) ) dif = ar [ i ] - ar [ i - 1 ] ; } System . out . println ( dif ) ; } } }"],"bleu":0.8766410015366879,"rouge_l":0.6842105263157895}
{"id":301,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException {"],"references":["import java . util . * ;   public class StackBracket { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ;","import java . util . * ;   public class Practise {   static int [ ] [ ] dp ;    public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int ans = 0 ; int pre = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int s = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; if ( s > pre ) { pre = s ; } else { while ( s <= pre ) { s = s + d ; } pre = s ; } } System . out . println ( pre ) ;      } }","import java . util . Scanner ;   public class BoryaDiagnosis { public static void main ( String [ ] args ) {   Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) , i , l = 0 , o = 0 ;   for ( i = 0 ; i < n ; i ++ ) { int s = in . nextInt ( ) , d = in . nextInt ( ) ; while ( s <= l ) s += d ; o += s - l ; l = s ; } in . close ( ) ; System . out . println ( o ) ; } }","import java . util . * ;   public class Solution { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; int res = 0 ; int temp = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int s = scan . nextInt ( ) ; int d = scan . nextInt ( ) ; if ( i == 0 ) { temp = s ; } else { int ind = 0 ; while ( ( s + d * ind ) <= temp ) ind ++ ; temp = s + d * ind ; } } System . out . println ( temp ) ; } }","import java . util . * ;   public class StackBracket { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ;"],"bleu":0.43346552032062713,"rouge_l":0.5514421007318123}
{"id":302,"predictions":["import java . util . * ; import java . io . * ; import java . math . BigInteger ; import java . text . * ; public class Main { static long mod = 1000_000_007 ; static long mod1 = 998244353 ; static boolean fileIO = false ; static boolean memory = true ; static FastScanner f ; static PrintWriter pw ; static double eps = ( double ) 1e-6 ; static long oo = Long . MAX_VALUE ;"],"references":["import java . util . * ;   public class Test {   static Scanner sc ; public static void main ( String [ ] args ) { sc = new Scanner ( System . in ) ; int t = Integer . parseInt ( sc . next ( ) ) ; while ( t -- > 0 ) solve ( ) ; }   static void solve ( ) { long n = sc . nextLong ( ) ; long k = sc . nextLong ( ) ;   long l = 2 , r = n , mid = 0 , x = 0 , y = 0 ;   while ( l <= r ) { mid = ( l + r ) \/ 2 ; x = ( mid - 1 ) * ( mid - 2 ) \/ 2 + 1 ; if ( x == k ) break ; else if ( x < k ) l = mid + 1 ; else r = mid - 1 ; } if ( x > k ) { mid -- ; x = ( mid - 1 ) * ( mid - 2 ) \/ 2 + 1 ; }   for ( y = 1 ; y < mid ; y ++ ) { if ( ( x + y - 1 ) == k ) break ; }   StringBuilder sb = new StringBuilder ( ) ; for ( int i = 1 ; i <= n ; i ++ ) sb . append ( ' a ' ) ; sb . setCharAt ( ( int ) ( mid - 1 ) , ' b ' ) ; sb . setCharAt ( ( int ) ( y - 1 ) , ' b ' ) ; sb . reverse ( ) ;   System . out . println ( sb . toString ( ) ) ; } }","  import java . util . Scanner ;   public class KBeautifulString { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t != 0 ) { int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; char s [ ] = new char [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { s [ i ] = ' a ' ; } for ( int i = n - 2 ; i >= 0 ; i -- ) { if ( k <= ( n - i - 1 ) ) { s [ i ] = ' b ' ; s [ n - k ] = ' b ' ; System . out . println ( new String ( s ) ) ; break ; } k -= ( n - i - 1 ) ; } t -- ; } } }","import java . util . * ;   public class B629 {   public static void main ( String [ ] args ) {","import java . util . * ;   public class Test {   static Scanner sc ; public static void main ( String [ ] args ) { sc = new Scanner ( System . in ) ; int t = Integer . parseInt ( sc . next ( ) ) ; while ( t -- > 0 ) solve ( ) ; }   static void solve ( ) { long n = sc . nextLong ( ) ; long k = sc . nextLong ( ) ;   long l = 2 , r = n , mid = 0 , x = 0 , y = 0 ;   while ( l <= r ) { mid = ( l + r ) \/ 2 ; x = ( mid - 1 ) * ( mid - 2 ) \/ 2 + 1 ; if ( x == k ) break ; else if ( x < k ) l = mid + 1 ; else r = mid - 1 ; } if ( x > k ) { mid -- ; x = ( mid - 1 ) * ( mid - 2 ) \/ 2 + 1 ; }  "],"bleu":0.1603039851753739,"rouge_l":0.47721428962197054}
{"id":303,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ;   public class Solution { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ;   int n = s . nextInt ( ) ; int t = s . nextInt ( ) ;   int [ ] [ ] intv = new int [ n ] [ 2 ] ;   for ( int i = 0 ; i < n ; i ++ ) { intv [ i ] [ 0 ] = s . nextInt ( ) ; intv [ i ] [ 1 ] = s . nextInt ( ) ; }   Arrays . sort ( intv , ( a , b ) -> a [ 0 ] - b [ 0 ] ) ;   int res = 2 ;","import java . util . Arrays ; import java . util . Comparator ; import java . util . Scanner ;   public class A15 {   public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int N = in . nextInt ( ) ; int width = in . nextInt ( ) ; House [ ] houses = new House [ N ] ; for ( int n = 0 ; n < N ; n ++ ) { House house = new House ( ) ; house . pos = in . nextInt ( ) ; house . width = in . nextInt ( ) ; houses [ n ] = house ; } Arrays . sort ( houses , new Comparator < House > ( ) { @ Override public int compare ( House o1 , House o2 ) { return o1 . pos - o2 . pos ; } } ) ; int answer = 2 ; for ( int n = 1 ; n < N ; n ++ ) { House left = houses [ n - 1 ] ; House right = houses [ n ] ; int space = 2 * ( right . pos - left . pos ) - right . width - left . width ; if ( space > 2 * width ) { answer += 2 ; } else if ( space == 2 * width ) { answer ++ ; } } System . out . println ( answer ) ; }   static class House { int pos ; int width ; }   }","import java . io . BufferedInputStream ; import java . io . BufferedOutputStream ; import java . io . BufferedReader ; import java . io . FileNotFoundException ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . OutputStreamWriter ; import java . io . PrintWriter ; import java . util . Arrays ; import java . util . StringTokenizer ;   public class Main { public static void main ( String [ ] args ) throws FileNotFoundException , IOException { InputReader in = new InputReader ( new BufferedInputStream ( System . in ) ) ; PrintWriter out = new PrintWriter ( new OutputStreamWriter ( new BufferedOutputStream ( System . out ) ) ) ; TaskB solver = new TaskB ( ) ; long t1 = System . currentTimeMillis ( ) ; solver . solve ( 1 , in , out ) ; out . flush ( ) ; long t2 = System . currentTimeMillis ( ) ;"],"bleu":0.13756136200643815,"rouge_l":0.326330897703549}
{"id":304,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . ArrayList ; import java . util . List ; import java . util . StringTokenizer ;   public class Vany_and_Cubes { static class RealScanner { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( \" \" ) ;   String next ( ) { while ( ! st . hasMoreTokens ( ) ) try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   int [ ] readArray ( int n ) { int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = nextInt ( ) ; return a ; }   long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } }   public static void main ( String [ ] args ) { RealScanner sc = new RealScanner ( ) ; int n = sc . nextInt ( ) ; List < Integer > l = new ArrayList < > ( ) ; l . add ( 1 ) ; int sum = 1 , k = 1 ; for ( int i = 1 ; i <= 10000 ; i ++ ) { sum += i + k ; l . add ( sum ) ; } int valSum = 0 , count = 0 ; if ( n == 1 ) { System . out . println ( 1 ) ; return ; } for ( int i = 1 ; i <= l . size ( ) ; i ++ ) { valSum += l . get ( i - 1 ) ; if ( valSum > n ) { break ; } count ++ ; }   System . out . println ( count ) ; } }","import java . util . Scanner ;   public class A492 { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) , i = 1 , sum = 0 ; while ( n > sum ) { sum += i ; n = n - sum ; if ( n < 0 ) break ; i ++ ; } System . out . println ( i - 1 ) ; } }","import java . util . Scanner ;   public class VanyaCubes {   public static void main ( String [ ] args ) {","  import java . io . * ; import java . math . * ; import java . util . * ;   public class Main { public static void main ( String [ ] args ) throws IOException { FastReader scan = new FastReader ( ) ; PrintWriter out = new PrintWriter ( System . out ) ; Task solver = new Task ( ) ; ans = new StringBuilder ( ) ; int T = 1 ; for ( int tt = 0 ; tt < T ; tt ++ ) solver . solve ( tt , scan , out ) ; out . close ( ) ; }   static StringBuilder ans ;   static class Task { public void solve ( int testNumber , FastReader scan , PrintWriter out ) { int n = scan . nextInt ( ) ; int count = 0 ; int ht = 0 ; while ( count <= n ) { ht ++ ; count += ( ht * ( ht + 1 ) ) \/ 2 ; } out . print ( ht - 1 ) ; } }   static class FastReader { BufferedReader br ; StringTokenizer st ;   public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; }   public FastReader ( String s ) throws FileNotFoundException { br = new BufferedReader ( new FileReader ( new File ( s ) ) ) ; }   String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   long nextLong ( ) { return Long . parseLong ( next ( ) ) ; }   double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; }   String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }","import java . util . Scanner ; public class Calculate_Cube {"],"bleu":0.6255340042200862,"rouge_l":0.8045563549160671}
{"id":305,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ;"],"references":["import javafx . scene . layout . Priority ; import sun . reflect . generics . tree . Tree ;   import java . sql . Array ; import java . util . * ; import java . io . * ; import java . util . stream . Stream ;   import static java . lang . Math . * ; public class D { static InputReader in = new InputReader ( System . in ) ; static OutputWriter out = new OutputWriter ( System . out ) ; static StringBuilder sb = new StringBuilder ( ) ; static long MOD = ( long ) ( 998244353 ) ;   static TreeSet < Integer > [ ] graph ; static TreeSet < Integer > vertices ; static boolean visited [ ] ; static int n ; static int m ; static int size ;   public static void dfs ( int i ) { ArrayList < Integer > list = new ArrayList < > ( ) ; Iterator < Integer > itr = vertices . iterator ( ) ; while ( itr . hasNext ( ) ) { int j = itr . next ( ) ; if ( ! graph [ i ] . contains ( j ) ) { list . add ( j ) ; itr . remove ( ) ; } }   for ( int x : list ) dfs ( x ) ; }   ","import java . io . * ; import java . math . BigInteger ; import java . util . * ;   public class Main { static int MOD = 1000000007 ;  ","def find ( u ) :   if parent [ u ] == u : return u   parent [ u ] = find ( parent [ u ] ) return parent [ u ]       def union ( a , b ) : if find ( a ) != find ( b ) : u = parent [ a ] v = parent [ b ]   if size [ u ] > size [ v ] : parent [ v ] = u size [ u ] += size [ v ] del size [ v ]   else : parent [ u ] = v size [ v ] += size [ u ] del size [ u ]     return       n , m = map ( int , input ( ) . split ( ) ) adj = [ [ ] for i in range ( n + 1 ) ] for j in range ( m ) : u , v = map ( int , input ( ) . split ( ) ) if u < v : adj [ v ] . append ( u )   else : adj [ u ] . append ( v )   size = dict ( ) parent = [ i for i in range ( n + 1 ) ] for v in range ( 1 , n + 1 ) : req = [ ] d1 = dict ( ) for j in adj [ v ] : f = find ( j ) req . append ( f ) if f in d1 : d1 [ f ] += 1 else : d1 [ f ] = 1   res = [ j for j in size ]   size [ v ] = 1    for i in res : if i not in d1 : union ( i , v )   elif d1 [ i ] < size [ i ] : union ( i , v )   print ( len ( size ) - 1 )      "],"bleu":0.5016477090974834,"rouge_l":0.6666666666666666}
{"id":306,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["public class p1143B { public static void main ( String [ ] args ) { System . out . println ( max ( new java . util . Scanner ( System . in ) . nextInt ( ) ) ) ; } static int max ( int n ) { return n < 10 ? Math . max ( 1 , n ) : Math . max ( ( n % 10 ) * max ( n \/ 10 ) , 9 * max ( n \/ 10 - 1 ) ) ; } }","  import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collections ; import java . util . HashSet ; import java . util . LinkedHashSet ; import java . util . Scanner ;    @ SuppressWarnings ( \" unused \" ) public class A { public static Scanner scan = new Scanner ( System . in ) ; public static void solve ( ) { int n = scan . nextInt ( ) ; ArrayList < Integer > a = new ArrayList < Integer > ( ) ; while ( n > 0 ) { int d = n % 10 ; a . add ( d ) ; n \/= 10 ; } Collections . reverse ( a ) ;","import java . io . * ; import java . lang . * ; import java . util . * ;   public class B1143 { public static void main ( String [ ] args ) throws IOException { StringTokenizer st ; BufferedReader f = new BufferedReader ( new InputStreamReader ( System . in ) ) ; st = new StringTokenizer ( f . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; f . close ( ) ; String nr = String . valueOf ( n ) ; long best = n ; for ( int i = n ; i > - 1 ; i -- ) { String num = String . valueOf ( i ) ; long curr = 1 ; for ( int x = 0 ; x < num . length ( ) ; x ++ ) { curr *= Integer . parseInt ( num . substring ( x , x + 1 ) ) ; } if ( curr > 0 ) { best = curr ; break ; } }"],"bleu":0.20137241785215051,"rouge_l":0.3690320470896011}
{"id":307,"predictions":["import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;"],"references":["import java . util . * ; import java . io . * ; public class Main { public static int mod = 1000000007 ; public static void solve ( InputReader in ) { int n = in . readInt ( ) ; int m = in . readInt ( ) ; for ( int i = 0 ; i < 1130 ; i ++ ) { System . out . print ( 8 ) ; if ( i == 1129 ) System . out . print ( 9 ) ; } System . out . println ( ) ; for ( int i = 0 ; i < 1131 ; i ++ ) { System . out . print ( 1 ) ; } } public static void main ( String [ ] args ) {","import java . math . BigInteger ; import java . util . Scanner ;   public class UnnaturalConditions { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; String a = \" \" ; String b = \" \" ; for ( int i = 0 ; i <= 563 ; i ++ ) { a = a + \"88\" ; b = b + \"11\" ; } a = a + \"8\" ; b = b + \"2\" ;   System . out . println ( new BigInteger ( b ) ) ; System . out . println ( new BigInteger ( a ) ) ; } }","import java . io . BufferedReader ; import java . io . BufferedWriter ; import java . io . InputStreamReader ; import java . io . OutputStreamWriter ; import java . util . StringTokenizer ; import java . util . * ; import java . math . BigInteger ;   public class Main {   public static void main ( String [ ] args ) throws Exception { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; BufferedWriter bw = new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int m = Integer . parseInt ( st . nextToken ( ) ) ; int k = ( n \/ 9 ) + 1 ; StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < k ; i ++ ) { sb . append ( 9 + \" \" ) ; } BigInteger bigb = new BigInteger ( sb . toString ( ) ) ;   for ( int i = 0 ; i < k - 1 ; i ++ ) { sb . append ( \" \" + 0 ) ; } sb . append ( \" \" + 1 ) ; BigInteger biga = new BigInteger ( sb . toString ( ) ) ;    bw . write ( biga . toString ( ) + \" \\n \" + bigb . toString ( ) ) ; bw . flush ( ) ; bw . close ( ) ; br . close ( ) ; } }","import java . util . Scanner ;   public class A {   public static void main ( String args [ ] ) { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; int m = scan . nextInt ( ) ; for ( int i = 0 ; i < 200 ; i ++ ) { System . out . print ( 9 ) ; } for ( int i = 0 ; i < 199 ; i ++ ) { System . out . print ( 0 ) ; } System . out . println ( 1 ) ; for ( int i = 0 ; i < 200 ; i ++ ) { System . out . print ( 9 ) ; } System . out . println ( ) ; } }"],"bleu":0.0936412678163824,"rouge_l":0.267353484103167}
{"id":308,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["from sys import stdinfrom math import gcd    def main ( ) : input ( ) l = stdin . read ( ) . splitlines ( ) d = [ 3. , 1. , 2. , 2. , 2. , 1. ] * 16667 for i in range ( 4 , 100001 ) : for j in range ( i , 100001 , i ) : d [ j ] += 1. for i , s in enumerate ( l ) : a , b , c = map ( int , s . split ( ) ) k = gcd ( b , c ) ab = d [ gcd ( a , b ) ] ac = d [ gcd ( a , c ) ] bc = d [ k ] abc = d [ gcd ( a , k ) ] asz = d [ a ] - ab - ac + abc bsz = d [ b ] - bc - ab + abc csz = d [ c ] - ac - bc + abc absz = ab - abc bcsz = bc - abc acsz = ac - abc l [ i ] = ' % d ' % ( asz * bsz * csz + ( absz * ( asz + bsz ) * csz ) + ( bcsz * ( bsz + csz ) * asz ) + ( acsz * ( asz + csz ) * bsz ) + ( abc * ( asz * bsz + asz * csz + bsz * csz ) ) + ( abc * ( absz + bcsz + acsz ) * ( asz + bsz + csz ) ) + ( ( asz + bsz + csz + absz + bcsz + acsz ) * ( abc * ( abc + 1 ) * .5 ) ) + ( absz * bcsz * acsz ) + ( ( absz * ( absz + 1. ) * d [ c ] ) + ( bcsz * ( bcsz + 1. ) * d [ a ] ) + ( acsz * ( acsz + 1. ) * d [ b ] ) ) * .5 + ( ( asz + bsz + csz + abc ) * ( absz * acsz + absz * bcsz + bcsz * acsz ) ) + ( abc + ( abc * ( abc - 1. ) ) + ( abc * ( abc - 1. ) * ( abc - 2. ) \/ 6. ) ) ) print ( ' \\n ' . join ( map ( str , l ) ) )    if __name__ == ' _ _ main _ _ ' : main ( )","import java . io . BufferedReader ; import java . io . BufferedWriter ; import java . io . InputStreamReader ; import java . io . OutputStreamWriter ; import java . util . ArrayList ; import java . util . HashSet ; import java . util . StringTokenizer ;   public class B2 { public static void main ( String [ ] args ) throws Exception { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; BufferedWriter bw = new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ; int t = Integer . parseInt ( br . readLine ( ) ) ;"],"bleu":0.195445242891318,"rouge_l":0.44088213491475164}
{"id":309,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException {"],"references":["import java . util . Arrays ; import java . util . Collections ;   import java . util . Scanner ;   public class Problem36 {   public static void main ( String [ ] args ) {","import java . util . Scanner ;   public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) ; int a = in . nextInt ( ) ; int b = in . nextInt ( ) ; int c = in . nextInt ( ) ; int d = in . nextInt ( ) ; int sum = a + b + c + d ; int ans = 1 ; for ( int i = 1 ; i < n ; i ++ ) { a = in . nextInt ( ) ; b = in . nextInt ( ) ; c = in . nextInt ( ) ; d = in . nextInt ( ) ; if ( a + b + c + d > sum ) { ans ++ ; } } System . out . println ( ans ) ; } }","import java . io . * ; import java . util . * ; import java . text . * ; import java . math . * ; import java . util . regex . * ; public class Main { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; int n = s . nextInt ( ) , t = 0 ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { int e = s . nextInt ( ) , g = s . nextInt ( ) , m = s . nextInt ( ) , h = s . nextInt ( ) ; a [ i ] = e + g + m + h ; } t = a [ 0 ] ; Arrays . sort ( a ) ; for ( int i = n - 1 ; i >= 0 ; i -- ) if ( t == a [ i ] ) { t = i ; break ; } System . out . println ( n - t ) ; } }","  import java . io . * ; import java . util . * ; import java . math . * ;   public class Thomas { static final Random random = new Random ( ) ; static PrintWriter out = new PrintWriter ( ( System . out ) ) ; static Reader sc = new Reader ( ) ;   public static void main ( String args [ ] ) throws IOException {","import java . util . Arrays ; import java . util . Collections ; import java . util . Scanner ;   public class Rank { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int marks [ ] = new int [ n ] ; int sum_a = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; if ( i == 0 ) sum_a = a + b + c + d ; marks [ i ] = a + b + c + d ; } Arrays . sort ( marks ) ; for ( int i = 0 ; i < n ; i ++ ) {"],"bleu":0.8289209771461841,"rouge_l":0.7359671165399144}
{"id":310,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException {"],"references":["import java . util . * ; public class _274_A_k_multiple_free_set {","from sys import stdin , stdoutfrom itertools import accumulatenmbr = lambda : int ( stdin . readline ( ) ) lst = lambda : list ( map ( int , stdin . readline ( ) . split ( ) ) ) for _ in range ( 1 ) : # nmbr ( ) ) : n , k = lst ( ) a = lst ( ) a . sort ( ) s = set ( ) for v in a : if ( v % k != 0 ) or v","import java . util . * ; import java . io . * ; import java . math . * ;   public class Main {   private static int MAX = Integer . MAX_VALUE ; private static int MIN = Integer . MIN_VALUE ; private static int MOD = 1000000007 ; static FastScanner sc = new FastScanner ( ) ;   public static void main ( String [ ] args ) throws IOException {","import java . util . * ; import java . io . * ; import java . math . BigInteger ; import java . text . * ; public class Main { static long mod = 1000_000_007 ; static long mod1 = 998244353 ; static boolean fileIO = true ; static boolean memory = true ; static FastScanner f ; static PrintWriter pw ; static double eps = ( double ) 1e-6 ; static int oo = ( int ) 2e9 ;"],"bleu":0.9486214091664587,"rouge_l":0.9322465613856341}
{"id":311,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ; import java . io . * ; import java . math . BigInteger ; import java . text . * ; public class Main { static long mod = 1000_000_007 ; static long mod1 = 998244353 ; static boolean fileIO = false ; static boolean memory = true ; static FastScanner f ; static PrintWriter pw ; static double eps = ( double ) 1e-6 ; static FileWriter fw ; static long oo = Long . MAX_VALUE ;","import java . util . Scanner ;   public class Main { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; int n = s . nextInt ( ) ; int [ ] arr = new int [ n ] ; int [ ] cnt = new int [ 32 ] ; int [ ] index = new int [ 32 ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = s . nextInt ( ) ; for ( int j = 0 ; j < 32 ; j ++ ) { if ( ( arr [ i ] & ( 1 << j ) ) > 0 ) { cnt [ j ] ++ ; index [ j ] = i ; } } } for ( int i = 31 ; i >= 0 ; i -- ) { if ( cnt [ i ] == 1 ) { int temp = arr [ 0 ] ; arr [ 0 ] = arr [ index [ i ] ] ; arr [ index [ i ] ] = temp ; break ; } } for ( int i : arr ) System . out . print ( i + \" ▁ \" ) ; System . out . println ( ) ; } }","import sysimport itertoolsimport collections   n = int ( input ( ) ) A = [ int ( x ) for x in input ( ) . split ( ) ] perms = [ ]   def bits ( lst ) : a = [ ] for val in lst : s = [ ] for shift in range ( 29 , - 1 , - 1 ) : s += [ str ( val >> shift & 1 ) ] a += [ ' ' . join ( s [ : : -1 ] ) ] ▁ ▁ ▁ ▁ return ▁ a def ▁ calcCost ( perm ) : ▁ ▁ ▁ ▁ f ▁ = ▁ lambda ▁ a , ▁ b : ▁ ( ( a | b ) ▁ - ▁ b ) ▁ ▁ ▁ ▁ a ▁ = ▁ f ( perm [ 0 ] , ▁ perm [ 1 ] ) ▁ ▁ ▁ ▁ for ▁ i ▁ in ▁ range ( 2 , ▁ len ( perm ) ) : ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ a ▁ = ▁ f ( a , ▁ perm [ i ] ) ▁ ▁ ▁ ▁ return ▁ a def ▁ bruteForce ( ) : ▁ ▁ ▁ ▁ global ▁ perms ▁ ▁ ▁ ▁ for ▁ perm ▁ in ▁ list ( itertools . permutations ( A ) ) : ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ perms ▁ + = ▁ [ ( perm , ▁ calcCost ( perm ) ) ] ▁ ▁ ▁ ▁ print ( * perms , ▁ sep = \" \\n \" )   # ▁ bruteForce ( ) # ▁ print ( ' not reversed ' ) # ▁ print ( * bits ( A , ▁ False ) , ▁ sep = ' \\ n ' ) # ▁ print ( ' reversed ' ) # ▁ print ( * bits ( A , ▁ True ) , ▁ sep = ' \\ n ' )  calcBits ▁ = ▁ bits ( A ) # ▁ print ( * calcBits , ▁ sep = ' \\ n ' ) for ▁ i ▁ in ▁ range ( 29 , ▁ - 1 , ▁ - 1 ) : ▁ ▁ ▁ ▁ one ▁ = ▁ 0 ▁ ▁ ▁ ▁ swapIndex ▁ = ▁ None ▁ ▁ ▁ ▁ for ▁ ii ▁ in ▁ range ( n ) : ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ if ▁ calcBits [ ii ] [ i ] ▁ = = ▁ ' 1 ' : ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ one ▁ + = ▁ 1 ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ swapIndex ▁ = ▁ ii ▁ ▁ ▁ ▁ if ▁ one ▁ = = ▁ 1 : ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ A [ 0 ] , ▁ A [ swapIndex ] ▁ = ▁ A [ swapIndex ] , ▁ A [ 0 ] ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ breakprint ( * A )   # ▁ for ▁ shift ▁ in ▁ range ( 29 , ▁ - 1 , ▁ - 1 ) : # ▁ ▁ ▁ ▁ ▁ c ▁ = ▁ 0 # ▁ ▁ ▁ ▁ ▁ b ▁ = ▁ None # ▁ ▁ ▁ ▁ ▁ print ( ' shift ', shift)#     for i in range(n):#         if A[i] >> shift & 1 == 1:#             print(A[i], A[i] >> shift & 1)#             c += 1#             b = i#     if c == 1:#         A[b], A[0] = A[0], A[b]#         break# print(*A)\"\"\"315479581 010010110011011101011000011101954336048 111000111000100000001100110000124252105 000111011001111110111111001001880492165 110100011110110011111010000101179952043 001010101110011101100110101011\"\"\""],"bleu":0.24387022681169163,"rouge_l":0.5060538116591928}
{"id":312,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["   import java . util . * ;    public class dummycodes {   public static class data { int prevIndex ; int comDiff ; public data ( int i ) { prevIndex = i ; comDiff = 0 ; } } public static void solve ( int t , int s1 , int s2 , int e1 , int e2 , String s ) { int reqDirs [ ] = new int [ 26 ] ; if ( s1 < e1 ) reqDirs [ ' E ' - ' A ' ] = ( e1 - s1 ) ; else reqDirs [ ' W ' - ' A ' ] = ( s1 - e1 ) ; if ( s2 < e2 ) reqDirs [ ' N ' - ' A ' ] = ( e2 - s2 ) ; else reqDirs [ ' S ' - ' A ' ] = ( s2 - e2 ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( reqDirs [ s . charAt ( i ) - ' A ' ] > 0 ) reqDirs [ s . charAt ( i ) - ' A ' ] -- ; if ( reqDirs [ ' N ' - ' A ' ] == 0 && reqDirs [ ' S ' - ' A ' ] == 0 && reqDirs [ ' E ' - ' A ' ] == 0 && reqDirs [ ' W ' - ' A ' ] == 0 ) { System . out . println ( i + 1 ) ; return ; } } System . out . println ( \" - 1\" ) ; }   public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; int s1 = sc . nextInt ( ) ; int s2 = sc . nextInt ( ) ; int e1 = sc . nextInt ( ) ; int e2 = sc . nextInt ( ) ; sc . nextLine ( ) ; String s = sc . nextLine ( ) ;   solve ( t , s1 , s2 , e1 , e2 , s ) ;        } }  ","    import java . io . DataInputStream ; import java . io . FileInputStream ; import java . io . IOException ; import java . util . * ;   public class Main {   static class Reader { final private int BUFFER_SIZE = 1 << 16 ; private DataInputStream din ;   private byte [ ] buffer ; private int bufferPointer , bytesRead ;   public Reader ( ) { din = new DataInputStream ( System . in ) ; buffer = new byte [ BUFFER_SIZE ] ; bufferPointer = bytesRead = 0 ; }   public Reader ( String file_name ) throws IOException { din = new DataInputStream ( new FileInputStream ( file_name ) ) ; buffer = new byte [ BUFFER_SIZE ] ; bufferPointer = bytesRead = 0 ; }   public String readLine ( ) throws IOException { byte [ ] buf = new byte [ 64 ] ;","import java . util . * ; import java . math . * ; public class Sail { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int size = sc . nextInt ( ) ; int sx = sc . nextInt ( ) ; int sy = sc . nextInt ( ) ; int ex = sc . nextInt ( ) ; int ey = sc . nextInt ( ) ; String in = sc . next ( ) ; char [ ] arr = in . toCharArray ( ) ; for ( int i = 0 ; i < size ; i ++ ) { char temp = arr [ i ] ; if ( temp == ' E ' ) { if ( Math . abs ( ( sx + 1 ) - ex ) < Math . abs ( sx - ex ) ) sx ++ ; } if ( temp == ' W ' ) { if ( Math . abs ( ( sx - 1 ) - ex ) < Math . abs ( sx - ex ) ) sx -- ; } if ( temp == ' N ' ) { if ( Math . abs ( ( sy + 1 ) - ey ) < Math . abs ( sy - ey ) ) sy ++ ; } if ( temp == ' S ' ) { if ( Math . abs ( ( sy - 1 ) - ey ) < Math . abs ( sy - ey ) ) sy -- ; } if ( sx == ex && ey == sy ) { System . out . println ( i + 1 ) ; return ; }   }   System . out . println ( - 1 ) ; } }","import java . util . * ; import java . io . * ;   public class Sail {   static int ex , ey ;   public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int t = scan . nextInt ( ) ; int sx = scan . nextInt ( ) ; int sy = scan . nextInt ( ) ; ex = scan . nextInt ( ) ; ey = scan . nextInt ( ) ; int dist = Math . abs ( sx - ex ) + Math . abs ( sy - ey ) ;   scan . nextLine ( ) ; char [ ] dir = scan . nextLine ( ) . toCharArray ( ) ;   for ( int i = 0 ; i < t ; i ++ ) {   switch ( dir [ i ] ) { case ' N ' : if ( getDist ( sx , sy + 1 ) < dist ) { sy ++ ; } break ; case ' S ' : if ( getDist ( sx , sy - 1 ) < dist ) { sy -- ; } break ; case ' E ' : if ( getDist ( sx + 1 , sy ) < dist ) { sx ++ ; } break ; case ' W ' : if ( getDist ( sx - 1 , sy ) < dist ) { sx -- ; } break ; }   dist = getDist ( sx , sy ) ;   if ( sx == ex && sy == ey ) { System . out . println ( i + 1 ) ; return ; } }   System . out . println ( - 1 ) ; }   static int getDist ( int x , int y ) { return Math . abs ( x - ex ) + Math . abs ( y - ey ) ; }    }"],"bleu":0.10581356487929842,"rouge_l":0.3620440069484655}
{"id":313,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . Scanner ;    public class Main {   public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) ; int a , b ; int ans = 0 , p = 100 ; for ( int i = 0 ; i < n ; i ++ ) { a = in . nextInt ( ) ; b = in . nextInt ( ) ; p = Math . min ( p , b ) ; ans += p * a ; } System . out . println ( ans ) ;   } }","import java . util . * ;   public class DuffAndMeat_588A {   public static void main ( String [ ] args ) {","import java . util . ArrayList ; import java . util . Scanner ; import java . util . Stack ;    public class JavaApplication9 {   public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int x = in . nextInt ( ) , a = in . nextInt ( ) , b = in . nextInt ( ) , res = a * b , z = 0 , y = 0 ; for ( int i = 1 ; i < x ; i ++ ) { z = in . nextInt ( ) ; y = in . nextInt ( ) ; if ( b < y ) { res += z * b ; continue ; } res += z * y ; b = y ; } System . out . println ( res ) ; } }","import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner x = new Scanner ( System . in ) ; int days = x . nextInt ( ) ; int [ ] [ ] l = new int [ days ] [ 2 ] ; for ( int i = 0 ; i < days ; i ++ ) { l [ i ] [ 0 ] = x . nextInt ( ) ; l [ i ] [ 1 ] = x . nextInt ( ) ; } int ans = 0 ; int mini = l [ 0 ] [ 1 ] ; for ( int i = 0 ; i < days ; i ++ ) { mini = Math . min ( mini , l [ i ] [ 1 ] ) ; ans += mini * l [ i ] [ 0 ] ; } System . out . println ( ans ) ; x . close ( ) ; } }","import java . io . IOException ; import java . util . Scanner ;   public class Main {   public static void main ( String [ ] args ) throws IOException { Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) ; int ans = 0 ; int p = 110 ; for ( int i = 0 ; i < n ; i ++ ) { int a = in . nextInt ( ) ; p = Math . min ( p , in . nextInt ( ) ) ; ans += p * a ; } System . out . println ( ans ) ; } }"],"bleu":0.39537383933343595,"rouge_l":0.546483194024542}
{"id":314,"predictions":["import java . util . * ; import java . io . * ; import java . math . BigInteger ; import java . text . * ; public class Main { static long mod = 1000_000_007 ; static long mod1 = 998244353 ; static boolean fileIO = false ; static boolean memory = true ; static FastScanner f ; static PrintWriter pw ; static double eps = ( double ) 1e-6 ; static int oo = ( int ) 2e9 ;"],"references":["import java . io . * ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; import java . util . StringTokenizer ; import java . util . * ; public class realfast implements Runnable { private static final int INF = ( int ) 1e9 ; long in = ( long ) Math . pow ( 10 , 9 ) + 7 ; long fac [ ] = new long [ 3000 ] ; public void solve ( ) throws IOException { String s = readString ( ) ; int n = s . length ( ) ; int last [ ] = new int [ s . length ( ) ] ; Arrays . fill ( last , n ) ; for ( int j = 1 ; j <= 9 ; j ++ ) { for ( int i = 0 ; i < n - 2 * j ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i + j ) && s . charAt ( i + j ) == s . charAt ( i + 2 * j ) ) { last [ i ] = Math . min ( last [ i ] , i + 2 * j ) ; } } } for ( int i = n - 2 ; i >= 0 ; i -- ) { last [ i ] = Math . min ( last [ i ] , last [ i + 1 ] ) ; } long count = 0 ; for ( int i = 0 ; i < n ; i ++ ) count = count + n - last [ i ] ;   out . println ( count ) ; } public long pow ( long n , long p , long m ) { if ( p == 0 ) return 1 ; long val = pow ( n , p \/ 2 , m ) ; ; val = ( val * val ) % m ; if ( p % 2 == 0 ) return val ; else return ( val * n ) % m ; }","import java . util . * ; public class Main { static boolean slove ( char a , char b , char c ) { if ( a == b && b == c ) return true ; else return false ; } public static void main ( String args [ ] ) {","import java . util . * ; import java . util . Arrays ;   public class Main { static int inf = 1000000000 ; static int MOD = 1000000007 ; public static void main ( String ards [ ] ) { Scanner cin = new Scanner ( System . in ) ; String s1 = cin . next ( ) ; StringBuilder str = new StringBuilder ( \" ▁ \" ) ; str . append ( s1 ) ; int len = str . length ( ) ; String s = str . toString ( ) ; int p = 0 ; long ans = 0 ; for ( int i = 3 ; i < len ; i ++ ) { for ( int j = p + 1 ; j <= i - 2 ; j ++ ) { if ( ( i - j ) % 2 == 0 && s . charAt ( i ) == s . charAt ( j ) && s . charAt ( i ) == s . charAt ( ( i + j ) \/ 2 ) ) p = j ; } ans += p ; } System . out . println ( ans ) ; } }","import sysfrom collections import deque # from functools import * # from fractions import Fraction as f # from copy import * # from bisect import * # from heapq import * # from math import gcd , ceil , sqrt # from itertools import permutations as prm , product def eprint ( * args ) : print ( * args , file = sys . stderr ) zz = 1 # sys . setrecursionlimit ( 10 * * 6 ) if zz : input = sys . stdin . readlineelse : sys . stdin = open ( ' input . txt ' , ' r ' ) sys . stdout = open ( ' all . txt ' , ' w ' ) di = [ [ - 1 , 0 ] , [ 1 , 0 ] , [ 0 , 1 ] , [ 0 , - 1 ] ]   def string ( s ) : return \" \" . join ( s ) def fori ( n ) : return [ fi ( ) for i in range ( n ) ] def inc ( d , c , x = 1 ) : d [ c ] = d [ c ] + x if c in d else xdef bo ( i ) : return ord ( i ) - ord ( ' A ' ) def li ( ) : return [ int ( xx ) for xx in input ( ) . split ( ) ] def fli ( ) : return [ float ( x ) for x in input ( ) . split ( ) ] def comp ( a , b ) : if ( a > b ) : return 2 return 2 if a == b else 0 def gi ( ) : return [ xx for xx in input ( ) . split ( ) ] def cil ( n , m ) : return n"],"bleu":0.3899718917909493,"rouge_l":0.42061967912174314}
{"id":315,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . io . * ; import java . util . * ;   public class Codeforces { int l , r , x ; int count ; void subsetSums ( int arr [ ] , int n ) { int total = 1 << n ; for ( int i = 0 ; i < total ; i ++ ) { long sum = 0 , min = Integer . MAX_VALUE , max = Integer . MIN_VALUE ; for ( int j = 0 ; j < n ; j ++ ) { if ( ( i & ( 1 << j ) ) != 0 ) { min = Math . min ( min , arr [ j ] ) ; max = Math . max ( max , arr [ j ] ) ; sum += arr [ j ] ; } } if ( sum >= l && sum <= r && max - min >= x ) {","import java . util . Scanner ;   public class SbuSeq {   public static void main ( String [ ] args ) {","import java . io . * ; import java . util . StringTokenizer ;   public class PreparingOlympiad { static int l ; static int r ; static int x ; static int n ; static int [ ] arr ;   private static int ways ( int i , int min , int max , int sum , int size ) { if ( i == n ) { if ( l <= sum && sum <= r && x <= ( max - min ) && size >= 2 ) return 1 ; return 0 ; } return ways ( i + 1 , Math . min ( min , arr [ i ] ) , Math . max ( max , arr [ i ] ) , sum + arr [ i ] , size + 1 ) + ways ( i + 1 , min , max , sum , size ) ; }   public static void main ( String [ ] args ) { FastReader in = new FastReader ( ) ; PrintWriter out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ;   n = in . nextInt ( ) ; l = in . nextInt ( ) ; r = in . nextInt ( ) ; x = in . nextInt ( ) ;   arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = in . nextInt ( ) ;    out . println ( ways ( 0 , Integer . MAX_VALUE , 0 , 0 , 0 ) ) ; out . close ( ) ; }   static class FastReader { BufferedReader br ; StringTokenizer st ;   FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; }   String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } } }   ","import java . util . * ; import java . io . * ; import java . math . * ;   public class Main {   final static int mod = 1000000007 ; static FastReader sc ; static PrintWriter out ;   public static void solution ( ) throws IOException { int n = sc . nextInt ( ) ; int l = sc . nextInt ( ) ; int r = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = sc . nextInt ( ) ;   int istwo = 0 , count = 0 ; for ( int i = 1 ; i < ( 1 << n ) ; i ++ ) { if ( i == ( 1 << istwo ) ) { istwo ++ ; continue ; } int sum = 0 , min = Integer . MAX_VALUE , max = Integer . MIN_VALUE ; for ( int mask = 0 ; mask < n ; mask ++ ) { if ( ( i & ( 1 << mask ) ) != 0 ) { int val = a [ n - 1 - mask ] ; sum += val ; min = Math . min ( val , min ) ; max = Math . max ( val , max ) ; } } if ( sum >= l && sum <= r && max - min >= x ) { count ++ ; } } out . println ( count ) ; }  ","import java . io . BufferedWriter ; import java . io . ByteArrayInputStream ; import java . io . FileInputStream ; import java . io . FileWriter ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . InputMismatchException ; import java . util . List ;   public class Main { private static final long MOD = ( long ) 1e9 + 7 ; static InputStream is ; static PrintWriter out ; static String INPUT = \" \" ; static int lenbuf = 0 , ptrbuf = 0 ; static boolean readFile = false ;"],"bleu":0.5859059370151704,"rouge_l":0.5604448742746614}
{"id":316,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ;    public class Main {    public static void main ( String [ ] args ) { int n , l = 0 , r ; int [ ] a = new int [ 1020 ] ; Scanner in = new Scanner ( System . in ) ; r = n = in . nextInt ( ) ; a [ 0 ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { a [ i ] = in . nextInt ( ) ; }   while ( a [ l ] == l && l <= n ) l ++ ; while ( a [ r ] == r && r >= 1 ) r -- ;   if ( l == n + 1 && r == 0 ) { System . out . println ( \"0 ▁ 0\" ) ; return ; } for ( int i = l ; i < r ; i ++ ) { if ( a [ i ] < a [ i + 1 ] ) { System . out . println ( \"0 ▁ 0\" ) ; return ; } } System . out . println ( l + \" ▁ \" + r ) ; }    }","import javax . print . DocFlavor ; import java . io . FileOutputStream ; import java . security . PublicKey ; import java . util . Arrays ;   import java . util . LinkedList ; import java . util . Scanner ;   public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int [ ] a = new int [ k ] ; int i = 0 ; for ( i = 0 ; i < k ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int start = 0 , end = 0 ; boolean flag = false ; for ( i = 0 ; i < k - 1 ; i ++ ) { if ( a [ i ] > a [ i + 1 ] ) { start = i ; flag = true ; break ; } } int [ ] b = new int [ k ] ; for ( i = 0 ; i < k ; i ++ ) { b [ i ] = a [ i ] ; } if ( flag ) { for ( i = start ; i < k - 1 ; i ++ ) { if ( a [ i + 1 ] > a [ i ] ) { end = i ; break ; } } if ( end == 0 ) end = k - 1 ; } int [ ] c = new int [ end - start + 1 ] ; int e = start ;   for ( i = 0 ; i < c . length ; i ++ ) { c [ i ] = a [ e ] ; e ++ ; } e = start ; Arrays . sort ( c ) ; for ( i = 0 ; i < c . length ; i ++ ) { a [ e ] = c [ i ] ; e ++ ;    } Arrays . sort ( b ) ; for ( i = 0 ; i < k ; i ++ ) {   if ( a [ i ] != b [ i ] ) { flag = false ; break ; }    }   if ( flag ) { start ++ ; end ++ ; System . out . println ( start + \" ▁ \" + end ) ; } else System . out . println ( \"0\" + \" ▁ \" + \"0\" ) ; }   }    ","import java . util . * ;   public class Main {   public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; while ( scanner . hasNext ( ) ) { int [ ] a = new int [ 1010 ] ; int n = scanner . nextInt ( ) ; int l = 0 , r = 0 ; for ( int i = 1 ; i <= n ; i ++ ) a [ i ] = scanner . nextInt ( ) ; for ( int i = 1 ; i <= n ; i ++ ) if ( a [ i ] != i ) { l = i ; break ; } for ( int i = n ; i >= 1 ; i -- ) if ( a [ i ] != i ) { r = i ; break ; } for ( int i = l ; i < r ; i ++ ) { if ( a [ i ] < a [ i + 1 ] ) { System . out . println ( \"0 ▁ 0\" ) ; return ; } } if ( l == 0 && r == 0 ) { System . out . println ( \"0 ▁ 0\" ) ; return ; } System . out . println ( l + \" ▁ \" + r ) ; } } }","import java . util . * ; import java . lang . * ; import java . io . * ;   public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) {"],"bleu":0.3774249724691664,"rouge_l":0.6605870618409803}
{"id":317,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . Scanner ;   public class Array_524 { public static void main ( String [ ] args ) { Scanner sn = new Scanner ( System . in ) ; int n = sn . nextInt ( ) ; int m = sn . nextInt ( ) ; int x = sn . nextInt ( ) ; int y = sn . nextInt ( ) ; int [ ] N = new int [ n ] ; int [ ] M = new int [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { N [ i ] = sn . nextInt ( ) ; } for ( int i = 0 ; i < m ; i ++ ) { M [ i ] = sn . nextInt ( ) ; }   int [ ] [ ] ans = solution ( N , M , x , y ) ; int total = 0 ;   for ( int i = 0 ; i < ans . length ; i ++ ) { if ( ans [ i ] [ 0 ] != 0 && ans [ i ] [ 1 ] != 0 ) { total ++ ; } }   System . out . println ( total ) ; for ( int i = 0 ; i < total ; i ++ ) { System . out . println ( ans [ i ] [ 0 ] + \" ▁ \" + ans [ i ] [ 1 ] ) ; } }   private static int [ ] [ ] solution ( int [ ] N , int [ ] M , int x , int y ) { int [ ] [ ] result = new int [ M . length ] [ 2 ] ; int resultIndex = 0 ; int i = 0 ; int j = 0 ; while ( i < N . length && j < M . length ) { int a = Math . max ( 0 , N [ i ] - x ) ; int b = N [ i ] + y ; if ( M [ j ] >= a && M [ j ] <= b ) { result [ resultIndex ] [ 0 ] = i + 1 ; result [ resultIndex ] [ 1 ] = j + 1 ; resultIndex ++ ; i ++ ; j ++ ; } else { if ( N [ i ] < M [ j ] ) { i ++ ; } else { j ++ ; } } } return result ; }   }","import java . util . * ; import java . io . * ; import java . lang . * ; public class Codeforces { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter out = new PrintWriter ( System . out ) ; StringTokenizer st = new StringTokenizer ( \" \" ) ; String next ( ) { if ( ! st . hasMoreTokens ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( Exception e ) {   } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } public static void main ( String [ ] args ) { new Codeforces ( ) . solve ( ) ; } void solve ( ) { int n = nextInt ( ) , m = nextInt ( ) ; long arr [ ] = new long [ n ] , brr [ ] = new long [ m ] , x = nextLong ( ) , y = nextLong ( ) ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = nextLong ( ) ; for ( int j = 0 ; j < m ; j ++ ) brr [ j ] = nextLong ( ) ; int i = 0 , j = 0 ; List < Pair > res = new ArrayList < > ( ) ; while ( i < n && j < m ) { if ( arr [ i ] - x <= brr [ j ] && arr [ i ] + y >= brr [ j ] ) { res . add ( new Pair ( i + 1 , j + 1 ) ) ; i ++ ; j ++ ; } else if ( arr [ i ] + y < brr [ j ] ) { i ++ ; } else if ( arr [ i ] - x > brr [ j ] ) { j ++ ; }","import java . util . ArrayList ; import java . util . Scanner ;   public class Solution { public static void main ( String args [ ] ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; sc . nextLine ( ) ; int [ ] soldier = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { soldier [ i ] = sc . nextInt ( ) ; } int [ ] vest = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { vest [ i ] = sc . nextInt ( ) ; } int v = 0 ; ArrayList < String > output = new ArrayList < String > ( ) ; for ( int s = 0 ; s < soldier . length ; s ++ ) { if ( v >= vest . length ) break ; if ( ( vest [ v ] >= ( soldier [ s ] - x ) ) && ( vest [ v ] <= ( soldier [ s ] + y ) ) ) { output . add ( ( s + 1 ) + \" ▁ \" + ( v + 1 ) ) ; } else { if ( vest [ v ] > soldier [ s ] + y ) continue ; else if ( vest [ v ] < soldier [ s ] - x ) { v ++ ; s -- ; continue ; } } v ++ ; } System . out . println ( output . size ( ) ) ; for ( int i = 0 ; i < output . size ( ) ; i ++ ) { System . out . println ( output . get ( i ) ) ; } } }","import java . awt . Point ; import java . util . ArrayList ; import java . util . List ; import java . util . Scanner ;   public class A161 {   public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int soldierNo = in . nextInt ( ) ; int vestNo = in . nextInt ( ) ; int X = in . nextInt ( ) ; int Y = in . nextInt ( ) ; int [ ] soldier = new int [ soldierNo ] ; for ( int i = 0 ; i < soldierNo ; i ++ ) { soldier [ i ] = in . nextInt ( ) ; } int [ ] vest = new int [ vestNo ] ; for ( int i = 0 ; i < vestNo ; i ++ ) { vest [ i ] = in . nextInt ( ) ; } int soldierIdx = 0 ; int vestIdx = 0 ; List < Point > matched = new ArrayList < > ( ) ; while ( soldierIdx < soldierNo && vestIdx < vestNo ) { if ( vest [ vestIdx ] + X < soldier [ soldierIdx ] ) {"],"bleu":0.023289655045457755,"rouge_l":0.24500651324359532}
{"id":318,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . io . * ; import java . util . * ;   public class A1008 { public static void main ( String [ ] args ) { InputStream inputReader = System . in ; OutputStream outputReader = System . out ; InputReader in = new InputReader ( inputReader ) ;","import java . io . * ; import java . util . * ;   public class A1008 { public static void main ( String [ ] args ) { InputStream inputReader = System . in ; OutputStream outputReader = System . out ; InputReader in = new InputReader ( inputReader ) ;","import com . sun . org . apache . bcel . internal . generic . AALOAD ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . math . BigInteger ; import java . util . * ; import java . util . stream . IntStream ; import javafx . util . Pair ;   public class Main {   static void sort ( int a [ ] ) { Random ran = new Random ( ) ; for ( int i = 0 ; i < a . length ; i ++ ) { int r = ran . nextInt ( a . length ) ; int temp = a [ r ] ; a [ r ] = a [ i ] ; a [ i ] = temp ; }   Arrays . sort ( a ) ; } static int a [ ] ;   public static class Check { int a ; int b ;   public Check ( int a , int b ) { this . a = a ; this . b = b ; } }   public static void main ( String [ ] args ) throws IOException {   Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; int k = input . nextInt ( ) ; int q = input . nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = input . nextInt ( ) ; } TreeSet < Integer > set = new TreeSet < > ( ) ; StringBuilder ans = new StringBuilder ( ) ; for ( int i = 0 ; i < q ; i ++ ) { int x = input . nextInt ( ) ; int index = input . nextInt ( ) - 1 ; if ( x == 1 ) { if ( set . size ( ) < k ) { set . add ( a [ index ] ) ; } else { if ( set . first ( ) < a [ index ] ) { set . pollFirst ( ) ; set . add ( a [ index ] ) ; } } } else { if ( set . contains ( a [ index ] ) ) { ans . append ( \" YES \\n \" ) ; } else { ans . append ( \" NO \\n \" ) ; } } } System . out . println ( ans ) ; }   }"],"bleu":0.6211440207081306,"rouge_l":0.6033543577981649}
{"id":319,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . io . * ; import java . util . * ; import javax . print . attribute . standard . Finishings ;   import java . math . * ;   public class Shell { static final Random random = new Random ( ) ; static PrintWriter out = new PrintWriter ( ( System . out ) ) ; static Reader sc = new Reader ( ) ;   public static void main ( String args [ ] ) throws IOException {   int k = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int left [ ] = { 1 , 2 , 2 , 1 , 0 , 0 } ; int right [ ] = { 2 , 1 , 0 , 0 , 1 , 2 } ; int middle [ ] = { 0 , 0 , 1 , 2 , 2 , 1 } ; int y = k % 6 ; if ( y > 0 ) { if ( left [ y - 1 ] == x ) System . out . println ( 0 ) ; if ( right [ y - 1 ] == x ) System . out . println ( 2 ) ; if ( middle [ y - 1 ] == x ) System . out . println ( 1 ) ; } else { if ( left [ 5 ] == x ) System . out . println ( 0 ) ; if ( right [ 5 ] == x ) System . out . println ( 2 ) ; if ( middle [ 5 ] == x ) System . out . println ( 1 ) ;   }   }  ","import java . util . Scanner ;   public class ShellGame { public static void main ( String [ ] args ) {   Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) % 6 , x = in . nextInt ( ) ; in . close ( ) ;   String [ ] a = { \"012\" , \"102\" , \"120\" , \"210\" , \"201\" , \"021\" } ; System . out . println ( a [ n ] . charAt ( x ) ) ; } }","import java . io . * ;   public class Main { static int n , x ; static int [ ] [ ] basis = { { 0 , 1 , 2 } , { 1 , 0 , 2 } , { 1 , 2 , 0 } , { 2 , 1 , 0 } , { 2 , 0 , 1 } , { 0 , 2 , 1 } } ; static StreamTokenizer st = new StreamTokenizer ( new BufferedReader ( new InputStreamReader ( System . in ) ) ) ; static BufferedWriter bw = new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ;   public static void main ( String [ ] args ) throws IOException { st . nextToken ( ) ; n = ( int ) st . nval ; st . nextToken ( ) ; x = ( int ) st . nval ; bw . write ( basis [ n % basis . length ] [ x ] + \" \" ) ; bw . close ( ) ; } }"],"bleu":0.1926146402553756,"rouge_l":0.2823579453048765}
{"id":320,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException {"],"references":["import java . util . Scanner ;   public class Queue_in_bus_stop {   public static void main ( String [ ] args ) {   Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) ; int m = in . nextInt ( ) ; int groupN = in . nextInt ( ) ; int count = 1 ; int j = m - groupN ; for ( int i = 1 ; i < n ; i ++ ) { groupN = in . nextInt ( ) ; if ( groupN > j ) { count ++ ; j = m - groupN ; } else { j -= groupN ; } } System . out . println ( count ) ; }   }","import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) ; int m = in . nextInt ( ) ; int sum = m ; int r = 0 ; while ( n != 0 ) { n -- ; int a = in . nextInt ( ) ; if ( sum + a > m ) { r ++ ; sum = a ; } else sum = sum + a ; } System . out . println ( r ) ; } }","import java . util . Scanner ;   public class Main {   public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) ; int m = in . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = in . nextInt ( ) ;   int cnt = 0 ; int sum ; for ( int i = 0 ; i < n ; i ++ ) { ++ cnt ; sum = a [ i ] ; for ( int j = i + 1 ; j < n ; j ++ ) { sum += a [ j ] ; if ( sum <= m ) { ++ i ; } } } System . out . println ( cnt ) ; }","import java . util . Scanner ;   public class QueueBusStop { public static void main ( String [ ] args ) {   Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) , m = in . nextInt ( ) , i , o = 1 , c = m ; for ( i = 0 ; i < n ; i ++ ) {   int a = in . nextInt ( ) ; if ( a <= c ) { c -= a ; } else { o ++ ; c = m - a ; } } in . close ( ) ; System . out . println ( o ) ; } }"],"bleu":0.045126211886101886,"rouge_l":0.27105635225207025}
{"id":321,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . Scanner ;   public class MikeAndPallindrome {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String str = sc . next ( ) ; int lo = 0 ; int hi = str . length ( ) - 1 ; Check ( str , lo , hi ) ;   }   public static void Check ( String str , int lo , int hi ) { int check = 0 ; while ( lo < hi ) { if ( str . charAt ( lo ) != str . charAt ( hi ) ) { check ++ ; } hi -- ; lo ++ ; } if ( check == 1 || ( str . length ( ) % 2 != 0 && check == 0 ) ) { System . out . println ( \" YES \" ) ; } else { System . out . println ( \" NO \" ) ; } }   }","  import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Scanner ; import java . util . StringTokenizer ; import java . util . * ; import java . math . * ;    public class atcbg {","import java . util . Arrays ; import java . util . Scanner ;   public class _0646Mikeandpalindrome {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . nextLine ( ) ; char [ ] arr = s . toCharArray ( ) ; int count = 0 ; for ( int i = 0 ; i < s . length ( ) \/ 2 ; i ++ ) {"],"bleu":0.6055959071967493,"rouge_l":0.5594674556213018}
{"id":322,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . io . * ; import java . math . * ; import java . util . * ;   public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int T = sc . nextInt ( ) ; sc . nextLine ( ) ; while ( T -- > 0 ) { String x = sc . nextLine ( ) ;","   import java . io . * ; import java . math . BigDecimal ; import java . math . BigInteger ; import java . util . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ;    public class Main1 {    public static void main ( String [ ] args ) {   try {    FastScanner in = new FastScanner ( ) ; PrintWriter out = new PrintWriter ( System . out ) ;     int t = in . nextInt ( ) ;   while ( t -- > 0 ) { String s = in . next ( ) ; int st = s . indexOf ( \"1\" ) ; int lst = s . lastIndexOf ( \"1\" ) ;   if ( st == - 1 ) { System . out . println ( 0 ) ; continue ; }   s = s . substring ( st , lst + 1 ) ; int n = s . length ( ) ; s = s . replace ( \"0\" , \" \" ) ; int topt = n - s . length ( ) ; System . out . println ( topt ) ;   }                out . flush ( ) ; out . close ( ) ;    } catch ( Exception e ) { return ; }                      }    static class FastScanner { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( \" \" ) ;   String next ( ) { while ( ! st . hasMoreTokens ( ) ) try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   int [ ] readArray ( int n ) { int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = nextInt ( ) ; return a ; }    long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } }    }         ","import java . util . * ;   public class Main {   public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; scanner . nextLine ( ) ; for ( int i = 0 ; i < n ; i ++ ) { String s = scanner . nextLine ( ) ; int prev = - 1 , cnt = 0 ; for ( int j = 0 ; j < s . length ( ) ; j ++ ) { if ( s . charAt ( j ) == '1' ) { if ( prev != - 1 ) { cnt += j - prev - 1 ; } prev = j ; } } System . out . println ( cnt ) ; } } }","import java . util . * ;   public class CodeForces1303A { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int T = scan . nextInt ( ) ; while ( T -- > 0 ) { String s = scan . next ( ) ; int first = - 1 ; int last = - 1 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == '1' ) { if ( first == - 1 ) { first = i ; last = i ; } else { last = i ; } } } int count = 0 ; if ( first != - 1 && last != - 1 ) { for ( int i = first ; i <= last ; i ++ ) { if ( s . charAt ( i ) == '0' ) count ++ ; } } System . out . println ( count ) ; } } }","import java . util . Scanner ;   public class A1303 { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int t = scanner . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { String string = scanner . next ( ) ; int cnt = 0 , ans = 0 ; int f = 0 ; for ( int j = 0 ; j < string . length ( ) ; j ++ ) { if ( string . charAt ( j ) == '1' ) { f = 1 ; ans += cnt ; cnt = 0 ; } if ( string . charAt ( j ) == '0' && f == 1 ) { cnt ++ ; }   } System . out . println ( ans ) ; } } }"],"bleu":0.4274997433451765,"rouge_l":0.4913555992141454}
{"id":323,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . io . InputStream ; import java . io . OutputStream ; import java . io . IOException ; import java . util . ArrayList ; import java . io . InputStream ; import java . io . BufferedWriter ; import java . io . Writer ; import java . io . OutputStreamWriter ; import java . io . IOException ; import java . util . InputMismatchException ; import java . io . PrintWriter ; import java . util . Arrays ; import java . io . OutputStream ;   public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; OutputWriter out = new OutputWriter ( outputStream ) ; TaskB solver = new TaskB ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class TaskB { double special ( int [ ] loyalties , int [ ] levels , int playerlevelsum ) { int poss = 1 << loyalties . length ; double res = 0 ; for ( int pos = 0 ; pos < poss ; pos ++ ) { double occurs = 1 ; int happy = 0 ; int badlevelssum = 0 ; for ( int i = 0 ; i < loyalties . length ; i ++ ) { if ( ( ( pos >> i ) & 1 ) == 1 ) {","import java . io . InputStream ; import java . io . OutputStream ; import java . io . IOException ; import java . util . ArrayList ; import java . io . InputStream ; import java . io . BufferedWriter ; import java . io . Writer ; import java . io . OutputStreamWriter ; import java . io . IOException ; import java . util . InputMismatchException ; import java . io . PrintWriter ; import java . util . Arrays ; import java . io . OutputStream ;   public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; OutputWriter out = new OutputWriter ( outputStream ) ; TaskB solver = new TaskB ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class TaskB { double special ( int [ ] loyalties , int [ ] levels , int playerlevelsum ) { int poss = 1 << loyalties . length ; double res = 0 ; for ( int pos = 0 ; pos < poss ; pos ++ ) { double occurs = 1 ; int happy = 0 ; int badlevelssum = 0 ; for ( int i = 0 ; i < loyalties . length ; i ++ ) { if ( ( ( pos >> i ) & 1 ) == 1 ) {","import java . util . Scanner ;   public class DarkAssembly { static int n , A ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; A = sc . nextInt ( ) ; int [ ] [ ] sen = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { sen [ i ] [ 0 ] = sc . nextInt ( ) ; sen [ i ] [ 1 ] = sc . nextInt ( ) ; }","import java . io . BufferedReader ; import java . util . Comparator ; import java . io . OutputStream ; import java . io . PrintWriter ; import java . util . Collection ; import java . util . List ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Arrays ; import java . util . ArrayList ; import java . util . StringTokenizer ; import java . math . BigInteger ; import java . util . Collections ; import java . io . InputStream ;   public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; TaskB solver = new TaskB ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } }   class TaskB {   private double [ ] [ ] [ ] dp ; private int n ; private int k ; private int [ ] loyalty ; private int [ ] level ; double [ ] P ; private int a ;   public void solve ( int testNumber , InputReader in , PrintWriter out ) { n = in . nextInt ( ) ; k = in . nextInt ( ) ; a = in . nextInt ( ) ; level = new int [ n ] ; loyalty = new int [ n ] ; for ( int i = 0 ; i < n ; ++ i ) { level [ i ] = in . nextInt ( ) ; loyalty [ i ] = in . nextInt ( ) ; }   P = new double [ 1 << n ] ; for ( int mask = 0 ; mask < ( 1 << n ) ; ++ mask ) { if ( Integer . bitCount ( mask ) * 2 > n ) { P [ mask ] = 1. ; } else { double sumB = 0 ; for ( int i = 0 ; i < n ; ++ i ) { if ( ! BitUtils . checkBit ( mask , i ) ) { sumB += level [ i ] ; } } P [ mask ] = ( double ) a \/ ( sumB + a ) ; } }   dp = new double [ 1 << n ] [ n + 1 ] [ k + 1 ] ; ArrayUtils . fill ( dp , - 1 ) ; newLoyalty = new int [ n ] ;"],"bleu":0.17225589517168058,"rouge_l":0.2681668114682884}
{"id":324,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ; import java . io . * ;   public class Main { public static void main ( String [ ] args ) throws IOException { Scanner sc = new Scanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; int n = sc . nextInt ( ) ; Point c = new Point ( sc . nextInt ( ) , sc . nextInt ( ) ) ; Point [ ] arr = new Point [ n ] ; double INF = 1e16 ; double minr = INF , maxr = - INF ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = new Point ( sc . nextInt ( ) , sc . nextInt ( ) ) ; maxr = Math . max ( maxr , arr [ i ] . dist ( c ) ) ; } for ( int i = 0 ; i < n ; i ++ ) minr = Math . min ( minr , Point . distToLineSegment ( c , arr [ i ] , arr [ ( i + 1 ) % n ] ) ) ; out . println ( Math . PI * ( maxr * maxr - minr * minr ) ) ; out . close ( ) ; }   static class Vector {   double x , y ;   Vector ( double a , double b ) { x = a ; y = b ; }   Vector ( Point a , Point b ) { this ( b . x - a . x , b . y - a . y ) ; }   Vector scale ( double s ) { return new Vector ( x * s , y * s ) ; }","import java . util . * ;   public class Solution { static double minDistance ( pair A , pair B , pair E ) {","import java . awt . geom . Line2D ; import java . awt . geom . Point2D ; import java . util . Scanner ;   public class _614C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; final double INF = 1e18 ; int n = sc . nextInt ( ) ; double max , min , ans ; Point2D . Double P = new Point2D . Double ( sc . nextDouble ( ) , sc . nextDouble ( ) ) ; Point2D . Double points [ ] = new Point2D . Double [ n ] ; max = - INF ; min = INF ; for ( int i = 0 ; i < n ; i ++ ) points [ i ] = new Point2D . Double ( sc . nextDouble ( ) , sc . nextDouble ( ) ) ; for ( int i = 0 ; i < n ; i ++ ) { max = Math . max ( max , points [ i ] . distanceSq ( P ) ) ; min = Math . min ( min , ( new Line2D . Double ( points [ i ] , points [ ( i + 1 ) % n ] ) ) . ptSegDistSq ( ( P ) ) ) ; } ans = Math . PI * ( max - min ) ; System . out . println ( ans ) ; } }"],"bleu":0.35610998072989614,"rouge_l":0.5331038135593221}
{"id":325,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ;   public class Main { public static void main ( String [ ] args ) { Scanner stdin = new Scanner ( System . in ) ; int N = stdin . nextInt ( ) ; int K = stdin . nextInt ( ) ; int [ ] arr = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { arr [ i ] = stdin . nextInt ( ) ; } Arrays . sort ( arr ) ; int k = arr [ N - K ] ; int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( arr [ i ] >= k && arr [ i ] > 0 ) { ans = N - i ; break ; } } System . out . println ( ans ) ; } }","import java . util . * ;   public class Test2 { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int score [ ] = new int [ 50 ] ; int count = 0 ; int required = 0 ; int promoted = 0 ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; if ( k > n ) { System . exit ( 0 ) ; } for ( int i = 0 ; i < n ; i ++ ) { score [ i ] = sc . nextInt ( ) ; if ( score [ i ] == 0 ) { count ++ ; } } if ( count == n ) { promoted = 0 ; } else { required = score [ k - 1 ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( score [ i ] >= required && score [ i ] > 0 ) { promoted ++ ; } } } System . out . println ( promoted ) ; } }","import java . util . Scanner ; public class cForces158A { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; int [ ] con = new int [ n + 1 ] ; int count = 0 ; int k = scan . nextInt ( ) ; for ( int i = 1 ; i <= n ; i ++ ) { con [ i ] = scan . nextInt ( ) ; } for ( int i = 1 ; i <= n ; i ++ ) { if ( con [ i ] >= con [ k ] && con [ i ] > 0 ) count ++ ; } System . out . println ( count ) ; } }","import java . util . Scanner ;   public class T158A { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int k = scanner . nextInt ( ) ; int [ ] data = new int [ n + 1 ] ; int minScore = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { int score = scanner . nextInt ( ) ; data [ i ] = score ; if ( i == k ) minScore = score ; } int cnt = 0 ; for ( int j = 1 ; j <= n ; j ++ ) { if ( data [ j ] >= minScore && data [ j ] > 0 ) cnt ++ ; } System . out . println ( cnt ) ; } }"],"bleu":0.046220653863716085,"rouge_l":0.19712966680048172}
{"id":326,"predictions":["import java . util . * ; import java . lang . * ; import java . io . * ; public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) {"],"references":["import java . util . * ; public class contest14 { static Scanner scn = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { int n = scn . nextInt ( ) ; int A = scn . nextInt ( ) ; int B = scn . nextInt ( ) ; Integer [ ] arr = new Integer [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = scn . nextInt ( ) ; if ( A == B ) { System . out . println ( n - 1 ) ; return ; } int s1 = arr [ 0 ] ; Arrays . sort ( arr , Collections . reverseOrder ( ) ) ; int S = 0 ; for ( int val : arr ) S += val ; boolean is_s1 = false ; int block = 0 ; if ( ( s1 * A ) \/ S >= B ) { System . out . println ( block ) ; return ; } for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == s1 && ! is_s1 ) { is_s1 = true ; continue ; } S = S - arr [ i ] ; block ++ ; if ( ( s1 * A ) \/ S >= B ) { System . out . println ( block ) ; return ; } } } }  ","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ;   public class Codeforces {   private static final Scanner sc = new Scanner ( System . in ) ; private static final BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; private static final long MOD = ( long ) ( 1e9 + 7 ) ;   public static int [ ] LPS ( String p ) { int [ ] lps = new int [ p . length ( ) ] ;   int i = 1 ; int j = 0 ; while ( i < p . length ( ) ) { if ( p . charAt ( i ) == p . charAt ( j ) ) { lps [ i ] = j + 1 ; i ++ ; j ++ ; } else { if ( j == 0 ) { lps [ i ] = 0 ; i ++ ; } else { j = lps [ j - 1 ] ; } } } return lps ; }   public static void KMP ( String text , String pattern ) { int [ ] lps = LPS ( pattern ) ; int i = 0 ; int j = 0 ; ArrayList < Integer > matches = new ArrayList < > ( ) ; while ( i < text . length ( ) ) { if ( text . charAt ( i ) == pattern . charAt ( j ) ) { i ++ ; j ++ ; } else { if ( j != 0 ) { j = lps [ j - 1 ] ; } else { i ++ ; } } if ( j == pattern . length ( ) ) { matches . add ( i - j ) ; j = lps [ j - 1 ] ; } } for ( int x : matches ) { System . out . println ( \" Match ▁ at ▁ : ▁ \" + x ) ; } }   private static class SegmentTree { private long [ ] st ; private int size ; private int n ; private long [ ] a ; SegmentTree ( long [ ] a , int n ) { this . size = 4 * n ; this . n = n ; this . a = a ; st = new long [ size ] ;","import java . util . Arrays ; import java . util . Scanner ;   public class WaterSystem { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) ; int a = in . nextInt ( ) ; int b = in . nextInt ( ) ; int sz [ ] = new int [ n ] ; int k = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sz [ i ] = in . nextInt ( ) ; k += sz [ i ] ; } Arrays . sort ( sz , 1 , n ) ; for ( int j = n - 1 ; j >= 0 ; -- j ) { if ( sz [ 0 ] * a \/ k >= b ) { System . out . println ( n - 1 - j ) ; return ; } k = k - sz [ j ] ; } } }  ","import java . lang . * ; import java . util . * ;   public class Abhishek {   public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int [ ] s = new int [ n ] ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { s [ i ] = sc . nextInt ( ) ; sum += s [ i ] ; } int f = s [ 0 ] ; s [ 0 ] = 0 ; Arrays . sort ( s ) ; int count = 0 ;   while ( ( float ) ( ( f * a ) \/ sum ) < b ) { n -- ; sum = sum - s [ n ] ; count ++ ;   } System . out . println ( count ) ;   }   }"],"bleu":0.009823739179175223,"rouge_l":0.16492854383932024}
{"id":327,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . ArrayList ; import java . util . Collections ; import java . util . HashMap ; import java . util . StringTokenizer ;   public class B { public static void main ( String [ ] args ) { FastScanner fs = new FastScanner ( ) ; int t = fs . nextInt ( ) ; while ( t -- > 0 ) { int n = fs . nextInt ( ) ; ArrayList < Integer > a = new ArrayList < > ( ) ; int ans = 0 , one = 0 , two = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int b = fs . nextInt ( ) ; if ( b % 3 == 0 ) ans ++ ; else if ( b % 3 == 1 ) { one ++ ; } else two ++ ; } int e = Math . min ( one , two ) ; one -= e ; two -= e ; ans += e + ( one ) \/ 3 + ( two ) \/ 3 ; System . out . println ( ans ) ; } } static class FastScanner { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( \" \" ) ; String next ( ) { while ( ! st . hasMoreTokens ( ) ) try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } int [ ] readArray ( int n ) { int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = nextInt ( ) ; return a ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } } }","import java . util . ArrayList ; import java . util . Scanner ;   public class MergeIt { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; ArrayList < Long > list = new ArrayList < Long > ( ) ; long sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { Long temp = sc . nextLong ( ) ; if ( temp % 3 == 0 ) { list . add ( temp ) ; } else { list . add ( temp % 3 ) ; } sum = sum + list . get ( i ) ; }","import java . util . Scanner ;   public class B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int arr [ ] = new int [ n ] ; int count1 = 0 , count2 = 0 , count3 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; if ( arr [ i ] % 3 == 0 ) { count1 ++ ; } else if ( arr [ i ] % 3 == 1 ) { count2 ++ ; } else { count3 ++ ; } } int ans = count1 ; int temp ; if ( count2 > count3 ) { temp = count2 ; count2 = count3 ; count3 = temp ; } ans += count2 ; count3 = count3 - count2 ; ans += count3 \/ 3 ; System . out . println ( ans ) ; } } }","import java . util . * ;   public class MergeIt_1176B {   public static void main ( String [ ] args ) {","import java . util . * ; public class MyClass { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; int [ ] b = new int [ 3 ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; b [ arr [ i ] % 3 ] ++ ; } int ans = b [ 0 ] ; int min = Math . min ( b [ 1 ] , b [ 2 ] ) ; ans = ans + min ; b [ 1 ] = b [ 1 ] - min ; b [ 2 ] = b [ 2 ] - min ; System . out . println ( ans + ( b [ 1 ] + b [ 2 ] ) \/ 3 ) ; } } }"],"bleu":0.6936319083813028,"rouge_l":0.6295388651111417}
{"id":328,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . io . BufferedReader ; import java . io . File ; import java . io . FileWriter ; import java . io . IOException ; import java . io . InputStreamReader ; import java . math . BigInteger ; import java . util . * ;   import javafx . util . Pair ;   public class Main {   public static void main ( String args [ ] ) { FastScanner input = new FastScanner ( ) ; int n = input . nextInt ( ) ; long price [ ] = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { price [ i ] = input . nextLong ( ) ; } int front [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { front [ i ] = input . nextInt ( ) ; } int back [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { back [ i ] = input . nextInt ( ) ; } HashMap < Integer , TreeMap < Long , Integer > > map = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( ! map . containsKey ( front [ i ] ) ) { TreeMap < Long , Integer > lol = new TreeMap < > ( ) ; map . put ( front [ i ] , lol ) ; } if ( front [ i ] != back [ i ] ) map . get ( front [ i ] ) . put ( price [ i ] , back [ i ] ) ; if ( ! map . containsKey ( back [ i ] ) ) { TreeMap < Long , Integer > lol = new TreeMap < > ( ) ; map . put ( back [ i ] , lol ) ; } if ( front [ i ] == back [ i ] ) map . get ( back [ i ] ) . put ( price [ i ] , 0 ) ; else map . get ( back [ i ] ) . put ( price [ i ] , front [ i ] ) ; }"],"bleu":0.001084881140088894,"rouge_l":0.16762335124572544}
{"id":329,"predictions":["import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; }"],"references":["import java . util . * ;   public class P3 { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; Map < String , Integer > map = new HashMap ( ) ; int c = 0 ; while ( t -- > 0 ) { String breed = sc . next ( ) ; String color = sc . next ( ) ; String m = breed + ' . ' + color ; if ( ! map . containsKey ( m ) ) { map . put ( m , 1 ) ; c ++ ; } } System . out . println ( c ) ; } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . HashSet ; import java . util . Stack ; import java . util . StringTokenizer ;     public class Main {    static class FastReader { BufferedReader br ; StringTokenizer st ;   public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; }   String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   long nextLong ( ) { return Long . parseLong ( next ( ) ) ; }   double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; }   String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } }    public static void main ( String [ ] args ) { PrintWriter pw = new PrintWriter ( System . out ) ; FastReader sc = new FastReader ( ) ; int t = sc . nextInt ( ) ; HashSet < String > hs = new HashSet < String > ( ) ; while ( t -- > 0 ) { String in = sc . nextLine ( ) ; hs . add ( in ) ; } System . out . println ( hs . size ( ) ) ; } }","import java . io . * ; import java . util . * ;   public class MAIN {   private static BufferedReader reader = null ; private static BufferedWriter writer = null ;   public static void main ( String [ ] args ) throws Exception {   reader = new BufferedReader ( new InputStreamReader ( System . in ) ) ;   Map < String , Integer > map = new HashMap < > ( 0 ) ; int n = Integer . parseInt ( reader . readLine ( ) ) ; for ( int i = 0 ; i < n ; ++ i ) { String s = reader . readLine ( ) ; Integer c = map . get ( s ) ; if ( c == null ) { map . put ( s , 1 ) ; } else {","import java . util . HashSet ; import java . util . Scanner ;   public class problem112 {   public static void main ( String [ ] args ) {"],"bleu":0.651714825312993,"rouge_l":0.7760590697853056}
{"id":330,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . Scanner ;   public class SentimentReplace { public static void main ( String [ ] args ) {   Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) , k = in . nextInt ( ) ;   if ( k == 1 ) { int i , a [ ] = new int [ n ] ; String o = \" No \" ; for ( i = 0 ; i < n ; i ++ ) a [ i ] = in . nextInt ( ) ; int b = in . nextInt ( ) ;   for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] == 0 ) a [ i ] = b ; if ( i > 0 ) if ( a [ i ] <= a [ i - 1 ] ) o = \" Yes \" ; } System . out . println ( o ) ; } else { System . out . println ( \" Yes \" ) ; } in . close ( ) ; } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . * ; import java . util . stream . IntStream ;   public class Main { public static void main ( String [ ] args ) throws IOException { Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; int k = input . nextInt ( ) ; LinkedList < Integer > a = new LinkedList < > ( ) ; LinkedList < Integer > b = new LinkedList < > ( ) , index = new LinkedList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int value = input . nextInt ( ) ; if ( value != 0 ) a . add ( value ) ; else index . add ( i ) ; } for ( int i = 0 ; i < k ; i ++ ) { b . add ( input . nextInt ( ) ) ; } boolean sorted = true ; int zeroIndex = 0 ; for ( int i = 0 ; i < n - k - 1 ; i ++ ) { if ( a . get ( i ) > a . get ( i + 1 ) ) { sorted = false ; break ; } } if ( sorted && k == 1 ) { if ( index . get ( 0 ) - 1 >= 0 && a . get ( index . get ( 0 ) - 1 ) > b . get ( 0 ) ) { System . out . println ( \" YES \" ) ; return ;   } if ( index . get ( 0 ) < a . size ( ) && a . get ( index . get ( 0 ) ) < b . get ( 0 ) ) { System . out . println ( \" YES \" ) ; return ;   } System . out . println ( \" NO \" ) ; return ; } else { System . out . println ( \" YES \" ) ; } } }","import java . lang . * ; import java . util . * ; import java . io . * ;   public class pblm2 { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] ar = new int [ n ] ; List < Integer > bl = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) ar [ i ] = sc . nextInt ( ) ; for ( int i = 0 ; i < m ; i ++ ) bl . add ( sc . nextInt ( ) ) ; Collections . sort ( bl , Collections . reverseOrder ( ) ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( bl . size ( ) == 0 ) break ; if ( ar [ i ] == 0 ) { if ( i == 0 ) { ar [ i ] = bl . get ( 0 ) ; bl . remove ( 0 ) ; } else { int pos = - 1 ; for ( int j = 0 ; j < bl . size ( ) ; j ++ ) { if ( bl . get ( j ) < ar [ i - 1 ] ) { pos = j ; break ; } } pos = ( pos == - 1 ) ? 0 : pos ; ar [ i ] = bl . get ( pos ) ; bl . remove ( pos ) ; } } } int pp = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( ar [ i ] > ar [ i + 1 ] ) { pp = 1 ; break ; } }","import java . util . Scanner ;   public class Anabandonedsentimentfrompast {   public static void main ( String args [ ] ) { Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) ; int k = in . nextInt ( ) ; int [ ] ar = new int [ n ] ; int [ ] b = new int [ k ] ; int i ; for ( i = 0 ; i < n ; i ++ ) { ar [ i ] = in . nextInt ( ) ; } for ( i = 0 ; i < k ; i ++ ) { b [ i ] = in . nextInt ( ) ; } if ( k > 1 ) { System . out . println ( \" Yes \" ) ; } else { int z = - 1 ; for ( i = 0 ; i < n ; i ++ ) { if ( ar [ i ] == 0 ) { ar [ i ] = b [ 0 ] ; } } boolean yes = false ; for ( i = 0 ; i < n - 1 ; i ++ ) { if ( ar [ i ] > ar [ i + 1 ] ) { yes = true ; break ; } } if ( yes == false ) System . out . println ( \" No \" ) ; else System . out . println ( \" Yes \" ) ; } } }","import java . util . * ; public class Solution { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; int k = scan . nextInt ( ) ; int [ ] a = new int [ n ] ; int i ; for ( i = 0 ; i < n ; i ++ ) { a [ i ] = scan . nextInt ( ) ; } List < Integer > b = new ArrayList < > ( ) ; for ( i = 0 ; i < k ; i ++ ) { b . add ( scan . nextInt ( ) ) ; } Collections . sort ( b ) ; int aInd = 0 ; for ( i = k - 1 ; i >= 0 ; i -- ) { while ( aInd < n && a [ aInd ] != 0 ) aInd ++ ; a [ aInd ] = b . get ( i ) ; } String result = \" No \" ; for ( i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] > a [ i + 1 ] ) { result = \" Yes \" ; break ; } } System . out . println ( result ) ; } }"],"bleu":0.04711736021948516,"rouge_l":0.17222792607802875}
{"id":331,"predictions":["import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; } public static long mod = 17352642619633L ; void run ( FastScanner in , PrintWriter out ) {"],"references":["import java . io . * ; import java . util . * ;   public class Main { static class FastReader { BufferedReader br ; StringTokenizer st ;   public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; }   String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   long nextLong ( ) { return Long . parseLong ( next ( ) ) ; }   double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; }   String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } }   public static void main ( String [ ] args ) { FastReader sc = new FastReader ( ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int t = reverse ( m ) ; System . out . println ( t + n ) ;","import java . util . Scanner ;   public class A171 {   public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int a = in . nextInt ( ) ; int b = Integer . parseInt ( new StringBuilder ( in . next ( ) ) . reverse ( ) . toString ( ) ) ; System . out . println ( a + b ) ; }   }","import java . awt . * ; import java . io . * ; import java . util . * ;   public class AA implements Runnable {   public void run ( ) { InputReader sc = new InputReader ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; int i = 0 , j = 0 , k = 0 ; int t = 0 ;","import java . io . * ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . InputMismatchException ;   public class C171A implements Runnable { public static void main ( String [ ] args ) { new Thread ( null , new C171A ( ) , \" Main \" , 1 << 27 ) . start ( ) ; } @ Override public void run ( ) { FastReader fd = new FastReader ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; int first = fd . nextInt ( ) ; int sec = Integer . parseInt ( new StringBuilder ( fd . next ( ) ) . reverse ( ) . toString ( ) ) ; out . println ( first + sec ) ; out . close ( ) ; }  "],"bleu":0.6532213191130911,"rouge_l":0.615692068429238}
{"id":332,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . Scanner ;   public class LuckyTicket {   public static void main ( String [ ] argus ) { Scanner scanner = new Scanner ( System . in ) ; int size = scanner . nextInt ( ) ; String value = scanner . next ( ) ; int domain = size \/ 2 ; boolean res = true ; int sum1 = 0 ; int sum2 = 0 ; for ( int i = 0 ; i < size ; i ++ ) { char myChar = value . charAt ( i ) ; if ( myChar != '4' && myChar != '7' ) { res = false ; break ; } int newMyChar = Integer . parseInt ( myChar + \" \" ) ; if ( i < domain ) { sum1 += newMyChar ; } else { sum2 += newMyChar ; } } if ( res && sum1 == sum2 ) { System . out . println ( \" YES \" ) ; } else { System . out . println ( \" NO \" ) ; } }   }","import java . util . Scanner ;   public class Main {   public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) ; String num = in . next ( ) ; int sum1 = 0 ; int sum2 = 0 ; for ( int i = 0 , j = n - 1 ; i < n \/ 2 ; i ++ , j -- ) { if ( num . charAt ( i ) == '4' || num . charAt ( i ) == '7' ) sum1 += num . charAt ( i ) ; if ( num . charAt ( j ) == '4' || num . charAt ( j ) == '7' ) sum2 += num . charAt ( j ) ; else sum1 -= 1 ; } if ( sum1 == sum2 ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ; }   }  ","import java . io . * ; public class Main { public static void main ( String args [ ] ) throws IOException { BufferedReader in = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int n ; String cadena ; n = Integer . parseInt ( in . readLine ( ) ) ; cadena = in . readLine ( ) ; int sum1 = 0 ; int sum2 = 0 ; int i ; if ( n % 2 == 0 && n == cadena . length ( ) ) { for ( i = 0 ; i < cadena . length ( ) \/ 2 ; i ++ ) { if ( cadena . charAt ( i ) != '4' && cadena . charAt ( i ) != '7' ) { System . out . println ( \" NO \" ) ; return ; } else { sum1 += Integer . parseInt ( \" \" + cadena . charAt ( i ) ) ; } if ( cadena . charAt ( n - i - 1 ) != '4' && cadena . charAt ( n - i - 1 ) != '7' ) { System . out . println ( \" NO \" ) ; return ; } else { sum2 += Integer . parseInt ( \" \" + cadena . charAt ( n - i - 1 ) ) ; } } } else { System . out . println ( \" NO \" ) ; return ; } if ( sum1 == sum2 ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ; } }","import java . util . * ;   public class Main { public static void main ( String [ ] args ) {   Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String lol = sc . next ( ) ; String first = lol . substring ( 0 , lol . length ( ) \/ 2 ) ; String second = lol . substring ( ( lol . length ( ) \/ 2 ) ) ; boolean flag = true ; for ( int i = 0 ; i < lol . length ( ) ; i ++ ) { if ( ! ( lol . charAt ( i ) == '4' | lol . charAt ( i ) == '7' ) ) { flag = false ; } } int firstsum = 0 ; int secondsum = 0 ; for ( int i = 0 ; i < first . length ( ) ; i ++ ) { firstsum += ( Integer . parseInt ( first . charAt ( i ) + \" \" ) ) ; secondsum += ( Integer . parseInt ( second . charAt ( i ) + \" \" ) ) ; } if ( flag && firstsum == secondsum ) { System . out . println ( \" YES \" ) ; } else { System . out . println ( \" NO \" ) ; } } }"],"bleu":0.030406358832581304,"rouge_l":0.17444907797077053}
{"id":333,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ; import java . io . * ; public class problem2 { public static void primeFactors ( int n , ArrayList < Integer > arr ) {","import java . util . Arrays ; import java . util . Scanner ;   public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ;   int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < a . length ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } System . out . println ( solve ( a ) ) ;   sc . close ( ) ; }   static String solve ( int [ ] a ) { int remain = Arrays . stream ( a ) . sum ( ) ; int index = 0 ; int offset = 1 ; StringBuilder result = new StringBuilder ( ) ; while ( remain != 0 ) { if ( a [ index ] != 0 ) { a [ index ] -- ; remain -- ; result . append ( ' P ' ) ; }   index += offset ; if ( index == - 1 || index == a . length ) { offset *= - 1 ; index += offset * 2 ; } result . append ( ( offset == 1 ) ? ' R ' : ' L ' ) ; }   return result . toString ( ) ; } }","import java . util . * ; import java . util . Scanner ; import java . io . * ; import javax . lang . model . util . ElementScanner6 ; import static java . lang . System . out ; import java . util . Stack ; import java . util . Queue ; import java . util . LinkedList ;   public class B379 {   public static void main ( String args [ ] ) {   FastReader in = new FastReader ( ) ; PrintWriter pr = new PrintWriter ( new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ) ; int tc = 1 ;"],"bleu":0.3797055896682351,"rouge_l":0.5812260652847852}
{"id":334,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; out . println ( n + 1 ) ; out . close ( ) ; } static int l_min ( int [ ] a ) { Arrays . sort ( a ) ; return a [ 0 ] ; } public static PrintWriter out ; public static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . util . Scanner ;   public class problem54 {   public static void main ( String [ ] args ) {","import java . util . Scanner ;   public class Codeforces_932A { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; char [ ] s = in . next ( ) . toCharArray ( ) ; for ( int i = 0 ; i < s . length ; i ++ ) { System . out . printf ( \" % c \" , s [ i ] ) ; } for ( int i = s . length - 1 ; i >= 0 ; i -- ) { System . out . printf ( \" % c \" , s [ i ] ) ; } } }","import java . io . FileInputStream ; import java . io . FileNotFoundException ; import java . io . IOException ; import java . io . PrintWriter ; import java . util . Arrays ; import java . util . Collection ; import java . util . List ; import java . util . Scanner ; import java . util . function . Function ; import java . util . stream . Collectors ; public class _p000932A { static public void main ( final String [ ] args ) throws IOException { p000932A . _main ( args ) ; }","import java . util . Scanner ;   public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; String str = scan . nextLine ( ) ;   StringBuilder sb = new StringBuilder ( str ) ; String rev = sb . reverse ( ) . toString ( ) ;   System . out . println ( str + rev ) ; } }","import java . util . * ; import java . io . * ; import java . math . * ;   public class Main   { static FastReader sc = new FastReader ( ) ; static long dp [ ] [ ] [ ] ; static int mod = 1000000007 ; public static void main ( String [ ] args ) throws IOException {"],"bleu":0.20331019520715193,"rouge_l":0.4032340079324722}
{"id":335,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter pw = new PrintWriter ( System . out ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int N = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ M ] ; for ( int i = 0 ; i < M ; i ++ ) { st = new StringTokenizer ( br . readLine ( ) ) ; a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int [ ] b = new int [ M ] ; for ( int i = 0 ; i < M ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < M ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int ans = 0 ; for ( int i = 0 ; i < M ; i ++ ) { for ( int j = 0 ; j < M ; j ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { if ( a [ i ] > b [ j ] ) { ans ++ ; } } } } pw . println ( ans ) ; pw . close ( ) ; } }"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . math . BigInteger ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader bf = new BufferedReader ( new InputStreamReader ( System . in ) ) ; BigInteger n = new BigInteger ( bf . readLine ( ) . trim ( ) ) ; int in = n . intValue ( ) , L = 0 ; while ( ( in & 1 ) == 0 ) { in >>= 1 ; L ++ ; } if ( in == 1 ) { System . out . printf ( \" % d \/ 1 \\n \" , L ) ; return ; } n = new BigInteger ( String . valueOf ( in ) ) ; BigInteger s = BigInteger . ONE , t = BigInteger . ONE , two = new BigInteger ( \"2\" ) ; int m = 0 ; for ( int i = 0 ; i < in ; i ++ ) { s = s . multiply ( two ) ; t = t . multiply ( two ) . mod ( n ) ; if ( t . equals ( BigInteger . ONE ) ) { m = i + 1 ; break ; } } t = s . multiply ( n ) ; BigInteger r = s , ans = BigInteger . ZERO ; int i = L ; while ( r . compareTo ( BigInteger . ONE ) > 0 ) { i ++ ; t = t . divide ( two ) ; if ( r . compareTo ( t ) > 0 ) { r = r . subtract ( t ) ; ans = ans . add ( t . multiply ( new BigInteger ( String . valueOf ( i ) ) ) ) ; } } ans = ans . add ( new BigInteger ( String . valueOf ( m ) ) ) ; s = s . subtract ( BigInteger . ONE ) ; BigInteger d = ans . gcd ( s ) ; System . out . printf ( \" % s \/ % s \\n \" , ans . divide ( d ) , s . divide ( d ) ) ; } }"],"bleu":0.22247634029756377,"rouge_l":0.40211640211640215}
{"id":336,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["  import java . lang . reflect . Array ; import java . text . CollationElementIterator ; import java . util . * ; import java . util . Map . Entry ; import java . io . * ; import java . lang . Math . * ; import java . math . BigInteger ;   import static java . lang . System . * ; import static java . util . Arrays . fill ; import static java . lang . Math . log ; import static java . lang . Math . abs ; import static java . lang . Math . pow ; import static java . lang . Math . sqrt ; import static java . lang . Math . floor ; import static java . lang . Math . ceil ; import static java . lang . Math . sin ; import static java . lang . Math . cos ; import static java . lang . Math . tan ; import static java . util . Arrays . spliterator ; public class ContestMain implements Runnable { private static Reader in = new Reader ( ) ; private static StringBuilder ans = new StringBuilder ( ) ; private static long MOD = 998244353 ; private static final int N = ( int ) ( 2e5 + 7 ) ;","  import java . lang . reflect . Array ; import java . text . CollationElementIterator ; import java . util . * ; import java . util . Map . Entry ; import java . io . * ; import java . lang . Math . * ; import java . math . BigInteger ;   import static java . lang . System . * ; import static java . util . Arrays . fill ; import static java . lang . Math . log ; import static java . lang . Math . abs ; import static java . lang . Math . pow ; import static java . lang . Math . sqrt ; import static java . lang . Math . floor ; import static java . lang . Math . ceil ; import static java . lang . Math . sin ; import static java . lang . Math . cos ; import static java . lang . Math . tan ; import static java . util . Arrays . spliterator ; public class ContestMain implements Runnable { private static Reader in = new Reader ( ) ; private static StringBuilder ans = new StringBuilder ( ) ; private static long MOD = 998244353 ; private static final int N = ( int ) ( 2e5 + 7 ) ;","  import java . util . * ;    public class Main { static Scanner input = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { long left [ ] = new long [ 100000 ] ; long right [ ] = new long [ 100000 ] ; long sum = 0 ; int n = input . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int x = input . nextInt ( ) ; int y = input . nextInt ( ) ; sum += ( left [ x + y ] ++ ) + ( right [ y - x + 10000 ] ++ ) ; } System . out . println ( sum ) ;   }           }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . ArrayList ; import java . util . StringTokenizer ; import java . util . * ;   public class CF621B { public static void main ( String [ ] args ) { FastReader input = new FastReader ( ) ; PrintWriter pw = new PrintWriter ( System . out ) ;   boolean [ ] [ ] matrix = new boolean [ 1000 + 1 ] [ 1000 + 1 ] ;   int n = input . nextInt ( ) ;   for ( int i = 0 ; i < n ; i ++ ) { int x = input . nextInt ( ) ; int y = input . nextInt ( ) ;   matrix [ x ] [ y ] = true ; }   ArrayList < Integer > list = new ArrayList < Integer > ( ) ;   for ( int i = 1 ; i <= 1000 ; i ++ ) { int p = 1 ; int q = i ; int count = 0 ; while ( true ) { if ( matrix [ p ] [ q ] ) { count ++ ; } p ++ ; q ++ ; if ( p > 1000 || q > 1000 ) break ;","import java . io . * ; import java . util . * ; public class Asd { static PrintWriter w = new PrintWriter ( System . out ) ; static FastScanner s = new FastScanner ( ) ; public static void main ( String [ ] args ) { int t = 1 ;"],"bleu":0.6762425889021807,"rouge_l":0.5949335022165927}
{"id":337,"predictions":["import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ;   public class NewClass {   public static void main ( String [ ] args ) throws IOException { BufferedReader reader = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int len = Integer . parseInt ( reader . readLine ( ) ) ; String str = reader . readLine ( ) ; int conuterOnces = 0 , counterZeros = 0 ;  ","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ;   public class NewClass {   public static void main ( String [ ] args ) throws IOException { BufferedReader reader = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int len = Integer . parseInt ( reader . readLine ( ) ) ; String str = reader . readLine ( ) ; int conuterOnces = 0 , counterZeros = 0 ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { if ( str . charAt ( i ) == '1' ) { conuterOnces ++ ; } else { counterZeros ++ ; } } System . out . println ( Math . abs ( conuterOnces - counterZeros ) ) ;   } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ;   public class test {   public static void main ( String [ ] args ) throws IOException {   BufferedReader reader = new BufferedReader ( new InputStreamReader ( System . in ) ) ;   int len = Integer . parseInt ( reader . readLine ( ) ) ; String str = reader . readLine ( ) ; int countZeros = 0 , countOnces = 0 ;  ","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ;   public class test {   public static void main ( String [ ] args ) throws IOException {   BufferedReader reader = new BufferedReader ( new InputStreamReader ( System . in ) ) ;   int len = Integer . parseInt ( reader . readLine ( ) ) ; String str = reader . readLine ( ) ; int countZeros = 0 , countOnces = 0 ;   for ( int i = 0 ; i < str . length ( ) ; i ++ ) { if ( str . charAt ( i ) == '1' ) { countOnces ++ ; } else { countZeros ++ ; } } int result = Math . abs ( countZeros - countOnces ) ; System . out . println ( result ) ; } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ;   public class NewClass {   public static void main ( String [ ] args ) throws IOException { BufferedReader reader = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int len = Integer . parseInt ( reader . readLine ( ) ) ; String str = reader . readLine ( ) ; int conuterOnces = 0 ;  "],"bleu":0.2124111451490198,"rouge_l":0.36662043458159965}
{"id":338,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . io . * ; import java . util . Arrays ; import java . util . Iterator ; import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) throws IOException { PrintWriter out = new PrintWriter ( new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ) ; StreamTokenizer sc = new StreamTokenizer ( new BufferedReader ( new InputStreamReader ( System . in ) ) ) ;","import java . io . * ; public class Main { public static void main ( String [ ] args ) throws IOException {","import java . util . * ; public class _1311B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; HashSet < Integer > set = new HashSet < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = sc . nextInt ( ) ; for ( int i = 0 ; i < m ; i ++ ) set . add ( sc . nextInt ( ) - 1 ) ;   for ( int i = 0 ; i < n - 1 ; i ++ ) { for ( int j = 0 ; j < n - 1 ; j ++ ) { if ( arr [ j ] > arr [ j + 1 ] && set . contains ( j ) ) { int x = arr [ j ] ; arr [ j ] = arr [ j + 1 ] ; arr [ j + 1 ] = x ; } } } boolean check = true ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( arr [ i ] > arr [ i + 1 ] ) { check = false ; } } System . out . println ( check ? \" YES \" : \" NO \" ) ; } } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import static java . lang . Math . * ; import static java . lang . System . out ; import java . util . * ; import java . io . PrintStream ; import java . io . PrintWriter ; public class A { static final int mod = 1000000007 ; static final long temp = 998244353 ; static final long MOD = 1000000007 ; static final long M = ( long ) 1e9 + 7 ; static class Pair implements Comparable < Pair > { long first , second ; public Pair ( long aa , long bb ) { first = aa ; second = bb ; } public int compareTo ( Pair o ) { if ( this . second < o . second ) return - 1 ; if ( this . second > o . second ) return + 1 ; return ( int ) ( this . first - o . first ) ; } } static class Tuple implements Comparable < Tuple > { long first , second , third ; public Tuple ( long first , long second , long third ) { this . first = first ; this . second = second ; this . third = third ; } public int compareTo ( Tuple o ) { return ( int ) ( o . third - this . third ) ; } } public static class DSU { int [ ] parent ; int [ ] rank ;"],"bleu":0.639977833310484,"rouge_l":0.6251751927119832}
{"id":339,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ; import java . io . * ; public class helloworld { static long fact [ ] ; static long max ; static class Reader { final private int BUFFER_SIZE = 1 << 16 ; private DataInputStream din ; private byte [ ] buffer ; private int bufferPointer , bytesRead ; public Reader ( ) { din = new DataInputStream ( System . in ) ; buffer = new byte [ BUFFER_SIZE ] ; bufferPointer = bytesRead = 0 ; } public Reader ( String file_name ) throws IOException { din = new DataInputStream ( new FileInputStream ( file_name ) ) ; buffer = new byte [ BUFFER_SIZE ] ; bufferPointer = bytesRead = 0 ; } public String readLine ( ) throws IOException { byte [ ] buf = new byte [ 64 ] ;"],"bleu":0.06652292894337633,"rouge_l":0.2622850122850123}
{"id":340,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . io . * ; import java . util . * ;   public class task1 { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; String str = br . readLine ( ) . trim ( ) ; int k = Integer . parseInt ( br . readLine ( ) . trim ( ) ) ; int len = str . length ( ) ; int st = 0 ; int ct = 0 ; if ( len % k != 0 ) { System . out . println ( \" NO \" ) ; return ; } k = len \/ k ; while ( st < len ) {","import java . io . * ; import java . util . * ;   public class Main { static class FastReader { BufferedReader br ; StringTokenizer st ;   public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; }   String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   long nextLong ( ) { return Long . parseLong ( next ( ) ) ; }   double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; }   String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; }   int [ ] nextArr ( int n ) { int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = nextInt ( ) ; return a ; } }   public static void main ( String [ ] args ) throws java . lang . Exception { FastReader sc = new FastReader ( ) ; String s = sc . nextLine ( ) ; int k = sc . nextInt ( ) ; int len = s . length ( ) \/ k , sol = 1 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . length ( ) % k != 0 || s . charAt ( i ) != s . charAt ( ( i \/ len ) * len + len - 1 - ( i % len ) ) ) { sol = 0 ; break ; } } if ( sol == 1 ) { System . out . println ( \" YES \" ) ; } else { System . out . println ( \" NO \" ) ; } } }","  import java . math . BigInteger ; import java . util . * ;    public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; String s = input . next ( ) ; int k = input . nextInt ( ) ; if ( s . length ( ) % k != 0 ) System . out . println ( \" NO \" ) ; else { int i = 0 ; int palindromeSize = s . length ( ) \/ k ; int j = 0 ; while ( i + palindromeSize <= s . length ( ) ) { j = i + palindromeSize - 1 ; int j1 = j ; while ( i < j ) { if ( s . charAt ( i ) != s . charAt ( j ) ) { System . out . println ( \" NO \" ) ; return ; } i ++ ; j -- ; } i = j1 + 1 ; } System . out . println ( \" YES \" ) ; } }   }  ","import java . io . * ; import java . util . * ; import java . math . * ;   public class Main { public static void main ( String [ ] args ) throws java . lang . Exception {"],"bleu":0.3741875327530242,"rouge_l":0.5423878884621139}
{"id":341,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . io . * ; import java . lang . * ; import java . util . * ;   public class Training3_C { public static void main ( String [ ] args ) throws IOException { StringTokenizer st ; BufferedReader f = new BufferedReader ( new InputStreamReader ( System . in ) ) ; st = new StringTokenizer ( f . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int m = Integer . parseInt ( st . nextToken ( ) ) ; int ta = Integer . parseInt ( st . nextToken ( ) ) ; int tb = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; long [ ] arr = new long [ n ] ; long [ ] arr1 = new long [ m ] ; st = new StringTokenizer ( f . readLine ( ) ) ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = Long . parseLong ( st . nextToken ( ) ) ; } st = new StringTokenizer ( f . readLine ( ) ) ; for ( int i = 0 ; i < m ; i ++ ) { arr1 [ i ] = Long . parseLong ( st . nextToken ( ) ) ; }   f . close ( ) ; long start = arr [ k - 1 ] + ta ; int end = - 1 ; for ( int i = 0 ; i < m ; i ++ ) { if ( arr1 [ i ] >= start ) { end = i ; } } if ( end == - 1 ) { System . out . println ( - 1 ) ; return ; } long best = - 1 ; for ( int i = k ; i > - 1 ; i -- ) { int index = k ; if ( k >= n ) { int r = k - n ; best = Math . min ( best , arr1 [ r ] + tb ) ; } else { index = Arrays . binarySearch ( arr1 , arr [ i ] + ta ) ; if ( index < 0 ) { index = Math . abs ( index + 1 ) + ( k - i ) ; }","import java . io . File ; import java . util . Scanner ; import java . util . StringTokenizer ;   public class p026 { public static void main ( String args [ ] ) throws Exception { StringTokenizer stok = new StringTokenizer ( new Scanner ( System . in ) . useDelimiter ( \" \\\\ A \" ) . next ( ) ) ; StringBuilder sb = new StringBuilder ( ) ; int n = Integer . parseInt ( stok . nextToken ( ) ) ; int m = Integer . parseInt ( stok . nextToken ( ) ) ; int ta = Integer . parseInt ( stok . nextToken ( ) ) ; int tb = Integer . parseInt ( stok . nextToken ( ) ) ; int k = Integer . parseInt ( stok . nextToken ( ) ) ; int [ ] a = new int [ n ] , b = new int [ m ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = Integer . parseInt ( stok . nextToken ( ) ) ; for ( int i = 0 ; i < m ; i ++ ) b [ i ] = Integer . parseInt ( stok . nextToken ( ) ) ; int id = - 1 ; if ( k < n ) { int kc = k ; while ( kc >= 0 ) { int val = a [ kc ] + ta ; int lo = 0 , hi = m ; while ( lo != hi ) { int md = ( lo + hi ) \/ 2 ; if ( b [ md ] < val ) lo = md + 1 ; else hi = md ; } id = Math . max ( id , lo + k - kc ) ; kc -- ; } } else id = m ; if ( id >= m ) System . out . println ( - 1 ) ; else System . out . println ( ( b [ id ] + tb ) ) ; } }"],"bleu":0.0014528354143761356,"rouge_l":0.14268024215740233}
{"id":342,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; out . println ( a + \" \" + b ) ; } out . close ( ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . io . BufferedReader ; import java . io . BufferedWriter ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . OutputStreamWriter ; import java . util . Arrays ; import java . util . HashSet ; import java . util . Scanner ; import java . util . Set ; import java . util . StringTokenizer ; import java . util . TreeSet ; import javafx . scene . shape . TriangleMesh ;   public class Cf { static class FastReader { BufferedReader br ; StringTokenizer st ; public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } static class BufPrint { final BufferedWriter bw ; public BufPrint ( ) { this . bw = new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ; } public void print ( Object object ) throws IOException { bw . append ( \" \" + object ) ; } public void println ( Object object ) throws IOException { print ( object ) ; bw . append ( \" \\n \" ) ; } public void close ( ) throws IOException { bw . close ( ) ; } }   public static int GCD ( int l , int r ) { int gcd = 1 ; for ( int i = 1 ; i <= l && i <= r ; ++ i ) {","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; import java . util . * ; public class Solution { public static void dfs ( int arr [ ] [ ] , int [ ] v , int n , int h , int r ) { v [ h ] = r ; boolean child = false ; for ( int i = 0 ; i < n ; i ++ ) { if ( v [ i ] == - 1 && arr [ h ] [ i ] == 1 ) { dfs ( arr , v , n , i , r ) ; child = true ; } } if ( child == false ) return ; } public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int t = Integer . parseInt ( br . readLine ( ) ) ; for ( int i = 0 ; i < t ; i ++ ) { int n = Integer . parseInt ( br . readLine ( ) ) ; if ( n < 2 ) { System . out . println ( \"0\" ) ; } else { System . out . println ( n - 2 ) ; } } } } class act { int c ; int p ; int in ; public act ( int x , int y , int z ) { c = x ; p = y ; in = z ; } } class table { int n ; int i ; public table ( int x , int y ) { n = x ; i = y ; } } class Sort implements Comparator < act > {","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; import java . util . * ; public class Solution { public static void dfs ( int arr [ ] [ ] , int [ ] v , int n , int h , int r ) { v [ h ] = r ; boolean child = false ; for ( int i = 0 ; i < n ; i ++ ) { if ( v [ i ] == - 1 && arr [ h ] [ i ] == 1 ) { dfs ( arr , v , n , i , r ) ; child = true ; } } if ( child == false ) return ; } public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int t = Integer . parseInt ( br . readLine ( ) ) ; for ( int i = 0 ; i < t ; i ++ ) { int n = Integer . parseInt ( br . readLine ( ) ) ; if ( n < 2 ) { System . out . println ( \"0\" ) ; } else { System . out . println ( n - 2 ) ; } } } } class act { int c ; int p ; int in ; public act ( int x , int y , int z ) { c = x ; p = y ; in = z ; } } class table { int n ; int i ; public table ( int x , int y ) { n = x ; i = y ; } } class Sort implements Comparator < act > {","import java . util . * ;   public class Solution { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; int t = s . nextInt ( ) ;   for ( int i = 0 ; i < t ; i ++ ) { int n = s . nextInt ( ) ; System . out . println ( ( n > 1 ) ? ( n - 2 ) : 0 ) ; }   s . close ( ) ; } }"],"bleu":0.7956552868930662,"rouge_l":0.6741026621318283}
{"id":343,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException {"],"references":["import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collections ; import java . util . Scanner ; import java . lang . Math ; public class Account { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] sum = new int [ k ] ; int min = Integer . MAX_VALUE , res = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum [ i % k ] += sc . nextInt ( ) ; } for ( int i = 0 ; i < k ; i ++ ) { if ( sum [ i ] < min ) { res = i ; min = sum [ i ] ; } } System . out . println ( res + 1 ) ; } }","import java . util . * ; public class DimaAndToDoList { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = sc . nextInt ( ) ; long b [ ] = new long [ k ] ; for ( int i = 0 ; i < n ; i ++ ) b [ i % k ] += a [ i ] ; long min = Long . MAX_VALUE ; int in = 0 ; for ( int i = 0 ; i < k ; i ++ ) { if ( b [ i ] < min ) { min = b [ i ] ; in = i ; } } System . out . println ( in + 1 ) ; } }","import java . util . * ;   public class Main {   public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n , k ; n = input . nextInt ( ) ; k = input . nextInt ( ) ;   int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = input . nextInt ( ) ;   } int sum [ ] = new int [ k ] ; for ( int i = 0 ; i < n ; i ++ ) {","import java . util . * ; public class B_366B {   public static void main ( String [ ] args ) {"],"bleu":0.7650639813704503,"rouge_l":0.8661257606490871}
{"id":344,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException {"],"references":["import java . util . * ; import java . io . * ; public final class Example { public static void main ( String [ ] args ) { Map < Integer , List < Integer > > map = new HashMap < > ( ) ; try { BufferedReader buffer = new BufferedReader ( new InputStreamReader ( System . in ) ) ; args = buffer . readLine ( ) . split ( \" ▁ \" ) ; int n = Integer . parseInt ( args [ 0 ] ) ; int x = Integer . parseInt ( args [ 1 ] ) ; args = buffer . readLine ( ) . split ( \" ▁ \" ) ; int [ ] arr = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { arr [ i ] = Integer . parseInt ( args [ i - 1 ] ) ; } for ( int i = 1 ; i <= n ; i ++ ) { int y = arr [ i ] ; if ( ! map . containsKey ( y ) ) { map . put ( y , new ArrayList < Integer > ( ) ) ; } map . get ( y ) . add ( arr [ i ] ) ; if ( x == 0 ) { continue ; } y = y ^ x ; if ( ! map . containsKey ( y ) ) { map . put ( y , new ArrayList < Integer > ( ) ) ; } map . get ( y ) . add ( arr [ i ] ) ; } long counter = 0 ; if ( x == 0 ) { for ( int key : map . keySet ( ) ) { long m = map . get ( key ) . size ( ) ; counter += ( m * ( m - 1 ) ) \/ 2 ; } } else { for ( int key : map . keySet ( ) ) {","import java . io . * ; import java . util . * ; import java . lang . * ;   public class Main {   public static void main ( String [ ] args ) { FastReader in = new FastReader ( ) ; PrintWriter out = new PrintWriter ( System . out ) ;","import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . IOException ; import java . io . PrintWriter ; import java . util . Map ; import java . util . HashMap ; import java . util . StringTokenizer ;   public class B { public static void main ( String [ ] args ) { FastScanner fs = new FastScanner ( ) ; PrintWriter pw = new PrintWriter ( System . out ) ;   int n = fs . nextInt ( ) ; int x = fs . nextInt ( ) ; int [ ] as = new int [ n ] ; for ( int i = 0 ; i < n ; ++ i ) { as [ i ] = fs . nextInt ( ) ; } long c = 0 ; Map < Integer , Integer > mp = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; ++ i ) { c += mp . getOrDefault ( as [ i ] ^ x , 0 ) ; mp . put ( as [ i ] , mp . getOrDefault ( as [ i ] , 0 ) + 1 ) ; } pw . println ( c ) ;   pw . close ( ) ; }   static class FastScanner { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( \" \" ) ;   String next ( ) { while ( ! st . hasMoreTokens ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } } }"],"bleu":0.4226476826832948,"rouge_l":0.6257516802263884}
{"id":345,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Scanner ; import java . util . StringTokenizer ; import java . util . * ; import java . io . * ; public class er10a {"],"references":["import java . util . * ; import java . util . Scanner ; import java . io . * ; import javax . lang . model . util . ElementScanner6 ; import static java . lang . System . out ; import java . util . Stack ; import java . util . Queue ; import java . util . LinkedList ;   public class A187 {   static int mod = ( int ) ( 1e9 + 7 ) ; static long MOD = ( long ) ( 1e9 + 7 ) ; static FastReader in = new FastReader ( ) ; static PrintWriter pr = new PrintWriter ( new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ) ; public static void main ( String args [ ] ) {   int tc = 1 ;","import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;  ","import java . util . * ;   public class CodeForces817A { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int x1 = input . nextInt ( ) ; int y1 = input . nextInt ( ) ; int x2 = input . nextInt ( ) ; int y2 = input . nextInt ( ) ; int x = input . nextInt ( ) ; int y = input . nextInt ( ) ; if ( ( x2 - x1 ) % x == 0 && ( y2 - y1 ) % y == 0 && ( ( ( x2 - x1 ) \/ x ) % 2 == ( ( y2 - y1 ) \/ y ) % 2 || ( ( x2 - x1 ) \/ x ) % 2 == - ( ( y2 - y1 ) \/ y ) % 2 ) ) { System . out . println ( \" YES \" ) ; } else { System . out . println ( \" NO \" ) ; } } }"],"bleu":0.898290187191403,"rouge_l":0.7559602523897684}
{"id":346,"predictions":["import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;"],"references":["import java . util . LinkedHashSet ; import java . util . Scanner ; public class A { public static int sol ( int x ) { x += 1 ; while ( x % 10 == 0 ) { x \/= 10 ; } return x ; } public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; LinkedHashSet < Integer > h = new LinkedHashSet < > ( ) ; while ( ! h . contains ( n ) ) { h . add ( n ) ; n = sol ( n ) ; }","import java . io . * ; import java . util . * ;   public class Solution { static Scanner sc = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { solve ( ) ; } static void solve ( ) { long n = sc . nextLong ( ) ; long count = 0 ; if ( n >= 10 ) { count = 1 ; } while ( ( n = applyFunction ( n ) ) > 10 ) { count ++ ; } count = count + 9 ; System . out . println ( count ) ; } static long applyFunction ( long n ) { n = n + 1 ; while ( n > 0 ) { if ( n % 10 == 0 ) { n \/= 10 ; } else { break ; } } return n ; } }","import java . util . HashMap ; import java . util . Scanner ;   public class A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; sc . nextLine ( ) ; Solution ( n ) ; }   public static void Solution ( int n ) { HashMap < Integer , Integer > m = new HashMap < > ( ) ; int i = 0 ; while ( true ) { if ( m . containsValue ( n ) ) { break ; } m . put ( i , n ) ; i ++ ; n ++ ; while ( n % 10 == 0 ) { n \/= 10 ; } }   System . out . println ( m . size ( ) ) ; } }","import java . util . * ; import java . math . * ; public class ReachableNumbers { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; ArrayList < Long > arr = new ArrayList < > ( ) ; long n = sc . nextLong ( ) ; while ( ! arr . contains ( n ) ) { arr . add ( n ) ; n = f ( n ) ; } System . out . println ( arr . size ( ) ) ; } static long f ( long x ) { x += 1 ; while ( x % 10 == 0 ) x \/= 10 ; return x ; }   }","import java . io . * ; import java . util . * ; import java . lang . Math ; public class Solution { public static int beautifulFunction ( int N ) { HashSet < Integer > hs = new HashSet < Integer > ( ) ; HashSet < Integer > inserted = new HashSet < Integer > ( ) ; String temp = String . valueOf ( N ) ; if ( temp . length ( ) == 1 ) { return 9 ; } else { inserted . add ( N ) ; boolean flag = false ; hs . add ( N ) ; if ( N % 10 == 0 ) { flag = true ; N = N + 10 ; } else { flag = false ; } while ( true ) { if ( N % 10 != 0 ) { if ( ( N + 1 ) % 10 != 0 ) { inserted . add ( N + 1 ) ; N ++ ; } else { String temp1 = String . valueOf ( N + 1 ) ; String temp2 = temp1 . replaceFirst ( \" ^ 0 * \" , \" \" ) . replaceFirst ( \"0 * $ \" , \" \" ) ; int alsoFind = Integer . valueOf ( temp2 ) ; inserted . add ( alsoFind ) ; N = alsoFind ; if ( hs . contains ( alsoFind ) ) { if ( flag ) return inserted . size ( ) + 9 ; else return inserted . size ( ) ; } hs . add ( alsoFind ) ; } } else { String temp1 = String . valueOf ( N ) ; String temp2 = temp1 . replaceFirst ( \" ^ 0 * \" , \" \" ) . replaceFirst ( \"0 * $ \" , \" \" ) ; int alsoFind = Integer . valueOf ( temp2 ) ; inserted . add ( alsoFind ) ; N = alsoFind ; if ( hs . contains ( alsoFind ) ) { if ( flag ) return inserted . size ( ) + 9 ; else return inserted . size ( ) ; } hs . add ( alsoFind ) ; } } } }   public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int N ; N = scan . nextInt ( ) ; int result ; result = beautifulFunction ( N ) ; System . out . print ( result ) ; return ; } }"],"bleu":0.08594966684584561,"rouge_l":0.2558889964504679}
{"id":347,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . io . * ;   public class Main { static long a , b , x , y , z ; static StreamTokenizer st = new StreamTokenizer ( new BufferedReader ( new InputStreamReader ( System . in ) ) ) ; static BufferedWriter bw = new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ;   public static void main ( String [ ] args ) throws IOException { st . nextToken ( ) ; a = ( int ) st . nval ; st . nextToken ( ) ; b = ( int ) st . nval ; st . nextToken ( ) ; x = ( int ) st . nval ; st . nextToken ( ) ; y = ( int ) st . nval ; st . nextToken ( ) ; z = ( int ) st . nval ; a = 2 * x + y - a ; b = 3 * z + y - b ; if ( a < 1 ) { a = 0 ; } if ( b < 1 ) { b = 0 ; } bw . write ( a + b + \" \" ) ; bw . close ( ) ; } }","import java . io . * ;   public class Main { static long a , b , x , y , z ; static StreamTokenizer st = new StreamTokenizer ( new BufferedReader ( new InputStreamReader ( System . in ) ) ) ; static BufferedWriter bw = new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ;   public static void main ( String [ ] args ) throws IOException { st . nextToken ( ) ; a = ( int ) st . nval ; st . nextToken ( ) ; b = ( int ) st . nval ; st . nextToken ( ) ; x = ( int ) st . nval ; st . nextToken ( ) ; y = ( int ) st . nval ; st . nextToken ( ) ; z = ( int ) st . nval ; a = 2 * x + y - a ; b = 3 * z + y - b ; if ( a < 1 ) { a = 0 ; } if ( b < 1 ) { b = 0 ; } bw . write ( a + b + \" \" ) ; bw . close ( ) ; } }","import java . io . FileInputStream ; import java . io . FileNotFoundException ; import java . io . IOException ; import java . io . PrintWriter ; import java . util . Arrays ; import java . util . Collection ; import java . util . List ; import java . util . Scanner ; import java . util . function . Function ; import java . util . stream . Collectors ; public class _p000912A { static public void main ( final String [ ] args ) throws IOException { p000912A . _main ( args ) ; }","import java . util . ArrayList ; import java . util . Scanner ;   public class main { public static void main ( String [ ] args ) { Scanner j = new Scanner ( System . in ) ; String s1 = j . nextLine ( ) ; String [ ] k = s1 . split ( \" ▁ \" ) ; String s2 = j . nextLine ( ) ; String [ ] l = s2 . split ( \" ▁ \" ) ; long yb = Integer . parseInt ( k [ 0 ] ) ; long bb = Integer . parseInt ( k [ 1 ] ) ; long a = Integer . parseInt ( l [ 0 ] ) ; long b = Integer . parseInt ( l [ 1 ] ) ; long c = Integer . parseInt ( l [ 2 ] ) ; System . out . println ( Math . max ( ( ( 2 * a + b ) - yb ) , 0 ) + Math . max ( ( ( 3 * c + b ) - bb ) , 0 ) ) ; } }","import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;  "],"bleu":0.6425693665957417,"rouge_l":0.6114823815309842}
{"id":348,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException {"],"references":["import java . io . BufferedReader ; import java . io . BufferedWriter ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . OutputStreamWriter ; import java . io . PrintWriter ;   public class Div1_453B {   static int n ;   public static void main ( String [ ] args ) throws IOException { BufferedReader reader = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter printer = new PrintWriter ( new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ) ; n = Integer . parseInt ( reader . readLine ( ) ) ; int [ ] prev = new int [ n + 1 ] ; int [ ] cur = new int [ n + 1 ] ; prev [ 0 ] = 1 ; cur [ 1 ] = 1 ;   for ( int i = 1 ; i < n ; i ++ ) { int [ ] nxt = add ( prev , lShift ( cur ) ) ; prev = cur ; cur = nxt ; } printer . println ( n ) ; for ( int i = 0 ; i <= n ; i ++ ) { printer . print ( cur [ i ] + \" ▁ \" ) ; } printer . println ( ) ; printer . println ( n - 1 ) ; for ( int i = 0 ; i <= n - 1 ; i ++ ) { printer . print ( prev [ i ] + \" ▁ \" ) ; } printer . println ( ) ; printer . close ( ) ; }   static int [ ] add ( int [ ] a , int [ ] b ) { int [ ] ret = new int [ n + 1 ] ; for ( int i = 0 ; i <= n ; i ++ ) { ret [ i ] = ( a [ i ] + b [ i ] ) % 2 ; } return ret ; }   static int [ ] lShift ( int [ ] items ) { int [ ] ret = new int [ n + 1 ] ; for ( int i = n ; i >= 1 ; i -- ) { ret [ i ] = items [ i - 1 ] ; } return ret ; }   }"],"bleu":2.898069558434726e-6,"rouge_l":0.10361748977665931}
{"id":349,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ; public class Solution { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; String first = sc . next ( ) . toLowerCase ( ) ; String second = sc . next ( ) . toLowerCase ( ) ; int c1 = 0 , c2 = 0 ; if ( first . compareTo ( second ) == 0 ) { System . out . println ( \"0\" ) ; } if ( first . compareTo ( second ) > 0 ) { System . out . println ( \"1\" ) ; } if ( first . compareTo ( second ) < 0 ) { System . out . println ( \" - 1\" ) ; } } }","import java . util . Scanner ;   public class T112A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String first = sc . next ( ) ; String second = sc . next ( ) ; if ( first . compareToIgnoreCase ( second ) == 0 ) { System . out . println ( \"0\" ) ; } else if ( first . compareToIgnoreCase ( second ) > 0 ) { System . out . println ( \"1\" ) ; } else { System . out . println ( \" - 1\" ) ; }   } }","import java . util . Scanner ;   public class Problem112A { public static void main ( String [ ] args ) {   Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; s = s . toLowerCase ( ) ; String s1 = sc . next ( ) ; s1 = s1 . toLowerCase ( ) ; int result = s . compareTo ( s1 ) ;   if ( result < 0 ) { System . out . println ( \" - 1\" ) ; } else if ( result == 0 ) { System . out . println ( \"0\" ) ; } else { System . out . println ( \"1\" ) ; }   } }","import java . util . * ;   public class A { private String str2 ;   public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String str1 = scanner . next ( ) ; String str2 = scanner . next ( ) ; str1 = str1 . toLowerCase ( ) ; str2 = str2 . toLowerCase ( ) ; int sum = 0 ; for ( int i = 0 ; i < str1 . length ( ) ; i ++ ) { if ( str1 . charAt ( i ) != str2 . charAt ( i ) ) { if ( ( int ) str1 . charAt ( i ) > ( int ) str2 . charAt ( i ) ) { sum = 1 ; } if ( ( int ) str1 . charAt ( i ) < ( int ) str2 . charAt ( i ) ) { sum = - 1 ; } break ; } } System . out . println ( sum ) ; } }"],"bleu":0.08332198715647553,"rouge_l":0.2223572296476306}
{"id":350,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . ArrayDeque ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Scanner ;   public final class PermutationGamesCF { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int arr [ ] = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int ans [ ] = new int [ n + 1 ] ; Arrays . fill ( ans , - 1 ) ; boolean vis [ ] = new boolean [ n + 1 ] ; boolean isTrue = true ; for ( int i = 0 ; i < m - 1 ; i ++ ) { int src = arr [ i ] ; int dest = arr [ i + 1 ] ; if ( dest > src ) { int val = dest - src ;"],"bleu":0.01984965355074412,"rouge_l":0.2602629151291513}
{"id":351,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . Scanner ; import java . util . Arrays ; import java . util . Vector ; import java . util . Collections ;    public class Problem_Solving1 { public static void main ( String [ ] args ) {","import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; long a = in . nextLong ( ) ; long b = in . nextLong ( ) ; in . close ( ) ; while ( true ) { if ( a == 0 || b == 0 ) break ; if ( a >= 2 * b ) a %= 2 * b ; else if ( b >= 2 * a ) b %= 2 * a ; else break ; } System . out . println ( a + \" ▁ \" + b ) ; } }  ","   import java . util . * ; import java . lang . * ; import java . io . * ; import java . math . * ;    public class file {   ","import java . util . ArrayList ; import java . util . Arrays ; import java . util . HashMap ; import java . util . LinkedHashMap ; import java . util . Map ; import java . util . Scanner ; import java . util . * ; import java . util . stream . Collectors ;   public class absolute {   public static void main ( String [ ] args ) {"],"bleu":0.370322898521703,"rouge_l":0.6075697211155379}
{"id":352,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ; import java . io . * ; public class Solve {   static BufferedReader input = new BufferedReader ( new InputStreamReader ( System . in ) ) ; static StringTokenizer st ; static PrintWriter pr = new PrintWriter ( new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ) ; public static void main ( String [ ] args ) throws IOException { String s = readLine ( ) ; Map < Character , Integer > mp = new HashMap ( ) ; mp . put ( ' f ' , 1 ) ; mp . put ( ' e ' , 2 ) ; mp . put ( ' d ' , 3 ) ; mp . put ( ' a ' , 4 ) ; mp . put ( ' b ' , 5 ) ; mp . put ( ' c ' , 6 ) ; char col = s . charAt ( s . length ( ) - 1 ) ; long row = Long . parseLong ( s . substring ( 0 , s . length ( ) - 1 ) ) ; long ans = 0 ; ans += 1L * ( row - 1 ) \/ 4 * 16 ; if ( row % 2 == 0 ) { ans += 7 ; ans += mp . get ( col ) ; } else ans += mp . get ( col ) ; println ( ans ) ; } static String next ( ) throws IOException { while ( st == null || ! st . hasMoreTokens ( ) ) st = new StringTokenizer ( input . readLine ( ) . trim ( ) ) ; return st . nextToken ( ) ; } static long readLong ( ) throws IOException { return Long . parseLong ( next ( ) ) ; } static int readInt ( ) throws IOException { return Integer . parseInt ( next ( ) ) ; } static double readDouble ( ) throws IOException { return Double . parseDouble ( next ( ) ) ; } static char readChar ( ) throws IOException { return next ( ) . charAt ( 0 ) ; } static String readLine ( ) throws IOException { return input . readLine ( ) . trim ( ) ; } static void print ( Object b ) { System . out . print ( b ) ; } static void println ( Object b ) { System . out . println ( b ) ; } static void println ( ) { System . out . println ( ) ; } }","import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . StringTokenizer ; import java . io . IOException ; import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . InputStream ;   public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; BFoodOnThePlane solver = new BFoodOnThePlane ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; }   static class BFoodOnThePlane { public void solve ( int testNumber , InputReader in , PrintWriter out ) { String s = in . next ( ) ; long n = Long . parseLong ( s . substring ( 0 , s . length ( ) - 1 ) ) - 1 ; int x = \" fedabc \" . indexOf ( s . charAt ( s . length ( ) - 1 ) ) ; long ans = 16 * ( n \/ 4 ) ; if ( n % 2 != 0 ) { ans += 7 ; } ans += x + 1 ; out . println ( ans ) ; }   }   static class InputReader { public BufferedReader reader ; public StringTokenizer tokenizer ;   public InputReader ( InputStream stream ) { reader = new BufferedReader ( new InputStreamReader ( stream ) , 32768 ) ; tokenizer = null ; }   public String next ( ) { while ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( ) ; }   } }  ","import java . io . * ; import java . math . * ; import java . security . * ; import java . text . * ; import java . util . * ;    public class CodeForce { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringBuilder sb = new StringBuilder ( ) ;","import java . util . Scanner ;   public class B725 {   public static void main ( String [ ] args ) { int fullRoundTime = 16 ; int halfRoundTime = 7 ; Scanner in = new Scanner ( System . in ) ; String seat = in . next ( ) ; long row = Long . parseLong ( seat . substring ( 0 , seat . length ( ) - 1 ) ) - 1 ; char posInRow = seat . charAt ( seat . length ( ) - 1 ) ; long fullRounds = row \/ 4 ; boolean halfRound = ( ( row % 2 ) == 1 ) ; int timeInRow = \" fedabc \" . indexOf ( posInRow ) + 1 ; long answer = fullRoundTime * fullRounds + ( halfRound ? halfRoundTime : 0 ) + timeInRow ; System . out . println ( answer ) ; }   }"],"bleu":0.451618041982352,"rouge_l":0.5470618380594465}
{"id":353,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException {"],"references":["import java . io . * ; import java . util . StringTokenizer ;","# include < bits \/ stdc ++ . h >   using namespace std ; typedef long long ll ;   int main ( ) { int n ; cin >> n ; if ( n % 2 == 0 ) { cout << - 1 ; return 0 ; } for ( int i = 0 ; i < n ; ++ i ) cout << i << ' ▁ ' ;   cout << endl ;   for ( int i = 0 ; i < n ; ++ i ) { cout << i << ' ▁ ' ; } cout << endl ; for ( int i = 0 ; i < n ; ++ i ) { cout << ( 2 * i ) % n << ' ▁ ' ; }     }","# include < bits \/ stdc ++ . h >   using namespace std ; typedef long long ll ;   int main ( ) { int n ; cin >> n ; if ( n % 2 == 0 ) { cout << - 1 ; return 0 ; } for ( int i = 0 ; i < n ; ++ i ) cout << i << ' ▁ ' ;   cout << endl ;   for ( int i = 0 ; i < n ; ++ i ) { cout << i << ' ▁ ' ; } cout << endl ; for ( int i = 0 ; i < n ; ++ i ) { cout << ( 2 * i ) % n << ' ▁ ' ; }     }","import java . io . * ; import java . util . * ;   import static java . lang . Integer . * ;   public class A {   public static void main ( String [ ] args ) throws IOException { BufferedReader in = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter pw = new PrintWriter ( System . out ) ; int n = parseInt ( in . readLine ( ) ) ; if ( n % 2 == 0 ) { pw . println ( - 1 ) ; } else { for ( int i = 0 ; i < n ; i ++ ) { pw . print ( i + \" ▁ \" ) ; } pw . println ( ) ; for ( int i = 0 ; i < n ; i ++ ) { pw . print ( i + \" ▁ \" ) ; } pw . println ( ) ; for ( int i = 0 ; i < n ; i ++ ) { pw . print ( ( 2 * i % n ) + \" ▁ \" ) ; } } pw . close ( ) ; } }","import java . io . * ; import java . util . StringTokenizer ;"],"bleu":0.9157103753711766,"rouge_l":0.9442349672554077}
{"id":354,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ; public class CF_357B {   public static void main ( String [ ] args ) {","  import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Arrays ; import java . util . Scanner ; import java . util . StringTokenizer ;   public class Hamburgers { static class FastReader { BufferedReader br ; StringTokenizer st ;   public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; }   String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   long nextLong ( ) { return Long . parseLong ( next ( ) ) ; }   double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; }   String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } }      public static void main ( String [ ] args ) {"],"bleu":0.6145701429336743,"rouge_l":0.6234754928281045}
{"id":355,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["   import java . util . * ;    public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; if ( n == 1 || n == 2 ) { System . out . println ( 1 ) ; System . out . println ( 1 ) ; } else if ( n == 3 ) { System . out . println ( 2 ) ; System . out . println ( 1 + \" ▁ \" + 3 ) ; } else if ( n == 4 ) { System . out . println ( 4 ) ; System . out . println ( 3 + \" ▁ \" + 1 + \" ▁ \" + 4 + \" ▁ \" + 2 ) ; } else { int a [ ] = new int [ n ] ; System . out . println ( n ) ; int j = 0 ; int i ; for ( i = 0 ; j < n ; i ++ ) { a [ j ] = i + 1 ; j += 2 ; } i ++ ; j = 1 ; for ( ; j < n ; i ++ ) { a [ j ] = i ; j += 2 ; } for ( int k = 0 ; k < n ; k ++ ) { System . out . print ( a [ k ] + \" ▁ \" ) ; } System . out . println ( \" \" ) ; } } }  ","import java . io . * ; import java . util . * ; import java . lang . * ;   public class Rextester { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int n = Integer . parseInt ( br . readLine ( ) ) ; br . close ( ) ; if ( n < 3 ) { System . out . println ( \"1 \\n 1\" ) ; return ; } else if ( n == 3 ) { System . out . println ( \"2 \\n 1 ▁ 3\" ) ; return ; } else if ( n == 4 ) { System . out . println ( \"4 \\n 3 ▁ 1 ▁ 4 ▁ 2\" ) ; } else { System . out . println ( n ) ; for ( int i = 1 ; i <= n ; i ++ ) { if ( i % 2 != 0 ) { System . out . print ( i + \" ▁ \" ) ; } } for ( int i = 1 ; i <= n ; i ++ ) { if ( i % 2 == 0 ) { System . out . print ( i + \" ▁ \" ) ; } } } } }","import java . util . Scanner ; import java . lang . Math ;   public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] par = new int [ n ] ; int [ ] impar = new int [ n ] ; int i ; int h = 0 ; int j = 0 ; for ( i = 1 ; i <= n ; i ++ ) { if ( i % 2 == 0 ) { par [ h ] = i ; h ++ ; } else { impar [ j ] = i ; j ++ ; } } if ( n == 1 ) { System . out . println ( n ) ; System . out . println ( n ) ; } else if ( n == 2 ) { System . out . println ( n - 1 ) ; System . out . println ( n ) ; } else if ( n == 3 ) { System . out . println ( n - 1 ) ; for ( i = 0 ; i < n - 1 ; i ++ ) { System . out . print ( impar [ i ] + \" ▁ \" ) ; } } else if ( n == 4 ) { System . out . println ( n ) ; System . out . println ( 3 + \" ▁ \" + 1 + \" ▁ \" + 4 + \" ▁ \" + 2 ) ; } else { System . out . println ( n ) ; i = 0 ; while ( impar [ i ] != 0 ) { System . out . print ( impar [ i ] + \" ▁ \" ) ; i ++ ; } i = 0 ; while ( par [ i ] != 0 ) { System . out . print ( par [ i ] + \" ▁ \" ) ; i ++ ; } } } }  ","import java . util . Scanner ;   public class ExamSpacing { public static void main ( String [ ] args ) {   Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) , i ; in . close ( ) ;   if ( n < 3 ) { System . out . println ( \"1 \\n 1\" ) ; } else if ( n == 3 ) { System . out . println ( \"2 \\n 1 ▁ 3\" ) ; } else { System . out . println ( n ) ; String s = \"3 ▁ 1 ▁ 4 ▁ 2\" ; for ( i = 5 ; i <= n ; i ++ ) { if ( i % 2 == 0 ) { s += \" ▁ \" + i ; } else { s = i + \" ▁ \" + s ; } } System . out . println ( s ) ; } } }"],"bleu":0.046423361795124,"rouge_l":0.19653644784534835}
{"id":356,"predictions":["import java . util . * ; import java . io . * ; import java . math . BigInteger ; import java . text . * ; public class Main { static long mod = 1000_000_007 ; static long mod1 = 998244353 ; static boolean fileIO = false ; static boolean memory = true ; static FastScanner f ; static PrintWriter pw ; static double eps = ( double ) 1e-6 ; static long oo = Long . MAX_VALUE ;"],"references":["import java . io . * ; import java . util . * ; import java . lang . * ; import java . math . * ; import java . text . DecimalFormat ; import java . lang . reflect . Array ; import java . io . BufferedOutputStream ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . math . BigDecimal ; public class B { public static PrintWriter out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ;","import java . io . * ; import java . util . * ;   public class MainClass { public static void main ( String [ ] args ) throws IOException { Reader in = new Reader ( ) ; int s = in . nextInt ( ) ; int a = in . nextInt ( ) ; int b = in . nextInt ( ) ; int c = in . nextInt ( ) ; if ( a + b + c == 0 ) System . out . println ( \"0 ▁ 0 ▁ 0\" ) ; else { double x = ( double ) a * s \/ ( a + b + c ) ; double y = ( double ) b * s \/ ( a + b + c ) ; double z = ( double ) c * s \/ ( a + b + c ) ; System . out . println ( x + \" ▁ \" + y + \" ▁ \" + z ) ; } } } class Reader { final private int BUFFER_SIZE = 1 << 16 ; private DataInputStream din ; private byte [ ] buffer ; private int bufferPointer , bytesRead ;   public Reader ( ) { din = new DataInputStream ( System . in ) ; buffer = new byte [ BUFFER_SIZE ] ; bufferPointer = bytesRead = 0 ; }   public Reader ( String file_name ) throws IOException { din = new DataInputStream ( new FileInputStream ( file_name ) ) ; buffer = new byte [ BUFFER_SIZE ] ; bufferPointer = bytesRead = 0 ; }   public String readLine ( ) throws IOException { byte [ ] buf = new byte [ 64 ] ;","import java . util . Scanner ;     public class p185b { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int s = in . nextInt ( ) ; int a = in . nextInt ( ) ; int b = in . nextInt ( ) ; int c = in . nextInt ( ) ; double max = 0 ; double sum = a + b + c ; if ( sum == 0 ) System . out . println ( 0 + \" ▁ \" + 0 + \" ▁ \" + 0 ) ; else System . out . println ( s * a \/ sum + \" ▁ \" + s * b \/ sum + \" ▁ \" + s * c \/ sum ) ; } static double pow ( double a , int pow ) { if ( pow == 0 ) return 1 ; return pow ( a , pow - 1 ) * a ; } }","import java . util . * ; import java . io . * ;   public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; }   public static long mod = 17352642619633L ;   void run ( FastScanner in , PrintWriter out ) { double S = in . nextInt ( ) ;   int [ ] c = { in . nextInt ( ) , in . nextInt ( ) , in . nextInt ( ) } ;   int sum = c [ 0 ] + c [ 1 ] + c [ 2 ] ; if ( sum == 0 ) { out . println ( \"0 ▁ 0 ▁ 0\" ) ; return ; } double x = S * c [ 0 ] \/ sum ; double y = S * c [ 1 ] \/ sum ; double z = S * c [ 2 ] \/ sum ;   out . println ( String . format ( \" % .12f ▁ % .12f ▁ % .12f \" , x , y , z ) ) ; }    static class FastScanner {   BufferedReader br ; StringTokenizer st ;   public FastScanner ( InputStream in ) { br = new BufferedReader ( new InputStreamReader ( in ) ) ; st = null ; }   String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } } }"],"bleu":0.33398777486503994,"rouge_l":0.4063122665324676}
{"id":357,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . io . * ; import java . util . * ;   public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ;","import java . io . DataInputStream ; import java . io . FileInputStream ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Scanner ; public class LMS { static class Reader { final private int BUFFER_SIZE = 1 << 16 ; private DataInputStream din ; private byte [ ] buffer ; private int bufferPointer , bytesRead ;   public Reader ( ) { din = new DataInputStream ( System . in ) ; buffer = new byte [ BUFFER_SIZE ] ; bufferPointer = bytesRead = 0 ; }   public Reader ( String file_name ) throws IOException { din = new DataInputStream ( new FileInputStream ( file_name ) ) ; buffer = new byte [ BUFFER_SIZE ] ; bufferPointer = bytesRead = 0 ; }   public String readLine ( ) throws IOException { byte [ ] buf = new byte [ 64 ] ;","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ;     public class p196a { public static void main ( String [ ] args ) throws IOException { BufferedReader in = new BufferedReader ( new InputStreamReader ( System . in ) ) ; char [ ] s = in . readLine ( ) . toCharArray ( ) ; int [ ] last = new int [ s . length + 1 ] ; last [ s . length ] = s . length ; last [ s . length - 1 ] = s . length - 1 ; for ( int i = s . length - 2 ; i >= 0 ; i -- ) { if ( s [ i ] >= s [ last [ i + 1 ] ] ) last [ i ] = i ; else last [ i ] = last [ i + 1 ] ; } PrintWriter out = new PrintWriter ( System . out ) ; int ind = last [ 0 ] ; while ( ind < s . length ) { out . print ( s [ ind ] ) ; ind = last [ ind + 1 ] ; } out . println ( ) ; out . close ( ) ; } }"],"bleu":0.6101325231431937,"rouge_l":0.5533260032985157}
{"id":358,"predictions":["import java . io . * ; import java . util . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) throws java . lang . Exception { Reader pm = new Reader ( ) ;"],"references":["  import java . util . * ; import java . lang . * ; import java . io . * ; import java . math . * ;    public class file {   ","import java . util . * ; public class B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] fArr = new int [ k ] ; for ( int i = 0 ; i < n ; i ++ ) { fArr [ arr [ i ] % k ] ++ ; } int c = fArr [ 0 ] \/ 2 ; for ( int i = 1 ; i <= ( ( k + 1 ) \/ 2 ) - 1 ; i ++ ) { c += Math . min ( fArr [ i ] , fArr [ k - i ] ) ;   } if ( k % 2 == 0 ) { c += fArr [ k \/ 2 ] \/ 2 ; } System . out . println ( 2 * c ) ; } }"],"bleu":0.7391370098388476,"rouge_l":0.5985345651481363}
{"id":359,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; long [ ] a = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextLong ( ) ; } long ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans += a [ i ] ; } out . println ( ans ) ; out . close ( ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . math . BigInteger ; import java . util . * ; public class Template { private static BufferedReader input = new BufferedReader ( new InputStreamReader ( System . in ) ) ; static String readln ( ) throws IOException { String line = input . readLine ( ) ; return line ; } public static void main ( String [ ] args ) throws IOException { solution ( ) ; } public static void test ( ) throws IOException { int t = Integer . parseInt ( readln ( ) ) ; } public static void solution ( ) throws IOException { String [ ] nm = readln ( ) . split ( \" ▁ \" ) ; int n = Integer . parseInt ( nm [ 0 ] ) ; int m = Integer . parseInt ( nm [ 1 ] ) ; int cur = 1 ; while ( m > 0 ) { if ( m >= cur ) { m -= cur ; } else { System . out . println ( m ) ; return ; } if ( cur != n ) { cur ++ ; } else { cur = 1 ; } } System . out . println ( m ) ; } }","import java . io . File ; import java . io . IOException ; import java . io . PrintWriter ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; int m = input . nextInt ( ) ; int i = 1 , temp = m ; while ( m >= i ) { m -= i ; i ++ ; if ( i > n ) { i = 1 ; } } System . out . println ( m ) ; } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . * ; public class C { static class FastScanner { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( \" \" ) ; String next ( ) { while ( ! st . hasMoreTokens ( ) ) try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } int [ ] nextArray ( int n ) { int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = nextInt ( ) ; return a ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } } static class FastWriter extends PrintWriter { FastWriter ( ) { super ( System . out ) ; } void println ( int [ ] array ) { for ( int i = 0 ; i < array . length ; i ++ ) { print ( array [ i ] + \" ▁ \" ) ; } println ( ) ; } void println ( long [ ] array ) { for ( int i = 0 ; i < array . length ; i ++ ) { print ( array [ i ] + \" ▁ \" ) ; } println ( ) ; } } public static void main ( String [ ] args ) { FastScanner in = new FastScanner ( ) ; FastWriter out = new FastWriter ( ) ; int n = in . nextInt ( ) ; int m = in . nextInt ( ) ; int i = 1 ; while ( i <= m ) { m -= i ; i ++ ; if ( i == n + 1 ) { i = 1 ; } } out . println ( m ) ; out . close ( ) ; } }"],"bleu":0.6400744835755177,"rouge_l":0.5503564942022117}
{"id":360,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException {"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . * ;   public class Main implements Runnable { int n , m , k ; static boolean use_n_tests = false ; long [ ] res ;   void solve ( FastScanner in , PrintWriter out , int testNumber ) { n = in . nextInt ( ) ; int a , b ; a = in . nextInt ( ) ; b = in . nextInt ( ) ; Set < Integer > p = new HashSet < > ( ) ; for ( int i = 0 ; i < a ; i ++ ) { p . add ( in . nextInt ( ) ) ; } Set < Integer > q = new HashSet < > ( ) ; for ( int i = 0 ; i < b ; i ++ ) { q . add ( in . nextInt ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { if ( p . contains ( i + 1 ) ) { out . print ( \"1 ▁ \" ) ; } else if ( q . contains ( i + 1 ) ) { out . print ( \"2 ▁ \" ) ; } } out . println ( ) ; }  ","import java . util . * ; public class P2 {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int aa [ ] = new int [ a ] ; int bb [ ] = new int [ b ] ; int s [ ] = new int [ n ] ; for ( int i = 0 ; i < a ; i ++ ) { aa [ i ] = sc . nextInt ( ) ; s [ aa [ i ] - 1 ] = 1 ; } for ( int i = 0 ; i < b ; i ++ ) { bb [ i ] = sc . nextInt ( ) ; s [ bb [ i ] - 1 ] = 2 ; } for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( s [ i ] + \" ▁ \" ) ; } } }","import java . util . * ; import java . io . * ; import java . lang . * ;   public class MainClass { private static BufferedReader br = null ; private static StringTokenizer st = null ; static { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } private static String str ( ) throws IOException { return br . readLine ( ) ; } private static int ints ( ) throws IOException { return Integer . parseInt ( br . readLine ( ) ) ; } private static int [ ] ints ( int N ) throws IOException { st = new StringTokenizer ( br . readLine ( ) ) ; int [ ] nums = new int [ N ] ; for ( int i = 0 ; i < N ; i += 1 ) { nums [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } return nums ; } public static void main ( String [ ] args ) throws IOException { int [ ] nums = ints ( 3 ) ; int N = nums [ 0 ] , A = nums [ 1 ] , B = nums [ 2 ] ; int Ath [ ] = ints ( A ) , Alx [ ] = ints ( B ) ; Solution obj = new Solution ( ) ; System . out . println ( obj . sequence ( Ath , Alx , N , A , B ) ) ; br . close ( ) ; } }","import java . util . * ; import java . lang . * ; import java . io . * ;   public class Codechef { public static void main ( String [ ] args ) throws java . lang . Exception { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int [ ] arra = new int [ a ] ; int [ ] arrb = new int [ b ] ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < a ; i ++ ) { arra [ i ] = sc . nextInt ( ) ; arr [ arra [ i ] - 1 ] = 1 ; } for ( int i = 0 ; i < b ; i ++ ) { arrb [ i ] = sc . nextInt ( ) ; arr [ arrb [ i ] - 1 ] = 2 ; } for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( arr [ i ] + \" ▁ \" ) ; } } }","import java . util . * ;   public class questionCF { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ;   int n = sc . nextInt ( ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int aa [ ] = new int [ a ] ; int bb [ ] = new int [ b ] ; int s [ ] = new int [ n ] ; for ( int i = 0 ; i < a ; i ++ ) { aa [ i ] = sc . nextInt ( ) ; s [ aa [ i ] - 1 ] = 1 ; } for ( int i = 0 ; i < b ; i ++ ) { bb [ i ] = sc . nextInt ( ) ; s [ bb [ i ] - 1 ] = 2 ; } for ( int i = 0 ; i < n ; i ++ ) System . out . print ( s [ i ] + \" ▁ \" ) ; } }"],"bleu":0.003693677911509467,"rouge_l":0.18594302932623244}
{"id":361,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . Arrays ; import java . util . Scanner ;   public class A1445 {   public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int T = in . nextInt ( ) ; for ( int t = 0 ; t < T ; t ++ ) { int N = in . nextInt ( ) ; int X = in . nextInt ( ) ; int [ ] A = new int [ N ] ; for ( int n = 0 ; n < N ; n ++ ) { A [ n ] = in . nextInt ( ) ; } int [ ] B = new int [ N ] ; for ( int n = 0 ; n < N ; n ++ ) { B [ n ] = in . nextInt ( ) ; } Arrays . sort ( A ) ; Arrays . sort ( B ) ; boolean ok = true ; for ( int n = 0 ; n < N ; n ++ ) { if ( A [ n ] + B [ N - 1 - n ] > X ) { ok = false ; break ; } } System . out . println ( ok ? \" Yes \" : \" No \" ) ; } }   }","import java . util . * ; import java . util . Collections ; public class HelloWorld {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { boolean cal = false ; int n = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = sc . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) b [ i ] = sc . nextInt ( ) ; Arrays . sort ( a ) ; Arrays . sort ( b ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ n - i - 1 ] + b [ i ] > x ) { System . out . println ( \" NO \" ) ; cal = true ; break ; } } if ( cal == false ) System . out . println ( \" YES \" ) ;   } } }","import java . util . * ;   public class questionCF {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int a [ ] = new int [ n ] ; int b [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = sc . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) b [ i ] = sc . nextInt ( ) ;   int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] + b [ n - 1 - i ] > x ) { System . out . println ( \" No \" ) ; count ++ ; break ; } } if ( count == 0 ) System . out . println ( \" Yes \" ) ;   } } }","import java . io . BufferedOutputStream ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ;","import java . util . Arrays ; import java . util . Collections ; import java . util . Scanner ;   public class problem34 {   public static void main ( String [ ] args ) {"],"bleu":0.6022774485691839,"rouge_l":0.61953125}
{"id":362,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans += a [ i ] ; } out . println ( ans ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . io . * ; import java . lang . reflect . Array ; import java . util . * ; import java . math . * ; import java . lang . * ; import static java . lang . Math . * ;   public class TaskB implements Runnable { ArrayList < Integer > prime ; boolean is_prime [ ] ; InputReader c ; PrintWriter w ;   long m = ( int ) 1e9 + 7 ; long MAXN = 4294967295L ;   public void run ( ) { c = new InputReader ( System . in ) ; w = new PrintWriter ( System . out ) ;   HashSet < Character > hs = new HashSet < > ( ) ; hs . add ( ' ! ' ) ; hs . add ( ' . ' ) ; hs . add ( ' ? ' ) ; int k = Integer . parseInt ( c . nextLine ( ) ) ; String s = c . nextLine ( ) ; int prev = 0 ; ArrayList < String > str = new ArrayList < > ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( hs . contains ( s . charAt ( i ) ) ) { str . add ( s . substring ( prev , i + 1 ) ) ; prev = i + 2 ; } }","import java . io . * ; import java . util . StringTokenizer ;   public class B50 { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader inp = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; Solver solver = new Solver ( ) ; solver . solve ( inp , out ) ; out . close ( ) ; } static class InputReader { StringTokenizer tokenizer ; InputStreamReader sReader ; BufferedReader reader ; InputReader ( InputStream stream ) { sReader = new InputStreamReader ( stream ) ; reader = new BufferedReader ( sReader , 32768 ) ; tokenizer = null ; } int nextC ( ) { try { return reader . read ( ) ; } catch ( IOException e ) { return - 1 ; } } String next ( ) { while ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } public long nextLong ( ) { return Long . parseLong ( next ( ) ) ; }   }   static class Solver { int maxL ; int mCount = 0 ; int intermC = - 1 ; PrintWriter out ;   private void solve ( InputReader inp , PrintWriter out ) { this . out = out ; maxL = inp . nextInt ( ) ; int nchar = inp . nextC ( ) ; int sLength = 0 ; while ( nchar > 13 ) { if ( sLength != 0 || nchar != 32 ) { sLength ++ ; } if ( 33 <= nchar && nchar <= 63 ) {","import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { final int maxn = ( int ) 1e4 + 10 ; String str1 = \" \" ; Scanner input = new Scanner ( System . in ) ; int n ; n = input . nextInt ( ) ; String temp = input . nextLine ( ) ; str1 = input . nextLine ( ) ; int [ ] a = new int [ maxn ] ; int num = 0 , num1 = 0 ; for ( int i = 0 ; i < str1 . length ( ) ; i ++ ) { if ( str1 . charAt ( i ) == ' . ' || str1 . charAt ( i ) == ' ? ' || str1 . charAt ( i ) == ' ! ' ) { a [ num1 ++ ] = num + 1 ; num = 0 ; i ++ ; } else num ++ ; } int ans = 0 ; int i = 0 ; int sum = 0 ; while ( i < num1 ) { int j = i , space = 0 ; if ( a [ j ] > n ) {","import java . io . * ; import java . util . StringTokenizer ;   public class _70B implements Runnable { private BufferedReader in ;   private Object solve ( ) throws IOException { int n = nextInt ( ) , c = 0 , q = 0 ; String s = nextToken ( ) ; for ( int i = 0 , l = s . length ( ) , p = 0 ; i < l ; i ++ ) { char h = s . charAt ( i ) ; p ++ ; if ( h == ' . ' || h == ' ! ' || h == ' ? ' ) { if ( p > n ) { return \" Impossible \" ; } if ( q == 0 ) { q = p ; } else if ( q + 1 + p <= n ) { q += 1 + p ; } else { q = p ; c ++ ; } p = 0 ; i ++ ; } } if ( q > 0 ) { c ++ ; } return c ; }  "],"bleu":0.5554058180700029,"rouge_l":0.5115673799884326}
{"id":363,"predictions":["import java . io . * ; import java . util . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) throws java . lang . Exception { Reader pm = new Reader ( ) ;"],"references":["import java . util . * ; import java . io . * ; import java . math . BigInteger ;   public class tr0 { static PrintWriter out ; static StringBuilder sb ; static int mod = 1000000007 ; static long inf = ( long ) 1e16 ; static int n , m ; static ArrayList < Integer > [ ] ad ; static long [ ] [ ] [ ] memo ; static boolean f ; static boolean vis [ ] ; static int [ ] sub ; static char [ ] a ; static ArrayList < Long > ar ;   public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; out = new PrintWriter ( System . out ) ; long k = sc . nextLong ( ) ; long d = sc . nextLong ( ) ; long t = sc . nextLong ( ) ; if ( k % d == 0 || t <= k ) { System . out . println ( ( double ) t ) ; } else { double w = k + ( d - k % d ) \/ 2d ; double w1 = k + ( d - k % d ) ;","import java . io . * ; import java . lang . reflect . Array ; import java . math . BigDecimal ; import java . math . BigInteger ; import java . math . RoundingMode ; import java . text . DecimalFormat ; import java . util . * ; import java . util . regex . Matcher ; import java . util . regex . Pattern ;   public class Main { static long mod = ( long ) ( 1e+9 + 7 ) ;","import java . io . * ; import java . util . * ;   public class Main { public static void main ( String [ ] args ) throws IOException {"],"bleu":0.7860137880106491,"rouge_l":0.865846556995196}
{"id":364,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . io . BufferedReader ; import java . io . File ; import java . io . FileWriter ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . math . BigInteger ; import java . util . * ;   public class Main {   public static void main ( String [ ] args ) throws IOException { FastScanner input = new FastScanner ( ) ; int n = input . nextInt ( ) ; String AnsName = \" \" ; long maxAns = Long . MIN_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { long sum = 0 ; String s = input . next ( ) ; int succesHack = input . nextInt ( ) ; int unsuccess = input . nextInt ( ) ; for ( int j = 0 ; j < 5 ; j ++ ) { sum += input . nextInt ( ) ; } sum = sum + ( 100 * succesHack ) - ( 50 * unsuccess ) ; if ( sum > maxAns ) { maxAns = sum ; AnsName = s ; } } System . out . println ( AnsName ) ; }   static class FastScanner { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( \" \" ) ; String next ( ) { while ( ! st . hasMoreTokens ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } }   }","import java . util . * ;   public class questionCF { public static void main ( String [ ] args ) {   Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; HashMap < String , Integer > h = new HashMap < > ( ) ; while ( t -- > 0 ) { String s = sc . next ( ) ; int point = 0 ; int x = 100 * sc . nextInt ( ) ; int y = 50 * sc . nextInt ( ) ; for ( int i = 1 ; i <= 5 ; i ++ ) point += sc . nextInt ( ) ; point += x ; point += ( - y ) ; h . put ( s , point ) ; } int max = Integer . MIN_VALUE ; String ans = \" \" ; for ( String s : h . keySet ( ) ) { if ( max < h . get ( s ) ) { max = h . get ( s ) ; ans = s ; } } System . out . println ( ans ) ;   } }"],"bleu":0.04519191254918248,"rouge_l":0.19940306992609433}
{"id":365,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ;","import java . util . * ; import java . lang . * ; import java . io . * ;   public class PolandBall { public static void main ( String [ ] args ) throws java . lang . Exception {","import java . util . * ; import java . util . Scanner ; import java . io . * ; import javax . lang . model . util . ElementScanner6 ; import static java . lang . System . out ; import java . util . Stack ; import java . util . Queue ; import java . util . LinkedList ;   public class A755 {   static int mod = ( int ) ( 1e9 + 7 ) ; static long MOD = ( long ) ( 1e9 + 7 ) ; static FastReader in = new FastReader ( ) ; static PrintWriter pr = new PrintWriter ( new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ) ; public static void main ( String args [ ] ) {   int tc = 1 ;","import java . util . Scanner ;   public class PolandBall { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ;   int n = scanner . nextInt ( ) ;   for ( int i = 1 ; i <= 1000 ; i ++ ) { int result = n * i + 1 ; if ( ! isPrime ( result ) ) { System . out . println ( i ) ; break ; } } }   private static boolean isPrime ( int n ) { if ( n <= 1 ) { return false ; } for ( int i = 2 ; i < n \/ 2 + 1 ; i ++ ) { if ( n % i == 0 ) { return false ; } } return true ; } }"],"bleu":0.6150263361513757,"rouge_l":0.8374277456647398}
{"id":366,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; out . println ( Math . min ( Math . abs ( a - b ) , Math . abs ( b - c ) ) ) ; out . close ( ) ; } static int l_min ( int [ ] a ) { Arrays . sort ( a ) ; return a [ 0 ] ; } static int l_max ( int [ ] a ) { int l = a . length ; Arrays . sort ( a ) ; return a [ l - 1 ] ; } public static PrintWriter out ; public static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . io . IOException ; import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . ArrayList ; public class BlogPhoto { public static void main ( String [ ] args ) throws IOException { PrintWriter pw = new PrintWriter ( System . out , true ) ; BufferedReader bf = new BufferedReader ( new InputStreamReader ( System . in ) ) ; String s = bf . readLine ( ) ; String [ ] sa = s . split ( \" ▁ \" ) ; long h = Integer . parseInt ( sa [ 0 ] ) ; long w = Integer . parseInt ( sa [ 1 ] ) ; long [ ] a = new long [ 30 ] ; a [ 0 ] = 1 ; for ( int i = 1 ; i < 30 ; i ++ ) a [ i ] = a [ i - 1 ] * 2 ; long max = 0 ; long xmax = 0 , ymax = 0 ; for ( int i = 29 ; i >= 0 ; i -- ) { long x = a [ i ] , y = Math . min ( w , ( x * 5 ) \/ 4 ) ; if ( x <= h ) { if ( 4 * y <= 5 * x && 4 * x <= 5 * y ) { if ( x * y > max || ( x * y == max && x > xmax ) ) { max = x * y ; xmax = x ; ymax = y ; } } } } for ( int i = 29 ; i >= 0 ; i -- ) { long y = a [ i ] , x = Math . min ( h , ( y * 5 ) \/ 4 ) ; if ( y <= w ) { if ( 16 * x <= 20 * y && 20 * y <= 25 * x ) { if ( x * y > max || ( x * y == max && x > xmax ) ) { max = x * y ; xmax = x ; ymax = y ; } } } } System . out . println ( xmax + \" ▁ \" + ymax ) ; } }","import java . io . * ; import java . text . DecimalFormat ; import java . util . * ;   public class Main {   static class AdityaFastIO { final private int BUFFER_SIZE = 1 << 16 ; private final DataInputStream din ; private final byte [ ] buffer ; private int bufferPointer , bytesRead ; BufferedReader br ; StringTokenizer st ;   public AdityaFastIO ( ) { din = new DataInputStream ( System . in ) ; buffer = new byte [ BUFFER_SIZE ] ; bufferPointer = bytesRead = 0 ; br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; }   public AdityaFastIO ( String file_name ) throws IOException { din = new DataInputStream ( new FileInputStream ( file_name ) ) ; buffer = new byte [ BUFFER_SIZE ] ; bufferPointer = bytesRead = 0 ; }   String word ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   String line ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; }   public String readLine ( ) throws IOException { byte [ ] buf = new byte [ 64 ] ;"],"bleu":0.4816202336439258,"rouge_l":0.49545159194282}
{"id":367,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException {"],"references":["import java . util . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;   public class a { static int [ ] count , count1 , count2 ; static long [ ] arr ; static char [ ] ch , ch1 ; static long [ ] darr , farr ; static Character [ ] [ ] mat , mat1 ; static long x , h ; static long maxl ; static double dec ; static String s ; static long minl ; static int mx = ( int ) 1e6 ; static long mod = 998244353l ;","import java . util . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;   public class a { static int [ ] count , count1 , count2 ; static long [ ] arr ; static char [ ] ch , ch1 ; static long [ ] darr , farr ; static Character [ ] [ ] mat , mat1 ; static long x , h ; static long maxl ; static double dec ; static String s ; static long minl ; static int mx = ( int ) 1e6 ; static long mod = 998244353l ;","import java . util . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;   public class a { static int [ ] count , count1 , count2 ; static long [ ] arr ; static char [ ] ch , ch1 ; static long [ ] darr , farr ; static Character [ ] [ ] mat , mat1 ; static long x , h ; static long maxl ; static double dec ; static String s ; static long minl ; static int mx = ( int ) 1e6 ; static long mod = 998244353l ;","import java . util . Scanner ; public class p1085B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) , k = sc . nextInt ( ) , p = k - 1 ; while ( n % p > 0 && p > 0 ) p -- ; System . out . println ( n \/ p * k + p ) ; } }"],"bleu":0.11816151808155156,"rouge_l":0.3094090793811819}
{"id":368,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["  import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Scanner ; import java . util . StringTokenizer ; import java . util . * ; public class er103b {","import java . io . * ; import java . util . * ;   public class Solution { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int res = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = i ; j <= n ; j ++ ) { int k = i ^ j ; if ( k >= i && k >= j && i + j > k && k <= n ) { res ++ ; }","import java . io . * ; import java . util . * ;   public class Solution { public static void main ( String [ ] args ) throws Exception { int n = in . readInt ( ) ; int count = 0 ; for ( int a = 1 ; a <= n ; a ++ ) { for ( int b = a + 1 ; b <= n ; b ++ ) { int c = a ^ b ; if ( a + b > c && b + c > a && a + c > b && c <= n ) {","import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;  ","import java . io . * ; import java . util . * ; public class Asd { static PrintWriter w = new PrintWriter ( System . out ) ; static FastScanner s = new FastScanner ( ) ;   public static void main ( String [ ] args ) {"],"bleu":0.6650641323082556,"rouge_l":0.6115782664941786}
{"id":369,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . io . * ; import java . math . * ; import java . security . * ; import java . text . * ; import java . util . * ;    public class CodeForce { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ;","import java . util . Scanner ;   public class B9 {   public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int N = in . nextInt ( ) ; double VB = in . nextInt ( ) ; double VS = in . nextInt ( ) ; int [ ] X = new int [ N ] ; for ( int n = 0 ; n < N ; n ++ ) { X [ n ] = in . nextInt ( ) ; } int xu = in . nextInt ( ) ; int yu = in . nextInt ( ) ; int answer = - 1 ; double minTime = Double . MAX_VALUE ; double minDist = Double . MAX_VALUE ; for ( int n = 1 ; n < N ; n ++ ) { double busTime = X [ n ] \/ VB ; double dx = xu - X [ n ] ; double dist = Math . sqrt ( yu * yu + dx * dx ) ; double runTime = dist \/ VS ; double time = busTime + runTime ; if ( time < minTime ) { minTime = time ; minDist = dist ; answer = n + 1 ; } else if ( time == minTime && dist < minDist ) { minDist = dist ; answer = n + 1 ; } } System . out . println ( answer ) ; }   }","import java . util . * ; import java . lang . Math . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; double vb = sc . nextDouble ( ) ; double vs = sc . nextDouble ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } double x = sc . nextDouble ( ) ; double y = sc . nextDouble ( ) ; double temp = ( arr [ 1 ] \/ vb ) + ( Math . sqrt ( Math . pow ( ( arr [ 1 ] - x ) , 2 ) + Math . pow ( y , 2 ) ) \/ vs ) ; double dist = Math . sqrt ( Math . pow ( ( arr [ 1 ] - x ) , 2 ) + Math . pow ( y , 2 ) ) ;"],"bleu":0.32692560147293304,"rouge_l":0.5072765072765073}
{"id":370,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ; import java . math . * ; public class TernaryString { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int runs = sc . nextInt ( ) ; while ( runs -- > 0 ) { String in = sc . next ( ) ; char [ ] arr = in . toCharArray ( ) ; int n = arr . length ; int [ ] last = new int [ ] { - n , - n , - n } ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < arr . length ; i ++ ) { last [ arr [ i ] - '1' ] = i ; int dist = 1 + i - Math . min ( Math . min ( last [ 0 ] , last [ 1 ] ) , last [ 2 ] ) ; min = Math . min ( min , dist ) ; } System . out . println ( min > arr . length ? 0 : min ) ; } } }","import java . util . PriorityQueue ; import java . util . Scanner ;   public class B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; sc . nextLine ( ) ; for ( int i = 0 ; i < t ; i ++ ) { String s = sc . nextLine ( ) ;"],"bleu":0.21168742457644346,"rouge_l":0.373143773202835}
{"id":371,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;  ","import java . io . * ; import java . util . * ;   public class Main { static BufferedReader br ; static StringTokenizer st ; static PrintWriter pr = new PrintWriter ( new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ) ; public static class AL < T > extends ArrayList < T > { } ; public static class HM < T , Integer > extends HashMap < T , T > { } ; public static class HS < T > extends HashSet < T > { } ; public static void main ( String [ ] args ) throws IOException { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; String s = nxtLn ( ) ; int [ ] frq = new int [ 3 ] ; int ptr = 0 ; boolean flg = true ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) != ptr + ' a ' ) { if ( frq [ s . charAt ( i ) == ' a ' ? 0 : ( s . charAt ( i ) - ' a ' - 1 ) ] <= 0 ) { flg = false ; break ; } else { ptr ++ ; if ( ptr > 2 ) { flg = false ; break ; } frq [ ptr ] ++ ; } } else frq [ ptr ] ++ ; }   pr . println ( flg && frq [ 0 ] * frq [ 1 ] > 0 && ( frq [ 2 ] == frq [ 0 ] || frq [ 2 ] == frq [ 1 ] ) ? \" YES \" : \" NO \" ) ; pr . flush ( ) ; pr . close ( ) ; } static int nxtInt ( ) { return Integer . parseInt ( nxt ( ) ) ; } static long nxtLong ( ) { return Long . parseLong ( nxt ( ) ) ; } static double nxtDoub ( ) { return Double . parseDouble ( nxt ( ) ) ; } static String nxt ( ) { return st . nextToken ( ) ; } static String nxtLn ( ) throws IOException { return br . readLine ( ) ; } }","import java . io . * ; import java . util . * ; import java . math . * ;   public class Main { static final Random random = new Random ( ) ; static PrintWriter out = new PrintWriter ( ( System . out ) ) ; static Reader sc = new Reader ( ) ;   public static void main ( String args [ ] ) throws IOException {"],"bleu":0.641475627539249,"rouge_l":0.6114823815309842}
{"id":372,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . Arrays ; import java . util . Scanner ;   public class Apple {   public static void main ( String args [ ] ) {   try {   Scanner sc = new Scanner ( System . in ) ;   int n = sc . nextInt ( ) ; int count = 0 ;   int A [ ] = new int [ n ] ; int sum = 0 ; boolean flag = false ;   for ( int i = 0 ; i < n ; i ++ ) {   A [ i ] = sc . nextInt ( ) ; sum += A [ i ] ;   }   Arrays . sort ( A ) ; if ( sum % 2 == 1 ) { count = sum ; flag = true ; } else {   for ( int i = 0 ; i < n ; i ++ ) {   if ( ( sum - A [ i ] ) % 2 == 1 ) { sum = sum - A [ i ] ; count = sum ; flag = true ; break ; }   } }   if ( flag ) { System . out . println ( count ) ; } else { System . out . println ( 0 ) ; }   } catch (   Exception e ) { return ;   } } }","import javax . swing . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ;   import static java . lang . Integer . * ;   public class Example {   public static void main ( String [ ] args ) {    Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; int min = MAX_VALUE ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int a = sc . nextInt ( ) ; ans += a ; if ( a % 2 != 0 ) { if ( a < min ) { min = a ; } }    } if ( ans % 2 != 0 ) { System . out . println ( ans ) ;   } else { if ( min != MAX_VALUE ) System . out . println ( ans - min ) ; else System . out . println ( 0 ) ; } }   }    ","import java . util . * ;   public class Absolutezero { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int sum = 0 ; int ar [ ] = new int [ n ] ; int odd = 0 ; int even = 0 ; List < Integer > oddnum = new ArrayList < > ( ) ; List < Integer > evennum = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { ar [ i ] = sc . nextInt ( ) ; if ( ar [ i ] % 2 == 0 ) { even ++ ; evennum . add ( ar [ i ] ) ; } else { odd ++ ; oddnum . add ( ar [ i ] ) ; } } Arrays . sort ( ar ) ; Collections . sort ( evennum ) ; Collections . sort ( oddnum ) ; if ( odd % 2 != 0 ) { int sum1 = 0 ; for ( Integer integer : ar ) { sum1 = sum1 + integer ; } System . out . println ( sum1 ) ; } else { int sum1 = 0 ; for ( int i = 1 ; i < odd ; i ++ ) { sum1 = sum1 + oddnum . get ( i ) ; } for ( Integer integer : evennum ) { sum1 = sum1 + integer ; } if ( sum1 % 2 == 0 ) { System . out . println ( 0 ) ; } else { System . out . println ( sum1 ) ; } }     }   static int countSetBits ( int n ) { int count = 0 ; while ( n > 0 ) { count += n & 1 ; n >>= 1 ; } return count ; }   public List < Integer > getDivisors ( int n ) { List < Integer > list = new ArrayList < > ( ) ; for ( int d = 2 ; d * d <= n ; d ++ ) { while ( n % d == 0 ) { list . add ( d ) ; n \/= d ; } } if ( n > 1 ) { list . add ( n ) ; } return list ; }   public int lcm ( int n1 , int n2 ) { int gcd = 1 ; for ( int i = 1 ; i <= n1 && i <= n2 ; ++ i ) {"],"bleu":0.04531353128236547,"rouge_l":0.2915740329035127}
{"id":373,"predictions":["import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; } public static long mod = 17352642619633L ; void run ( FastScanner in , PrintWriter out ) {"],"references":["import java . util . * ; import java . io . * ;   public class cf_7 { public static void main ( String [ ] args ) { new Solution ( ) . solve ( ) ; } }   class Solution { private int [ ] [ ] dp ;   public void solve ( ) { FastScanner fs = new FastScanner ( ) ; int m = fs . nextInt ( ) , n = fs . nextInt ( ) ; String a = fs . next ( ) ; String b = fs . next ( ) ; dp = new int [ m ] [ n ] ;","import java . util . * ;   public class Main {   private static final Scanner sc = new Scanner ( System . in ) ;   public static void main ( String [ ] args ) { int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; char [ ] x = sc . next ( ) . toCharArray ( ) ; char [ ] y = sc . next ( ) . toCharArray ( ) ; int [ ] [ ] ans = new int [ n + 1 ] [ m + 1 ] ; int res = 0 ;   for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= m ; j ++ ) { if ( x [ i - 1 ] == y [ j - 1 ] ) ans [ i ] [ j ] = max ( 0 , ans [ i - 1 ] [ j - 1 ] + 2 ) ; else ans [ i ] [ j ] = max ( 0 , ans [ i - 1 ] [ j ] - 1 , ans [ i ] [ j - 1 ] - 1 ) ;   res = Math . max ( res , ans [ i ] [ j ] ) ; } }   System . out . println ( res ) ; }   private static int max ( int ... nums ) { int res = 0 ;   for ( int num : nums ) res = Math . max ( res , num ) ;   return res ; } }"],"bleu":0.38391612398168795,"rouge_l":0.49489266801883236}
{"id":374,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException {"],"references":["  import java . util . Arrays ; import java . util . HashSet ; import java . util . Scanner ; import java . util . Set ; import java . util . Vector ;   public class Javaweb {   public static void main ( String [ ] args ) {","   import java . util . Arrays ; import java . util . HashSet ; import java . util . Scanner ; import java . util . Set ;   public class Javaweb {   public static void main ( String [ ] args ) {","import java . util . * ; import java . util . stream . Collectors ; import java . lang . * ; import java . io . * ; public class Problem { public static void main ( String [ ] args ) throws java . lang . Exception { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; Map < Integer , Integer > map = new TreeMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int key = sc . nextInt ( ) ; if ( map . containsKey ( key ) ) map . replace ( key , map . get ( key ) + 1 ) ; else map . put ( key , 1 ) ; } Map < Integer , Integer > sorted = map . entrySet ( ) . stream ( ) . sorted ( Map . Entry . comparingByValue ( ) ) . collect ( Collectors . toMap ( Map . Entry :: getKey , Map . Entry :: getValue , ( oldValue , newValue ) -> oldValue , TreeMap :: new ) ) ; List < Integer > keys = new ArrayList < Integer > ( sorted . keySet ( ) ) ;"],"bleu":0.5819912988389689,"rouge_l":0.6494988059565276}
{"id":375,"predictions":["import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;"],"references":["import java . util . * ; import java . io . * ; public class Divisibility { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; int t = s . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int a = s . nextInt ( ) ; int b = s . nextInt ( ) ; int c = a - ( a % b ) ; if ( a % b == 0 ) { System . out . println ( 0 ) ; } else { System . out . println ( ( c + b ) - a ) ; } } } }","  import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . ArrayList ; import java . util . Stack ; import java . util . StringTokenizer ;   public class Solution { static class FastIO { BufferedReader br ; StringTokenizer st ;   public FastIO ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; }   String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   long nextLong ( ) { return Long . parseLong ( next ( ) ) ; }   double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; }   String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } FastIO fastIO = new FastIO ( ) ; public static void main ( String [ ] args ) { new Solution ( ) . solve ( ) ; }   public void solve ( ) { int t = fastIO . nextInt ( ) ; StringBuilder strb = new StringBuilder ( ) ; while ( t -- > 0 ) { int a = fastIO . nextInt ( ) ; int b = fastIO . nextInt ( ) ;   int ans = 0 ; if ( a % b > 0 ) ans = b - ( a % b ) ; strb . append ( ans ) . append ( ' \\n ' ) ; } System . out . println ( strb . toString ( ) ) ; }    }","import java . util . * ; import java . io . * ; public class Main { static class FastReader { BufferedReader br ; StringTokenizer st ; public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } public static void main ( String [ ] args ) { FastReader objScanner = new FastReader ( ) ; int t = objScanner . nextInt ( ) ; while ( t -- > 0 ) { long a = objScanner . nextLong ( ) ; long b = objScanner . nextLong ( ) ; if ( a < b ) { System . out . println ( b - a ) ; } else if ( a % b == 0 ) { System . out . println ( \"0\" ) ; } else if ( a % b != 0 ) { System . out . println ( b - ( a % b ) ) ; } } }   }","import java . util . * ;   public class test { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int testCase = scanner . nextInt ( ) ; for ( int i = 0 ; i < testCase ; i ++ ) { int a = scanner . nextInt ( ) ; int b = scanner . nextInt ( ) ; if ( a % b == 0 ) { System . out . println ( 0 ) ; } else System . out . println ( b - ( a % b ) ) ; } }   }"],"bleu":0.1695089371910879,"rouge_l":0.2731283988407307}
{"id":376,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . io . * ; import java . util . * ; import java . math . * ;   public class Main { public static void main ( String [ ] args ) throws java . lang . Exception { Reader pm = new Reader ( ) ;","import java . util . Scanner ; public class cf { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) , cnt = 1 ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = sc . nextInt ( ) ; for ( int i = n - 1 ; i > 0 ; i -- ) { if ( a [ i - 1 ] < a [ i ] ) cnt ++ ; else break ; } System . out . println ( n - cnt ) ; } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;   public class Multithreading { public static void main ( String [ ] args ) { FastReader fs = new FastReader ( ) ; StringBuilder sb = new StringBuilder ( ) ; int t = fs . nextInt ( ) ; int [ ] arr = new int [ t ] ; for ( int tt = 0 ; tt < t ; tt ++ ) { arr [ tt ] = fs . nextInt ( ) ; } for ( int i = t - 1 ; i >= 1 ; i -- ) { if ( arr [ i - 1 ] > arr [ i ] ) { System . out . println ( i ) ; return ; } } System . out . println ( 0 ) ; }   static class FastReader { BufferedReader br ; StringTokenizer st ; public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; }   String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   long nextLong ( ) { return Long . parseLong ( next ( ) ) ; }   double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; }   float nextFloat ( ) { return Float . parseFloat ( next ( ) ) ; } } }"],"bleu":0.6262567483534697,"rouge_l":0.611111111111111}
{"id":377,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ;   public class questionCF {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; int z = sc . nextInt ( ) ; int g = sc . nextInt ( ) ; int p = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; if ( g >= x ) { g = g - x ; if ( ( g + p ) >= y ) { int total = ( g + p ) - y ; if ( ( total + b ) >= z ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ; } else System . out . println ( \" NO \" ) ; } else System . out . println ( \" NO \" ) ; } }","import java . util . Scanner ;   public class gotanygrapes1114A { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int x = input . nextInt ( ) ; int y = input . nextInt ( ) ; int z = input . nextInt ( ) ; input . nextLine ( ) ; int a = input . nextInt ( ) ; int b = input . nextInt ( ) ; int c = input . nextInt ( ) ; input . close ( ) ; boolean possible = false ; if ( a >= x ) { a = a - x ; } else { System . out . println ( \" NO \" ) ; System . exit ( 0 ) ; } int remaining = a + b + c ; if ( a + b >= y ) { remaining = remaining - y ; } else { System . out . println ( \" NO \" ) ; System . exit ( 0 ) ; } if ( remaining >= z ) { System . out . println ( \" YES \" ) ; } else { System . out . println ( \" NO \" ) ; } } }","import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;  ","import java . util . * ; public class Main { public static void main ( String [ ] args ) { int x , y , z , a , b , c ; boolean flag = false ; Scanner reader = new Scanner ( System . in ) ; x = reader . nextInt ( ) ; y = reader . nextInt ( ) ; z = reader . nextInt ( ) ; a = reader . nextInt ( ) ; b = reader . nextInt ( ) ; c = reader . nextInt ( ) ; if ( a - x < 0 || a + b - x < y ) flag = true ; int t = a + b - x - y ; if ( t + c < z ) flag = true ; if ( flag ) System . out . println ( \" NO \" ) ; else System . out . println ( \" YES \" ) ; } }"],"bleu":0.6022774485691839,"rouge_l":0.5586838534599728}
{"id":378,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ;   public class Main { static long mod = 1000000007L ; public static void main ( String args [ ] ) { FastScanner input = new FastScanner ( ) ; int n = input . nextInt ( ) ; int m = input . nextInt ( ) ; int row [ ] = new int [ n ] ; int col [ ] = new int [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { row [ i ] = input . nextInt ( ) ; } for ( int i = 0 ; i < m ; i ++ ) { col [ i ] = input . nextInt ( ) ; } long ans = 1 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( row [ i ] == j && col [ j ] > i || ( col [ j ] == i && row [ i ] > j ) ) { System . out . println ( \"0\" ) ; return ; } else if ( col [ j ] < i && row [ i ] < j ) { ans *= 2 ; ans = ans % mod ; } } } System . out . println ( ans ) ; }        static class FastScanner {   BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( \" \" ) ;   String next ( ) { while ( ! st . hasMoreTokens ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   long nextLong ( ) {   return Long . parseLong ( next ( ) ) ; }   double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; }   String nextLine ( ) throws IOException { return br . readLine ( ) ; } }   }","import java . io . * ; import java . math . * ; import java . util . * ; import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . PrintWriter ;   public class RoughBackup {   static Scanner scn = new Scanner ( System . in ) ;   public static void main ( String [ ] args ) throws Exception { int h = scn . nextInt ( ) ;","import java . io . * ; import java . math . * ; import java . util . * ; import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . PrintWriter ;   public class RoughBackup {   static Scanner scn = new Scanner ( System . in ) ;   public static void main ( String [ ] args ) throws Exception { int h = scn . nextInt ( ) ;","  import java . util . * ; import java . lang . * ; import java . io . * ;   public class Codechef { public static void main ( String [ ] args ) throws java . lang . Exception { Scanner sc = new Scanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; int r = sc . nextInt ( ) , c = sc . nextInt ( ) ; int arr [ ] [ ] = new int [ r ] [ c ] ; List < Integer > list = new ArrayList ( ) ; boolean ok = true ; for ( int i = 0 ; i < r ; i ++ ) { int a = sc . nextInt ( ) ; list . add ( a ) ; for ( int j = 0 ; j <= a - 1 ; j ++ ) arr [ i ] [ j ] = 1 ; if ( a != c ) arr [ i ] [ a ] = 2 ; } long mod = 1000000007 ; for ( int i = 0 ; i < c ; i ++ ) { int a = sc . nextInt ( ) ; for ( int j = 0 ; j <= a - 1 ; j ++ ) { if ( arr [ j ] [ i ] == 2 ) { ok = false ; } arr [ j ] [ i ] = 1 ; } if ( a != r ) { if ( arr [ a ] [ i ] == 1 ) { ok = false ; } arr [ a ] [ i ] = 2 ; } } long cnt = 1 ; for ( int i = 0 ; i < r ; i ++ ) { for ( int j = 0 ; j < c ; j ++ ) {"],"bleu":0.4354424862384965,"rouge_l":0.5486028914440311}
{"id":379,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . ArrayList ; import java . util . Collections ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import java . util . StringTokenizer ; import java . util . TreeMap ;   public class Main implements Runnable { int n , m , k ; static boolean use_n_tests = false ;   void solve ( FastScanner in , PrintWriter out , int testNumber ) { n = in . nextInt ( ) ; k = in . nextInt ( ) ; int [ ] a = in . nextArray ( n ) ; int ans = Integer . MAX_VALUE ; List < Integer > ls = new ArrayList < > ( ) ; for ( int h = 1 ; h <= 1000 ; h ++ ) { int c = 0 ; int hk = h ; List < Integer > ls1 = new ArrayList < > ( ) ; for ( int j = 0 ; j < n ; j ++ ) { if ( a [ j ] != hk ) { c ++ ; if ( hk < a [ j ] ) { ls1 . add ( 1 ) ; } else { ls1 . add ( 0 ) ; } ls1 . add ( j + 1 ) ; ls1 . add ( Math . abs ( a [ j ] - hk ) ) ; } hk += k ; } if ( c < ans ) { ans = c ; ls = ls1 ; } } out . println ( ans ) ; for ( int i = 0 ; i < ls . size ( ) ; i += 3 ) { if ( ls . get ( i ) == 1 ) { out . print ( \" - ▁ \" ) ; } else { out . print ( \" + ▁ \" ) ; } out . println ( ls . get ( i + 1 ) + \" ▁ \" + ls . get ( i + 2 ) ) ; } }  ","import java . io . * ; import java . util . * ; import java . math . * ;   public class Main { public static void main ( String [ ] args ) throws java . lang . Exception { Reader pm = new Reader ( ) ;"],"bleu":0.6606328636027614,"rouge_l":0.6154708520179372}
{"id":380,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . HashSet ; import java . util . Scanner ;   public class A1325 { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int t = scanner . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int n = scanner . nextInt ( ) ; HashSet < Integer > set = new HashSet < > ( ) ; for ( int j = 0 ; j < n ; j ++ ) { int k = scanner . nextInt ( ) ; set . add ( k ) ; } System . out . println ( set . size ( ) ) ;   } } }","import java . util . HashSet ; import java . util . Scanner ;   public class fifteen {   public static void main ( String [ ] args ) {","import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; while ( n -- > 0 ) { int x = sc . nextInt ( ) ; int arr [ ] = new int [ x ] ; for ( int i = 0 ; i < x ; i ++ ) arr [ i ] = sc . nextInt ( ) ; Arrays . sort ( arr ) ; int count = 0 ; for ( int i = 1 ; i < x ; i ++ ) { if ( arr [ i ] > arr [ i - 1 ] ) { count ++ ; } } System . out . println ( count + 1 ) ; } } }","import java . util . HashSet ; import java . util . Scanner ;   public class CopyCopyCopyCopyCopy {   public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; int test = s . nextInt ( ) ; for ( int x = 0 ; x < test ; x ++ ) { int a = s . nextInt ( ) ; HashSet < Integer > set = new HashSet < Integer > ( ) ; for ( int i = 0 ; i < a ; i ++ ) { set . add ( s . nextInt ( ) ) ; } System . out . println ( set . size ( ) ) ; } } }"],"bleu":0.3047499664220833,"rouge_l":0.527466937945066}
{"id":381,"predictions":["import java . io . * ; import java . util . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) throws java . lang . Exception { Reader pm = new Reader ( ) ;"],"references":["import java . util . * ; import java . io . * ; import java . math . BigInteger ; public class Little_Elephant_and_Interval { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter pw = new PrintWriter ( System . out ) ;   int t = 1 ;   while ( t -- > 0 ) {   String str [ ] = br . readLine ( ) . trim ( ) . split ( \" ▁ \" ) ; BigInteger a = giveme ( Long . parseLong ( str [ 1 ] ) ) ;   BigInteger b = giveme ( Long . parseLong ( str [ 0 ] ) - 1 ) ; BigInteger c = a . add ( new BigInteger ( \" - \" + b . toString ( ) ) ) ; pw . println ( c . toString ( ) ) ; } pw . flush ( ) ; }   public static BigInteger giveme ( long x ) {","import java . util . * ; import java . io . * ; import java . math . * ;   public class x204A { public static void main ( String omkar [ ] ) throws Exception { BufferedReader infile = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( infile . readLine ( ) ) ; long A = Long . parseLong ( st . nextToken ( ) ) ; long B = Long . parseLong ( st . nextToken ( ) ) ; System . out . println ( calc ( B ) - calc ( A - 1 ) ) ; } public static long calc ( long B ) { if ( B < 10 ) return B ; long res = B \/ 10 + 8 ; String lol = B + \" \" ; if ( lol . charAt ( 0 ) <= lol . charAt ( lol . length ( ) - 1 ) ) res ++ ; return res ; } }","import java . io . * ; import java . util . * ;   public class p39 { static class FastReader { BufferedReader br ; StringTokenizer st ;   public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; }   String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   long nextLong ( ) { return Long . parseLong ( next ( ) ) ; }   double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; }   String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } }   static int [ ] length ( long num ) { int n = 0 ; long temp = num ; while ( num > 0 ) { n ++ ; num \/= 10L ; } int [ ] res = new int [ n ] ; while ( temp > 0 ) { res [ -- n ] = ( int ) ( temp % 10L ) ; temp \/= 10 ; } return res ; }   public static void main ( String [ ] args ) { FastReader sc = new FastReader ( ) ; long l = sc . nextLong ( ) ; long r = sc . nextLong ( ) ; long res = 0 ; int [ ] arr1 = length ( l ) , arr2 = length ( r ) ; int lenl = arr1 . length , lenr = arr2 . length ;   if ( lenl != lenr ) { for ( int k = lenl + 1 ; k < lenr ; k ++ ) { res += 9L * ( long ) Math . pow ( 10 , k - 2 ) ; }  ","import java . util . Scanner ;   public class A {   public static int MOD = 1_000_000_007 ; public static void main ( String [ ] args ) {   Scanner scanner = new Scanner ( System . in ) ; long l = scanner . nextLong ( ) ; long r = scanner . nextLong ( ) ; long L = Interval ( l - 1 ) ; long R = Interval ( r ) ;","import java . io . * ; import java . util . * ; import java . lang . * ; import java . math . * ; import java . text . DecimalFormat ; import java . lang . reflect . Array ; import java . io . BufferedOutputStream ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . math . BigDecimal ; public class B { public static PrintWriter out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ;"],"bleu":0.4568255209616831,"rouge_l":0.42066064409351084}
{"id":382,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { ans += b [ i ] ; } } System . out . println ( ans ) ; } }"],"references":["import java . util . Scanner ; public class B1391 { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int T = in . nextInt ( ) ; for ( int t = 0 ; t < T ; t ++ ) { int R = in . nextInt ( ) ; int C = in . nextInt ( ) ; char [ ] [ ] A = new char [ R ] [ ] ; for ( int r = 0 ; r < R ; r ++ ) { A [ r ] = in . next ( ) . toCharArray ( ) ; } int answer = 0 ; for ( int r = 0 ; r < R ; r ++ ) { if ( A [ r ] [ C - 1 ] == ' R ' ) { answer ++ ; } } for ( int c = 0 ; c < C ; c ++ ) { if ( A [ R - 1 ] [ c ] == ' D ' ) { answer ++ ; } } System . out . println ( answer ) ; } } }","import java . util . * ; import java . io . * ; public class CodeChef { public static int gcd ( int a , int b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; } public static int fact ( int n ) { int fact = 1 ; for ( int i = 1 ; i <= n ; i ++ ) fact *= i ; return fact ; } public static boolean isPrime ( int n ) { for ( int i = 2 ; i <= Math . sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { return false ; } } return true ; } public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int t = Integer . parseInt ( br . readLine ( ) ) ; while ( t -- > 0 ) { String s [ ] = br . readLine ( ) . split ( \" ▁ \" ) ; int n = Integer . parseInt ( s [ 0 ] ) , m = Integer . parseInt ( s [ 1 ] ) ; int count = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { String st = br . readLine ( ) ; if ( st . charAt ( m - 1 ) == ' R ' ) count ++ ; } String st = br . readLine ( ) ; for ( int i = 0 ; i < m ; i ++ ) { if ( st . charAt ( i ) == ' D ' ) count ++ ; } System . out . println ( count ) ; } } }","import java . util . * ; public class Test { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int t = input . nextInt ( ) ; while ( t -- > 0 ) { int n = input . nextInt ( ) ; int m = input . nextInt ( ) ; char [ ] [ ] grid = new char [ n ] [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { grid [ i ] = input . next ( ) . toCharArray ( ) ; } int result = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( grid [ i ] [ m - 1 ] == ' R ' ) { result ++ ; } } for ( int i = 0 ; i < m ; i ++ ) { if ( grid [ n - 1 ] [ i ] == ' D ' ) { result ++ ; } } System . out . println ( result ) ; } } }"],"bleu":0.6009671371679222,"rouge_l":0.6611027608575271}
{"id":383,"predictions":["import java . io . * ; import java . util . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) throws java . lang . Exception { Reader pm = new Reader ( ) ;"],"references":["import java . util . Scanner ; public class sol { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) ; int k = in . nextInt ( ) ; String letters = \" abcdefghijklmnopqrstuvwxyz \" ; String password = \" \" ; int t = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( t < k ) password += letters . charAt ( t ) ; t ++ ; if ( t >= k ) { t = 0 ; } } System . out . println ( password ) ; } }","import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int l = ' a ' ; int unique = 0 ; String out = \" \" ; boolean flag = true ; while ( out . length ( ) < n ) { if ( unique < m ) { out += ( char ) l ; l ++ ; unique ++ ; } else { if ( flag ) { out += ' a ' ; } else { out += ' b ' ; } flag = ! flag ; } } System . out . println ( out ) ; } }","import java . util . * ; import java . io . * ; public class Main {   public static void main ( String [ ] args ) throws IOException { BufferedReader bf = new BufferedReader ( new InputStreamReader ( System . in ) ) ; String [ ] nk = bf . readLine ( ) . trim ( ) . split ( \" ▁ \" ) ;   int n = Integer . parseInt ( nk [ 0 ] ) ; int k = Integer . parseInt ( nk [ 1 ] ) ; char [ ] arr = new char [ n ] ; int i = 0 ; while ( i < n ) { arr [ i ] = ( char ) ( 97 + i % Math . min ( 26 , k ) ) ; i ++ ; } System . out . println ( arr ) ;   }   public static int lastOccurance ( int [ ] arr , int start , int end , int key ) { int res = - 1 ; while ( start <= end ) { int mid = start + ( end - start ) \/ 2 ;   if ( arr [ mid ] == key ) { res = mid ; start = mid + 1 ; } else if ( arr [ mid ] > key ) start = mid + 1 ; else if ( arr [ mid ] < key ) end = mid - 1 ; }   return res ; } public static int firstOccurance ( int [ ] arr , int start , int end , int key ) { int res = - 1 ; while ( start <= end ) { int mid = start + ( end - start ) \/ 2 ;   if ( arr [ mid ] == key ) { res = mid ; end = mid - 1 ; } else if ( arr [ mid ] > key ) start = mid + 1 ; else if ( arr [ mid ] < key ) end = mid - 1 ; }   return res ; }   }","import java . util . * ;   public class AWords {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int length = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; String password = \" \" ;   for ( int i = 0 ; i < length ; i ++ ) { password += ( char ) ( ( int ) ' a ' + i % k ) ; }   System . out . println ( password ) ; } }","import java . util . Scanner ; public class sol { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) ; int k = in . nextInt ( ) ; String letters = \" abcdefghijklmnopqrstuvwxyz \" ; String password = \" \" ; int t = 0 ; for ( int i = 0 ; i < n ; i ++ ) { password += letters . charAt ( t ) ; t ++ ; if ( t >= k ) { t = 0 ; } } System . out . println ( password ) ; } }"],"bleu":0.2273857600317689,"rouge_l":0.3342767674334578}
{"id":384,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . io . BufferedReader ; import java . io . BufferedWriter ; import java . io . FileNotFoundException ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . OutputStreamWriter ; import java . io . PrintWriter ; import java . util . Arrays ; import java . util . StringTokenizer ;   public class Main { public static void main ( String [ ] args ) throws FileNotFoundException { InputReader in = new InputReader ( System . in ) ; PrintWriter out = new PrintWriter ( new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ) ; TaskB solver = new TaskB ( ) ; solver . solve ( 1 , in , out ) ; out . flush ( ) ; out . close ( ) ; } }   class Pair implements Comparable < Pair > { int first ; int second ;   Pair ( int first , int second ) { this . first = first ; this . second = second ; }   @ Override public int compareTo ( Pair e ) { return Long . compare ( second , e . second ) ;   } }  "],"bleu":0.03532504191345018,"rouge_l":0.2725588491717524}
{"id":385,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; for ( int i = 0 ; i <= N ; i ++ ) { for ( int j = 0 ; j < 2 * ( N - i ) ; j ++ ) { System . out . print ( \" ▁ \" ) ; } for ( int j = 0 ; j < i + 1 ; j ++ ) { System . out . print ( ( j == i ) ? j : j + \" ▁ \" ) ; } for ( int j = i - 1 ; j >= 0 ; j -- ) { System . out . print ( \" ▁ \" + j ) ; } System . out . println ( ) ; } for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < 2 * ( i + 1 ) ; j ++ ) { System . out . print ( \" ▁ \" ) ; } for ( int j = 0 ; j < N - i ; j ++ ) { System . out . print ( ( j == N - i - 1 ) ? j : j + \" ▁ \" ) ; } for ( int j = N - i - 2 ; j >= 0 ; j -- ) { System . out . print ( \" ▁ \" + j ) ; } System . out . println ( ) ; } } }","   import java . util . * ;    public class dummycodes { public static void createRhombus ( int n ) { int N = 2 * n ; int k = n ; int Vfac = n ; for ( int i = 0 ; i <= N ; i ++ , k -- , Vfac -- ) { int spaces = Math . abs ( k ) ; while ( spaces -- > 0 ) System . out . print ( \" ▁ ▁ \" ) ; int Hfac = i ; int max = n - Math . abs ( Vfac ) ;  ","import java . util . * ;   public class Example { static int [ ] dp ;   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ;","import java . util . * ;   public class Example { static int [ ] dp ;   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ;"],"bleu":0.24348455356536494,"rouge_l":0.46377123861117947}
{"id":386,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;  ","import java . util . * ; public class posiC { public static void main ( String [ ] args ) {","import java . util . Scanner ;   public class Solution { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; int a = s . nextInt ( ) ; int b = s . nextInt ( ) ; int c = s . nextInt ( ) ; System . out . println ( solve ( a , b , c ) ) ; }   private static int solve ( int a , int b , int c ) { int position = 1 ; for ( int i = 0 ; i < b ; i ++ ) { a = 10 * a ; int q = a \/ b ; a = a % b ; if ( q == c ) return position ; position ++ ; } return - 1 ; } }","import java . util . Scanner ;   public class B900 {   public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int A = in . nextInt ( ) ; int B = in . nextInt ( ) ; A %= B ; int C = in . nextInt ( ) ; int answer = - 1 ; for ( int i = 1 ; i <= B + 1 ; i ++ ) { A *= 10 ; int d = A \/ B ; A %= B ; if ( d == C ) { answer = i ; break ; } } System . out . println ( answer ) ; }   }"],"bleu":0.6101325231431937,"rouge_l":0.5586838534599728}
{"id":387,"predictions":["import java . io . * ; import java . util . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) throws java . lang . Exception { Reader pm = new Reader ( ) ;"],"references":["import java . io . * ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; import java . util . StringTokenizer ; public class realfast implements Runnable { private static final int INF = ( int ) 1e9 ; long in = ( long ) Math . pow ( 10 , 9 ) + 7 ; public void solve ( ) throws IOException {   int n = readInt ( ) ; int k = readInt ( ) ; String a = readString ( ) ; String b = readString ( ) ;   int i = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( a . charAt ( i ) != b . charAt ( i ) ) break ; }   long count = i ; long match [ ] = new long [ n ] ; long val = 0 ; if ( i < n ) match [ i ] ++ ;   for ( int j = i + 1 ; j < n ; j ++ ) { val = 2 * val ;   if ( a . charAt ( j ) == ' a ' ) val ++ ; val = Math . min ( val , k ) ; match [ j ] = match [ j ] + val + 1 ; } if ( i < n ) match [ i ] ++ ; val = 0 ;   for ( int j = i + 1 ; j < n ; j ++ ) { val = 2 * val ;   if ( b . charAt ( j ) == ' b ' ) val ++ ; val = Math . min ( val , k ) ; match [ j ] = match [ j ] + val + 1 ; }   for ( int j = i ; j < n ; j ++ ) count = count + Math . min ( k , match [ j ] ) ;   out . println ( count ) ; }","import javax . swing . plaf . basic . BasicInternalFrameTitlePane ; import java . io . * ; import java . math . * ; import java . nio . Buffer ; import java . sql . SQLSyntaxErrorException ; import java . util . * ; import java . text . * ; import java . util . stream . Collectors ;   public class Main { public static BigInteger a , b , c ;   public static void main ( String [ ] args ) { Scanner cin = new Scanner ( System . in ) ;   int n = cin . nextInt ( ) ; int k = cin . nextInt ( ) ; char [ ] s = cin . next ( ) . toCharArray ( ) ; char [ ] t = cin . next ( ) . toCharArray ( ) ; long [ ] dp = new long [ n + 1 ] ; dp [ 0 ] = 1L ; long c = 0L ; for ( int i = 1 ; i <= n ; ++ i ) { dp [ i ] = 2L * dp [ i - 1 ] ; if ( s [ i - 1 ] == ' b ' ) -- dp [ i ] ; if ( t [ i - 1 ] == ' a ' ) -- dp [ i ] ; if ( dp [ i ] >= k ) { c += 1l * k * ( n - i + 1 ) ; break ; } c += dp [ i ] ; } System . out . println ( c ) ;   }    }  ","import java . util . * ; import java . math . * ;   public class Main { public static void main ( String ards [ ] ) { Scanner cin = new Scanner ( System . in ) ; int n = cin . nextInt ( ) ; long k = cin . nextLong ( ) ; String a = cin . next ( ) ; String b = cin . next ( ) ; long now = 1 , ans = 0 ; if ( k == 1 ) { System . out . println ( n ) ; return ; } for ( int i = 0 ; i < n ; i ++ ) { now *= 2 ; if ( a . charAt ( i ) != ' a ' ) now -- ; if ( b . charAt ( i ) != ' b ' ) now -- ; now = Math . min ( now , k ) ; ans += now ; } System . out . println ( ans ) ; } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . Arrays ; import java . util . Random ; import java . util . StringTokenizer ;   public class Solution { public static void main ( String [ ] args ) throws IOException { FastScanner fs = new FastScanner ( ) ; PrintWriter out = new PrintWriter ( System . out ) ; int tt = 1 ; while ( tt -- > 0 ) { int n = fs . nextInt ( ) ; long k = fs . nextLong ( ) ; char [ ] s = fs . next ( ) . toCharArray ( ) ; char [ ] t = fs . next ( ) . toCharArray ( ) ; if ( k == 1 ) { out . println ( n ) ; out . flush ( ) ; return ; } long ans = 0 ; long cur = 1 ; for ( int i = 0 ; i < n ; i ++ ) { cur *= 2 ; if ( s [ i ] == ' b ' ) cur -- ; if ( t [ i ] == ' a ' ) cur -- ; cur = Math . min ( cur , k ) ; ans += cur ; } out . println ( ans ) ; } out . close ( ) ; }   static final Random random = new Random ( ) ; static < T > void shuffle ( T [ ] arr ) { int n = arr . length ; for ( int i = 0 ; i < n ; i ++ ) { int k = random . nextInt ( n ) ; T temp = arr [ k ] ; arr [ k ] = arr [ i ] ; arr [ i ] = temp ; } } static void ruffleSort ( int [ ] a ) { int n = a . length ;"],"bleu":0.05586219590485392,"rouge_l":0.2720147916879927}
{"id":388,"predictions":["import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;"],"references":["import java . util . Scanner ; public class test43 { public static long testCase43 ( long k , long a , long b ) { long result = 0 ; if ( ( a == 0 && b == 0 ) || ( a == b && a % k == 0 ) ) result = 1 ; else if ( ( b > 0 && a > 0 ) || ( b < 0 && a < 0 ) ) { if ( ( a % k == 0 || b % k == 0 ) && k != 1 ) { result = ( b - a ) \/ k + 1 ; } else result = ( b - a + 1 ) \/ k ; } else if ( a == 0 && b > 0 ) result = ( b \/ k ) + 1 ; else if ( ( b == 0 && a < 0 ) ) result = ( - a \/ k ) + 1 ; else if ( a < 0 && b > 0 ) result = ( b \/ k ) + ( - a \/ k ) + 1 ; return result ; } public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; long k = input . nextLong ( ) ; long a = input . nextLong ( ) ; long b = input . nextLong ( ) ; System . out . println ( testCase43 ( k , a , b ) ) ; } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ;    public class Main {   public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; String [ ] temp = br . readLine ( ) . split ( \" ▁ \" ) ; long k = Long . parseLong ( temp [ 0 ] ) ; long a = Long . parseLong ( temp [ 1 ] ) ; long b = Long . parseLong ( temp [ 2 ] ) ; if ( a < 0 && b < 0 ) { long t = a ; a = - b ; b = - t ; } if ( a % k == 0 || a <= 0 ) System . out . println ( ( long ) ( b \/ k ) - ( long ) ( a \/ k ) + 1 ) ; else System . out . println ( ( long ) ( b \/ k ) - ( long ) ( a \/ k ) ) ; } }","import java . util . Scanner ; public class test { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String x = sc . nextLine ( ) ; String [ ] num = x . split ( \" ▁ \" ) ;"],"bleu":0.417085144497176,"rouge_l":0.2927279438907346}
{"id":389,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . io . * ; import java . util . * ; import java . math . * ; import java . lang . * ;   ","import java . io . * ; import java . util . * ; import java . math . * ; import java . lang . * ;","import java . util . * ; import java . io . * ; import java . math . * ; public class Main { static PrintWriter out ; static Reader in ; public static void main ( String [ ] args ) throws IOException {","  import java . io . * ; import java . util . * ;   public class GFG { public static void main ( String [ ] args ) {","import java . util . * ; public class SetString {   public static void main ( String [ ] args ) {"],"bleu":0.3508293135089642,"rouge_l":0.6245518477661334}
{"id":390,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException {"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;   public class FilyaAndHomework { public static void main ( String [ ] args ) { FastReader fs = new FastReader ( ) ; StringBuilder sb = new StringBuilder ( ) ; int t = fs . nextInt ( ) ; int a = - 1 , b = - 1 , c = - 1 ; for ( int tt = 0 ; tt < t ; tt ++ ) { int curr = fs . nextInt ( ) ; if ( a == - 1 ) a = curr ; else if ( b == - 1 && curr != a ) b = curr ; else if ( c == - 1 && curr != a && curr != b ) c = curr ; else if ( curr != a && curr != b && curr != c ) { System . out . println ( \" NO \" ) ; return ; } } if ( c == - 1 ) { System . out . println ( \" YES \" ) ; return ; } else { if ( ( ( a + b ) \/ 2 == c && ( a + b ) % 2 == 0 ) || ( ( a + c ) \/ 2 == b && ( a + c ) % 2 == 0 ) || ( ( b + c ) \/ 2 == a && ( b + c ) % 2 == 0 ) ) { System . out . println ( \" YES \" ) ; } else { System . out . println ( \" NO \" ) ; } } }   static class FastReader { BufferedReader br ; StringTokenizer st ; public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; }   String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   long nextLong ( ) { return Long . parseLong ( next ( ) ) ; }   double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; }   float nextFloat ( ) { return Float . parseFloat ( next ( ) ) ; } } }","import java . util . Arrays ; import java . util . Scanner ;   public class SortyEqualizer { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ;   int n = scan . nextInt ( ) ; int [ ] a = new int [ n ] ;   for ( int i = 0 ; i < n ; i ++ ) a [ i ] = scan . nextInt ( ) ;   Arrays . sort ( a ) ;   int change = 0 , x = 0 ;   for ( int i = 1 ; i < n ; i ++ ) { if ( a [ i ] != a [ i - 1 ] ) { if ( change == 0 ) { x = a [ i ] - a [ i - 1 ] ; } else { if ( a [ i ] - a [ i - 1 ] != x ) { System . out . println ( \" NO \" ) ; return ; } } change ++ ; } } if ( change > 2 ) System . out . println ( \" NO \" ) ; else System . out . println ( \" YES \" ) ; } }","import java . util . * ; import java . util . Scanner ; import java . io . * ; import javax . lang . model . util . ElementScanner6 ; import static java . lang . System . out ;    public class B714 {   public static void main ( String args [ ] ) {   FastReader in = new FastReader ( ) ; PrintWriter pr = new PrintWriter ( new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ) ; int tc = 1 ;"],"bleu":0.12363869465793896,"rouge_l":0.39080438790223954}
{"id":391,"predictions":["import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; } public static long mod = 17352642619633L ; void run ( FastScanner in , PrintWriter out ) {"],"references":["import java . io . * ; import java . util . * ; import java . math . * ;   public class Main { static final Random random = new Random ( ) ; static PrintWriter out = new PrintWriter ( ( System . out ) ) ; static Reader sc = new Reader ( ) ;   public static void main ( String args [ ] ) throws IOException {","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;   public class D {   public static void main ( String [ ] args ) { FastScanner fs = new FastScanner ( ) ; System . out . println ( \" Karen \" ) ; }   static class FastScanner { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( \" \" ) ; public String next ( ) { while ( ! st . hasMoreElements ( ) ) try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } int [ ] readArray ( int n ) { int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = nextInt ( ) ; return a ; } } }","import java . util . * ;   public class A869 { public static void main ( String [ ] args ) { System . out . println ( \" Karen \" ) ; } }"],"bleu":0.5521216853648634,"rouge_l":0.7285779316025637}
{"id":392,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ;"],"references":["import java . io . * ; import java . util . Arrays ; import java . util . StringTokenizer ;   public class main897 { public static PrintWriter out = new PrintWriter ( System . out ) ; public static FastScanner enter = new FastScanner ( System . in ) ; public static int [ ] arr ;   public static void main ( String [ ] args ) throws IOException { int n = enter . nextInt ( ) ;","import java . io . * ; import java . util . Arrays ; import java . util . StringTokenizer ;   public class main897 { public static PrintWriter out = new PrintWriter ( System . out ) ; public static FastScanner enter = new FastScanner ( System . in ) ; public static int [ ] arr ;   public static void main ( String [ ] args ) throws IOException { int n = enter . nextInt ( ) ;","import sys   n , m , c = map ( int , input ( ) . split ( ) ) a = [ ] for i in range ( n + 1 ) : a . append ( 0 ) cnt = 0 while cnt < n : i = 0 x = int ( input ( ) ) if x * 2 <= c : i = 1 while a [ i ] and a [ i ] <= x : i += 1 else : i = n while a [ i ] and a [ i ] >= x : i -= 1 if a [ i ] == 0 : cnt += 1 a [ i ] = x print ( i ) sys . stdout . flush ( )"],"bleu":0.4300345644297617,"rouge_l":0.5206648697214735}
{"id":393,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ;"],"references":["import java . util . * ;   public class CodeForces1009B { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; String s = input . nextLine ( ) ; String a = \" \" ; int i = 0 ; while ( i < s . length ( ) && s . charAt ( i ) != '2' ) { char ch = s . charAt ( i ) ; if ( ch == '0' ) System . out . print ( ch ) ; i ++ ; } for ( int j = 0 ; j < s . length ( ) ; j ++ ) { char ch = s . charAt ( j ) ; if ( ch == '1' ) { System . out . print ( ch ) ; } } while ( i < s . length ( ) ) { char ch = s . charAt ( i ) ; if ( ch != '1' ) System . out . print ( ch ) ; i ++ ; }   } }"],"bleu":0.05040987909102708,"rouge_l":0.2888257575757575}
{"id":394,"predictions":["import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; } public static long mod = 17352642619633L ; void run ( FastScanner in , PrintWriter out ) {"],"references":["import java . util . * ;   public class Main {   public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String s1 = scanner . nextLine ( ) ; String s2 = scanner . nextLine ( ) ; String s3 = scanner . nextLine ( ) ;    int v1 = 0 , v2 = 0 , v3 = 0 ; for ( int i = 0 ; i < s1 . length ( ) ; i ++ ) { if ( s1 . charAt ( i ) == ' a ' || s1 . charAt ( i ) == ' e ' || s1 . charAt ( i ) == ' i ' || s1 . charAt ( i ) == ' o ' || s1 . charAt ( i ) == ' u ' ) v1 ++ ; } for ( int i = 0 ; i < s2 . length ( ) ; i ++ ) { if ( s2 . charAt ( i ) == ' a ' || s2 . charAt ( i ) == ' e ' || s2 . charAt ( i ) == ' i ' || s2 . charAt ( i ) == ' o ' || s2 . charAt ( i ) == ' u ' ) v2 ++ ; } for ( int i = 0 ; i < s3 . length ( ) ; i ++ ) { if ( s3 . charAt ( i ) == ' a ' || s3 . charAt ( i ) == ' e ' || s3 . charAt ( i ) == ' i ' || s3 . charAt ( i ) == ' o ' || s3 . charAt ( i ) == ' u ' ) v3 ++ ; } if ( v1 == 5 && v2 == 7 && v3 == 5 ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ;   } }","import java . util . * ;   public class P3 { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s [ ] = new String [ 3 ] ; String s1 = sc . nextLine ( ) ; String s2 = sc . nextLine ( ) ; String s3 = sc . nextLine ( ) ; int sum1 = 0 ; int sum2 = 0 ; int sum3 = 0 ; for ( int i = 0 ; i < s1 . length ( ) ; i ++ ) { if ( s1 . charAt ( i ) == ' a ' || s1 . charAt ( i ) == ' e ' || s1 . charAt ( i ) == ' i ' || s1 . charAt ( i ) == ' o ' || s1 . charAt ( i ) == ' u ' ) { sum1 ++ ; } } for ( int i = 0 ; i < s2 . length ( ) ; i ++ ) { if ( s2 . charAt ( i ) == ' a ' || s2 . charAt ( i ) == ' e ' || s2 . charAt ( i ) == ' i ' || s2 . charAt ( i ) == ' o ' || s2 . charAt ( i ) == ' u ' ) { sum2 ++ ; } } for ( int i = 0 ; i < s3 . length ( ) ; i ++ ) { if ( s3 . charAt ( i ) == ' a ' || s3 . charAt ( i ) == ' e ' || s3 . charAt ( i ) == ' i ' || s3 . charAt ( i ) == ' o ' || s3 . charAt ( i ) == ' u ' ) { sum3 ++ ; } } if ( sum1 == 5 && sum2 == 7 && sum3 == 5 ) { System . out . println ( \" YES \" ) ; } else { System . out . println ( \" NO \" ) ; } } }","import java . util . * ;   public class question { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a [ ] = { 5 , 7 , 5 } , flag = 0 ; for ( int l = 0 ; l < 3 ; l ++ ) { String s = sc . nextLine ( ) ; String x = s ; int count = 0 ; for ( int i = 0 ; i < x . length ( ) ; i ++ ) { char ch = s . charAt ( i ) ; if ( ch == ' a ' || ch == ' e ' || ch == ' i ' || ch == ' o ' || ch == ' u ' ) count ++ ; } if ( count != a [ l ] ) { System . out . println ( \" NO \" ) ; flag ++ ; break ; } } if ( flag == 0 ) System . out . println ( \" YES \" ) ; } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . * ; public class C { static class FastScanner { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( \" \" ) ;   String next ( ) { while ( ! st . hasMoreTokens ( ) ) try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   int [ ] nextArray ( int n ) { int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = nextInt ( ) ; return a ; }   long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } } static class FastWriter extends PrintWriter { FastWriter ( ) { super ( System . out ) ; }   void println ( int [ ] array ) { for ( int i = 0 ; i < array . length ; i ++ ) { print ( array [ i ] + \" ▁ \" ) ; } println ( ) ; }   void println ( long [ ] array ) { for ( int i = 0 ; i < array . length ; i ++ ) { print ( array [ i ] + \" ▁ \" ) ; } println ( ) ; } } public static void main ( String [ ] args ) {"],"bleu":0.14541230591435442,"rouge_l":0.32529316107482276}
{"id":395,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["  import java . util . * ;   public class Absolutezero {    public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int n = sc . nextInt ( ) ; List < String > list = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { list . add ( sc . next ( ) ) ; } int c1 = 0 ; int c2 = 0 ; char ch1 = s . charAt ( 0 ) ; char ch2 = s . charAt ( 1 ) ; for ( String st : list ) { if ( st . equals ( s ) || ( st . charAt ( 1 ) == ch1 && st . charAt ( 0 ) == ch2 ) ) { System . out . println ( \" YES \" ) ; return ; } else if ( st . charAt ( 1 ) == ch1 ) { c1 ++ ; } else if ( st . charAt ( 0 ) == ch2 ) { c2 ++ ; }   if ( c1 >= 1 && c2 >= 1 ) { System . out . println ( \" YES \" ) ; return ; } } System . out . println ( \" NO \" ) ;     }   }   ","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . OutputStreamWriter ; import java . io . PrintWriter ;   public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter pw = new PrintWriter ( new OutputStreamWriter ( System . out ) ) ;   char [ ] password = br . readLine ( ) . trim ( ) . toCharArray ( ) ; int n = Integer . parseInt ( br . readLine ( ) . trim ( ) ) ; String [ ] words = new String [ n ] ; boolean [ ] exists = new boolean [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { words [ i ] = br . readLine ( ) . trim ( ) ; if ( words [ i ] . charAt ( 0 ) == password [ 0 ] && words [ i ] . charAt ( 1 ) == password [ 1 ] ) { exists [ 0 ] = true ; exists [ 1 ] = true ; } if ( words [ i ] . charAt ( 0 ) == password [ 1 ] ) { exists [ 0 ] = true ; } if ( words [ i ] . charAt ( 1 ) == password [ 0 ] ) { exists [ 1 ] = true ; } }   pw . println ( ( exists [ 0 ] && exists [ 1 ] ) ? \" YES \" : \" NO \" ) ;   pw . flush ( ) ; pw . close ( ) ; br . close ( ) ; } }","import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;  ","import java . util . * ;   public class Absolutezero {    public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int n = sc . nextInt ( ) ; List < String > list = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { list . add ( sc . next ( ) ) ; } int c1 = 0 ; int c2 = 0 ; char ch1 = s . charAt ( 0 ) ; char ch2 = s . charAt ( 1 ) ; for ( String st : list ) { if ( st . equals ( s ) || ( st . charAt ( 1 ) == ch1 && st . charAt ( 0 ) == ch2 ) ) { System . out . println ( \" YES \" ) ; return ; } else if ( st . charAt ( 1 ) == ch1 ) { c1 ++ ; } else if ( st . charAt ( 0 ) == ch2 ) { c2 ++ ; }   if ( c1 >= 1 && c2 >= 1 ) { System . out . println ( \" YES \" ) ; return ; } } System . out . println ( \" NO \" ) ;     }   }"],"bleu":0.6196287600257213,"rouge_l":0.6727941176470589}
{"id":396,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner teclado = new Scanner ( System . in ) ; long num = teclado . nextLong ( ) ; for ( int i = 0 ; i < num ; i ++ ) { long n = teclado . nextLong ( ) ; long m = teclado . nextLong ( ) ; long suma = 0 ; boolean interruptor = false ; for ( int j = 0 ; j < n ; j ++ ) { String x = String . valueOf ( teclado . nextLong ( ) ) ; if ( x == \" \" ) { interruptor = true ; break ; } long newX = Integer . parseInt ( x ) ; suma += newX ; } if ( suma == m ) System . out . println ( \" YES \" ) ; else if ( suma != m && ! interruptor ) System . out . println ( \" NO \" ) ; }   } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;   public class main {   public static void main ( String [ ] args ) throws IOException {","import java . io . BufferedReader ; import java . util . * ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . math . BigInteger ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collections ; import java . util . HashMap ; import java . util . HashSet ; import java . util . List ; import java . util . Map ; import java . util . PriorityQueue ; import java . util . Random ; import java . util . Set ; import java . util . StringTokenizer ;   public class C {    public static void func ( int n , int m , int arr [ ] ) {","import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int t = input . nextInt ( ) ; while ( t -- > 0 ) { int n = input . nextInt ( ) ; int m = input . nextInt ( ) ; int [ ] nums = new int [ n ] ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { nums [ i ] = input . nextInt ( ) ; sum += nums [ i ] ; } if ( sum == m ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ; } } }"],"bleu":0.6196287600257213,"rouge_l":0.6598218417399352}
{"id":397,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . io . BufferedOutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . InputMismatchException ;   public class FlexingOP2_E {   public static void solve ( ) { long w = s . nextLong ( ) ; long m = s . nextLong ( ) ; long k = s . nextLong ( ) ; long [ ] starts = new long [ 18 ] ; starts [ 1 ] = 10L ; for ( int i = 2 ; i < 18 ; i ++ ) { starts [ i ] = starts [ i - 1 ] * 10L ; } long [ ] ends = new long [ 18 ] ; ends [ 0 ] = 9 ; for ( int i = 1 ; i < 18 ; i ++ ) { ends [ i ] = ( ends [ i - 1 ] * 10L + 9L ) ; }","import java . io . InputStream ; import java . io . OutputStreamWriter ; import java . math . BigInteger ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . InputMismatchException ; import java . util . LinkedList ; import java . util . Queue ;   import javax . security . auth . callback . LanguageCallback ;   import java . io . BufferedWriter ; import java . io . IOException ;        public class Main { static long a , b , c , d , e , f , t , l , r , v , n , m , k , x , y , res = 0 , len , pow ; static StringBuilder sb , sb1 , sb2 ; static String s ; static long ar [ ] = new long [ 100009 ] ; static long cumu [ ] = new long [ 100009 ] ; static int dis [ ] [ ] = new int [ 9 ] [ 9 ] ;","import javafx . util . Pair ; import org . omg . Messaging . SYNC_WITH_TRANSPORT ;   import java . util . * ; import java . io . * ; import java . util . Collections ;   public class Main { public static long ans = 0 ; public static long get ( long a ) { long ret = 0 ; long now = 1 ; long t = 1 ; for ( ; ; ) { if ( now * 10 > a ) { ret += ( a - now + 1 ) * t ; break ; } ret += now * 9 * t ; now *= 10 ; t ++ ; } return ret ; } public static long binarySearch ( long k , long l , long r , long x ) { if ( r >= l ) { long mid = l + ( r - l ) \/ 2 ; if ( mid > ans && mid * k <= x ) ans = mid ;","import java . io . BufferedOutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . InputMismatchException ;   public class FlexingOP2_E {   public static void solve ( ) { long w = s . nextLong ( ) ; long m = s . nextLong ( ) ; long k = s . nextLong ( ) ; long [ ] starts = new long [ 18 ] ; starts [ 1 ] = 10L ; for ( int i = 2 ; i < 18 ; i ++ ) { starts [ i ] = starts [ i - 1 ] * 10L ; } long [ ] ends = new long [ 18 ] ; ends [ 0 ] = 9 ; for ( int i = 1 ; i < 18 ; i ++ ) { ends [ i ] = ( ends [ i - 1 ] * 10L + 9L ) ; }"],"bleu":0.06312951608486891,"rouge_l":0.308961038961039}
{"id":398,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . Scanner ;   public class Demo2 {   public static void main ( String [ ] args ) {   int n , t = 0 , sum = 0 , fin = 0 ; Scanner sc = new Scanner ( System . in ) ; n = sc . nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; sum += a [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { fin += a [ i ] ; if ( fin * 2 >= sum ) { t = i ; break ; } } System . out . println ( t + 1 ) ; }   }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;   public class CF962_D2_A { public static void main ( String [ ] args ) { FastScanner scanner = new FastScanner ( ) ; int n = scanner . nextInt ( ) ; int [ ] arr = scanner . nextArray ( n ) ; long sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } long sum2 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum2 += arr [ i ] ; if ( sum2 >= ( sum + 1 ) \/ 2 ) { System . out . println ( i + 1 ) ; return ; } }   }   static class FastScanner { BufferedReader br ; StringTokenizer st ;   public FastScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; }   String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   long nextLong ( ) { return Long . parseLong ( next ( ) ) ; }   double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; }   String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; }   int [ ] nextArray ( int n ) { int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = nextInt ( ) ; } return arr ; }   Integer [ ] nextArray ( int n , boolean object ) { Integer [ ] arr = new Integer [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = nextInt ( ) ; } return arr ; } } }"],"bleu":0.10866134747087354,"rouge_l":0.2031613448932121}
{"id":399,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException {"],"references":["import java . util . * ; public class asd { static Scanner s = new Scanner ( System . in ) ; public static void main ( String args [ ] ) { int t = 1 ; while ( t -- > 0 ) { solve ( ) ; } } static void solve ( ) { int n = s . nextInt ( ) ; String str = s . next ( ) ; if ( n % 2 == 0 ) { for ( int i = 0 ; i < str . length ( ) ; i ++ ) { if ( i % 2 == 0 && i != 0 ) System . out . print ( \" - \" + str . charAt ( i ) ) ; else System . out . print ( str . charAt ( i ) ) ; } } else { if ( n == 3 ) { System . out . print ( str . substring ( 0 , 3 ) ) ; return ; } System . out . print ( str . substring ( 0 , 3 ) ) ; for ( int i = 3 ; i < str . length ( ) ; i ++ ) { if ( i % 2 == 1 && i != 0 ) System . out . print ( \" - \" + str . charAt ( i ) ) ; else System . out . print ( str . charAt ( i ) ) ; } } } }","import java . io . * ;   public class Main { static int n ; static String str ; static BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; static BufferedWriter bw = new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ;   public static void main ( String [ ] args ) throws IOException { n = Integer . parseInt ( br . readLine ( ) ) ; str = br . readLine ( ) ; if ( n < 4 ) { bw . write ( str ) ; } else { int i , j = 0 ; if ( ( n & 1 ) == 1 ) { for ( i = 0 ; i < 3 ; ++ i ) { bw . write ( str . charAt ( i ) ) ; } bw . write ( \" - \" ) ;   } else { i = 0 ; } for ( ; i < n ; ++ i ) { bw . write ( str . charAt ( i ) ) ; if ( ++ j == 2 && i < n - 1 ) { bw . write ( \" - \" ) ; j = 0 ; } } } bw . close ( ) ; } }","import java . io . * ;   public class Main { static int n ; static String str ; static BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; static BufferedWriter bw = new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ;   public static void main ( String [ ] args ) throws IOException { n = Integer . parseInt ( br . readLine ( ) ) ; str = br . readLine ( ) ; if ( n < 4 ) { bw . write ( str ) ; } else { int i , j = 0 ; if ( ( n & 1 ) == 1 ) { for ( i = 0 ; i < 3 ; ++ i ) { bw . write ( str . charAt ( i ) ) ; } bw . write ( \" - \" ) ;   } else { i = 0 ; } for ( ; i < n ; ++ i ) { bw . write ( str . charAt ( i ) ) ; if ( ++ j == 2 && i < n - 1 ) { bw . write ( \" - \" ) ; j = 0 ; } } } bw . close ( ) ; } }","import java . util . * ; public class B_phoneNumbers {   public static void main ( String [ ] args ) {   Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; String s = input . next ( ) ; int len = s . length ( ) ; if ( len % 2 == 0 ) { for ( int i = 2 ; i < s . length ( ) ; i += 3 ) { StringBuilder s1 = new StringBuilder ( s ) ; s1 . insert ( i , ' - ' ) ; s = s1 . toString ( ) ; } } else { for ( int i = 3 ; i < s . length ( ) ; i += 3 ) { StringBuilder s1 = new StringBuilder ( s ) ; s1 . insert ( i , ' - ' ) ; s = s1 . toString ( ) ; } } System . out . println ( s ) ; }   }","import java . util . * ;   public class Solution { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ;   int n = s . nextInt ( ) ; String str = s . next ( ) ;   for ( int i = 0 ; i < n ; i ++ ) { if ( i > 0 && ( i & 1 ) == 0 && n - i >= 2 ) System . out . print ( ' - ' ) ; System . out . print ( str . charAt ( i ) ) ; }   s . close ( ) ; } }"],"bleu":0.048197828256352014,"rouge_l":0.24911879816223836}
{"id":400,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . ArrayDeque ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collections ; import java . util . HashMap ; import java . util . HashSet ; import java . util . Iterator ; import java . util . PriorityQueue ; import java . util . Random ; import java . util . StringTokenizer ; import java . util . TreeMap ;   public class Solution {   public static void main ( String [ ] args ) throws IOException { FastScanner fs = new FastScanner ( ) ; PrintWriter out = new PrintWriter ( System . out ) ; int tt = 1 ; while ( tt -- > 0 ) { char [ ] s = fs . next ( ) . toCharArray ( ) ; int n = s . length ; int [ ] cnt = new int [ 26 ] ; for ( int i = 0 ; i < n ; i ++ ) cnt [ s [ i ] - ' a ' ] ++ ; for ( int i = 0 ; i < 26 ; i ++ ) { if ( cnt [ i ] >= 100 ) { for ( int j = 0 ; j < 100 ; j ++ ) { out . print ( ( char ) ( ' a ' + i ) ) ; } out . flush ( ) ; return ; } } if ( n >= 2600 ) new RuntimeException ( ) ;","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . ArrayDeque ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collections ; import java . util . HashMap ; import java . util . HashSet ; import java . util . Iterator ; import java . util . PriorityQueue ; import java . util . Random ; import java . util . StringTokenizer ; import java . util . TreeMap ;   public class Solution {   static char [ ] s ; static int n ; static int [ ] [ ] cache ; public static void main ( String [ ] args ) throws IOException { FastScanner fs = new FastScanner ( ) ; PrintWriter out = new PrintWriter ( System . out ) ; int tt = 1 ; while ( tt -- > 0 ) { s = fs . next ( ) . toCharArray ( ) ; n = s . length ; int [ ] cnt = new int [ 26 ] ; for ( int i = 0 ; i < n ; i ++ ) cnt [ s [ i ] - ' a ' ] ++ ; for ( int i = 0 ; i < 26 ; i ++ ) { if ( cnt [ i ] >= 100 ) { for ( int j = 0 ; j < 100 ; j ++ ) { out . print ( ( char ) ( ' a ' + i ) ) ; } out . flush ( ) ; return ; } } if ( n >= 2600 ) new RuntimeException ( ) ;"],"bleu":0.009859301290036657,"rouge_l":0.22001752162242766}
{"id":401,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int t = 1 ;"],"references":["import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;  ","import java . util . * ; import java . util . Scanner ; import java . io . * ; import javax . lang . model . util . ElementScanner6 ; import static java . lang . System . out ;    public class B612 {   public static void main ( String args [ ] ) {   FastReader in = new FastReader ( ) ; PrintWriter pr = new PrintWriter ( new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ) ; int tc = 1 ;","import java . util . * ; import java . io . * ;   public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; int a [ ] = new int [ n ] ; long sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { a [ input . nextInt ( ) - 1 ] = i ; } for ( int i = 0 ; i < n - 1 ; i ++ ) { sum += Math . abs ( a [ i ] - a [ i + 1 ] ) ; } System . out . println ( sum ) ; } }"],"bleu":0.7507472811743496,"rouge_l":0.608446519524618}
{"id":402,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . StringTokenizer ; public class Cv {"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . ArrayDeque ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collections ; import java . util . HashMap ; import java . util . HashSet ; import java . util . PriorityQueue ; import java . util . Random ; import java . util . StringTokenizer ; import java . util . TreeMap ;   public class Solution { public static void main ( String [ ] args ) throws IOException { FastScanner fs = new FastScanner ( ) ; PrintWriter out = new PrintWriter ( System . out ) ; int tt = 1 ; while ( tt -- > 0 ) { int n = fs . nextInt ( ) ; int [ ] p = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { p [ i ] = fs . nextInt ( ) ; } Ftree ft = new Ftree ( n ) ; int inv = 0 ; for ( int i = n ; i > 0 ; i -- ) { inv += ft . query ( p [ i ] ) ; ft . update ( p [ i ] , 1 ) ; } int ans = inv % 2 + ( inv - inv % 2 ) * 2 ; out . println ( ans ) ; } out . close ( ) ; } static class Ftree { int [ ] bit ; int n ; Ftree ( int n ) { this . n = n ; bit = new int [ n + 1 ] ; } void update ( int ind , int val ) { while ( ind <= n ) { bit [ ind ] += val ; ind += ind & ( - ind ) ; } } int query ( int ind ) { int sum = 0 ; while ( ind > 0 ) { sum += bit [ ind ] ; ind -= ind & ( - ind ) ; } return sum ; } } static final Random random = new Random ( ) ; static void ruffleSort ( int [ ] a ) { int n = a . length ;","import java . io . * ; import java . util . * ;   public class MainClass { public static void main ( String [ ] args ) throws IOException { Reader in = new Reader ( ) ; int n = in . nextInt ( ) ; int [ ] A = new int [ n ] ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) A [ i ] = in . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { if ( A [ j ] < A [ i ] ) count ++ ; } } if ( count == 0 ) { System . out . println ( 0 ) ; System . exit ( 0 ) ; } int [ ] dp = new int [ count + 1 ] ; dp [ 1 ] = 1 ; for ( int i = 2 ; i <= count ; i ++ ) dp [ i ] = dp [ i - 2 ] + 4 ; System . out . println ( dp [ count ] ) ; } } class Reader { final private int BUFFER_SIZE = 1 << 16 ; private DataInputStream din ; private byte [ ] buffer ; private int bufferPointer , bytesRead ;   public Reader ( ) { din = new DataInputStream ( System . in ) ; buffer = new byte [ BUFFER_SIZE ] ; bufferPointer = bytesRead = 0 ; }   public Reader ( String file_name ) throws IOException { din = new DataInputStream ( new FileInputStream ( file_name ) ) ; buffer = new byte [ BUFFER_SIZE ] ; bufferPointer = bytesRead = 0 ; }   public String readLine ( ) throws IOException { byte [ ] buf = new byte [ 64 ] ;","import java . util . * ; import java . io . * ;   public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; }   public static long mod = 17352642619633L ;   void run ( FastScanner in , PrintWriter out ) {  "],"bleu":0.2590578767808256,"rouge_l":0.31596739456394324}
{"id":403,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException {"],"references":["import java . io . * ; import java . util . * ; public class Asd { static PrintWriter w = new PrintWriter ( System . out ) ; static FastScanner s = new FastScanner ( ) ;   public static void main ( String [ ] args ) {","import java . util . * ; public class TheChildandHomework {   public static void main ( String [ ] args ) {","import java . util . * ; import java . io . * ;   public class _practise { public static int count ( String s ) { int c = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) if ( s . charAt ( i ) == ' _ ' ) c ++ ; return c ; } public static void main ( String args [ ] ) { FastReader in = new FastReader ( ) ; PrintWriter so = new PrintWriter ( new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ) ; int t = 1 ; while ( t -- > 0 ) { String a = in . next ( ) ; String b = in . next ( ) ; String c = in . next ( ) ; String d = in . next ( ) ; int l [ ] = new int [ 4 ] ; l [ 0 ] = ( count ( a ) == a . length ( ) - 2 ) ? 0 : a . length ( ) - 2 ; l [ 1 ] = ( count ( b ) == b . length ( ) - 2 ) ? 0 : b . length ( ) - 2 ; l [ 2 ] = ( count ( c ) == c . length ( ) - 2 ) ? 0 : c . length ( ) - 2 ; l [ 3 ] = ( count ( d ) == d . length ( ) - 2 ) ? 0 : d . length ( ) - 2 ; boolean flag = false ; String str = \" \" ; for ( int i = 0 ; i < 4 ; i ++ ) { int big = 0 , sm = 0 ; for ( int j = 0 ; j < 4 ; j ++ ) { if ( i != j ) { if ( l [ i ] <= l [ j ] \/ 2 && l [ i ] != l [ j ] ) sm ++ ; if ( l [ i ] >= l [ j ] * 2 && l [ i ] != l [ j ] ) big ++ ; } }","import java . util . Scanner ;   public class TukkaMar { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ;   String [ ] option = new String [ 4 ] ; int [ ] length = new int [ 4 ] ;   for ( int i = 0 ; i < 4 ; i ++ ) { option [ i ] = scanner . nextLine ( ) ; length [ i ] = option [ i ] . length ( ) - 2 ; }   int great = 0 , ans = 0 ; for ( int i = 0 ; i < 4 ; i ++ ) { int small = 0 , big = 0 ; for ( int j = 0 ; j < 4 ; j ++ ) { if ( i != j ) { if ( length [ i ] >= 2 * length [ j ] ) big ++ ; else if ( 2 * length [ i ] <= length [ j ] ) small ++ ; } }   if ( small == 3 || big == 3 ) { great ++ ; ans = i ; } }   if ( great == 1 ) System . out . println ( ( char ) ( ' A ' + ans ) ) ; else System . out . println ( \" C \" ) ; } }"],"bleu":0.8241259434125672,"rouge_l":0.9089941458222458}
{"id":404,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . io . BufferedReader ; import java . io . FileReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Scanner ; import java . util . StringTokenizer ; import java . util . * ; import java . io . * ; public class codeforces { static class Student { int x , y ; Student ( int x , int y ) { this . x = x ; this . y = y ;","a , b = [ int ( x ) for x in input ( ) . split ( ) ]    c = ( a - b ) \/ 2 if not c . is_integer ( ) or int ( c ) & b : print ( 0 ) exit ( 0 )   t = 0 while b : # for each x_i , y_i in binary only 0 , 1 or 1 , 0 valid if b_i == 1 t += b & 1 b >>= 1 t = 1 << t   if c == 0 : # for x = 0 , y = a or swapped t -= 2 print ( t )  "],"bleu":0.32111163763657313,"rouge_l":0.5127155172413793}
{"id":405,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Scanner ; import java . util . StringTokenizer ; import java . util . * ; import java . math . * ; public class er10a {"],"references":["import java . util . * ;   public class zmperorjgf {   static Scanner in = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { int n = in . nextInt ( ) ; String s = in . next ( ) ; int [ ] nums = { 14 , 9 , 1 , 3 , 8 , 0 , 2 , 12 , 0 , 6 } ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans |= nums [ s . charAt ( i ) - '0' ] ; } System . out . println ( ans == 15 ? \" YES \" : \" NO \" ) ; } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ;   public class CF689AMikeAndCellphone {   static BufferedReader in = new BufferedReader ( new InputStreamReader ( System . in ) ) ; static PrintWriter out = new PrintWriter ( System . out ) ; static final int [ ] [ ] MOVES = { { 1 , 0 , 0 , 0 } , { 0 , 1 , 1 , 0 } , { 0 , 1 , 1 , 1 } , { 0 , 0 , 1 , 1 } , { 1 , 1 , 1 , 0 } , { 1 , 1 , 1 , 1 } , { 1 , 0 , 1 , 1 } , { 1 , 1 , 0 , 0 } , { 1 , 1 , 1 , 1 } , { 1 , 0 , 0 , 1 } } ;   public static void main ( String [ ] args ) throws IOException { boolean unique = true ; in . readLine ( ) ; char [ ] n = in . readLine ( ) . toCharArray ( ) ; for ( int i = 0 ; i < 4 ; i ++ ) { boolean aux = false ; for ( char c : n ) { if ( MOVES [ Character . getNumericValue ( c ) ] [ i ] == 0 ) { aux = true ; } } if ( ! aux ) { unique = false ; } }   out . println ( unique ? \" YES \" : \" NO \" ) ; out . close ( ) ; } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ;    public class CF689AMikeAndCellphone {   static BufferedReader in = new BufferedReader ( new InputStreamReader ( System . in ) ) ; static PrintWriter out = new PrintWriter ( System . out ) ; static final int [ ] [ ] MOVES = { { 1 , 0 , 0 , 0 } , { 0 , 1 , 1 , 0 } , { 0 , 1 , 1 , 1 } , { 0 , 0 , 1 , 1 } , { 1 , 1 , 1 , 0 } , { 1 , 1 , 1 , 1 } , { 1 , 0 , 1 , 1 } , { 1 , 1 , 0 , 0 } , { 1 , 1 , 1 , 1 } , { 1 , 0 , 0 , 1 } } ;   public static void main ( String [ ] args ) throws IOException { boolean unique = true ; in . readLine ( ) ; char [ ] n = in . readLine ( ) . toCharArray ( ) ; for ( int i = 0 ; i < 4 ; i ++ ) { boolean aux = false ; for ( char c : n ) { if ( MOVES [ Character . getNumericValue ( c ) ] [ i ] == 0 ) { aux = true ; } } if ( ! aux ) { unique = false ; } }   out . println ( unique ? \" YES \" : \" NO \" ) ; out . close ( ) ; } }"],"bleu":0.12897143875302397,"rouge_l":0.18598990494247866}
{"id":406,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ; import java . io . * ;  ","import java . util . Scanner ;   public class Main {    public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] quan = new int [ 5 ] ; for ( int z = 0 ; z < 5 ; z ++ ) quan [ z ] = sc . nextInt ( ) ; String [ ] size ; size = new String [ ] { \" S \" , \" M \" , \" L \" , \" XL \" , \" XXL \" } ; int n = sc . nextInt ( ) ; sc . nextLine ( ) ; while ( n -- > 0 ) { String str = sc . nextLine ( ) ; for ( int i = 0 ; i < 5 ; i ++ ) { if ( str . equals ( size [ i ] ) ) { if ( quan [ i ] != 0 ) { quan [ i ] -- ; System . out . println ( size [ i ] ) ; break ; } else { boolean flag = true ; int j = i + 1 , k = i - 1 ; while ( flag ) { if ( j < 5 && quan [ j ] > 0 ) { quan [ j ] -- ; System . out . println ( size [ j ] ) ; flag = false ; } else if ( k >= 0 && quan [ k ] > 0 ) { quan [ k ] -- ; System . out . println ( size [ k ] ) ; flag = false ; } j ++ ; k -- ; } }   break ; } }   }   } }","import java . util . * ;   public class Problem1 {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] s = new int [ 5 ] ; String [ ] size = { \" S \" , \" M \" , \" L \" , \" XL \" , \" XXL \" } ; for ( int i = 0 ; i < 5 ; i ++ ) { s [ i ] = sc . nextInt ( ) ; ; } int k = sc . nextInt ( ) ; for ( int i = 0 ; i < k ; i ++ ) { String x = sc . next ( ) ; int index = 0 , j = 0 ; for ( ; index < 5 ; index ++ ) { if ( x . equals ( size [ index ] ) ) break ; } while ( true ) { if ( ( index + j ) < 5 && s [ index + j ] != 0 ) { s [ index + j ] -- ; System . out . println ( size [ index + j ] ) ; break ; } if ( ( index - j ) >= 0 && s [ index - j ] != 0 ) { s [ index - j ] -- ; System . out . println ( size [ index - j ] ) ; break ; } j ++ ; } } }   }","import java . util . * ; import java . io . * ; public class tshirtsFromSponsor { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int A [ ] = new int [ 5 ] ; for ( int i = 0 ; i < 5 ; i ++ ) A [ i ] = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; ArrayList < String > S = new ArrayList < > ( ) ; S . add ( \" S \" ) ; S . add ( \" M \" ) ; S . add ( \" L \" ) ; S . add ( \" XL \" ) ; S . add ( \" XXL \" ) ; for ( int i = 0 ; i < k ; i ++ ) { String st = sc . next ( ) ; if ( A [ S . indexOf ( st ) ] != 0 ) { System . out . println ( st ) ; A [ S . indexOf ( st ) ] -- ; } else { int p = 1 ; while ( true ) { if ( S . indexOf ( st ) + p < 5 && A [ S . indexOf ( st ) + p ] != 0 ) { System . out . println ( S . get ( S . indexOf ( st ) + p ) ) ; A [ S . indexOf ( st ) + p ] -- ; break ; } else if ( S . indexOf ( st ) - p >= 0 && A [ S . indexOf ( st ) - p ] != 0 ) { System . out . println ( S . get ( S . indexOf ( st ) - p ) ) ; A [ S . indexOf ( st ) - p ] -- ; break ; } else p ++ ; } } } } }"],"bleu":0.3047499664220833,"rouge_l":0.6421052631578947}
{"id":407,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . HashSet ; import java . util . Scanner ;   public class A1382 { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int t = scanner . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int n = scanner . nextInt ( ) ; HashSet < Integer > listA = new HashSet < > ( ) ; int m = scanner . nextInt ( ) ; HashSet < Integer > listB = new HashSet < > ( ) ;   for ( int j = 0 ; j < n ; j ++ ) { int a = scanner . nextInt ( ) ; listA . add ( a ) ; } for ( int j = 0 ; j < m ; j ++ ) { int b = scanner . nextInt ( ) ; listB . add ( b ) ; } listA . retainAll ( listB ) ; if ( listA . size ( ) == 0 ) { System . out . println ( \" NO \" ) ;   } else { System . out . println ( \" YES \" ) ; System . out . println ( 1 + \" ▁ \" + listA . stream ( ) . findFirst ( ) . get ( ) ) ; }   } } }","  import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ;","import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . StringTokenizer ; import java . util . HashMap ; import java . io . IOException ; import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . InputStream ;   public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; FastI in = new FastI ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; ACommonSubsequence solver = new ACommonSubsequence ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; }   static class ACommonSubsequence { public void solve ( int testNumber , FastI sc , PrintWriter out ) { int t = sc . nextInt ( ) ; while ( t > 0 ) { t -- ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; HashMap < Integer , Integer > map = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int x = sc . nextInt ( ) ; map . put ( x , 1 ) ; } int ans = - 1 ; for ( int i = 0 ; i < m ; i ++ ) { int x = sc . nextInt ( ) ; if ( map . get ( x ) != null ) { ans = x ; } } if ( ans != - 1 ) { out . println ( \" YES \" ) ; out . println ( \"1 ▁ \" + ans ) ; } else { out . println ( \" NO \" ) ; } } }   }   static class FastI { BufferedReader br ; StringTokenizer st ;   public FastI ( InputStream inputStream ) { br = new BufferedReader ( new InputStreamReader ( inputStream ) ) ;   }   public String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   } }  "],"bleu":0.5662404331787982,"rouge_l":0.8389263396152145}
{"id":408,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . HashMap ; import java . util . Scanner ;   public class Problem_43B { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; char [ ] heading = s . nextLine ( ) . toCharArray ( ) ; char [ ] text = s . nextLine ( ) . toCharArray ( ) ;   HashMap < Character , Integer > freqOf = new HashMap < > ( ) ; for ( int i = 0 ; i < heading . length ; i ++ ) { if ( heading [ i ] == ' ▁ ' ) continue ;   freqOf . computeIfPresent ( heading [ i ] , ( K , V ) -> V + 1 ) ; freqOf . putIfAbsent ( heading [ i ] , 1 ) ; }  ","    import java . util . * ;    public class dummycodes {   public static class Pair { int x ; int y ; int z ; public Pair ( int x , int y , int z ) { this . x = x ; this . y = y ; this . z = z ; } } public static boolean solve ( String Head , String txt ) { Map < Character , Integer > freq = new HashMap < > ( ) ; for ( int i = 0 ; i < txt . length ( ) ; i ++ ) { if ( txt . charAt ( i ) == ' ▁ ' ) continue ;   if ( freq . containsKey ( txt . charAt ( i ) ) ) { freq . put ( txt . charAt ( i ) , freq . get ( txt . charAt ( i ) ) + 1 ) ; } else freq . put ( txt . charAt ( i ) , 1 ) ; }   for ( int i = 0 ; i < Head . length ( ) ; i ++ ) { if ( Head . charAt ( i ) == ' ▁ ' ) continue ; if ( freq . containsKey ( Head . charAt ( i ) ) ) { int temp = freq . get ( Head . charAt ( i ) ) - 1 ; if ( temp <= 0 ) freq . remove ( Head . charAt ( i ) ) ; else freq . put ( Head . charAt ( i ) , temp ) ; } }   if ( freq . size ( ) != 0 ) return false ; return true ; }   public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; String H = sc . nextLine ( ) ; String txt = sc . nextLine ( ) ; if ( solve ( H , txt ) ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ;      } }                                                                                                                                                                                                           ","import java . util . * ; import java . math . * ; public class Letter { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] hArr = new int [ 123 ] ; int [ ] tArr = new int [ 123 ] ; Arrays . fill ( hArr , 0 ) ; Arrays . fill ( tArr , 0 ) ; char [ ] arr = sc . nextLine ( ) . replaceAll ( \" \\\\ s \" , \" \" ) . toCharArray ( ) ;","import java . util . HashMap ; import java . util . Map ; import java . util . Scanner ;   public class Letter {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s1 = sc . nextLine ( ) ; String s2 = sc . nextLine ( ) ; Map < Character , Integer > map = new HashMap < > ( ) ; for ( char c : s1 . toCharArray ( ) ) { if ( ! map . containsKey ( c ) ) map . put ( c , 0 ) ; map . compute ( c , ( k , v ) -> v + 1 ) ; } boolean possible = true ; for ( char c : s2 . toCharArray ( ) ) { if ( ! map . containsKey ( c ) || ( map . get ( c ) <= 0 && c != ' ▁ ' ) ) { possible = false ; break ; } else { map . compute ( c , ( k , v ) -> v - 1 ) ; } } System . out . println ( possible ? \" YES \" : \" NO \" ) ; sc . close ( ) ; } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ;   public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;  "],"bleu":0.954297861697201,"rouge_l":0.9618692660550459}
{"id":409,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Scanner ; import java . util . StringTokenizer ; import java . util . * ; import java . math . * ; public class er10a {"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . Arrays ; import java . util . HashMap ; import java . util . Map ; import java . util . Scanner ;   public class Codeforces {   private static final Scanner sc = new Scanner ( System . in ) ; private static final BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; private static final long MOD = ( long ) ( 1e9 + 7 ) ; private static PrintWriter out = new PrintWriter ( System . out ) ;   static boolean isValid ( int [ ] a , int mid , int n ) { int c = 0 ; for ( int i = 0 ; i < a . length ; i ++ ) { int x = mid - 1 ; while ( i + 1 < a . length && x > 0 && a [ i ] == a [ i + 1 ] ) { i ++ ; x -- ; } if ( x == 0 ) { c ++ ; } } return c >= n ; } public static void solve ( int T ) throws IOException { int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; Map < Integer , Integer > mp = new HashMap < > ( ) ; int [ ] a = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { a [ i ] = sc . nextInt ( ) ; mp . put ( a [ i ] , mp . getOrDefault ( a [ i ] , 0 ) + 1 ) ; } Arrays . sort ( a ) ; int l = 1 ; int r = m \/ n ; int ans = 0 ; while ( l <= r ) { int mid = l + ( r - l ) \/ 2 ;","import java . util . Scanner ;   public class PlanningExpedition { public static void main ( String [ ] args ) {   Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) , m = in . nextInt ( ) , i , a [ ] = new int [ 101 ] , o = 0 ;   for ( i = 0 ; i < m ; i ++ ) a [ in . nextInt ( ) ] ++ ; in . close ( ) ; for ( i = 1 ; i < 101 ; i ++ ) { int x = 0 ; for ( int y : a ) x += y \/ i ; if ( x >= n ) o = i ; } System . out . println ( o ) ; } }","import java . util . * ;   public class cf181 { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int i = 0 ; int ar [ ] = new int [ m ] ; int f [ ] = new int [ 101 ] ; for ( i = 0 ; i < m ; i ++ ) { ar [ i ] = sc . nextInt ( ) ; f [ ar [ i ] ] ++ ; }","  import java . util . Arrays ; import java . util . Map ; import java . util . Scanner ; import java . util . function . Function ; import java . util . stream . Collectors ;   public class Codechef { public static void main ( String [ ] args ) throws java . lang . Exception {","import java . lang . * ; import java . util . * ; import java . util . stream . Collectors ; import java . io . * ;   public class absolute { public static class pair { int count ; int ppl ; public pair ( int count , int ppl ) { this . count = count ; this . ppl = ppl ; } } public static void printlist ( List < pair > list ) { System . out . println ( \" Call \" ) ; for ( pair p : list ) System . out . println ( p . count + \" ▁ \" + p . ppl ) ; } public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; Map < Integer , Integer > map = new TreeMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < k ; i ++ ) { int key = sc . nextInt ( ) ; if ( map . containsKey ( key ) ) map . replace ( key , map . get ( key ) + 1 ) ; else map . put ( key , 1 ) ; } Map < Integer , Integer > sorted = map . entrySet ( ) . stream ( ) . sorted ( Map . Entry . comparingByValue ( ) ) . collect ( Collectors . toMap ( Map . Entry :: getKey , Map . Entry :: getValue , ( oldValue , newValue ) -> oldValue , LinkedHashMap :: new ) ) ; List < Integer > keys = new ArrayList < Integer > ( sorted . keySet ( ) ) ; Collections . reverse ( keys ) ; List < pair > list = new ArrayList < pair > ( ) ; for ( int key : keys ) { list . add ( new pair ( sorted . get ( key ) , 1 ) ) ; } int max = 0 , end = n - 1 ; while ( end >= 0 ) {"],"bleu":0.7612997829385998,"rouge_l":0.6365581414125103}
{"id":410,"predictions":["import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; }"],"references":["import java . util . * ; import java . io . * ; import java . math . * ; import java . lang . Math . * ;   public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int x = 0 ; if ( ( c % a == 0 ) || ( c % b == 0 ) ) { x = 1 ; } else { for ( int m = 0 ; m <= 10000 ; m ++ ) { for ( int n = 0 ; n <= 10000 ; n ++ ) { if ( m * a + n * b == c ) { x = 1 ; break ; } else if ( m * a + n * b > c ) { break ; } } if ( x == 1 ) { break ; } } } if ( x == 1 ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }","import java . util . * ; import java . lang . * ; import java . io . * ;   public class ebonyAndIvory   { public static void main ( String [ ] args ) throws IOException { InputStreamReader ir = new InputStreamReader ( System . in ) ; BufferedReader br = new BufferedReader ( ir ) ; String [ ] line1 = br . readLine ( ) . split ( \" ▁ \" ) ; int a = Integer . parseInt ( line1 [ 0 ] ) ; int b = Integer . parseInt ( line1 [ 1 ] ) ; int c = Integer . parseInt ( line1 [ 2 ] ) ; if ( c % a == 0 || c % b == 0 ) System . out . println ( \" Yes \" ) ; else { int flag = 0 ;"],"bleu":0.21351996718613098,"rouge_l":0.46831379117811284}
{"id":411,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { ans += Math . abs ( a [ i ] - b [ j ] ) ; } out . println ( ans ) ; } out . close ( ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int a [ ] = new int [ n ] ; int res [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = sc . nextInt ( ) ; int max = a [ n - 1 ] ; for ( int i = n - 1 ; i >= 0 ; i -- ) { max = max > a [ i ] ? max : a [ i ] ; if ( max > 0 ) { res [ i ] = 1 ; max -- ; } else { res [ i ] = 0 ; } } for ( int i = 0 ; i < n ; i ++ ) System . out . print ( res [ i ] + \" ▁ \" ) ; System . out . println ( ) ; } } }","import java . util . Scanner ; public class eqaution { public static void main ( String [ ] args ) { Scanner scn = new Scanner ( System . in ) ; int t = scn . nextInt ( ) ; while ( t -- > 0 ) { int n = scn . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = scn . nextInt ( ) ; } int cake = 0 ; int [ ] ans = new int [ n ] ; for ( int i = n - 1 ; i >= 0 ; i -- ) { cake = Math . max ( cake , arr [ i ] ) ; if ( cake > 0 ) { ans [ i ] = 1 ; cake -- ; } } for ( int v : ans ) { System . out . print ( v + \" ▁ \" ) ; } System . out . println ( ) ; } } }","import java . util . * ; public class Test { static Scanner sc ; public static void main ( String [ ] args ) { sc = new Scanner ( System . in ) ; int t = Integer . parseInt ( sc . next ( ) ) ; while ( t -- > 0 ) { solve ( ) ; } } public static void solve ( ) { int n = sc . nextInt ( ) ; int [ ] a = new int [ n + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] drench = new int [ n ] ; int cream = 0 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { cream = Math . max ( cream , a [ i ] ) ; if ( cream > 0 ) { cream -- ; drench [ i ] = 1 ; } } for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( drench [ i ] + \" ▁ \" ) ; } } }","import java . util . Scanner ; import static java . lang . System . in ; public class Round707B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( in ) ; int t = sc . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int j = 0 ; j < n ; j ++ ) { a [ j ] = sc . nextInt ( ) ; } int [ ] ans = new int [ n ] ; int cream = 0 ; for ( int j = n - 1 ; j >= 0 ; j -- ) { cream = Math . max ( cream - 1 , a [ j ] ) ; if ( cream > 0 ) ans [ j ] = 1 ; } for ( int x : ans ) { System . out . print ( x + \" ▁ \" ) ; } System . out . println ( ) ; } } }","import java . util . * ; public class Codeforces1 { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int arr [ ] = new int [ n ] ; int ans [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = sc . nextInt ( ) ; int m = arr [ n - 1 ] ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( m <= arr [ i ] ) m = arr [ i ] ; if ( m <= 0 ) ans [ i ] = 0 ; else { ans [ i ] = 1 ; m -- ; } } for ( int i = 0 ; i < n ; i ++ ) System . out . print ( ans [ i ] + \" ▁ \" ) ; System . out . println ( ) ; } } }"],"bleu":0.3930217367572683,"rouge_l":0.5014740900328836}
{"id":412,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . awt . Desktop ;    import java . io . BufferedReader ;    import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . net . URI ; import java . net . URISyntaxException ; import java . sql . Array ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collections ; import java . util . Comparator ; import java . util . HashMap ; import java . util . HashSet ; import java . util . Iterator ; import java . util . LinkedHashMap ; import java . util . LinkedHashSet ; import java . util . LinkedList ; import java . util . List ; import java . util . Map ; import java . util . PriorityQueue ; import java . util . Queue ; import java . util . Scanner ; import java . util . Set ; import java . util . Stack ; import java . util . StringTokenizer ; import java . util . TreeSet ; import java . util . Vector ;     public class codechef3 { static class comp implements Comparator < Integer > {   @ Override public int compare ( Integer o1 , Integer o2 ) { if ( Math . abs ( o1 ) > Math . abs ( o2 ) ) return - 1 ; else return 1 ; } }","import java . io . * ; import java . util . * ; public class arraysharpening { public static void main ( String [ ] args ) throws IOException { BufferedReader f = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( f . readLine ( ) ) ; int t = Integer . parseInt ( st . nextToken ( ) ) ; while ( t > 0 ) { t -- ; int n = Integer . parseInt ( f . readLine ( ) ) ; int [ ] arr = new int [ n ] ; st = new StringTokenizer ( f . readLine ( ) ) ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int front = 0 ; int back = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] >= i ) front = i ; else break ; } for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( arr [ i ] >= ( n - 1 ) - i ) back = i ; else break ; } if ( front >= back ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ; } } }","import java . util . * ; import java . io . * ; import java . math . * ;   public class Main {   private static int MAX = Integer . MAX_VALUE ; private static int MIN = Integer . MIN_VALUE ; private static int MOD = 1000000007 ; static FastScanner sc = new FastScanner ( ) ; static StringBuilder sb = new StringBuilder ( ) ;   public static void main ( String [ ] args ) throws IOException { int T = sc . nextInt ( ) ; while ( T -- > 0 ) { solve ( ) ; } System . out . print ( sb ) ; }   static void solve ( ) throws IOException {   int n = sc . nextInt ( ) ;   int [ ] arr = new int [ n ] ;   for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = sc . nextInt ( ) ;   int prefix = - 1 ; int suffix = n ;   for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < i ) break ; prefix = i ; } for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( arr [ i ] < ( n - 1 ) - i ) break ; suffix = i ; }   if ( suffix <= prefix ) sb . append ( \" YES \\n \" ) ; else sb . append ( \" NO \\n \" ) ;   }   static class FastScanner { public BufferedReader reader ; public StringTokenizer tokenizer ; public FastScanner ( ) { reader = new BufferedReader ( new InputStreamReader ( System . in ) , 32768 ) ; tokenizer = null ; } public String next ( ) { while ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } public long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } public double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } public String nextLine ( ) { try { return reader . readLine ( ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } }   }","   import java . io . * ; import java . math . BigDecimal ; import java . math . BigInteger ; import java . util . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ;    public class Main1 {    public static void main ( String [ ] args ) {   try {    FastScanner in = new FastScanner ( ) ; PrintWriter out = new PrintWriter ( System . out ) ;     int t = in . nextInt ( ) ;   while ( t -- > 0 ) { int n = in . nextInt ( ) ; int A [ ] = in . readArray ( n ) ; int ind = n - 1 ;   for ( int i = 0 ; i < n ; i ++ ) { if ( A [ i ] < i ) { ind = i - 1 ; break ; } } int lst = 0 ; int ct = 0 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( A [ i ] < ct ) { lst = i + 1 ; break ; } ct ++ ; } if ( lst <= ind ) { System . out . println ( \" Yes \" ) ; } else System . out . println ( \" No \" ) ;        }                out . flush ( ) ; out . close ( ) ;    } catch ( Exception e ) { return ; }                      }    static class FastScanner { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( \" \" ) ;   String next ( ) { while ( ! st . hasMoreTokens ( ) ) try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   int [ ] readArray ( int n ) { int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = nextInt ( ) ; return a ; }    long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } }    }         "],"bleu":0.02361812071855029,"rouge_l":0.21837537049972627}
{"id":413,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ;   public class CF149B { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ;   String input = in . next ( ) ; String hour = input . substring ( 0 , input . indexOf ( \" : \" ) ) ; String minute = input . substring ( input . indexOf ( \" : \" ) + 1 ) ; int minBase = 2 ; for ( int i = 0 ; i < input . length ( ) ; ++ i ) { char c = input . charAt ( i ) ; if ( c == ' : ' ) continue ; minBase = Math . max ( minBase , toNum ( c ) + 1 ) ; }","import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . StringTokenizer ; import java . io . BufferedReader ; import java . io . FileReader ; import java . io . InputStreamReader ; import java . io . InputStream ;   public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; Scanner in = new Scanner ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; BMartianClock solver = new BMartianClock ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; }   static class BMartianClock { public void solve ( int testNumber , Scanner sc , PrintWriter pw ) { int t = 1 ;"],"bleu":0.13273515152959176,"rouge_l":0.33060033351862145}
{"id":414,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException {"],"references":["import java . util . Scanner ;   public class P222A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int j = n - 1 ; while ( j > 0 && a [ j ] == a [ j - 1 ] ) j -- ; System . out . println ( j < k ? j : - 1 ) ; } }","import java . util . * ; import java . math . * ; public class ShooshunsSequence { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = sc . nextInt ( ) ; for ( int i = k - 1 ; i < n - 1 ; i ++ ) { if ( arr [ i ] != arr [ i + 1 ] ) { System . out . println ( \" - 1\" ) ; return ; } } int temp = - 2 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] != arr [ k - 1 ] ) { temp = i ; } } System . out . println ( temp == - 2 ? 0 : temp + 1 ) ; } }","import java . util . Scanner ;   public class practice {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; int arr [ ] = new int [ x ] ; for ( int i = 0 ; i < x ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int flag = 0 ; for ( int i = y - 1 ; i < x - 1 ; i ++ ) { if ( arr [ i ] != arr [ i + 1 ] ) { flag = 1 ; break ; } } if ( flag == 1 ) { System . out . println ( \" - 1\" ) ; } else { int ans = y - 1 ; while ( ans - 1 >= 0 ) { if ( arr [ ans - 1 ] != arr [ ans ] ) break ; ans -- ; } System . out . println ( ans ) ; } }   }","  import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ;   public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;  "],"bleu":0.3584824441820936,"rouge_l":0.4307995825530029}
{"id":415,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . Scanner ;   public class P3A { private static int ans = 0 ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . nextLine ( ) ; String d = sc . nextLine ( ) ; int n1 = s . charAt ( 0 ) - d . charAt ( 0 ) ; int n2 = s . charAt ( 1 ) - d . charAt ( 1 ) ; System . out . println ( Math . max ( Math . abs ( n1 ) , Math . abs ( n2 ) ) ) ; while ( n1 != 0 || n2 != 0 ) { String path = \" \" ; if ( n1 > 0 ) { path += \" L \" ; n1 -- ; } if ( n1 < 0 ) { path += \" R \" ; n1 ++ ; } if ( n2 > 0 ) { path += \" D \" ; n2 -- ; } if ( n2 < 0 ) { path += \" U \" ; n2 ++ ; } System . out . println ( path ) ; } }    }","import java . util . * ; import java . math . * ; public class KingPath { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; char [ ] a = sc . next ( ) . toCharArray ( ) ; int a1 = a [ 0 ] - '0' - 49 ; int a2 = ( int ) a [ 1 ] - '0' ; char [ ] b = sc . next ( ) . toCharArray ( ) ; int b1 = b [ 0 ] - '0' - 49 ; int b2 = ( int ) b [ 1 ] - '0' ; int num = 0 ; ArrayList < String > out = new ArrayList < > ( ) ;","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ;  ","import java . util . Scanner ;   public class Main {   public static void main ( String [ ] args ) {   Scanner sc = new Scanner ( System . in ) ;   String s1 = sc . next ( ) ; String s2 = sc . next ( ) ;   int ip_x = s1 . charAt ( 0 ) - ' a ' + 1 ; int ip_y = s1 . charAt ( 1 ) ;   int fp_x = s2 . charAt ( 0 ) - ' a ' + 1 ; int fp_y = s2 . charAt ( 1 ) ;   int ans = Math . max ( Math . abs ( ip_x - fp_x ) , Math . abs ( ip_y - fp_y ) ) ; System . out . println ( ans ) ; while ( ans -- > 0 ) {   if ( ip_x > fp_x ) { ip_x -- ; System . out . print ( \" L \" ) ; } else if ( ip_x < fp_x ) { ip_x ++ ; System . out . print ( \" R \" ) ; }   if ( ip_y > fp_y ) { ip_y -- ; System . out . print ( \" D \" ) ; } else if ( ip_y < fp_y ) { ip_y ++ ; System . out . print ( \" U \" ) ; }   System . out . println ( ) ;   }   } }   "],"bleu":0.5582448211327671,"rouge_l":0.6810609640831758}
{"id":416,"predictions":["import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;"],"references":["  import java . util . Scanner ;   public class b { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; System . out . println ( scan . nextDouble ( ) * Math . pow ( 1.000000011 , scan . nextDouble ( ) ) ) ; } }","import java . util . * ; import java . io . * ; import java . math . BigInteger ; import java . text . * ; public class Main { static long mod = 1000_000_007 ; static long mod1 = 998244353 ; static boolean fileIO = true ; static boolean memory = true ; static FastScanner f ; static PrintWriter pw ; static double eps = ( double ) 1e-6 ; static int oo = ( int ) 1e7 ;   public static void solve ( ) throws Exception { long a = f . nl ( ) ; long b = f . nl ( ) ; double ans = a * Math . pow ( 1.000000011 , b ) ; System . out . printf ( \" % .18f \" , ans ) ; } public static void main ( String [ ] args ) throws Exception { if ( memory ) new Thread ( null , new Runnable ( ) { public void run ( ) { try { new Main ( ) . run ( ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; System . exit ( 1 ) ; } } } , \" \" , 1 << 28 ) . start ( ) ; else new Main ( ) . run ( ) ; } void run ( ) throws Exception { if ( System . getProperty ( \" ONLINE _ JUDGE \" ) == null ) { f = new FastScanner ( \" \" ) ; pw = new PrintWriter ( System . out ) ; } else { f = new FastScanner ( ) ; pw = new PrintWriter ( System . out ) ;","  import java . io . * ; import java . math . BigInteger ; import java . util . * ;    @ SuppressWarnings ( \" unused \" ) public class B { public static FastScannerB scan = new FastScannerB ( ) ; public static PrintWriter out = new PrintWriter ( System . out ) ; public static void solve ( ) { int n = scan . nextInt ( ) ; int m = scan . nextInt ( ) ; out . println ( ( double ) ( n * ( Math . pow ( 1.000000011 , m ) ) ) ) ; } public static void main ( String [ ] args ) { solve ( ) ; out . close ( ) ; }   } class FastScannerB { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( \" \" ) ; String next ( ) { while ( ! st . hasMoreTokens ( ) ) try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } int [ ] readArray ( int n ) { int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = nextInt ( ) ; return a ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } void sort ( long [ ] a ) { ArrayList < Long > l = new ArrayList < > ( ) ; for ( long i : a ) l . add ( i ) ; Collections . sort ( l ) ; for ( int i = 0 ; i < a . length ; i ++ ) a [ i ] = l . get ( i ) ; }   }   ","import java . math . BigDecimal ; import java . text . DecimalFormat ; import java . util . Scanner ;   public class Rough { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; long n = s . nextLong ( ) ; long t = s . nextLong ( ) ; double constant = Math . log ( 1.000000011D ) * t ; double power_val = Math . pow ( Math . E , constant ) ; BigDecimal final_ans = new BigDecimal ( power_val ) ; final_ans = final_ans . multiply ( new BigDecimal ( n ) ) ; DecimalFormat df = new DecimalFormat ( \" # . # # # # # # # \" ) ; System . out . println ( df . format ( final_ans ) ) ; } }","import java . util . Scanner ; public class java { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; double n = sc . nextInt ( ) , k = sc . nextInt ( ) ; System . out . println ( n * Math . pow ( 1.000000011 , k ) ) ; } }"],"bleu":0.3396586987415721,"rouge_l":0.31490876724521577}
{"id":417,"predictions":["import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; } public static long mod = 17352642619633L ; void run ( FastScanner in , PrintWriter out ) {"],"references":["import java . util . * ; import java . * ;   public class Solution { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; int m = sc . nextInt ( ) ;","import java . util . * ; import java . * ;   public class Solution { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; int m = sc . nextInt ( ) ;","import java . io . * ; import java . lang . * ; import java . util . * ; public class Solution { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; int m = scan . nextInt ( ) ; int [ ] flowers = new int [ n + 1 ] ; int [ ] p_s = new int [ n + 1 ] ; int [ ] arr = new int [ n + 2 ] ; for ( int i = 1 ; i <= n ; i ++ ) flowers [ i ] = scan . nextInt ( ) ; p_s [ 1 ] = flowers [ 1 ] ; for ( int i = 2 ; i <= n ; i ++ ) p_s [ i ] = p_s [ i - 1 ] + flowers [ i ] ; int happiness = 0 ; while ( m -- > 0 ) { int l = scan . nextInt ( ) ; int r = scan . nextInt ( ) ; if ( p_s [ r ] > p_s [ l - 1 ] ) { arr [ l ] = arr [ l ] + 1 ; arr [ r + 1 ] = arr [ r + 1 ] - 1 ; } } for ( int i = 2 ; i < n + 2 ; i ++ ) arr [ i ] = arr [ i - 1 ] + arr [ i ] ; int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { sum = sum + flowers [ i ] * arr [ i ] ; } System . out . println ( sum ) ; } }","import java . io . * ; import java . lang . * ; import java . util . * ;   public class Solution { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; int m = scan . nextInt ( ) ; int [ ] flowers = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) flowers [ i ] = scan . nextInt ( ) ; int happiness = 0 ; while ( m -- > 0 ) { int l = scan . nextInt ( ) ; int r = scan . nextInt ( ) ; int sum = 0 ; for ( int i = l ; i <= r ; i ++ ) { sum = sum + flowers [ i ] ; } happiness = Math . max ( happiness , ( happiness + sum ) ) ; } System . out . println ( happiness ) ; } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;   public class CodeForces { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ;   StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int subLen = Integer . parseInt ( st . nextToken ( ) ) ;   st = new StringTokenizer ( br . readLine ( ) ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int [ ] [ ] lr = new int [ subLen ] [ 2 ] ; for ( int i = 0 ; i < subLen ; i ++ ) { st = new StringTokenizer ( br . readLine ( ) ) ; lr [ i ] [ 0 ] = Integer . parseInt ( st . nextToken ( ) ) ; lr [ i ] [ 1 ] = Integer . parseInt ( st . nextToken ( ) ) ; }   int cumSum [ ] = new int [ n ] ; cumSum [ 0 ] = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { cumSum [ i ] = cumSum [ i - 1 ] + arr [ i ] ; } int ans = 0 ;   for ( int i = 0 ; i < subLen ; i ++ ) { int subSum = findSubArraySum ( lr [ i ] [ 0 ] - 1 , lr [ i ] [ 1 ] - 1 , cumSum ) ; if ( subSum > 0 ) { ans += subSum ; } } System . out . println ( ans ) ;   }   private static int findSubArraySum ( int l , int r , int [ ] cumSum ) { if ( l == 0 ) { return cumSum [ r ] ; } else return cumSum [ r ] - cumSum [ l - 1 ] ; } }"],"bleu":0.46769075535513893,"rouge_l":0.657896887000572}
{"id":418,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ;   public class Solution { public static int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = 15000001 ; int prime [ ] = new int [ n + 1 ] ; for ( int i = 0 ; i <= n ; i ++ ) prime [ i ] = i ; for ( int p = 2 ; p * p <= n ; p ++ ) {"],"bleu":0.06612035608347493,"rouge_l":0.2316988950276243}
{"id":419,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ; import java . io . * ;   public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; }   public static long mod = 17352642619633L ;   void run ( FastScanner in , PrintWriter out ) { int N = in . nextInt ( ) ; int K = in . nextInt ( ) ;   if ( K == 1 ) { out . println ( N ) ; return ; }   List < Integer > fac = new ArrayList < > ( ) ;   for ( int p = 2 ; p * p <= N ; p ++ ) { while ( N > 1 && N % p == 0 ) { fac . add ( p ) ; N \/= p ; } } if ( N > 1 ) fac . add ( N ) ;   if ( fac . size ( ) < K ) { out . println ( - 1 ) ; return ; }   for ( int i = 0 ; i < K - 1 ; i ++ ) { out . print ( fac . get ( i ) + \" ▁ \" ) ; } long t = 1 ; for ( int i = K - 1 ; i < fac . size ( ) ; i ++ ) { t *= fac . get ( i ) ; } out . println ( t ) ;   }   static class FastScanner { BufferedReader br ; StringTokenizer st ;   public FastScanner ( InputStream in ) { br = new BufferedReader ( new InputStreamReader ( in ) ) ; st = null ; }   String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } } }","import java . util . Scanner ; import java . util . Arrays ; import java . util . Vector ; import java . util . Collections ;   public class Welcomejava { public static Vector < Integer > divisors ( int n ) { Vector < Integer > v = new Vector < > ( ) ; while ( n % 2 == 0 ) { v . add ( 2 ) ; n \/= 2 ; } for ( int i = 3 ; i <= Math . sqrt ( n ) + 1 ; i += 2 ) { while ( n % i == 0 ) { v . add ( i ) ; n \/= i ; } } if ( n > 2 ) v . add ( n ) ; return v ; }   public static void main ( String [ ] args ) {","import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; LinkedList < Integer > list = new LinkedList < > ( ) ; for ( int i = 2 ; i <= n ; i ++ ) { while ( n % i == 0 ) { n \/= i ; list . add ( i ) ; } } if ( list . size ( ) < k ) { System . out . println ( - 1 ) ; } else { int first = 1 ; while ( list . size ( ) >= k ) { first *= list . remove ( ) ; } System . out . print ( first + \" ▁ \" ) ; while ( list . size ( ) > 1 ) { System . out . print ( list . remove ( ) + \" ▁ \" ) ; } if ( list . size ( ) > 0 ) System . out . println ( list . remove ( ) ) ; } } }"],"bleu":0.07785266509021639,"rouge_l":0.3090619571511291}
{"id":420,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException {"],"references":["import java . io . * ; import java . lang . Math ; import java . util . * ;   public class Main {   public BufferedReader in ; public PrintStream out ;   public boolean log_enabled = false ; public boolean multiply_tests = true ;   public static boolean do_gen_test = false ; public void gen_test ( ) { } private class TestCase {   public Object solve ( ) { int n = readInt ( ) ; String s = readLn ( ) ; int first = - 1 ; int second = - 1 ; int c ; for ( int i = 0 ; i < n ; i ++ ) { c = s . charAt ( i ) - '0' ; if ( c % 2 == 1 ) { if ( first == - 1 ) { first = i ; } else if ( second == - 1 ) { second = i ; break ; } } } if ( second > - 1 ) { return s . substring ( first , second + 1 ) ; } else { return - 1 ; }","import java . util . * ; import java . io . * ; public class A { public static void main ( String ar [ ] ) throws Exception { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int t = Integer . parseInt ( br . readLine ( ) ) ; while ( t -- > 0 ) { int k = Integer . parseInt ( br . readLine ( ) ) ; String s = br . readLine ( ) ; StringBuffer sb = new StringBuffer ( s ) ; int arr [ ] = new int [ 10 ] ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { arr [ s . charAt ( i ) - '0' ] ++ ; } int curr = 0 ; for ( int i = 0 ; i < 10 ; i ++ ) { curr += ( arr [ i ] * i ) ; } while ( sb . length ( ) > 0 && sb . charAt ( sb . length ( ) - 1 ) % 2 == 0 ) { arr [ sb . charAt ( sb . length ( ) - 1 ) - '0' ] -- ; curr -= ( sb . charAt ( sb . length ( ) - 1 ) - '0' ) ; sb . deleteCharAt ( sb . length ( ) - 1 ) ; } int i = 0 ; while ( curr % 2 != 0 && i < sb . length ( ) ) { if ( s . charAt ( i ) % 2 != 0 ) { sb . deleteCharAt ( i ) ; break ; } i ++ ; } while ( sb . length ( ) > 0 && sb . charAt ( sb . length ( ) - 1 ) % 2 == 0 ) { arr [ sb . charAt ( sb . length ( ) - 1 ) - '0' ] -- ; curr -= ( sb . charAt ( sb . length ( ) - 1 ) - '0' ) ; sb . deleteCharAt ( sb . length ( ) - 1 ) ; } i = 0 ; while ( i < sb . length ( ) && sb . charAt ( i ) == '0' ) { sb . deleteCharAt ( i ) ; } if ( sb . length ( ) > 0 ) { System . out . println ( sb ) ; } else System . out . println ( \" - 1\" ) ; } } }","import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { Scanner s = new Scanner ( System . in ) ; int t = s . nextInt ( ) ; while ( t -- != 0 ) { int n = s . nextInt ( ) ; String str = s . next ( ) ; String ans = \" \" ; for ( int i = 0 ; i < n ; i ++ ) { int k = str . charAt ( i ) - '0' ; if ( k % 2 == 1 ) { ans = ans + str . charAt ( i ) ; if ( ans . length ( ) == 2 ) { break ; } } } if ( ans . length ( ) == 2 ) { System . out . println ( ans ) ; } else { System . out . println ( - 1 ) ; } } } }","  import java . util . * ; import java . lang . * ; import java . io . * ;   public class Codechef { public static void main ( String [ ] args ) throws java . lang . Exception { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; for ( int y = 0 ; y < t ; ++ y ) { int n = sc . nextInt ( ) ; String s = sc . next ( ) ; StringBuilder sb = new StringBuilder ( ) ; int tempsum = 0 ; int index = - 1 ; for ( int i = 0 ; i < n ; ++ i ) { tempsum = tempsum + s . charAt ( i ) - 48 ; if ( tempsum % 2 == 0 && ( s . charAt ( i ) - 48 ) % 2 != 0 ) { index = i ; break ; } } if ( index == - 1 ) { System . out . println ( - 1 ) ; continue ; } else { for ( int i = 0 ; i <= index ; ++ i ) { System . out . print ( s . charAt ( i ) ) ; } System . out . println ( ) ; } } } }","import java . util . * ; public class file { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int test = scan . nextInt ( ) ; for ( int i = 0 ; i < test ; i ++ ) { int n = scan . nextInt ( ) ; scan . nextLine ( ) ; int c = 0 ; String str = scan . nextLine ( ) ; boolean flag = true ; for ( int j = 0 ; j < str . length ( ) ; j ++ ) { char ch = str . charAt ( j ) ; int t = Character . getNumericValue ( ch ) ; if ( t % 2 != 0 ) { c ++ ; } if ( c == 2 ) { System . out . println ( str . substring ( 0 , j + 1 ) ) ; flag = false ; break ; } } if ( flag ) { System . out . println ( \" - 1\" ) ; } } } }"],"bleu":0.009347688337533031,"rouge_l":0.19527267036265936}
{"id":421,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . io . * ; import java . util . * ; import java . math . * ;     public class Test {   static boolean [ ] visited ; static boolean [ ] [ ] [ ] graph ;   public static boolean dfs ( int a , int b , int color ) { visited [ a ] = true ; if ( a == b ) { return true ; } boolean ans = false ; for ( int i = 1 ; i <= 100 ; i ++ ) { if ( graph [ a ] [ i ] [ color ] && ! visited [ i ] ) { ans = ans || dfs ( i , b , color ) ; } } return ans ; }   public static void process ( ) throws IOException { int n = ni ( ) ; int m = ni ( ) ; graph = new boolean [ 101 ] [ 101 ] [ 101 ] ; for ( int i = 0 ; i < m ; i ++ ) { int u = ni ( ) ; int v = ni ( ) ; int color = ni ( ) ; graph [ u ] [ v ] [ color ] = true ; graph [ v ] [ u ] [ color ] = true ; } int q = ni ( ) ; while ( q -- > 0 ) { int count = 0 ; int a = ni ( ) ; int b = ni ( ) ; for ( int j = 0 ; j <= 100 ; j ++ ) { visited = new boolean [ 102 ] ; if ( dfs ( a , b , j ) ) { count ++ ; } } pn ( count ) ; }   }    static AnotherReader sc ; static PrintWriter out ; public static void main ( String [ ] args ) throws IOException { out = new PrintWriter ( System . out ) ; sc = new AnotherReader ( ) ; boolean oj = true ;  ","import java . util . * ; import java . io . * ;   public class a { static List < int [ ] > [ ] al ;"],"bleu":0.3534795258883986,"rouge_l":0.602906976744186}
{"id":422,"predictions":["import java . util . * ; import java . io . * ; import java . math . BigInteger ; import java . text . * ; public class Main { static long mod = 1000_000_007 ; static long mod1 = 998244353 ; static boolean fileIO = false ; static boolean memory = true ; static FastScanner f ; static PrintWriter pw ; static double eps = ( double ) 1e-6 ; static long oo = Long . MAX_VALUE ;"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . OutputStream ; import java . io . PrintWriter ; import java . util . StringTokenizer ;    public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; TaskA solver = new TaskA ( ) ; solver . solve ( in , out ) ; out . close ( ) ; } static class TaskA { public void solve ( InputReader in , PrintWriter out ) { int n = in . nextInt ( ) - 1 ; out . print ( 1 + \" ▁ \" ) ; for ( int i = 1 ; i <= n ; i ++ ) { int j = n - i ; if ( i % 3 != 0 && j % 3 != 0 ) { out . print ( i + \" ▁ \" + j ) ; break ; } } } } static class InputReader { public BufferedReader reader ; public StringTokenizer tokenizer ; public InputReader ( InputStream stream ) { reader = new BufferedReader ( new InputStreamReader ( stream ) ) ; tokenizer = null ; } public String next ( ) { while ( tokenizer == null || ! tokenizer . hasMoreElements ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } } }","import java . util . Scanner ;   public class Little_C_Loves3 {   public static void main ( String [ ] args ) {   Scanner in = new Scanner ( System . in ) ;   int n = in . nextInt ( ) ;   if ( ( n - 2 ) % 3 != 0 ) System . out . println ( 1 + \" ▁ \" + 1 + \" ▁ \" + ( n - 2 ) ) ; else if ( ( n - 3 ) % 3 != 0 ) System . out . println ( 1 + \" ▁ \" + 2 + \" ▁ \" + ( n - 3 ) ) ; else if ( ( n - 4 ) % 3 != 0 ) System . out . println ( 2 + \" ▁ \" + 2 + \" ▁ \" + ( n - 4 ) ) ;   } }","import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; int n = s . nextInt ( ) ; if ( n % 3 == 0 ) System . out . println ( \"1 ▁ 1 ▁ \" + ( n - 2 ) ) ; else System . out . println ( \"1 ▁ 2 ▁ \" + ( n - 3 ) ) ; } }","import java . util . ArrayList ; import java . util . Arrays ; import java . util . Scanner ;   public class Singleton_Pattern { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a = 0 ; int b = 0 ; int c = 0 ; if ( n % 3 == 2 ) { a = ( n \/ 3 ) ; b = ( n \/ 3 ) ; c = ( n \/ 3 ) + 2 ; } if ( n % 3 == 0 ) { a = 1 ; b = 1 ; c = n - 2 ; } else { a = 1 ; b = 2 ; c = n - 3 ; } System . out . println ( a + \" ▁ \" + b + \" ▁ \" + c ) ; } }"],"bleu":0.2534898206446541,"rouge_l":0.30496685142919244}
{"id":423,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException {"],"references":["import com . sun . org . apache . bcel . internal . generic . AALOAD ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . * ; import java . util . stream . IntStream ; import javafx . util . Pair ;   public class Main {   static void sort ( int a [ ] ) { Random ran = new Random ( ) ; for ( int i = 0 ; i < a . length ; i ++ ) { int r = ran . nextInt ( a . length ) ; int temp = a [ r ] ; a [ r ] = a [ i ] ; a [ i ] = temp ; }   Arrays . sort ( a ) ; }   public static void main ( String [ ] args ) throws IOException { Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; StringBuilder ans = new StringBuilder ( ) ; String NotB = \" \" ; int zero = 0 ; int flag = 0 ; int totalZeroCount = 0 ; for ( int i = 0 ; i < n ; i ++ ) { String value = input . next ( ) ; if ( flag == 0 ) { long count = value . chars ( ) . filter ( ch -> ch == '1' ) . count ( ) ; if ( count > 1 ) { NotB += value ; flag = 1 ; continue ; } else { for ( char j = '2' ; j <= '9' ; j ++ ) { if ( value . contains ( j + \" \" ) ) { NotB += value ; flag = 1 ; break ; } } if ( flag == 1 ) continue ; } } if ( value . length ( ) == 1 && value . equals ( \"0\" ) ) { System . out . println ( \"0\" ) ; return ; } else { totalZeroCount += ( value . length ( ) - 1 ) ; } } while ( totalZeroCount -- > 0 ) { ans . append ( \"0\" ) ; } System . out . println ( ( ( NotB . isEmpty ( ) ) ? \"1\" : NotB ) + ans ) ; } }","import java . util . Scanner ;   public class GenasCode {   static boolean isBeautiful ( String s ) { boolean foundOne = false ; for ( char c : s . toCharArray ( ) ) { if ( c == '1' ) { if ( foundOne ) return false ;","import java . util . Scanner ; public class test64 { public static void main ( String [ ] args ) { String tank ; int count = 0 ; String result = \"0\" ; Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; if ( n == 1 ) { System . out . println ( sc . next ( ) ) ; } else { for ( int i = 0 ; i < n ; i ++ ) { tank = sc . next ( ) ; int range = 0 ; if ( ( tank . length ( ) == 1 && tank . charAt ( 0 ) == '0' ) ) { result = \"0\" ; break ; } else { for ( int j = tank . length ( ) - 1 ; j >= 0 ; j -- ) { if ( tank . charAt ( j ) == '0' ) { count ++ ; range ++ ; } else { break ; } } if ( range == 0 ) { if ( tank . equals ( \"1\" ) && result . equals ( \"0\" ) ) result = \"1\" ; if ( ( tank . length ( ) == 1 && Integer . parseInt ( tank ) > 1 ) || tank . length ( ) > 1 ) result = tank ; } else { String s = tank . substring ( 0 , tank . length ( ) - range ) ; if ( s . length ( ) >= 2 || ( s . length ( ) == 1 && Integer . parseInt ( s ) > 1 ) ) result = s ; else { if ( result . equals ( \"0\" ) ) result = \"1\" ; } }   } } System . out . print ( result ) ; if ( ! result . equals ( \"0\" ) ) { for ( int i = 0 ; i < count ; i ++ ) { System . out . print ( 0 ) ; } }   }   } }"],"bleu":0.4813123427303981,"rouge_l":0.3823309953738248}
{"id":424,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans += a [ i ] ; } System . out . println ( ans ) ; } }"],"references":["import java . util . Scanner ;   public class A1325 { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int t = scanner . nextInt ( ) ; for ( int i = t ; i > 0 ; i -- ) { int x = scanner . nextInt ( ) ; System . out . println ( 1 + \" ▁ \" + ( x - 1 ) ) ; } } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ;   public class EhabAndGcd { public static void main ( String [ ] args ) throws IOException { BufferedReader reader = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int t = Integer . parseInt ( reader . readLine ( ) ) ; while ( t -- > 0 ) { int x = Integer . parseInt ( reader . readLine ( ) ) ; System . out . println ( 1 + \" ▁ \" + ( x - 1 ) ) ; } reader . close ( ) ; } }","import java . util . * ; import java . io . * ;   public class Problem {   public static void main ( String [ ] args ) throws NumberFormatException , IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int t = Integer . parseInt ( br . readLine ( ) ) ; for ( int i = 0 ; i < t ; i ++ ) { StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; System . out . println ( 1 + \" ▁ \" + ( n - 1 ) ) ; }   }   }","import java . util . Scanner ;   public class DigestThread {   static int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } static int lcm ( int a , int b ) { return ( a \/ gcd ( a , b ) ) * b ; } public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int t = in . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int x = in . nextInt ( ) ; System . out . println ( 1 + \" ▁ \" + ( x - 1 ) ) ; } } }"],"bleu":0.5177603537152305,"rouge_l":0.6546578658293558}
{"id":425,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException {"],"references":["import java . awt . Desktop ;    import java . io . BufferedReader ;    import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . net . URI ; import java . net . URISyntaxException ; import java . sql . Array ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collections ; import java . util . Comparator ; import java . util . HashMap ; import java . util . HashSet ; import java . util . Iterator ; import java . util . LinkedHashMap ; import java . util . LinkedHashSet ; import java . util . LinkedList ; import java . util . List ; import java . util . Map ; import java . util . PriorityQueue ; import java . util . Queue ; import java . util . Scanner ; import java . util . Set ; import java . util . Stack ; import java . util . StringTokenizer ; import java . util . TreeSet ; import java . util . Vector ;     public class codechef3 { static class comp implements Comparator < Integer > {   @ Override public int compare ( Integer o1 , Integer o2 ) { if ( Math . abs ( o1 ) > Math . abs ( o2 ) ) return - 1 ; else return 1 ; } }","import java . io . * ; import java . util . * ; import java . util . concurrent . ConcurrentHashMap ;  "],"bleu":0.5228804392271883,"rouge_l":0.5951001246974253}
{"id":426,"predictions":["import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; } public static long mod = 17352642619633L ; void run ( FastScanner in , PrintWriter out ) {"],"references":["import java . util . * ; import java . io . * ;   public class Codeforces { InputStream is ; PrintWriter out ; String INPUT = \" \" ;  ","import java . util . * ;   public class force {   static int k ; static int n ; static int m ;   public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ;   k = in . nextInt ( ) ; n = in . nextInt ( ) ; m = in . nextInt ( ) ;   char [ ] [ ] [ ] plate = new char [ k ] [ n ] [ m ] ; in . nextLine ( ) ; in . nextLine ( ) ; for ( int i = 0 ; i < k ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { String line = in . nextLine ( ) ; for ( int z = 0 ; z < line . length ( ) ; z ++ ) { plate [ i ] [ j ] [ z ] = line . charAt ( z ) ; } } in . nextLine ( ) ; }   int tapr = in . nextInt ( ) - 1 ; int tapc = in . nextInt ( ) - 1 ;   boolean [ ] [ ] [ ] visited = new boolean [ k ] [ n ] [ m ] ;   int [ ] [ ] move = { { - 1 , 0 , 0 } , { 1 , 0 , 0 } , { 0 , - 1 , 0 } , { 0 , 1 , 0 } , { 0 , 0 , - 1 } , { 0 , 0 , 1 } } ;   Queue < Triple > q = new LinkedList < > ( ) ; q . offer ( new Triple ( 0 , tapr , tapc ) ) ; int count = 0 ; while ( ! q . isEmpty ( ) ) {","import java . util . LinkedList ; import java . util . Queue ; import java . util . Scanner ; public class Solution { static class Coordinate { int x , y , z ; public Coordinate ( int x , int y , int z ) { this . x = x ; this . y = y ; this . z = z ; } } static int x_trans [ ] = { 1 , - 1 , 0 , 0 , 0 , 0 } ; static int y_trans [ ] = { 0 , 0 , 1 , - 1 , 0 , 0 } ; static int z_trans [ ] = { 0 , 0 , 0 , 0 , 1 , - 1 } ; public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int Z = in . nextInt ( ) , Y = in . nextInt ( ) , X = in . nextInt ( ) ; boolean map [ ] [ ] [ ] = new boolean [ X ] [ Y ] [ Z ] ; boolean visited [ ] [ ] [ ] = new boolean [ X ] [ Y ] [ Z ] ; in . nextLine ( ) ; in . nextLine ( ) ; for ( int z = 0 ; z < Z ; ++ z ) { for ( int y = 0 ; y < Y ; ++ y ) { String line = in . nextLine ( ) ; for ( int x = 0 ; x < X ; ++ x ) { map [ x ] [ y ] [ z ] = line . charAt ( x ) == ' . ' ; visited [ x ] [ y ] [ z ] = false ; } } in . nextLine ( ) ; } int s_y = in . nextInt ( ) - 1 ; int s_x = in . nextInt ( ) - 1 ; Coordinate start = new Coordinate ( s_x , s_y , 0 ) ; Queue < Coordinate > q = new LinkedList < > ( ) ; q . add ( start ) ; int volume = 0 ; while ( ! q . isEmpty ( ) ) { Coordinate c = q . remove ( ) ;"],"bleu":0.4374630844080999,"rouge_l":0.6896627708893052}
{"id":427,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . Arrays ; import java . util . Scanner ;   public class _0695ShuffleHashing {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int cases = sc . nextInt ( ) ; sc . nextLine ( ) ; while ( cases > 0 ) { String p = sc . nextLine ( ) ; String h = sc . nextLine ( ) ; boolean flag = false ; char [ ] ori = p . toCharArray ( ) ; Arrays . sort ( ori ) ; p = new String ( ori ) ; a : { for ( int i = 0 ; i <= h . length ( ) - p . length ( ) ; i ++ ) { String temp = h . substring ( i , i + p . length ( ) ) ; char [ ] first = temp . toCharArray ( ) ; Arrays . sort ( first ) ; if ( new String ( first ) . equals ( p ) ) { flag = true ;","import java . util . * ; import java . io . * ;   public class CFA { BufferedReader br ; PrintWriter out ; StringTokenizer st ; boolean eof ; private static final long MOD = 1000L * 1000L * 1000L + 7 ; private static final int [ ] dx = { 0 , - 1 , 0 , 1 } ; private static final int [ ] dy = { 1 , 0 , - 1 , 0 } ; private static final String yes = \" Yes \" ; private static final String no = \" No \" ;   void solve ( ) { int T = nextInt ( ) ;","import java . util . * ; import java . io . * ; public class A_Shuffle_Hashing { static class FastReader { BufferedReader br ; StringTokenizer st ; public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } public static void main ( String args [ ] ) { FastReader sc = new FastReader ( ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { String p = sc . next ( ) ; String k = sc . next ( ) ; boolean ch = false ; int a [ ] = new int [ 256 ] ; for ( int i = 0 ; i < p . length ( ) ; i ++ ) a [ p . charAt ( i ) ] ++ ;    for ( int i = 0 ; i <= k . length ( ) - p . length ( ) ; i ++ ) { int b [ ] = new int [ 256 ] ; for ( int j = i ; j < i + p . length ( ) ; j ++ ) { b [ k . charAt ( j ) ] ++ ; } boolean ch1 = true ; for ( int z = 0 ; z < 256 ; z ++ ) { if ( a [ z ] != b [ z ] ) ch1 = false ;   } if ( ch1 ) { ch = true ; break ; }   }   if ( ch ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ;   }   } }      ","import java . util . * ; import java . lang . * ; import java . io . * ; public class Main { PrintWriter out ; FastReader sc ; long mod = ( long ) ( 1e9 + 7 ) ; long maxlong = Long . MAX_VALUE ; long minlong = Long . MIN_VALUE ; public void sol ( ) { char [ ] p = rl ( ) , h = rl ( ) ; HashMap < Character , Integer > has = new HashMap < > ( ) ; for ( char ch : p ) { has . put ( ch , has . getOrDefault ( ch , 0 ) + 1 ) ; } boolean f = false ; int n = p . length ; for ( int i = 0 ; i <= h . length - n ; i ++ ) { HashMap < Character , Integer > map = new HashMap < > ( has ) ;"],"bleu":0.13568842296804778,"rouge_l":0.3272106631989597}
{"id":428,"predictions":["import java . io . * ; import java . util . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) throws java . lang . Exception { Reader pm = new Reader ( ) ;"],"references":["import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;  ","import java . util . * ; import java . lang . * ; import java . io . * ;   public class Codeforces { public static void main ( String [ ] args ) throws IOException { BufferedReader bf = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter out = new PrintWriter ( System . out ) ; StringTokenizer st = new StringTokenizer ( bf . readLine ( ) ) ; int v1 = Integer . parseInt ( st . nextToken ( ) ) , v2 = Integer . parseInt ( st . nextToken ( ) ) ; st = new StringTokenizer ( bf . readLine ( ) ) ; int t = Integer . parseInt ( st . nextToken ( ) ) , d = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] arr = new int [ t ] ; arr [ 0 ] = Math . min ( v1 , v2 ) ; arr [ t - 1 ] = Math . max ( v1 , v2 ) ; for ( int i = 1 ; i < t ; i ++ ) { if ( arr [ i ] == 0 ) arr [ i ] = arr [ i - 1 ] + d ; else { if ( Math . abs ( arr [ i ] - arr [ i - 1 ] ) <= d ) continue ; else { if ( arr [ i - 1 ] > arr [ i ] ) arr [ i - 1 ] = arr [ i ] + d ; } } } int output = 0 ; int j = t - 2 ; while ( j - 1 >= 0 && Math . abs ( arr [ j ] - arr [ j - 1 ] ) > d ) { arr [ j - 1 ] = arr [ j ] + d ; j -- ; } for ( int i = 0 ; i < t ; i ++ ) output += arr [ i ] ; out . println ( output ) ; out . close ( ) ; } }","import java . io . * ; import java . text . DecimalFormat ; import java . util . * ;   public class Main {   static class AdityaFastIO { final private int BUFFER_SIZE = 1 << 16 ; private final DataInputStream din ; private final byte [ ] buffer ; private int bufferPointer , bytesRead ; BufferedReader br ; StringTokenizer st ;   public AdityaFastIO ( ) { din = new DataInputStream ( System . in ) ; buffer = new byte [ BUFFER_SIZE ] ; bufferPointer = bytesRead = 0 ; br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; }   public AdityaFastIO ( String file_name ) throws IOException { din = new DataInputStream ( new FileInputStream ( file_name ) ) ; buffer = new byte [ BUFFER_SIZE ] ; bufferPointer = bytesRead = 0 ; }   String word ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   String line ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; }   public String readLine ( ) throws IOException { byte [ ] buf = new byte [ 64 ] ;","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . math . BigInteger ; import java . util . * ;   import javafx . util . Pair ;   public class Main {   public static void main ( String [ ] args ) {   FastScanner input = new FastScanner ( ) ; int u = input . nextInt ( ) ; int v = input . nextInt ( ) ; int t = input . nextInt ( ) ; int d = input . nextInt ( ) ; long sum = 0 ; for ( int i = 0 ; i < t ; i ++ ) { sum = sum + Math . min ( u + d * i , v + d * ( t - i - 1 ) ) ; } System . out . println ( sum ) ;   }   static class FastScanner {   BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( \" \" ) ;   String next ( ) { while ( ! st . hasMoreTokens ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   long nextLong ( ) {   return Long . parseLong ( next ( ) ) ; }   double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; }   String nextLine ( ) throws IOException { return br . readLine ( ) ; } }   }"],"bleu":0.813402162848582,"rouge_l":0.581150051037768}
{"id":429,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ;"],"references":["import java . util . * ; import java . lang . * ; import java . io . * ;   public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) {","import java . io . File ; import java . io . FileNotFoundException ; import java . util . Scanner ; import java . util . StringTokenizer ;   public class l045 {   public static void main ( String [ ] args ) throws Exception {"],"bleu":0.44758698038126066,"rouge_l":0.49686716791979946}
{"id":430,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Scanner ; import java . util . StringTokenizer ;   public class worldCup1 { static class FastReader { BufferedReader br ; StringTokenizer st ;   public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; }   String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   long nextLong ( ) { return Long . parseLong ( next ( ) ) ; }   double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; }   String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } }   public static void main ( String [ ] args ) { FastReader sc = new FastReader ( ) ; int n = sc . nextInt ( ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int i = 0 ; while ( a != b ) { a = ( int ) Math . ceil ( a \/ 2.0 ) ; b = ( int ) Math . ceil ( b \/ 2.0 ) ; i ++ ; } if ( Math . pow ( 2 , i ) == n ) { System . out . println ( \" Final ! \" ) ; } else { System . out . println ( i ) ; } } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;   public class WorldCup {   static class FastReader { BufferedReader br ; StringTokenizer st ;   public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; }   String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   long nextLong ( ) { return Long . parseLong ( next ( ) ) ; }   double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; }   String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } public static void main ( String [ ] args ) { FastReader sc = new FastReader ( ) ; int n = sc . nextInt ( ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; if ( a > b ) { int temp = b ; b = a ; a = temp ; } int rounds = 0 ; int x = n ; while ( x != 1 ) { x = x \/ 2 ; rounds ++ ; } n = n \/ 2 ; int div = 0 ; while ( a > n || b <= n ) { if ( b > n ) { a = a - n ; b = b - n ; } n = n \/ 2 ; div ++ ; } if ( div == 0 ) { System . out . println ( \" Final ! \" ) ; } else { System . out . println ( rounds - div ) ; } }   }","import java . util . Scanner ;   public class B931 {   public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int N = in . nextInt ( ) ; int A = in . nextInt ( ) - 1 ; int B = in . nextInt ( ) - 1 ; int round = 0 ; while ( A != B ) { round ++ ; A \/= 2 ; B \/= 2 ; } int finalRound = 0 ; while ( N != 1 ) { finalRound ++ ; N \/= 2 ; } if ( round == finalRound ) { System . out . println ( \" Final ! \" ) ; } else { System . out . println ( round ) ; } }   }","import java . util . Scanner ; public class WorldCup { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int a = scanner . nextInt ( ) ; int b = scanner . nextInt ( ) ; int pow = 2 ; int i = 1 ; for ( i = 1 ; Math . abs ( ( ( a - 1 ) \/ pow ) - ( ( b - 1 ) \/ pow ) ) > 0 ; i ++ ) { pow *= 2 ; } System . out . println ( pow >= n ? \" Final ! \" : i ) ; } }","import java . util . Scanner ;    public class WorldCup {   public static void main ( String [ ] args ) {"],"bleu":0.5675535720382135,"rouge_l":0.5834074733096086}
{"id":431,"predictions":["import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ;   public class CF1371A { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int t = Integer . parseInt ( br . readLine ( ) ) ; while ( t -- > 0 ) { System . out . println ( ( Integer . parseInt ( br . readLine ( ) ) + 1 ) \/ 2 ) ; } } }","import java . util . Scanner ;   public class A1371 { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int t = scanner . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int n = scanner . nextInt ( ) ; System . out . println ( n % 2 == 0 ? n \/ 2 : ( n + 1 ) \/ 2 ) ; } } }","import java . util . Scanner ;   public class MagicalStick { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int test = sc . nextInt ( ) ; for ( int i = 0 ; i < test ; i ++ ) { int stick = sc . nextInt ( ) ; if ( stick % 2 == 0 ) { System . out . println ( stick \/ 2 ) ; } else { System . out . println ( stick \/ 2 + 1 ) ; } } } }","import java . util . * ;   public class A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- != 0 ) { long n = sc . nextLong ( ) ; System . out . println ( ( n + 1 ) \/ 2 ) ; } } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . ArrayList ; import java . util . Collections ; import java . util . StringTokenizer ;   public class A { public static void main ( String [ ] args ) { FastScanner fs = new FastScanner ( ) ; int t = fs . nextInt ( ) ; while ( t -- > 0 ) { int n = fs . nextInt ( ) ; ArrayList < Integer > a = new ArrayList < > ( ) ; int ans = 1 ; if ( n % 2 == 0 ) ans = n \/ 2 ; else ans = ( n + 1 ) \/ 2 ; System . out . println ( ans ) ; } } static class FastScanner { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( \" \" ) ; String next ( ) { while ( ! st . hasMoreTokens ( ) ) try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } int [ ] readArray ( int n ) { int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = nextInt ( ) ; return a ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } } }"],"bleu":0.3807534982917468,"rouge_l":0.3386289313254471}
{"id":432,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ; import java . io . * ;   public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; String a [ ] = new String [ 8 ] ; for ( int i = 0 ; i < 8 ; i ++ ) { a [ i ] = input . next ( ) ; } boolean check = true ; int whitemin = 100 ; int blackmin = 100 ; for ( int i = 0 ; i < 8 ; i ++ ) { for ( int j = 0 ; j < 8 ; j ++ ) { check = true ; if ( a [ i ] . charAt ( j ) == ' B ' ) { for ( int k = i + 1 ; k < 8 ; k ++ ) { if ( a [ k ] . charAt ( j ) == ' W ' ) check = false ; } if ( check ) { blackmin = Math . min ( blackmin , 7 - i ) ; } } else if ( a [ i ] . charAt ( j ) == ' W ' ) { check = true ; if ( a [ i ] . charAt ( j ) == ' W ' ) { for ( int k = 0 ; k < i ; k ++ ) { if ( a [ k ] . charAt ( j ) == ' B ' ) check = false ; } if ( check ) { whitemin = Math . min ( whitemin , i ) ; } } } } } if ( whitemin <= blackmin ) System . out . println ( \" A \" ) ; else System . out . println ( \" B \" ) ; } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . ArrayList ; import java . util . StringTokenizer ;   public class CF592A { public static void main ( String [ ] args ) { FastReader input = new FastReader ( ) ; PrintWriter pw = new PrintWriter ( System . out ) ;   char [ ] [ ] table = new char [ 9 ] [ 9 ] ;   for ( int i = 1 ; i <= 8 ; i ++ ) { String s = input . nextLine ( ) ; for ( int j = 0 ; j < s . length ( ) ; j ++ ) { table [ i ] [ j + 1 ] = s . charAt ( j ) ; } }   int minA = Integer . MAX_VALUE ; int minB = Integer . MAX_VALUE ;   for ( int i = 1 ; i <= 8 ; i ++ ) { for ( int j = 1 ; j <= 8 ; j ++ ) { if ( table [ i ] [ j ] == ' W ' ) { int moves = 0 ; boolean con = true ; int row = i ; while ( ( row - 1 ) >= 1 ) { row -- ; moves ++ ; if ( table [ row ] [ j ] == ' B ' ) { con = false ; break ; } } if ( con ) { minA = Math . min ( minA , moves ) ; } }   else if ( table [ i ] [ j ] == ' B ' ) { int moves = 0 ; boolean con = true ; int row = i ; while ( ( row + 1 ) <= 8 ) { row ++ ; moves ++ ; if ( table [ row ] [ j ] == ' W ' ) { con = false ; break ; } } if ( con ) { minB = Math . min ( minB , moves ) ; } }   } }   if ( minA == minB ) { pw . println ( \" A \" ) ; } else { if ( minA < minB ) { pw . println ( \" A \" ) ; } else { pw . println ( \" B \" ) ; } }   ","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . * ; public class spoj { static ArrayList < Long > ans = new ArrayList < > ( ) ; public static void main ( String [ ] args ) throws IOException { FastReader sc = new FastReader ( ) ; PrintWriter pw = new PrintWriter ( System . out ) ; char matrix [ ] [ ] = new char [ 8 ] [ 8 ] ; for ( int i = 0 ; i < 8 ; i ++ ) { String s = sc . next ( ) ; for ( int j = 0 ; j < 8 ; j ++ ) { matrix [ i ] [ j ] = s . charAt ( j ) ; } } int maxb = Integer . MAX_VALUE , maxw = Integer . MAX_VALUE ; for ( int i = 0 ; i < 8 ; i ++ ) {   for ( int j = 0 ; j < 8 ; j ++ ) { int ans = 0 ; char c = matrix [ i ] [ j ] ; if ( c == ' B ' ) { for ( int k = i + 1 ; k < 8 ; k ++ ) { if ( matrix [ k ] [ j ] == ' W ' ) { ans = 0 ; break ; } ans ++ ; } if ( ans < maxb && ans != 0 ) maxb = ans ; } } } for ( int i = 0 ; i < 8 ; i ++ ) {   for ( int j = 0 ; j < 8 ; j ++ ) { int ans = 0 ; char c = matrix [ i ] [ j ] ; if ( c == ' W ' ) { for ( int k = i - 1 ; k >= 0 ; k -- ) { if ( matrix [ k ] [ j ] == ' B ' ) { ans = 0 ; break ; } ans ++ ; }","import java . util . Scanner ;   public class PawnChess { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ;   Integer [ ] white = new Integer [ 8 ] ; Integer [ ] black = new Integer [ 8 ] ;   for ( int i = 0 ; i < 8 ; i ++ ) { String s = scanner . nextLine ( ) ; for ( int j = 0 ; j < 8 ; j ++ ) { if ( s . charAt ( j ) == ' B ' ) black [ j ] = i ; else if ( s . charAt ( j ) == ' W ' ) { if ( black [ j ] != null ) { black [ j ] = - 1 ; if ( white [ j ] == null ) white [ j ] = 8 ; } else if ( white [ j ] == null ) white [ j ] = i ; } } }   int w = 8 , b = - 1 ; for ( int i = 0 ; i < 8 ; i ++ ) { if ( black [ i ] != null && black [ i ] > b ) b = black [ i ] ; if ( white [ i ] != null && white [ i ] < w ) w = white [ i ] ; }    if ( b + w > 7 ) System . out . println ( \" B \" ) ; else System . out . println ( \" A \" ) ; } }"],"bleu":0.010303503408161996,"rouge_l":0.17988204456094364}
{"id":433,"predictions":["import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;"],"references":["import java . util . * ;    public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; long k = sc . nextLong ( ) ; long sz = 1 ;","  import java . io . BufferedReader ; import java . io . BufferedWriter ; import java . io . DataInputStream ; import java . io . FileInputStream ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . OutputStreamWriter ; import java . util . HashSet ; import java . util . Iterator ; import java . util . Scanner ;   public class a { static class Reader { final private int BUFFER_SIZE = 1 << 16 ; private DataInputStream din ; private byte [ ] buffer ; private int bufferPointer , bytesRead ;   public Reader ( ) { din = new DataInputStream ( System . in ) ; buffer = new byte [ BUFFER_SIZE ] ; bufferPointer = bytesRead = 0 ; }   public Reader ( String file_name ) throws IOException { din = new DataInputStream ( new FileInputStream ( file_name ) ) ; buffer = new byte [ BUFFER_SIZE ] ; bufferPointer = bytesRead = 0 ; }   public String readLine ( ) throws IOException { byte [ ] buf = new byte [ 64 ] ;","    import java . util . * ;    public class Main {   public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; long k = input . nextLong ( ) ; System . out . println ( Long . numberOfTrailingZeros ( k ) + 1 ) ; }   }  ","import java . io . * ; import java . util . * ; import java . lang . * ;   public class C { public static void solve ( FastReader in , PrintWriter out , int nTestCase ) { int n = in . nextInt ( ) ; long k = in . nextLong ( ) ; if ( k % 2 == 1 ) out . println ( 1 ) ; else { long K = k ;","import java . util . Scanner ;   public class CodeParsing {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; long k = sc . nextLong ( ) ; long ans = 0 ; while ( k % 2 == 0 ) { ans ++ ; k \/= 2 ; } System . out . println ( ans + 1 ) ; sc . close ( ) ; } }"],"bleu":0.6418477039749592,"rouge_l":0.3911528274708424}
{"id":434,"predictions":["import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;"],"references":["import java . util . Arrays ; import java . util . Scanner ;   public class NewYear { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int testcases = sc . nextInt ( ) ; sc . nextLine ( ) ;   for ( int i = 0 ; i < testcases ; i ++ ) { String array = sc . nextLine ( ) ; int [ ] stream = Arrays . stream ( array . split ( \" ▁ \" ) ) . mapToInt ( Integer :: parseInt ) . toArray ( ) ; System . out . println ( output ( stream ) ) ; } }   private static int output ( int [ ] stream ) { int out = 0 ; int hours = 23 - stream [ 0 ] ; int minutes = 60 - stream [ 1 ] ; out += minutes ; out += 60 * hours ; return out ;","import java . util . Scanner ;   public class Minutes_Before_the_Year {   public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ;   int n = in . nextInt ( ) ;   while ( n -- != 0 ) { System . out . println ( 1440 - ( in . nextInt ( ) * 60 + in . nextInt ( ) ) ) ; } } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . ArrayList ; import java . util . Collections ; import java . util . StringTokenizer ;   public class A { public static void main ( String [ ] args ) { FastScanner fs = new FastScanner ( ) ; int t = fs . nextInt ( ) ; while ( t -- > 0 ) {   ArrayList < Integer > a = new ArrayList < > ( ) ; int h = fs . nextInt ( ) ; int m = fs . nextInt ( ) ; int ans = ( 23 - h ) * 60 + ( 60 - m ) ; System . out . println ( ans ) ; } } static class FastScanner { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( \" \" ) ; String next ( ) { while ( ! st . hasMoreTokens ( ) ) try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } int [ ] readArray ( int n ) { int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = nextInt ( ) ; return a ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } } }","import java . util . Arrays ; import java . util . Scanner ;   public class DigestThread {   public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int t = in . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { final int new_year = 1440 ; int h , m ; h = in . nextInt ( ) ; m = in . nextInt ( ) ; System . out . println ( new_year - ( ( h * 60 ) + m ) ) ; } } }"],"bleu":0.3556620901834125,"rouge_l":0.266820423095276}
{"id":435,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ; public class P2 {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; int f = Math . max ( x , a - x - 1 ) ; int sum = f * b ; int s = Math . max ( y , b - y - 1 ) ; int sum2 = s * a ; int r = Math . max ( sum2 , sum ) ; System . out . println ( r ) ; }   } }","import java . util . Scanner ;   public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; StringBuilder s ; int t = 0 , a , b , x , y , max ; t = scanner . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { max = 0 ; a = scanner . nextInt ( ) ; b = scanner . nextInt ( ) ; x = scanner . nextInt ( ) ; y = scanner . nextInt ( ) ; if ( x > a - x - 1 ) max = ( x * b ) ; else max = ( a - x - 1 ) * b ; if ( y > b - y - 1 && ( a * y ) > max ) max = a * y ; else if ( y <= b - y - 1 && ( ( b - y - 1 ) * a ) > max ) max = ( b - y - 1 ) * a ; System . out . println ( max ) ; }   } }","import java . util . * ; import java . io . * ; import java . math . * ;     public class A {   private static long INF = 2000000000000000000L , M = 1000000007 , MM = 998244353 ; private static int N = 0 ;   public static void process ( ) throws IOException {   long a = sc . nextLong ( ) , b = sc . nextLong ( ) , x = sc . nextLong ( ) , y = sc . nextLong ( ) ; long max = 0 ; if ( y != 0 ) max = max ( max , a * y ) ; if ( x != 0 ) max = max ( max , x * b ) ; if ( y != b - 1 ) max = max ( max , a * ( b - y - 1 ) ) ; if ( x != a - 1 ) max = max ( max , b * ( a - x - 1 ) ) ; System . out . println ( max ) ;   }  ","import java . math . * ; import java . util . * ; import java . io . * ;   public class CFA { BufferedReader br ; PrintWriter out ; StringTokenizer st ; boolean eof ; private static final long MOD = 1000L * 1000L * 1000L + 7 ; private static final int [ ] dx = { 0 , - 1 , 0 , 1 } ; private static final int [ ] dy = { 1 , 0 , - 1 , 0 } ; private static final String yes = \" Yes \" ; private static final String no = \" No \" ;   void solve ( ) { int T = nextInt ( ) ;"],"bleu":0.11599259979270987,"rouge_l":0.3558682223747426}
{"id":436,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . io . * ; import java . util . * ; import java . lang . * ;   public class B { public static char [ ] [ ] board ; public static void main ( String [ ] args ) { FastReader in = new FastReader ( ) ; PrintWriter out = new PrintWriter ( System . out ) ; int n = in . nextInt ( ) , m = in . nextInt ( ) ; board = new char [ n ] [ m ] ; int [ ] [ ] cost = new int [ n ] [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { board [ i ] = in . next ( ) . toCharArray ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( board [ i ] [ j ] != ' B ' ) continue ; for ( int l = i ; l < n ; l ++ ) { for ( int r = 0 ; r < m ; r ++ ) { if ( i == l && j == r ) continue ; if ( board [ l ] [ r ] != ' B ' ) continue ; if ( ! check ( i , j , l , r ) ) {","import java . util . * ;   public class CF_275_B_CONVEX_SHAPE {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) , m = sc . nextInt ( ) ; char [ ] [ ] mat = new char [ n ] [ m ] ; for ( int i = 0 ; i < n ; i ++ ) mat [ i ] = sc . next ( ) . toCharArray ( ) ; boolean can = true ; for ( int r1 = 0 ; r1 < n ; r1 ++ ) for ( int c1 = 0 ; c1 < m ; c1 ++ ) for ( int r2 = r1 ; r2 < n ; r2 ++ ) for ( int c2 = 0 ; c2 < m ; c2 ++ ) { if ( mat [ r1 ] [ c1 ] == ' W ' || mat [ r2 ] [ c2 ] == ' W ' ) continue ; boolean can1 = true , can2 = true ; for ( int r3 = r1 ; r3 <= r2 ; r3 ++ ) can1 &= mat [ r3 ] [ c2 ] == ' B ' ; for ( int c3 = c1 ; c3 <= c2 ; c3 ++ ) can1 &= mat [ r1 ] [ c3 ] == ' B ' ; for ( int r3 = r1 ; r3 <= r2 ; r3 ++ ) can2 &= mat [ r3 ] [ c1 ] == ' B ' ; for ( int c3 = c1 ; c3 <= c2 ; c3 ++ ) can2 &= mat [ r2 ] [ c3 ] == ' B ' ; can &= can1 | can2 ; } System . out . println ( can ? \" YES \" : \" NO \" ) ; }     }","import java . io . * ; import java . math . * ; import java . util . * ;      public class Main {   private static int dx [ ] = { 1 , 0 , - 1 , 0 } ; private static int dy [ ] = { 0 , - 1 , 0 , 1 } ;   private static final long INF = Long . MAX_VALUE ; private static final int INT_INF = Integer . MAX_VALUE ; private static final long NEG_INF = Long . MIN_VALUE ; private static final int NEG_INT_INF = Integer . MIN_VALUE ; private static final double EPSILON = 1e-10 ;   private static final int MAX = 2000007 ; private static final long MOD = 1000000007 ;   private static final int MAXN = 100007 ; private static final int MAXA = 10000009 ; private static final int MAXLOG = 22 ;   public static void main ( String [ ] args ) throws IOException {   InputReader in = new InputReader ( System . in ) ;","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . math . BigInteger ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collections ; import java . util . HashMap ; import java . util . HashSet ; import java . util . List ; import java . util . PriorityQueue ; import java . util . Random ; import java . util . StringTokenizer ;   public class A {   private static char [ ] [ ] arr ;   public static void main ( String [ ] args ) throws IOException {   FastScanner sc = new FastScanner ( ) ; PrintWriter out = new PrintWriter ( System . out ) ; int n = sc . nextInt ( ) , m = sc . nextInt ( ) ; arr = new char [ n ] [ m ] ; ArrayList < Pair > lis = new ArrayList < A . Pair > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { String str = sc . next ( ) ; for ( int j = 0 ; j < m ; j ++ ) { arr [ i ] [ j ] = str . charAt ( j ) ; if ( arr [ i ] [ j ] == ' B ' ) lis . add ( new Pair ( i , j ) ) ; } } int len = lis . size ( ) ; for ( int i = 0 ; i < len ; i ++ ) { Pair curr = lis . get ( i ) ;"],"bleu":0.09048364800899306,"rouge_l":0.3120872844955799}
{"id":437,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ;   public class problem967A { private static Scanner in = new Scanner ( System . in ) ; private static int n = 0 , s = 0 ; private static ArrayList < Time > schedule = new ArrayList < Time > ( ) ; public static void main ( String [ ] args ) { n = in . nextInt ( ) ; s = in . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { Time time = new Time ( in . nextInt ( ) , in . nextInt ( ) ) ; schedule . add ( time ) ; } schedule . add ( new Time ( 0 , 0 ) ) ; Collections . sort ( schedule , new SortByTime ( ) ) ;","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Scanner ; import java . util . StringTokenizer ; import java . util . * ;   public class mindThegap { static class FastReader { BufferedReader br ; StringTokenizer st ;   public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; }   String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   long nextLong ( ) { return Long . parseLong ( next ( ) ) ; }   double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; }   String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } }   public static void main ( String [ ] args ) { FastReader sc = new FastReader ( ) ; int flag = 0 ; int n = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int arr [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = a * 60 + b ; arr [ i ] = c ; } if ( arr [ 0 ] > s ) { System . out . println ( \"0 ▁ 0\" ) ; } else { for ( int i = 0 ; i < n - 1 ; i ++ ) {","import java . io . * ; import java . util . * ; import java . text . * ; import java . lang . * ; import java . math . * ; public class Main { static PrintWriter out = new PrintWriter ( new OutputStreamWriter ( System . out ) ) ; static BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; static long mod = ( long ) 1e9 + 7 ; static long mod1 = 998244353 ; static ArrayList < Integer > graph [ ] ; static int pptr = 0 , pptrmax = 0 ; static String st [ ] ; static int time ( int a , int b ) { return 60 * a + b ; } static Pair tt ( int a ) { return new Pair ( a \/ 60 , a % 60 ) ; } public static void main ( String args [ ] ) throws Exception { int n = pi ( ) ; int s = pi ( ) ; int input [ ] [ ] = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { input [ i ] [ j ] = pi ( ) ; } } int f = time ( input [ 0 ] [ 0 ] , input [ 0 ] [ 1 ] ) ; if ( f >= s + 1 ) { out . println ( 0 + \" ▁ \" + 0 ) ; out . flush ( ) ; out . close ( ) ; return ; } for ( int i = 1 ; i < n ; i ++ ) { int x = time ( input [ i ] [ 0 ] , input [ i ] [ 1 ] ) ;","  import sun . font . DelegatingShape ; import sun . misc . IOUtils ; import sun . nio . cs . KOI8_U ;   import javax . smartcardio . ATR ; import java . io . * ; import java . lang . reflect . Array ; import java . util . * ; import java . math . * ; import java . lang . * ;   public class AA implements Runnable {    public void run ( ) { InputReader sc = new InputReader ( ) ; PrintWriter out = new PrintWriter ( System . out ) ; int i = 0 , j = 0 , k = 0 ; int t = 0 ;"],"bleu":0.22038703548524843,"rouge_l":0.36722408026755854}
{"id":438,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ;   public class Main {   public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; StringBuilder s = new StringBuilder ( input . next ( ) ) ; if ( s . indexOf ( \" http \" ) == 0 ) { s . insert ( s . indexOf ( \" http \" ) + 4 , \" : \/\/ \" ) ; } else { s . insert ( s . indexOf ( \" ftp \" ) + 3 , \" : \/\/ \" ) ; } int ruindex = - 1 ; for ( int i = 1 ; i < s . length ( ) - 1 ; i ++ ) { if ( s . charAt ( i ) == ' r ' && s . charAt ( i + 1 ) == ' u ' && s . charAt ( i - 1 ) != ' \/ ' ) { ruindex = i ; break ; } }","import java . util . Scanner ; public class Task02 {   public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ;","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . text . ParseException ; import java . text . SimpleDateFormat ; import java . time . Duration ; import java . time . Instant ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . LinkedList ; import java . util . * ; import java . util . StringJoiner ; import java . util . StringTokenizer ;   public class B {   static ArrayList < Integer > adj [ ] ;   public static void main ( String [ ] args ) { FastScanner sc = new FastScanner ( ) ; PrintWriter out = new PrintWriter ( System . out ) ; String s1 = sc . next ( ) ; int n = s1 . length ( ) ; char c [ ] = s1 . toCharArray ( ) ; String ans = \" \" ; if ( c [ 0 ] == ' f ' ) { ans += \" ftp : \/\/ \" ; int id1 = s1 . lastIndexOf ( \" ru \" ) ; String domain = s1 . substring ( 3 , id1 ) ; ans += domain ; ans += \" . ru \" ; if ( n - id1 > 2 ) { ans += \" \/ \" ; ans += s1 . substring ( id1 + 2 ) ; } } else { ans += \" http : \/\/ \" ; int id1 = s1 . lastIndexOf ( \" ru \" ) ; String domain = s1 . substring ( 4 , id1 ) ; ans += domain ; ans += \" . ru \" ;"],"bleu":0.660524180064725,"rouge_l":0.5343464797913952}
{"id":439,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . Arrays ; import java . util . Locale ; import java . util . Scanner ;   public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { long l = sc . nextLong ( ) ; String s = sc . next ( ) ; try { int j = 0 ; for ( ; s . charAt ( j ) != '8' ; j ++ ) { } if ( s . length ( ) - j < 11 ) { System . out . println ( \" NO \" ) ; } else { System . out . println ( \" YES \" ) ; }   } catch ( Exception Arrayindexoutofbounds ) { System . out . println ( \" NO \" ) ; continue ; }    } } }","import java . util . Arrays ; import java . util . Locale ; import java . util . Scanner ;   public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { long l = sc . nextLong ( ) ; String s = sc . next ( ) ; if ( l < 11 ) { System . out . println ( \" NO \" ) ; continue ; } try { int j = 0 ; for ( ; s . charAt ( j ) != '8' ; j ++ ) { } if ( s . length ( ) - j < 11 ) { System . out . println ( \" NO \" ) ; } else { System . out . println ( \" YES \" ) ; }   } catch ( Exception Arrayindexoutofbounds ) { System . out . println ( \" NO \" ) ; continue ; }    } } }","import java . util . * ;   public class question { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; for ( int l = 0 ; l < t ; l ++ ) { int n = sc . nextInt ( ) ; String s = sc . next ( ) ; if ( s . indexOf ( '8' ) != - 1 ) { int num = s . length ( ) - s . indexOf ( '8' ) ; if ( num >= 11 ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ; } else System . out . println ( \" NO \" ) ; } } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . OutputStream ; import java . io . PrintWriter ; import java . util . StringTokenizer ;   public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; TaskA solver = new TaskA ( ) ; solver . solve ( in , out ) ; out . close ( ) ; } static class TaskA { public void solve ( InputReader in , PrintWriter out ) { int t = in . nextInt ( ) ; while ( t -- != 0 ) { int k = in . nextInt ( ) ; String s = in . next ( ) ; if ( k < 11 ) { out . println ( \" NO \" ) ; continue ; } if ( k == 11 ) { if ( s . charAt ( 0 ) == '8' ) out . println ( \" YES \" ) ; else out . println ( \" NO \" ) ; } else { for ( int i = 0 ; i <= k - 11 ; i ++ ) { if ( s . charAt ( i ) == '8' ) { out . println ( \" YES \" ) ; break ; } if ( i == k - 11 ) out . println ( \" NO \" ) ; } } } } } static class InputReader { public BufferedReader reader ; public StringTokenizer tokenizer ; public InputReader ( InputStream stream ) { reader = new BufferedReader ( new InputStreamReader ( stream ) ) ; tokenizer = null ; } public String next ( ) { while ( tokenizer == null || ! tokenizer . hasMoreElements ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } } }"],"bleu":0.11716717985005556,"rouge_l":0.2544962928524237}
{"id":440,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException {"],"references":["import java . util . Scanner ;   public class AdjacentReplacement {   public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ;   int n = in . nextInt ( ) ;   int a [ ] = new int [ n ] ;   for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = in . nextInt ( ) ; if ( a [ i ] % 2 == 0 ) { a [ i ] -- ; }   System . out . print ( a [ i ] + \" ▁ \" ) ; }   }   }","import java . util . * ;   public class questionCF {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int a = sc . nextInt ( ) ; if ( ( a & 1 ) == 0 ) System . out . print ( a - 1 + \" ▁ \" ) ; else System . out . print ( a + \" ▁ \" ) ; } } }","import java . util . * ; public class MyClass { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = sc . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) System . out . print ( arr [ i ] - 1 + \" ▁ \" ) ; else System . out . print ( arr [ i ] + \" ▁ \" ) ; } } }"],"bleu":0.051058642179053364,"rouge_l":0.2705385427666315}
{"id":441,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ;   import java . io . * ;   public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; }   public static long mod = 17352642619633L ;   void run ( FastScanner in , PrintWriter out ) {  ","import java . io . * ; import java . util . * ;   public class A {   static ArrayList < Integer > adj [ ] ; static HashSet < Integer > hs ; static long ans ; static int k ;   static int dfs ( int u , int p ) { int s = 0 ; for ( int v : adj [ u ] ) { if ( p != v ) { int x = dfs ( v , u ) ; ans += Math . min ( k - x , x ) ; s += x ; } } if ( hs . contains ( u ) ) s ++ ; return s ; }   public static void main ( String args [ ] ) throws Exception { Scanner sc = new Scanner ( System . in ) ; PrintWriter pw = new PrintWriter ( System . out ) ;   int n = sc . nextInt ( ) ; k = sc . nextInt ( ) * 2 ; hs = new HashSet < > ( ) ; for ( int i = 0 ; i < k ; i ++ ) { hs . add ( sc . nextInt ( ) - 1 ) ; }   adj = new ArrayList [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { adj [ i ] = new ArrayList < > ( ) ; } for ( int i = 1 ; i < n ; i ++ ) { int u = sc . nextInt ( ) - 1 ; int v = sc . nextInt ( ) - 1 ; adj [ u ] . add ( v ) ; adj [ v ] . add ( u ) ; } dfs ( 0 , 0 ) ; pw . print ( ans ) ; pw . flush ( ) ; }  "],"bleu":0.2051705076412825,"rouge_l":0.33511573395839445}
{"id":442,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ; import java . io . * ;   public class threestrings { public static void main ( String [ ] args ) { FastReader in = new FastReader ( ) ; PrintWriter out = new PrintWriter ( System . out ) ; int T = in . nextInt ( ) ; for ( int tt = 0 ; tt < T ; tt ++ ) { String a = in . nextLine ( ) ; String b = in . nextLine ( ) ; String c = in . nextLine ( ) ; boolean swappable = true ; for ( int i = 0 ; i < a . length ( ) ; i ++ ) { if ( a . charAt ( i ) == c . charAt ( i ) || b . charAt ( i ) == c . charAt ( i ) ) swappable = true ; else { swappable = false ; break ; }   } if ( swappable ) out . println ( \" YES \" ) ; else out . println ( \" NO \" ) ;   } out . close ( ) ; }   static class FastReader { BufferedReader br ; StringTokenizer st ;   public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; }   String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   long nextLong ( ) { return Long . parseLong ( next ( ) ) ; }   double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; }   String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;   public class CodeForces619 { public static void main ( String [ ] args ) { FastScanner fs = new FastScanner ( ) ; int tt = fs . nextInt ( ) ; while ( -- tt >= 0 ) { String a = fs . next ( ) ; String b = fs . next ( ) ; String c = fs . next ( ) ; boolean can = true ; for ( int i = 0 ; i < a . length ( ) ; i ++ ) { if ( a . charAt ( i ) != c . charAt ( i ) && b . charAt ( i ) != c . charAt ( i ) ) { can = false ; break ; } } if ( can ) { System . out . println ( \" YES \" ) ; } else { System . out . println ( \" NO \" ) ; } } } static class FastScanner { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( \" \" ) ; String next ( ) { while ( ! st . hasMoreTokens ( ) ) try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } int [ ] readArray ( int n ) { int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = nextInt ( ) ; return a ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } } }","import java . io . * ; import java . lang . Math ; import java . util . * ;   public class Main {   public BufferedReader in ; public PrintStream out ;   public boolean log_enabled = false ; public boolean multiply_tests = true ;   public static boolean do_gen_test = false ; public void gen_test ( ) { } private class TestCase {   public Object solve ( ) { String a = readLn ( ) ; String b = readLn ( ) ; String c = readLn ( ) ; for ( int i = 0 ; i < a . length ( ) ; i ++ ) { if ( ( a . charAt ( i ) != c . charAt ( i ) ) && ( b . charAt ( i ) != c . charAt ( i ) ) ) { return \" NO \" ; } } return \" YES \" ;"],"bleu":0.11630629004383547,"rouge_l":0.2797153375846427}
{"id":443,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["from collections import defaultdictfrom collections import dequen , m = list ( map ( int , input ( ) . split ( ) ) ) d = defaultdict ( list ) for i in range ( m ) : x , y = map ( int , input ( ) . split ( ) ) d [ x ] . append ( y ) d [ y ] . append ( x ) c = { } f = 0 visited = [ 0 ] * ( n + 1 ) for i in range ( 1 , n + 1 ) : if visited [ i ] == 0 : q = deque ( ) q . append ( i ) visited [ i ] = 1 while q : j = q . popleft ( ) co = c . get ( j , 0 ) if co == 0 : c [ j ] = ' a ' co = ' a ' for k in d [ j ] : if visited [ k ] == 0 : coo = c . get ( k , 0 ) if coo == 0 : c [ k ] = ' a ' if co == ' b ' else ' b ' q . append ( k ) visited [ k ] = 1f or i in d : co = c [ i ] for j in d [ i ] : coo = c [ j ] if co == coo : f = 1 break if f : breakif f : print ( - 1 ) else : a , b = [ ] , [ ] for i in range ( 1 , n + 1 ) : co = c . get ( i , 0 ) if co == ' a ' : a . append ( i ) elif co == ' b ' : b . append ( i ) print ( len ( a ) ) print ( * a ) print ( len ( b ) ) print ( * b )","import java . io . * ; import java . util . * ;   public class Main { static int n ; static ArrayList < Integer > [ ] adjList ; static int [ ] setNum ; static boolean bipartiteCheck ; static boolean [ ] vis ; static int s ;   public static void bfs ( int startingNode ) { Queue < Integer > q = new LinkedList < > ( ) ; q . add ( startingNode ) ; setNum [ startingNode ] = 1 ; vis [ startingNode ] = true ; while ( ! q . isEmpty ( ) ) {","import java . io . * ; import java . util . * ;   public class Main { static int n ; static ArrayList < Integer > [ ] adjList ; static int [ ] setNum ; static boolean bipartiteCheck ; static boolean [ ] vis ; static int s ;   public static void bfs ( int startingNode ) { Queue < Integer > q = new LinkedList < > ( ) ; q . add ( startingNode ) ; setNum [ startingNode ] = 1 ; vis [ startingNode ] = true ; while ( ! q . isEmpty ( ) ) {","import java . awt . Point ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . math . BigDecimal ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collections ; import java . util . HashSet ; import java . util . Hashtable ; import java . util . LinkedList ; import java . util . Queue ; import java . util . Stack ; import java . util . StringTokenizer ;    public class N687A { static PrintWriter out ; static Scanner sc ; static ArrayList < Integer > q , w ; static ArrayList < Integer > adj [ ] ; static HashSet < Integer > primesH ; static boolean can ;","import java . util . * ; import java . io . * ; import java . math . BigInteger ; import java . text . * ; public class Main { static long mod = 1000_000_007 ; static long mod1 = 998244353 ; static boolean fileIO = true ; static boolean memory = true ; static FastScanner f ; static PrintWriter pw ; static double eps = ( double ) 1e-6 ; static int oo = ( int ) 2e9 ;"],"bleu":0.40712743103669924,"rouge_l":0.5186121323529411}
{"id":444,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ; import java . lang . * ; import java . io . * ; public class Main {    public static void main ( String [ ] args ) throws java . lang . Exception { Scanner sc = new Scanner ( System . in ) ; int x1 = sc . nextInt ( ) ; int y1 = sc . nextInt ( ) ; int x2 = sc . nextInt ( ) ; int y2 = sc . nextInt ( ) ; if ( ( x1 != x2 ) && ( y1 != y2 ) && Math . abs ( x1 - x2 ) != Math . abs ( y1 - y2 ) ) { System . out . println ( \" - 1\" ) ; } else if ( x1 == x2 ) { System . out . println ( ( x1 + Math . abs ( y2 - y1 ) ) + \" ▁ \" + y1 + \" ▁ \" + ( x2 + Math . abs ( y2 - y1 ) ) + \" ▁ \" + y2 ) ; } else if ( y1 == y2 ) { System . out . println ( x1 + \" ▁ \" + ( y1 + Math . abs ( x2 - x1 ) ) + \" ▁ \" + x2 + \" ▁ \" + ( y2 + Math . abs ( x2 - x1 ) ) ) ; } else { System . out . println ( x1 + \" ▁ \" + y2 + \" ▁ \" + x2 + \" ▁ \" + y1 ) ; } } }","import java . util . * ; import java . lang . * ; import java . io . * ;   public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) {"],"bleu":0.34772504705825924,"rouge_l":0.614609571788413}
{"id":445,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ; import java . lang . * ; import java . io . * ; public class African_Crossword {   public static void main ( String [ ] args ) throws java . lang . Exception { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) , m = Integer . parseInt ( st . nextToken ( ) ) ; char c [ ] [ ] = new char [ n ] [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { String s = br . readLine ( ) ; for ( int j = 0 ; j < m ; j ++ ) { c [ i ] [ j ] = s . charAt ( j ) ; } } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { boolean ok = false ; for ( int k = 0 ; k < m ; k ++ ) { if ( c [ i ] [ j ] == c [ i ] [ k ] && j != k ) { ok = true ; break ; } } if ( ! ok ) { for ( int k = 0 ; k < n ; k ++ ) { if ( c [ i ] [ j ] == c [ k ] [ j ] && i != k ) { ok = true ; break ; } } } if ( ! ok ) System . out . print ( c [ i ] [ j ] ) ; } }   }   }","import java . io . * ; import java . lang . reflect . Array ; import java . util . * ; public class Main {   public static void main ( String [ ] args ) { InputReader sc = new InputReader ( System . in ) ; PrintWriter pw = new PrintWriter ( System . out ) ; Random gen = new Random ( ) ; int test = 1 ;","import java . io . * ; import java . math . BigDecimal ; import java . math . BigInteger ; import java . util . * ; import java . util . Comparator ;   public class scratch_25 { static class Reader { static BufferedReader reader ; static StringTokenizer tokenizer ;   static void init ( InputStream input ) { reader = new BufferedReader ( new InputStreamReader ( input ) ) ; tokenizer = new StringTokenizer ( \" \" ) ; }   static String next ( ) throws IOException { while ( ! tokenizer . hasMoreTokens ( ) ) {","import java . util . Scanner ;   public class B90 {   public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int R = in . nextInt ( ) ; int C = in . nextInt ( ) ; char [ ] [ ] S = new char [ R ] [ ] ; for ( int r = 0 ; r < R ; r ++ ) { S [ r ] = in . next ( ) . toCharArray ( ) ; } StringBuilder sb = new StringBuilder ( ) ; for ( int r = 0 ; r < R ; r ++ ) { for ( int c = 0 ; c < C ; c ++ ) { boolean ok = true ; char ch = S [ r ] [ c ] ; for ( int rr = 0 ; rr < R ; rr ++ ) { if ( r != rr && S [ rr ] [ c ] == ch ) { ok = false ; break ; } } for ( int cc = 0 ; cc < C ; cc ++ ) { if ( c != cc && S [ r ] [ cc ] == ch ) { ok = false ; break ; } } if ( ok ) { sb . append ( ch ) ; } } } System . out . println ( sb ) ; }   }","import java . util . * ; import java . io . * ; public class EdB {   public static void main ( String [ ] args ) throws Exception { int num = 998244353 ;  "],"bleu":0.41389251312289554,"rouge_l":0.5501002004008017}
{"id":446,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["  import java . util . ArrayList ; import java . util . Scanner ;   public class B {   public static void main ( String [ ] args ) {   Scanner nik = new Scanner ( System . in ) ; int n = nik . nextInt ( ) ; int m = nik . nextInt ( ) ;   int [ ] a = new int [ n + 2 ] ;   int max = 0 ;   for ( int i = 1 ; i <= n ; i ++ ) { a [ i ] = nik . nextInt ( ) ; } a [ 0 ] = 0 ; a [ n + 1 ] = m ;  ","  import java . util . ArrayList ; import java . util . Scanner ;   public class B {   public static void main ( String [ ] args ) {   Scanner nik = new Scanner ( System . in ) ; int n = nik . nextInt ( ) ; int m = nik . nextInt ( ) ;   int [ ] a = new int [ n + 2 ] ;   int max = 0 ;   for ( int i = 1 ; i <= n ; i ++ ) { a [ i ] = nik . nextInt ( ) ; } a [ 0 ] = 0 ; a [ n + 1 ] = m ;   int off = 0 ; int on = 0 ; boolean b = false ;","import java . util . Scanner ; public class Lamp { public static void main ( String [ ] args ) {","import java . util . * ;   public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) ; int m = in . nextInt ( ) ; int [ ] a = new int [ n + 2 ] ; a [ n + 1 ] = m ; for ( int i = 1 ; i < n + 1 ; i ++ ) a [ i ] = in . nextInt ( ) ; int seg = 0 ; int max = 0 ; int t = 0 ; int ans = 0 ; for ( int i = 1 ; i <= n + 1 ; i += 2 ) ans += a [ i ] - a [ i - 1 ] ; int sm = ans ; for ( int i = 1 ; i <= n ; i += 2 ) { t += a [ i ] - a [ i - 1 ] ; if ( a [ i ] + 1 != a [ i + 1 ] && a [ i ] + 1 != m ) { seg = 2 * t + m - a [ i ] - sm - 1 ; ans = Math . max ( seg , ans ) ; } } System . out . println ( ans ) ; in . close ( ) ; } }"],"bleu":0.2642138995497447,"rouge_l":0.5175989943431804}
{"id":447,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . io . * ; import java . math . * ; import java . security . * ; import java . text . * ; import java . util . * ;    public class CodeForce {   static boolean flag = false ; public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringBuilder sb = new StringBuilder ( ) ; int n = Integer . parseInt ( br . readLine ( ) ) ; mp [ ] arr = new mp [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { String [ ] sr = br . readLine ( ) . split ( \" ▁ \" ) ; int x = Integer . parseInt ( sr [ 0 ] ) ; arr [ i ] = new mp ( x , sr [ 1 ] ) ; } long total = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( ( total == 0 ) && ( ! arr [ i ] . sr . equals ( \" South \" ) ) ) { System . out . println ( \" NO \" ) ; return ; } if ( ( total == 20000 ) && ( ! arr [ i ] . sr . equals ( \" North \" ) ) ) { System . out . println ( \" NO \" ) ; return ; } if ( arr [ i ] . sr . equals ( \" North \" ) ) { total -= arr [ i ] . dist ; if ( total < 0 ) { System . out . println ( \" NO \" ) ; return ; } } if ( arr [ i ] . sr . equals ( \" South \" ) ) { total += arr [ i ] . dist ; ; if ( total > 20000 ) { System . out . println ( \" NO \" ) ; return ; } } } if ( total != 0 ) { System . out . println ( \" NO \" ) ; return ; } System . out . println ( \" YES \" ) ;    } } class mp { int dist ; String sr ; mp ( int a , String s ) { dist = a ; sr = s ; } }  ","import java . util . * ; import java . io . * ; import java . math . BigInteger ; public class cf1 { static long mod = ( long ) 1e9 + 7 ; static long mod1 = 998244353 ; static FastScanner f ; static PrintWriter pw = new PrintWriter ( System . out ) ; static Scanner S = new Scanner ( System . in ) ; static long x0 ; static long y0 ; static int inf = ( int ) ( 1e9 ) ; static long iinf = ( long ) ( 1e18 ) ; static void solve ( ) throws NumberFormatException , IOException { int n = f . ni ( ) ; String str [ ] = new String [ n + 1 ] ; int dir [ ] = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; ++ i ) { dir [ i ] = f . ni ( ) ; str [ i ] = f . next ( ) ; } int x = 0 , y = 0 ; boolean ok = true ; for ( int i = 1 ; i <= n ; ++ i ) { if ( y == 0 ) { ok &= str [ i ] . equals ( \" South \" ) ; ok &= dir [ i ] <= 20000 ; } if ( y == 20000 ) { ok &= str [ i ] . equals ( \" North \" ) ; ok &= dir [ i ] <= 20000 ; } if ( str [ i ] . equals ( \" West \" ) ) continue ; if ( str [ i ] . equals ( \" East \" ) ) continue ; if ( str [ i ] . equals ( \" North \" ) ) { y -= dir [ i ] ; ok &= y >= 0 ; } if ( str [ i ] . equals ( \" South \" ) ) { y += dir [ i ] ; ok &= y <= 20000 ; } } ok &= y == 0 ;","  import java . io . * ; import java . util . * ; import java . math . * ; import java . lang . * ;   public class Solution implements Runnable {   public void run ( ) { InputReader sc = new InputReader ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; int i = 0 , j = 0 , k = 0 , t = 0 ;","import java . util . Scanner ;   public class NYNorthPole { public static void main ( String [ ] args ) {   Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) , i , d = 0 ; String o = \" YES \" ;   for ( i = 0 ; i < n ; i ++ ) { int t = in . nextInt ( ) ; String s = in . next ( ) ;   if ( d <= 0 && ! s . equals ( \" South \" ) || ( d >= 20000 && ! s . equals ( \" North \" ) ) || d > 20000 || d < 0 ) { o = \" NO \" ; break ; } if ( s . equals ( \" South \" ) ) d += t ; if ( s . equals ( \" North \" ) ) d -= t ; } in . close ( ) ; System . out . println ( d == 0 ? o : \" NO \" ) ; } }"],"bleu":0.28218368124664983,"rouge_l":0.49013878743608486}
{"id":448,"predictions":["import java . util . * ; import java . io . * ; import java . math . BigInteger ; import java . text . * ; public class Main { static long mod = 1000_000_007 ; static long mod1 = 998244353 ; static boolean fileIO = false ; static boolean memory = true ; static FastScanner f ; static PrintWriter pw ; static double eps = ( double ) 1e-6 ; static long oo = Long . MAX_VALUE ;"],"references":["import java . util . Scanner ;   public class MidBalls { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ;   int n = scanner . nextInt ( ) ; int m = scanner . nextInt ( ) ;   StringBuilder ans = new StringBuilder ( ) ;   if ( m % 2 != 0 ) { while ( n > 0 ) { int left = ( m + 1 ) \/ 2 - 1 ; int right = left + 1 ;   while ( ( left > 0 || right <= m ) && n > 0 ) { ans . append ( right + \" \\n \" ) ; right ++ ; n -- ;   if ( left == 0 || n == 0 ) continue ; ans . append ( left + \" \\n \" ) ; left -- ; n -- ; } } } else { while ( n > 0 ) { int left = m \/ 2 ; int right = left + 1 ;   while ( ( left > 0 || right <= m ) && n > 0 ) { ans . append ( left + \" \\n \" ) ; left -- ; n -- ;   if ( right > m || n == 0 ) continue ; ans . append ( right + \" \\n \" ) ; right ++ ; n -- ; } } } System . out . println ( ans ) ; } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . math . BigInteger ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collections ; import java . util . HashMap ; import java . util . HashSet ; import java . util . List ; import java . util . PriorityQueue ; import java . util . Random ; import java . util . StringTokenizer ;   public class A {   public static void main ( String [ ] args ) throws IOException {   FastScanner sc = new FastScanner ( ) ; PrintWriter out = new PrintWriter ( System . out ) ; int n = sc . nextInt ( ) , m = sc . nextInt ( ) ; ArrayList < Integer > lis = new ArrayList < Integer > ( ) ; for ( int i = 1 ; i <= m ; i ++ ) { lis . add ( i ) ; } while ( n > 0 ) { ArrayList < Integer > my = new ArrayList < Integer > ( lis ) ;","import java . awt . image . AreaAveragingScaleFilter ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collections ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ;","import java . util . * ; import java . io . * ; import java . lang . * ; public class Codeforces { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter out = new PrintWriter ( System . out ) ; StringTokenizer st = new StringTokenizer ( \" \" ) ; String next ( ) { if ( ! st . hasMoreTokens ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( Exception e ) {   } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } void solve ( ) { int n = nextInt ( ) , m = nextInt ( ) ; StringBuilder str = new StringBuilder ( ) ; List < Integer > arr = new ArrayList < > ( ) ; int pos = m \/ 2 ; if ( m % 2 != 0 ) { arr . add ( pos ) ; for ( int i = 1 ; i < m ; i ++ ) { if ( i % 2 != 0 ) { pos -= i ; } else { pos += i ; } arr . add ( pos ) ; } } else { arr . add ( pos - 1 ) ; pos -- ; for ( int i = 1 ; i < m ; i ++ ) { if ( i % 2 != 0 ) { pos += i ; } else { pos -= i ; } arr . add ( pos ) ; } } for ( int i = 0 ; i < n ; i ++ ) { out . println ( arr . get ( i % arr . size ( ) ) + 1 ) ; } out . close ( ) ; } public static void main ( String [ ] args ) { new Codeforces ( ) . solve ( ) ; } }","import java . util . Arrays ; import java . util . Comparator ; import java . util . Scanner ;   public class B195 {   public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int N = in . nextInt ( ) ; int M = in . nextInt ( ) ; Integer [ ] A = new Integer [ M ] ; for ( int m = 0 ; m < M ; m ++ ) { A [ m ] = m + 1 ; } Arrays . sort ( A , new Comparator < Integer > ( ) { @ Override public int compare ( Integer o1 , Integer o2 ) { double d1 = Math . abs ( ( M + 1 ) \/ 2.0 - o1 ) ; double d2 = Math . abs ( ( M + 1 ) \/ 2.0 - o2 ) ; if ( d1 == d2 ) { return o1 - o2 ; } else { return ( int ) Math . signum ( d1 - d2 ) ; } } } ) ; StringBuilder output = new StringBuilder ( ) ; for ( int n = 0 ; n < N ; n ++ ) { output . append ( A [ n % M ] ) . append ( ' \\n ' ) ; } System . out . print ( output ) ; }   }"],"bleu":0.4127791200130202,"rouge_l":0.5025722801222545}
{"id":449,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ; public class Solution { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long n = sc . nextLong ( ) ; long x = sc . nextLong ( ) ; long y = sc . nextLong ( ) ; long p = ( long ) Math . ceil ( ( double ) n * ( double ) ( y ) \/ ( double ) 100 ) ; if ( p - x <= 0 ) System . out . print ( 0 ) ; else System . out . print ( p - x ) ; } }","import java . util . Scanner ;   public class JavaApplication1 { public static Scanner in = new Scanner ( System . in ) ; public static int answer ( int n , int x , int y ) { double z = n * y ; z = z \/ 100 ; z += 0.99 ; z -= x ; z = Math . floor ( z ) ; int ans = ( int ) z ; if ( ans < 0 ) ans = 0 ; return ans ; } public static void main ( String [ ] args ) { int n = in . nextInt ( ) ; int x = in . nextInt ( ) ; int y = in . nextInt ( ) ; System . out . println ( answer ( n , x , y ) ) ; }   }","import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int w = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; int needed = ( n * y ) \/ 100 ; if ( ( n * y ) % 100 != 0 ) needed ++ ; if ( needed - w < 0 ) System . out . println ( 0 ) ; else System . out . println ( needed - w ) ; } }","import java . io . * ; import java . util . * ;   public class mahakal {   static long mod = ( long ) 1e9 + 7l ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ;   int res = ( int ) Math . ceil ( ( double ) ( n * y ) \/ 100 ) ; System . out . println ( Math . max ( 0 , res - x ) ) ;   } }                        "],"bleu":0.10613155552359357,"rouge_l":0.25800604229607255}
{"id":450,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ;"],"references":["import java . lang . * ; import java . util . * ; import java . util . stream . Collectors ; import java . io . * ;   public class Equalize { static public class Pair { int i ; int j ; public Pair ( int i , int j ) { this . i = i ; this . j = j ; } } public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] ar = new int [ n ] ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ar [ i ] = sc . nextInt ( ) ; sum += ar [ i ] ; } if ( ar [ 0 ] == 0 || sum < n - 1 ) System . out . println ( - 1 ) ; else { List < Pair > list = new ArrayList < Pair > ( ) ; int i = 0 , j = 1 ; while ( i < n ) { while ( j < n && ar [ j ] == 0 ) j ++ ; if ( j == n ) { i = j ; break ; } list . add ( new Pair ( i + 1 , j + 1 ) ) ; ar [ i ] -- ; if ( ar [ i ] == 0 ) ar [ i ] = 1001 ; i = j ; j += 1 ; } i = 1 ; j = 0 ;"],"bleu":0.014257908799265665,"rouge_l":0.2523998675935121}
{"id":451,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ; public class Solution { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; int n = s . nextInt ( ) ; int k = s . nextInt ( ) ; s . nextLine ( ) ; String s1 = s . nextLine ( ) ; int [ ] last = new int [ 26 ] ; boolean c [ ] = new boolean [ 26 ] ;","import com . sun . org . apache . bcel . internal . generic . AALOAD ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . math . BigInteger ; import java . util . * ; import java . util . stream . IntStream ; import javafx . util . Pair ;   public class Main {   static void sort ( int a [ ] ) { Random ran = new Random ( ) ; for ( int i = 0 ; i < a . length ; i ++ ) { int r = ran . nextInt ( a . length ) ; int temp = a [ r ] ; a [ r ] = a [ i ] ; a [ i ] = temp ; }   Arrays . sort ( a ) ; }   public static void main ( String [ ] args ) throws IOException {   Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; int m = input . nextInt ( ) ; String s = input . next ( ) ; HashSet < Character > test = new HashSet < > ( ) ; HashMap < Integer , Character > map = new HashMap < > ( ) ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( ! map . containsValue ( s . charAt ( i ) ) ) { map . put ( i , s . charAt ( i ) ) ; } } for ( int i = 0 ; i < n ; i ++ ) { test . add ( s . charAt ( i ) ) ; if ( test . size ( ) > m ) { System . out . println ( \" YES \" ) ; return ; } if ( map . containsKey ( i ) ) { test . remove ( map . get ( i ) ) ; } } System . out . println ( \" NO \" ) ; }   }"],"bleu":0.34641038793472173,"rouge_l":0.3483502538071066}
{"id":452,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; out . println ( Math . min ( a , b ) ) ; } static int l_min ( int [ ] a ) { Arrays . sort ( a ) ; return a [ 0 ] ; } static int l_max ( int [ ] a ) { int l = a . length ; Arrays . sort ( a ) ; return a [ l - 1 ] ; } public static PrintWriter out ; public static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . util . * ;    public class StackBracket { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int h = sc . nextInt ( ) ; int l = sc . nextInt ( ) ; double ans = ( Math . pow ( l , 2 ) - Math . pow ( h , 2 ) ) \/ ( 2 * h ) ; System . out . println ( ans ) ;    }    public static int getAns ( int i , int [ ] e , int [ ] dp ) { if ( i < 0 ) { return Integer . MIN_VALUE ; } if ( i == 0 && e [ i ] == 1 ) { return 1 ; } if ( dp [ i ] != - 1 ) { return dp [ i ] ; }   dp [ i ] = Math . max ( 1 + getAns ( i - ( e [ i ] ) , e , dp ) , getAns ( i - 1 , e , dp ) ) ; return dp [ i ] ;    }    public static long power ( long a , long b , long c ) { long ans = 1 ; while ( b != 0 ) { if ( b % 2 == 1 ) { ans = ans * a ; ans %= c ; } a = a * a ; a %= c ; b \/= 2 ; } return ans ; }   public static long power1 ( long a , long b , long c ) { long ans = 1 ; while ( b != 0 ) { if ( b % 2 == 1 ) { ans = multiply ( ans , a , c ) ; } a = multiply ( a , a , c ) ; b \/= 2 ;   } return ans ;   }   public static long multiply ( long a , long b , long c ) { long res = 0 ; a %= c ; while ( b > 0 ) { if ( b % 2 == 1 ) { res = ( res + a ) % c ; } a = ( a + a ) % c ; b \/= 2 ; }   return res % c ;   }   public static long totient ( long n ) { long result = n ; for ( long i = 2 ; i * i <= n ; i ++ ) { if ( n % i == 0 ) {","import java . util . * ;   public class Example { static int [ ] dp ;   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ;","import java . util . * ;   public class Example { static int [ ] dp ;   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ;","import java . util . * ;   public class questionCF { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long h = sc . nextInt ( ) ; long l = sc . nextInt ( ) ; System . out . printf ( \" % .13f \" , ( double ) ( l * l - h * h ) \/ ( 2 * h ) ) ; } }","import java . util . * ;    public class StackBracket { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int h = sc . nextInt ( ) ; int l = sc . nextInt ( ) ; double ans = ( Math . pow ( l , 2 ) - Math . pow ( h , 2 ) ) \/ ( 2 * h ) ; System . out . println ( ans ) ;    }    public static int getAns ( int i , int [ ] e , int [ ] dp ) { if ( i < 0 ) { return Integer . MIN_VALUE ; } if ( i == 0 && e [ i ] == 1 ) { return 1 ; } if ( dp [ i ] != - 1 ) { return dp [ i ] ; }   dp [ i ] = Math . max ( 1 + getAns ( i - ( e [ i ] ) , e , dp ) , getAns ( i - 1 , e , dp ) ) ; return dp [ i ] ;    }    public static long power ( long a , long b , long c ) { long ans = 1 ; while ( b != 0 ) { if ( b % 2 == 1 ) { ans = ans * a ; ans %= c ; } a = a * a ; a %= c ; b \/= 2 ; } return ans ; }   public static long power1 ( long a , long b , long c ) { long ans = 1 ; while ( b != 0 ) { if ( b % 2 == 1 ) { ans = multiply ( ans , a , c ) ; } a = multiply ( a , a , c ) ; b \/= 2 ;   } return ans ;   }   public static long multiply ( long a , long b , long c ) { long res = 0 ; a %= c ; while ( b > 0 ) { if ( b % 2 == 1 ) { res = ( res + a ) % c ; } a = ( a + a ) % c ; b \/= 2 ; }   return res % c ;   }   public static long totient ( long n ) { long result = n ; for ( long i = 2 ; i * i <= n ; i ++ ) { if ( n % i == 0 ) {"],"bleu":0.23742381361954146,"rouge_l":0.5643884979669351}
{"id":453,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ; import java . util . stream . IntStream ;     public class Main { static boolean isvalid ( String s ) { if ( s . equals ( \"0\" ) || s . equals ( \"1000000\" ) ) return true ; if ( s . charAt ( 0 ) == '0' || s . length ( ) > 6 ) return false ; return true ; }   public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; String s = in . next ( ) ;   int mx = - 1 ; for ( int i = 1 ; i < s . length ( ) ; i ++ ) for ( int j = i + 1 ; j < s . length ( ) ; j ++ ) { String s1 = s . substring ( 0 , i ) ; String s2 = s . substring ( i , j ) ; String s3 = s . substring ( j ) ;   if ( isvalid ( s1 ) && isvalid ( s2 ) && isvalid ( s3 ) ) { int a = Integer . parseInt ( s1 ) ; int b = Integer . parseInt ( s2 ) ; int c = Integer . parseInt ( s3 ) ;   mx = Math . max ( mx , a + b + c ) ; } } System . out . println ( mx ) ; } }  ","  import java . util . * ; public class abc { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; String s = in . next ( ) ; int max = - 1 ; for ( int i = 1 ; i < s . length ( ) ; i ++ ) { String s1 = s . substring ( 0 , i ) ; if ( s1 . length ( ) >= 2 && s1 . charAt ( 0 ) == '0' ) break ; if ( s1 . length ( ) > 7 ) break ; int x = Integer . parseInt ( s1 ) ; if ( x > 1000000 ) break ; for ( int j = i + 1 ; j < s . length ( ) ; j ++ ) { String s2 = s . substring ( i , j ) ; if ( s2 . length ( ) >= 2 && s2 . charAt ( 0 ) == '0' ) break ; if ( s2 . length ( ) > 7 ) break ; int y = Integer . parseInt ( s2 ) ; if ( y > 1000000 ) break ;","import java . util . Arrays ; import java . util . Scanner ;   public class Solution { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String input = sc . nextLine ( ) ; sc . close ( ) ;","import java . io . * ; import java . util . * ; import java . text . * ; import java . math . * ; import java . util . regex . * ;   public class Solution {   public static long mod = 1000000007 ; public static void main ( String [ ] args ) throws IOException {    ","  import java . io . * ; import java . util . * ;   public class C115A { static PrintWriter out = new PrintWriter ( ( System . out ) ) ; static Kioken sc = new Kioken ( ) ;   public static void main ( String args [ ] ) throws IOException { int t = 1 ;"],"bleu":0.40561379307430423,"rouge_l":0.5269978401727862}
{"id":454,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . awt . Desktop ;    import java . io . BufferedReader ;    import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . net . URI ; import java . net . URISyntaxException ; import java . sql . Array ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collections ; import java . util . Comparator ; import java . util . HashMap ; import java . util . HashSet ; import java . util . Iterator ; import java . util . LinkedHashMap ; import java . util . LinkedHashSet ; import java . util . LinkedList ; import java . util . List ; import java . util . Map ; import java . util . PriorityQueue ; import java . util . Queue ; import java . util . Scanner ; import java . util . Set ; import java . util . Stack ; import java . util . StringTokenizer ; import java . util . TreeSet ; import java . util . Vector ;     public class codechef3 { static class comp implements Comparator < Integer > {   @ Override public int compare ( Integer o1 , Integer o2 ) { if ( Math . abs ( o1 ) > Math . abs ( o2 ) ) return - 1 ; else return 1 ; } }","import java . util . * ;   public class CodeForces1260B { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int t = input . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int a = input . nextInt ( ) ; int b = input . nextInt ( ) ;   if ( Math . min ( a , b ) * 2 >= Math . max ( a , b ) && ( a + b ) % 3 == 0 ) { System . out . println ( \" YES \" ) ; } else { System . out . println ( \" NO \" ) ; } } } }","import java . util . * ; public class math { public static void main ( String args [ ] ) { Scanner in = new Scanner ( System . in ) ; int t = in . nextInt ( ) ; int i , j ; while ( t -- > 0 ) { int a = in . nextInt ( ) ; int b = in . nextInt ( ) ; int x = Math . max ( a , b ) ; int y = Math . min ( a , b ) ; if ( ( 2 * x - y ) % 3 == 0 && y >= ( 2 * x - y ) \/ 3 ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } } }"],"bleu":0.14363101471418369,"rouge_l":0.2299349843480838}
{"id":455,"predictions":["import java . io . * ; import java . util . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) throws java . lang . Exception { Reader pm = new Reader ( ) ;"],"references":["import java . io . * ; import java . util . * ; public class Solution { public static void main ( String [ ] args ) throws Exception { FastReader fr = new FastReader ( ) ; int n = fr . nextInt ( ) ; long a [ ] [ ] = new long [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { a [ i ] [ j ] = fr . nextLong ( ) ; } } long a0 = ( a [ 0 ] [ 1 ] * a [ 0 ] [ 2 ] ) \/ a [ 1 ] [ 2 ] ; a0 = ( long ) Math . sqrt ( a0 ) ; long res [ ] = new long [ n ] ; res [ 0 ] = a0 ; for ( int i = 1 ; i < n ; i ++ ) { res [ i ] = ( a [ 0 ] [ i ] \/ a0 ) ; } for ( long i : res ) System . out . print ( i + \" ▁ \" ) ;","  import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Scanner ; import java . util . StringTokenizer ; import java . util . * ; public class c693a {","import java . util . * ; import java . io . * ; public class EdB { static long [ ] mods = { 1000000007 , 998244353 , 1000000009 } ; static long mod = mods [ 0 ] ; public static MyScanner sc ; public static PrintWriter out ; public static void main ( String [ ] omkar ) throws Exception {","import java . util . * ; import java . lang . * ; import java . io . * ; public class Main { PrintWriter out ; FastReader sc ; long mod = ( long ) ( 1e9 + 7 ) ; long maxlong = Long . MAX_VALUE ; long minlong = Long . MIN_VALUE ; public void sol ( ) { int n = ni ( ) ; long [ ] [ ] ar = new long [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { ar [ i ] [ j ] = ni ( ) ; } } long k = ( ar [ 0 ] [ 1 ] * ar [ 0 ] [ 2 ] ) \/ ( ar [ 1 ] [ 2 ] ) ; long a0 = ( long ) Math . sqrt ( k ) ; StringBuilder sb = new StringBuilder ( ) ; sb . append ( a0 + \" ▁ \" ) ; for ( int i = 1 ; i < n ; i ++ ) { sb . append ( ar [ 0 ] [ i ] \/ a0 + \" ▁ \" ) ; } pl ( sb ) ; } public static void main ( String [ ] args ) { Main g = new Main ( ) ; g . out = new PrintWriter ( System . out ) ; g . sc = new FastReader ( ) ; int t = 1 ;"],"bleu":0.7502314792743843,"rouge_l":0.5416314317309568}
{"id":456,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException {"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Arrays ; import java . util . Scanner ;   public class Nicho { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int t = Integer . parseInt ( br . readLine ( ) ) ; int [ ] rong1 = Arrays . stream ( br . readLine ( ) . split ( \" \\\\ s \" ) ) . mapToInt ( Integer :: parseInt ) . toArray ( ) ; int max = Integer . MIN_VALUE , maxindex = 0 , min = Integer . MAX_VALUE , minindex = 0 ; for ( int i = 0 ; i < rong1 . length ; i ++ ) { if ( rong1 [ i ] > max ) { max = rong1 [ i ] ; maxindex = i ; } if ( rong1 [ i ] < min ) { min = rong1 [ i ] ; minindex = i ; } } if ( minindex == maxindex ) { System . out . println ( \"0\" ) ; } else if ( maxindex == 0 && minindex == rong1 . length - 1 ) { System . out . println ( rong1 . length - 1 ) ; } else if ( minindex == 0 && maxindex == rong1 . length - 1 ) { System . out . println ( rong1 . length - 1 ) ; } else if ( minindex < maxindex ) { System . out . println ( Math . max ( rong1 . length - minindex - 1 , maxindex ) ) ; } else if ( maxindex < minindex ) { System . out . println ( Math . max ( rong1 . length - maxindex - 1 , minindex ) ) ; } }   }","import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) ; int a [ ] = new int [ n ] ; int f [ ] = new int [ n + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = in . nextInt ( ) ; f [ a [ i ] ] = i ; } if ( f [ 1 ] < f [ n ] ) { System . out . println ( f [ n ] - f [ 1 ] + Math . abs ( Math . max ( f [ 1 ] , n - f [ n ] - 1 ) ) ) ;","import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;  ","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ;   public class CF676ANicholasAndPermutation {   static BufferedReader in = new BufferedReader ( new InputStreamReader ( System . in ) ) ; static PrintWriter out = new PrintWriter ( System . out ) ;   public static void main ( String [ ] args ) throws IOException { String n = read ( ) ; int ni = Integer . parseInt ( n ) ; String [ ] a = read ( ) . split ( \" \\\\ s \" ) ; int pos1 = 0 , posn = 0 ; for ( int i = 0 ; i < ni ; i ++ ) { if ( a [ i ] . equals ( \"1\" ) ) { pos1 = i + 1 ; if ( posn != 0 ) { break ; } } else if ( a [ i ] . equals ( n ) ) { posn = i + 1 ; if ( pos1 != 0 ) { break ; } } } int max = Math . max ( posn - 1 , pos1 - 1 ) ; max = Math . max ( max , Math . abs ( ni - pos1 ) ) ; max = Math . max ( max , Math . abs ( ni - posn ) ) ; out . print ( max ) ; out . close ( ) ; }   private static String read ( ) throws IOException { return in . readLine ( ) ; }   }"],"bleu":0.68305572197259,"rouge_l":0.4156573503809506}
{"id":457,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException {"],"references":["import java . util . * ; import java . io . * ;   public class CFA { BufferedReader br ; PrintWriter out ; StringTokenizer st ; boolean eof ; private static final long MOD = 1000L * 1000L * 1000L + 7 ; private static final int [ ] dx = { 0 , - 1 , 0 , 1 } ; private static final int [ ] dy = { 1 , 0 , - 1 , 0 } ; private static final String yes = \" Yes \" ; private static final String no = \" No \" ;   void solve ( ) {","import java . util . Arrays ; import java . util . Scanner ; import java . io . DataInputStream ; import java . io . FileInputStream ; import java . io . IOException ;   public class EhabIsanOddPerson {   public static void main ( String args [ ] ) throws IOException {   Reader scan = new Reader ( ) ; int n = scan . nextInt ( ) ; Integer [ ] a = new Integer [ n ] ; int b = 0 ; int c = 0 ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = scan . nextInt ( ) ; if ( a [ i ] % 2 == 1 ) { ++ b ; } else { ++ c ; } } StringBuilder sb = new StringBuilder ( ) ;   if ( b > 0 && c > 0 ) { Arrays . sort ( a ) ; for ( int i = 0 ; i < n ; i ++ ) { sb . append ( a [ i ] + \" ▁ \" ) ; } } else { for ( int i = 0 ; i < n ; i ++ ) { sb . append ( a [ i ] + \" ▁ \" ) ; } } System . out . println ( sb ) ; }   static class Reader {   final private int BUFFER_SIZE = 1 << 16 ; private DataInputStream din ; private byte [ ] buffer ; private int bufferPointer , bytesRead ;   public Reader ( ) { din = new DataInputStream ( System . in ) ; buffer = new byte [ BUFFER_SIZE ] ; bufferPointer = bytesRead = 0 ; }   public Reader ( String file_name ) throws IOException { din = new DataInputStream ( new FileInputStream ( file_name ) ) ; buffer = new byte [ BUFFER_SIZE ] ; bufferPointer = bytesRead = 0 ; }   public String readLine ( ) throws IOException { byte [ ] buf = new byte [ 64 ] ;","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ;   public class Codeforces {   private static final Scanner sc = new Scanner ( System . in ) ; private static final BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; private static final long MOD = ( long ) ( 1e9 + 7 ) ;   public static int [ ] LPS ( String p ) { int [ ] lps = new int [ p . length ( ) ] ;   int i = 1 ; int j = 0 ; while ( i < p . length ( ) ) { if ( p . charAt ( i ) == p . charAt ( j ) ) { lps [ i ] = j + 1 ; i ++ ; j ++ ; } else { if ( j == 0 ) { lps [ i ] = 0 ; i ++ ; } else { j = lps [ j - 1 ] ; } } } return lps ; }   public static void KMP ( String text , String pattern ) { int [ ] lps = LPS ( pattern ) ; int i = 0 ; int j = 0 ; ArrayList < Integer > matches = new ArrayList < > ( ) ; while ( i < text . length ( ) ) { if ( text . charAt ( i ) == pattern . charAt ( j ) ) { i ++ ; j ++ ; } else { if ( j != 0 ) { j = lps [ j - 1 ] ; } else { i ++ ; } } if ( j == pattern . length ( ) ) { matches . add ( i - j ) ; j = lps [ j - 1 ] ; } } for ( int x : matches ) { System . out . println ( \" Match ▁ at ▁ : ▁ \" + x ) ; } }   private static class SegmentTree { private long [ ] st ; private int size ; private int n ; private long [ ] a ; SegmentTree ( long [ ] a , int n ) { this . size = 4 * n ; this . n = n ; this . a = a ; st = new long [ size ] ;"],"bleu":0.06810016184837757,"rouge_l":0.26990231782444435}
{"id":458,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . Scanner ; public class Main { static Scanner r = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { int n ; n = r . nextInt ( ) ; int [ ] x = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { x [ i ] = r . nextInt ( ) ; } boolean [ ] vis = new boolean [ n + 1 ] ; int c = n ; for ( int i = 1 ; i <= n ; i ++ ) { vis [ x [ i ] ] = true ; while ( vis [ c ] && c > 0 ) System . out . print ( c -- + \" ▁ \" ) ; System . out . print ( \" \\n \" ) ; } } }","import java . util . Arrays ; import java . util . Scanner ;   public class P767A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) , t = n ; int [ ] a = new int [ n + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) { int val = sc . nextInt ( ) ; a [ val ] = 1 ; while ( a [ t ] == 1 ) { System . out . print ( t -- + \" ▁ \" ) ; } System . out . println ( ) ; } } }"],"bleu":0.05098903220876409,"rouge_l":0.2548200514138817}
{"id":459,"predictions":["import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; } public static long mod = 17352642619633L ; void run ( FastScanner in , PrintWriter out ) {"],"references":["import java . util . * ; public class puzzle { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int t = input . nextInt ( ) ; for ( int j = 0 ; j < t ; j ++ ) { int n = input . nextInt ( ) ; String s = input . next ( ) ; int c = ( s . charAt ( 0 ) - '0' ) + 1 ; System . out . print ( \"1\" ) ; for ( int i = 1 ; i < n ; i ++ ) { int ch = s . charAt ( i ) - '0' ; if ( ch + 1 != c ) { System . out . print ( \"1\" ) ; c = ch + 1 ; } else { System . out . print ( \"0\" ) ; c = ch ; } } System . out . println ( ) ; } }   }  ","import java . util . * ; public class template { public static void main ( String args [ ] ) { Scanner in = new Scanner ( System . in ) ; int t = in . nextInt ( ) ; int i , j ; while ( t -- > 0 ) { int n = in . nextInt ( ) ; String b = in . next ( ) ; int x ; int flag = Integer . parseInt ( b . charAt ( 0 ) + \" \" ) == 0 ? 1 : 2 ; System . out . print ( 1 ) ; for ( i = 1 ; i < n ; i ++ ) { x = Integer . parseInt ( b . charAt ( i ) + \" \" ) ; if ( ( x + 1 ) == flag ) { System . out . print ( 0 ) ; flag = x + 0 ; } else { System . out . print ( 1 ) ; flag = x + 1 ; } } System . out . println ( ) ; } } }","import java . util . Scanner ;    public class Main { static Scanner input = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { int t = input . nextInt ( ) ; String d = \" \" ; while ( t -- > 0 ) { int n = input . nextInt ( ) ; String b = input . next ( ) ; int nu = 0 ; int prev = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int vl = b . charAt ( i ) - '0' ; if ( vl + 1 == prev ) nu = 0 ; else nu = 1 ; prev = vl + nu ; System . out . print ( nu ) ; } System . out . println ( ) ; } } }  ","import java . util . * ; public class PuzzleFromTheFuture {   public static void main ( String [ ] args ) {"],"bleu":0.3887419356698981,"rouge_l":0.7419387175460286}
{"id":460,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException {"],"references":["  import java . util . * ; import java . io . * ; import java . math . * ;   public class Main { long MOD = 1000000007 ; InputReader in ; BufferedReader br ; PrintWriter out ; public static void main ( String [ ] args ) throws java . lang . Exception { Main solver = new Main ( ) ; solver . in = new InputReader ( System . in ) ; solver . br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; solver . out = new PrintWriter ( System . out ) ; solver . solve ( ) ; solver . out . flush ( ) ; solver . out . close ( ) ; }   public void solve ( ) { int tc = 1 ;","import java . util . Scanner ;   public class Main {   public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) ; int k = in . nextInt ( ) ; int a [ ] = new int [ n \/ k ] ; int b [ ] = new int [ n \/ k ] ; long result = 1 ; for ( int i = 0 ; i < n \/ k ; i ++ ) { a [ i ] = in . nextInt ( ) ; } for ( int i = 0 ; i < n \/ k ; i ++ ) { b [ i ] = in . nextInt ( ) ; } for ( int i = 0 ; i < n \/ k ; i ++ ) { long cnt = 0 ; if ( b [ i ] == 0 ) { cnt = ( ( ( long ) Math . pow ( 10 , k ) ) - 1 ) \/ a [ i ] - ( ( ( long ) Math . pow ( 10 , k - 1 ) ) - 1 ) \/ a [ i ] ; } else { long temp = ( ( ( b [ i ] + 1 ) * ( long ) Math . pow ( 10 , k - 1 ) - 1 ) \/ a [ i ] - ( ( b [ i ] ) * ( long ) Math . pow ( 10 , k - 1 ) - 1 ) \/ a [ i ] ) ; cnt = ( ( long ) Math . pow ( 10 , k ) - 1 ) \/ a [ i ] - temp + 1 ; } result *= cnt ; result %= 1000000007 ; } System . out . println ( result ) ; } }","import java . awt . Point ;   import java . io . * ; import java . math . BigInteger ; import java . util . * ; import java . util . Map . Entry ; import java . util . function . Function ; import java . util . function . Supplier ;   public class tests { static Scanner in = new Scanner ( ) ; static PrintWriter out = new PrintWriter ( System . out ) ; static long mod = 1000 * 1000 * 1000 + 7 ;   public static void main ( String [ ] test ) throws NumberFormatException , IOException { int n = in . nextInt ( ) ; int k = in . nextInt ( ) ; int a [ ] = new int [ n \/ k ] ; int b [ ] = new int [ n \/ k ] ; for ( int i = 0 ; i < n \/ k ; i ++ ) { a [ i ] = in . nextInt ( ) ; } for ( int i = 0 ; i < n \/ k ; i ++ ) { b [ i ] = in . nextInt ( ) ; } long ans = 1 ; for ( int i = 0 ; i < n \/ k ; i ++ ) { long total = ( long ) Math . pow ( 10 , k ) ; long total_div = ( long ) Math . ceil ( total * 1.0 \/ a [ i ] ) ; long lower = ( long ) Math . ceil ( ( total * 1.0 \/ 10 ) * b [ i ] ) ; long upper = ( long ) Math . ceil ( ( total * 1.0 \/ 10 ) * b [ i ] + ( total * 1.0 \/ 10 ) ) ; long ret_ = total_div - ( ( long ) Math . ceil ( upper * 1.0 \/ a [ i ] ) - ( long ) Math . ceil ( lower * 1.0 \/ a [ i ] ) ) ;","import java . io . BufferedReader ; import java . io . FileReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Scanner ; import java . util . StringTokenizer ; import java . util . * ; import java . io . * ; public class codeforces { static class Student { int x , y ; Student ( int x , int y ) { this . x = x ; this . y = y ;"],"bleu":0.14276773199612006,"rouge_l":0.32322309519459164}
{"id":461,"predictions":["import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;"],"references":["import java . util . * ; public class MeasuringLengthsInBaden { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int inches = ( n + 1 ) \/ 3 ; int feets = inches \/ 12 ; System . out . println ( feets + \" ▁ \" + ( inches - 12 * feets ) ) ; } }","import java . util . Scanner ; public class Test45 { public static void main ( String [ ] args ) { Scanner Input = new Scanner ( System . in ) ; int n = Input . nextInt ( ) ; int inches = ( n + 1 ) \/ 3 ; int feet = inches \/ 12 ; System . out . println ( feet + \" ▁ \" + ( inches - 12 * feet ) ) ; } }","import java . util . Scanner ; public class Test45 { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; int inches = ( n + 1 ) \/ 3 ; int feet = inches \/ 12 ; System . out . println ( feet + \" ▁ \" + ( inches - 12 * feet ) ) ; } }","import java . util . Scanner ; public class test45 { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; int inches = ( n + 1 ) \/ 3 ; int feet = inches \/ 12 ; System . out . println ( feet + \" ▁ \" + ( inches - 12 * feet ) ) ; } }","  import java . io . * ; import java . util . * ; public class S { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) ; int q = n \/ 3 , r = n % 3 , f = 0 , i = 0 ; if ( r == 2 ) q ++ ; f += ( q \/ 12 ) ; i += q % 12 ; System . out . print ( f + \" ▁ \" + i ) ; } }"],"bleu":0.1273253104701439,"rouge_l":0.25496342737722044}
{"id":462,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException {"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;    public class MainCP {   public static void main ( String [ ] args ) { FastReader s = new FastReader ( ) ; int n = s . nextInt ( ) ; int b = s . nextInt ( ) ; int d = s . nextInt ( ) ; int [ ] a = new int [ n ] ; int sum = 0 , c = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int x = s . nextInt ( ) ; if ( x <= b ) { a [ i ] = x ; } } for ( int i = 0 ; i < n ; i ++ ) { sum += a [ i ] ; if ( sum > d ) { sum = 0 ; c ++ ; }   } System . out . println ( c ) ; }","import java . util . Scanner ;   public class CodeForces {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int totalOrange = sc . nextInt ( ) ; int mixerSize = sc . nextInt ( ) ; int wasteCollectorSize = sc . nextInt ( ) ; int [ ] orangeSize = new int [ totalOrange ] ; int wasteSize = 0 , emptyWasteSectionCount = 0 ; for ( int i = 0 ; i < totalOrange ; i ++ ) { orangeSize [ i ] = sc . nextInt ( ) ; if ( orangeSize [ i ] <= mixerSize ) { wasteSize += orangeSize [ i ] ; if ( wasteSize > wasteCollectorSize ) { emptyWasteSectionCount += 1 ; wasteSize = 0 ; } } } System . out . println ( emptyWasteSectionCount ) ; } }","import java . util . Scanner ;   public class juicer {   public static void main ( String [ ] args ) {","import java . util . Scanner ; public class sol { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) ; int b = in . nextInt ( ) ; int d = in . nextInt ( ) ; int a , size = 0 , count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { a = in . nextInt ( ) ; if ( a > b ) continue ; size += a ; if ( size > d ) { count ++ ; size = 0 ; } } System . out . println ( count ) ; } }"],"bleu":0.6512347732642607,"rouge_l":0.8355283953218839}
{"id":463,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . io . * ; import java . util . * ; public class CF0543A {   public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int N = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int B = Integer . parseInt ( st . nextToken ( ) ) ; int MOD = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ N ] ; st = new StringTokenizer ( br . readLine ( ) ) ; for ( int i = 0 ; i < N ; i ++ ) { a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; }","public class WritingTheCode {   private int [ ] [ ] dp = new int [ 504 ] [ 504 ] ; private int n ; public int solve ( int m , int b , int [ ] a , int mod ) { n = a . length ; java . util . Arrays . sort ( a ) ; dp [ 0 ] [ 0 ] = 1 ; for ( int k = 0 ; k < n ; k ++ ) { for ( int i = 0 ; i < m ; i ++ ) { for ( int j = 0 ; j <= b ; j ++ ) { if ( j + a [ k ] > b ) continue ; dp [ i + 1 ] [ j + a [ k ] ] = ( dp [ i + 1 ] [ j + a [ k ] ] + dp [ i ] [ j ] ) % mod ; } } } int sum = 0 ; for ( int i = 0 ; i <= b ; i ++ ) { sum = ( sum + dp [ m ] [ i ] ) % mod ; } return sum ; }   public static void main ( String [ ] args ) { java . util . Scanner s = new java . util . Scanner ( System . in ) ; int n = s . nextInt ( ) ; int [ ] a = new int [ n ] ; int m = s . nextInt ( ) ; int b = s . nextInt ( ) ; int mod = s . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = s . nextInt ( ) ; s . close ( ) ;   WritingTheCode wtc = new WritingTheCode ( ) ; int h = wtc . solve ( m , b , a , mod ) ; System . out . println ( h ) ; } }","import java . util . * ; import java . io . * ; public class Solution { public static void main ( String [ ] args ) throws java . lang . Exception { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter out = new PrintWriter ( System . out ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int m = Integer . parseInt ( st . nextToken ( ) ) ; int b = Integer . parseInt ( st . nextToken ( ) ) ; int mod = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ n ] ; st = new StringTokenizer ( br . readLine ( ) ) ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } out . print ( solve ( a , n , m , b , mod ) ) ; out . close ( ) ; } public static int solve ( int [ ] a , int n , int m , int b , int mod ) { int [ ] [ ] dp = new int [ m + 1 ] [ b + 1 ] ; for ( int k = 0 ; k < n ; k ++ ) for ( int i = 1 ; i <= m ; i ++ ) { for ( int j = 0 ; j <= b ; j ++ ) { if ( i == 1 ) { if ( a [ k ] == j ) dp [ i ] [ a [ k ] ] = ( dp [ i ] [ a [ k ] ] + 1 ) % mod ; } else { if ( dp [ i - 1 ] [ j ] > 0 && j + a [ k ] <= b ) dp [ i ] [ j + a [ k ] ] = ( dp [ i ] [ j + a [ k ] ] + dp [ i - 1 ] [ j ] ) % mod ; } } } int result = 0 ; for ( int i = 0 ; i <= b ; i ++ ) { result = ( result + dp [ m ] [ i ] ) % mod ; } return result ; }    }"],"bleu":0.04618676809084904,"rouge_l":0.25310690007625286}
{"id":464,"predictions":["import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;"],"references":["from math import sqrt   a = map ( int , list ( raw_input ( ) ) [ :: - 1 ] ) b = map ( int , list ( raw_input ( ) ) [ :: - 1 ] )   i = max ( len ( a ) , len ( b ) )   a += [ 0 ] * ( i - len ( a ) ) b += [ 0 ] * ( i - len ( b ) )   i -= 1 while i >= 2 : while a [ i ] == b [ i ] : i -= 1 if i == - 1 : print \" = \" exit ( 0 ) if a [ i ] == 1 : a [ i - 1 ] += 1 - b [ i - 1 ] a [ i - 2 ] += 1 - b [ i - 2 ] b [ i - 1 ] = b [ i - 2 ] = 0 if a [ i - 1 ] == 2 or a [ i - 2 ] == 2 : print \" > \" exit ( 0 ) else : b [ i - 1 ] += 1 - a [ i - 1 ] b [ i - 2 ] += 1 - a [ i - 2 ] a [ i - 1 ] = a [ i - 2 ] = 0 if b [ i - 1 ] == 2 or b [ i - 2 ] == 2 : print \" < \" exit ( 0 ) i -= 1   a . append ( 0 ) b . append ( 0 ) ans = ( a [ 0 ] - b [ 0 ] ) + ( a [ 1 ] - b [ 1 ] ) * ( 1 + sqrt ( 5 ) ) \/ 2 if ans > 0 : print \" > \" elif ans < 0 : print \" < \" else : print \" = \"","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . * ;   public class Main {   IIO io ;   Main ( IIO io ) { this . io = io ; }   public static void main ( String [ ] args ) throws IOException {   ConsoleIO io = new ConsoleIO ( ) ; Main m = new Main ( io ) ; m . solve ( ) ; io . flush ( ) ;  "],"bleu":0.20297271119828494,"rouge_l":0.3974358974358974}
{"id":465,"predictions":["import java . io . * ; import java . util . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) throws java . lang . Exception { Reader pm = new Reader ( ) ;"],"references":["import java . util . * ; import java . io . * ;   public class ATwistyMovement {","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . List ; import java . util . Random ; import java . util . StringTokenizer ;  ","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . StringTokenizer ;   public class WorkFile { public static void main ( String [ ] args ) throws IOException { BufferedReader reader = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int n = Integer . parseInt ( reader . readLine ( ) ) ; StringTokenizer sToken = new StringTokenizer ( reader . readLine ( ) ) ; int [ ] arr = new int [ n ] ; int [ ] ones = new int [ n ] ; int one = 0 ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = Integer . parseInt ( sToken . nextToken ( ) ) ; if ( arr [ i ] == 1 ) one ++ ; ones [ i ] = one ; } int [ ] twos = new int [ n ] ; int two = 0 ; for ( int i = n - 1 ; i > - 1 ; i -- ) { if ( arr [ i ] == 2 ) two ++ ; twos [ i ] = two ; } int ans = Math . max ( one , two ) ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( arr [ i ] == 2 && arr [ i + 1 ] == 1 ) { int a = 0 , maxleft = 0 ; for ( int j = i ; j > - 1 ; j -- ) { if ( arr [ j ] == 2 ) a ++ ; else a -- ; maxleft = Math . max ( maxleft , a ) ; } int b = 0 , maxright = 0 ; for ( int j = i + 1 ; j < n ; j ++ ) { if ( arr [ j ] == 1 ) b ++ ; else b -- ; maxright = Math . max ( maxright , b ) ; } ans = Math . max ( ans , ones [ i ] + maxright + twos [ i + 1 ] + maxleft ) ; } else ans = Math . max ( ans , ones [ i ] + twos [ i + 1 ] ) ; } PrintWriter writer = new PrintWriter ( System . out ) ; writer . print ( ans ) ; writer . close ( ) ; } }"],"bleu":0.6361869949850516,"rouge_l":0.8064011132370846}
{"id":466,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ;"],"references":["import javax . swing . plaf . IconUIResource ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ;   public class codeforces { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;  ","import java . util . * ; import java . io . * ; import java . lang . * ; import java . math . * ;   public class cp { static BufferedReader br ; static StringTokenizer st ;   public static void main ( String [ ] args ) throws IOException {   br = new BufferedReader ( new InputStreamReader ( System . in ) ) ;","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;   public class Main { static class FastReader { BufferedReader br ; StringTokenizer st ;   public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; }   String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   }   public static void main ( String [ ] args ) {","import java . util . HashSet ; import java . util . Scanner ; import java . util . Set ;   public class Main {   public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; Set < Integer > list = new HashSet < Integer > ( ) ; int a = in . nextInt ( ) ; int b = in . nextInt ( ) ; int ara1 [ ] = new int [ a ] ; int ara2 [ ] = new int [ b ] ; for ( int i = 0 ; i < a ; i ++ ) { ara1 [ i ] = in . nextInt ( ) ; } for ( int i = 0 ; i < b ; i ++ ) { ara2 [ i ] = in . nextInt ( ) ; } for ( int i = a - 1 ; i >= 0 ; i -- ) { list . add ( ara1 [ i ] ) ; ara1 [ i ] = list . size ( ) ; } for ( int i = 0 ; i < b ; i ++ ) { System . out . println ( ara1 [ ara2 [ i ] - 1 ] ) ; } } }","import java . util . Scanner ;   public class n368B { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int m = scanner . nextInt ( ) ; int [ ] numbers = new int [ 100010 ] ; int [ ] result = new int [ n ] ; int a ; int uniq = 0 ; for ( int i = 0 ; i < n ; i ++ ) { a = scanner . nextInt ( ) ; result [ i ] = a ; if ( numbers [ a ] == 0 ) uniq ++ ; numbers [ a ] ++ ; }   int [ ] dp = new int [ n ] ; dp [ 0 ] = uniq ; for ( int i = 1 ; i < n ; i ++ ) { numbers [ result [ i - 1 ] ] -- ; if ( numbers [ result [ i - 1 ] ] == 0 ) uniq -- ; dp [ i ] = uniq ; } for ( int i = 0 ; i < m ; i ++ ) { a = scanner . nextInt ( ) ; System . out . println ( dp [ a - 1 ] ) ; } } }"],"bleu":0.6396504960424331,"rouge_l":0.6056586162641465}
{"id":467,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; out . println ( Math . min ( a , b ) ) ; out . close ( ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } }"],"references":["import java . util . * ; import java . io . * ; public class Main { public static void main ( String args [ ] ) {   FastReader in = new FastReader ( ) ; PrintWriter so = new PrintWriter ( new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ) ; String s = in . next ( ) ; String str = in . next ( ) ; if ( s . equals ( str ) ) so . println ( s ) ; else so . println ( \"1\" ) ; so . flush ( ) ; } static class FastReader { BufferedReader br ; StringTokenizer st ;   public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; }   String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   long nextLong ( ) { return Long . parseLong ( next ( ) ) ; }   double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; }   int [ ] readIntArray ( int n ) { int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = nextInt ( ) ; return a ; }   long [ ] readLongArray ( int n ) { long a [ ] = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = nextLong ( ) ; return a ; }   String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }","import java . util . Scanner ;    public class Complicated_Gcd { static String gcd ( String a , String b ) {","import java . util . * ;   public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String a = sc . next ( ) ; String b = sc . next ( ) ; if ( a . equals ( b ) ) System . out . println ( a ) ; else System . out . println ( 1 ) ; } }","import java . io . FileInputStream ; import java . io . FileNotFoundException ; import java . io . IOException ; import java . io . PrintWriter ; import java . util . Arrays ; import java . util . Collection ; import java . util . List ; import java . util . Scanner ; import java . util . function . Function ; import java . util . stream . Collectors ; public class _p000664A { static public void main ( final String [ ] args ) throws IOException { p000664A . _main ( args ) ; }"],"bleu":0.8207165828885691,"rouge_l":0.8027438124388235}
{"id":468,"predictions":["import java . util . * ; import java . io . * ; import java . math . BigInteger ; import java . text . * ; public class Main { static long mod = 1000_000_007 ; static long mod1 = 998244353 ; static boolean fileIO = false ; static boolean memory = true ; static FastScanner f ; static PrintWriter pw ; static double eps = ( double ) 1e-6 ; static long oo = Long . MAX_VALUE ;"],"references":["import java . io . * ; import java . math . * ; import java . math . BigInteger ; import java . util . * ;   public class Main { static int bool [ ] [ ] = new int [ 3005 ] [ 3005 ] ;","import java . io . * ; import java . math . * ; import java . math . BigInteger ; import java . util . * ;   public class Main { static int bool [ ] [ ] = new int [ 3005 ] [ 3005 ] ;","import java . io . * ; import java . util . * ; import java . math . * ;   public class Main { static class Point { int x , y ; Point ( int x , int y ) { this . x = x ; this . y = y ; } public int hashCode ( ) {","import java . util . * ;     public class P181B { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ;   Set < Point > set = new HashSet < > ( ) ; int [ ] [ ] points = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { points [ i ] = new int [ ] { input . nextInt ( ) , input . nextInt ( ) } ; set . add ( new Point ( points [ i ] [ 0 ] , points [ i ] [ 1 ] ) ) ; }   int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { if ( ( points [ i ] [ 0 ] + points [ j ] [ 0 ] ) % 2 == 0 && ( points [ i ] [ 1 ] + points [ j ] [ 1 ] ) % 2 == 0 ) { int midi = ( points [ i ] [ 0 ] + points [ j ] [ 0 ] ) \/ 2 ; int midj = ( points [ i ] [ 1 ] + points [ j ] [ 1 ] ) \/ 2 ; if ( set . contains ( new Point ( midi , midj ) ) ) { ans ++ ; } } } }   System . out . println ( ans ) ; } private static class Point { private final int first ; private final int second ;   public Point ( int first , int second ) { this . first = first ; this . second = second ; }   @ Override public int hashCode ( ) { return Objects . hash ( first , second ) ; }   @ Override public boolean equals ( Object o ) { Point that = ( Point ) o ; return this . first == that . first && this . second == that . second ; } } }"],"bleu":0.41973461228822573,"rouge_l":0.518647342995169}
{"id":469,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ; import java . util . Scanner ; import java . io . * ; import javax . lang . model . util . ElementScanner6 ; import static java . lang . System . out ; import java . util . Stack ; import java . util . Queue ; import java . util . LinkedList ;   public class B215 {   static int mod = ( int ) ( 1e9 + 7 ) ; static long MOD = ( long ) ( 1e9 + 7 ) ; static FastReader in = new FastReader ( ) ; static PrintWriter pr = new PrintWriter ( new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ) ; public static void main ( String args [ ] ) {   int tc = 1 ;","import java . util . * ; public class Solution { public static void main ( String args [ ] ) { Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; int temp ; int r1 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { temp = input . nextInt ( ) ; if ( temp > r1 ) r1 = temp ; } n = input . nextInt ( ) ; int p1 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { temp = input . nextInt ( ) ; if ( temp > p1 ) p1 = temp ; } n = input . nextInt ( ) ; int p2 = 5000 ; for ( int i = 0 ; i < n ; i ++ ) { temp = input . nextInt ( ) ; if ( temp < p2 ) p2 = temp ; } long A = input . nextLong ( ) ; long B = input . nextLong ( ) ; input . close ( ) ; System . out . println ( Math . sqrt ( ( B * r1 * r1 ) \/ ( ( A * p2 \/ ( double ) p1 ) + B ) ) ) ; } }","import java . util . Locale ; import java . util . Scanner ;   public class B215 {   public static void main ( String [ ] args ) { Locale . setDefault ( Locale . US ) ; Scanner in = new Scanner ( System . in ) ; int N = in . nextInt ( ) ; int [ ] R1 = new int [ N ] ; for ( int n = 0 ; n < N ; n ++ ) { R1 [ n ] = in . nextInt ( ) ; } int M = in . nextInt ( ) ; int [ ] P1 = new int [ M ] ; for ( int m = 0 ; m < M ; m ++ ) { P1 [ m ] = in . nextInt ( ) ; } int K = in . nextInt ( ) ; int [ ] P2 = new int [ K ] ; for ( int k = 0 ; k < K ; k ++ ) { P2 [ k ] = in . nextInt ( ) ; } int A = in . nextInt ( ) ; int B = in . nextInt ( ) ;"],"bleu":0.09623084215043756,"rouge_l":0.3579369981470043}
{"id":470,"predictions":["import java . util . * ; import java . io . * ; import java . math . BigInteger ; import java . text . * ; public class Main { static long mod = 1000_000_007 ; static long mod1 = 998244353 ; static boolean fileIO = false ; static boolean memory = true ; static FastScanner f ; static PrintWriter pw ; static double eps = ( double ) 1e-6 ; static int oo = ( int ) 2e9 ;"],"references":["import java . io . * ; import java . util . * ;   public class Main { public static void main ( String [ ] args ) throws IOException {","import java . util . * ; import java . io . * ;   public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; }   void run ( FastScanner in , PrintWriter out ) { int n = in . nextInt ( ) ;   TreeMap < Integer , Integer > timeValueMap = new TreeMap < > ( ) ; timeValueMap . put ( - 1 , 0 ) ; timeValueMap . put ( - 1440 , 0 ) ; timeValueMap . put ( - 90 , 0 ) ; int prev = 0 ;   while ( n -- > 0 ) {   int t = in . nextInt ( ) ;   int min = prev + 20 ; Map . Entry < Integer , Integer > floorEntry = timeValueMap . floorEntry ( t - 1440 ) ; if ( floorEntry != null ) { min = Math . min ( min , floorEntry . getValue ( ) + 120 ) ; }   floorEntry = timeValueMap . floorEntry ( t - 90 ) ; if ( floorEntry != null ) { min = Math . min ( min , floorEntry . getValue ( ) + 50 ) ; }   out . println ( min - prev ) ; timeValueMap . put ( t , min ) ; prev = min ; } }   static class FastScanner { BufferedReader br ; StringTokenizer st ;   public FastScanner ( InputStream in ) { br = new BufferedReader ( new InputStreamReader ( in ) ) ; st = null ; }   String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . ArrayList ; import java . util . Collections ;   public class Solution { public static void main ( String [ ] args ) throws IOException { BufferedReader reader = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int n = Integer . parseInt ( reader . readLine ( ) ) ; long [ ] res = new long [ n + 1 ] ; ArrayList < Long > list = new ArrayList < > ( ) ; long x = Integer . parseInt ( reader . readLine ( ) ) ; list . add ( x ) ; res [ 0 ] = 20 ; long prev = 0 ; StringBuilder ans = new StringBuilder ( ) ; ans . append ( 20 ) . append ( \" \\n \" ) ; for ( int i = 1 ; i < n ; i ++ ) { x = Integer . parseInt ( reader . readLine ( ) ) ; int ind1 = Collections . binarySearch ( list , x - 90 + 1 ) ; if ( ind1 < 0 ) ind1 = ind1 * ( - 1 ) - 1 ; int ind2 = Collections . binarySearch ( list , x - 1440 + 1 ) ; if ( ind2 < 0 ) ind2 = ind2 * ( - 1 ) - 1 ; long a = 0 , b = 0 ; if ( ind1 > 0 ) a = res [ ind1 - 1 ] ; if ( ind2 > 0 ) b = res [ ind2 - 1 ] ; res [ i ] = Math . min ( res [ i - 1 ] + 20 , Math . min ( a + 50 , b + 120 ) ) ; list . add ( x ) ; ans . append ( Math . max ( 0 , res [ i ] - res [ i - 1 ] ) ) . append ( \" \\n \" ) ; } System . out . println ( ans ) ; } }","import java . io . * ; import java . util . * ;   public class Main {   static TreeSet < Integer > set = new TreeSet < > ( ) ; static int [ ] a ; static int n ; static HashMap < Integer , Integer > map = new HashMap < > ( ) ;   public static void main ( String [ ] args ) throws Exception { BufferedReader in = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter out = new PrintWriter ( System . out ) ; n = Integer . parseInt ( in . readLine ( ) ) ; a = new int [ n + 1 ] ; set . add ( ( int ) - 1e8 ) ; a [ 0 ] = ( int ) - 1e8 ; map . put ( ( int ) - 1e8 , 0 ) ; for ( int i = 1 ; i <= n ; i ++ ) { a [ i ] = Integer . parseInt ( in . readLine ( ) ) ; set . add ( a [ i ] ) ; map . put ( a [ i ] , i ) ; } int [ ] cost = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { cost [ i ] = getCost ( i ) ; } for ( int i = 1 ; i <= n ; i ++ ) { out . println ( cost [ i ] - cost [ i - 1 ] ) ; } out . close ( ) ; }   static int [ ] dp = new int [ 100001 ] ; static int getCost ( int pos ) { if ( pos <= 0 ) { return 0 ; } if ( dp [ pos ] > 0 ) { return dp [ pos ] ; } int time = a [ pos ] ; int res = Integer . MAX_VALUE ; res = Math . min ( res , getCost ( map . get ( set . lower ( time ) ) ) + 20 ) ; res = Math . min ( res , getCost ( map . get ( set . lower ( time - 89 ) ) ) + 50 ) ; res = Math . min ( res , getCost ( map . get ( set . lower ( time - 1439 ) ) ) + 120 ) ; dp [ pos ] = res ; return res ; }   }","import java . util . Arrays ; import java . util . Scanner ;   public class Codeforces756B {   static long dp [ ] ; static boolean dpSeen [ ] ; static int n ; static long inputs [ ] ;    public static void f ( int index ) { int minsIndex = 0 ; int dayIndex = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { while ( inputs [ minsIndex ] <= inputs [ i ] - 90 ) minsIndex ++ ; while ( inputs [ dayIndex ] <= inputs [ i ] - 1440 ) dayIndex ++ ; long valueOne = dp [ i - 1 ] + 20 ; long valueMins = dp [ minsIndex - 1 ] + 50 ; long valueDay = dp [ dayIndex - 1 ] + 120 ; dp [ i ] = Math . min ( valueOne , Math . min ( valueDay , valueMins ) ) ; } }   public static void printAnswer ( ) { for ( int i = 1 ; i <= n ; i ++ ) { System . out . println ( dp [ i ] - dp [ i - 1 ] ) ; } }   public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; n = in . nextInt ( ) ; dp = new long [ n + 1 ] ; dpSeen = new boolean [ n + 1 ] ; inputs = new long [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { inputs [ i ] = in . nextLong ( ) ; dp [ i ] = 0 ; } inputs [ 0 ] = - 10000 ; f ( n ) ; printAnswer ( ) ; } }"],"bleu":0.4119467032856655,"rouge_l":0.6026654334482469}
{"id":471,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["    import java . io . * ; import java . math . * ; import java . security . * ; import java . text . * ; import java . util . * ; import javafx . util . Pair ;   public class CodeForce { static BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; static StringBuilder sb = new StringBuilder ( ) ;   static boolean flag = false ; static int next ( String [ ] sr , int ind ) { return Integer . parseInt ( sr [ ind ] ) ; }   public static void main ( String [ ] args ) throws IOException { String [ ] sr = br . readLine ( ) . split ( \" ▁ \" ) ; int n = next ( sr , 0 ) ; int m = next ( sr , 1 ) ; int [ ] [ ] arr = new int [ n ] [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { sr = br . readLine ( ) . split ( \" ▁ \" ) ; for ( int j = 0 ; j < m ; j ++ ) { arr [ i ] [ j ] = next ( sr , j ) ; } } long total = 0l ; for ( int i = 0 ; i < n ; i ++ ) { long count = 0 , count1 = 0 ; for ( int j = 0 ; j < m ; j ++ ) { if ( arr [ i ] [ j ] == 0 ) count ++ ; else count1 ++ ; } total += ( long ) Math . pow ( 2 , count ) - count - 1 ; total += ( long ) Math . pow ( 2 , count1 ) - count1 - 1 ; } for ( int i = 0 ; i < m ; i ++ ) { long count = 0 , count1 = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ j ] [ i ] == 0 ) count ++ ; else count1 ++ ; } total += ( long ) Math . pow ( 2 , count ) - count - 1 ; total += ( long ) Math . pow ( 2 , count1 ) - count1 - 1 ; } total += n * m ; System . out . println ( total ) ;   } }       ","  import java . lang . reflect . Array ; import java . text . CollationElementIterator ; import java . util . * ; import java . util . Map . Entry ; import java . io . * ; import java . lang . Math . * ; import java . math . BigInteger ;   import static java . lang . System . * ; import static java . util . Arrays . fill ; import static java . lang . Math . log ; import static java . lang . Math . abs ; import static java . lang . Math . pow ; import static java . lang . Math . sqrt ; import static java . lang . Math . floor ; import static java . lang . Math . ceil ; import static java . lang . Math . sin ; import static java . lang . Math . cos ; import static java . lang . Math . tan ; import static java . util . Arrays . spliterator ; public class ContestMain implements Runnable { private static Reader in = new Reader ( ) ; private static StringBuilder ans = new StringBuilder ( ) ; private static long MOD = 998244353 ; private static final int N = ( int ) ( 2e5 + 7 ) ;"],"bleu":0.02004025180854478,"rouge_l":0.24023416711016504}
{"id":472,"predictions":["import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; } public static long mod = 17352642619633L ; void run ( FastScanner in , PrintWriter out ) {"],"references":["import java . util . * ;   public class Game { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int arr [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; System . out . println ( arr [ ( arr . length - 1 ) \/ 2 ] ) ; } }","  import java . util . Arrays ; import java . util . Scanner ;   public class Gameee { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; if ( n % 2 != 0 ) { System . out . println ( a [ n \/ 2 ] ) ; } else { System . out . println ( a [ ( n \/ 2 ) - 1 ] ) ; } } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ;   public class Codeforces {   private static final Scanner sc = new Scanner ( System . in ) ; private static final BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; private static final long MOD = ( long ) ( 1e9 + 7 ) ;   public static int [ ] LPS ( String p ) { int [ ] lps = new int [ p . length ( ) ] ;   int i = 1 ; int j = 0 ; while ( i < p . length ( ) ) { if ( p . charAt ( i ) == p . charAt ( j ) ) { lps [ i ] = j + 1 ; i ++ ; j ++ ; } else { if ( j == 0 ) { lps [ i ] = 0 ; i ++ ; } else { j = lps [ j - 1 ] ; } } } return lps ; }   public static void KMP ( String text , String pattern ) { int [ ] lps = LPS ( pattern ) ; int i = 0 ; int j = 0 ; ArrayList < Integer > matches = new ArrayList < > ( ) ; while ( i < text . length ( ) ) { if ( text . charAt ( i ) == pattern . charAt ( j ) ) { i ++ ; j ++ ; } else { if ( j != 0 ) { j = lps [ j - 1 ] ; } else { i ++ ; } } if ( j == pattern . length ( ) ) { matches . add ( i - j ) ; j = lps [ j - 1 ] ; } } for ( int x : matches ) { System . out . println ( \" Match ▁ at ▁ : ▁ \" + x ) ; } }   private static class SegmentTree { private long [ ] st ; private int size ; private int n ; private long [ ] a ; SegmentTree ( long [ ] a , int n ) { this . size = 4 * n ; this . n = n ; this . a = a ; st = new long [ size ] ;","import java . util . ArrayList ; import java . util . Arrays ; import java . util . Scanner ;   public class Singleton_Pattern { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { int x = sc . nextInt ( ) ; a [ i ] = x ; } Arrays . sort ( a ) ;   if ( ( n & 1 ) == 1 ) System . out . println ( a [ ( n ) \/ 2 ] ) ; else System . out . println ( a [ ( n - 1 ) \/ 2 ] ) ; } }"],"bleu":0.3474618965076884,"rouge_l":0.4664019997059256}
{"id":473,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ; import java . io . * ; public class Message { public static void main ( String [ ] args ) throws Exception {","s = input ( ) u = input ( ) t = [ 0 ] * len ( s ) d = { chr ( i ) : [ ] for i in range ( ord ( ' a ' ) , ord ( ' z ' ) + 1 ) } for i , j in enumerate ( s ) : d [ j ] . append ( i ) for i in u : for j in d [ i ] : t [ j ] += 1 t = [ 0 ] + tprint ( len ( u ) - max ( t ) )"],"bleu":0.25706636248388337,"rouge_l":0.4364069952305247}
{"id":474,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . ArrayList ; import java . util . List ;   public class kaka {   public static void main ( String [ ] args ) throws IOException { BufferedReader s = new BufferedReader ( new InputStreamReader ( System . in ) ) ; ArrayList < String > strs = new ArrayList < > ( ) ; while ( true ) { String line = s . readLine ( ) ; if ( line == null ) { break ; } strs . add ( line ) ; } ArrayList < String > res = new ArrayList < > ( ) ; StringBuffer comp = new StringBuffer ( ) ; boolean agaramp = true ; for ( int i = 0 ; i < strs . size ( ) ; i ++ ) { String l = strs . get ( i ) ; int len = l . length ( ) ; boolean nonspace = false ; boolean foundhash = false ; for ( int j = 0 ; j < len ; j ++ ) { if ( l . charAt ( j ) == ' # ' ) { foundhash = true ; break ; } else if ( l . charAt ( j ) != ' ▁ ' ) { nonspace = true ; } } if ( ! nonspace && foundhash ) { if ( ! agaramp ) { if ( comp . length ( ) >= 1 ) { res . add ( comp . toString ( ) ) ; comp = new StringBuffer ( ) ; } else { res . add ( \" \" ) ; } } agaramp = true ; res . add ( l ) ; } else { agaramp = false ; for ( int j = 0 ; j < len ; j ++ ) { if ( l . charAt ( j ) != ' ▁ ' ) { comp . append ( l . charAt ( j ) ) ; } } } } if ( ! agaramp ) { if ( comp . length ( ) >= 1 ) { res . add ( comp . toString ( ) ) ; } else { res . add ( \" \" ) ; } }   for ( String line : res ) { System . out . println ( line ) ; } } }","import java . io . IOException ; import java . util . Scanner ;   public class _168B implements Runnable { private Object solve ( ) throws IOException { Scanner sc = new Scanner ( System . in ) ; StringBuilder sb = new StringBuilder ( ) , line = new StringBuilder ( ) ; boolean f = false ; while ( sc . hasNextLine ( ) ) { String s = sc . nextLine ( ) , t = s . replaceAll ( \" \\\\ s + \" , \" \" ) ; if ( ! t . isEmpty ( ) && t . charAt ( 0 ) == ' # ' ) { if ( f ) { sb . append ( line ) . append ( ' \\n ' ) ; } sb . append ( s ) ;","import java . io . BufferedReader ; import java . io . File ; import java . io . FileInputStream ; import java . io . FileNotFoundException ; import java . io . FileOutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . math . BigInteger ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . * ; import java . util . Calendar ; import java . util . Collections ; import java . util . Comparator ; import java . util . HashMap ; import java . util . HashSet ; import java . util . LinkedList ; import java . util . PriorityQueue ; import java . util . SortedSet ; import java . util . Stack ; import java . util . StringTokenizer ; import java . util . TreeMap ; import java . util . TreeSet ;   public class B_Round_114_Div2 {   public static long MOD = 1000000007 ;   public static void main ( String [ ] args ) throws FileNotFoundException , IOException {"],"bleu":0.12919894426922213,"rouge_l":0.26401825937452394}
{"id":475,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . io . * ; import java . util . * ;   public class Main {   public static void main ( String [ ] args ) throws Exception { BufferedReader in = new BufferedReader ( new InputStreamReader ( System . in ) ) ;","import java . util . * ; import java . io . * ; import static java . lang . System . out ; public class sol_413B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; LinkedList < Integer > [ ] map = new LinkedList [ n ] ; int [ ] groups = new int [ m ] ; int [ ] send = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { map [ i ] = new LinkedList < Integer > ( ) ; for ( int j = 0 ; j < m ; j ++ ) if ( sc . nextInt ( ) == 1 ) map [ i ] . add ( j ) ; } int [ ] sol = new int [ n ] ; for ( int i = 0 ; i < k ; i ++ ) { int e = sc . nextInt ( ) ; int me = sc . nextInt ( ) ; e -- ; me -- ; groups [ me ] ++ ; send [ e ] ++ ; } for ( int i = 0 ; i < n ; i ++ ) { int s = 0 ; for ( int x : map [ i ] ) { s += groups [ x ] ; } s -= send [ i ] ; System . out . print ( s + \" ▁ \" ) ; } System . out . println ( ) ; } }","import java . util . Comparator ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . StringTokenizer ;   public class Main {   public static void main ( String [ ] args ) throws IOException {"],"bleu":0.6088606934427359,"rouge_l":0.5662728355837967}
{"id":476,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . io . * ; import java . util . * ; import java . math . * ;      public class spoj { InputStream is ; static PrintWriter out ; static int dp [ ] = new int [ 10001 ] ; static int solver ( int left , int c , int d , int n ) { if ( left <= 0 ) return 0 ; if ( dp [ left ] != - 1 ) return dp [ left ] ; return dp [ left ] = Math . min ( c + solver ( left - n , c , d , n ) , d + solver ( left - 1 , c , d , n ) ) ; } void solve ( ) { int c = ni ( ) , d = ni ( ) ; int n = ni ( ) , m = ni ( ) ; Arrays . fill ( dp , - 1 ) ; int k = ni ( ) ; int left = n * m - k ; out . println ( solver ( left , c , d , n ) ) ; }","import java . util . * ; import java . io . * ;   public class CJ2 {   public static void main ( String [ ] args ) throws Exception {","  import java . util . * ; import java . lang . * ; import java . io . * ;   public class Codechef { public static void main ( String [ ] args ) throws java . lang . Exception { Scanner sc = new Scanner ( System . in ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int req = ( n * m ) - k ; if ( req <= 0 ) { System . out . println ( 0 ) ; return ; } int d1 = req \/ n ; if ( req % n != 0 ) d1 ++ ; int a1 = d1 * c ; int d2 = req \/ n ; int a2 = d2 * c ; int r = req % n ; a2 += r * d ; int a3 = d * req ; int min1 = Math . min ( a1 , a2 ) ; min1 = Math . min ( min1 , a3 ) ; System . out . println ( min1 ) ; } }","import java . io . * ; import java . lang . reflect . Array ; import java . util . * ; public class icpc { public static void main ( String [ ] args ) throws IOException { Reader in = new Reader ( ) ;"],"bleu":0.37365488011073156,"rouge_l":0.5857582307948123}
{"id":477,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ;","import java . util . * ; import java . io . * ;   public class questionCF { public static void main ( String [ ] args ) throws IOException {   Scanner sc = new Scanner ( System . in ) ;   int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; String s = sc . next ( ) ; int rocks = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { char ch = s . charAt ( i ) ; if ( ch == ' . ' ) rocks = 0 ; ++ rocks ; if ( rocks > k ) { System . out . println ( \" NO \" ) ; return ; } } System . out . println ( \" YES \" ) ; } }","import java . util . * ;   public class P3 { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; String s = sc . next ( ) ; int max = 0 ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == ' # ' ) { sum ++ ; if ( max < sum ) max = sum ; } else { sum = 0 ; } } if ( max < k ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ; } }","import java . util . * ; public class KsushaTheSquirrel {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; String s = sc . next ( ) ; int count = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { count = 0 ; for ( int j = i + 1 ; j <= i + k ; j ++ ) { if ( s . charAt ( j ) == ' . ' ) { count ++ ; i = j - 1 ; break ; } } if ( count == 0 ) { System . out . println ( \" NO \" ) ; break ; } } if ( count == 1 ) { System . out . println ( \" YES \" ) ; }   }   }","  import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . OutputStream ; import java . io . PrintWriter ; import java . util . StringTokenizer ;    public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; TaskB solver = new TaskB ( ) ; solver . solve ( in , out ) ; out . close ( ) ; } static class TaskB { public void solve ( InputReader in , PrintWriter out ) { int n = in . nextInt ( ) ; int k = in . nextInt ( ) ; String s = in . next ( ) ; int max = 0 , sum = 0 ; for ( int i = 0 ; i < s . length ( ) && max < k ; i ++ ) { if ( s . charAt ( i ) == ' # ' ) sum ++ ; else sum = 0 ; if ( sum > max ) max = sum ; } if ( max >= k ) out . println ( \" NO \" ) ; else out . println ( \" YES \" ) ; } } static class InputReader { public BufferedReader reader ; public StringTokenizer tokenizer ; public InputReader ( InputStream stream ) { reader = new BufferedReader ( new InputStreamReader ( stream ) ) ; tokenizer = null ; } public String next ( ) { while ( tokenizer == null || ! tokenizer . hasMoreElements ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } } }"],"bleu":0.6166589329915758,"rouge_l":0.8994638069705092}
{"id":478,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . Scanner ; public class Cp { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ;","import java . util . * ; import java . io . * ; import java . lang . * ; public class Codeforces { public static void main ( String [ ] args ) { FastScanner sc = new FastScanner ( ) ; PrintWriter out = new PrintWriter ( System . out ) ; int n = sc . nextInt ( ) , m = sc . nextInt ( ) ; char arr [ ] [ ] = new char [ n ] [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { String temp = sc . next ( ) ; for ( int j = 0 ; j < m ; j ++ ) { arr [ i ] [ j ] = temp . charAt ( j ) ; } } int p = sc . nextInt ( ) , q = sc . nextInt ( ) ; char brr [ ] [ ] = new char [ p ] [ q ] ; for ( int i = 0 ; i < p ; i ++ ) { String temp = sc . next ( ) ; for ( int j = 0 ; j < q ; j ++ ) { brr [ i ] [ j ] = temp . charAt ( j ) ; } } int res = 0 , resX = - 1 , resY = - 1 ; for ( int x = - n ; x <= p ; x ++ ) { for ( int y = - m ; y <= q ; y ++ ) { int t = 0 ;"],"bleu":0.391080327529236,"rouge_l":0.5015447478572852}
{"id":479,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . io . * ; import java . util . * ;   public class P1 { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; System . out . println ( a [ n - k ] ) ; } }","import java . util . * ; public class NetworkConfiguration {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int arr [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; System . out . println ( arr [ n - k ] ) ; }   }","import java . util . Arrays ; import java . util . Scanner ;   public class Main {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int arr [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; System . out . println ( arr [ n - k ] ) ; } }  ","import java . util . * ;   public class questionCF { public static void main ( String [ ] args ) {   Scanner sc = new Scanner ( System . in ) ;   int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ;   int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = sc . nextInt ( ) ; Arrays . sort ( a ) ; ; System . out . println ( a [ n - k ] ) ; } }"],"bleu":0.11335211745854536,"rouge_l":0.3092657342657342}
{"id":480,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ;"],"references":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { long n1 , bx , n2 , by , temp ; long x = 0 , y = 0 ; Scanner sc = new Scanner ( System . in ) ; n1 = sc . nextInt ( ) ; bx = sc . nextInt ( ) ; while ( n1 != 0 ) { n1 -- ; temp = sc . nextInt ( ) ; x = x * bx + temp ; } n2 = sc . nextInt ( ) ; by = sc . nextInt ( ) ; while ( n2 != 0 ) { n2 -- ; temp = sc . nextInt ( ) ; y = y * by + temp ; } if ( x > y ) System . out . print ( \" > \" ) ; else if ( x < y ) System . out . print ( \" < \" ) ; else System . out . print ( \" = \" ) ; } }  ","import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) {   Scanner puttingvaluesinside = new Scanner ( System . in ) ; int arr1 [ ] = new int [ puttingvaluesinside . nextInt ( ) ] ; int base1 = puttingvaluesinside . nextInt ( ) ; for ( int i = 0 ; i < arr1 . length ; i ++ ) arr1 [ i ] = puttingvaluesinside . nextInt ( ) ; int arr2 [ ] = new int [ puttingvaluesinside . nextInt ( ) ] ; int base2 = puttingvaluesinside . nextInt ( ) ; for ( int i = 0 ; i < arr2 . length ; i ++ ) arr2 [ i ] = puttingvaluesinside . nextInt ( ) ; long decimal1 = anyBaseToDecimal ( arr1 , base1 ) ; long decimal2 = anyBaseToDecimal ( arr2 , base2 ) ;"],"bleu":0.12073547584787829,"rouge_l":0.35323433275493327}
{"id":481,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ; import java . io . * ; import java . math . BigInteger ; import java . text . * ; public class Main { static long mod = 1000_000_007 ; static long mod1 = 998244353 ; static boolean fileIO = false ; static boolean memory = true ; static FastScanner f ; static PrintWriter pw ; static double eps = ( double ) 1e-6 ; static int maxN = ( int ) 1e6 ;","n = int ( input ( ) ) arr = list ( map ( int , input ( ) . split ( ) ) ) arr2 = sorted ( arr ) count = 0 a = 0f or i in range ( n ) : if arr [ i ] != arr2 [ i ] : count += 1 k = arr [ i ] arr [ i ] = arr2 [ i ] z = arr . index ( arr2 [ i ] ) arr [ z ] = k   if count > 2 : a = 1 breakif a == 0 : print ( \" YES \" ) else : print ( \" NO \" )","import java . util . * ; import java . io . * ;","import java . io . * ; import java . util . * ;   public class Task220A { private static InputReader in ; private static PrintWriter out ; private static boolean autoFlush = false ; static final int inf = ( int ) 1e9 + 7 ;   static class Testcase { public void solve ( int test ) { int n = in . nextInt ( ) ; int a [ ] = new int [ n ] , b [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = b [ i ] = in . nextInt ( ) ; Arrays . sort ( b ) ; int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) if ( a [ i ] != b [ i ] ) cnt ++ ; out . println ( ( cnt > 2 ) ? \" NO \" : \" YES \" ) ; } }   public static void main ( String [ ] args ) { in = new InputReader ( System . in ) ; out = new PrintWriter ( System . out , autoFlush ) ; int t = 1 ;","import java . util . Arrays ; import java . util . HashMap ; import java . util . Scanner ;   public class P220A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) , minSwaps = 0 ; int [ ] a = new int [ n ] , tmp = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { int val = sc . nextInt ( ) ; a [ i ] = val ; tmp [ i ] = val ; } Arrays . sort ( tmp ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] != tmp [ i ] ) { minSwaps ++ ; } } System . out . println ( minSwaps > 2 ? \" NO \" : \" YES \" ) ; } }"],"bleu":0.41488865152565224,"rouge_l":0.7640487474610697}
{"id":482,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ;"],"references":["n = int ( input ( ) ) stones = list ( map ( lambda t : int ( t ) , input ( ) . split ( ) ) ) q = int ( input ( ) ) queries = list ( map ( lambda t : int ( t ) , input ( ) . split ( ) ) )   stones . sort ( )   added_stones = [ ] added_stones . append ( stones [ 0 ] ) for i in range ( 1 , n , 1 ) : added_stones . append ( stones [ i ] + added_stones [ i - 1 ] )   computed_queries = { }   for qidx , qq in enumerate ( queries ) : if qq in computed_queries : queries [ qidx ] = computed_queries [ qq ] continue   i = n - 2 multiplier = 1 cost = 0 while i >= 0 : pp = pow ( qq , multiplier ) nexti = i - pp if nexti < 0 : cost += added_stones [ i ] * multiplier break cost += ( added_stones [ i ] - added_stones [ nexti ] ) * multiplier multiplier += 1 i = nexti queries [ qidx ] = cost computed_queries [ qq ] = cost   print ( * queries , sep = ' ▁ ' )","import java . io . * ; import java . util . * ;   public class D implements Runnable { public static void main ( String [ ] args ) { new Thread ( null , new D ( ) , \" _ cf \" , 1 << 28 ) . start ( ) ; }   public void run ( ) { FastScanner fs = new FastScanner ( ) ; PrintWriter out = new PrintWriter ( System . out ) ; System . err . println ( \" Go ! \" ) ;   int n = fs . nextInt ( ) ; int [ ] a = fs . nextIntArray ( n ) ; sort ( a ) ; Fenwick_Tree ft = new Fenwick_Tree ( n ) ; for ( int i = 0 ; i < n ; i ++ ) ft . update ( i + 1 , a [ i ] ) ; long [ ] rep = new long [ n + 1 ] ; Arrays . fill ( rep , - 1 ) ; rep [ n - 1 ] = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) rep [ n - 1 ] += a [ i ] ; int q = fs . nextInt ( ) ; for ( int qq = 0 ; qq < q ; qq ++ ) { if ( qq > 0 ) out . print ( \" ▁ \" ) ; int k = fs . nextInt ( ) ; if ( k >= n ) k = n - 1 ; if ( rep [ k ] != - 1 ) { out . print ( rep [ k ] ) ; continue ; } rep [ k ] = 0 ; int at = n - 2 ; long len = k ; long mult = 1 ; while ( at >= 0 ) {","import java . io . * ; import java . util . * ; public class A { public static void main ( String [ ] args ) throws Throwable { MyScanner sc = new MyScanner ( ) ; PrintWriter pw = new PrintWriter ( System . out ) ; int n = sc . nextInt ( ) ; long [ ] a = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = sc . nextInt ( ) ; Arrays . sort ( a ) ; for ( int i = 1 ; i < n ; i ++ ) a [ i ] += a [ i - 1 ] ; long [ ] b = new long [ n ] ; for ( int i = 1 ; i < n ; i ++ ) { long idx = n - 2 ; long shift = i ; while ( idx >= 0 ) { b [ i ] += a [ ( int ) idx ] ; idx -= shift ; shift *= i ; } }","import java . io . * ; import java . util . * ; public class A { public static void main ( String [ ] args ) throws Throwable { MyScanner sc = new MyScanner ( ) ; PrintWriter pw = new PrintWriter ( System . out ) ; int n = sc . nextInt ( ) ; long [ ] a = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = sc . nextInt ( ) ; Arrays . sort ( a ) ; for ( int i = 1 ; i < n ; i ++ ) a [ i ] += a [ i - 1 ] ; long [ ] b = new long [ n ] ; for ( int i = 1 ; i < n ; i ++ ) { long idx = n - 2 ; long shift = i ; while ( idx >= 0 ) { b [ i ] += a [ ( int ) idx ] ; idx -= shift ; shift *= i ; } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . Arrays ; import java . util . Random ; import java . util . StringTokenizer ;   public class Solution { static int n ; static long [ ] pre ; public static void main ( String [ ] args ) throws IOException { FastScanner fs = new FastScanner ( ) ; PrintWriter out = new PrintWriter ( System . out ) ; int tt = 1 ; while ( tt -- > 0 ) { n = fs . nextInt ( ) ; long [ ] a = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = fs . nextLong ( ) ; ruffleSort ( a ) ; reverse ( a , 0 , n ) ; pre = new long [ n ] ; pre [ 0 ] = a [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) pre [ i ] = pre [ i - 1 ] + a [ i ] ; long res_1 = 0 ; for ( int i = 1 ; i < n ; i ++ ) res_1 += a [ i ] * i ; int q = fs . nextInt ( ) ; while ( q -- > 0 ) { int k = fs . nextInt ( ) ; if ( k == 1 ) { out . println ( res_1 ) ; continue ; } long res = 0 ; long sz = 1 ; for ( long i = 1 , t = 1 ; i < n ; i += sz , t ++ ) { sz *= k ; res += sum ( i , i + sz - 1 ) * t ; int f = 1 ; } out . println ( res ) ; } } out . close ( ) ; } static long sum ( long l , long r ) { r = Math . min ( r , n - 1 ) ; return pre [ ( int ) r ] - pre [ ( int ) ( l - 1 ) ] ; } static final Random random = new Random ( ) ; static void ruffleSort ( int [ ] a ) { int n = a . length ;"],"bleu":0.08673427911469693,"rouge_l":0.392122487143525}
{"id":483,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ;   public class Unary_B {   public static void main ( String [ ] args ) {"],"bleu":0.1651713848371982,"rouge_l":0.3502650176678445}
{"id":484,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . io . * ; import java . util . * ;   public class Main { public static void main ( String args [ ] ) { Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; int M [ ] = new int [ 20 ] ; int R [ ] = new int [ 20 ] ; for ( int i = 0 ; i < n ; ++ i ) M [ i ] = input . nextInt ( ) ; for ( int i = 0 ; i < n ; ++ i ) R [ i ] = input . nextInt ( ) ; int range = 720720 , cnt = 0 ; for ( int x = 0 ; x < range ; ++ x ) { int bj = 0 ; for ( int i = 0 ; i < n ; ++ i ) if ( x % M [ i ] == R [ i ] ) { bj = 1 ; break ; } if ( bj == 1 ) cnt ++ ; } System . out . printf ( \" % .6f \\n \" , ( double ) cnt \/ range ) ; } }"],"bleu":0.01713158984819887,"rouge_l":0.19054286945282203}
{"id":485,"predictions":["import java . io . * ; import java . util . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) throws java . lang . Exception { Reader pm = new Reader ( ) ;"],"references":["import java . util . Scanner ;   public class A644 {   public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int N = in . nextInt ( ) ; int R = in . nextInt ( ) ; int C = in . nextInt ( ) ; if ( N > R * C ) { System . out . println ( \" - 1\" ) ; } else { int [ ] [ ] A = new int [ R ] [ C ] ; for ( int n = 0 ; n < N ; n ++ ) { int r = n \/ C ; int c = n % C ; if ( r % 2 != 0 ) { c = C - 1 - c ; } A [ r ] [ c ] = n + 1 ; } StringBuilder output = new StringBuilder ( ) ; for ( int r = 0 ; r < R ; r ++ ) { for ( int c = 0 ; c < C ; c ++ ) { output . append ( A [ r ] [ c ] ) . append ( ' ▁ ' ) ; } output . append ( ' \\n ' ) ; } System . out . print ( output ) ; } }   }","import java . util . * ;   public class Main {    public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) ; int rows = in . nextInt ( ) ; int cols = in . nextInt ( ) ;   int cnt = 1 ; if ( n > rows * cols ) System . out . println ( - 1 ) ; else for ( int r = 0 ; r < rows ; r ++ ) { String s = \" \" ; for ( int c = 0 ; c < cols ; c ++ ) if ( r % 2 == 0 ) { if ( cnt <= n ) s += ( cnt ++ + \" ▁ \" ) ; else s += \"0 ▁ \" ; } else { if ( cnt <= n ) s = ( cnt ++ + \" ▁ \" ) + s ; else s = \"0 ▁ \" + s ; } System . out . println ( s ) ; }   }    }"],"bleu":0.026589624469554977,"rouge_l":0.20127268442139995}
{"id":486,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ;   public class Example { static long [ ] [ ] dp ;","import java . util . ArrayList ; import java . util . List ; import java . util . Scanner ;   public class _0667SuperheroTransformation {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . nextLine ( ) ; String t = sc . nextLine ( ) ; if ( s . equals ( t ) ) { System . out . println ( \" YES \" ) ; } else if ( s . length ( ) != t . length ( ) ) { System . out . println ( \" NO \" ) ; } else { List < Character > store = new ArrayList < > ( ) ; store . add ( ' a ' ) ; store . add ( ' e ' ) ; store . add ( ' i ' ) ; store . add ( ' o ' ) ; store . add ( ' u ' ) ; boolean flag = true ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( ! ( store . contains ( s . charAt ( i ) ) ^ store . contains ( t . charAt ( i ) ) ) ) { } else { flag = false ; break ; } } if ( flag ) { System . out . println ( \" YES \" ) ; } else { System . out . println ( \" NO \" ) ; } } }   }","import java . util . * ; import java . math . * ; public class SuperheroTransformation { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; char [ ] arr1 = sc . next ( ) . toCharArray ( ) ; char [ ] arr2 = sc . next ( ) . toCharArray ( ) ; if ( arr1 . length != arr2 . length ) { System . out . println ( \" NO \" ) ; return ; } ArrayList < Character > v = new ArrayList < > ( ) ; v . add ( ' a ' ) ; v . add ( ' e ' ) ; v . add ( ' o ' ) ; v . add ( ' i ' ) ; v . add ( ' u ' ) ; for ( int i = 0 ; i < arr1 . length ; i ++ ) { boolean vowel = false ; if ( v . contains ( arr1 [ i ] ) ) vowel = true ; if ( v . contains ( arr2 [ i ] ) != vowel ) { System . out . println ( \" NO \" ) ; return ; } } System . out . println ( \" YES \" ) ; } }","import java . util . * ;   public class Check2 { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; String t = sc . next ( ) ; if ( s . length ( ) != t . length ( ) ) { System . out . println ( \" No \" ) ; } else { boolean check = true ;   for ( int i = 0 ; i < s . length ( ) ; i ++ ) { char ch1 = s . charAt ( i ) ; char ch2 = t . charAt ( i ) ; if ( ch1 == ' a ' || ch1 == ' e ' || ch1 == ' i ' || ch1 == ' o ' || ch1 == ' u ' ) { if ( ch2 == ' a ' || ch2 == ' e ' || ch2 == ' i ' || ch2 == ' o ' || ch2 == ' u ' ) { continue ; } else { check = false ; break ; } } else { if ( ch2 == ' a ' || ch2 == ' e ' || ch2 == ' i ' || ch2 == ' o ' || ch2 == ' u ' ) { check = false ; break ; } } } if ( check ) { System . out . println ( \" Yes \" ) ; } else { System . out . println ( \" No \" ) ; } }   }   public static void Mybfs ( List < List < Integer > > lists , int source , int [ ] dist , boolean [ ] visited ) { dist [ source ] = 0 ;"],"bleu":0.3092403701486615,"rouge_l":0.571875}
{"id":487,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException {"],"references":["import java . io . * ; import java . util . * ;   public class a { static class Reader { final private int BUFFER_SIZE = 1 << 16 ; private DataInputStream din ; private byte [ ] buffer ; private int bufferPointer , bytesRead ; public Reader ( ) { din = new DataInputStream ( System . in ) ; buffer = new byte [ BUFFER_SIZE ] ; bufferPointer = bytesRead = 0 ; } public Reader ( String file_name ) throws IOException { din = new DataInputStream ( new FileInputStream ( file_name ) ) ; buffer = new byte [ BUFFER_SIZE ] ; bufferPointer = bytesRead = 0 ; } public String next ( ) throws IOException { byte [ ] buf = new byte [ 64 ] ;","import java . util . * ; import java . io . * ; import java . math . * ;     public class A {   private static long INF = 2000000000L , M = 1000000007 , MM = 998244353 ; private static int N = 0 ;   public static void process ( ) throws IOException {   long n = sc . nextLong ( ) , k = sc . nextLong ( ) ; long l = 0 , r = n ; while ( l <= r ) { long mid = ( l + r ) \/ 2 ; long val = mid + ceil ( k , mid + 1 ) ; if ( val <= n ) { System . out . println ( \" YES \" ) ; return ; } r = mid - 1 ; } System . out . println ( \" NO \" ) ;   }  ","import java . util . * ; import java . math . * ; public class Deadline { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int runs = sc . nextInt ( ) ; while ( runs -- > 0 ) { double n = sc . nextDouble ( ) ; double d = sc . nextDouble ( ) ; double num = Math . floor ( Math . sqrt ( d ) ) ; double in = n + 1 ; for ( int i = 0 ; i < num ; i ++ ) { in = Math . ceil ( i + Math . ceil ( d \/ ( i + 1 ) ) ) ; if ( in <= n ) {","import java . io . * ; import java . util . * ;   public class A {   public static BufferedReader br ; public static PrintWriter out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ;   public static void main ( String [ ] args ) throws IOException { readInput ( ) ; out . close ( ) ; } static long n , d ; static void solve ( ) { long min = Long . MAX_VALUE ; for ( int i = 0 ; i * i <= d ; i ++ ) { min = Long . min ( min , i + ( d + i ) \/ ( i + 1 ) ) ; } if ( min > n ) out . println ( \" NO \" ) ; else out . println ( \" YES \" ) ; } public static void readInput ( ) throws IOException { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ;"],"bleu":0.03522075763922394,"rouge_l":0.29049392514805544}
{"id":488,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException {"],"references":["import java . lang . * ; import java . util . * ; import java . io . * ; public class Codechef {   public void solve ( ) throws IOException { FastScanner fs = new FastScanner ( ) ; StringBuilder ans = new StringBuilder ( \" \" ) ;","import java . io . BufferedInputStream ; import java . io . BufferedOutputStream ; import java . io . BufferedReader ; import java . io . FileNotFoundException ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . Arrays ; import java . util . StringTokenizer ;   public class Main { public static void main ( String [ ] args ) throws FileNotFoundException , IOException { InputReader in = new InputReader ( new BufferedInputStream ( System . in ) ) ; PrintWriter out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; TaskB solver = new TaskB ( ) ;","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . ArrayList ; import java . util . StringTokenizer ;   public class CF0017B_Hierarchy { static class Scanner { BufferedReader br ; StringTokenizer st ;   public Scanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; }   String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   long nextLong ( ) { return Long . parseLong ( next ( ) ) ; }   double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; }   String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } }   static class Employee { int id ; int qual ; ArrayList < Employee > manager ; ArrayList < Integer > cost ;   public Employee ( int id , int qual ) { this . id = id ; this . qual = qual ; manager = new ArrayList < > ( ) ; cost = new ArrayList < > ( ) ; }  ","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . Arrays ; import java . util . HashMap ; import java . util . HashSet ;   public class Solution { private static final BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ;   public static void main ( String [ ] args ) throws IOException {   int n = nextInt ( ) ; int arr [ ] = readIntArray ( ) ; int q = nextInt ( ) ; int sum = 0 ; int parents [ ] = new int [ n + 1 ] ; HashMap < Integer , int [ ] > map = new HashMap < > ( ) ; while ( q -- > 0 ) { int inp [ ] = readIntArray ( ) ; int child = inp [ 1 ] ; int parent = inp [ 0 ] ; int cost = inp [ 2 ] ; if ( map . containsKey ( child ) ) { if ( map . get ( child ) [ 1 ] > cost ) { sum -= map . get ( child ) [ 1 ] ; sum += cost ; parents [ child ] = parent ; map . put ( child , new int [ ] { parent , cost } ) ; } } else { map . put ( child , new int [ ] { parent , cost } ) ; parents [ child ] = parent ; sum += cost ; } } int withoutParent = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( parents [ i ] == 0 ) withoutParent ++ ; } if ( withoutParent == 1 ) println ( sum ) ; else println ( - 1 ) ;   }    ","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . StreamTokenizer ; import java . util . Arrays ;   public class Main { static int n , m ; static long ans ; static int a [ ] = new int [ 1010 ] ; static int vis [ ] = new int [ 1010 ] ; static To b [ ] = new To [ 10010 ] ; public static void main ( String [ ] args ) throws IOException { StreamTokenizer re = new StreamTokenizer ( new BufferedReader ( new InputStreamReader ( System . in ) ) ) ; re . nextToken ( ) ; n = ( int ) re . nval ; for ( int i = 1 ; i <= n ; i ++ ) { re . nextToken ( ) ; a [ i ] = ( int ) re . nval ; } re . nextToken ( ) ; m = ( int ) re . nval ; for ( int i = 1 ; i <= m ; i ++ ) { b [ i ] = new To ( ) ; re . nextToken ( ) ; b [ i ] . a = ( int ) re . nval ; re . nextToken ( ) ; b [ i ] . b = ( int ) re . nval ; re . nextToken ( ) ; b [ i ] . c = ( int ) re . nval ; } Arrays . sort ( b , 1 , m + 1 ) ; for ( int i = 1 ; i <= m ; i ++ ) { if ( a [ b [ i ] . a ] > a [ b [ i ] . b ] && vis [ b [ i ] . b ] == 0 ) { vis [ b [ i ] . b ] = 1 ; ans += b [ i ] . c ; } } int cnt = 0 ; for ( int i = 1 ; i <= n ; i ++ ) if ( vis [ i ] == 0 ) cnt ++ ; if ( cnt != 1 ) System . out . println ( - 1 ) ; else System . out . println ( ans ) ; } } class To implements Comparable < To > { int a , b , c ; @ Override public int compareTo ( To o ) { return this . c - o . c ; } }"],"bleu":0.5245779259399983,"rouge_l":0.5642117232676492}
{"id":489,"predictions":["import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; } public static long mod = 17352642619633L ; void run ( FastScanner in , PrintWriter out ) {"],"references":["import java . util . Scanner ;   public class Codeforces {   public static void main ( String [ ] args ) {   Scanner input = new Scanner ( System . in ) ;  ","import java . util . * ;    public class HelloWorld {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String str = sc . nextLine ( ) ; char [ ] chr = { ' h ' , ' e ' , ' l ' , ' l ' , ' o ' } ; int count = 0 ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { if ( str . charAt ( i ) == chr [ count ] ) { count ++ ; } if ( count > 4 ) { break ; } } if ( count == 5 ) { System . out . println ( \" YES \" ) ; } else { System . out . println ( \" NO \" ) ; } } }","import java . io . * ; import java . util . * ;   public class GFG { public static String vaysaMis ( String str ) { String str1 = new String ( \" hello \" ) ; int n = str . length ( ) ; int j = 0 ; for ( int i = 0 ; i < n && j < 5 ; i ++ ) { if ( str . charAt ( i ) == str1 . charAt ( j ) ) { j ++ ; } } if ( j == 5 ) return \" YES \" ; return \" NO \" ; } public static void main ( String [ ] args ) { String str ; int k ; Scanner scan = new Scanner ( System . in ) ; str = scan . next ( ) ; System . out . println ( vaysaMis ( str ) ) ;","import java . util . * ; public class AChatRoom { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; String s = input . next ( ) ; String t = \" hello \" ; int j = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( j < t . length ( ) && s . charAt ( i ) == t . charAt ( j ) ) j ++ ; } if ( j == t . length ( ) ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ; } }","import java . util . * ; import java . lang . * ; import java . io . * ;   public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) {"],"bleu":0.4514943543201329,"rouge_l":0.6494502360657816}
{"id":490,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . io . File ; import java . io . FileNotFoundException ; import java . io . IOException ; import java . io . PrintWriter ; import java . util . * ;   public class Main {   public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; int m = input . nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = input . nextInt ( ) ; } Arrays . sort ( a ) ; int i = n - 1 ; int count = 0 ; while ( m > 0 ) { count ++ ; m -= a [ i ] ; i -- ; } System . out . println ( count ) ; } }","import java . util . * ; public class USBDrive_609A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ;   int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; }   Arrays . sort ( a ) ; int count = 0 , i = n - 1 ; while ( m > 0 ) { m -= a [ i ] ; i -- ; count ++ ; } System . out . println ( count ) ;    } }","import java . io . FileInputStream ; import java . io . FileNotFoundException ; import java . io . IOException ; import java . io . PrintWriter ; import java . util . Arrays ; import java . util . Collection ; import java . util . List ; import java . util . Scanner ; import java . util . function . Function ; import java . util . stream . Collectors ; public class _p000609A { static public void main ( final String [ ] args ) throws IOException { p000609A . _main ( args ) ; }","import java . util . * ;   public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int Count = 0 ; ArrayList < Integer > lst = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { lst . add ( sc . nextInt ( ) ) ; } Collections . sort ( lst ) ; n -- ; while ( m > 0 ) { m -= lst . get ( n ) ; n -- ; Count ++ ; } System . out . println ( Count ) ; } }"],"bleu":0.2330545251037904,"rouge_l":0.42829787234042555}
{"id":491,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int t = 1 ;"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;   public class RomaAndChangingSigns {   public static void main ( String [ ] args ) { FastReader reader = new FastReader ( ) ;   int n = reader . nextInt ( ) ; int k = reader . nextInt ( ) ; int ed = n - 1 , st = 0 ; int a [ ] = new int [ n ] ; long sum = 0 ;   for ( int i = 0 ; i < n ; i ++ ) a [ i ] = reader . nextInt ( ) ;   while ( st < ed ) { if ( a [ st ] < 0 && Math . abs ( a [ st ] ) >= a [ ed ] && k > 0 ) { k -- ; sum += Math . abs ( a [ st ++ ] ) ; } else { sum += a [ ed -- ] ; } }   for ( int i = st ; i <= ed ; i ++ ) { sum += a [ i ] ; }   if ( k > 0 ) { sum -= a [ ed ] ; sum += ( k % 2 == 0 ) ? a [ ed ] : a [ ed ] * - 1 ; } System . out . println ( sum ) ; }   static class FastReader { BufferedReader br ; StringTokenizer st ;   public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; }   String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   long nextLong ( ) { return Long . parseLong ( next ( ) ) ; }   double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; }   String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }","  import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Scanner ; import java . util . StringTokenizer ; import java . util . * ; import java . math . * ; public class er10a {","import java . util . * ; import java . io . * ; public class Asd { static Scanner s = new Scanner ( System . in ) ; static PrintWriter w = new PrintWriter ( System . out ) ; public static void main ( String args [ ] ) { int t = 1 ;"],"bleu":0.7028391947442503,"rouge_l":0.672041130386122}
{"id":492,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . Scanner ;   public class Hate_A {   public static void main ( String [ ] args ) {   Scanner in = new Scanner ( System . in ) ;   int x = in . nextInt ( ) ; in . nextLine ( ) ; String s = in . nextLine ( ) ;   char ch [ ] = s . toCharArray ( ) ; int countS = 0 ; int countF = 0 ; for ( int i = 1 ; i < x ; i ++ ) { if ( ch [ i - 1 ] != ch [ i ] ) { if ( ch [ i ] == ' F ' ) { countF ++ ; } else { countS ++ ; } } } System . out . println ( ( countF > countS && countF != 0 ) ? \" YES \" : \" NO \" ) ;   } }","import java . util . * ; public class BetOffice1 { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; String s = sc . next ( ) ; s = s . toLowerCase ( ) ; int z = s . length ( ) - 1 ; if ( s . indexOf ( ' s ' ) == 0 && s . indexOf ( ' f ' , z ) == z ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }","import java . util . Scanner ;   public class Main { public static void main ( String [ ] arg ) { int n = 0 ; Scanner cin = new Scanner ( System . in ) ; n = cin . nextInt ( ) ; String line = cin . next ( ) ; int cnt1 = 0 ; int cnt2 = 0 ; for ( int i = 1 ; i < n ; i ++ ) { if ( line . charAt ( i - 1 ) != line . charAt ( i ) ) { if ( line . charAt ( i - 1 ) == ' S ' ) cnt1 ++ ; else { cnt2 ++ ; } } } if ( cnt1 > cnt2 ) System . out . println ( \" YES \" ) ; else { System . out . printf ( \" NO \" ) ; } } }","import java . util . * ;   public class questionCF {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int ss = 0 , ff = 0 , sf = 0 , fs = 0 ; for ( int i = 0 ; i < s . length ( ) - 1 ; i ++ ) { String x = s . substring ( i , i + 2 ) ;   if ( x . equals ( \" SF \" ) ) sf ++ ; else if ( x . equals ( \" FS \" ) ) fs ++ ; } if ( ( sf > fs ) ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ; } }","import java . util . Scanner ;   public class Singleton_Pattern { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int days = sc . nextInt ( ) ; sc . nextLine ( ) ; String s = sc . nextLine ( ) ; int sf = 0 , fs = 0 ; for ( int i = 0 ; i < ( s . length ( ) - 1 ) ; i ++ ) { String temp = s . substring ( i , i + 2 ) ; if ( temp . equals ( \" SF \" ) ) sf ++ ; if ( temp . equals ( \" FS \" ) ) fs ++ ; }   if ( sf > fs ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ; } }"],"bleu":0.0729279595053007,"rouge_l":0.2273590147235855}
{"id":493,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . io . * ;   public class Main { static int n ; static String str ; static BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; static BufferedWriter bw = new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ;   public static void main ( String [ ] args ) throws IOException { br = new BufferedReader ( new InputStreamReader ( new FileInputStream ( \" input . txt \" ) ) ) ; bw = new BufferedWriter ( new OutputStreamWriter ( new FileOutputStream ( \" output . txt \" ) ) ) ; n = Integer . parseInt ( br . readLine ( ) ) ; str = br . readLine ( ) ; int i = 0 ; while ( i < n && str . charAt ( i ) == '0' ) { ++ i ; } int k = 0 ; boolean flag = true ; for ( int j = i + 1 ; j < n ; ++ j ) { if ( str . charAt ( j ) == '1' ) { if ( k == 0 ) { k = j - i ; } else if ( k != j - i ) { flag = false ; break ; } i = j ; } } bw . write ( flag ? \" YES \" : \" NO \" ) ; bw . close ( ) ; } }","import java . io . * ;   public class Main { static int n ; static String str ; static BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; static BufferedWriter bw = new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ;   public static void main ( String [ ] args ) throws IOException { br = new BufferedReader ( new InputStreamReader ( new FileInputStream ( \" input . txt \" ) ) ) ; bw = new BufferedWriter ( new OutputStreamWriter ( new FileOutputStream ( \" output . txt \" ) ) ) ; n = Integer . parseInt ( br . readLine ( ) ) ; str = br . readLine ( ) ; int i = 0 ; while ( i < n && str . charAt ( i ) == '0' ) { ++ i ; } int k = 0 ; boolean flag = true ; for ( int j = i + 1 ; j < n ; ++ j ) { if ( str . charAt ( j ) == '1' ) { if ( k == 0 ) { k = j - i ; } else if ( k != j - i ) { flag = false ; break ; } i = j ; } } bw . write ( flag ? \" YES \" : \" NO \" ) ; bw . close ( ) ; } }","import java . io . File ; import java . io . FileNotFoundException ; import java . io . PrintWriter ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws FileNotFoundException { Scanner sc = new Scanner ( new File ( \" input . txt \" ) ) ; PrintWriter pw = new PrintWriter ( \" output . txt \" ) ; int n = sc . nextInt ( ) ; String signals = sc . next ( ) ; ArrayList < Integer > onesPos = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( signals . charAt ( i ) == '1' ) onesPos . add ( i ) ; } int diff = onesPos . get ( 1 ) - onesPos . get ( 0 ) ; for ( int i = 2 ; i < onesPos . size ( ) ; i ++ ) { if ( diff != onesPos . get ( i ) - onesPos . get ( i - 1 ) ) { pw . println ( \" NO \" ) ; pw . close ( ) ; return ; } } pw . println ( \" YES \" ) ; pw . close ( ) ; } }"],"bleu":0.02111130804677209,"rouge_l":0.24928483857785047}
{"id":494,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ;   public class AutomaticDoor {   public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; long n = scan . nextLong ( ) ; int m = scan . nextInt ( ) ; long a = scan . nextLong ( ) ; long d = scan . nextLong ( ) ; long [ ] arr = new long [ m ] ; for ( int i = 0 ; i < m ; i ++ ) arr [ i ] = scan . nextLong ( ) ; int count = 0 ; long time = 0 ; long x = d \/ a + 1 ; long y = d - ( x - 1 ) * a ; if ( y < 0 ) y = 0 ; long last = 0 ; for ( int i = 0 ; i < m ; ) { long b = Math . max ( Math . min ( ( arr [ i ] - 1 ) \/ a , n ) , 0 ) ; long c = b - time ; long k = c \/ x ; count += k ; time += k * x ; if ( k != 0 ) { while ( i < m && arr [ i ] <= time * a + y ) { i ++ ; } } if ( i >= m ) break ; count ++ ; last = arr [ i ] + d ; if ( time < n ) last = Math . min ( last , ( time + 1 ) * a + d ) ; while ( i < m && arr [ i ] <= last ) i ++ ; time = Math . max ( time , Math . min ( n , last \/ a ) ) ; } if ( time < n ) { count += ( n - time + x - 1 ) \/ x ; } System . out . println ( count ) ; } }","import java . io . * ; import java . util . * ;   public class MainA { public static void main ( String [ ] args ) { StdIn in = new StdIn ( ) ; int n = in . nextInt ( ) , m = in . nextInt ( ) , a = in . nextInt ( ) ;"],"bleu":0.2719175940901611,"rouge_l":0.4323882224645583}
{"id":495,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ;   public class Example { static int [ ] dp ;   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ;   int n = sc . nextInt ( ) ; int [ ] [ ] arr = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] [ 0 ] = sc . nextInt ( ) ; arr [ i ] [ 1 ] = sc . nextInt ( ) ;   } int [ ] fi = new int [ n ] ; fi [ 0 ] = Math . max ( arr [ 0 ] [ 1 ] , arr [ 0 ] [ 0 ] ) ; for ( int i = 1 ; i < n ; i ++ ) { if ( Math . max ( arr [ i ] [ 0 ] , arr [ i ] [ 1 ] ) <= fi [ i - 1 ] ) { fi [ i ] = Math . max ( arr [ i ] [ 0 ] , arr [ i ] [ 1 ] ) ; } else { fi [ i ] = Math . min ( arr [ i ] [ 0 ] , arr [ i ] [ 1 ] ) ; } } for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( fi [ i + 1 ] > fi [ i ] ) { System . out . println ( \" NO \" ) ; return ;   } } System . out . println ( \" YES \" ) ;    }    }    ","import java . util . Scanner ;   public class _0731TurntheRectangles {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int max = Integer . MIN_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { int s = sc . nextInt ( ) ; int t = sc . nextInt ( ) ; int tempMax = Math . max ( s , t ) ; int tempMin = Math . min ( s , t ) ; if ( i == 0 ) { max = tempMax ; } else { if ( s > max && t > max ) { System . out . println ( \" NO \" ) ; return ; } else { if ( tempMax <= max ) { max = tempMax ; } else { max = tempMin ; } } } } System . out . println ( \" YES \" ) ; }   }","  import java . util . Scanner ; import java . util . Arrays ; public class Codechef { public static void main ( String [ ] args ) throws java . lang . Exception { try { Scanner sc = new Scanner ( System . in ) ; int i , n , c , q = 1 ; n = sc . nextInt ( ) ; int a [ ] = new int [ n ] ; int b [ ] = new int [ n ] ; for ( i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; b [ i ] = sc . nextInt ( ) ; } c = Integer . MAX_VALUE ; for ( i = 0 ; i < n ; i ++ ) { if ( Math . max ( a [ i ] , b [ i ] ) <= c ) { c = ( int ) Math . max ( a [ i ] , b [ i ] ) ; } else if ( Math . min ( a [ i ] , b [ i ] ) <= c ) { c = ( int ) Math . min ( a [ i ] , b [ i ] ) ; } else { q = 0 ; break ; } } if ( q == 1 ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ; } catch ( Exception e ) { } } }","import java . util . * ;   public class StackBracket { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; List < int [ ] > list = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int [ ] ar = new int [ 2 ] ; ar [ 0 ] = sc . nextInt ( ) ; ar [ 1 ] = sc . nextInt ( ) ; list . add ( ar ) ; } boolean check = true ;"],"bleu":0.11281420056158745,"rouge_l":0.2510255682551149}
{"id":496,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Scanner ; import java . util . StringTokenizer ; import java . util . * ; import java . math . * ; public class er10a {"],"references":["  import java . util . * ; import java . lang . * ; import java . io . * ;   public class Codechef { public static void main ( String [ ] args ) throws java . lang . Exception { Scanner sc = new Scanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; long n = sc . nextLong ( ) ; int m = sc . nextInt ( ) ; long k = sc . nextLong ( ) ; long p [ ] = new long [ m ] ; for ( int i = 0 ; i < m ; i ++ ) p [ i ] = sc . nextLong ( ) ; int cnt = 0 ; int special = 0 ; for ( int i = 0 ; i < m ; i ++ ) {","import java . util . Scanner ;   public class TokitsukazeA { static long [ ] spec ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long n = sc . nextLong ( ) ; int m = sc . nextInt ( ) ; long k = sc . nextLong ( ) ; spec = new long [ m ] ; for ( int i = 0 ; i < m ; ++ i ) spec [ i ] = sc . nextLong ( ) ; int count = 0 ; int offset = 0 ; for ( int i = 0 ; i < spec . length ; ) { long cur = spec [ i ] ; long page = ( spec [ i ] - i + k - 1 ) \/ k ; long end = ( page ) * k + i ; int endIdx = getIdx ( end ) ; count ++ ; i = endIdx + 1 ; } System . out . println ( count ) ; } static int getIdx ( long e ) { int lo = 0 ; int hi = spec . length - 1 ; int ans = - 1 ; while ( lo <= hi ) { int mid = ( lo + hi ) \/ 2 ; if ( spec [ mid ] <= e ) { ans = mid ; lo = mid + 1 ; } else { hi = mid - 1 ; } } return ans ; } }","import java . util . Scanner ;   public class TokitsukazeA { static long [ ] spec ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long n = sc . nextLong ( ) ; int m = sc . nextInt ( ) ; long k = sc . nextLong ( ) ; spec = new long [ m ] ; for ( int i = 0 ; i < m ; ++ i ) spec [ i ] = sc . nextLong ( ) ; int count = 0 ; int offset = 0 ; for ( int i = 0 ; i < spec . length ; ) { long cur = spec [ i ] ; long page = ( spec [ i ] - i + k - 1 ) \/ k ; long end = ( page ) * k + i ; int endIdx = getIdx ( end ) ; count ++ ; i = endIdx + 1 ; } System . out . println ( count ) ; } static int getIdx ( long e ) { int lo = 0 ; int hi = spec . length - 1 ; int ans = - 1 ; while ( lo <= hi ) { int mid = ( lo + hi ) \/ 2 ; if ( spec [ mid ] <= e ) { ans = mid ; lo = mid + 1 ; } else { hi = mid - 1 ; } } return ans ; } }","import java . lang . * ; import java . util . * ; import java . util . stream . Collectors ; import java . io . * ;   public class absolute { public static long process ( long n , long [ ] ar , long k ) { int i = 0 , steps = 0 ; long stdiv = ar [ 0 ] \/ k , st = ( stdiv + ( ( ar [ 0 ] % k != 0 ) ? 1 : 0 ) ) * k ; if ( k == 1 ) return ar . length ; while ( i < ar . length ) { int count = 0 ;"],"bleu":0.13547486251050203,"rouge_l":0.29683698296836986}
{"id":497,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( a [ i ] > b [ j ] ) { ans ++ ; } } out . println ( ans ) ; } static class MyScanner { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( \" \" ) ; String next ( ) { while ( ! st . hasMoreTokens ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . util . Scanner ; public class B { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int t = in . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int n = in . nextInt ( ) ; int k = in . nextInt ( ) ; String s = in . next ( ) ; System . out . println ( result ( n , k , s ) ) ; } } private static int result ( int n , int k , String s ) { int firstIndex = s . indexOf ( ' * ' ) ; int lastIndex = s . lastIndexOf ( ' * ' ) ; if ( firstIndex == lastIndex ) { return 1 ; } int res = 2 ; while ( firstIndex != lastIndex ) { int middleIndex = firstIndex + k ; if ( middleIndex >= lastIndex ) { return res ; } while ( s . charAt ( middleIndex ) != ' * ' ) { middleIndex -- ; } res ++ ; firstIndex = middleIndex ; } return res ; } }","import java . util . ArrayList ; import java . util . List ; import java . util . Scanner ; public class Main { public static int partialReplace ( char [ ] arr , int length , int distance ) { int count = 0 ; List < Integer > idx = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < length ; i ++ ) { if ( arr [ i ] == ' * ' ) { idx . add ( i ) ; } } if ( idx . size ( ) <= 2 ) { return idx . size ( ) ; } int i = 0 ; count = 1 ; while ( i < idx . size ( ) - 1 ) { int cover = idx . get ( i ) + distance ; while ( ( i < idx . size ( ) ) && ( idx . get ( i ) <= cover ) ) { i ++ ; } i -- ; count ++ ; } return count ; } public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int testcase = in . nextInt ( ) ; while ( testcase > 0 ) { int length = in . nextInt ( ) ; int distance = in . nextInt ( ) ; in . skip ( \" ( \\r \\n | [ \\n \\r \\u2028\\u2029\\u0085 ] ) ? \" ) ; char [ ] str = in . nextLine ( ) . toCharArray ( ) ; int result = partialReplace ( str , length , distance ) ; System . out . println ( String . valueOf ( result ) ) ; testcase -- ; } in . close ( ) ; } }"],"bleu":0.2543416404179442,"rouge_l":0.45755229706868417}
{"id":498,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ; public class Main { static int vis [ ] = new int [ 1000 ] ; public static void main ( String args [ ] ) { Scanner input = new Scanner ( System . in ) ; int n , A , B , C , T ; n = input . nextInt ( ) ; A = input . nextInt ( ) ; B = input . nextInt ( ) ; C = input . nextInt ( ) ; T = input . nextInt ( ) ; for ( int i = 1 ; i <= T ; i ++ ) vis [ i ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { int x = input . nextInt ( ) ; vis [ x ] ++ ; } if ( C <= B ) { System . out . println ( n * A ) ; } else { int get = n * A ; int cost = 0 ; int num = 0 ; for ( int i = 1 ; i <= T ; i ++ ) { get += num * C ; cost -= num * B ; num += vis [ i ] ; } System . out . println ( get + cost ) ; } } }  ","import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) , a = sc . nextInt ( ) , b = sc . nextInt ( ) , c = sc . nextInt ( ) , t = sc . nextInt ( ) ; long ans = n * a ; if ( b < c ) for ( int i = 0 ; i < n ; i ++ ) { int tx = sc . nextInt ( ) ; ans = ans + ( t - tx ) * ( c - b ) ; } System . out . println ( ans ) ; } }","import java . util . * ; import java . io . * ; public class PermuteDigits { public static void main ( String args [ ] ) throws IOException { Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) , a = in . nextInt ( ) , b = in . nextInt ( ) , c = in . nextInt ( ) , t = in . nextInt ( ) , sum = 0 ; sum += n * a ; if ( b >= c ) System . out . println ( sum ) ; else { int lol = c - b ; for ( int i = 0 ; i < n ; i ++ ) sum += lol * ( t - in . nextInt ( ) ) ; System . out . println ( sum ) ; } } }","import java . io . * ; import java . util . Arrays ; import java . util . InputMismatchException ;   public class _475_B implements Runnable { public static void main ( String [ ] args ) { new Thread ( null , new _475_B ( ) , \" Main \" , 1 << 27 ) . start ( ) ; } @ Override public void run ( ) { FastReader fd = new FastReader ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; int n = fd . nextInt ( ) ; int current = fd . nextInt ( ) ; int penalty = fd . nextInt ( ) ; int bonus = fd . nextInt ( ) ; int t = fd . nextInt ( ) ;   int [ ] messages = getArray ( n , false , fd ) ; int ans = n * current ;   if ( penalty < bonus ) { for ( int m : messages ) { ans += ( t - m ) * ( bonus - penalty ) ; } } out . println ( ans ) ; out . close ( ) ; }  "],"bleu":0.0812096311109868,"rouge_l":0.25560813495647144}
{"id":499,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ;   public class Main {   public static int solution ( int [ ] games , ArrayList < Set < Integer > > dep , int position , Set < Integer > completed , int left ) { int completedThisComp = 0 ;   boolean taken = true ; while ( taken ) { taken = false ; for ( int i = 0 ; i < games . length ; i ++ ) { if ( completed . contains ( i ) ) continue ;   if ( games [ i ] != position ) continue ;   boolean canComplete = true ; for ( Integer d : dep . get ( i ) ) { if ( completed . contains ( d ) ) continue ; canComplete = false ; }   if ( canComplete ) { taken = true ; completed . add ( i ) ; completedThisComp += 1 ; } } }   if ( completedThisComp == left ) return 0 ;   if ( position == 0 ) { return 1 + solution ( games , dep , 1 , completed , left - completedThisComp ) ; } if ( position == 1 ) { return 1 + solution ( games , dep , 2 , completed , left - completedThisComp ) ; }   return 1 + solution ( games , dep , 0 , completed , left - completedThisComp ) ; }"],"bleu":0.008214359434932816,"rouge_l":0.13631947143412357}
{"id":500,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . Scanner ;   public class Solution { public static String solve ( String sentence ) { String [ ] words = sentence . split ( \" ▁ \" ) ; int gender = - 1 ; boolean noun = false , vers = false ; if ( words . length == 0 ) return \" NO \" ; int firstCode = encode ( words [ 0 ] ) ; if ( firstCode == - 1 ) return \" NO \" ; if ( words . length == 1 ) return \" YES \" ; noun = firstCode \/ 2 == 1 ; vers = firstCode \/ 2 == 2 ; gender = firstCode % 2 ; for ( int i = 1 ; i < words . length ; i ++ ) { int code = encode ( words [ i ] ) ; if ( code % 2 != gender || code == - 1 ) return \" NO \" ; if ( code \/ 2 < 2 && vers ) return \" NO \" ; if ( noun ) { if ( code \/ 2 == 0 || code \/ 2 == 1 ) return \" NO \" ; vers = true ; } else { if ( code \/ 2 == 2 ) return \" NO \" ; if ( code \/ 2 == 1 ) noun = true ; } } return noun ? \" YES \" : \" NO \" ; } private static int encode ( String word ) { if ( word . endsWith ( \" lios \" ) ) { return 0 ; } else if ( word . endsWith ( \" liala \" ) ) { return 1 ; } else if ( word . endsWith ( \" etr \" ) ) { return 2 ; } else if ( word . endsWith ( \" etra \" ) ) { return 3 ; } else if ( word . endsWith ( \" initis \" ) ) { return 4 ; } else if ( word . endsWith ( \" inites \" ) ) { return 5 ; } else { return - 1 ; } } public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String str = sc . nextLine ( ) ; System . out . println ( solve ( str ) ) ;   } }","import java . util . Scanner ;   public class Grammar_Lessons { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String [ ] statement = sc . nextLine ( ) . split ( \" ▁ \" ) ; String ans ; if ( isMasculine ( statement [ 0 ] ) ) ans = isstatment ( statement , 0 ) ; else ans = isstatment ( statement , 1 ) ; System . out . println ( ans ) ; }   public static boolean isMasculine ( String str ) { if ( ( endwith ( str , \" lios \" ) || endwith ( str , \" etr \" ) || endwith ( str , \" initis \" ) ) ) return true ; else return false ; }   public static String isstatment ( String [ ] statement , int sex ) { int len = statement . length ; int [ ] sta = new int [ len ] ; int [ ] part ; for ( int i = 0 ; i < len ; i ++ ) { part = parts ( statement [ i ] ) ; if ( part [ 0 ] != sex ) return \" NO \" ; else sta [ i ] = part [ 1 ] ; } if ( len == 1 ) return \" YES \" ; int count = 0 ; if ( sta [ 0 ] == 2 ) count = 1 ; for ( int i = 1 ; i < len ; i ++ ) { if ( sta [ i ] < sta [ i - 1 ] ) return \" NO \" ; else if ( sta [ i ] == 2 ) count ++ ; } if ( count == 1 ) return \" YES \" ; else return \" NO \" ; }   public static boolean endwith ( String s1 , String s2 ) { if ( s2 . length ( ) > s1 . length ( ) ) return false ; else if ( s1 . lastIndexOf ( s2 ) == ( s1 . length ( ) - s2 . length ( ) ) ) return true ; else return false ; } public static int [ ] parts ( String str ) { int [ ] ans = new int [ 2 ] ; if ( endwith ( str , \" lios \" ) ) { ans [ 0 ] = 0 ; ans [ 1 ] = 1 ; return ans ; } else if ( endwith ( str , \" liala \" ) ) { ans [ 0 ] = 1 ; ans [ 1 ] = 1 ; return ans ; } else if ( endwith ( str , \" etr \" ) ) {","  import java . util . Arrays ; import java . util . Scanner ;   public class GrammarLessons {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . nextLine ( ) ; int pos = 0 ; String [ ] word = s . split ( \" ▁ \" ) ;","import java . io . ByteArrayInputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Comparator ; import java . util . HashMap ; import java . util . HashSet ; import java . util . InputMismatchException ; import java . util . LinkedList ; import java . util . Queue ; import java . util . StringTokenizer ; import java . util . TreeMap ; import java . util . TreeSet ;    @ SuppressWarnings ( \" unused \" ) public class Grammar113A {   InputStream is ; PrintWriter out ; String INPUT = \" \" ;   int mod = ( int ) ( Math . pow ( 10 , 9 ) + 7 ) ;    void solve ( ) {   String s = ns ( ) ; StringTokenizer obj = new StringTokenizer ( s , \" ▁ \" ) ; int m = 0 , f = 0 ; int adj = 0 , n = 0 , v = 0 ; int prev = - 1 ; int ct = 0 ;   while ( obj . hasMoreTokens ( ) ) { String k = obj . nextToken ( ) ; int len = k . length ( ) ; boolean r = true ;","import java . util . * ; import java . io . * ; import static java . lang . Math . * ;   public class PracticeProblem { public static class FastReader { BufferedReader br ; StringTokenizer st ;   public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; }   String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   long nextLong ( ) { return Long . parseLong ( next ( ) ) ; }   double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; }   String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } }   public static FastReader in = new FastReader ( ) ; public static PrintWriter out = new PrintWriter ( System . out ) ; public static String [ ] adj = { \" lios \" , \" liala \" } ; public static String [ ] nouns = { \" etr \" , \" etra \" } ; public static String [ ] verbs = { \" initis \" , \" inites \" } ; public static String [ ] [ ] grammar = { adj , nouns , verbs } ;   public static int gender ( String s , int index ) { for ( int i = 0 ; i < grammar [ index ] . length ; i ++ ) { if ( s . indexOf ( grammar [ index ] [ i ] , s . length ( ) - grammar [ index ] [ i ] . length ( ) ) != - 1 ) { return i ; } }   return - 1 ;"],"bleu":0.4228565925790232,"rouge_l":0.42837850004501665}
{"id":501,"predictions":["import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; } public static long mod = 17352642619633L ; void run ( FastScanner in , PrintWriter out ) {"],"references":["import java . util . LinkedHashSet ; import java . util . Scanner ; import java . util . Set ;   public class Anton_and_Letters { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String s = scanner . nextLine ( ) ; s = s . replace ( \" { \" , \" \" ) ; s = s . replace ( \" } \" , \" \" ) ; s = s . replaceAll ( \" , ▁ \" , \" \" ) ; s = s . trim ( ) ; Set < Character > characterSet = new LinkedHashSet < > ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { characterSet . add ( s . charAt ( i ) ) ; } System . out . println ( characterSet . size ( ) ) ; } }","import java . util . Scanner ; public class Problem443A {   public static void main ( String [ ] args ) {","import java . util . Arrays ; import java . util . HashSet ; import java . util . Scanner ; import java . util . Set ;   public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String str = scanner . nextLine ( ) ; String s = str . substring ( 1 , str . length ( ) - 1 ) ;   String arrOfStr [ ] = s . split ( \" , ▁ \" ) ; Set < String > hashSet = new HashSet < > ( ) ;   hashSet . addAll ( Arrays . asList ( arrOfStr ) ) ;   if ( str . equals ( \" { } \" ) ) { System . out . println ( 0 ) ; } else { System . out . println ( hashSet . size ( ) ) ; } } }","import java . util . * ; public class Letter { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . nextLine ( ) ; HashSet < Character > hs = new HashSet < > ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) >= ' a ' && s . charAt ( i ) <= ' z ' ) hs . add ( s . charAt ( i ) ) ; } System . out . println ( hs . size ( ) ) ; } }","import java . util . Arrays ; import java . util . Scanner ;   public class Main {   public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ;    String s = in . nextLine ( ) ;   s = s . replace ( \" { \" , \" \" ) . replace ( \" } \" , \" \" ) . replace ( \" ▁ \" , \" \" ) ; long a = Arrays . stream ( s . split ( \" , \" ) ) . distinct ( ) . filter ( c -> ! c . isEmpty ( ) ) . count ( ) ; System . out . println ( a ) ; } }"],"bleu":0.42620336083568067,"rouge_l":0.745224344735673}
{"id":502,"predictions":["import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;"],"references":["import java . util . Scanner ;   public class MeetOldFriend { public static void main ( String [ ] args ) {   Scanner in = new Scanner ( System . in ) ; long l1 = in . nextLong ( ) , r1 = in . nextLong ( ) , l2 = in . nextLong ( ) , r2 = in . nextLong ( ) , k = in . nextLong ( ) , l = Math . max ( l1 , l2 ) , r = Math . min ( r1 , r2 ) ;   in . close ( ) ; System . out . println ( l <= r ? k >= l && k <= r ? r - l : r - l + 1 : 0 ) ; } }","import java . util . * ; public class Main {   static long meeting ( long l1 , long r1 , long l2 , long r2 , long k ) { long up = 0 , lo = 0 ; if ( l1 > l2 ) { lo = l1 ; if ( l1 > r2 ) return 0 ; up = r1 > r2 ? r2 : r1 ; } else { lo = l2 ; if ( r1 < l2 ) return 0 ; up = r1 > r2 ? r2 : r1 ; } long time = up - lo + 1 ; if ( k >= lo && k <= up ) { time -- ; } return time ; } public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; long l1 = scan . nextLong ( ) ; long r1 = scan . nextLong ( ) ; long l2 = scan . nextLong ( ) ; long r2 = scan . nextLong ( ) ; long k = scan . nextLong ( ) ; System . out . println ( meeting ( l1 , r1 , l2 , r2 , k ) ) ; } }","import java . util . * ; import java . io . * ; public class MainClass { public static void main ( String args [ ] ) throws IOException { Reader in = new Reader ( ) ; long l1 = in . nextLong ( ) ; long r1 = in . nextLong ( ) ; long l2 = in . nextLong ( ) ; long r2 = in . nextLong ( ) ; long k = in . nextLong ( ) ; long l = Math . max ( l1 , l2 ) ; long r = Math . min ( r1 , r2 ) ; if ( l <= r ) { if ( k >= l && k <= r ) System . out . println ( r - l ) ; else System . out . println ( r - l + 1 ) ; } else System . out . println ( 0 ) ;   } } class Reader { final private int BUFFER_SIZE = 1 << 16 ; private DataInputStream din ; private byte [ ] buffer ; private int bufferPointer , bytesRead ;   public Reader ( ) { din = new DataInputStream ( System . in ) ; buffer = new byte [ BUFFER_SIZE ] ; bufferPointer = bytesRead = 0 ; }   public Reader ( String file_name ) throws IOException { din = new DataInputStream ( new FileInputStream ( file_name ) ) ; buffer = new byte [ BUFFER_SIZE ] ; bufferPointer = bytesRead = 0 ; }   public String readLine ( ) throws IOException { byte [ ] buf = new byte [ 64 ] ;","import java . util . * ; public class _714A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long l1 = sc . nextLong ( ) ; long r1 = sc . nextLong ( ) ; long l2 = sc . nextLong ( ) ; long r2 = sc . nextLong ( ) ; long k = sc . nextLong ( ) ; if ( r2 < l1 || l2 > r1 ) System . out . println ( 0 ) ; else { boolean inc = k >= Math . max ( l1 , l2 ) && k <= Math . min ( r1 , r2 ) ; System . out . println ( Math . min ( r1 , r2 ) - Math . max ( l1 , l2 ) + 1 - ( inc ? 1 : 0 ) ) ; } } }"],"bleu":0.03877701393189182,"rouge_l":0.19863824748371814}
{"id":503,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int t = 1 ;"],"references":["import java . io . * ; import java . util . * ;   public class a { public static void main ( String [ ] args ) throws IOException { FastReader scan = new FastReader ( ) ;","import java . util . * ; import java . io . * ;   public class Main { public static void main ( String args [ ] ) { new Main ( ) . run ( ) ; }   FastReader in = new FastReader ( ) ; PrintWriter out = new PrintWriter ( System . out ) ; void run ( ) { work ( ) ; out . flush ( ) ; } long mod = 998244353 ; long gcd ( long a , long b ) { return a == 0 ? b : gcd ( b % a , a ) ; } void work ( ) { long s = nl ( ) , e = nl ( ) , t = nl ( ) ; int n = in . nextInt ( ) ; if ( n == 0 ) { out . println ( e - t ) ; return ; } long [ ] A = na ( n ) ; long min = e , ret = 0 ; long cur = s ;","import java . util . * ; import java . io . * ; public class G {   public static void main ( String [ ] args ) throws Exception { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; long a = Long . parseLong ( st . nextToken ( ) ) ; long b = Long . parseLong ( st . nextToken ( ) ) ; long t = Long . parseLong ( st . nextToken ( ) ) ; int n = Integer . parseInt ( br . readLine ( ) ) ; if ( n == 0 ) { System . out . println ( a ) ; return ; } TreeMap < Long , Integer > map = new TreeMap < > ( ) ;","import java . util . * ; import java . io . * ; import java . lang . reflect . Array ;   public class codeforces { public static void main ( String [ ] args ) { InputReader in = new InputReader ( System . in ) ; PrintWriter pw = new PrintWriter ( System . out ) ;   long ts = in . nextLong ( ) ; long tf = in . nextLong ( ) ; long t = in . nextLong ( ) ; int n = in . nextInt ( ) ; long [ ] a = new long [ n + 1 ] ; long min = Long . MAX_VALUE , sum = ts , add , ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = in . nextLong ( ) ; a [ n ] = tf - t + 1 ; for ( int i = 0 ; i < n + 1 ; i ++ ) { if ( a [ i ] != 0 && sum + t <= tf ) { if ( sum - ( a [ i ] - 1 ) < min ) { add = Math . max ( 0 , sum - ( a [ i ] - 1 ) ) ; min = Math . min ( min , add ) ; ans = a [ i ] - 1 ;","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ;   public class Codeforces {   private static final Scanner sc = new Scanner ( System . in ) ; private static final BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; private static final long MOD = ( long ) ( 1e9 + 7 ) ;   public static int [ ] LPS ( String p ) { int [ ] lps = new int [ p . length ( ) ] ;   int i = 1 ; int j = 0 ; while ( i < p . length ( ) ) { if ( p . charAt ( i ) == p . charAt ( j ) ) { lps [ i ] = j + 1 ; i ++ ; j ++ ; } else { if ( j == 0 ) { lps [ i ] = 0 ; i ++ ; } else { j = lps [ j - 1 ] ; } } } return lps ; }   public static void KMP ( String text , String pattern ) { int [ ] lps = LPS ( pattern ) ; int i = 0 ; int j = 0 ; ArrayList < Integer > matches = new ArrayList < > ( ) ; while ( i < text . length ( ) ) { if ( text . charAt ( i ) == pattern . charAt ( j ) ) { i ++ ; j ++ ; } else { if ( j != 0 ) { j = lps [ j - 1 ] ; } else { i ++ ; } } if ( j == pattern . length ( ) ) { matches . add ( i - j ) ; j = lps [ j - 1 ] ; } } for ( int x : matches ) { System . out . println ( \" Match ▁ at ▁ : ▁ \" + x ) ; } }   private static class SegmentTree { private long [ ] st ; private int size ; private int n ; private long [ ] a ; SegmentTree ( long [ ] a , int n ) { this . size = 4 * n ; this . n = n ; this . a = a ; st = new long [ size ] ;"],"bleu":0.7790872728179328,"rouge_l":0.8235325506937032}
{"id":504,"predictions":["import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; }"],"references":["import java . util . Scanner ;     public class Boredom { public static void main ( final String [ ] parameters ) { Scanner input = new Scanner ( System . in ) ;   String string = input . next ( ) ; String result = \" NO \" ; boolean foundAB = false ; boolean foundBA = false ;   for ( int index = 1 ; index < string . length ( ) ; index ++ ) { if ( ! foundAB && string . charAt ( index ) == ' B ' && string . charAt ( index - 1 ) == ' A ' ) { foundAB = true ; index ++ ; } else if ( foundAB && string . charAt ( index ) == ' A ' && string . charAt ( index - 1 ) == ' B ' ) { result = \" YES \" ; break ; } }   if ( ! result . equals ( \" YES \" ) ) { for ( int index = 1 ; index < string . length ( ) ; index ++ ) { if ( ! foundBA && string . charAt ( index ) == ' A ' && string . charAt ( index - 1 ) == ' B ' ) { foundBA = true ; index ++ ; } else if ( foundBA && string . charAt ( index ) == ' B ' && string . charAt ( index - 1 ) == ' A ' ) { result = \" YES \" ; break ; } } }   System . out . println ( result ) ; } }","import java . util . Scanner ;   public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String str = sc . next ( ) ;   boolean findAB = false ; boolean findBA = false ; for ( int i = 0 ; i < str . length ( ) - 1 ; i ++ ) { if ( ! findAB && str . substring ( i , i + 2 ) . contains ( \" AB \" ) ) { findAB = true ; i ++ ; continue ; } if ( ! findBA && str . substring ( i , i + 2 ) . contains ( \" BA \" ) ) { findBA = true ; i ++ ; } }   boolean findAB2 = false ; boolean findBA2 = false ; for ( int i = str . length ( ) - 2 ; i >= 0 ; i -- ) { if ( ! findAB2 && str . substring ( i , i + 2 ) . contains ( \" AB \" ) ) { findAB2 = true ; i -- ; continue ; } if ( ! findBA2 && str . substring ( i , i + 2 ) . contains ( \" BA \" ) ) { findBA2 = true ; i -- ; } } System . out . println ( findAB && findBA || findAB2 && findBA2 ? \" YES \" : \" NO \" ) ; } }","import java . util . * ;   public class Twosubstrings {   public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; String ch = s . next ( ) ; int l1 = ch . indexOf ( \" AB \" ) ; int l2 = ch . indexOf ( \" BA \" , l1 + 2 ) ; int k1 = ch . indexOf ( \" BA \" ) ; int k2 = ch . indexOf ( \" AB \" , k1 + 2 ) ; if ( ( l1 != - 1 && l2 != - 1 ) || ( k1 != - 1 && k2 != - 1 ) ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ; } }"],"bleu":0.15844871627970708,"rouge_l":0.4046434494195688}
{"id":505,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . Scanner ;   public class LightOnNight { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ;   int n = scan . nextInt ( ) * scan . nextInt ( ) ; int count = 0 ;   for ( int i = 0 ; i < n ; i ++ ) { int sum = scan . nextInt ( ) + scan . nextInt ( ) ;   if ( sum > 0 ) count ++ ; } System . out . println ( count ) ; } }","import java . io . BufferedOutputStream ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ;   public class A595A {   public static void main ( String [ ] args ) throws IOException { A595A a = new A595A ( ) ; a . solve ( ) ; }   public void solve ( ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; BufferedOutputStream bos = new BufferedOutputStream ( new BufferedOutputStream ( System . out ) ) ;   String [ ] s = br . readLine ( ) . split ( \" ▁ \" ) ; int n = Integer . valueOf ( s [ 0 ] ) ; int m = Integer . valueOf ( s [ 1 ] ) ; int total = 0 ;   for ( int i = 0 ; i < n ; i ++ ) { String [ ] ln = br . readLine ( ) . split ( \" ▁ \" ) ; for ( int j = 0 ; j < m ; j ++ ) { if ( ln [ 2 * j ] . equals ( \"1\" ) || ln [ 2 * j + 1 ] . equals ( \"1\" ) ) { total += 1 ; } } }   bos . write ( String . valueOf ( total ) . getBytes ( ) ) ; bos . flush ( ) ; } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Arrays ; import java . util . HashMap ; import java . util . Random ; import java . util . StringTokenizer ; public class Main { public static void main ( String [ ] args ) { FastScanner fs = new FastScanner ( ) ;","import java . util . Scanner ; import java . util . StringTokenizer ;   public class Vitaly { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; StringTokenizer tokenizer = new StringTokenizer ( scanner . nextLine ( ) ) ;   int n = Integer . parseInt ( tokenizer . nextToken ( ) ) ; int m = Integer . parseInt ( tokenizer . nextToken ( ) ) ;   int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { String line = scanner . nextLine ( ) ; StringTokenizer lineTok = new StringTokenizer ( line ) ;   for ( int j = 0 ; j < m ; j ++ ) { int a = Integer . parseInt ( lineTok . nextToken ( ) ) ; int b = Integer . parseInt ( lineTok . nextToken ( ) ) ;   count += ( ( a == 0 && b == 0 ) ? 0 : 1 ) ; } }   System . out . println ( count ) ; } }"],"bleu":0.4915169111549632,"rouge_l":0.5959418837675351}
{"id":506,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; out . println ( n * ( n + 1 ) \/ 2 ) ; out . close ( ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . util . * ;   public class Main {   public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int ans = ( n \/ 2 ) * 3 ; System . out . println ( ans ) ;   } }","import java . util . * ; public class toy_army { public static void main ( String args [ ] ) { Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) ; System . out . println ( n + n \/ 2 ) ; } }","import java . util . * ; import java . util . regex . * ;   public class Solution { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; System . out . println ( ( 3 * n ) \/ 2 ) ; } }","import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scn = new Scanner ( System . in ) ; int n = scn . nextInt ( ) ; int ans = ( n \/ 2 ) * 3 ; System . out . println ( ans ) ; } }"],"bleu":0.19820062535841546,"rouge_l":0.39498706623181973}
{"id":507,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; out . println ( n ) ; out . flush ( ) ; } static int l_min ( int [ ] a ) { Arrays . sort ( a ) ; return a [ 0 ] ; } static int l_max ( int [ ] a ) { int l = a . length ; Arrays . sort ( a ) ; return a [ l - 1 ] ; } static int l_max ( int [ ] a ) { int l = a . length ; Arrays . sort ( a ) ; return a [ l - 1 ] ; } public static PrintWriter out ; public static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . util . * ; public class MyClass { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int s = 0 ; while ( n \/ 10 > 0 ) { while ( n > 0 ) { s = s + n % 10 ; n = n \/ 10 ; } n = s ; s = 0 ; } System . out . println ( n ) ; } }","import java . util . Scanner ; public class DMCA { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int sum = 0 ; while ( n \/ 10 > 0 ) { while ( n > 0 ) { int dig = n % 10 ; sum += dig ; n \/= 10 ; } n = sum ; sum = 0 ; } System . out . println ( n ) ; } }","import java . util . * ; public class root { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; long n = sc . nextLong ( ) ; System . out . println ( ( n - 1 ) % 9 + 1 ) ; } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . lang . reflect . Array ; import java . util . * ; public class Main { static class FastScanner { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( \" \" ) ; String next ( ) { while ( ! st . hasMoreTokens ( ) ) try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } int [ ] nextArray ( int n ) { int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = nextInt ( ) ; return a ; } long [ ] nextArray ( long n ) { long [ ] a = new long [ ( int ) n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = nextLong ( ) ; return a ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } } static class FastWriter extends PrintWriter { FastWriter ( ) { super ( System . out ) ; } void println ( int [ ] array ) { for ( int i = 0 ; i < array . length ; i ++ ) { print ( array [ i ] + \" ▁ \" ) ; } println ( ) ; } void println ( long [ ] array ) { for ( int i = 0 ; i < array . length ; i ++ ) { print ( array [ i ] + \" ▁ \" ) ; } println ( ) ; } } static ArrayList < Integer > list = new ArrayList < > ( ) ; public static void main ( String [ ] args ) { FastScanner in = new FastScanner ( ) ; FastWriter out = new FastWriter ( ) ; int n = in . nextInt ( ) ; while ( n >= 10 ) { int sum = 0 ; while ( n != 0 ) { sum += n % 10 ; n \/= 10 ; } n = sum ; } out . println ( n ) ; out . close ( ) ; } }","import java . util . * ; public class HelloWorld { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; while ( n >= 10 ) { n = sum ( n ) ; } System . out . println ( n ) ; } static int sum ( int n ) { int sum = 0 ; while ( n > 0 ) { sum += n % 10 ; n = n \/ 10 ; } return sum ; } }"],"bleu":0.5449129414085218,"rouge_l":0.6079414640300249}
{"id":508,"predictions":["import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;"],"references":["import java . util . * ;   public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int t = in . nextInt ( ) ; while ( t -- > 0 ) { int a = in . nextInt ( ) ; int b = in . nextInt ( ) ;   int squareSide = Math . max ( Math . max ( a , b ) , 2 * Math . min ( a , b ) ) ; System . out . println ( squareSide * squareSide ) ; } }    }     ","import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int l = 0 , h = 0 ; if ( a < b ) { l = a ; h = b ; } else { l = b ; h = a ; } long ans = 0 ; if ( 2 * l >= h ) { ans = 2 * l ; } else { ans = h ; } System . out . println ( ans * ans ) ; } } }","import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; System . out . println ( ( int ) Math . max ( Math . pow ( Math . max ( a , b ) , 2 ) , Math . pow ( 2 * Math . min ( a , b ) , 2 ) ) ) ; } } } ;","import java . util . Scanner ;   public class A1360 { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ;   int t = scanner . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int a = scanner . nextInt ( ) ; int b = scanner . nextInt ( ) ; if ( a > b ) { System . out . println ( 2 * b > a ? 2 * b * 2 * b : a * a ) ; } else { System . out . println ( 2 * a > b ? 2 * a * 2 * a : b * b ) ; } } } }","import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t > 0 ) { int a , b ; a = sc . nextInt ( ) ; b = sc . nextInt ( ) ; int min = Math . min ( a , b ) ; int max = Math . max ( a , b ) ; int area = 0 ; if ( max <= ( min * 2 ) ) { area = ( int ) Math . pow ( min * 2 , 2 ) ; } else { area = ( int ) Math . pow ( max , 2 ) ; } System . out . println ( area ) ; t -- ; } } }"],"bleu":0.06968421564849704,"rouge_l":0.25874867444326616}
{"id":509,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;    public class winner {   static class Fs { private BufferedReader reader ; private StringTokenizer stt ; public Fs ( ) { reader = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } public String nextLine ( ) { try { return reader . readLine ( ) ; } catch ( IOException e ) { return null ; } } public String nextString ( ) { while ( stt == null || ! stt . hasMoreTokens ( ) ) { stt = new StringTokenizer ( nextLine ( ) ) ; } return stt . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( nextString ( ) ) ; } public long nextLong ( ) { return Long . parseLong ( nextString ( ) ) ; } }   static Fs scan = new Fs ( ) ;   public static void main ( String [ ] args ) { int n = scan . nextInt ( ) ; long arr [ ] = new long [ n + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) { int x = scan . nextInt ( ) ; arr [ x ] = i ; } long Lside = 0 ; long Rside = 0 ; int x = scan . nextInt ( ) ; for ( int i = 0 ; i < x ; i ++ ) { int num = scan . nextInt ( ) ; long index = arr [ num ] + 1 ; Lside += index ; Rside += ( n - index ) + 1 ; } System . out . print ( Lside + \" ▁ \" + Rside ) ;   }   }","import javax . print . DocFlavor ; import javax . swing . * ; import java . awt . image . BandedSampleModel ; import java . util . * ;   public class Example { static long [ ] [ ] dp ;","import javax . print . DocFlavor ; import javax . swing . * ; import java . awt . image . BandedSampleModel ; import java . util . * ;   public class Example { static long [ ] [ ] dp ;","import javax . print . DocFlavor ; import javax . swing . * ; import java . awt . image . BandedSampleModel ; import java . util . * ;   public class Example { static long [ ] [ ] dp ;","import java . io . * ; import java . util . * ; public class MyClass { public static void main ( String args [ ] ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int n = Integer . parseInt ( br . readLine ( ) ) ; String s [ ] = br . readLine ( ) . split ( \" ▁ \" ) ; int m = Integer . parseInt ( br . readLine ( ) ) ; String str [ ] = br . readLine ( ) . split ( \" ▁ \" ) ; int arr [ ] = new int [ n + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) { int val = Integer . parseInt ( s [ i ] ) ; arr [ val ] = i + 1 ; } long sum1 = 0 ; long sum2 = 0 ; for ( int i = 0 ; i < m ; i ++ ) { int val = Integer . parseInt ( str [ i ] ) ; sum1 += arr [ val ] ; sum2 += n - arr [ val ] + 1 ; } System . out . println ( sum1 + \" ▁ \" + sum2 ) ; } }"],"bleu":0.6306828664643522,"rouge_l":0.6507487004422375}
{"id":510,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ; import java . io . * ; public class Solution { public static void main ( String [ ] args ) throws IOException {","import java . util . * ; public class Solution { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; sc . nextLine ( ) ; String [ ] names = new String [ n ] ; int [ ] freq = new int [ 26 ] ; for ( int i = 0 ; i < n ; i ++ ) { names [ i ] = sc . nextLine ( ) ; char ch = names [ i ] . charAt ( 0 ) ; freq [ ch - ' a ' ] ++ ; } int min_pairs = 0 ; for ( int i = 0 ; i < 26 ; i ++ ) { int a = freq [ i ] \/ 2 ; int b = freq [ i ] - a ; min_pairs += ( a * ( a - 1 ) \/ 2 ) ; min_pairs += ( b * ( b - 1 ) \/ 2 ) ; } System . out . println ( min_pairs ) ; } }","  import java . io . * ; import java . util . * ;    public class GFG { static class FastReader { BufferedReader br ; StringTokenizer st ; public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } static long nCr ( int n , int r ) {","import java . io . * ; import java . lang . * ; import java . util . * ;   public class A1166 { public static void main ( String [ ] args ) throws IOException { StringBuffer ans = new StringBuffer ( ) ; StringTokenizer st ; BufferedReader f = new BufferedReader ( new InputStreamReader ( System . in ) ) ; st = new StringTokenizer ( f . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; HashMap < Integer , Integer > hashMap = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { st = new StringTokenizer ( f . readLine ( ) ) ; int r = st . nextToken ( ) . charAt ( 0 ) ; if ( ! hashMap . containsKey ( r ) ) hashMap . put ( r , 0 ) ; hashMap . put ( r , hashMap . get ( r ) + 1 ) ; } f . close ( ) ; Object [ ] arr = hashMap . keySet ( ) . toArray ( ) ; long op = 0 ; int [ ] [ ] tr = new int [ 100 ] [ 3 ] ; tr [ 0 ] [ 0 ] = 1 ; for ( int i = 1 ; i < 100 ; i ++ ) { tr [ i ] [ 0 ] = tr [ i - 1 ] [ 0 ] ; tr [ i ] [ 1 ] = tr [ i - 1 ] [ 0 ] + tr [ i - 1 ] [ 1 ] ; tr [ i ] [ 2 ] = tr [ i - 1 ] [ 1 ] + tr [ i - 1 ] [ 2 ] ; }"],"bleu":0.3681055851024795,"rouge_l":0.5912200684150513}
{"id":511,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ;"],"references":["import java . util . * ; import java . io . * ; import java . math . BigInteger ; import java . text . * ; public class Main { static long mod = 1000_000_007 ; static long mod1 = 998244353 ; static boolean fileIO = false ; static boolean memory = true ; static FastScanner f ; static PrintWriter pw ; static double eps = ( double ) 1e-6 ; static FileWriter fw ; static long oo = Long . MAX_VALUE ;","import java . util . Arrays ; import java . util . Comparator ; import java . util . Scanner ;   public class FriendsParty { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ;   int n = scanner . nextInt ( ) ; int d = scanner . nextInt ( ) ;   Integer [ ] [ ] friend = new Integer [ n ] [ 2 ] ;   for ( int i = 0 ; i < n ; i ++ ) { friend [ i ] [ 0 ] = scanner . nextInt ( ) ; friend [ i ] [ 1 ] = scanner . nextInt ( ) ; }   Arrays . sort ( friend , Comparator . comparingInt ( o -> o [ 0 ] ) ) ;   long max = friend [ 0 ] [ 1 ] ; long currMax = friend [ 0 ] [ 1 ] ; int last = 0 ; for ( int i = 1 ; i < n ; i ++ ) { if ( friend [ i ] [ 0 ] - friend [ last ] [ 0 ] < d ) { currMax += friend [ i ] [ 1 ] ; } else { currMax -= friend [ last ] [ 1 ] ; last ++ ; i -- ; }   if ( currMax > max ) max = currMax ; }   System . out . println ( max ) ; } }","import java . util . Arrays ; import java . util . Comparator ; import java . util . Scanner ;   public class Solution { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; long [ ] [ ] friends = new long [ input . nextInt ( ) ] [ 2 ] ; int differenceAllowed = input . nextInt ( ) ;   for ( int index = 0 ; index < friends . length ; index ++ ) { friends [ index ] = new long [ ] { input . nextLong ( ) , input . nextLong ( ) } ; }   Arrays . sort ( friends , Comparator . comparingLong ( array -> array [ 0 ] ) ) ;   int leftIndex = 0 ; int rightIndex = 0 ; long sum = 0L ; long friendshipFactor = 0L ;   while ( rightIndex < friends . length ) { long difference = friends [ rightIndex ] [ 0 ] - friends [ leftIndex ] [ 0 ] ; sum += friends [ rightIndex ] [ 1 ] ;   while ( difference >= differenceAllowed && leftIndex <= rightIndex ) { sum -= friends [ leftIndex ++ ] [ 1 ] ; difference = friends [ rightIndex ] [ 0 ] - friends [ leftIndex ] [ 0 ] ; }   rightIndex ++ ; friendshipFactor = Math . max ( friendshipFactor , sum ) ; }   System . out . println ( friendshipFactor ) ; } }","import java . util . Arrays ; import java . util . Comparator ; import java . util . Scanner ;   public class KefaAndCompany { public static void main ( final String [ ] parameters ) { Scanner input = new Scanner ( System . in ) ; int totalIndividuals = input . nextInt ( ) ; int allowedDifference = input . nextInt ( ) ; int [ ] [ ] friends = new int [ totalIndividuals ] [ 2 ] ;   for ( int row = 0 ; row < totalIndividuals ; row ++ ) { friends [ row ] [ 0 ] = input . nextInt ( ) ; friends [ row ] [ 1 ] = input . nextInt ( ) ; }   Arrays . sort ( friends , Comparator . comparingDouble ( arrayOne -> arrayOne [ 0 ] ) ) ;   int leftIndex = 0 ; int rightIndex = 0 ; long sum = 0 ; long result = 0 ;   while ( rightIndex < friends . length ) { sum += friends [ rightIndex ] [ 1 ] ;   while ( friends [ rightIndex ] [ 0 ] - friends [ leftIndex ] [ 0 ] >= allowedDifference ) { sum -= friends [ leftIndex ] [ 1 ] ; leftIndex ++ ; }   rightIndex ++ ; result = Math . max ( result , sum ) ; }   System . out . println ( result ) ; } }"],"bleu":0.4511575595283871,"rouge_l":0.4277128547579299}
{"id":512,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ;   public class Main {   public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int a = scanner . nextInt ( ) ; int b = scanner . nextInt ( ) ;   int aWin = 0 , draw = 0 , bWin = 0 ; for ( int i = 1 ; i <= 6 ; i ++ ) { int d1 = Math . abs ( a - i ) ; int d2 = Math . abs ( b - i ) ; if ( d1 < d2 ) aWin ++ ; else if ( d2 < d1 ) bWin ++ ; else draw ++ ; } System . out . println ( aWin + \" ▁ \" + draw + \" ▁ \" + bWin ) ;   } }","  import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . Arrays ; import java . util . HashSet ; import java . util . Set ; import java . util . StringTokenizer ;   public class A { public static void main ( String [ ] args ) { FastReader ( ) ; int t = 1 ; while ( t > 0 ) { solve ( ) ; -- t ; } write . flush ( ) ; write . close ( ) ; } static void solve ( ) { int a = ni ( ) ; int b = ni ( ) ; int f = 0 , d = 0 , s = 0 ; for ( int i = 1 ; i <= 6 ; ++ i ) { if ( Math . abs ( a - i ) > Math . abs ( b - i ) ) { ++ f ; } else if ( Math . abs ( a - i ) < Math . abs ( b - i ) ) { ++ s ; } else { ++ d ; } } out ( s + \" ▁ \" + d + \" ▁ \" + f ) ; }","import java . lang . * ; import java . util . * ;    import java . io . * ;   public class _temp2 { public static void main ( String [ ] args ) throws NumberFormatException , IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; String [ ] st = br . readLine ( ) . split ( \" ▁ \" ) ; int a = Integer . parseInt ( st [ 0 ] ) ; int b = Integer . parseInt ( st [ 1 ] ) ; int p = 0 , q = 0 , r = 0 ; for ( int i = 1 ; i <= 6 ; i ++ ) { if ( Math . abs ( a - i ) < Math . abs ( b - i ) ) { p ++ ; } else if ( Math . abs ( a - i ) > Math . abs ( b - i ) ) { r ++ ; } else { q ++ ; } } System . out . println ( p + \" ▁ \" + q + \" ▁ \" + r ) ; } }","import java . util . * ; public class Solution { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int win = 0 ; int draw = 0 ; int loss = 0 ; for ( int i = 1 ; i <= 6 ; i ++ ) { if ( Math . abs ( a - i ) < Math . abs ( b - i ) ) win ++ ; else if ( Math . abs ( a - i ) == Math . abs ( b - i ) ) draw ++ ; else loss ++ ; } System . out . println ( win + \" ▁ \" + draw + \" ▁ \" + loss ) ; } }"],"bleu":0.116271229515654,"rouge_l":0.26078990228013027}
{"id":513,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . Scanner ;   public class A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; sc . nextLine ( ) ; for ( int i = 0 ; i < t ; i ++ ) { long a = sc . nextLong ( ) ;","import java . io . * ; import java . util . * ; public class Main extends PrintWriter {   private void solve ( ) { int t = sc . nextInt ( ) ; for ( int tt = 1 ; tt <= t ; tt ++ ) { long a = sc . nextLong ( ) ; long b = sc . nextLong ( ) ; long c = sc . nextLong ( ) ; long d = sc . nextLong ( ) ; long sleep = b ; long time = b ; if ( sleep < a && c - d <= 0 ) { println ( - 1 ) ; continue ; } else if ( sleep >= a ) { println ( time ) ; } else { long k = ( a - sleep + c - d - 1L ) \/ ( c - d ) ; println ( time + c * k ) ; } } }","import java . io . File ; import java . io . FileInputStream ; import java . io . FileNotFoundException ; import java . io . IOException ; import java . io . PrintWriter ; import java . security . AccessControlException ; import java . util . Arrays ; import java . util . Collection ; import java . util . List ; import java . util . Scanner ; import java . util . function . Function ; import java . util . stream . Collectors ; public class _p001354A { static public void main ( final String [ ] args ) throws IOException { p001354A . _main ( args ) ; }","import java . util . Scanner ;   public class P1354A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { long a = sc . nextLong ( ) , b = sc . nextLong ( ) , c = sc . nextLong ( ) , d = sc . nextLong ( ) ;   if ( b >= a ) { System . out . println ( b ) ; } else if ( c > d ) { long diff = c - d ; long i = ( a - b ) \/ diff ; long ans = ( a - b ) % diff == 0 ? i * c + b : ( i + 1 ) * c + b ; System . out . println ( ans ) ; } else { System . out . println ( - 1 ) ; } } } }","import java . util . * ;   public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t > 0 ) { long a = sc . nextLong ( ) ; long b = sc . nextLong ( ) ; long c = sc . nextLong ( ) ; long d = sc . nextLong ( ) ; long res = 0 ; if ( a - b <= 0 ) { System . out . println ( b ) ; } else { if ( c - d <= 0 ) { System . out . println ( \" - 1\" ) ; } else { long s = ( a - b ) \/ ( c - d ) ; double k = ( double ) ( a - b ) \/ ( c - d ) ; if ( s != k ) s ++ ; res = res + b + s * c ; System . out . println ( res ) ; } } t -- ; } } }"],"bleu":0.3820892520961716,"rouge_l":0.36573401162790703}
{"id":514,"predictions":["import java . util . * ; import java . lang . * ; import java . io . * ; public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) {"],"references":["import java . util . * ;   public class bs { static int [ ] [ ] psum ; public static void precal ( String str ) {   for ( int i = 0 ; i < str . length ( ) ; i ++ ) { char ch = str . charAt ( i ) ; psum [ i + 1 ] [ ch - ' a ' ] ++ ;   for ( int j = 0 ; j < 26 ; j ++ ) { psum [ i + 1 ] [ j ] += psum [ i ] [ j ] ; } } } public static void main ( String [ ] args ) { Scanner scn = new Scanner ( System . in ) ;","import java . io . * ; import java . util . * ;   public class roundE67B { public static void main ( String s [ ] ) throws Exception { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int n = Integer . parseInt ( br . readLine ( ) ) ; char [ ] inp = br . readLine ( ) . toCharArray ( ) ; StringBuffer sb = new StringBuffer ( ) ; ArrayList < ArrayList < Integer > > i_freq = indexLoc ( inp ) ; int m = Integer . parseInt ( br . readLine ( ) ) ; while ( m -- > 0 ) { char [ ] arr = br . readLine ( ) . toCharArray ( ) ; int [ ] n_freq = freq ( arr ) ; int max = 0 ; for ( int i = 0 ; i < 26 ; i ++ ) { if ( n_freq [ i ] > 0 ) max = Math . max ( max , ( i_freq . get ( i ) ) . get ( n_freq [ i ] - 1 ) ) ; } max ++ ; sb . append ( max + \" \\n \" ) ; } System . out . println ( sb . toString ( ) ) ; } static int [ ] freq ( char [ ] arr ) { int freq [ ] = new int [ 26 ] ; for ( int i = 0 ; i < arr . length ; i ++ ) { freq [ arr [ i ] - ' a ' ] ++ ; } return freq ; } static ArrayList < ArrayList < Integer > > indexLoc ( char [ ] arr ) { ArrayList < ArrayList < Integer > > ind = new ArrayList < > ( ) ; for ( int i = 0 ; i < 26 ; i ++ ) ind . add ( new ArrayList < Integer > ( ) ) ; for ( int i = 0 ; i < arr . length ; i ++ ) { ind . get ( arr [ i ] - ' a ' ) . add ( i ) ; } return ind ; } }"],"bleu":0.03978436072508674,"rouge_l":0.18911436055572137}
{"id":515,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . Scanner ;   public class A894 { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String word = scanner . next ( ) ; int res = 0 ; for ( int i = 0 ; i < word . length ( ) ; i ++ ) {   if ( word . charAt ( i ) == ' A ' ) { int l = 0 , r = 0 ; for ( int j = i - 1 ; j >= 0 ; j -- ) { if ( word . charAt ( j ) == ' Q ' ) l ++ ; } for ( int j = i + 1 ; j < word . length ( ) ; j ++ ) { if ( word . charAt ( j ) == ' Q ' ) r ++ ; } res += l * r ; } } System . out . println ( res ) ; } }","import java . util . * ;   public class Practice {   public static void main ( String [ ] args ) {","import java . util . Scanner ;   public class problem4qaq {   public static void main ( String [ ] args ) {","import java . util . ArrayList ; import java . util . List ; import java . util . Scanner ;   public class QAQ { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String line = scanner . nextLine ( ) ;   List < Integer > qPos = new ArrayList < > ( ) ; List < Integer > aPos = new ArrayList < > ( ) ;   for ( int i = 0 ; i < line . length ( ) ; i ++ ) { if ( line . charAt ( i ) == ' Q ' ) { qPos . add ( i ) ; } if ( line . charAt ( i ) == ' A ' ) { aPos . add ( i ) ; } }  "],"bleu":0.30311376421440933,"rouge_l":0.5392112420670898}
{"id":516,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . Scanner ;   public class B172 {   public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int A = in . nextInt ( ) ; int B = in . nextInt ( ) ; int M = in . nextInt ( ) ; int x = in . nextInt ( ) ; int [ ] seen = new int [ M ] ; int index = 1 ; while ( seen [ x ] == 0 ) { seen [ x ] = index ; index ++ ; x = ( A * x + B ) % M ; } int answer = index - seen [ x ] ; System . out . println ( answer ) ; }   }","import java . util . * ; import java . io . * ; import java . text . * ; import java . math . * ; import java . lang . Math . * ;   public class B { public static void main ( String [ ] args ) throws Exception { new B ( ) . run ( ) ; } public FastIO file = new FastIO ( ) ; public int ntc , ctc ; public final long MOD = 1000000007L ;","import java . util . * ; import java . io . * ; import java . math . * ; public class Solution { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ;","  import java . io . * ; import java . util . * ; public class B172 { public static void main ( String args [ ] ) throws IOException { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int r0 = sc . nextInt ( ) ; HashMap < Integer , Integer > map = new HashMap < > ( ) ; int x = 0 ; while ( true ) { r0 = ( a * r0 + b ) % m ; if ( map . containsKey ( r0 ) ) break ; map . put ( r0 , x ) ; x ++ ; } System . out . println ( map . size ( ) - map . get ( r0 ) ) ; }   }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . OutputStream ; import java . io . PrintWriter ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import java . util . StringTokenizer ;   public class Gym {  "],"bleu":0.5238414171990412,"rouge_l":0.49053004840010755}
{"id":517,"predictions":["import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; } public static long mod = 17352642619633L ; void run ( FastScanner in , PrintWriter out ) {"],"references":["import java . util . * ; public class drazil_date { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int x = in . nextInt ( ) ; int y = in . nextInt ( ) ; int s = in . nextInt ( ) ; int min = Math . abs ( x ) + Math . abs ( y ) ; if ( s < min || ( s - min ) % 2 != 0 ) System . out . println ( \" No \" ) ; else System . out . println ( \" Yes \" ) ; }   }","import java . util . Scanner ;   public class StupidWalker { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ;   long d = Math . abs ( scan . nextLong ( ) ) + Math . abs ( scan . nextLong ( ) ) ; long s = scan . nextLong ( ) - d ;   if ( s >= 0 && s % 2 == 0 ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ; } }","import java . util . Scanner ;   public class _0636DrazilandDate {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int distance = Math . abs ( a ) + Math . abs ( b ) ; if ( s < distance || ( distance - s ) % 2 != 0 ) { System . out . println ( \" No \" ) ; } else { System . out . println ( \" Yes \" ) ; } }   }"],"bleu":0.29433877388241364,"rouge_l":0.45674351854740586}
{"id":518,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; out . println ( n ) ; out . flush ( ) ; } static int l_min ( int [ ] a ) { Arrays . sort ( a ) ; return a [ 0 ] ; } static int l_max ( int [ ] a ) { int l = a . length ; Arrays . sort ( a ) ; return a [ l - 1 ] ; } public static PrintWriter out ; public static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } }"],"references":["import java . util . Scanner ;   public class IsYourHorseShoeOnOtherRoof {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; boolean visited [ ] = new boolean [ 4 ] ; long arr [ ] = new long [ 4 ] ; int repeated = 0 ; for ( int i = 0 ; i < 4 ; i ++ ) arr [ i ] = sc . nextLong ( ) ; for ( int i = 0 ; i < 4 ; i ++ ) { long j = arr [ i ] ; for ( int k = i + 1 ; k < 4 ; k ++ ) { if ( j == arr [ k ] && visited [ k ] == false ) { visited [ k ] = true ; repeated ++ ; } } } System . out . println ( repeated ) ; } }","import java . util . Scanner ;   public class IsYourHorseShoeOnOtherRoof {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; boolean visited [ ] = new boolean [ 4 ] ; long arr [ ] = new long [ 4 ] ; int repeated = 0 ; for ( int i = 0 ; i < 4 ; i ++ ) arr [ i ] = sc . nextLong ( ) ; for ( int i = 0 ; i < 4 ; i ++ ) { long j = arr [ i ] ; for ( int k = i + 1 ; k < 4 ; k ++ ) { if ( j == arr [ k ] && visited [ i ] == false ) { visited [ i ] = true ; repeated ++ ; } } } System . out . println ( repeated ) ; } }","import java . util . Scanner ; import java . util . Arrays ; public class Test {   public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int n = 4 ; int [ ] arr = new int [ 4 ] ; int match = 0 ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = in . nextInt ( ) ; Arrays . sort ( arr ) ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] == arr [ i - 1 ] ) ++ match ; } System . out . println ( match ) ; }   }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . ArrayList ; import java . util . HashSet ; import java . util . StringTokenizer ;   public class A_Is_your_horseshoe_on_the_other_hoof_ { public static void main ( String [ ] args ) { FastScanner fs = new FastScanner ( ) ; ArrayList < Integer > s = new ArrayList < > ( ) ;   for ( int i = 0 ; i < 4 ; i ++ ) { s . add ( fs . nextInt ( ) ) ; }   HashSet < Integer > dist = new HashSet < > ( s ) ; System . out . println ( 4 - dist . size ( ) ) ; }   static int min ( int a , int b ) { return Math . min ( a , b ) ; }   static int max ( int a , int b ) { return Math . max ( a , b ) ; }   static long min ( long a , long b ) { return Math . min ( a , b ) ; }   static long max ( long a , long b ) { return Math . max ( a , b ) ; }   static class FastScanner { BufferedReader br ; StringTokenizer st ;   public FastScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; }   String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } char nextChar ( ) { return next ( ) . charAt ( 0 ) ; }   String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"bleu":0.7382416181934528,"rouge_l":0.6730561204621176}
{"id":519,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . StringTokenizer ; import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . InputStream ;   public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; TaskA solver = new TaskA ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; }   static class TaskA { public void solve ( int testNumber , InputReader in , PrintWriter out ) { int n = in . nextInt ( ) ; String s = in . next ( ) ; int ans = 0 ; for ( int i = 3 ; i < s . length ( ) ; i ++ ) { if ( i % n == 0 && s . charAt ( i - 1 ) == s . charAt ( i - 2 ) && s . charAt ( i - 1 ) == s . charAt ( i - 3 ) ) ans ++ ; } out . println ( ans ) ; }   }   static class InputReader { private StringTokenizer tokenizer ; private BufferedReader reader ;   public InputReader ( InputStream inputStream ) { reader = new BufferedReader ( new InputStreamReader ( inputStream ) ) ; }   private void fillTokenizer ( ) { if ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } }   public String next ( ) { fillTokenizer ( ) ; return tokenizer . nextToken ( ) ; }   public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   } }  ","import java . io . BufferedReader ; import java . io . FileReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . StringTokenizer ;   public class CF_332A {   public static void main ( String [ ] args ) throws IOException { Scanner sc = new Scanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; int n = sc . nextInt ( ) ; char s [ ] = sc . nextLine ( ) . toCharArray ( ) ; int i = 0 ; int res = 0 ; while ( i < s . length ) { s [ i ] = ' x ' ; if ( i >= 3 ) { int a = 0 , b = 0 , x = 0 ; for ( int j = i - 3 ; j < i ; ++ j ) { if ( s [ j ] == ' a ' ) a ++ ; else if ( s [ j ] == ' b ' ) b ++ ; else x ++ ; } if ( a + x == 3 || b + x == 3 ) res ++ ; } i += n ; } out . println ( res ) ; out . flush ( ) ; out . close ( ) ; } static class Scanner { StringTokenizer st ; BufferedReader br ;   public Scanner ( InputStream s ) { br = new BufferedReader ( new InputStreamReader ( s ) ) ; }   public Scanner ( FileReader r ) { br = new BufferedReader ( r ) ; }   public String next ( ) throws IOException { while ( st == null || ! st . hasMoreTokens ( ) ) st = new StringTokenizer ( br . readLine ( ) ) ; return st . nextToken ( ) ; }   public int nextInt ( ) throws IOException { return Integer . parseInt ( next ( ) ) ; }   public long nextLong ( ) throws IOException { return Long . parseLong ( next ( ) ) ; }   public String nextLine ( ) throws IOException { return br . readLine ( ) ; }   public double nextDouble ( ) throws IOException { return Double . parseDouble ( next ( ) ) ; }   public boolean ready ( ) throws IOException { return br . ready ( ) ; } } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . StringTokenizer ;   public class B {   public static void main ( String [ ] args ) throws IOException { Scanner sc = new Scanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; int n = sc . nextInt ( ) ; char [ ] a = sc . next ( ) . toCharArray ( ) ; int ans = 0 ; for ( int i = 1 ; i < a . length ; i ++ ) if ( i % n == 0 && a [ i - 1 ] == a [ i - 2 ] && a [ i - 2 ] == a [ i - 3 ] ) ans ++ ; out . println ( ans ) ; out . flush ( ) ; } static class Scanner { StringTokenizer st ; BufferedReader br ;   public Scanner ( InputStream system ) { br = new BufferedReader ( new InputStreamReader ( system ) ) ; } public String next ( ) throws IOException { while ( st == null || ! st . hasMoreTokens ( ) ) st = new StringTokenizer ( br . readLine ( ) ) ; return st . nextToken ( ) ; } public String nextLine ( ) throws IOException { return br . readLine ( ) ; } public int nextInt ( ) throws IOException { return Integer . parseInt ( next ( ) ) ; } public double nextDouble ( ) throws IOException { return Double . parseDouble ( next ( ) ) ; } public char nextChar ( ) throws IOException { return next ( ) . charAt ( 0 ) ; } public Long nextLong ( ) throws IOException { return Long . parseLong ( next ( ) ) ; } public boolean ready ( ) throws IOException { return br . ready ( ) ; } public void waitForInput ( ) { for ( long i = 0 ; i < 3e9 ; i ++ ) ; } } }","import java . util . * ; import java . io . * ; public class A332 { static BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; static PrintWriter pr = new PrintWriter ( new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ) ; static StringTokenizer st ; public static void main ( String [ ] args ) throws IOException { int n = readInt ( ) ; String s = next ( ) ; int m = s . length ( ) ; if ( m < 4 ) { pr . println ( 0 ) ; } else { int count = 0 ; for ( int i = 3 ; i < m ; i ++ ) { if ( s . charAt ( i - 1 ) == s . charAt ( i - 2 ) & s . charAt ( i - 2 ) == s . charAt ( i - 3 ) & i % n == 0 ) { count ++ ; } } pr . println ( count ) ; } pr . close ( ) ; } static String next ( ) throws IOException { while ( st == null || ! st . hasMoreTokens ( ) ) st = new StringTokenizer ( br . readLine ( ) . trim ( ) ) ; return st . nextToken ( ) ; } static long readLong ( ) throws IOException { return Long . parseLong ( next ( ) ) ; } static int readInt ( ) throws IOException { return Integer . parseInt ( next ( ) ) ; } static double readDouble ( ) throws IOException { return Double . parseDouble ( next ( ) ) ; } static char readCharacter ( ) throws IOException { return next ( ) . charAt ( 0 ) ; } static String readLine ( ) throws IOException { return br . readLine ( ) . trim ( ) ; } }"],"bleu":0.004122287432241326,"rouge_l":0.17588466579292264}
{"id":520,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ; import java . lang . * ; import java . io . * ; import java . math . BigDecimal ;   public class R108C { public static void main ( String [ ] args ) throws java . lang . Exception { InputReader in = new InputReader ( System . in ) ; PrintWriter w = new PrintWriter ( System . out ) ; int n = in . nextInt ( ) , q = in . nextInt ( ) ; char [ ] ca1 = in . next ( ) . toCharArray ( ) ;   while ( q -- > 0 ) { int l = in . nextInt ( ) - 1 , r = in . nextInt ( ) - 1 ; char [ ] ca = Arrays . copyOfRange ( ca1 , 0 , n ) ; int cur = l , d = 1 ; int [ ] a = new int [ 10 ] ; int prev = - 1 ; while ( cur >= l && cur <= r ) {","import java . util . * ; import java . lang . * ; import java . io . * ; import java . math . BigDecimal ;   public class R108C { public static void main ( String [ ] args ) throws java . lang . Exception { InputReader in = new InputReader ( System . in ) ; PrintWriter w = new PrintWriter ( System . out ) ; int n = in . nextInt ( ) , q = in . nextInt ( ) ; char [ ] ca1 = in . next ( ) . toCharArray ( ) ;   while ( q -- > 0 ) { int l = in . nextInt ( ) - 1 , r = in . nextInt ( ) - 1 ; char [ ] ca = Arrays . copyOfRange ( ca1 , 0 , n ) ; int cur = l , d = 1 ; int [ ] a = new int [ 10 ] ; int prev = - 1 ; while ( cur >= l && cur <= r ) {"],"bleu":0.03526498954315968,"rouge_l":0.2700442695523857}
{"id":521,"predictions":["import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;"],"references":["import java . io . * ; import java . util . Scanner ;   public class Main {   public static void main ( String [ ] args ) { Scanner in = new Scanner ( new BufferedReader ( new InputStreamReader ( System . in ) ) ) ; PrintWriter out = new PrintWriter ( new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ) ; int n = in . nextInt ( ) , m = 0 , mx = 0 ; int [ ] digits = new int [ 10 ] ; while ( n > 0 ) { int cur = n % 10 ; mx = Math . max ( mx , cur ) ; digits [ m ++ ] = cur ; n \/= 10 ; }   out . println ( mx ) ; while ( true ) { int num = 0 ; boolean flag = false ; for ( int i = 0 , j = 1 ; i < m ; i ++ , j *= 10 ) { if ( digits [ i ] > 0 ) { flag = true ; digits [ i ] -- ; num += j ; } } if ( ! flag ) break ; out . print ( num + \" ▁ \" ) ; }   out . flush ( ) ; out . close ( ) ; in . close ( ) ; } }","import java . util . * ; import java . math . * ; import java . io . * ;  ","import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { char [ ] chs = String . format ( \" % d \" , nextInt ( ) ) . toCharArray ( ) ; int len = chs . length ; boolean isZero = false ; List < Integer > res = new ArrayList < > ( ) ; while ( ! isZero ) { int minBit = Integer . MAX_VALUE ; isZero = true ; for ( int i = 0 ; i < len ; ++ i ) { if ( chs [ i ] == '0' ) { continue ; } minBit = Math . min ( minBit , chs [ i ] - '0' ) ; isZero = false ; } int suber = 0 ; for ( int i = 0 ; i < len ; ++ i ) { if ( chs [ i ] != '0' ) { suber = suber * 10 + 1 ; chs [ i ] -= minBit ; } else { suber *= 10 ; } } if ( minBit == Integer . MAX_VALUE ) { minBit = 0 ; } for ( int i = 0 ; i < minBit ; ++ i ) { res . add ( suber ) ; } ; } out . println ( res . size ( ) ) ; for ( int v : res ) { out . print ( v + \" ▁ \" ) ; } out . flush ( ) ; } static StreamTokenizer in = new StreamTokenizer ( new BufferedReader ( new InputStreamReader ( System . in ) ) ) ; static PrintWriter out = new PrintWriter ( new OutputStreamWriter ( System . out ) ) ; static int nextInt ( ) throws IOException { in . nextToken ( ) ; return ( int ) in . nval ; } static long nextLong ( ) throws IOException { in . nextToken ( ) ; return ( long ) in . nval ; } static double nextDouble ( ) throws IOException { in . nextToken ( ) ; return in . nval ; } static String nextStr ( ) throws IOException { in . nextToken ( ) ; return in . sval ; } }","import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { char [ ] chs = String . format ( \" % d \" , nextInt ( ) ) . toCharArray ( ) ; int len = chs . length ; boolean [ ] flags = new boolean [ len ] ; boolean isZero = false ; List < Integer > res = new ArrayList < > ( ) ; while ( ! isZero ) { int minBit = Integer . MAX_VALUE ; isZero = true ; for ( int i = 0 ; i < len ; ++ i ) { if ( chs [ i ] == '0' ) { flags [ i ] = false ; continue ; } minBit = Math . min ( minBit , chs [ i ] - '0' ) ; isZero = false ; flags [ i ] = true ; } int suber = 0 ; for ( int i = 0 ; i < len ; ++ i ) { if ( flags [ i ] ) { suber = suber * 10 + 1 ; chs [ i ] -= minBit ; } else { suber *= 10 ; } } if ( minBit == Integer . MAX_VALUE ) { minBit = 0 ; } for ( int i = 0 ; i < minBit ; ++ i ) { res . add ( suber ) ; } ; } out . println ( res . size ( ) ) ; for ( int v : res ) { out . print ( v + \" ▁ \" ) ; } out . flush ( ) ; } static StreamTokenizer in = new StreamTokenizer ( new BufferedReader ( new InputStreamReader ( System . in ) ) ) ; static PrintWriter out = new PrintWriter ( new OutputStreamWriter ( System . out ) ) ; static int nextInt ( ) throws IOException { in . nextToken ( ) ; return ( int ) in . nval ; } static long nextLong ( ) throws IOException { in . nextToken ( ) ; return ( long ) in . nval ; } static double nextDouble ( ) throws IOException { in . nextToken ( ) ; return in . nval ; } static String nextStr ( ) throws IOException { in . nextToken ( ) ; return in . sval ; } }"],"bleu":0.5044949732556575,"rouge_l":0.762646662819773}
{"id":522,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . io . * ; import java . util . * ; import java . math . BigInteger ;   public class test1 { static class sort implements Comparator < int [ ] > { public int compare ( int [ ] a , int [ ] b ) {","import java . io . * ; import java . util . * ; import java . math . BigInteger ;   public class test1 { static class sort implements Comparator < int [ ] > { public int compare ( int [ ] a , int [ ] b ) {","import java . io . * ; import java . util . * ;   public class Main { public static void main ( String [ ] args ) throws IOException {","import java . io . * ; import java . util . * ; import java . math . BigInteger ;   public class test1 { static class sort implements Comparator < int [ ] > { public int compare ( int [ ] a , int [ ] b ) {"],"bleu":0.30080356658752044,"rouge_l":0.5127562306444476}
{"id":523,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . math . BigInteger ;   import java . util . * ; import javafx . util . Pair ;   public class Main {   public static void main ( String args [ ] ) { FastScanner input = new FastScanner ( ) ; String s = input . next ( ) ; int ans = 0 ; LinkedList < Character > q = new LinkedList < > ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( q . isEmpty ( ) ) { q . add ( s . charAt ( i ) ) ; } else if ( q . peekLast ( ) == ' ( ' && s . charAt ( i ) == ' ) ' ) { ans += 2 ; q . pollLast ( ) ; } else q . add ( s . charAt ( i ) ) ; } System . out . println ( ans ) ; }   static class FastScanner {   BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( \" \" ) ;   String next ( ) { while ( ! st . hasMoreTokens ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   long nextLong ( ) {   return Long . parseLong ( next ( ) ) ; }   double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; }   String nextLine ( ) throws IOException { return br . readLine ( ) ; } }   }","import java . util . Scanner ; public class RegularBracketSequence { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String value = sc . next ( ) ; char [ ] chars = value . toCharArray ( ) ; int size = chars . length ; int counter = 0 ; for ( int i = 0 ; i < chars . length ; i ++ ) { if ( chars [ i ] == ' ( ' ) { counter ++ ; } else { counter -- ; if ( counter < 0 ) { size -- ; counter = 0 ; } } } System . out . println ( size - counter ) ; } }","import java . util . Scanner ;   public class RegularBracketSequence { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String value = sc . next ( ) ; char [ ] chars = value . toCharArray ( ) ; int size = chars . length ; int counter = 0 ; for ( int i = 0 ; i < chars . length ; i ++ ) { if ( chars [ i ] == ' ( ' ) { counter ++ ; } else { counter -- ; if ( counter < 0 ) { size -- ; counter = 0 ; } } } System . out . println ( size - counter ) ; } }","import java . util . Scanner ;   public class RegularBracketSeq {  ","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . lang . reflect . Array ; import java . util . * ; public class Main { static class FastScanner { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( \" \" ) ;   String next ( ) { while ( ! st . hasMoreTokens ( ) ) try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   int [ ] nextArray ( int n ) { int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = nextInt ( ) ; return a ; } long [ ] nextArray ( long n ) { long [ ] a = new long [ ( int ) n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = nextLong ( ) ; return a ; }   long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } } static class FastWriter extends PrintWriter { FastWriter ( ) { super ( System . out ) ; } void println ( int [ ] array ) { for ( int i = 0 ; i < array . length ; i ++ ) { print ( array [ i ] + \" ▁ \" ) ; } println ( ) ; } void println ( long [ ] array ) { for ( int i = 0 ; i < array . length ; i ++ ) { print ( array [ i ] + \" ▁ \" ) ; } println ( ) ; } } public static void main ( String [ ] args ) { FastScanner in = new FastScanner ( ) ; FastWriter out = new FastWriter ( ) ;"],"bleu":0.6684316532828368,"rouge_l":0.7515400410677617}
{"id":524,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int t = 1 ;"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . Arrays ;    public class CF677BVanyaAndFoodProcessor {   static BufferedReader in = new BufferedReader ( new InputStreamReader ( System . in ) ) ; static PrintWriter out = new PrintWriter ( System . out ) ;   public static void main ( String [ ] args ) throws IOException { int [ ] l1 = readArray ( ) ; int n = l1 [ 0 ] ; int h = l1 [ 1 ] ; int k = l1 [ 2 ] ; int [ ] pieces = readArray ( ) ; long seconds = 0 ; int content = 0 ; int i = 0 ; while ( true ) { while ( i < n && content + pieces [ i ] <= h ) { content += pieces [ i ++ ] ; } if ( i == n ) { seconds += Math . ceil ( ( double ) content \/ ( double ) k ) ; break ; } else if ( content < k ) { seconds ++ ; content = 0 ; } else { seconds += ( long ) ( content \/ k ) ; content %= k ; }   }   out . println ( seconds ) ; out . close ( ) ; }   private static String read ( ) throws IOException { return in . readLine ( ) ; }   private static int readInt ( ) throws IOException { return Integer . parseInt ( in . readLine ( ) ) ; }   private static int [ ] readArray ( ) throws IOException { String [ ] line = in . readLine ( ) . split ( \" \\\\ s \" ) ; int [ ] a = Arrays . stream ( line ) . mapToInt ( Integer :: parseInt ) . toArray ( ) ; return a ; }   private static int [ ] readSortedArray ( ) throws IOException { String [ ] line = in . readLine ( ) . split ( \" \\\\ s \" ) ; int [ ] a = Arrays . stream ( line ) . mapToInt ( Integer :: parseInt ) . sorted ( ) . toArray ( ) ; return a ; } }"],"bleu":0.0011565889497907296,"rouge_l":0.15476485148514849}
{"id":525,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import javax . print . attribute . standard . PrinterMessageFromOperator ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . net . Inet4Address ; import java . util . * ; public class Main { static long dp [ ] [ ] = new long [ 300 ] [ 300 ] ;   static long ways ( int i , int n , int cuts ) { if ( i > n ) return 0 ; if ( cuts == 0 ) return 1 ; if ( dp [ i ] [ cuts ] != 0 ) return dp [ i ] [ cuts ] ; long ans = 0 ; for ( int j = i + 1 ; j < n ; j ++ ) { ans += ( ways ( j , n , cuts - 1 ) ) ; } return dp [ i ] [ cuts ] = ans ; }   public static void main ( String [ ] args ) { FastScanner sc = new FastScanner ( ) ;","import java . util . Scanner ;   public class BestSubSeg { public static void main ( String [ ] args ) {   Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) , i , m = 0 , c = 0 , l = 0 , a [ ] = new int [ n ] ;   for ( i = 0 ; i < n ; i ++ ) { int x = in . nextInt ( ) ; m = Math . max ( m , x ) ; a [ i ] = x ; } for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] == m ) { c ++ ; } else { l = Math . max ( l , c ) ; c = 0 ; } } in . close ( ) ; System . out . println ( Math . max ( l , c ) ) ; } }"],"bleu":0.07395485978258003,"rouge_l":0.3290337711069418}
{"id":526,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . lang . * ; import java . util . * ;   public class Abhishek {   public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; String s = sc . nextLine ( ) ; char [ ] arr = new char [ 4 ] ; String t = \" ! \" + s ; for ( int i = 1 ; i <= s . length ( ) ; i ++ ) { if ( t . charAt ( i ) != ' ! ' ) { arr [ i % 4 ] = t . charAt ( i ) ; } }   int r = 0 , b = 0 , y = 0 , g = 0 ; for ( int i = 1 ; i <= s . length ( ) ; i ++ ) { if ( t . charAt ( i ) == ' ! ' ) { char k = arr [ i % 4 ] ; switch ( k ) { case ' Y ' : y ++ ; break ; case ' B ' : b ++ ; break ; case ' R ' : r ++ ; break ; case ' G ' : g ++ ; break ; } } } System . out . println ( r + \" ▁ \" + b + \" ▁ \" + y + \" ▁ \" + g ) ; } }","import java . util . Scanner ; import java . util . Arrays ; import java . util . Vector ; import java . util . Collections ;    public class Problem_Solving1 { public static void main ( String [ ] args ) {","import java . io . * ; import java . util . * ;   public class Solution { public static void main ( String [ ] args ) throws Exception { char [ ] garland = in . readLine ( ) . toCharArray ( ) ;","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . * ;   public class Codeforces {   private static final Scanner sc = new Scanner ( System . in ) ; private static final BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; private static final long MOD = ( long ) ( 1e9 + 7 ) ; private static PrintWriter out = new PrintWriter ( System . out ) ;     public static void solve ( int T ) throws IOException { String s = sc . next ( ) ; Map < Character , Integer > order = new HashMap < > ( ) ; int [ ] a = new int [ 4 ] ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == ' ! ' ) a [ i % 4 ] ++ ; else order . put ( s . charAt ( i ) , i % 4 ) ; } char [ ] b = { ' R ' , ' B ' , ' Y ' , ' G ' } ; for ( char c : b ) System . out . print ( a [ order . get ( c ) ] + \" ▁ \" ) ; System . out . println ( ) ; } public static void main ( String [ ] args ) throws IOException { int t = 1 ;"],"bleu":0.6198459069873937,"rouge_l":0.6794554455445545}
{"id":527,"predictions":["import java . io . * ; import java . util . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) throws java . lang . Exception { Reader pm = new Reader ( ) ;"],"references":["import java . util . * ; import java . math . * ; public class AlyonaAndNumbers { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; long out = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { long num = i + m ; out += ( long ) num \/ 5 - i \/ 5 ; } System . out . println ( out ) ; } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;   public class AlyonaAndNumbers { public static void main ( String [ ] args ) { FastReader fs = new FastReader ( ) ; StringBuilder sb = new StringBuilder ( ) ; int n = fs . nextInt ( ) ; int m = fs . nextInt ( ) ; long result = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { result += ( i + m ) \/ 5 - i \/ 5 ; } System . out . println ( result ) ; }   static class FastReader { BufferedReader br ; StringTokenizer st ; public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; }   String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   long nextLong ( ) { return Long . parseLong ( next ( ) ) ; }   double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; }   float nextFloat ( ) { return Float . parseFloat ( next ( ) ) ; } } }","import java . util . Scanner ;   public class AlyonaandNumbers {   public static void main ( String args [ ] ) { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; long m = scan . nextInt ( ) ; long [ ] a = new long [ 5 ] ;   a [ 0 ] = n \/ 5 ; a [ 1 ] = ( n + 4 ) \/ 5 ; a [ 2 ] = ( n + 3 ) \/ 5 ; a [ 3 ] = ( n + 2 ) \/ 5 ; a [ 4 ] = ( n + 1 ) \/ 5 ; long [ ] b = new long [ 5 ] ;   b [ 0 ] = m \/ 5 ; b [ 1 ] = ( m + 4 ) \/ 5 ; b [ 2 ] = ( m + 3 ) \/ 5 ; b [ 3 ] = ( m + 2 ) \/ 5 ; b [ 4 ] = ( m + 1 ) \/ 5 ; long res = ( a [ 1 ] * b [ 4 ] ) + ( a [ 2 ] * b [ 3 ] ) + ( a [ 3 ] * b [ 2 ] ) + ( a [ 4 ] * b [ 1 ] + ( a [ 0 ] * b [ 0 ] ) ) ; System . out . println ( res ) ; }   }"],"bleu":0.1978412872584207,"rouge_l":0.4059782033647233}
{"id":528,"predictions":["import java . io . * ; import java . util . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) throws java . lang . Exception { Reader pm = new Reader ( ) ;"],"references":["import java . io . BufferedReader ; import java . io . InputStreamReader ;   public class SherlockAndGF { static int n = 1000000 ;   static int [ ] sieve = new int [ n + 1 ] ;   static void createSieve ( ) { sieve [ 0 ] = sieve [ 1 ] = 0 ; for ( int i = 2 ; i <= n ; i ++ ) { sieve [ i ] = 1 ; } for ( int i = 2 ; i * i <= n ; i ++ ) { if ( sieve [ i ] == 1 ) { for ( int j = i * i ; j <= n ; j = j + i ) { sieve [ j ] = 0 ; } } } } public static void main ( String [ ] args ) { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; try { StringBuilder sb = new StringBuilder ( ) ; createSieve ( ) ; int X = Integer . parseInt ( br . readLine ( ) . trim ( ) ) ; int nonPrime = 0 ; int prime = 0 ; for ( int i = 2 ; i <= X + 1 ; i ++ ) { if ( sieve [ i ] == 1 ) { prime ++ ; } else { nonPrime ++ ; } } if ( nonPrime == 0 ) { System . out . println ( 1 ) ; } else { System . out . println ( 2 ) ; } for ( int i = 2 ; i <= X + 1 ; i ++ ) { if ( sieve [ i ] == 1 ) { System . out . print ( 1 + \" ▁ \" ) ; } else { System . out . print ( 2 + \" ▁ \" ) ; } } } catch ( Exception e ) { e . printStackTrace ( ) ; }   }   }","import java . util . Scanner ;    public class Main {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] price = new int [ 100010 ] ; for ( int i = 0 ; i < price . length ; i ++ ) { price [ i ] = 0 ; }   int n = sc . nextInt ( ) ; for ( int i = 2 ; i <= n + 1 ; i ++ ) { for ( int p = 2 * i ; p <= n + 1 ; p += i ) { price [ p ] = 1 ; } } if ( n <= 2 ) { System . out . println ( \"1\" ) ; for ( int i = 1 ; i <= n ; i ++ ) { System . out . print ( \"1 ▁ \" ) ; } System . out . println ( ) ; } else { System . out . println ( \"2\" ) ; for ( int i = 1 ; i <= n ; i ++ ) { if ( price [ i + 1 ] == 1 ) { System . out . print ( \"1 ▁ \" ) ; } else { System . out . print ( \"2 ▁ \" ) ; } } System . out . println ( ) ; } } }","  import java . util . * ; import java . lang . * ; import java . io . * ;   public class Codechef { public static void main ( String [ ] args ) throws java . lang . Exception { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; int [ ] primes = new int [ n + 3 ] ; for ( int i = 2 ; i < n + 3 ; i ++ ) primes [ i ] = 1 ; for ( int i = 2 ; i <= Math . sqrt ( n + 2 ) ; i ++ ) { if ( primes [ i ] == 1 ) { int k = i ; while ( i * k <= n + 2 ) { primes [ i * k ] = 2 ; k ++ ; } } } int count = 0 ; for ( int i = 2 ; i < n + 2 ; i ++ ) { if ( primes [ i ] == 2 ) { count ++ ; break ; } } if ( count > 0 ) System . out . println ( 2 ) ; else System . out . println ( 1 ) ; for ( int i = 2 ; i < n + 2 ; i ++ ) System . out . print ( primes [ i ] + \" ▁ \" ) ; } }","import java . util . Scanner ;   public class Main {   public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) ; if ( n <= 2 ) System . out . println ( \"1\" ) ; else System . out . println ( \"2\" ) ;   for ( int i = 2 ; i <= n + 1 ; i ++ ) { if ( ! prime ( i ) ) { System . out . print ( \"2 ▁ \" ) ; } else System . out . print ( \"1 ▁ \" ) ; } } static boolean prime ( int n ) { int i ; for ( i = 2 ; i <= ( int ) Math . sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) return false ; } return true ; } }","import java . util . * ; public class Solution { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long n = sc . nextLong ( ) ; if ( n == 1 ) { System . out . println ( 1 ) ; System . out . println ( 1 ) ; } else if ( n == 2 ) { System . out . println ( 1 ) ; System . out . println ( 1 + \" ▁ \" + 1 ) ; } else { long [ ] prices = new long [ ( int ) n + 2 ] ;"],"bleu":0.20864721676301318,"rouge_l":0.33503640311661764}
{"id":529,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . Scanner ;   public class LocalExtrema { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int count = 0 ; int n1 [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { n1 [ i ] = sc . nextInt ( ) ; } for ( int i = 1 ; i < n - 1 ; i ++ ) { if ( n1 [ i ] < n1 [ i - 1 ] && n1 [ i ] < n1 [ i + 1 ] || n1 [ i ] > n1 [ i - 1 ] && n1 [ i ] > n1 [ i + 1 ] ) count ++ ; } System . out . println ( count ) ; } }","import java . util . * ; public class Main { public static void main ( String [ ] args ) { int count = 0 ; Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; if ( n >= 1 && n <= 1000 ) { int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = scan . nextInt ( ) ; if ( a [ i ] <= 1 && a [ i ] >= 1000 ) break ; } for ( int i = 1 ; i < n - 1 ; i ++ ) { if ( a [ i ] < a [ i - 1 ] && a [ i ] < a [ i + 1 ] ) count ++ ; else if ( a [ i ] > a [ i - 1 ] && a [ i ] > a [ i + 1 ] ) count ++ ; } System . out . println ( count ) ; } } }","import java . util . Scanner ;   public class LocalExtrema { public static void main ( String [ ] args ) {   Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) , a [ ] = new int [ n ] , i , c = 0 ;   for ( i = 0 ; i < n ; i ++ ) { a [ i ] = in . nextInt ( ) ; } for ( i = 1 ; i < n - 1 ; i ++ ) { if ( ( a [ i ] > a [ i - 1 ] && a [ i ] > a [ i + 1 ] ) || ( a [ i ] < a [ i - 1 ] && a [ i ] < a [ i + 1 ] ) ) { c ++ ; } } in . close ( ) ; System . out . println ( c ) ; } }","import java . util . Scanner ;   public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int [ ] a = new int [ n ] ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = scanner . nextInt ( ) ; } for ( int i = 1 ; i < n - 1 ; i ++ ) { if ( ( a [ i ] > a [ i - 1 ] && a [ i ] > a [ i + 1 ] ) || ( a [ i ] < a [ i - 1 ] && a [ i ] < a [ i + 1 ] ) ) { ans ++ ; } } System . out . println ( ans ) ; } }  "],"bleu":0.030965593282773665,"rouge_l":0.17485044865403787}
{"id":530,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException {"],"references":["import java . util . Scanner ;   public class RobotTask { public static int testCase ( int n , int a [ ] ) { int collected = 0 ; int direction = - 1 ; boolean b [ ] = new boolean [ a . length ] ; while ( collected < n ) { for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] <= collected && b [ i ] != true ) { collected ++ ; b [ i ] = true ; } if ( i == n - 1 ) { direction ++ ; } } if ( collected != n ) for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( a [ i ] <= collected && b [ i ] != true ) { collected ++ ; b [ i ] = true ; } if ( i == 0 ) { direction ++ ; } } } return direction ; } public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } System . out . println ( testCase ( n , a ) ) ; } }","import java . util . Scanner ;   public class RobotTask { public static int testCase ( int n , int a [ ] ) { int collected = 0 ; int direction = - 1 ; boolean b [ ] = new boolean [ a . length ] ; while ( collected < n ) { for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] <= collected && b [ i ] != true ) { collected ++ ; b [ i ] = true ; } if ( i == n - 1 ) { direction ++ ; if ( collected == n ) return direction ; } } for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( a [ i ] <= collected && b [ i ] != true ) { collected ++ ; b [ i ] = true ; } if ( i == 0 ) { direction ++ ; if ( collected == n ) return direction ; } } } return direction ; } public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } System . out . println ( testCase ( n , a ) ) ; } }","import java . util . * ; import java . util . stream . IntStream ;   public class Main {   public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = input . nextInt ( ) ; } int visited = 0 ; int i = 0 ; int count = 0 ; int temp = 0 ; int extra = 1 ; int data = 0 ; while ( visited < n ) { if ( i == - 1 ) { extra = 1 ; i = 0 ; count ++ ; } else if ( i == n ) { extra = - 1 ; i = n - 1 ; count ++ ; } if ( data >= a [ i ] ) { a [ i ] = Integer . MAX_VALUE ; data ++ ; visited ++ ; } i += extra ; } System . out . println ( count ) ; } }","import java . util . Scanner ;   public class RobotTask { public static void main ( String [ ] args ) {   Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) , i , c = 0 , a [ ] = new int [ n ] , o = - 1 ;   for ( i = 0 ; i < n ; i ++ ) a [ i ] = in . nextInt ( ) ; in . close ( ) ;   while ( c < n ) { o ++ ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] <= c ) { a [ i ] = 1001 ; c ++ ; } } if ( c < n ) { o ++ ; for ( i = n - 1 ; i >= 0 ; i -- ) { if ( a [ i ] <= c ) { a [ i ] = 1001 ; c ++ ; } } } } System . out . println ( o ) ; } }"],"bleu":0.0032816507160295222,"rouge_l":0.19507284140708278}
{"id":531,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ; public class java1 { public static void main ( String [ ] agrs ) { int [ ] t = new int [ 2 ] ; t [ 0 ] = 0 ; t [ 1 ] = 0 ; Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) ; for ( int i = 1 ; i <= n ; i ++ ) t [ in . nextInt ( ) ] = i ; System . out . println ( t [ 0 ] < t [ 1 ] ? t [ 0 ] : t [ 1 ] ) ; } }","import java . io . * ; import java . math . BigInteger ; import java . util . * ; public class C { static BufferedReader br ; static PrintWriter pr ; static int cin ( ) throws Exception { return Integer . valueOf ( br . readLine ( ) ) ; } static int [ ] split ( ) throws Exception { String [ ] cmd = br . readLine ( ) . split ( \" ▁ \" ) ; int [ ] ans = new int [ cmd . length ] ; for ( int i = 0 ; i < cmd . length ; i ++ ) { ans [ i ] = Integer . valueOf ( cmd [ i ] ) ; } return ans ; } static long [ ] splitL ( ) throws IOException { String [ ] cmd = br . readLine ( ) . split ( \" ▁ \" ) ; long [ ] ans = new long [ cmd . length ] ; for ( int i = 0 ; i < cmd . length ; i ++ ) { ans [ i ] = Long . valueOf ( cmd [ i ] ) ; } return ans ; } static long p = 1000000007 ; static long power ( long x , long y ) { long res = 1 ; x = x % p ; if ( x == 0 ) return 0 ; while ( y > 0 ) { if ( ( y & 1 ) == 1 ) res = ( res * x ) % p ; y = y >> 1 ; x = ( x * x ) % p ; } return res ; } public static void main ( String [ ] args ) throws Exception {","import java . io . FileInputStream ; import java . io . FileNotFoundException ; import java . io . IOException ; import java . io . PrintWriter ; import java . util . Arrays ; import java . util . List ; import java . util . Scanner ; import java . util . stream . Collectors ; public class _p001143A { static public void main ( final String [ ] args ) throws IOException { p001143A . _main ( args ) ; }","import java . util . Scanner ;   public class Problem38 {   public static void main ( String [ ] args ) {"],"bleu":0.5548581090137993,"rouge_l":0.5501002004008017}
{"id":532,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . Arrays ; import java . util . Scanner ;   public class Bookshelf { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int testcases = sc . nextInt ( ) ; sc . nextLine ( ) ;   for ( int i = 0 ; i < testcases ; i ++ ) { int n = sc . nextInt ( ) ; sc . nextLine ( ) ; String array = sc . nextLine ( ) ; int [ ] stream = Arrays . stream ( array . split ( \" ▁ \" ) ) . mapToInt ( Integer :: parseInt ) . toArray ( ) ; output ( n , stream ) ; } }   private static void output ( int n , int [ ] stream ) { int first = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( stream [ i ] == 1 ) { first = i ; i = n ; } } int last = - 1 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( stream [ i ] == 1 ) { last = i ; i = 0 ; } } int count = 0 ; if ( first == last ) { count = 0 ; } else { for ( int i = first ; i < last ; i ++ ) if ( stream [ i ] == 0 ) count ++ ; } System . out . println ( count ) ; } }","import java . util . * ; public class HelloWorld {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int a [ ] = new int [ n ] ;   int z = 0 , y = 0 ; boolean one = false ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == 1 ) { y = i ; break ; } }   for ( int i = n - 1 ; i > 0 ; i -- ) { if ( a [ i ] == 1 ) { z = i ; break ; } } int c = 0 ; for ( int i = y ; i <= z ; i ++ ) { if ( a [ i ] == 0 ) c ++ ; }","import java . util . Scanner ;   public class B1433 {   public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int T = in . nextInt ( ) ; for ( int t = 0 ; t < T ; t ++ ) { int N = in . nextInt ( ) ; int first = - 1 ; int last = - 1 ; int count = 0 ; for ( int n = 0 ; n < N ; n ++ ) { int a = in . nextInt ( ) ; if ( a == 1 ) { if ( first == - 1 ) { first = n ; } last = n ; count ++ ; } } int answer = last - first + 1 - count ; System . out . println ( answer ) ; } }   }","import java . util . Scanner ;   public class YetAnotherBookSelf { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int testCases = sc . nextInt ( ) ; while ( testCases > 0 ) { int size = sc . nextInt ( ) ; int [ ] arr = new int [ size ] ; for ( int i = 0 ; i < size ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } System . out . println ( bookSelfSolutions ( arr , size ) ) ; testCases -- ; } }   private static int bookSelfSolutions ( int [ ] arr , int length ) { int begin = - 1 , end = - 1 , result = 0 ; for ( int i = 0 ; i < length ; i ++ ) { if ( arr [ i ] == 1 ) { if ( begin == - 1 ) { begin = i ; } end = i ; } } if ( begin == end ) { return 0 ; } for ( int i = begin + 1 ; i < end ; i ++ ) { if ( arr [ i ] == 0 ) result ++ ; } return result ; } }"],"bleu":0.043271766542834364,"rouge_l":0.19466007762794604}
{"id":533,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . io . * ; import java . util . * ; public class Practice1 { public static void main ( String args [ ] ) { FastReader input = new FastReader ( ) ; PrintWriter out = new PrintWriter ( System . out ) ; int T = input . nextInt ( ) ; while ( T -- > 0 ) { long a = input . nextInt ( ) ; long b = input . nextInt ( ) ; long p = a * b ; long c = ( long ) Math . cbrt ( p ) ; long p1 = ( c * c * c ) ; if ( p1 != p ) { out . println ( \" NO \" ) ; } else { if ( a % c == 0 && b % c == 0 ) { out . println ( \" YES \" ) ; } else { out . println ( \" NO \" ) ; } } } out . close ( ) ; } static class FastReader { BufferedReader br ; StringTokenizer st ;   public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; }   String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   long nextLong ( ) {   return Long . parseLong ( next ( ) ) ; }   double nextDouble ( ) {   return Double . parseDouble ( next ( ) ) ; }   String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }","import java . io . * ; import java . util . * ; import static java . lang . Math . cbrt ;   public class TestTemplate { void solve ( int T , FastScanner fs ) { long a = fs . nextInt ( ) ; long b = fs . nextInt ( ) ; if ( a == 1 && b == 1 ) { out . println ( \" yes \" ) ; return ; } if ( a == 1 || b == 1 ) { out . println ( \" no \" ) ; return ; } double ab = a * b ; double res = cbrt ( ab ) ; int int_part = ( int ) res ; if ( res - int_part > 0 ) { out . println ( \" no \" ) ; return ; } if ( a % int_part != 0 || b % int_part != 0 ) { out . println ( \" no \" ) ; } else { out . println ( \" yes \" ) ; } } static PrintWriter out = new PrintWriter ( System . out ) ; void go ( ) { FastScanner fs = new FastScanner ( ) ; int t = fs . nextInt ( ) ; for ( int i = 1 ; i <= t ; i ++ ) { solve ( i , fs ) ; } out . flush ( ) ; } static class FastScanner { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( \" \" ) ; String next ( ) { while ( ! st . hasMoreTokens ( ) ) try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } } public static void main ( String [ ] args ) { new TestTemplate ( ) . go ( ) ; } }","import java . io . * ; import java . util . * ; import java . lang . * ; import java . math . * ; import java . text . DecimalFormat ; import java . lang . reflect . Array ; import java . io . BufferedOutputStream ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . math . BigDecimal ; public class Codeforces { public static PrintWriter out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; static long MOD = ( long ) ( 1e9 + 7 ) ; static long MOD2 = MOD * MOD ;","# include < iostream > # include < vector > # include < queue > # include < cstring > # include < cmath > # include < map > # include < set > # include < cstdio > # include < algorithm > # define debug ( a ) cout << # a << \" = \" << a << endl ; using namespace std ; const int maxn = 1e5 ; typedef long long LL ; inline LL read ( ) { LL x = 0 , f = 1 ; char ch = getchar ( ) ; while ( ! isdigit ( ch ) ) { if ( ch == ' - ' ) f = - 1 ; ch = getchar ( ) ; } while ( isdigit ( ch ) ) { x = x * 10 + ch - 48 ; ch = getchar ( ) ; } return x * f ; } int main ( void ) { cin . tie ( 0 ) ; std :: ios :: sync_with_stdio ( false ) ; LL t ; cin >> t ; while ( t -- ) { LL a , b ; cin >> a >> b ; LL mul = a * b ; LL m = pow ( mul , 1.0 \/ 3 ) + 0.5 ; if ( m * m * m == a * b && a % m == 0 && b % m == 0 ) { cout << \" Yes \" << \" \\n \" ; } else cout << \" No \" << \" \\n \" ; } return 0 ; }"],"bleu":0.1951954029273904,"rouge_l":0.38581890812250325}
{"id":534,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . * ; public class C { static class FastScanner { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( \" \" ) ;   String next ( ) { while ( ! st . hasMoreTokens ( ) ) try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   int [ ] nextArray ( int n ) { int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = nextInt ( ) ; return a ; }   long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } } static class FastWriter extends PrintWriter { FastWriter ( ) { super ( System . out ) ; }   void println ( int [ ] array ) { for ( int i = 0 ; i < array . length ; i ++ ) { print ( array [ i ] + \" ▁ \" ) ; } println ( ) ; }   void println ( long [ ] array ) { for ( int i = 0 ; i < array . length ; i ++ ) { print ( array [ i ] + \" ▁ \" ) ; } println ( ) ; } } public static void main ( String [ ] args ) {","import java . util . * ;   public class P3 { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s [ ] = new String [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { s [ i ] = sc . next ( ) ; } boolean sym = true ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( s [ i ] . charAt ( j ) != s [ 2 - i ] . charAt ( 2 - j ) ) { sym = false ; break ; } } if ( ! sym ) break ; } if ( sym ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ; } }","import java . util . * ; public class Main {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ;   String r1 = sc . next ( ) ; String r2 = sc . next ( ) ; String r3 = sc . next ( ) ; boolean fg = true ; if ( r1 . charAt ( 1 ) != r3 . charAt ( 1 ) ) { fg = false ; } if ( r2 . charAt ( 0 ) != r2 . charAt ( 2 ) ) { fg = false ; } if ( r1 . charAt ( 0 ) != r3 . charAt ( 2 ) ) { fg = false ; } if ( r1 . charAt ( 2 ) != r3 . charAt ( 0 ) ) { fg = false ; } if ( fg ) { System . out . println ( \" YES \" ) ; } else { System . out . println ( \" NO \" ) ; } } }"],"bleu":0.07067884921364936,"rouge_l":0.2065886699507389}
{"id":535,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ;"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . Random ; import java . util . StringTokenizer ;   public class Main implements Runnable {   long INF = ( long ) 1e9 + 9 ;   private void solve ( ) throws IOException { int n = nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; ++ i ) { a [ i ] = nextInt ( ) ; }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . StringTokenizer ;   public class WorkFile { public static void main ( String [ ] args ) throws IOException { BufferedReader reader = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int n = Integer . parseInt ( reader . readLine ( ) ) ; StringTokenizer sToken = new StringTokenizer ( reader . readLine ( ) ) ; int [ ] [ ] pyramid = new int [ n ] [ n ] ; int [ ] [ ] res = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { int x = Integer . parseInt ( sToken . nextToken ( ) ) ; pyramid [ 0 ] [ i ] = x ; res [ 0 ] [ i ] = x ; } int length = n ; for ( int i = 1 ; i < n ; i ++ ) { length -- ; for ( int j = 0 ; j < length ; j ++ ) { int x = pyramid [ i - 1 ] [ j ] ^ pyramid [ i - 1 ] [ j + 1 ] ; pyramid [ i ] [ j ] = x ; res [ i ] [ j ] = Math . max ( x , Math . max ( res [ i - 1 ] [ j ] , res [ i - 1 ] [ j + 1 ] ) ) ; } } int q = Integer . parseInt ( reader . readLine ( ) ) ; StringBuilder ans = new StringBuilder ( ) ; while ( q -- > 0 ) { sToken = new StringTokenizer ( reader . readLine ( ) ) ; int l = Integer . parseInt ( sToken . nextToken ( ) ) - 1 ; int r = Integer . parseInt ( sToken . nextToken ( ) ) - 1 ; ans . append ( res [ r - l ] [ l ] ) . append ( \" \\n \" ) ; } PrintWriter writer = new PrintWriter ( System . out ) ; writer . print ( ans ) ; writer . close ( ) ; } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . StringTokenizer ;   public class WorkFile { public static void main ( String [ ] args ) throws IOException { BufferedReader reader = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int n = Integer . parseInt ( reader . readLine ( ) ) ; StringTokenizer sToken = new StringTokenizer ( reader . readLine ( ) ) ; long [ ] [ ] pyramid = new long [ n ] [ n ] ; long [ ] [ ] res = new long [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { long x = Integer . parseInt ( sToken . nextToken ( ) ) ; pyramid [ 0 ] [ i ] = x ; res [ 0 ] [ i ] = x ; } int length = n ; for ( int i = 1 ; i < n ; i ++ ) { length -- ; for ( int j = 0 ; j < length ; j ++ ) { long x = pyramid [ i - 1 ] [ j ] ^ pyramid [ i - 1 ] [ j + 1 ] ; pyramid [ i ] [ j ] = x ; res [ i ] [ j ] = Math . max ( x , Math . max ( res [ i - 1 ] [ j ] , res [ i - 1 ] [ j + 1 ] ) ) ; } } int q = Integer . parseInt ( reader . readLine ( ) ) ; StringBuilder ans = new StringBuilder ( ) ; while ( q -- > 0 ) { sToken = new StringTokenizer ( reader . readLine ( ) ) ; int l = Integer . parseInt ( sToken . nextToken ( ) ) - 1 ; int r = Integer . parseInt ( sToken . nextToken ( ) ) - 1 ; ans . append ( res [ r - l ] [ l ] ) . append ( \" \\n \" ) ; } PrintWriter writer = new PrintWriter ( System . out ) ; writer . print ( ans ) ; writer . close ( ) ; } }"],"bleu":0.26228175163770173,"rouge_l":0.4053071882380334}
{"id":536,"predictions":["import java . io . * ; import java . util . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) throws java . lang . Exception { Reader pm = new Reader ( ) ;"],"references":["import java . lang . * ; import java . util . * ; import java . util . stream . Collectors ; import java . io . * ; public class Cat_Furrier { public static void main ( String [ ] args ) {","import java . util . * ;   public class Main {   public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; int m = input . nextInt ( ) ; long time = 0 ; ArrayList < Long > a = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int c = input . nextInt ( ) ; int t = input . nextInt ( ) ; time += c * t ; a . add ( time ) ;   }","import java . util . Scanner ;   public class Playlist { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ;   int n = scan . nextInt ( ) ; int m = scan . nextInt ( ) ; Integer [ ] duration = new Integer [ n + 1 ] ; duration [ 0 ] = 0 ;   for ( int i = 1 ; i < n + 1 ; i ++ ) { duration [ i ] = duration [ i - 1 ] + scan . nextInt ( ) * scan . nextInt ( ) ; }   int current = 1 ; StringBuilder ans = new StringBuilder ( ) ;   for ( int i = 0 ; i < m ; i ++ ) { int v = scan . nextInt ( ) ; for ( int j = current ; j < n + 1 ; j ++ ) { if ( duration [ j ] >= v ) { ans . append ( j + \" \\n \" ) ; current = j ; break ; } } } System . out . println ( ans ) ; } }","import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;   public class Eugeny_PlayList { static class FastReader { BufferedReader br ; StringTokenizer st ;   public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; }   String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( Exception e ) {   e . printStackTrace ( ) ; }   } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } return str ; }   long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } } public static void main ( String [ ] args ) { FastReader in = new FastReader ( ) ; int n = in . nextInt ( ) ; int m = in . nextInt ( ) ; long arr [ ] = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { int c = in . nextInt ( ) ; int t = in . nextInt ( ) ; arr [ i ] = c * t ; } for ( int i = 1 ; i < n ; i ++ ) { arr [ i ] += arr [ i - 1 ] ; } for ( int i = 0 ; i < m ; i ++ ) { long val = in . nextLong ( ) ; System . out . println ( Lower_bound ( arr , val , n ) ) ; } }   static int Lower_bound ( long arr [ ] , long val , int n ) { int l = 0 ; int r = n - 1 ; int ans = 0 ; while ( l <= r ) { int mid = ( l + r ) \/ 2 ; if ( arr [ mid ] >= val ) { r = mid - 1 ; ans = mid ; } else { l = mid + 1 ; } } return ++ ans ; } }"],"bleu":0.7432095441717863,"rouge_l":0.7278095811991563}
{"id":537,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int t = 1 ;"],"references":["import java . util . * ; import java . io . * ;   public class solution { public static void main ( String args [ ] ) { Scanner s = new Scanner ( System . in ) ; int n = s . nextInt ( ) , k = s . nextInt ( ) ; int freq [ ] = new int [ k + 1 ] ; for ( int i = 0 ; i <= k ; i ++ ) freq [ i ] = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int temp = s . nextInt ( ) ; freq [ temp ] ++ ; } int cnt = 0 , ans = 0 ; int ava = ( int ) Math . ceil ( ( double ) n \/ 2 ) ; for ( int i = 1 ; i <= k ; i ++ ) { if ( ( freq [ i ] & 1 ) == 0 ) ans += freq [ i ] ; else { ans += freq [ i ] - 1 ; cnt ++ ; } } ans = ans + ( int ) Math . ceil ( ( double ) cnt \/ 2 ) ; System . out . println ( ans ) ;    } }","  import java . util . * ; import java . lang . * ; import java . io . * ;   public class Codechef { public static void main ( String [ ] args ) throws java . lang . Exception { BufferedReader bf = new BufferedReader ( new InputStreamReader ( System . in ) ) ; String [ ] s1 = bf . readLine ( ) . split ( \" ▁ \" ) ; int available = 0 ; int count = 0 ; int n = Integer . parseInt ( s1 [ 0 ] ) ; if ( n % 2 == 0 ) available = n \/ 2 ; else available = 1 + n \/ 2 ; int k = Integer . parseInt ( s1 [ 1 ] ) ; int a [ ] = new int [ n ] ; int b [ ] = new int [ k + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = Integer . parseInt ( bf . readLine ( ) ) ; b [ a [ i ] ] ++ ; }","import java . util . * ; import java . io . * ;   public class A1195 { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ;","import java . io . BufferedOutputStream ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . OutputStream ; import java . util . Arrays ; import java . util . Comparator ; import java . util . HashMap ; import java . util . SortedSet ; import java . util . StringTokenizer ; import java . util . TreeSet ;   import org . omg . PortableInterceptor . INACTIVE ;   public class Main {   public static void main ( String [ ] args ) throws IOException {","import java . io . * ; import java . math . * ; import java . util . * ; import java . util . Arrays ; public class Test1 { public static void main ( String args [ ] ) throws IOException { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int type [ ] = new int [ k ] ; int i , res = 0 ; int c = ( int ) Math . round ( n \/ 2.0 ) ; for ( i = 0 ; i < n ; i ++ ) { int temp = sc . nextInt ( ) ; type [ temp - 1 ] += 1 ; } for ( i = 0 ; i < k ; i ++ ) { if ( type [ i ] >= 2 ) { res += ( ( type [ i ] \/ 2 ) * 2 ) ; c -= ( type [ i ] \/ 2 ) ; type [ i ] %= 2 ; } } res += c ; System . out . println ( res ) ; } }"],"bleu":0.6629954557688612,"rouge_l":0.707002755714054}
{"id":538,"predictions":["import java . io . * ; import java . util . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) throws java . lang . Exception { Reader pm = new Reader ( ) ;"],"references":["import java . util . * ; import java . io . * ; import java . math . * ;   public class Practice   { static FastReader sc = new FastReader ( ) ; public static void main ( String [ ] args ) { int ttt = 1 ;","  import java . util . Scanner ; import java . util . Arrays ; public class Codechef { public static void main ( String [ ] args ) throws java . lang . Exception { try { Scanner sc = new Scanner ( System . in ) ; int w1 , w2 , h1 , h2 ; w1 = sc . nextInt ( ) ; h1 = sc . nextInt ( ) ; w2 = sc . nextInt ( ) ; h2 = sc . nextInt ( ) ; System . out . println ( 2 * ( w1 + h1 + h2 ) + 4 ) ; } catch ( Exception e ) { } } }","import java . io . FileInputStream ; import java . io . FileNotFoundException ; import java . io . IOException ; import java . io . PrintWriter ; import java . util . Arrays ; import java . util . List ; import java . util . Scanner ; import java . util . stream . Collectors ; public class _p001131A { static public void main ( final String [ ] args ) throws IOException { p001131A . _main ( args ) ; }","import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;  "],"bleu":0.8293521614835505,"rouge_l":0.6915477497255763}
{"id":539,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException {"],"references":["import java . util . Scanner ;   public class A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int count = 0 ; char ch [ ] = s . toCharArray ( ) ; for ( int i = 0 ; i < s . length ( ) ; i += 2 ) { if ( s . charAt ( i ) == s . charAt ( i + 1 ) ) { count ++ ; if ( s . charAt ( i ) == ' a ' ) { ch [ i ] = ' b ' ; } else { ch [ i ] = ' a ' ; } } else { continue ; } } System . out . println ( count ) ; System . out . println ( ch ) ; } }","import java . util . * ;   public class CodeForces1216A { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; char [ ] c = input . next ( ) . toCharArray ( ) ; int count = 0 ; for ( int i = 0 ; i < n - 1 ; i += 2 ) { if ( c [ i ] == ' a ' && c [ i + 1 ] == ' a ' ) { count ++ ; c [ i ] = ' b ' ; } else if ( c [ i ] == ' b ' && c [ i + 1 ] == ' b ' ) { count ++ ; c [ i ] = ' a ' ; } }   System . out . println ( count ) ; for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( c [ i ] + \" \" ) ; } System . out . println ( ) ;   } }","import java . util . * ; import java . io . * ; public class A { public static FastReader sc = new FastReader ( ) ; public static PrintWriter out = new PrintWriter ( System . out ) ; public static void taskSolver ( ) { int n = sc . nextInt ( ) ; char ch [ ] = sc . next ( ) . toCharArray ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i += 2 ) { if ( ch [ i ] == ch [ i + 1 ] ) { count ++ ; if ( ch [ i ] == ' a ' ) ch [ i ] = ' b ' ; else ch [ i ] = ' a ' ; } } out . println ( count ) ; for ( char ch1 : ch ) out . print ( ch1 ) ; out . println ( ) ; } public static void main ( String args [ ] ) throws java . lang . Exception { taskSolver ( ) ; out . close ( ) ; } static class FastReader { BufferedReader br ; StringTokenizer st ; public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }","import java . util . * ; import java . lang . * ; import java . io . * ; public class Main { PrintWriter out ; FastReader sc ; long mod = ( long ) ( 1e9 + 7 ) ; long maxlong = Long . MAX_VALUE ; long minlong = Long . MIN_VALUE ; public void sol ( ) { int n = ni ( ) ; char [ ] s = rl ( ) ; int ans = 0 ; for ( int i = 0 ; i < n - 1 ; i += 2 ) { if ( s [ i ] == s [ i + 1 ] ) { if ( s [ i ] == ' a ' ) s [ i ] = ' b ' ; else s [ i ] = ' a ' ; ans ++ ; } } pl ( ans ) ; pl ( new String ( s ) ) ; } public static void main ( String [ ] args ) { Main g = new Main ( ) ; g . out = new PrintWriter ( System . out ) ; g . sc = new FastReader ( ) ; int t = 1 ;"],"bleu":0.009579348924904313,"rouge_l":0.1959081717616272}
{"id":540,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ; import java . io . * ; import java . math . BigInteger ;   public class StadiumandGames { static BigInteger isPerfectSq ( BigInteger n ) { BigInteger lo = BigInteger . ONE ; BigInteger hi = new BigInteger ( n . toString ( ) ) ; BigInteger sqrt = BigInteger . ZERO ; while ( lo . compareTo ( hi ) <= 0 ) { BigInteger mid = lo . add ( hi ) ; mid = mid . divide ( BigInteger . valueOf ( 2 ) ) ; if ( mid . multiply ( mid ) . compareTo ( n ) > 0 ) hi = mid . subtract ( BigInteger . ONE ) ; else { lo = mid . add ( BigInteger . ONE ) ; sqrt = mid ; } } return sqrt . multiply ( sqrt ) . equals ( n ) ? sqrt : BigInteger . ZERO ; } private static void solve ( ) { long X = nextLong ( ) ; TreeSet < BigInteger > ans = new TreeSet < > ( ) ; for ( int i = 0 ; i < 70 ; i ++ ) { BigInteger term1 = BigInteger . valueOf ( 2 ) . pow ( i + 1 ) . subtract ( BigInteger . valueOf ( 3 ) ) ; BigInteger term2 = isPerfectSq ( term1 . multiply ( term1 ) . add ( BigInteger . valueOf ( 8L * X ) ) ) ;   BigInteger numer = term2 . subtract ( term1 ) ; BigInteger div [ ] = numer . divideAndRemainder ( BigInteger . valueOf ( 2 ) ) ; if ( ! term2 . equals ( BigInteger . ZERO ) && numer . compareTo ( BigInteger . ZERO ) >= 0 && div [ 1 ] . equals ( BigInteger . ZERO ) ) { BigInteger m = div [ 0 ] ; BigInteger answer = m . multiply ( BigInteger . valueOf ( 2 ) . pow ( i ) ) ;","import java . util . * ; import java . io . * ; import java . math . BigInteger ;   public class StadiumandGames { static BigInteger isPerfectSq ( BigInteger n ) { BigInteger lo = BigInteger . ONE ; BigInteger hi = new BigInteger ( n . toString ( ) ) ; BigInteger sqrt = BigInteger . ZERO ; while ( lo . compareTo ( hi ) <= 0 ) { BigInteger mid = lo . add ( hi ) ; mid = mid . divide ( BigInteger . valueOf ( 2 ) ) ; if ( mid . multiply ( mid ) . compareTo ( n ) > 0 ) hi = mid . subtract ( BigInteger . ONE ) ; else { lo = mid . add ( BigInteger . ONE ) ; sqrt = mid ; } } return sqrt . multiply ( sqrt ) . equals ( n ) ? sqrt : BigInteger . ZERO ; } private static void solve ( ) { long X = nextLong ( ) ; TreeSet < BigInteger > ans = new TreeSet < > ( ) ; for ( int i = 0 ; i < 70 ; i ++ ) { BigInteger term1 = BigInteger . valueOf ( 2 ) . pow ( i + 1 ) . subtract ( BigInteger . valueOf ( 3 ) ) ; BigInteger term2 = isPerfectSq ( term1 . multiply ( term1 ) . add ( BigInteger . valueOf ( 8L * X ) ) ) ;   BigInteger numer = term2 . subtract ( term1 ) ; BigInteger div [ ] = numer . divideAndRemainder ( BigInteger . valueOf ( 2 ) ) ; if ( ! term2 . equals ( BigInteger . ZERO ) && numer . compareTo ( BigInteger . ZERO ) >= 0 && div [ 1 ] . equals ( BigInteger . ZERO ) ) { BigInteger m = div [ 0 ] ; BigInteger answer = m . multiply ( BigInteger . valueOf ( 2 ) . pow ( i ) ) ; BigInteger T_ = m . multiply ( BigInteger . valueOf ( 2 ) . pow ( i ) . subtract ( BigInteger . ONE ) ) . add ( ( m . multiply ( m . subtract ( BigInteger . ONE ) ) . divide ( BigInteger . valueOf ( 2 ) ) ) ) ;"],"bleu":0.001776676147967143,"rouge_l":0.13541965052993413}
{"id":541,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ;   public class EduRound25B { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; char [ ] [ ] a = new char [ 10 ] [ 10 ] ; for ( int i = 0 ; i < 10 ; i ++ ) { a [ i ] = scanner . next ( ) . toCharArray ( ) ; } for ( int i = 0 ; i < 10 ; i ++ ) { for ( int j = 0 ; j < 10 ; j ++ ) { if ( a [ i ] [ j ] != ' . ' ) continue ; a [ i ] [ j ] = ' X ' ; int countX = 0 ; int countY = 0 ; for ( int k = 0 ; k < 10 ; k ++ ) { if ( a [ i ] [ k ] == ' X ' ) { countX ++ ; } else { countX = 0 ; } if ( a [ k ] [ j ] == ' X ' ) { countY ++ ; } else { countY = 0 ; } if ( countX == 5 || countY == 5 ) { System . out . println ( \" YES \" ) ; return ; } } int count = 0 ; for ( int k = - 5 ; k < 5 ; k ++ ) { int r = i + k ; int c = j + k ; if ( r < 0 || c < 0 ) continue ; if ( r > 9 || c > 9 ) break ; if ( a [ r ] [ c ] == ' X ' ) { count ++ ; } else { count = 0 ; } if ( count == 5 ) { System . out . println ( \" YES \" ) ; return ; } } count = 0 ; for ( int k = - 5 ; k < 5 ; k ++ ) { int r = i - k ; int c = j + k ; if ( r > 9 || c < 0 ) continue ; if ( r < 0 || c > 9 ) break ; if ( a [ r ] [ c ] == ' X ' ) { count ++ ; } else { count = 0 ; } if ( count == 5 ) { System . out . println ( \" YES \" ) ; return ; } } a [ i ] [ j ] = ' . ' ; } } System . out . println ( \" NO \" ) ; } }"],"bleu":0.00011456954637162868,"rouge_l":0.08457764505119453}
{"id":542,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . io . * ; import java . util . * ; public class Asd { static PrintWriter w = new PrintWriter ( System . out ) ; static FastScanner s = new FastScanner ( ) ;   public static void main ( String [ ] args ) {","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . math . BigInteger ; import java . util . * ;   import javafx . util . Pair ;   public class Main {   public static void main ( String [ ] args ) {   FastScanner input = new FastScanner ( ) ; int n = input . nextInt ( ) ; int k = input . nextInt ( ) ; int m = input . nextInt ( ) ; ArrayList < ArrayList < Integer > > a = new ArrayList < > ( m ) ; for ( int i = 0 ; i < m ; i ++ ) { a . add ( new ArrayList < > ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { int value = input . nextInt ( ) ; a . get ( value % m ) . add ( value ) ; } for ( ArrayList < Integer > arrayList : a ) { if ( arrayList . size ( ) >= k ) { System . out . println ( \" Yes \" ) ; for ( int i = 0 ; i < k ; i ++ ) { System . out . print ( arrayList . get ( i ) + \" ▁ \" ) ; } System . out . println ( \" \" ) ; return ; } } System . out . println ( \" No \" ) ;   }   static class FastScanner {   BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( \" \" ) ;   String next ( ) { while ( ! st . hasMoreTokens ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   long nextLong ( ) {   return Long . parseLong ( next ( ) ) ; }   double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; }   String nextLine ( ) throws IOException { return br . readLine ( ) ; } }   }","import java . util . * ; public class contest11 { static Scanner scn = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { int n = scn . nextInt ( ) ; int k = scn . nextInt ( ) ; int m = scn . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = scn . nextInt ( ) ; HashMap < Integer , List < Integer > > map = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int key = arr [ i ] % m ; if ( ! map . containsKey ( key ) ) map . put ( key , new ArrayList < > ( ) ) ; map . get ( key ) . add ( arr [ i ] ) ; } for ( int key : map . keySet ( ) ) { if ( map . get ( key ) . size ( ) >= k ) { System . out . println ( \" Yes \" ) ; List < Integer > list = map . get ( key ) ; for ( int i = 0 ; i < k ; i ++ ) System . out . print ( list . get ( i ) + \" ▁ \" ) ; return ; } } System . out . println ( \" No \" ) ; } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ;   public class Codeforces {   private static final Scanner sc = new Scanner ( System . in ) ; private static final BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; private static final long MOD = ( long ) ( 1e9 + 7 ) ; public static int [ ] LPS ( String p ) { int [ ] lps = new int [ p . length ( ) ] ;   int i = 1 ; int j = 0 ; while ( i < p . length ( ) ) { if ( p . charAt ( i ) == p . charAt ( j ) ) { lps [ i ] = j + 1 ; i ++ ; j ++ ; } else { if ( j == 0 ) { lps [ i ] = 0 ; i ++ ; } else { j = lps [ j - 1 ] ; } } } return lps ; }   public static void KMP ( String text , String pattern ) { int [ ] lps = LPS ( pattern ) ; int i = 0 ; int j = 0 ; ArrayList < Integer > matches = new ArrayList < > ( ) ; while ( i < text . length ( ) ) { if ( text . charAt ( i ) == pattern . charAt ( j ) ) { i ++ ; j ++ ; } else { if ( j != 0 ) { j = lps [ j - 1 ] ; } else { i ++ ; } } if ( j == pattern . length ( ) ) { matches . add ( i - j ) ; j = lps [ j - 1 ] ; } } for ( int x : matches ) { System . out . println ( \" Match ▁ at ▁ : ▁ \" + x ) ; } }   private static class SegmentTree { private long [ ] st ; private int size ; private int n ; private long [ ] a ; SegmentTree ( long [ ] a , int n ) { this . size = 4 * n ; this . n = n ; this . a = a ; st = new long [ size ] ;"],"bleu":0.6849701047355287,"rouge_l":0.6396901794536705}
{"id":543,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . ArrayList ; import java . util . Scanner ;   public class A1462 { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int t = scanner . nextInt ( ) ; ArrayList < Integer > list = new ArrayList < > ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int n = scanner . nextInt ( ) ; for ( int j = 0 ; j < n ; j ++ ) { int b = scanner . nextInt ( ) ; list . add ( b ) ; } if ( n % 2 == 0 ) { for ( int j = 0 ; j < n \/ 2 ; j ++ ) { System . out . print ( list . get ( j ) + \" ▁ \" + list . get ( n - 1 - j ) + \" ▁ \" ) ; } System . out . print ( \" \\n \" ) ; } else { for ( int j = 0 ; j < n \/ 2 ; j ++ ) { System . out . print ( list . get ( j ) + \" ▁ \" + list . get ( n - 1 - j ) + \" ▁ \" ) ; } System . out . print ( list . get ( n \/ 2 ) + \" \\n \" ) ; } list . clear ( ) ; } } }","import java . util . * ;   public class Solution { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = sc . nextInt ( ) ; for ( int i = 0 , j = n - 1 ; j > i ; i ++ , j -- ) System . out . print ( arr [ i ] + \" ▁ \" + arr [ j ] + \" ▁ \" ) ; System . out . println ( n % 2 == 1 ? arr [ n \/ 2 ] : \" \" ) ; } } }","import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- != 0 ) { int n = sc . nextInt ( ) ; int arr [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int p = 0 , q = n - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( i % 2 == 1 ) { System . out . print ( arr [ q ] + \" ▁ \" ) ; q -- ; } else { System . out . print ( arr [ p ] + \" ▁ \" ) ; p ++ ; } } System . out . println ( ) ; } } }","import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scn = new Scanner ( System . in ) ; int t = scn . nextInt ( ) ; while ( t -- > 0 ) { int n = scn . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = scn . nextInt ( ) ; int si = 0 ; int ei = n - 1 ; while ( si < ei ) { System . out . print ( arr [ si ] + \" ▁ \" ) ; System . out . print ( arr [ ei ] + \" ▁ \" ) ; si ++ ; ei -- ; } if ( si == ei ) { System . out . print ( arr [ si ] + \" ▁ \" ) ; } System . out . println ( ) ; } } }"],"bleu":0.035372850011011286,"rouge_l":0.1918608184764992}
{"id":544,"predictions":["import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;"],"references":["import java . util . Scanner ;   public class Solution { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } if ( n > 1 ) { for ( int i = 0 ; i < n ; i ++ ) { int minIdx = i ; for ( int j = i + 1 ; j < n ; j ++ ) { if ( a [ minIdx ] > a [ j ] ) { minIdx = j ; } } int temp = a [ i ] ; a [ i ] = a [ minIdx ] ; a [ minIdx ] = temp ; } } for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( a [ i ] + \" ▁ \" ) ; } } }  ","import java . util . * ; import java . lang . * ; import java . io . * ;   public class cc { public static void main ( String [ ] args ) throws java . lang . Exception {","import java . util . * ; import java . lang . * ; import java . io . * ;   public class Solution { public static void main ( String [ ] args ) throws java . lang . Exception { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = sc . nextInt ( ) ; Arrays . sort ( a ) ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( a [ i ] + \" ▁ \" ) ; } }","  import java . util . * ; import java . lang . * ; import java . io . * ;   public class Ideone { public static void main ( String [ ] args ) throws java . lang . Exception { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; int arr [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = scan . nextInt ( ) ; } Arrays . sort ( arr ) ; for ( int j = 0 ; j < n ; j ++ ) { System . out . print ( arr [ j ] + \" ▁ \" ) ; } } }","import java . util . Arrays ; import java . util . Scanner ;   public class Solution {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( a [ i ] + \" ▁ \" ) ; } } }"],"bleu":0.48066507657875646,"rouge_l":0.5723908695140605}
{"id":545,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException {"],"references":["import java . util . * ; import java . io . * ; public class MyClass { public static void main ( String args [ ] ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int n = Integer . parseInt ( br . readLine ( ) ) ; int count0left = 0 ; int count1left = 0 ; int count0right = 0 ; int count1right = 0 ; while ( n -- > 0 ) { String s [ ] = br . readLine ( ) . split ( \" ▁ \" ) ; int l = Integer . parseInt ( s [ 0 ] ) ; int r = Integer . parseInt ( s [ 1 ] ) ; if ( l == 0 ) { count0left = count0left + 1 ; } else if ( l == 1 ) { count1left = count1left + 1 ; } if ( r == 0 ) { count0right = count0right + 1 ; } else if ( r == 1 ) { count1right = count1right + 1 ; } } int rs = Math . min ( count0left , count1left ) + Math . min ( count0right , count1right ) ; System . out . println ( rs ) ; } }","import java . util . Scanner ;   public class P248A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; int leftZero = 0 , leftOnes = 0 , rightZero = 0 , rightOnes = 0 ; while ( t -- > 0 ) { int l = sc . nextInt ( ) ; int r = sc . nextInt ( ) ; if ( l == 0 ) leftOnes ++ ; else leftZero ++ ; if ( r == 0 ) rightZero ++ ; else rightOnes ++ ; } System . out . println ( Math . min ( leftOnes , leftZero ) + Math . min ( rightOnes , rightZero ) ) ; } }","  import java . util . * ;    public class dummycodes {   public static int solve ( HashSet < Integer > zL , HashSet < Integer > oL , HashSet < Integer > zR , HashSet < Integer > oR ) { HashSet < Integer > R = ( zR . size ( ) > oR . size ( ) ) ? new HashSet < > ( oR ) : new HashSet < > ( zR ) ; HashSet < Integer > L = ( zL . size ( ) > oL . size ( ) ) ? new HashSet < > ( oL ) : new HashSet < > ( zL ) ; int r = R . size ( ) ; int l = L . size ( ) ; return r + l ; } public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ;   int n = sc . nextInt ( ) ; HashSet < Integer > zL = new HashSet < > ( ) ; HashSet < Integer > oL = new HashSet < > ( ) ; HashSet < Integer > zR = new HashSet < > ( ) ; HashSet < Integer > oR = new HashSet < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int l = sc . nextInt ( ) ; int r = sc . nextInt ( ) ; if ( l == 0 ) zL . add ( i ) ; else oL . add ( i ) ; if ( r == 0 ) zR . add ( i ) ; else oR . add ( i ) ; }    System . out . println ( solve ( zL , oL , zR , oR ) ) ;   } }                      ","import java . util . Scanner ; public class Practice { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int count = 0 ; int no = sc . nextInt ( ) ; int lo = 0 , lc = 0 , ro = 0 , rc = 0 ; for ( int i = 0 ; i < no ; i ++ ) { int l = sc . nextInt ( ) ; int r = sc . nextInt ( ) ; if ( l == 0 ) { lc ++ ; } else { lo ++ ; } if ( r == 0 ) { rc ++ ; } else { ro ++ ; } } int minc = Math . min ( lc , lo ) ; int minr = Math . min ( rc , ro ) ; System . out . println ( minc + minr ) ; } }"],"bleu":0.02726349638310239,"rouge_l":0.21731099089589656}
{"id":546,"predictions":["import java . util . * ; import java . lang . * ; import java . io . * ; public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) {"],"references":["import java . io . * ; import java . util . * ; public class Solution { public static void main ( String [ ] args ) throws Exception { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer stt ; int n = Integer . parseInt ( br . readLine ( ) ) ; int records [ ] = new int [ n ] , succ_records [ ] = new int [ n ] , unsucc_records [ ] = new int [ n ] , count = Integer . MIN_VALUE , count_zero = 0 , count_one = 0 ; stt = new StringTokenizer ( br . readLine ( ) ) ; for ( int i = 0 ; i < n ; i ++ ) { records [ i ] = Integer . parseInt ( stt . nextToken ( ) ) ; count_zero = ( records [ i ] == 0 ) ? count_zero + 1 : count_zero ; unsucc_records [ i ] = count_zero ; } for ( int i = n - 1 ; i >= 0 ; i -- ) { count_one = ( records [ i ] == 1 ) ? count_one + 1 : count_one ; succ_records [ i ] = count_one ; } count = count_one ; for ( int i = 0 ; i < n - 1 ; i ++ ) count = ( count < unsucc_records [ i ] + succ_records [ i + 1 ] ) ? unsucc_records [ i ] + succ_records [ i + 1 ] : count ; count = ( count < unsucc_records [ n - 1 ] ) ? unsucc_records [ n - 1 ] : count ; System . out . println ( count ) ; return ; } }","import java . util . * ; import java . io . * ; import java . math . * ;   public class x846A { public static void main ( String omkar [ ] ) throws Exception { BufferedReader infile = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( infile . readLine ( ) ) ; int N = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] arr = new int [ N ] ; st = new StringTokenizer ( infile . readLine ( ) ) ; for ( int i = 0 ; i < N ; i ++ ) arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; int res = 0 ; for ( int x : arr ) res += x ; res = Math . max ( res , N - res ) ; for ( int i = 0 ; i < N ; i ++ ) if ( arr [ i ] == 1 ) { int zc = 0 ; for ( int a = 0 ; a < N ; a ++ ) { if ( a < i && arr [ a ] == 1 ) zc ++ ; else if ( a >= i && arr [ a ] == 0 ) zc ++ ; } res = Math . max ( res , N - zc ) ; } System . out . println ( res ) ; } }","import java . util . * ; import java . io . * ;   public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; }   public static long mod = 17352642619633L ;   void run ( FastScanner in , PrintWriter out ) { int N = in . nextInt ( ) ; int [ ] a = new int [ N ] ;   for ( int i = 0 ; i < N ; i ++ ) { a [ i ] = in . nextInt ( ) ; }   int [ ] zeroBefore = new int [ N ] ; int [ ] oneAfter = new int [ N ] ;   for ( int i = 0 ; i < N ; i ++ ) { zeroBefore [ i ] = ( i == 0 ? 0 : zeroBefore [ i - 1 ] ) + ( a [ i ] ^ 1 ) ; }   for ( int i = N - 1 ; i >= 0 ; i -- ) { oneAfter [ i ] = ( i == N - 1 ? 0 : oneAfter [ i + 1 ] ) + ( a [ i ] ) ; }   int max = 0 ; for ( int i = 0 ; i < N ; i ++ ) { max = Math . max ( max , zeroBefore [ i ] + oneAfter [ i ] ) ; } out . println ( max ) ; }   static class FastScanner { BufferedReader br ; StringTokenizer st ;   public FastScanner ( InputStream in ) { br = new BufferedReader ( new InputStreamReader ( in ) ) ; st = null ; }   String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } } }"],"bleu":0.0013455219880705571,"rouge_l":0.17468499427262316}
{"id":547,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException {"],"references":["import java . lang . * ; import java . util . * ;   public class Abhishek {   public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] psum = new int [ n ] ; psum [ 0 ] = a [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { psum [ i ] = psum [ i - 1 ] + a [ i ] ; } int m = sc . nextInt ( ) ;","import java . lang . * ; import java . util . * ;   public class Abhishek {   public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] psum = new int [ n ] ; psum [ 0 ] = a [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { psum [ i ] = psum [ i - 1 ] + a [ i ] ; } int m = sc . nextInt ( ) ;","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . ArrayList ; import java . util . Collections ; import java . util . List ; import java . util . StringTokenizer ;   public class Worms { static class RealScanner { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( \" \" ) ;   String next ( ) { while ( ! st . hasMoreTokens ( ) ) try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   int [ ] readArray ( int n ) { int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = nextInt ( ) ; return a ; }   long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } } static int LowerBound ( int a [ ] , int x ) { int l = - 1 , r = a . length ; while ( l + 1 < r ) { int m = ( l + r ) >>> 1 ; if ( a [ m ] >= x ) r = m ; else l = m ; } return r ; } public static void main ( String [ ] args ) { RealScanner sc = new RealScanner ( ) ; int n = sc . nextInt ( ) ; int [ ] arr1 = new int [ n ] ; int [ ] arrF = new int [ n ] ; List < Integer > l1 = new ArrayList < > ( ) ; List < Integer > l2 = new ArrayList < > ( ) ; int sum1 = 1 , sum2 = 0 , sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { arr1 [ i ] = sc . nextInt ( ) ; sum += arr1 [ i ] ; arrF [ i ] = sum ;"],"bleu":0.016870650871992396,"rouge_l":0.2702959329007754}
{"id":548,"predictions":["import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; } public static long mod = 17352642619633L ; void run ( FastScanner in , PrintWriter out ) {"],"references":["import java . util . * ;   public class StackBracket { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; StringBuilder n = new StringBuilder ( sc . next ( ) ) ; String ans = n + n . reverse ( ) . toString ( ) ; System . out . println ( ans ) ;    }    public static int getAns ( String s , int k , int start1 , int end1 ) {","import java . util . Scanner ;   public class LovelyPalindromes { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String value = sc . next ( ) ; char [ ] nums = value . toCharArray ( ) ; System . out . print ( value ) ; for ( int i = nums . length - 1 ; i >= 0 ; i -- ) { System . out . print ( nums [ i ] ) ; } } }","import java . util . Scanner ;   public class MyClass { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; String N = in . nextLine ( ) ; String newN = N ; System . out . print ( N ) ; for ( int i = N . length ( ) - 1 ; i >= 0 ; i -- ) { System . out . print ( N . charAt ( i ) ) ; } } }","import java . util . * ; public class LovelyPalindromes {   public static void main ( String [ ] args ) {","import java . util . * ; import java . util . Scanner ; import java . io . * ; import javax . lang . model . util . ElementScanner6 ; import static java . lang . System . out ; import java . util . Stack ; import java . util . Queue ; import java . util . LinkedList ;   public class B688M2 {   static int mod = ( int ) ( 1e9 + 7 ) ; static long MOD = ( long ) ( 1e9 + 7 ) ; static FastReader in = new FastReader ( ) ; static PrintWriter pr = new PrintWriter ( new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ) ; public static void main ( String args [ ] ) {   int tc = 1 ;"],"bleu":0.5154056244592886,"rouge_l":0.7492964275072013}
{"id":549,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ;   public class Main {   public static int countone ( String s ) { int count = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == '0' ) { count ++ ; } } return count ; }   public static void main ( String [ ] args ) throws IOException {   FastScanner input = new FastScanner ( ) ; int tc = input . nextInt ( ) ; while ( tc -- > 0 ) { int zero = 0 ; int n = input . nextInt ( ) ; boolean check = false ; for ( int i = 0 ; i < n ; i ++ ) { String s = input . next ( ) ; int one = 0 ; if ( s . length ( ) % 2 == 1 ) { check = true ; continue ; } zero += ( countone ( s ) ) ;   } if ( ! check && zero % 2 == 1 ) { System . out . println ( n - 1 ) ; } else { System . out . println ( n ) ; } }   }   static class FastScanner {   BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( \" \" ) ;   String next ( ) { while ( ! st . hasMoreTokens ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   long nextLong ( ) {   return Long . parseLong ( next ( ) ) ; }   double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; }   String nextLine ( ) throws IOException { return br . readLine ( ) ; } }   }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . Comparator ; import java . util . List ;   public class BinaryPalindromes {","import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . * ; import java . io . IOException ; import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . InputStream ;   public class First {   public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; TaskA solver = new TaskA ( ) ; int t ; t = in . nextInt ( ) ;"],"bleu":0.6684316532828368,"rouge_l":0.7077614298410192}
{"id":550,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ; import java . io . * ; public class A { static FastReader in = new FastReader ( ) ; static final Random random = new Random ( ) ; static long mod = 1000000007L ; public static void main ( String args [ ] ) throws IOException { int t = 1 ;","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . * ; public class Main { static class FastScanner { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( \" \" ) ;   String next ( ) { while ( ! st . hasMoreTokens ( ) ) try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   int [ ] readArray ( int n ) { int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = nextInt ( ) ; return a ; }   long nextLong ( ) { return Long . parseLong ( next ( ) ) ; }   }      public static void main ( String [ ] args ) { FastScanner fs = new FastScanner ( ) ; PrintWriter out = new PrintWriter ( System . out ) ;   int N = fs . nextInt ( ) ; int K = fs . nextInt ( ) ; char [ ] arr = fs . next ( ) . toCharArray ( ) ;   HashMap < Character , Integer > hmap = new HashMap < > ( ) ; PriorityQueue < Integer > pque = new PriorityQueue < > ( Collections . reverseOrder ( ) ) ;"],"bleu":0.6615095870213785,"rouge_l":0.5368385422543156}
{"id":551,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . io . BufferedWriter ; import java . io . IOException ; import java . io . InputStream ; import java . io . OutputStreamWriter ; import java . math . BigDecimal ;    import java . util . ArrayDeque ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collections ; import java . util . HashMap ; import java . util . Map . Entry ; import java . util . PriorityQueue ; import java . util . TreeSet ;     public final class CF_115_B { static boolean verb = true ; static void log ( Object X ) { if ( verb ) System . err . println ( X ) ; } static void log ( Object [ ] X ) { if ( verb ) { for ( Object U : X ) System . err . print ( U + \" ▁ \" ) ; System . err . println ( \" \" ) ; } } static void log ( int [ ] X ) { if ( verb ) { for ( int U : X ) System . err . print ( U + \" ▁ \" ) ; System . err . println ( \" \" ) ; } } static void logWln ( Object X ) { if ( verb ) System . err . print ( X ) ; } static void info ( Object o ) { System . out . println ( o ) ; } static void output ( Object o ) { outputWln ( \" \" + o + \" \\n \" ) ; } static void outputWln ( Object o ) { try { out . write ( \" \" + o ) ; } catch ( Exception e ) { } }    static int MX = Integer . MAX_VALUE ; static class Composite implements Comparable < Composite > { int idx ; int v ; String name ; public int compareTo ( Composite X ) { if ( v != X . v ) return X . v - v ; return idx - X . idx ; }   public Composite ( int idx , int v , String name ) { this . idx = idx ; this . v = v ; this . name = name ; }   }     "],"bleu":0.0010966890783979486,"rouge_l":0.15996503496503497}
{"id":552,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ;   public class Combination_B {   public static void main ( String [ ] args ) {","import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collections ; import java . util . Scanner ; import java . lang . Math ; public class Account { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int points = 0 , count = 1 , a , b ; ArrayList < Integer > list = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { a = sc . nextInt ( ) ; b = sc . nextInt ( ) ; if ( b >= 1 ) { points += a ; count += b - 1 ; } else { list . add ( a ) ; } } Collections . sort ( list ) ;","import java . lang . * ; import java . util . * ; import java . util . stream . Collectors ; import java . io . * ;   public class Bouncing {   public static void main ( String [ ] args ) throws IOException { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int i = 0 , j = 0 , totfw = 1 ; int sum = 0 ; List < Integer > crdsfw = new ArrayList < Integer > ( ) ; List < Integer > crds0 = new ArrayList < Integer > ( ) ; for ( int k = 0 ; k < n ; k ++ ) { int point = sc . nextInt ( ) ; int fw = sc . nextInt ( ) ; if ( fw == 0 ) { crds0 . add ( point ) ; } else { crdsfw . add ( point ) ; } totfw += fw ; } Collections . sort ( crds0 , Collections . reverseOrder ( ) ) ; for ( int pp : crdsfw ) sum += pp ; totfw -= crdsfw . size ( ) ;"],"bleu":0.3797055896682351,"rouge_l":0.5848548875777387}
{"id":553,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["# include < bits \/ stdc ++ . h > using namespace std ; int u [ 10 ] , k [ 2000001 ] ; int a [ 2000005 ] ; int b [ 2000005 ] ; void fake ( ) { b [ 1 ] = 1 ; int cnt = 0 ; for ( int i = 2 ; i < 2000005 ; i ++ ) { if ( ! b [ i ] ) a [ cnt ++ ] = i ; for ( int j = 0 ; j < cnt && i * a [ j ] < 2000005 ; j ++ ) { b [ i * a [ j ] ] = 1 ; if ( i % a [ j ] == 0 ) break ; } } } int main ( ) { int i , j , p , q , n ; cin >> p >> q ; n = 2000005 ; fake ( ) ; for ( int i = 1 ; i <= n ; i ++ ) { b [ i ] = 1 - b [ i ] ; b [ i ] += b [ i - 1 ] ; int y = i , f = 0 ; while ( y != 0 ) { u [ f ] = y % 10 ; y \/= 10 ; f ++ ; } for ( j = 0 ; j <= f ; j ++ ) if ( u [ j ] != u [ f - 1 - j ] ) break ; if ( j == f + 1 ) k [ i ] = k [ i - 1 ] + 1 ; else k [ i ] = k [ i - 1 ] ; } int ans ; for ( int i = 1 ; i <= 2000005 ; i ++ ) if ( b [ i ] * q <= p * k [ i ] ) ans = i ; cout << ans << endl ; return 0 ; }","import java . util . * ; import java . io . * ; public class Task { static boolean ok ( int x ) { String s = Integer . toString ( x ) ; int i = 0 , j = s . length ( ) - 1 ; while ( i < j ) { if ( s . charAt ( i ) != s . charAt ( j ) ) { return false ; } i ++ ; j -- ; } return true ; } public static void main ( String args [ ] ) throws IOException { assign ( ) ; int t = 1 , cn = 1 ; while ( t -- != 0 ) { int [ ] x = int_arr ( ) ; int p = x [ 0 ] , q = x [ 1 ] ; boolean [ ] b = new boolean [ 2000000 ] ; int [ ] dp = new int [ 2000000 ] ; int [ ] pl = new int [ 2000000 ] ; Arrays . fill ( b , true ) ; int res = - 1 ; for ( int i = 2 ; i <= ( int ) Math . sqrt ( 2000000 ) ; i ++ ) { if ( ! b [ i ] ) continue ; for ( int j = i * i ; j < 2000000 ; j += i ) { b [ j ] = false ; } } for ( int i = 2 ; i < 2000000 ; i ++ ) { dp [ i ] = dp [ i - 1 ] ; dp [ i ] += b [ i ] ? 1 : 0 ; } for ( int i = 1 ; i < 2000000 ; i ++ ) { pl [ i ] = pl [ i - 1 ] ; pl [ i ] += ok ( i ) ? 1 : 0 ; if ( q * dp [ i ] <= p * pl [ i ] ) { res = i ; }"],"bleu":0.0016294424293103406,"rouge_l":0.1271186440677966}
{"id":554,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ;   public class Test {   public static void main ( String args [ ] ) { Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) ; int m = in . nextInt ( ) ; int x = in . nextInt ( ) ; if ( x > Math . min ( ( n + 1 ) \/ 2 , ( m + 1 ) \/ 2 ) ) { System . out . println ( 0 ) ; return ; } n = n - 2 * x + 2 ; m = m - 2 * x + 2 ; int n1 = Math . max ( n - 2 , 0 ) ; int m1 = Math . max ( m - 2 , 0 ) ; int ans = n * m - n1 * m1 ; System . out . println ( ( ans + 1 ) \/ 2 ) ; } }","import java . util . Scanner ;   public class File1 { static long dp [ ] [ ] ; public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) ; int m = in . nextInt ( ) ; int x = in . nextInt ( ) ; if ( x * 2 > Math . min ( n , m ) + 1 ) { System . out . println ( 0 ) ; return ; } int y = solve ( n , m , x ) ; System . out . println ( y ) ; } private static int solve ( int n , int m , int x ) { if ( x == 1 ) { if ( n == 1 ) return ( m + 1 ) \/ 2 ; if ( m == 1 ) return ( n + 1 ) \/ 2 ; return ( n * m - ( n - 2 ) * ( m - 2 ) ) \/ 2 ; } return solve ( n - 2 , m - 2 , x - 1 ) ; } }","import java . io . BufferedReader ; import java . io . File ; import java . io . FileInputStream ; import java . io . FileNotFoundException ; import java . io . FileOutputStream ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . math . BigInteger ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . BitSet ; import java . util . Calendar ; import java . util . Collections ; import java . util . Comparator ; import java . util . HashMap ; import java . util . HashSet ; import java . util . LinkedList ; import java . util . PriorityQueue ; import java . util . SortedSet ; import java . util . Stack ; import java . util . StringTokenizer ; import java . util . TreeMap ; import java . util . TreeSet ;   public class B_Round_39 {   public static long MOD = 1000000007 ; static int [ ] X = { 0 , 1 , 0 , - 1 , 1 , - 1 , - 1 , 1 } ; static int [ ] Y = { 1 , 0 , - 1 , 0 , 1 , - 1 , 1 , - 1 } ;   public static void main ( String [ ] args ) throws FileNotFoundException {","import java . io . BufferedReader ; import java . io . FileReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Scanner ; import java . util . StringTokenizer ; import java . util . * ; import java . io . * ; public class codeforces { static class Student { int x , y ; Student ( int x , int y ) { this . x = x ; this . y = y ;"],"bleu":0.34651071555410806,"rouge_l":0.5166123778501629}
{"id":555,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException {"],"references":["import java . util . Arrays ; import java . util . Scanner ; import java . util . Vector ;   public class Main {   public static void main ( String [ ] args ) {   Scanner scan = new Scanner ( System . in ) ;   int t = scan . nextInt ( ) ;   for ( int h = 0 ; h < t ; h ++ ) {   int n = scan . nextInt ( ) ;   int [ ] s = new int [ n ] ;   int ans = - 1 ;   for ( int i = 0 ; i < n ; i ++ ) {   s [ i ] = scan . nextInt ( ) ;   }   boolean exit = false ;   for ( int i = 1 ; i < 1024 && ! exit ; i ++ ) {   for ( int j = 0 ; j < n ; j ++ ) {   boolean flag = false ;   for ( int k = 0 ; k < n ; k ++ ) {   if ( ( s [ j ] ^ i ) == s [ k ] ) {   flag = true ;   break ;   }   }   if ( ! flag ) {   break ;   }   else if ( j == n - 1 ) {   ans = i ;   exit = true ;   }   }   }   System . out . println ( ans ) ;   }   }   }","import java . util . * ; public class JohnnyAndHobbies {   public static void main ( String [ ] args ) {","import static java . lang . Integer . parseInt ; import static java . lang . Long . parseLong ; import static java . lang . Double . parseDouble ; import static java . lang . Math . PI ; import static java . lang . Math . min ; import static java . lang . System . arraycopy ; import static java . lang . System . exit ; import static java . util . Arrays . copyOf ;   import java . util . LinkedList ;   import java . math . BigInteger ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . HashSet ; import java . util . Set ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . HashMap ; import java . util . NoSuchElementException ; import java . util . PriorityQueue ; import java . util . StringTokenizer ; import java . util . Comparator ; import java . lang . StringBuilder ; import java . util . Collections ; public class Solution {   static int scanInt ( ) throws IOException { return parseInt ( scanString ( ) ) ; }   static long scanLong ( ) throws IOException { return parseLong ( scanString ( ) ) ; } static double scanDouble ( ) throws IOException { return parseDouble ( scanString ( ) ) ; }   static String scanString ( ) throws IOException { if ( tok == null || ! tok . hasMoreTokens ( ) ) { tok = new StringTokenizer ( in . readLine ( ) ) ; } return tok . nextToken ( ) ; } static String scanLine ( ) throws IOException { return in . readLine ( ) ; }   static void printCase ( String str ) { out . print ( \" Case ▁ # \" + test + \" : ▁ \" + str ) ; }   static void printlnCase ( ) { out . println ( \" Case ▁ # \" + test + \" : \" ) ; }   static BufferedReader in ; static PrintWriter out ; static StringTokenizer tok ; static int test ; static StringBuilder str ; public static void main ( String [ ] args ) { try { long startTime = System . currentTimeMillis ( ) ;   in = new BufferedReader ( new InputStreamReader ( System . in ) ) ; out = new PrintWriter ( System . out ) ; solve ( ) ; long endTime = System . currentTimeMillis ( ) ; long totalTime = endTime - startTime ;"],"bleu":0.8883978272730287,"rouge_l":0.8810411872073645}
{"id":556,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . StringTokenizer ; public class Cv {"],"references":["  import java . math . * ; import java . util . * ; import java . io . * ; public class gr13b {","  import java . util . * ; import java . lang . * ; import java . io . * ;   public class Main { static class FastReader { BufferedReader br ; StringTokenizer st ;   public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } static ArrayList < ArrayList < Integer > > adj = new ArrayList < ArrayList < Integer > > ( ) ;   public static void main ( String [ ] args ) { FastReader s = new FastReader ( ) ; int n = s . nextInt ( ) ;   for ( int j = 0 ; j < n ; j ++ ) { adj . add ( new ArrayList < Integer > ( ) ) ; }   for ( int i = 1 ; i < n ; i ++ ) { int node = s . nextInt ( ) ; addEdge ( adj , node - 1 , i ) ; }   int [ ] dp = new int [ n ] ;   DFS ( 0 , 0 , dp ) ;   boolean sprouse = true ; for ( int z : dp ) { if ( z == 1 ) { sprouse = false ; break ; } }   if ( sprouse ) { System . out . println ( \" Yes \" ) ; } else { System . out . println ( \" No \" ) ; }   }   public static void addEdge ( ArrayList < ArrayList < Integer > > adj , int u , int v ) { adj . get ( u ) . add ( v ) ;","import java . util . * ; import java . io . * ; import java . lang . * ; import java . math . * ; public class B { public static void main ( String [ ] args ) throws Exception { BufferedReader bf = new BufferedReader ( new InputStreamReader ( System . in ) ) ;"],"bleu":0.4096636841225722,"rouge_l":0.6911150864639237}
{"id":557,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { ans += b [ i ] ; } } System . out . println ( ans ) ; } }"],"references":["import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int x = sc . nextInt ( ) ; int candies [ ] = new int [ x ] ; int oranges [ ] = new int [ x ] ; int mincandies = Integer . MAX_VALUE ; int minoranges = Integer . MAX_VALUE ; for ( int i = 0 ; i < x ; i ++ ) { candies [ i ] = sc . nextInt ( ) ; mincandies = Math . min ( candies [ i ] , mincandies ) ; } for ( int i = 0 ; i < x ; i ++ ) { oranges [ i ] = sc . nextInt ( ) ; minoranges = Math . min ( oranges [ i ] , minoranges ) ; } long tot = 0 ; for ( int i = 0 ; i < x ; i ++ ) { if ( candies [ i ] > mincandies | oranges [ i ] > minoranges ) { tot += ( Math . min ( candies [ i ] - mincandies , oranges [ i ] - minoranges ) ) ; tot += ( Math . max ( candies [ i ] - mincandies , oranges [ i ] - minoranges ) - Math . min ( candies [ i ] - mincandies , oranges [ i ] - minoranges ) ) ; } } System . out . println ( tot ) ; } } } ;","import java . util . * ; public class GiftsFixing { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int a [ ] = new int [ n ] ; int b [ ] = new int [ n ] , l1 = Integer . MAX_VALUE , l2 = Integer . MAX_VALUE ; long c = 0 ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; if ( a [ i ] < l1 ) l1 = a [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; if ( b [ i ] < l2 ) l2 = b [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] > l1 && b [ i ] > l2 ) { int t1 = a [ i ] - l1 < b [ i ] - l2 ? a [ i ] - l1 : b [ i ] - l2 ; a [ i ] -= t1 ; b [ i ] -= t1 ; c += t1 ; } if ( a [ i ] > l1 ) c += a [ i ] - l1 ; if ( b [ i ] > l2 ) c += b [ i ] - l2 ; } System . out . println ( c ) ; } } }","import java . util . * ; public class HelloWorld { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int am = Integer . MAX_VALUE ; int bm = Integer . MAX_VALUE ; int a [ ] = new int [ n ] ; int b [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; if ( a [ i ] < am ) am = a [ i ] ; } long s1 = 0 , s2 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; if ( b [ i ] < bm ) bm = b [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) s1 += ( long ) Math . max ( a [ i ] - am , b [ i ] - bm ) ; System . out . println ( s1 ) ; } } }","import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int n = sc . nextInt ( ) ; int a [ ] = new int [ n ] ; int b [ ] = new int [ n ] ; int a1 = Integer . MAX_VALUE ; int b1 = Integer . MAX_VALUE ; for ( int j = 0 ; j < n ; j ++ ) { a [ j ] = sc . nextInt ( ) ; if ( a [ j ] < a1 ) { a1 = a [ j ] ; } } for ( int j = 0 ; j < n ; j ++ ) { b [ j ] = sc . nextInt ( ) ; if ( b1 > b [ j ] ) { b1 = b [ j ] ; } } long ans = 0 ; for ( int j = 0 ; j < n ; j ++ ) { ans = ans + Math . max ( a [ j ] - a1 , b [ j ] - b1 ) ; } System . out . println ( ans ) ; } } }"],"bleu":0.7076949641294474,"rouge_l":0.7035876086690338}
{"id":558,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ; import java . util . Scanner ; import java . io . * ; import javax . lang . model . util . ElementScanner6 ; import static java . lang . System . out ; import java . util . Stack ; import java . util . Queue ; import java . util . LinkedList ;   public class B678 {   public static void main ( String args [ ] ) {   FastReader in = new FastReader ( ) ; PrintWriter pr = new PrintWriter ( new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ) ; int tc = 1 ;","import java . io . * ; import java . math . * ; import java . time . LocalDate ; import java . time . Month ; import java . util . * ;     public class Main {   private static int dx [ ] = { 1 , 0 , - 1 , 0 } ; private static int dy [ ] = { 0 , - 1 , 0 , 1 } ;   private static final long INF = Long . MAX_VALUE ; private static final int INT_INF = Integer . MAX_VALUE ; private static final long NEG_INF = Long . MIN_VALUE ; private static final int NEG_INT_INF = Integer . MIN_VALUE ; private static final double EPSILON = 1e-10 ;   private static final long MAX = ( long ) 1e12 ; private static final long MOD = 100000007 ;   private static final int MAXN = 100 ; private static final int MAXA = 2000007 ; private static final int MAXLOG = 22 ; private static final double PI = Math . acos ( - 1 ) ; public static void main ( String [ ] args ) throws IOException {   InputReader in = new InputReader ( System . in ) ;","import java . io . * ; import java . math . * ; import java . time . LocalDate ; import java . time . Month ; import java . util . * ;     public class Main {   private static int dx [ ] = { 1 , 0 , - 1 , 0 } ; private static int dy [ ] = { 0 , - 1 , 0 , 1 } ;   private static final long INF = Long . MAX_VALUE ; private static final int INT_INF = Integer . MAX_VALUE ; private static final long NEG_INF = Long . MIN_VALUE ; private static final int NEG_INT_INF = Integer . MIN_VALUE ; private static final double EPSILON = 1e-10 ;   private static final long MAX = ( long ) 1e12 ; private static final long MOD = 100000007 ;   private static final int MAXN = 100 ; private static final int MAXA = 2000007 ; private static final int MAXLOG = 22 ; private static final double PI = Math . acos ( - 1 ) ; public static void main ( String [ ] args ) throws IOException {   InputReader in = new InputReader ( System . in ) ;","  import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Scanner ; import java . util . StringTokenizer ; import java . util . * ; import java . math . * ; public class er10a {"],"bleu":0.683584920489277,"rouge_l":0.6501757334963324}
{"id":559,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int h1 = scan . nextInt ( ) ; int a1 = scan . nextInt ( ) ; int c = scan . nextInt ( ) ; int h2 = scan . nextInt ( ) ; int a2 = scan . nextInt ( ) ; int i = 0 , heal = 0 , strike = 0 ; while ( h2 > 0 ) { if ( h1 <= a2 ) { if ( h2 <= a1 ) { h2 -= a1 ; strike ++ ; } else { h1 = h1 - a2 + c ; heal ++ ; } } else { h2 -= a1 ; h1 -= a2 ; strike ++ ; } i ++ ; } System . out . println ( i ) ; for ( i = 0 ; i < heal ; i ++ ) System . out . println ( \" HEAL \" ) ; for ( i = 0 ; i < strike ; i ++ ) System . out . println ( \" STRIKE \" ) ; } }","import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int h1 , a1 , c1 , h2 , a2 ; h1 = sc . nextInt ( ) ; a1 = sc . nextInt ( ) ; c1 = sc . nextInt ( ) ; h2 = sc . nextInt ( ) ; a2 = sc . nextInt ( ) ; LinkedList < Integer > list = new LinkedList < Integer > ( ) ; int index = 0 ; while ( h2 > 0 ) { if ( h2 - a1 <= 0 ) { list . add ( 0 ) ; h2 -= a1 ; index ++ ; } else if ( h1 - a2 <= 0 ) { list . add ( 1 ) ; h1 += c1 ; index ++ ; } else { list . add ( 0 ) ; h2 -= a1 ; index ++ ; } h1 -= a2 ; } System . out . println ( index ) ; for ( int i = 0 ; i < index ; i ++ ) { if ( list . get ( i ) == 0 ) System . out . println ( \" STRIKE \" ) ; else System . out . println ( \" HEAL \" ) ; } } }  ","import java . util . Scanner ;   public class Main {   public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; long h1 = s . nextLong ( ) , a1 = s . nextLong ( ) , c = s . nextLong ( ) ; long h2 = s . nextLong ( ) , a2 = s . nextLong ( ) ; int k = 0 ; int [ ] arr = new int [ 1000000 ] ; while ( h2 > 0 ) { if ( h1 - a2 <= 0 && h2 > a1 ) { h1 += c ; arr [ k ++ ] = 2 ; } else { h2 -= a1 ; arr [ k ++ ] = 1 ; } h1 -= a2 ; } System . out . println ( k ) ; for ( int i = 0 ; i < k ; i ++ ) { System . out . println ( arr [ i ] == 1 ? \" STRIKE \" : \" HEAL \" ) ; } }   }"],"bleu":0.019761727946088402,"rouge_l":0.17313150425733206}
{"id":560,"predictions":["import java . io . * ; import java . util . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) throws java . lang . Exception { Reader pm = new Reader ( ) ;"],"references":["import java . io . * ; import java . util . * ;   public class Main {   public static void main ( String [ ] args ) throws Exception { BufferedReader in = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter out = new PrintWriter ( System . out ) ; StringTokenizer st = new StringTokenizer ( in . readLine ( ) ) ; long a = Integer . parseInt ( st . nextToken ( ) ) ; long b = Integer . parseInt ( st . nextToken ( ) ) ; long m = Integer . parseInt ( st . nextToken ( ) ) ;   a = Math . min ( m , a ) ; for ( long i = 0 ; i <= a ; i ++ ) { long q = ( m - ( ( ( long ) 1e9 * i ) % m ) ) % m ; if ( q > b ) { out . println ( \"1 ▁ \" + String . format ( \" % 09d \" , i ) ) ; out . close ( ) ; return ; } } out . println ( \"2\" ) ; out . close ( ) ; }   }","import java . util . * ; public class G { public static void main ( String args [ ] ) { Scanner scanner = new Scanner ( System . in ) ; int a = scanner . nextInt ( ) ; int b = scanner . nextInt ( ) ; int mod = scanner . nextInt ( ) ; long mult = 1000000000 % mod ; boolean found = false ;   for ( int i = 0 ; i < mod && i <= a ; i ++ ) { long diff = mod - ( i * mult ) % mod ; if ( diff > b && diff != mod ) { found = true ; String s = i + \" \" ; while ( s . length ( ) < 9 ) s = '0' + s ; System . out . println ( 1 + \" ▁ \" + s ) ; break ; } } if ( ! found ) System . out . println ( 2 ) ; } }","import java . util . Scanner ;   public class Qg { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int a = scanner . nextInt ( ) ; int b = scanner . nextInt ( ) ; int m = scanner . nextInt ( ) ; long initial = 1000000000 ; int ans = - 1 ; int lim = a < m ? a : m ; for ( int i = 0 ; i <= lim ; i ++ ) { long value = i * initial ; int rem = ( int ) ( value % m ) ; if ( ( m - rem ) % m > b ) { ans = i ; break ; } } if ( ans == - 1 ) { System . out . println ( 2 ) ; } else { System . out . printf ( \"1 ▁ % 09d \" , ans ) ; }   } }","import java . util . * ; import java . io . * ;   public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; }   void run ( FastScanner in , PrintWriter out ) { int a = in . nextInt ( ) ; int b = in . nextInt ( ) ; int mod = in . nextInt ( ) ; if ( mod <= b ) {"],"bleu":0.17525602161676032,"rouge_l":0.3907910391604551}
{"id":561,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import javax . xml . crypto . dsig . spec . XSLTTransformParameterSpec ; import java . util . * ;   public class Example { static int [ ] dp ;   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ;   int t = sc . nextInt ( ) ; while ( t > 0 ) { t -- ; int n = sc . nextInt ( ) ;","import javax . xml . crypto . dsig . spec . XSLTTransformParameterSpec ; import java . util . * ;   public class Example { static int [ ] dp ;   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ;   int t = sc . nextInt ( ) ; while ( t > 0 ) { t -- ; int n = sc . nextInt ( ) ;","import java . util . * ;   public class StackBracket { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int n = sc . nextInt ( ) ;   int [ ] ar = new int [ n ] ; for ( int j = 0 ; j < n ; j ++ ) { int num = sc . nextInt ( ) ; ar [ j ] = num ;   }   boolean check = false ; for ( int j = 0 ; j < n ; j ++ ) { for ( int p = j + 2 ; p < n ; p ++ ) { if ( ar [ p ] == ar [ j ] ) { check = true ; break ; } } } if ( check ) { System . out . println ( \" YES \" ) ; } else { System . out . println ( \" NO \" ) ; } }    }    public static int getAns ( String s , int k , int start1 , int end1 ) {","import java . util . * ;   public class StackBracket { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int n = sc . nextInt ( ) ;   int [ ] ar = new int [ n ] ; for ( int j = 0 ; j < n ; j ++ ) { int num = sc . nextInt ( ) ; ar [ j ] = num ;   }   boolean check = false ; for ( int j = 0 ; j < n ; j ++ ) { for ( int p = j + 2 ; p < n ; p ++ ) { if ( ar [ p ] == ar [ j ] ) { check = true ; break ; } } } if ( check ) { System . out . println ( \" YES \" ) ; } else { System . out . println ( \" NO \" ) ; } }    }    public static int getAns ( String s , int k , int start1 , int end1 ) {","import java . util . * ;   public class Main {   public boolean isPalindromicSubsequence ( int [ ] nums ) { if ( nums == null || nums . length < 3 ) return false ;   Map < Integer , List < Integer > > numToIndices = new HashMap < > ( ) ; for ( int i = 0 ; i < nums . length ; i ++ ) { numToIndices . putIfAbsent ( nums [ i ] , new ArrayList < > ( ) ) ; numToIndices . get ( nums [ i ] ) . add ( i ) ; }   for ( Map . Entry < Integer , List < Integer > > entry : numToIndices . entrySet ( ) ) { if ( entry . getValue ( ) . size ( ) >= 3 ) return true ; else if ( entry . getValue ( ) . size ( ) == 2 ) { if ( entry . getValue ( ) . get ( 0 ) != entry . getValue ( ) . get ( 1 ) - 1 )"],"bleu":0.1733357198760461,"rouge_l":0.40314494074749313}
{"id":562,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ; import java . lang . * ; import java . math . * ; import java . awt . image . ConvolveOp ; import java . io . * ; import java . text . DecimalFormat ; import java . lang . reflect . Array ; import java . io . BufferedOutputStream ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . math . BigDecimal ; import java . util . * ; public class Codeforces { public static PrintWriter out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; static long MOD = ( long ) ( 1e9 + 7 ) ; static FastReader sc = new FastReader ( ) ; static int pInf = Integer . MAX_VALUE ; static int nInf = Integer . MIN_VALUE ; public static void main ( String [ ] args ) { int test = 1 ;","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . ArrayList ; import java . util . StringTokenizer ;   public class CF0022B_BargainingTable { static class Scanner { BufferedReader br ; StringTokenizer st ;   public Scanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; }   String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   long nextLong ( ) { return Long . parseLong ( next ( ) ) ; }   double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; }   String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; }   }   static void print ( Object b ) { System . out . print ( b ) ; }   static void println ( Object b ) { System . out . println ( b ) ; }   static void println ( ) { System . out . println ( ) ; }   static class Node { int id ; ArrayList < Integer > connections ; int visited ;   public Node ( int i ) { id = i ; connections = new ArrayList < Integer > ( ) ; visited = - 1 ; } }   static int n ; static int m ; static boolean [ ] [ ] arr ;   static boolean check ( int firstX , int firstY , int lastX , int lastY ) { for ( int i = firstX ; i <= lastX ; i ++ ) { for ( int j = firstY ; j <= lastY ; j ++ ) { if ( ! arr [ i ] [ j ] ) return false ; } } return true ; }   public static void main ( String [ ] args ) {","import java . io . * ; import java . util . * ;   public class ProbB { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; Task solver = new Task ( ) ; solver . solve ( in , out ) ; out . close ( ) ; }","import java . util . * ; import java . awt . * ;   public class p22B { public static void main ( String args [ ] ) { Scanner in = new Scanner ( System . in ) ;   int n = in . nextInt ( ) ; int m = in . nextInt ( ) ;        char [ ] [ ] room = new char [ n ] [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { room [ i ] = in . next ( ) . toCharArray ( ) ; }   int largest = 0 ; for ( int x = 0 ; x < n ; x ++ ) { for ( int y = 0 ; y < m ; y ++ ) { for ( int x2 = x ; x2 < n ; x2 ++ ) { for ( int y2 = y ; y2 < m ; y2 ++ ) { boolean temp = false ;   search : for ( int searchX = x ; searchX <= x2 ; searchX ++ ) { for ( int searchY = y ; searchY <= y2 ; searchY ++ ) { if ( room [ searchX ] [ searchY ] == '1' ) { temp = true ; break search ; } } } if ( ! temp ) { int size = ( x2 - x + 1 + y2 - y + 1 ) * 2 ; if ( size > largest ) { largest = size ; } } } } } } System . out . println ( largest ) ;               } }","import java . util . * ; import java . io . * ; import java . math . * ;   public class x22B { public static void main ( String hi [ ] ) throws Exception { BufferedReader infile = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( infile . readLine ( ) ) ; int N = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; char [ ] [ ] grid = new char [ N ] [ M ] ; for ( int r = 0 ; r < N ; r ++ ) grid [ r ] = infile . readLine ( ) . toCharArray ( ) ;"],"bleu":0.4250249121819838,"rouge_l":0.42039552536955643}
{"id":563,"predictions":["import java . io . * ; import java . util . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) throws java . lang . Exception { Reader pm = new Reader ( ) ;"],"references":["import java . util . * ; import java . awt . Point ; import java . lang . Math ; import java . util . Arrays ; import java . util . Scanner ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . io . OutputStream ; import java . util . Comparator ; import java . math . BigInteger ; import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . util . stream . IntStream ; import java . io . IOException ; import java . util . ArrayList ; import java . math . BigInteger ; import java . util . Collections ; import java . util . StringTokenizer ; public class S { public static void main ( String [ ] args ) throws java . lang . Exception { FastScanner in = new FastScanner ( ) ; int t = in . ni ( ) ; while ( t -- > 0 ) { long n = in . nl ( ) ; long k = in . nl ( ) ; if ( n % 2 == 0 ) { n += ( 2 * k ) ; } else { long d = 0 ; while ( k > 0 ) { d = div ( n ) ; n += d ; k -- ; if ( n % 2 == 0 ) { break ; } } n = k > 0 ? n + ( 2 * k ) : n ; } System . out . println ( n ) ; } } static long div ( long n ) { long s = 3 ; while ( n % s != 0 ) { s ++ ; } return s ; } static class sortByFirst implements Comparator < Pair > {   public int compare ( Pair a , Pair b ) { return a . x - b . x ; } } static class Pair { int x ; int y ;   public Pair ( int a , int b ) { this . x = a ; this . y = b ; } }  ","import java . util . * ; import java . io . * ;   public class CFA { BufferedReader br ; PrintWriter out ; StringTokenizer st ; boolean eof ; private static final long MOD = 1000L * 1000L * 1000L + 7 ; private static final int [ ] dx = { 0 , - 1 , 0 , 1 } ; private static final int [ ] dy = { 1 , 0 , - 1 , 0 } ; private static final String yes = \" Yes \" ; private static final String no = \" No \" ;   void solve ( ) { int T = nextInt ( ) ;","import java . util . * ; import java . io . * ; import java . math . BigInteger ;   public class cp { public static void main ( String [ ] args ) throws IOException {   BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int times = Integer . parseInt ( br . readLine ( ) ) ;   while ( times > 0 ) { String input = br . readLine ( ) ; StringTokenizer st = new StringTokenizer ( input ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ;  ","import java . util . ArrayList ; import java . util . Collections ; import java . util . Scanner ;   public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int t = scan . nextInt ( ) ; while ( t -- > 0 ) { long n = scan . nextLong ( ) ; long k = scan . nextLong ( ) ; if ( n % 2 == 0 ) { System . out . println ( n + 2 * k ) ; } else { System . out . println ( n + 2 * ( k - 1 ) + f ( n ) ) ; } } }   public static long f ( long val ) { for ( int i = 2 ; i <= val ; i ++ ) if ( val % i == 0 ) return i ; return val ; } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . StringTokenizer ; public class OracAndFactors { public static void main ( String [ ] args ) { FastScanner fs = new FastScanner ( ) ; int T = fs . nextInt ( ) ; PrintWriter out = new PrintWriter ( System . out ) ; for ( int tt = 0 ; tt < T ; tt ++ ) { int n = fs . nextInt ( ) ; int k = fs . nextInt ( ) ; for ( int j = 1 ; j <= k ; j ++ ) { if ( n % 2 == 0 ) { n = n + ( ( k - j + 1 ) * 2 ) ; break ; } for ( int i = 2 ; i <= n ; i ++ ) { if ( n % i == 0 ) { n += i ; break ; } } } out . println ( n ) ; } out . close ( ) ; } static class FastScanner { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( \" \" ) ; public String next ( ) { while ( ! st . hasMoreElements ( ) ) try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return st . nextToken ( ) ; } int [ ] readArray ( int n ) { int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = nextInt ( ) ; return a ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } } }"],"bleu":0.23645418714331565,"rouge_l":0.43363973019441876}
{"id":564,"predictions":["import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;"],"references":["import java . util . * ; import java . io . * ;   public class Main { public static void main ( String [ ] args ) throws IOException , InterruptedException { Scanner sc = new Scanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; int n = sc . nextInt ( ) ; int h = sc . nextInt ( ) ; for ( int i = 1 ; i < n ; i ++ ) out . print ( h * Math . sqrt ( 1.0 * i \/ n ) + \" ▁ \" ) ; out . close ( ) ; }   static class Scanner { StringTokenizer st ; BufferedReader br ;   public Scanner ( InputStream s ) { br = new BufferedReader ( new InputStreamReader ( s ) ) ; }   public Scanner ( String s ) throws FileNotFoundException { br = new BufferedReader ( new FileReader ( s ) ) ; }   public String next ( ) throws IOException { while ( st == null || ! st . hasMoreTokens ( ) ) st = new StringTokenizer ( br . readLine ( ) ) ; return st . nextToken ( ) ; }   public int nextInt ( ) throws IOException { return Integer . parseInt ( next ( ) ) ; }   public int [ ] nextIntArray ( int n ) throws IOException { int [ ] ans = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) ans [ i ] = nextInt ( ) ; return ans ; }   public long nextLong ( ) throws IOException { return Long . parseLong ( next ( ) ) ; }   public String nextLine ( ) throws IOException { return br . readLine ( ) ; }   public double nextDouble ( ) throws IOException { return Double . parseDouble ( next ( ) ) ; }   public boolean ready ( ) throws IOException { return br . ready ( ) ; }   } }","import java . io . * ; import java . util . * ;   public class Main { static void main ( ) throws Exception { int n = sc . nextInt ( ) , h = sc . nextInt ( ) ; double totArea = h \/ 2.0 ; double x = totArea \/ n ; for ( int i = 1 ; i < n ; i ++ ) { double wantedArea = x * i ; double curH = Math . sqrt ( 2.0 * h * wantedArea ) ; pw . print ( curH + \" ▁ \" ) ; } } public static void main ( String [ ] args ) throws Exception { sc = new MScanner ( System . in ) ; pw = new PrintWriter ( System . out ) ; int tc = 1 ;","import java . io . * ; import java . math . * ; import java . security . * ; import java . text . * ; import java . util . * ;    public class CodeForce { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringBuilder sb = new StringBuilder ( ) ;","import java . util . Scanner ;   public class Main {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; double n = sc . nextInt ( ) ; double h = sc . nextDouble ( ) ; double b = 1 ; double a = ( b * h ) \/ ( 2 * n ) ; double t = Math . atan2 ( h , 0.5 ) ; for ( int m = 1 ; m <= n - 1 ; m ++ ) { double ax = m * a ; double ans = Math . sqrt ( ax * Math . tan ( t ) ) ; System . out . print ( ans + \" ▁ \" ) ; } } }  "],"bleu":0.2758056728477978,"rouge_l":0.4833597464342314}
{"id":565,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . Scanner ; public class Solution { public static void main ( String [ ] args ) { int n , m ; Scanner sc = new Scanner ( System . in ) ; n = sc . nextInt ( ) ; m = sc . nextInt ( ) ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= m ; j ++ ) { if ( i % 4 == 0 && j == 1 ) { System . out . print ( \" # \" ) ; } else if ( i % 4 == 0 ) { System . out . print ( \" . \" ) ; } else if ( i % 2 == 0 && j == m ) { System . out . print ( \" # \" ) ; } else if ( i % 2 == 0 ) { System . out . print ( \" . \" ) ; } else System . out . print ( \" # \" ) ; } System . out . println ( ) ; } } }","import java . util . * ; import java . io . * ;   public class Fox_And_Snake {   static class FastReader { BufferedReader br ; StringTokenizer st ;   public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; }   String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   long nextLong ( ) { return Long . parseLong ( next ( ) ) ; }   double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; }   String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; }   }   public static void shuffle ( int [ ] a ) { Random r = new Random ( ) ;   for ( int i = 0 ; i <= a . length - 2 ; i ++ ) { int j = i + r . nextInt ( a . length - i ) ;   swap ( a , i , j ) ; }   Arrays . sort ( a ) ; }   public static void swap ( int [ ] a , int i , int j ) { int temp = a [ i ] ; a [ i ] = a [ j ] ; a [ j ] = temp ; }   public static void main ( String [ ] args ) {","import java . util . * ;   public class JavaApplication116 { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int m = in . nextInt ( ) ; int n = in . nextInt ( ) ; for ( int i = 1 ; i <= m ; ++ i ) { for ( int j = 1 ; j <= n ; ++ j ) { if ( i % 2 == 1 ) { if ( j == n ) { System . out . print ( \" # \\n \" ) ; } else { System . out . print ( \" # \" ) ; } } else if ( i % 4 == 0 ) { if ( j == 1 ) { System . out . print ( \" # \" ) ; } else if ( j == n ) { System . out . print ( \" . \\n \" ) ; } else { System . out . print ( \" . \" ) ; } } else { if ( j == n ) { System . out . print ( \" # \\n \" ) ; } else { System . out . print ( \" . \" ) ; } } } } } }","import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; for ( int i = 1 ; i <= a ; i ++ ) { if ( i % 2 == 0 ) { if ( i % 4 == 0 ) { System . out . print ( \" # \" ) ; for ( int j = 0 ; j < b - 1 ; j ++ ) { System . out . print ( \" . \" ) ; } } else if ( i % 2 == 0 ) {","import java . util . * ; public class Snake { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= m ; j ++ ) { boolean haveSnake = false ; if ( i % 2 == 1 ) haveSnake = true ; else { if ( i % 4 == 2 ) haveSnake = ( j == m ) ; if ( i % 4 == 0 ) haveSnake = ( j == 1 ) ; } System . out . print ( haveSnake ? \" # \" : \" . \" ) ; } System . out . println ( ) ; } } }"],"bleu":0.07890713917925081,"rouge_l":0.2292626474154084}
{"id":566,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ; import java . io . * ;   public class CFA { BufferedReader br ; PrintWriter out ; StringTokenizer st ; boolean eof ; private static final long MOD = 1000L * 1000L * 1000L + 7 ; private static final int [ ] dx = { 0 , - 1 , 0 , 1 } ; private static final int [ ] dy = { 1 , 0 , - 1 , 0 } ; private static final String yes = \" Yes \" ; private static final String no = \" No \" ;   void solve ( ) {","import java . util . * ; import java . io . * ; import java . text . * ;   public class Main {"],"bleu":0.32908618163381126,"rouge_l":0.6301652892561983}
{"id":567,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ;   public class Reposts_522A { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int n = Integer . parseInt ( br . readLine ( ) ) ;   Map < String , List < String > > adj = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { String [ ] l = br . readLine ( ) . split ( \" \\\\ s \" ) ; String a = l [ 0 ] . toLowerCase ( ) ; String b = l [ 2 ] . toLowerCase ( ) ; if ( ! adj . containsKey ( a ) ) { adj . put ( a , new ArrayList < > ( ) ) ; } if ( ! adj . containsKey ( b ) ) { adj . put ( b , new ArrayList < > ( ) ) ; } adj . get ( b ) . add ( a ) ;","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ;   public class Reposts_522A { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int n = Integer . parseInt ( br . readLine ( ) ) ;   Map < String , List < String > > adj = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { String [ ] l = br . readLine ( ) . split ( \" \\\\ s \" ) ; String a = l [ 0 ] . toLowerCase ( ) ; String b = l [ 2 ] . toLowerCase ( ) ; if ( ! adj . containsKey ( a ) ) { adj . put ( a , new ArrayList < > ( ) ) ; } if ( ! adj . containsKey ( b ) ) { adj . put ( b , new ArrayList < > ( ) ) ; } adj . get ( b ) . add ( a ) ; adj . get ( a ) . add ( b ) ; } Map < String , Integer > max = new HashMap < > ( ) ; System . out . println ( dfs ( \" polycarp \" , adj , new HashMap < > ( ) ) ) ; }    static int dfs ( String start , Map < String , List < String > > adj , Map < String , Boolean > vis ) { if ( vis . containsKey ( start ) ) return 0 ; vis . put ( start , true ) ; int dist = 0 ; List < String > edges = adj . get ( start ) ; if ( edges == null ) return dist + 1 ; for ( String s : edges ) { dist = Math . max ( dfs ( s , adj , vis ) , dist ) ; } return dist + 1 ; } }","  import java . util . * ; import java . lang . * ; import java . io . * ;   public class Solution { public static void main ( String [ ] args ) throws java . lang . Exception { int n ; Scanner input = new Scanner ( System . in ) ; n = input . nextInt ( ) ; String s ; HashMap < String , Integer > m = new HashMap < String , Integer > ( ) ; m . put ( \" polycarp \" , 1 ) ; s = input . nextLine ( ) ; for ( int i = 0 ; i < n ; i ++ ) { s = input . nextLine ( ) ;","import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . PrintStream ; import java . util . HashMap ; import java . util . Map ; import java . util . Scanner ;   public class Main {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( new BufferedReader ( new InputStreamReader ( System . in ) ) ) ; PrintStream ps = System . out ; int n = sc . nextInt ( ) ; Map < String , Integer > map = new HashMap < String , Integer > ( ) ; map . put ( \" Polycarp \" . toUpperCase ( ) , 1 ) ; int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { String a = sc . next ( ) . toUpperCase ( ) ; sc . next ( ) ; String b = sc . next ( ) . toUpperCase ( ) ;","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . ArrayList ; import java . util . HashMap ; import java . util . StringTokenizer ;   public class Main { static InputReader in ; static PrintWriter out ; public static void main ( String [ ] args ) throws IOException {"],"bleu":0.4090720824754983,"rouge_l":0.5500704072790296}
{"id":568,"predictions":["import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;"],"references":["import java . util . * ; import java . lang . * ; import java . io . * ; public class Main { PrintWriter out ; FastReader sc ; long mod = ( long ) ( 1e9 + 7 ) ; long maxlong = Long . MAX_VALUE ; long minlong = Long . MIN_VALUE ; public void sol ( ) { int n = ni ( ) ; String [ ] s = new String [ n ] ; HashMap < String , ArrayList < Integer > > h = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { s [ i ] = rl1 ( ) ; if ( h . get ( s [ i ] ) == null ) { ArrayList < Integer > list = new ArrayList < > ( ) ; list . add ( i ) ; h . put ( s [ i ] , list ) ; } else { h . get ( s [ i ] ) . add ( i ) ; } } int ans = 0 ; String [ ] ss = new String [ n ] ; HashSet < Character > has = new HashSet < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { has . add ( s [ i ] . charAt ( 0 ) ) ; }","import java . util . Scanner ; import java . util . HashMap ; public class Main { public static void main ( String args [ ] ) { Scanner s = new Scanner ( System . in ) ; int t = s . nextInt ( ) ; while ( t -- != 0 ) { int n = s . nextInt ( ) ; String arr [ ] = new String [ n ] ; HashMap < String , Integer > map = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = s . next ( ) ; map . put ( arr [ i ] , map . getOrDefault ( arr [ i ] , 0 ) + 1 ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( map . get ( arr [ i ] ) > 1 ) { char a [ ] = arr [ i ] . toCharArray ( ) ; boolean flag = false ; for ( int j = 9 ; j >= 0 ; j -- ) { a [ 3 ] = ( char ) ( '0' + j ) ; if ( ! map . containsKey ( String . valueOf ( a ) ) ) { map . put ( arr [ i ] , map . get ( arr [ i ] ) - 1 ) ; arr [ i ] = String . valueOf ( a ) ; map . put ( arr [ i ] , 1 ) ; flag = true ; break ; } } if ( ! flag ) { a = arr [ i ] . toCharArray ( ) ; for ( int j = 9 ; j >= 0 ; j -- ) { a [ 2 ] = ( char ) ( '0' + j ) ; if ( ! map . containsKey ( String . valueOf ( a ) ) ) { map . put ( arr [ i ] , map . get ( arr [ i ] ) - 1 ) ; arr [ i ] = String . valueOf ( a ) ; map . put ( arr [ i ] , 1 ) ; } } } count ++ ; } } System . out . println ( count ) ; for ( String str : arr ) { System . out . println ( str ) ; } } } }","import java . util . * ; public class Contest8 { static Scanner scn = new Scanner ( System . in ) ;   public static void main ( String [ ] args ) { int t = scn . nextInt ( ) ; while ( t -- > 0 ) { int n = scn . nextInt ( ) ; String [ ] strs = new String [ n ] ; for ( int i = 0 ; i < n ; i ++ ) strs [ i ] = scn . next ( ) ; List < String > ans = new ArrayList < > ( ) ; HashSet < String > set = new HashSet < > ( ) ; boolean [ ] firstDigs = new boolean [ 10 ] ; boolean [ ] notUnique = new boolean [ n ] ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { String str = strs [ i ] ; if ( ! set . contains ( str ) ) { set . add ( str ) ; firstDigs [ str . charAt ( 0 ) - '0' ] = true ; } else { count ++ ; notUnique [ i ] = true ; } } for ( int i = 0 ; i < n ; i ++ ) { String str = strs [ i ] ; if ( notUnique [ i ] ) { str = newPIN ( str , firstDigs ) ; } ans . add ( str ) ; } System . out . println ( count ) ; for ( String s : ans ) System . out . println ( s ) ; } } public static String newPIN ( String str , boolean [ ] firstDigs ) { int val = 0 ; for ( int i = 0 ; i < 10 ; i ++ ) { if ( ! firstDigs [ i ] ) { val = i ; firstDigs [ i ] = true ; break ; } } String newstr = val + str . substring ( 1 , str . length ( ) ) ; return newstr ; } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ;   import java . util . * ;   public class Main {   public static void main ( String args [ ] ) { FastScanner input = new FastScanner ( ) ; int tc = input . nextInt ( ) ; while ( tc -- > 0 ) { int n = input . nextInt ( ) ; ArrayList < String > s = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { s . add ( input . next ( ) ) ; } int count = 0 ; for ( int k = 0 ; k < n ; k ++ ) { String temp = s . get ( k ) ; s . remove ( k ) ;"],"bleu":0.05557812584971974,"rouge_l":0.24713031735313973}
{"id":569,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . StringTokenizer ;   public class VisitingAFriend { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter pw = new PrintWriter ( System . out ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int m = Integer . parseInt ( st . nextToken ( ) ) ; boolean reachable [ ] = new boolean [ 101 ] ; reachable [ 0 ] = true ; for ( int i = 0 ; i < n ; i ++ ) { st = new StringTokenizer ( br . readLine ( ) ) ; int a = Integer . parseInt ( st . nextToken ( ) ) ; int b = Integer . parseInt ( st . nextToken ( ) ) ; for ( int j = a + 1 ; j <= b ; j ++ ) reachable [ j ] = true ; } for ( int i = 0 ; i <= m ; i ++ ) { if ( ! reachable [ i ] ) { pw . print ( \" NO \" ) ; pw . flush ( ) ; pw . close ( ) ; return ; } }   pw . print ( \" YES \" ) ; pw . flush ( ) ; pw . close ( ) ; } }","import java . util . * ;   public class Main { static Scanner entrée = new Scanner ( System . in ) ;   public static void main ( String [ ] args ) { int li = 0 ; int li2 = 0 ; int n = entrée . nextInt ( ) ; int m = entrée . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int a = entrée . nextInt ( ) ; int b = entrée . nextInt ( ) ; if ( li2 <= b && li2 >= a ) { li = a ; li2 = b ; } } if ( li2 >= m ) { System . out . println ( \" YES \" ) ; } else { System . out . println ( \" NO \" ) ; }   } }","import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;  ","import java . lang . * ; import java . util . * ; import java . util . stream . Collectors ; import java . io . * ;   public class absolute { static int [ ] ispossible ; static boolean ans ; public static boolean visit ( int mat [ ] [ ] , int ind , int dest ) { if ( dest >= mat [ ind ] [ 0 ] && dest <= mat [ ind ] [ 1 ] ) { ans = true ; return true ; } if ( ispossible [ ind ] != 0 ) return ispossible [ ind ] == 1 ; boolean possible = false ; for ( int i = ind + 1 ; i < mat . length ; i ++ ) { if ( mat [ i ] [ 0 ] >= mat [ ind ] [ 0 ] && mat [ i ] [ 0 ] <= mat [ ind ] [ 1 ] && ispossible [ i ] == 0 ) possible |= visit ( mat , i , dest ) ; } ispossible [ ind ] = ( possible ) ? 1 : - 1 ; return possible ; } public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] [ ] mat = new int [ n ] [ 2 ] ; ispossible = new int [ n ] ; ans = false ; for ( int i = 0 ; i < n ; i ++ ) { mat [ i ] [ 0 ] = sc . nextInt ( ) ; mat [ i ] [ 1 ] = sc . nextInt ( ) ; } boolean possible = false ; if ( mat [ 0 ] [ 0 ] <= 0 && mat [ 0 ] [ 0 ] >= 0 ) possible = visit ( mat , 0 , m ) ; if ( possible ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ; } }"],"bleu":0.6443597107874961,"rouge_l":0.6842284160435078}
{"id":570,"predictions":["import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;"],"references":["import java . util . * ; public class StackBracket { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; List < Integer > list = new ArrayList < > ( ) ; int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) {","  import java . util . HashSet ; import java . util . Scanner ; import java . util . Set ;   public class Problem753A {   public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; int n = s . nextInt ( ) ; Set < Integer > set = new HashSet < > ( ) ; fn ( n , set ) ; System . out . println ( set . size ( ) ) ; set . stream ( ) . forEach ( c -> System . out . print ( c + \" ▁ \" ) ) ; }   private static boolean fn ( int n , Set < Integer > set ) { if ( n < 0 ) return false ; if ( n == 0 ) return true ; int val = 1 ; while ( val <= n ) { if ( ! set . contains ( val ) ) { set . add ( val ) ; if ( fn ( n - val , set ) ) return true ; else { set . remove ( val ) ; } } val ++ ; } return false ; }   }","import java . util . * ;   public class Solution { private static Scanner scan = new Scanner ( System . in ) ;   public static void main ( String args [ ] ) { int n = scan . nextInt ( ) ; int i = 1 ; List < Integer > list = new ArrayList < > ( ) ; while ( n >= i ) { list . add ( i ) ; n -= i ; i ++ ; } System . out . println ( list . size ( ) ) ; for ( i = 0 ; i < list . size ( ) - 1 ; i ++ ) { System . out . print ( list . get ( i ) + \" ▁ \" ) ; } System . out . println ( list . get ( i ) + n ) ; } }              ","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ;"],"bleu":0.6699595943732544,"rouge_l":0.782051282051282}
{"id":571,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . StringTokenizer ; public class Cv {"],"references":["import java . util . * ; import java . util . Map . Entry ;    import java . io . * ; import java . math . * ; import static java . util . stream . Collectors . * ; import static java . util . Map . Entry . * ;   public class Main { static int k ; public static void main ( String [ ] args ) throws IOException { final long mod = ( long ) ( 1e9 + 7 ) ; Reader s = new Reader ( ) ; PrintWriter pt = new PrintWriter ( System . out ) ;","import java . util . * ; import java . io . * ; public class A { public static void main ( String args [ ] ) { FastScanner in = new FastScanner ( ) ; int b = in . nextInt ( ) ; int k = in . nextInt ( ) ; int a [ ] = in . nextArray ( k ) ; int sum = 0 ; for ( int i = 0 ; i < k - 1 ; i ++ ) { if ( b % 2 == 0 || a [ i ] % 2 == 0 ) continue ; else sum ++ ; } sum = sum + a [ k - 1 ] ; if ( sum % 2 == 0 ) System . out . println ( \" even \" ) ; else System . out . println ( \" odd \" ) ; }  ","import java . math . BigInteger ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int b , k , odd ; odd = 0 ; b = input . nextInt ( ) ; k = input . nextInt ( ) ; if ( b % 2 == 0 ) { for ( int i = 1 ; i < k ; i ++ ) { input . nextInt ( ) ; } System . out . println ( input . nextInt ( ) % 2 == 0 ? \" even \" : \" odd \" ) ; } else { for ( int i = 0 ; i < k ; i ++ ) if ( input . nextInt ( ) % 2 != 0 ) odd ++ ; System . out . println ( odd % 2 == 0 ? \" even \" : \" odd \" ) ; } } }","import java . util . Scanner ;   public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int b = scan . nextInt ( ) ; int k = scan . nextInt ( ) ; int [ ] a = new int [ k ] ;   for ( int i = 0 ; i < k ; i ++ ) { a [ i ] = scan . nextInt ( ) ; } long sum = 0 ; for ( int i = 0 ; i < k ; i ++ ) { if ( i == k - 1 ) { sum += a [ i ] ; } else { sum += a [ i ] * b ; } } System . out . println ( sum % 2 == 0 ? \" even \" : \" odd \" ) ; } }","import java . util . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;   public class a { static int [ ] count , count1 , count2 ; static int [ ] arr ; static char [ ] ch , ch1 ; static int [ ] darr , farr ; static Character [ ] [ ] mat , mat1 ; static int x , h ; static long maxl ; static double dec ; static String s ; static long minl ; static int mx = ( int ) 1e6 ; static long mod = 998244353l ;"],"bleu":0.1480830746006291,"rouge_l":0.38277239018824877}
{"id":572,"predictions":["import java . util . * ; import java . io . * ; import java . math . BigInteger ; import java . text . * ; public class Main { static long mod = 1000_000_007 ; static long mod1 = 998244353 ; static boolean fileIO = false ; static boolean memory = true ; static FastScanner f ; static PrintWriter pw ; static double eps = ( double ) 1e-6 ; static long oo = Long . MAX_VALUE ;"],"references":["import java . io . * ; import java . util . * ; public class Asd { static PrintWriter w = new PrintWriter ( System . out ) ; static FastScanner s = new FastScanner ( ) ; static HashSet < Long > list = new HashSet < > ( ) ; public static void main ( String [ ] args ) {","import java . io . BufferedWriter ; import java . io . ByteArrayInputStream ; import java . io . FileInputStream ; import java . io . FileWriter ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . Arrays ; import java . util . HashMap ; import java . util . InputMismatchException ; import java . util . Map ;   public class Main { private static final long MOD = ( long ) 1e9 + 7 ; static InputStream is ; static PrintWriter out ; static String INPUT = \" \" ; static int lenbuf = 0 , ptrbuf = 0 ; static boolean readFile = false ;","import java . util . Scanner ;   public class Task236B_ { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int sum = 0 ; int [ ] a = new int [ ] { scanner . nextInt ( ) , scanner . nextInt ( ) , scanner . nextInt ( ) } ;   int max = a [ 0 ] * a [ 1 ] * a [ 2 ] ; int [ ] arr = new int [ max + 1 ] ; fillDivisors ( max , arr ) ; for ( int i = 1 ; i <= a [ 0 ] ; i ++ ) { for ( int j = 1 ; j <= a [ 1 ] ; j ++ ) { for ( int k = 1 ; k <= a [ 2 ] ; k ++ ) { sum += arr [ i * j * k ] ; } } } System . out . println ( sum % 1073741824 ) ; }   private static int [ ] fillDivisors ( int max , int [ ] arr ) { for ( int i = 1 ; i <= max ; i ++ ) { for ( int j = i ; j <= max ; j += i ) { arr [ j ] ++ ; } } return arr ; } }"],"bleu":0.3900879894197044,"rouge_l":0.47782215276571943}
{"id":573,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException {"],"references":["import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;  ","import java . io . FileInputStream ; import java . io . FileNotFoundException ; import java . io . IOException ; import java . io . PrintWriter ; import java . util . Arrays ; import java . util . Collection ; import java . util . List ; import java . util . Scanner ; import java . util . function . Function ; import java . util . stream . Collectors ; public class _p000976A { static public void main ( final String [ ] args ) throws IOException { p000976A . _main ( args ) ; }"],"bleu":0.5052351000384782,"rouge_l":0.41277399703109635}
{"id":574,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException {"],"references":["    import java . io . * ; import java . util . ArrayDeque ; import java . util . Arrays ; import java . util . InputMismatchException ; import java . util . Queue ; import java . io . * ; import java . lang . reflect . Array ; import java . math . BigInteger ; import java . util . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . util . Collections ; import java . io . InputStreamReader ; import java . util . logging . SimpleFormatter ;    public class Main1 {  ","import java . io . * ; import java . util . * ; public class Solution { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long n = sc . nextLong ( ) , k = sc . nextLong ( ) ; List < Long > allFactors = getFactors ( n ) ; if ( allFactors . size ( ) < k ) { System . out . println ( \" - 1\" ) ; } else { Collections . sort ( allFactors ) ; System . out . println ( allFactors . get ( ( int ) k - 1 ) ) ; } } public static List < Long > getFactors ( long num ) { List < Long > allFactors = new ArrayList ( ) ; for ( long l = 1 ; l <= ( long ) Math . sqrt ( num ) ; l ++ ) { if ( num % l == 0 ) { allFactors . add ( l ) ; if ( ( num \/ l ) != l ) { allFactors . add ( num \/ l ) ; } } } return allFactors ; } }","import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { InpRead input = new InpRead ( ) ; PrintWriter out = new PrintWriter ( new OutputStreamWriter ( System . out ) ) ;   long n = input . nextLong ( ) , k = input . nextLong ( ) ; List < Long > Div = Divisors ( n ) ; Collections . sort ( Div ) ; if ( Div . size ( ) < k ) out . println ( - 1 ) ; else { out . println ( Div . get ( ( int ) ( k - 1 ) ) ) ; } out . close ( ) ; }   public static List < Long > Divisors ( long n ) { List < Long > Div = new ArrayList < > ( ) ; for ( long i = 1 ; i * i <= n ; i ++ ) { if ( n % i == 0 ) { long j = n \/ i ; Div . add ( i ) ; if ( i != j ) Div . add ( j ) ; }   } return Div ; }   }    class InpRead { BufferedReader Br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( \" \" ) ;   public String next ( ) { while ( ! st . hasMoreTokens ( ) ) { try { st = new StringTokenizer ( Br . readLine ( ) ) ; } catch ( IOException ex ) { ex . printStackTrace ( ) ; } } return st . nextToken ( ) ; }  ","import java . util . ArrayList ; import java . util . Collections ; import java . util . Scanner ;   public class Main {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long n = sc . nextLong ( ) ; int k = sc . nextInt ( ) ; ArrayList < Long > divisor = new ArrayList < Long > ( ) ; for ( long i = 1 ; i * i <= n ; i ++ ) { if ( n % i == 0 ) { divisor . add ( i ) ; if ( i * i != n ) divisor . add ( n \/ i ) ; } } if ( k > divisor . size ( ) ) { System . out . println ( - 1 ) ; } else { Collections . sort ( divisor ) ; System . out . println ( divisor . get ( k - 1 ) ) ; } }   }  "],"bleu":0.08156315598483566,"rouge_l":0.23597487139060686}
{"id":575,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . Scanner ;   public class problem102 {   public static void main ( String [ ] args ) {","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . math . BigInteger ; import java . util . * ; import static java . util . Arrays . sort ; import javafx . util . Pair ;   public class Main { static int colors ; static int min = Integer . MAX_VALUE ; public static int largestDigit ( int a [ ] ) { for ( int i = 9 ; i >= 1 ; i -- ) { if ( a [ i ] <= ( min + colors ) ) { colors -= ( a [ i ] - min ) ; return i ; } } return 0 ; }   public static void main ( String [ ] args ) {   FastScanner input = new FastScanner ( ) ; String x = input . next ( ) ; String z = input . next ( ) ; String y = \" \" ; for ( int i = 0 ; i < x . length ( ) ; i ++ ) { if ( x . charAt ( i ) < z . charAt ( i ) ) { System . out . println ( \" - 1\" ) ; return ; } else { y += ( z . charAt ( i ) + \" \" ) ; } } System . out . println ( y ) ;   }   static class FastScanner {   BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( \" \" ) ;   String next ( ) { while ( ! st . hasMoreTokens ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   long nextLong ( ) {   return Long . parseLong ( next ( ) ) ; }   double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; }   String nextLine ( ) throws IOException { return br . readLine ( ) ; } }   }","import java . util . * ; public class M_Round_4 { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String x = sc . next ( ) ; String y = sc . next ( ) ; StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < x . length ( ) ; i ++ ) { char c1 = x . charAt ( i ) ; char c2 = y . charAt ( i ) ; if ( c1 < c2 ) { System . out . println ( - 1 ) ; System . exit ( 0 ) ; } else if ( c1 == c2 ) sb . append ( c1 ) ; else if ( c1 > c2 ) sb . append ( c2 ) ; } System . out . println ( sb ) ; } }","import java . io . * ; import java . util . * ;   import static java . lang . Math . * ;   public class ValuedKeys {"],"bleu":0.7338870242065599,"rouge_l":0.7624999999999998}
{"id":576,"predictions":["import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;"],"references":["import java . io . BufferedReader ; import java . io . File ; import java . io . FileInputStream ; import java . io . FileNotFoundException ; import java . io . IOException ; import java . io . InputStreamReader ; import java . nio . file . Paths ; import java . util . ArrayList ; import java . util . List ; import java . util . Stack ; import java . util . StringTokenizer ;   public class Main {   public Main ( ) throws FileNotFoundException {  ","import java . util . * ; import java . math . * ; public class AccurateLee { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int runs = sc . nextInt ( ) ; while ( runs -- > 0 ) { int size = sc . nextInt ( ) ; String in = sc . next ( ) ; char [ ] arr = in . toCharArray ( ) ; boolean one = false ; boolean zero = false ; int index = 0 ; if ( arr . length == 1 ) System . out . println ( in ) ; else { int before = 0 ; boolean b = false ; int after = 0 ; int temp = 0 ; boolean z = false ; for ( int i = 0 ; i < arr . length ; i ++ ) { if ( ! b ) { if ( arr [ i ] == '1' ) { before = temp ; temp = 0 ; b = true ; after ++ ; } else temp ++ ; } else { if ( arr [ i ] == '0' ) { after = 0 ; z = true ; } else after ++ ; }   } if ( b == false ) before = temp ;","import java . util . * ; public class AccurateLee {   public static void main ( String [ ] args ) {","  import java . util . * ; import java . io . * ; import java . io . FileInputStream ; import java . io . IOException ; import java . io . InputStreamReader ;  \t\t   public class sol { public static void backtrack ( List < List < Integer > > list , List < Integer > templist , int [ ] nums ) { if ( templist . size ( ) == nums . length ) { list . add ( new ArrayList < > ( templist ) ) ; } else { for ( int i = 0 ; i < nums . length ; i ++ ) { if ( templist . contains ( nums [ i ] ) ) continue ; templist . add ( nums [ i ] ) ; backtrack ( list , templist , nums ) ; templist . remove ( templist . size ( ) - 1 ) ; } } } public static List < List < Integer > > permute ( int [ ] nums ) { List < List < Integer > > list = new ArrayList < > ( ) ; backtrack ( list , new ArrayList < > ( ) , nums ) ; return list ; } static int LCSubStr ( String s , String t , int n , int m ) {  "],"bleu":1.0,"rouge_l":0.5131878126421101}
{"id":577,"predictions":["import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;"],"references":["import java . util . Scanner ;   public class SastaCoder { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ;   int [ ] m = new int [ 5 ] ; int [ ] w = new int [ 5 ] ;   for ( int i = 0 ; i < 5 ; i ++ ) m [ i ] = scan . nextInt ( ) ; for ( int i = 0 ; i < 5 ; i ++ ) w [ i ] = scan . nextInt ( ) ;   int sum = 0 ; for ( int i = 0 ; i < 5 ; i ++ ) { sum += Math . max ( 150 * ( i + 1 ) , ( 250 - m [ i ] ) * 2 * ( i + 1 ) - 50 * w [ i ] ) ; } sum += 100 * scan . nextInt ( ) - 50 * scan . nextInt ( ) ;   System . out . println ( sum ) ; } }","import java . util . * ;   public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int m [ ] = new int [ 5 ] ; int w [ ] = new int [ 5 ] ; int x ; int y ; for ( int i = 0 ; i < 5 ; i ++ ) m [ i ] = sc . nextInt ( ) ; for ( int i = 0 ; i < 5 ; i ++ ) w [ i ] = sc . nextInt ( ) ; x = sc . nextInt ( ) ; y = sc . nextInt ( ) ; int sum = 0 ; int val = 500 ; for ( int i = 0 ; i < 5 ; i ++ ) { sum += Math . max ( ( 0.3 * val ) , ( ( ( 1.0 ) * ( 250 - m [ i ] ) ) \/ 250 ) * val - ( 50 * w [ i ] ) ) ; val += 500 ; } sum += ( x * 100 - y * 50 ) ; System . out . println ( sum ) ; } }","import java . util . * ; import java . lang . * ; import java . io . * ; public class Main { public static int mod = ( int ) Math . pow ( 10 , 9 ) + 7 ;","import java . util . * ; public class uncowed_forces {   public static void main ( String args [ ] ) { Scanner in = new Scanner ( System . in ) ; int m [ ] = new int [ 5 ] ; int w [ ] = new int [ 5 ] ; for ( int i = 0 ; i < 5 ; i ++ ) m [ i ] = in . nextInt ( ) ; for ( int i = 0 ; i < 5 ; i ++ ) w [ i ] = in . nextInt ( ) ; int hs = in . nextInt ( ) ; int hu = in . nextInt ( ) ; int p = 500 ; long ans = 0 ; for ( int i = 0 ; i < 5 ; i ++ ) { ans += Math . max ( ( int ) ( 0.3 * ( 500 * ( i + 1 ) ) ) , ( 500 * ( i + 1 ) ) - ( 2 * ( i + 1 ) ) * m [ i ] - 50 * w [ i ] ) ; } System . out . println ( ans + hs * 100 - hu * 50 ) ; } }"],"bleu":0.3975490647539421,"rouge_l":0.4863325740318907}
{"id":578,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException {"],"references":["import java . util . * ; import java . lang . * ; import java . io . * ;   public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) {","import java . util . ArrayList ; import java . util . Collections ; import java . util . Scanner ;   public class WormsEvolution {   public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; ArrayList < Integer > arr = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { arr . add ( sc . nextInt ( ) ) ; }   for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { int x = search ( arr , ( arr . get ( i ) + arr . get ( j ) ) ) ; if ( x >= 0 ) { System . out . println ( ( x + 1 ) + \" ▁ \" + ( j + 1 ) + \" ▁ \" + ( i + 1 ) ) ; return ; } } } System . out . println ( - 1 ) ; }   private static int search ( ArrayList < Integer > arr , int x ) { for ( int i = 0 ; i < arr . size ( ) ; i ++ ) { if ( x == arr . get ( i ) ) return i ; } return - 1 ; } }","import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = in . nextInt ( ) ; int flag = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { for ( int k = 0 ; k < n ; k ++ ) { if ( k != i && k != j ) { if ( a [ k ] == ( a [ i ] + a [ j ] ) ) { flag = 1 ; System . out . println ( ( k + 1 ) + \" ▁ \" + ( i + 1 ) + \" ▁ \" + ( j + 1 ) ) ; break ; } } } if ( flag == 1 ) break ; } if ( flag == 1 ) break ; } if ( flag == 0 ) System . out . println ( \" - 1\" ) ; } }","import java . io . * ; import java . util . * ;   public class WormEvolution_Edu31 { public static void main ( String [ ] args ) throws IOException { FastReader fr = new FastReader ( ) ; PrintWriter pr = new PrintWriter ( new OutputStreamWriter ( System . out ) ) ; int n = fr . nextInt ( ) ; int [ ] arr = new int [ n ] ;   for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = fr . nextInt ( ) ; }  "],"bleu":0.8510449576692258,"rouge_l":0.6358233519246593}
{"id":579,"predictions":["import java . util . * ; import java . io . * ; import java . math . BigInteger ; import java . text . * ; public class Main { static long mod = 1000_000_007 ; static long mod1 = 998244353 ; static boolean fileIO = false ; static boolean memory = true ; static FastScanner f ; static PrintWriter pw ; static double eps = ( double ) 1e-6 ; static int oo = ( int ) 2e9 ;"],"references":["import java . util . Arrays ; import java . util . Scanner ; public class B10 { static int distance ( int xc , int yc , int x , int left , int right ) { int result = 0 ; for ( int i = left ; i <= right ; i ++ ) { result += ( Math . abs ( xc - x ) + Math . abs ( yc - i ) ) ; } return result ; } public static void main ( String [ ] args ) { try ( Scanner scan = new Scanner ( System . in ) ) { int N = scan . nextInt ( ) ; int K = scan . nextInt ( ) ; int [ ] [ ] cinema = new int [ K ] [ K ] ; int xc = K \/ 2 + 1 ; int yc = xc ; int seats , min , right , left ; int [ ] request = new int [ N ] ;","import java . util . Scanner ; public class CF10B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; boolean [ ] [ ] seat = new boolean [ k ] [ k ] ; int [ ] [ ] value = new int [ k ] [ k ] ; int center = k \/ 2 ; for ( int i = 0 ; i < k ; i ++ ) { for ( int j = 0 ; j < k ; j ++ ) { value [ i ] [ j ] = Math . abs ( i - center ) + Math . abs ( j - center ) ; } } for ( int i = 0 ; i < n ; i ++ ) { int num = sc . nextInt ( ) ; int min = Integer . MAX_VALUE ; int mx = - 1 ; int ml = - 1 ; for ( int x = 0 ; x < k ; x ++ ) { for ( int l = 0 ; l < k - num + 1 ; l ++ ) { boolean ok = true ; for ( int j = l ; j < l + num ; j ++ ) { if ( seat [ x ] [ j ] ) { ok = false ; break ; } } if ( ! ok ) { continue ; } int cur = 0 ; for ( int j = l ; j < l + num ; j ++ ) { cur += value [ x ] [ j ] ; } if ( cur < min || ( cur == min && x < mx ) || ( cur == min && x == mx && l < ml ) ) { min = cur ; mx = x ; ml = l ; } } } if ( min == Integer . MAX_VALUE ) { System . out . println ( - 1 ) ; } else { System . out . println ( ( mx + 1 ) + \" ▁ \" + ( ml + 1 ) + \" ▁ \" + ( ml + num ) ) ; for ( int j = ml ; j < ml + num ; j ++ ) { seat [ mx ] [ j ] = true ; } } } sc . close ( ) ; } }","import java . util . Scanner ;   public class CF10B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; boolean [ ] [ ] seat = new boolean [ k ] [ k ] ; int [ ] [ ] value = new int [ k ] [ k ] ; int center = k \/ 2 ; for ( int i = 0 ; i < k ; i ++ ) { for ( int j = 0 ; j < k ; j ++ ) { value [ i ] [ j ] = Math . abs ( i - center ) + Math . abs ( j - center ) ; } } for ( int i = 0 ; i < n ; i ++ ) { int num = sc . nextInt ( ) ; int min = Integer . MAX_VALUE ; int mx = - 1 ; int ml = - 1 ; for ( int x = 0 ; x < k ; x ++ ) { for ( int l = 0 ; l < k - num + 1 ; l ++ ) { boolean ok = true ;   for ( int j = l ; j < l + num ; j ++ ) { if ( seat [ x ] [ j ] ) { ok = false ; break ; } } if ( ! ok ) { continue ; } int cur = 0 ; for ( int j = l ; j < l + num ; j ++ ) { cur += value [ x ] [ j ] ; } if ( cur < min || ( cur == min && x < mx ) || ( cur == min && x == mx && l < ml ) ) { min = cur ; mx = x ; ml = l ; } } } if ( min == Integer . MAX_VALUE ) { System . out . println ( - 1 ) ; } else { System . out . println ( ( mx + 1 ) + \" ▁ \" + ( ml + 1 ) + \" ▁ \" + ( ml + num ) ) ; for ( int j = ml ; j < ml + num ; j ++ ) { seat [ mx ] [ j ] = true ; } } } sc . close ( ) ; } }","import java . io . BufferedInputStream ; import java . io . BufferedOutputStream ; import java . io . BufferedReader ; import java . io . FileNotFoundException ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . OutputStreamWriter ; import java . io . PrintWriter ; import java . util . StringTokenizer ;   public class Main { public static void main ( String [ ] args ) throws FileNotFoundException , IOException { InputReader in = new InputReader ( new BufferedInputStream ( System . in ) ) ; PrintWriter out = new PrintWriter ( new OutputStreamWriter ( new BufferedOutputStream ( System . out ) ) ) ; TaskB solver = new TaskB ( ) ; long t1 = System . currentTimeMillis ( ) ; solver . solve ( 1 , in , out ) ; out . flush ( ) ; long t2 = System . currentTimeMillis ( ) ;"],"bleu":0.09919651398819654,"rouge_l":0.3177871495906723}
{"id":580,"predictions":["import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;"],"references":["import java . util . Scanner ;   public class Fafa_And_His_Company {   public static void main ( String [ ] args ) {   Scanner in = new Scanner ( System . in ) ;   int n = in . nextInt ( ) ;","import java . io . IOException ; import java . util . Scanner ;   public class fafa { public static void main ( String [ ] args ) throws IOException { Scanner scanner = new Scanner ( System . in ) ; int m = scanner . nextInt ( ) ; int count = 0 ; for ( int i = 1 ; i <= m \/ 2 ; i ++ ) { if ( ( m - i ) % i == 0 ) { count += 1 ; } } System . out . print ( count ) ; }   }","import java . util . Scanner ;   public class Singleton_Pattern { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; sc . nextLine ( ) ; int res = 0 ; int l = 1 ; while ( l <= n \/ 2 ) { if ( n % l == 0 ) res ++ ; l = l + 1 ; } System . out . println ( res ) ; } }"],"bleu":0.3146724739063728,"rouge_l":0.27240250074426914}
{"id":581,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { for ( int k = 0 ; k < n ; k ++ ) { for ( int k = 0 ; k < n ; k ++ ) { if ( b [ i ] < b [ j ] ) { ans ++ ; } } } } System . out . println ( ans ) ; } }"],"references":["import java . util . * ; public class p1486B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; for ( int t = sc . nextInt ( ) ; t -- > 0 ; ) { int n = sc . nextInt ( ) , x [ ] = new int [ n ] , y [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { x [ i ] = sc . nextInt ( ) ; y [ i ] = sc . nextInt ( ) ; } Arrays . sort ( x ) ; Arrays . sort ( y ) ; System . out . println ( n % 2 == 1 ? 1 : ( x [ n \/ 2 ] - x [ n \/ 2 - 1 ] + 1 ) * ( long ) ( y [ n \/ 2 ] - y [ n \/ 2 - 1 ] + 1 ) ) ; } } }","import java . util . * ; public class EasternExhibition { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; long a [ ] = new long [ n ] ; long b [ ] = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextLong ( ) ; b [ i ] = sc . nextLong ( ) ; } if ( n % 2 == 1 ) System . out . println ( \"1\" ) ; else { Arrays . sort ( a ) ; Arrays . sort ( b ) ; System . out . println ( ( a [ n \/ 2 ] - a [ n \/ 2 - 1 ] + 1L ) * ( b [ n \/ 2 ] - b [ n \/ 2 - 1 ] + 1L ) ) ; } } } }","import java . util . Arrays ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; int t = s . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int n = s . nextInt ( ) ; int [ ] x = new int [ n ] ; int [ ] y = new int [ n ] ; for ( int j = 0 ; j < n ; j ++ ) { x [ j ] = s . nextInt ( ) ; y [ j ] = s . nextInt ( ) ; } Arrays . sort ( x ) ; Arrays . sort ( y ) ; if ( n % 2 != 0 ) { System . out . println ( 1 ) ; } else { long a = x [ ( n \/ 2 ) ] - x [ ( n \/ 2 ) - 1 ] + 1 ; long b = y [ ( n \/ 2 ) ] - y [ ( n \/ 2 ) - 1 ] + 1 ; System . out . println ( a * b ) ; } } } }","import java . util . * ; public class CodeForces1486B { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int t = input . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int n = input . nextInt ( ) ; int [ ] x = new int [ n ] ; int [ ] y = new int [ n ] ; for ( int j = 0 ; j < n ; j ++ ) { x [ j ] = input . nextInt ( ) ; y [ j ] = input . nextInt ( ) ; } Arrays . sort ( x ) ; Arrays . sort ( y ) ; if ( n % 2 == 1 ) { System . out . println ( 1 ) ; } else { long a = x [ n \/ 2 ] - x [ n \/ 2 - 1 ] + 1 ; long b = y [ n \/ 2 ] - y [ n \/ 2 - 1 ] + 1 ; System . out . println ( a * b ) ; } } } }","import java . util . * ; public class p1486B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; for ( int t = sc . nextInt ( ) ; t -- > 0 ; ) { int n = sc . nextInt ( ) , x [ ] = new int [ n ] , y [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { x [ i ] = sc . nextInt ( ) ; y [ i ] = sc . nextInt ( ) ; } Arrays . sort ( x ) ; Arrays . sort ( y ) ; System . out . println ( n % 2 == 1 ? 1 : ( x [ n \/ 2 ] - x [ n \/ 2 - 1 ] + 1L ) * ( y [ n \/ 2 ] - y [ n \/ 2 - 1 ] + 1 ) ) ; } } }"],"bleu":0.5354739175477982,"rouge_l":0.5738091856206808}
{"id":582,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException {"],"references":["import java . util . Scanner ;   public class Main { static char c [ ] [ ] ; static int num ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = Integer . parseInt ( sc . next ( ) ) ; c = new char [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = sc . next ( ) . toCharArray ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { int count = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( c [ i ] [ j ] == ' C ' ) { count ++ ; } } for ( int j = count - 1 ; j > 0 ; j -- ) { num += j ; } } for ( int i = 0 ; i < n ; i ++ ) { int count = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( c [ j ] [ i ] == ' C ' ) { count ++ ; } } for ( int j = count - 1 ; j > 0 ; j -- ) { num += j ; }   } System . out . println ( num ) ; }   }","import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int count = 0 , c = 0 ; int n = in . nextInt ( ) ;","import java . util . * ; public class P2 {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s [ ] = new String [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { s [ i ] = sc . next ( ) ; } int rc = 0 ; int rsum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { rc = 0 ; for ( int j = 0 ; j < s [ i ] . length ( ) ; j ++ ) { if ( s [ i ] . charAt ( j ) == ' C ' ) { rc ++ ; } } if ( rc >= 2 ) rsum += ( ( rc * ( rc - 1 ) ) \/ 2 ) ; } int cc = 0 ; int csum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { cc = 0 ; for ( int j = 0 ; j < s [ i ] . length ( ) ; j ++ ) { if ( s [ j ] . charAt ( i ) == ' C ' ) { cc ++ ; } } if ( cc >= 2 ) csum += ( ( cc * ( cc - 1 ) ) \/ 2 ) ; } System . out . println ( csum + rsum ) ; }   }","import java . util . Scanner ;   public class Main { static int i ; static int j ; static int happy = 0 ; static int [ ] [ ] c = new int [ 105 ] [ 105 ] ; static char [ ] [ ] a = new char [ 105 ] [ 105 ] ; static String b [ ] = new String [ 105 ] ; static boolean cheak ( int x , int y , int n ) { if ( x == i && y < n ) { return true ; } else if ( y == j && x < n ) { return true ; } return false ; } static void dfs ( int x , int y , int n ) { if ( cheak ( x , y , n ) ) { if ( a [ x ] [ y ] == ' C ' && c [ x ] [ y ] == 0 ) { happy ++ ; } dfs ( x + 1 , y , n ) ; dfs ( x , y + 1 , n ) ; } } public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int count = in . nextInt ( ) ; for ( i = 0 ; i < count ; i ++ ) { b [ i ] = in . next ( ) ; } for ( i = 0 ; i < count ; i ++ ) { for ( j = 0 ; j < count ; j ++ ) { a [ i ] [ j ] = b [ i ] . charAt ( j ) ; } } for ( i = 0 ; i < count ; i ++ ) { for ( j = 0 ; j < count ; j ++ ) { if ( a [ i ] [ j ] == ' C ' ) { c [ i ] [ j ] = 1 ; dfs ( i , j , count ) ; c [ i ] [ j ] = 0 ; } } } System . out . println ( happy ) ; in . close ( ) ; } }","import java . math . BigInteger ; import java . util . Scanner ; import java . util . StringTokenizer ;   public class FarRelative { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = Integer . parseInt ( scanner . nextLine ( ) ) ;   boolean [ ] [ ] cake = new boolean [ n ] [ n ] ;   for ( int i = 0 ; i < n ; i ++ ) { String line = scanner . nextLine ( ) ; for ( int j = 0 ; j < n ; j ++ ) { cake [ i ] [ j ] = line . charAt ( j ) == ' C ' ? true : false ; } }   long total = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int countC = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( cake [ i ] [ j ] ) { countC ++ ; } } long res = combination ( countC , 2 ) ; total += res ; }   for ( int i = 0 ; i < n ; i ++ ) { int countC = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( cake [ j ] [ i ] ) { countC ++ ; } } total += combination ( countC , 2 ) ; }    System . out . println ( total ) ; }   private static BigInteger factorial ( BigInteger n ) { if ( n . intValue ( ) == 0 || n . intValue ( ) == 1 ) { return BigInteger . ONE ; } else { return n . multiply ( factorial ( n . subtract ( BigInteger . ONE ) ) ) ; } }   private static long combination ( int n , int r ) { try { if ( r > n ) { return 0 ; }   BigInteger denom = factorial ( BigInteger . valueOf ( r ) ) . multiply ( factorial ( BigInteger . valueOf ( n - r ) ) ) ;   return factorial ( BigInteger . valueOf ( n ) ) . divide ( denom ) . longValue ( ) ; } catch ( Exception ex ) { System . out . println ( n + \" ▁ \" + r ) ; throw ex ; }   } }"],"bleu":0.40487201537224965,"rouge_l":0.5329626687847498}
{"id":583,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . awt . * ; import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . UncheckedIOException ; import java . io . Closeable ; import java . io . Writer ; import java . io . OutputStreamWriter ; import java . lang . reflect . Array ; import java . util . Arrays ;   public class water { public static long sum = 0 ; public static boolean ok = true ; public static int dps ( int a [ ] [ ] , int sx [ ] , int x , int poi ) { int add = - 1 ; if ( sx [ poi ] != - 1 && sx [ poi ] < x ) { ok = false ; } else if ( sx [ poi ] >= x ) { add = sx [ poi ] - x ; sum += add ; x = sx [ poi ] ; }   if ( a [ poi ] . length == 1 ) {   } else { int add2 = - 1 ; int lon = a [ poi ] . length - 2 ; for ( int i = 1 ; i < a [ poi ] . length ; i ++ ) { int add3 = dps ( a , sx , x , a [ poi ] [ i ] ) ; if ( add3 == - 1 ) { lon -- ; } else if ( add2 == - 1 ) { add2 = add3 ; } else if ( add3 < add2 ) add2 = add3 ; } if ( add2 >= 0 && add == - 1 ) {","import java . util . * ; import java . io . * ;"],"bleu":0.47629019423691704,"rouge_l":0.7922077922077921}
{"id":584,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . Scanner ;   public class _0853KindAnton {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t > 0 ) { int n = sc . nextInt ( ) ; boolean pos = false ; boolean neg = false ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int j = 0 ; j < n ; j ++ ) { b [ j ] = sc . nextInt ( ) ; } boolean fsuc = true ; a : { for ( int i = 0 ; i < n ; i ++ ) { if ( i == 0 ) { if ( a [ i ] != b [ i ] ) { fsuc = false ; break a ; } } if ( a [ i ] == b [ i ] ) { if ( a [ i ] == 1 ) pos = true ; if ( a [ i ] == - 1 ) neg = true ; continue ; } else { if ( b [ i ] == 0 ) { if ( a [ i ] == 1 && neg == false || a [ i ] == - 1 && pos == false ) { fsuc = false ; break a ; } } else if ( b [ i ] > 0 ) { if ( ! pos ) { fsuc = false ; break a ; } } else { if ( ! neg ) { fsuc = false ; break a ; } } } if ( a [ i ] == 1 ) pos = true ; if ( a [ i ] == - 1 ) neg = true ; } } if ( fsuc ) { System . out . println ( \" YES \" ) ; } else { System . out . println ( \" NO \" ) ; } t -- ; } }   }","import java . lang . * ; import java . util . * ;   public class Abhishek {   public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } boolean pos = false , neg = false , flag = true ;   for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] < b [ i ] ) { if ( ! pos ) { System . out . println ( \" NO \" ) ; flag = false ; break ; } } else if ( a [ i ] > b [ i ] ) { if ( ! neg ) { System . out . println ( \" NO \" ) ; flag = false ; break ; } } if ( a [ i ] == - 1 ) neg = true ; if ( a [ i ] == 1 ) pos = true ; } if ( flag ) System . out . println ( \" YES \" ) ; }    } }","import java . io . BufferedReader ; import java . io . File ; import java . io . FileWriter ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . math . BigInteger ; import java . util . * ;   public class Main {   public static void main ( String [ ] args ) throws IOException {   FastScanner input = new FastScanner ( ) ; int tc = input . nextInt ( ) ; work : while ( tc -- > 0 ) { int n = input . nextInt ( ) ; int a [ ] = new int [ n ] ;   for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = input . nextInt ( ) ;   } int b [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = input . nextInt ( ) ; } int pos [ ] = new int [ n ] ; int neg [ ] = new int [ n ] ; if ( a [ 0 ] == 1 ) { pos [ 0 ] ++ ; } else if ( a [ 0 ] == - 1 ) { neg [ 0 ] ++ ; } for ( int i = 1 ; i < n ; i ++ ) { pos [ i ] += pos [ i - 1 ] ; if ( a [ i ] == 1 ) { pos [ i ] ++ ; } } for ( int i = 1 ; i < n ; i ++ ) { neg [ i ] += neg [ i - 1 ] ; if ( a [ i ] == - 1 ) { neg [ i ] ++ ; } }","import java . io . * ; import java . util . * ;   public class Temp { static class Reader { final private int BUFFER_SIZE = 1 << 16 ; private DataInputStream din ; private byte [ ] buffer ; private int bufferPointer , bytesRead ;   public Reader ( ) { din = new DataInputStream ( System . in ) ; buffer = new byte [ BUFFER_SIZE ] ; bufferPointer = bytesRead = 0 ; }   public Reader ( String file_name ) throws IOException { din = new DataInputStream ( new FileInputStream ( file_name ) ) ; buffer = new byte [ BUFFER_SIZE ] ; bufferPointer = bytesRead = 0 ; }   public String readLine ( ) throws IOException { byte [ ] buf = new byte [ 64 ] ;"],"bleu":0.16914156941040462,"rouge_l":0.3040183732775052}
{"id":585,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . io . * ;   public class Main { static String str ; static BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; static BufferedWriter bw = new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ;   static boolean judge ( char x ) { return x >= ' A ' && x <= ' Z ' || x >= ' a ' && x <= ' z ' || x >= '0' && x <= '9' || x == ' _ ' ; }   public static void main ( String [ ] args ) throws IOException {","import java . io . * ;   public class Main { static String str ; static BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; static BufferedWriter bw = new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ;   static boolean judge ( char x ) { return x >= ' A ' && x <= ' Z ' || x >= ' a ' && x <= ' z ' || x >= '0' && x <= '9' || x == ' _ ' ; }   public static void main ( String [ ] args ) throws IOException {","import java . io . * ;   public class Main { static String str ; static BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; static BufferedWriter bw = new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ;   static boolean judge ( char x ) { return x >= ' A ' && x <= ' Z ' || x >= ' a ' && x <= ' z ' || x >= '0' && x <= '9' || x == ' _ ' ; }   public static void main ( String [ ] args ) throws IOException {","import java . io . * ;   public class Main { static String str ; static BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; static BufferedWriter bw = new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ;   static boolean judge ( char x ) { return x >= ' A ' && x <= ' Z ' || x >= ' a ' && x <= ' z ' || x >= '0' && x <= '9' || x == ' _ ' ; }   public static void main ( String [ ] args ) throws IOException {"],"bleu":0.07706554381420336,"rouge_l":0.248702742772424}
{"id":586,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . Scanner ;   public class A1428 {   public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int T = in . nextInt ( ) ; for ( int t = 0 ; t < T ; t ++ ) { int X1 = in . nextInt ( ) ; int Y1 = in . nextInt ( ) ; int X2 = in . nextInt ( ) ; int Y2 = in . nextInt ( ) ; int dx = Math . abs ( X2 - X1 ) ; int dy = Math . abs ( Y2 - Y1 ) ; int answer = dx + dy ; if ( dx != 0 && dy != 0 ) { answer += 2 ; } System . out . println ( answer ) ; } }   }","import java . util . Scanner ;   public class BoxPull { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int x1 = sc . nextInt ( ) ; int y1 = sc . nextInt ( ) ; int x2 = sc . nextInt ( ) ; int y2 = sc . nextInt ( ) ; if ( x1 == x2 || y1 == y2 ) { System . out . println ( Math . abs ( x1 - x2 ) + Math . abs ( y1 - y2 ) ) ; } else { System . out . println ( Math . abs ( x1 - x2 ) + Math . abs ( y1 - y2 ) + 2 ) ; } } } }","import java . util . Scanner ; import java . math . * ;   public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { sc . nextLine ( ) ; int x1 = sc . nextInt ( ) ; int y1 = sc . nextInt ( ) ; int x2 = sc . nextInt ( ) ; int y2 = sc . nextInt ( ) ; int ydistance = Math . abs ( y2 - y1 ) ; int xdistance = Math . abs ( x2 - x1 ) ; if ( ydistance == 0 || xdistance == 0 ) { System . out . println ( ydistance + xdistance ) ; } else System . out . println ( ydistance + xdistance + 2 ) ; } } }","import java . util . * ; import java . io . * ;   public class _contest {   public static void main ( String args [ ] ) {   FastReader in = new FastReader ( ) ; PrintWriter so = new PrintWriter ( new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ) ; int t = in . nextInt ( ) ; while ( t -- > 0 ) { int x1 = in . nextInt ( ) ; int y1 = in . nextInt ( ) ; int x2 = in . nextInt ( ) ; int y2 = in . nextInt ( ) ; if ( x1 == x2 || y1 == y2 ) so . println ( Math . abs ( x1 - x2 ) + Math . abs ( y1 - y2 ) ) ; else so . println ( Math . abs ( x1 - x2 ) + Math . abs ( y1 - y2 ) + 2 ) ; } so . flush ( ) ; }   static class FastReader { BufferedReader br ; StringTokenizer st ;   public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; }   String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   long nextLong ( ) { return Long . parseLong ( next ( ) ) ; }   double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; }   int [ ] readIntArray ( int n ) { int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = nextInt ( ) ; return a ; }   long [ ] readLongArray ( int n ) { long a [ ] = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = nextLong ( ) ; return a ; }   String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }","import java . util . Scanner ;   public class Problem28 {   public static void main ( String [ ] args ) {"],"bleu":0.317172186076442,"rouge_l":0.5140449438202248}
{"id":587,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int a = Integer . parseInt ( st . nextToken ( ) ) ; int b = Integer . parseInt ( st . nextToken ( ) ) ; int c = Integer . parseInt ( st . nextToken ( ) ) ; int d = Integer . parseInt ( st . nextToken ( ) ) ; int d = Integer . parseInt ( st . nextToken ( ) ) ; int d = Integer . parseInt ( st . nextToken ( ) ) ; int d = Integer . parseInt ( st . nextToken ( ) ) ; int e = Integer . parseInt ( st . nextToken ( ) ) ; int e = Integer . parseInt ( st . nextToken ( ) ) ; int e = Integer . parseInt ( st . nextToken ( ) ) ; int e = Integer . parseInt ( st . nextToken ( ) ) ; int e = Integer . parseInt ( st . nextToken ( ) ) ; int e = Integer . parseInt ( st . nextToken ( ) ) ; int e = Integer . parseInt ( st . nextToken ( ) ) ; int e = Integer . parseInt ( st . nextToken ( ) ) ; int e = Integer . parseInt ( st . nextToken ( ) ) ; int e = Integer . parseInt ( st . nextToken ( ) ) ; int e = Integer . parseInt ( st . nextToken ( ) ) ; int e = Integer . parseInt ( st . nextToken ( ) ) ; int e = Integer . parseInt ( st . nextToken ( ) ) ; int e = Integer . parseInt ( st . nextToken ( ) ) ; int e = Integer . parseInt ( st . nextToken ( ) ) ; int e = Integer . parseInt ( st . nextToken ( ) ) ; int e = Integer . parseInt ( st . nextToken ( ) ) ; int e = Integer . parseInt ( st . nextToken ( ) ) ; System . out . println ( e ) ; } }"],"references":["import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . StringTokenizer ; import java . io . IOException ; import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . InputStream ;   public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; a65 solver = new a65 ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; }   static class a65 { public void solve ( int testNumber , InputReader in , PrintWriter out ) { int a = in . nextInt ( ) ; int b = in . nextInt ( ) ; int c = in . nextInt ( ) ; int d = in . nextInt ( ) ; int e = in . nextInt ( ) ; int f = in . nextInt ( ) ; int next = b * d * f ; int prev = a * c * e ; if ( c == 0 && d > 0 ) { out . println ( \" Ron \" ) ; return ; } if ( a == 0 && b > 0 && d > 0 ) { out . println ( \" Ron \" ) ; return ; } if ( prev >= next ) { out . println ( \" Hermione \" ) ; return ; } out . println ( \" Ron \" ) ; }   }   static class InputReader { private BufferedReader reader ; private StringTokenizer stt ;   public InputReader ( InputStream stream ) { reader = new BufferedReader ( new InputStreamReader ( stream ) ) ; }   public String nextLine ( ) { try { return reader . readLine ( ) ; } catch ( IOException e ) { return null ; } }   public String next ( ) { while ( stt == null || ! stt . hasMoreTokens ( ) ) { stt = new StringTokenizer ( nextLine ( ) ) ; } return stt . nextToken ( ) ; }   public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   } }  ","import java . io . DataInputStream ; import java . io . FileInputStream ; import java . io . IOException ;   public class A {   static Reader reader ;   static class Reader {   final private int BUFFER_SIZE = 1 << 16 ; private DataInputStream din ; private byte [ ] buffer ; private int bufferPointer , bytesRead ;   public Reader ( ) { din = new DataInputStream ( System . in ) ; buffer = new byte [ BUFFER_SIZE ] ; bufferPointer = bytesRead = 0 ; }   public Reader ( String file_name ) throws IOException { din = new DataInputStream ( new FileInputStream ( file_name ) ) ; buffer = new byte [ BUFFER_SIZE ] ; bufferPointer = bytesRead = 0 ; }   public String readLine ( ) throws IOException { byte [ ] buf = new byte [ 100000 ] ;","import java . lang . reflect . Array ; import java . util . * ; import java . util . function . BiConsumer ; import java . util . function . Consumer ; import java . util . function . Function ; import java . util . stream . * ;   public class Main { public static void main ( String arg [ ] ) {","import java . io . BufferedReader ; import java . io . FileNotFoundException ; import java . io . FileReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;   public class Main { public static void main ( String [ ] args ) { FastScanner input = new FastScanner ( ) ; long a = 1 ; long b = 1 ; int [ ] [ ] arr = new int [ 3 ] [ 2 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { arr [ i ] = new int [ ] { input . nextInt ( ) , input . nextInt ( ) } ; b *= arr [ i ] [ 0 ] ; a *= arr [ i ] [ 1 ] ; } if ( a > b || ( arr [ 0 ] [ 0 ] == 0 && arr [ 0 ] [ 1 ] > 0 && arr [ 1 ] [ 1 ] > 0 ) || ( arr [ 1 ] [ 0 ] == 0 && arr [ 1 ] [ 1 ] > 0 ) ) System . out . println ( \" Ron \" ) ; else System . out . println ( \" Hermione \" ) ; }  "],"bleu":0.22980058243707616,"rouge_l":0.41548211324330725}
{"id":588,"predictions":["import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;"],"references":["import java . util . Scanner ;   public class Main {   public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ;   long n = in . nextLong ( ) ;   if ( n == 1 ) { System . out . println ( - 1 ) ; return ; }   long even ; long odd ; if ( n % 2 == 0 ) { even = n * ( 2 + n ) \/ 4 ; odd = n * n \/ 4 ; } else { even = n \/ 2 * ( 2 + n - 1 ) \/ 2 ; odd = ( n \/ 2 + 1 ) * ( 1 + n ) \/ 2 ; } System . out . println ( even - odd ) ; } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . lang . reflect . Array ; import java . util . * ;   public class CF277div2 { static class FastScanner { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( \" \" ) ; String next ( ) { while ( ! st . hasMoreTokens ( ) ) try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } int [ ] nextArray ( int n ) { int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = nextInt ( ) ; return a ; } long [ ] nextArray ( long n ) { long [ ] a = new long [ ( int ) n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = nextLong ( ) ; return a ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } } static class FastWriter extends PrintWriter { FastWriter ( ) { super ( System . out ) ; } void println ( int [ ] array ) { for ( int i = 0 ; i < array . length ; i ++ ) { print ( array [ i ] + \" ▁ \" ) ; } println ( ) ; } void println ( long [ ] array ) { for ( int i = 0 ; i < array . length ; i ++ ) { print ( array [ i ] + \" ▁ \" ) ; } println ( ) ; } }   public static void main ( String [ ] args ) { FastScanner in = new FastScanner ( ) ; FastWriter out = new FastWriter ( ) ; long n = in . nextLong ( ) ; System . out . println ( ( n % 2 == 0 ) ? n \/ 2 : - ( ( n + 1 ) \/ 2 ) ) ; out . close ( ) ; } }","import java . io . * ; import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; long n = sc . nextLong ( ) ; if ( n % 2 == 0 ) { System . out . println ( n \/ 2 ) ; } else { System . out . println ( - ( ( n \/ 2 ) + 1 ) ) ; } } }"],"bleu":0.2488469970867706,"rouge_l":0.3332164870154529}
{"id":589,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["  import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ;   public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;  ","import java . util . Scanner ;   public class MagicNumbers { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String s = scanner . next ( ) ; String s3 = s . replace ( \"144\" , \" \" ) ; String s2 = s3 . replace ( \"14\" , \" \" ) ; String s1 = s2 . replace ( \"1\" , \" \" ) ;","  import java . util . * ;    public class dummycodes { public static boolean solve ( String s ) { if ( s . charAt ( 0 ) != '1' ) return false ; int cnt = 0 ; for ( int i = 1 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) != '1' && s . charAt ( i ) != '4' ) return false ; if ( s . charAt ( i ) == '4' ) { cnt ++ ; if ( cnt > 2 ) return false ; } else cnt = 0 ; } return true ; }   public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ;    String s = sc . nextLine ( ) ;   if ( solve ( s ) ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ;       } }  ","import java . util . * ; import java . math . * ; import java . lang . * ;   public class gfg { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; String S = sc . next ( ) ; int l = S . length ( ) ; int state = 0 ; for ( int i = 0 ; i < l ; i ++ ) { if ( state == 0 ) { if ( S . charAt ( i ) == '1' ) { state = 1 ; } else { state = 3 ; break ; } } else if ( state == 1 ) { if ( S . charAt ( i ) == '1' ) { state = 1 ; } else if ( S . charAt ( i ) == '4' ) { state = 2 ; } else { state = 3 ; break ; } } else if ( state == 2 ) { if ( S . charAt ( i ) == '1' ) { state = 1 ; } else if ( S . charAt ( i ) == '4' ) { state = 0 ; } else { state = 3 ; break ; } } } if ( state == 3 ) System . out . println ( \" NO \" ) ; else System . out . println ( \" YES \" ) ; } }","import java . util . Scanner ; import java . util . regex . Pattern ;   public class problem76 {   public static void main ( String [ ] args ) {"],"bleu":0.954297861697201,"rouge_l":0.9520431328036324}
{"id":590,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . HashMap ; import java . util . Map ; import java . util . Scanner ;   public class Solution { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String gn = sc . next ( ) ; String h = sc . next ( ) ; String p = sc . next ( ) ; char [ ] a = ( gn + h ) . toCharArray ( ) ; char [ ] b = p . toCharArray ( ) ; HashMap < Character , Integer > hm1 = new HashMap ( ) ; HashMap < Character , Integer > hm2 = new HashMap < > ( ) ; for ( int i = 0 ; i < a . length ; i ++ ) { int count = 1 ; if ( hm1 . containsKey ( a [ i ] ) ) { count = hm1 . get ( a [ i ] ) ; count ++ ; } hm1 . put ( a [ i ] , count ) ; } for ( int j = 0 ; j < b . length ; j ++ ) { int count = 1 ; if ( hm2 . containsKey ( b [ j ] ) ) { count = hm2 . get ( b [ j ] ) ; count ++ ; } hm2 . put ( b [ j ] , count ) ; } if ( hm1 . equals ( hm2 ) ) { System . out . println ( \" YES \" ) ; } else { System . out . println ( \" NO \" ) ; }    } }","import java . util . * ; import java . lang . * ; import java . io . * ;   public class Ideone { public static String sort ( String inputString ) {","  import java . util . * ; import java . lang . * ; import java . io . * ;   public class Ideone { public static void main ( String [ ] args ) throws java . lang . Exception { Scanner scan = new Scanner ( System . in ) ; String s1 = scan . next ( ) ; String s2 = scan . next ( ) ; String s = scan . next ( ) ; String p = s1 + s2 ; char [ ] arrayOfP = p . toCharArray ( ) ; Arrays . sort ( arrayOfP ) ; String x = new String ( arrayOfP ) ; char [ ] arrayOfS = s . toCharArray ( ) ; Arrays . sort ( arrayOfS ) ; String y = new String ( arrayOfS ) ; if ( x . equals ( y ) ) { System . out . print ( \" YES \" ) ; } else { System . out . print ( \" NO \" ) ; } } }","import java . util . * ; public class Santa { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String a = sc . next ( ) ; String b = sc . next ( ) ; String c = sc . next ( ) ; String real = a + b ; char [ ] arr = real . toCharArray ( ) ; char [ ] arr2 = c . toCharArray ( ) ; Arrays . sort ( arr ) ; Arrays . sort ( arr2 ) ; if ( Arrays . equals ( arr , arr2 ) ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ; } }","import java . util . * ; public class ChrisNew { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; String str = s . next ( ) ; String gues = s . next ( ) ; String temp = s . next ( ) ; if ( str . length ( ) + gues . length ( ) != temp . length ( ) ) { System . out . println ( \" NO \" ) ; } else { int [ ] arr = new int [ 26 ] ; int [ ] arr1 = new int [ 26 ] ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { char x = str . charAt ( i ) ; arr [ x - 65 ] ++ ; } for ( int i = 0 ; i < gues . length ( ) ; i ++ ) { char x = gues . charAt ( i ) ; arr [ x - 65 ] ++ ; } for ( int i = 0 ; i < temp . length ( ) ; i ++ ) { char x = temp . charAt ( i ) ; arr1 [ x - 65 ] ++ ; } int flag = 0 ; for ( int i = 0 ; i < 26 ; i ++ ) { if ( arr [ i ] != arr1 [ i ] ) { System . out . println ( \" NO \" ) ; flag = 1 ; break ; } } if ( flag == 0 ) { System . out . println ( \" YES \" ) ; } } } }"],"bleu":0.34772504705825924,"rouge_l":0.6103424080830762}
{"id":591,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . io . * ; import java . math . * ; import java . util . * ;     public class Main {   private static int dx [ ] = { 1 , 0 , - 1 , 0 } ; private static int dy [ ] = { 0 , - 1 , 0 , 1 } ;   private static final long INF = Long . MAX_VALUE ; private static final int INT_INF = Integer . MAX_VALUE ; private static final long NEG_INF = Long . MIN_VALUE ; private static final int NEG_INT_INF = Integer . MIN_VALUE ; private static final double EPSILON = 1e-10 ;   private static final int MAX = 2000007 ; private static final long MOD = 1000000007 ;   private static final int MAXN = 100007 ; private static final int MAXA = 10000009 ; private static final int MAXLOG = 22 ;   public static void main ( String [ ] args ) throws IOException {   InputReader in = new InputReader ( System . in ) ;","import java . io . * ; import java . math . * ; import java . util . * ;     public class Main {   private static int dx [ ] = { 1 , 0 , - 1 , 0 } ; private static int dy [ ] = { 0 , - 1 , 0 , 1 } ;   private static final long INF = Long . MAX_VALUE ; private static final int INT_INF = Integer . MAX_VALUE ; private static final long NEG_INF = Long . MIN_VALUE ; private static final int NEG_INT_INF = Integer . MIN_VALUE ; private static final double EPSILON = 1e-10 ;   private static final int MAX = 2000007 ; private static final long MOD = 1000000007 ;   private static final int MAXN = 100007 ; private static final int MAXA = 10000009 ; private static final int MAXLOG = 22 ;   public static void main ( String [ ] args ) throws IOException {   InputReader in = new InputReader ( System . in ) ;","import java . util . * ; import java . io . * ; import java . math . * ; public class Main { public static void process ( ) throws IOException { char [ ] x = nln ( ) . toCharArray ( ) ; int n = x . length ; int len = ni ( ) ; if ( len >= n ) { pn ( ( len + n ) & ~ ( 1 << 0 ) ) ; return ; } int ans = len ;   for ( int i = 1 ; i <= ( len + n ) \/ 2 ; i ++ ) { int flag = 0 ; for ( int j = n - len - 1 - i ; j > n - len - 1 - i - i ; j -- ) { if ( j < 0 ) { flag = 1 ; break ; } if ( x [ j ] != x [ j + len + i ] ) flag = 1 ; } if ( flag == 0 ) ans = len + i ; } for ( int i = 1 ; i <= n \/ 2 ; i ++ ) { for ( int j = 0 ; j < n - 2 * i ; j ++ ) { int flag = 0 ; for ( int k = j ; k < j + i ; k ++ ) if ( x [ k ] != x [ k + i ] ) flag = 1 ; if ( flag == 0 ) ans = Math . max ( ans , i ) ; } } pn ( 2 * ans ) ; }   static AnotherReader sc ; static PrintWriter out ; public static void main ( String [ ] args ) throws IOException { boolean oj = System . getProperty ( \" ONLINE _ JUDGE \" ) != null ; if ( oj ) { sc = new AnotherReader ( ) ; out = new PrintWriter ( System . out ) ; } else { sc = new AnotherReader ( 100 ) ; out = new PrintWriter ( \" output . txt \" ) ; } int t = 1 ;"],"bleu":0.05243683885413003,"rouge_l":0.30823648307225876}
{"id":592,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int t = 1 ;"],"references":["import java . util . * ;   public class Check2 { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] ar = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { ar [ i ] = sc . nextInt ( ) ; } long sum = ar [ n - 1 ] ; long thresh = ar [ n - 1 ] - 1 ; for ( int j = n - 2 ; j >= 0 ; j -- ) {   if ( thresh <= 0 ) { break ; } sum = sum + Math . min ( ar [ j ] , thresh ) ; thresh = Math . min ( ar [ j ] , thresh ) - 1 ;    } System . out . println ( sum ) ;    }   public static void Mybfs ( List < List < Integer > > lists , int source , int [ ] dist , boolean [ ] visited ) { dist [ source ] = 0 ;","import java . util . Scanner ;   public class Chocolates { public static void main ( String [ ] args ) {   Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) , i ;   Long a [ ] = new Long [ n ] ; for ( i = 0 ; i < n ; i ++ ) a [ i ] = in . nextLong ( ) ;   long x = a [ n - 1 ] , m = x ; for ( i = n - 2 ; i >= 0 ; i -- ) { if ( m > 0 ) { x += Math . min ( m - 1 , a [ i ] ) ; m = Math . min ( m - 1 , a [ i ] ) ; } else { break ; } } in . close ( ) ; System . out . println ( x ) ; } }","import java . io . * ; import java . util . * ;   public class Solution { public static void main ( String [ ] args ) throws Exception { int n = in . readInt ( ) ; long [ ] A = in . readLA ( ) ; long ans = 0 , cur = 0 , next = ( long ) 1e18 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( next == 0 ) {","  import java . io . BufferedReader ; import java . io . IOException ; import java . util . Collections ; import java . io . InputStreamReader ; import java . util . * ; import java . util . logging . SimpleFormatter ;   public class solution {    public static void main ( String [ ] args ) { FastScanner sc = new FastScanner ( ) ; int n = sc . nextInt ( ) ; long A [ ] = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) A [ i ] = sc . nextLong ( ) ; long ans = 0 ; long ct = Integer . MAX_VALUE ; for ( int i = n - 1 ; i >= 0 ; i -- ) { ct = Math . max ( 0 , Math . min ( ct - 1 , A [ i ] ) ) ; ans += ct ; } System . out . println ( ans ) ; }           static final Random random = new Random ( ) ;   static void ruffleSort ( int [ ] a ) { int n = a . length ;","import javax . print . DocFlavor ; import javax . swing . * ; import java . awt . image . BandedSampleModel ; import java . util . * ;   public class Example { static long [ ] [ ] dp ;"],"bleu":0.6188369005678455,"rouge_l":0.5484858308859986}
{"id":593,"predictions":["import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; } public static long mod = 17352642619633L ; void run ( FastScanner in , PrintWriter out ) {"],"references":["import java . io . * ; import java . util . * ; import java . lang . * ;   public class B {   public static void main ( String [ ] args ) { FastReader in = new FastReader ( ) ; PrintWriter out = new PrintWriter ( System . out ) ; int n = in . nextInt ( ) , k = in . nextInt ( ) ; if ( false ) out . println ( \" NO \" ) ; else { char [ ] [ ] board = new char [ 4 ] [ n ] ; for ( int i = 0 ; i < 4 ; i ++ ) Arrays . fill ( board [ i ] , ' . ' ) ; out . println ( \" YES \" ) ; for ( int i = 1 ; i < ( n \/ 2 ) ; i ++ ) { if ( k < 2 ) break ; board [ 1 ] [ i ] = ' # ' ; board [ 1 ] [ n - 1 - i ] = ' # ' ; k -= 2 ; } for ( int i = 1 ; i < ( n \/ 2 ) ; i ++ ) { if ( k < 2 ) break ; board [ 2 ] [ i ] = ' # ' ; board [ 2 ] [ n - 1 - i ] = ' # ' ; k -= 2 ; } if ( k % 2 != 0 ) { if ( board [ 1 ] [ n \/ 2 ] == ' . ' ) board [ 1 ] [ n \/ 2 ] = ' # ' ; else board [ 2 ] [ n \/ 2 ] = ' + ' ; } else if ( k != 0 ) { board [ 1 ] [ n \/ 2 ] = ' # ' ; board [ 2 ] [ n \/ 2 ] = ' # ' ; } for ( int i = 0 ; i < 4 ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) out . print ( board [ i ] [ j ] ) ; out . println ( ) ; } } out . close ( ) ; }   static final Random random = new Random ( ) ;","import java . io . * ; import java . util . * ; import java . math . * ; import java . awt . Point ; public class Main {"],"bleu":0.5760622758258092,"rouge_l":0.6604188517102547}
{"id":594,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . Scanner ;   public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; Scanner in = new Scanner ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; TaskA solver = new TaskA ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; }   static class TaskA { public void solve ( int testNumber , Scanner in , PrintWriter out ) { int T = 1 ; while ( T -- > 0 ) { solveOne ( in , out ) ; } }   private void solveOne ( Scanner in , PrintWriter out ) { int k = in . nextInt ( ) ; int a = in . nextInt ( ) ; int b = in . nextInt ( ) ; int v = in . nextInt ( ) ;   int box = 0 ; while ( a > 0 ) { int divisor = 0 ; if ( b > 0 ) { divisor = Math . min ( k - 1 , b ) ; b -= k - 1 ; } int sections = 1 + divisor ; a -= sections * v ; box ++ ; } out . println ( box ) ;    }   } }  ","import java . util . Scanner ;   public class A402 {   public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int K = in . nextInt ( ) ; int A = in . nextInt ( ) ; int B = in . nextInt ( ) ; int V = in . nextInt ( ) ; int boxes = 0 ; while ( A > 0 ) { boxes ++ ; int divisors = Math . min ( K - 1 , B ) ; B -= divisors ; A -= ( divisors + 1 ) * V ; } System . out . println ( boxes ) ; }   }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . ArrayList ; import java . util . Collections ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import java . util . StringTokenizer ; import java . util . TreeMap ;   public class Main implements Runnable { int n , m , k ; static boolean use_n_tests = false ;   void solve ( FastScanner in , PrintWriter out , int testNumber ) { k = in . nextInt ( ) ; int a , b , v ; a = in . nextInt ( ) ; b = in . nextInt ( ) ;   v = in . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; ; i ++ ) { if ( a <= 0 ) { break ; } ans ++ ; int div = Math . min ( b , k - 1 ) ; b -= div ; a -= ( div + 1 ) * v ; } out . println ( ans ) ; }  "],"bleu":0.16812925646849017,"rouge_l":0.2686661073825503}
{"id":595,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ; public class Solution { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; long a = s . nextLong ( ) ; long b = s . nextLong ( ) ; long ans = 1L ; if ( b - a >= 10 ) { System . out . println ( \"0\" ) ; } else { for ( long i = a + 1 ; i <= b ; i ++ ) { ans = ans * ( i % 10 ) ; } ans = ans % 10 ; System . out . println ( ans ) ; } } }","import java . io . * ; import java . math . BigInteger ; import java . util . * ;   public class Codeforces { public static void main ( String [ ] args ) throws UnsupportedEncodingException , IOException , Exception { StringBuilder out = new StringBuilder ( ) ; StringTokenizer tk ; Reader . init ( System . in ) ; Scanner sc = new Scanner ( System . in ) ; long a = Reader . nextLong ( ) ; long b = Reader . nextLong ( ) ;   BigInteger fact = BigInteger . ONE ; BigInteger fact1 = BigInteger . ONE ; if ( a == b ) { System . out . println ( 1 ) ; } else if ( a % 10 == 0 && b % 10 == 0 ) { System . out . println ( 0 ) ; } else if ( b - a >= 10 ) { System . out . println ( 0 ) ; } else { a %= 10 ; b %= 10 ; for ( long i = 1 ; i <= a ; i ++ ) { fact = fact . multiply ( BigInteger . valueOf ( i ) ) ; } for ( long i = 1 ; i <= b ; i ++ ) { fact1 = fact1 . multiply ( BigInteger . valueOf ( i ) ) ; } BigInteger c = BigInteger . TEN ; System . out . println ( ( fact1 . divide ( fact ) ) . mod ( c ) ) ; }   } }   class Reader {   static BufferedReader reader ; static StringTokenizer tokenizer ;   static void init ( InputStream input ) throws UnsupportedEncodingException { reader = new BufferedReader ( new InputStreamReader ( input , \" UTF - 8\" ) ) ; tokenizer = new StringTokenizer ( \" \" ) ; }   static String next ( ) throws IOException { while ( ! tokenizer . hasMoreTokens ( ) ) {","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ;"],"bleu":0.563789143976897,"rouge_l":0.777820710973725}
{"id":596,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . ArrayList ; import java . util . Arrays ; import java . util . HashMap ; import java . util . LinkedHashMap ; import java . util . Map ; import java . util . Scanner ; import java . util . * ; import java . util . stream . Collectors ;   public class absolute {   public static void main ( String [ ] args ) {","import java . io . * ; import java . util . * ;   public class B_456 { static PrintWriter pw = new PrintWriter ( System . out ) ;   public static void main ( String arg [ ] ) throws IOException { InputStreamReader isr = new InputStreamReader ( System . in ) ; BufferedReader br = new BufferedReader ( isr ) ; StringTokenizer token = new StringTokenizer ( \" ▁ \" ) ;   String s = br . readLine ( ) . trim ( ) ;   pw . println ( getResult ( s ) ) ;   pw . close ( ) ;   }   private static long getResult ( String s ) { int len = s . length ( ) ; long x = 0 ; if ( len == 1 ) x = Integer . parseInt ( \" \" + s . charAt ( len - 1 ) ) ; else x = Integer . parseInt ( \" \" + s . charAt ( len - 2 ) ) * 10 + Integer . parseInt ( \" \" + s . charAt ( len - 1 ) ) ;   if ( x % 4 == 0 ) return 4 ; else return 0 ; } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;   public class CF456_D2_B { public static void main ( String [ ] args ) { FastScanner scanner = new FastScanner ( ) ; String s = scanner . next ( ) ; int n = Integer . parseInt ( s . substring ( Math . max ( 0 , s . length ( ) - 2 ) ) ) ; if ( n % 4 == 0 ) { System . out . println ( 4 ) ; } else { System . out . println ( 0 ) ; } }   static class FastScanner { BufferedReader br ; StringTokenizer st ;   public FastScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; }   String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   long nextLong ( ) { return Long . parseLong ( next ( ) ) ; }   double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; }   String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; }   int [ ] nextArray ( int n ) { int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = nextInt ( ) ; } return arr ; } } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . OutputStream ; import java . io . PrintWriter ; import java . math . BigInteger ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import java . util . StringTokenizer ;   public class Gym {   static Map < Integer , Long > map = new HashMap < > ( ) ;   public static void main ( String [ ] args ) { FastScanner fs = new FastScanner ( ) ; OutputStream outputStream = System . out ; PrintWriter out = new PrintWriter ( outputStream ) ; int t = 1 ;","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . math . BigInteger ; import java . util . * ;   public class Main { static long mod = 5 ; public static long AtoN ( long a , long n ) { if ( n == 0 ) { return 1L ; } if ( n % 2 == 0 ) { long value = AtoN ( a , n \/ 2 ) % mod ; return ( value * value ) % mod ; } else { long value = AtoN ( a , n \/ 2 ) % mod ; return ( ( value * value * a ) % mod ) ; } } public static void main ( String [ ] args ) { FastScanner input = new FastScanner ( ) ; BigInteger s = new BigInteger ( input . next ( ) ) ; BigInteger s1 = new BigInteger ( \"4\" ) ; long n = Long . parseLong ( \" \" + s . mod ( s1 ) ) ; if ( n == 0 ) { System . out . println ( \"4\" ) ; } else System . out . println ( \"0\" ) ; }   static class FastScanner {   BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( \" \" ) ;   String next ( ) { while ( ! st . hasMoreTokens ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   long nextLong ( ) {   return Long . parseLong ( next ( ) ) ; }   double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; }   String nextLine ( ) throws IOException { return br . readLine ( ) ; } }   }"],"bleu":0.5248889411301781,"rouge_l":0.4782825140012446}
{"id":597,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . Scanner ;   public class TemporarilyUnavailable { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int testCase = scanner . nextInt ( ) ; for ( int i = 0 ; i < testCase ; i ++ ) { System . out . println ( solve ( scanner . nextInt ( ) , scanner . nextInt ( ) , scanner . nextInt ( ) , scanner . nextInt ( ) ) ) ; } }   public static int solve ( int a , int b , int c , int r ) {   if ( a == b ) return 0 ;   int min , max ; if ( a > b ) { max = a ; min = b ; } else { max = b ; min = a ; } int result = Math . abs ( a - b ) ; int plus = c + r ; int minus = c - r ;   if ( min <= minus && plus <= max ) return result - 2 * r ; if ( min >= plus || max <= minus ) return result ; if ( min > minus ) { if ( plus < max ) return result - ( plus - min ) ; else return 0 ; } else return result - ( max - minus ) ; } }","import java . util . Scanner ;   public class TemporarilyUnavailable2 { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int testCases = scanner . nextInt ( ) ; int a , b , c , r ; while ( testCases -- != 0 ) {   a = scanner . nextInt ( ) ; b = scanner . nextInt ( ) ; c = scanner . nextInt ( ) ; r = scanner . nextInt ( ) ;   System . out . println ( solve ( a , b , c , r ) ) ; } }   public static int solve ( int a , int b , int c , int r ) { int result = 0 ; int max = Math . max ( a , b ) ; int min = Math . min ( a , b ) ; int masofa = Math . abs ( a - b ) ;   if ( a == b ) { return 0 ; } if ( ( min - c >= r ) || c - max >= r ) { return Math . abs ( a - b ) ; }   if ( c >= min && c <= max ) { int start = c - r ; int end = c + r ;   if ( start - min >= 0 ) { result += start - min ; } if ( max - end >= 0 ) { result += max - end ; } } else { if ( Math . max ( c , max ) == c ) { int start = c - r ; if ( start <= min ) { return 0 ; } else { return start - min ; } } else { int end = c + r ; if ( end >= max ) { return 0 ; } else { return max - end ; } } } return result ; } }","import java . util . Scanner ;   public class TEmporarily { static Scanner scanner = new Scanner ( System . in ) ;   public static void main ( String [ ] args ) { int n = scanner . nextInt ( ) ; int s = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int a = scanner . nextInt ( ) ; int b = scanner . nextInt ( ) ; int c = scanner . nextInt ( ) ; int d = scanner . nextInt ( ) ; if ( b >= a ) { if ( Math . abs ( c - a ) < d ) { s = b - d - c ; if ( s > 0 ) System . out . println ( s ) ; else System . out . println ( 0 ) ;   } else if ( Math . abs ( c - b ) < d ) { s = c - a - d ; if ( s > 0 ) System . out . println ( s ) ; else System . out . println ( 0 ) ;   } else if ( c - a >= d && b - c >= d ) System . out . println ( b - a - 2 * d ) ; else System . out . println ( b - a ) ; } else if ( b < a ) { if ( Math . abs ( c - a ) < d ) { s = c - b - d ; if ( s > 0 ) System . out . println ( s ) ; else System . out . println ( 0 ) ;   } else if ( Math . abs ( c - b ) < d ) { s = a - d - c ; if ( s > 0 ) System . out . println ( s ) ; else System . out . println ( 0 ) ;   } else if ( c - b >= d && a - c >= d ) System . out . println ( a - b - 2 * d ) ; else System . out . println ( a - b ) ;   } } } }","import java . util . Scanner ;   public class TempUnavailable {   public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int testCases = scanner . nextInt ( ) ;   while ( testCases -- != 0 ) {   int a = scanner . nextInt ( ) ; int b = scanner . nextInt ( ) ; int c = scanner . nextInt ( ) ; int r = scanner . nextInt ( ) ;    solve ( a , b , c , r ) ; } }   public static void solve ( int a , int b , int c , int r ) { int L = Math . max ( Math . min ( a , b ) , c - r ) ; int R = Math . min ( Math . max ( a , b ) , c + r ) ; System . out . println ( Math . max ( a , b ) - Math . min ( a , b ) - Math . max ( 0 , R - L ) ) ; } }"],"bleu":0.0134520003730299,"rouge_l":0.18322237245203582}
{"id":598,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . StringTokenizer ; public class Cv {"],"references":["import java . lang . reflect . Array ; import java . util . * ;   public class Main { private static Scanner in = new Scanner ( System . in ) ;  ","import java . io . BufferedReader ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . HashMap ; import java . util . Scanner ; import java . util . StringTokenizer ;   public class AntiCubism {   public static void main ( String [ ] args ) {","import java . util . Scanner ;   public class B667 {   public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int N = in . nextInt ( ) ; long sum = 0 ; long max = 0 ; for ( int n = 0 ; n < N ; n ++ ) { int length = in . nextInt ( ) ; sum += length ; max = Math . max ( max , length ) ; } long answer = max - ( sum - max ) + 1 ; System . out . println ( answer ) ; }   }"],"bleu":0.7725259537730556,"rouge_l":0.5925617540938107}
{"id":599,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ;   public class Solution { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ;   Set < Integer > set = new HashSet < > ( ) ; PriorityQueue < Integer > pq = new PriorityQueue ( Collections . reverseOrder ( ) ) ; int n = s . nextInt ( ) ;   int i = 0 ; while ( pq . size ( ) != 2 && i < n ) { int x = s . nextInt ( ) ; if ( ! set . contains ( x ) ) { set . add ( x ) ; pq . offer ( x ) ; } i ++ ; }   while ( i < n ) { int x = s . nextInt ( ) ; if ( ! set . contains ( x ) ) { set . add ( x ) ; if ( x < pq . peek ( ) ) { pq . offer ( x ) ; pq . poll ( ) ; } } i ++ ; }   if ( set . size ( ) <= 1 ) System . out . println ( \" NO \" ) ; else { System . out . println ( pq . peek ( ) ) ; }   s . close ( ) ; } }","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . * ; public class C { static class FastScanner { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( \" \" ) ;   String next ( ) { while ( ! st . hasMoreTokens ( ) ) try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   int [ ] nextArray ( int n ) { int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = nextInt ( ) ; return a ; }   long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } } static class FastWriter extends PrintWriter { FastWriter ( ) { super ( System . out ) ; }   void println ( int [ ] array ) { for ( int i = 0 ; i < array . length ; i ++ ) { print ( array [ i ] + \" ▁ \" ) ; } println ( ) ; }   void println ( long [ ] array ) { for ( int i = 0 ; i < array . length ; i ++ ) { print ( array [ i ] + \" ▁ \" ) ; } println ( ) ; } } public static void main ( String [ ] args ) {","import java . util . * ;   public class Solution { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ;   int n = s . nextInt ( ) ; int min = 101 ; int min2 = 101 ;   for ( int i = 0 ; i < n ; i ++ ) { int x = s . nextInt ( ) ; if ( min > x ) { min2 = min ; min = x ; } else if ( min != x && x < min2 ) { min2 = x ; } }   System . out . println ( min2 == 101 ? \" NO \" : min2 ) ;   s . close ( ) ; } }","import java . util . * ;   public class Solution { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ;   int n = s . nextInt ( ) ; int [ ] nums = new int [ n ] ;   for ( int i = 0 ; i < n ; i ++ ) { nums [ i ] = s . nextInt ( ) ; }   int min = 101 ; int min2 = 101 ;   for ( int x : nums ) { if ( min > x ) { min2 = min ; min = x ; } else if ( min != x && x < min2 ) { min2 = x ; } }   System . out . println ( min2 == 101 ? \" NO \" : min2 ) ;   s . close ( ) ; } }"],"bleu":0.152323036909137,"rouge_l":0.23379790940766546}
{"id":600,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ; public class PolycarpTraining { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int size = sc . nextInt ( ) ; Integer [ ] arr = new Integer [ size ] ; for ( int i = 0 ; i < size ; i ++ ) arr [ i ] = sc . nextInt ( ) ; Arrays . sort ( arr ) ; int index = 1 ; for ( int i = 0 ; i < size ; i ++ ) { if ( arr [ i ] >= index ) { index ++ ; } } System . out . println ( index - 1 ) ; } }","  import java . util . * ; import java . util . Arrays ; public class Codechef { public static void main ( String [ ] args ) throws java . lang . Exception { try { Scanner sc = new Scanner ( System . in ) ; int n , i , c , k = 1 ; n = sc . nextInt ( ) ; ArrayList < Integer > al = new ArrayList < Integer > ( ) ; for ( i = 0 ; i < n ; i ++ ) al . add ( sc . nextInt ( ) ) ; Collections . sort ( al ) ; for ( i = 0 ; i < n ; i ++ ) { if ( k <= al . get ( i ) ) { k ++ ; } } System . out . println ( k - 1 ) ; } catch ( Exception e ) { } } }","import java . io . * ; import java . math . BigInteger ; import java . util . * ;   import static java . lang . Math . PI ; import static java . lang . System . in ; import static java . lang . System . out ; import static java . lang . System . err ;   public class B { public static void main ( String [ ] args ) throws Exception { Foster sc = new Foster ( ) ; PrintWriter p = new PrintWriter ( out ) ; int n = sc . nextInt ( ) ; int a [ ] = sc . intArray ( n ) ; a = sort ( a ) ; int count = 0 ; int days = 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] >= days ) { count ++ ; days ++ ; } } p . println ( count ) ; p . close ( ) ; }   static int [ ] sort ( int a [ ] ) { ArrayList < Integer > arr = new ArrayList < > ( ) ; for ( int i : a ) { arr . add ( i ) ; } Collections . sort ( arr ) ; for ( int i = 0 ; i < arr . size ( ) ; i ++ ) { a [ i ] = arr . get ( i ) ; } return a ; } static class Foster { BufferedReader br = new BufferedReader ( new InputStreamReader ( in ) ) ; StringTokenizer st = new StringTokenizer ( \" \" ) ; String next ( ) { while ( ! st . hasMoreTokens ( ) ) try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } int [ ] intArray ( int n ) {"],"bleu":0.09413551627524555,"rouge_l":0.24059908427265875}
{"id":601,"predictions":["import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; } public static long mod = 17352642619633L ; void run ( FastScanner in , PrintWriter out ) { int N = in . nextInt ( ) ; int [ ] a = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { a [ i ] = in . nextInt ( ) ; } long ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { ans += a [ i ] ; } out . println ( ans ) ; } static class FastScanner { BufferedReader br ; StringTokenizer st ; public FastScanner ( InputStream in ) { br = new BufferedReader ( new InputStreamReader ( in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . io . * ; import java . util . * ;   public class ProblemA {   BufferedReader in ; PrintWriter out ; StringTokenizer ss ;   String _token ( ) throws IOException { while ( ! ss . hasMoreTokens ( ) ) ss = new StringTokenizer ( in . readLine ( ) ) ; return ss . nextToken ( ) ; }   int _int ( ) throws IOException { return Integer . parseInt ( _token ( ) ) ; }   void RUN ( ) throws IOException { in = new BufferedReader ( new InputStreamReader ( System . in ) ) ; out = new PrintWriter ( System . out ) ; ss = new StringTokenizer ( \" ▁ \" ) ;   int n = _int ( ) ; int k = _int ( ) ; int c = _int ( ) ; int a [ ] = new int [ 366 ] ; a [ 0 ] = 1 ; for ( int i = 0 ; i < c ; i ++ ) a [ _int ( ) ] ++ ; int it = 0 ; int ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( a [ i ] != 0 ) { it = 0 ; ans ++ ; } else { it ++ ; }   if ( it == k ) { it = 0 ; ans ++ ; } } out . println ( ans ) ; out . close ( ) ; }   public static void main ( String [ ] args ) throws Exception { try { new ProblemA ( ) . RUN ( ) ; } catch ( Exception e ) { System . out . println ( \" RE \" ) ; } }   }","import java . util . Scanner ; public class Ishu { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int N , K , C , i , in , fi , sum = 0 ; boolean flag = true , flag1 = true ; int [ ] holi = new int [ 365 ] ; N = scan . nextInt ( ) ; K = scan . nextInt ( ) ; C = scan . nextInt ( ) ; for ( i = 0 ; i < C ; ++ i ) holi [ i ] = scan . nextInt ( ) ; in = fi = 0 ; while ( N -- > 0 ) { flag = flag1 = false ; ++ fi ; if ( fi - in == K ) flag1 = true ; for ( i = 0 ; i < C ; ++ i ) if ( fi == holi [ i ] ) { flag = true ; break ; } if ( flag || flag1 ) { ++ sum ; in = fi ; } } System . out . println ( sum ) ; } }","import java . io . BufferedReader ; import java . io . FileNotFoundException ; import java . io . FileReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;   public class Main { public static void main ( String [ ] args ) { FastScanner input = new FastScanner ( ) ; int N = input . nextInt ( ) ; int K = input . nextInt ( ) ; int C = input . nextInt ( ) ; int last = 0 , count = 0 ; for ( int i = 0 ; i < C ; i ++ ) { int x = input . nextInt ( ) ; count += 1 + ( ( x - last - 1 ) \/ K ) ; last = x ; } if ( last != N ) count += ( N - last ) \/ K ; System . out . println ( count ) ; }"],"bleu":0.4714599626489729,"rouge_l":0.48594354326617795}
{"id":602,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["n , k = map ( int , input ( ) . split ( ) ) if ( n == k ) : print ( \"1\" * n ) exit ( ) a = ( n - k ) >> 1 i = 0 Ans = \" \" while ( i < n ) : Ans += \"0\" * ( a ) i += a if ( i > n - 1 ) : break Ans += \"1\" i += 1 if ( i > n - 1 ) : breakprint ( Ans [ : n ] )","import java . util . * ; public class Main { public static void main ( String args [ ] ) {"],"bleu":0.18057611286186562,"rouge_l":0.3617700729927007}
{"id":603,"predictions":["import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; } void run ( FastScanner in , PrintWriter out ) {"],"references":["import java . util . Scanner ;   public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; char [ ] ch = sc . next ( ) . toCharArray ( ) ; boolean f = true ; for ( int i = k ; i < n ; i ++ ) { if ( ch [ i ] == ' ? ' || ch [ i ] == ch [ i % k ] ) continue ; else if ( ch [ i % k ] == ' ? ' ) { ch [ i % k ] = ch [ i ] ; } else { f = false ; break ; } } if ( ! f ) { System . out . println ( \" NO \" ) ; continue ; } else { int s0 = 0 , s1 = 0 ; for ( int i = 0 ; i < k ; i ++ ) { if ( ch [ i ] == '0' ) s0 ++ ; else if ( ch [ i ] == '1' ) s1 ++ ; } if ( s0 > k \/ 2 || s1 > k \/ 2 ) { System . out . println ( \" NO \" ) ; } else { System . out . println ( \" YES \" ) ; } } } } }  ","import java . io . BufferedReader ; import java . io . BufferedWriter ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . OutputStreamWriter ; import java . util . ArrayList ; import java . util . Random ; import java . util . StringTokenizer ;   public class BalancedBitstring { static final int MAXN = 1000_006 ; static final long MOD = ( long ) 1e9 + 7 ; public static void main ( String [ ] args ) throws IOException { MyScanner s = new MyScanner ( ) ; Print p = new Print ( ) ; int t = s . nextInt ( ) ; while ( t -- > 0 ) { int n = s . nextInt ( ) ; int k = s . nextInt ( ) ; String str = s . nextLine ( ) ; char [ ] arr = str . toCharArray ( ) ; boolean poss = true ; int zero = 0 ; int one = 0 ; for ( int i = 0 ; i < k ; i ++ ) { int zc = 0 ; int oc = 0 ; int qc = 0 ; for ( int j = i ; j < n ; j += k ) { if ( arr [ j ] == '0' ) zc ++ ; else if ( arr [ j ] == '1' ) oc ++ ; else qc ++ ; } zero += zc > 0 ? 1 : 0 ; one += oc > 0 ? 1 : 0 ; if ( zc > 0 && oc > 0 ) { poss = false ; break ; } } if ( Math . max ( zero , one ) > k \/ 2 ) poss = false ; if ( ! poss ) { System . out . println ( \" NO \" ) ; } else { System . out . println ( \" YES \" ) ; } } } public static class Pair implements Comparable < Pair > { int first ; int second ; public Pair ( int a , int b ) { this . first = a ; this . second = b ; } @ Override public int compareTo ( Pair o ) {","import java . io . BufferedReader ; import java . io . BufferedWriter ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . OutputStreamWriter ; import java . util . ArrayList ; import java . util . Random ; import java . util . StringTokenizer ;   public class BalancedBitstring { static final int MAXN = 1000_006 ; static final long MOD = ( long ) 1e9 + 7 ; public static void main ( String [ ] args ) throws IOException { MyScanner s = new MyScanner ( ) ; Print p = new Print ( ) ; int t = s . nextInt ( ) ; while ( t -- > 0 ) { int n = s . nextInt ( ) ; int k = s . nextInt ( ) ; String str = s . nextLine ( ) ; char [ ] arr = str . toCharArray ( ) ; boolean poss = true ; int zero = 0 ; int one = 0 ; for ( int i = 0 ; i < k ; i ++ ) { int zc = 0 ; int oc = 0 ; int qc = 0 ; for ( int j = i ; j < n ; j += k ) { if ( arr [ j ] == '0' ) zc ++ ; else if ( arr [ j ] == '1' ) oc ++ ; else qc ++ ; } zero += zc > 0 ? 1 : 0 ; one += oc > 0 ? 1 : 0 ; if ( zc > 0 && oc > 0 ) { poss = false ; break ; } } if ( Math . max ( zero , one ) > k \/ 2 ) poss = false ; if ( ! poss ) { System . out . println ( \" NO \" ) ; } else { System . out . println ( \" YES \" ) ; } } } public static class Pair implements Comparable < Pair > { int first ; int second ; public Pair ( int a , int b ) { this . first = a ; this . second = b ; } @ Override public int compareTo ( Pair o ) {","import java . util . * ; public class BalancedBitString {   public static void main ( String [ ] args ) {"],"bleu":0.5104375140775744,"rouge_l":0.8022545796148427}
{"id":604,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . io . * ; import java . util . * ;    public class test { int INF = ( int ) 1e9 ; long MOD = 1000000007 ; void solve ( InputReader in , PrintWriter out ) throws IOException { long p = in . nextLong ( ) ; long k = in . nextInt ( ) ; ArrayList < Long > rs = new ArrayList < > ( ) ; while ( p != 0 ) { long r = p % k ; if ( r < 0 ) r += k ; rs . add ( r % k ) ; p -= ( r % k ) ; p \/= k ; p *= - 1 ; } out . println ( rs . size ( ) ) ; for ( long x : rs ) out . print ( x + \" ▁ \" ) ; out . println ( ) ; } public static void main ( String [ ] args ) throws IOException { if ( args . length > 0 && args [ 0 ] . equalsIgnoreCase ( \" d \" ) ) { DEBUG_FLAG = true ; } InputReader in = new InputReader ( ) ; PrintWriter out = new PrintWriter ( System . out ) ; int t = 1 ;","p , k = map ( int , raw_input ( ) . split ( ) ) r = [ ] while p : r . append ( p % k ) p \/= k p *= - 1 print len ( r ) print ' ▁ ' . join ( map ( str , r ) )","import java . util . * ; import java . io . * ; import java . lang . * ; import java . math . * ; public class B { public static void main ( String [ ] args ) throws Exception { BufferedReader bf = new BufferedReader ( new InputStreamReader ( System . in ) ) ;","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . ArrayDeque ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collections ; import java . util . HashMap ; import java . util . Objects ; import java . util . PriorityQueue ; import java . util . Random ; import java . util . StringTokenizer ;   public class Solution { public static void main ( String [ ] args ) throws IOException { FastScanner fs = new FastScanner ( ) ; PrintWriter out = new PrintWriter ( System . out ) ; int tt = 1 ; while ( tt -- > 0 ) { long p = fs . nextLong ( ) ; long k = fs . nextLong ( ) ; ArrayList < Long > l = new ArrayList < Long > ( ) ; while ( p != 0 ) { long rem = ( p % k + k ) % k ; l . add ( rem ) ; p -= rem ; p \/= - k ; } out . println ( l . size ( ) ) ; for ( long i : l ) { out . print ( i + \" ▁ \" ) ; } out . println ( ) ; } out . close ( ) ; }   static final Random random = new Random ( ) ; static < T > void shuffle ( T [ ] arr ) { int n = arr . length ; for ( int i = 0 ; i < n ; i ++ ) { int k = random . nextInt ( n ) ; T temp = arr [ k ] ; arr [ k ] = arr [ i ] ; arr [ i ] = temp ; } } static void ruffleSort ( int [ ] a ) { int n = a . length ;"],"bleu":0.7062213108536802,"rouge_l":0.6010112684195319}
{"id":605,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ;   public class Main {   public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int k = scanner . nextInt ( ) ; int [ ] a = new int [ n ] ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = scanner . nextInt ( ) ; String s = Integer . toString ( a [ i ] ) ; int cnt = 0 ; for ( int j = 0 ; j < s . length ( ) ; j ++ ) { if ( s . charAt ( j ) == '4' || s . charAt ( j ) == '7' ) { cnt ++ ; } } if ( cnt <= k ) ans ++ ; } System . out . println ( ans ) ;    } }","  import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . Arrays ; import java . util . HashSet ; import java . util . Set ; import java . util . StringTokenizer ;   public class A { public static void main ( String [ ] args ) { FastReader ( ) ; int t = 1 ; while ( t > 0 ) { solve ( ) ; -- t ; } write . flush ( ) ; write . close ( ) ; } static void solve ( ) { int n = ni ( ) , k = ni ( ) ; int a [ ] = ina ( n ) ; int ans = 0 ; for ( int i = 0 ; i < n ; ++ i ) { int count = 0 ; while ( a [ i ] > 0 ) { int p = a [ i ] % 10 ; if ( p == 7 || p == 4 ) { ++ count ; } a [ i ] = a [ i ] \/ 10 ; } if ( count <= k ) { ++ ans ; } } out ( ans ) ; }","import java . util . * ; public class RomaandLuckyNumbers {   public static void main ( String [ ] args ) {","import java . util . * ; public class RomaandLuckyNumbers {   public static void main ( String [ ] args ) {","import java . io . * ; import java . util . * ;   public class _temp2 { public static void main ( String [ ] args ) throws NumberFormatException , IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; String [ ] st = br . readLine ( ) . split ( \" ▁ \" ) ; int n = Integer . parseInt ( st [ 0 ] ) ; int k = Integer . parseInt ( st [ 1 ] ) ; int count = n ; st = br . readLine ( ) . split ( \" ▁ \" ) ; for ( int i = 0 ; i < n ; i ++ ) { int x = Integer . parseInt ( st [ i ] ) ; int c = 0 ; while ( x > 0 ) { int temp = x % 10 ; if ( temp == 4 || temp == 7 ) c ++ ; x = x \/ 10 ; } if ( c > k ) count -- ; } System . out . println ( count ) ; } }"],"bleu":0.6229691978148632,"rouge_l":0.6286997885835095}
{"id":606,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . ArrayList ; import java . util . List ; import java . util . StringTokenizer ;   public class VasyaAndWrestling { public static void main ( String [ ] args ) { FastReader ( ) ; int t = 1 ; while ( t > 0 ) { solve ( ) ; -- t ; } write . flush ( ) ; write . close ( ) ; } static void solve ( ) { int n = ni ( ) ; int m = ni ( ) ; int a [ ] = ina ( n ) ; int b [ ] = ina ( m ) ; int i = 0 , j = 0 ; while ( i < n && j < m ) { if ( a [ i ] <= b [ j ] ) { ++ i ; ++ j ; } else { ++ j ; } } out ( n - i ) ; }","import java . util . * ; import java . lang . * ; import java . io . * ;   public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) {","import java . util . * ; import java . lang . * ; import java . io . * ;   public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) {","import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . OutputStream ; import java . io . PrintWriter ; import java . io . BufferedWriter ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . TreeMap ; import java . util . StringTokenizer ; import java . io . Writer ; import java . io . OutputStreamWriter ; import java . io . BufferedReader ; import java . io . InputStream ;   public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; OutputWriter out = new OutputWriter ( outputStream ) ; BGeorgeAndRound solver = new BGeorgeAndRound ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; }   static class BGeorgeAndRound { static TreeMap < Integer , Integer > multiset = new TreeMap < Integer , Integer > ( ) ;   static void add ( int x ) { if ( multiset . containsKey ( x ) ) { multiset . put ( x , multiset . get ( x ) + 1 ) ; } else { multiset . put ( x , 1 ) ; } }   static void remove ( int x ) { multiset . put ( x , multiset . get ( x ) - 1 ) ; if ( multiset . get ( x ) == 0 ) { multiset . remove ( x ) ; } }   public void solve ( int testNumber , InputReader in , OutputWriter out ) { int n = in . nextInt ( ) , m = in . nextInt ( ) ; int [ ] a = in . nextIntArray ( n ) ; int [ ] b = in . nextIntArray ( m ) ; for ( int i = 0 ; i < m ; i ++ ) { add ( b [ i ] ) ; } int count = 0 ; for ( int i = n - 1 ; i >= 0 ; i -- ) {   if ( multiset . higherKey ( a [ i ] - 1 ) != null ) {"],"bleu":0.6211440207081306,"rouge_l":0.6866791744840526}
{"id":607,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . math . BigInteger ; import java . util . * ; public class _1238A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { BigInteger x = new BigInteger ( sc . next ( ) ) ; BigInteger y = new BigInteger ( sc . next ( ) ) ; if ( ( x . subtract ( y ) ) . equals ( BigInteger . ONE ) ) System . out . println ( \" NO \" ) ; else System . out . println ( \" YES \" ) ; } } }","import java . util . * ; public class Training { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int t = in . nextInt ( ) ; for ( int q = 0 ; q < t ; q ++ ) { long x = in . nextLong ( ) ; long y = in . nextLong ( ) ; long diff = x - y ; if ( diff == 1 ) System . out . println ( \" NO \" ) ; else System . out . println ( \" YES \" ) ; } } }","import java . io . File ; import java . io . FileInputStream ; import java . io . FileNotFoundException ; import java . io . IOException ; import java . io . PrintWriter ; import java . security . AccessControlException ; import java . util . Arrays ; import java . util . Collection ; import java . util . List ; import java . util . Scanner ; import java . util . function . Function ; import java . util . stream . Collectors ; public class _p001238A { static public void main ( final String [ ] args ) throws IOException { p001238A . _main ( args ) ; }","import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner s = new Scanner ( System . in ) ; int t = s . nextInt ( ) ; while ( t -- != 0 ) { long x = s . nextLong ( ) ; long y = s . nextLong ( ) ; String ans = \" YES \" ; if ( x - y == 1 ) { ans = \" NO \" ; } System . out . println ( ans ) ; } } }"],"bleu":0.21966041748953155,"rouge_l":0.36573401162790703}
{"id":608,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . io . IOException ; import java . io . InputStream ; import java . util . StringTokenizer ;    import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . OutputStreamWriter ; import java . io . PrintWriter ; public class Main { static int maxn = ( int ) ( 1e5 + 5 ) ; static int [ ] t = new int [ maxn ] ; static int [ ] l = new int [ maxn ] ; static int [ ] r = new int [ maxn ] ; public static void main ( String [ ] args ) { InputStream inputStream = System . in ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( new OutputStreamWriter ( System . out ) ) ; int n = in . nextInt ( ) ; int m = in . nextInt ( ) ; int s = in . nextInt ( ) ; int f = in . nextInt ( ) ; for ( int i = 1 ; i <= m ; ++ i ) { t [ i ] = in . nextInt ( ) ; l [ i ] = in . nextInt ( ) ; r [ i ] = in . nextInt ( ) ; } int pos = s , p = 0 ; for ( int i = 1 ; pos != f ; ++ i ) { while ( p <= m && t [ p ] < i ) { ++ p ; } if ( pos < f ) { if ( p > m || t [ p ] != i || ( t [ p ] == i && ( l [ p ] > pos + 1 || r [ p ] < pos ) ) ) { out . print ( ' R ' ) ; ++ pos ; } else { out . print ( ' X ' ) ; } } else { if ( p > m || t [ p ] != i || ( t [ p ] == i && ( l [ p ] > pos || r [ p ] < pos - 1 ) ) ) { out . print ( ' L ' ) ; -- pos ; } else { out . print ( ' X ' ) ; } } } out . flush ( ) ; out . close ( ) ;","import java . io . DataInputStream ; import java . io . IOException ; import java . util . Arrays ; import java . util . HashMap ; import java . util . Map ;   public class A { public static void main ( String [ ] args ) throws IOException { FastReader reader = new FastReader ( ) ;   int n = reader . nextInt ( ) ; int m = reader . nextInt ( ) ; int s = reader . nextInt ( ) ; int f = reader . nextInt ( ) ;   Map < Integer , int [ ] > sled = new HashMap < > ( ) ;   for ( int i = 0 ; i < m ; i ++ ) { int t = reader . nextInt ( ) ; int [ ] leftRight = new int [ 2 ] ; leftRight [ 0 ] = reader . nextInt ( ) ; leftRight [ 1 ] = reader . nextInt ( ) ;   sled . put ( t , leftRight ) ; }   int cur = s ; int step = 1 ; while ( cur != f ) { int [ ] borders = sled . get ( step ) ; if ( cur < f ) { if ( borders != null && ( cur >= borders [ 0 ] && cur <= borders [ 1 ] || cur + 1 >= borders [ 0 ] && cur + 1 <= borders [ 1 ] ) ) { System . out . print ( ' X ' ) ; } else { cur ++ ; System . out . print ( ' R ' ) ; } } else { if ( borders != null && ( cur >= borders [ 0 ] && cur <= borders [ 1 ] || cur - 1 >= borders [ 0 ] && cur - 1 <= borders [ 1 ] ) ) { System . out . print ( ' X ' ) ; } else { cur -- ; System . out . print ( ' L ' ) ; } } step ++ ; }   }                         private static class FastReader { final private int BUFFER_SIZE = 1 << 16 ; private DataInputStream din ; private byte [ ] buffer ; private int bufferPointer , bytesRead ;   public FastReader ( ) { din = new DataInputStream ( System . in ) ; buffer = new byte [ BUFFER_SIZE ] ; bufferPointer = bytesRead = 0 ; }   public String readLine ( ) throws IOException { byte [ ] buf = new byte [ 64 ] ;","import java . util . * ; import java . io . * ; public class a { static long mod = 1000000007 ; public static void main ( String [ ] args ) throws IOException {"],"bleu":0.6476898460249281,"rouge_l":0.6355046379620657}
{"id":609,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["n , m = map ( int , input ( ) . split ( ) ) a = [ 10 * * 9 for _ in range ( n ) ] extra = [ 0 for _ in range ( n ) ] query = list ( ) for _ in range ( m ) : t , l , r , x = map ( int , input ( ) . split ( ) ) l -= 1 r -= 1 query . append ( ( t , l , r , x ) ) if t == 1 : for j in range ( l , r + 1 ) : extra [ j ] += x else : for j in range ( l , r + 1 ) : a [ j ] = min ( a [ j ] , x - extra [ j ] ) extra = a . copy ( ) for t , l , r , x in query : if t == 1 : for j in range ( l , r + 1 ) : a [ j ] += x else : val = - 10 * * 9 for j in range ( l , r + 1 ) : val = max ( val , a [ j ] ) if not val == x : print ( ' NO ' ) exit ( 0 )   print ( ' YES ' ) for x in extra : print ( x , end = ' ▁ ' )"],"bleu":0.0010279103317705797,"rouge_l":0.05051527419948473}
{"id":610,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . * ;   public class TestCodeforces {   public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ;   String s = scanner . nextLine ( ) ; String s2 = scanner . nextLine ( ) ;   int i = s . length ( ) - 1 , j = s2 . length ( ) - 1 ;   while ( i >= 0 && j >= 0 ) { if ( s . charAt ( i ) == s2 . charAt ( j ) ) { i -- ; j -- ; } else break ; } System . out . println ( i + j + 2 ) ;   scanner . close ( ) ; }   }","import java . util . * ;   public class TestCodeforces {   public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ;     String s = scanner . nextLine ( ) ; String s2 = scanner . nextLine ( ) ;    int i = s . length ( ) - 1 , j = s2 . length ( ) - 1 ;   while ( i >= 0 && j >= 0 ) { if ( s . charAt ( i ) == s2 . charAt ( j ) ) { i -- ; j -- ; } else break ; }   System . out . println ( i + j + 2 ) ; scanner . close ( ) ; }   }","import java . util . Scanner ;   public class Main { public static void main ( String [ ] args ) { String s1 = new String ( ) ; String s2 = new String ( ) ; Scanner input = new Scanner ( System . in ) ; s1 = input . nextLine ( ) ; s2 = input . nextLine ( ) ; StringBuffer sb1 = new StringBuffer ( s1 ) ; StringBuffer sb2 = new StringBuffer ( s2 ) ; char [ ] c1 = sb1 . reverse ( ) . toString ( ) . toCharArray ( ) ; char [ ] c2 = sb2 . reverse ( ) . toString ( ) . toCharArray ( ) ; int len1 = c1 . length ; int len2 = c2 . length ; int len = Math . min ( len1 , len2 ) ; int i ; for ( i = 0 ; i < len ; i ++ ) { if ( c1 [ i ] != c2 [ i ] ) { break ; } } int count = len1 + len2 - i - i ; System . out . println ( count ) ; } }  "],"bleu":0.05829810617290925,"rouge_l":0.19921619856303072}
{"id":611,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; out . println ( n * ( n + 1 ) \/ 2 ) ; out . close ( ) ; } static int l_min ( int [ ] a ) { Arrays . sort ( a ) ; return a [ 0 ] ; } static int l_max ( int [ ] a ) { int l = a . length ; Arrays . sort ( a ) ; return a [ l - 1 ] ; } public static PrintWriter out ; public static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . io . * ;   public class CF { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; long [ ] sequence = { 1 , 2 , 4 , 8 , 16 , 32 , 64 , 128 , 256 , 512 , 1024 , 2048 , 4096 , 8092 , 16184 , 32368 , 64736 , 129472 , 258944 , 517888 , 1035776 , 2071552 , 4143104 , 8286208 , 16572416 , 33144832 , 66289664 , 132579328 , 265158656 , 530317312 , 1060634624 , 2121269248 , 4242538496L , 8485076992L , 16970153984L , 33940307968L } ; System . out . println ( sequence [ Integer . parseInt ( br . readLine ( ) ) ] ) ; } }  ","import java . util . * ; public class Sol { public static void main ( String [ ] args ) { long [ ] list = { 1 , 2 , 4 , 8 , 16 , 32 , 64 , 128 , 256 , 512 , 1024 , 2048 , 4096 , 8092 , 16184 , 32368 , 64736 , 129472 , 258944 , 517888 , 1035776 , 2071552 , 4143104 , 8286208 , 16572416 , 33144832 , 66289664 , 132579328 , 265158656l , 530317312l , 1060634624l , 2121269248l , 4242538496l , 8485076992l , 16970153984l , 33940307968l } ; Scanner in = new Scanner ( System . in ) ; int i = in . nextInt ( ) ; System . out . println ( list [ i ] ) ; } }","import java . util . * ; public class A { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; long n = scan . nextLong ( ) ; long [ ] ans = new long [ 36 ] ; ans [ 0 ] = 1 ; ans [ 1 ] = 2 ; ans [ 2 ] = 4 ; for ( int i = 3 ; i < 36 ; i ++ ) { ans [ i ] = ans [ i - 1 ] * 2 ; if ( ans [ i ] == 8192 ) { ans [ i ] = 8092 ; } } System . out . println ( ans [ ( int ) ( n ) ] ) ; } }","import java . util . * ; import java . io . * ;   public class DaVinciPowers { public static void main ( String [ ] args ) throws IOException { BufferedReader f = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter out = new PrintWriter ( new OutputStreamWriter ( System . out ) ) ; int n = Integer . parseInt ( f . readLine ( ) ) ; long [ ] arr = new long [ ] { 1L , 2L , 4L , 8L , 16L , 32L , 64L , 128L , 256L , 512L , 1024L , 2048L , 4096L , 8092L , 16184L , 32368L , 64736L , 129472L , 258944L , 517888L , 1035776L , 2071552L , 4143104L , 8286208L , 16572416L , 33144832L , 66289664L , 132579328L , 265158656L , 530317312L , 1060634624L , 2121269248L , 4242538496L , 8485076992L , 16970153984L , 33940307968L } ; out . println ( arr [ n ] ) ; out . close ( ) ; } }"],"bleu":0.2694597330567944,"rouge_l":0.34119990805302275}
{"id":612,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . Arrays ; import java . util . Scanner ;   public class _0833IlyaandQueries { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; char [ ] str = sc . nextLine ( ) . toCharArray ( ) ; long [ ] oriArr = new long [ str . length + 1 ] ; oriArr [ 1 ] = 1 ; for ( int i = 1 ; i < str . length ; i ++ ) { if ( str [ i ] == str [ i - 1 ] ) { oriArr [ i + 1 ] = oriArr [ i ] + 1 ; } else { oriArr [ i + 1 ] = oriArr [ i ] ; } } int m = sc . nextInt ( ) ; for ( int i = 0 ; i < m ; i ++ ) { int l = sc . nextInt ( ) ; int r = sc . nextInt ( ) ; System . out . println ( oriArr [ r ] - oriArr [ l ] ) ; } }   }","import java . util . Scanner ;   public class IlyaAndQueries {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; char [ ] c = sc . next ( ) . toCharArray ( ) ; int m = sc . nextInt ( ) ; int n = c . length ; int l , r ; int [ ] dp = new int [ n ] ; for ( int i = 1 ; i < n ; i ++ ) { dp [ i ] = dp [ i - 1 ] ; if ( c [ i ] == c [ i - 1 ] ) dp [ i ] ++ ; } while ( m -- > 0 ) { l = sc . nextInt ( ) ; r = sc . nextInt ( ) ; System . out . println ( dp [ r - 1 ] - dp [ l - 1 ] ) ; } sc . close ( ) ; } }","import java . io . * ; import java . util . * ;   import static java . lang . Math . * ;   public class Main {   public static void main ( String [ ] args ) throws IOException { FastReader in = new FastReader ( System . in ) ; PrintWriter pw = new PrintWriter ( System . out ) ; char [ ] s = in . next ( ) . toCharArray ( ) ; int [ ] pref = new int [ s . length + 3 ] ; for ( int i = 1 ; i < s . length ; i ++ ) { if ( s [ i - 1 ] == s [ i ] ) pref [ i ] ++ ; } for ( int i = 1 ; i <= s . length ; i ++ ) { pref [ i ] += pref [ i - 1 ] ; }"],"bleu":0.04899843958132708,"rouge_l":0.26725082146768897}
{"id":613,"predictions":["import java . io . * ; import java . util . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) throws java . lang . Exception { Reader pm = new Reader ( ) ;"],"references":["import java . util . * ;   public class Example { static int [ ] dp ;   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ;","import java . util . Scanner ; import java . lang . * ;   public class p339b_Xenia_and_ringroad { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ;   long n = input . nextInt ( ) ; int w = input . nextInt ( ) ;   long a = 0 ; long temp = 1 ; long time = 0 ; long count = 0 ;   for ( int i = 0 ; i < w ; i ++ ) { a = input . nextInt ( ) ; if ( a < temp ) { count ++ ; } temp = a ; }  ","import java . util . * ;   public class JavaApplication116 { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; long n , m , a = 1 , count = 0 ; n = in . nextLong ( ) ; m = in . nextLong ( ) ; for ( int i = 0 ; i < m ; i ++ ) { long b = in . nextLong ( ) ; if ( a <= b ) count += b - a ; else count += ( n - a ) + b ; a = b ; } System . out . println ( count ) ; } }","  import java . io . * ; import java . util . StringTokenizer ;   public class B399 { public static void main ( String [ ] args ) throws IOException { PrintWriter out = new PrintWriter ( System . out ) ; FastScanner fs = new FastScanner ( ) ; long N , M ; N = fs . nextLong ( ) ; M = fs . nextLong ( ) ; int X ; int cur = 0 ; long ans = - 1 ; for ( int i = 0 ; i < M ; i ++ ) { X = fs . nextInt ( ) ; if ( cur <= X ) { cur = X ; } else { ans += N ; cur = X ; } } ans += cur ; out . println ( ans ) ; out . close ( ) ; }   static class FastScanner { BufferedReader br ; StringTokenizer st ;   public FastScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; }   public FastScanner ( String filePath ) throws FileNotFoundException { try { br = new BufferedReader ( new FileReader ( filePath ) ) ; } catch ( FileNotFoundException e ) { e . printStackTrace ( ) ; } }   String next ( ) throws IOException { while ( st == null || ! st . hasMoreTokens ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; throw e ; } } return st . nextToken ( ) ; }   String nextLine ( ) throws IOException { String str ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; throw e ; } return str ; }   int nextInt ( ) throws IOException { return Integer . parseInt ( this . next ( ) ) ; }   long nextLong ( ) throws IOException { return Long . parseLong ( this . next ( ) ) ; } } }","import java . util . * ;   public class StackBracket { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ;   int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; long sum = 0 ; int curp = 1 ; for ( int j = 0 ; j < m ; j ++ ) { int io = sc . nextInt ( ) ; int diff = io - curp ; if ( diff >= 0 ) { sum = sum + diff ; curp = io ; } else { sum = sum + n - curp ; sum = sum + 1 + io - 1 ; curp = io ; } } System . out . println ( sum ) ;     }    public static int getAns ( String s , int k , int start1 , int end1 ) {"],"bleu":0.6000600150045015,"rouge_l":0.6595769961977186}
{"id":614,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . io . BufferedReader ; import java . io . FileReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Scanner ; import java . util . StringTokenizer ; import java . util . * ; import java . io . * ; public class codeforces { static class Student { int x , y , z ; Student ( int x , int y , int z ) { this . x = x ; this . y = y ; this . z = z ; } } static int prime [ ] ; static void sieveOfEratosthenes ( int n ) {","import java . util . * ; import java . io . * ;   public class CodeForces_644B_B_Processing_Queries { public static void main ( String [ ] args ) throws IOException { BufferedReader reader = new BufferedReader ( new InputStreamReader ( System . in ) ) ; String [ ] line = reader . readLine ( ) . split ( \" ▁ \" ) ; final int n = Integer . parseInt ( line [ 0 ] ) ; final int b = Integer . parseInt ( line [ 1 ] ) ;   final int [ ] [ ] queries = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { final int [ ] query = queries [ i ] ; line = reader . readLine ( ) . split ( \" ▁ \" ) ; query [ 0 ] = Integer . parseInt ( line [ 0 ] ) ; query [ 1 ] = Integer . parseInt ( line [ 1 ] ) ; }   int queryIdx = 0 ; long serverTime = - 1 ; int serverIdx = - 1 ;   Deque < Long > queueTime = new ArrayDeque < Long > ( ) ; Deque < Integer > queueIdx = new ArrayDeque < Integer > ( ) ;   long [ ] result = new long [ 200000 + 1 ] ; Arrays . fill ( result , - 1 ) ;   long lastIdx = 1000000000L * ( n + 1 ) + 1 ; for ( long time = 0 ; time < lastIdx ; time ++ ) { if ( serverTime != - 1 ) { if ( serverTime == time ) { result [ serverIdx ] = time ; serverTime = - 1 ;","import java . util . Scanner ; import java . util . Queue ; import java . util . LinkedList ;   public class Review6new {   public static void main ( String [ ] args ) { Scanner UserInput = new Scanner ( System . in ) ; int num = UserInput . nextInt ( ) ; int size = UserInput . nextInt ( ) ; int [ ] moments = new int [ num ] ; int [ ] times = new int [ num ] ; for ( int i = 0 ; i < num ; i ++ ) { moments [ i ] = UserInput . nextInt ( ) ; times [ i ] = UserInput . nextInt ( ) ; } Queue < Long > queries = new LinkedList < > ( ) ; long next = 0 ; for ( int i = 0 ; i < num ; i ++ ) { while ( ! queries . isEmpty ( ) && queries . peek ( ) <= moments [ i ] ) { queries . remove ( ) ; } if ( queries . size ( ) <= size ) { next = Math . max ( next , ( long ) moments [ i ] ) + ( long ) times [ i ] ; System . out . print ( next + \" ▁ \" ) ; queries . add ( next ) ; } else { System . out . print ( - 1 + \" ▁ \" ) ; } } UserInput . close ( ) ; }   }","import java . util . * ;   public class Main {   public static void main ( String [ ] args ) { Scanner reader = new Scanner ( System . in ) ; int n = reader . nextInt ( ) ; int b = reader . nextInt ( ) ; int [ ] t = new int [ n ] ; int [ ] d = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { t [ i ] = reader . nextInt ( ) ; d [ i ] = reader . nextInt ( ) ; }"],"bleu":0.24064718961495907,"rouge_l":0.44565217391304335}
{"id":615,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . Scanner ;   public class PoloPenguinStringMaker { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; int k = scan . nextInt ( ) ;   if ( k == 1 ) { if ( n == 1 ) { System . out . println ( \" a \" ) ; } else System . out . println ( - 1 ) ; return ; } if ( k > n ) { System . out . println ( - 1 ) ; return ; } StringBuilder ans = new StringBuilder ( ) ;   for ( int i = 0 ; i < n - k + 2 ; i ++ ) { if ( i % 2 == 0 ) ans . append ( ' a ' ) ; else ans . append ( ' b ' ) ; }   char c = ' c ' ; for ( int i = 0 ; i < k - 2 ; i ++ ) { ans . append ( c ) ; c ++ ; }   System . out . println ( ans ) ; } }","import java . util . Scanner ;   public class A177 {   public static void main ( String [ ] args ) {","import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . ArrayList ; import java . util . StringTokenizer ;   public class CF288A { public static void main ( String [ ] args ) { FastReader input = new FastReader ( ) ; PrintWriter pw = new PrintWriter ( System . out ) ;   int n = input . nextInt ( ) ; int k = input . nextInt ( ) ;   if ( n < k ) { pw . println ( - 1 ) ; } else if ( n > 1 && k == 1 ) { pw . println ( - 1 ) ; } else { if ( n == 1 && k == 1 ) { pw . println ( \" a \" ) ; } else { char first = ' a ' ; char sec = ' b ' ; int left = k - 2 ;   int pos = n - left ;   for ( int i = 1 ; i <= pos ; i ++ ) { if ( i % 2 != 0 ) pw . print ( first ) ; else pw . print ( sec ) ; }   char rest = ' c ' ;   for ( int i = 1 ; i <= left ; i ++ ) { pw . print ( ( char ) rest ) ; rest ++ ; } pw . println ( ) ; } }   pw . flush ( ) ; pw . close ( ) ; } static class FastReader { BufferedReader br ; StringTokenizer st ;   public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; }   String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   long nextLong ( ) { return Long . parseLong ( next ( ) ) ; }   double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; }   String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"bleu":0.5632041820328907,"rouge_l":0.5875656742556917}
{"id":616,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ; public class experiment { static int M = 1_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . Scanner ;   public class mahmoudAndLongestUncommonSubsequence { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String value1 = sc . next ( ) ; String value2 = sc . next ( ) ; if ( value1 . equals ( value2 ) ) { System . out . println ( - 1 ) ; } else if ( value1 . length ( ) > value2 . length ( ) ) { System . out . println ( value1 . length ( ) ) ; } else { System . out . println ( value2 . length ( ) ) ; } } }","import java . util . * ;   public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ;   String a = input . next ( ) ; String b = input . next ( ) ; if ( a . equals ( b ) ) System . out . println ( - 1 ) ; else { System . out . println ( Math . max ( a . length ( ) , b . length ( ) ) ) ; }                            } }","import java . util . Scanner ;   public class JavaApplication1 {   public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; String a = input . next ( ) ; String b = input . next ( ) ; if ( a . equals ( b ) ) System . out . println ( - 1 ) ; else System . out . println ( Math . max ( a . length ( ) , b . length ( ) ) ) ; input . close ( ) ; }   }"],"bleu":0.10346415598105856,"rouge_l":0.2405362776025237}
{"id":617,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; out . println ( a > b ? \" ABC \" : \" ABD \" ) ; out . flush ( ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . io . * ; import java . util . * ; import java . util . Scanner ; import java . util . Arrays ;   public class cas { public static void main ( String [ ] args ) {","import java . util . * ; import java . lang . Math ; public class question3 {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; String ss [ ] = s . split ( \" WUB \" ) ; for ( int i = 0 ; i < ss . length ; i ++ ) { System . out . println ( ss [ i ] + \" ▁ \" ) ; } }   }","import java . io . BufferedReader ; import java . io . FileNotFoundException ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . StringTokenizer ;   public class Dubstep {   static class InputReader { BufferedReader reader ; StringTokenizer tokenizer ; public InputReader ( ) throws FileNotFoundException { reader = new BufferedReader ( new InputStreamReader ( System . in ) ) ; tokenizer = null ; } String next ( ) { while ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } public long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } public double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } } public static void main ( String [ ] args ) throws FileNotFoundException , IOException { InputReader r = new InputReader ( ) ; PrintWriter pw = new PrintWriter ( System . out ) ; String str = r . next ( ) ; str = str . replaceAll ( \" WUB \" , \" ▁ \" ) . trim ( ) ; pw . println ( str ) ; pw . close ( ) ; } }","import java . util . * ;   public class NewClass { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; boolean first = true ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( i + 2 < s . length ( ) && s . charAt ( i ) == ' W ' && s . charAt ( i + 1 ) == ' U ' && s . charAt ( i + 2 ) == ' B ' ) { if ( ! first ) System . out . print ( \" ▁ \" ) ; i += 2 ; } else { System . out . print ( s . charAt ( i ) ) ; first = false ; } } System . out . println ( \" \" ) ; } }"],"bleu":0.5464108905517925,"rouge_l":0.6212677125506073}
{"id":618,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["import java . lang . * ; import java . util . * ; class GFG { static long findSum ( int n ) { long sum2 , sum5 , sum10 ; sum2 = ( ( n \/ 2 ) * ( 4 + ( n \/ 2 - 1 ) * 2 ) ) \/ 2 ; sum5 = ( ( n \/ 5 ) * ( 10 + ( n \/ 5 - 1 ) * 5 ) ) \/ 2 ; sum10 = ( ( n \/ 10 ) * ( 20 + ( n \/ 10 - 1 ) * 10 ) ) \/ 2 ; return sum2 + sum5 - sum10 ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( findSum ( n ) ) ; } }"],"bleu":0.1958859380165847,"rouge_l":0.45730945439400245}
{"id":619,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { a [ i ] = sc . nextInt ( ) ; } } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { for ( int k = 0 ; k < n ; k ++ ) { for ( int l = 0 ; l < n ; l ++ ) { if ( a [ i ] > a [ j ] ) { a [ i ] = a [ j ] ; } } } } out . println ( a [ n - 1 ] ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["class GFG { static int waysToSplit ( String s ) { int n = s . length ( ) ; int answer = 0 ; int prefix [ ] = new int [ n ] ; int suffix [ ] = new int [ n ] ; int seen [ ] = new int [ 26 ] ; for ( int i = 0 ; i < n ; i ++ ) { int prev = ( i - 1 >= 0 ? prefix [ i - 1 ] : 0 ) ; if ( seen [ s . charAt ( i ) - ' a ' ] == 0 ) { prefix [ i ] += ( prev + 1 ) ; } else prefix [ i ] = prev ; seen [ s . charAt ( i ) - ' a ' ] = 1 ; } for ( int i = 0 ; i < 26 ; i ++ ) seen [ i ] = 0 ; suffix [ n - 1 ] = 0 ; for ( int i = n - 1 ; i >= 1 ; i -- ) { int prev = suffix [ i ] ; if ( seen [ s . charAt ( i ) - ' a ' ] == 0 ) { suffix [ i - 1 ] += ( prev + 1 ) ; } else suffix [ i - 1 ] = prev ; seen [ s . charAt ( i ) - ' a ' ] = 1 ; } for ( int i = 0 ; i < n ; i ++ ) { if ( prefix [ i ] == suffix [ i ] ) answer ++ ; } return answer ; } public static void main ( String [ ] args ) { String s = \" ababa \" ; System . out . println ( waysToSplit ( s ) ) ; } }"],"bleu":0.2525672509937726,"rouge_l":0.39635239290195373}
{"id":620,"predictions":["import java . io . * ; import java . util . * ; class GFG { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; if ( n == 1 ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ; } }"],"references":["public class GFG { static boolean check ( int a [ ] , int n ) { if ( n % 2 == 1 ) return false ; for ( int i = 0 ; i < n \/ 2 ; i ++ ) { if ( a [ i ] != a [ i + ( n \/ 2 ) ] ) return false ; } return true ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 4 , 1 , 4 } ; int n = a . length ; if ( check ( a , n ) ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ; } }"],"bleu":0.26264783803614117,"rouge_l":0.439291372605502}
{"id":621,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int n ) { if ( n == 1 ) return false ; if ( n == 2 ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 12 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . io . * ; class GFG { static boolean solve ( int n , int k ) { if ( n >= ( k * ( k + 1 ) ) \/ 2 ) { return true ; } return false ; } public static void main ( String [ ] args ) { int n = 12 , k = 4 ; if ( solve ( n , k ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.6366342763338091,"rouge_l":0.7861087866108787}
{"id":622,"predictions":["import java . io . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return true ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 10 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . io . * ; import java . util . * ; class GFG { static void numbersWith3Divisors ( int n ) { boolean [ ] prime = new boolean [ n + 1 ] ; Arrays . fill ( prime , true ) ; prime [ 0 ] = prime [ 1 ] = false ; for ( int p = 2 ; p * p <= n ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i <= n ; i += p ) prime [ i ] = false ; } } System . out . println ( \" Numbers ▁ with ▁ 3 ▁ divisors ▁ : ▁ \" ) ; for ( int i = 0 ; i * i <= n ; i ++ ) if ( prime [ i ] ) System . out . print ( i * i + \" ▁ \" ) ; } public static void main ( String [ ] args ) { int n = 96 ; numbersWith3Divisors ( n ) ; } }"],"bleu":0.21918260409256682,"rouge_l":0.3685800604229607}
{"id":623,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int a = Integer . parseInt ( st . nextToken ( ) ) ; int b = Integer . parseInt ( st . nextToken ( ) ) ; int c = Integer . parseInt ( st . nextToken ( ) ) ; int d = Integer . parseInt ( st . nextToken ( ) ) ; System . out . println ( Math . min ( a , b ) ) ; } }"],"references":["import java . util . * ; class GFG { static int countWays ( int A , int B , int C ) { int minAddA = Math . max ( 0 , ( C + B - A + 2 ) \/ 2 ) ; int count_ways = Math . max ( C - minAddA + 1 , 0 ) ; return count_ways ; } public static void main ( String args [ ] ) { int A = 3 , B = 5 , C = 5 ; System . out . println ( countWays ( A , B , C ) ) ; } }"],"bleu":0.19174229977716561,"rouge_l":0.3805628725911549}
{"id":624,"predictions":["import java . util . * ; class GFG { static boolean isVowel ( String s ) { if ( s . equals ( \" a \" ) || s . equals ( \" e \" ) ) return true ; if ( s . equals ( \" e \" ) ) return false ; if ( s . equals ( \" e \" ) ) return true ; if ( s . equals ( \" e \" ) ) return true ; if ( s . equals ( \" e \" ) ) return true ; if ( s . equals ( \" e \" ) ) return true ; if ( s . equals ( \" e \" ) ) return true ; if ( s . equals ( \" e \" ) ) return true ; if ( s . equals ( \" e \" ) ) return true ; if ( s . equals ( \" e \" ) ) return true ; if ( s . equals ( \" e \" ) ) return true ; if ( s . equals ( \" e \" ) ) return true ; if ( s . equals ( \" e \" ) ) return true ; if ( s . equals ( \" e \" ) ) return true ; if ( s . equals ( \" e \" ) ) return true ; if ( s . equals ( \" e \" ) ) return true ; if ( s . equals ( \" e \" ) ) return true ; if ( s . equals ( \" e \" ) ) return true ; if ( s . equals ( \" e \" ) ) return true ; return true ; return true ; } public static void main ( String [ ] args ) { String s = \" geeks \" ; if ( isVel ( s ) ) System . out . println ( isVowel ( s ) ) ; } }"],"references":["import java . util . * ; class GFG { static boolean isOperand ( char x ) { return ( x >= ' a ' && x <= ' z ' ) || ( x >= ' A ' && x <= ' Z ' ) ; } static String getInfix ( String exp ) { Stack < String > s = new Stack < String > ( ) ; for ( int i = 0 ; i < exp . length ( ) ; i ++ ) { if ( isOperand ( exp . charAt ( i ) ) ) { s . push ( exp . charAt ( i ) + \" \" ) ; } else { String op1 = s . peek ( ) ; s . pop ( ) ; String op2 = s . peek ( ) ; s . pop ( ) ; s . push ( \" ( \" + op2 + exp . charAt ( i ) + op1 + \" ) \" ) ; } } return s . peek ( ) ; } public static void main ( String args [ ] ) { String exp = \" ab * c + \" ; System . out . println ( getInfix ( exp ) ) ; } }"],"bleu":0.13005765861334584,"rouge_l":0.4362736108564093}
{"id":625,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["import java . * ; public class GFG { static int countPairs ( int arr [ ] , int n ) { int twoCount = 0 , twoGrCount = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 2 ) twoCount ++ ; else if ( arr [ i ] > 2 ) twoGrCount ++ ; } return twoCount * twoGrCount + ( twoGrCount * ( twoGrCount - 1 ) ) \/ 2 ; } public static void main ( String args [ ] ) { int arr [ ] = { 3 , 4 , 5 } ; int n = arr . length ; System . out . println ( countPairs ( arr , n ) ) ; } }"],"bleu":0.5443239358813026,"rouge_l":0.6997102149239314}
{"id":626,"predictions":["import java . io . * ; class GFG { static boolean isVowel ( String s ) { int n = s . length ( ) ; int i = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) != s . charAt ( i ) ) return false ; } return true ; } public static void main ( String [ ] args ) { String s = \" geeksforgeeksforgeeks \" ; if ( isVowel ( s ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . regex . * ; class GFG { public static boolean isValidTime ( String time ) { String regexPattern = \" ( 1[012 ] | [ 1-9 ] ) : \" + \" [ 0-5 ] [ 0-9 ] ( \\\\ s ) \" + \" ? ( ? i ) ( am | pm ) \" ; Pattern compiledPattern = Pattern . compile ( regexPattern ) ; if ( time == null ) { return false ; } Matcher m = compiledPattern . matcher ( time ) ; return m . matches ( ) ; } public static void main ( String args [ ] ) { String str1 = \"12:15 ▁ AM \" ; System . out . println ( isValidTime ( str1 ) ) ; String str2 = \"9:45PM \" ; System . out . println ( isValidTime ( str2 ) ) ; String str3 = \"1:15\" ; System . out . println ( isValidTime ( str3 ) ) ; String str4 = \"17:30\" ; System . out . println ( isValidTime ( str4 ) ) ; } }"],"bleu":0.18160961248799873,"rouge_l":0.44667904290429045}
{"id":627,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; Arrays . sort ( arr ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } System . out . println ( sum ) ; } }"],"references":["import java . util . Arrays ; class GFG { static int minXOR ( int arr [ ] , int n ) { Arrays . parallelSort ( arr ) ; int minXor = Integer . MAX_VALUE ; int val = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { val = arr [ i ] ^ arr [ i + 1 ] ; minXor = Math . min ( minXor , val ) ; } return minXor ; } public static void main ( String args [ ] ) { int arr [ ] = { 9 , 5 , 3 } ; int n = arr . length ; System . out . println ( minXOR ( arr , n ) ) ; } }"],"bleu":0.28058360556606604,"rouge_l":0.44862643305213057}
{"id":628,"predictions":["import java . io . * ; import java . util . * ; import java . lang . * ; import java . math . * ; import java . text . * ; import java . lang . * ; import java . lang . * ; import java . math . * ; class GFG { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; int n = s . nextInt ( ) ; int m = s . nextInt ( ) ; System . out . println ( m ) ; for ( int i = 1 ; i <= n ; i ++ ) { System . out . print ( i + \" \" ) ; } } }"],"references":["class GFG { static int sum ( int m , int n ) { return 8 * m * n - 6 * m - 6 * n + 4 ; } public static void main ( String [ ] args ) { int m = 3 , n = 2 ; System . out . println ( sum ( m , n ) ) ; } }"],"bleu":0.17846622303844276,"rouge_l":0.34130213631739575}
{"id":629,"predictions":["import java . util . * ; class GFG { static boolean isVowel ( String s ) { for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i ) ) return false ; } return true ; } public static void main ( String [ ] args ) { String s = \" geeksforgeeksforgeeks \" ; if ( isVowel ( s ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; class GFG { static boolean isPossible ( char [ ] str ) { Map < Character , Integer > freq = new HashMap < > ( ) ; int max_freq = 0 ; for ( int j = 0 ; j < ( str . length ) ; j ++ ) { if ( freq . containsKey ( str [ j ] ) ) { freq . put ( str [ j ] , freq . get ( str [ j ] ) + 1 ) ; if ( freq . get ( str [ j ] ) > max_freq ) max_freq = freq . get ( str [ j ] ) ; } else { freq . put ( str [ j ] , 1 ) ; if ( freq . get ( str [ j ] ) > max_freq ) max_freq = freq . get ( str [ j ] ) ; } } if ( max_freq <= ( str . length - max_freq + 1 ) ) return true ; return false ; } public static void main ( String [ ] args ) { String str = \" geeksforgeeks \" ; if ( isPossible ( str . toCharArray ( ) ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.193839013768664,"rouge_l":0.48399894207881505}
{"id":630,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String a = sc . next ( ) ; String b = sc . next ( ) ; String c = \" \" ; for ( int i = 0 ; i < a . length ( ) ; i ++ ) { if ( a . charAt ( i ) == b . charAt ( i ) ) { System . out . println ( \" Yes \" ) ; return ; } } System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static boolean isVowel ( char c ) { return ( c == ' a ' || c == ' A ' || c == ' e ' || c == ' E ' || c == ' i ' || c == ' I ' || c == ' o ' || c == ' O ' || c == ' u ' || c == ' U ' ) ; } static String reverseVowel ( String str ) { int i = 0 ; int j = str . length ( ) - 1 ; char [ ] str1 = str . toCharArray ( ) ; while ( i < j ) { if ( ! isVowel ( str1 [ i ] ) ) { i ++ ; continue ; } if ( ! isVowel ( str1 [ j ] ) ) { j -- ; continue ; } char t = str1 [ i ] ; str1 [ i ] = str1 [ j ] ; str1 [ j ] = t ; i ++ ; j -- ; } String str2 = String . copyValueOf ( str1 ) ; return str2 ; } public static void main ( String [ ] args ) { String str = \" hello ▁ world \" ; System . out . println ( reverseVowel ( str ) ) ; } }"],"bleu":0.11766027787405159,"rouge_l":0.27792867782353453}
{"id":631,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["import java . lang . System . * ; class GFG { static int findBucketNo ( int p ) { return ( int ) Math . ceil ( ( Math . sqrt ( 8 * p + 1 ) - 1 ) \/ 2 ) ; } public static void main ( String [ ] args ) { int p = 10 ; System . out . println ( findBucketNo ( p ) ) ; } }"],"bleu":0.4267343147783055,"rouge_l":0.6169571766731226}
{"id":632,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isDivisible ( int a , int b ) { if ( a < b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; return false ; } public static void main ( String [ ] args ) { int a = 10 , b = 15 ; if ( isDivisible ( a , b ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static class Node { int data ; Node left ; Node right ; } ; static Node newNode ( int data ) { Node node = new Node ( ) ; node . data = data ; node . left = null ; node . right = null ; return ( node ) ; } static Node insert ( Node node , int data ) { if ( node == null ) return ( newNode ( data ) ) ; else { if ( data <= node . data ) node . left = insert ( node . left , data ) ; else node . right = insert ( node . right , data ) ; return node ; } } static int minValue ( Node node ) { if ( node . left == null ) return node . data ; return minValue ( node . left ) ; } public static void main ( String args [ ] ) { Node root = null ; root = insert ( root , 4 ) ; insert ( root , 2 ) ; insert ( root , 1 ) ; insert ( root , 3 ) ; insert ( root , 6 ) ; insert ( root , 5 ) ; System . out . println ( minValue ( root ) ) ; } }"],"bleu":0.11569746794785417,"rouge_l":0.35017221584385766}
{"id":633,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPower ( int a [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) if ( a [ i ] < a [ j ] ) return false ; return true ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 } ; int n = a . length ; if ( isPower ( a , n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; class solution { static void removeZeros ( int [ ] a , int n ) { int ind = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] != 0 ) { ind = i ; break ; } } if ( ind == - 1 ) { System . out . print ( \" Array ▁ has ▁ leading ▁ zeros ▁ only \" ) ; return ; } int [ ] b = new int [ n - ind ] ; for ( int i = 0 ; i < n - ind ; i ++ ) b [ i ] = a [ ind + i ] ; for ( int i = 0 ; i < n - ind ; i ++ ) System . out . print ( b [ i ] + \" ▁ \" ) ; } public static void main ( String args [ ] ) { int [ ] a = { 0 , 0 , 0 , 1 , 2 , 0 , 3 } ; int n = a . length ; removeZeros ( a , n ) ; } }"],"bleu":0.3167992822782177,"rouge_l":0.49313282336578573}
{"id":634,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int n = Integer . parseInt ( br . readLine ( ) ) ; int count = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( n % i == 0 ) { count ++ ; } } System . out . println ( count ) ; } }"],"references":["class GFG { static int countCoins ( int n ) { int c = 0 ; if ( n < 10 ) { return n ; } if ( n > 9 && n < 25 ) { c = n \/ 10 + n % 10 ; return c ; } if ( n > 24 ) { c = n \/ 25 ; if ( n % 25 < 10 ) { c = c + n % 25 ; return c ; } if ( n % 25 > 9 ) { c = c + ( n % 25 ) \/ 10 + ( n % 25 ) % 10 ; return c ; } } return c ; } public static void main ( String [ ] args ) { int n = 14 ; System . out . println ( countCoins ( n ) ) ; } }"],"bleu":0.1621430823731643,"rouge_l":0.2912229159015791}
{"id":635,"predictions":["import java . io . * ; import java . util . * ; class GFG { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { System . out . print ( a [ i ] + \" \" ) ; } System . out . println ( ) ; } } }"],"references":["import java . util . * ; class GFG { static boolean isVowel ( char ch ) { if ( ch == ' a ' || ch == ' e ' || ch == ' i ' || ch == ' o ' || ch == ' u ' ) return true ; return false ; } static String createAltStr ( String str1 , String str2 , int start , int l ) { String finalStr = \" \" ; for ( int i = 0 , j = start ; j < l ; i ++ , j ++ ) finalStr = ( finalStr + str1 . charAt ( i ) ) + str2 . charAt ( j ) ; return finalStr ; } static String findAltStr ( String str ) { int nv = 0 , nc = 0 ; String vstr = \" \" , cstr = \" \" ; int l = str . length ( ) ; for ( int i = 0 ; i < l ; i ++ ) { char ch = str . charAt ( i ) ; if ( isVowel ( ch ) ) { nv ++ ; vstr = vstr + ch ; } else { nc ++ ; cstr = cstr + ch ; } } if ( Math . abs ( nv - nc ) >= 2 ) return \" no ▁ such ▁ string \" ; if ( nv > nc ) return ( vstr . charAt ( 0 ) + createAltStr ( cstr , vstr , 1 , nv ) ) ; if ( nc > nv ) return ( cstr . charAt ( 0 ) + createAltStr ( vstr , cstr , 1 , nc ) ) ; if ( cstr . charAt ( 0 ) < vstr . charAt ( 0 ) ) return createAltStr ( cstr , vstr , 0 , nv ) ; return createAltStr ( vstr , cstr , 0 , nc ) ; } public static void main ( String args [ ] ) { String str = \" geeks \" ; System . out . println ( findAltStr ( str ) ) ; } }"],"bleu":0.07694034916129648,"rouge_l":0.2761660808959314}
{"id":636,"predictions":["import java . io . * ; import java . util . * ; import java . lang . * ; class GFG { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; b [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { System . out . print ( a [ i ] + \" \" ) ; } System . out . println ( ) ; } }"],"references":["import java . util . * ; class GFG { static int [ ] [ ] dp = new int [ 15 ] [ 2 ] ; static String convertToString ( int num ) { return String . valueOf ( num ) ; } static int calculate ( int pos , int tight , int D [ ] , int sz , String num ) { if ( pos == num . length ( ) ) return 1 ; if ( dp [ pos ] [ tight ] != - 1 ) return dp [ pos ] [ tight ] ; int val = 0 ; if ( tight == 0 ) { for ( int i = 0 ; i < sz ; i ++ ) { if ( D [ i ] < ( num . charAt ( pos ) - '0' ) ) { val += calculate ( pos + 1 , 1 , D , sz , num ) ; } else if ( D [ i ] == num . charAt ( pos ) - '0' ) val += calculate ( pos + 1 , tight , D , sz , num ) ; } } else { for ( int i = 0 ; i < sz ; i ++ ) { val += calculate ( pos + 1 , tight , D , sz , num ) ; } } return dp [ pos ] [ tight ] = val ; } static int countNumbers ( int D [ ] , int N , int sz ) { String num = convertToString ( N ) ; int len = num . length ( ) ; for ( int i = 0 ; i < 15 ; i ++ ) for ( int j = 0 ; j < 2 ; j ++ ) dp [ i ] [ j ] = - 1 ; int ans = calculate ( 0 , 0 , D , sz , num ) ; for ( int i = 1 ; i < len ; i ++ ) ans += calculate ( i , 1 , D , sz , num ) ; return ans ; } public static void main ( String [ ] args ) { int sz = 3 ; int D [ ] = { 1 , 4 , 9 } ; int N = 10 ; System . out . print ( countNumbers ( D , N , sz ) ) ; } }"],"bleu":0.1488179958138312,"rouge_l":0.3755337106543541}
{"id":637,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["import java . util . * ; import java . lang . * ; class GFG { public static int summation ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += ( i * i ) ; return sum ; } public static void main ( String args [ ] ) { int n = 2 ; System . out . println ( summation ( n ) ) ; } }"],"bleu":0.6477017511465906,"rouge_l":0.8528060714999002}
{"id":638,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int countPairs ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ i ] % arr [ j ] == 0 ) count ++ ; } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 1 , 1 , 1 , 1 } ; int n = arr . length ; System . out . println ( countPairs ( arr , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static int countPairs ( int arr [ ] , int n ) { HashMap < Integer , Integer > frequency = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( frequency . containsKey ( arr [ i ] ) ) { frequency . put ( arr [ i ] , frequency . get ( arr [ i ] ) + 1 ) ; } else { frequency . put ( arr [ i ] , 1 ) ; } } int count = 0 ; for ( Map . Entry < Integer , Integer > x : frequency . entrySet ( ) ) { int f = x . getValue ( ) ; count += f * ( f - 1 ) \/ 2 ; } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 1 } ; int n = arr . length ; System . out . print ( countPairs ( arr , n ) ) ; } }"],"bleu":0.4608736675704775,"rouge_l":0.5929390187987162}
{"id":639,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int countPairs ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ i ] < arr [ j ] ) count ++ ; } } return count ; } static int countPairs ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ i ] < arr [ j ] ) count ++ ; } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( countPairs ( arr , n ) ) ; } }"],"references":["class GFG { static int a [ ] ; static int search ( int a [ ] , int k , int x ) { int j ; for ( j = k - 1 ; j > - 1 ; j -- ) { if ( a [ j ] == x ) return j ; } return - 1 ; } static void genArray ( int [ ] arr , int N ) { for ( int i = 0 ; i < N - 1 ; i ++ ) { if ( search ( arr , i , arr [ i ] ) == - 1 ) arr [ i + 1 ] = 0 ; else arr [ i + 1 ] = ( i - search ( arr , i , arr [ i ] ) ) ; } } public static void main ( String [ ] args ) { int N = 5 ; int size = N + 1 ; int a [ ] = new int [ N ] ; genArray ( a , N ) ; for ( int i = 0 ; i < N ; i ++ ) System . out . print ( a [ i ] + \" ▁ \" ) ; } }"],"bleu":0.3522479692851098,"rouge_l":0.47426026570048313}
{"id":640,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( a [ i ] + \" \" ) ; } } }"],"references":["class GFG { static int maxN = 20 ; static int maxM = 64 ; static int cntSplits ( String s ) { if ( s . charAt ( s . length ( ) - 1 ) == '1' ) return 0 ; int c_zero = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) c_zero += ( s . charAt ( i ) == '0' ) ? 1 : 0 ; return ( int ) Math . pow ( 2 , c_zero - 1 ) ; } public static void main ( String [ ] args ) { String s = \"10010\" ; System . out . println ( cntSplits ( s ) ) ; } }"],"bleu":0.26351092357604505,"rouge_l":0.38385326014191995}
{"id":641,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int MAX = 100 ; static void middlesum ( int mat [ ] [ ] , int n ) { int row_sum = 0 , col_sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) row_sum += mat [ n \/ 2 ] [ i ] ; System . out . println ( \" Sum ▁ of ▁ middle ▁ row ▁ = ▁ \" + row_sum ) ; for ( int i = 0 ; i < n ; i ++ ) col_sum += mat [ i ] [ n \/ 2 ] ; System . out . println ( \" Sum ▁ of ▁ middle ▁ column ▁ = ▁ \" + col_sum ) ; } public static void main ( String [ ] args ) { int mat [ ] [ ] = { { 2 , 5 , 7 } , { 3 , 7 , 2 } , { 5 , 6 , 9 } } ; middlesum ( mat , 3 ) ; } }"],"bleu":0.3902942543375981,"rouge_l":0.5686947988223748}
{"id":642,"predictions":["import java . io . * ; class GFG { static void print ( int a , int b ) { if ( a == b ) { System . out . println ( \" YES \" ) ; return ; } if ( a == b ) { System . out . println ( \" NO \" ) ; return ; } System . out . println ( \" NO \" ) ; } public static void main ( String [ ] args ) { int a = 2 , b = 3 , c = 3 ; print ( a , b , c ) ; } }"],"references":["class GFG { static void Vertices ( int x , int y ) { int val = Math . abs ( x ) + Math . abs ( y ) ; System . out . print ( val * ( x < 0 ? - 1 : 1 ) + \" ▁ 0 ▁ \" ) ; System . out . print ( \"0 ▁ \" + val * ( y < 0 ? - 1 : 1 ) ) ; } public static void main ( String [ ] args ) { int x = 3 , y = 3 ; Vertices ( x , y ) ; } }"],"bleu":0.30286950710749133,"rouge_l":0.5335013341239253}
{"id":643,"predictions":["import java . io . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 3 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static boolean isPrime ( int n ) { for ( int i = 2 ; i * i <= n ; i ++ ) { if ( n % i == 0 ) { return false ; } } return true ; } static void printMinCountPrime ( int N ) { int minCount ; if ( isPrime ( N ) ) { minCount = 1 ; } else if ( N % 2 == 0 ) { minCount = 2 ; } else { if ( isPrime ( N - 2 ) ) { minCount = 2 ; } else { minCount = 3 ; } } System . out . print ( minCount + \" \\n \" ) ; } public static void main ( String [ ] args ) { int N = 100 ; printMinCountPrime ( N ) ; } }"],"bleu":0.24349374050974437,"rouge_l":0.441364405186995}
{"id":644,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["import java . io . * ; import java . math . * ; class GFG { static int findCount ( int d ) { return 9 * ( int ) ( ( Math . pow ( 10 , d - 1 ) - Math . pow ( 9 , d - 1 ) ) ) ; } static int findCountUpto ( int d ) { int totalCount = 0 ; for ( int i = 1 ; i <= d ; i ++ ) totalCount += findCount ( i ) ; return totalCount ; } public static void main ( String args [ ] ) { int d = 1 ; System . out . println ( findCountUpto ( d ) ) ; d = 2 ; System . out . println ( findCountUpto ( d ) ) ; d = 4 ; System . out . println ( findCountUpto ( d ) ) ; } }"],"bleu":0.2825898009555212,"rouge_l":0.530247856219899}
{"id":645,"predictions":["import java . io . * ; import java . util . * ; class GFG { public static void main ( String [ ] args ) { int a = 5 , b = 5 ; System . out . println ( a + \" \" + b ) ; } }"],"references":["import java . util . * ; class GFG { static int two_sets ( int a [ ] , int n ) { Arrays . sort ( a ) ; return a [ n \/ 2 ] - a [ ( n \/ 2 ) - 1 ] ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 4 , 4 , 6 , 7 , 9 } ; int n = a . length ; System . out . println ( two_sets ( a , n ) ) ; } }"],"bleu":0.22418169814139335,"rouge_l":0.46056030200675546}
{"id":646,"predictions":["import java . io . * ; class GFG { static int findMin ( int a , int b , int c , int d ) { if ( a < b ) return a ; if ( b < c ) return b ; return findMin ( a , b , d ) ; } static int findMin ( int a , int b , int c , int d ) { if ( a < b ) return b ; return findMin ( a , b , d ) ; } public static void main ( String [ ] args ) { int a = 3 , b = 3 , c = 3 , d = 3 ; System . out . println ( findMin ( a , b , d , d ) ) ; } }"],"references":["import java . util . * ; class GFG { static void maximumArea ( int l , int b , int x , int y ) { int left , right , above , below ; left = x * b ; right = ( l - x - 1 ) * b ; above = l * y ; below = ( b - y - 1 ) * l ; System . out . print ( Math . max ( Math . max ( left , right ) , Math . max ( above , below ) ) ) ; } public static void main ( String [ ] args ) { int L = 8 , B = 8 ; int X = 0 , Y = 0 ; maximumArea ( L , B , X , Y ) ; } }"],"bleu":0.2677305324363687,"rouge_l":0.46735277301315037}
{"id":647,"predictions":["import java . io . * ; class GFG { static boolean isPower ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) return false ; } return true ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = arr . length ; if ( isPower ( arr , n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; class GFG { static boolean check ( int arr [ ] , int N , int K ) { HashSet < Integer > unique = new HashSet < Integer > ( ) ; for ( int i = 0 ; i < N ; i ++ ) unique . add ( arr [ i ] ) ; if ( unique . size ( ) == K ) return true ; return false ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 2 , 3 } ; int N = arr . length ; int K = 3 ; if ( check ( arr , N , K ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.5672509756146688,"rouge_l":0.7433940774487471}
{"id":648,"predictions":["import java . io . * ; import java . util . * ; class GFG { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; System . out . println ( ( a + b ) \/ 2 ) ; } }"],"references":["import java . io . * ; class GFG { static int russianPeasant ( int a , int b ) { int res = 0 ; while ( b > 0 ) { if ( ( b & 1 ) != 0 ) res = res + a ; a = a << 1 ; b = b >> 1 ; } return res ; } public static void main ( String [ ] args ) { System . out . println ( russianPeasant ( 18 , 1 ) ) ; System . out . println ( russianPeasant ( 20 , 12 ) ) ; } }"],"bleu":0.2887082562468233,"rouge_l":0.4279200280603297}
{"id":649,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int N = Integer . parseInt ( st . nextToken ( ) ) ; int K = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int [ ] b = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < N ; j ++ ) { if ( a [ i ] > b [ j ] ) { ans ++ ; } } } System . out . println ( ans ) ; } }"],"references":["import java . util . * ; class GfG { static int FindMinimumCost ( int ind , int a [ ] , int n , int k , int dp [ ] ) { if ( ind == ( n - 1 ) ) return 0 ; else if ( dp [ ind ] != - 1 ) return dp [ ind ] ; else { int ans = Integer . MAX_VALUE ; for ( int i = 1 ; i <= k ; i ++ ) { if ( ind + i < n ) ans = Math . min ( ans , Math . abs ( a [ ind + i ] - a [ ind ] ) + FindMinimumCost ( ind + i , a , n , k , dp ) ) ; else break ; } return dp [ ind ] = ans ; } } public static void main ( String [ ] args ) { int a [ ] = { 10 , 30 , 40 , 50 , 20 } ; int k = 3 ; int n = a . length ; int dp [ ] = new int [ n ] ; Arrays . fill ( dp , - 1 ) ; System . out . println ( FindMinimumCost ( 0 , a , n , k , dp ) ) ; } }"],"bleu":0.21785875265932883,"rouge_l":0.35508325436577776}
{"id":650,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isDivisible ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { count ++ ; } else if ( arr [ i ] % 2 == 0 ) { count ++ ; } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 1 , 1 , 1 , 1 , 1 } ; int n = arr . length ; if ( isDivisible ( arr , n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static int max ( int x , int y ) { return ( x > y ) ? x : y ; } static int longestPalindromic ( String str , int i , int j , int count ) { if ( i > j ) return count ; if ( i == j ) return ( count + 1 ) ; if ( str . charAt ( i ) == str . charAt ( j ) ) { count = longestPalindromic ( str , i + 1 , j - 1 , count + 2 ) ; return max ( count , max ( longestPalindromic ( str , i + 1 , j , 0 ) , longestPalindromic ( str , i , j - 1 , 0 ) ) ) ; } return Math . max ( longestPalindromic ( str , i + 1 , j , 0 ) , longestPalindromic ( str , i , j - 1 , 0 ) ) ; } static int longest_palindromic_substr ( String str ) { return longestPalindromic ( str , 0 , str . length ( ) - 1 , 0 ) ; } public static void main ( String [ ] args ) { String str = \" aaaabbaa \" ; System . out . print ( longest_palindromic_substr ( str ) ) ; } }"],"bleu":0.1520294909298739,"rouge_l":0.32814410302388136}
{"id":651,"predictions":["import java . io . * ; class GFG { static int countPairs ( String s ) { int count = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i ) ) count ++ ; } return count ; } public static void main ( String [ ] args ) { String s = \" geeksforgeeksforgeeks \" ; System . out . println ( countPairs ( s ) ) ; } }"],"references":["class Test { static final int MAX_CHAR = 26 ; static int countPairs ( String str ) { int result = 0 ; int n = str . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = 1 ; ( i + j ) < n && j <= MAX_CHAR ; j ++ ) if ( ( Math . abs ( str . charAt ( i + j ) - str . charAt ( i ) ) == j ) ) result ++ ; return result ; } public static void main ( String args [ ] ) { String str = \" geeksforgeeks \" ; System . out . println ( countPairs ( str ) ) ; } }"],"bleu":0.35987231942213666,"rouge_l":0.6121803684355238}
{"id":652,"predictions":["import java . io . * ; class GFG { static int countDigit ( int n ) { int count = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( n % i == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( countDigit ( n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int countSetBits ( int n ) { long count = 0 ; while ( n > 0 ) { count += n & 1 ; n >>= 1 ; } return ( int ) count ; } static int countOfOddsPascal ( int n ) { int c = countSetBits ( n ) ; return ( int ) Math . pow ( 2 , c ) ; } public static void main ( String [ ] args ) { int n = 20 ; System . out . println ( countOfOddsPascal ( n ) ) ; } }"],"bleu":0.44515785602729235,"rouge_l":0.6417835671342685}
{"id":653,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 4 , 3 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 6 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["class GFG { static void rearrange ( int arr [ ] , int n ) { int i = - 1 , j = n ; while ( i < j ) { while ( arr [ ++ i ] > 0 ) ; while ( arr [ -- j ] < 0 ) ; if ( i < j ) swap ( arr , i , j ) ; } if ( i == 0 || i == n ) return ; int k = 0 ; while ( k < n && i < n ) { swap ( arr , k , i ) ; i = i + 1 ; k = k + 2 ; } } static void printArray ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + \" ▁ \" ) ; System . out . println ( \" \" ) ; } static void swap ( int arr [ ] , int index1 , int index2 ) { int c = arr [ index1 ] ; arr [ index1 ] = arr [ index2 ] ; arr [ index2 ] = c ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 3 , - 4 , - 1 , 6 , - 9 } ; int n = arr . length ; System . out . println ( \" Given ▁ array ▁ is ▁ \" ) ; printArray ( arr , n ) ; rearrange ( arr , n ) ; System . out . println ( \" Rearranged ▁ array ▁ is ▁ \" ) ; printArray ( arr , n ) ; } }"],"bleu":0.25314250771122465,"rouge_l":0.3400485704823932}
{"id":654,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int sum ( int a [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += a [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += a [ i ] ; return sum ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = a . length ; System . out . println ( sum ( a , n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int countDivisibles ( int A , int B , int M ) { if ( A % M == 0 ) return ( B \/ M ) - ( A \/ M ) + 1 ; return ( B \/ M ) - ( A \/ M ) ; } public static void main ( String [ ] args ) { int A = 30 , B = 100 , M = 30 ; System . out . println ( countDivisibles ( A , B , M ) ) ; } }"],"bleu":0.28798681090500994,"rouge_l":0.49614726027397266}
{"id":655,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int count ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 4 , 3 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 3 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 ,"],"references":["class GFG { public static int findMissing ( int arr [ ] , int n ) { int l = 0 , h = n - 1 ; int mid ; while ( h > l ) { mid = l + ( h - l ) \/ 2 ; if ( arr [ mid ] - mid == arr [ 0 ] ) { if ( arr [ mid + 1 ] - arr [ mid ] > 1 ) return arr [ mid ] + 1 ; else { l = mid + 1 ; } } else { if ( arr [ mid ] - arr [ mid - 1 ] > 1 ) return arr [ mid ] - 1 ; else { h = mid - 1 ; } } } return - 1 ; } public static void main ( String args [ ] ) { int arr [ ] = { - 9 , - 8 , - 7 , - 5 , - 4 , - 3 , - 2 , - 1 , 0 } ; int n = arr . length ; System . out . print ( findMissing ( arr , n ) ) ; } }"],"bleu":0.07486129918710357,"rouge_l":0.19274751730364126}
{"id":656,"predictions":["import java . io . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["import java . util . Arrays ; class GFG { static int maxSum ( int a [ ] , int n ) { Arrays . sort ( a ) ; int sum = 0 ; for ( int i = 0 ; i < n - 1 ; i += 2 ) { sum += a [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 3 , 2 , 1 , 4 , 5 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }"],"bleu":0.6728071092173453,"rouge_l":0.8489417222383301}
{"id":657,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int count ( int n ) { int count = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( n % i == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( count ( n ) ) ; } }"],"references":["class GFG { static int trailing_zeros ( int N ) { int count_of_two = 0 , count_of_five = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { int val = i ; while ( val % 2 == 0 && val > 0 ) { val \/= 2 ; count_of_two += i ; } while ( val % 5 == 0 && val > 0 ) { val \/= 5 ; count_of_five += i ; } } int ans = Math . min ( count_of_two , count_of_five ) ; return ans ; } public static void main ( String [ ] args ) { int N = 12 ; System . out . println ( trailing_zeros ( N ) ) ; } }"],"bleu":0.31691913616984513,"rouge_l":0.5584322700615076}
{"id":658,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["import java . util . Arrays ; class GFG { public static int sumOfSubstrings ( String num ) { int n = num . length ( ) ; int sumofdigit [ ] = new int [ n ] ; sumofdigit [ 0 ] = num . charAt ( 0 ) - '0' ; int res = sumofdigit [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { int numi = num . charAt ( i ) - '0' ; sumofdigit [ i ] = ( i + 1 ) * numi + 10 * sumofdigit [ i - 1 ] ; res += sumofdigit [ i ] ; } return res ; } public static void main ( String [ ] args ) { String num = \"1234\" ; System . out . println ( sumOfSubstrings ( num ) ) ; } }"],"bleu":0.2859464709849973,"rouge_l":0.52675747993189}
{"id":659,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int maxSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } static int maxSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 10 , 10 , 10 , 10 , 10 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static int sumOfDiv ( int x ) { int sum = 1 ; for ( int i = 2 ; i <= Math . sqrt ( x ) ; i ++ ) { if ( x % i == 0 ) { sum += i ; if ( x \/ i != i ) sum += x \/ i ; } } return sum ; } static boolean isAmicable ( int a , int b ) { return ( sumOfDiv ( a ) == b && sumOfDiv ( b ) == a ) ; } static int countPairs ( int arr [ ] , int n ) { HashSet < Integer > s = new HashSet < Integer > ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) s . add ( arr [ i ] ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . contains ( sumOfDiv ( arr [ i ] ) ) ) { int sum = sumOfDiv ( arr [ i ] ) ; if ( isAmicable ( arr [ i ] , sum ) ) count ++ ; } } return count \/ 2 ; } public static void main ( String [ ] args ) { int arr1 [ ] = { 220 , 284 , 1184 , 1210 , 2 , 5 } ; int n1 = arr1 . length ; System . out . println ( countPairs ( arr1 , n1 ) ) ; int arr2 [ ] = { 2620 , 2924 , 5020 , 5564 , 6232 , 6368 } ; int n2 = arr2 . length ; System . out . println ( countPairs ( arr2 , n2 ) ) ; } }"],"bleu":0.30583200595427606,"rouge_l":0.53985595703125}
{"id":660,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int n = Integer . parseInt ( br . readLine ( ) ) ; System . out . println ( n + 1 ) ; } }"],"references":["class GFG { static int grayCode ( int n ) { return n ^ ( n >> 1 ) ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( grayCode ( n ) ) ; } }"],"bleu":0.30723414922991643,"rouge_l":0.4665391969407266}
{"id":661,"predictions":["import java . io . * ; class GFG { static int countPairs ( int n ) { int count = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( n % i == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( countPairs ( n ) ) ; } }"],"references":["import java . io . * ; import java . math . * ; class GFG { static void printNonSquare ( int n ) { int curr_count = 2 , num = 2 , count = 0 ; while ( count < n ) { for ( int i = 0 ; i < curr_count && count < n ; i ++ ) { System . out . print ( num + \" ▁ \" ) ; count ++ ; num ++ ; } num ++ ; curr_count += 2 ; } } public static void main ( String args [ ] ) { int n = 10 ; printNonSquare ( n ) ; } }"],"bleu":0.36010382217416115,"rouge_l":0.6026131293817717}
{"id":662,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } Arrays . sort ( arr ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } System . out . println ( sum ) ; } }"],"references":["import java . util . * ; class Node { static void sortWithSetbits ( int arr [ ] , int n , int k ) { Vector < Integer > v1 = new Vector < > ( ) , v2 = new Vector < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( Integer . bitCount ( arr [ i ] ) == k ) { v1 . add ( i ) ; v2 . add ( arr [ i ] ) ; } } Collections . sort ( v2 ) ; for ( int i = 0 ; i < v1 . size ( ) ; i ++ ) { arr [ v1 . get ( i ) ] = v2 . get ( i ) ; } for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( arr [ i ] + \" ▁ \" ) ; } } public static void main ( String [ ] args ) { int arr [ ] = { 14 , 255 , 1 , 7 , 13 } ; int n = arr . length ; int k = 3 ; sortWithSetbits ( arr , n , k ) ; } }"],"bleu":0.39884148690113796,"rouge_l":0.46283609576427254}
{"id":663,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPossible ( int a , int b ) { if ( a % b == 0 ) return false ; if ( b % a == 0 ) return false ; if ( a % b == 0 ) return false ; if ( a % b == 0 ) return false ; return false ; } public static void main ( String [ ] args ) { int a = 12 , b = 12 ; if ( isPossible ( a , b ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static boolean isRotation ( long x , long y ) { long x64 = x | ( x << 32 ) ; while ( x64 >= y ) { if ( x64 == y ) { return true ; } x64 >>= 1 ; } return false ; } public static void main ( String [ ] args ) { long x = 122 ; long y = 2147483678L ; if ( isRotation ( x , y ) == false ) { System . out . println ( \" Yes \" ) ; } else { System . out . println ( \" No \" ) ; } } }"],"bleu":0.35820243432718324,"rouge_l":0.5834927575840393}
{"id":664,"predictions":["import java . io . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static int findXorSum ( int arr [ ] , int n ) { int sum = 0 ; int mul = 1 ; for ( int i = 0 ; i < 30 ; i ++ ) { int c_odd = 0 ; boolean odd = false ; for ( int j = 0 ; j < n ; j ++ ) { if ( ( arr [ j ] & ( 1 << i ) ) > 0 ) odd = ( ! odd ) ; if ( odd ) c_odd ++ ; } for ( int j = 0 ; j < n ; j ++ ) { sum += ( mul * c_odd ) ; if ( ( arr [ j ] & ( 1 << i ) ) > 0 ) c_odd = ( n - j - c_odd ) ; } mul *= 2 ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 8 , 13 } ; int n = arr . length ; System . out . println ( findXorSum ( arr , n ) ) ; } }"],"bleu":0.4343383825032397,"rouge_l":0.6318685765153355}
{"id":665,"predictions":["import java . io . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["import java . io . * ; class GFG { static double calTime ( double arr [ ] , int n ) { double work = 0 ; for ( int i = 0 ; i < n ; i ++ ) work += 1 \/ arr [ i ] ; return 1 \/ work ; } public static void main ( String [ ] args ) { double arr [ ] = { 6.0 , 3.0 , 4.0 } ; int n = arr . length ; System . out . println ( calTime ( arr , n ) + \" ▁ Hours \" ) ; } }"],"bleu":0.6541257074110479,"rouge_l":0.8165500456343169}
{"id":666,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == 1 ) { count ++ ; } } System . out . println ( count ) ; } }"],"references":["class GFG { static int GetMinSubarrayLength ( int a [ ] , int n ) { int ans = Math . max ( a [ 0 ] , a [ n - 1 ] ) ; int lo = 0 , hi = n - 1 ; while ( lo < n && a [ lo ] % ans == 0 ) lo ++ ; while ( hi > lo && a [ hi ] % ans == 0 ) hi -- ; return ( hi - lo + 1 ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 4 , 8 , 2 , 1 , 4 } ; int N = arr . length ; int Length = GetMinSubarrayLength ( arr , N ) ; System . out . println ( Length ) ; } }"],"bleu":0.1431124004415382,"rouge_l":0.34068534645967435}
{"id":667,"predictions":["import java . io . * ; class GFG { static int maxSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }"],"references":["class GFG { static int maxSumBitonicSubArr ( int arr [ ] , int n ) { int [ ] msis = new int [ n ] ; int [ ] msds = new int [ n ] ; int max_sum = Integer . MIN_VALUE ; msis [ 0 ] = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) if ( arr [ i ] > arr [ i - 1 ] ) msis [ i ] = msis [ i - 1 ] + arr [ i ] ; else msis [ i ] = arr [ i ] ; msds [ n - 1 ] = arr [ n - 1 ] ; for ( int i = n - 2 ; i >= 0 ; i -- ) if ( arr [ i ] > arr [ i + 1 ] ) msds [ i ] = msds [ i + 1 ] + arr [ i ] ; else msds [ i ] = arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) if ( max_sum < ( msis [ i ] + msds [ i ] - arr [ i ] ) ) max_sum = msis [ i ] + msds [ i ] - arr [ i ] ; return max_sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 5 , 3 , 9 , 2 , 7 , 6 , 4 } ; int n = arr . length ; System . out . println ( \" Maximum ▁ Sum ▁ = ▁ \" + maxSumBitonicSubArr ( arr , n ) ) ; } }"],"bleu":0.17709564057255212,"rouge_l":0.45480366399204714}
{"id":668,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( a [ i ] + \" \" ) ; } out . println ( ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } }"],"references":["import java . util . * ; import java . lang . * ; import java . io . * ; class GFG { public static int minimumDeletions ( char [ ] s ) { int [ ] freqOfLetter ; freqOfLetter = new int [ 26 ] ; for ( int i = 0 ; i < 26 ; i ++ ) freqOfLetter [ i ] = 0 ; for ( int i = 0 ; i < s . length ; i ++ ) { freqOfLetter [ s [ i ] - ' a ' ] ++ ; } Map < Integer , Integer > LetterFreqMap = new TreeMap < Integer , Integer > ( Collections . reverseOrder ( ) ) ; for ( int i = 0 ; i < 26 ; i ++ ) { if ( freqOfLetter [ i ] != 0 ) { if ( LetterFreqMap . containsKey ( freqOfLetter [ i ] ) ) { LetterFreqMap . put ( freqOfLetter [ i ] , LetterFreqMap . get ( freqOfLetter [ i ] ) + 1 ) ; } else LetterFreqMap . put ( freqOfLetter [ i ] , 1 ) ; } } int deletions = 0 ; Set < Map . Entry < Integer , Integer > > set = LetterFreqMap . entrySet ( ) ; for ( Map . Entry < Integer , Integer > me : set ) { if ( me . getKey ( ) == 0 ) break ; while ( me . getValue ( ) > 1 ) { deletions ++ ; LetterFreqMap . put ( me . getKey ( ) , LetterFreqMap . get ( me . getKey ( ) ) - 1 ) ; if ( LetterFreqMap . containsKey ( me . getKey ( ) - 1 ) ) { LetterFreqMap . put ( me . getKey ( ) - 1 , LetterFreqMap . get ( me . getKey ( ) - 1 ) + 1 ) ; } else LetterFreqMap . put ( me . getKey ( ) - 1 , 1 ) ; } } return deletions ; } public static void main ( String [ ] args ) throws java . lang . Exception { String s = \" geeksforgeeks \" ; System . out . println ( minimumDeletions ( s . toCharArray ( ) ) ) ; } }"],"bleu":0.2567012889297582,"rouge_l":0.44306026323898406}
{"id":669,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; Arrays . sort ( arr ) ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + \" \" ) ; } }"],"references":["import java . io . * ; class GFG { static void findMax ( int [ ] arr , int n ) { int maxFirst = Integer . MIN_VALUE ; int mid = n \/ 2 ; for ( int i = 0 ; i < mid ; i ++ ) { maxFirst = Math . max ( maxFirst , arr [ i ] ) ; } if ( n % 2 == 1 ) { maxFirst = Math . max ( maxFirst , arr [ mid ] ) ; } int maxSecond = Integer . MIN_VALUE ; for ( int i = mid ; i < n ; i ++ ) { maxSecond = Math . max ( maxSecond , arr [ i ] ) ; } System . out . print ( maxFirst + \" , ▁ \" + maxSecond ) ; } public static void main ( String [ ] args ) { int [ ] arr = { 1 , 12 , 14 , 5 } ; int n = arr . length ; findMax ( arr , n ) ; } }"],"bleu":0.2822368706623167,"rouge_l":0.43857154143951965}
{"id":670,"predictions":["import java . io . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["public class GFG { static int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } static int lcm ( int a , int b ) { return ( a * b ) \/ gcd ( a , b ) ; } static void printSum ( int num1 , int den1 , int num2 , int den2 ) { int lcd = lcm ( den1 , den2 ) ; num1 *= ( lcd \/ den1 ) ; num2 *= ( lcd \/ den2 ) ; int res_num = num1 + num2 ; System . out . print ( res_num + \" \/ \" + lcd ) ; } public static void main ( String args [ ] ) { int num1 = 1 , den1 = 6 ; int num2 = 7 , den2 = 15 ; printSum ( num1 , den1 , num2 , den2 ) ; } }"],"bleu":0.14257777688603515,"rouge_l":0.3311977413399935}
{"id":671,"predictions":["import java . io . * ; import java . util . * ; class GFG { public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 } ; int n = arr . length ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) System . out . print ( arr [ i ] + \" \" ) ; System . out . println ( ) ; } }"],"references":["import java . io . * ; class GFG { static boolean maxProduct ( int arr [ ] , int n , int p ) { int minVal = arr [ 0 ] ; int maxVal = arr [ 0 ] ; int maxProduct = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] < 0 ) { int temp = maxVal ; maxVal = minVal ; minVal = temp ; } maxVal = Math . max ( arr [ i ] , maxVal * arr [ i ] ) ; minVal = Math . min ( arr [ i ] , minVal * arr [ i ] ) ; if ( minVal == p || maxVal == p ) { return true ; } maxProduct = Math . max ( maxProduct , maxVal ) ; } return false ; } public static void main ( String [ ] args ) { int [ ] arr = { 1 , 2 , - 5 , - 4 } ; int product = - 10 ; int n = arr . length ; if ( maxProduct ( arr , n , product ) ) { System . out . println ( \" YES \" ) ; } else System . out . println ( \" NO \" ) ; } }"],"bleu":0.26609396733428015,"rouge_l":0.2818932922559866}
{"id":672,"predictions":["import java . io . * ; class GFG { static int sum ( int N ) { int sum = 0 ; for ( int i = 1 ; i <= N ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int N = 5 ; System . out . println ( sum ( N ) ) ; } }"],"references":["class GFG { static int solve ( double M , double N , double s ) { int ans = ( ( int ) ( Math . ceil ( M \/ s ) ) * ( int ) ( Math . ceil ( N \/ s ) ) ) ; return ans ; } public static void main ( String [ ] args ) { double N = 12 , M = 13 , s = 4 ; System . out . println ( solve ( M , N , s ) ) ; } }"],"bleu":0.3040198651368968,"rouge_l":0.5263552804351904}
{"id":673,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } return sum ; } static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; sum += arr [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static void IfExists ( int arr [ ] , int n ) { int sum [ ] = new int [ n ] ; Arrays . sort ( arr ) ; sum [ 0 ] = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) sum [ i ] = sum [ i - 1 ] + arr [ i ] ; int max = arr [ n - 1 ] ; boolean flag = false ; for ( int i = 1 ; i <= max ; i ++ ) { int findex = 0 ; int lindex = 0 ; int l = 0 ; int r = n - 1 ; while ( l <= r ) { int m = ( l + r ) \/ 2 ; if ( arr [ m ] < i ) { findex = m ; l = m + 1 ; } else r = m - 1 ; } l = 1 ; r = n ; flag = false ; while ( l <= r ) { int m = ( r + l ) \/ 2 ; if ( arr [ m ] > i ) { lindex = m ; r = m - 1 ; } else l = m + 1 ; } if ( sum [ findex ] == sum [ n - 1 ] - sum [ lindex - 1 ] ) { flag = true ; break ; } } if ( flag ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } public static void main ( String args [ ] ) { int arr [ ] = { 1 , 2 , 2 , 5 } ; int n = arr . length ; IfExists ( arr , n ) ; } }"],"bleu":0.2300420022530426,"rouge_l":0.44520306062389636}
{"id":674,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["class demo { public static double sumOfTheSeries ( int n ) { return ( double ) n \/ ( n + 1 ) ; } public static void main ( String args [ ] ) { int n = 10 ; System . out . println ( sumOfTheSeries ( n ) ) ; } }"],"bleu":0.4012224266072471,"rouge_l":0.6487678339818417}
{"id":675,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int maxSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }"],"references":["import java . io . * ; import java . util . * ; import java . lang . Math ; class CloseSum { static void printClosest ( int arr [ ] , int n , int x ) { int res_l = 0 , res_r = 0 ; int l = 0 , r = n - 1 , diff = Integer . MAX_VALUE ; while ( r > l ) { if ( Math . abs ( arr [ l ] + arr [ r ] - x ) < diff ) { res_l = l ; res_r = r ; diff = Math . abs ( arr [ l ] + arr [ r ] - x ) ; } if ( arr [ l ] + arr [ r ] > x ) r -- ; else l ++ ; } System . out . println ( \" ▁ The ▁ closest ▁ pair ▁ is ▁ \" + arr [ res_l ] + \" ▁ and ▁ \" + arr [ res_r ] ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 10 , 22 , 28 , 29 , 30 , 40 } , x = 54 ; int n = arr . length ; printClosest ( arr , n , x ) ; } }"],"bleu":0.19838804088612974,"rouge_l":0.4529302572261999}
{"id":676,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 3 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static int binomialCoeff ( int n , int k ) { int res = 1 ; if ( k > n - k ) k = n - k ; for ( int i = 0 ; i < k ; ++ i ) { res *= ( n - i ) ; res \/= ( i + 1 ) ; } return res ; } static int power ( int x , int y ) { int res = 1 ; while ( y > 0 ) { if ( ( y & 1 ) == 1 ) res = res * x ; y = y >> 1 ; x = x * x ; } return res ; } static int gcd ( int a , int b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; } static void FindProbability ( int n ) { int up = binomialCoeff ( 2 * n , n ) ; int down = power ( 2 , 2 * n ) ; int g = gcd ( up , down ) ; up \/= g ; down \/= g ; System . out . println ( up + \" \/ \" + down ) ; } public static void main ( String [ ] args ) { int N = 8 ; FindProbability ( N ) ; } }"],"bleu":0.16261796293252495,"rouge_l":0.3499636891793755}
{"id":677,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { st = new StringTokenizer ( br . readLine ( ) ) ; a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { System . out . print ( b [ i ] + \" \" ) ; } System . out . println ( ) ; } }"],"references":["import java . util . * ; class GFG { static class Node { int key ; Node left , right ; } ; static Node newNode ( int key ) { Node temp = new Node ( ) ; temp . key = key ; temp . left = temp . right = null ; return ( temp ) ; } static void inorder ( Node root ) { if ( root != null ) { inorder ( root . left ) ; System . out . print ( root . key + \" ▁ \" ) ; inorder ( root . right ) ; } } static Node createTree ( int parent [ ] , int n ) { HashMap < Integer , Node > m = new HashMap < > ( ) ; Node root = new Node ( ) , temp = new Node ( ) ; int i ; for ( i = 0 ; i < n ; i ++ ) { if ( m . get ( i ) == null ) { temp = newNode ( i ) ; m . put ( i , temp ) ; } if ( parent [ i ] == - 1 ) root = m . get ( i ) ; else if ( m . get ( parent [ i ] ) == null ) { temp = newNode ( parent [ i ] ) ; temp . left = m . get ( i ) ; m . put ( parent [ i ] , temp ) ; } else { if ( m . get ( parent [ i ] ) . left == null ) m . get ( parent [ i ] ) . left = m . get ( i ) ; else m . get ( parent [ i ] ) . right = m . get ( i ) ; } } return root ; } public static void main ( String args [ ] ) { int parent [ ] = { - 1 , 0 , 0 , 1 , 1 , 3 , 5 } ; int n = parent . length ; Node root = createTree ( parent , n ) ; System . out . print ( \" Inorder ▁ Traversal ▁ of ▁ coned ▁ tree \\n \" ) ; inorder ( root ) ; } }"],"bleu":0.14988025739809369,"rouge_l":0.36307861361659255}
{"id":678,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["class GFG { static int findExtra ( int arr1 [ ] , int arr2 [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) if ( arr1 [ i ] != arr2 [ i ] ) return i ; return n ; } public static void main ( String [ ] args ) { int arr1 [ ] = { 2 , 4 , 6 , 8 , 10 , 12 , 13 } ; int arr2 [ ] = { 2 , 4 , 6 , 8 , 10 , 12 } ; int n = arr2 . length ; System . out . println ( findExtra ( arr1 , arr2 , n ) ) ; } }"],"bleu":0.4453706449453813,"rouge_l":0.626608910891089}
{"id":679,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["class GFG { static int CountPairs ( int n ) { int k = n ; int imin = 1 ; int ans = 0 ; while ( imin <= n ) { int imax = n \/ k ; ans += k * ( imax - imin + 1 ) ; imin = imax + 1 ; k = n \/ imin ; } return ans ; } public static void main ( String [ ] args ) { System . out . println ( CountPairs ( 1 ) ) ; System . out . println ( CountPairs ( 2 ) ) ; System . out . println ( CountPairs ( 3 ) ) ; } }"],"bleu":0.33179234495881355,"rouge_l":0.5055730208631039}
{"id":680,"predictions":["import java . util . * ; class GFG { static boolean isVowel ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > arr [ i ] ) return false ; } return true ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = arr . length ; if ( isVowel ( arr , n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static void find3Numbers ( int arr [ ] , int n ) { int small = + 2147483647 , large = + 2147483647 ; int i ; for ( i = 0 ; i < n ; i ++ ) { if ( arr [ i ] <= small ) small = arr [ i ] ; else if ( arr [ i ] <= large ) large = arr [ i ] ; else break ; } if ( i == n ) { System . out . print ( \" No ▁ such ▁ triplet ▁ found \" ) ; return ; } for ( int j = 0 ; j <= i ; j ++ ) { if ( arr [ j ] < large ) { small = arr [ j ] ; break ; } } System . out . print ( small + \" ▁ \" + large + \" ▁ \" + arr [ i ] ) ; return ; } public static void main ( String arg [ ] ) { int arr [ ] = { 5 , 7 , 4 , 8 } ; int n = arr . length ; find3Numbers ( arr , n ) ; } }"],"bleu":0.2826914187855026,"rouge_l":0.4556856958406345}
{"id":681,"predictions":["import java . io . * ; class GFG { static boolean isVowel ( String s ) { int n = s . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i ) ) return false ; } return true ; } public static void main ( String [ ] args ) { String s = \" geeksforgeeksforgeeks \" ; if ( isVowel ( s ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . io . * ; public class GFG { static void countCharacterType ( String str ) { int vowels = 0 , consonant = 0 , specialChar = 0 , digit = 0 ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { char ch = str . charAt ( i ) ; if ( ( ch >= ' a ' && ch <= ' z ' ) || ( ch >= ' A ' && ch <= ' Z ' ) ) { ch = Character . toLowerCase ( ch ) ; ; if ( ch == ' a ' || ch == ' e ' || ch == ' i ' || ch == ' o ' || ch == ' u ' ) vowels ++ ; else consonant ++ ; } else if ( ch >= '0' && ch <= '9' ) digit ++ ; else specialChar ++ ; } System . out . println ( \" Vowels : ▁ \" + vowels ) ; System . out . println ( \" Consonant : ▁ \" + consonant ) ; System . out . println ( \" Digit : ▁ \" + digit ) ; System . out . println ( \" Special ▁ Character : ▁ \" + specialChar ) ; } static public void main ( String [ ] args ) { String str = \" geeks ▁ for ▁ geeks121\" ; countCharacterType ( str ) ; } }"],"bleu":0.1490270396070774,"rouge_l":0.3675305381313965}
{"id":682,"predictions":["import java . io . * ; import java . util . * ; import java . lang . * ; import java . math . * ; import java . text . * ; public class Main { public static void main ( String [ ] args ) throws java . lang . Exception { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; System . out . println ( k * n + 1 ) ; } }"],"references":["import java . io . * ; class GFG { static int calculateSum ( int n ) { return 2 * ( n * ( n + 1 ) * ( 2 * n + 1 ) \/ 6 ) + n * ( n + 1 ) \/ 2 + 2 * ( n ) ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . print ( \" Sum ▁ = ▁ \" + calculateSum ( n ) ) ; } }"],"bleu":0.23235119207285318,"rouge_l":0.3422289613343441}
{"id":683,"predictions":["import java . io . * ; class GFG { static int countPairs ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { if ( arr [ i ] > arr [ j ] ) count ++ ; } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( countPairs ( arr , n ) ) ; } }"],"references":["import java . util . * ; class solution { static long countPairs ( int arr [ ] , int n ) { long count = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { if ( arr [ i ] * arr [ j ] > arr [ i ] + arr [ j ] ) count ++ ; } } return count ; } public static void main ( String args [ ] ) { int arr [ ] = { 5 , 0 , 3 , 1 , 2 } ; int n = arr . length ; System . out . println ( countPairs ( arr , n ) ) ; } }"],"bleu":0.7485338822293734,"rouge_l":0.879189125849543}
{"id":684,"predictions":["import java . io . * ; class GFG { static float area ( float a , float b ) { if ( a < 0 ) return - 1 ; float area = ( float ) Math . pow ( a , b ) ; return area ; } public static void main ( String [ ] args ) { float a = 5 , b = 5 ; System . out . println ( area ( a , b ) ) ; } }"],"references":["import java . io . * ; class GFG { static double PI = ( 3.14159 \/ 180 ) ; static float areaOfKite ( int a , int b , double angle ) { angle = angle * PI ; double area = a * b * Math . sin ( angle ) ; return ( float ) area ; } public static void main ( String [ ] args ) { int a = 4 , b = 7 , angle = 78 ; System . out . println ( \" Area ▁ of ▁ Kite ▁ = ▁ \" + areaOfKite ( a , b , angle ) ) ; } }"],"bleu":0.3614829834983061,"rouge_l":0.6047329708986249}
{"id":685,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int count ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ i ] == arr [ j ] ) count ++ ; } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 6 } ; int n = arr . length ; System . out . println ( count ( arr , n ) ) ; } }"],"references":["class GFG { public static void main ( String [ ] args ) { int target = 93 ; int [ ] arr = { 1 , 31 , 3 , 1 , 93 , 3 , 31 , 1 , 93 } ; int length = arr . length ; int totalCount = 0 ; for ( int i = 0 ; i < length - 2 ; i ++ ) { if ( target % arr [ i ] == 0 ) { for ( int j = i + 1 ; j < length - 1 ; j ++ ) { if ( target % ( arr [ i ] * arr [ j ] ) == 0 ) { int toFind = target \/ ( arr [ i ] * arr [ j ] ) ; for ( int k = j + 1 ; k < length ; k ++ ) { if ( arr [ k ] == toFind ) { totalCount ++ ; } } } } } } System . out . println ( \" Total ▁ number ▁ of ▁ triplets ▁ found ▁ : ▁ \" + totalCount ) ; } }"],"bleu":0.3527928168459188,"rouge_l":0.37117612736517464}
{"id":686,"predictions":["import java . util . * ; class GFG { static boolean isPrime ( int n ) { if ( n == 0 ) return false ; if ( n == 1 ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; return false ; } static boolean isPrime ( int n ) { if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 10 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static boolean checkSpecialPrime ( boolean [ ] sieve , int num ) { while ( num != 0 ) { if ( ! sieve [ num ] ) { return false ; } num \/= 10 ; } return true ; } static void findSpecialPrime ( int N ) { boolean [ ] sieve = new boolean [ N + 10 ] ; sieve [ 0 ] = sieve [ 1 ] = false ; for ( int i = 0 ; i < N + 10 ; i ++ ) sieve [ i ] = true ; for ( int i = 2 ; i <= N ; i ++ ) { if ( sieve [ i ] ) { for ( int j = i * i ; j <= N ; j += i ) { sieve [ j ] = false ; } } } while ( true ) { if ( checkSpecialPrime ( sieve , N ) ) { System . out . println ( N ) ; break ; } else N -- ; } } public static void main ( String [ ] args ) { findSpecialPrime ( 379 ) ; findSpecialPrime ( 100 ) ; } }"],"bleu":0.18499242912252326,"rouge_l":0.34681294042280586}
{"id":687,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int sum ( int a [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += a [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += a [ i ] ; return sum ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = a . length ; System . out . println ( sum ( a , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static int MAX = 1000005 ; static int [ ] fibUpto = new int [ MAX + 1 ] ; static void compute ( int sz ) { boolean [ ] isFib = new boolean [ sz + 1 ] ; int prev = 0 , curr = 1 ; isFib [ prev ] = isFib [ curr ] = true ; while ( curr <= sz ) { int temp = curr + prev ; if ( temp <= sz ) isFib [ temp ] = true ; prev = curr ; curr = temp ; } fibUpto [ 0 ] = 1 ; for ( int i = 1 ; i <= sz ; i ++ ) { fibUpto [ i ] = fibUpto [ i - 1 ] ; if ( isFib [ i ] ) fibUpto [ i ] ++ ; } } static int countOfNumbers ( int N , int K ) { compute ( N ) ; int low = 1 , high = N , ans = 0 ; while ( low <= high ) { int mid = ( low + high ) >> 1 ; if ( mid - fibUpto [ mid ] >= K ) { ans = mid ; high = mid - 1 ; } else low = mid + 1 ; } return ( ans > 0 ? N - ans + 1 : 0 ) ; } public static void main ( String [ ] args ) { int N = 10 , K = 3 ; System . out . print ( countOfNumbers ( N , K ) ) ; } }"],"bleu":0.12194529367260323,"rouge_l":0.3477561759976611}
{"id":688,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["class GFG { static int setBitNumber ( int n ) { n |= n >> 1 ; n |= n >> 2 ; n |= n >> 4 ; n |= n >> 8 ; n |= n >> 16 ; n = n + 1 ; return ( n >> 1 ) ; } public static void main ( String arg [ ] ) { int n = 273 ; System . out . print ( setBitNumber ( n ) ) ; } }"],"bleu":0.3413725788391084,"rouge_l":0.5438703140830801}
{"id":689,"predictions":["import java . util . * ; class GFG { static boolean isVowel ( String s ) { for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i ) ) return false ; } return true ; } public static void main ( String [ ] args ) { String s = \" geeksforgeeksforgeeks \" ; if ( isVowel ( s ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static boolean isHeterogram ( String s , int n ) { int hash [ ] = new int [ 26 ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) != ' ▁ ' ) { if ( hash [ s . charAt ( i ) - ' a ' ] == 0 ) hash [ s . charAt ( i ) - ' a ' ] = 1 ; else return false ; } } return true ; } public static void main ( String [ ] args ) { String s = \" the ▁ big ▁ dwarf ▁ only ▁ jumps \" ; int n = s . length ( ) ; if ( isHeterogram ( s , n ) ) System . out . print ( \" YES \" ) ; else System . out . print ( \" NO \" ) ; } }"],"bleu":0.3983888739528918,"rouge_l":0.6386707636280868}
{"id":690,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int count ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ i ] < arr [ j ] ) count ++ ; } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( count ( arr , n ) ) ; } }"],"references":["import java . util . Arrays ; class GFG { static int findgcd ( int a , int b ) { if ( b == 0 ) return a ; return findgcd ( b , a % b ) ; } static int minimumCuts ( int a [ ] , int n ) { Arrays . sort ( a ) ; int gcd = a [ 1 ] - a [ 0 ] ; int s = gcd ; for ( int i = 2 ; i < n ; i ++ ) { gcd = findgcd ( gcd , a [ i ] - a [ i - 1 ] ) ; s += a [ i ] - a [ i - 1 ] ; } if ( 360 - s > 0 ) gcd = findgcd ( gcd , 360 - s ) ; return ( 360 \/ gcd ) - n ; } public static void main ( String [ ] args ) { int [ ] arr = new int [ ] { 30 , 60 , 180 } ; int n = arr . length ; System . out . println ( minimumCuts ( arr , n ) ) ; } }"],"bleu":0.3062960802681163,"rouge_l":0.5198387244570696}
{"id":691,"predictions":["import java . util . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; return false ; } static boolean isPrime ( int n ) { if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 10 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else if ( isPrime ( n ) ) System . out . println ( \" No \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . Vector ; public class GFG { static final int MAX = 1005 ; static void SieveOfEratosthenes ( Vector < Integer > primes ) { boolean prime [ ] = new boolean [ MAX ] ; for ( int i = 0 ; i < prime . length ; i ++ ) { prime [ i ] = true ; } for ( int p = 2 ; p * p < MAX ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i < MAX ; i += p ) { prime [ i ] = false ; } } } for ( int p = 2 ; p < MAX ; p ++ ) { if ( prime [ p ] ) { primes . add ( primes . size ( ) , p ) ; } } } static int minimumSquareFreeDivisors ( int N ) { Vector < Integer > primes = new Vector < > ( ) ; SieveOfEratosthenes ( primes ) ; int max_count = 0 ; for ( int i = 0 ; i < primes . size ( ) && primes . get ( i ) * primes . get ( i ) <= N ; i ++ ) { if ( N % primes . get ( i ) == 0 ) { int tmp = 0 ; while ( N % primes . get ( i ) == 0 ) { tmp ++ ; N \/= primes . get ( i ) ; } max_count = Math . max ( max_count , tmp ) ; } } if ( max_count == 0 ) { max_count = 1 ; } return max_count ; } public static void main ( String [ ] args ) { int N = 24 ; System . out . println ( \" Minimum ▁ Number ▁ of ▁ Square ▁ Free ▁ Divisors ▁ is ▁ \" + minimumSquareFreeDivisors ( N ) ) ; N = 6 ; System . out . println ( \" Minimum ▁ Number ▁ of ▁ Square ▁ Free ▁ Divisors ▁ is ▁ \" + minimumSquareFreeDivisors ( N ) ) ; } }"],"bleu":0.1318685303855166,"rouge_l":0.35793885601577907}
{"id":692,"predictions":["import java . io . * ; class GFG { static int nthTerm ( int n ) { return ( int ) Math . pow ( n , 2 ) + 1 ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( nthTerm ( n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int calculateSum ( int n ) { return ( int ) Math . pow ( n * ( n + 1 ) \/ 2 , 2 ) ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( calculateSum ( n ) ) ; } }"],"bleu":0.7726171661550112,"rouge_l":0.8883495145631068}
{"id":693,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { System . out . print ( a [ i ] + \" \" ) ; } System . out . println ( ) ; } } }"],"references":["import java . util . Stack ; public class GFG { static Stack < Integer > st = new Stack < > ( ) ; static void push_digits ( int number ) { while ( number != 0 ) { st . push ( number % 10 ) ; number = number \/ 10 ; } } static int reverse_number ( int number ) { push_digits ( number ) ; int reverse = 0 ; int i = 1 ; while ( ! st . isEmpty ( ) ) { reverse = reverse + ( st . peek ( ) * i ) ; st . pop ( ) ; i = i * 10 ; } return reverse ; } public static void main ( String [ ] args ) { int number = 39997 ; System . out . println ( reverse_number ( number ) ) ; } }"],"bleu":0.23720231523737037,"rouge_l":0.39239363502990626}
{"id":694,"predictions":["import java . io . * ; class GFG { static boolean isPower ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) if ( arr [ i ] < arr [ j ] ) return false ; return true ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = arr . length ; if ( isPower ( arr , n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; class GFG { static boolean inProportion ( int [ ] arr ) { int n = 4 ; Arrays . sort ( arr ) ; long extremes = ( long ) arr [ 0 ] * ( long ) arr [ 3 ] ; long means = ( long ) arr [ 1 ] * ( long ) arr [ 2 ] ; if ( extremes == means ) return true ; return false ; } public static void main ( String args [ ] ) { int arr [ ] = { 1 , 2 , 4 , 2 } ; if ( inProportion ( arr ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.4696982107160095,"rouge_l":0.6453900709219859}
{"id":695,"predictions":["import java . util . * ; import java . lang . * ; import java . io . * ; public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } public static void main ( String [ ] args ) {"],"references":["import java . io . * ; class GFG { static int M = 100 ; static int memo [ ] [ ] = new int [ M ] [ M ] ; static int numberOfPermWithKInversion ( int N , int K ) { if ( N == 0 ) return 0 ; if ( K == 0 ) return 1 ; if ( memo [ N ] [ K ] != 0 ) return memo [ N ] [ K ] ; int sum = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { if ( i <= N - 1 ) sum += numberOfPermWithKInversion ( N - 1 , K - i ) ; } memo [ N ] [ K ] = sum ; return sum ; } public static void main ( String [ ] args ) { int N = 4 ; int K = 2 ; System . out . println ( numberOfPermWithKInversion ( N , K ) ) ; } }"],"bleu":0.13960864452671645,"rouge_l":0.2867839108479888}
{"id":696,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isDivisible ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) if ( arr [ i ] % arr [ j ] == 0 ) return false ; return true ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = arr . length ; if ( isDivisible ( arr , n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; class GFG { static void findkth ( int n , int k ) { Vector < Integer > v1 = new Vector < Integer > ( ) ; Vector < Integer > v2 = new Vector < Integer > ( ) ; for ( int i = 1 ; i <= Math . sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { v1 . add ( i ) ; if ( i != Math . sqrt ( n ) ) v2 . add ( n \/ i ) ; } } Collections . reverse ( v2 ) ; if ( k > ( v1 . size ( ) + v2 . size ( ) ) ) System . out . print ( \" Doesn ' t ▁ Exist \" ) ; else { if ( k <= v1 . size ( ) ) System . out . print ( v1 . get ( k - 1 ) ) ; else System . out . print ( v2 . get ( k - v1 . size ( ) - 1 ) ) ; } } public static void main ( String [ ] args ) { int n = 15 , k = 2 ; findkth ( n , k ) ; } }"],"bleu":0.208736217078824,"rouge_l":0.337073007367716}
{"id":697,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static int maxSubArraySum ( int a [ ] , int size ) { int max_so_far = Integer . MIN_VALUE , max_ending_here = 0 ; for ( int i = 0 ; i < size ; i ++ ) { max_ending_here = max_ending_here + a [ i ] ; if ( max_so_far < max_ending_here ) max_so_far = max_ending_here ; if ( max_ending_here < 0 ) max_ending_here = 0 ; } return max_so_far ; } static double minimizedSum ( int a [ ] , int n , int K ) { int sum = maxSubArraySum ( a , n ) ; double totalSum = 0 ; for ( int i = 0 ; i < n ; i ++ ) totalSum += a [ i ] ; if ( sum < 0 ) return totalSum ; totalSum = totalSum - sum + ( double ) sum \/ ( double ) K ; return totalSum ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , - 2 , 3 } ; int n = a . length ; int K = 2 ; System . out . println ( minimizedSum ( a , n , K ) ) ; } }"],"bleu":0.4283437758702232,"rouge_l":0.6468716861081654}
{"id":698,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % 2 == 0 ) { count ++ ; } } out . println ( count ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) throws IOException { return br . readLine ( ) ; } } }"],"references":["import java . util . * ; class GFG { static int countSetBits ( int n ) { int cnt = 0 ; int [ ] setBits = new int [ n + 1 ] ; setBits [ 0 ] = 0 ; setBits [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) { if ( i % 2 == 0 ) { setBits [ i ] = setBits [ i \/ 2 ] ; } else { setBits [ i ] = setBits [ i - 1 ] + 1 ; } } for ( int i = 0 ; i <= n ; i ++ ) { cnt = cnt + setBits [ i ] ; } return cnt ; } public static void main ( String [ ] args ) { int n = 6 ; System . out . println ( countSetBits ( n ) ) ; } }"],"bleu":0.22439630522633383,"rouge_l":0.3985210711465288}
{"id":699,"predictions":["import java . io . * ; class GFG { static float area ( float a , float b ) { if ( a < 0 ) return - 1 ; return area ; } public static void main ( String [ ] args ) { float a = 5 , b = 5 ; System . out . println ( area ( a , b ) ) ; } }"],"references":["class GFG { static double areaCircle ( double b ) { double area = ( double ) 3.1415926 * b * b ; return area ; } public static void main ( String args [ ] ) { float a = 10 , b = 8 ; System . out . println ( areaCircle ( b ) ) ; } }"],"bleu":0.4272833722152983,"rouge_l":0.6912616469403174}
{"id":700,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int a , int b ) { if ( a < b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; return false ; return false ; } public static void main ( String [ ] args ) { int a = 10 , b = 15 ; if ( isPrime ( a , b ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; class GFG { static class Node { int data ; Node next ; } ; static Node push ( Node head_ref , int new_data ) { Node new_node = new Node ( ) ; new_node . data = new_data ; new_node . next = head_ref ; head_ref = new_node ; return head_ref ; } static void printList ( Node head ) { while ( head != null ) { System . out . print ( head . data + \" - > \" ) ; head = head . next ; } } static void sortlist ( int arr [ ] , int N , Node head ) { HashMap < Integer , Integer > hash = new HashMap < Integer , Integer > ( ) ; Node temp = head ; while ( temp != null ) { if ( hash . containsKey ( temp . data ) ) hash . put ( temp . data , hash . get ( temp . data ) + 1 ) ; else hash . put ( temp . data , 1 ) ; temp = temp . next ; } temp = head ; for ( int i = 0 ; i < N ; i ++ ) { int frequency = hash . get ( arr [ i ] ) ; while ( frequency -- > 0 ) { temp . data = arr [ i ] ; temp = temp . next ; } } } public static void main ( String [ ] args ) { Node head = null ; int arr [ ] = { 5 , 1 , 3 , 2 , 8 } ; int N = arr . length ; head = push ( head , 3 ) ; head = push ( head , 2 ) ; head = push ( head , 5 ) ; head = push ( head , 8 ) ; head = push ( head , 5 ) ; head = push ( head , 2 ) ; head = push ( head , 1 ) ; sortlist ( arr , N , head ) ; System . out . print ( \" Sorted ▁ List : \" + \" \\n \" ) ; printList ( head ) ; } }"],"bleu":0.09659943343147831,"rouge_l":0.28506105220843175}
{"id":701,"predictions":["import java . io . * ; class GFG { static int countDigit ( int n ) { int count = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( n % i == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( countDigit ( n ) ) ; } }"],"references":["import java . util . * ; import java . lang . * ; import java . io . * ; class GFG { static void printPattern ( int N ) { for ( int i = 1 ; i <= N ; i ++ ) { System . out . print ( \" ▁ \" + ( ( i % 2 == 0 ) ? ( i - 1 ) : ( i + 1 ) ) ) ; } } public static void main ( String args [ ] ) { int N = 10 ; printPattern ( N ) ; } }"],"bleu":0.36869588830524425,"rouge_l":0.5809523809523809}
{"id":702,"predictions":["import java . util . * ; import java . io . * ; import java . math . * ; public class Main { static class FastReader { BufferedReader br ; StringTokenizer st ; public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } public static void main ( String [ ] args ) {"],"references":["import java . util . LinkedList ; import java . util . Queue ; class GFG { public static int minIndex ( Queue < Integer > list , int sortIndex ) { int min_index = - 1 ; int min_value = Integer . MAX_VALUE ; int s = list . size ( ) ; for ( int i = 0 ; i < s ; i ++ ) { int current = list . peek ( ) ; list . poll ( ) ; if ( current <= min_value && i <= sortIndex ) { min_index = i ; min_value = current ; } list . add ( current ) ; } return min_index ; } public static void insertMinToRear ( Queue < Integer > list , int min_index ) { int min_value = 0 ; int s = list . size ( ) ; for ( int i = 0 ; i < s ; i ++ ) { int current = list . peek ( ) ; list . poll ( ) ; if ( i != min_index ) list . add ( current ) ; else min_value = current ; } list . add ( min_value ) ; } public static void sortQueue ( Queue < Integer > list ) { for ( int i = 1 ; i <= list . size ( ) ; i ++ ) { int min_index = minIndex ( list , list . size ( ) - i ) ; insertMinToRear ( list , min_index ) ; } } public static void main ( String [ ] args ) { Queue < Integer > list = new LinkedList < Integer > ( ) ; list . add ( 30 ) ; list . add ( 11 ) ; list . add ( 15 ) ; list . add ( 4 ) ; sortQueue ( list ) ; while ( list . isEmpty ( ) == false ) { System . out . print ( list . peek ( ) + \" ▁ \" ) ; list . poll ( ) ; } } }"],"bleu":0.10908292190204587,"rouge_l":0.3193005902661766}
{"id":703,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) System ."],"references":["class GFG { static int cntRotations ( String s , int n ) { String str = s + s ; int pre [ ] = new int [ 2 * n ] ; for ( int i = 0 ; i < 2 * n ; i ++ ) { if ( i != 0 ) pre [ i ] += pre [ i - 1 ] ; if ( str . charAt ( i ) == ' a ' || str . charAt ( i ) == ' e ' || str . charAt ( i ) == ' i ' || str . charAt ( i ) == ' o ' || str . charAt ( i ) == ' u ' ) { pre [ i ] ++ ; } } int ans = 0 ; for ( int i = n - 1 ; i < 2 * n - 1 ; i ++ ) { int r = i , l = i - n ; int x1 = pre [ r ] ; if ( l >= 0 ) x1 -= pre [ l ] ; r = i - n \/ 2 ; int left = pre [ r ] ; if ( l >= 0 ) left -= pre [ l ] ; int right = x1 - left ; if ( left > right ) { ans ++ ; } } return ans ; } public static void main ( String args [ ] ) { String s = \" abecidft \" ; int n = s . length ( ) ; System . out . println ( cntRotations ( s , n ) ) ; } }"],"bleu":0.035256859191563815,"rouge_l":0.23283464221471503}
{"id":704,"predictions":["import java . io . * ; import java . util . * ; class GFG { public static void main ( String [ ] args ) { int N = 3 ; System . out . println ( N + \" \" + N + \" \" + N ) ; } }"],"references":["import java . io . * ; class GFG { static int MSBPosition ( long N ) { int msb_p = - 1 ; while ( N > 0 ) { N = N >> 1 ; msb_p ++ ; } return msb_p ; } static long findBitwiseOR ( long L , long R ) { long res = 0 ; int msb_p1 = MSBPosition ( L ) ; int msb_p2 = MSBPosition ( R ) ; while ( msb_p1 == msb_p2 ) { long res_val = ( 1 << msb_p1 ) ; res += res_val ; L -= res_val ; R -= res_val ; msb_p1 = MSBPosition ( L ) ; msb_p2 = MSBPosition ( R ) ; } msb_p1 = Math . max ( msb_p1 , msb_p2 ) ; for ( int i = msb_p1 ; i >= 0 ; i -- ) { long res_val = ( 1 << i ) ; res += res_val ; } return res ; } public static void main ( String [ ] args ) { int L = 12 , R = 18 ; System . out . println ( findBitwiseOR ( L , R ) ) ; } }"],"bleu":0.0371288024280898,"rouge_l":0.2425730994152047}
{"id":705,"predictions":["import java . util . * ; class GFG { static boolean isPrime ( int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( n % i == 0 ) { sum += n \/ i ; } else { sum += n \/ i ; } } return sum ; } static boolean isPrime ( int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( isPrime ( i ) ) { sum += i ; } } return sum ; } public static void main ( String [ ] args ) { int n = 10 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static void sieve ( boolean [ ] prime , int n ) { prime [ 0 ] = false ; prime [ 1 ] = false ; for ( int p = 2 ; p * p <= n ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * p ; i <= n ; i += p ) prime [ i ] = false ; } } } static int sumPrime ( int d ) { int i ; int maxVal = ( int ) Math . pow ( 10 , d ) - 1 ; boolean prime [ ] = new boolean [ maxVal + 1 ] ; for ( i = 0 ; i < maxVal + 1 ; i ++ ) prime [ i ] = true ; sieve ( prime , maxVal ) ; int sum = 0 ; for ( i = 2 ; i <= maxVal ; i ++ ) { if ( prime [ i ] ) { sum += i ; } } return sum ; } public static void main ( String [ ] args ) { int d = 3 ; System . out . println ( sumPrime ( d ) ) ; } }"],"bleu":0.3104385950802867,"rouge_l":0.48267532900216564}
{"id":706,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { a [ i ] = sc . nextInt ( ) ; } } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { for ( int k = 0 ; k < n ; k ++ ) { for ( int k = 0 ; k < n ; k ++ ) { System . out . print ( a [ i ] + \" \" ) ; } } System . out . println ( ) ; } } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . util . Arrays ; class GFG { public static int MAX_CHAR = 256 ; static int kthNonRepeating ( String str , int k ) { int n = str . length ( ) ; int [ ] count = new int [ MAX_CHAR ] ; int [ ] index = new int [ MAX_CHAR ] ; for ( int i = 0 ; i < MAX_CHAR ; i ++ ) { count [ i ] = 0 ; index [ i ] = n ; } for ( int i = 0 ; i < n ; i ++ ) { char x = str . charAt ( i ) ; ++ count [ x ] ; if ( count [ x ] == 1 ) index [ x ] = i ; if ( count [ x ] == 2 ) index [ x ] = n ; } Arrays . sort ( index ) ; return ( index [ k - 1 ] != n ) ? index [ k - 1 ] : - 1 ; } public static void main ( String [ ] args ) { String str = \" geeksforgeeks \" ; int k = 3 ; int res = kthNonRepeating ( str , k ) ; System . out . println ( res == - 1 ? \" There ▁ are ▁ less ▁ than ▁ k ▁ non - repeating ▁ characters \" : \" k ' th ▁ non - repeating ▁ character ▁ is ▁ ▁ \" + str . charAt ( res ) ) ; } }"],"bleu":0.20597779235085792,"rouge_l":0.372195048156926}
{"id":707,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["class GFG { static int squareDigitSum ( String number ) { int summ = 0 ; int num = Integer . parseInt ( number ) ; int squareNum = num * num ; while ( squareNum > 0 ) { summ = summ + ( squareNum % 10 ) ; squareNum = squareNum \/ 10 ; } return summ ; } public static void main ( String [ ] args ) { String N = \"1111\" ; System . out . println ( squareDigitSum ( N ) ) ; } }"],"bleu":0.32941749413183763,"rouge_l":0.5268494179496808}
{"id":708,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int count ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( count ( arr , n ) ) ; } }"],"references":["public class GFG { static int maxCost ( int a [ ] , int n , int l , int r ) { int mx = 0 , k ; for ( int i = 0 ; i < n ; ++ i ) mx = Math . max ( mx , a [ i ] ) ; int [ ] count = new int [ mx + 1 ] ; for ( int i = 0 ; i < count . length ; i ++ ) count [ i ] = 0 ; for ( int i = 0 ; i < n ; i ++ ) count [ a [ i ] ] ++ ; int [ ] res = new int [ mx + 1 ] ; res [ 0 ] = 0 ; l = Math . min ( l , r ) ; for ( int num = 1 ; num <= mx ; num ++ ) { k = Math . max ( num - l - 1 , 0 ) ; res [ num ] = Math . max ( res [ num - 1 ] , num * count [ num ] + res [ k ] ) ; } return res [ mx ] ; } public static void main ( String [ ] args ) { int a [ ] = { 2 , 1 , 2 , 3 , 2 , 2 , 1 } , l = 1 , r = 1 ; int n = a . length ; System . out . println ( maxCost ( a , n , l , r ) ) ; } }"],"bleu":0.15266643841263972,"rouge_l":0.41730566832055327}
{"id":709,"predictions":["import java . io . * ; class GFG { static boolean isPrime ( int n ) { if ( n == 1 ) return false ; for ( int i = 2 ; i <= n ; i ++ ) if ( n % i == 0 ) return false ; return true ; } static boolean isPrime ( int n ) { if ( isPrime ( n ) ) return true ; return false ; } static boolean isPrime ( int n ) { if ( isPrime ( n ) ) return true ; return true ; } public static void main ( String [ ] args ) { int n = 12 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { public static int findPosition ( int k , int n ) { long f1 = 0 , f2 = 1 , f3 ; int i = 2 ; while ( i != 0 ) { f3 = f1 + f2 ; f1 = f2 ; f2 = f3 ; if ( f2 % k == 0 ) { return n * i ; } i ++ ; } return 0 ; } public static void main ( String [ ] args ) { int n = 5 ; int k = 4 ; System . out . print ( \" Position ▁ of ▁ n ' th ▁ multiple \" + \" ▁ of ▁ k ▁ in ▁ Fibonacci ▁ Series ▁ is ▁ \" ) ; System . out . println ( findPosition ( k , n ) ) ; } }"],"bleu":0.2872281286855713,"rouge_l":0.44773131672597866}
{"id":710,"predictions":["import java . io . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static void printTheArray ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( arr [ i ] + \" ▁ \" ) ; } System . out . println ( ) ; } static void generateAllBinaryStrings ( int n , int arr [ ] , int i ) { if ( i == n ) { printTheArray ( arr , n ) ; return ; } arr [ i ] = 0 ; generateAllBinaryStrings ( n , arr , i + 1 ) ; arr [ i ] = 1 ; generateAllBinaryStrings ( n , arr , i + 1 ) ; } public static void main ( String args [ ] ) { int n = 4 ; int [ ] arr = new int [ n ] ; generateAllBinaryStrings ( n , arr , 0 ) ; } }"],"bleu":0.3421260629727098,"rouge_l":0.5172265750778148}
{"id":711,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int count ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ i ] > arr [ j ] ) { count ++ ; } } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 4 , 4 , 3 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4"],"references":["class GFG { static String X = \" AGGT12\" ; static String Y = \"12TXAYB \" ; static String Z = \"12XBA \" ; static int [ ] [ ] [ ] dp = new int [ 100 ] [ 100 ] [ 100 ] ; static int lcsOf3 ( int i , int j , int k ) { if ( i == - 1 || j == - 1 || k == - 1 ) { return 0 ; } if ( dp [ i ] [ j ] [ k ] != - 1 ) { return dp [ i ] [ j ] [ k ] ; } if ( X . charAt ( i ) == Y . charAt ( j ) && Y . charAt ( j ) == Z . charAt ( k ) ) { return dp [ i ] [ j ] [ k ] = 1 + lcsOf3 ( i - 1 , j - 1 , k - 1 ) ; } else { return dp [ i ] [ j ] [ k ] = Math . max ( Math . max ( lcsOf3 ( i - 1 , j , k ) , lcsOf3 ( i , j - 1 , k ) ) , lcsOf3 ( i , j , k - 1 ) ) ; } } public static void main ( String [ ] args ) { for ( int i = 0 ; i < 100 ; i ++ ) { for ( int j = 0 ; j < 100 ; j ++ ) { for ( int k = 0 ; k < 100 ; k ++ ) { dp [ i ] [ j ] [ k ] = - 1 ; } } } int m = X . length ( ) ; int n = Y . length ( ) ; int o = Z . length ( ) ; System . out . print ( \" Length ▁ of ▁ LCS ▁ is ▁ \" + lcsOf3 ( m - 1 , n - 1 , o - 1 ) ) ; } }"],"bleu":0.10853149717927775,"rouge_l":0.14500038968124074}
{"id":712,"predictions":["import java . io . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; return false ; } static boolean isPrime ( int n ) { if ( isPrime ( n ) ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 10 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; class GFG { static boolean checkTriangularSumRepresentation ( int n ) { HashSet < Integer > tri = new HashSet < > ( ) ; int i = 1 ; while ( true ) { int x = i * ( i + 1 ) \/ 2 ; if ( x >= n ) { break ; } tri . add ( x ) ; i ++ ; } for ( Integer tm : tri ) { if ( tri . contains ( n - tm ) && ( n - tm ) != ( int ) tri . toArray ( ) [ tri . size ( ) - 1 ] ) { return true ; } } return false ; } public static void main ( String [ ] args ) { int n = 24 ; if ( checkTriangularSumRepresentation ( n ) ) { System . out . println ( \" Yes \" ) ; } else { System . out . println ( \" No \" ) ; } } }"],"bleu":0.3210948460668195,"rouge_l":0.5715773034877668}
{"id":713,"predictions":["import java . io . * ; class GFG { static float find_area ( float a , float b ) { if ( a < 0 ) return - 1 ; float d = ( float ) Math . sqrt ( a * b ) ; float d = ( float ) Math . sqrt ( d ) ; return d ; } public static void main ( String [ ] args ) { float a = 5 , b = 5 ; System . out . println ( find_area ( a , b ) ) ; } }"],"references":["public class GFG { final static double eps = ( double ) 1e-6 ; static double getArea ( double base , double hypotenuse ) { double height = Math . sqrt ( hypotenuse * hypotenuse - base * base ) ; return 0.5 * base * height ; } static void printRightAngleTriangle ( int hypotenuse , int area ) { int hsquare = hypotenuse * hypotenuse ; double sideForMaxArea = Math . sqrt ( hsquare \/ 2.0 ) ; double maxArea = getArea ( sideForMaxArea , hypotenuse ) ; if ( area > maxArea ) { System . out . print ( \" Not ▁ possible \" ) ; return ; } double low = 0.0 ; double high = sideForMaxArea ; double base = 0 ; while ( Math . abs ( high - low ) > eps ) { base = ( low + high ) \/ 2.0 ; if ( getArea ( base , hypotenuse ) >= area ) { high = base ; } else { low = base ; } } double height = Math . sqrt ( hsquare - base * base ) ; System . out . println ( Math . round ( base ) + \" ▁ \" + Math . round ( height ) ) ; } static public void main ( String [ ] args ) { int hypotenuse = 5 ; int area = 6 ; printRightAngleTriangle ( hypotenuse , area ) ; } }"],"bleu":0.07144066780216729,"rouge_l":0.27455652634365896}
{"id":714,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( a [ i ] + \" \" ) ; } } }"],"references":["class GFG { static int Remainder ( String str , int R ) { int len = str . length ( ) ; int Num , Rem = 0 ; for ( int i = 0 ; i < len ; i ++ ) { Num = Rem * 10 + ( str . charAt ( i ) - '0' ) ; Rem = Num % R ; } return Rem ; } public static void main ( String [ ] args ) { String str = \"13589234356546756\" ; int R = 13 ; System . out . println ( Remainder ( str , R ) ) ; } }"],"bleu":0.31641270915083114,"rouge_l":0.4405305821665438}
{"id":715,"predictions":["import java . io . * ; class GFG { static int countPairs ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { if ( arr [ i ] > arr [ j ] ) count ++ ; } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( countPairs ( arr , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static int xorGivenSetBits ( int arr [ ] , int n , int k ) { Vector < Integer > v = new Vector < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( Integer . bitCount ( arr [ i ] ) == k ) { v . add ( arr [ i ] ) ; } } int result = v . get ( 0 ) ; for ( int i = 1 ; i < v . size ( ) ; i ++ ) { result = result ^ v . get ( i ) ; } return result ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 13 , 1 , 19 , 7 } ; int n = arr . length ; int k = 3 ; System . out . println ( xorGivenSetBits ( arr , n , k ) ) ; } }"],"bleu":0.4222269935952945,"rouge_l":0.6236847329759778}
{"id":716,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int count ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ i ] == arr [ j ] ) count ++ ; } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 6 } ; int n = arr . length ; System . out . println ( count ( arr , n ) ) ; } }"],"references":["class GFG { static String addBinaryUtil ( String a , String b ) { String result = \" \" ; int s = 0 ; int i = a . length ( ) - 1 , j = b . length ( ) - 1 ; while ( i >= 0 || j >= 0 || s == 1 ) { s += ( ( i >= 0 ) ? a . charAt ( i ) - '0' : 0 ) ; s += ( ( j >= 0 ) ? b . charAt ( j ) - '0' : 0 ) ; result = s % 2 + result ; s \/= 2 ; i -- ; j -- ; } return result ; } static String addBinary ( String arr [ ] , int n ) { String result = \" \" ; for ( int i = 0 ; i < n ; i ++ ) { result = addBinaryUtil ( result , arr [ i ] ) ; } return result ; } public static void main ( String [ ] args ) { String arr [ ] = { \"1\" , \"10\" , \"11\" } ; int n = arr . length ; System . out . println ( addBinary ( arr , n ) ) ; } }"],"bleu":0.31629066958388485,"rouge_l":0.40857648779736705}
{"id":717,"predictions":["import java . io . * ; import java . util . * ; class GFG { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { System . out . print ( arr [ i ] + \" \" ) ; } System . out . println ( ) ; } } }"],"references":["class GFG { static void relativeComplement ( int arr1 [ ] , int arr2 [ ] , int n , int m ) { int i = 0 , j = 0 ; while ( i < n && j < m ) { if ( arr1 [ i ] < arr2 [ j ] ) { System . out . print ( arr1 [ i ] + \" ▁ \" ) ; i ++ ; } else if ( arr1 [ i ] > arr2 [ j ] ) { j ++ ; } else if ( arr1 [ i ] == arr2 [ j ] ) { i ++ ; j ++ ; } } while ( i < n ) System . out . print ( arr1 [ i ] + \" ▁ \" ) ; } public static void main ( String [ ] args ) { int arr1 [ ] = { 3 , 6 , 10 , 12 , 15 } ; int arr2 [ ] = { 1 , 3 , 5 , 10 , 16 } ; int n = arr1 . length ; int m = arr2 . length ; relativeComplement ( arr1 , arr2 , n , m ) ; } }"],"bleu":0.2106161580554203,"rouge_l":0.3483537075042384}
{"id":718,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; String str [ ] = br . readLine ( ) . split ( \" \" ) ; int n = Integer . parseInt ( str [ 0 ] ) ; int m = Integer . parseInt ( str [ 1 ] ) ; String [ ] str = br . readLine ( ) . split ( \" \" ) ; for ( int i = 0 ; i < n ; i ++ ) { str [ i ] = br . readLine ( ) . split ( \" \" ) ; } System . out . println ( str [ 0 ] ) ; } }"],"references":["public class Improve { public static void main ( String args [ ] ) { String s = \" ABCdcba \" ; int u [ ] = new int [ 26 ] ; int n = s . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( Character . isUpperCase ( s . charAt ( i ) ) ) { u [ s . charAt ( i ) - 65 ] += 1 ; } else { u [ s . charAt ( i ) - 97 ] -= 1 ; } } boolean f1 = true ; int po = 0 ; int ne = 0 ; for ( int i = 0 ; i < 26 ; i ++ ) { if ( u [ i ] > 0 ) po += u [ i ] ; if ( u [ i ] < 0 ) ne += u [ i ] ; } if ( po == 0 && ne == 0 ) System . out . println ( \" YES \" ) ; else if ( po == 1 && ne == 0 ) System . out . println ( \" YES \" ) ; else if ( po == 0 && ne == - 1 ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ; } }"],"bleu":0.17010215155531141,"rouge_l":0.3587391202070101}
{"id":719,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { System . out . print ( a [ i ] + \" \" ) ; } System . out . println ( ) ; } } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) throws IOException { return br . readLine ( ) ; } } }"],"references":["class GFG { static boolean isPalindrome ( String s ) { int i = 0 ; int j = s . length ( ) - 1 ; while ( i < j ) { if ( s . charAt ( i ) != s . charAt ( j ) ) return false ; i ++ ; j -- ; } return true ; } static int getIndex ( String S1 , String S2 , int n ) { String S = \" \" ; for ( int i = 0 ; i < n ; i ++ ) { S = S + S1 . charAt ( i ) ; String Temp = \" \" ; for ( int j = i + 1 ; j < n ; j ++ ) Temp += S2 . charAt ( j ) ; if ( isPalindrome ( S + Temp ) ) { return i ; } } return - 1 ; } public static void main ( String [ ] args ) { String S1 = \" abcdf \" , S2 = \" sfgba \" ; int n = S1 . length ( ) ; System . out . println ( getIndex ( S1 , S2 , n ) ) ; } }"],"bleu":0.2060495423001508,"rouge_l":0.35607582224453926}
{"id":720,"predictions":["import java . io . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["class GFG { static int XorSum ( int arr [ ] , int n ) { int result = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 != 0 ) result += arr [ i ] ; } return result ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 6 , 3 , 4 , 5 } ; int n = arr . length ; System . out . println ( XorSum ( arr , n ) ) ; } }"],"bleu":0.7211068908861067,"rouge_l":0.8398683029033223}
{"id":721,"predictions":["import java . io . * ; class GFG { static int countPairs ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) count ++ ; } return count ; } static int countPairs ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) count ++ ; else count ++ ; } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 1 , 2 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( countPairs ( arr , n ) ) ; } }"],"references":["import java . util . * ; class solution { static long count ( int arr [ ] , int n , int x ) { if ( x == 1 ) { long ans = ( long ) Math . pow ( 2 , n ) - 1 ; return ans ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % x == 0 ) count ++ ; } long ans = ( long ) Math . pow ( 2 , count ) - 1 ; return ans ; } public static void main ( String args [ ] ) { int [ ] arr = { 2 , 4 , 3 , 5 } ; int n = arr . length ; int x = 1 ; System . out . println ( count ( arr , n , x ) ) ; } }"],"bleu":0.4617645785658717,"rouge_l":0.6509950966253245}
{"id":722,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String a = sc . next ( ) ; String b = sc . next ( ) ; String c = \" \" ; for ( int i = 0 ; i < a . length ( ) ; i ++ ) { if ( a . charAt ( i ) == b . charAt ( i ) ) { System . out . println ( \" Yes \" ) ; return ; } } System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static void removeSpecialCharacter ( String str ) { char [ ] s = str . toCharArray ( ) ; int j = 0 ; for ( int i = 0 ; i < s . length ; i ++ ) { if ( ( s [ i ] >= ' A ' && s [ i ] <= ' Z ' ) || ( s [ i ] >= ' a ' && s [ i ] <= ' z ' ) ) { s [ j ] = s [ i ] ; j ++ ; } } System . out . println ( String . valueOf ( s ) . substring ( 0 , j ) ) ; } public static void main ( String [ ] args ) { String s = \" $ Gee * k ; s . . fo , ▁ r ' Ge ^ eks ? \" ; removeSpecialCharacter ( s ) ; } }"],"bleu":0.24973241209582142,"rouge_l":0.3878416062465142}
{"id":723,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int sum ( int a [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += a [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 } ; int n = a . length ; System . out . println ( sum ( a , n ) ) ; } }"],"references":["import java . io . * ; class GFG { static void calculate ( int a [ ] , int b [ ] , int n , int m ) { int mul = 1 ; for ( int i = 0 ; i < m ; i ++ ) if ( b [ i ] != 0 ) mul = mul * b [ i ] ; for ( int i = 0 ; i < n ; i ++ ) { int x = ( int ) Math . floor ( a [ i ] \/ mul ) ; System . out . print ( x + \" ▁ \" ) ; } } public static void main ( String [ ] args ) { int a [ ] = { 5 , 100 , 8 } ; int b [ ] = { 2 , 3 } ; int n = a . length ; int m = b . length ; calculate ( a , b , n , m ) ; } }"],"bleu":0.3646700607185716,"rouge_l":0.5712730044647718}
{"id":724,"predictions":["import java . util . * ; class GFG { static boolean isPrime ( int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( n % i == 0 ) { sum += n \/ i ; } else { sum += n \/ i ; } } return sum ; } static boolean isPrime ( int n ) { for ( int i = 0 ; i < n ; i ++ ) { if ( isPrime ( n ) ) return false ; } return true ; } static boolean isPrime ( int n ) { if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return true ; if ( isPrime ( n ) ) return false ; return true ; } public static void main ( String [ ] args ) { int n = 10 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . Arrays ; class GFG { static void sieve ( int maxEle , int prime [ ] ) { prime [ 0 ] = prime [ 1 ] = 1 ; for ( int i = 2 ; i * i <= maxEle ; i ++ ) { if ( prime [ i ] == 0 ) { for ( int j = 2 * i ; j <= maxEle ; j += i ) prime [ j ] = 1 ; } } } static int digitSum ( int n ) { int sum = 0 ; while ( n > 0 ) { sum += n % 10 ; n = n \/ 10 ; } return sum ; } static void printAdditivePrime ( int arr [ ] , int n ) { int maxEle = Arrays . stream ( arr ) . max ( ) . getAsInt ( ) ; int prime [ ] = new int [ maxEle + 1 ] ; sieve ( maxEle , prime ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( prime [ arr [ i ] ] == 0 ) { int sum = digitSum ( arr [ i ] ) ; if ( prime [ sum ] == 0 ) System . out . print ( arr [ i ] + \" ▁ \" ) ; } } } public static void main ( String [ ] args ) { int a [ ] = { 2 , 4 , 6 , 11 , 12 , 18 , 7 } ; int n = a . length ; printAdditivePrime ( a , n ) ; } }"],"bleu":0.27951492446167814,"rouge_l":0.4235011679211005}
{"id":725,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; System . out . println ( ( n == k ) ? \" YES \" : \" NO \" ) ; } }"],"references":["class GFG { static int check ( int n , int m ) { if ( m % n == 0 ) { System . out . print ( \" YES \" ) ; } else { System . out . print ( \" NO \" ) ; } return 0 ; } public static void main ( String [ ] args ) { int n = 5 ; int m = 10 ; check ( n , m ) ; } }"],"bleu":0.2225936753577354,"rouge_l":0.31892645521087487}
{"id":726,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false"],"references":["import java . util . * ; class GFG { static class pair { int first , second ; public pair ( int first , int second ) { this . first = first ; this . second = second ; } } static int findPowerOfP ( int N , int p ) { int count = 0 ; int r = p ; while ( r <= N ) { count += ( N \/ r ) ; r = r * p ; } return count ; } static Vector < pair > primeFactorsofB ( int B ) { Vector < pair > ans = new Vector < pair > ( ) ; for ( int i = 2 ; B != 1 ; i ++ ) { if ( B % i == 0 ) { int count = 0 ; while ( B % i == 0 ) { B = B \/ i ; count ++ ; } ans . add ( new pair ( i , count ) ) ; } } return ans ; } static int largestPowerOfB ( int N , int B ) { Vector < pair > vec = new Vector < pair > ( ) ; vec = primeFactorsofB ( B ) ; int ans = Integer . MAX_VALUE ; for ( int i = 0 ; i < vec . size ( ) ; i ++ ) ans = Math . min ( ans , findPowerOfP ( N , vec . get ( i ) . first ) \/ vec . get ( i ) . second ) ; return ans ; } public static void main ( String [ ] args ) { System . out . println ( largestPowerOfB ( 5 , 2 ) ) ; System . out . println ( largestPowerOfB ( 6 , 9 ) ) ; } }"],"bleu":0.04652091004650933,"rouge_l":0.2537288349229024}
{"id":727,"predictions":["import java . io . * ; class GFG { static boolean isPowerOfTwo ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 3 ; if ( isPowerOfTwo ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static void printCombination ( int n ) { System . out . print ( 1 + \" ▁ \" ) ; if ( ( n - 2 ) % 3 == 0 ) System . out . print ( 2 + \" ▁ \" + ( n - 3 ) ) ; else System . out . print ( 1 + \" ▁ \" + ( n - 2 ) ) ; } public static void main ( String [ ] args ) { int n = 233 ; printCombination ( n ) ; } }"],"bleu":0.40634175829435776,"rouge_l":0.45770804911323326}
{"id":728,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["import java . util . * ; class GFG { static void createHash ( HashSet < Integer > hash , int maxElement ) { int prev = 0 , curr = 1 ; hash . add ( prev ) ; hash . add ( curr ) ; while ( curr <= maxElement ) { int temp = curr + prev ; hash . add ( temp ) ; prev = curr ; curr = temp ; } } static int countFibonacciDivisors ( int n ) { HashSet < Integer > hash = new HashSet < Integer > ( ) ; createHash ( hash , n ) ; int cnt = 0 ; for ( int i = 1 ; i <= Math . sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { if ( ( n \/ i == i ) && ( hash . contains ( n \/ i ) ) ) cnt ++ ; else { if ( hash . contains ( n \/ i ) ) cnt ++ ; if ( hash . contains ( n \/ ( n \/ i ) ) ) cnt ++ ; } } } return cnt ; } public static void main ( String [ ] args ) { int n = 12 ; System . out . print ( countFibonacciDivisors ( n ) ) ; } }"],"bleu":0.23968181696160756,"rouge_l":0.47129147690305784}
{"id":729,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int maxSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } static int maxSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }"],"references":["public class GFG { static int MAX = 1000000 ; static boolean prime [ ] = new boolean [ MAX + 1 ] ; static void SieveOfEratosthenes ( ) { for ( int i = 0 ; i < prime . length ; i ++ ) { prime [ i ] = true ; } prime [ 1 ] = false ; prime [ 0 ] = false ; for ( int p = 2 ; p * p <= MAX ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i <= MAX ; i += p ) { prime [ i ] = false ; } } } } static void SumOfKthPrimes ( int arr [ ] , int n , int k ) { int c = 0 ; long sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( prime [ arr [ i ] ] ) { c ++ ; if ( c % k == 0 ) { sum += arr [ i ] ; c = 0 ; } } } System . out . println ( sum ) ; } public static void main ( String [ ] args ) { SieveOfEratosthenes ( ) ; int arr [ ] = { 2 , 3 , 5 , 7 , 11 } ; int n = arr . length ; int k = 2 ; SumOfKthPrimes ( arr , n , k ) ; } }"],"bleu":0.3492593272643565,"rouge_l":0.5343495654573045}
{"id":730,"predictions":["import java . io . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 10 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static void sieveOfEratosthenes ( int N , int s [ ] ) { boolean [ ] prime = new boolean [ N + 1 ] ; for ( int i = 2 ; i <= N ; i += 2 ) s [ i ] = 2 ; for ( int i = 3 ; i <= N ; i += 2 ) { if ( prime [ i ] == false ) { s [ i ] = i ; for ( int j = i ; j * i <= N ; j += 2 ) { if ( prime [ i * j ] == false ) { prime [ i * j ] = true ; s [ i * j ] = i ; } } } } } static void generatePrimeFactors ( int N ) { int [ ] s = new int [ N + 1 ] ; sieveOfEratosthenes ( N , s ) ; System . out . println ( \" Factor ▁ Power \" ) ; int curr = s [ N ] ; int cnt = 1 ; while ( N > 1 ) { N \/= s [ N ] ; if ( curr == s [ N ] ) { cnt ++ ; continue ; } System . out . println ( curr + \" \\t \" + cnt ) ; curr = s [ N ] ; cnt = 1 ; } } public static void main ( String [ ] args ) { int N = 360 ; generatePrimeFactors ( N ) ; } }"],"bleu":0.14853734538484561,"rouge_l":0.27983340375445165}
{"id":731,"predictions":["import java . io . * ; import java . util . * ; import java . lang . * ; import java . math . * ; class GFG { public static void main ( String [ ] args ) { int N = 2 ; System . out . println ( N * N ) ; } }"],"references":["class GFG { static int nearest ( int n ) { int prevSquare = ( int ) Math . sqrt ( n ) ; int nextSquare = prevSquare + 1 ; prevSquare = prevSquare * prevSquare ; nextSquare = nextSquare * nextSquare ; int ans = ( n - prevSquare ) < ( nextSquare - n ) ? ( prevSquare - n ) : ( nextSquare - n ) ; return ans ; } public static void main ( String [ ] args ) { int n = 14 ; System . out . println ( nearest ( n ) ) ; n = 16 ; System . out . println ( nearest ( n ) ) ; n = 18 ; System . out . println ( nearest ( n ) ) ; } }"],"bleu":0.10650321289104249,"rouge_l":0.29565353345841155}
{"id":732,"predictions":["import java . io . * ; import java . util . * ; class GFG { public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 4 , 3 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 ,"],"references":["import java . io . * ; class GFG { static void checkIfSortRotated ( int arr [ ] , int n ) { int minEle = Integer . MAX_VALUE ; int maxEle = Integer . MIN_VALUE ; int minIndex = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < minEle ) { minEle = arr [ i ] ; minIndex = i ; } } boolean flag1 = true ; for ( int i = 1 ; i < minIndex ; i ++ ) { if ( arr [ i ] < arr [ i - 1 ] ) { flag1 = false ; break ; } } boolean flag2 = true ; for ( int i = minIndex + 1 ; i < n ; i ++ ) { if ( arr [ i ] < arr [ i - 1 ] ) { flag2 = false ; break ; } } if ( minIndex == 0 ) { System . out . print ( \" NO \" ) ; return ; } if ( flag1 && flag2 && ( arr [ n - 1 ] < arr [ minIndex - 1 ] ) ) System . out . println ( \" YES \" ) ; else System . out . print ( \" NO \" ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 4 , 5 , 1 , 2 } ; int n = arr . length ; checkIfSortRotated ( arr , n ) ; } }"],"bleu":0.059912480311418985,"rouge_l":0.09476253883710607}
{"id":733,"predictions":["import java . io . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["import java . io . * ; class GFG { static void printSquares ( int n ) { int square = 0 , prev_x = 0 ; for ( int x = 0 ; x < n ; x ++ ) { square = ( square + x + prev_x ) ; System . out . print ( square + \" ▁ \" ) ; prev_x = x ; } } public static void main ( String [ ] args ) { int n = 5 ; printSquares ( n ) ; } }"],"bleu":0.40543804912798775,"rouge_l":0.5661252900232018}
{"id":734,"predictions":["import java . io . * ; class GFG { static float find_area ( float a , float b ) { if ( a < 0 || b < 0 ) return - 1 ; float d = ( float ) Math . sqrt ( a * b ) ; float d = ( float ) Math . sqrt ( d ) ; return d ; } public static void main ( String [ ] args ) { float a = 5 , b = 5 ; System . out . println ( find_area ( a , b ) ) ; } }"],"references":["import java . util . * ; import java . lang . * ; import java . io . * ; class GFG { static int __gcd ( int a , int b ) { return b == 0 ? a : __gcd ( b , a % b ) ; } static void solveProportion ( int a , int b1 , int b2 , int c ) { int A = a * b2 ; int B = b1 * b2 ; int C = b1 * c ; int gcd = __gcd ( __gcd ( A , B ) , C ) ; System . out . print ( A \/ gcd + \" : \" + B \/ gcd + \" : \" + C \/ gcd ) ; } public static void main ( String args [ ] ) { int a , b1 , b2 , c ; a = 3 ; b1 = 4 ; b2 = 8 ; c = 9 ; solveProportion ( a , b1 , b2 , c ) ; } }"],"bleu":0.14630222038794108,"rouge_l":0.3742741316971623}
{"id":735,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int count ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { if ( arr [ i ] > arr [ j ] ) count ++ ; } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 } ; int n = arr . length ; System . out . println ( count ( arr , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static void countPairs ( int arr [ ] , int N ) { HashMap < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { if ( mp . containsKey ( arr [ i ] ) ) { mp . put ( arr [ i ] , mp . get ( arr [ i ] ) + 1 ) ; } else { mp . put ( arr [ i ] , 1 ) ; } } int maxFreq = 0 ; for ( Map . Entry < Integer , Integer > it : mp . entrySet ( ) ) { maxFreq = Math . max ( maxFreq , it . getValue ( ) ) ; } System . out . print ( N - maxFreq + \" \\n \" ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 8 , 5 , 9 , 8 , 8 , 7 , 7 , 5 , 7 , 7 } ; int N = arr . length ; countPairs ( arr , N ) ; } }"],"bleu":0.29305482949984163,"rouge_l":0.48391361833406793}
{"id":736,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int maxSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static void numberOfSubarrays ( int arr [ ] , int n ) { int [ ] v = new int [ n + 1 ] ; v [ 0 ] = 0 ; for ( int i = 0 ; i < n ; i ++ ) { v [ i + 1 ] = v [ i ] + arr [ i ] ; } HashMap < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; int begin = 0 , end = 0 , answer = 0 ; mp . put ( 0 , 1 ) ; while ( begin < n ) { while ( end < n && ! mp . containsKey ( v [ end + 1 ] ) ) { end ++ ; mp . put ( v [ end ] , 1 ) ; } answer = answer + end - begin ; mp . remove ( v [ begin ] ) ; begin ++ ; } System . out . print ( answer + \" \\n \" ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 4 , - 6 } ; int size = arr . length ; numberOfSubarrays ( arr , size ) ; } }"],"bleu":0.266512936228604,"rouge_l":0.47688298587760586}
{"id":737,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static int minimizeDiff ( int [ ] arr , int n , int k ) { int max = Arrays . stream ( arr ) . max ( ) . getAsInt ( ) ; int min = Arrays . stream ( arr ) . min ( ) . getAsInt ( ) ; if ( ( max - min ) <= k ) { return ( max - min ) ; } int avg = ( max + min ) \/ 2 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > avg ) { arr [ i ] -= k ; } else { arr [ i ] += k ; } } max = Arrays . stream ( arr ) . max ( ) . getAsInt ( ) ; min = Arrays . stream ( arr ) . min ( ) . getAsInt ( ) ; return ( max - min ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 16 , 12 , 9 , 20 } ; int n = 5 ; int k = 3 ; System . out . println ( \" Max ▁ height ▁ difference ▁ = ▁ \" + minimizeDiff ( arr , n , k ) ) ; } }"],"bleu":0.29276662560404826,"rouge_l":0.4835787089467723}
{"id":738,"predictions":["import java . io . * ; import java . util . * ; class GFG { public static void main ( String [ ] args ) { String s = \" geeksforgeeks \" ; int n = s . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i ) ) { System . out . print ( s . charAt ( i ) + \" \" ) ; return ; } } System . out . print ( \" \\n \" ) ; for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( s . charAt ( i ) ) ; } System . out . print ( \" \\n \" ) ; } }"],"references":["import java . io . * ; import java . util . * ; class Graph { private int V ; private LinkedList < Integer > adj [ ] ; Graph ( int v ) { V = v ; adj = new LinkedList [ v ] ; for ( int i = 0 ; i < v ; ++ i ) adj [ i ] = new LinkedList ( ) ; } void addEdge ( int v , int w ) { adj [ v ] . add ( w ) ; } void BFS ( int s ) { boolean visited [ ] = new boolean [ V ] ; LinkedList < Integer > queue = new LinkedList < Integer > ( ) ; visited [ s ] = true ; queue . add ( s ) ; while ( queue . size ( ) != 0 ) { s = queue . poll ( ) ; System . out . print ( s + \" ▁ \" ) ; Iterator < Integer > i = adj [ s ] . listIterator ( ) ; while ( i . hasNext ( ) ) { int n = i . next ( ) ; if ( ! visited [ n ] ) { visited [ n ] = true ; queue . add ( n ) ; } } } } public static void main ( String args [ ] ) { Graph g = new Graph ( 4 ) ; g . addEdge ( 0 , 1 ) ; g . addEdge ( 0 , 2 ) ; g . addEdge ( 1 , 2 ) ; g . addEdge ( 2 , 0 ) ; g . addEdge ( 2 , 3 ) ; g . addEdge ( 3 , 3 ) ; System . out . println ( \" Following ▁ is ▁ Breadth ▁ First ▁ Traversal ▁ \" + \" ( starting ▁ from ▁ vertex ▁ 2 ) \" ) ; g . BFS ( 2 ) ; } }"],"bleu":0.10313051372219931,"rouge_l":0.34124300731542384}
{"id":739,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["class GFG { static int cal ( int n ) { double res = Math . pow ( Math . ceil ( ( Math . pow ( Math . pow ( 10 , ( n - 1 ) ) , 1 \/ 4 ) ) ) , 4 ) ; return ( int ) res ; } public static void main ( String [ ] args ) { int n = 1 ; System . out . println ( cal ( n ) ) ; } }"],"bleu":0.41289906311492564,"rouge_l":0.56041541841422}
{"id":740,"predictions":["import java . io . * ; class GFG { static int maxSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 1 , 1 , 1 , 1 , 1 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }"],"references":["import java . util . * ; import java . lang . * ; import java . io . * ; class GFG { static int bit ( int n ) { int count = 0 ; while ( n > 0 ) { count ++ ; n = n & ( n - 1 ) ; } return count ; } static int maxSumOfBits ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = bit ( arr [ i ] ) ; } int incl = arr [ 0 ] ; int excl = 0 ; int excl_new ; for ( int i = 1 ; i < n ; i ++ ) { excl_new = ( incl > excl ) ? incl : excl ; incl = excl + arr [ i ] ; excl = excl_new ; } return ( ( incl > excl ) ? incl : excl ) ; } public static void main ( String args [ ] ) { int arr [ ] = { 1 , 2 , 4 , 5 , 6 , 7 , 20 , 25 } ; int n = arr . length ; System . out . print ( maxSumOfBits ( arr , n ) ) ; } }"],"bleu":0.31060883703554415,"rouge_l":0.5690593417983935}
{"id":741,"predictions":["import java . io . * ; import java . util . * ; import static java . lang . Math . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] arr = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int [ ] arr = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 1 ; i <= n ; i ++ ) { arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { for ( int k = 1 ; k <= n ; k ++ ) { for ( int k = 1 ; k <= n ; k ++ ) { for ( int k = 1 ; k <= n ; k ++ ) { if ( arr [ k ] > arr [ k ] ) { arr [ k ] = arr [ k ] ; } } } } } for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { if ( arr [ i ] > arr [ j ] ) { arr [ i ] = arr [ j ] ; } } } for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { System . out . print ( arr [ i ] + \" \" ) ; } System . out . println ( ) ; } }"],"references":["import java . util . * ; class GFG { static int subsetXOR ( int arr [ ] , int n , int K ) { int max_ele = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) if ( arr [ i ] > max_ele ) max_ele = arr [ i ] ; int m = ( 1 << ( int ) ( Math . log ( max_ele ) \/ Math . log ( 2 ) + 1 ) ) - 1 ; int [ ] [ ] [ ] dp = new int [ n + 1 ] [ m + 1 ] [ n + 1 ] ; for ( int i = 0 ; i <= n ; i ++ ) for ( int j = 0 ; j <= m ; j ++ ) for ( int k = 0 ; k <= n ; k ++ ) dp [ i ] [ j ] [ k ] = 0 ; for ( int i = 0 ; i <= n ; i ++ ) dp [ i ] [ 0 ] [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 0 ; j <= m ; j ++ ) { for ( int k = 0 ; k <= n ; k ++ ) { dp [ i ] [ j ] [ k ] = dp [ i - 1 ] [ j ] [ k ] ; if ( k != 0 ) { dp [ i ] [ j ] [ k ] += k * dp [ i - 1 ] [ j ^ arr [ i - 1 ] ] [ k - 1 ] ; } } } } int ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { ans += dp [ n ] [ K ] [ i ] ; } return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 } ; int k = 1 ; int n = arr . length ; System . out . println ( subsetXOR ( arr , n , k ) ) ; } }"],"bleu":0.44273536742172104,"rouge_l":0.49776568875072863}
{"id":742,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int MaximumHeight ( int [ ] a , int n ) { int result = 1 ; for ( int i = 1 ; i <= n ; ++ i ) { int y = ( i * ( i + 1 ) ) \/ 2 ; if ( y < n ) result = i ; else break ; } return result ; } public static void main ( String [ ] args ) { int [ ] arr = { 40 , 100 , 20 , 30 } ; int n = arr . length ; System . out . println ( MaximumHeight ( arr , n ) ) ; } }"],"bleu":0.49396088505977515,"rouge_l":0.7078498293515358}
{"id":743,"predictions":["import java . io . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 12 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static String toNegativeBase ( int n , int negBase ) { if ( n == 0 ) return \"0\" ; String converted = \" \" ; while ( n != 0 ) { int remainder = n % negBase ; n \/= negBase ; if ( remainder < 0 ) { remainder += ( - negBase ) ; n += 1 ; } converted = String . valueOf ( remainder ) + converted ; } return converted ; } public static void main ( String [ ] args ) { int n = 13 ; int negBase = - 2 ; System . out . print ( toNegativeBase ( n , negBase ) ) ; } }"],"bleu":0.2746081369548028,"rouge_l":0.4930899608865712}
{"id":744,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int count ( int a [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( a [ i ] > a [ j ] ) { count ++ ; } } } return count ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 } ; int n = a . length ; System . out . println ( count ( a , n ) ) ; } }"],"references":["class GFG { static int m = 6 , n = 4 ; static int compareRow ( int a1 [ ] , int a2 [ ] ) { for ( int i = 0 ; i < n ; i ++ ) { if ( a1 [ i ] < a2 [ i ] ) return 1 ; else if ( a1 [ i ] > a2 [ i ] ) return - 1 ; } return 0 ; } static int binaryCheck ( int ar [ ] [ ] , int arr [ ] ) { int l = 0 , r = m - 1 ; while ( l <= r ) { int mid = ( l + r ) \/ 2 ; int temp = compareRow ( ar [ mid ] , arr ) ; if ( temp == 0 ) return mid + 1 ; else if ( temp == 1 ) l = mid + 1 ; else r = mid - 1 ; } return - 1 ; } public static void main ( String [ ] args ) { int mat [ ] [ ] = { { 0 , 0 , 1 , 0 } , { 10 , 9 , 22 , 23 } , { 40 , 40 , 40 , 40 } , { 43 , 44 , 55 , 68 } , { 81 , 73 , 100 , 132 } , { 100 , 75 , 125 , 133 } } ; int row [ ] = { 10 , 9 , 22 , 23 } ; System . out . println ( binaryCheck ( mat , row ) ) ; } }"],"bleu":0.15792415868612256,"rouge_l":0.38599266556410433}
{"id":745,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int countPairs ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( countPairs ( arr , n ) ) ; } }"],"references":["class GFG { static int longestSubArray ( int arr [ ] , int n ) { boolean isZeroPresent = false ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 0 ) { isZeroPresent = true ; break ; } } if ( isZeroPresent ) return n ; return 0 ; } public static void main ( String args [ ] ) { int arr [ ] = { 1 , 2 , 3 , 0 , 1 , 2 , 0 } ; int n = arr . length ; System . out . print ( longestSubArray ( arr , n ) ) ; } }"],"bleu":0.625414775394654,"rouge_l":0.7697421981004071}
{"id":746,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) if ( arr [ i ] % arr [ j ] == 0 ) return false ; return true ; } static boolean isPrime ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) if ( isPrime ( arr [ i ] ) ) return false ; return true ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = arr . length ; if ( isPrime ( arr , n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static void PrintMinNumberForPattern ( String arr ) { int curr_max = 0 ; int last_entry = 0 ; int j ; for ( int i = 0 ; i < arr . length ( ) ; i ++ ) { int noOfNextD = 0 ; switch ( arr . charAt ( i ) ) { case ' I ' : j = i + 1 ; while ( j < arr . length ( ) && arr . charAt ( j ) == ' D ' ) { noOfNextD ++ ; j ++ ; } if ( i == 0 ) { curr_max = noOfNextD + 2 ; System . out . print ( \" ▁ \" + ++ last_entry ) ; System . out . print ( \" ▁ \" + curr_max ) ; last_entry = curr_max ; } else { curr_max = curr_max + noOfNextD + 1 ; last_entry = curr_max ; System . out . print ( \" ▁ \" + last_entry ) ; } for ( int k = 0 ; k < noOfNextD ; k ++ ) { System . out . print ( \" ▁ \" + -- last_entry ) ; i ++ ; } break ; case ' D ' : if ( i == 0 ) { j = i + 1 ; while ( j < arr . length ( ) && arr . charAt ( j ) == ' D ' ) { noOfNextD ++ ; j ++ ; } curr_max = noOfNextD + 2 ; System . out . print ( \" ▁ \" + curr_max + \" ▁ \" + ( curr_max - 1 ) ) ; last_entry = curr_max - 1 ; } else { System . out . print ( \" ▁ \" + ( last_entry - 1 ) ) ; last_entry -- ; } break ; } } System . out . println ( ) ; } public static void main ( String [ ] args ) { PrintMinNumberForPattern ( \" IDID \" ) ; PrintMinNumberForPattern ( \" I \" ) ; PrintMinNumberForPattern ( \" DD \" ) ; PrintMinNumberForPattern ( \" II \" ) ; PrintMinNumberForPattern ( \" DIDI \" ) ; PrintMinNumberForPattern ( \" IIDDD \" ) ; PrintMinNumberForPattern ( \" DDIDDIID \" ) ; } }"],"bleu":0.10656199537309634,"rouge_l":0.2955489298264296}
{"id":747,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["class GFG { static void findNumbers ( int n ) { int i = 1 ; while ( i <= n ) { System . out . print ( ( 3 * i * ( i - 1 ) + 1 ) + \" ▁ \" ) ; i ++ ; } } public static void main ( String [ ] args ) { int n = 4 ; findNumbers ( n ) ; } }"],"bleu":0.4229416003763396,"rouge_l":0.5480568324279148}
{"id":748,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int count ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { count ++ ; } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( count ( arr , n ) ) ; } }"],"references":["class GFG { static final int MOD = 1000000007 ; static int number_of_ways ( int arr [ ] , int n , int k ) { if ( k == 1 ) return 1 ; int dp [ ] = new int [ k + 1 ] ; int i ; for ( i = 0 ; i < k + 1 ; i ++ ) dp [ i ] = - 1 ; for ( i = 0 ; i < n ; i ++ ) dp [ arr [ i ] ] = 0 ; dp [ 0 ] = 1 ; dp [ 1 ] = ( dp [ 1 ] == - 1 ) ? 1 : dp [ 1 ] ; for ( i = 2 ; i <= k ; ++ i ) { if ( dp [ i ] == 0 ) continue ; dp [ i ] = dp [ i - 1 ] + dp [ i - 2 ] ; dp [ i ] %= MOD ; } return dp [ k ] ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 } ; int n = arr . length ; int k = 6 ; System . out . println ( number_of_ways ( arr , n , k ) ) ; } }"],"bleu":0.22598621980415728,"rouge_l":0.46435986159169546}
{"id":749,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans += a [ i ] ; } out . println ( ans ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . io . * ; class GFG { static int maxProfit ( int price [ ] , int n , int k ) { int profit [ ] [ ] = new int [ k + 1 ] [ n + 1 ] ; for ( int i = 0 ; i <= k ; i ++ ) profit [ i ] [ 0 ] = 0 ; for ( int j = 0 ; j <= n ; j ++ ) profit [ 0 ] [ j ] = 0 ; for ( int i = 1 ; i <= k ; i ++ ) { int prevDiff = Integer . MIN_VALUE ; for ( int j = 1 ; j < n ; j ++ ) { prevDiff = Math . max ( prevDiff , profit [ i - 1 ] [ j - 1 ] - price [ j - 1 ] ) ; profit [ i ] [ j ] = Math . max ( profit [ i ] [ j - 1 ] , price [ j ] + prevDiff ) ; } } return profit [ k ] [ n - 1 ] ; } public static void main ( String [ ] args ) { int k = 3 ; int price [ ] = { 12 , 14 , 17 , 10 , 14 , 13 , 12 , 15 } ; int n = price . length ; System . out . println ( \" Maximum ▁ profit ▁ is : ▁ \" + maxProfit ( price , n , k ) ) ; } }"],"bleu":0.20789051297883654,"rouge_l":0.33790286481647275}
{"id":750,"predictions":["import java . io . * ; class GFG { static int maxSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }"],"references":["import java . util . Vector ; class GFG { static void originalArray ( int greater [ ] , int n ) { Vector < Integer > temp = new Vector < Integer > ( ) ; for ( int i = 0 ; i <= n ; i ++ ) temp . add ( i ) ; int arr [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { int k = n - greater [ i ] - i ; arr [ i ] = temp . get ( k ) ; temp . remove ( k ) ; } for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + \" ▁ \" ) ; } public static void main ( String [ ] args ) { int Arr [ ] = { 6 , 3 , 2 , 1 , 0 , 1 , 0 } ; int n = Arr . length ; originalArray ( Arr , n ) ; } }"],"bleu":0.3585708281712714,"rouge_l":0.5863658656204022}
{"id":751,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 3 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; class GFG { static int MAX = 1000 ; static int f [ ] ; public static int fib ( int n ) { if ( n == 0 ) return 0 ; if ( n == 1 || n == 2 ) return ( f [ n ] = 1 ) ; if ( f [ n ] != 0 ) return f [ n ] ; int k = ( n & 1 ) == 1 ? ( n + 1 ) \/ 2 : n \/ 2 ; f [ n ] = ( n & 1 ) == 1 ? ( fib ( k ) * fib ( k ) + fib ( k - 1 ) * fib ( k - 1 ) ) : ( 2 * fib ( k - 1 ) + fib ( k ) ) * fib ( k ) ; return f [ n ] ; } public static void main ( String [ ] args ) { int n = 9 ; f = new int [ MAX ] ; System . out . println ( fib ( n ) ) ; } }"],"bleu":0.2714589393353367,"rouge_l":0.45327980867782713}
{"id":752,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int sum ( int a [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += a [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = a . length ; System . out . println ( sum ( a , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static int getCount ( int l , int r , int p ) { int cnt = 0 ; int val = p ; while ( true ) { int a = r \/ val ; int b = ( l - 1 ) \/ val ; val *= p ; if ( ( a - b ) > 0 ) { cnt += ( a - b ) ; } else break ; } return cnt ; } public static void main ( String [ ] args ) { int l = 2 , r = 8 , p = 2 ; System . out . println ( getCount ( l , r , p ) ) ; } }"],"bleu":0.3328226506289817,"rouge_l":0.5419705609335632}
{"id":753,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { System . out . print ( a [ i ] + \" \" ) ; } System . out . println ( ) ; } } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } }"],"references":["import java . util . Stack ; class Test { static int findMaxLen ( String str ) { int n = str . length ( ) ; Stack < Integer > stk = new Stack < > ( ) ; stk . push ( - 1 ) ; int result = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( str . charAt ( i ) == ' ( ' ) stk . push ( i ) ; else { stk . pop ( ) ; if ( ! stk . empty ( ) ) result = Math . max ( result , i - stk . peek ( ) ) ; else stk . push ( i ) ; } } return result ; } public static void main ( String [ ] args ) { String str = \" ( ( ( ) ( ) \" ; System . out . println ( findMaxLen ( str ) ) ; str = \" ( ) ( ( ) ) ) ) ) \" ; System . out . println ( findMaxLen ( str ) ) ; } }"],"bleu":0.19888240962918027,"rouge_l":0.42976494793939773}
{"id":754,"predictions":["import java . io . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } public static void main ( String [ ] args ) { int n = 12 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; } }"],"references":["import java . io . * ; class GFG { static void printbinomial ( int max ) { for ( int m = 0 ; m <= max ; m ++ ) { System . out . print ( m + \" ▁ \" ) ; int binom = 1 ; for ( int x = 0 ; x <= m ; x ++ ) { if ( m != 0 && x != 0 ) binom = binom * ( m - x + 1 ) \/ x ; System . out . print ( binom + \" ▁ \" ) ; } System . out . println ( ) ; } } public static void main ( String [ ] args ) { int max = 10 ; printbinomial ( max ) ; } }"],"bleu":0.09321888067318078,"rouge_l":0.270186149518166}
{"id":755,"predictions":["import java . io . * ; class GFG { static int countPairs ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ i ] > arr [ j ] ) count ++ ; } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( countPairs ( arr , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static void getmax ( int arr [ ] , int n , int x ) { int s = 0 ; for ( int i = 0 ; i < n ; i ++ ) { s = s + arr [ i ] ; } System . out . print ( Math . min ( s , x ) ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 4 } ; int x = 5 ; int arr_size = arr . length ; getmax ( arr , arr_size , x ) ; } }"],"bleu":0.5475337600039419,"rouge_l":0.6820072802912117}
{"id":756,"predictions":["import java . io . * ; class GFG { static boolean check ( int a , int b ) { if ( a == b ) return true ; if ( a == b ) return true ; if ( a == b ) return true ; if ( a == b ) return true ; if ( a == b ) return false ; if ( a == b ) return false ; if ( a == b ) return false ; if ( a == b ) return false ; return true ; return false ; } public static void main ( String [ ] args ) { int a = 12 , b = 12 ; if ( check ( a , b ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static boolean isPossible ( int w , int h , int x , int y ) { if ( x * 2 == w && y * 2 == h ) return true ; return false ; } public static void main ( String [ ] args ) { int w = 1 , h = 2 , x = 1 , y = 2 ; if ( isPossible ( w , h , x , y ) ) System . out . print ( \" Yes \" ) ; else System . out . print ( \" No \" ) ; } }"],"bleu":0.3229685383954949,"rouge_l":0.5385614126200987}
{"id":757,"predictions":["import java . io . * ; class GFG { static void print ( int a [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) System . out . print ( a [ i ] + \" \" ) ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( a [ i ] + \" \" ) ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( a [ i ] + \" \" ) ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( a [ i ] + \" \" ) ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( a [ i ] + \" \" ) ; System . out . println ( ) ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 2 , 3 , 3 , 3 , 3 , 3 , 3 , 3 } ; int n = a . length ; print ( a , n ) ; } }"],"references":["class GFG { static double dydx ( double x , double y ) { return ( x + y - 2 ) ; } static double rungeKutta ( double x0 , double y0 , double x , double h ) { int n = ( int ) ( ( x - x0 ) \/ h ) ; double k1 , k2 ; double y = y0 ; for ( int i = 1 ; i <= n ; i ++ ) { k1 = h * dydx ( x0 , y ) ; k2 = h * dydx ( x0 + 0.5 * h , y + 0.5 * k1 ) ; y = y + ( 1.0 \/ 6.0 ) * ( k1 + 2 * k2 ) ; x0 = x0 + h ; } return y ; } public static void main ( String [ ] args ) { double x0 = 0 , y = 1 , x = 2 , h = 0.2 ; System . out . println ( rungeKutta ( x0 , y , x , h ) ) ; } }"],"bleu":0.1863583759431019,"rouge_l":0.3443039987280387}
{"id":758,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int n = Integer . parseInt ( br . readLine ( ) ) ; String s = br . readLine ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == '0' ) { count ++ ; } } System . out . println ( count ) ; } }"],"references":["class GFG { final static int MAX_CHAR = 26 ; static int countPalindrome ( String str ) { int n = str . length ( ) ; int sum = 0 ; int hashTable [ ] = new int [ MAX_CHAR ] ; for ( int i = 0 ; i < n ; i ++ ) { hashTable [ str . charAt ( i ) - ' a ' ] ++ ; } for ( int i = 0 ; i < 26 ; i ++ ) { if ( hashTable [ i ] != 0 ) { sum += ( hashTable [ i ] * ( hashTable [ i ] + 1 ) \/ 2 ) ; } } return sum ; } public static void main ( String [ ] args ) { String str = \" ananananddd \" ; System . out . println ( countPalindrome ( str ) ) ; } }"],"bleu":0.2927955985851678,"rouge_l":0.3840503672612802}
{"id":759,"predictions":["import java . io . * ; class GFG { static int sum ( int a [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += a [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = a . length ; System . out . println ( sum ( a , n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int __gcd ( int a , int b ) { if ( a == 0 || b == 0 ) return 0 ; if ( a == b ) return a ; if ( a > b ) return __gcd ( a - b , b ) ; return __gcd ( a , b - a ) ; } static int NumberOfSquares ( int x , int y ) { int s = __gcd ( x , y ) ; int ans = ( x * y ) \/ ( s * s ) ; return ans ; } public static void main ( String [ ] args ) { int m = 385 , n = 60 ; System . out . println ( NumberOfSquares ( m , n ) ) ; } }"],"bleu":0.29102314290109604,"rouge_l":0.47065519858335436}
{"id":760,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } Arrays . sort ( arr ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } System . out . println ( sum ) ; } }"],"references":["import java . io . * ; import java . util . * ; class GFG { static void divisibilityCheck ( List < Integer > arr , int n ) { List < Integer > s = new ArrayList < Integer > ( ) ; int max_ele = Integer . MIN_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { s . add ( arr . get ( i ) ) ; max_ele = Math . max ( max_ele , arr . get ( i ) ) ; } LinkedHashSet < Integer > res = new LinkedHashSet < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr . get ( i ) != 0 ) for ( int j = arr . get ( i ) * 2 ; j <= max_ele ; j += arr . get ( i ) ) { if ( s . contains ( j ) ) res . add ( j ) ; } } List < Integer > list = new ArrayList < Integer > ( res ) ; Collections . reverse ( list ) ; for ( Integer temp : list ) System . out . print ( temp + \" ▁ \" ) ; } public static void main ( String args [ ] ) { List < Integer > arr = Arrays . asList ( 2 , 3 , 8 , 6 , 9 , 10 ) ; int n = arr . size ( ) ; divisibilityCheck ( arr , n ) ; } }"],"bleu":0.2792736629067497,"rouge_l":0.4106946332621221}
{"id":761,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["class RotateArray { void leftRotate ( int arr [ ] , int d , int n ) { d = d % n ; int i , j , k , temp ; int g_c_d = gcd ( d , n ) ; for ( i = 0 ; i < g_c_d ; i ++ ) { temp = arr [ i ] ; j = i ; while ( true ) { k = j + d ; if ( k >= n ) k = k - n ; if ( k == i ) break ; arr [ j ] = arr [ k ] ; j = k ; } arr [ j ] = temp ; } } void printArray ( int arr [ ] , int size ) { int i ; for ( i = 0 ; i < size ; i ++ ) System . out . print ( arr [ i ] + \" ▁ \" ) ; } int gcd ( int a , int b ) { if ( b == 0 ) return a ; else return gcd ( b , a % b ) ; } public static void main ( String [ ] args ) { RotateArray rotate = new RotateArray ( ) ; int arr [ ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 } ; rotate . leftRotate ( arr , 2 , 7 ) ; rotate . printArray ( arr , 7 ) ; } }"],"bleu":0.21815378689048065,"rouge_l":0.43153811045184853}
{"id":762,"predictions":["import java . io . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 10 == 0 ) return false ; if ( n % 10 == 0 ) return false ; if ( n % 10 == 0 ) return false ; if ( isPrime ( n \/ 10 ) ) return false ; if ( isPrime ( n \/ 10 ) ) return false ; if ( isPrime ( n \/ 10 ) ) return false ; if ( isPrime ( n \/ 10 ) ) return false ; if ( isPrime ( n \/ 10 ) ) return false ; if ( isPrime ( n \/ 10 ) ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 10 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . io . * ; class GFG { static boolean isCorrectOrder ( int n ) { boolean flag = true ; int prev = - 1 ; int type = - 1 ; while ( n != 0 ) { if ( type == - 1 ) { if ( prev == - 1 ) { prev = n % 10 ; n = n \/ 10 ; continue ; } if ( prev == n % 10 ) { flag = false ; break ; } if ( prev > n % 10 ) { type = 1 ; prev = n % 10 ; n = n \/ 10 ; continue ; } prev = n % 10 ; n = n \/ 10 ; } else { if ( prev == n % 10 ) { flag = false ; break ; } if ( prev < n % 10 ) { flag = false ; break ; } prev = n % 10 ; n = n \/ 10 ; } } return flag ; } public static void main ( String [ ] args ) { int n = 123454321 ; if ( isCorrectOrder ( n ) ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ; } }"],"bleu":0.3071628594443154,"rouge_l":0.5495061240616358}
{"id":763,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans += a [ i ] ; } out . println ( ans ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } }"],"references":["import java . util . * ; class GFG { static void K_multiple ( int a [ ] , int n , int k ) { Arrays . sort ( a ) ; HashSet < Integer > s = new HashSet < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( ( a [ i ] % k == 0 && ! s . contains ( a [ i ] \/ k ) ) || a [ i ] % k != 0 ) s . add ( a [ i ] ) ; } for ( Integer i : s ) System . out . print ( i + \" ▁ \" ) ; } public static void main ( String args [ ] ) { int a [ ] = { 2 , 3 , 4 , 5 , 6 , 10 } ; int k = 2 ; int n = a . length ; K_multiple ( a , n , k ) ; } }"],"bleu":0.16308036190392322,"rouge_l":0.35288577963137363}
{"id":764,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; Arrays . sort ( arr ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; System . out . println ( sum ) ; } }"],"references":["class GFG { static int maxN = 20 ; static int maxM = 10 ; static int [ ] [ ] dp = new int [ maxN ] [ maxM ] ; static boolean [ ] [ ] v = new boolean [ maxN ] [ maxM ] ; static int findCnt ( int [ ] arr , int i , int curr , int n , int m ) { if ( i == n ) { if ( curr == 0 ) return 1 ; else return 0 ; } if ( v [ i ] [ curr ] ) return dp [ i ] [ curr ] ; v [ i ] [ curr ] = true ; return dp [ i ] [ curr ] = findCnt ( arr , i + 1 , curr , n , m ) + findCnt ( arr , i + 1 , ( curr + arr [ i ] ) % m , n , m ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 3 , 3 , 3 } ; int n = arr . length ; int m = 6 ; System . out . println ( findCnt ( arr , 0 , 0 , n , m ) - 1 ) ; } }"],"bleu":0.17092675348709108,"rouge_l":0.300201011991405}
{"id":765,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int n = Integer . parseInt ( br . readLine ( ) ) ; String s = br . readLine ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i ) ) count ++ ; } System . out . println ( count ) ; } }"],"references":["import java . util . * ; class GFG { static int minSteps ( String str ) { int count = 0 ; for ( int i = 0 ; i < str . length ( ) - 2 ; i ++ ) { if ( ( ( int ) str . charAt ( i ) ) == '0' ) { if ( str . charAt ( i + 1 ) == '1' ) { if ( str . charAt ( i + 2 ) == '0' ) { count ++ ; i += 2 ; } } } } return count ; } public static void main ( String args [ ] ) { String str = \"0101010\" ; System . out . println ( minSteps ( str ) ) ; } }"],"bleu":0.36812732490913613,"rouge_l":0.4755879345603272}
{"id":766,"predictions":["import java . io . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 12 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static int checkSemiprime ( int num ) { int cnt = 0 ; for ( int i = 2 ; cnt < 2 && i * i <= num ; ++ i ) while ( num % i == 0 ) { num \/= i ; ++ cnt ; } if ( num > 1 ) ++ cnt ; return cnt == 2 ? 1 : 0 ; } static void semiprime ( int n ) { if ( checkSemiprime ( n ) != 0 ) System . out . printf ( \" True \\n \" ) ; else System . out . printf ( \" False \\n \" ) ; } public static void main ( String [ ] args ) { int n = 6 ; semiprime ( n ) ; n = 8 ; semiprime ( n ) ; } }"],"bleu":0.21885934839787347,"rouge_l":0.402185174719789}
{"id":767,"predictions":["import java . io . * ; import java . util . * ; class GFG { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int e = sc . nextInt ( ) ; int e = sc . nextInt ( ) ; int e = sc . nextInt ( ) ; int e = sc . nextInt ( ) ; int e = sc . nextInt ( ) ; int e = sc . nextInt ( ) ; int e = sc . nextInt ( ) ; int e = sc . nextInt ( ) ; int e = sc . nextInt ( ) ; int e = sc . nextInt ( ) ; int e = sc . nextInt ( ) ; int e = sc . nextInt ( ) ; int e = sc . nextInt ( ) ; int e = sc . nextInt ( ) ; int e = Math . min ( e , e ) ; int e = Math . min ( e , e ) ; int e = Math . min ( e , e ) ; int e = Math . min ( e , e ) ; int e = Math . min ( e , e ) ; System . out . println ( e ) ; } }"],"references":["import java . util . * ; class solution { static double [ ] XandYandZintercept ( double A , double B , double C , double D ) { double [ ] rslt = new double [ 3 ] ; double x = - D \/ A ; double y = - D \/ B ; double z = - D \/ C ; rslt [ 0 ] = x ; rslt [ 1 ] = y ; rslt [ 2 ] = z ; return rslt ; } static void equation_plane ( int [ ] p , int [ ] q , int [ ] r ) { int x1 = p [ 0 ] ; int y1 = p [ 1 ] ; int z1 = p [ 2 ] ; int x2 = q [ 0 ] ; int y2 = q [ 1 ] ; int z2 = q [ 2 ] ; int x3 = r [ 0 ] ; int y3 = r [ 1 ] ; int z3 = r [ 2 ] ; int a1 = x2 - x1 ; int b1 = y2 - y1 ; int c1 = z2 - z1 ; int a2 = x3 - x1 ; int b2 = y3 - y1 ; int c2 = z3 - z1 ; int A = b1 * c2 - b2 * c1 ; int B = a2 * c1 - a1 * c2 ; int C = a1 * b2 - b1 * a2 ; int D = ( - A * x1 - B * y1 - C * z1 ) ; double [ ] rslt = XandYandZintercept ( A , B , C , D ) ; for ( int i = 0 ; i < 3 ; i ++ ) { System . out . printf ( rslt [ i ] + \" ▁ \" ) ; } } public static void main ( String args [ ] ) { int x1 = - 1 ; int y1 = 2 ; int z1 = 1 ; int x2 = 0 ; int y2 = - 3 ; int z2 = 2 ; int x3 = 1 ; int y3 = 1 ; int z3 = - 4 ; int [ ] p = { x1 , y1 , z1 } ; int [ ] q = { x2 , y2 , z2 } ; int [ ] r = { x3 , y3 , z3 } ; equation_plane ( p , q , r ) ; } }"],"bleu":0.06772742259664268,"rouge_l":0.288922024383826}
{"id":768,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int count ( int N ) { int count = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { if ( N % i == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int N = 3 ; System . out . println ( count ( N , N ) ) ; } }"],"references":["class GFG { static long mulmod ( long a , long b , long mod ) { long res = 0 ; a = a % mod ; while ( b > 0 ) { if ( b % 2 == 1 ) { res = ( res + a ) % mod ; } a = ( a * 2 ) % mod ; b \/= 2 ; } return res % mod ; } public static void main ( String [ ] args ) { long a = 9223372036854775807L , b = 9223372036854775807L ; System . out . println ( mulmod ( a , b , 100000000000L ) ) ; } }"],"bleu":0.2717946856913894,"rouge_l":0.4744128169233162}
{"id":769,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; String s = sc . next ( ) ; String s = sc . next ( ) ; int count = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i ) ) count ++ ; } System . out . println ( count ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["public class SortString { static final int MAX_CHAR = 26 ; static void sortString ( String str ) { int letters [ ] = new int [ MAX_CHAR ] ; for ( char x : str . toCharArray ( ) ) { letters [ x - ' a ' ] ++ ; } for ( int i = 0 ; i < MAX_CHAR ; i ++ ) { for ( int j = 0 ; j < letters [ i ] ; j ++ ) { System . out . print ( ( char ) ( i + ' a ' ) ) ; } } } public static void main ( String [ ] args ) { sortString ( \" geeksforgeeks \" ) ; } }"],"bleu":0.14502679239338845,"rouge_l":0.30834475668265937}
{"id":770,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int pentagon_pyramidal ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { int p = ( 3 * i * i - i ) \/ 2 ; sum = sum + p ; } return sum ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( pentagon_pyramidal ( n ) ) ; } }"],"bleu":0.5990206897895214,"rouge_l":0.7756765568959896}
{"id":771,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( a [ i ] + \" \" ) ; } out . println ( ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . util . Arrays ; class GFG { static int count ( int n ) { int table [ ] = new int [ n + 1 ] , i ; Arrays . fill ( table , 0 ) ; table [ 0 ] = 1 ; for ( i = 3 ; i <= n ; i ++ ) table [ i ] += table [ i - 3 ] ; for ( i = 5 ; i <= n ; i ++ ) table [ i ] += table [ i - 5 ] ; for ( i = 10 ; i <= n ; i ++ ) table [ i ] += table [ i - 10 ] ; return table [ n ] ; } public static void main ( String [ ] args ) { int n = 20 ; System . out . println ( \" Count ▁ for ▁ \" + n + \" ▁ is ▁ \" + count ( n ) ) ; n = 13 ; System . out . println ( \" Count ▁ for ▁ \" + n + \" ▁ is ▁ \" + count ( n ) ) ; } }"],"bleu":0.1727050790751369,"rouge_l":0.3777577086827506}
{"id":772,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans += a [ i ] ; } out . println ( ans ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["class GFG { final static int MAX = 26 ; static int max_element ( int freq [ ] ) { int max_ele = freq [ 0 ] ; for ( int i = 0 ; i < MAX ; i ++ ) { if ( max_ele < freq [ i ] ) max_ele = freq [ i ] ; } return max_ele ; } static int minimumAddition ( String str , int len ) { int freq [ ] = new int [ MAX ] ; for ( int i = 0 ; i < len ; i ++ ) { freq [ str . charAt ( i ) - ' a ' ] ++ ; } int maxFreq = max_element ( freq ) ; int minAddition = 0 ; for ( int i = 0 ; i < MAX ; i ++ ) { if ( freq [ i ] > 0 ) { minAddition += Math . abs ( maxFreq - freq [ i ] ) ; } } return minAddition ; } public static void main ( String [ ] args ) { String str = \" geeksforgeeks \" ; int len = str . length ( ) ; System . out . println ( minimumAddition ( str , len ) ) ; } }"],"bleu":0.2608404725488978,"rouge_l":0.41954820797576986}
{"id":773,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int count ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ i ] > arr [ j ] ) { count ++ ; } } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( count ( arr , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static final int N = 9 ; static void addEgde ( List < Integer > [ ] adj , int u , int v ) { adj [ u ] . add ( v ) ; adj [ v ] . add ( u ) ; } static void DFS ( int node , int parent , int G , int leaf , int val [ ] , List < Integer > [ ] adj ) { if ( node == leaf ) { G = __gcd ( G , val [ node ] ) ; System . out . print ( G ) ; return ; } for ( int it : adj [ node ] ) { if ( it != parent ) DFS ( it , node , __gcd ( G , val [ it ] ) , leaf , val , adj ) ; } } static int __gcd ( int a , int b ) { return b == 0 ? a : __gcd ( b , a % b ) ; } public static void main ( String [ ] args ) { int n = 8 ; List < Integer > [ ] adj = new LinkedList [ n + 1 ] ; for ( int i = 0 ; i < n + 1 ; i ++ ) adj [ i ] = new LinkedList < Integer > ( ) ; addEgde ( adj , 1 , 2 ) ; addEgde ( adj , 2 , 4 ) ; addEgde ( adj , 1 , 3 ) ; addEgde ( adj , 3 , 5 ) ; addEgde ( adj , 3 , 6 ) ; addEgde ( adj , 6 , 7 ) ; addEgde ( adj , 6 , 8 ) ; int leaf = 5 ; int val [ ] = { - 1 , 6 , 2 , 6 , 3 , 4 , 12 , 10 , 18 } ; int G = val [ 1 ] ; DFS ( 1 , - 1 , G , leaf , val , adj ) ; } }"],"bleu":0.09253807049803353,"rouge_l":0.28945963580283535}
{"id":774,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int count ( int n ) { int count = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( n % i == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( count ( n ) ) ; } }"],"references":["class GFG { static int countNums ( int l , int r ) { int cnt = 0 ; for ( int i = l ; i <= r ; i ++ ) { int lastDigit = ( i % 10 ) ; if ( ( lastDigit % 10 ) == 2 || ( lastDigit % 10 ) == 3 || ( lastDigit % 10 ) == 9 ) { cnt ++ ; } } return cnt ; } public static void main ( String [ ] args ) { int l = 11 , r = 33 ; System . out . print ( countNums ( l , r ) ) ; } }"],"bleu":0.34023229548628087,"rouge_l":0.5895557287607172}
{"id":775,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( arr [ i ] + \" \" ) ; } } }"],"references":["class gfg { static int countMaxSetBits ( int left , int right ) { int max_count = - 1 , num = 0 ; for ( int i = left ; i <= right ; ++ i ) { int temp = i , cnt = 0 ; while ( temp > 0 ) { if ( temp % 2 == 1 ) ++ cnt ; temp >>= 1 ; } if ( cnt > max_count ) { max_count = cnt ; num = i ; } } return num ; } public static void main ( String [ ] args ) { int l = 1 , r = 5 ; System . out . println ( countMaxSetBits ( l , r ) ) ; l = 1 ; r = 10 ; System . out . print ( countMaxSetBits ( l , r ) ) ; } }"],"bleu":0.17333102425255043,"rouge_l":0.3265206812652068}
{"id":776,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPower ( int a [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % 2 == 0 ) return false ; } return true ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = a . length ; if ( isPower ( a , n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . io . * ; class GFG { static boolean checkPerfectcube ( int n ) { int d = ( int ) Math . cbrt ( n ) ; if ( d * d * d == n ) return true ; return false ; } static int smallestPerfectCube ( int a [ ] , int n ) { int mini = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( checkPerfectcube ( a [ i ] ) ) { mini = Math . min ( a [ i ] , mini ) ; } } return mini ; } public static void main ( String [ ] args ) { int a [ ] = { 16 , 8 , 25 , 2 , 3 , 10 } ; int n = a . length ; System . out . print ( smallestPerfectCube ( a , n ) ) ; } }"],"bleu":0.4887572031078455,"rouge_l":0.5879832922780337}
{"id":777,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int count ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ i ] % arr [ j ] == 0 ) { count ++ ; } } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( count ( arr , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static int exclude ( int a [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int s = 0 ; int maximum = 0 ; for ( int j = i ; j < Math . min ( n , i + 60 ) ; j ++ ) { s += a [ j ] ; maximum = Math . max ( a [ j ] , maximum ) ; if ( s % 2 == 0 && 2 * maximum > s ) count ++ ; } } return count ; } static int countSubarrays ( int a [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) a [ i ] = Integer . bitCount ( a [ i ] ) ; int [ ] pre = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { pre [ i ] = a [ i ] ; if ( i != 0 ) pre [ i ] += pre [ i - 1 ] ; } int odd = 0 , even = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( pre [ i ] % 2 == 1 ) odd ++ ; } even = n - odd ; even ++ ; int answer = ( odd * ( odd - 1 ) \/ 2 ) + ( even * ( even - 1 ) \/ 2 ) ; System . out . println ( answer ) ; answer = answer - exclude ( a , n ) ; return answer ; } public static void main ( String [ ] args ) { int a [ ] = { 6 , 7 , 14 } ; int n = a . length ; System . out . println ( countSubarrays ( a , n ) ) ; } }"],"bleu":0.14401730069536314,"rouge_l":0.40961688350620545}
{"id":778,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 10 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . Vector ; class GFG { static void printPermutation ( int N , int K ) { Vector < Integer > res = new Vector < > ( ) ; int l = 1 , r = N , flag = 0 ; for ( int i = 0 ; i < K ; i ++ ) { if ( flag == 0 ) { res . add ( l ) ; l ++ ; } else { res . add ( r ) ; r -- ; } flag ^= 1 ; } if ( flag != 1 ) { for ( int i = r ; i >= l ; i -- ) { res . add ( i ) ; } } else { for ( int i = l ; i <= r ; i ++ ) { res . add ( i ) ; } } for ( Integer i : res ) { System . out . print ( i + \" ▁ \" ) ; } } public static void main ( String [ ] args ) { int N = 10 , K = 4 ; printPermutation ( N , K ) ; } }"],"bleu":0.16560348913418985,"rouge_l":0.3390982087708462}
{"id":779,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int count ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { count ++ ; } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( count ( arr , n ) ) ; } }"],"references":["class GFG { static int solve ( int A [ ] , int B [ ] , int n ) { int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = i ; j < n ; j ++ ) if ( Integer . bitCount ( A [ i ] | A [ j ] ) == B [ j ] ) { cnt ++ ; } return cnt ; } public static void main ( String args [ ] ) { int A [ ] = { 5 , 3 , 2 , 4 , 6 , 1 } ; int B [ ] = { 2 , 2 , 1 , 4 , 2 , 3 } ; int size = A . length ; System . out . println ( solve ( A , B , size ) ) ; } }"],"bleu":0.3711742725675395,"rouge_l":0.6118076134032367}
{"id":780,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["import java . io . * ; class GFG { static double sum ( int n ) { double i , s = 0.0 ; for ( i = 1 ; i <= n ; i ++ ) s = s + 1 \/ i ; return s ; } public static void main ( String args [ ] ) { int n = 5 ; System . out . printf ( \" Sum ▁ is ▁ % f \" , sum ( n ) ) ; } }"],"bleu":0.510606482888343,"rouge_l":0.7446347706241387}
{"id":781,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int count ( int a [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % 2 == 0 ) { count ++ ; } } return count ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 } ; int n = a . length ; System . out . println ( count ( a , n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int M = 3 ; static int N = 2 ; static void getIndex ( int n , int shuffle [ ] [ ] ) { for ( int i = 0 ; i < 3 ; i ++ ) { if ( shuffle [ i ] [ 0 ] == n ) n = shuffle [ i ] [ 1 ] ; else if ( shuffle [ i ] [ 1 ] == n ) n = shuffle [ i ] [ 0 ] ; } System . out . println ( n ) ; } public static void main ( String [ ] args ) { int n = 3 ; int shuffle [ ] [ ] = { { 3 , 1 } , { 2 , 1 } , { 1 , 2 } } ; getIndex ( n , shuffle ) ; } }"],"bleu":0.3541894996873156,"rouge_l":0.5013698630136987}
{"id":782,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPower ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) if ( arr [ i ] > arr [ j ] ) return false ; return true ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 6 } ; int n = arr . length ; if ( isPower ( arr , n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; class GFG { static void printArr ( int [ ] arr , int n ) { for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + \" ▁ \" ) ; } static void findArrangement ( int arr [ ] , int n ) { if ( n < 2 ) { System . out . print ( \" - 1\" ) ; return ; } int minVal = Arrays . stream ( arr ) . min ( ) . getAsInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == minVal ) { swap ( arr , i , n - 1 ) ; break ; } } int andVal = arr [ 0 ] ; for ( int i = 1 ; i < n - 1 ; i ++ ) { andVal &= arr [ i ] ; } if ( andVal == arr [ n - 1 ] ) printArr ( arr , n ) ; else System . out . print ( \" - 1\" ) ; } static int [ ] swap ( int [ ] arr , int i , int j ) { int temp = arr [ i ] ; arr [ i ] = arr [ j ] ; arr [ j ] = temp ; return arr ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 5 , 3 , 3 } ; int n = arr . length ; findArrangement ( arr , n ) ; } }"],"bleu":0.31096770571969007,"rouge_l":0.3591649815629832}
{"id":783,"predictions":["import java . util . * ; class GFG { static boolean isVowel ( String str ) { int n = str . length ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( str . charAt ( i ) == str . charAt ( i ) ) count ++ ; } return count ; } public static void main ( String [ ] args ) { String str = \" geeksforgeeksforgeeks \" ; if ( isVowel ( str ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; import java . lang . * ; public class GfG { public static int findOccurrences ( String str1 , String substr1 ) { int counter = 0 ; char [ ] str = str1 . toCharArray ( ) ; char [ ] substr = substr1 . toCharArray ( ) ; for ( int i = 0 ; i < str1 . length ( ) ; i ++ ) { if ( str [ i ] == substr [ 0 ] ) { for ( int j = i + 1 ; j < str1 . length ( ) ; j ++ ) { if ( str [ j ] == substr [ 1 ] ) { for ( int k = j + 1 ; k < str1 . length ( ) ; k ++ ) { if ( str [ k ] == substr [ 2 ] ) counter ++ ; } } } } } return counter ; } public static void main ( String argc [ ] ) { String str = \" GFGFGYSYIOIWIN \" ; String substr = \" GFG \" ; System . out . println ( findOccurrences ( str , substr ) ) ; } }"],"bleu":0.21395200629284344,"rouge_l":0.47995070622807845}
{"id":784,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) System . out . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } public static void main ( String [ ] args ) { int n = 3 ; } }"],"references":["import java . util . * ; class GFG { static String decimalToBinary ( double num , int k_prec ) { String binary = \" \" ; int Integral = ( int ) num ; double fractional = num - Integral ; while ( Integral > 0 ) { int rem = Integral % 2 ; binary += ( ( char ) ( rem + '0' ) ) ; Integral \/= 2 ; } binary = reverse ( binary ) ; binary += ( ' . ' ) ; while ( k_prec -- > 0 ) { fractional *= 2 ; int fract_bit = ( int ) fractional ; if ( fract_bit == 1 ) { fractional -= fract_bit ; binary += ( char ) ( 1 + '0' ) ; } else { binary += ( char ) ( 0 + '0' ) ; } } return binary ; } static String reverse ( String input ) { char [ ] temparray = input . toCharArray ( ) ; int left , right = 0 ; right = temparray . length - 1 ; for ( left = 0 ; left < right ; left ++ , right -- ) { char temp = temparray [ left ] ; temparray [ left ] = temparray [ right ] ; temparray [ right ] = temp ; } return String . valueOf ( temparray ) ; } public static void main ( String [ ] args ) { double n = 4.47 ; int k = 3 ; System . out . println ( decimalToBinary ( n , k ) ) ; n = 6.986 ; k = 5 ; System . out . println ( decimalToBinary ( n , k ) ) ; } }"],"bleu":0.10068020275795309,"rouge_l":0.2939950501497981}
{"id":785,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int evenDecimalValue ( String str , int n ) { int result = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i ; j < n ; j ++ ) { int decimalValue = 0 ; int powerOf2 = 1 ; for ( int k = i ; k <= j ; k ++ ) { decimalValue += ( ( str . charAt ( k ) - '0' ) * powerOf2 ) ; powerOf2 *= 2 ; } if ( decimalValue % 2 == 0 ) result ++ ; } } return result ; } public static void main ( String [ ] args ) { String str = \"10010\" ; int n = 5 ; System . out . println ( evenDecimalValue ( str , n ) ) ; } }"],"bleu":0.35675897699338127,"rouge_l":0.5974116824064357}
{"id":786,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { System . out . print ( a [ i ] + \" \" ) ; } System . out . println ( ) ; } } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . io . * ; class GFG { static boolean isSubSeqDivisible ( String str ) { int i , j , k , l = str . length ( ) ; int arr [ ] = new int [ l ] ; for ( i = 0 ; i < l ; i ++ ) arr [ i ] = str . charAt ( i ) - '0' ; for ( i = 0 ; i < l ; i ++ ) { for ( j = i ; j < l ; j ++ ) { for ( k = j ; k < l ; k ++ ) { if ( arr [ i ] % 8 == 0 ) return true ; else if ( ( arr [ i ] * 10 + arr [ j ] ) % 8 == 0 && i != j ) return true ; else if ( ( arr [ i ] * 100 + arr [ j ] * 10 + arr [ k ] ) % 8 == 0 && i != j && j != k && i != k ) return true ; } } } return false ; } public static void main ( String args [ ] ) { String str = \"3144\" ; if ( isSubSeqDivisible ( str ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.20441784714846783,"rouge_l":0.4167319968641506}
{"id":787,"predictions":["import java . util . * ; class GFG { static boolean isVowel ( String str ) { int len = str . length ( ) ; for ( int i = 0 ; i < len ; i ++ ) { if ( str . charAt ( i ) == str . charAt ( i ) ) return false ; } return false ; } public static void main ( String [ ] args ) { String str = \" geeksforgeeksforgeeks \" ; if ( isVowel ( str ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; class GFG { static void sub_segments ( String str , int n ) { int l = str . length ( ) ; for ( int x = 0 ; x < l ; x += n ) { String newlist = str . substring ( x , x + n ) ; List < Character > arr = new ArrayList < Character > ( ) ; for ( char y : newlist . toCharArray ( ) ) { if ( ! arr . contains ( y ) ) arr . add ( y ) ; } for ( char y : arr ) System . out . print ( y ) ; System . out . println ( ) ; } } public static void main ( String [ ] args ) { String str = \" geeksforgeeksgfg \" ; int n = 4 ; sub_segments ( str , n ) ; } }"],"bleu":0.3218465687354943,"rouge_l":0.4820201557489693}
{"id":788,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( a [ i ] + \" \" ) ; } out . println ( ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . util . * ; class GFG { static int remAnagram ( String str1 , String str2 ) { int count1 [ ] = new int [ 26 ] ; int count2 [ ] = new int [ 26 ] ; for ( int i = 0 ; i < str1 . length ( ) ; i ++ ) count1 [ str1 . charAt ( i ) - ' a ' ] ++ ; for ( int i = 0 ; i < str2 . length ( ) ; i ++ ) count2 [ str2 . charAt ( i ) - ' a ' ] ++ ; int result = 0 ; for ( int i = 0 ; i < 26 ; i ++ ) result += Math . abs ( count1 [ i ] - count2 [ i ] ) ; return result ; } public static void main ( String [ ] args ) { String str1 = \" bcadeh \" , str2 = \" hea \" ; System . out . println ( remAnagram ( str1 , str2 ) ) ; } }"],"bleu":0.2243910560057675,"rouge_l":0.4229837080920964}
{"id":789,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { System . out . print ( a [ i ] + \" \" ) ; } System . out . println ( ) ; } } }"],"references":["import java . util . * ; class GFG { static int minOperations ( String s , String t , int n ) { int ct0 = 0 , ct1 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == t . charAt ( i ) ) continue ; if ( s . charAt ( i ) == '0' ) ct0 ++ ; else ct1 ++ ; } return Math . max ( ct0 , ct1 ) ; } public static void main ( String args [ ] ) { String s = \"010\" , t = \"101\" ; int n = s . length ( ) ; System . out . println ( minOperations ( s , t , n ) ) ; } }"],"bleu":0.31558623049885487,"rouge_l":0.43403709319958}
{"id":790,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["import java . util . * ; import java . lang . * ; public class GfG { public static int toggleLastMBits ( int n , int m ) { int num = ( 1 << m ) - 1 ; return ( n ^ num ) ; } public static void main ( String argc [ ] ) { int n = 107 ; int m = 4 ; n = toggleLastMBits ( n , m ) ; System . out . println ( n ) ; } }"],"bleu":0.30338860321691363,"rouge_l":0.5843597262952102}
{"id":791,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static void printmaxSubseq ( int arr [ ] , int n ) { int i ; for ( i = 0 ; i < n ; i ++ ) { if ( i + 1 < n && arr [ i ] < arr [ i + 1 ] ) System . out . print ( arr [ i ] + \" ▁ \" ) ; else System . out . print ( arr [ i ] + \" \\n \" ) ; } } public static void main ( String [ ] args ) { int arr [ ] = { 9 , 8 , 11 , 13 , 10 , 15 , 14 , 16 , 20 , 5 } ; int n = arr . length ; printmaxSubseq ( arr , n ) ; } }"],"bleu":0.45670248326327695,"rouge_l":0.6253427106925736}
{"id":792,"predictions":["import java . io . * ; import java . util . * ; class GFG { public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( n + \" \" + n + \" \" + n ) ; } }"],"references":["class Test { static void printFibonacciNumbers ( int n ) { int f1 = 0 , f2 = 1 , i ; if ( n < 1 ) return ; for ( i = 1 ; i <= n ; i ++ ) { System . out . print ( f2 + \" ▁ \" ) ; int next = f1 + f2 ; f1 = f2 ; f2 = next ; } } public static void main ( String [ ] args ) { printFibonacciNumbers ( 7 ) ; } }"],"bleu":0.17463050756827825,"rouge_l":0.314028314028314}
{"id":793,"predictions":["import java . io . * ; class GFG { static boolean isVowel ( int x , int y ) { if ( y < 0 ) return false ; if ( y < 0 ) return false ; if ( y < 0 ) return false ; if ( y < 0 ) return false ; if ( y < 0 ) return false ; if ( y < 0 ) return false ; if ( y < 0 ) return false ; return false ; } public static void main ( String [ ] args ) { int x = 12 , y = 12 ; if ( isVowel ( x , y ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static double cal_speed ( double dist , double time ) { System . out . print ( \" \\n ▁ Distance ( km ) ▁ : ▁ \" + dist ) ; System . out . print ( \" \\n ▁ Time ( hr ) ▁ : ▁ \" + time ) ; return dist \/ time ; } static double cal_dis ( double speed , double time ) { System . out . print ( \" \\n ▁ Time ( hr ) ▁ : ▁ \" + time ) ; System . out . print ( \" \\n ▁ Speed ( km ▁ \/ ▁ hr ) ▁ : ▁ \" + speed ) ; return speed * time ; } static double cal_time ( double dist , double speed ) { System . out . print ( \" \\n ▁ Distance ( km ) ▁ : ▁ \" + dist ) ; System . out . print ( \" \\n ▁ Speed ( km ▁ \/ ▁ hr ) ▁ : ▁ \" + speed ) ; return speed * dist ; } public static void main ( String [ ] args ) { System . out . println ( \" \\n ▁ The ▁ calculated ▁ Speed ( km ▁ \/ ▁ hr ) ▁ is ▁ : ▁ \" + cal_speed ( 45.9 , 2.0 ) ) ; System . out . println ( \" \\n ▁ The ▁ calculated ▁ Distance ( km ) ▁ : ▁ \" + cal_dis ( 62.9 , 2.5 ) ) ; System . out . println ( \" \\n ▁ The ▁ calculated ▁ Time ( hr ) ▁ : ▁ \" + cal_time ( 48.0 , 4.5 ) ) ; } }"],"bleu":0.08316205760600462,"rouge_l":0.30410054767588823}
{"id":794,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int count ( int N ) { int count = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( N % i == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int N = 3 ; System . out . println ( count ( N ) ) ; } }"],"references":["class GFG { static void FermatFactors ( int n ) { if ( n <= 0 ) { System . out . print ( \" [ \" + n + \" ] \" ) ; return ; } if ( ( n & 1 ) == 0 ) { System . out . print ( \" [ \" + n \/ 2.0 + \" , \" + 2 + \" ] \" ) ; return ; } int a = ( int ) Math . ceil ( Math . sqrt ( n ) ) ; if ( a * a == n ) { System . out . print ( \" [ \" + a + \" , \" + a + \" ] \" ) ; return ; } int b ; while ( true ) { int b1 = a * a - n ; b = ( int ) ( Math . sqrt ( b1 ) ) ; if ( b * b == b1 ) break ; else a += 1 ; } System . out . print ( \" [ \" + ( a - b ) + \" , \" + ( a + b ) + \" ] \" ) ; return ; } public static void main ( String [ ] args ) { FermatFactors ( 6557 ) ; } }"],"bleu":0.07086183512901655,"rouge_l":0.2493583040212948}
{"id":795,"predictions":["import java . io . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 12 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static void perfectCube ( int N ) { int cube ; for ( int i = 0 ; i <= N ; i ++ ) { cube = i * i * i ; if ( cube == N ) { System . out . println ( \" Yes \" ) ; return ; } else if ( cube > N ) { System . out . println ( \" NO \" ) ; return ; } } } public static void main ( String [ ] args ) { int N = 216 ; perfectCube ( N ) ; } }"],"bleu":0.3697446880214185,"rouge_l":0.44144736842105264}
{"id":796,"predictions":["import java . util . * ; class GFG { static boolean isVowel ( String s ) { int count = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i ) ) count ++ ; } return count ; } public static void main ( String [ ] args ) { String s = \" geeksforgeeksforgeeks \" ; if ( isVowel ( s ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; class GFG { static String removeDuplicate ( char str [ ] , int n ) { int index = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int j ; for ( j = 0 ; j < i ; j ++ ) { if ( str [ i ] == str [ j ] ) { break ; } } if ( j == i ) { str [ index ++ ] = str [ i ] ; } } return String . valueOf ( Arrays . copyOf ( str , index ) ) ; } public static void main ( String [ ] args ) { char str [ ] = \" geeksforgeeks \" . toCharArray ( ) ; int n = str . length ; System . out . println ( removeDuplicate ( str , n ) ) ; } }"],"bleu":0.32265438802898055,"rouge_l":0.5212471131639724}
{"id":797,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int count = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i ) ) count ++ ; } System . out . println ( count ) ; } }"],"references":["import java . util . * ; import java . lang . * ; import java . io . * ; class LexoSmallest { static boolean compareSeq ( char [ ] S , int x , int y , int n ) { for ( int i = 0 ; i < n ; i ++ ) { if ( S [ x ] < S [ y ] ) return false ; else if ( S [ x ] > S [ y ] ) return true ; x = ( x + 1 ) % n ; y = ( y + 1 ) % n ; } return true ; } static int smallestSequence ( char [ ] S , int n ) { int index = 0 ; for ( int i = 1 ; i < n ; i ++ ) if ( compareSeq ( S , index , i , n ) ) index = i ; return index ; } static void printSmallestSequence ( String str , int n ) { char [ ] S = str . toCharArray ( ) ; int starting_index = smallestSequence ( S , n ) ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( S [ ( starting_index + i ) % n ] ) ; } public static void main ( String [ ] args ) { String S = \" DCACBCAA \" ; int n = 8 ; printSmallestSequence ( S , n ) ; } }"],"bleu":0.08184417948329985,"rouge_l":0.29658814653365745}
{"id":798,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; Arrays . sort ( arr ) ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + \" \" ) ; } }"],"references":["import java . io . * ; import java . util . * ; import java . lang . * ; class GFG { static void partSort ( int [ ] arr , int N , int a , int b ) { int l = Math . min ( a , b ) ; int r = Math . max ( a , b ) ; int [ ] temp = new int [ r - l + 1 ] ; int j = 0 ; for ( int i = l ; i <= r ; i ++ ) { temp [ j ] = arr [ i ] ; j ++ ; } Arrays . sort ( temp ) ; j = 0 ; for ( int i = l ; i <= r ; i ++ ) { arr [ i ] = temp [ j ] ; j ++ ; } for ( int i = 0 ; i < N ; i ++ ) { System . out . print ( arr [ i ] + \" ▁ \" ) ; } } public static void main ( String args [ ] ) { int [ ] arr = { 7 , 8 , 4 , 5 , 2 } ; int a = 1 , b = 4 ; int N = arr . length ; partSort ( arr , N , a , b ) ; } }"],"bleu":0.3516992701622023,"rouge_l":0.4745957648332319}
{"id":799,"predictions":["import java . io . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 12 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class Test { static boolean checkYear ( int year ) { if ( year % 400 == 0 ) return true ; if ( year % 100 == 0 ) return false ; if ( year % 4 == 0 ) return true ; return false ; } public static void main ( String [ ] args ) { int year = 2000 ; System . out . println ( checkYear ( 2000 ) ? \" Leap ▁ Year \" : \" Not ▁ a ▁ Leap ▁ Year \" ) ; } }"],"bleu":0.4319527675872553,"rouge_l":0.6117171006333568}
{"id":800,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] >= a [ i ] ) { count ++ ; } } out . println ( count ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["class GFG { static int countPairs ( int arr [ ] , int n ) { int count = 0 ; int right = 0 , left = 0 ; boolean visited [ ] = new boolean [ n ] ; for ( int i = 0 ; i < n ; i ++ ) visited [ i ] = false ; while ( right < n ) { while ( right < n && ! visited [ arr [ right ] ] ) { count += ( right - left ) ; visited [ arr [ right ] ] = true ; right ++ ; } while ( left < right && ( right != n && visited [ arr [ right ] ] ) ) { visited [ arr [ left ] ] = false ; left ++ ; } } return count ; } public static void main ( String args [ ] ) { int arr [ ] = { 1 , 4 , 2 , 4 , 3 , 2 } ; int n = arr . length ; System . out . println ( countPairs ( arr , n ) ) ; } }"],"bleu":0.1637726131238271,"rouge_l":0.3425897035881435}
{"id":801,"predictions":["import java . io . * ; class GFG { static int countPairs ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( countPairs ( arr , n ) ) ; } }"],"references":["class BinarySearch { int binarySearch ( int arr [ ] , int x ) { int l = 0 , r = arr . length - 1 ; while ( l <= r ) { int m = l + ( r - l ) \/ 2 ; if ( arr [ m ] == x ) return m ; if ( arr [ m ] < x ) l = m + 1 ; else r = m - 1 ; } return - 1 ; } public static void main ( String args [ ] ) { BinarySearch ob = new BinarySearch ( ) ; int arr [ ] = { 2 , 3 , 4 , 10 , 40 } ; int n = arr . length ; int x = 10 ; int result = ob . binarySearch ( arr , x ) ; if ( result == - 1 ) System . out . println ( \" Element ▁ not ▁ present \" ) ; else System . out . println ( \" Element ▁ found ▁ at ▁ \" + \" index ▁ \" + result ) ; } }"],"bleu":0.19343310408244335,"rouge_l":0.4506628883716223}
{"id":802,"predictions":["import java . io . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 12 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . io . * ; class Composite { static boolean isComposite ( int n ) { if ( n <= 1 ) System . out . println ( \" False \" ) ; if ( n <= 3 ) System . out . println ( \" False \" ) ; if ( n % 2 == 0 || n % 3 == 0 ) return true ; for ( int i = 5 ; i * i <= n ; i = i + 6 ) if ( n % i == 0 || n % ( i + 2 ) == 0 ) return true ; return false ; } public static void main ( String args [ ] ) { System . out . println ( isComposite ( 11 ) ? \" true \" : \" false \" ) ; System . out . println ( isComposite ( 15 ) ? \" true \" : \" false \" ) ; } }"],"bleu":0.35913509810572963,"rouge_l":0.553272866353404}
{"id":803,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int countPairs ( int n ) { int count = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( n % i == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( countPairs ( n ) ) ; } }"],"references":["import java . io . * ; class GFG { static void decToBinary ( int n ) { int [ ] binaryNum = new int [ 32 ] ; int i = 0 ; while ( n > 0 ) { binaryNum [ i ] = n % 2 ; n = n \/ 2 ; i ++ ; } for ( int j = i - 1 ; j >= 0 ; j -- ) System . out . print ( binaryNum [ j ] ) ; } public static void main ( String [ ] args ) { int n = 17 ; decToBinary ( n ) ; } }"],"bleu":0.3947807544117917,"rouge_l":0.5319486285080071}
{"id":804,"predictions":["import java . io . * ; class GFG { static int nthTerm ( int n ) { return ( int ) Math . pow ( n , 2 ) + 1 ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( nthTerm ( n ) ) ; } }"],"references":["import java . util . * ; class GFG { static int calculateSum ( int n ) { return ( n * ( ( int ) Math . pow ( n , 2 ) + 3 * n + 5 ) ) \/ 3 ; } public static void main ( String arr [ ] ) { int n = 25 ; System . out . println ( calculateSum ( n ) ) ; } }"],"bleu":0.5944988119290298,"rouge_l":0.8159594095940961}
{"id":805,"predictions":["import java . io . * ; class GFG { static boolean isPrime ( int n ) { if ( n == 1 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( isPrime ( n ) ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 12 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["public class GfG { static boolean isPerfectSquare ( int n ) { for ( int i = 1 ; i * i <= n ; i ++ ) { if ( ( n % i == 0 ) && ( n \/ i == i ) ) { return true ; } } return false ; } public static void main ( String [ ] args ) { int n = 36 ; if ( isPerfectSquare ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.5340518639430311,"rouge_l":0.7165522501906941}
{"id":806,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int N = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ M ] ; for ( int i = 0 ; i < M ; i ++ ) { st = new StringTokenizer ( br . readLine ( ) ) ; a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int [ ] b = new int [ M ] ; for ( int i = 0 ; i < M ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < M ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int ans = 0 ; for ( int i = 0 ; i < M ; i ++ ) { for ( int j = 0 ; j < M ; j ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { if ( a [ k ] < b [ k ] && b [ k ] < a [ k ] ) { ans ++ ; } } } } } } System . out . println ( ans ) ; } }"],"references":["class GFG { static int N = 101 ; static int mod = ( int ) 1e9 + 7 ; static int exactsum [ ] [ ] [ ] = new int [ N ] [ N ] [ N ] ; static int exactnum [ ] [ ] [ ] = new int [ N ] [ N ] [ N ] ; static int getSum ( int x , int y , int z ) { int ans = 0 ; exactnum [ 0 ] [ 0 ] [ 0 ] = 1 ; for ( int i = 0 ; i <= x ; ++ i ) { for ( int j = 0 ; j <= y ; ++ j ) { for ( int k = 0 ; k <= z ; ++ k ) { if ( i > 0 ) { exactsum [ i ] [ j ] [ k ] += ( exactsum [ i - 1 ] [ j ] [ k ] * 10 + 4 * exactnum [ i - 1 ] [ j ] [ k ] ) % mod ; exactnum [ i ] [ j ] [ k ] += exactnum [ i - 1 ] [ j ] [ k ] % mod ; } if ( j > 0 ) { exactsum [ i ] [ j ] [ k ] += ( exactsum [ i ] [ j - 1 ] [ k ] * 10 + 5 * exactnum [ i ] [ j - 1 ] [ k ] ) % mod ; exactnum [ i ] [ j ] [ k ] += exactnum [ i ] [ j - 1 ] [ k ] % mod ; } if ( k > 0 ) { exactsum [ i ] [ j ] [ k ] += ( exactsum [ i ] [ j ] [ k - 1 ] * 10 + 6 * exactnum [ i ] [ j ] [ k - 1 ] ) % mod ; exactnum [ i ] [ j ] [ k ] += exactnum [ i ] [ j ] [ k - 1 ] % mod ; } ans += exactsum [ i ] [ j ] [ k ] % mod ; ans %= mod ; } } } return ans ; } public static void main ( String [ ] args ) { int x = 1 , y = 1 , z = 1 ; System . out . println ( getSum ( x , y , z ) % mod ) ; } }"],"bleu":0.17912248384890836,"rouge_l":0.31029394633634916}
{"id":807,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; String s = sc . next ( ) ; String s = sc . next ( ) ; int count = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i ) ) count ++ ; } System . out . println ( count ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . util . * ; class Sol { static int countPairs ( String s ) { Set < Character > st = new HashSet < Character > ( ) ; st . add ( ' a ' ) ; st . add ( ' e ' ) ; st . add ( ' i ' ) ; st . add ( ' o ' ) ; st . add ( ' u ' ) ; int count = 0 ; int n = s . length ( ) ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( st . contains ( s . charAt ( i ) ) && ! st . contains ( s . charAt ( i + 1 ) ) ) count ++ ; } return count ; } public static void main ( String args [ ] ) { String s = \" geeksforgeeks \" ; System . out . println ( countPairs ( s ) ) ; } }"],"bleu":0.25547358358993505,"rouge_l":0.3984560570071259}
{"id":808,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int N = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { st = new StringTokenizer ( br . readLine ( ) ) ; a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int count = 0 ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < N ; j ++ ) { if ( a [ i ] > a [ j ] ) { count ++ ; } } } System . out . println ( count ) ; } }"],"references":["class GFG { static int MOD = ( int ) ( 1e9 + 7 ) ; static int modulo_13 ( String s , int n ) { long [ ] [ ] dp = new long [ n + 1 ] [ 13 ] ; dp [ 0 ] [ 0 ] = 1 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 10 ; j ++ ) { int nxt = s . charAt ( i ) - '0' ; if ( s . charAt ( i ) == ' ? ' ) nxt = j ; for ( int k = 0 ; k < 13 ; k ++ ) { int rem = ( 10 * k + nxt ) % 13 ; dp [ i + 1 ] [ rem ] += dp [ i ] [ k ] ; dp [ i + 1 ] [ rem ] %= MOD ; } if ( s . charAt ( i ) != ' ? ' ) break ; } } return ( int ) dp [ n ] [ 5 ] ; } public static void main ( String [ ] args ) { String s = \" ? 44\" ; int n = s . length ( ) ; System . out . println ( modulo_13 ( s , n ) ) ; } }"],"bleu":0.253138683201688,"rouge_l":0.3508419374956691}
{"id":809,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int maxSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }"],"references":["import java . util . * ; class solution { static int max_profit ( int a [ ] , int b [ ] , int n , int fee ) { int i , j , profit ; int l , r , diff_day = 1 , sum = 0 ; b [ 0 ] = 0 ; b [ 1 ] = diff_day ; for ( i = 1 ; i < n ; i ++ ) { l = 0 ; r = diff_day ; sum = 0 ; for ( j = n - 1 ; j >= i ; j -- ) { profit = ( a [ r ] - a [ l ] ) - fee ; if ( profit > 0 ) { sum = sum + profit ; } l ++ ; r ++ ; } if ( b [ 0 ] < sum ) { b [ 0 ] = sum ; b [ 1 ] = diff_day ; } diff_day ++ ; } return 0 ; } public static void main ( String args [ ] ) { int arr [ ] = { 6 , 1 , 7 , 2 , 8 , 4 } ; int n = arr . length ; int [ ] b = new int [ 2 ] ; int tranFee = 2 ; max_profit ( arr , b , n , tranFee ) ; System . out . println ( b [ 0 ] + \" , ▁ \" + b [ 1 ] ) ; } }"],"bleu":0.15677837506006406,"rouge_l":0.4240511386336396}
{"id":810,"predictions":["import java . io . * ; class GFG { static int maxSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } static int maxSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }"],"references":["class GFG { static int MAX = 25 ; static int getMinSum ( int arr [ ] , int n ) { int bits_count [ ] = new int [ MAX ] , max_bit = 0 , sum = 0 , ans = 0 ; for ( int d = 0 ; d < n ; d ++ ) { int e = arr [ d ] , f = 0 ; while ( e > 0 ) { int rem = e % 2 ; e = e \/ 2 ; if ( rem == 1 ) { bits_count [ f ] += rem ; } f ++ ; } max_bit = Math . max ( max_bit , f ) ; } for ( int d = 0 ; d < max_bit ; d ++ ) { int temp = ( int ) Math . pow ( 2 , d ) ; if ( bits_count [ d ] > n \/ 2 ) ans = ans + temp ; } for ( int d = 0 ; d < n ; d ++ ) { arr [ d ] = arr [ d ] ^ ans ; sum = sum + arr [ d ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 5 , 7 , 11 , 15 } ; int n = arr . length ; System . out . println ( getMinSum ( arr , n ) ) ; } }"],"bleu":0.2985406674148533,"rouge_l":0.5477621438167292}
{"id":811,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int findSum ( int arr [ ] , int n ) { Arrays . sort ( arr ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["class GFG { static void findNums ( int arr [ ] , int n ) { int S = 0 , X = 0 ; for ( int i = 0 ; i < n ; i ++ ) { S += arr [ i ] ; X ^= arr [ i ] ; } System . out . println ( X + \" ▁ \" + ( X + S ) ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 7 } ; int n = arr . length ; findNums ( arr , n ) ; } }"],"bleu":0.6044875945945064,"rouge_l":0.6605870618409804}
{"id":812,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["class GFG { static void bin ( Integer n ) { if ( n > 1 ) bin ( n >> 1 ) ; System . out . printf ( \" % d \" , n & 1 ) ; } public static void main ( String [ ] args ) { bin ( 131 ) ; System . out . printf ( \" \\n \" ) ; bin ( 3 ) ; } }"],"bleu":0.3267528770614487,"rouge_l":0.49333333333333335}
{"id":813,"predictions":["import java . io . * ; class GFG { static int count ( int a , int b ) { if ( b == 0 ) return 1 ; if ( a == b ) return 1 ; if ( a > b ) return count ( a , b - a ) ; return count ( a , b - b ) ; } public static void main ( String [ ] args ) { int a = 2 , b = 3 , c = 3 ; System . out . println ( count ( a , b , c ) ) ; } }"],"references":["class GFG { static int Square ( int row , int column , int moves ) { int a = 0 , b = 0 , c = 0 , d = 0 , total = 0 ; a = row - moves ; b = row + moves ; c = column - moves ; d = column + moves ; if ( a < 1 ) a = 1 ; if ( c < 1 ) c = 1 ; if ( b > 8 ) b = 8 ; if ( d > 8 ) d = 8 ; total = ( b - a + 1 ) * ( d - c + 1 ) - 1 ; return total ; } public static void main ( String [ ] args ) { int R = 4 , C = 5 , M = 2 ; System . out . println ( Square ( R , C , M ) ) ; } }"],"bleu":0.23507662173898802,"rouge_l":0.47416552354823965}
{"id":814,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["public class Digits { static long firstkdigits ( int n , int k ) { long product = 1 ; for ( int i = 0 ; i < n ; i ++ ) product *= n ; while ( ( int ) ( product \/ Math . pow ( 10 , k ) ) != 0 ) product = product \/ 10 ; return product ; } public static void main ( String [ ] args ) { int n = 15 ; int k = 4 ; System . out . println ( firstkdigits ( n , k ) ) ; } }"],"bleu":0.3772282005161814,"rouge_l":0.560490045941807}
{"id":815,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int count ( int a [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( a [ i ] > a [ j ] ) { count ++ ; } } } return count ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 } ; int n = a . length ; System . out . println ( count ( a , n ) ) ; } }"],"references":["class GFG { static int solve ( String X , String Y , int N , int K ) { int [ ] count = new int [ N + 1 ] ; int sol = 0 ; count [ 0 ] = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { count [ i ] = count [ i - 1 ] + Math . abs ( X . charAt ( i - 1 ) - Y . charAt ( i - 1 ) ) ; } int j = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { while ( ( count [ i ] - count [ j ] ) > K ) { j ++ ; } sol = Math . max ( sol , i - j ) ; } return sol ; } public static void main ( String [ ] args ) { int N = 4 ; String X = \" abcd \" , Y = \" bcde \" ; int K = 3 ; System . out . print ( solve ( X , Y , N , K ) + \" \\n \" ) ; } }"],"bleu":0.23582325363287004,"rouge_l":0.455750244596638}
{"id":816,"predictions":["import java . io . * ; import java . util . * ; import java . lang . * ; class GFG { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { a [ i ] = sc . nextInt ( ) ; } System . out . println ( a [ n - 1 ] + \" \" + a [ n - 1 ] + \" \" + a [ n - 1 ] ) ; } } }"],"references":["import java . util . * ; class GFG { static int MAX = 1000 ; static int [ ] f = new int [ MAX ] ; static int fib ( int n ) { if ( n == 0 ) return 0 ; if ( n == 1 || n == 2 ) return ( f [ n ] = 1 ) ; if ( f [ n ] != 0 ) return f [ n ] ; int k = 0 ; if ( ( n & 1 ) != 0 ) k = ( n + 1 ) \/ 2 ; else k = n \/ 2 ; if ( ( n & 1 ) != 0 ) f [ n ] = ( fib ( k ) * fib ( k ) + fib ( k - 1 ) * fib ( k - 1 ) ) ; else f [ n ] = ( 2 * fib ( k - 1 ) + fib ( k ) ) * fib ( k ) ; return f [ n ] ; } static int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } static int findLCMFibonacci ( int a , int b ) { return ( fib ( a ) * fib ( b ) ) \/ fib ( gcd ( a , b ) ) ; } public static void main ( String args [ ] ) { int a = 3 , b = 12 ; System . out . println ( findLCMFibonacci ( a , b ) ) ; } }"],"bleu":0.13872642608913902,"rouge_l":0.29010650411949895}
{"id":817,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { System . out . print ( a [ i ] + \" \" ) ; } System . out . println ( ) ; } } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . io . * ; class GFG { static int find_digit ( String s , int n ) { int first_digit = - 1 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( s . charAt ( i ) < '0' || s . charAt ( i ) > '9' ) { first_digit = i ; break ; } } first_digit ++ ; int s_len = first_digit ; int num = 0 , pw = 1 ; int i = n - 1 ; while ( i >= 0 ) { if ( s . charAt ( i ) >= '0' && s . charAt ( i ) <= '9' ) { int digit = s . charAt ( i ) - '0' ; num = num + ( pw * digit ) ; if ( num >= s_len ) return - 1 ; pw = pw * 10 ; } i -- ; } num = num * 10 ; int req = s_len - num ; if ( req > 9 || req < 0 ) return - 1 ; return req ; } public static void main ( String [ ] args ) { String s = \" abcd0\" ; int n = s . length ( ) ; System . out . print ( find_digit ( s , n ) ) ; } }"],"bleu":0.1482341850235815,"rouge_l":0.3551467163483931}
{"id":818,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int sum ( int a [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += a [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = a . length ; System . out . println ( sum ( a , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static int findNthNumber ( int A , int B , int N ) { int sum = 0 ; for ( int i = 2 ; i < N ; i ++ ) { sum = A + B ; A = B ; B = sum ; } return sum ; } public static void main ( String [ ] args ) { int A = 5 , B = 7 , N = 10 ; System . out . println ( findNthNumber ( A , B , N ) ) ; } }"],"bleu":0.503283622983213,"rouge_l":0.6741862225586677}
{"id":819,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["import java . util . * ; class solution { static int calculateSum ( int n ) { return ( ( int ) Math . pow ( 10 , n + 1 ) * ( 9 * n - 1 ) + 10 ) \/ ( int ) Math . pow ( 9 , 3 ) - n * ( n + 1 ) \/ 18 ; } public static void main ( String ar [ ] ) { int n = 3 ; System . out . println ( \" Sum = ▁ \" + calculateSum ( n ) ) ; } }"],"bleu":0.31662288796667415,"rouge_l":0.5428012101797471}
{"id":820,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["import java . util . * ; import java . lang . * ; class GFG { public static int summation ( int n ) { return ( n * ( n + 1 ) * ( 2 * n + 1 ) ) \/ 6 ; } public static void main ( String args [ ] ) { int n = 10 ; System . out . println ( summation ( n ) ) ; } }"],"bleu":0.42265361878162316,"rouge_l":0.6382660687593422}
{"id":821,"predictions":["import java . io . * ; class GFG { static int maxSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }"],"references":["class GFG { static float mean ( float arr [ ] , int n ) { float sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum = sum + arr [ i ] ; return sum \/ n ; } static float SSD ( float arr [ ] , int n ) { float sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum = sum + ( arr [ i ] - mean ( arr , n ) ) * ( arr [ i ] - mean ( arr , n ) ) ; return ( float ) Math . sqrt ( sum \/ ( n - 1 ) ) ; } static float sampleError ( float arr [ ] , int n ) { return SSD ( arr , n ) \/ ( float ) Math . sqrt ( n ) ; } public static void main ( String [ ] args ) { float arr [ ] = { 78.53f , 79.62f , 80.25f , 81.05f , 83.21f , 83.46f } ; int n = arr . length ; System . out . println ( sampleError ( arr , n ) ) ; } }"],"bleu":0.3374218665222536,"rouge_l":0.5856267715095547}
{"id":822,"predictions":["import java . util . * ; import java . io . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; } public static long mod = 17352642619633L ; void run ( FastScanner in , PrintWriter out ) { int N = in . nextInt ( ) ; int [ ] a = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { a [ i ] = in . nextInt ( ) ; } long sum = 0 ; for ( int i = 0 ; i < N ; i ++ ) { sum += a [ i ] ; } for ( int i = 0 ; i < N ; i ++ ) { sum += a [ i ] ; } out . println ( sum ) ; } static class FastScanner { BufferedReader br ; StringTokenizer st ; public FastScanner ( InputStream in ) { br = new BufferedReader ( new InputStreamReader ( in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . util . * ; class GFG { static final int INFINITY_ = 9999999 ; static int sqrtByLongDivision ( int n ) { int i = 0 , udigit , j ; int cur_divisor = 0 ; int quotient_units_digit = 0 ; int cur_quotient = 0 ; int cur_dividend = 0 ; int cur_remainder = 0 ; int a [ ] = new int [ 10 ] ; while ( n > 0 ) { a [ i ] = n % 100 ; n = n \/ 100 ; i ++ ; } i -- ; for ( j = i ; j >= 0 ; j -- ) { cur_remainder = INFINITY_ ; cur_dividend = cur_dividend * 100 + a [ j ] ; for ( udigit = 0 ; udigit <= 9 ; udigit ++ ) { if ( cur_remainder >= cur_dividend - ( ( cur_divisor * 10 + udigit ) * udigit ) && cur_dividend - ( ( cur_divisor * 10 + udigit ) * udigit ) >= 0 ) { cur_remainder = cur_dividend - ( ( cur_divisor * 10 + udigit ) * udigit ) ; quotient_units_digit = udigit ; } } cur_quotient = cur_quotient * 10 + quotient_units_digit ; cur_divisor = cur_quotient * 2 ; cur_dividend = cur_remainder ; } return cur_quotient ; } public static void main ( String [ ] args ) { int x = 1225 ; System . out . print ( sqrtByLongDivision ( x ) + \" \\n \" ) ; } }"],"bleu":0.14352358253950068,"rouge_l":0.3403250898556944}
{"id":823,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans += a [ i ] ; } out . println ( ans ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . io . * ; class GFG { static int CountAllPairs ( int N , int K ) { int count = 0 ; if ( N > K ) { count = N - K ; for ( int i = K + 1 ; i <= N ; i ++ ) count = count + ( ( N - K ) \/ i ) ; } return count ; } public static void main ( String [ ] args ) { int N = 11 , K = 5 ; System . out . println ( CountAllPairs ( N , K ) ) ; } }"],"bleu":0.12308675038510816,"rouge_l":0.29756097560975614}
{"id":824,"predictions":["import java . io . * ; class GFG { static boolean isPrime ( int n ) { if ( n == 1 ) return false ; if ( n == 2 ) return true ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 12 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . io . * ; class GFG { static String checkNumber ( int N ) { int temp = N ; while ( temp > 0 ) { if ( temp % 1000 == 144 ) temp \/= 1000 ; else if ( temp % 100 == 14 ) temp \/= 100 ; else if ( temp % 10 == 1 ) temp \/= 10 ; else { return \" NO \" ; } } return \" YES \" ; } public static void main ( String [ ] args ) { int N = 1414 ; System . out . println ( checkNumber ( N ) ) ; } }"],"bleu":0.34508100812410175,"rouge_l":0.5317671394799054}
{"id":825,"predictions":["import java . io . * ; class GFG { static boolean isDivisible ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 10 ; if ( isDivisible ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static void printNumbers ( int N ) { int flag = 1 ; int x = N ; if ( N > 0 ) { while ( x > 0 && flag == 1 ) { int digit = x % 10 ; if ( digit != 1 && digit != 3 ) { flag = 0 ; } x = x \/ 10 ; } if ( flag == 1 ) { System . out . print ( N + \" ▁ \" ) ; } printNumbers ( N - 1 ) ; } } public static void main ( String [ ] args ) { int N = 20 ; printNumbers ( N ) ; } }"],"bleu":0.22867145903748531,"rouge_l":0.35549910340705326}
{"id":826,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int count ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( count ( arr , n ) ) ; } }"],"references":["import java . util . * ; class solution { static int getPosition ( int a [ ] , int n , int m ) { for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = ( a [ i ] \/ m + ( a [ i ] % m ) ) ; } int ans = - 1 , max = - 1 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( max < a [ i ] ) { max = a [ i ] ; ans = i ; } } return ans + 1 ; } public static void main ( String args [ ] ) { int a [ ] = { 2 , 5 , 4 } ; int n = a . length ; int m = 2 ; System . out . println ( getPosition ( a , n , m ) ) ; } }"],"bleu":0.32552871502602676,"rouge_l":0.5536198622991862}
{"id":827,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int maxSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }"],"references":["import java . util . Arrays ; class GFG { static void printArr ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + \" ▁ \" ) ; } static void sortArr ( int arr [ ] , int n , int k ) { int prev = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % k == 0 ) { if ( prev != - 1 ) Arrays . sort ( arr , prev + 1 , i ) ; prev = i ; } } printArr ( arr , n ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 1 , 13 , 3 , 7 , 8 , 21 , 13 , 12 } ; int n = arr . length ; int k = 2 ; sortArr ( arr , n , k ) ; } }"],"bleu":0.31942501187754435,"rouge_l":0.5473033595852856}
{"id":828,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int N = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int count = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { if ( st . hasMoreTokens ( ) == 1 ) { st = new StringTokenizer ( br . readLine ( ) ) ; } else { st = new StringTokenizer ( br . readLine ( ) ) ; count ++ ; } } System . out . println ( count ) ; } }"],"references":["import java . util . LinkedList ; import java . util . Queue ; public class GFG { static int countOfBinaryNumberLessThanN ( int N ) { Queue < Integer > q = new LinkedList < > ( ) ; q . add ( 1 ) ; int cnt = 0 ; int t ; while ( q . size ( ) > 0 ) { t = q . peek ( ) ; q . remove ( ) ; if ( t <= N ) { cnt ++ ; q . add ( t * 10 ) ; q . add ( t * 10 + 1 ) ; } } return cnt ; } static public void main ( String [ ] args ) { int N = 200 ; System . out . println ( countOfBinaryNumberLessThanN ( N ) ) ; } }"],"bleu":0.2299436808502853,"rouge_l":0.44207679826933477}
{"id":829,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["class GFG { static final int mod = ( int ) ( 1e9 + 7 ) ; static long power ( int p ) { long res = 1 ; for ( int i = 1 ; i <= p ; ++ i ) { res *= 2 ; res %= mod ; } return res % mod ; } static long subset_square_sum ( int A [ ] ) { int n = A . length ; long ans = 0 ; for ( int i : A ) { ans += ( 1 * i * i ) % mod ; ans %= mod ; } return ( 1 * ans * power ( n - 1 ) ) % mod ; } public static void main ( String [ ] args ) { int A [ ] = { 3 , 7 } ; System . out . println ( subset_square_sum ( A ) ) ; } }"],"bleu":0.2978591692010814,"rouge_l":0.5267702936096718}
{"id":830,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int count ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ i ] < arr [ j ] ) count ++ ; } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 4 , 3 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4"],"references":["import java . util . * ; class GFG { static class pair { int first , second ; public pair ( int first , int second ) { this . first = first ; this . second = second ; } } static void performQueries ( int [ ] A , pair [ ] q ) { int n = A . length ; int [ ] pref_xor = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; ++ i ) { pref_xor [ i ] = pref_xor [ i - 1 ] ^ A [ i - 1 ] ; } for ( pair i : q ) { int L = i . first , R = i . second ; if ( L > R ) { int temp = L ; L = R ; R = temp ; } if ( L != R && pref_xor [ R ] == pref_xor [ L - 1 ] ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } } static public void main ( String [ ] arg ) { int [ ] Arr = { 1 , 1 , 2 , 2 , 1 } ; pair [ ] q = { new pair ( 1 , 5 ) , new pair ( 1 , 4 ) , new pair ( 3 , 4 ) } ; performQueries ( Arr , q ) ; } }"],"bleu":0.07857745500965892,"rouge_l":0.21878688822300918}
{"id":831,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int n ) { if ( n == 1 ) return false ; if ( n == 2 ) return false ; if ( n == 3 ) return true ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 12 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static String one [ ] = { \" \" , \" one ▁ \" , \" two ▁ \" , \" three ▁ \" , \" four ▁ \" , \" five ▁ \" , \" six ▁ \" , \" seven ▁ \" , \" eight ▁ \" , \" nine ▁ \" , \" ten ▁ \" , \" eleven ▁ \" , \" twelve ▁ \" , \" thirteen ▁ \" , \" fourteen ▁ \" , \" fifteen ▁ \" , \" sixteen ▁ \" , \" seventeen ▁ \" , \" eighteen ▁ \" , \" nineteen ▁ \" } ; static String ten [ ] = { \" \" , \" \" , \" twenty ▁ \" , \" thirty ▁ \" , \" forty ▁ \" , \" fifty ▁ \" , \" sixty ▁ \" , \" seventy ▁ \" , \" eighty ▁ \" , \" ninety ▁ \" } ; static String numToWords ( int n , String s ) { String str = \" \" ; if ( n > 19 ) { str += ten [ n \/ 10 ] + one [ n % 10 ] ; } else { str += one [ n ] ; } if ( n != 0 ) { str += s ; } return str ; } static String convertToWords ( long n ) { String out = \" \" ; out += numToWords ( ( int ) ( n \/ 10000000 ) , \" crore ▁ \" ) ; out += numToWords ( ( int ) ( ( n \/ 100000 ) % 100 ) , \" lakh ▁ \" ) ; out += numToWords ( ( int ) ( ( n \/ 1000 ) % 100 ) , \" thousand ▁ \" ) ; out += numToWords ( ( int ) ( ( n \/ 100 ) % 10 ) , \" hundred ▁ \" ) ; if ( n > 100 && n % 100 > 0 ) { out += \" and ▁ \" ; } out += numToWords ( ( int ) ( n % 100 ) , \" \" ) ; return out ; } public static void main ( String [ ] args ) { long n = 438237764 ; System . out . printf ( convertToWords ( n ) ) ; } }"],"bleu":0.050006288708260634,"rouge_l":0.27193650103294553}
{"id":832,"predictions":["import java . io . * ; class GFG { static boolean isPowerOfTwo ( int n ) { if ( n == 1 ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 3 ; if ( isPowerOfTwo ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class Test { static int factorial ( int n ) { int res = 1 , i ; for ( i = 2 ; i <= n ; i ++ ) res *= i ; return res ; } public static void main ( String [ ] args ) { int num = 5 ; System . out . println ( \" Factorial ▁ of ▁ \" + num + \" ▁ is ▁ \" + factorial ( 5 ) ) ; } }"],"bleu":0.3385611325893029,"rouge_l":0.5247049409881978}
{"id":833,"predictions":["import java . io . * ; import java . util . * ; import java . lang . * ; import java . math . * ; class GFG { public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( n + \" \" + n + \" \" + ( n + 1 ) ) ; } }"],"references":["class gfg { static int getMinCost ( int n , int m ) { int cost = ( n - 1 ) * m + ( m - 1 ) * n ; return cost ; } public static void main ( String [ ] args ) { int n = 4 , m = 5 ; System . out . println ( getMinCost ( n , m ) ) ; } }"],"bleu":0.376010493631276,"rouge_l":0.4546070460704607}
{"id":834,"predictions":["import java . io . * ; import java . util . * ; class GFG { public static void main ( String [ ] args ) { int a = 5 , b = 5 ; System . out . println ( a + \" \" + b ) ; } }"],"references":["import java . util . * ; import java . lang . * ; class GFG { public static int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } public static void main ( String [ ] args ) { int a = 2 ; int b = 4 ; System . out . println ( gcd ( a , b ) ) ; } }"],"bleu":0.38179958920251317,"rouge_l":0.6071024655055416}
{"id":835,"predictions":["import java . io . * ; import java . util . * ; import java . lang . * ; import java . math . * ; import java . text . * ; public class Main { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; int n = s . nextInt ( ) ; System . out . println ( n * n + 1 ) ; for ( int i = 1 ; i <= n ; i ++ ) { System . out . print ( i + \" \" ) ; } } }"],"references":["public class GFG { static int calculateSum ( int n ) { return n * ( n + 1 ) \/ 2 + ( int ) Math . pow ( ( n * ( n + 1 ) \/ 2 ) , 2 ) ; } public static void main ( String args [ ] ) { int n = 3 ; System . out . println ( \" Sum ▁ = ▁ \" + calculateSum ( n ) ) ; } }"],"bleu":0.1971455004423384,"rouge_l":0.3672802339583692}
{"id":836,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int countSubarray ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ i ] < arr [ j ] ) count ++ ; } } return count ; } static int countSubarray ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ i ] < arr [ j ] ) count ++ ; } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( countSubarray ( arr , n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int findLength ( String str ) { int n = str . length ( ) ; int maxlen = 0 ; int sum [ ] [ ] = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) sum [ i ] [ i ] = str . charAt ( i ) - '0' ; for ( int len = 2 ; len <= n ; len ++ ) { for ( int i = 0 ; i < n - len + 1 ; i ++ ) { int j = i + len - 1 ; int k = len \/ 2 ; sum [ i ] [ j ] = sum [ i ] [ j - k ] + sum [ j - k + 1 ] [ j ] ; if ( len % 2 == 0 && sum [ i ] [ j - k ] == sum [ ( j - k + 1 ) ] [ j ] && len > maxlen ) maxlen = len ; } } return maxlen ; } public static void main ( String [ ] args ) { String str = \"153803\" ; System . out . println ( \" Length ▁ of ▁ the ▁ substring ▁ is ▁ \" + findLength ( str ) ) ; } }"],"bleu":0.33901895923325576,"rouge_l":0.45661214305517045}
{"id":837,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { st = new StringTokenizer ( br . readLine ( ) ) ; a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( a [ i ] > b [ j ] ) { count ++ ; } } } System . out . println ( count ) ; } }"],"references":["class GFG { static int solve ( int a [ ] , int b [ ] , int n ) { int i ; int s = 0 ; for ( i = 0 ; i < n ; i ++ ) s += ( a [ i ] + b [ i ] ) ; if ( n == 1 ) return a [ 0 ] + b [ 0 ] ; if ( s % n != 0 ) return - 1 ; int x = s \/ n ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] > x ) return - 1 ; if ( i > 0 ) { a [ i ] += b [ i - 1 ] ; b [ i - 1 ] = 0 ; } if ( a [ i ] == x ) continue ; int y = a [ i ] + b [ i ] ; if ( i + 1 < n ) y += b [ i + 1 ] ; if ( y == x ) { a [ i ] = y ; b [ i ] = 0 ; continue ; } if ( a [ i ] + b [ i ] == x ) { a [ i ] += b [ i ] ; b [ i ] = 0 ; continue ; } if ( i + 1 < n && a [ i ] + b [ i + 1 ] == x ) { a [ i ] += b [ i + 1 ] ; b [ i + 1 ] = 0 ; continue ; } return - 1 ; } for ( i = 0 ; i < n ; i ++ ) if ( b [ i ] != 0 ) return - 1 ; return x ; } public static void main ( String [ ] args ) { int a [ ] = { 6 , 14 , 21 , 1 } ; int b [ ] = { 15 , 7 , 10 , 10 } ; int n = a . length ; System . out . println ( solve ( a , b , n ) ) ; } }"],"bleu":0.22184443287752934,"rouge_l":0.3607434525485778}
{"id":838,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["class GFG { static double sumOfSeries ( int n ) { double res = 0.0 ; int sum = 0 , prod = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { sum += i ; prod *= i ; res += ( ( double ) sum \/ prod ) ; } return res ; } public static void main ( String arg [ ] ) { int n = 4 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"bleu":0.49623094086104985,"rouge_l":0.6961199869579394}
{"id":839,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int number_of_digits ( int n ) { int i ; int res ; int sum = 0 ; for ( i = 4 , res = 1 ; ; i *= 4 , res ++ ) { sum += i ; if ( sum >= n ) break ; } return res ; } public static void main ( String [ ] args ) { int n = 21 ; System . out . println ( number_of_digits ( n ) ) ; } }"],"bleu":0.5431471718700032,"rouge_l":0.7718602455146363}
{"id":840,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["import java . io . * ; import java . math . * ; class GFG { static int nonsquare ( int n ) { return n + ( int ) ( 0.5 + ( Math . sqrt ( n ) ) ) ; } static void printNonSquare ( int n ) { for ( int i = 1 ; i <= n ; i ++ ) System . out . print ( nonsquare ( i ) + \" ▁ \" ) ; } public static void main ( String args [ ] ) { int n = 10 ; printNonSquare ( n ) ; } }"],"bleu":0.4246704017938983,"rouge_l":0.607124148768989}
{"id":841,"predictions":["import java . io . * ; class GFG { static void print ( int a , int b ) { if ( a == b ) { System . out . println ( \" YES \" ) ; return ; } if ( a == b ) { System . out . println ( \" NO \" ) ; return ; } System . out . println ( \" NO \" ) ; System . out . println ( \" YES \" ) ; } public static void main ( String [ ] args ) { int a = 2 , b = 2 , c = 3 ; print ( a , b , c ) ; } }"],"references":["class GFG { static double distance ( int x1 , int y1 , int x2 , int y2 ) { return Math . sqrt ( Math . pow ( x2 - x1 , 2 ) + Math . pow ( y2 - y1 , 2 ) * 1.0 ) ; } public static void main ( String [ ] args ) { System . out . println ( Math . round ( distance ( 3 , 4 , 4 , 3 ) * 100000.0 ) \/ 100000.0 ) ; } }"],"bleu":0.2430012485354618,"rouge_l":0.3775591176003809}
{"id":842,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } return sum ; } static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 4 , 3 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 ,"],"references":["class GFG { static void evenOddInsertionSort ( int arr [ ] , int n ) { for ( int i = 2 ; i < n ; i ++ ) { int j = i - 2 ; int temp = arr [ i ] ; if ( ( ( i + 1 ) & 1 ) == 1 ) { while ( j >= 0 && temp >= arr [ j ] ) { arr [ j + 2 ] = arr [ j ] ; j -= 2 ; } arr [ j + 2 ] = temp ; } else { while ( j >= 0 && temp <= arr [ j ] ) { arr [ j + 2 ] = arr [ j ] ; j -= 2 ; } arr [ j + 2 ] = temp ; } } } static void printArray ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { System . out . printf ( \" % d ▁ \" , arr [ i ] ) ; } System . out . printf ( \" \\n \" ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 12 , 11 , 13 , 5 , 6 } ; int n = arr . length ; evenOddInsertionSort ( arr , n ) ; printArray ( arr , n ) ; } }"],"bleu":0.15135185103580737,"rouge_l":0.26200812857934597}
{"id":843,"predictions":["import java . io . * ; import java . util . * ; class GFG { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( a [ i ] < a [ j ] ) { ans ++ ; } } } System . out . println ( ans ) ; } }"],"references":["class GFG { static int search ( int arr [ ] , int l , int h , int key ) { if ( l > h ) return - 1 ; int mid = ( l + h ) \/ 2 ; if ( arr [ mid ] == key ) return mid ; if ( ( arr [ l ] == arr [ mid ] ) && ( arr [ h ] == arr [ mid ] ) ) { ++ l ; -- h ; } if ( arr [ l ] <= arr [ mid ] ) { if ( key >= arr [ l ] && key <= arr [ mid ] ) return search ( arr , l , mid - 1 , key ) ; return search ( arr , mid + 1 , h , key ) ; } if ( key >= arr [ mid ] && key <= arr [ h ] ) return search ( arr , mid + 1 , h , key ) ; return search ( arr , l , mid - 1 , key ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 3 , 1 , 2 , 3 , 3 } ; int n = arr . length ; int key = 3 ; System . out . println ( search ( arr , 0 , n - 1 , key ) ) ; } }"],"bleu":0.10988768454817212,"rouge_l":0.25356015703179124}
{"id":844,"predictions":["import java . io . * ; class GFG { static boolean isVowel ( String str ) { int len = str . length ( ) ; for ( int i = 0 ; i < len ; i ++ ) if ( str . charAt ( i ) == str . charAt ( i ) ) return false ; return true ; } public static void main ( String [ ] args ) { String str = \" geeksforgeeksforgeeks \" ; if ( isVowel ( str ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; class GFG { static boolean check ( String s1 , String s2 ) { Map < Character , Integer > mp = new HashMap < > ( ) ; for ( int i = 0 ; i < s1 . length ( ) ; i ++ ) { mp . put ( s1 . charAt ( i ) , mp . get ( s1 . charAt ( i ) ) == null ? 1 : mp . get ( s1 . charAt ( i ) ) + 1 ) ; } for ( int i = 0 ; i < s2 . length ( ) ; i ++ ) { if ( mp . get ( s2 . charAt ( i ) ) > 0 ) { return true ; } } return false ; } public static void main ( String [ ] args ) { String s1 = \" geeksforgeeks \" , s2 = \" geeks \" ; boolean yes_or_no = check ( s1 , s2 ) ; if ( yes_or_no == true ) { System . out . println ( \" Yes \" ) ; } else { System . out . println ( \" No \" ) ; } } }"],"bleu":0.27476440856139245,"rouge_l":0.5470330089677542}
{"id":845,"predictions":["import java . util . * ; import java . lang . * ; import java . io . * ; class GFG { static int nthTerm ( int N ) { return ( int ) Math . pow ( N , 2 ) ; } public static void main ( String [ ] args ) { int N = 4 ; System . out . println ( nthTerm ( N ) ) ; } }"],"references":["public class GFG { static int nthTerm ( int n ) { return 2 * ( int ) Math . pow ( n , 2 ) + 3 * n - 5 ; } public static void main ( String args [ ] ) { int N = 4 ; System . out . println ( nthTerm ( N ) ) ; } }"],"bleu":0.5652385534128285,"rouge_l":0.7545195052331113}
{"id":846,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) return false ; } return true ; } static boolean isPrime ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { if ( isPrime ( arr [ i ] ) ) return false ; } return true ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = arr . length ; if ( isPrime ( arr , n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; class GFG { static int [ ] arr = new int [ 33 ] ; static void balTernary ( int ter ) { int carry = 0 , base = 10 ; int i = 32 ; while ( ter > 0 ) { int rem = ter % base ; rem = rem + carry ; if ( rem == 0 ) { arr [ i -- ] = 0 ; carry = 0 ; } else if ( rem == 1 ) { arr [ i -- ] = 1 ; carry = 0 ; } else if ( rem == 2 ) { arr [ i -- ] = - 1 ; carry = 1 ; } else if ( rem == 3 ) { arr [ i -- ] = 0 ; carry = 1 ; } ter = ( int ) ( ter \/ base ) ; } if ( carry == 1 ) arr [ i ] = 1 ; } static int ternary ( int number ) { int ans = 0 , rem = 1 , base = 1 ; while ( number > 0 ) { rem = number % 3 ; ans = ans + rem * base ; number = ( int ) ( number \/ 3 ) ; base = base * 10 ; } return ans ; } public static void main ( String args [ ] ) { int number = 3056 ; int ter = ternary ( number ) ; Arrays . fill ( arr , 0 ) ; balTernary ( ter ) ; int i = 0 ; while ( arr [ i ] == 0 ) { i ++ ; } for ( int j = i ; j <= 32 ; j ++ ) { if ( arr [ j ] == - 1 ) System . out . print ( ' Z ' ) ; else System . out . print ( arr [ j ] ) ; } } }"],"bleu":0.14161852077420634,"rouge_l":0.3656343656343656}
{"id":847,"predictions":["import java . io . * ; import java . util . * ; class GFG { public static void main ( String [ ] args ) { String s = \" geeksforgeeks \" ; int n = s . length ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = s . charAt ( i ) ; a [ i ] = s . charAt ( i ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { System . out . print ( a [ i ] + \" \" ) ; } System . out . println ( ) ; } }"],"references":["import java . util . * ; class GFG { static class Node { int data ; Node left ; Node right ; Node ( int value ) { data = value ; left = null ; right = null ; } } ; static void specific_level_order_traversal ( Node root ) { Queue < Node > q = new LinkedList < > ( ) ; Stack < Vector < Integer > > s = new Stack < Vector < Integer > > ( ) ; q . add ( root ) ; int sz ; while ( q . size ( ) > 0 ) { Vector < Integer > v = new Vector < Integer > ( ) ; sz = q . size ( ) ; for ( int i = 0 ; i < sz ; ++ i ) { Node temp = q . peek ( ) ; q . remove ( ) ; v . add ( temp . data ) ; if ( temp . left != null ) q . add ( temp . left ) ; if ( temp . right != null ) q . add ( temp . right ) ; } s . push ( v ) ; } while ( s . size ( ) > 0 ) { Vector < Integer > v = s . peek ( ) ; s . pop ( ) ; for ( int i = 0 , j = v . size ( ) - 1 ; i < j ; ++ i ) { System . out . print ( v . get ( i ) + \" ▁ \" + v . get ( j ) + \" ▁ \" ) ; j -- ; } } System . out . println ( root . data ) ; } public static void main ( String args [ ] ) { Node root = new Node ( 1 ) ; root . left = new Node ( 2 ) ; root . right = new Node ( 3 ) ; System . out . println ( \" Specific ▁ Level ▁ Order ▁ traversal \" + \" ▁ of ▁ binary ▁ tree ▁ is \" ) ; specific_level_order_traversal ( root ) ; } }"],"bleu":0.08407795245536487,"rouge_l":0.30785370002835266}
{"id":848,"predictions":["import java . io . * ; import java . util . * ; class GFG { public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( n + \" \" + n ) ; } }"],"references":["class GFG { static int sum ( int h ) { return ( int ) Math . pow ( 2 , h - 1 ) ; } public static void main ( String [ ] args ) { int L = 3 ; System . out . println ( sum ( L ) ) ; } }"],"bleu":0.36888582849281976,"rouge_l":0.50259383582545}
{"id":849,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["import java . io . * ; class GFG { public static int countDivisors ( int N , int a , int b ) { int count1 = N \/ a ; int count2 = N \/ b ; int count3 = ( N \/ ( a * b ) ) ; return count1 + count2 - count3 ; } public static void main ( String [ ] args ) { int N = 1000 , a = 3 , b = 4 ; System . out . println ( countDivisors ( N , a , b ) ) ; } }"],"bleu":0.3455078829391075,"rouge_l":0.575672841663754}
{"id":850,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int number_cake ( int n ) { return ( n * n * n + 5 * n + 6 ) \/ 6 ; } public static void main ( String [ ] args ) { int n = 2 ; System . out . println ( number_cake ( n ) ) ; n = 8 ; System . out . println ( number_cake ( n ) ) ; n = 25 ; System . out . println ( number_cake ( n ) ) ; } }"],"bleu":0.4154392221283041,"rouge_l":0.5645012030353508}
{"id":851,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return true ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 10 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static final int MAX = 100000000 ; static boolean prime [ ] = new boolean [ MAX + 1 ] ; static void SieveOfEratosthenes ( ) { for ( int i = 0 ; i < prime . length ; i ++ ) { prime [ i ] = true ; } prime [ 1 ] = false ; for ( int p = 2 ; p * p <= MAX ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i <= MAX ; i += p ) { prime [ i ] = false ; } } } } static void find_Prime ( int sum ) { for ( int i = sum \/ 2 ; i > 1 ; i -- ) { if ( prime [ i ] && prime [ sum - i ] ) { System . out . println ( i + \" ▁ \" + ( sum - i ) ) ; return ; } } System . out . println ( \" Cannot ▁ be ▁ represented ▁ as ▁ sum ▁ of ▁ two ▁ primes \" ) ; } public static void main ( String [ ] args ) { SieveOfEratosthenes ( ) ; int sum = 1002 ; find_Prime ( sum ) ; } }"],"bleu":0.1303249645779425,"rouge_l":0.27029355652655546}
{"id":852,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { st = new StringTokenizer ( br . readLine ( ) ) ; a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } Arrays . sort ( a ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += a [ i ] ; } System . out . println ( sum ) ; } }"],"references":["import java . io . * ; class GFG { static void generateNumbers ( int factor [ ] , int n , int k ) { int next [ ] = new int [ k ] ; int output = 0 ; for ( int i = 0 ; i < n ; ) { int toincrement = 0 ; for ( int j = 0 ; j < k ; j ++ ) if ( next [ j ] < next [ toincrement ] ) toincrement = j ; if ( output != next [ toincrement ] ) { output = next [ toincrement ] ; System . out . print ( next [ toincrement ] + \" ▁ \" ) ; i ++ ; } next [ toincrement ] += factor [ toincrement ] ; } } public static void main ( String [ ] args ) { int factor [ ] = { 3 , 5 , 7 } ; int n = 10 ; int k = factor . length ; generateNumbers ( factor , n , k ) ; } }"],"bleu":0.2819851911282973,"rouge_l":0.36934011934011934}
{"id":853,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int sum ( int a [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += a [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 } ; int n = a . length ; System . out . println ( sum ( a , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static int lengthOfSmallestSubsequence ( int K , int [ ] v ) { Queue < Integer > pq = new PriorityQueue < Integer > ( Collections . reverseOrder ( ) ) ; for ( int i = 0 ; i < v . length ; i ++ ) { pq . add ( v [ i ] ) ; } int sum = 0 , count = 0 ; while ( ! pq . isEmpty ( ) && sum < K ) { sum += pq . peek ( ) ; pq . remove ( ) ; count ++ ; } if ( sum < K ) { return - 1 ; } return count ; } public static void main ( String [ ] args ) { int [ ] v = { 2 , 3 , 1 , 5 , 6 , 3 , 7 , 9 , 14 , 10 , 2 , 5 } ; int K = 35 ; System . out . print ( lengthOfSmallestSubsequence ( K , v ) ) ; } }"],"bleu":0.2838908154826214,"rouge_l":0.518484383000512}
{"id":854,"predictions":["import java . io . * ; import java . util . * ; class GFG { public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 ,"],"references":["import java . io . * ; class GFG { static int search ( int arr [ ] , int n , int x ) { int i = 0 ; while ( i < n ) { if ( arr [ i ] == x ) return i ; i = i + Math . abs ( arr [ i ] - x ) ; } System . out . println ( \" number ▁ is ▁ not \" + \" ▁ present ! \" ) ; return - 1 ; } public static void main ( String [ ] args ) { int arr [ ] = { 8 , 7 , 6 , 7 , 6 , 5 , 4 , 3 , 2 , 3 , 4 , 3 } ; int n = arr . length ; int x = 3 ; System . out . println ( \" Element ▁ \" + x + \" ▁ is ▁ present ▁ at ▁ index ▁ \" + search ( arr , n , 3 ) ) ; } }"],"bleu":0.07609583204991052,"rouge_l":0.14391318024536018}
{"id":855,"predictions":["import java . io . * ; class GFG { static boolean isPower ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) return false ; } return true ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = arr . length ; if ( isPower ( arr , n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . io . * ; class GFG { static boolean CheckArray ( int arr [ ] , int n ) { int prod = 1 ; for ( int i = 0 ; i < n ; ++ i ) prod *= arr [ i ] ; for ( int i = 0 ; i < n ; ++ i ) if ( arr [ i ] == prod \/ arr [ i ] ) return true ; return false ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 12 , 3 , 2 } ; int n = arr . length ; if ( CheckArray ( arr , n ) ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ; } }"],"bleu":0.6129162466371476,"rouge_l":0.7961422961422961}
{"id":856,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int countPairs ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ i ] > arr [ j ] ) count ++ ; } } return count ; } static int countPairs ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ i ] > arr [ j ] ) count ++ ; } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( countPairs ( arr , n ) ) ; } }"],"references":["public class Main { static int minRemove ( int arr [ ] , int n ) { int LIS [ ] = new int [ n ] ; int len = 0 ; for ( int i = 0 ; i < n ; i ++ ) LIS [ i ] = 1 ; for ( int i = 1 ; i < n ; i ++ ) { for ( int j = 0 ; j < i ; j ++ ) { if ( arr [ i ] > arr [ j ] && ( i - j ) <= ( arr [ i ] - arr [ j ] ) ) LIS [ i ] = Math . max ( LIS [ i ] , LIS [ j ] + 1 ) ; } len = Math . max ( len , LIS [ i ] ) ; } return n - len ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 6 , 5 , 4 } ; int n = arr . length ; System . out . println ( minRemove ( arr , n ) ) ; } }"],"bleu":0.5622633599045224,"rouge_l":0.6183718028696195}
{"id":857,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int count ( int a [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] > a [ i ] ) { count ++ ; } } return count ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 1 , 1 , 1 , 1 , 1 , 1 } ; int n = a . length ; System . out . println ( count ( a , n ) ) ; } }"],"references":["class GFG { static int charVal ( String s , int i ) { if ( s . charAt ( i ) == '0' ) { return 0 ; } else if ( s . charAt ( i ) == '1' ) { return 1 ; } else { return 2 ; } } static int countMinimalReplacements ( String s , int i , int prev , int dp [ ] [ ] , int n ) { if ( i == n ) { return 0 ; } if ( dp [ i ] [ prev ] != - 1 ) { return dp [ i ] [ prev ] ; } int val = charVal ( s , i ) ; int ans = Integer . MAX_VALUE ; if ( val == prev ) { val = 0 ; for ( int cur = 0 ; cur <= 2 ; cur ++ ) { if ( cur == prev ) { continue ; } val = 1 + countMinimalReplacements ( s , i + 1 , cur , dp , n ) ; ans = Math . min ( ans , val ) ; } } else { ans = countMinimalReplacements ( s , i + 1 , val , dp , n ) ; } return dp [ i ] [ val ] = ans ; } public static void main ( String [ ] args ) { String s = \"201220211\" ; int n = s . length ( ) ; int dp [ ] [ ] = new int [ n ] [ 3 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { dp [ i ] [ j ] = - 1 ; } } int val = charVal ( s , 0 ) ; System . out . println ( countMinimalReplacements ( s , 1 , val , dp , n ) ) ; } }"],"bleu":0.09261244925411774,"rouge_l":0.2926876079585439}
{"id":858,"predictions":["import java . io . * ; class GFG { static boolean isDivisible ( int a , int b ) { if ( a < b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; return false ; } public static void main ( String [ ] args ) { int a = 12 , b = 12 ; if ( isDivisible ( a , b ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; import java . lang . * ; import java . io . * ; class GFG { static float discountPercentage ( float S , float M ) { float discount = M - S ; float disPercent = ( discount \/ M ) * 100 ; return disPercent ; } public static void main ( String args [ ] ) { int M , S ; M = 120 ; S = 100 ; System . out . printf ( \" % .2f \" , discountPercentage ( S , M ) ) ; System . out . println ( \" % \" ) ; M = 1000 ; S = 500 ; System . out . printf ( \" % .2f \" , discountPercentage ( S , M ) ) ; System . out . println ( \" % \" ) ; } }"],"bleu":0.23928847086409955,"rouge_l":0.4752658916646056}
{"id":859,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["class GFG { static int sumOfSeries ( int n ) { return ( int ) ( 0.6172 * ( Math . pow ( 10 , n ) - 1 ) - 0.55 * n ) ; } public static void main ( String [ ] args ) { int n = 2 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"bleu":0.5432623419318157,"rouge_l":0.6687660368556101}
{"id":860,"predictions":["import java . io . * ; class GFG { static boolean check ( int a , int b ) { if ( a == b ) return true ; if ( a == b ) return false ; if ( a == b ) return true ; if ( a == b ) return false ; if ( a == b ) return false ; if ( a == b ) return false ; if ( a == b ) return false ; if ( a == b ) return false ; if ( a == b ) return false ; if ( a == b ) return false ; if ( a == b ) return false ; if ( a == b ) return true ; if ( check ( a , b ) ) return false ; return false ; } public static void main ( String [ ] args ) { int a = 12 , b = 12 ; if ( check ( a , b ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . io . * ; class GFG { static boolean Move ( int a , int x , int b ) { if ( ( ( ( b - a ) % x == 0 ) || ( ( b - a - 1 ) % x == 0 ) && a + 1 != b ) && b >= a ) return true ; return false ; } public static void main ( String [ ] args ) { int a = 3 , x = 2 , b = 7 ; if ( Move ( a , x , b ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.3783716566006747,"rouge_l":0.6294500051594262}
{"id":861,"predictions":["import java . io . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; return false ; } static boolean isPrime ( int n ) { if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 12 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . io . * ; class GFG { static int No_Of_Pairs ( int N ) { int i = 1 ; while ( ( i * i * i ) + ( 2 * i * i ) + i <= N ) i ++ ; return ( i - 1 ) ; } static void print_pairs ( int pairs ) { int i = 1 , mul ; for ( i = 1 ; i <= pairs ; i ++ ) { mul = i * ( i + 1 ) ; System . out . println ( \" Pair ▁ no . ▁ \" + i + \" ▁ - - > ▁ ( \" + ( mul * i ) + \" , ▁ \" + mul * ( i + 1 ) + \" ) \" ) ; } } public static void main ( String [ ] args ) { int N = 500 , pairs , mul , i = 1 ; pairs = No_Of_Pairs ( N ) ; System . out . println ( \" No . ▁ of ▁ pairs ▁ = ▁ \" + pairs ) ; print_pairs ( pairs ) ; } }"],"bleu":0.21539454965912083,"rouge_l":0.4055555555555556}
{"id":862,"predictions":["import java . io . * ; import java . util . * ; import java . lang . * ; import java . math . * ; class GFG { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { ans += i ; } System . out . println ( ans ) ; } }"],"references":["class GFG { static int power ( int x , int a ) { int res = 1 ; while ( a > 0 ) { if ( ( a & 1 ) > 0 ) res = res * x ; x = x * x ; a >>= 1 ; } return res ; } static int breakInteger ( int N ) { if ( N == 2 ) return 1 ; if ( N == 3 ) return 2 ; int maxProduct = - 1 ; switch ( N % 3 ) { case 0 : maxProduct = power ( 3 , N \/ 3 ) ; break ; case 1 : maxProduct = 2 * 2 * power ( 3 , ( N \/ 3 ) - 1 ) ; break ; case 2 : maxProduct = 2 * power ( 3 , N \/ 3 ) ; break ; } return maxProduct ; } public static void main ( String [ ] args ) { int maxProduct = breakInteger ( 10 ) ; System . out . println ( maxProduct ) ; } }"],"bleu":0.10062385781187776,"rouge_l":0.2438945320942295}
{"id":863,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int findSum ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } static int findSum ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( findSum ( n ) ) ; } }"],"references":["import java . io . * ; class GFG { static void printTrib ( int n ) { int dp [ ] = new int [ n ] ; dp [ 0 ] = dp [ 1 ] = 0 ; dp [ 2 ] = 1 ; for ( int i = 3 ; i < n ; i ++ ) dp [ i ] = dp [ i - 1 ] + dp [ i - 2 ] + dp [ i - 3 ] ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( dp [ i ] + \" ▁ \" ) ; } public static void main ( String args [ ] ) { int n = 10 ; printTrib ( n ) ; } }"],"bleu":0.3747301741277656,"rouge_l":0.5388826676620629}
{"id":864,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int findCount ( int d ) { return 9 * ( ( int ) ( Math . pow ( 10 , d - 1 ) ) - ( int ) ( Math . pow ( 9 , d - 1 ) ) ) ; } public static void main ( String args [ ] ) { int d = 1 ; System . out . println ( findCount ( d ) ) ; d = 2 ; System . out . println ( findCount ( d ) ) ; d = 4 ; System . out . println ( findCount ( d ) ) ; } }"],"bleu":0.26497286440858203,"rouge_l":0.46490949507780244}
{"id":865,"predictions":["import java . io . * ; import java . util . * ; import java . lang . * ; import java . math . * ; import java . text . * ; public class Main { public static void main ( String [ ] args ) throws java . lang . Exception { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int N = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; System . out . println ( N * M ) ; } }"],"references":["class GFG { static float Conversion ( float n ) { return ( n - 32.0f ) * 5.0f \/ 9.0f ; } public static void main ( String [ ] args ) { float n = 40 ; System . out . println ( Conversion ( n ) ) ; } }"],"bleu":0.15815155190899524,"rouge_l":0.3030001986886549}
{"id":866,"predictions":["import java . util . * ; class GFG { static boolean isVowel ( String str ) { int len = str . length ( ) ; for ( int i = 0 ; i < len ; i ++ ) { if ( str . charAt ( i ) == str . charAt ( i ) ) return false ; if ( str . charAt ( i ) == str . charAt ( len - 1 ) ) return false ; if ( str . charAt ( i ) == str . charAt ( len - 1 ) ) return false ; if ( str . charAt ( len - 1 ) == str . charAt ( len - 1 ) ) return false ; if ( str . charAt ( len - 1 ) == str . charAt ( len - 1 ) ) return false ; if ( str . charAt ( len - 1 ) == str . charAt ( len - 1 ) ) return false ; if ( str . charAt ( len - 1 ) == str . charAt ( len - 1 ) return false ; if ( str . charAt ( len - 1 ) == str . charAt ( len - 1 ) ) return false ; if ( str . charAt ( len - 1 ) == str . charAt ( len - 1 ) return false ; return false ; return false ; } public static void main ( String [ ] args ) { String str = \" geeksforgeeksforgeeks \" ; if ( isVowel ( str ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["public class PalinPath { public static boolean isPalin ( String str ) { int len = str . length ( ) \/ 2 ; for ( int i = 0 ; i < len ; i ++ ) { if ( str . charAt ( i ) != str . charAt ( str . length ( ) - i - 1 ) ) return false ; } return true ; } public static void palindromicPath ( String str , char a [ ] [ ] , int i , int j , int m , int n ) { if ( j < m - 1 || i < n - 1 ) { if ( i < n - 1 ) palindromicPath ( str + a [ i ] [ j ] , a , i + 1 , j , m , n ) ; if ( j < m - 1 ) palindromicPath ( str + a [ i ] [ j ] , a , i , j + 1 , m , n ) ; } else { str = str + a [ n - 1 ] [ m - 1 ] ; if ( isPalin ( str ) ) System . out . println ( str ) ; } } public static void main ( String args [ ] ) { char arr [ ] [ ] = { { ' a ' , ' a ' , ' a ' , ' b ' } , { ' b ' , ' a ' , ' a ' , ' a ' } , { ' a ' , ' b ' , ' b ' , ' a ' } } ; String str = \" \" ; palindromicPath ( str , arr , 0 , 0 , 4 , 3 ) ; } }"],"bleu":0.26221547767367087,"rouge_l":0.40766680923866555}
{"id":867,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isDivisible ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = arr . length ; if ( isDivisible ( arr , n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; class GFG { static int max_element ( int a [ ] ) { int m = a [ 0 ] ; for ( int i = 0 ; i < a . length ; i ++ ) m = Math . max ( a [ i ] , m ) ; return m ; } static boolean checkDivisors ( int a [ ] , int n ) { int X = max_element ( a ) ; Vector < Integer > b = new Vector < Integer > ( ) ; for ( int i = 1 ; i * i <= X ; i ++ ) { if ( X % i == 0 ) { b . add ( i ) ; if ( X \/ i != i ) b . add ( X \/ i ) ; } } if ( b . size ( ) != n ) return false ; Arrays . sort ( a ) ; Collections . sort ( b ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( b . get ( i ) != a [ i ] ) return false ; } return true ; } public static void main ( String args [ ] ) { int arr [ ] = { 8 , 1 , 2 , 12 , 48 , 6 , 4 , 24 , 16 , 3 } ; int N = arr . length ; if ( checkDivisors ( arr , N ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.3121122284354249,"rouge_l":0.5569080949482654}
{"id":868,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["import java . io . * ; import java . util . * ; class GFG { static void printAllAPTriplets ( int [ ] arr , int n ) { ArrayList < Integer > s = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < n - 1 ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { int diff = arr [ j ] - arr [ i ] ; boolean exists = s . contains ( arr [ i ] - diff ) ; if ( exists ) System . out . println ( arr [ i ] - diff + \" ▁ \" + arr [ i ] + \" ▁ \" + arr [ j ] ) ; } s . add ( arr [ i ] ) ; } } public static void main ( String args [ ] ) { int [ ] arr = { 2 , 6 , 9 , 12 , 17 , 22 , 31 , 32 , 35 , 42 } ; int n = arr . length ; printAllAPTriplets ( arr , n ) ; } }"],"bleu":0.3500458488293388,"rouge_l":0.5481251080006913}
{"id":869,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int countPairs ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 1 , 1 , 1 } ; int n = arr . length ; System . out . println ( countPairs ( arr , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static boolean isPowerOfTwo ( int x ) { if ( x == 0 ) return false ; if ( ( x & ( x - 1 ) ) == 0 ) return true ; else return false ; } static int countNum ( int a [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( isPowerOfTwo ( a [ i ] ) || isPowerOfTwo ( a [ i ] + 1 ) ) count ++ ; } return count ; } public static void main ( String args [ ] ) { int arr [ ] = { 5 , 6 , 9 , 3 , 1 } ; int n = arr . length ; System . out . println ( countNum ( arr , n ) ) ; } }"],"bleu":0.5146110046564988,"rouge_l":0.6934970441109595}
{"id":870,"predictions":["import java . io . * ; class GFG { static float area ( float a , float b ) { if ( a * b < 0 ) return - 1 ; return area ; } public static void main ( String [ ] args ) { float a = 5 , b = 5 ; System . out . println ( area ( a , b ) ) ; } }"],"references":["class GFG { static float pi = 3.14159f ; static float volume ( float r ) { float vol ; vol = ( ( float ) 4 \/ ( float ) 3 ) * ( pi * r * r * r ) ; return vol ; } static float surface_area ( float r ) { float sur_ar ; sur_ar = 4 * pi * r * r ; return sur_ar ; } public static void main ( String [ ] args ) { float radius = 12 ; float vol , sur_area ; vol = volume ( radius ) ; sur_area = surface_area ( radius ) ; System . out . println ( \" Volume ▁ Of ▁ Sphere ▁ : \" + vol ) ; System . out . println ( \" Surface ▁ Area ▁ Of ▁ Sphere ▁ : \" + sur_area ) ; } }"],"bleu":0.13737744055427964,"rouge_l":0.37148788927335635}
{"id":871,"predictions":["import java . io . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 12 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["public class Test { public static void main ( String [ ] args ) { System . out . println ( isPower ( 10 , 1 ) ? \" True \" : \" False \" ) ; System . out . println ( isPower ( 1 , 20 ) ? \" True \" : \" False \" ) ; System . out . println ( isPower ( 2 , 128 ) ? \" True \" : \" False \" ) ; System . out . println ( isPower ( 2 , 30 ) ? \" True \" : \" False \" ) ; } public static boolean isPower ( int x , int y ) { if ( x == 1 ) return ( y == 1 ) ; int pow = 1 ; while ( pow < y ) pow = pow * x ; return ( pow == y ) ; } }"],"bleu":0.21900616102581066,"rouge_l":0.29960022844089096}
{"id":872,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int maxSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }"],"references":["class GFG { static int getSum ( int [ ] BITree , int index ) { int sum = 0 ; while ( index > 0 ) { sum += BITree [ index ] ; index -= index & ( - index ) ; } return sum ; } static void updateBIT ( int [ ] BITree , int n , int index , int val ) { while ( index <= n ) { BITree [ index ] += val ; index += index & ( - index ) ; } } static int getInvCount ( int [ ] arr , int n ) { int invcount = 0 ; int maxElement = 0 ; for ( int i = 0 ; i < n ; i ++ ) if ( maxElement < arr [ i ] ) maxElement = arr [ i ] ; int [ ] BIT = new int [ maxElement + 1 ] ; for ( int i = 1 ; i <= maxElement ; i ++ ) BIT [ i ] = 0 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { invcount += getSum ( BIT , arr [ i ] - 1 ) ; updateBIT ( BIT , maxElement , arr [ i ] , 1 ) ; } return invcount ; } public static void main ( String [ ] args ) { int [ ] arr = { 8 , 4 , 2 , 1 } ; int n = arr . length ; System . out . println ( \" Number ▁ of ▁ inversions ▁ are ▁ : ▁ \" + getInvCount ( arr , n ) ) ; } }"],"bleu":0.19492342505081034,"rouge_l":0.4444524599624874}
{"id":873,"predictions":["import java . io . * ; class GFG { static int findSum ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( findSum ( n ) ) ; } }"],"references":["import java . lang . * ; class GFG { static int calSum ( int n ) { int a = 3 , b = 0 , c = 2 ; if ( n == 0 ) return 3 ; if ( n == 1 ) return 3 ; if ( n == 2 ) return 5 ; int sum = 5 ; while ( n > 2 ) { int d = a + b ; sum += d ; a = b ; b = c ; c = d ; n -- ; } return sum ; } public static void main ( String [ ] args ) { int n = 9 ; System . out . print ( calSum ( n ) ) ; } }"],"bleu":0.2744661694382129,"rouge_l":0.5553026854802002}
{"id":874,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int count ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ i ] < arr [ j ] ) { count ++ ; } } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( count ( arr , n ) ) ; } }"],"references":["class GFG { static int steps ( int cur , int x , int n ) { if ( x == 0 ) return Integer . MAX_VALUE ; if ( x > 0 ) return Math . abs ( ( n - cur ) \/ x ) ; else return Math . abs ( ( cur - 1 ) \/ x ) ; } static int countSteps ( int curx , int cury , int n , int m , int [ ] [ ] moves ) { int count = 0 ; int k = moves . length ; for ( int i = 0 ; i < k ; i ++ ) { int x = moves [ i ] [ 0 ] ; int y = moves [ i ] [ 1 ] ; int stepct = Math . min ( steps ( curx , x , n ) , steps ( cury , y , m ) ) ; count += stepct ; curx += stepct * x ; cury += stepct * y ; } return count ; } public static void main ( String [ ] args ) { int n = 4 , m = 5 , x = 1 , y = 1 ; int [ ] [ ] moves = { { 1 , 1 } , { 1 , 1 } , { 0 , - 2 } } ; System . out . print ( countSteps ( x , y , n , m , moves ) ) ; } }"],"bleu":0.18995245108839032,"rouge_l":0.40958555221116}
{"id":875,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 3 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static int SUM ( int n , int m ) { if ( m == 1 ) return ( n * ( n + 1 ) \/ 2 ) ; int sum = SUM ( n , m - 1 ) ; return ( sum * ( sum + 1 ) \/ 2 ) ; } public static void main ( String [ ] args ) { int n = 5 ; int m = 3 ; System . out . println ( \" SUM ( \" + n + \" , ▁ \" + m + \" ) : ▁ \" + SUM ( n , m ) ) ; } }"],"bleu":0.30832747898780927,"rouge_l":0.49132064990973473}
{"id":876,"predictions":["import java . util . * ; class GFG { static boolean isVowel ( String s ) { for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i ) ) return false ; } return true ; } public static void main ( String [ ] args ) { String s = \" geeksforgeeksforgeeks \" ; if ( isVowel ( s ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; class Initials { public static void printInitials ( String str ) { int len = str . length ( ) ; str = str . trim ( ) ; String t = \" \" ; for ( int i = 0 ; i < len ; i ++ ) { char ch = str . charAt ( i ) ; if ( ch != ' ▁ ' ) { t = t + ch ; } else { System . out . print ( Character . toUpperCase ( t . charAt ( 0 ) ) + \" . ▁ \" ) ; t = \" \" ; } } String temp = \" \" ; for ( int j = 0 ; j < t . length ( ) ; j ++ ) { if ( j == 0 ) temp = temp + Character . toUpperCase ( t . charAt ( 0 ) ) ; else temp = temp + Character . toLowerCase ( t . charAt ( j ) ) ; } System . out . println ( temp ) ; } public static void main ( String [ ] args ) { String str = \" ishita ▁ bhuiya \" ; printInitials ( str ) ; } }"],"bleu":0.19947493584697643,"rouge_l":0.39047350089428606}
{"id":877,"predictions":["import java . io . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return true ; if ( isPrime ( isPrime ( n ) ) ) return false ; if ( isPrime ( isPrime ( n ) ) ) return false ; if ( isPrime ( isPrime ( n ) ) ) return false ; if ( isPrime ( isPrime ( n ) ) ) System . out . println ( \" Yes \" ) ; else if ( isPrime ( n ) ) System . out . println ( \" No \" ) ; else System . out . println ( \" No \" ) ; } public static void main ( String [ ] args ) { int n = 12 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; } }"],"references":["class IsDivisible { static boolean check ( String str ) { int n = str . length ( ) ; if ( n == 0 ) return false ; if ( n == 1 ) return ( ( str . charAt ( 0 ) - '0' ) % 8 == 0 ) ; if ( n == 2 ) return ( ( ( str . charAt ( n - 2 ) - '0' ) * 10 + ( str . charAt ( n - 1 ) - '0' ) ) % 8 == 0 ) ; int last = str . charAt ( n - 1 ) - '0' ; int second_last = str . charAt ( n - 2 ) - '0' ; int third_last = str . charAt ( n - 3 ) - '0' ; return ( ( third_last * 100 + second_last * 10 + last ) % 8 == 0 ) ; } public static void main ( String [ ] args ) { String str = \"76952\" ; if ( check ( str ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.2035593723558442,"rouge_l":0.38925717117898523}
{"id":878,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( arr [ i ] + \" \" ) ; } } }"],"references":["import java . io . * ; class GfG { static Boolean check ( int n ) { int d = ( int ) Math . sqrt ( n ) ; if ( d * d == n ) return true ; return false ; } static int largestNonPerfectSquareNumber ( int a [ ] , int n ) { int maxi = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( ! check ( a [ i ] ) ) maxi = Math . max ( a [ i ] , maxi ) ; } return maxi ; } public static void main ( String [ ] args ) { int a [ ] = { 16 , 20 , 25 , 2 , 3 , 10 } ; int n = a . length ; System . out . println ( largestNonPerfectSquareNumber ( a , n ) ) ; } }"],"bleu":0.2594043769736855,"rouge_l":0.42018058270501724}
{"id":879,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int findValueAtX ( int n ) { return ( n * n * n ) + n ; } public static void main ( String [ ] args ) { System . out . println ( findValueAtX ( 10 ) ) ; System . out . println ( findValueAtX ( 2 ) ) ; } }"],"bleu":0.5004943073206701,"rouge_l":0.6687660368556101}
{"id":880,"predictions":["import java . io . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 12 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["public class GFG { static boolean isPrime ( int n ) { if ( n <= 1 ) return false ; if ( n <= 3 ) return true ; if ( n % 2 == 0 || n % 3 == 0 ) return false ; for ( int i = 5 ; i * i <= n ; i = i + 6 ) if ( n % i == 0 || n % ( i + 2 ) == 0 ) return false ; return true ; } static boolean isThreeDisctFactors ( long n ) { int sq = ( int ) Math . sqrt ( n ) ; if ( 1L * sq * sq != n ) return false ; return isPrime ( sq ) ? true : false ; } public static void main ( String [ ] args ) { long num = 9 ; if ( isThreeDisctFactors ( num ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; num = 15 ; if ( isThreeDisctFactors ( num ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; num = 12397923568441L ; if ( isThreeDisctFactors ( num ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.32505758443709504,"rouge_l":0.5076735130182484}
{"id":881,"predictions":["import java . io . * ; class GFG { static int maxSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int maxPartitions ( int arr [ ] , int n ) { int ans = 0 , max_so_far = 0 ; for ( int i = 0 ; i < n ; ++ i ) { max_so_far = Math . max ( max_so_far , arr [ i ] ) ; if ( max_so_far == i ) ans ++ ; } return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 0 , 2 , 3 , 4 } ; int n = arr . length ; System . out . println ( maxPartitions ( arr , n ) ) ; } }"],"bleu":0.6469375133319482,"rouge_l":0.8092868988391376}
{"id":882,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int count ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( count ( arr , n ) ) ; } }"],"references":["class GFG { static void greaterK ( int n , int k ) { int [ ] p = new int [ String . valueOf ( n ) . length ( ) + 2 ] ; int index = 0 ; int x = n ; while ( x > 0 ) { p [ index ] = ( int ) ( x % k ) ; x \/= k ; index ++ ; } int idx = 0 ; for ( int i = 0 ; i < p . length - 1 ; ++ i ) { if ( p [ i ] >= 2 ) { p [ i ] = 0 ; p [ i + 1 ] ++ ; for ( int j = idx ; j < i ; ++ j ) { p [ j ] = 0 ; } idx = i + 1 ; } if ( p [ i ] == k ) { p [ i ] = 0 ; p [ i + 1 ] ++ ; } } int j = p . length - 1 ; if ( p [ j ] >= 2 ) { p [ index ] = 1 ; index ++ ; } int ans = 0 ; for ( int i = p . length - 1 ; i >= 0 ; -- i ) { ans = ans * k + p [ i ] ; } System . out . print ( ans + \" \\n \" ) ; } public static void main ( String [ ] args ) { int n = 29 , k = 7 ; greaterK ( n , k ) ; } }"],"bleu":0.09671950792536535,"rouge_l":0.31653076352853965}
{"id":883,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPower ( String s ) { int n = s . length ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i ) ) count ++ ; } return count ; } public static void main ( String [ ] args ) { String s = \" geeksforgeeksforgeeks \" ; if ( isPower ( s ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static int longestPrefixSuffix ( String s ) { int n = s . length ( ) ; int lps [ ] = new int [ n ] ; lps [ 0 ] = 0 ; int len = 0 ; int i = 1 ; while ( i < n ) { if ( s . charAt ( i ) == s . charAt ( len ) ) { len ++ ; lps [ i ] = len ; i ++ ; } else { if ( len != 0 ) { len = lps [ len - 1 ] ; } else { lps [ i ] = 0 ; i ++ ; } } } int res = lps [ n - 1 ] ; return ( res > n \/ 2 ) ? n \/ 2 : res ; } public static void main ( String [ ] args ) { String s = \" abcab \" ; System . out . println ( longestPrefixSuffix ( s ) ) ; } }"],"bleu":0.3558546206183937,"rouge_l":0.507910074937552}
{"id":884,"predictions":["import java . util . * ; class GFG { static boolean isVowel ( String s ) { int n = s . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i ) ) return false ; } return true ; } public static void main ( String [ ] args ) { String s = \" geeksforgeeksforgeeks \" ; if ( isVowel ( s ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . io . * ; import java . util . * ; class GFG { static void printBracketNumber ( String exp , int n ) { int left_bnum = 1 ; Stack < Integer > right_bnum = new Stack < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( exp . charAt ( i ) == ' ( ' ) { System . out . print ( left_bnum + \" ▁ \" ) ; right_bnum . push ( left_bnum ) ; left_bnum ++ ; } else if ( exp . charAt ( i ) == ' ) ' ) { System . out . print ( right_bnum . peek ( ) + \" ▁ \" ) ; right_bnum . pop ( ) ; } } } public static void main ( String args [ ] ) { String exp = \" ( a + ( b * c ) ) + ( d \/ e ) \" ; int n = exp . length ( ) ; printBracketNumber ( exp , n ) ; } }"],"bleu":0.2837709912168141,"rouge_l":0.4867021276595745}
{"id":885,"predictions":["import java . io . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 10 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; class GFG { static int N = ( int ) 1E6 ; static boolean [ ] fourDiv = new boolean [ N + 1 ] ; static void fourDistinctFactors ( ) { boolean [ ] primeAll = new boolean [ N + 1 ] ; for ( int p = 2 ; p * p <= N ; p ++ ) { if ( primeAll [ p ] == false ) { for ( int i = p * 2 ; i <= N ; i += p ) primeAll [ i ] = true ; } } ArrayList < Integer > prime = new ArrayList < Integer > ( ) ; for ( int p = 2 ; p <= N ; p ++ ) if ( ! primeAll [ p ] ) prime . add ( p ) ; for ( int i = 0 ; i < prime . size ( ) ; ++ i ) { int p = prime . get ( i ) ; if ( 1L * p * p * p <= N ) fourDiv [ p * p * p ] = true ; for ( int j = i + 1 ; j < prime . size ( ) ; ++ j ) { int q = prime . get ( j ) ; if ( 1L * p * q > N ) break ; fourDiv [ p * q ] = true ; } } } public static void main ( String [ ] args ) { fourDistinctFactors ( ) ; int num = 10 ; if ( fourDiv [ num ] ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; num = 12 ; if ( fourDiv [ num ] ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.16432352949133236,"rouge_l":0.36529009660471157}
{"id":886,"predictions":["import java . io . * ; import java . util . * ; class GFG { public static void main ( String [ ] args ) { int N = 3 ; System . out . println ( N + \" \" + N + \" \\n \" ) ; } }"],"references":["import java . io . * ; class GFG { static final int N = 3 ; static void scalarProductMat ( int mat [ ] [ ] , int k ) { for ( int i = 0 ; i < N ; i ++ ) for ( int j = 0 ; j < N ; j ++ ) mat [ i ] [ j ] = mat [ i ] [ j ] * k ; } public static void main ( String [ ] args ) { int mat [ ] [ ] = { { 1 , 2 , 3 } , { 4 , 5 , 6 } , { 7 , 8 , 9 } } ; int k = 4 ; scalarProductMat ( mat , k ) ; System . out . println ( \" Scalar ▁ Product ▁ Matrix ▁ is ▁ : ▁ \" ) ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < N ; j ++ ) System . out . print ( mat [ i ] [ j ] + \" ▁ \" ) ; System . out . println ( ) ; } } }"],"bleu":0.030506076473628144,"rouge_l":0.27699634511020044}
{"id":887,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; String s = sc . next ( ) ; System . out . println ( s . substring ( 0 , 1 ) . substring ( 1 ) . toLowerCase ( ) ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["class GFG { public static void main ( String [ ] args ) { StringBuilder str = new StringBuilder ( \" geeksforgeeks \" ) ; str . reverse ( ) ; System . out . println ( str ) ; } }"],"bleu":0.10444632041171335,"rouge_l":0.27624536846438863}
{"id":888,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { System . out . print ( arr [ i ] + \" \" ) ; } System . out . println ( ) ; } } }"],"references":["import java . util . * ; class GFG { public static int countDistinct ( int arr [ ] , int n ) { HashSet < Integer > hs = new HashSet < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { hs . add ( arr [ i ] ) ; } return hs . size ( ) ; } public static void main ( String [ ] args ) { int arr [ ] = new int [ ] { 6 , 10 , 5 , 4 , 9 , 120 , 4 , 6 , 10 } ; System . out . println ( countDistinct ( arr , arr . length ) ) ; } }"],"bleu":0.40147616230012373,"rouge_l":0.47415175817396665}
{"id":889,"predictions":["import java . util . * ; class GFG { static boolean isVowel ( String s ) { int count = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i ) ) count ++ ; } return count ; } public static void main ( String [ ] args ) { String s = \" geeksforgeeksforgeeks \" ; if ( isVowel ( s ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["public class Test { static int x = 32 ; static String toggleCase ( char [ ] a ) { for ( int i = 0 ; i < a . length ; i ++ ) { a [ i ] ^= 32 ; } return new String ( a ) ; } public static void main ( String [ ] args ) { String str = \" CheRrY \" ; System . out . print ( \" Toggle ▁ case : ▁ \" ) ; str = toggleCase ( str . toCharArray ( ) ) ; System . out . println ( str ) ; System . out . print ( \" Original ▁ string : ▁ \" ) ; str = toggleCase ( str . toCharArray ( ) ) ; System . out . println ( str ) ; } }"],"bleu":0.3195070801512267,"rouge_l":0.5154075546719682}
{"id":890,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return true ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( isPrime ( n \/ 2 ) ) ) return false ; if ( isPrime ( isPrime ( n \/ 2 ) ) ) return false ; if ( isPrime ( isPrime ( n \/ 2 ) ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } public static void main ( String [ ] args ) { int n = 12 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; class GFG { static final int MAX = 1000000 ; static Vector < Integer > arr = new Vector < Integer > ( ) ; static boolean [ ] prime = new boolean [ MAX ] ; static void SieveOfEratosthenes ( ) { for ( int i = 0 ; i < MAX ; i ++ ) prime [ i ] = true ; for ( int p = 2 ; p * p < MAX ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i < MAX ; i += p ) prime [ i ] = false ; } } for ( int p = 2 ; p < MAX ; p ++ ) if ( prime [ p ] ) arr . add ( p ) ; } static boolean isPrimorialPrime ( int n ) { if ( ! prime [ n ] ) return false ; long product = 1 ; int i = 0 ; while ( product < n ) { product = product * arr . get ( i ) ; if ( product + 1 == n || product - 1 == n ) return true ; i ++ ; } return false ; } public static void main ( String [ ] args ) { SieveOfEratosthenes ( ) ; int n = 31 ; if ( isPrimorialPrime ( n ) ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ; } }"],"bleu":0.15746296832203435,"rouge_l":0.3634558093346574}
{"id":891,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { ans += i ; } out . println ( ans ) ; out . close ( ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["class GFG { static int countNumbers ( int X , int Y , int N ) { int count = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { if ( ( i % X == 0 ) && ( i % Y != 0 ) ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int X = 2 , Y = 3 , N = 10 ; System . out . println ( countNumbers ( X , Y , N ) ) ; } }"],"bleu":0.1348317804050027,"rouge_l":0.2869238005644403}
{"id":892,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( arr [ i ] + \" \" ) ; } } }"],"references":["import java . util . HashMap ; class geeks { public static long countSubseq ( int [ ] arr , int n ) { HashMap < Integer , Integer > um = new HashMap < > ( ) ; long count = 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( um . get ( arr [ i ] ) != null ) { int a = um . get ( arr [ i ] ) ; um . put ( arr [ i ] , ++ a ) ; } else um . put ( arr [ i ] , 1 ) ; } for ( HashMap . Entry < Integer , Integer > entry : um . entrySet ( ) ) { count *= entry . getValue ( ) ; } return count ; } public static void main ( String [ ] args ) { int [ ] arr = { 4 , 7 , 6 , 7 } ; int n = arr . length ; System . out . println ( \" Count ▁ = ▁ \" + countSubseq ( arr , n ) ) ; } }"],"bleu":0.31414664470000914,"rouge_l":0.39555117787080357}
{"id":893,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["class GFG { static boolean check ( long a , long b ) { long c = 0 ; while ( a != 0 ) { c = c + a % 10 ; a = a \/ 10 ; } return ( c == b ) ; } static long root ( long n ) { boolean found = false ; long mx = ( long ) 1E18 ; for ( long i = 0 ; i <= 90 ; i ++ ) { long s = i * i + 4 * n ; long sq = ( long ) Math . sqrt ( s ) ; if ( sq * sq == s && check ( ( sq - i ) \/ 2 , i ) ) { found = true ; mx = Math . min ( mx , ( sq - i ) \/ 2 ) ; } } if ( found ) return mx ; else return - 1 ; } public static void main ( String [ ] args ) { long n = 110 ; System . out . println ( root ( n ) ) ; } }"],"bleu":0.17668583904877508,"rouge_l":0.4080063891384646}
{"id":894,"predictions":["import java . io . * ; class GFG { static boolean isPower ( int a , int b ) { if ( a < b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; return false ; } public static void main ( String [ ] args ) { int a = 5 , b = 5 , c = 5 ; if ( isPower ( a , b , c ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . io . * ; import java . util . * ; class Fraction { int num , den ; Fraction ( int n , int d ) { num = n ; den = d ; } static Fraction maxFraction ( Fraction first , Fraction sec ) { int a = first . num ; int b = first . den ; int c = sec . num ; int d = sec . den ; int Y = a * d - b * c ; return ( Y > 0 ) ? first : sec ; } public static void main ( String [ ] args ) { Fraction first = new Fraction ( 3 , 2 ) ; Fraction sec = new Fraction ( 3 , 4 ) ; Fraction res = maxFraction ( first , sec ) ; System . out . println ( res . num + \" \/ \" + res . den ) ; } }"],"bleu":0.217992439507566,"rouge_l":0.40016929425457626}
{"id":895,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int countPairs ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( countPairs ( arr , n ) ) ; } }"],"references":["class GFG { static void Permutation ( int n , int k ) { int [ ] p = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) p [ i ] = i ; for ( int i = 1 ; i < n - k ; i ++ ) p [ i + 1 ] = i ; p [ 1 ] = n - k ; for ( int i = 1 ; i <= n ; i ++ ) System . out . print ( p [ i ] + \" ▁ \" ) ; } public static void main ( String [ ] args ) { int n = 5 , k = 2 ; Permutation ( n , k ) ; } }"],"bleu":0.2731207204729919,"rouge_l":0.4110512129380054}
{"id":896,"predictions":["import java . io . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return true ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 10 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else if ( isPrime ( n ) ) System . out . println ( \" No \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . Arrays ; class GFG { static int reverse ( int x ) { int rev = 0 ; while ( x > 0 ) { rev = ( rev * 10 ) + x % 10 ; x = x \/ 10 ; } return rev ; } static void printEmirp ( int n ) { boolean prime [ ] = new boolean [ n + 1 ] ; Arrays . fill ( prime , true ) ; for ( int p = 2 ; p * p <= n ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i <= n ; i += p ) prime [ i ] = false ; } } for ( int p = 2 ; p <= n ; p ++ ) { if ( prime [ p ] ) { int rev = reverse ( p ) ; if ( p != rev && rev <= n && prime [ rev ] ) { System . out . print ( p + \" ▁ \" + rev + \" ▁ \" ) ; prime [ rev ] = false ; } } } } public static void main ( String [ ] args ) { int n = 100 ; printEmirp ( n ) ; } }"],"bleu":0.14605264946315508,"rouge_l":0.3458843017329256}
{"id":897,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; System . out . println ( arr [ n - 1 ] ) ; } }"],"references":["import java . io . * ; import java . util . * ; class GFG { static int largest ( int [ ] arr , int n ) { Arrays . sort ( arr ) ; return arr [ n - 1 ] ; } static public void main ( String [ ] args ) { int [ ] arr = { 10 , 324 , 45 , 90 , 9808 } ; int n = arr . length ; System . out . println ( largest ( arr , n ) ) ; } }"],"bleu":0.4079044773082838,"rouge_l":0.4524476677105653}
{"id":898,"predictions":["import java . io . * ; import java . util . * ; import java . lang . * ; class GFG { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; b [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { System . out . print ( a [ i ] + \" \" ) ; } System . out . println ( ) ; } }"],"references":["import java . util . * ; class GFG { static class Node { int data ; Node left , right ; } ; static int maxLevelProduct ( Node root ) { if ( root == null ) return 0 ; int result = root . data ; Queue < Node > q = new LinkedList < > ( ) ; q . add ( root ) ; while ( q . size ( ) > 0 ) { int count = q . size ( ) ; int product = 1 ; while ( count -- > 0 ) { Node temp = q . peek ( ) ; q . remove ( ) ; product = product * temp . data ; if ( temp . left != null ) q . add ( temp . left ) ; if ( temp . right != null ) q . add ( temp . right ) ; } result = Math . max ( product , result ) ; } return result ; } static Node newNode ( int data ) { Node node = new Node ( ) ; node . data = data ; node . left = node . right = null ; return ( node ) ; } public static void main ( String args [ ] ) { Node root = newNode ( 1 ) ; root . left = newNode ( 2 ) ; root . right = newNode ( 3 ) ; root . left . left = newNode ( 4 ) ; root . left . right = newNode ( 5 ) ; root . right . right = newNode ( 8 ) ; root . right . right . left = newNode ( 6 ) ; root . right . right . right = newNode ( 7 ) ; System . out . print ( \" Maximum ▁ level ▁ product ▁ is ▁ \" + maxLevelProduct ( root ) ) ; } }"],"bleu":0.10176995893283353,"rouge_l":0.29109225874867445}
{"id":899,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int n = Integer . parseInt ( br . readLine ( ) ) ; String s = br . readLine ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == '0' ) { count ++ ; } } System . out . println ( count ) ; } }"],"references":["import java . util . * ; class GFG { static int fact ( int n ) { int fact = 1 ; for ( int i = 1 ; i <= n ; i ++ ) fact *= i ; return fact ; } static int countStrings ( String str , int n ) { Set < Character > distinct_char = new HashSet < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { distinct_char . add ( str . charAt ( i ) ) ; } return fact ( distinct_char . size ( ) ) ; } public static void main ( String [ ] args ) { String str = \" geeksforgeeks \" ; int n = str . length ( ) ; System . out . println ( countStrings ( str , n ) ) ; } }"],"bleu":0.3272549153341902,"rouge_l":0.43045090300203326}
{"id":900,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int sum ( int a [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += a [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 } ; int n = a . length ; System . out . println ( sum ( a , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static void printMaxValPair ( Vector < Long > v , int n ) { Collections . sort ( v ) ; long N = v . get ( ( int ) n - 1 ) ; if ( N % 2 == 1 ) { long first_maxima = N \/ 2 ; long second_maxima = first_maxima + 1 ; long ans1 = ( long ) 3e18 , ans2 = ( long ) 3e18 ; long from_left = - 1 , from_right = - 1 ; long from = - 1 ; for ( long i = 0 ; i < n ; ++ i ) { if ( v . get ( ( int ) i ) > first_maxima ) { from = i ; break ; } else { long diff = first_maxima - v . get ( ( int ) i ) ; if ( diff < ans1 ) { ans1 = diff ; from_left = v . get ( ( int ) i ) ; } } } from_right = v . get ( ( int ) from ) ; long diff1 = first_maxima - from_left ; long diff2 = from_right - second_maxima ; if ( diff1 < diff2 ) System . out . println ( N + \" ▁ \" + from_left ) ; else System . out . println ( N + \" ▁ \" + from_right ) ; } else { long maxima = N \/ 2 ; long ans1 = ( int ) 3e18 ; long R = - 1 ; for ( long i = 0 ; i < n - 1 ; ++ i ) { long diff = Math . abs ( v . get ( ( int ) i ) - maxima ) ; if ( diff < ans1 ) { ans1 = diff ; R = v . get ( ( int ) i ) ; } } System . out . println ( N + \" ▁ \" + R ) ; } } public static void main ( String args [ ] ) { long arr [ ] = { 1 , 1 , 2 , 3 , 6 , 1 } ; Vector < Long > v = new Vector < Long > ( ) ; for ( int i = 0 ; i < arr . length ; i ++ ) v . add ( arr [ i ] ) ; int n = v . size ( ) ; printMaxValPair ( v , n ) ; } }"],"bleu":0.033416763848554944,"rouge_l":0.2527306967984934}
{"id":901,"predictions":["import java . io . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 3 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; class GFG { static void triangle ( int n ) { int k = 2 * n - 2 ; int ch = 1 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < k ; j ++ ) System . out . print ( \" ▁ \" ) ; k = k - 1 ; for ( int j = 0 ; j <= i ; j ++ ) { System . out . print ( ch ++ + \" ▁ \" ) ; } System . out . println ( ) ; } } static int maxHeight ( int n ) { return ( ( ( int ) Math . sqrt ( 1 + 8.0 * n ) ) - 1 ) \/ 2 ; } public static void main ( String [ ] args ) { int N = 9 ; triangle ( maxHeight ( N ) ) ; } }"],"bleu":0.23422016950460464,"rouge_l":0.375924404272802}
{"id":902,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { System . out . print ( a [ i ] + \" \" ) ; } System . out . println ( ) ; } } }"],"references":["import java . io . * ; import java . util . * ; import java . lang . * ; class GFG { static String longestInteger ( String str , int l ) { int count = 0 , max = 0 , pos = - 1 , pre_pos , pre_len , len = 0 ; for ( int i = 0 ; i < l ; i ++ ) { pre_pos = pos ; pre_len = len ; count = 0 ; len = 0 ; if ( Character . isDigit ( str . charAt ( i ) ) ) pos = i ; while ( Character . isDigit ( str . charAt ( i ) ) ) { count ++ ; i ++ ; len ++ ; } if ( count > max ) { max = count ; } else { pos = pre_pos ; len = pre_len ; } } return ( str . substring ( pos , pos + len ) ) ; } public static void main ( String [ ] args ) { String str = \" geeks100for1234geeks \" ; int l = str . length ( ) ; System . out . print ( longestInteger ( str , l ) ) ; } }"],"bleu":0.19787456573707174,"rouge_l":0.35743261516271524}
{"id":903,"predictions":["import java . io . * ; class GFG { static int findSum ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } static int findSum ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( findSum ( n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int findSum ( int n , int a , int b ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) if ( i % a == 0 || i % b == 0 ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 10 , a = 3 , b = 5 ; System . out . println ( findSum ( n , a , b ) ) ; } }"],"bleu":0.6093139882530815,"rouge_l":0.7114510754316874}
{"id":904,"predictions":["import java . io . * ; class GFG { static int nthTerm ( int n ) { return ( int ) Math . pow ( n , 2 ) + 1 ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( nthTerm ( n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int seriesSum ( int n ) { return ( n * ( n + 1 ) * ( n + 2 ) ) \/ 6 ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( seriesSum ( n ) ) ; } }"],"bleu":0.6948370497329073,"rouge_l":0.8288043478260868}
{"id":905,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { a [ i ] = sc . nextInt ( ) ; } } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { if ( a [ i ] > a [ j ] ) { ans ++ ; } } out . println ( ans ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . util . * ; class GFG { static int find_count ( Vector < Integer > ele ) { int count = 0 ; for ( int i = 0 ; i < ele . size ( ) ; i ++ ) { Vector < Integer > p = new Vector < Integer > ( ) ; int c = 0 ; for ( int j = ele . size ( ) - 1 ; j >= ( ele . size ( ) - 1 - i ) && j >= 0 ; j -- ) { p . add ( ele . get ( j ) ) ; } int j = ele . size ( ) - 1 , k = 0 ; while ( j >= 0 ) { if ( ele . get ( j ) != p . get ( k ) ) { break ; } j -- ; k ++ ; if ( k == p . size ( ) ) { c ++ ; k = 0 ; } } count = Math . max ( count , c ) ; } return count ; } static void solve ( int n ) { int count = 1 ; Vector < Integer > ele = new Vector < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( count + \" , ▁ \" ) ; ele . add ( count ) ; count = find_count ( ele ) ; } } public static void main ( String [ ] args ) { int n = 10 ; solve ( n ) ; } }"],"bleu":0.24541710093123692,"rouge_l":0.3791288657210165}
{"id":906,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int maxSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }"],"references":["class GFG { static int getMinimumOps ( int ar [ ] , int k ) { int n = ar . length ; int dp [ ] [ ] = new int [ n ] [ k + 1 ] ; dp [ 0 ] [ 1 ] = 0 ; for ( int i = 1 ; i < n ; i ++ ) { int maxGroups = Math . min ( k , i + 1 ) ; for ( int j = 1 ; j <= maxGroups ; j ++ ) { dp [ i ] [ j ] = Integer . MAX_VALUE ; if ( j == 1 ) { int freq [ ] = new int [ 100000 ] ; int freqOfMode = 0 ; for ( int it = 0 ; it <= i ; it ++ ) { freq [ ar [ it ] ] ++ ; int newElementFreq = freq [ ar [ it ] ] ; if ( newElementFreq > freqOfMode ) freqOfMode = newElementFreq ; } dp [ i ] [ 1 ] = ( i + 1 ) - freqOfMode ; } else { int freq [ ] = new int [ 100000 ] ; int freqOfMode = 0 ; for ( int it = i ; it >= j - 1 ; it -- ) { freq [ ar [ it ] ] ++ ; int newElementFreq = freq [ ar [ it ] ] ; if ( newElementFreq > freqOfMode ) freqOfMode = newElementFreq ; int elementsToChange = i - it + 1 ; elementsToChange -= freqOfMode ; dp [ i ] [ j ] = Math . min ( dp [ it - 1 ] [ j - 1 ] + elementsToChange , dp [ i ] [ j ] ) ; } } } } return dp [ n - 1 ] [ k ] ; } public static void main ( String args [ ] ) { int k = 3 ; int ar [ ] = { 3 , 1 , 3 , 3 , 2 , 1 , 8 , 5 } ; System . out . println ( getMinimumOps ( ar , k ) ) ; } }"],"bleu":0.07343854643668805,"rouge_l":0.32347395710582133}
{"id":907,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += st . nextToken ( ) ; sum += st . nextToken ( ) ; } System . out . println ( sum ) ; } }"],"references":["import java . util . * ; class GFG { static int findCount ( int N ) { Vector list = new Vector ( ) ; int sum = 0 ; int i ; for ( i = 0 ; i < 20 ; i ++ ) { sum += Math . pow ( 2 , i ) ; list . add ( sum ) ; } for ( i = 0 ; i < 20 ; i ++ ) { if ( ( int ) list . get ( i ) > N ) return ( list . indexOf ( list . get ( i ) ) + 1 ) ; } return 0 ; } public static void main ( String [ ] args ) { int N = 10 ; System . out . println ( findCount ( N ) ) ; } }"],"bleu":0.3363544887908945,"rouge_l":0.4293296411676474}
{"id":908,"predictions":["import java . io . * ; class GFG { static boolean isPrime ( int x , int y ) { if ( y < 0 ) return false ; if ( y < 0 ) return false ; if ( y < 0 ) return false ; if ( y > 0 ) return false ; if ( y < 0 ) return false ; if ( y < 0 ) return false ; if ( y < 0 ) return false ; if ( y < 0 ) return false ; if ( y < 0 ) return false ; if ( y < 0 ) return false ; if ( y < 0 ) return false ; if ( y < 0 ) return false ; if ( y < 0 ) return false ; if ( y < 0 ) return false ; if ( y < 0 ) return false ; if ( y < 0 ) return false ; if ( y < 0 ) return false ; return false ; return false ; } public static void main ( String [ ] args ) { int x = 12 , y = 12 ; if ( isPrime ( x ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static void farey ( int n ) { double x1 = 0 , y1 = 1 , x2 = 1 , y2 = n ; System . out . printf ( \" % .0f \/ % . 0f ▁ % .0f \/ % . 0f \" , x1 , y1 , x2 , y2 ) ; double x , y = 0 ; while ( y != 1.0 ) { x = Math . floor ( ( y1 + n ) \/ y2 ) * x2 - x1 ; y = Math . floor ( ( y1 + n ) \/ y2 ) * y2 - y1 ; System . out . printf ( \" ▁ % .0f \/ % . 0f \" , x , y ) ; x1 = x2 ; x2 = x ; y1 = y2 ; y2 = y ; } } public static void main ( String [ ] args ) { int n = 7 ; System . out . print ( \" Farey ▁ Sequence ▁ of ▁ order ▁ \" + n + \" ▁ is \\n \" ) ; farey ( n ) ; } }"],"bleu":0.13779271896193876,"rouge_l":0.31934713988759716}
{"id":909,"predictions":["import java . io . * ; class GFG { static boolean isPowerOfTwo ( int n ) { if ( n == 0 ) return false ; if ( n == 1 ) return false ; return false ; } static boolean isPowerOfTwo ( int n ) { if ( isPowerOfTwo ( n ) ) return true ; else return false ; } public static void main ( String [ ] args ) { int n = 12 ; if ( isPowerOfTwo ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . io . * ; class GFG { static float focal_length ( float image_distance , float object_distance ) { return 1 \/ ( ( 1 \/ image_distance ) + ( 1 \/ object_distance ) ) ; } public static void main ( String [ ] args ) { float image_distance = 2 ; float object_distance = 50 ; System . out . println ( \" Focal ▁ length ▁ of ▁ a ▁ lens ▁ is ▁ \" + focal_length ( image_distance , object_distance ) + \" ▁ units . \" ) ; } }"],"bleu":0.3146785116852289,"rouge_l":0.4964097654380087}
{"id":910,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) System ."],"references":["class GFG { static int power ( int x , int y , int p ) { int res = 1 ; x = x % p ; while ( y > 0 ) { if ( y % 2 == 1 ) res = ( res * x ) % p ; y = y >> 1 ; x = ( x * x ) % p ; } return res ; } static int findModuloByM ( int X , int N , int M ) { if ( N < 6 ) { String temp = \" \" ; for ( int i = 0 ; i < N ; i ++ ) temp = temp + ( char ) ( X + 48 ) ; int res = Integer . parseInt ( temp ) % M ; return res ; } if ( N % 2 == 0 ) { int half = findModuloByM ( X , N \/ 2 , M ) % M ; int res = ( half * power ( 10 , N \/ 2 , M ) + half ) % M ; return res ; } else { int half = findModuloByM ( X , N \/ 2 , M ) % M ; int res = ( half * power ( 10 , N \/ 2 + 1 , M ) + half * 10 + X ) % M ; return res ; } } public static void main ( String [ ] args ) { int X = 6 , N = 14 , M = 9 ; System . out . println ( findModuloByM ( X , N , M ) ) ; } }"],"bleu":0.0342304342893882,"rouge_l":0.24353968323608124}
{"id":911,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int maxSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }"],"references":["public class GFG { static int getTotalXorOfSubarrayXors ( int arr [ ] , int N ) { int res = 0 ; for ( int i = 0 ; i < N ; i ++ ) for ( int j = i ; j < N ; j ++ ) for ( int k = i ; k <= j ; k ++ ) res = res ^ arr [ k ] ; return res ; } public static void main ( String args [ ] ) { int arr [ ] = { 3 , 5 , 2 , 4 , 6 } ; int N = arr . length ; System . out . println ( getTotalXorOfSubarrayXors ( arr , N ) ) ; } }"],"bleu":0.44139627463538017,"rouge_l":0.6521448616864893}
{"id":912,"predictions":["import java . io . * ; class GFG { static float area ( float a , float b ) { if ( a < 0 ) return - 1 ; return area ; } public static void main ( String [ ] args ) { float a = 5 , b = 5 ; System . out . println ( area ( a , b ) ) ; } }"],"references":["class GFG { static double innerCirclearea ( double radius ) { if ( radius < 0 ) { return - 1 ; } double r = radius \/ 2 ; double Area = ( 3.14 * Math . pow ( r , 2 ) ) ; return Area ; } public static void main ( String arr [ ] ) { double radius = 4 ; System . out . println ( \" Area ▁ of ▁ circle ▁ c2 ▁ = ▁ \" + innerCirclearea ( radius ) ) ; } }"],"bleu":0.27910035213427437,"rouge_l":0.5120046847550264}
{"id":913,"predictions":["import java . io . * ; import java . util . * ; class GFG { public static void main ( String [ ] args ) { int N = 5 ; System . out . println ( N * N ) ; } }"],"references":["import java . io . * ; class GFG { public static void main ( String args [ ] ) { float P = 1 , R = 1 , T = 1 ; float SI = ( P * T * R ) \/ 100 ; System . out . println ( \" Simple ▁ interest ▁ = ▁ \" + SI ) ; } }"],"bleu":0.3540302325508169,"rouge_l":0.5480067377877597}
{"id":914,"predictions":["import java . io . * ; class GFG { static int countPairs ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( countPairs ( arr , n ) ) ; } }"],"references":["class GFG { static void findSubArr ( int arr [ ] , int n ) { for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( Math . abs ( arr [ i ] - arr [ i + 1 ] ) >= 2 ) { System . out . print ( arr [ i ] + \" ▁ \" + arr [ i + 1 ] ) ; return ; } } System . out . print ( - 1 ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 4 , 6 , 7 } ; int n = arr . length ; findSubArr ( arr , n ) ; } }"],"bleu":0.49355110947736325,"rouge_l":0.6288659793814433}
{"id":915,"predictions":["import java . io . * ; import java . util . * ; class GFG { public static void main ( String [ ] args ) { int a = 5 , b = 5 ; System . out . println ( a + \" \" + b ) ; } }"],"references":["import java . util . * ; class GFG { public static double Min_glass ( int n , int k , int [ ] a ) { int sum = 0 ; for ( int i = 0 ; i < k ; i ++ ) sum += a [ i ] ; double ans = Math . ceil ( ( double ) sum \/ ( double ) 100 ) ; return ans ; } public static void main ( String [ ] args ) { int n = 4 ; int k = 3 ; int [ ] a = { 200 , 150 , 140 , 300 } ; Arrays . sort ( a ) ; System . out . println ( Min_glass ( n , k , a ) ) ; } }"],"bleu":0.12362343064039678,"rouge_l":0.3628034078122488}
{"id":916,"predictions":["import java . io . * ; class GFG { static boolean isVowel ( int a , int b ) { if ( a == b ) return true ; if ( a == b ) return true ; if ( a == b ) return false ; return false ; } static void findVowel ( int a , int b ) { if ( isVowel ( a ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } public static void main ( String [ ] args ) { int a = 12 , b = 12 ; findVowel ( a , b ) ; } }"],"references":["import java . util . * ; class GFG { static void findModulo ( String s ) { int l = s . length ( ) ; int i , modulus = 0 ; if ( s . contains ( \" + \" ) ) { i = s . indexOf ( \" + \" ) ; } else { i = s . indexOf ( \" - \" ) ; } String real = s . substring ( 0 , i ) ; String imaginary = s . substring ( i + 1 , l - 1 ) ; int x = Integer . parseInt ( real ) ; int y = Integer . parseInt ( imaginary ) ; System . out . print ( Math . sqrt ( x * x + y * y ) + \" \\n \" ) ; } public static void main ( String [ ] args ) { String s = \"3 + 4i \" ; findModulo ( s ) ; } }"],"bleu":0.19776534138939364,"rouge_l":0.4097064240060665}
{"id":917,"predictions":["import java . io . * ; import java . util . * ; class GFG { public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 4 , 3 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 ,"],"references":["class RepeatElement { void printRepeating ( int arr [ ] , int size ) { int i ; System . out . println ( \" The ▁ repeating ▁ elements ▁ are ▁ : ▁ \" ) ; for ( i = 0 ; i < size ; i ++ ) { if ( arr [ Math . abs ( arr [ i ] ) ] > 0 ) arr [ Math . abs ( arr [ i ] ) ] = - arr [ Math . abs ( arr [ i ] ) ] ; else System . out . print ( Math . abs ( arr [ i ] ) + \" ▁ \" ) ; } } public static void main ( String [ ] args ) { RepeatElement repeat = new RepeatElement ( ) ; int arr [ ] = { 4 , 2 , 4 , 5 , 2 , 3 , 1 } ; int arr_size = arr . length ; repeat . printRepeating ( arr , arr_size ) ; } }"],"bleu":0.04490010772193367,"rouge_l":0.10351044649485627}
{"id":918,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPower ( int a , int b ) { if ( a == b ) return true ; if ( a == b ) return true ; if ( a == b ) return false ; return false ; } static int findPower ( int a , int b ) { if ( a == b ) return a ; if ( b == b ) return a ; if ( a == b ) return true ; return findPower ( a , b ) ; return findPower ( a , b ) ; } public static void main ( String [ ] args ) { int a = 10 , b = 10 ; if ( isPower ( a , b ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . io . * ; class GFG { static int countZeros ( int x ) { int y ; int n = 32 ; y = x >> 16 ; if ( y != 0 ) { n = n - 16 ; x = y ; } y = x >> 8 ; if ( y != 0 ) { n = n - 8 ; x = y ; } y = x >> 4 ; if ( y != 0 ) { n = n - 4 ; x = y ; } y = x >> 2 ; if ( y != 0 ) { n = n - 2 ; x = y ; } y = x >> 1 ; if ( y != 0 ) return n - 2 ; return n - x ; } public static void main ( String [ ] args ) { int x = 101 ; System . out . println ( countZeros ( x ) ) ; } }"],"bleu":0.23930167472305175,"rouge_l":0.38923809523809527}
{"id":919,"predictions":["import java . io . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int pairORSum ( int arr [ ] , int n ) { int ans = 0 ; for ( int i = 0 ; i < 32 ; i ++ ) { int k1 = 0 ; int k0 = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( ( arr [ j ] & ( 1 << i ) ) != 0 ) k1 ++ ; else k0 ++ ; } ans = ans + ( 1 << i ) * ( k1 * ( k1 - 1 ) \/ 2 ) + ( 1 << i ) * ( k1 * k0 ) ; } return ans ; } public static void main ( String args [ ] ) { int arr [ ] = { 1 , 2 , 3 , 4 } ; int n = arr . length ; System . out . println ( pairORSum ( arr , n ) ) ; } }"],"bleu":0.48713432481746644,"rouge_l":0.6402563626230725}
{"id":920,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } System . out . println ( a [ n - 1 ] ) ; } }"],"references":["import java . io . * ; class GFG { static int binaryToDecimal ( String n ) { String num = n ; int dec_value = 0 ; int base = 1 ; int len = num . length ( ) ; for ( int i = len - 1 ; i >= 0 ; i -- ) { if ( num . charAt ( i ) == '1' ) dec_value += base ; base = base * 2 ; } return dec_value ; } public static void main ( String [ ] args ) { String num = new String ( \"10101001\" ) ; System . out . println ( binaryToDecimal ( num ) ) ; } }"],"bleu":0.2176925768799222,"rouge_l":0.4400045798030685}
{"id":921,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int count ( int a [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( a [ i ] < a [ j ] ) count ++ ; } } return count ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6"],"references":["class GFG { static int countStrings ( int n , int k ) { int dp [ ] [ ] [ ] = new int [ n + 1 ] [ k + 1 ] [ 2 ] ; dp [ 1 ] [ 0 ] [ 0 ] = 1 ; dp [ 1 ] [ 0 ] [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) { for ( int j = 0 ; j < i && j < k + 1 ; j ++ ) { dp [ i ] [ j ] [ 0 ] = dp [ i - 1 ] [ j ] [ 0 ] + dp [ i - 1 ] [ j ] [ 1 ] ; dp [ i ] [ j ] [ 1 ] = dp [ i - 1 ] [ j ] [ 0 ] ; if ( j - 1 >= 0 ) { dp [ i ] [ j ] [ 1 ] += dp [ i - 1 ] [ j - 1 ] [ 1 ] ; } } } return dp [ n ] [ k ] [ 0 ] + dp [ n ] [ k ] [ 1 ] ; } public static void main ( String [ ] args ) { int n = 5 , k = 2 ; System . out . println ( countStrings ( n , k ) ) ; } }"],"bleu":0.10205597216882245,"rouge_l":0.20137551581843194}
{"id":922,"predictions":["import java . util . * ; class GFG { static boolean isVowel ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] != arr [ i ] ) return false ; } return true ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = arr . length ; if ( isVowel ( arr , n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { public static void print2largest ( int arr [ ] , int arr_size ) { int i , first , second ; if ( arr_size < 2 ) { System . out . print ( \" ▁ Invalid ▁ Input ▁ \" ) ; return ; } first = second = Integer . MIN_VALUE ; for ( i = 0 ; i < arr_size ; i ++ ) { if ( arr [ i ] > first ) { second = first ; first = arr [ i ] ; } else if ( arr [ i ] > second && arr [ i ] != first ) second = arr [ i ] ; } if ( second == Integer . MIN_VALUE ) System . out . print ( \" There ▁ is ▁ no ▁ second ▁ largest \" + \" ▁ element \\n \" ) ; else System . out . print ( \" The ▁ second ▁ largest ▁ element \" + \" ▁ is ▁ \" + second ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 12 , 35 , 1 , 10 , 34 , 1 } ; int n = arr . length ; print2largest ( arr , n ) ; } }"],"bleu":0.26829274544363396,"rouge_l":0.4287748020286502}
{"id":923,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int maxSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }"],"references":["class GFG { static int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } static void print_gcd_online ( int n , int m , int [ ] [ ] query , int [ ] arr ) { int max_gcd = 0 ; int i = 0 ; for ( i = 0 ; i < n ; i ++ ) max_gcd = gcd ( max_gcd , arr [ i ] ) ; for ( i = 0 ; i < m ; i ++ ) { query [ i ] [ 0 ] -- ; arr [ query [ i ] [ 0 ] ] \/= query [ i ] [ 1 ] ; max_gcd = gcd ( arr [ query [ i ] [ 0 ] ] , max_gcd ) ; System . out . println ( max_gcd ) ; } } public static void main ( String [ ] args ) { int n = 3 ; int m = 3 ; int [ ] [ ] query = new int [ m ] [ 2 ] ; int [ ] arr = new int [ ] { 36 , 24 , 72 } ; query [ 0 ] [ 0 ] = 1 ; query [ 0 ] [ 1 ] = 3 ; query [ 1 ] [ 0 ] = 3 ; query [ 1 ] [ 1 ] = 12 ; query [ 2 ] [ 0 ] = 2 ; query [ 2 ] [ 1 ] = 4 ; print_gcd_online ( n , m , query , arr ) ; } }"],"bleu":0.14524036825564637,"rouge_l":0.3658236994219653}
{"id":924,"predictions":["import java . util . * ; class GFG { static boolean isVowel ( String str ) { int n = str . length ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( str . charAt ( i ) == str . charAt ( i ) ) count ++ ; } return count ; } public static void main ( String [ ] args ) { String str = \" geeksforgeeksforgeeks \" ; if ( isVowel ( str ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; import java . lang . * ; import java . io . * ; class GFG { static int countSubstr ( String str , int n , char x , char y ) { int tot_count = 0 ; int count_x = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( str . charAt ( i ) == x ) count_x ++ ; if ( str . charAt ( i ) == y ) tot_count += count_x ; } return tot_count ; } public static void main ( String args [ ] ) { String str = \" abbcaceghcak \" ; int n = str . length ( ) ; char x = ' a ' , y = ' c ' ; System . out . print ( \" Count ▁ = ▁ \" + countSubstr ( str , n , x , y ) ) ; } }"],"bleu":0.4154336275539558,"rouge_l":0.6142525174283501}
{"id":925,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int centered_cube ( int n ) { return ( 2 * n + 1 ) * ( n * n + n + 1 ) ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . print ( n + \" th ▁ Centered \" + \" ▁ cube ▁ number : ▁ \" ) ; System . out . println ( centered_cube ( n ) ) ; n = 10 ; System . out . print ( n + \" th ▁ Centered \" + \" ▁ cube ▁ number : ▁ \" ) ; System . out . println ( centered_cube ( n ) ) ; } }"],"bleu":0.2812492425036028,"rouge_l":0.4786479553342388}
{"id":926,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return true ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; else System . out . println ( \" No \" ) ; } public static void main ( String [ ] args ) { int n = 3 ; isPrime ( n ) ; } }"],"references":["import java . util . * ; class GFG { static int MAX = 10000 ; static ArrayList < Integer > primes = new ArrayList < Integer > ( ) ; static void sieveSundaram ( ) { boolean [ ] marked = new boolean [ MAX \/ 2 + 100 ] ; for ( int i = 1 ; i <= ( Math . sqrt ( MAX ) - 1 ) \/ 2 ; i ++ ) for ( int j = ( i * ( i + 1 ) ) << 1 ; j <= MAX \/ 2 ; j = j + 2 * i + 1 ) marked [ j ] = true ; primes . add ( 2 ) ; for ( int i = 1 ; i <= MAX \/ 2 ; i ++ ) if ( marked [ i ] == false ) primes . add ( 2 * i + 1 ) ; } static void findPrimes ( int n ) { if ( n <= 2 || n % 2 != 0 ) { System . out . println ( \" Invalid ▁ Input ▁ \" ) ; return ; } for ( int i = 0 ; primes . get ( i ) <= n \/ 2 ; i ++ ) { int diff = n - primes . get ( i ) ; if ( primes . contains ( diff ) ) { System . out . println ( primes . get ( i ) + \" ▁ + ▁ \" + diff + \" ▁ = ▁ \" + n ) ; return ; } } } public static void main ( String [ ] args ) { sieveSundaram ( ) ; findPrimes ( 4 ) ; findPrimes ( 38 ) ; findPrimes ( 100 ) ; } }"],"bleu":0.13073156372092493,"rouge_l":0.3244822323959014}
{"id":927,"predictions":["import java . util . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 10 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static int N = 100005 ; static int d [ ] = new int [ N ] , pre [ ] = new int [ N ] ; static void Positive_Divisors ( ) { for ( int i = 1 ; i < N ; i ++ ) { for ( int j = 1 ; j * j <= i ; j ++ ) { if ( i % j == 0 ) { if ( j * j == i ) d [ i ] ++ ; else d [ i ] += 2 ; } } } int ans = 0 ; for ( int i = 2 ; i < N ; i ++ ) { if ( d [ i ] == d [ i - 1 ] ) ans ++ ; pre [ i ] = ans ; } } public static void main ( String [ ] args ) { Positive_Divisors ( ) ; int n = 15 ; System . out . println ( pre [ n ] ) ; } }"],"bleu":0.1735746727346395,"rouge_l":0.3121745376189621}
{"id":928,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) return false ; } return true ; } static boolean isPrime ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { if ( isPrime ( arr [ i ] ) ) return false ; } return true ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = arr . length ; if ( isPrime ( arr , n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . io . * ; import java . math . * ; class GFG { static void LeibnizHarmonicTriangle ( int n ) { int C [ ] [ ] = new int [ n + 1 ] [ n + 1 ] ; for ( int i = 0 ; i <= n ; i ++ ) { for ( int j = 0 ; j <= Math . min ( i , n ) ; j ++ ) { if ( j == 0 || j == i ) C [ i ] [ j ] = 1 ; else C [ i ] [ j ] = C [ i - 1 ] [ j - 1 ] + C [ i - 1 ] [ j ] ; } } for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= i ; j ++ ) System . out . print ( \"1 \/ \" + i * C [ i - 1 ] [ j - 1 ] + \" ▁ \" ) ; System . out . println ( ) ; } } public static void main ( String args [ ] ) { int n = 4 ; LeibnizHarmonicTriangle ( n ) ; } }"],"bleu":0.32092699569619076,"rouge_l":0.4239791485664639}
{"id":929,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int count ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ i ] > arr [ j ] ) { count ++ ; } } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 } ; int n = arr . length ; System . out . println ( count ( arr , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static void ansQueries ( int prefeven [ ] , int prefodd [ ] , int l , int r ) { if ( ( r - l + 1 ) % 2 == 0 ) System . out . println ( \"0\" ) ; else { if ( l % 2 == 0 ) System . out . println ( prefeven [ r ] ^ prefeven [ l - 1 ] ) ; else System . out . println ( prefodd [ r ] ^ prefodd [ l - 1 ] ) ; } } static void wrapper ( int arr [ ] , int n , int l [ ] , int r [ ] , int q ) { int prefodd [ ] = new int [ 100 ] ; int prefeven [ ] = new int [ 100 ] ; for ( int i = 1 ; i <= n ; i ++ ) { if ( ( i ) % 2 == 0 ) { prefeven [ i ] = arr [ i - 1 ] ^ prefeven [ i - 1 ] ; prefodd [ i ] = prefodd [ i - 1 ] ; } else { prefeven [ i ] = prefeven [ i - 1 ] ; prefodd [ i ] = prefodd [ i - 1 ] ^ arr [ i - 1 ] ; } } int i = 0 ; while ( i != q ) { ansQueries ( prefeven , prefodd , l [ i ] , r [ i ] ) ; i ++ ; } } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 } ; int n = arr . length ; int l [ ] = { 1 , 1 , 2 } ; int r [ ] = { 2 , 3 , 4 } ; int q = l . length ; wrapper ( arr , n , l , r , q ) ; } }"],"bleu":0.11387505447010568,"rouge_l":0.35875826108045833}
{"id":930,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int squaresum ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += ( i * i ) ; return sum ; } public static void main ( String args [ ] ) throws IOException { int n = 4 ; System . out . println ( squaresum ( n ) ) ; } }"],"bleu":0.7423427011008288,"rouge_l":0.9039866416197038}
{"id":931,"predictions":["import java . io . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 10 == 0 ) return false ; for ( int i = 1 ; i <= n ; i ++ ) if ( n % i == 0 ) return false ; return true ; } static boolean isPrime ( int n ) { if ( isPrime ( n ) ) return false ; return true ; } public static void main ( String [ ] args ) { int n = 10 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static int MAX = 10 ; static boolean isFactorion ( int n ) { int fact [ ] = new int [ MAX ] ; fact [ 0 ] = 1 ; for ( int i = 1 ; i < MAX ; i ++ ) fact [ i ] = i * fact [ i - 1 ] ; int org = n ; int sum = 0 ; while ( n > 0 ) { int d = n % 10 ; sum += fact [ d ] ; n \/= 10 ; } if ( sum == org ) return true ; return false ; } public static void main ( String [ ] args ) { int n = 40585 ; if ( isFactorion ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.43172723952197883,"rouge_l":0.5786830357142858}
{"id":932,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int count ( int a [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] > a [ i ] ) { count ++ ; } } return count ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 } ; int n = a . length ; System . out . println ( count ( a , n ) ) ; } }"],"references":["class GFG { static int minInsertions ( int [ ] H , int n , int K ) { int inser = 0 ; for ( int i = 1 ; i < n ; ++ i ) { float diff = Math . abs ( H [ i ] - H [ i - 1 ] ) ; if ( diff <= K ) continue ; else inser += Math . ceil ( diff \/ K ) - 1 ; } return inser ; } public static void main ( String [ ] args ) { int [ ] H = new int [ ] { 2 , 4 , 8 , 16 } ; int K = 3 ; int n = H . length ; System . out . println ( minInsertions ( H , n , K ) ) ; } }"],"bleu":0.3549934838980784,"rouge_l":0.6222274937729807}
{"id":933,"predictions":["import java . io . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["import java . io . * ; class GFG { static void ReplaceElements ( int arr [ ] , int n ) { int X = 0 ; for ( int i = 0 ; i < n ; ++ i ) { X ^= arr [ i ] ; } for ( int i = 0 ; i < n ; ++ i ) { arr [ i ] = X ^ arr [ i ] ; } } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 3 , 3 , 5 , 5 } ; int n = arr . length ; ReplaceElements ( arr , n ) ; for ( int i = 0 ; i < n ; ++ i ) { System . out . print ( arr [ i ] + \" ▁ \" ) ; } } }"],"bleu":0.5528836809255058,"rouge_l":0.7257750829424551}
{"id":934,"predictions":["import java . util . * ; class GFG { static boolean isVowel ( String s ) { for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i ) ) return false ; } return true ; } public static void main ( String [ ] args ) { String s = \" geeksforgeeksforgeeks \" ; if ( isVowel ( s ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static String makePalindrome ( char [ ] str ) { int i = 0 , j = str . length - 1 ; while ( i <= j ) { if ( str [ i ] == ' * ' && str [ j ] == ' * ' ) { str [ i ] = ' a ' ; str [ j ] = ' a ' ; } else if ( str [ j ] == ' * ' ) str [ j ] = str [ i ] ; else if ( str [ i ] == ' * ' ) str [ i ] = str [ j ] ; else if ( str [ i ] != str [ j ] ) return \" - 1\" ; i ++ ; j -- ; } return String . valueOf ( str ) ; } public static void main ( String [ ] args ) { char [ ] str = \" na * an \" . toCharArray ( ) ; System . out . println ( makePalindrome ( str ) ) ; } }"],"bleu":0.16059734910645607,"rouge_l":0.3792353124028598}
{"id":935,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( a [ i ] == a [ j ] ) { count ++ ; } } } System . out . println ( count ) ; } }"],"references":["import java . io . * ; import java . util . * ; class GFG { static int countSubstr ( String s ) { int n = s . length ( ) ; int [ ] auxArr = new int [ n ] ; if ( s . charAt ( 0 ) == '1' ) auxArr [ 0 ] = 1 ; for ( int i = 1 ; i < n ; i ++ ) { if ( s . charAt ( i ) == '1' ) auxArr [ i ] = auxArr [ i - 1 ] + 1 ; else auxArr [ i ] = auxArr [ i - 1 ] ; } int count = 0 ; for ( int i = n - 1 ; i >= 0 ; i -- ) if ( s . charAt ( i ) == '1' ) count += auxArr [ i ] ; return count ; } public static void main ( String [ ] args ) { String s = \"1101\" ; System . out . println ( countSubstr ( s ) ) ; } }"],"bleu":0.34834262791199705,"rouge_l":0.5071189679885332}
{"id":936,"predictions":["import java . io . * ; import java . util . * ; class GFG { public static void main ( String [ ] args ) { String s = \" geeksforgeeks \" ; int n = s . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i ) ) { System . out . print ( s . charAt ( i ) + \" \" ) ; return ; } } System . out . print ( \" \\n \" ) ; for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( s . charAt ( i ) ) ; } System . out . print ( \" \\n \" ) ; } }"],"references":["import java . io . * ; import java . util . * ; class Graph { private int V ; private LinkedList < Integer > adj [ ] ; Graph ( int v ) { V = v ; adj = new LinkedList [ v ] ; for ( int i = 0 ; i < v ; ++ i ) adj [ i ] = new LinkedList ( ) ; } void addEdge ( int v , int w ) { adj [ v ] . add ( w ) ; } void BFS ( int s ) { boolean visited [ ] = new boolean [ V ] ; LinkedList < Integer > queue = new LinkedList < Integer > ( ) ; visited [ s ] = true ; queue . add ( s ) ; while ( queue . size ( ) != 0 ) { s = queue . poll ( ) ; System . out . print ( s + \" ▁ \" ) ; Iterator < Integer > i = adj [ s ] . listIterator ( ) ; while ( i . hasNext ( ) ) { int n = i . next ( ) ; if ( ! visited [ n ] ) { visited [ n ] = true ; queue . add ( n ) ; } } } } public static void main ( String args [ ] ) { Graph g = new Graph ( 4 ) ; g . addEdge ( 0 , 1 ) ; g . addEdge ( 0 , 2 ) ; g . addEdge ( 1 , 2 ) ; g . addEdge ( 2 , 0 ) ; g . addEdge ( 2 , 3 ) ; g . addEdge ( 3 , 3 ) ; System . out . println ( \" Following ▁ is ▁ Breadth ▁ First ▁ Traversal ▁ \" + \" ( starting ▁ from ▁ vertex ▁ 2 ) \" ) ; g . BFS ( 2 ) ; } }"],"bleu":0.10313051372219931,"rouge_l":0.34124300731542384}
{"id":937,"predictions":["import java . util . * ; class GFG { static boolean isVowel ( String s ) { for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i ) ) return false ; } return true ; } public static void main ( String [ ] args ) { String s = \" geeksforgeeksforgeeks \" ; if ( isVowel ( s ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . io . * ; import java . util . * ; public class Gfg { static int vowel_calc ( String s ) { int n = s . length ( ) ; int arr [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( i == 0 ) arr [ i ] = n ; else arr [ i ] = ( n - i ) + arr [ i - 1 ] - i ; } int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { char ch = s . charAt ( i ) ; if ( ch == ' a ' || ch == ' e ' || ch == ' i ' || ch == ' o ' || ch == ' u ' ) sum += arr [ i ] ; } return sum ; } public static void main ( String args [ ] ) { String s = \" daceh \" ; System . out . println ( vowel_calc ( s ) ) ; } }"],"bleu":0.23062193126963254,"rouge_l":0.44321688066089376}
{"id":938,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int countPairs ( int a [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % 2 == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = a . length ; System . out . println ( countPairs ( a , n ) ) ; } }"],"references":["class GFG { static int findOddPair ( int A [ ] , int N ) { int i , count = 0 ; for ( i = 0 ; i < N ; i ++ ) { if ( A [ i ] % 2 == 0 ) count ++ ; } return count * ( N - count ) ; } public static void main ( String [ ] arg ) { int a [ ] = { 5 , 4 , 7 , 2 , 1 } ; int n = a . length ; System . out . println ( findOddPair ( a , n ) ) ; } }"],"bleu":0.6138675338420038,"rouge_l":0.8026315789473684}
{"id":939,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int smallestDivisor ( int n ) { if ( n % 2 == 0 ) return 2 ; for ( int i = 3 ; i * i <= n ; i += 2 ) { if ( n % i == 0 ) return i ; } return n ; } public static void main ( String [ ] args ) { int n = 31 ; System . out . println ( smallestDivisor ( n ) ) ; } }"],"bleu":0.47956768694484875,"rouge_l":0.7002295834699902}
{"id":940,"predictions":["import java . io . * ; class GFG { static float area ( float a , float b ) { return ( float ) Math . sqrt ( a * b ) ; } public static void main ( String [ ] args ) { float a = 5 , b = 5 ; System . out . println ( area ( a , b ) ) ; } }"],"references":["class GFG { static float areaOfKite ( int d1 , int d2 ) { float area = ( d1 * d2 ) \/ 2 ; return area ; } public static void main ( String [ ] args ) { int d1 = 4 , d2 = 6 ; System . out . println ( \" Area ▁ of ▁ Kite ▁ = ▁ \" + areaOfKite ( d1 , d2 ) ) ; } }"],"bleu":0.37636845934210783,"rouge_l":0.5814675238306362}
{"id":941,"predictions":["import java . util . * ; class GFG { static boolean isVowel ( String s ) { for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i ) ) return false ; } return true ; } public static void main ( String [ ] args ) { String s = \" geeksforgeeksforgeeks \" ; if ( isVowel ( s ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; class GFG { static boolean isPossible ( Vector < String > v , String str ) { str = sortString ( str ) ; for ( int i = 0 ; i < v . size ( ) - 1 ; i ++ ) { for ( int j = i + 1 ; j < v . size ( ) ; j ++ ) { String temp = v . get ( i ) + v . get ( j ) ; temp = sortString ( temp ) ; if ( temp . compareTo ( str ) == 0 ) { return true ; } } } return false ; } public static String sortString ( String inputString ) { char tempArray [ ] = inputString . toCharArray ( ) ; Arrays . sort ( tempArray ) ; return new String ( tempArray ) ; } public static void main ( String [ ] args ) { String str = \" amazon \" ; String [ ] arr = { \" fds \" , \" oxq \" , \" zoa \" , \" epw \" , \" amn \" } ; Vector < String > v = new Vector < String > ( Arrays . asList ( arr ) ) ; if ( isPossible ( v , str ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.1889439366922897,"rouge_l":0.48767146343515944}
{"id":942,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["import java . io . * ; class GFG { static double seriesSum ( int n ) { int i = 1 ; double res = 0.0 ; boolean sign = true ; while ( n > 0 ) { n -- ; if ( sign ) { sign = ! sign ; res = res + ( double ) ++ i \/ ++ i ; } else { sign = ! sign ; res = res - ( double ) ++ i \/ ++ i ; } } return res ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . print ( seriesSum ( n ) ) ; } }"],"bleu":0.38338334186871764,"rouge_l":0.569378657007523}
{"id":943,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) if ( arr [ i ] % 2 == 0 ) return false ; return true ; } static boolean isPrime ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) if ( arr [ i ] % 2 == 0 ) return false ; return true ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = arr . length ; if ( isPrime ( arr , n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . io . * ; class GFG { static int MAX = 1000000 ; static int sieve_Prime [ ] = new int [ MAX + 4 ] ; static int sieve_count [ ] = new int [ MAX + 4 ] ; static void form_sieve ( ) { sieve_Prime [ 1 ] = 1 ; for ( int i = 2 ; i <= MAX ; i ++ ) { if ( sieve_Prime [ i ] == 0 ) { for ( int j = i * 2 ; j <= MAX ; j += i ) { if ( sieve_Prime [ j ] == 0 ) { sieve_Prime [ j ] = 1 ; sieve_count [ i ] ++ ; } } } } } public static void main ( String [ ] args ) { form_sieve ( ) ; int n = 2 ; System . out . println ( \" Count ▁ = ▁ \" + ( sieve_count [ n ] + 1 ) ) ; n = 3 ; System . out . println ( \" Count ▁ = ▁ \" + ( sieve_count [ n ] + 1 ) ) ; } }"],"bleu":0.31316375319096684,"rouge_l":0.4692307692307693}
{"id":944,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int count ( int a [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( a [ i ] > a [ j ] ) count ++ ; } } return count ; } static int count ( int a [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( a [ i ] < a [ j ] ) count ++ ; } } return count ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 6 } ; int n = a . length ; System . out . println ( count ( a , n ) ) ; } }"],"references":["public class GFG { final static int N = 4 ; static int MaximumDecimalValue ( int mat [ ] [ ] , int n ) { int dp [ ] [ ] = new int [ n ] [ n ] ; if ( mat [ 0 ] [ 0 ] == 1 ) { dp [ 0 ] [ 0 ] = 1 ; } for ( int i = 1 ; i < n ; i ++ ) { if ( mat [ 0 ] [ i ] == 1 ) { dp [ 0 ] [ i ] = ( int ) ( dp [ 0 ] [ i - 1 ] + Math . pow ( 2 , i ) ) ; } else { dp [ 0 ] [ i ] = dp [ 0 ] [ i - 1 ] ; } } for ( int i = 1 ; i < n ; i ++ ) { if ( mat [ i ] [ 0 ] == 1 ) { dp [ i ] [ 0 ] = ( int ) ( dp [ i - 1 ] [ 0 ] + Math . pow ( 2 , i ) ) ; } else { dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ] ; } } for ( int i = 1 ; i < n ; i ++ ) { for ( int j = 1 ; j < n ; j ++ ) { if ( mat [ i ] [ j ] == 1 ) { dp [ i ] [ j ] = ( int ) ( Math . max ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] ) + Math . pow ( 2 , i + j ) ) ; } else { dp [ i ] [ j ] = Math . max ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] ) ; } } } return dp [ n - 1 ] [ n - 1 ] ; } public static void main ( String [ ] args ) { int mat [ ] [ ] = { { 1 , 1 , 0 , 1 } , { 0 , 1 , 1 , 0 } , { 1 , 0 , 0 , 1 } , { 1 , 0 , 1 , 1 } , } ; System . out . println ( MaximumDecimalValue ( mat , 4 ) ) ; } }"],"bleu":0.16939255411235568,"rouge_l":0.41403947485933734}
{"id":945,"predictions":["import java . io . * ; import java . util . * ; class GFG { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { System . out . print ( a [ i ] + \" \" ) ; } System . out . println ( ) ; } } }"],"references":["import java . io . * ; class GFG { static int MAX = 100 ; static boolean checkBisymmetric ( int m [ ] [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < i ; j ++ ) if ( m [ i ] [ j ] != m [ j ] [ i ] ) return false ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n - i ; j ++ ) if ( m [ i ] [ j ] != m [ n - j - 1 ] [ n - i - 1 ] ) return false ; return true ; } public static void main ( String [ ] args ) { int n = 3 ; int m [ ] [ ] = { { 1 , 2 , 3 } , { 2 , 5 , 2 } , { 3 , 2 , 1 } } ; if ( checkBisymmetric ( m , n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.3077841198383494,"rouge_l":0.4479549141832465}
{"id":946,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int sum ( int a [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += a [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 } ; int n = a . length ; System . out . println ( sum ( a , n ) ) ; } }"],"references":["import java . util . * ; import java . lang . * ; import java . io . * ; class GFG { static int Divison ( int a [ ] , int n ) { int maxi = Integer . MIN_VALUE , mini = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { maxi = Math . max ( a [ i ] , maxi ) ; mini = Math . min ( a [ i ] , mini ) ; } return maxi \/ mini ; } public static void main ( String [ ] args ) throws java . lang . Exception { int a [ ] = { 3 , 7 , 9 , 3 , 11 } ; int n = a . length ; System . out . print ( Divison ( a , n ) ) ; } }"],"bleu":0.49671085410842614,"rouge_l":0.7093864957873501}
{"id":947,"predictions":["import java . io . * ; import java . util . * ; class GFG { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { System . out . print ( a [ i ] + \" \" ) ; } System . out . println ( ) ; } } }"],"references":["public class GFG { static int MAX = 10 ; static int F [ ] [ ] = new int [ MAX ] [ MAX ] ; static int C [ ] = new int [ MAX ] ; static int noOfAssignments ( String S , int n , int i , int c_x ) { if ( F [ i ] [ c_x ] != - 1 ) { return F [ i ] [ c_x ] ; } if ( i == n ) { if ( c_x == 1 ) { F [ i ] [ c_x ] = 0 ; } else { F [ i ] [ c_x ] = 1 ; } return F [ i ] [ c_x ] ; } int c_y = C [ i ] - c_x ; if ( S . charAt ( i ) == ' ( ' ) { F [ i ] [ c_x ] = noOfAssignments ( S , n , i + 1 , c_x + 1 ) + noOfAssignments ( S , n , i + 1 , c_x ) ; return F [ i ] [ c_x ] ; } F [ i ] [ c_x ] = 0 ; if ( c_x == 1 ) { F [ i ] [ c_x ] += noOfAssignments ( S , n , i + 1 , c_x - 1 ) ; } if ( c_y == 1 ) { F [ i ] [ c_x ] += noOfAssignments ( S , n , i + 1 , c_x ) ; } return F [ i ] [ c_x ] ; } public static void main ( String [ ] args ) { String S = \" ( ) \" ; int n = S . length ( ) ; for ( int i = 0 ; i < MAX ; i ++ ) { for ( int j = 0 ; j < MAX ; j ++ ) { F [ i ] [ j ] = - 1 ; } } C [ 0 ] = 0 ; for ( int i = 0 ; i < n ; ++ i ) { if ( S . charAt ( i ) == ' ( ' ) { C [ i + 1 ] = C [ i ] + 1 ; } else { C [ i + 1 ] = C [ i ] - 1 ; } } System . out . println ( noOfAssignments ( S , n , 0 , 0 ) ) ; } }"],"bleu":0.0649595471802451,"rouge_l":0.27436281859070466}
{"id":948,"predictions":["import java . io . * ; class GFG { static int countDigit ( int n ) { int count = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( n % i == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( countDigit ( n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int nextPowerOf2 ( int n ) { int count = 0 ; if ( n > 0 && ( n & ( n - 1 ) ) == 0 ) return n ; while ( n != 0 ) { n >>= 1 ; count += 1 ; } return 1 << count ; } public static void main ( String args [ ] ) { int n = 0 ; System . out . println ( nextPowerOf2 ( n ) ) ; } }"],"bleu":0.500790935224634,"rouge_l":0.7026637868970483}
{"id":949,"predictions":["import java . io . * ; import java . util . * ; import java . lang . * ; class GFG { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans += a [ i ] ; } System . out . println ( ans ) ; } }"],"references":["import java . io . * ; public class GFG { static int __gcd ( int a , int b ) { if ( a == 0 || b == 0 ) return 0 ; if ( a == b ) return a ; if ( a > b ) return __gcd ( a - b , b ) ; return __gcd ( a , b - a ) ; } static int nthElement ( int a , int b , int n ) { int lcm = ( a * b ) \/ __gcd ( a , b ) ; int l = 1 , r = Math . min ( a , b ) * n ; while ( l <= r ) { int mid = ( l + r ) >> 1 ; int val = mid \/ a + mid \/ b - mid \/ lcm ; if ( val == n ) return Math . max ( ( mid \/ a ) * a , ( mid \/ b ) * b ) ; if ( val < n ) l = mid + 1 ; else r = mid - 1 ; } return 0 ; } static public void main ( String [ ] args ) { int a = 5 , b = 3 , n = 5 ; System . out . println ( nthElement ( a , b , n ) ) ; } }"],"bleu":0.11459842385191409,"rouge_l":0.29561424763750904}
{"id":950,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return true ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 12 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; class GFG { static final int MAX = 10000 ; static Vector < Integer > arr = new Vector < Integer > ( ) ; static void SieveOfEratosthenes ( ) { boolean [ ] prime = new boolean [ MAX ] ; for ( int i = 0 ; i < MAX ; i ++ ) prime [ i ] = true ; for ( int p = 2 ; p * p < MAX ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i < MAX ; i += p ) prime [ i ] = false ; } } for ( int p = 2 ; p < MAX ; p ++ ) if ( prime [ p ] ) arr . add ( p ) ; } static boolean isEuclid ( long n ) { long product = 1 ; int i = 0 ; while ( product < n ) { product = product * arr . get ( i ) ; if ( product + 1 == n ) return true ; i ++ ; } return false ; } public static void main ( String [ ] args ) { SieveOfEratosthenes ( ) ; long n = 31 ; if ( isEuclid ( n ) ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ; n = 42 ; if ( isEuclid ( n ) ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ; } }"],"bleu":0.22423160650056576,"rouge_l":0.3876118908166649}
{"id":951,"predictions":["import java . io . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["import java . io . * ; import java . util . * ; class GFG { static int minElements ( int arr [ ] , int n ) { int halfSum = 0 ; for ( int i = 0 ; i < n ; i ++ ) halfSum = halfSum + arr [ i ] ; halfSum = halfSum \/ 2 ; Arrays . sort ( arr ) ; int res = 0 , curr_sum = 0 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { curr_sum += arr [ i ] ; res ++ ; if ( curr_sum > halfSum ) return res ; } return res ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 1 , 7 , 1 } ; int n = arr . length ; System . out . println ( minElements ( arr , n ) ) ; } }"],"bleu":0.5640531304167609,"rouge_l":0.7311325545962417}
{"id":952,"predictions":["import java . io . * ; class GFG { static boolean isVowel ( int a , int b ) { if ( a < b ) return true ; if ( a < b ) return false ; return false ; } public static void main ( String [ ] args ) { int a = 5 , b = 5 ; if ( isVowel ( a , b ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class Test { static int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } static int lcm ( int a , int b ) { return ( a * b ) \/ gcd ( a , b ) ; } public static void main ( String [ ] args ) { int a = 15 , b = 20 ; System . out . println ( \" LCM ▁ of ▁ \" + a + \" ▁ and ▁ \" + b + \" ▁ is ▁ \" + lcm ( a , b ) ) ; } }"],"bleu":0.36239444122924186,"rouge_l":0.5091667908779252}
{"id":953,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } static boolean isPrime ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 } ; int n = arr . length ; if ( isPrime ( arr , n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static int MAX = 1000005 ; static boolean prime [ ] = new boolean [ MAX ] ; static void SieveOfEratosthenes ( boolean [ ] prime ) { prime [ 1 ] = false ; prime [ 0 ] = false ; for ( int p = 2 ; p * p < MAX ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i < MAX ; i += p ) prime [ i ] = false ; } } } static void prime_xor ( int arr [ ] , int n , int k ) { for ( int i = 0 ; i < MAX ; i ++ ) prime [ i ] = true ; SieveOfEratosthenes ( prime ) ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( prime [ arr [ i ] ] ) { if ( ( i + 1 ) % k == 0 ) { ans ^= arr [ i ] ; } } } System . out . println ( ans ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 3 , 5 , 7 , 11 , 8 } ; int n = arr . length ; int K = 2 ; prime_xor ( arr , n , K ) ; } }"],"bleu":0.37803312350247115,"rouge_l":0.520677562363528}
{"id":954,"predictions":["import java . io . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 12 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; class GFG { static void computeTotient ( int n ) { long phi [ ] = new long [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) phi [ i ] = i ; for ( int p = 2 ; p <= n ; p ++ ) { if ( phi [ p ] == p ) { phi [ p ] = p - 1 ; for ( int i = 2 * p ; i <= n ; i += p ) { phi [ i ] = ( phi [ i ] \/ p ) * ( p - 1 ) ; } } } for ( int i = 1 ; i <= n ; i ++ ) System . out . println ( \" Totient ▁ of ▁ \" + i + \" ▁ is ▁ \" + phi [ i ] ) ; } public static void main ( String [ ] args ) { int n = 12 ; computeTotient ( n ) ; } }"],"bleu":0.2345061642063551,"rouge_l":0.3586095254323933}
{"id":955,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int count ( int n ) { int count = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( n % i == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( count ( n ) ) ; } }"],"references":["class GFG { static int countDigit ( int n ) { int temp = n , count = 0 ; while ( temp != 0 ) { int d = temp % 10 ; temp \/= 10 ; if ( d == 2 || d == 3 || d == 5 || d == 7 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int n = 1234567890 ; System . out . println ( countDigit ( n ) ) ; } }"],"bleu":0.5031429427699526,"rouge_l":0.6467573776285562}
{"id":956,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int count = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { for ( int j = 0 ; j < s . length ( ) ; j ++ ) { if ( s . charAt ( i ) == s . charAt ( j ) ) count ++ ; } } System . out . println ( count ) ; } }"],"references":["class GFG { static char getChar ( String str ) { int sum = 0 ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { sum += ( str . charAt ( i ) - ' a ' + 1 ) ; } if ( sum % 26 == 0 ) return ' z ' ; else { sum = sum % 26 ; return ( char ) ( ' a ' + sum - 1 ) ; } } public static void main ( String [ ] args ) { String str = \" gfg \" ; System . out . println ( getChar ( str ) ) ; } }"],"bleu":0.37208051541140214,"rouge_l":0.4418477518108514}
{"id":957,"predictions":["import java . io . * ; class GFG { static int countPairs ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) count ++ ; } return count ; } static int countPairs ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( countPairs ( arr , n ) ) ; } }"],"references":["class GFG { static int countWays ( int n , int arr [ ] , int len ) { int count [ ] = new int [ n + 1 ] ; count [ 0 ] = 1 ; if ( n == 0 ) return 1 ; for ( int i = 1 ; i <= n ; i ++ ) { int no_ways = 0 ; for ( int j = 0 ; j < len ; j ++ ) { if ( i - arr [ j ] >= 0 ) { no_ways += count [ i - arr [ j ] ] ; } count [ i ] = no_ways ; } } return count [ n ] ; } public static void main ( String args [ ] ) { int arr [ ] = { 1 , 3 , 5 } ; int len = arr . length ; int n = 5 ; System . out . print ( countWays ( n , arr , len ) ) ; } }"],"bleu":0.40082410337598834,"rouge_l":0.5879240291032789}
{"id":958,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return true ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 10 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; public class PrimeNumber { static void primeOccurences ( int [ ] arr , int k ) { Map < Integer , Integer > map = new HashMap < > ( ) ; for ( int i = 0 ; i < arr . length ; i ++ ) { int val = arr [ i ] ; int freq ; if ( map . containsKey ( val ) ) { freq = map . get ( val ) ; freq ++ ; } else freq = 1 ; map . put ( val , freq ) ; } for ( Map . Entry < Integer , Integer > entry : map . entrySet ( ) ) { int value = entry . getValue ( ) ; if ( isPrime ( value ) && value >= k ) System . out . println ( entry . getKey ( ) ) ; } } private static boolean isPrime ( int n ) { if ( ( n > 2 && n % 2 == 0 ) || n == 1 ) return false ; for ( int i = 3 ; i <= ( int ) Math . sqrt ( n ) ; i += 2 ) { if ( n % i == 0 ) return false ; } return true ; } public static void main ( String [ ] args ) { int [ ] arr = { 11 , 11 , 11 , 23 , 11 , 37 , 37 , 51 , 51 , 51 , 51 , 51 } ; int k = 2 ; primeOccurences ( arr , k ) ; } }"],"bleu":0.22153985175440974,"rouge_l":0.3498453753162778}
{"id":959,"predictions":["import java . util . * ; import java . lang . * ; import java . io . * ; class GFG { static int nthTerm ( int N ) { return ( int ) Math . pow ( N , 2 ) + 1 ; } public static void main ( String [ ] args ) { int N = 4 ; System . out . println ( nthTerm ( N ) ) ; } }"],"references":["import java . io . * ; class GFG { static int Nth_Term ( int n ) { return ( int ) ( 3 * Math . pow ( n , 2 ) - n + 2 ) \/ ( 2 ) ; } public static void main ( String [ ] args ) { int N = 5 ; System . out . println ( Nth_Term ( N ) ) ; } }"],"bleu":0.5913616330431742,"rouge_l":0.7667967056783702}
{"id":960,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["import java . util . * ; class GFG { static long sum ( long n ) { long root = ( long ) Math . sqrt ( n ) ; long ans = 0 ; for ( int i = 1 ; i <= root ; i ++ ) ans += n \/ i ; ans = 2 * ans - ( root * root ) ; return ans ; } public static void main ( String [ ] args ) { long n = 35 ; System . out . println ( sum ( n ) ) ; } }"],"bleu":0.44127094757122337,"rouge_l":0.655403301152289}
{"id":961,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { System . out . print ( arr [ i ] + \" \" ) ; } System . out . println ( ) ; } }"],"references":["import java . util . * ; import java . lang . Math ; public class autobio { public static boolean isAutoBio ( int num ) { String autoStr ; int index , number , i , j , cnt ; autoStr = Integer . toString ( num ) ; for ( i = 0 ; i < autoStr . length ( ) ; i ++ ) { index = Integer . parseInt ( autoStr . charAt ( i ) + \" \" ) ; cnt = 0 ; for ( j = 0 ; j < autoStr . length ( ) ; j ++ ) { number = Integer . parseInt ( autoStr . charAt ( j ) + \" \" ) ; if ( number == i ) cnt ++ ; } if ( cnt != index ) return false ; } return true ; } public static void findAutoBios ( double n ) { double high , low ; int i , flag = 0 ; low = Math . pow ( 10.0 , n - 1 ) ; high = Math . pow ( 10.0 , n ) - 1.0 ; for ( i = ( int ) low ; i <= ( int ) high ; i ++ ) if ( isAutoBio ( i ) ) { flag = 1 ; System . out . print ( i + \" , ▁ \" ) ; } if ( flag == 0 ) System . out . println ( \" There ▁ is ▁ no ▁ Autobiographical ▁ Number \" + \" with ▁ \" + ( int ) n + \" ▁ digits \" ) ; } public static void main ( String [ ] args ) { double N = 0 ; findAutoBios ( N ) ; N = 4 ; findAutoBios ( N ) ; } }"],"bleu":0.2363721560302072,"rouge_l":0.40778321594843014}
{"id":962,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( arr [ i ] + \" \" ) ; } } }"],"references":["class GFG { static boolean isLucky ( int n ) { boolean arr [ ] = new boolean [ 10 ] ; for ( int i = 0 ; i < 10 ; i ++ ) arr [ i ] = false ; while ( n > 0 ) { int digit = n % 10 ; if ( arr [ digit ] ) return false ; arr [ digit ] = true ; n = n \/ 10 ; } return true ; } public static void main ( String [ ] args ) { int arr [ ] = { 1291 , 897 , 4566 , 1232 , 80 , 700 } ; int n = arr . length ; for ( int i = 0 ; i < n ; i ++ ) if ( isLucky ( arr [ i ] ) ) System . out . print ( arr [ i ] + \" ▁ is ▁ Lucky ▁ \\n \" ) ; else System . out . print ( arr [ i ] + \" ▁ is ▁ not ▁ Lucky ▁ \\n \" ) ; } }"],"bleu":0.3427540356836349,"rouge_l":0.40759536496659055}
{"id":963,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["class GFG { static void printSeriesSum ( int N ) { double sum = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { if ( i % 2 == 1 ) { sum += ( double ) i \/ ( i + 1 ) ; } else { sum -= ( double ) i \/ ( i + 1 ) ; } } System . out . print ( sum + \" \\n \" ) ; } public static void main ( String [ ] args ) { int N = 10 ; printSeriesSum ( N ) ; } }"],"bleu":0.3729207896618076,"rouge_l":0.5513708948478457}
{"id":964,"predictions":["import java . io . * ; class GFG { static boolean isPrime ( int n ) { if ( n == 1 ) return false ; if ( n == 2 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) System . out . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ; else System . out . println ( \" NO \" ) ; } public static void main ( String [ ] args ) { int n = 3 ; } }"],"references":["class GFG { static int __gcd ( int a , int b ) { if ( b == 0 ) { return a ; } else { return __gcd ( b , a % b ) ; } } static int power ( int x , int y , int m ) { if ( y == 0 ) return 1 ; int p = power ( x , y \/ 2 , m ) % m ; p = ( p * p ) % m ; return ( y % 2 == 0 ) ? p : ( x * p ) % m ; } static void modInverse ( int a , int m ) { if ( __gcd ( a , m ) != 1 ) System . out . print ( \" Inverse ▁ doesn ' t ▁ exist \" ) ; else { System . out . print ( \" Modular ▁ multiplicative ▁ inverse ▁ is ▁ \" + power ( a , m - 2 , m ) ) ; } } public static void main ( String [ ] args ) { int a = 3 , m = 11 ; modInverse ( a , m ) ; } }"],"bleu":0.08703578312387442,"rouge_l":0.2856124993638353}
{"id":965,"predictions":["import java . io . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return true ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 3 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . io . * ; class GFG { static int __gcd ( int a , int b ) { if ( a == 0 ) return b ; if ( b == 0 ) return a ; if ( a == b ) return a ; if ( a > b ) return __gcd ( a - b , b ) ; return __gcd ( a , b - a ) ; } static int countPrimeFactors ( int x ) { int res = 0 ; if ( x % 2 == 0 ) { res ++ ; while ( x % 2 == 0 ) x = x \/ 2 ; } for ( int i = 3 ; i <= Math . sqrt ( x ) ; i = i + 2 ) { if ( x % i == 0 ) { res ++ ; while ( x % i == 0 ) x = x \/ i ; } } if ( x > 2 ) res ++ ; return res ; } static int countCommonPrimeFactors ( int a , int b ) { int gcd = __gcd ( a , b ) ; return countPrimeFactors ( gcd ) ; } public static void main ( String [ ] args ) { int a = 6 , b = 12 ; System . out . println ( countCommonPrimeFactors ( a , b ) ) ; } }"],"bleu":0.23758317734928078,"rouge_l":0.4880640083945436}
{"id":966,"predictions":["import java . io . * ; class GFG { static boolean isPowerOfTwo ( int n ) { if ( n == 1 ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 12 ; if ( isPowerOfTwo ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class Factorial { int factorial ( int n ) { return ( n == 1 || n == 0 ) ? 1 : n * factorial ( n - 1 ) ; } public static void main ( String args [ ] ) { Factorial obj = new Factorial ( ) ; int num = 5 ; System . out . println ( \" Factorial ▁ of ▁ \" + num + \" ▁ is ▁ \" + obj . factorial ( num ) ) ; } }"],"bleu":0.2950185450832821,"rouge_l":0.4862920474431266}
{"id":967,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int n ) { if ( n == 0 ) return false ; if ( n == 1 ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 10 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; class Digits { public static int getFirstDigit ( int x ) { while ( x >= 10 ) x \/= 10 ; return x ; } public static int getCountWithSameStartAndEndFrom1 ( int x ) { if ( x < 10 ) return x ; int tens = x \/ 10 ; int res = tens + 9 ; int firstDigit = getFirstDigit ( x ) ; int lastDigit = x % 10 ; if ( lastDigit < firstDigit ) res -- ; return res ; } public static int getCountWithSameStartAndEnd ( int start , int end ) { return getCountWithSameStartAndEndFrom1 ( end ) - getCountWithSameStartAndEndFrom1 ( start - 1 ) ; } public static void main ( String [ ] args ) { int start = 5 , end = 40 ; System . out . print ( getCountWithSameStartAndEnd ( start , end ) ) ; } }"],"bleu":0.22930981508671433,"rouge_l":0.4291457286432161}
{"id":968,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 3 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; class GFG { static String find_number ( int N , int K ) { String r ; if ( N % 100 == 0 ) { N += 1 ; r = String . valueOf ( N ) ; } else { r = String . valueOf ( N ) ; } for ( int i = 1 ; i <= K ; i ++ ) r += \"00\" ; return r ; } public static void main ( String [ ] args ) { int N = 1000 , K = 2 ; String ans = find_number ( N , K ) ; System . out . println ( ans ) ; } }"],"bleu":0.36669317389822775,"rouge_l":0.548752176436448}
{"id":969,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } System . out . println ( sum ) ; } }"],"references":["import java . util . * ; class GFG { static class pair { int first , second ; public pair ( int first , int second ) { this . first = first ; this . second = second ; } } static int digitSum ( int n ) { int sum = 0 ; while ( n > 0 ) { sum += n % 10 ; n = n \/ 10 ; } return sum ; } static int totalPairs ( int arr1 [ ] , int arr2 [ ] , int n , int m ) { Set < pair > s = new HashSet < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( digitSum ( arr1 [ i ] ) == digitSum ( arr2 [ j ] ) ) { if ( arr1 [ i ] < arr2 [ j ] ) s . add ( new pair ( arr1 [ i ] , arr2 [ j ] ) ) ; else s . add ( new pair ( arr2 [ j ] , arr1 [ i ] ) ) ; } } } return s . size ( ) ; } public static void main ( String [ ] args ) { int arr1 [ ] = { 100 , 3 , 7 , 50 } ; int arr2 [ ] = { 5 , 1 , 10 , 4 } ; int n = arr1 . length ; int m = arr2 . length ; System . out . println ( totalPairs ( arr1 , arr2 , n , m ) ) ; } }"],"bleu":0.21027920323077595,"rouge_l":0.3392101105845182}
{"id":970,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int maxSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }"],"references":["class GFG { static int N = 5 ; static int func ( int idx , int cur , int a [ ] , int dp [ ] [ ] , int n , int x ) { if ( idx == n ) { return 0 ; } if ( dp [ idx ] [ cur ] != - 1 ) { return dp [ idx ] [ cur ] ; } int ans = 0 ; if ( cur == 0 ) { ans = Math . max ( ans , a [ idx ] + func ( idx + 1 , 0 , a , dp , n , x ) ) ; ans = Math . max ( ans , x * a [ idx ] + func ( idx + 1 , 1 , a , dp , n , x ) ) ; } else if ( cur == 1 ) { ans = Math . max ( ans , x * a [ idx ] + func ( idx + 1 , 1 , a , dp , n , x ) ) ; ans = Math . max ( ans , a [ idx ] + func ( idx + 1 , 2 , a , dp , n , x ) ) ; } else { ans = Math . max ( ans , a [ idx ] + func ( idx + 1 , 2 , a , dp , n , x ) ) ; } return dp [ idx ] [ cur ] = ans ; } static int getMaximumSum ( int a [ ] , int n , int x ) { int dp [ ] [ ] = new int [ n ] [ 3 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { dp [ i ] [ j ] = - 1 ; } } int maxi = 0 ; for ( int i = 0 ; i < n ; i ++ ) { maxi = Math . max ( maxi , func ( i , 0 , a , dp , n , x ) ) ; } return maxi ; } public static void main ( String [ ] args ) { int a [ ] = { - 3 , 8 , - 2 , 1 , - 6 } ; int n = a . length ; int x = - 1 ; System . out . println ( getMaximumSum ( a , n , x ) ) ; } }"],"bleu":0.05212613365546136,"rouge_l":0.3122655854029397}
{"id":971,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int sum ( int a [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += a [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = a . length ; System . out . println ( sum ( a , n ) ) ; } }"],"references":["import java . lang . Math ; class GFG { static int exponent ( int A , int B ) { if ( A == 0 ) return 0 ; if ( B == 0 ) return 1 ; int y ; if ( B % 2 == 0 ) { y = exponent ( A , B \/ 2 ) ; y = ( y * y ) ; } else { y = A ; y = ( y * exponent ( A , B - 1 ) ) ; } return y ; } static int sum ( int k , int n ) { int sum = exponent ( k , n + 1 ) - exponent ( k - 1 , n + 1 ) ; return sum ; } public static void main ( String [ ] args ) { int n = 3 ; int K = 3 ; System . out . println ( sum ( K , n ) ) ; } }"],"bleu":0.2708644326343928,"rouge_l":0.43295996451147833}
{"id":972,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return true ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( isPrime ( n \/ 2 ) ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } public static void main ( String [ ] args ) { int n = 10 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; } }"],"references":["import java . util . * ; class GFG { static int MAX = 1000000 ; static ArrayList < Integer > primes = new ArrayList < Integer > ( ) ; static void sieve ( ) { int n = MAX ; int nNew = ( n ) \/ 2 ; boolean [ ] marked = new boolean [ nNew + 100 ] ; int tmp = ( int ) Math . sqrt ( n ) ; for ( int i = 1 ; i <= ( tmp - 1 ) \/ 2 ; i ++ ) for ( int j = ( i * ( i + 1 ) ) << 1 ; j <= nNew ; j = j + 2 * i + 1 ) marked [ j ] = true ; primes . add ( 2 ) ; for ( int i = 1 ; i <= nNew ; i ++ ) if ( marked [ i ] == false ) primes . add ( 2 * i + 1 ) ; } static void primeLcm ( int [ ] arr , int n ) { int [ ] factors = new int [ MAX ] ; for ( int i = 0 ; i < n ; i ++ ) { int copy = arr [ i ] ; int sqr = ( int ) Math . sqrt ( copy ) ; for ( int j = 0 ; primes . get ( j ) <= sqr ; j ++ ) { if ( copy % primes . get ( j ) == 0 ) { while ( copy % primes . get ( j ) == 0 ) copy = copy \/ primes . get ( j ) ; factors [ primes . get ( j ) ] = 1 ; } } if ( copy > 1 ) factors [ copy ] = 1 ; } if ( factors [ 2 ] == 1 ) System . out . print ( \"2 ▁ \" ) ; for ( int i = 3 ; i <= MAX ; i = i + 2 ) if ( factors [ i ] == 1 ) System . out . print ( i + \" ▁ \" ) ; } public static void main ( String [ ] args ) { sieve ( ) ; int [ ] arr = { 20 , 10 , 15 , 60 } ; int n = arr . length ; primeLcm ( arr , n ) ; } }"],"bleu":0.1305247183536803,"rouge_l":0.31900965476887067}
{"id":973,"predictions":["import java . io . * ; import java . util . * ; import java . lang . * ; import java . math . * ; class GFG { public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( n + \" \" + n + \" \" + ( n + 1 ) ) ; } }"],"references":["import java . util . * ; class GFG { static int Alcuin ( int n ) { double _n = n , ans ; ans = Math . round ( ( _n * _n ) \/ 12 ) - Math . floor ( _n \/ 4 ) * Math . floor ( ( _n + 2 ) \/ 4 ) ; return ( int ) ans ; } static void solve ( int n ) { int i = 0 ; for ( i = 1 ; i <= n ; i ++ ) { System . out . print ( Alcuin ( i ) + \" , ▁ \" ) ; } } public static void main ( String [ ] args ) { int n = 15 ; solve ( n ) ; } }"],"bleu":0.17044843000506446,"rouge_l":0.3154550827423168}
{"id":974,"predictions":["import java . io . * ; import java . util . * ; import java . lang . * ; class GFG { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( a [ i ] > b [ j ] ) { ans ++ ; } } System . out . println ( ans ) ; } }"],"references":["class GFG { static int getMSB ( int n ) { n |= n >> 1 ; n |= n >> 2 ; n |= n >> 4 ; n |= n >> 8 ; n |= n >> 16 ; return ( ( n + 1 ) >> 2 ) ; } static void multiply ( int F [ ] [ ] , int M [ ] [ ] ) { int x = F [ 0 ] [ 0 ] * M [ 0 ] [ 0 ] + F [ 0 ] [ 1 ] * M [ 1 ] [ 0 ] ; int y = F [ 0 ] [ 0 ] * M [ 0 ] [ 1 ] + F [ 0 ] [ 1 ] * M [ 1 ] [ 1 ] ; int z = F [ 1 ] [ 0 ] * M [ 0 ] [ 0 ] + F [ 1 ] [ 1 ] * M [ 1 ] [ 0 ] ; int w = F [ 1 ] [ 0 ] * M [ 0 ] [ 1 ] + F [ 1 ] [ 1 ] * M [ 1 ] [ 1 ] ; F [ 0 ] [ 0 ] = x ; F [ 0 ] [ 1 ] = y ; F [ 1 ] [ 0 ] = z ; F [ 1 ] [ 1 ] = w ; } static void power ( int F [ ] [ ] , int n ) { if ( n == 0 || n == 1 ) return ; int [ ] [ ] M = { { 1 , 1 } , { 1 , 0 } } ; for ( int m = getMSB ( n ) ; m > 0 ; m = m >> 1 ) { multiply ( F , F ) ; if ( ( n & m ) > 0 ) { multiply ( F , M ) ; } } } static int fib ( int n ) { int [ ] [ ] F = { { 1 , 1 } , { 1 , 0 } } ; if ( n == 0 ) return 0 ; power ( F , n - 1 ) ; return F [ 0 ] [ 0 ] ; } public static void main ( String [ ] args ) { int n = 6 ; System . out . println ( fib ( n ) ) ; } }"],"bleu":0.06350498636628224,"rouge_l":0.24273305187557628}
{"id":975,"predictions":["import java . util . * ; class GFG { static boolean isVowel ( String s ) { int n = s . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i ) ) return false ; } return true ; } public static void main ( String [ ] args ) { String s = \" geeksforgeeksforgeeks \" ; if ( isVowel ( s ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["public class GFG { static void printMinIndexChar ( String str , String patt ) { int minIndex = Integer . MAX_VALUE ; int m = str . length ( ) ; int n = patt . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( patt . charAt ( i ) == str . charAt ( j ) && j < minIndex ) { minIndex = j ; break ; } } } if ( minIndex != Integer . MAX_VALUE ) System . out . println ( \" Minimum ▁ Index ▁ Character ▁ = ▁ \" + str . charAt ( minIndex ) ) ; else System . out . println ( \" No ▁ character ▁ present \" ) ; } public static void main ( String [ ] args ) { String str = \" geeksforgeeks \" ; String patt = \" set \" ; printMinIndexChar ( str , patt ) ; } }"],"bleu":0.3303912896897854,"rouge_l":0.4739605207895842}
{"id":976,"predictions":["import java . io . * ; class GFG { static float area ( float a , float b ) { if ( a < 0 ) return - 1 ; return area ; } public static void main ( String [ ] args ) { float a = 5 , b = 5 ; System . out . println ( area ( a , b ) ) ; } }"],"references":["class GFG { static int squares ( int l , int b , int a ) { return ( int ) ( Math . ceil ( l \/ ( double ) a ) * Math . ceil ( b \/ ( double ) a ) ) ; } public static void main ( String [ ] args ) { int l = 11 , b = 23 , a = 14 ; System . out . println ( squares ( l , b , a ) ) ; } }"],"bleu":0.31026815314736156,"rouge_l":0.5351944167497508}
{"id":977,"predictions":["import java . io . * ; class GFG { static boolean isDivisible ( int a , int b ) { if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; return false ; } public static void main ( String [ ] args ) { int a = 10 , b = 15 ; if ( isDivisible ( a , b ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["void append ( int new_data ) { Node new_node = new Node ( new_data ) ; Node last = head ; new_node . next = null ; if ( head == null ) { new_node . prev = null ; head = new_node ; return ; } while ( last . next != null ) last = last . next ; last . next = new_node ; new_node . prev = last ; }"],"bleu":0.03608978922266613,"rouge_l":0.25523012552301255}
{"id":978,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int maxSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } static int maxSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }"],"references":["import java . io . * ; class GFG { static void maxProductSum ( String str , int m ) { int n = str . length ( ) ; int maxProd = Integer . MIN_VALUE , maxSum = Integer . MIN_VALUE ; for ( int i = 0 ; i < n - m ; i ++ ) { int product = 1 , sum = 0 ; for ( int j = i ; j < m + i ; j ++ ) { product = product * ( str . charAt ( j ) - '0' ) ; sum = sum + ( str . charAt ( j ) - '0' ) ; } maxProd = Math . max ( maxProd , product ) ; maxSum = Math . max ( maxSum , sum ) ; } System . out . println ( \" Maximum ▁ Product ▁ = ▁ \" + maxProd ) ; System . out . print ( \" \\n Maximum ▁ Sum ▁ = ▁ \" + maxSum ) ; } public static void main ( String [ ] args ) { String str = \"3675356291\" ; int m = 5 ; maxProductSum ( str , m ) ; } }"],"bleu":0.2901486687695022,"rouge_l":0.413626089764288}
{"id":979,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += st . nextToken ( ) ; sum += st . nextToken ( ) ; } System . out . println ( sum ) ; } }"],"references":["class GFG { static void findPhoneNumber ( int n ) { int temp = n ; int sum = 0 ; while ( temp != 0 ) { sum += temp % 10 ; temp = temp \/ 10 ; } if ( sum < 10 ) System . out . print ( n + \"0\" + sum ) ; else System . out . print ( n + \" \" + sum ) ; } public static void main ( String [ ] args ) { int n = 98765432 ; findPhoneNumber ( n ) ; } }"],"bleu":0.21558873912395293,"rouge_l":0.3340538982562329}
{"id":980,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int maxSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }"],"references":["class GFG { static int countOfSubarrays ( int [ ] arr , int n ) { int count = 0 ; int [ ] v = new int [ n + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) v [ arr [ i ] ] = i ; int maximum = Integer . MIN_VALUE ; int minimum = Integer . MAX_VALUE ; for ( int i = 1 ; i <= n ; i ++ ) { maximum = Math . max ( maximum , v [ i ] ) ; minimum = Math . min ( minimum , v [ i ] ) ; if ( maximum - minimum < i ) count = count + 1 ; } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 4 , 1 , 3 , 2 , 5 , 6 } ; int n = arr . length ; System . out . print ( countOfSubarrays ( arr , n ) + \" \\n \" ) ; } }"],"bleu":0.3150830596159496,"rouge_l":0.5414753596571779}
{"id":981,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["class GFG { static int maxSum ( int p0 , int p1 , int a [ ] , int pos , int n ) { if ( pos == n ) { if ( p0 == p1 ) return p0 ; else return 0 ; } int ans = maxSum ( p0 , p1 , a , pos + 1 , n ) ; ans = Math . max ( ans , maxSum ( p0 + a [ pos ] , p1 , a , pos + 1 , n ) ) ; ans = Math . max ( ans , maxSum ( p0 , p1 + a [ pos ] , a , pos + 1 , n ) ) ; return ans ; } public static void main ( String [ ] args ) { int n = 4 ; int a [ ] = { 1 , 2 , 3 , 6 } ; System . out . println ( maxSum ( 0 , 0 , a , 0 , n ) ) ; } }"],"bleu":0.29217814221456245,"rouge_l":0.42850540715408075}
{"id":982,"predictions":["import java . io . * ; import java . util . * ; class GFG { public static void main ( String [ ] args ) { int a = 2 , b = 5 , c = 5 ; System . out . println ( a + \" \" + b + \" \" + c + \" \" + c + \" , \" + c + \" , \" + c + c + \" , \" + c + c + \" , \" + c + c + \" , \" + c + c + \" , \" + c + c + \" , \" + c + c + \" , \" + c + c + c + \" , \" + c + c + \" , \" + c + c + \" , \" + c + c + \" , \" + c + c + \" , \" + c + c + \" , \" + c + c + \" , \" + c + c + \" , \" + c + c + \" , \" + c + c + \" , \" + c + c + c + \" \\n \" + c + c + c + \" \\n \" ) ; } }"],"references":["class GFG { static int MAXN = 10000000 ; static int minimumSteps ( int n , int m , int a , int b ) { if ( n > m ) return MAXN ; if ( n == m ) return 0 ; return Math . min ( 1 + minimumSteps ( n * a , m , a , b ) , 1 + minimumSteps ( n * b , m , a , b ) ) ; } public static void main ( String [ ] args ) { int n = 120 , m = 51840 ; int a = 2 , b = 3 ; System . out . println ( minimumSteps ( n , m , a , b ) ) ; } }"],"bleu":0.13009077731926255,"rouge_l":0.21207146306132305}
{"id":983,"predictions":["import java . io . * ; import java . util . * ; class GFG { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { System . out . print ( a [ i ] + \" \" ) ; } System . out . println ( ) ; } } }"],"references":["class GFG { static String printLargestString ( String s , int l , int r ) { int freq [ ] = new int [ 26 ] ; l -- ; r -- ; for ( int i = Math . min ( l , r ) ; i <= Math . max ( l , r ) ; i ++ ) { freq [ s . charAt ( i ) - ' a ' ] ++ ; } String ans = \" \" ; for ( int i = 25 ; i >= 0 ; i -- ) { while ( freq [ i ] > 0 ) { ans += ( char ) ( ' a ' + i ) ; freq [ i ] -- ; } } return ans ; } public static void main ( String [ ] args ) { String s = \" striver \" ; int l = 3 , r = 5 ; System . out . println ( printLargestString ( s , l , r ) ) ; } }"],"bleu":0.25126808625601366,"rouge_l":0.4125310790651417}
{"id":984,"predictions":["import java . io . * ; import java . util . * ; class GFG { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int arr [ ] = new int [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) arr [ i ] = sc . nextInt ( ) ; Arrays . sort ( arr ) ; for ( int i = 0 ; i < 3 ; i ++ ) System . out . print ( arr [ i ] + \" \" ) ; for ( int i = 0 ; i < 3 ; i ++ ) System . out . print ( arr [ i ] + \" \" ) ; } }"],"references":["import java . util . HashMap ; class SymmetricPairs { static void findSymPairs ( int arr [ ] [ ] ) { HashMap < Integer , Integer > hM = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < arr . length ; i ++ ) { int first = arr [ i ] [ 0 ] ; int sec = arr [ i ] [ 1 ] ; Integer val = hM . get ( sec ) ; if ( val != null && val == first ) System . out . println ( \" ( \" + sec + \" , ▁ \" + first + \" ) \" ) ; else hM . put ( first , sec ) ; } } public static void main ( String arg [ ] ) { int arr [ ] [ ] = new int [ 5 ] [ 2 ] ; arr [ 0 ] [ 0 ] = 11 ; arr [ 0 ] [ 1 ] = 20 ; arr [ 1 ] [ 0 ] = 30 ; arr [ 1 ] [ 1 ] = 40 ; arr [ 2 ] [ 0 ] = 5 ; arr [ 2 ] [ 1 ] = 10 ; arr [ 3 ] [ 0 ] = 40 ; arr [ 3 ] [ 1 ] = 30 ; arr [ 4 ] [ 0 ] = 10 ; arr [ 4 ] [ 1 ] = 5 ; findSymPairs ( arr ) ; } }"],"bleu":0.14654176801172936,"rouge_l":0.31804443101103214}
{"id":985,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int maxSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static long fact ( int n ) { long res = 1 ; for ( int i = 2 ; i <= n ; i ++ ) res = res * i ; return res ; } static long nCr ( int n , int r ) { return fact ( n ) \/ ( 1 * fact ( r ) * fact ( n - r ) ) ; } static long number_of_subsequences ( int arr [ ] , int k , int n ) { long s = 0 ; HashMap < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( mp . containsKey ( arr [ i ] ) ) { mp . put ( arr [ i ] , mp . get ( arr [ i ] ) + 1 ) ; } else { mp . put ( arr [ i ] , 1 ) ; } } for ( Map . Entry < Integer , Integer > j : mp . entrySet ( ) ) { s = s + 1 * nCr ( j . getValue ( ) , k ) ; } return s ; } static public void main ( String [ ] arg ) { int arr [ ] = { 1 , 1 , 1 , 1 , 2 , 2 , 2 } ; int k = 2 ; int n = arr . length ; System . out . println ( number_of_subsequences ( arr , k , n ) ) ; } }"],"bleu":0.2080068064399671,"rouge_l":0.4567314614830813}
{"id":986,"predictions":["import java . util . * ; class GFG { static boolean isPrime ( int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( n % i == 0 ) { sum += n \/ i ; } else { sum += n \/ i ; } } return sum ; } static boolean isPrime ( int n ) { for ( int i = 0 ; i < n ; i ++ ) { if ( isPrime ( n ) ) return false ; } return true ; } static boolean isPrime ( int n ) { if ( isPrime ( n ) ) return true ; if ( isPrime ( n ) ) return true ; if ( isPrime ( n ) ) return false ; return true ; } public static void main ( String [ ] args ) { int n = 10 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static int SIZE = 26 ; static void SieveOfEratosthenes ( boolean [ ] prime , int p_size ) { prime [ 0 ] = false ; prime [ 1 ] = false ; for ( int p = 2 ; p * p <= p_size ; p ++ ) { if ( prime [ p ] ) { for ( int i = p * 2 ; i < p_size ; i += p ) prime [ i ] = false ; } } } static void printChar ( String str , int n ) { boolean [ ] prime = new boolean [ n + 1 ] ; for ( int i = 0 ; i < n + 1 ; i ++ ) prime [ i ] = true ; SieveOfEratosthenes ( prime , str . length ( ) + 1 ) ; int [ ] freq = new int [ SIZE ] ; for ( int i = 0 ; i < SIZE ; i ++ ) freq [ i ] = 0 ; for ( int i = 0 ; i < n ; i ++ ) freq [ str . charAt ( i ) - ' a ' ] ++ ; for ( int i = 0 ; i < n ; i ++ ) { if ( prime [ freq [ str . charAt ( i ) - ' a ' ] ] ) { System . out . print ( str . charAt ( i ) ) ; } } } public static void main ( String [ ] args ) { String str = \" geeksforgeeks \" ; int n = str . length ( ) ; printChar ( str , n ) ; } }"],"bleu":0.22468887341489568,"rouge_l":0.38731400718317077}
{"id":987,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["class GFG { static int claculate sum ( int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum = sum + ( 1 << i ) ; } return sum ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( \" Sum ▁ of ▁ the ▁ series ▁ : ▁ \" + calculateSum ( n ) ) ; } } ;"],"bleu":0.5736301860018358,"rouge_l":0.7460687245195107}
{"id":988,"predictions":["import java . io . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 10 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int n ) { if ( n <= 1 ) return false ; if ( n <= 3 ) return true ; if ( n % 2 == 0 || n % 3 == 0 ) return false ; for ( int i = 5 ; i * i <= n ; i = i + 6 ) if ( n % i == 0 || n % ( i + 2 ) == 0 ) return false ; return true ; } static int SumOfPrimeDivisors ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( n % i == 0 ) { if ( isPrime ( i ) ) sum += i ; } } return sum ; } public static void main ( String args [ ] ) { int n = 60 ; System . out . print ( \" Sum ▁ of ▁ prime ▁ divisors ▁ of ▁ 60 ▁ is ▁ \" + SumOfPrimeDivisors ( n ) + \" \\n \" ) ; } }"],"bleu":0.3482493880097622,"rouge_l":0.529382593602777}
{"id":989,"predictions":["import java . io . * ; class GFG { static int countPairs ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( countPairs ( arr , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static int elementCount ( int arr1 [ ] , int n1 , int arr2 [ ] , int n2 ) { int count = 0 ; HashSet < Integer > hash = new HashSet < > ( ) ; for ( int i = 0 ; i < n2 ; i ++ ) { hash . add ( arr2 [ i ] ) ; } for ( int i = 0 ; i < n1 ; i ++ ) { for ( int j = 1 ; j * j <= arr1 [ i ] ; j ++ ) { if ( arr1 [ i ] % j == 0 ) { if ( ( hash . contains ( j ) && j != ( int ) hash . toArray ( ) [ hash . size ( ) - 1 ] ) || ( hash . contains ( arr1 [ i ] \/ j ) && ( arr1 [ i ] \/ j ) != ( int ) hash . toArray ( ) [ hash . size ( ) - 1 ] ) ) { count ++ ; break ; } } } } return count ; } public static void main ( String [ ] args ) { int arr1 [ ] = { 10 , 2 , 13 , 4 , 15 } ; int arr2 [ ] = { 2 , 4 , 5 , 6 } ; int n1 = arr1 . length ; int n2 = arr2 . length ; System . out . println ( elementCount ( arr1 , n1 , arr2 , n2 ) ) ; } }"],"bleu":0.13236503660116616,"rouge_l":0.4475353458158196}
{"id":990,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int countPairs ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) count ++ ; } return count ; } static int countPairs ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { count ++ ; } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( countPairs ( arr , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static int countSubarray ( int arr [ ] , int n , int k ) { int s = 0 ; int i = 0 ; while ( i < n ) { if ( arr [ i ] > k ) { i ++ ; continue ; } int count = 0 ; while ( i < n && arr [ i ] <= k ) { i ++ ; count ++ ; } s += ( ( count * ( count + 1 ) ) \/ 2 ) ; } return ( n * ( n + 1 ) \/ 2 - s ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 } ; int k = 2 ; int n = arr . length ; System . out . print ( countSubarray ( arr , n , k ) ) ; } }"],"bleu":0.5109560351935016,"rouge_l":0.6591806051494081}
{"id":991,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ i ] > arr [ j ] ) { count ++ ; } } } System . out . println ( count ) ; } }"],"references":["import java . io . * ; import java . util . * ; public class GFG { static int countNum ( int [ ] arr , int n ) { int count = 0 ; Arrays . sort ( arr ) ; for ( int i = 0 ; i < n - 1 ; i ++ ) if ( arr [ i ] != arr [ i + 1 ] && arr [ i ] != arr [ i + 1 ] - 1 ) count += arr [ i + 1 ] - arr [ i ] - 1 ; return count ; } static public void main ( String [ ] args ) { int [ ] arr = { 3 , 5 , 8 , 6 } ; int n = arr . length ; System . out . println ( countNum ( arr , n ) ) ; } }"],"bleu":0.3312379370942197,"rouge_l":0.42445906014679247}
{"id":992,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int count ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ i ] > arr [ j ] ) { count ++ ; } } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( count ( arr , n ) ) ; } }"],"references":["class GFG { static void max_element ( int a [ ] , int n ) { int [ ] pre = new int [ n ] ; pre [ 0 ] = a [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) pre [ i ] = Math . max ( pre [ i - 1 ] , a [ i ] ) ; int [ ] suf = new int [ n ] ; suf [ n - 1 ] = a [ n - 1 ] ; for ( int i = n - 2 ; i >= 0 ; i -- ) suf [ i ] = Math . max ( suf [ i + 1 ] , a [ i ] ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( i == 0 ) System . out . print ( suf [ i + 1 ] + \" ▁ \" ) ; else if ( i == n - 1 ) System . out . print ( pre [ i - 1 ] + \" ▁ \" ) ; else System . out . print ( Math . max ( pre [ i - 1 ] , suf [ i + 1 ] ) + \" ▁ \" ) ; } } public static void main ( String [ ] args ) { int a [ ] = { 2 , 5 , 6 , 1 , 3 } ; int n = a . length ; max_element ( a , n ) ; } }"],"bleu":0.16994368301530416,"rouge_l":0.4045987176652664}
{"id":993,"predictions":["import java . io . * ; class GFG { static boolean isVowel ( String s ) { int n = s . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i ) ) return false ; } return true ; } public static void main ( String [ ] args ) { String s = \" geeksforgeeksforgeeks \" ; if ( isVowel ( s ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class Test { static boolean isRotated ( String str1 , String str2 ) { if ( str1 . length ( ) != str2 . length ( ) ) return false ; String clock_rot = \" \" ; String anticlock_rot = \" \" ; int len = str2 . length ( ) ; anticlock_rot = anticlock_rot + str2 . substring ( len - 2 , len ) + str2 . substring ( 0 , len - 2 ) ; clock_rot = clock_rot + str2 . substring ( 2 ) + str2 . substring ( 0 , 2 ) ; return ( str1 . equals ( clock_rot ) || str1 . equals ( anticlock_rot ) ) ; } public static void main ( String [ ] args ) { String str1 = \" geeks \" ; String str2 = \" eksge \" ; System . out . println ( isRotated ( str1 , str2 ) ? \" Yes \" : \" No \" ) ; } }"],"bleu":0.23214058422059092,"rouge_l":0.4209276018099548}
{"id":994,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int findSum ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( findSum ( n ) ) ; } }"],"references":["class GFG { static int findMax ( int num ) { byte size_of_int = 4 ; int num_copy = num ; int j = size_of_int * 8 - 1 ; int i = 0 ; while ( i < j ) { int m = ( num_copy >> i ) & 1 ; int n = ( num_copy >> j ) & 1 ; if ( m > n ) { int x = ( 1 << i | 1 << j ) ; num = num ^ x ; } i ++ ; j -- ; } return num ; } static public void main ( String [ ] args ) { int num = 4 ; System . out . println ( findMax ( num ) ) ; } }"],"bleu":0.20871308437072691,"rouge_l":0.4663334313437224}
{"id":995,"predictions":["import java . util . * ; class GFG { static boolean isVowel ( String s ) { for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i ) ) return false ; } return true ; } public static void main ( String [ ] args ) { String s = \" geeksforgeeksforgeeks \" ; if ( isVowel ( s ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; class GFG { static boolean check ( String s , int l ) { Vector < Integer > pos = new Vector < Integer > ( ) ; for ( int i = 0 ; i < l ; i ++ ) { if ( s . charAt ( i ) == '1' ) pos . add ( i ) ; } int t = pos . size ( ) ; for ( int i = 1 ; i < t ; i ++ ) { if ( ( pos . get ( i ) - pos . get ( i - 1 ) ) != ( pos . get ( 1 ) - pos . get ( 0 ) ) ) return false ; } return true ; } public static void main ( String args [ ] ) { String s = \"100010001000\" ; int l = s . length ( ) ; if ( check ( s , l ) ) System . out . print ( \" Yes \" ) ; else System . out . print ( \" No \" ) ; } }"],"bleu":0.3354171429592909,"rouge_l":0.6018716305564032}
{"id":996,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { for ( int k = 0 ; k < n ; k ++ ) { if ( a [ i ] > b [ j ] ) { count ++ ; } } } System . out . println ( count ) ; } }"],"references":["import java . io . * ; class GFG { static int maximum_one ( String s , int n ) { int cnt_one = 0 ; int max_cnt = 0 , temp = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == '1' ) { cnt_one ++ ; temp ++ ; } else { max_cnt = Math . max ( max_cnt , temp ) ; temp = 0 ; } } max_cnt = Math . max ( max_cnt , temp ) ; int [ ] left = new int [ n ] ; int right [ ] = new int [ n ] ; if ( s . charAt ( 0 ) == '1' ) left [ 0 ] = 1 ; else left [ 0 ] = 0 ; if ( s . charAt ( n - 1 ) == '1' ) right [ n - 1 ] = 1 ; else right [ n - 1 ] = 0 ; for ( int i = 1 ; i < n ; i ++ ) { if ( s . charAt ( i ) == '1' ) left [ i ] = left [ i - 1 ] + 1 ; else left [ i ] = 0 ; } for ( int i = n - 2 ; i >= 0 ; i -- ) { if ( s . charAt ( i ) == '1' ) right [ i ] = right [ i + 1 ] + 1 ; else right [ i ] = 0 ; } for ( int i = 1 ; i < n - 1 ; i ++ ) { if ( s . charAt ( i ) == '0' ) { int sum = left [ i - 1 ] + right [ i + 1 ] ; if ( sum < cnt_one ) max_cnt = Math . max ( max_cnt , sum + 1 ) ; else max_cnt = Math . max ( max_cnt , sum ) ; } } return max_cnt ; } public static void main ( String [ ] args ) { String s = \"111011101\" ; System . out . println ( maximum_one ( s , s . length ( ) ) ) ; } }"],"bleu":0.2878972012065936,"rouge_l":0.41870681370978813}
{"id":997,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["class GFG { static void nDigitPerfectCubes ( int n ) { int smallest = ( int ) Math . pow ( Math . ceil ( Math . cbrt ( Math . pow ( 10 , ( n - 1 ) ) ) ) , 3 ) ; System . out . print ( smallest + \" ▁ \" ) ; int largest = ( int ) Math . pow ( Math . ceil ( Math . cbrt ( Math . pow ( 10 , ( n ) ) ) ) - 1 , 3 ) ; System . out . print ( largest ) ; } public static void main ( String args [ ] ) { int n = 3 ; nDigitPerfectCubes ( n ) ; } }"],"bleu":0.22712145509782222,"rouge_l":0.38774682174736275}
{"id":998,"predictions":["import java . io . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 12 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static boolean isMultipleof5 ( int n ) { if ( ( n & 1 ) == 1 ) n <<= 1 ; float x = n ; x = ( ( int ) ( x * 0.1 ) ) * 10 ; if ( ( int ) x == n ) return true ; return false ; } public static void main ( String [ ] args ) { int i = 19 ; if ( isMultipleof5 ( i ) == true ) System . out . println ( i + \" is ▁ multiple ▁ of ▁ 5\" ) ; else System . out . println ( i + \" ▁ is ▁ not ▁ a ▁ \" + \" multiple ▁ of ▁ 5\" ) ; } }"],"bleu":0.3297450682576724,"rouge_l":0.5766083521444696}
{"id":999,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int count ( int a , int b ) { int count = 0 ; for ( int i = 1 ; i <= Math . sqrt ( a ) ; i ++ ) { if ( a % i == 0 ) { count ++ ; } } return count ; } public static void main ( String [ ] args ) { int a = 2 , b = 3 ; System . out . println ( count ( a , b ) ) ; } }"],"references":["class GFG { static int minsteps ( int n , int m ) { if ( m > n ) { return - 1 ; } else { return ( ( n + 1 ) \/ 2 + m - 1 ) \/ m * m ; } } public static void main ( String [ ] args ) { int n = 17 , m = 4 ; int ans = minsteps ( n , m ) ; System . out . println ( ans ) ; } }"],"bleu":0.30338638099362164,"rouge_l":0.4743871513102283}
{"id":1000,"predictions":["import java . util . * ; class GFG { static boolean isVowel ( String s ) { for ( int i = 0 ; i < s . length ( ) ; i ++ ) { for ( int j = 0 ; j < s . length ( ) ; j ++ ) { if ( s . charAt ( i ) == s . charAt ( j ) ) return false ; } return true ; } static boolean isVowel ( String s ) { for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( isVowel ( s . charAt ( i ) ) ) return false ; } return true ; } public static void main ( String [ ] args ) { String s = \" geeksforgeeksforgeeksforgeeks \" ; if ( isVowel ( s ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static void gridStr ( String str ) { int l = str . length ( ) ; int k = 0 , row , column ; row = ( int ) Math . floor ( Math . sqrt ( l ) ) ; column = ( int ) Math . ceil ( Math . sqrt ( l ) ) ; if ( row * column < l ) { row = column ; } char s [ ] [ ] = new char [ row ] [ column ] ; for ( int i = 0 ; i < row ; i ++ ) { for ( int j = 0 ; j < column ; j ++ ) { if ( k < str . length ( ) ) s [ i ] [ j ] = str . charAt ( k ) ; k ++ ; } } for ( int i = 0 ; i < row ; i ++ ) { for ( int j = 0 ; j < column ; j ++ ) { if ( s [ i ] [ j ] == 0 ) { break ; } System . out . print ( s [ i ] [ j ] ) ; } System . out . println ( \" \" ) ; } } public static void main ( String [ ] args ) { String str = \" GEEKSFORGEEKS \" ; gridStr ( str ) ; } }"],"bleu":0.3195533094366222,"rouge_l":0.4293546714084612}
{"id":1001,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int count ( int a [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( a [ i ] > a [ j ] ) { count ++ ; } } } return count ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = a . length ; System . out . println ( count ( a , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static int maxProfit ( int price [ ] , int start , int end ) { if ( end <= start ) return 0 ; int profit = 0 ; for ( int i = start ; i < end ; i ++ ) { for ( int j = i + 1 ; j <= end ; j ++ ) { if ( price [ j ] > price [ i ] ) { int curr_profit = price [ j ] - price [ i ] + maxProfit ( price , start , i - 1 ) + maxProfit ( price , j + 1 , end ) ; profit = Math . max ( profit , curr_profit ) ; } } } return profit ; } public static void main ( String [ ] args ) { int price [ ] = { 100 , 180 , 260 , 310 , 40 , 535 , 695 } ; int n = price . length ; System . out . print ( maxProfit ( price , 0 , n - 1 ) ) ; } }"],"bleu":0.35948709744574175,"rouge_l":0.6147687670716775}
{"id":1002,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int maxSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static int maximum_middle_value ( int n , int k , int arr [ ] ) { int ans = - 1 ; int low = ( n + 1 - k ) \/ 2 ; int high = ( n + 1 - k ) \/ 2 + k ; for ( int i = low ; i <= high ; i ++ ) { ans = Math . max ( ans , arr [ i - 1 ] ) ; } return ans ; } public static void main ( String args [ ] ) { int n = 5 , k = 2 ; int arr [ ] = { 9 , 5 , 3 , 7 , 10 } ; System . out . println ( maximum_middle_value ( n , k , arr ) ) ; n = 9 ; k = 3 ; int arr1 [ ] = { 2 , 4 , 3 , 9 , 5 , 8 , 7 , 6 , 10 } ; System . out . println ( maximum_middle_value ( n , k , arr1 ) ) ; } }"],"bleu":0.23634666784757405,"rouge_l":0.5095823095823095}
{"id":1003,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["class sum_dig { static int countRec ( int n , int sum ) { if ( n == 0 ) return sum == 0 ? 1 : 0 ; if ( sum == 0 ) return 1 ; int ans = 0 ; for ( int i = 0 ; i <= 9 ; i ++ ) if ( sum - i >= 0 ) ans += countRec ( n - 1 , sum - i ) ; return ans ; } static int finalCount ( int n , int sum ) { int ans = 0 ; for ( int i = 1 ; i <= 9 ; i ++ ) if ( sum - i >= 0 ) ans += countRec ( n - 1 , sum - i ) ; return ans ; } public static void main ( String args [ ] ) { int n = 2 , sum = 5 ; System . out . println ( finalCount ( n , sum ) ) ; } }"],"bleu":0.2970043424055419,"rouge_l":0.599803343166175}
{"id":1004,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["class GFG { static long calculateSum ( int n , int k ) { int res = 1 ; int MOD = 1000000007 ; while ( k > 0 ) { if ( ( k & 1 ) == 1 ) res = ( res * n ) % MOD ; k = k \/ 2 ; n = ( n * n ) % MOD ; } return res ; } public static void main ( String [ ] args ) { int n = 4 , k = 3 ; System . out . print ( calculateSum ( n , k ) ) ; } } ;"],"bleu":0.3259718690937879,"rouge_l":0.511836979322745}
{"id":1005,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int count ( int a [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % 2 == 0 ) { count ++ ; } } return count ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 } ; int n = a . length ; System . out . println ( count ( a , n ) ) ; } }"],"references":["class GFG { static int countPairs ( int s , int K ) { if ( K > s || ( s - K ) % 2 == 1 ) { return 0 ; } if ( ( s - K ) \/ 2 == 1 & K == 1 ) { return 0 ; } int setBits = __builtin_popcount ( K ) ; int pairsCount = ( int ) Math . pow ( 2 , setBits ) ; if ( s == K ) { pairsCount -= 2 ; } return pairsCount ; } static int __builtin_popcount ( int n ) { int count = 0 ; while ( n > 0 ) { count += n & 1 ; n >>= 1 ; } return count ; } public static void main ( String [ ] args ) { int s = 9 , K = 5 ; System . out . println ( countPairs ( s , K ) ) ; } }"],"bleu":0.276023710094081,"rouge_l":0.4077540106951872}
{"id":1006,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String a = sc . next ( ) ; String b = sc . next ( ) ; String c = \" \" ; for ( int i = 0 ; i < a . length ( ) ; i ++ ) { if ( a . charAt ( i ) == b . charAt ( i ) ) { System . out . println ( \" Yes \" ) ; return ; } } System . out . println ( \" No \" ) ; } }"],"references":["class Test { static void splitString ( String str ) { StringBuffer alpha = new StringBuffer ( ) , num = new StringBuffer ( ) , special = new StringBuffer ( ) ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { if ( Character . isDigit ( str . charAt ( i ) ) ) num . append ( str . charAt ( i ) ) ; else if ( Character . isAlphabetic ( str . charAt ( i ) ) ) alpha . append ( str . charAt ( i ) ) ; else special . append ( str . charAt ( i ) ) ; } System . out . println ( alpha ) ; System . out . println ( num ) ; System . out . println ( special ) ; } public static void main ( String args [ ] ) { String str = \" geeks01 $ $ for02geeks03 ! @ ! ! \" ; splitString ( str ) ; } }"],"bleu":0.26950048537737015,"rouge_l":0.4573872637026085}
{"id":1007,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int maxSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }"],"references":["import java . util . * ; public class GfG { private static int atMostK ( int arr [ ] , int n , int k ) { int count = 0 ; int left = 0 ; int right = 0 ; HashMap < Integer , Integer > map = new HashMap < > ( ) ; while ( right < n ) { map . put ( arr [ right ] , map . getOrDefault ( arr [ right ] , 0 ) + 1 ) ; while ( map . size ( ) > k ) { map . put ( arr [ left ] , map . get ( arr [ left ] ) - 1 ) ; if ( map . get ( arr [ left ] ) == 0 ) map . remove ( arr [ left ] ) ; left ++ ; } count += right - left + 1 ; right ++ ; } return count ; } private static int exactlyK ( int arr [ ] , int n , int k ) { return ( atMostK ( arr , n , k ) - atMostK ( arr , n , k - 1 ) ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 1 , 2 , 1 , 6 } ; int n = arr . length ; int k = 2 ; System . out . print ( exactlyK ( arr , n , k ) ) ; } }"],"bleu":0.17597731852089055,"rouge_l":0.4384080370942813}
{"id":1008,"predictions":["import java . io . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return true ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 3 ; if ( isPrime ( n ) ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ; } }"],"references":["import java . util . Scanner ; class Pattern { void display ( int n ) { int sp = n \/ 2 , st = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= sp ; j ++ ) { System . out . print ( \" ▁ \" ) ; } int count = 1 ; for ( int k = 1 ; k <= st ; k ++ ) { if ( k % 2 == 0 ) System . out . print ( \" * \" ) ; else System . out . print ( count ++ ) ; } System . out . println ( ) ; if ( i <= n \/ 2 ) { sp = sp - 1 ; st = st + 2 ; } else { sp = sp + 1 ; st = st - 2 ; } } } public static void main ( String [ ] args ) { int n = 5 ; Pattern p = new Pattern ( ) ; p . display ( n ) ; } }"],"bleu":0.20935792038434548,"rouge_l":0.36706039670158236}
{"id":1009,"predictions":["import java . io . * ; import java . util . * ; class GFG { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { System . out . print ( b [ i ] + \" \" ) ; } System . out . println ( ) ; } }"],"references":["class GFG { static final int R = 3 ; static final int C = 5 ; static int maxArea ( int mat [ ] [ ] ) { int hist [ ] [ ] = new int [ R + 1 ] [ C + 1 ] ; for ( int i = 0 ; i < C ; i ++ ) { hist [ 0 ] [ i ] = mat [ 0 ] [ i ] ; for ( int j = 1 ; j < R ; j ++ ) { hist [ j ] [ i ] = ( mat [ j ] [ i ] == 0 ) ? 0 : hist [ j - 1 ] [ i ] + 1 ; } } for ( int i = 0 ; i < R ; i ++ ) { int count [ ] = new int [ R + 1 ] ; for ( int j = 0 ; j < C ; j ++ ) { count [ hist [ i ] [ j ] ] ++ ; } int col_no = 0 ; for ( int j = R ; j >= 0 ; j -- ) { if ( count [ j ] > 0 ) { for ( int k = 0 ; k < count [ j ] ; k ++ ) { hist [ i ] [ col_no ] = j ; col_no ++ ; } } } } int curr_area , max_area = 0 ; for ( int i = 0 ; i < R ; i ++ ) { for ( int j = 0 ; j < C ; j ++ ) { curr_area = ( j + 1 ) * hist [ i ] [ j ] ; if ( curr_area > max_area ) { max_area = curr_area ; } } } return max_area ; } public static void main ( String [ ] args ) { int mat [ ] [ ] = { { 0 , 1 , 0 , 1 , 0 } , { 0 , 1 , 0 , 1 , 1 } , { 1 , 1 , 0 , 1 , 0 } } ; System . out . println ( \" Area ▁ of ▁ the ▁ largest ▁ rectangle ▁ is ▁ \" + maxArea ( mat ) ) ; } }"],"bleu":0.1719173040588659,"rouge_l":0.3961637214922217}
{"id":1010,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int count ( int a [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( a [ i ] > a [ j ] ) { count ++ ; } } } return count ; } static int count ( int a [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] > a [ i ] ) { count ++ ; } } return count ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 6 } ; int n = a . length ; System . out . println ( count ( a , n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int lcs ( int dp [ ] [ ] , String a , String b , int m , int n ) { for ( int i = 0 ; i < 100 ; i ++ ) for ( int j = 0 ; j < 100 ; j ++ ) dp [ i ] [ j ] = - 1 ; if ( m < 0 || n < 0 ) { return 0 ; } if ( dp [ m ] [ n ] != - 1 ) return dp [ m ] [ n ] ; int ans = 0 ; if ( a . charAt ( m ) == b . charAt ( n ) ) { ans = ( a . charAt ( m ) - 48 ) + lcs ( dp , a , b , m - 1 , n - 1 ) ; } else ans = Math . max ( lcs ( dp , a , b , m - 1 , n ) , lcs ( dp , a , b , m , n - 1 ) ) ; dp [ m ] [ n ] = ans ; return ans ; } static int costOfString ( String str ) { int cost = 0 ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) cost += ( str . charAt ( i ) - 48 ) ; return cost ; } public static void main ( String [ ] args ) { String a , b ; a = \"9142\" ; b = \"1429\" ; int dp [ ] [ ] = new int [ 101 ] [ 101 ] ; System . out . print ( ( costOfString ( a ) + costOfString ( b ) - 2 * lcs ( dp , a , b , a . length ( ) - 1 , b . length ( ) - 1 ) ) ) ; } }"],"bleu":0.23796155278351477,"rouge_l":0.40474884843167364}
{"id":1011,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } Arrays . sort ( arr ) ; for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( arr [ i ] + \" \" ) ; } } }"],"references":["import java . util . * ; class GFG { public static int maxUniqueNum ( int arr [ ] , int N , int M ) { int maxUnique = 0 ; for ( int i = 0 ; i < N - M ; i ++ ) { int currentUnique = 0 ; HashMap < Integer , Integer > map = new HashMap < Integer , Integer > ( ) ; for ( int k = i ; k < i + M ; k ++ ) { if ( ! map . containsKey ( arr [ k ] ) ) { map . put ( arr [ i ] , 1 ) ; currentUnique ++ ; continue ; } } if ( currentUnique > maxUnique ) maxUnique = currentUnique ; } return maxUnique ; } public static void main ( String [ ] args ) { int [ ] arr = { 5 , 3 , 5 , 2 , 3 , 2 } ; int N = 6 ; int M = 3 ; System . out . println ( maxUniqueNum ( arr , N , M ) ) ; } }"],"bleu":0.28256494839178586,"rouge_l":0.34640638864241347}
{"id":1012,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["class GFG { static String complement ( String s ) { String comps = \" \" ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == '0' ) comps += '1' ; else comps += '0' ; } return comps ; } static String nthTerm ( int n ) { String s = \"0\" ; for ( int i = 1 ; i < n ; i ++ ) s += complement ( s ) ; return s ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . print ( nthTerm ( n ) ) ; } }"],"bleu":0.2857278913039705,"rouge_l":0.5333640128854118}
{"id":1013,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int findSum ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( findSum ( n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int evenFibSum ( int limit ) { if ( limit < 2 ) return 0 ; long ef1 = 0 , ef2 = 2 ; long sum = ef1 + ef2 ; while ( ef2 <= limit ) { long ef3 = 4 * ef2 + ef1 ; if ( ef3 > limit ) break ; ef1 = ef2 ; ef2 = ef3 ; sum += ef2 ; } return ( int ) sum ; } public static void main ( String [ ] args ) { int limit = 400 ; System . out . println ( evenFibSum ( limit ) ) ; } }"],"bleu":0.31789886350701535,"rouge_l":0.5552539124880229}
{"id":1014,"predictions":["import java . io . * ; class GFG { static int nthTerm ( int N ) { return ( int ) Math . pow ( N , 2 ) + 1 ; } public static void main ( String [ ] args ) { int N = 4 ; System . out . println ( nthTerm ( N ) ) ; } }"],"references":["import java . util . * ; import java . lang . * ; import java . io . * ; class GFG { static int factorial ( int N ) { int fact = 1 ; for ( int i = 1 ; i <= N ; i ++ ) fact = fact * i ; return fact ; } static int nthTerm ( int N ) { return ( factorial ( N ) * ( N + 2 ) \/ 2 ) ; } public static void main ( String args [ ] ) { int N = 6 ; System . out . println ( nthTerm ( N ) ) ; } }"],"bleu":0.32194070463778346,"rouge_l":0.5808518005540165}
{"id":1015,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int sum ( int a [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += a [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 } ; int n = a . length ; System . out . println ( sum ( a , n ) ) ; } }"],"references":["import java . io . * ; import java . lang . * ; class GFG { public static double answer ( double X , double K ) { double i = 10 ; double MAX = Math . pow ( i , K ) - 1 ; return ( MAX - ( MAX % X ) ) ; } public static void main ( String [ ] args ) { double X = 30 ; double K = 3 ; System . out . println ( ( int ) answer ( X , K ) ) ; } }"],"bleu":0.3517137695288987,"rouge_l":0.5549803921568627}
{"id":1016,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int countPairs ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ i ] > arr [ j ] ) { count ++ ; } } } return count ; } static int countPairs ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ i ] > arr [ j ] ) { count ++ ; } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( countPairs ( arr , n ) ) ; } }"],"references":["class GFG { static int maxLength ( int [ ] a , int n ) { int maximum = 1 ; int left [ ] = new int [ n ] ; int right [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { left [ i ] = 1 ; right [ i ] = 1 ; } for ( int i = n - 2 ; i >= 0 ; i -- ) { if ( a [ i ] > a [ i + 1 ] ) { right [ i ] = right [ i + 1 ] + 1 ; } maximum = Math . max ( maximum , right [ i ] ) ; } for ( int i = 1 ; i < n ; i ++ ) { if ( a [ i ] < a [ i - 1 ] ) { left [ i ] = left [ i - 1 ] + 1 ; } } if ( n > 2 ) { for ( int i = 1 ; i < n - 1 ; i ++ ) { if ( a [ i - 1 ] > a [ i + 1 ] ) { maximum = Math . max ( maximum , left [ i - 1 ] + right [ i + 1 ] ) ; } } } return maximum ; } public static void main ( String [ ] args ) { int arr [ ] = { 8 , 7 , 3 , 5 , 2 , 9 } ; int n = arr . length ; System . out . println ( maxLength ( arr , n ) ) ; } }"],"bleu":0.3300877858477377,"rouge_l":0.5310717502251576}
{"id":1017,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["public class GFG { public static void main ( String args [ ] ) { int n = 3 ; int a [ ] = { 1 , 2 , 3 } ; int i = 0 ; long sum = 0 ; for ( i = 0 ; i < n ; i ++ ) { sum += a [ i ] ; } long x = sum \/ n ; if ( x * n == sum ) System . out . println ( x ) ; else System . out . println ( \" - 1\" ) ; } }"],"bleu":0.306353846169819,"rouge_l":0.45554011809656125}
{"id":1018,"predictions":["import java . io . * ; import java . util . * ; import java . lang . * ; class GFG { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { if ( a [ i ] == a [ j ] ) { ans ++ ; } } } System . out . println ( ans ) ; } }"],"references":["import java . util . * ; public class GFG { public static ArrayList < Integer > getPerfectSquares ( int n ) { ArrayList < Integer > perfectSquares = new ArrayList < > ( ) ; int current = 1 , i = 1 ; while ( current <= n ) { perfectSquares . add ( current ) ; current = ( int ) Math . pow ( ++ i , 2 ) ; } return perfectSquares ; } public static int countTriplets ( int n ) { ArrayList < Integer > perfectSquares = getPerfectSquares ( ( int ) Math . pow ( n , 2 ) ) ; int count = 0 ; for ( int a = 1 ; a <= n ; a ++ ) { int aSquare = ( int ) Math . pow ( a , 2 ) ; for ( int i = 0 ; i < perfectSquares . size ( ) ; i ++ ) { int cSquare = perfectSquares . get ( i ) ; int bSquare = cSquare - aSquare ; int b = ( int ) Math . sqrt ( bSquare ) ; int c = ( int ) Math . sqrt ( cSquare ) ; if ( c < a || ! perfectSquares . contains ( bSquare ) ) continue ; if ( ( b >= a ) && ( b <= c ) && ( aSquare + bSquare == cSquare ) ) count ++ ; } } return count ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( countTriplets ( n ) ) ; } }"],"bleu":0.17653703314255378,"rouge_l":0.37404849168311255}
{"id":1019,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int centered_pentagonal_Num ( int n ) { return ( 5 * n * n - 5 * n + 2 ) \/ 2 ; } public static void main ( String [ ] args ) { int n = 7 ; System . out . print ( n + \" th ▁ Centered ▁ \" + \" pentagonal ▁ number : ▁ \" ) ; System . out . println ( centered_pentagonal_Num ( n ) ) ; } }"],"bleu":0.4519019445889654,"rouge_l":0.5962854349951124}
{"id":1020,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 3 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . io . * ; class GFG { static void PossibleValues ( int b , int x , int n ) { int leastdivisible = ( b \/ x + 1 ) * x ; int flag = 1 ; while ( leastdivisible <= n ) { if ( leastdivisible - b >= 1 ) { System . out . print ( leastdivisible - b + \" ▁ \" ) ; leastdivisible += x ; flag = 0 ; } else break ; } if ( flag > 0 ) System . out . println ( - 1 ) ; } public static void main ( String [ ] args ) { int b = 10 , x = 6 , n = 40 ; PossibleValues ( b , x , n ) ; } }"],"bleu":0.2984177159312886,"rouge_l":0.3851941421469838}
{"id":1021,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % k == 0 ) { count ++ ; } } System . out . println ( count ) ; } }"],"references":["static int findLongestRepeatingSubSeq ( String str ) { int n = str . length ( ) ; int dp [ ] [ ] = new int [ n + 1 ] [ n + 1 ] ; for ( int i = 0 ; i <= n ; i ++ ) for ( int j = 0 ; j <= n ; j ++ ) dp [ i ] [ j ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { if ( str . charAt ( i - 1 ) == str . charAt ( j - 1 ) && i != j ) dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ] ; else dp [ i ] [ j ] = Math . max ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] ) ; } } return dp [ n ] [ n ] ; }"],"bleu":0.2377198831434019,"rouge_l":0.37562793712526327}
{"id":1022,"predictions":["import java . io . * ; class GFG { static int nthTerm ( int n ) { return ( int ) Math . pow ( 2 , n - 1 ) ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( nthTerm ( n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int countIntegralSolutions ( int n ) { return ( ( n + 1 ) * ( n + 2 ) ) \/ 2 ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( countIntegralSolutions ( n ) ) ; } }"],"bleu":0.7065358351723449,"rouge_l":0.8284708249496981}
{"id":1023,"predictions":["import java . io . * ; class GFG { static int countPairs ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ i ] > arr [ j ] ) count ++ ; } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 1 , 1 , 1 } ; int n = arr . length ; System . out . println ( countPairs ( arr , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static String check ( int [ ] arr , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( ( arr [ i ] & 1 ) != 0 ) count ++ ; } if ( ( count & 1 ) != 0 ) return \" Odd \" ; else return \" Even \" ; } public static void main ( String args [ ] ) { int [ ] arr = { 3 , 9 , 12 , 13 , 15 } ; int n = arr . length ; System . out . println ( check ( arr , n ) ) ; } }"],"bleu":0.5637908519582204,"rouge_l":0.7285394376710626}
{"id":1024,"predictions":["import java . io . * ; import java . util . * ; import java . lang . * ; class GFG { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { System . out . print ( b [ i ] + \" \" ) ; } System . out . println ( ) ; } }"],"references":["import java . util . * ; class GFG { static void dfs ( Vector < Integer > graph [ ] , int node , int dist [ ] , boolean vis [ ] , int c ) { if ( vis [ node ] ) { return ; } vis [ node ] = true ; dist [ node ] = c ; for ( int i = 0 ; i < graph [ node ] . size ( ) ; i ++ ) { if ( ! vis [ graph [ node ] . get ( i ) ] ) { dfs ( graph , graph [ node ] . get ( i ) , dist , vis , c + 1 ) ; } } } static int countOfNodes ( Vector < Integer > graph [ ] , int n ) { boolean [ ] vis = new boolean [ n + 1 ] ; int [ ] dist = new int [ n + 1 ] ; dfs ( graph , 1 , dist , vis , 0 ) ; int even = 0 , odd = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( dist [ i ] % 2 == 0 ) { even ++ ; } else { odd ++ ; } } int ans = ( ( even * ( even - 1 ) ) + ( odd * ( odd - 1 ) ) ) \/ 2 ; return ans ; } public static void main ( String [ ] args ) { int n = 5 ; Vector < Integer > [ ] graph = new Vector [ n + 1 ] ; for ( int i = 0 ; i < n + 1 ; i ++ ) { graph [ i ] = new Vector < Integer > ( ) ; } graph [ 0 ] = new Vector < Integer > ( ) ; graph [ 1 ] = new Vector ( Arrays . asList ( 2 ) ) ; graph [ 2 ] = new Vector < Integer > ( 1 , 3 ) ; graph [ 3 ] = new Vector < Integer > ( 2 ) ; int ans = countOfNodes ( graph , n ) ; System . out . println ( ans ) ; } }"],"bleu":0.1725932883988139,"rouge_l":0.37646763672854994}
{"id":1025,"predictions":["import java . io . * ; import java . util . * ; class GFG { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; System . out . println ( \" YES \" ) ; for ( int i = 1 ; i <= n ; i ++ ) { System . out . println ( i + \" \" + i ) ; } } }"],"references":["public class GFG { static boolean flipsPossible ( int [ ] a , int n ) { int count_odd = 0 , count_even = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( ( a [ i ] & 1 ) == 1 ) count_odd ++ ; else count_even ++ ; } if ( count_odd % 2 == 1 && count_even % 2 == 1 ) return false ; else return true ; } public static void main ( String [ ] args ) { int [ ] a = { 1 , 0 , 1 , 1 , 0 , 1 } ; int n = a . length ; if ( flipsPossible ( a , n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.21177811668264573,"rouge_l":0.3416931890515595}
{"id":1026,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int n ) { if ( n == 0 ) return false ; return false ; } static boolean isPrime ( int n ) { if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 12 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . io . * ; class GFG { static void findSeries ( int num , int first , int sec ) { System . out . print ( first + \" ▁ \" + sec + \" ▁ \" ) ; int counter = 0 , sum ; while ( counter < num - 2 ) { sum = first + sec ; System . out . print ( sum + \" ▁ \" ) ; first = sec ; sec = sum ; counter ++ ; } } public static void main ( String [ ] args ) { int n = 5 , first = 2 , sec = 4 ; findSeries ( n , first , sec ) ; } }"],"bleu":0.29835324836836774,"rouge_l":0.3942605997931748}
{"id":1027,"predictions":["import java . io . * ; import java . util . * ; import java . lang . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) throws java . lang . Exception { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int N = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ M ] ; for ( int i = 0 ; i < M ; i ++ ) { st = new StringTokenizer ( br . readLine ( ) ) ; a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < M ; i ++ ) { for ( int j = 0 ; j < M ; j ++ ) { a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } } System . out . println ( a [ N - 1 ] ) ; } }"],"references":["import java . io . * ; class GFG { static int countOdd ( int n ) { int coun = 0 , m , j , i ; for ( i = n - 2 ; i >= 1 ; i -- ) { if ( i >= 1 ) { m = ( n - i ) \/ 2 ; j = ( i * ( i + 1 ) ) \/ 2 ; coun += j * m ; } else { m = ( ( n - 1 ) - i ) \/ 2 ; j = ( i * ( i + 1 ) ) \/ 2 ; coun += j * m ; } } return coun ; } static int countEven ( int n ) { int coun = 0 , m , j , i ; for ( i = n - 2 ; i >= 1 ; i -- ) { if ( i >= 1 ) { m = ( ( n - 1 ) - i ) \/ 2 ; j = ( i * ( i + 1 ) ) \/ 2 ; coun += j * m ; } else { m = ( n - i ) \/ 2 ; j = ( i * ( i + 1 ) ) \/ 2 ; coun += j * m ; } } return coun ; } public static void main ( String [ ] args ) { int n = 5 ; if ( n >= 1 ) System . out . println ( countOdd ( n ) ) ; else System . out . println ( countEven ( n ) ) ; } }"],"bleu":0.1452146163071807,"rouge_l":0.3495284708129402}
{"id":1028,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false"],"references":["class GFG { static long mod = ( long ) ( 1e9 + 7 ) ; static long factorial ( long n , long p ) { long res = 1 ; for ( int i = 2 ; i <= n ; i ++ ) res = ( res * i ) % p ; return res ; } static long power ( long x , long y , long p ) { long res = 1 ; x = x % p ; while ( y > 0 ) { if ( ( y & 1 ) == 1 ) res = ( res * x ) % p ; y = y >> 1 ; x = ( x * x ) % p ; } return res ; } static long modInverse ( long n , long p ) { return power ( n , p - 2 , p ) ; } static long nCrModP ( long n , long r , long p ) { if ( r == 0 ) return 1 ; long fac [ ] = new long [ ( int ) n + 1 ] ; fac [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) fac [ i ] = fac [ i - 1 ] * i % p ; return ( fac [ ( int ) n ] * modInverse ( fac [ ( int ) r ] , p ) % p * modInverse ( fac [ ( int ) n - ( int ) r ] , p ) % p ) % p ; } static long countArrangements ( long n , long k , long p ) { return ( factorial ( n , p ) * nCrModP ( k , n , p ) ) % p ; } public static void main ( String [ ] args ) { long N = 5 , K = 8 ; System . out . println ( countArrangements ( N , K , mod ) ) ; } }"],"bleu":0.030905633751632536,"rouge_l":0.2682540311398122}
{"id":1029,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int countPairs ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 1 , 1 , 1 } ; int n = arr . length ; System . out . println ( countPairs ( arr , n ) ) ; } }"],"references":["class GFG { static void subString ( char str [ ] , int n ) { for ( int len = 1 ; len <= n ; len ++ ) { for ( int i = 0 ; i <= n - len ; i ++ ) { int j = i + len - 1 ; for ( int k = i ; k <= j ; k ++ ) { System . out . print ( str [ k ] ) ; } System . out . println ( ) ; } } } public static void main ( String [ ] args ) { char str [ ] = { ' a ' , ' b ' , ' c ' } ; subString ( str , str . length ) ; } }"],"bleu":0.33435919151984744,"rouge_l":0.47680282400403445}
{"id":1030,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["import java . io . * ; import java . math . * ; class GFG { static int sumofseries ( int n ) { int res = 0 ; for ( int i = 1 ; i <= n ; i ++ ) res += ( i ) * ( i + 1 ) * ( i + 2 ) ; return res ; } public static void main ( String [ ] args ) { System . out . println ( sumofseries ( 3 ) ) ; } }"],"bleu":0.5662068988384821,"rouge_l":0.7579110852261697}
{"id":1031,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int count ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ i ] % arr [ j ] == 0 ) count ++ ; } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( count ( arr , n ) ) ; } }"],"references":["import java . util . Arrays ; class GFG { static void countWaysToJump ( int arr [ ] , int n ) { int count_jump [ ] = new int [ n ] ; Arrays . fill ( count_jump , 0 ) ; for ( int i = n - 2 ; i >= 0 ; i -- ) { if ( arr [ i ] >= n - i - 1 ) count_jump [ i ] ++ ; for ( int j = i + 1 ; j < n - 1 && j <= arr [ i ] + i ; j ++ ) if ( count_jump [ j ] != - 1 ) count_jump [ i ] += count_jump [ j ] ; if ( count_jump [ i ] == 0 ) count_jump [ i ] = - 1 ; } for ( int i = 0 ; i < n ; i ++ ) System . out . print ( count_jump [ i ] + \" ▁ \" ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 3 , 5 , 8 , 9 , 1 , 0 , 7 , 6 , 8 , 9 } ; int n = arr . length ; countWaysToJump ( arr , n ) ; } }"],"bleu":0.32798828855946094,"rouge_l":0.5276906114833346}
{"id":1032,"predictions":["import java . io . * ; import java . util . * ; import java . lang . * ; import java . math . * ; class GFG { static int nthTerm ( int n ) { return ( int ) Math . pow ( n , 2 ) + 1 ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( nthTerm ( n ) ) ; } }"],"references":["import java . util . * ; class gfg { public static double calculateSum ( double n ) { return 2 * ( Math . pow ( n , 6 ) + 15 * Math . pow ( n , 4 ) + 15 * Math . pow ( n , 2 ) + 1 ) ; } public static void main ( String [ ] args ) { double n = 1.4142 ; System . out . println ( ( int ) Math . ceil ( calculateSum ( n ) ) ) ; } }"],"bleu":0.4713479184436872,"rouge_l":0.6120766887654543}
{"id":1033,"predictions":["import java . io . * ; class GFG { static boolean isVowel ( int a , int b ) { if ( a == b ) return true ; if ( a == b ) return true ; if ( a == b ) return true ; if ( a == b ) return true ; return false ; } public static void main ( String [ ] args ) { int a = 1 , b = 3 ; if ( isVowel ( a , b ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; import java . lang . * ; import java . io . * ; class Gfg { static boolean isMajority ( int a [ ] , int n ) { HashMap < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) if ( mp . containsKey ( a [ i ] ) ) mp . put ( a [ i ] , mp . get ( a [ i ] ) + 1 ) ; else mp . put ( a [ i ] , 1 ) ; for ( Map . Entry < Integer , Integer > x : mp . entrySet ( ) ) if ( x . getValue ( ) >= n \/ 2 ) return true ; return false ; } public static void main ( String [ ] args ) { int a [ ] = { 2 , 3 , 9 , 2 , 2 } ; int n = a . length ; if ( isMajority ( a , n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.22237705894813745,"rouge_l":0.4995859022729365}
{"id":1034,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["import java . util . HashSet ; import java . util . Set ; public class MaxPossibleSuminWindow { static int returnMaxSum ( int A [ ] , int B [ ] , int n ) { Set < Integer > mp = new HashSet < Integer > ( ) ; int result = 0 ; int curr_sum = 0 , curr_begin = 0 ; for ( int i = 0 ; i < n ; ++ i ) { while ( mp . contains ( A [ i ] ) ) { mp . remove ( A [ curr_begin ] ) ; curr_sum -= B [ curr_begin ] ; curr_begin ++ ; } mp . add ( A [ i ] ) ; curr_sum += B [ i ] ; result = Integer . max ( result , curr_sum ) ; } return result ; } public static void main ( String [ ] args ) { int A [ ] = { 0 , 1 , 2 , 3 , 0 , 1 , 4 } ; int B [ ] = { 9 , 8 , 1 , 2 , 3 , 4 , 5 } ; int n = A . length ; System . out . println ( returnMaxSum ( A , B , n ) ) ; } }"],"bleu":0.338021849652344,"rouge_l":0.5421570982464569}
{"id":1035,"predictions":["import java . util . * ; class GFG { static boolean isVowel ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) return false ; } return true ; } static boolean isVowel ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { if ( isVowel ( arr [ i ] , arr [ i ] ) ) return true ; } return true ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; if ( isVowel ( arr , n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . ArrayList ; public class PrintPath { public static boolean hasPath ( Node root , ArrayList < Integer > arr , int x ) { if ( root == null ) return false ; arr . add ( root . data ) ; if ( root . data == x ) return true ; if ( hasPath ( root . left , arr , x ) || hasPath ( root . right , arr , x ) ) return true ; arr . remove ( arr . size ( ) - 1 ) ; return false ; } public static void printPath ( Node root , int x ) { ArrayList < Integer > arr = new ArrayList < > ( ) ; if ( hasPath ( root , arr , x ) ) { for ( int i = 0 ; i < arr . size ( ) - 1 ; i ++ ) System . out . print ( arr . get ( i ) + \" - > \" ) ; System . out . print ( arr . get ( arr . size ( ) - 1 ) ) ; } else System . out . print ( \" No ▁ Path \" ) ; } public static void main ( String args [ ] ) { Node root = new Node ( 1 ) ; root . left = new Node ( 2 ) ; root . right = new Node ( 3 ) ; root . left . left = new Node ( 4 ) ; root . left . right = new Node ( 5 ) ; root . right . left = new Node ( 6 ) ; root . right . right = new Node ( 7 ) ; int x = 5 ; printPath ( root , x ) ; } } class Node { int data ; Node left , right ; Node ( int data ) { this . data = data ; left = right = null ; } } ;"],"bleu":0.1321838805577918,"rouge_l":0.320996316435713}
{"id":1036,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int maxSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } static int maxSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static void SieveOfEratosthenes ( boolean prime [ ] , int p_size ) { prime [ 0 ] = false ; prime [ 1 ] = false ; for ( int p = 2 ; p * p <= p_size ; p ++ ) { if ( prime [ p ] ) { for ( int i = p * 2 ; i <= p_size ; i += p ) prime [ i ] = false ; } } } static int xorOfElements ( int arr [ ] , int n ) { boolean prime [ ] = new boolean [ n + 1 ] ; Arrays . fill ( prime , true ) ; SieveOfEratosthenes ( prime , n + 1 ) ; int i , j ; HashMap < Integer , Integer > m = new HashMap < > ( ) ; for ( i = 0 ; i < n ; i ++ ) { if ( m . containsKey ( arr [ i ] ) ) m . put ( arr [ i ] , m . get ( arr [ i ] ) + 1 ) ; else m . put ( arr [ i ] , 1 ) ; } int xor = 0 ; for ( Map . Entry < Integer , Integer > entry : m . entrySet ( ) ) { int key = entry . getKey ( ) ; int value = entry . getValue ( ) ; if ( prime [ value ] ) { xor ^= ( key ) ; } } return xor ; } public static void main ( String args [ ] ) { int arr [ ] = { 5 , 4 , 6 , 5 , 4 , 6 } ; int n = arr . length ; System . out . println ( xorOfElements ( arr , n ) ) ; } }"],"bleu":0.24745214492440845,"rouge_l":0.4943980929678188}
{"id":1037,"predictions":["import java . util . * ; class GFG { static boolean isVowel ( int a [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( a [ i ] < a [ j ] ) return false ; } } return true ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 6 } ; int n = a . length ; if ( isVowel ( a , n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static void minimumFlip ( String s , int x , int y ) { s = s + s ; boolean isOpposite = false ; if ( x > y ) { swap ( x , y ) ; isOpposite = true ; } int valClockwise = 0 ; char cur = s . charAt ( x ) ; for ( int i = x ; i <= y ; i ++ ) { if ( s . charAt ( i ) != cur ) { cur = s . charAt ( i ) ; valClockwise ++ ; } } int valAnticlockwise = 0 ; cur = s . charAt ( y ) ; x += s . length ( ) ; for ( int i = y ; i < x ; i ++ ) { if ( s . charAt ( i ) != cur ) { cur = s . charAt ( i ) ; valAnticlockwise ++ ; } } if ( valClockwise <= valAnticlockwise ) { if ( ! isOpposite ) { System . out . println ( \" Clockwise ▁ \" + valClockwise ) ; } else { System . out . println ( \" Anti - clockwise ▁ \" + valAnticlockwise ) ; } } else if ( ! isOpposite ) { System . out . println ( \" Anti - clockwise ▁ \" + valAnticlockwise ) ; } else { System . out . println ( \" Clockwise ▁ \" + valClockwise ) ; } } static void swap ( int a , int b ) { int c = a ; a = b ; b = c ; } public static void main ( String [ ] args ) { int x = 0 , y = 8 ; String s = \"000110\" ; minimumFlip ( s , x , y ) ; } }"],"bleu":0.14564903703723311,"rouge_l":0.27301547833654505}
{"id":1038,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = sc . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { a [ i ] = sc . nextInt ( ) ; } } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { System . out . print ( a [ i ] + \" \" ) ; } System . out . println ( ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } }"],"references":["class GFG { final static int MAX = 26 ; static int maxSubStr ( char [ ] str1 , int len1 , char [ ] str2 , int len2 ) { if ( len1 > len2 ) return 0 ; int freq1 [ ] = new int [ MAX ] ; for ( int i = 0 ; i < len1 ; i ++ ) freq1 [ i ] = 0 ; for ( int i = 0 ; i < len1 ; i ++ ) freq1 [ str1 [ i ] - ' a ' ] ++ ; int freq2 [ ] = new int [ MAX ] ; for ( int i = 0 ; i < len2 ; i ++ ) freq2 [ i ] = 0 ; for ( int i = 0 ; i < len2 ; i ++ ) freq2 [ str2 [ i ] - ' a ' ] ++ ; int minPoss = Integer . MAX_VALUE ; for ( int i = 0 ; i < MAX ; i ++ ) { if ( freq1 [ i ] == 0 ) continue ; if ( freq1 [ i ] > freq2 [ i ] ) return 0 ; minPoss = Math . min ( minPoss , freq2 [ i ] \/ freq1 [ i ] ) ; } return minPoss ; } public static void main ( String [ ] args ) { String str1 = \" geeks \" , str2 = \" gskefrgoekees \" ; int len1 = str1 . length ( ) ; int len2 = str2 . length ( ) ; System . out . println ( maxSubStr ( str1 . toCharArray ( ) , len1 , str2 . toCharArray ( ) , len2 ) ) ; } }"],"bleu":0.22640797541634625,"rouge_l":0.40565}
{"id":1039,"predictions":["import java . io . * ; import java . util . * ; class GFG { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = \" \" ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i ) ) { System . out . println ( \" YES \" ) ; return ; } } System . out . println ( \" NO \" ) ; for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( s . charAt ( i ) ) ; } } }"],"references":["class GFG { private static boolean isValidString ( String str , int n ) { int index = str . indexOf ( \" b \" ) ; if ( index == 0 ) return false ; while ( index != - 1 ) { if ( str . charAt ( index - 1 ) != ' a ' ) return false ; if ( index + 1 < n && str . charAt ( index + 1 ) != ' b ' ) return false ; if ( index + 2 < n && str . charAt ( index + 2 ) == ' b ' ) return false ; if ( index == n - 1 ) return false ; index = str . indexOf ( \" b \" , index + 2 ) ; } return true ; } public static void main ( String [ ] args ) { String str = \" abbaaabbabba \" ; int n = str . length ( ) ; System . out . println ( isValidString ( str , n ) ) ; } }"],"bleu":0.19564354297191774,"rouge_l":0.35201486697965567}
{"id":1040,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; return false ; } static boolean isPrime ( int n ) { if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 12 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static int gcd ( int a , int b ) { if ( ( a % b ) == 0 ) return b ; return gcd ( b , a % b ) ; } static int firstFactorialDivisibleNumber ( int x ) { int i = 1 ; int new_x = x ; for ( i = 1 ; i < x ; i ++ ) { new_x \/= gcd ( i , new_x ) ; if ( new_x == 1 ) break ; } return i ; } public static void main ( String [ ] args ) { int x = 16 ; System . out . print ( firstFactorialDivisibleNumber ( x ) ) ; } }"],"bleu":0.235252330893089,"rouge_l":0.4777062018441328}
{"id":1041,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int xorLessK ( int arr [ ] , int n , int k ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int tempXor = 0 ; for ( int j = i ; j < n ; j ++ ) { tempXor ^= arr [ j ] ; if ( tempXor < k ) count ++ ; } } return count ; } public static void main ( String [ ] args ) { int k = 3 ; int arr [ ] = new int [ ] { 8 , 9 , 10 , 11 , 12 } ; int n = arr . length ; System . out . println ( xorLessK ( arr , n , k ) ) ; } }"],"bleu":0.48344709590904367,"rouge_l":0.6887687687687689}
{"id":1042,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int maxSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }"],"references":["class GFG { static void findNumbers ( int arr [ ] , int n ) { int num [ ] = new int [ n ] ; int b_minus_a = arr [ n - 1 ] - arr [ 1 ] ; num [ 1 ] = ( arr [ 0 ] + b_minus_a ) \/ 2 ; num [ 0 ] = arr [ 0 ] - num [ 1 ] ; for ( int i = 1 ; i <= ( n - 2 ) ; i ++ ) num [ i + 1 ] = arr [ i ] - num [ 0 ] ; System . out . print ( \" Numbers ▁ are : ▁ \" ) ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( num [ i ] + \" ▁ \" ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 13 , 10 , 14 , 9 , 17 , 21 , 16 , 18 , 13 , 17 } ; int n = 5 ; findNumbers ( arr , n ) ; } }"],"bleu":0.2504723427338378,"rouge_l":0.4365148438255489}
{"id":1043,"predictions":["import java . util . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; return false ; } static boolean isPrime ( int n ) { if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; return false ; return false ; } public static void main ( String [ ] args ) { int n = 10 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; class GFG { static Vector < Long > pr = new Vector < > ( ) ; static boolean prime [ ] = new boolean [ 10000000 + 1 ] ; static void sieve ( long n ) { for ( int i = 2 ; i <= n ; i += 1 ) { prime [ i ] = true ; } for ( int p = 2 ; ( int ) p * ( int ) p <= n ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = ( int ) p * ( int ) p ; i <= n ; i += p ) prime [ i ] = false ; } } for ( int p = 2 ; p <= n ; p ++ ) if ( prime [ p ] ) pr . add ( ( long ) p ) ; } static long SemiPrimeSum ( long N ) { long ans = 0 ; for ( int i = 0 ; i < pr . size ( ) ; i += 1 ) { for ( int j = i ; j < pr . size ( ) ; j += 1 ) { if ( ( long ) pr . get ( i ) * ( long ) pr . get ( j ) > N ) break ; ans += ( long ) pr . get ( i ) * ( long ) pr . get ( j ) ; } } return ans ; } public static void main ( String [ ] args ) { long N = 6 ; sieve ( N ) ; System . out . println ( SemiPrimeSum ( N ) ) ; } }"],"bleu":0.15738401840785315,"rouge_l":0.38672576301615796}
{"id":1044,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i ) ) count ++ ; } System . out . println ( count ) ; } }"],"references":["class GFG { static String largestPalinSub ( String s ) { String res = \" \" ; char mx = s . charAt ( 0 ) ; for ( int i = 1 ; i < s . length ( ) ; i ++ ) mx = ( char ) Math . max ( ( int ) mx , ( int ) s . charAt ( i ) ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) if ( s . charAt ( i ) == mx ) res += s . charAt ( i ) ; return res ; } public static void main ( String [ ] args ) { String s = \" geeksforgeeks \" ; System . out . println ( largestPalinSub ( s ) ) ; } }"],"bleu":0.31792264175607543,"rouge_l":0.4968968192397207}
{"id":1045,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { for ( int k = 0 ; k < n ; k ++ ) { for ( int l = 0 ; l < n ; l ++ ) { if ( a [ i ] > a [ j ] ) { a [ i ] = a [ j ] ; break ; } } } } out . println ( a [ n - 1 ] ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . util . ArrayList ; import java . util . Deque ; import java . util . LinkedList ; public class PrintAllPalindrome { public static void main ( String [ ] args ) { String input = \" nitin \" ; System . out . println ( \" All ▁ possible ▁ palindrome \" + \" partions ▁ for ▁ \" + input + \" ▁ are ▁ : \" ) ; allPalPartitions ( input ) ; } private static void allPalPartitions ( String input ) { int n = input . length ( ) ; ArrayList < ArrayList < String > > allPart = new ArrayList < > ( ) ; Deque < String > currPart = new LinkedList < String > ( ) ; allPalPartitonsUtil ( allPart , currPart , 0 , n , input ) ; for ( int i = 0 ; i < allPart . size ( ) ; i ++ ) { for ( int j = 0 ; j < allPart . get ( i ) . size ( ) ; j ++ ) { System . out . print ( allPart . get ( i ) . get ( j ) + \" ▁ \" ) ; } System . out . println ( ) ; } } private static void allPalPartitonsUtil ( ArrayList < ArrayList < String > > allPart , Deque < String > currPart , int start , int n , String input ) { if ( start >= n ) { allPart . add ( new ArrayList < > ( currPart ) ) ; return ; } for ( int i = start ; i < n ; i ++ ) { if ( isPalindrome ( input , start , i ) ) { currPart . addLast ( input . substring ( start , i + 1 ) ) ; allPalPartitonsUtil ( allPart , currPart , i + 1 , n , input ) ; currPart . removeLast ( ) ; } } } private static boolean isPalindrome ( String input , int start , int i ) { while ( start < i ) { if ( input . charAt ( start ++ ) != input . charAt ( i -- ) ) return false ; } return true ; } }"],"bleu":0.2567456430336724,"rouge_l":0.38662330080894003}
{"id":1046,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } Arrays . sort ( arr ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } System . out . println ( sum ) ; } }"],"references":["import java . util . * ; import java . lang . * ; import java . io . * ; class GFG { public static int findLength ( String str , int n ) { int current_sum = 0 ; int max_sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { current_sum += ( str . charAt ( i ) == '0' ? 1 : - 1 ) ; if ( current_sum < 0 ) current_sum = 0 ; max_sum = Math . max ( current_sum , max_sum ) ; } return max_sum == 0 ? - 1 : max_sum ; } public static void main ( String [ ] args ) { String str = \"11000010001\" ; int n = str . length ( ) ; System . out . println ( findLength ( str , n ) ) ; } }"],"bleu":0.3411058614477466,"rouge_l":0.430964876867178}
{"id":1047,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int countPairs ( int a [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % 2 == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = a . length ; System . out . println ( countPairs ( a , n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int Series ( int Arr [ ] , int N , int K ) { int count = 0 ; for ( int i = 0 ; i < N ; i ++ ) if ( Arr [ i ] == 1 ) count ++ ; if ( K >= ( N - count ) ) return 1 ; else return 0 ; } public static void main ( String [ ] args ) { int Arr [ ] = { 5 , 1 , 2 } ; int N = Arr . length ; int K = 2 ; int result = Series ( Arr , N , K ) ; if ( result == 1 ) System . out . println ( \" Possible \" ) ; else System . out . println ( \" Not ▁ Possible \" ) ; } }"],"bleu":0.39453028055332995,"rouge_l":0.6230269266480966}
{"id":1048,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["class GFG { static int countDigit ( int n ) { boolean prime [ ] = new boolean [ 10 ] ; for ( int i = 0 ; i < 10 ; i ++ ) prime [ i ] = false ; prime [ 2 ] = prime [ 3 ] = true ; prime [ 5 ] = prime [ 7 ] = true ; int temp = n , count = 0 ; while ( temp != 0 ) { int d = temp % 10 ; temp \/= 10 ; if ( d > 0 && n % d == 0 && prime [ d ] == true ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int n = 1032 ; System . out . println ( countDigit ( n ) ) ; } }"],"bleu":0.3039204286095686,"rouge_l":0.5034086831718694}
{"id":1049,"predictions":["import java . io . * ; import java . util . * ; class GFG { public static void main ( String [ ] args ) { int a = 5 ; int b = 5 ; System . out . println ( \" Minimum : \" + a ) ; System . out . println ( a + \" \\n \" ) ; } }"],"references":["import java . util . * ; class GFG { double polyapothem ( double n , double a ) { if ( a < 0 && n < 0 ) return - 1 ; return ( a \/ ( 2 * java . lang . Math . tan ( ( 180 \/ n ) * 3.14159 \/ 180 ) ) ) ; } public static void main ( String args [ ] ) { double a = 9 , n = 6 ; GFG g = new GFG ( ) ; System . out . println ( g . polyapothem ( n , a ) ) ; } }"],"bleu":0.21804791763748888,"rouge_l":0.42489730308983753}
{"id":1050,"predictions":["import java . io . * ; import java . util . * ; import java . lang . * ; import java . math . * ; import java . text . * ; import java . lang . * ; import java . text . * ; import java . lang . * ; import java . text . * ; import java . lang . * ; import java . lang . * ; import java . text . * ; import java . lang . * ; import java . text . * ; import java . lang . * ; import java . text . * ; import java . lang . * ; import java . lang . * ; import java . text . * ; import java . lang . * ; import java . text . * ; import java . lang . * ; import java . lang . * ; import java . text . * ; import java . lang . * ; import java . text . * ; import java . lang . * ; import java . lang . * ; import java . text . * ; import java . lang . * ; import java . lang . * ; import java . lang . * ; import java . text . * ; import java . lang . * ; import java . lang . * ; import java . text . * ; import java . lang . * ; import java . lang . * ; import java . lang . * ; import java . text . * ; import java . lang . * ; import java . lang . * ; import java . lang . * ; import java . lang . * ; import java . text . * ; import java . lang . * ; import java . lang . * ; import java . lang . * ; import java . text . * ; import java . lang . * ; import java . lang . * ; import java . lang . * ; import java . text . * ; import java . lang . * ; import java . lang . * ; import java . * ; import java . lang . * ; import java . lang . * ; import java . lang . * ; import java . lang . * ; import java . lang . * ; import java . lang . * ; import java . * ; import java . lang . * ; import java . lang . * ; import java . lang . * ; import java . lang . * ; import java . lang . * ; import java . * ; import java . lang . * ; import java . lang . * ; import java . lang . * ; import java"],"references":["import java . io . * ; class GFG { static long evenPowerSum ( int n ) { return ( 8 * n * ( n + 1 ) * ( 2 * n + 1 ) * ( 3 * n * n + 3 * n - 1 ) ) \/ 15 ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( evenPowerSum ( n ) ) ; } }"],"bleu":0.01631455538929112,"rouge_l":0.07822518594511413}
{"id":1051,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int countPairs ( int n ) { int count = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( n % i == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( countPairs ( n ) ) ; } }"],"references":["class GFG { static void printModulus ( int X , int Y ) { int n = Math . max ( X , Y ) ; for ( int i = 1 ; i <= n ; i ++ ) { if ( X % i == Y % i ) System . out . print ( i + \" ▁ \" ) ; } } public static void main ( String [ ] args ) { int X , Y ; X = 10 ; Y = 20 ; printModulus ( X , Y ) ; } }"],"bleu":0.45173020146000104,"rouge_l":0.5745846891591027}
{"id":1052,"predictions":["import java . io . * ; import java . util . * ; class GFG { public static void main ( String [ ] args ) { int a = 2 , b = 5 , c = 5 ; System . out . println ( a + \" \" + b + \" \\n \" + c + \" \\n \" + \" + c + \" \\n \" + \" + c + \" \\n \" + c + \" \\n \" + c + \" \\n \" + c + \" \\n \" + c + \" \\n \" + c + \" \\n \" + c + \" \\n \" + c + \" \\n \" + c + \" \\n \" + c + \" \\n \" + c + \" \\n \" + c + \" \\n \" + c + c + \" \\n \" + c + \" \\n \" + c + c + \" \\n \" + c + c + \" \\n \" + c + c + \" \\n \" + c + c + \" \\n \" + c + c + c + \" \\n \" + c + c + c + \" \\n \" + c + c + c + \" \\n \" + c + c + c + \" \\n \" + c + c + c + c + \" \\n \" + c + c + c + c + \" \\n \" + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c ) ; } }"],"references":["import java . io . * ; class GFG { static int __gcd ( int a , int b ) { if ( a == 0 || b == 0 ) return 0 ; if ( a == b ) return a ; if ( a > b ) return __gcd ( a - b , b ) ; return __gcd ( a , b - a ) ; } static int minValidNumber ( int p , int q ) { if ( q % p == 0 ) return __gcd ( p , q ) ; else return - 1 ; } public static void main ( String [ ] args ) { int p = 2 , q = 6 ; System . out . print ( minValidNumber ( p , q ) ) ; } }"],"bleu":0.09788507768706732,"rouge_l":0.1766835626357712}
{"id":1053,"predictions":["import java . io . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["class GFG { static int maxSum ( int arr [ ] , int n , int k ) { if ( n < k ) { System . out . println ( \" Invalid \" ) ; return - 1 ; } int max_sum = 0 ; for ( int i = 0 ; i < k ; i ++ ) max_sum += arr [ i ] ; int window_sum = max_sum ; for ( int i = k ; i < n ; i ++ ) { window_sum += arr [ i ] - arr [ i - k ] ; max_sum = Math . max ( max_sum , window_sum ) ; } return max_sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 4 , 2 , 10 , 2 , 3 , 1 , 0 , 20 } ; int k = 4 ; int n = arr . length ; System . out . println ( maxSum ( arr , n , k ) ) ; } }"],"bleu":0.4977589153289924,"rouge_l":0.6480968218773097}
{"id":1054,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( a [ i ] + \" \" ) ; } } }"],"references":["class GFG { static void sort ( String a [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { if ( ( a [ i ] + a [ j ] ) . compareTo ( a [ j ] + a [ i ] ) > 0 ) { String s = a [ i ] ; a [ i ] = a [ j ] ; a [ j ] = s ; } } } } static String lexsmallest ( String a [ ] , int n ) { sort ( a , n ) ; String answer = \" \" ; for ( int i = 0 ; i < n ; i ++ ) answer += a [ i ] ; return answer ; } public static void main ( String args [ ] ) { String a [ ] = { \" c \" , \" cb \" , \" cba \" } ; int n = 3 ; System . out . println ( \" lexiographically ▁ smallest ▁ string ▁ = ▁ \" + lexsmallest ( a , n ) ) ; } }"],"bleu":0.19171391346281116,"rouge_l":0.3519776640297813}
{"id":1055,"predictions":["import java . util . * ; class GFG { static boolean isVowel ( String s ) { for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i ) ) return false ; } return true ; } public static void main ( String [ ] args ) { String s = \" geeksforgeeksforgeeks \" ; if ( isVowel ( s ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; public class FindAnagrams { private static void printAnagrams ( String arr [ ] ) { HashMap < String , List < String > > map = new HashMap < > ( ) ; for ( int i = 0 ; i < arr . length ; i ++ ) { String word = arr [ i ] ; char [ ] letters = word . toCharArray ( ) ; Arrays . sort ( letters ) ; String newWord = new String ( letters ) ; if ( map . containsKey ( newWord ) ) { map . get ( newWord ) . add ( word ) ; } else { List < String > words = new ArrayList < > ( ) ; words . add ( word ) ; map . put ( newWord , words ) ; } } for ( String s : map . keySet ( ) ) { List < String > values = map . get ( s ) ; if ( values . size ( ) > 1 ) { System . out . print ( values ) ; } } } public static void main ( String [ ] args ) { String arr [ ] = { \" cat \" , \" dog \" , \" tac \" , \" god \" , \" act \" } ; printAnagrams ( arr ) ; } }"],"bleu":0.1264576943306875,"rouge_l":0.3675661514278228}
{"id":1056,"predictions":["import java . util . * ; class GFG { static boolean isVowel ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ i ] > arr [ j ] ) return false ; } } return true ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 1 , 1 , 1 , 1 , 1 } ; int n = arr . length ; if ( isVowel ( arr , n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . Arrays ; class GFG { static String commonPrefixUtil ( String str1 , String str2 ) { String result = \" \" ; int n1 = str1 . length ( ) , n2 = str2 . length ( ) ; for ( int i = 0 , j = 0 ; i <= n1 - 1 && j <= n2 - 1 ; i ++ , j ++ ) { if ( str1 . charAt ( i ) != str2 . charAt ( j ) ) { break ; } result += str1 . charAt ( i ) ; } return ( result ) ; } static void commonPrefix ( String arr [ ] , int n ) { Arrays . sort ( arr ) ; System . out . println ( commonPrefixUtil ( arr [ 0 ] , arr [ n - 1 ] ) ) ; } public static void main ( String [ ] args ) { String arr [ ] = { \" geeksforgeeks \" , \" geeks \" , \" geek \" , \" geezer \" } ; int n = arr . length ; commonPrefix ( arr , n ) ; } }"],"bleu":0.3203965231113619,"rouge_l":0.4387690066466358}
{"id":1057,"predictions":["import java . io . * ; import java . util . * ; class GFG { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = sc . nextInt ( ) ; Arrays . sort ( a ) ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans += a [ i ] - a [ i ] ; } System . out . println ( ans ) ; } }"],"references":["import java . util . * ; class GFG { static int changeTheArray ( int arr [ ] , int n ) { int minEle = Arrays . stream ( arr ) . min ( ) . getAsInt ( ) ; int maxEle = Arrays . stream ( arr ) . max ( ) . getAsInt ( ) ; int minOperations = Integer . MAX_VALUE ; for ( int num = minEle ; num <= maxEle ; num ++ ) { int operations = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] != num ) { operations += ( Math . abs ( num - arr [ i ] ) - 1 ) ; } } minOperations = Math . min ( minOperations , operations ) ; } return minOperations ; } public static void main ( String args [ ] ) { int arr [ ] = { 10 , 1 , 4 } ; int n = arr . length ; System . out . println ( changeTheArray ( arr , n ) ) ; } }"],"bleu":0.27182823438952586,"rouge_l":0.44753354570904536}
{"id":1058,"predictions":["import java . io . * ; class GFG { static int countPairs ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { if ( arr [ i ] > arr [ j ] ) count ++ ; } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( countPairs ( arr , n ) ) ; } }"],"references":["import java . util . * ; import java . io . * ; class GFG { static void findElements ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { int count = 0 ; for ( int j = 0 ; j < n ; j ++ ) if ( arr [ j ] > arr [ i ] ) count ++ ; if ( count >= 2 ) System . out . print ( arr [ i ] + \" ▁ \" ) ; } } public static void main ( String args [ ] ) { int arr [ ] = { 2 , - 6 , 3 , 5 , 1 } ; int n = arr . length ; findElements ( arr , n ) ; } }"],"bleu":0.6313760398389142,"rouge_l":0.7282104775150672}
{"id":1059,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int countPairs ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( countPairs ( arr , n ) ) ; } }"],"references":["class GFG { static int cntSubArrays ( int [ ] arr , int n , int k ) { int res = 0 ; int i = 0 ; while ( i < n ) { int j = i + 1 ; while ( j < n && arr [ j ] >= arr [ j - 1 ] ) j ++ ; res += Math . max ( j - i - k + 1 , 0 ) ; i = j ; } return res ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 2 , 5 } ; int n = arr . length ; int k = 2 ; System . out . println ( cntSubArrays ( arr , n , k ) ) ; } }"],"bleu":0.4161193296212174,"rouge_l":0.6372478386167146}
{"id":1060,"predictions":["import java . io . * ; import java . util . * ; class GFG { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; String s = \" \" ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i ) ) { System . out . println ( \" YES \" ) ; return ; } if ( s . charAt ( i ) == s . charAt ( i ) ) { System . out . println ( \" NO \" ) ; return ; } } System . out . println ( \" NO \" ) ; } }"],"references":["import java . util . * ; class GFG { static boolean match_words ( String dictionary [ ] , String sentence [ ] , int n , int m ) { Map < String , Integer > mp = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( mp . containsKey ( dictionary [ i ] ) ) { mp . put ( dictionary [ i ] , mp . get ( dictionary [ i ] ) + 1 ) ; } else { mp . put ( dictionary [ i ] , 1 ) ; } } for ( int i = 0 ; i < m ; i ++ ) { if ( mp . containsKey ( sentence [ i ] ) ) mp . put ( sentence [ i ] , mp . get ( sentence [ i ] ) - 1 ) ; else return false ; } return true ; } public static void main ( String [ ] args ) { String dictionary [ ] = { \" find \" , \" a \" , \" geeks \" , \" all \" , \" for \" , \" on \" , \" geeks \" , \" answers \" , \" inter \" } ; int n = dictionary . length ; String sentence [ ] = { \" find \" , \" all \" , \" answers \" , \" on \" , \" geeks \" , \" for \" , \" geeks \" } ; int m = sentence . length ; if ( match_words ( dictionary , sentence , n , m ) ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ; } }"],"bleu":0.170672228212376,"rouge_l":0.36805463466383775}
{"id":1061,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int sumofproduct ( int n ) { int ans = 0 ; for ( int x = 1 ; x <= n ; x ++ ) { int y = n \/ x ; ans += ( y * x ) ; } return ans ; } static public void main ( String [ ] args ) { int n = 10 ; System . out . println ( sumofproduct ( n ) ) ; } }"],"bleu":0.5534981824931362,"rouge_l":0.7862383501883798}
{"id":1062,"predictions":["import java . io . * ; import java . util . * ; class GFG { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { System . out . print ( a [ i ] + \" \" ) ; } System . out . println ( ) ; } }"],"references":["import java . io . * ; class GFG { static boolean isUnique ( int [ ] a , int n , int k ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += a [ i ] ; sum += n - 1 ; return ( sum == k ) ; } static public void main ( String [ ] args ) { int [ ] a = { 3 , 3 , 3 } ; int n = a . length ; int k = 12 ; if ( isUnique ( a , n , k ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.4059703769729881,"rouge_l":0.5156139938952805}
{"id":1063,"predictions":["import java . io . * ; class GFG { static int countWays ( int n ) { int count = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( n % i == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( countWays ( n ) ) ; } }"],"references":["class GFG { public static void main ( String [ ] args ) { int first , second ; for ( first = 1 ; first <= 5 ; ++ first ) for ( second = 1 ; second <= 5 ; ++ second ) System . out . printf ( \" % d ▁ \\n \" , 5 * first + second - 5 ) ; } }"],"bleu":0.2644320366509926,"rouge_l":0.412521815008726}
{"id":1064,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; String s = sc . next ( ) ; int count = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i ) ) count ++ ; } System . out . println ( count ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["public class ACX { static int calculate_ ( String s ) { if ( s . length ( ) == 1 ) return 0 ; int count_ = 0 ; char [ ] s1 = s . toCharArray ( ) ; for ( int i = s . length ( ) - 1 ; i > 0 😉 { if ( s1 [ i ] == '0' ) { count_ ++ ; i -- ; } else { count_ ++ ; while ( s1 [ i ] == '1' && i > 0 ) { count_ ++ ; i -- ; } if ( i == 0 ) count_ ++ ; s1 [ i ] = '1' ; } } return count_ ; } public static void main ( String [ ] args ) { String s ; s = \"10000100000\" ; System . out . println ( calculate_ ( s ) ) ; } }"],"bleu":0.16813143207980263,"rouge_l":0.3558868811279474}
{"id":1065,"predictions":["import java . io . * ; import java . util . * ; class GFG { public static void main ( String [ ] args ) { String s = \" geeksforgeeks \" ; String s = \" geeksforgeeksforgeeks \" ; System . out . println ( s ) ; } }"],"references":["import java . util . * ; class GFG { static String getWinner ( String str , int len ) { int total = 0 ; for ( int i = 0 ; i < len ; i ++ ) { if ( str . charAt ( i ) == ' S ' ) { total ++ ; } } if ( ( total % 2 ) == 1 ) return \" First \" ; return \" Second \" ; } public static void main ( String [ ] args ) { String str = \" GSSS \" ; int len = str . length ( ) ; System . out . println ( getWinner ( str , len ) ) ; } }"],"bleu":0.15150574882533638,"rouge_l":0.4004145793746762}
{"id":1066,"predictions":["import java . io . * ; class GFG { static int sum ( int a [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += a [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 } ; int n = a . length ; System . out . println ( sum ( a , n ) ) ; } }"],"references":["class GFG { static void countPermutations ( int N , int B ) { int x = ( int ) Math . pow ( B , N ) ; int y = ( int ) Math . pow ( B , N - 1 ) ; System . out . println ( x - y ) ; } public static void main ( String [ ] args ) { int N = 6 ; int B = 4 ; countPermutations ( N , B ) ; } }"],"bleu":0.28483364337637934,"rouge_l":0.4441747572815534}
{"id":1067,"predictions":["import java . io . * ; import java . util . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) throws java . lang . Exception { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int m = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { st = new StringTokenizer ( br . readLine ( ) ) ; a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( a [ i ] + \" \" ) ; } System . out . println ( ) ; } }"],"references":["import java . util . * ; import java . io . * ; class GFG { static String check ( int k , int d0 , int d1 ) { int s = ( 2 * ( d0 + d1 ) ) % 10 + ( 4 * ( d0 + d1 ) ) % 10 + ( 8 * ( d0 + d1 ) ) % 10 + ( 6 * ( d0 + d1 ) ) % 10 ; int a = ( k - 3 ) % 4 ; int x = 0 ; switch ( a ) { case 0 : x = 0 ; break ; case 1 : x = ( 2 * ( d0 + d1 ) ) % 10 ; break ; case 2 : x = ( 2 * ( d0 + d1 ) ) % 10 + ( 4 * ( d0 + d1 ) ) % 10 ; break ; case 3 : x = ( 2 * ( d0 + d1 ) ) % 10 + ( 4 * ( d0 + d1 ) ) % 10 + ( 8 * ( d0 + d1 ) ) % 10 ; break ; } int sum = d0 + d1 + ( ( ( k - 3 ) \/ 4 ) * s + x ) ; if ( sum % 3 == 0 ) return \" YES \" ; return \" NO \" ; } public static void main ( String [ ] args ) { int k , d0 , d1 ; k = 13 ; d0 = 8 ; d1 = 1 ; System . out . println ( check ( k , d0 , d1 ) ) ; k = 5 ; d0 = 3 ; d1 = 4 ; System . out . println ( check ( k , d0 , d1 ) ) ; } }"],"bleu":0.14248382578500082,"rouge_l":0.3286028730305839}
{"id":1068,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) for ( int j = i + 1 ; j < n ; j ++ ) if ( arr [ i ] % 2 == 0 ) return false ; return true ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = arr . length ; if ( isPrime ( arr , n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . io . * ; class GFG { public static void main ( String args [ ] ) { int n = 5 , i , j , num = 1 , gap ; gap = n - 1 ; for ( j = 1 ; j <= n ; j ++ ) { num = j ; for ( i = 1 ; i <= gap ; i ++ ) System . out . print ( \" ▁ \" ) ; gap -- ; for ( i = 1 ; i <= j ; i ++ ) { System . out . print ( num ) ; num ++ ; } num -- ; num -- ; for ( i = 1 ; i < j ; i ++ ) { System . out . print ( num ) ; num -- ; } System . out . println ( ) ; } } }"],"bleu":0.26929920551180103,"rouge_l":0.4212259640922129}
{"id":1069,"predictions":["import java . io . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) System . out . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ; else System . out . println ( \" NO \" ) ; } public static void main ( String [ ] args ) { int n = 3 ; } }"],"references":["class GFG { static int isKthBitSet ( long x , long k ) { int rslt = ( ( x & ( 1 << ( k - 1 ) ) ) != 0 ) ? 1 : 0 ; return rslt ; } static int isPalindrome ( long x ) { long l = 1 ; long r = ( Integer . SIZE \/ 8 ) * 8 ; while ( l < r ) { if ( isKthBitSet ( x , l ) != isKthBitSet ( x , r ) ) { return 0 ; } l ++ ; r -- ; } return 1 ; } public static void main ( String [ ] args ) { long x = 1 << 15 + 1 << 16 ; System . out . println ( isPalindrome ( x ) ) ; x = ( 1 << 31 ) + 1 ; System . out . println ( isPalindrome ( x ) ) ; } }"],"bleu":0.07216182939301201,"rouge_l":0.22454810175265094}
{"id":1070,"predictions":["import java . io . * ; import java . util . * ; import java . lang . * ; class GFG { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { a [ i ] = sc . nextInt ( ) ; } System . out . println ( a [ n - 1 ] + \" \" + a [ n - 1 ] + \" \" + a [ n - 1 ] + \" \" + a [ n - 1 ] ) ; } } }"],"references":["import java . util . HashMap ; import java . util . HashSet ; class GFG { public static void getSum ( int [ ] a , int n ) { int [ ] P = new int [ n ] ; P [ 0 ] = a [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) P [ i ] = a [ i ] + P [ i - 1 ] ; int S = P [ n - 1 ] ; HashMap < Integer , Integer > hash = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) hash . put ( P [ i ] , 1 ) ; HashSet < Integer > res = new HashSet < > ( ) ; for ( int i = 1 ; i * i <= S ; i ++ ) { if ( S % i == 0 ) { boolean pres = true ; int div1 = i , div2 = S \/ i ; for ( int j = div1 ; j <= S ; j += div1 ) { if ( hash . get ( j ) == null || hash . get ( j ) != 1 ) { pres = false ; break ; } } if ( pres && div1 != S ) res . add ( div1 ) ; pres = true ; for ( int j = S \/ i ; j <= S ; j += S \/ i ) { if ( hash . get ( j ) == null || hash . get ( j ) != 1 ) { pres = false ; break ; } } if ( pres && div2 != S ) res . add ( div2 ) ; } } if ( res . size ( ) == 0 ) { System . out . println ( \" - 1\" ) ; return ; } for ( int i : res ) System . out . print ( i + \" ▁ \" ) ; } public static void main ( String [ ] args ) { int [ ] a = { 1 , 2 , 1 , 1 , 1 , 2 , 1 , 3 } ; int n = a . length ; getSum ( a , n ) ; } }"],"bleu":0.14126266763384532,"rouge_l":0.33801949717804003}
{"id":1071,"predictions":["import java . util . * ; class GFG { static boolean isVowel ( String str ) { int len = str . length ( ) ; for ( int i = 0 ; i < len ; i ++ ) { if ( str . charAt ( i ) == str . charAt ( i ) ) return false ; } return false ; } public static void main ( String [ ] args ) { String str = \" geeksforgeeksforgeeks \" ; if ( isVowel ( str ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; class GFG { static int MAX_CHAR = 26 ; static String removeChars ( char arr [ ] , int k ) { int [ ] hash = new int [ MAX_CHAR ] ; int n = arr . length ; for ( int i = 0 ; i < n ; ++ i ) hash [ arr [ i ] - ' a ' ] ++ ; String ans = \" \" ; for ( int i = 0 ; i < n ; ++ i ) { if ( hash [ arr [ i ] - ' a ' ] != k ) { ans += arr [ i ] ; } } return ans ; } public static void main ( String [ ] args ) { char str [ ] = \" geeksforgeeks \" . toCharArray ( ) ; int k = 2 ; System . out . print ( removeChars ( str , k ) ) ; } }"],"bleu":0.25495343119578096,"rouge_l":0.4869179600886918}
{"id":1072,"predictions":["import java . io . * ; import java . util . * ; class GFG { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { System . out . print ( arr [ i ] + \" \" ) ; } System . out . println ( ) ; } } }"],"references":["import java . util . * ; class GFG { public static int firstEven ( int arr [ ] , int n ) { HashMap < Integer , Boolean > map = new HashMap < Integer , Boolean > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( map . get ( arr [ i ] ) == null ) map . put ( arr [ i ] , false ) ; else { boolean val = map . get ( arr [ i ] ) ; if ( val == true ) map . put ( arr [ i ] , false ) ; else map . put ( arr [ i ] , true ) ; } } int j = 0 ; for ( j = 0 ; j < n ; j ++ ) { if ( map . get ( arr [ j ] ) == true ) break ; } return arr [ j ] ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 4 , 6 , 8 , 1 , 6 } ; int n = arr . length ; System . out . println ( firstEven ( arr , n ) ) ; } }"],"bleu":0.28928733294038855,"rouge_l":0.43619647569592235}
{"id":1073,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { System . out . print ( a [ i ] + \" \" ) ; } } out . println ( ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . io . * ; import java . util . Arrays ; class GFG { static String s = \" \" ; static String ReverseString ( String s ) { char [ ] arr = s . toCharArray ( ) ; for ( int i = 0 ; i < arr . length \/ 2 ; i ++ ) { char temp = arr [ i ] ; arr [ i ] = arr [ arr . length - i - 1 ] ; arr [ arr . length - i - 1 ] = temp ; } return new String ( arr ) ; } static void binary_conversion ( int m ) { while ( m != 0 ) { int tmp = m % 2 ; s += Integer . toString ( tmp ) ; m = ( int ) ( m \/ 2 ) ; } s = ReverseString ( s ) ; } static int find_character ( int n , int m , int i ) { binary_conversion ( m ) ; String s1 = \" \" ; for ( int x = 0 ; x < n ; x ++ ) { for ( int y = 0 ; y < s . length ( ) ; y ++ ) { if ( s . charAt ( y ) == '1' ) s1 += \"10\" ; else s1 += \"01\" ; } s = s1 ; s1 = \" \" ; } return s . charAt ( i ) - '0' ; } public static void main ( String args [ ] ) { int m = 5 , n = 2 , i = 8 ; System . out . print ( find_character ( n , m , i ) ) ; } }"],"bleu":0.220265734427582,"rouge_l":0.38043808944326135}
{"id":1074,"predictions":["import java . io . * ; class GFG { static int nthTerm ( int n ) { return n * ( n + 1 ) \/ 2 ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( nthTerm ( n ) ) ; } }"],"references":["class GFG { static int cntSquares ( int n ) { return n * ( n + 1 ) * ( 2 * n + 1 ) \/ 6 ; } public static void main ( String args [ ] ) { System . out . println ( cntSquares ( 4 ) ) ; } }"],"bleu":0.5595471427947569,"rouge_l":0.7460182025028441}
{"id":1075,"predictions":["import java . io . * ; class GFG { static int countSetBits ( int n ) { int count = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( n % i == 0 ) count ++ ; } return countSetBits ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( countSetBits ( n ) ) ; } }"],"references":["class GFG { static int multiplyWith3Point5 ( int x ) { return ( x << 1 ) + x + ( x >> 1 ) ; } public static void main ( String [ ] args ) { int x = 2 ; System . out . println ( multiplyWith3Point5 ( x ) ) ; } }"],"bleu":0.33791405271989855,"rouge_l":0.6170520231213873}
{"id":1076,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { System . out . print ( a [ i ] + \" \" ) ; } System . out . println ( ) ; } } }"],"references":["class GFG { static int countSubSeq ( String str , int len ) { int ans = 0 ; int mul = 1 ; for ( int i = 0 ; i < len ; i ++ ) { if ( str . charAt ( i ) == '0' ) ans += mul ; mul *= 2 ; } return ans ; } public static void main ( String [ ] args ) { String str = \"10010\" ; int len = str . length ( ) ; System . out . print ( countSubSeq ( str , len ) ) ; } }"],"bleu":0.2704566338540356,"rouge_l":0.4254428790626308}
{"id":1077,"predictions":["import java . util . * ; class GFG { static boolean isVowel ( int a , int b ) { if ( a == b ) return true ; if ( a == b ) return true ; if ( a == b ) return true ; return false ; } public static void main ( String [ ] args ) { int a = 3 , b = 3 , c = 3 ; if ( isVowel ( a , b , c ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static int a , b , c ; static void swapThree ( ) { a = a + b + c ; b = a - ( b + c ) ; c = a - ( b + c ) ; a = a - ( b + c ) ; } public static void main ( String [ ] args ) { a = 10 ; b = 20 ; c = 30 ; System . out . println ( \" Before ▁ swapping ▁ a ▁ = ▁ \" + a + \" , ▁ b ▁ = ▁ \" + b + \" , ▁ c ▁ = ▁ \" + c ) ; swapThree ( ) ; System . out . println ( \" After ▁ swapping ▁ a ▁ = ▁ \" + a + \" , ▁ b ▁ = ▁ \" + b + \" , ▁ c ▁ = ▁ \" + c ) ; } }"],"bleu":0.20972657538222178,"rouge_l":0.43257541647906356}
{"id":1078,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int countPairs ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ i ] % arr [ j ] == 0 ) count ++ ; } } return count ; } static int countPairs ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ i ] % arr [ j ] == 0 ) count ++ ; } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( countPairs ( arr , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static int countSubarrays ( int a [ ] , int n ) { int count = 0 ; int [ ] pre = new int [ n + 1 ] ; Arrays . fill ( pre , 0 ) ; for ( int i = 1 ; i < n + 1 ; i ++ ) { pre [ i ] = pre [ i - 1 ] + a [ i - 1 ] ; } for ( int i = 1 ; i < n + 1 ; i ++ ) { for ( int j = i ; j < n + 1 ; j ++ ) { int sum1 = pre [ j ] - pre [ i - 1 ] , count1 = j - i + 1 ; int sum2 = pre [ n ] - sum1 , count2 = ( ( n - count1 ) == 0 ) ? 1 : ( n - count1 ) ; int includ = sum1 \/ count1 ; int exclud = sum2 \/ count2 ; if ( includ > exclud ) count ++ ; } } return count ; } public static void main ( String args [ ] ) { int arr [ ] = { 6 , 3 , 5 } ; int n = arr . length ; System . out . println ( countSubarrays ( arr , n ) ) ; } }"],"bleu":0.43124539017048835,"rouge_l":0.582560553633218}
{"id":1079,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int maxSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }"],"references":["class GFG { static void reverse ( int [ ] arr , int n , int k , int m ) { for ( int i = 0 ; i < n ; i += k + m ) { int left = i ; int right = Math . min ( i + k - 1 , n - 1 ) ; while ( left < right ) swap ( arr , left ++ , right -- ) ; } } static int [ ] swap ( int [ ] arr , int i , int j ) { int temp = arr [ i ] ; arr [ i ] = arr [ j ] ; arr [ j ] = temp ; return arr ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 } ; int k = 3 ; int m = 2 ; int n = arr . length ; reverse ( arr , n , k , m ) ; for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( arr [ i ] + \" ▁ \" ) ; } } }"],"bleu":0.2763206075916614,"rouge_l":0.449882668454576}
{"id":1080,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; out . println ( n + 1 ) ; for ( int i = 1 ; i <= n ; i ++ ) { out . print ( i + \" \" ) ; } out . close ( ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) throws IOException { return br . readLine ( ) ; } } }"],"references":["class GFG { static int count ( int n ) { return ( int ) Math . pow ( 2 , n - 1 ) ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( count ( n ) ) ; } }"],"bleu":0.09471519317752113,"rouge_l":0.2330189805419601}
{"id":1081,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int maxSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }"],"references":["class GFG { static boolean isSubsetSum ( int set [ ] , int n , int sum ) { boolean subset [ ] [ ] = new boolean [ sum + 1 ] [ n + 1 ] ; for ( int i = 0 ; i <= n ; i ++ ) subset [ 0 ] [ i ] = true ; for ( int i = 1 ; i <= sum ; i ++ ) subset [ i ] [ 0 ] = false ; for ( int i = 1 ; i <= sum ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { subset [ i ] [ j ] = subset [ i ] [ j - 1 ] ; if ( i >= set [ j - 1 ] ) subset [ i ] [ j ] = subset [ i ] [ j ] || subset [ i - set [ j - 1 ] ] [ j - 1 ] ; } } return subset [ sum ] [ n ] ; } public static void main ( String args [ ] ) { int set [ ] = { 3 , 34 , 4 , 12 , 5 , 2 } ; int sum = 9 ; int n = set . length ; if ( isSubsetSum ( set , n , sum ) == true ) System . out . println ( \" Found ▁ a ▁ subset \" + \" ▁ with ▁ given ▁ sum \" ) ; else System . out . println ( \" No ▁ subset ▁ with \" + \" ▁ given ▁ sum \" ) ; } }"],"bleu":0.16975621686929349,"rouge_l":0.4418765091410832}
{"id":1082,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int count ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ i ] < arr [ j ] ) count ++ ; } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 4 , 4 , 3 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4"],"references":["import java . io . * ; class GFG { static int colourVisible ( int height [ ] , int colour [ ] , int K ) { int arr [ ] = new int [ K + 1 ] ; int visible = 0 ; int max = height [ K - 1 ] ; arr [ colour [ K - 1 ] ] = 1 ; for ( int i = K - 2 ; i >= 0 ; i -- ) { if ( height [ i ] > max ) { max = height [ i ] ; arr [ colour [ i ] ] = 1 ; } } for ( int i = 1 ; i <= K ; i ++ ) { if ( arr [ i ] == 1 ) visible ++ ; } return visible ; } public static void main ( String [ ] args ) { int height [ ] = { 3 , 5 , 1 , 2 , 3 } ; int colour [ ] = { 1 , 2 , 3 , 4 , 3 } ; int K = colour . length ; System . out . println ( colourVisible ( height , colour , K ) ) ; } }"],"bleu":0.13583285633357375,"rouge_l":0.2654009690497379}
{"id":1083,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int maxSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }"],"references":["import java . util . * ; class GFG { public static void sortRows ( int mat [ ] [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) Arrays . sort ( mat [ i ] ) ; } public static void findAndPrintCommonElements ( int mat [ ] [ ] , int n ) { sortRows ( mat , n ) ; int curr_index [ ] = new int [ n ] ; int f = 0 ; for ( ; curr_index [ 0 ] < n ; curr_index [ 0 ] ++ ) { int value = mat [ 0 ] [ curr_index [ 0 ] ] ; boolean present = true ; for ( int i = 1 ; i < n ; i ++ ) { while ( curr_index [ i ] < n && mat [ i ] [ curr_index [ i ] ] <= value ) curr_index [ i ] ++ ; if ( mat [ i ] [ curr_index [ i ] - 1 ] != value ) present = false ; if ( curr_index [ i ] == n ) { f = 1 ; break ; } } if ( present ) System . out . print ( value + \" ▁ \" ) ; if ( f == 1 ) break ; } } public static void main ( String [ ] args ) { int mat [ ] [ ] = { { 12 , 1 , 14 , 3 , 16 } , { 14 , 2 , 1 , 3 , 35 } , { 14 , 1 , 14 , 3 , 11 } , { 14 , 25 , 3 , 2 , 1 } , { 1 , 18 , 3 , 21 , 14 } } ; int n = 5 ; findAndPrintCommonElements ( mat , n ) ; } }"],"bleu":0.1339258496829861,"rouge_l":0.389430038172963}
{"id":1084,"predictions":["import java . io . * ; import java . util . * ; import java . lang . * ; class GFG { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { a [ i ] = sc . nextInt ( ) ; } System . out . println ( a [ n - 1 ] + \" \" + a [ n - 1 ] + \" \" + a [ n - 1 ] ) ; } } }"],"references":["class GFG { static void MaximumProduct ( int a [ ] , int n ) { int cntneg = 0 ; int cntzero = 0 ; int used [ ] = new int [ n ] ; int pos = - 1 ; for ( int i = 0 ; i < n ; ++ i ) { if ( a [ i ] == 0 ) { used [ i ] = 1 ; cntzero ++ ; } if ( a [ i ] < 0 ) { cntneg ++ ; if ( pos == - 1 || Math . abs ( a [ pos ] ) > Math . abs ( a [ i ] ) ) { pos = i ; } } } if ( cntneg % 2 == 1 ) { used [ pos ] = 1 ; } if ( cntzero == n || ( cntzero == n - 1 && cntneg == 1 ) ) { for ( int i = 0 ; i < n - 1 ; ++ i ) { System . out . println ( 1 + \" ▁ \" + ( i + 1 ) + \" ▁ \" + ( i + 2 ) ) ; } return ; } int lst = - 1 ; for ( int i = 0 ; i < n ; ++ i ) { if ( used [ i ] == 1 ) { if ( lst != - 1 ) { System . out . println ( 1 + \" ▁ \" + ( lst + 1 ) + \" ▁ \" + ( i + 1 ) ) ; } lst = i ; } } if ( lst != - 1 ) { System . out . println ( 2 + \" ▁ \" + ( lst + 1 ) ) ; } lst = - 1 ; for ( int i = 0 ; i < n ; ++ i ) { if ( used [ i ] != 1 ) { if ( lst != - 1 ) { System . out . println ( 1 + \" ▁ \" + ( lst + 1 ) + \" ▁ \" + ( i + 1 ) ) ; } lst = i ; } } } public static void main ( String [ ] args ) { int a [ ] = { 5 , - 2 , 0 , 1 , - 3 } ; int n = a . length ; MaximumProduct ( a , n ) ; } }"],"bleu":0.0950728884564619,"rouge_l":0.33191892971246006}
{"id":1085,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int getSum ( int n ) { int sum = 0 ; while ( n != 0 ) { sum = sum + n % 10 ; n = n \/ 10 ; } return sum ; } public static void main ( String [ ] args ) { int n = 687 ; System . out . println ( getSum ( n ) ) ; } }"],"bleu":0.6241314631812838,"rouge_l":0.762661580843399}
{"id":1086,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { ans += i ; } System . out . println ( ans ) ; } }"],"references":["import java . util . * ; class Count { public static int countSetBits ( int n ) { int count = 0 ; while ( n != 0 ) { count ++ ; n &= ( n - 1 ) ; } return count ; } public static int FlippedCount ( int a , int b ) { return countSetBits ( a ^ b ) ; } public static void main ( String [ ] args ) { int a = 10 ; int b = 20 ; System . out . print ( FlippedCount ( a , b ) ) ; } }"],"bleu":0.25215287370391637,"rouge_l":0.40453752181500874}
{"id":1087,"predictions":["import java . io . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static int findSum ( int arr [ ] , int N ) { Map < Integer , Integer > mp = new HashMap < > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { if ( mp . containsKey ( arr [ i ] ) ) { mp . put ( arr [ i ] , mp . get ( arr [ i ] ) + 1 ) ; } else { mp . put ( arr [ i ] , 1 ) ; } } int maxFreq = 0 ; for ( Map . Entry < Integer , Integer > entry : mp . entrySet ( ) ) { if ( entry . getValue ( ) > maxFreq ) { maxFreq = entry . getValue ( ) ; } } int sum = 0 ; for ( Map . Entry < Integer , Integer > entry : mp . entrySet ( ) ) { if ( entry . getValue ( ) == maxFreq ) { sum += entry . getKey ( ) * entry . getValue ( ) ; } } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 2 , 2 , 2 , 2 , 3 , 3 , 3 , 3 } ; int N = arr . length ; System . out . println ( findSum ( arr , N ) ) ; } }"],"bleu":0.34834539602740333,"rouge_l":0.553906024791006}
{"id":1088,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 3 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; class Count { public static int MDAS_Factorial ( int N ) { if ( N <= 2 ) return N ; if ( N <= 4 ) return ( N + 3 ) ; if ( ( N - 4 ) % 4 == 0 ) return ( N + 1 ) ; else if ( ( N - 4 ) % 4 <= 2 ) return ( N + 2 ) ; else return ( N - 1 ) ; } public static void main ( String [ ] args ) { int N = 4 ; System . out . println ( MDAS_Factorial ( N ) ) ; N = 10 ; System . out . println ( MDAS_Factorial ( N ) ) ; } }"],"bleu":0.30293007671781985,"rouge_l":0.5322426721199728}
{"id":1089,"predictions":["import java . io . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["import java . util . * ; import java . lang . * ; public class GfG { static int maxAND ( int arr [ ] , int n ) { int res = 0 ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = i + 1 ; j < n ; j ++ ) res = res > ( arr [ i ] & arr [ j ] ) ? res : ( arr [ i ] & arr [ j ] ) ; return res ; } public static void main ( String argc [ ] ) { int arr [ ] = { 4 , 8 , 6 , 2 } ; int n = arr . length ; System . out . println ( \" Maximum ▁ AND ▁ Value ▁ = ▁ \" + maxAND ( arr , n ) ) ; } }"],"bleu":0.39678530810972423,"rouge_l":0.6379553466509988}
{"id":1090,"predictions":["import java . io . * ; class GFG { static boolean isDivisible ( int a , int b ) { if ( a == b ) return true ; if ( a == b ) return false ; if ( a == b ) return false ; if ( a == b ) return false ; if ( a == b ) return false ; if ( a == b ) return false ; return false ; return false ; } public static void main ( String [ ] args ) { int a = 10 , b = 10 ; if ( isDivisible ( a , b ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["public class GFG { static boolean check ( int arr [ ] , int x , int n ) { long sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { double y = Math . sqrt ( arr [ i ] ) ; if ( Math . floor ( y ) == Math . ceil ( y ) ) { sum += arr [ i ] ; } } if ( sum % x == 0 ) return true ; else return false ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 3 , 4 , 9 , 10 } ; int n = arr . length ; int x = 13 ; if ( check ( arr , x , n ) ) { System . out . println ( \" Yes \" ) ; } else { System . out . println ( \" No \" ) ; } } }"],"bleu":0.28933576667530436,"rouge_l":0.5030927835051546}
{"id":1091,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return true ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 10 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; class GFG { static int MAX_SIZE = ( int ) 1e6 ; static boolean [ ] prime = new boolean [ MAX_SIZE + 1 ] ; static void sieve ( ) { Arrays . fill ( prime , true ) ; for ( int p = 2 ; p * p <= MAX_SIZE ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * p ; i <= MAX_SIZE ; i += p ) prime [ i ] = false ; } } } static int kthPrimeGreaterThanN ( int n , int k ) { int res = - 1 ; for ( int i = n + 1 ; i < MAX_SIZE ; i ++ ) { if ( prime [ i ] == true ) k -- ; if ( k == 0 ) { res = i ; break ; } } return res ; } public static void main ( String [ ] args ) { sieve ( ) ; int n = 2 , k = 15 ; System . out . println ( kthPrimeGreaterThanN ( n , k ) ) ; } }"],"bleu":0.13939493999557437,"rouge_l":0.3384079473616307}
{"id":1092,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int maxSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }"],"references":["import java . util . Arrays ; class GFG { static int minimumSets ( int arr [ ] , int n , int key ) { int i , j ; Arrays . sort ( arr ) ; for ( i = 0 , j = n - 1 ; i <= j ; ++ i ) if ( arr [ i ] + arr [ j ] <= key ) j -- ; return i ; } public static void main ( String [ ] args ) { int [ ] arr = { 3 , 5 , 3 , 4 } ; int n = arr . length ; int key = 5 ; System . out . println ( minimumSets ( arr , n , key ) ) ; } }"],"bleu":0.43755493072834206,"rouge_l":0.6683653968658427}
{"id":1093,"predictions":["import java . util . * ; class GFG { static boolean isDivisible ( int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( n % i == 0 ) { sum += n \/ i ; } else { sum += n \/ i ; } } return sum ; } public static void main ( String [ ] args ) { int n = 12 ; if ( isDivisible ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static boolean isPalindrome ( char [ ] str ) { int len = str . length ; if ( len == 1 ) return true ; char ptr1 = str [ 0 ] ; char ptr2 = str [ len - 1 ] ; while ( ptr2 > ptr1 ) { if ( ptr1 != ptr2 ) return false ; ptr1 ++ ; ptr2 -- ; } return true ; } static int noOfAppends ( String s ) { if ( isPalindrome ( s . toCharArray ( ) ) ) return 0 ; s = s . substring ( 1 ) ; return 1 + noOfAppends ( s ) ; } public static void main ( String arr [ ] ) { String s = \" abede \" ; System . out . printf ( \" % d \\n \" , noOfAppends ( s ) ) ; } }"],"bleu":0.16872279105005522,"rouge_l":0.3861681796464405}
{"id":1094,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int countPairs ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ i ] % arr [ j ] == 0 ) count ++ ; } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 1 , 1 , 1 , 1 } ; int n = arr . length ; System . out . println ( countPairs ( arr , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static void add_factors ( int n , HashMap < Integer , Integer > mp ) { for ( int i = 1 ; i <= ( Math . sqrt ( n ) ) ; i ++ ) { if ( n % i == 0 ) { if ( n \/ i == i ) { if ( mp . containsKey ( i ) ) mp . put ( i , mp . get ( i ) + 1 ) ; else mp . put ( i , 1 ) ; } else { if ( mp . containsKey ( i ) ) mp . put ( i , mp . get ( i ) + 1 ) ; else mp . put ( i , 1 ) ; if ( mp . containsKey ( n \/ i ) ) mp . put ( n \/ i , mp . get ( n \/ i ) + 1 ) ; else mp . put ( n \/ i , 1 ) ; } } } } static void count_divisors ( int a [ ] , int n ) { HashMap < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( mp . get ( a [ i ] ) == null ? 0 + \" ▁ \" : mp . get ( a [ i ] ) + \" ▁ \" ) ; add_factors ( a [ i ] , mp ) ; } } public static void main ( String [ ] args ) { int arr [ ] = { 8 , 1 , 28 , 4 , 2 , 6 , 7 } ; int n = arr . length ; count_divisors ( arr , n ) ; } }"],"bleu":0.14920951430229856,"rouge_l":0.35949744187552624}
{"id":1095,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int maxSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static boolean isPossible ( int [ ] arr , int n , int C , int mid ) { int magnet = 1 , currPosition = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] - currPosition >= mid ) { magnet ++ ; currPosition = arr [ i ] ; if ( magnet == C ) return true ; } } return false ; } static int binarySearch ( int n , int C , int [ ] arr ) { int lo , hi , mid , ans ; Arrays . sort ( arr ) ; lo = 0 ; hi = arr [ n - 1 ] ; ans = 0 ; while ( lo <= hi ) { mid = ( lo + hi ) \/ 2 ; if ( ! isPossible ( arr , n , C , mid ) ) hi = mid - 1 ; else { ans = Math . max ( ans , mid ) ; lo = mid + 1 ; } } return ans ; } public static void main ( String args [ ] ) { int C = 4 ; int [ ] arr = { 1 , 2 , 5 , 8 , 10 , 18 } ; int n = arr . length ; System . out . println ( binarySearch ( n , C , arr ) ) ; } }"],"bleu":0.20254980851330948,"rouge_l":0.46799442033477995}
{"id":1096,"predictions":["import java . util . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; return false ; } static boolean isPrime ( int n ) { if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 10 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["public class GFG { static int makePalindrome ( int n , boolean odd ) { int res = n ; if ( odd ) { n = n \/ 10 ; } while ( n > 0 ) { res = 10 * res + n % 10 ; n \/= 10 ; } return res ; } static boolean isPalindrome ( int n , int base ) { int reversed = 0 ; int temp = n ; while ( temp > 0 ) { reversed = reversed * base + temp % base ; temp \/= base ; } return reversed == n ; } static void sumPalindrome ( int n , int k ) { int sum = 0 , i = 1 ; int p = makePalindrome ( i , true ) ; while ( p < n ) { if ( isPalindrome ( p , k ) ) { sum += p ; } i ++ ; p = makePalindrome ( i , true ) ; } i = 1 ; p = makePalindrome ( i , false ) ; while ( p < n ) { if ( isPalindrome ( p , k ) ) { sum += p ; } i ++ ; p = makePalindrome ( i , false ) ; } System . out . println ( \" Total ▁ sum ▁ is ▁ \" + sum ) ; } public static void main ( String [ ] args ) { int n = 1000000 , k = 2 ; sumPalindrome ( n , k ) ; } }"],"bleu":0.16816912774863726,"rouge_l":0.35962942167321726}
{"id":1097,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPower ( int a [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) if ( a [ i ] < a [ j ] ) return false ; return true ; } static int findPower ( int a [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] < a [ i ] ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 } ; int n = a . length ; if ( isPower ( a , n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static class Node { int data ; Node left , right ; } ; static int res ; static Node newNode ( int data ) { Node newNode = new Node ( ) ; newNode . data = data ; newNode . left = newNode . right = null ; return ( newNode ) ; } static int countUntil ( Node root ) { if ( root == null ) return 0 ; int l = countUntil ( root . left ) ; int r = countUntil ( root . right ) ; int maxCount ; if ( root . data == 1 ) maxCount = l + r + 1 ; else maxCount = l + r ; res = Math . max ( res , maxCount ) ; if ( root . data == 1 ) return Math . max ( l , r ) + 1 ; else return Math . max ( l , r ) ; } static int findMaxCount ( Node root ) { res = Integer . MIN_VALUE ; countUntil ( root ) ; return res ; } public static void main ( String [ ] args ) { Node root = newNode ( 1 ) ; root . left = newNode ( 0 ) ; root . right = newNode ( 1 ) ; root . left . left = newNode ( 1 ) ; root . left . right = newNode ( 1 ) ; root . left . right . left = newNode ( 1 ) ; root . left . right . right = newNode ( 0 ) ; System . out . print ( findMaxCount ( root ) ) ; } }"],"bleu":0.11817486655896942,"rouge_l":0.30090218731745305}
{"id":1098,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isDivisible ( int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( n % i == 0 ) { sum += n \/ i ; } else { sum += n \/ i ; } } return sum ; } public static void main ( String [ ] args ) { int n = 10 ; if ( isDivisible ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . io . * ; class GFG { static int countDigits ( int n ) { int count = 0 ; while ( n > 0 ) { count += 1 ; n \/= 10 ; } return count ; } static int getDistinct ( int d , int count ) { int num = 0 ; count = ( int ) Math . pow ( 10 , count - 1 ) ; while ( count > 0 ) { num += ( count * d ) ; count \/= 10 ; } return num ; } static int findCount ( int L , int R ) { int count = 0 ; int countDigitsL = countDigits ( L ) ; int countDigitsR = countDigits ( R ) ; int firstDigitL = ( L \/ ( int ) Math . pow ( 10 , countDigitsL - 1 ) ) ; int firstDigitR = ( R \/ ( int ) Math . pow ( 10 , countDigitsR - 1 ) ) ; if ( countDigitsL < countDigitsR ) { count += ( 9 * ( countDigitsR - countDigitsL - 1 ) ) ; if ( getDistinct ( firstDigitL , countDigitsL ) >= L ) count += ( 9 - firstDigitL + 1 ) ; else count += ( 9 - firstDigitL ) ; if ( getDistinct ( firstDigitR , countDigitsR ) <= R ) count += firstDigitR ; else count += ( firstDigitR - 1 ) ; } else { if ( getDistinct ( firstDigitL , countDigitsL ) >= L ) count += ( 9 - firstDigitL + 1 ) ; else count += ( 9 - firstDigitL ) ; if ( getDistinct ( firstDigitR , countDigitsR ) <= R ) count -= ( 9 - firstDigitR ) ; else count -= ( 9 - firstDigitR + 1 ) ; } return count ; } public static void main ( String [ ] args ) { int L = 10 , R = 50 ; System . out . println ( findCount ( L , R ) ) ; } }"],"bleu":0.06291010687773461,"rouge_l":0.2672890074299866}
{"id":1099,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % k == 0 ) { count ++ ; } } System . out . println ( count ) ; } }"],"references":["import java . util . * ; class GFG { static boolean isPalindrome ( int n ) { int divisor = 1 ; while ( n \/ divisor >= 10 ) divisor *= 10 ; while ( n != 0 ) { int leading = n \/ divisor ; int trailing = n % 10 ; if ( leading != trailing ) return false ; n = ( n % divisor ) \/ 10 ; divisor = divisor \/ 100 ; } return true ; } static int largestPalindrome ( int [ ] A , int n ) { Arrays . sort ( A ) ; for ( int i = n - 1 ; i >= 0 ; -- i ) { if ( isPalindrome ( A [ i ] ) ) return A [ i ] ; } return - 1 ; } public static void main ( String [ ] args ) { int [ ] A = { 1 , 232 , 54545 , 999991 } ; int n = A . length ; System . out . println ( largestPalindrome ( A , n ) ) ; } }"],"bleu":0.22488463110523685,"rouge_l":0.38393003106097756}
{"id":1100,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } Arrays . sort ( arr ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } System . out . println ( sum ) ; } }"],"references":["import java . util . * ; public class GFG { public static ArrayList < Integer > getPerfectSquares ( int n ) { ArrayList < Integer > perfectSquares = new ArrayList < > ( ) ; int current = 1 , i = 1 ; while ( current <= n ) { perfectSquares . add ( current ) ; current = ( int ) Math . pow ( ++ i , 2 ) ; } return perfectSquares ; } public static int maxPairSum ( int arr [ ] ) { int n = arr . length ; int max , secondMax ; if ( arr [ 0 ] > arr [ 1 ] ) { max = arr [ 0 ] ; secondMax = arr [ 1 ] ; } else { max = arr [ 1 ] ; secondMax = arr [ 0 ] ; } for ( int i = 2 ; i < n ; i ++ ) { if ( arr [ i ] > max ) { secondMax = max ; max = arr [ i ] ; } else if ( arr [ i ] > secondMax ) { secondMax = arr [ i ] ; } } return ( max + secondMax ) ; } public static int countPairsWith ( int n , ArrayList < Integer > perfectSquares , HashSet < Integer > nums ) { int count = 0 ; for ( int i = 0 ; i < perfectSquares . size ( ) ; i ++ ) { int temp = perfectSquares . get ( i ) - n ; if ( temp > n && nums . contains ( temp ) ) count ++ ; } return count ; } public static int countPairs ( int arr [ ] ) { int i , n = arr . length ; int max = maxPairSum ( arr ) ; ArrayList < Integer > perfectSquares = getPerfectSquares ( max ) ; HashSet < Integer > nums = new HashSet < > ( ) ; for ( i = 0 ; i < n ; i ++ ) nums . add ( arr [ i ] ) ; int count = 0 ; for ( i = 0 ; i < n ; i ++ ) { count += countPairsWith ( arr [ i ] , perfectSquares , nums ) ; } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 3 , 6 , 9 , 10 , 20 } ; System . out . println ( countPairs ( arr ) ) ; } }"],"bleu":0.2032245780571836,"rouge_l":0.41181204452988773}
{"id":1101,"predictions":["import java . io . * ; import java . util . * ; import java . lang . * ; class GFG { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { System . out . print ( a [ i ] + \" \" ) ; } System . out . println ( ) ; } } }"],"references":["import java . io . * ; class GFG { public static void main ( String [ ] args ) { int i , j , k , sp , space = 4 ; char prt = ' $ ' ; for ( i = 1 ; i <= 5 ; i ++ ) { for ( sp = space ; sp >= 1 ; sp -- ) { System . out . print ( \" ▁ \" ) ; } for ( j = 1 ; j <= i ; j ++ ) { System . out . print ( prt ) ; } for ( k = 1 ; k <= ( i - 1 ) ; k ++ ) { if ( i == 1 ) { continue ; } System . out . print ( prt ) ; } System . out . println ( ) ; space -- ; } space = 1 ; for ( i = 4 ; i >= 1 ; i -- ) { for ( sp = space ; sp >= 1 ; sp -- ) { System . out . print ( \" ▁ \" ) ; } for ( j = 1 ; j <= i ; j ++ ) { System . out . print ( prt ) ; } for ( k = 1 ; k <= ( i - 1 ) ; k ++ ) { System . out . print ( prt ) ; } space ++ ; System . out . println ( ) ; } space = 3 ; for ( i = 2 ; i <= 5 ; i ++ ) { if ( ( i % 2 ) != 0 ) { for ( sp = space ; sp >= 1 ; sp -- ) { System . out . print ( \" ▁ \" ) ; } for ( j = 1 ; j <= i ; j ++ ) { System . out . print ( prt ) ; } } if ( ( i % 2 ) != 0 ) { System . out . println ( ) ; space -- ; } } } }"],"bleu":0.10460420413735141,"rouge_l":0.33303980274744627}
{"id":1102,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int countPairs ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ i ] < arr [ j ] ) count ++ ; } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( countPairs ( arr , n ) ) ; } }"],"references":["import java . util . Arrays ; class GFG { static int maxLen ( int [ ] arr , int n ) { int min_val = Arrays . stream ( arr ) . min ( ) . getAsInt ( ) ; int freq = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == min_val ) freq ++ ; } return freq ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 3 , 1 } ; int n = arr . length ; System . out . println ( maxLen ( arr , n ) ) ; } }"],"bleu":0.5948965289332662,"rouge_l":0.7419435736677117}
{"id":1103,"predictions":["import java . io . * ; class GFG { static int countPairs ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { if ( arr [ i ] > arr [ j ] ) count ++ ; } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( countPairs ( arr , n ) ) ; } }"],"references":["import java . util . * ; class GfG { static int printKDistinct ( int arr [ ] , int n , int k ) { Map < Integer , Integer > h = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( h . containsKey ( arr [ i ] ) ) h . put ( arr [ i ] , h . get ( arr [ i ] ) + 1 ) ; else h . put ( arr [ i ] , 1 ) ; } if ( h . size ( ) < k ) return - 1 ; int dist_count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( h . get ( arr [ i ] ) == 1 ) dist_count ++ ; if ( dist_count == k ) return arr [ i ] ; } return - 1 ; } public static void main ( String [ ] args ) { int ar [ ] = { 1 , 2 , 1 , 3 , 4 , 2 } ; int n = ar . length ; System . out . println ( printKDistinct ( ar , n , 2 ) ) ; } }"],"bleu":0.2910303300434794,"rouge_l":0.5623079549334244}
{"id":1104,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["class GFG { static boolean checkSubarraySum ( int [ ] arr , int n , int k , int sum ) { int curr_sum = 0 ; for ( int i = 0 ; i < k ; i ++ ) curr_sum += arr [ i ] ; if ( curr_sum == sum ) return true ; for ( int j = k ; j < n ; j ++ ) { curr_sum = curr_sum + arr [ j ] - arr [ j - k ] ; if ( curr_sum == sum ) return true ; } return false ; } public static void main ( String [ ] args ) { int [ ] arr = new int [ ] { 1 , 4 , 2 , 10 , 2 , 3 , 1 , 0 , 20 } ; int k = 4 ; int sum = 18 ; int n = arr . length ; if ( checkSubarraySum ( arr , n , k , sum ) ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ; } }"],"bleu":0.34901370925653324,"rouge_l":0.5579605143995653}
{"id":1105,"predictions":["import java . io . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 3 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . io . * ; class GFG { static void printCombination ( int n ) { for ( int i = 1 ; i < n ; i ++ ) { if ( i % 3 != 0 ) { for ( int j = 1 ; j < n ; j ++ ) { if ( j % 3 != 0 ) { for ( int k = 1 ; k < n ; k ++ ) { if ( k % 3 != 0 && ( i + j + k ) == n ) { System . out . println ( i + \" ▁ \" + j + \" ▁ \" + k ) ; return ; } } } } } } } public static void main ( String [ ] args ) { int n = 233 ; printCombination ( n ) ; } }"],"bleu":0.28639661511484193,"rouge_l":0.44502008881370275}
{"id":1106,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return true ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 3 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static int countNumbersWith4 ( int n ) { if ( n < 4 ) return 0 ; int d = ( int ) Math . log10 ( n ) ; int [ ] a = new int [ d + 2 ] ; a [ 0 ] = 0 ; a [ 1 ] = 1 ; for ( int i = 2 ; i <= d ; i ++ ) a [ i ] = a [ i - 1 ] * 9 + ( int ) Math . ceil ( Math . pow ( 10 , i - 1 ) ) ; int p = ( int ) Math . ceil ( Math . pow ( 10 , d ) ) ; int msd = n \/ p ; if ( msd == 4 ) return ( msd ) * a [ d ] + ( n % p ) + 1 ; if ( msd > 4 ) return ( msd - 1 ) * a [ d ] + p + countNumbersWith4 ( n % p ) ; return ( msd ) * a [ d ] + countNumbersWith4 ( n % p ) ; } public static void main ( String [ ] args ) { int n = 328 ; System . out . println ( \" Count ▁ of ▁ numbers ▁ from ▁ 1 ▁ to ▁ \" + n + \" ▁ that ▁ have ▁ 4 ▁ as ▁ a ▁ digit ▁ is ▁ \" + countNumbersWith4 ( n ) ) ; } }"],"bleu":0.19051044751825924,"rouge_l":0.35875758132696195}
{"id":1107,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) if ( arr [ i ] % 2 == 0 ) return false ; return true ; } static boolean isPrime ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { if ( isPrime ( arr [ i ] ) ) return false ; } return true ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = arr . length ; if ( isPrime ( arr , n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; class GFG { static Vector < Integer > arr = new Vector < Integer > ( ) ; static void generateDivisors ( int n ) { for ( int i = 1 ; i <= Math . sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { if ( n \/ i == i ) arr . add ( i ) ; else { arr . add ( i ) ; arr . add ( n \/ i ) ; } } } } static double harmonicMean ( int n ) { generateDivisors ( n ) ; double sum = 0.0 ; int len = arr . size ( ) ; for ( int i = 0 ; i < len ; i ++ ) sum = sum + n \/ arr . get ( i ) ; sum = sum \/ n ; return arr . size ( ) \/ sum ; } static boolean isOreNumber ( int n ) { double mean = harmonicMean ( n ) ; if ( mean - Math . floor ( mean ) == 0 ) return true ; else return false ; } public static void main ( String [ ] args ) { int n = 28 ; if ( isOreNumber ( n ) ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ; } }"],"bleu":0.3375321784872927,"rouge_l":0.495222357928012}
{"id":1108,"predictions":["import java . io . * ; import java . util . * ; import java . lang . * ; import java . math . * ; import java . text . * ; public class Main { public static void main ( String [ ] args ) throws java . lang . Exception { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; System . out . println ( n * k ) ; } }"],"references":["class GFG { static int powOfPositive ( int n ) { int pos = ( int ) Math . floor ( ( Math . log ( n ) \/ Math . log ( 2 ) ) ) ; return ( int ) Math . pow ( 2 , pos ) ; } static int powOfNegative ( int n ) { int pos = ( int ) Math . ceil ( ( Math . log ( n ) \/ Math . log ( 2 ) ) ) ; return ( int ) ( - 1 * Math . pow ( 2 , pos ) ) ; } static void highestPowerOf2 ( int n ) { if ( n > 0 ) { System . out . println ( powOfPositive ( n ) ) ; } else { n = - n ; System . out . println ( powOfNegative ( n ) ) ; } } public static void main ( String [ ] args ) { int n = - 24 ; highestPowerOf2 ( n ) ; } }"],"bleu":0.14362870955375315,"rouge_l":0.2996133347267217}
{"id":1109,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) if ( arr [ i ] > arr [ j ] ) return false ; return true ; } static boolean isPrime ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) if ( arr [ i ] > arr [ j ] ) return false ; return true ; } static boolean isPrime ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) if ( isPrime ( arr [ i ] ) ) return false ; return true ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = arr . length ; if ( isPrime ( arr , n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; class GfG { static boolean prime [ ] = new boolean [ 1000000 + 5 ] ; static void findPrime ( ) { Arrays . fill ( prime , true ) ; prime [ 1 ] = false ; for ( int p = 2 ; p * p <= 1000000 ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i <= 1000000 ; i += p ) prime [ i ] = false ; } } } static int lenOfLongSubarr ( int arr [ ] , int n ) { Map < Integer , Integer > um = new HashMap < Integer , Integer > ( ) ; int sum = 0 , maxLen = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += prime [ arr [ i ] ] == false ? - 1 : 1 ; if ( sum == 1 ) maxLen = i + 1 ; else if ( ! um . containsKey ( sum ) ) um . put ( sum , i ) ; if ( um . containsKey ( sum - 1 ) ) { if ( maxLen < ( i - um . get ( sum - 1 ) ) ) maxLen = i - um . get ( sum - 1 ) ; } } return maxLen ; } public static void main ( String [ ] args ) { findPrime ( ) ; int arr [ ] = { 1 , 9 , 3 , 4 , 5 , 6 , 7 , 8 } ; int n = arr . length ; System . out . println ( lenOfLongSubarr ( arr , n ) ) ; } }"],"bleu":0.306831316040757,"rouge_l":0.4527849090300257}
{"id":1110,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["import java . io . * ; class TurnOff { static int turnOffK ( int n , int k ) { if ( k <= 0 ) return n ; return ( n & ~ ( 1 << ( k - 1 ) ) ) ; } public static void main ( String [ ] args ) { int n = 15 ; int k = 4 ; System . out . println ( turnOffK ( n , k ) ) ; } }"],"bleu":0.44312383089703666,"rouge_l":0.6131257390618841}
{"id":1111,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { if ( a [ i ] > a [ j ] ) { count ++ ; } } } System . out . println ( count ) ; } }"],"references":["class GFG { static int longestSubarray ( int a [ ] , int n ) { int hash [ ] [ ] = new int [ n ] [ 10 ] ; for ( int i = 0 ; i < n ; i ++ ) { int num = a [ i ] ; while ( num != 0 ) { hash [ i ] [ num % 10 ] = 1 ; num \/= 10 ; } } int longest = Integer . MIN_VALUE ; int count = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { int j ; for ( j = 0 ; j < 10 ; j ++ ) { if ( hash [ i ] [ j ] == 1 & hash [ i + 1 ] [ j ] == 1 ) { count ++ ; break ; } } if ( j == 10 ) { longest = Math . max ( longest , count + 1 ) ; count = 0 ; } } longest = Math . max ( longest , count + 1 ) ; return longest ; } public static void main ( String [ ] args ) { int a [ ] = { 11 , 22 , 33 , 44 , 54 , 56 , 63 } ; int n = a . length ; System . out . println ( longestSubarray ( a , n ) ) ; } }"],"bleu":0.26776946074966523,"rouge_l":0.473198355441781}
{"id":1112,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 3 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . io . * ; class GFG { static void find_Solution ( double x , int n ) { double sum = x , e = 2 , o = 1 , p = 1 ; for ( int i = 2 ; i <= n ; i ++ ) { p += 2 ; sum += ( double ) ( o \/ e ) * ( double ) ( Math . pow ( x , p ) \/ p ) ; o = o * ( o + 2 ) ; e = e * ( e + 2 ) ; } System . out . println ( sum ) ; } public static void main ( String [ ] args ) { double x = - 0.5 ; if ( Math . abs ( x ) >= 1 ) { System . out . println ( \" Invalid ▁ Input \" ) ; } int n = 8 ; find_Solution ( x , n ) ; } }"],"bleu":0.26968825659376433,"rouge_l":0.43736307508464445}
{"id":1113,"predictions":["import java . util . * ; class GFG { static boolean isVowel ( String s ) { for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i ) ) return false ; } return true ; } public static void main ( String [ ] args ) { String s = \" geeksforgeeksforgeeks \" ; if ( isVowel ( s ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static void replaceOriginal ( String s , int n ) { char r [ ] = new char [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { r [ i ] = s . charAt ( n - 1 - i ) ; if ( s . charAt ( i ) != ' a ' && s . charAt ( i ) != ' e ' && s . charAt ( i ) != ' i ' && s . charAt ( i ) != ' o ' && s . charAt ( i ) != ' u ' ) { System . out . print ( r [ i ] ) ; } } System . out . println ( \" \" ) ; } public static void main ( String [ ] args ) { String s = \" geeksforgeeks \" ; int n = s . length ( ) ; replaceOriginal ( s , n ) ; } }"],"bleu":0.31433168285803836,"rouge_l":0.4705234159779615}
{"id":1114,"predictions":["import java . util . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; return false ; } static boolean isPrime ( int n ) { if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; return false ; return false ; } public static void main ( String [ ] args ) { int n = 12 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; class GFG { static void SieveOfEratosthenes ( boolean prime [ ] , int p_size ) { prime [ 0 ] = false ; prime [ 1 ] = false ; for ( int p = 2 ; p * p <= p_size ; p ++ ) { if ( prime [ p ] ) { for ( int i = p * 2 ; i <= p_size ; i += p ) prime [ i ] = false ; } } } static int xorOfPrime ( char [ ] s ) { boolean [ ] prime = new boolean [ 100005 ] ; for ( int i = 0 ; i < 100005 ; i ++ ) prime [ i ] = true ; SieveOfEratosthenes ( prime , 10005 ) ; int i , j ; Map < Character , Integer > m = new HashMap < > ( ) ; for ( i = 0 ; i < s . length ; i ++ ) { if ( m . containsKey ( s [ i ] ) ) { m . put ( s [ i ] , m . get ( s [ i ] ) + 1 ) ; } else { m . put ( s [ i ] , 1 ) ; } } int result = 0 ; int flag = 0 ; for ( Map . Entry < Character , Integer > entry : m . entrySet ( ) ) { if ( prime [ entry . getValue ( ) ] ) { result ^= entry . getValue ( ) ; flag = 1 ; } } if ( flag != 1 ) return - 1 ; return result ; } public static void main ( String [ ] args ) { char [ ] s = \" gggggeeekkkks \" . toCharArray ( ) ; System . out . println ( xorOfPrime ( s ) ) ; } }"],"bleu":0.14285982830311345,"rouge_l":0.34787200337944874}
{"id":1115,"predictions":["import java . io . * ; import java . util . * ; class GFG { public static void main ( String [ ] args ) { int N = 5 ; System . out . println ( N * N ) ; } }"],"references":["import java . io . * ; class GFG { static void findNumbers ( int n , int d ) { for ( int i = 0 ; i < n - 2 ; i ++ ) System . out . print ( \"1\" + \" ▁ \" ) ; System . out . print ( \"2\" + \" ▁ \" ) ; System . out . println ( n + d ) ; } public static void main ( String args [ ] ) { int N = 3 , D = 5 ; findNumbers ( N , D ) ; } }"],"bleu":0.17095644607241287,"rouge_l":0.3863914997956681}
{"id":1116,"predictions":["import java . io . * ; class GFG { static boolean isPower ( int a , int b ) { if ( a < b ) return true ; if ( a > b ) return false ; return false ; } public static void main ( String [ ] args ) { int a = 12 , b = 12 ; if ( isPower ( a , b ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . io . * ; class GFG { static final double PI = 3.142 ; public static void main ( String [ ] args ) { double x , ret , val ; x = 60.0 ; val = ( int ) PI \/ 180.0 ; ret = Math . cos ( x * val ) ; System . out . print ( \" The ▁ cosine ▁ of ▁ \" + x + \" ▁ is ▁ \" ) ; System . out . print ( ret ) ; System . out . println ( \" ▁ degrees \" ) ; x = 90.0 ; val = ( int ) PI \/ 180.0 ; ret = Math . cos ( x * val ) ; System . out . print ( \" The ▁ cosine ▁ of ▁ \" + x + \" ▁ is ▁ \" ) ; System . out . print ( ret ) ; System . out . println ( \" ▁ degrees \" ) ; } }"],"bleu":0.1809206378964232,"rouge_l":0.36355300859598855}
{"id":1117,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["class GFG { final static int N = 100 ; final static int INF = 1000000 ; static int dp [ ] [ ] = new int [ N ] [ N ] ; static int vis [ ] [ ] = new int [ N ] [ N ] ; static int findSum ( int [ ] arr , int n , int k , int l , int r ) { if ( ( l ) + ( n - 1 - r ) == k ) return arr [ r ] - arr [ l ] ; if ( vis [ l ] [ r ] == 1 ) return dp [ l ] [ r ] ; vis [ l ] [ r ] = 1 ; dp [ l ] [ r ] = Math . min ( findSum ( arr , n , k , l , r - 1 ) , findSum ( arr , n , k , l + 1 , r ) ) ; return dp [ l ] [ r ] ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 100 , 120 , 140 } ; int k = 2 ; int n = arr . length ; System . out . println ( findSum ( arr , n , k , 0 , n - 1 ) ) ; } }"],"bleu":0.2372674763092221,"rouge_l":0.4218597308877697}
{"id":1118,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( a [ i ] + \" \" ) ; } out . println ( ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["class GFG { static int totalPairs ( String s1 , String s2 ) { int count = 0 ; int [ ] arr1 = new int [ 7 ] ; int [ ] arr2 = new int [ 7 ] ; for ( int i = 0 ; i < s1 . length ( ) ; i ++ ) { int set_bits = Integer . bitCount ( s1 . charAt ( i ) ) ; arr1 [ set_bits ] ++ ; } for ( int i = 0 ; i < s2 . length ( ) ; i ++ ) { int set_bits = Integer . bitCount ( s2 . charAt ( i ) ) ; arr2 [ set_bits ] ++ ; } for ( int i = 1 ; i <= 6 ; i ++ ) { count += ( arr1 [ i ] * arr2 [ i ] ) ; } return count ; } public static void main ( String [ ] args ) { String s1 = \" geeks \" ; String s2 = \" forgeeks \" ; System . out . println ( totalPairs ( s1 , s2 ) ) ; } }"],"bleu":0.23719297497237585,"rouge_l":0.4139544076953485}
{"id":1119,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans += a [ i ] ; } System . out . println ( ans ) ; } }"],"references":["class GFG { static long minOperations ( long n ) { long count = 0 ; long d = 0 ; if ( n == 1 ) return 0 ; while ( n > 9 ) { d = Math . max ( n % 10 , d ) ; n \/= 10 ; count += 10 ; } d = Math . max ( d , n - 1 ) ; count += Math . abs ( d ) ; return count - 1 ; } public static void main ( String [ ] args ) { long n = 240 ; System . out . println ( minOperations ( n ) ) ; } }"],"bleu":0.2220431773596685,"rouge_l":0.3395018783915404}
{"id":1120,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String a = sc . next ( ) ; String b = sc . next ( ) ; String c = \" \" ; for ( int i = 0 ; i < a . length ( ) ; i ++ ) { if ( a . charAt ( i ) == b . charAt ( i ) ) { System . out . println ( \" Yes \" ) ; return ; } } System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static void myCopy ( char s1 [ ] , char s2 [ ] ) { int i = 0 ; for ( i = 0 ; i < s1 . length ; i ++ ) s2 [ i ] = s1 [ i ] ; } public static void main ( String [ ] args ) { char s1 [ ] = \" GEEKSFORGEEKS \" . toCharArray ( ) ; char s2 [ ] = new char [ s1 . length ] ; myCopy ( s1 , s2 ) ; System . out . println ( String . valueOf ( s2 ) ) ; } }"],"bleu":0.27502265786078656,"rouge_l":0.38624262483810623}
{"id":1121,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int count ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ i ] > arr [ j ] ) { count ++ ; } } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 4 , 4 , 4 , 4 , 3 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 6 } }"],"references":["import java . util . * ; class GFG { static void bitonicGenerator ( int arr [ ] , int n ) { Vector < Integer > evenArr = new Vector < Integer > ( ) ; Vector < Integer > oddArr = new Vector < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( i % 2 != 1 ) { evenArr . add ( arr [ i ] ) ; } else { oddArr . add ( arr [ i ] ) ; } } Collections . sort ( evenArr ) ; Collections . sort ( oddArr , Collections . reverseOrder ( ) ) ; int i = 0 ; for ( int j = 0 ; j < evenArr . size ( ) ; j ++ ) { arr [ i ++ ] = evenArr . get ( j ) ; } for ( int j = 0 ; j < oddArr . size ( ) ; j ++ ) { arr [ i ++ ] = oddArr . get ( j ) ; } } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 5 , 8 , 9 , 6 , 7 , 3 , 4 , 2 , 0 } ; int n = arr . length ; bitonicGenerator ( arr , n ) ; for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( arr [ i ] + \" ▁ \" ) ; } } }"],"bleu":0.16835496324670812,"rouge_l":0.2580372250423012}
{"id":1122,"predictions":["import java . io . * ; import java . util . * ; class GFG { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; if ( n == 1 ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ; } }"],"references":["import java . io . * ; class GFG { static void ReverseCharBridge ( int n ) { for ( int i = 0 ; i < n ; i ++ ) { for ( int j = ' A ' ; j < ' A ' + ( 2 * n ) - 1 ; j ++ ) { if ( j >= ( ' A ' + n - 1 ) + i ) System . out . print ( ( char ) ( ( ' A ' + n - 1 ) - ( j % ( ' A ' + n - 1 ) ) ) ) ; else if ( j <= ( ' A ' + n - 1 ) - i ) System . out . print ( ( char ) j ) ; else System . out . print ( \" ▁ \" ) ; } System . out . println ( ) ; } } public static void main ( String args [ ] ) { int n = 6 ; ReverseCharBridge ( n ) ; } }"],"bleu":0.11580086376297466,"rouge_l":0.3362811530952108}
{"id":1123,"predictions":["import java . io . * ; import java . util . * ; class GFG { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { ans += Math . abs ( a [ i ] - a [ j ] ) ; } } System . out . println ( ans ) ; } }"],"references":["class GFG { final static int n = 4 ; final static int m = 4 ; static float calcProbability ( int M [ ] [ ] , int k ) { float dp [ ] [ ] = new float [ m ] [ n ] ; float sum [ ] = new float [ n ] ; for ( int j = 0 ; j < n ; j ++ ) { dp [ 0 ] [ j ] = M [ 0 ] [ j ] ; sum [ 0 ] = sum [ 0 ] + dp [ 0 ] [ j ] ; } for ( int i = 1 ; i < m ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { dp [ i ] [ j ] += dp [ i - 1 ] [ j ] \/ sum [ i - 1 ] + M [ i ] [ j ] ; sum [ i ] += dp [ i ] [ j ] ; } } return dp [ n - 1 ] [ k - 1 ] \/ sum [ n - 1 ] ; } public static void main ( String [ ] args ) { int M [ ] [ ] = { { 1 , 1 , 0 , 3 } , { 2 , 3 , 2 , 3 } , { 9 , 3 , 0 , 2 } , { 2 , 3 , 2 , 2 } } ; int k = 3 ; System . out . println ( calcProbability ( M , k ) ) ; } }"],"bleu":0.17128171123133265,"rouge_l":0.3828901897171874}
{"id":1124,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int countPairs ( int a [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % 2 == 0 ) count ++ ; } return count ; } static int countPairs ( int a [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % 2 == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 1 , 2 , 3 , 3 , 3 , 3 , 3 } ; int n = a . length ; System . out . println ( countPairs ( a , n ) ) ; } }"],"references":["import java . util . Arrays ; class GFG { static int largestSubset ( int [ ] a , int n ) { Arrays . sort ( a ) ; int [ ] dp = new int [ n ] ; dp [ n - 1 ] = 1 ; for ( int i = n - 2 ; i >= 0 ; i -- ) { int mxm = 0 ; for ( int j = i + 1 ; j < n ; j ++ ) { if ( a [ j ] % a [ i ] == 0 ) { mxm = Math . max ( mxm , dp [ j ] ) ; } } dp [ i ] = 1 + mxm ; } return Arrays . stream ( dp ) . max ( ) . getAsInt ( ) ; } public static void main ( String [ ] args ) { int [ ] a = { 1 , 3 , 6 , 13 , 17 , 18 } ; int n = a . length ; System . out . println ( largestSubset ( a , n ) ) ; } }"],"bleu":0.40544954018244167,"rouge_l":0.5812017167381974}
{"id":1125,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int n ) { if ( n == 0 ) return false ; return false ; } static boolean isPrime ( int n ) { if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 12 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static String findLargest ( int N ) { String largest = strings ( N , '7' ) ; return largest ; } static String findSmallest ( int N ) { String smallest = \"1\" + strings ( ( N - 1 ) , '0' ) ; return smallest ; } private static String strings ( int N , char c ) { String temp = \" \" ; for ( int i = 0 ; i < N ; i ++ ) { temp += c ; } return temp ; } static void printLargestSmallest ( int N ) { System . out . print ( \" Largest : ▁ \" + findLargest ( N ) + \" \\n \" ) ; System . out . print ( \" Smallest : ▁ \" + findSmallest ( N ) + \" \\n \" ) ; } public static void main ( String [ ] args ) { int N = 4 ; printLargestSmallest ( N ) ; } }"],"bleu":0.18828442667078538,"rouge_l":0.38467293715262935}
{"id":1126,"predictions":["import java . io . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["class GFG { static void findMaxNum ( int arr [ ] , int n ) { int [ ] hash = new int [ 10 ] ; for ( int i = 0 ; i < n ; i ++ ) { hash [ arr [ i ] ] ++ ; } for ( int i = 9 ; i >= 0 ; i -- ) { for ( int j = 0 ; j < hash [ i ] ; j ++ ) System . out . print ( i ) ; } } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 , 0 } ; int n = arr . length ; findMaxNum ( arr , n ) ; } }"],"bleu":0.5770200074070972,"rouge_l":0.7054571738344778}
{"id":1127,"predictions":["import java . io . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 10 == 0 ) return false ; if ( n % 10 == 0 ) return false ; if ( n % 10 == 0 ) return false ; if ( isPrime ( n \/ 10 ) ) return false ; if ( isPrime ( n \/ 10 ) ) return false ; if ( isPrime ( n \/ 10 ) ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 10 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . Scanner ; class Deserium { static int countDigits ( int n ) { int c = 0 ; do { c ++ ; n = n \/ 10 ; } while ( n != 0 ) ; return c ; } static boolean isDeserium ( int x ) { int temp = x ; int p = countDigits ( x ) ; int sum = 0 ; while ( x != 0 ) { int digit = x % 10 ; sum += Math . pow ( digit , p ) ; p -- ; x = x \/ 10 ; } return ( sum == temp ) ; } public static void main ( String [ ] args ) { int x = 135 ; if ( isDeserium ( x ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.3380662143764974,"rouge_l":0.5353740768489779}
{"id":1128,"predictions":["import java . io . * ; import java . util . * ; class GFG { static float find_area ( float a , float b ) { if ( a * b < 0 ) return - 1 ; if ( a * b < 0 ) return - 1 ; float r = ( float ) Math . pow ( a , b ) ; return r ; } public static void main ( String [ ] args ) { float a = 5 , b = 5 ; System . out . println ( find_area ( a , b ) ) ; } }"],"references":["import java . util . * ; class GFG { static double polyarea ( double n , double r ) { if ( r < 0 && n < 0 ) return - 1 ; double A = ( ( r * r * n ) * Math . sin ( ( 360 \/ n ) * 3.14159 \/ 180 ) ) \/ 2 ; return A ; } public static void main ( String [ ] args ) { float r = 9 , n = 6 ; System . out . println ( polyarea ( n , r ) ) ; } }"],"bleu":0.4268915891436117,"rouge_l":0.623702556158017}
{"id":1129,"predictions":["import java . io . * ; class GFG { static int maxSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } static int maxSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int smallestSumSubarr ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = - arr [ i ] ; int sum_here = arr [ 0 ] , max_sum = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { sum_here = Math . max ( sum_here + arr [ i ] , arr [ i ] ) ; max_sum = Math . max ( max_sum , sum_here ) ; } return ( - 1 ) * max_sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , - 4 , 2 , - 3 , - 1 , 7 , - 5 } ; int n = arr . length ; System . out . print ( \" Smallest ▁ sum : ▁ \" + smallestSumSubarr ( arr , n ) ) ; } }"],"bleu":0.5212854721174075,"rouge_l":0.6740331491712708}
{"id":1130,"predictions":["import java . io . * ; class GFG { static int maxSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int countSub ( int arr [ ] , int n , int x ) { int st = 0 ; int end = 0 ; int sum = 0 ; int cnt = 0 ; while ( end < n ) { sum += arr [ end ] ; while ( st <= end && sum > x ) { sum -= arr [ st ] ; st ++ ; } cnt += ( end - st + 1 ) ; end ++ ; } return cnt ; } static int findSubSumLtoR ( int arr [ ] , int n , int L , int R ) { int Rcnt = countSub ( arr , n , R ) ; int Lcnt = countSub ( arr , n , L - 1 ) ; return Rcnt - Lcnt ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 4 , 6 } ; int n = arr . length ; int L = 3 ; int R = 8 ; System . out . println ( findSubSumLtoR ( arr , n , L , R ) ) ; } }"],"bleu":0.2518003642875047,"rouge_l":0.525454897406117}
{"id":1131,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int count ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ i ] < arr [ j ] ) { count ++ ; } } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( count ( arr , n ) ) ; } }"],"references":["import java . util . * ; class MinimumCostPath { private static int min ( int x , int y , int z ) { if ( x < y ) return ( x < z ) ? x : z ; else return ( y < z ) ? y : z ; } private static int minCost ( int cost [ ] [ ] , int m , int n ) { int i , j ; int tc [ ] [ ] = new int [ m + 1 ] [ n + 1 ] ; tc [ 0 ] [ 0 ] = cost [ 0 ] [ 0 ] ; for ( i = 1 ; i <= m ; i ++ ) tc [ i ] [ 0 ] = tc [ i - 1 ] [ 0 ] + cost [ i ] [ 0 ] ; for ( j = 1 ; j <= n ; j ++ ) tc [ 0 ] [ j ] = tc [ 0 ] [ j - 1 ] + cost [ 0 ] [ j ] ; for ( i = 1 ; i <= m ; i ++ ) for ( j = 1 ; j <= n ; j ++ ) tc [ i ] [ j ] = min ( tc [ i - 1 ] [ j - 1 ] , tc [ i - 1 ] [ j ] , tc [ i ] [ j - 1 ] ) + cost [ i ] [ j ] ; return tc [ m ] [ n ] ; } public static void main ( String args [ ] ) { int cost [ ] [ ] = { { 1 , 2 , 3 } , { 4 , 8 , 2 } , { 1 , 5 , 3 } } ; System . out . println ( minCost ( cost , 2 , 2 ) ) ; } }"],"bleu":0.10328074356406056,"rouge_l":0.3762824951217977}
{"id":1132,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int count ( int a [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] > a [ i ] ) { count ++ ; } } return count ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 } ; int n = a . length ; System . out . println ( count ( a , n ) ) ; } }"],"references":["class GFG { static int msbPos ( long n ) { int msb_p = - 1 ; while ( n > 0 ) { n = n >> 1 ; msb_p ++ ; } return msb_p ; } static long andOperator ( long x , long y ) { long res = 0 ; while ( x > 0 && y > 0 ) { int msb_p1 = msbPos ( x ) ; int msb_p2 = msbPos ( y ) ; if ( msb_p1 != msb_p2 ) break ; long msb_val = ( 1 << msb_p1 ) ; res = res + msb_val ; x = x - msb_val ; y = y - msb_val ; } return res ; } public static void main ( String [ ] args ) { long x = 10 , y = 15 ; System . out . print ( andOperator ( x , y ) ) ; } }"],"bleu":0.21509959523758346,"rouge_l":0.36961551173295143}
{"id":1133,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int count ( int a [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( a [ i ] < a [ j ] ) count ++ ; } } return count ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 , 3 } ; int n = a . length ; System . out . println ( count ( a , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static long [ ] count_color = new long [ 2 ] ; static void dfs ( Vector < Integer > adj [ ] , int node , int parent , boolean color ) { count_color [ color == false ? 0 : 1 ] ++ ; for ( int i = 0 ; i < adj [ node ] . size ( ) ; i ++ ) { if ( adj [ node ] . get ( i ) != parent ) dfs ( adj , adj [ node ] . get ( i ) , node , ! color ) ; } } static int findMaxEdges ( Vector < Integer > adj [ ] , int n ) { dfs ( adj , 1 , 0 , false ) ; return ( int ) ( count_color [ 0 ] * count_color [ 1 ] - ( n - 1 ) ) ; } public static void main ( String [ ] args ) { int n = 5 ; Vector < Integer > [ ] adj = new Vector [ n + 1 ] ; for ( int i = 0 ; i < n + 1 ; i ++ ) adj [ i ] = new Vector < Integer > ( ) ; adj [ 1 ] . add ( 2 ) ; adj [ 1 ] . add ( 3 ) ; adj [ 2 ] . add ( 4 ) ; adj [ 3 ] . add ( 5 ) ; System . out . println ( findMaxEdges ( adj , n ) ) ; } }"],"bleu":0.18651585948819815,"rouge_l":0.3728986245542537}
{"id":1134,"predictions":["import java . io . * ; import java . util . * ; class GFG { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = \" \" ; for ( int i = 0 ; i < n ; i ++ ) { s += \" \" + s . charAt ( i ) ; } System . out . println ( s . charAt ( n - 1 ) + \" \" + s . charAt ( n - 1 ) + \" \" + s . charAt ( n - 1 ) ) ; } }"],"references":["import java . util . * ; class solution { static void steps ( String str , int n ) { boolean flag = false ; int x = 0 ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { if ( x == 0 ) flag = true ; if ( x == n - 1 ) flag = false ; for ( int j = 0 ; j < x ; j ++ ) System . out . print ( \" * \" ) ; System . out . print ( str . charAt ( i ) + \" \\n \" ) ; if ( flag == true ) x ++ ; else x -- ; } } public static void main ( String args [ ] ) { int n = 4 ; String str = \" GeeksForGeeks \" ; System . out . println ( \" String : ▁ \" + str ) ; System . out . println ( \" Max ▁ Length ▁ of ▁ Steps : ▁ \" + n ) ; steps ( str , n ) ; } }"],"bleu":0.21293901947087832,"rouge_l":0.38169730152522485}
{"id":1135,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } Arrays . sort ( arr ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } System . out . println ( sum ) ; } }"],"references":["import java . util . * ; class GFG { static int max_xor ( int arr [ ] , int n ) { int maxx = 0 , mask = 0 ; HashSet < Integer > se = new HashSet < Integer > ( ) ; for ( int i = 30 ; i >= 0 ; i -- ) { mask |= ( 1 << i ) ; for ( int j = 0 ; j < n ; ++ j ) { se . add ( arr [ j ] & mask ) ; } int newMaxx = maxx | ( 1 << i ) ; for ( int prefix : se ) { if ( se . contains ( newMaxx ^ prefix ) ) { maxx = newMaxx ; break ; } } se . clear ( ) ; } return maxx ; } public static void main ( String [ ] args ) { int arr [ ] = { 25 , 10 , 2 , 8 , 5 , 3 } ; int n = arr . length ; System . out . println ( max_xor ( arr , n ) ) ; } }"],"bleu":0.24928697938248007,"rouge_l":0.4083064516129033}
{"id":1136,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int N = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; System . out . println ( ( int ) Math . pow ( 2 , M ) ) ; } }"],"references":["import java . util . * ; import java . lang . * ; import java . io . * ; class exp_sq { static long N = 1000000007L ; public static void main ( String [ ] args ) { long base = 5 ; long exp = 100000 ; long modulo = exponentiation ( base , exp ) ; System . out . println ( modulo ) ; } static long exponentiation ( long base , long exp ) { long t = 1L ; while ( exp > 0 ) { if ( exp % 2 != 0 ) t = ( t * base ) % N ; base = ( base * base ) % N ; exp \/= 2 ; } return t % N ; } }"],"bleu":0.26461976566293055,"rouge_l":0.38735077470154944}
{"id":1137,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["public class GFG { static long countMaxIntersect ( long n ) { return ( n ) * ( n - 1 ) \/ 2 ; } public static void main ( String args [ ] ) { long n = 8 ; System . out . println ( countMaxIntersect ( n ) ) ; } }"],"bleu":0.3309981997782119,"rouge_l":0.6114109483423285}
{"id":1138,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["class GFG { static void printArr ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + \" ▁ \" ) ; } static void findArray ( int n , int k , int s ) { int vis [ ] = new int [ n ] ; int cnt = 0 ; int arr [ ] = new int [ n ] ; for ( int i = 0 ; i < n && cnt < k ; i += 2 ) { arr [ i ] = s ; vis [ i ] = 1 ; cnt ++ ; } int val = s ; if ( s % 2 == 0 ) val ++ ; else val = val + 2 ; for ( int i = 0 ; i < n ; i ++ ) { if ( vis [ i ] == 0 ) { arr [ i ] = val ; } } printArr ( arr , n ) ; } public static void main ( String [ ] args ) { int n = 8 , k = 3 , s = 12 ; findArray ( n , k , s ) ; } }"],"bleu":0.2921132752530942,"rouge_l":0.44752287243224576}
{"id":1139,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int count ( int n ) { int count = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( n % i == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( count ( n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int modInverse ( int a , int m ) { a = a % m ; for ( int x = 1 ; x < m ; x ++ ) if ( ( a * x ) % m == 1 ) return x ; return 1 ; } public static void main ( String args [ ] ) { int a = 3 , m = 11 ; System . out . println ( modInverse ( a , m ) ) ; } }"],"bleu":0.3814395383078682,"rouge_l":0.6599197347757808}
{"id":1140,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int count = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i ) ) count ++ ; } System . out . println ( count ) ; } }"],"references":["import java . util . * ; class GFG { static int countDistinctCode ( String str ) { Set < String > codes = new HashSet < > ( ) ; for ( int i = 0 ; i < str . length ( ) - 1 ; i ++ ) codes . add ( str . substring ( i , i + 2 ) ) ; return codes . size ( ) ; } public static void main ( String [ ] args ) { String str = \" UPUP \" ; System . out . println ( countDistinctCode ( str ) ) ; } }"],"bleu":0.39842493361328657,"rouge_l":0.5442090170463596}
{"id":1141,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; System . out . println ( ( a + b ) \/ 2 ) ; } }"],"references":["class GFG { static int OR ( int a [ ] , int n ) { int ans = a [ 0 ] ; int i ; for ( i = 1 ; i < n ; i ++ ) { ans |= a [ i ] ; } return ans ; } public static void main ( String args [ ] ) { int a [ ] = { 1 , 4 , 6 } ; int n = a . length ; System . out . println ( OR ( a , n ) ) ; } }"],"bleu":0.1625941911471165,"rouge_l":0.37981132075471696}
{"id":1142,"predictions":["import java . io . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["import java . util . Arrays ; import java . util . Collections ; class GFG { public static int kthSmallest ( Integer [ ] arr , int k ) { Arrays . sort ( arr ) ; return arr [ k - 1 ] ; } public static void main ( String [ ] args ) { Integer arr [ ] = new Integer [ ] { 12 , 3 , 5 , 7 , 19 } ; int k = 2 ; System . out . print ( \" K ' th ▁ smallest ▁ element ▁ is ▁ \" + kthSmallest ( arr , k ) ) ; } }"],"bleu":0.30303379142599707,"rouge_l":0.5678191489361701}
{"id":1143,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int countPairs ( int a [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % 2 == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 } ; int n = a . length ; System . out . println ( countPairs ( a , n ) ) ; } }"],"references":["class GFG { static int findOddPair ( int A [ ] , int N ) { int i , j ; int oddPair = 0 ; for ( i = 0 ; i < N ; i ++ ) { for ( j = i + 1 ; j < N ; j ++ ) { if ( ( A [ i ] ^ A [ j ] ) % 2 != 0 ) oddPair ++ ; } } return oddPair ; } public static void main ( String args [ ] ) { int A [ ] = { 5 , 4 , 7 , 2 , 1 } ; int N = A . length ; System . out . println ( findOddPair ( A , N ) ) ; } }"],"bleu":0.37423416758590355,"rouge_l":0.6512734756881914}
{"id":1144,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int maxSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 4 , 4 , 4 , 4 , 6 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static void ReplaceElements ( int arr [ ] , int n ) { HashMap < Integer , Integer > mp = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( ! mp . containsKey ( arr [ i ] ) ) { mp . put ( arr [ i ] , 1 ) ; } else { mp . put ( arr [ i ] , mp . get ( arr [ i ] ) + 1 ) ; } } for ( int i = 0 ; i < n ; ++ i ) { arr [ i ] = n - mp . get ( arr [ i ] ) ; } } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 5 , 2 , 2 , 5 , 4 } ; int n = arr . length ; ReplaceElements ( arr , n ) ; for ( int i = 0 ; i < n ; ++ i ) { System . out . print ( arr [ i ] + \" ▁ \" ) ; } } }"],"bleu":0.3502126156139852,"rouge_l":0.4288142139822325}
{"id":1145,"predictions":["import java . io . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["import java . io . * ; class Combination { static void combinationUtil ( int arr [ ] , int n , int r , int index , int data [ ] , int i ) { if ( index == r ) { for ( int j = 0 ; j < r ; j ++ ) System . out . print ( data [ j ] + \" ▁ \" ) ; System . out . println ( \" \" ) ; return ; } if ( i >= n ) return ; data [ index ] = arr [ i ] ; combinationUtil ( arr , n , r , index + 1 , data , i + 1 ) ; combinationUtil ( arr , n , r , index , data , i + 1 ) ; } static void printCombination ( int arr [ ] , int n , int r ) { int data [ ] = new int [ r ] ; combinationUtil ( arr , n , r , 0 , data , 0 ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 } ; int r = 3 ; int n = arr . length ; printCombination ( arr , n , r ) ; } }"],"bleu":0.29162688300325257,"rouge_l":0.4841665984780297}
{"id":1146,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int maxSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } static int maxSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }"],"references":["class GFG { static void sieve ( int maxm , int [ ] prime ) { prime [ 0 ] = prime [ 1 ] = 1 ; for ( int i = 2 ; i * i <= maxm ; i ++ ) if ( prime [ i ] == 0 ) for ( int j = 2 * i ; j <= maxm ; j += i ) prime [ j ] = 1 ; } static long countPair ( int [ ] a , int n ) { int maxm = a [ 0 ] ; int i ; for ( i = 1 ; i < n ; i ++ ) if ( a [ i ] > maxm ) maxm = a [ i ] ; int [ ] prime = new int [ maxm + 1 ] ; for ( i = 0 ; i < maxm + 1 ; i ++ ) prime [ i ] = 0 ; sieve ( maxm , prime ) ; int countPrimes = 0 ; for ( i = 0 ; i < n ; i ++ ) if ( prime [ a [ i ] ] == 0 ) countPrimes ++ ; int nonPrimes = n - countPrimes ; long pairswith1Prime = nonPrimes * countPrimes ; long pairsWith2Primes = ( countPrimes * ( countPrimes - 1 ) ) \/ 2 ; return pairswith1Prime + pairsWith2Primes ; } public static void main ( String [ ] args ) { int [ ] arr = { 2 , 3 , 5 , 4 , 7 } ; int n = arr . length ; System . out . println ( countPair ( arr , n ) ) ; } }"],"bleu":0.3075309896545421,"rouge_l":0.5303659486114717}
{"id":1147,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["import java . util . * ; import java . lang . * ; import java . io . * ; class GFG { static int nextPerfectCube ( int N ) { int nextN = ( int ) Math . floor ( Math . cbrt ( N ) ) + 1 ; return nextN * nextN * nextN ; } public static void main ( String args [ ] ) { int n = 35 ; System . out . print ( nextPerfectCube ( n ) ) ; } }"],"bleu":0.384261795584298,"rouge_l":0.6082111436950146}
{"id":1148,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int countPairs ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ i ] > arr [ j ] ) { count ++ ; } } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( countPairs ( arr , n ) ) ; } }"],"references":["class GFG { static void reverse ( int arr [ ] , int n , int k ) { for ( int i = 0 ; i < n ; i += k ) { int left = i ; int right = Math . min ( i + k - 1 , n - 1 ) ; int temp ; while ( left < right ) { temp = arr [ left ] ; arr [ left ] = arr [ right ] ; arr [ right ] = temp ; left += 1 ; right -= 1 ; } } } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 } ; int k = 3 ; int n = arr . length ; reverse ( arr , n , k ) ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + \" ▁ \" ) ; } }"],"bleu":0.3928461325926617,"rouge_l":0.5254141031708471}
{"id":1149,"predictions":["import java . util . * ; class GFG { static boolean isVowel ( String str ) { int n = str . length ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( str . charAt ( i ) == str . charAt ( i ) ) count ++ ; } return count ; } public static void main ( String [ ] args ) { String str = \" geeksforgeeksforgeeks \" ; if ( isVowel ( str ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { public static void printChar ( String str , int n ) { int [ ] freq = new int [ 26 ] ; for ( int i = 0 ; i < n ; i ++ ) freq [ str . charAt ( i ) - ' a ' ] ++ ; for ( int i = 0 ; i < n ; i ++ ) { if ( freq [ str . charAt ( i ) - ' a ' ] % 2 == 1 ) { System . out . print ( str . charAt ( i ) ) ; } } } public static void main ( String [ ] args ) { String str = \" geeksforgeeks \" ; int n = str . length ( ) ; printChar ( str , n ) ; } }"],"bleu":0.4437021731267388,"rouge_l":0.5721768790352053}
{"id":1150,"predictions":["import java . io . * ; import java . util . * ; class GFG { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { System . out . print ( b [ i ] + \" \" ) ; } System . out . println ( ) ; } }"],"references":["class GFG { static boolean isSafe ( int x , int y ) { return ( x < 4 && y < 3 ) ; } static int minJump ( int height [ ] [ ] , int x , int y ) { if ( x == 4 - 1 && y == 3 - 1 ) return 0 ; int diag = Integer . MAX_VALUE ; if ( isSafe ( x + 1 , y + 1 ) ) diag = minJump ( height , x + 1 , y + 1 ) + Math . abs ( height [ x ] [ y ] - height [ x + 1 ] [ y + 1 ] ) ; int down = Integer . MAX_VALUE ; if ( isSafe ( x + 1 , y ) ) down = minJump ( height , x + 1 , y ) + Math . abs ( height [ x ] [ y ] - height [ x + 1 ] [ y ] ) ; int right = Integer . MAX_VALUE ; if ( isSafe ( x , y + 1 ) ) right = minJump ( height , x , y + 1 ) + Math . abs ( height [ x ] [ y ] - height [ x ] [ y + 1 ] ) ; return Math . min ( down , Math . min ( right , diag ) ) ; } public static void main ( String [ ] args ) { int height [ ] [ ] = { { 5 , 4 , 2 } , { 9 , 2 , 1 } , { 2 , 5 , 9 } , { 1 , 3 , 11 } } ; System . out . println ( minJump ( height , 0 , 0 ) ) ; } }"],"bleu":0.09366082395175698,"rouge_l":0.24639778139506846}
{"id":1151,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int countSubarray ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ i ] < arr [ j ] ) { count ++ ; } } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 4 , 3 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4"],"references":["import java . util . * ; class Main { static int segregate ( int arr [ ] , int size ) { int j = 0 , i ; for ( i = 0 ; i < size ; i ++ ) { if ( arr [ i ] <= 0 ) { int temp ; temp = arr [ i ] ; arr [ i ] = arr [ j ] ; arr [ j ] = temp ; j ++ ; } } return j ; } static int findMissingPositive ( int arr [ ] , int size ) { int i ; for ( i = 0 ; i < size ; i ++ ) { int x = Math . abs ( arr [ i ] ) ; if ( x - 1 < size && arr [ x - 1 ] > 0 ) arr [ x - 1 ] = - arr [ x - 1 ] ; } for ( i = 0 ; i < size ; i ++ ) if ( arr [ i ] > 0 ) return i + 1 ; return size + 1 ; } static int findMissing ( int arr [ ] , int size ) { int shift = segregate ( arr , size ) ; int arr2 [ ] = new int [ size - shift ] ; int j = 0 ; for ( int i = shift ; i < size ; i ++ ) { arr2 [ j ] = arr [ i ] ; j ++ ; } return findMissingPositive ( arr2 , j ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 0 , 10 , 2 , - 10 , - 20 } ; int arr_size = arr . length ; int missing = findMissing ( arr , arr_size ) ; System . out . println ( \" The ▁ smallest ▁ positive ▁ missing ▁ number ▁ is ▁ \" + missing ) ; } }"],"bleu":0.14095429913070903,"rouge_l":0.21197475635085478}
{"id":1152,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int count ( int a [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( a [ i ] > a [ j ] ) count ++ ; } } return count ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4"],"references":["import java . util . * ; class GFG { static class pair { int first , second ; public pair ( int first , int second ) { this . first = first ; this . second = second ; } } static int __gcd ( int a , int b ) { if ( b == 0 ) return a ; return __gcd ( b , a % b ) ; } static int minStepsNeeded ( int k , int d1 , int d2 , int x ) { int gcd = __gcd ( d1 , d2 ) ; if ( ( k - x ) % gcd != 0 ) return - 1 ; Queue < pair > q = new LinkedList < > ( ) ; HashSet < Integer > visited = new HashSet < > ( ) ; q . add ( new pair ( k , 0 ) ) ; visited . add ( k ) ; while ( ! q . isEmpty ( ) ) { int s = q . peek ( ) . first ; int stp = q . peek ( ) . second ; if ( s == x ) return stp ; q . remove ( ) ; if ( ! visited . contains ( s + d1 ) ) { q . add ( new pair ( s + d1 , stp + 1 ) ) ; visited . add ( s + d1 ) ; } if ( visited . contains ( s + d2 ) ) { q . add ( new pair ( s + d2 , stp + 1 ) ) ; visited . add ( s + d2 ) ; } if ( ! visited . contains ( s - d1 ) ) { q . add ( new pair ( s - d1 , stp + 1 ) ) ; visited . add ( s - d1 ) ; } if ( ! visited . contains ( s - d2 ) ) { q . add ( new pair ( s - d2 , stp + 1 ) ) ; visited . add ( s - d2 ) ; } } return Integer . MIN_VALUE ; } public static void main ( String [ ] args ) { int k = 10 , d1 = 4 , d2 = 6 , x = 8 ; System . out . println ( minStepsNeeded ( k , d1 , d2 , x ) ) ; } }"],"bleu":0.07799470940567821,"rouge_l":0.1452695388612254}
{"id":1153,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["import java . util . * ; import java . lang . * ; class Main { static void minAbsSumPair ( int arr [ ] , int arr_size ) { int inv_count = 0 ; int l , r , min_sum , sum , min_l , min_r ; if ( arr_size < 2 ) { System . out . println ( \" Invalid ▁ Input \" ) ; return ; } min_l = 0 ; min_r = 1 ; min_sum = arr [ 0 ] + arr [ 1 ] ; for ( l = 0 ; l < arr_size - 1 ; l ++ ) { for ( r = l + 1 ; r < arr_size ; r ++ ) { sum = arr [ l ] + arr [ r ] ; if ( Math . abs ( min_sum ) > Math . abs ( sum ) ) { min_sum = sum ; min_l = l ; min_r = r ; } } } System . out . println ( \" ▁ The ▁ two ▁ elements ▁ whose ▁ \" + \" sum ▁ is ▁ minimum ▁ are ▁ \" + arr [ min_l ] + \" ▁ and ▁ \" + arr [ min_r ] ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 60 , - 10 , 70 , - 80 , 85 } ; minAbsSumPair ( arr , 6 ) ; } }"],"bleu":0.18798288335351807,"rouge_l":0.4170111287758346}
{"id":1154,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } System . out . println ( sum ) ; } }"],"references":["import java . util . * ; class GFG { static int findSubsequence ( int arr [ ] , int n ) { int len = 1 ; int tmp ; int i , j , d ; int dp [ ] = new int [ 10 ] ; int cnt [ ] = new int [ 10 ] ; int locMax ; tmp = arr [ 0 ] ; while ( tmp > 0 ) { dp [ tmp % 10 ] = 1 ; tmp \/= 10 ; } for ( i = 1 ; i < n ; i ++ ) { tmp = arr [ i ] ; locMax = 1 ; Arrays . fill ( cnt , 0 ) ; while ( tmp > 0 ) { cnt [ tmp % 10 ] = 1 ; tmp \/= 10 ; } for ( d = 0 ; d <= 9 ; d ++ ) { if ( cnt [ d ] == 1 ) { dp [ d ] ++ ; locMax = Math . max ( locMax , dp [ d ] ) ; } } for ( d = 0 ; d <= 9 ; d ++ ) { if ( cnt [ d ] == 1 ) { dp [ d ] = locMax ; } } len = Math . max ( len , locMax ) ; } return len ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 12 , 44 , 29 , 33 , 96 , 89 } ; int n = arr . length ; System . out . print ( findSubsequence ( arr , n ) ) ; } }"],"bleu":0.17639435455844057,"rouge_l":0.36955551304126016}
{"id":1155,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] > 0 ) { count ++ ; } } System . out . println ( count ) ; } }"],"references":["class GFG { static int dp [ ] [ ] [ ] = new int [ 5001 ] [ 5001 ] [ 5 ] ; static int countWaysUtil ( int n , int parts , int nextPart ) { if ( parts == 0 && n == 0 ) return 1 ; if ( n <= 0 || parts <= 0 ) return 0 ; if ( dp [ n ] [ nextPart ] [ parts ] != - 1 ) return dp [ n ] [ nextPart ] [ parts ] ; int ans = 0 ; for ( int i = nextPart ; i <= n ; i ++ ) ans += countWaysUtil ( n - i , parts - 1 , i ) ; return ( dp [ n ] [ nextPart ] [ parts ] = ans ) ; } static int countWays ( int n ) { for ( int i = 0 ; i < 5001 ; i ++ ) { for ( int j = 0 ; j < 5001 ; j ++ ) { for ( int l = 0 ; l < 5 ; l ++ ) dp [ i ] [ j ] [ l ] = - 1 ; } } return countWaysUtil ( n , 4 , 1 ) ; } public static void main ( String [ ] args ) { int n = 8 ; System . out . println ( countWays ( n ) ) ; } }"],"bleu":0.1611473204080896,"rouge_l":0.3483439386523087}
{"id":1156,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int sum ( int a [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += a [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += a [ i ] ; return sum ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = a . length ; System . out . println ( sum ( a , n ) ) ; } }"],"references":["class GFG { static double nthRoot ( int A , int N ) { double xPre = Math . random ( ) * 10 % 10 ; double eps = 1e-3 ; double delX = Integer . MAX_VALUE ; double xK = 0 ; while ( delX > eps ) { xK = ( ( N - 1.0 ) * xPre + ( double ) A \/ Math . pow ( xPre , N - 1 ) ) \/ ( double ) N ; delX = Math . abs ( xK - xPre ) ; xPre = xK ; } return xK ; } static int countPowers ( int a , int b , int k ) { return ( int ) ( Math . floor ( nthRoot ( b , k ) ) - Math . ceil ( nthRoot ( a , k ) ) + 1 ) ; } public static void main ( String [ ] args ) { int a = 7 , b = 28 , k = 2 ; System . out . print ( \" Count ▁ of ▁ Powers ▁ is ▁ \" + countPowers ( a , b , k ) ) ; } }"],"bleu":0.15186956047477926,"rouge_l":0.31943145689171504}
{"id":1157,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( a [ i ] + \" \" ) ; } out . println ( ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } }"],"references":["public class GFG { static void minSwaps ( String str1 , String str2 ) { int count = 0 ; for ( int i = 0 ; i < str1 . length ( ) ; i ++ ) { if ( str1 . charAt ( i ) != str2 . charAt ( i ) ) count ++ ; } if ( count % 2 == 0 ) System . out . println ( count \/ 2 ) ; else System . out . println ( \" Not ▁ Possible \" ) ; } public static void main ( String args [ ] ) { String binaryString1 = \"1110000\" ; String binaryString2 = \"0001101\" ; minSwaps ( binaryString1 , binaryString2 ) ; } }"],"bleu":0.10979991613093526,"rouge_l":0.3227262117793511}
{"id":1158,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int countPairs ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( countPairs ( arr , n ) ) ; } }"],"references":["import java . util . HashMap ; import java . util . Map ; class GFG { public static int countOrderedPairs ( int [ ] A , int n ) { int orderedPairs = 0 ; HashMap < Integer , Integer > m = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( m . get ( A [ i ] ) == null ) m . put ( A [ i ] , 1 ) ; else { int a = m . get ( A [ i ] ) ; m . put ( A [ i ] , ++ a ) ; } } for ( int entry : m . keySet ( ) ) { int X = entry ; int Y = m . get ( entry ) ; for ( int j = 1 ; j <= Y ; j ++ ) { if ( m . get ( j ) >= X ) orderedPairs ++ ; } } return orderedPairs ; } public static void main ( String [ ] args ) { int [ ] A = { 1 , 1 , 2 , 2 , 3 } ; int n = A . length ; System . out . print ( countOrderedPairs ( A , n ) ) ; } }"],"bleu":0.2286477560186017,"rouge_l":0.5322862129144852}
{"id":1159,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; Arrays . sort ( arr ) ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + \" \" ) ; System . out . println ( ) ; } }"],"references":["import java . util . Arrays ; class AP { static void makeAP ( int arr [ ] , int n ) { int initial_term , common_difference ; if ( n == 3 ) { common_difference = arr [ 2 ] - arr [ 1 ] ; initial_term = arr [ 1 ] - common_difference ; } else if ( ( arr [ 1 ] - arr [ 0 ] ) == arr [ 2 ] - arr [ 1 ] ) { initial_term = arr [ 0 ] ; common_difference = arr [ 1 ] - arr [ 0 ] ; } else if ( ( arr [ 2 ] - arr [ 1 ] ) == ( arr [ 3 ] - arr [ 2 ] ) ) { common_difference = arr [ 2 ] - arr [ 1 ] ; initial_term = arr [ 1 ] - common_difference ; } else { common_difference = ( arr [ 3 ] - arr [ 0 ] ) \/ 3 ; initial_term = arr [ 0 ] ; } for ( int i = 0 ; i < n ; i ++ ) System . out . print ( initial_term + ( i * common_difference ) + \" ▁ \" ) ; System . out . println ( ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 3 , 7 } ; int n = arr . length ; makeAP ( arr , n ) ; } }"],"bleu":0.23571787716916995,"rouge_l":0.3772952773661491}
{"id":1160,"predictions":["import java . io . * ; class GFG { static int countPairs ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) count ++ ; } return count ; } static int countPairs ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) count ++ ; else count ++ ; } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( countPairs ( arr , n ) ) ; } }"],"references":["class Test { static int arr [ ] = new int [ ] { 1 , 2 , 2 , 4 } ; static int countIncreasing ( int n ) { int cnt = 0 ; int len = 1 ; for ( int i = 0 ; i < n - 1 ; ++ i ) { if ( arr [ i + 1 ] > arr [ i ] ) len ++ ; else { cnt += ( ( ( len - 1 ) * len ) \/ 2 ) ; len = 1 ; } } if ( len > 1 ) cnt += ( ( ( len - 1 ) * len ) \/ 2 ) ; return cnt ; } public static void main ( String [ ] args ) { System . out . println ( \" Count ▁ of ▁ strictly ▁ increasing ▁ subarrays ▁ is ▁ \" + countIncreasing ( arr . length ) ) ; } }"],"bleu":0.3331143599979306,"rouge_l":0.45370458663106705}
{"id":1161,"predictions":["import java . io . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["import java . io . * ; class GFG { static float harmonicMean ( float arr [ ] , int n ) { float sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum = sum + ( float ) 1 \/ arr [ i ] ; return ( float ) n \/ sum ; } public static void main ( String args [ ] ) { float arr [ ] = { 13.5f , 14.5f , 14.8f , 15.2f , 16.1f } ; int n = arr . length ; System . out . println ( harmonicMean ( arr , n ) ) ; } }"],"bleu":0.6166590144063819,"rouge_l":0.8132141810723704}
{"id":1162,"predictions":["import java . util . * ; class GFG { static boolean isPerfectSquare ( int n ) { if ( n == 0 ) return false ; if ( n == 1 ) return true ; if ( isPerfectSquare ( n ) ) return false ; if ( isPerfectSquare ( n ) ) return false ; if ( isPerfectSquare ( n ) ) return false ; if ( isPerfectSquare ( n ) ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 3 ; if ( isPerfectSquare ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static boolean asPowerSum ( int w , int m ) { while ( m > 0 ) { if ( ( m - 1 ) % w == 0 ) m = ( m - 1 ) \/ w ; else if ( ( m + 1 ) % w == 0 ) m = ( m + 1 ) \/ w ; else if ( m % w == 0 ) m = m \/ w ; else break ; } return ( m == 0 ) ; } public static void main ( String [ ] args ) { int w = 3 , m = 7 ; if ( asPowerSum ( w , m ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.3656259622880955,"rouge_l":0.5674752708431465}
{"id":1163,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int sum ( int a [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += a [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = a . length ; System . out . println ( sum ( a , n ) ) ; } }"],"references":["class GFG { static void result ( long n , long k , long t ) { if ( t <= k ) System . out . println ( t ) ; else if ( t <= n ) System . out . println ( k ) ; else { long temp = t - n ; temp = k - temp ; System . out . println ( temp ) ; } } public static void main ( String args [ ] ) { long n , k , t ; n = 10 ; k = 5 ; t = 12 ; result ( n , k , t ) ; } }"],"bleu":0.19912773706312495,"rouge_l":0.34156496769562095}
{"id":1164,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int sum ( int a [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += a [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += a [ i ] ; return sum ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = a . length ; System . out . println ( sum ( a , n ) ) ; } }"],"references":["import java . util . Arrays ; class GfG { private static int table [ ] [ ] ; private static int height ; private GfG ( int n ) { height = ( int ) Math . ceil ( Math . log10 ( n ) \/ Math . log10 ( 2 ) ) ; table = new int [ n + 1 ] [ height + 1 ] ; } private static void preprocessing ( ) { for ( int i = 0 ; i < table . length ; i ++ ) { Arrays . fill ( table [ i ] , - 1 ) ; } } private static void calculateSparse ( int u , int v ) { table [ v ] [ 0 ] = u ; for ( int i = 1 ; i <= height ; i ++ ) { table [ v ] [ i ] = table [ table [ v ] [ i - 1 ] ] [ i - 1 ] ; if ( table [ v ] [ i ] == - 1 ) break ; } } private static int kthancestor ( int V , int k ) { for ( int i = 0 ; i <= height ; i ++ ) { if ( ( k & ( 1 << i ) ) != 0 ) { V = table [ V ] [ i ] ; if ( V == - 1 ) break ; } } return V ; } public static void main ( String args [ ] ) { int n = 6 ; GfG obj = new GfG ( n ) ; preprocessing ( ) ; calculateSparse ( 1 , 2 ) ; calculateSparse ( 1 , 3 ) ; calculateSparse ( 2 , 4 ) ; calculateSparse ( 2 , 5 ) ; calculateSparse ( 3 , 6 ) ; int K = 2 , V = 5 ; System . out . print ( kthancestor ( V , K ) ) ; } }"],"bleu":0.08605166627704203,"rouge_l":0.3550550423889662}
{"id":1165,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["class GFG { static void factors ( int n , int i ) { if ( i <= n ) { if ( n % i == 0 ) { System . out . print ( i + \" ▁ \" ) ; } factors ( n , i + 1 ) ; } } public static void main ( String args [ ] ) { int N = 16 ; factors ( N , 1 ) ; } }"],"bleu":0.2596714600988441,"rouge_l":0.47465825446898}
{"id":1166,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } Arrays . sort ( arr ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } System . out . println ( sum ) ; } }"],"references":["import java . util . HashMap ; import java . util . Map ; class GfG { static int sumKRepeating ( int arr [ ] , int n , int k ) { int sum = 0 ; HashMap < Integer , Integer > mp = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( ! mp . containsKey ( arr [ i ] ) ) mp . put ( arr [ i ] , 0 ) ; mp . put ( arr [ i ] , mp . get ( arr [ i ] ) + 1 ) ; } for ( Integer x : mp . keySet ( ) ) if ( mp . get ( x ) == k ) sum += x ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 9 , 9 , 10 , 11 , 8 , 8 , 9 , 8 } ; int n = arr . length ; int k = 3 ; System . out . println ( sumKRepeating ( arr , n , k ) ) ; } }"],"bleu":0.30119924023042083,"rouge_l":0.3876254180602007}
{"id":1167,"predictions":["import java . io . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 3 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static int power ( int num , int n ) { if ( n == 0 ) return 1 ; else if ( n % 2 == 0 ) return power ( num , n \/ 2 ) * power ( num , n \/ 2 ) ; else return num * power ( num , n \/ 2 ) * power ( num , n \/ 2 ) ; } static int checkRecursive ( int x , int n , int curr_num , int curr_sum ) { int results = 0 ; int p = power ( curr_num , n ) ; while ( p + curr_sum < x ) { results += checkRecursive ( x , n , curr_num + 1 , p + curr_sum ) ; curr_num ++ ; p = power ( curr_num , n ) ; } if ( p + curr_sum == x ) results ++ ; return results ; } public static void main ( String [ ] args ) { int x = 10 , n = 2 ; System . out . println ( checkRecursive ( x , n , 1 , 0 ) ) ; } }"],"bleu":0.2431312579402704,"rouge_l":0.4788308977035491}
{"id":1168,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int maxSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int nCr ( int n , int r ) { int fac [ ] = new int [ 100 ] ; for ( int i = 0 ; i < n ; i ++ ) fac [ i ] = 1 ; for ( int i = 1 ; i < n + 1 ; i ++ ) { fac [ i ] = fac [ i - 1 ] * i ; } int ans = fac [ n ] \/ ( fac [ n - r ] * fac [ r ] ) ; return ans ; } public static void main ( String [ ] args ) { int n = 3 ; int k = 3 ; int ans = nCr ( n + k - 1 , k ) + nCr ( k - 1 , n - 1 ) ; System . out . println ( ans ) ; } }"],"bleu":0.31254468960551085,"rouge_l":0.5018595739885046}
{"id":1169,"predictions":["import java . io . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int pairORSum ( int arr [ ] , int n ) { int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = i + 1 ; j < n ; j ++ ) ans += arr [ i ] ^ arr [ j ] ; return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 5 , 9 , 7 , 6 } ; int n = arr . length ; System . out . println ( pairORSum ( arr , arr . length ) ) ; } }"],"bleu":0.611444391819679,"rouge_l":0.784895104895105}
{"id":1170,"predictions":["import java . io . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 12 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static void alphabetPattern ( int N ) { int index , side_index ; int Top = 1 , Bottom = 1 , Diagonal = N - 1 ; for ( index = 0 ; index < N ; index ++ ) System . out . print ( Top ++ + \" ▁ \" ) ; System . out . println ( ) ; for ( index = 1 ; index < N - 1 ; index ++ ) { for ( side_index = 0 ; side_index < 2 * ( N - index - 1 ) ; side_index ++ ) System . out . print ( \" ▁ \" ) ; System . out . print ( Diagonal -- ) ; System . out . println ( ) ; } for ( index = 0 ; index < N ; index ++ ) System . out . print ( Bottom ++ + \" ▁ \" ) ; } public static void main ( String args [ ] ) { int N = 5 ; alphabetPattern ( N ) ; } }"],"bleu":0.1738858782641403,"rouge_l":0.309245091713522}
{"id":1171,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPower ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) if ( arr [ i ] == arr [ j ] ) return false ; return true ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 6 } ; int n = arr . length ; if ( isPower ( arr , n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . io . * ; import java . util . * ; class GFG { static Boolean areElementsContiguous ( int arr [ ] , int n ) { HashSet < Integer > us = new HashSet < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) us . add ( arr [ i ] ) ; int count = 1 ; int curr_ele = arr [ 0 ] - 1 ; while ( us . contains ( curr_ele ) == true ) { count ++ ; curr_ele -- ; } curr_ele = arr [ 0 ] + 1 ; while ( us . contains ( curr_ele ) == true ) { count ++ ; curr_ele ++ ; } return ( count == ( us . size ( ) ) ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 5 , 2 , 3 , 6 , 4 , 4 , 6 , 6 } ; int n = arr . length ; if ( areElementsContiguous ( arr , n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.5074989067690496,"rouge_l":0.6203878902554399}
{"id":1172,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["class Main { static int pivotedBinarySearch ( int arr [ ] , int n , int key ) { int pivot = findPivot ( arr , 0 , n - 1 ) ; if ( pivot == - 1 ) return binarySearch ( arr , 0 , n - 1 , key ) ; if ( arr [ pivot ] == key ) return pivot ; if ( arr [ 0 ] <= key ) return binarySearch ( arr , 0 , pivot - 1 , key ) ; return binarySearch ( arr , pivot + 1 , n - 1 , key ) ; } static int findPivot ( int arr [ ] , int low , int high ) { if ( high < low ) return - 1 ; if ( high == low ) return low ; int mid = ( low + high ) \/ 2 ; if ( mid < high && arr [ mid ] > arr [ mid + 1 ] ) return mid ; if ( mid > low && arr [ mid ] < arr [ mid - 1 ] ) return ( mid - 1 ) ; if ( arr [ low ] >= arr [ mid ] ) return findPivot ( arr , low , mid - 1 ) ; return findPivot ( arr , mid + 1 , high ) ; } static int binarySearch ( int arr [ ] , int low , int high , int key ) { if ( high < low ) return - 1 ; int mid = ( low + high ) \/ 2 ; if ( key == arr [ mid ] ) return mid ; if ( key > arr [ mid ] ) return binarySearch ( arr , ( mid + 1 ) , high , key ) ; return binarySearch ( arr , low , ( mid - 1 ) , key ) ; } public static void main ( String args [ ] ) { int arr1 [ ] = { 5 , 6 , 7 , 8 , 9 , 10 , 1 , 2 , 3 } ; int n = arr1 . length ; int key = 3 ; System . out . println ( \" Index ▁ of ▁ the ▁ element ▁ is ▁ : ▁ \" + pivotedBinarySearch ( arr1 , n , key ) ) ; } }"],"bleu":0.1050261373454748,"rouge_l":0.348836032388664}
{"id":1173,"predictions":["import java . io . * ; import java . util . * ; class GFG { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( a [ i ] > a [ j ] ) { System . out . print ( a [ i ] + \" \" ) ; return ; } } } System . out . println ( ) ; } }"],"references":["import java . util . * ; class geeks { public static void findDandZeroes ( int [ ] a , int [ ] b , int n ) { HashMap < Double , Integer > mpp = new HashMap < > ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( b [ i ] != 0 && a [ i ] != 0 ) { double val = ( double ) ( - 1.0 * b [ i ] ) \/ ( double ) ( a [ i ] ) ; if ( mpp . get ( val ) != null ) { int x = mpp . get ( val ) ; mpp . put ( val , ++ x ) ; } else mpp . put ( val , 1 ) ; } else if ( b [ i ] == 0 && a [ i ] == 0 ) count += 1 ; } int maxi = 0 ; for ( HashMap . Entry < Double , Integer > entry : mpp . entrySet ( ) ) { maxi = Math . max ( entry . getValue ( ) , maxi ) ; } for ( HashMap . Entry < Double , Integer > entry : mpp . entrySet ( ) ) { if ( entry . getValue ( ) == maxi ) { System . out . println ( \" Value ▁ of ▁ d ▁ is : ▁ \" + entry . getKey ( ) ) ; break ; } } System . out . println ( \" The ▁ number ▁ of ▁ zeros ▁ in ▁ array ▁ C ▁ is : ▁ \" + ( maxi + count ) ) ; } public static void main ( String [ ] args ) { int [ ] a = { 13 , 37 , 39 } ; int [ ] b = { 1 , 2 , 3 } ; int n = a . length ; findDandZeroes ( a , b , n ) ; } }"],"bleu":0.14274650685387424,"rouge_l":0.3234930175004419}
{"id":1174,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int findSum ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } static int findSum ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( findSum ( n ) ) ; } }"],"references":["class GFG { static int count_odd_pair ( int n , int a [ ] ) { int odd = 0 , even = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % 2 == 0 ) even ++ ; else odd ++ ; } int ans = odd * even * 2 ; return ans ; } static int count_even_pair ( int odd_sum_pairs , int n ) { int total_pairs = ( n * ( n - 1 ) ) ; int ans = total_pairs - odd_sum_pairs ; return ans ; } public static void main ( String [ ] args ) { int n = 6 ; int [ ] a = { 2 , 4 , 5 , 9 , 1 , 8 } ; int odd_sum_pairs = count_odd_pair ( n , a ) ; int even_sum_pairs = count_even_pair ( odd_sum_pairs , n ) ; System . out . println ( \" Even ▁ Sum ▁ Pairs ▁ = ▁ \" + even_sum_pairs ) ; System . out . println ( \" Odd ▁ Sum ▁ Pairs = ▁ \" + odd_sum_pairs ) ; } }"],"bleu":0.21378378877950097,"rouge_l":0.43516075442196817}
{"id":1175,"predictions":["import java . io . * ; class GFG { static int countPairs ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) count ++ ; } return count ; } static int countPairs ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) count ++ ; else count ++ ; } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( countPairs ( arr , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static void printQueries ( int n , int a [ ] , int q , int qry [ ] ) { HashSet < Integer > occ = new HashSet < > ( ) ; int [ ] suffixCount = new int [ n + 1 ] ; for ( int i = n - 1 ; i >= 0 ; i -- ) { occ . add ( a [ i ] ) ; suffixCount [ i + 1 ] = occ . size ( ) ; } for ( int i = 0 ; i < q ; i ++ ) System . out . println ( suffixCount [ qry [ i ] ] ) ; } public static void main ( String args [ ] ) { int n = 5 , q = 3 ; int a [ ] = { 2 , 4 , 6 , 10 , 2 } ; int qry [ ] = { 1 , 3 , 2 } ; printQueries ( n , a , q , qry ) ; } }"],"bleu":0.3056441737891378,"rouge_l":0.5087436104385258}
{"id":1176,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( st . charAt ( i ) == st . charAt ( j ) ) count ++ ; } } System . out . println ( count ) ; } }"],"references":["import java . io . * ; class GFG { static int countRotations ( String n ) { int len = n . length ( ) ; if ( len == 1 ) { int oneDigit = n . charAt ( 0 ) - '0' ; if ( oneDigit % 4 == 0 ) return 1 ; return 0 ; } int twoDigit , count = 0 ; for ( int i = 0 ; i < ( len - 1 ) ; i ++ ) { twoDigit = ( n . charAt ( i ) - '0' ) * 10 + ( n . charAt ( i + 1 ) - '0' ) ; if ( twoDigit % 4 == 0 ) count ++ ; } twoDigit = ( n . charAt ( len - 1 ) - '0' ) * 10 + ( n . charAt ( 0 ) - '0' ) ; if ( twoDigit % 4 == 0 ) count ++ ; return count ; } public static void main ( String args [ ] ) { String n = \"4834\" ; System . out . println ( \" Rotations : ▁ \" + countRotations ( n ) ) ; } }"],"bleu":0.23781102366054396,"rouge_l":0.4169181608379194}
{"id":1177,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( st . nextToken ( ) == 1 ) { count ++ ; } } System . out . println ( count ) ; } }"],"references":["import java . io . * ; import java . util . * ; class GFG { public static int smallestX ( int n ) { int [ ] temp = new int [ 10 ] ; for ( int i = 0 ; i < 10 ; i ++ ) temp [ i ] = 0 ; if ( n == 0 ) return - 1 ; int count = 0 , x = 0 ; for ( x = 1 ; count < 10 ; x ++ ) { int y = x * n ; while ( y > 0 ) { if ( temp [ y % 10 ] == 0 ) { count ++ ; temp [ y % 10 ] = 1 ; } y \/= 10 ; } } return x - 1 ; } public static void main ( String args [ ] ) { int n = 5 ; System . out . print ( smallestX ( n ) ) ; } }"],"bleu":0.29864602340415214,"rouge_l":0.4155313351498638}
{"id":1178,"predictions":["import java . util . * ; class GFG { static boolean isVowel ( int a [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) if ( a [ i ] < a [ j ] ) return false ; return true ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 6 } ; int n = a . length ; if ( isVowel ( a , n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . io . * ; import java . util . HashMap ; import java . util . Map ; class GFG { static void distinctAdjacentElement ( int a [ ] , int n ) { HashMap < Integer , Integer > m = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; ++ i ) { if ( m . containsKey ( a [ i ] ) ) { int x = m . get ( a [ i ] ) + 1 ; m . put ( a [ i ] , x ) ; } else { m . put ( a [ i ] , 1 ) ; } } int mx = 0 ; for ( int i = 0 ; i < n ; ++ i ) if ( mx < m . get ( a [ i ] ) ) mx = m . get ( a [ i ] ) ; if ( mx > ( n + 1 ) \/ 2 ) System . out . println ( \" NO \" ) ; else System . out . println ( \" YES \" ) ; } public static void main ( String [ ] args ) { int a [ ] = { 7 , 7 , 7 , 7 } ; int n = 4 ; distinctAdjacentElement ( a , n ) ; } }"],"bleu":0.3244487861246909,"rouge_l":0.41109383100051844}
{"id":1179,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPower ( int n ) { if ( n == 1 ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 12 ; if ( isPower ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . io . * ; class GFG { static int fnMod ( int n ) { int rem = n % 4 ; if ( rem == 0 || rem == 3 ) return 0 ; else if ( rem == 1 || rem == 2 ) return 1 ; return 0 ; } public static void main ( String [ ] args ) { int n = 6 ; System . out . print ( fnMod ( n ) ) ; } }"],"bleu":0.46860142837404645,"rouge_l":0.5930232558139535}
{"id":1180,"predictions":["import java . io . * ; class GFG { static boolean isPower ( int a , int b ) { if ( a == b ) return true ; if ( a == b ) return true ; return false ; } public static void main ( String [ ] args ) { int a = 3 , b = 5 , c = 5 ; if ( isPower ( a , b , c ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static boolean isRectangle ( int a , int b , int c , int d ) { if ( ( a ^ b ^ c ^ d ) != 0 ) return false ; else return true ; } public static void main ( String [ ] args ) { int a , b , c , d ; a = 3 ; b = 2 ; c = 3 ; d = 2 ; if ( isRectangle ( a , b , c , d ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.5481572927718088,"rouge_l":0.7138201747889202}
{"id":1181,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int maxSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } static int maxSum ( int arr [ ] , int n ) { int maxSum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ i ] > arr [ j ] ) { maxSum += arr [ i ] ; } } return maxSum ; } static int maxSum ( int arr [ ] , int n ) { int maxSum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ i ] > arr [ j ] ) { maxSum += arr [ i ] ; maxSum += arr [ i ] ; } } } return maxSum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }"],"references":["class GFG { static int merge ( int arr [ ] , int temp [ ] , int left , int mid , int right ) { int inv_count = 0 ; int i = left ; int j = mid ; int k = left ; while ( ( i <= mid - 1 ) && ( j <= right ) ) { if ( arr [ i ] <= arr [ j ] ) { temp [ k ++ ] = arr [ i ++ ] ; } else { temp [ k ++ ] = arr [ j ++ ] ; inv_count = inv_count + ( mid - i ) ; } } while ( i <= mid - 1 ) { temp [ k ++ ] = arr [ i ++ ] ; } while ( j <= right ) { temp [ k ++ ] = arr [ j ++ ] ; } for ( i = left ; i <= right ; i ++ ) { arr [ i ] = temp [ i ] ; } return inv_count ; } static int _mergeSort ( int arr [ ] , int temp [ ] , int left , int right ) { int mid , inv_count = 0 ; if ( right > left ) { mid = ( right + left ) \/ 2 ; inv_count = _mergeSort ( arr , temp , left , mid ) ; inv_count += _mergeSort ( arr , temp , mid + 1 , right ) ; inv_count += merge ( arr , temp , left , mid + 1 , right ) ; } return inv_count ; } static int mergeSort ( int arr [ ] , int array_size ) { int [ ] temp = new int [ array_size ] ; return _mergeSort ( arr , temp , 0 , array_size - 1 ) ; } static int minSwapToReachArr ( int arr [ ] , int N ) { for ( int i = 0 ; i < N ; i ++ ) { if ( ( arr [ i ] - 1 ) - i > 2 ) { return - 1 ; } } int numOfInversion = mergeSort ( arr , N ) ; return numOfInversion ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 5 , 3 , 4 } ; int N = arr . length ; int res = minSwapToReachArr ( arr , N ) ; System . out . println ( res == - 1 ? \" Not ▁ Possible \\n \" : res ) ; } }"],"bleu":0.2565592219991911,"rouge_l":0.4287818839969694}
{"id":1182,"predictions":["import java . io . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return true ; if ( isPrime ( isPrime ( n ) ) ) return false ; if ( isPrime ( isPrime ( n ) ) ) return false ; if ( isPrime ( isPrime ( n ) ) ) return false ; if ( isPrime ( isPrime ( n ) ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } public static void main ( String [ ] args ) { int n = 12 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static boolean Prime ( int n ) { if ( n < 2 ) return false ; for ( int i = 2 ; i <= ( int ) Math . sqrt ( n ) ; i ++ ) if ( n % i == 0 ) return false ; return true ; } static boolean primeCountDivisors ( int n ) { if ( n < 2 ) return false ; for ( int i = 2 ; i <= ( int ) Math . sqrt ( n ) ; i ++ ) if ( n % i == 0 ) { long a = n , c = 0 ; while ( a % i == 0 ) { a \/= i ; c ++ ; } if ( a == 1 && Prime ( ( int ) c + 1 ) == true ) return true ; else return false ; } return true ; } public static void main ( String [ ] args ) { int n = 13 ; if ( primeCountDivisors ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.25025888110471634,"rouge_l":0.48499906826510963}
{"id":1183,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int count ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { count ++ ; } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 4 , 4 , 3 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 ,"],"references":["import java . util . * ; class GFG { static int countSubSeq ( int a [ ] , int n , int k ) { Arrays . sort ( a ) ; List < Integer > arr = new LinkedList < > ( ) ; for ( int i = 0 ; i < n ; ) { int count = 1 , x = a [ i ] ; i ++ ; while ( i < n && a [ i ] == x ) { count ++ ; i ++ ; } arr . add ( count ) ; } int m = arr . size ( ) ; n = Math . min ( m , k ) ; int count = 1 ; int [ ] [ ] dp = new int [ n + 1 ] [ m + 1 ] ; for ( int i = 0 ; i <= m ; i ++ ) dp [ 0 ] [ i ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = m ; j >= 0 ; j -- ) { if ( j > m - i ) dp [ i ] [ j ] = 0 ; else { dp [ i ] [ j ] = dp [ i ] [ j + 1 ] + arr . get ( j ) * dp [ i - 1 ] [ j + 1 ] ; } } count = count + dp [ i ] [ 0 ] ; } return count ; } public static void main ( String [ ] args ) { int a [ ] = { 2 , 2 , 3 , 3 , 5 } ; int n = a . length ; int k = 3 ; System . out . println ( countSubSeq ( a , n , k ) ) ; } }"],"bleu":0.13781305426197463,"rouge_l":0.19632526684592194}
{"id":1184,"predictions":["import java . io . * ; class GFG { static boolean isVowel ( String s ) { int n = s . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i ) ) return false ; } return true ; } public static void main ( String [ ] args ) { String s = \" geeksforgeeksforgeeks \" ; if ( isVowel ( s ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static boolean isVowel ( char ch ) { switch ( ch ) { case ' a ' : case ' e ' : case ' i ' : case ' o ' : case ' u ' : return true ; } return false ; } static boolean isSatisfied ( char [ ] str , int n ) { for ( int i = 1 ; i < n ; i ++ ) { if ( ! isVowel ( str [ i ] ) && ! isVowel ( str [ i - 1 ] ) ) { return false ; } } for ( int i = 1 ; i < n - 1 ; i ++ ) { if ( isVowel ( str [ i ] ) && ! isVowel ( str [ i - 1 ] ) && ! isVowel ( str [ i + 1 ] ) ) { return false ; } } return true ; } public static void main ( String [ ] args ) { String str = \" acaba \" ; int n = str . length ( ) ; if ( isSatisfied ( str . toCharArray ( ) , n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.2426892804540288,"rouge_l":0.5035893754486719}
{"id":1185,"predictions":["import java . io . * ; class GFG { static boolean isPower ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) if ( arr [ i ] < arr [ j ] ) return false ; return true ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 3 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; if ( isPower ( arr , n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static void equal_xor_sum ( int arr [ ] , int n ) { int Sum = 0 ; int Xor = 0 ; for ( int i = 0 ; i < n ; i ++ ) { Sum = Sum + arr [ i ] ; Xor = Xor ^ arr [ i ] ; } if ( Sum == Xor ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 6 , 3 , 7 , 10 } ; int n = arr . length ; equal_xor_sum ( arr , n ) ; } }"],"bleu":0.5559305227885947,"rouge_l":0.5787198270685722}
{"id":1186,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( arr [ i ] + \" \" ) ; } } }"],"references":["import java . io . * ; class GFG { static int getMinLength ( double arr [ ] , int n ) { int count = 0 ; int result = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 1 ) { count ++ ; } else { if ( count != 0 ) result = Math . min ( result , count ) ; count = 0 ; } } return result ; } public static void main ( String [ ] args ) { double arr [ ] = { 1 , 1 , 0 , 0 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 1 } ; int n = arr . length ; System . out . println ( getMinLength ( arr , n ) ) ; } }"],"bleu":0.27240926824673334,"rouge_l":0.4100160939127142}
{"id":1187,"predictions":["import java . io . * ; class GFG { static boolean isPrime ( int n ) { if ( n == 1 ) return false ; for ( int i = 2 ; i <= n ; i ++ ) if ( n % i == 0 ) return false ; return true ; } static boolean isPrime ( int n ) { if ( isPrime ( n ) ) return true ; if ( isPrime ( n ) ) return false ; return true ; } public static void main ( String [ ] args ) { int n = 12 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static boolean isPowerOfTwo ( int n ) { return ( n > 0 && ( ( n & ( n - 1 ) ) == 0 ) ) ? true : false ; } static int findPosition ( int n ) { if ( ! isPowerOfTwo ( n ) ) return - 1 ; int i = 1 , pos = 1 ; while ( ( i & n ) == 0 ) { i = i << 1 ; ++ pos ; } return pos ; } public static void main ( String [ ] args ) { int n = 16 ; int pos = findPosition ( n ) ; if ( pos == - 1 ) System . out . println ( \" n ▁ = ▁ \" + n + \" , ▁ Invalid ▁ number \" ) ; else System . out . println ( \" n ▁ = ▁ \" + n + \" , ▁ Position ▁ \" + pos ) ; n = 12 ; pos = findPosition ( n ) ; if ( pos == - 1 ) System . out . println ( \" n ▁ = ▁ \" + n + \" , ▁ Invalid ▁ number \" ) ; else System . out . println ( \" n ▁ = ▁ \" + n + \" , ▁ Position ▁ \" + pos ) ; n = 128 ; pos = findPosition ( n ) ; if ( pos == - 1 ) System . out . println ( \" n ▁ = ▁ \" + n + \" , ▁ Invalid ▁ number \" ) ; else System . out . println ( \" n ▁ = ▁ \" + n + \" , ▁ Position ▁ \" + pos ) ; } }"],"bleu":0.13600047962096246,"rouge_l":0.37706043956043955}
{"id":1188,"predictions":["import java . io . * ; class GFG { static int nthTerm ( int n ) { return ( int ) Math . pow ( n , 2 ) - 1 ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( nthTerm ( n ) ) ; } }"],"references":["import java . io . * ; public class GFG { static int totalNumber ( int n ) { return 8 * ( int ) Math . pow ( 9 , n - 1 ) ; } static public void main ( String [ ] args ) { int n = 3 ; System . out . println ( totalNumber ( n ) ) ; } }"],"bleu":0.6442868977697331,"rouge_l":0.8666500498504487}
{"id":1189,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int N = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int sum = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { sum += Integer . parseInt ( st . nextToken ( ) ) ; } System . out . println ( sum ) ; } }"],"references":["class GFG { static int rev_num = 0 ; static int base_pos = 1 ; static int reversDigits ( int num ) { if ( num > 0 ) { reversDigits ( num \/ 10 ) ; rev_num += ( num % 10 ) * base_pos ; base_pos *= 10 ; } return rev_num ; } public static void main ( String [ ] args ) { int num = 4562 ; System . out . println ( reversDigits ( num ) ) ; } }"],"bleu":0.18379482976510253,"rouge_l":0.2956535334584115}
{"id":1190,"predictions":["import java . util . * ; class GFG { static boolean isVowel ( String s ) { for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i ) ) return false ; } return true ; } public static void main ( String [ ] args ) { String s = \" geeksforgeeksforgeeks \" ; if ( isVowel ( s ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; class GfG { static boolean check ( char s [ ] ) { int l = s . length ; Arrays . sort ( s ) ; for ( int i = 1 ; i < l ; i ++ ) { if ( s [ i ] - s [ i - 1 ] != 1 ) return false ; } return true ; } public static void main ( String [ ] args ) { String str = \" dcef \" ; if ( check ( str . toCharArray ( ) ) == true ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; String str1 = \" xyza \" ; if ( check ( str1 . toCharArray ( ) ) == true ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.38817219769387146,"rouge_l":0.6054421768707483}
{"id":1191,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["class GFG { static void maxRegions ( int n ) { int num ; num = n * ( n + 1 ) \/ 2 + 1 ; System . out . println ( num ) ; ; } public static void main ( String [ ] args ) { int n = 10 ; maxRegions ( n ) ; } }"],"bleu":0.4699552546921401,"rouge_l":0.5941076211346481}
{"id":1192,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = arr . length ; if ( isPrime ( arr , n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . io . * ; import static java . lang . Math . pow ; public class A { static void bestApproximate ( int x [ ] , int y [ ] ) { int n = x . length ; double m , c , sum_x = 0 , sum_y = 0 , sum_xy = 0 , sum_x2 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum_x += x [ i ] ; sum_y += y [ i ] ; sum_xy += x [ i ] * y [ i ] ; sum_x2 += pow ( x [ i ] , 2 ) ; } m = ( n * sum_xy - sum_x * sum_y ) \/ ( n * sum_x2 - pow ( sum_x , 2 ) ) ; c = ( sum_y - m * sum_x ) \/ n ; System . out . println ( \" m ▁ = ▁ \" + m ) ; System . out . println ( \" c ▁ = ▁ \" + c ) ; } public static void main ( String args [ ] ) { int x [ ] = { 1 , 2 , 3 , 4 , 5 } ; int y [ ] = { 14 , 27 , 40 , 55 , 68 } ; bestApproximate ( x , y ) ; } }"],"bleu":0.26017215163720836,"rouge_l":0.44053923928743377}
{"id":1193,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( a [ i ] + \" \" ) ; } out . println ( ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . util . TreeSet ; class GFG { static void printPrevGreater ( int [ ] arr , int n ) { TreeSet < Integer > ts = new TreeSet < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { Integer c = ts . ceiling ( arr [ i ] ) ; if ( c == null ) System . out . print ( - 1 + \" ▁ \" ) ; else System . out . print ( c + \" ▁ \" ) ; ts . add ( arr [ i ] ) ; } } public static void main ( String [ ] args ) { int [ ] arr = { 10 , 5 , 11 , 10 , 20 , 12 } ; int n = arr . length ; printPrevGreater ( arr , n ) ; } }"],"bleu":0.16911016298674358,"rouge_l":0.3613900729716061}
{"id":1194,"predictions":["import java . io . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return true ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 10 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; class GFG { static int MAX = 1000005 ; static Vector < Boolean > prime = new Vector < > ( MAX ) ; static void vecIni ( ) { for ( int i = 0 ; i < MAX ; i ++ ) { prime . add ( i , true ) ; } } static void seive ( int N ) { prime . add ( 0 , false ) ; prime . add ( 1 , false ) ; for ( int i = 2 ; i <= N ; i ++ ) { if ( prime . get ( i ) ) { for ( int j = 2 ; i * j <= N ; j ++ ) { prime . add ( i * j , false ) ; } } } } static int countLogNeeded ( int N ) { int count = 0 ; seive ( N ) ; for ( int i = 1 ; i <= N ; i ++ ) { if ( prime . get ( i ) ) { count ++ ; } } return count ; } public static void main ( String [ ] args ) { vecIni ( ) ; int N = 6 ; System . out . println ( countLogNeeded ( N ) ) ; } }"],"bleu":0.1581880009458477,"rouge_l":0.3617432078334023}
{"id":1195,"predictions":["import java . io . * ; import java . util . * ; class GFG { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { a [ i ] = sc . nextInt ( ) ; } } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { System . out . print ( a [ i ] + \" \" ) ; } System . out . println ( ) ; } }"],"references":["import java . util . * ; class GFG { static void findMinimumOperation ( int n , int d , int arrays [ ] [ ] ) { int cnt = 0 ; int first = Integer . MIN_VALUE , end = Integer . MAX_VALUE ; while ( n > 0 ) { int arr [ ] = { arrays [ cnt ] [ 0 ] , arrays [ cnt ] [ 1 ] } ; Arrays . sort ( arr ) ; first = Math . max ( first , arr [ 0 ] ) ; end = Math . min ( end , arr [ 1 ] ) ; cnt ++ ; n -- ; } if ( first > end ) System . out . print ( \" - 1\" ) ; else { if ( d >= first && d <= end ) { System . out . print ( \"0\" ) ; } else System . out . print ( Math . min ( Math . abs ( first - d ) , Math . abs ( d - end ) ) ) ; } } public static void main ( String [ ] args ) { int n = 3 , d = 3 ; int arrays [ ] [ ] = { { 0 , 7 } , { 2 , 14 } , { 4 , 6 } } ; findMinimumOperation ( n , d , arrays ) ; } }"],"bleu":0.18961853565861586,"rouge_l":0.3267699435355436}
{"id":1196,"predictions":["import java . io . * ; class GFG { static boolean isPrime ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) if ( arr [ i ] > arr [ j ] ) return false ; return true ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = arr . length ; if ( isPrime ( arr , n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static int MAX = 90 ; public static void main ( String [ ] args ) { long [ ] arr = new long [ MAX ] ; long [ ] index1 = new long [ MAX ] ; long [ ] index2 = new long [ MAX ] ; long [ ] index3 = new long [ MAX ] ; long [ ] index4 = new long [ MAX ] ; arr [ 0 ] = 0 ; arr [ 1 ] = 1 ; for ( int i = 2 ; i < MAX ; i ++ ) arr [ i ] = arr [ i - 1 ] + arr [ i - 2 ] ; int c1 = 0 , c2 = 0 , c3 = 0 , c4 = 0 ; for ( int i = 0 ; i < MAX ; i ++ ) { if ( arr [ i ] % 2 == 0 ) index1 [ c1 ++ ] = i ; if ( arr [ i ] % 3 == 0 ) index2 [ c2 ++ ] = i ; if ( arr [ i ] % 5 == 0 ) index3 [ c3 ++ ] = i ; if ( arr [ i ] % 8 == 0 ) index4 [ c4 ++ ] = i ; } System . out . print ( \" Index ▁ of ▁ Fibonacci ▁ numbers ▁ divisible ▁ by \" + \" ▁ 2 ▁ are ▁ : \\n \" ) ; for ( int i = 0 ; i < c1 ; i ++ ) System . out . print ( index1 [ i ] + \" ▁ \" ) ; System . out . print ( \" \\n \" ) ; System . out . print ( \" Index ▁ of ▁ Fibonacci ▁ number ▁ divisible ▁ by \" + \" ▁ 3 ▁ are ▁ : \\n \" ) ; for ( int i = 0 ; i < c2 ; i ++ ) System . out . print ( index2 [ i ] + \" ▁ \" ) ; System . out . print ( \" \\n \" ) ; System . out . print ( \" Index ▁ of ▁ Fibonacci ▁ number ▁ divisible ▁ by \" + \" ▁ 5 ▁ are ▁ : \\n \" ) ; for ( int i = 0 ; i < c3 ; i ++ ) System . out . print ( index3 [ i ] + \" ▁ \" ) ; System . out . print ( \" \\n \" ) ; System . out . print ( \" Index ▁ of ▁ Fibonacci ▁ number ▁ divisible ▁ by \" + \" ▁ 8 ▁ are ▁ : \\n \" ) ; for ( int i = 0 ; i < c4 ; i ++ ) System . out . print ( index4 [ i ] + \" ▁ \" ) ; System . out . print ( \" \\n \" ) ; } }"],"bleu":0.02411708247736143,"rouge_l":0.22175844890265248}
{"id":1197,"predictions":["import java . util . * ; class GFG { static boolean isVowel ( String s ) { for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i ) ) return false ; } return true ; } public static void main ( String [ ] args ) { String s = \" geeksforgeeksforgeeks \" ; if ( isVowel ( s ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static boolean check ( String s ) { int [ ] freq = new int [ 26 ] ; int n = s . length ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { freq [ ( s . charAt ( i ) ) - 97 ] += 1 ; } for ( int i = 0 ; i < freq . length ; i ++ ) { if ( freq [ i ] % 2 == 1 ) { return false ; } } return true ; } public static void main ( String [ ] args ) { String s = \" abaccaba \" ; if ( check ( s ) ) { System . out . println ( \" Yes \" ) ; } else { System . out . println ( \" No \" ) ; } } }"],"bleu":0.4808785837916324,"rouge_l":0.6890222379103424}
{"id":1198,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } Arrays . sort ( arr ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } System . out . println ( sum ) ; } }"],"references":["public class GFG { static class Pair { int min ; int max ; } static Pair getMinMax ( int arr [ ] , int low , int high ) { Pair minmax = new Pair ( ) ; Pair mml = new Pair ( ) ; Pair mmr = new Pair ( ) ; int mid ; if ( low == high ) { minmax . max = arr [ low ] ; minmax . min = arr [ low ] ; return minmax ; } if ( high == low + 1 ) { if ( arr [ low ] > arr [ high ] ) { minmax . max = arr [ low ] ; minmax . min = arr [ high ] ; } else { minmax . max = arr [ high ] ; minmax . min = arr [ low ] ; } return minmax ; } mid = ( low + high ) \/ 2 ; mml = getMinMax ( arr , low , mid ) ; mmr = getMinMax ( arr , mid + 1 , high ) ; if ( mml . min < mmr . min ) { minmax . min = mml . min ; } else { minmax . min = mmr . min ; } if ( mml . max > mmr . max ) { minmax . max = mml . max ; } else { minmax . max = mmr . max ; } return minmax ; } public static void main ( String args [ ] ) { int arr [ ] = { 1000 , 11 , 445 , 1 , 330 , 3000 } ; int arr_size = 6 ; Pair minmax = getMinMax ( arr , 0 , arr_size - 1 ) ; System . out . printf ( \" \\n Minimum ▁ element ▁ is ▁ % d \" , minmax . min ) ; System . out . printf ( \" \\n Maximum ▁ element ▁ is ▁ % d \" , minmax . max ) ; } }"],"bleu":0.06470485254556413,"rouge_l":0.27673582295988935}
{"id":1199,"predictions":["import java . io . * ; import java . util . * ; class GFG { public static void main ( String [ ] args ) { int a = 3 , b = 5 , c = 5 ; System . out . println ( a + \" \" + b + \" \\n \" ) ; } }"],"references":["import java . util . LinkedList ; import java . util . Queue ; class GFG { public static int countUnvisited ( int n , int m ) { int X = ( m * n ) - m - n ; Queue < Integer > queue = new LinkedList < > ( ) ; queue . add ( X ) ; int count = 0 ; while ( ! queue . isEmpty ( ) ) { int curr = queue . poll ( ) ; count ++ ; if ( curr - m > 0 ) queue . add ( curr - m ) ; if ( curr - n > 0 ) queue . add ( curr - n ) ; } return count ; } public static void main ( String args [ ] ) { int n = 2 , m = 5 ; System . out . print ( countUnvisited ( n , m ) ) ; } }"],"bleu":0.07782032583431045,"rouge_l":0.3202315251043209}
{"id":1200,"predictions":["import java . io . * ; class GFG { static boolean isPrime ( int n ) { if ( n == 0 ) return false ; if ( n == 0 ) return true ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 12 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class Alpha { private int ch ; void uppercaseAlphabets ( ) { for ( int c = 65 ; c <= 90 ; ++ c ) System . out . print ( \" ▁ \" + c ) ; System . out . print ( \" \\n \" ) ; } void lowercaseAlphabets ( ) { for ( int c = 97 ; c <= 122 ; ++ c ) System . out . print ( \" ▁ \" + c ) ; System . out . print ( \" \\n \" ) ; } public static void main ( String [ ] args ) { int ch ; System . out . println ( \" Uppercase ▁ Alphabets \" ) ; Alpha ob = new Alpha ( ) ; ob . uppercaseAlphabets ( ) ; System . out . println ( \" Lowercase ▁ Alphabets ▁ \" ) ; ob . lowercaseAlphabets ( ) ; } }"],"bleu":0.21718634645309198,"rouge_l":0.40252373234545036}
{"id":1201,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int count ( int a [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] > a [ i ] ) { count ++ ; } } return count ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 } ; int n = a . length ; System . out . println ( count ( a , n ) ) ; } }"],"references":["class GFG { static int countNums ( int a , int b , int c , int d ) { int x = b \/ c - ( a - 1 ) \/ c ; int y = b \/ d - ( a - 1 ) \/ d ; int k = ( c * d ) \/ __gcd ( c , d ) ; int z = b \/ k - ( a - 1 ) \/ k ; return b - a + 1 - x - y + z ; } static int __gcd ( int a , int b ) { if ( b == 0 ) return a ; return __gcd ( b , a % b ) ; } public static void main ( String [ ] args ) { int a = 10 , b = 50 , c = 4 , d = 6 ; System . out . println ( countNums ( a , b , c , d ) ) ; } }"],"bleu":0.20924725958518947,"rouge_l":0.40067803792774664}
{"id":1202,"predictions":["import java . io . * ; class GFG { static int countPairs ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { if ( arr [ i ] > arr [ j ] ) count ++ ; } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( countPairs ( arr , n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int countSubarray ( int arr [ ] , int n , int k ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int sum = 0 ; for ( int j = i ; j < n ; j ++ ) { if ( sum + arr [ j ] < k ) { sum = arr [ j ] + sum ; count ++ ; } else { break ; } } } return count ; } public static void main ( String [ ] args ) { int array [ ] = { 1 , 11 , 2 , 3 , 15 } ; int k = 10 ; int size = array . length ; int count = countSubarray ( array , size , k ) ; System . out . println ( count ) ; } }"],"bleu":0.5553613439119359,"rouge_l":0.7525974025974026}
{"id":1203,"predictions":["import java . io . * ; class GFG { static boolean isPowerOfTwo ( int n ) { if ( n == 0 ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 12 ; if ( isPowerOfTwo ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . io . * ; class GFG { static void printPattern ( int n ) { if ( n == 0 || n < 0 ) { System . out . print ( n + \" ▁ \" ) ; return ; } System . out . print ( n + \" ▁ \" ) ; printPattern ( n - 5 ) ; System . out . print ( n + \" ▁ \" ) ; } public static void main ( String [ ] args ) { int n = 16 ; printPattern ( n ) ; } }"],"bleu":0.4415398712733237,"rouge_l":0.5077032052417212}
{"id":1204,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int sum ( int a [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += a [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = a . length ; System . out . println ( sum ( a , n ) ) ; } }"],"references":["import java . io . * ; class GFG { int MAX = 100 ; static int countCommon ( int mat [ ] [ ] , int n ) { int res = 0 ; for ( int i = 0 ; i < n ; i ++ ) if ( mat [ i ] [ i ] == mat [ i ] [ n - i - 1 ] ) res ++ ; return res ; } public static void main ( String args [ ] ) throws IOException { int mat [ ] [ ] = { { 1 , 2 , 3 } , { 4 , 5 , 6 } , { 7 , 8 , 9 } } ; System . out . println ( countCommon ( mat , 3 ) ) ; } }"],"bleu":0.42683101707346566,"rouge_l":0.647378395451674}
{"id":1205,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int count ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( count ( arr , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static int getMinimumOps ( Vector < Integer > ar ) { int n = ar . size ( ) ; int small = Collections . min ( ar ) ; int large = Collections . max ( ar ) ; int [ ] [ ] dp = new int [ n ] [ large + 1 ] ; for ( int j = small ; j <= large ; j ++ ) { dp [ 0 ] [ j ] = Math . abs ( ar . get ( 0 ) - j ) ; } for ( int i = 1 ; i < n ; i ++ ) { int minimum = Integer . MAX_VALUE ; for ( int j = small ; j <= large ; j ++ ) { minimum = Math . min ( minimum , dp [ i - 1 ] [ j ] ) ; dp [ i ] [ j ] = minimum + Math . abs ( ar . get ( i ) - j ) ; } } int ans = Integer . MAX_VALUE ; for ( int j = small ; j <= large ; j ++ ) { ans = Math . min ( ans , dp [ n - 1 ] [ j ] ) ; } return ans ; } public static void main ( String [ ] args ) { Integer [ ] arr = { 1 , 2 , 1 , 4 , 3 } ; Vector < Integer > ar = new Vector < > ( Arrays . asList ( arr ) ) ; System . out . println ( getMinimumOps ( ar ) ) ; } }"],"bleu":0.12868541765921043,"rouge_l":0.3854030501089325}
{"id":1206,"predictions":["import java . util . * ; class GFG { static boolean isVowel ( String s ) { for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i ) ) return false ; } return true ; } public static void main ( String [ ] args ) { String s = \" geeksforgeeksforgeeks \" ; if ( isVowel ( s ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static boolean find ( String s1 , String s2 ) { int len = s1 . length ( ) , len_1 = s2 . length ( ) ; if ( len != len_1 ) { return false ; } int d [ ] = new int [ len ] ; d [ 0 ] = s2 . charAt ( 0 ) - s1 . charAt ( 0 ) ; for ( int i = 1 ; i < len ; i ++ ) { if ( s1 . charAt ( i ) > s2 . charAt ( i ) ) { return false ; } else { d [ i ] = s2 . charAt ( i ) - s1 . charAt ( i ) ; } } for ( int i = 0 ; i < len - 1 ; i ++ ) { if ( d [ i ] < d [ i + 1 ] ) { return false ; } } return true ; } public static void main ( String [ ] args ) { String s1 = \" abcd \" , s2 = \" bcdd \" ; if ( find ( s1 , s2 ) ) { System . out . println ( \" Yes \" ) ; } else { System . out . println ( \" No \" ) ; } } }"],"bleu":0.21643152121421175,"rouge_l":0.4847754263773551}
{"id":1207,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int countPairs ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ i ] > arr [ j ] ) { count ++ ; } } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 4 , 4 , 3 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 ,"],"references":["import java . util . HashMap ; import java . util . Map ; class GFG { static int solveQuery ( int start , int end , int arr [ ] ) { Map < Integer , Integer > mp = new HashMap < > ( ) ; for ( int i = start ; i <= end ; i ++ ) mp . put ( arr [ i ] , mp . get ( arr [ i ] ) == null ? 1 : mp . get ( arr [ i ] ) + 1 ) ; int count = 0 ; for ( Map . Entry < Integer , Integer > entry : mp . entrySet ( ) ) if ( entry . getKey ( ) == entry . getValue ( ) ) count ++ ; return count ; } public static void main ( String [ ] args ) { int A [ ] = { 1 , 2 , 2 , 3 , 3 , 3 } ; int n = A . length ; int [ ] [ ] queries = { { 0 , 1 } , { 1 , 1 } , { 0 , 2 } , { 1 , 3 } , { 3 , 5 } , { 0 , 5 } } ; int q = queries . length ; for ( int i = 0 ; i < q ; i ++ ) { int start = queries [ i ] [ 0 ] ; int end = queries [ i ] [ 1 ] ; System . out . println ( \" Answer ▁ for ▁ Query ▁ \" + ( i + 1 ) + \" ▁ = ▁ \" + solveQuery ( start , end , A ) ) ; } } }"],"bleu":0.14918875725111863,"rouge_l":0.24386509590439331}
{"id":1208,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int sum ( int a [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += a [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += a [ i ] ; return sum ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = a . length ; System . out . println ( sum ( a , n ) ) ; } }"],"references":["class GFG { static int solve ( int N , int K ) { int [ ] combo ; combo = new int [ 50 ] ; combo [ 0 ] = 1 ; for ( int i = 1 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= N ; j ++ ) { if ( j >= i ) { combo [ j ] += combo [ j - i ] ; } } } return combo [ N ] ; } public static void main ( String args [ ] ) { int N = 29 ; int K = 5 ; System . out . println ( solve ( N , K ) ) ; solve ( N , K ) ; } }"],"bleu":0.279589472219593,"rouge_l":0.5335276967930028}
{"id":1209,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isDivisible ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) if ( arr [ i ] < arr [ j ] ) return false ; return true ; } static void findDivisible ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) if ( isDivisible ( arr [ i ] ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = arr . length ; findDivisible ( arr , n ) ; } }"],"references":["import java . util . Vector ; class GFG { static int deno [ ] = { 1 , 2 , 5 , 10 , 20 , 50 , 100 , 500 , 1000 } ; static int n = deno . length ; static void findMin ( int V ) { Vector < Integer > ans = new Vector < > ( ) ; for ( int i = n - 1 ; i >= 0 ; i -- ) { while ( V >= deno [ i ] ) { V -= deno [ i ] ; ans . add ( deno [ i ] ) ; } } for ( int i = 0 ; i < ans . size ( ) ; i ++ ) { System . out . print ( \" ▁ \" + ans . elementAt ( i ) ) ; } } public static void main ( String [ ] args ) { int n = 93 ; System . out . print ( \" Following ▁ is ▁ minimal ▁ number ▁ of ▁ change ▁ for ▁ \" + n + \" : ▁ \" ) ; findMin ( n ) ; } }"],"bleu":0.32097931093857834,"rouge_l":0.44432350971198925}
{"id":1210,"predictions":["import java . io . * ; import java . util . * ; class GFG { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { System . out . print ( a [ i ] + \" \" ) ; } System . out . println ( ) ; } }"],"references":["import java . util . * ; class GFG { static void checkPalindrome ( int num ) { String str = Integer . toString ( num ) ; int l = 0 , r = str . length ( ) - 1 ; while ( l < r ) { if ( str . charAt ( l ) != str . charAt ( r ) ) { System . out . print ( \" No \" ) ; return ; } l ++ ; r -- ; } System . out . print ( \" Yes \" ) ; return ; } public static void main ( String args [ ] ) { int n = 19 , k = 3 ; checkPalindrome ( n + k ) ; } }"],"bleu":0.2695734235536102,"rouge_l":0.4132591338011129}
{"id":1211,"predictions":["import java . io . * ; class GFG { static int countPairs ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( countPairs ( arr , n ) ) ; } }"],"references":["class GFG { static void updateArray ( int arr [ ] , int n ) { for ( int i = 0 ; i <= n - 2 ; i ++ ) arr [ i ] = arr [ i + 1 ] ; arr [ n - 1 ] = - 1 ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + \" ▁ \" ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 5 , 1 , 3 , 2 , 4 } ; int N = arr . length ; updateArray ( arr , N ) ; } }"],"bleu":0.48418517672348527,"rouge_l":0.6288659793814433}
{"id":1212,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["class GFG { static int maxProduct ( int [ ] arr , int n ) { if ( n < 3 ) return - 1 ; int max_product = Integer . MIN_VALUE ; for ( int i = 0 ; i < n - 2 ; i ++ ) for ( int j = i + 1 ; j < n - 1 ; j ++ ) for ( int k = j + 1 ; k < n ; k ++ ) max_product = Math . max ( max_product , arr [ i ] * arr [ j ] * arr [ k ] ) ; return max_product ; } public static void main ( String [ ] args ) { int [ ] arr = { 10 , 3 , 5 , 6 , 20 } ; int n = arr . length ; ; int max = maxProduct ( arr , n ) ; if ( max == - 1 ) System . out . println ( \" No ▁ Triplet ▁ Exists \" ) ; else System . out . println ( \" Maximum ▁ product ▁ is ▁ \" + max ) ; } }"],"bleu":0.33323958902533823,"rouge_l":0.5247311827956989}
{"id":1213,"predictions":["import java . io . * ; class GFG { static int count ( int n ) { int count = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( n % i == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( count ( n ) ) ; } }"],"references":["import java . util . * ; class GFG { static int count ( String S , int X ) { int count = 0 ; int N = S . length ( ) ; for ( int i = 0 ; i < N ; ++ i ) { if ( S . charAt ( i ) != '0' ) { for ( int len = 1 ; ( i + len ) <= N ; ++ len ) { int num = Integer . parseInt ( S . substring ( i , i + len ) ) ; if ( num > X ) count ++ ; } } } return count ; } public static void main ( String [ ] args ) { String S = \"2222\" ; int X = 97 ; System . out . println ( count ( S , X ) ) ; } }"],"bleu":0.29001505173764985,"rouge_l":0.5772870662460567}
{"id":1214,"predictions":["import java . io . * ; class GFG { static boolean isPrime ( int x , int y ) { if ( y < 0 ) return false ; if ( y < 0 ) return false ; if ( y < 0 ) return false ; if ( y < 0 ) return false ; if ( y < 0 ) return false ; if ( y < 0 ) return false ; if ( y < 0 ) return false ; if ( y < 0 ) return false ; if ( y < 0 ) return false ; if ( y < 0 ) return false ; if ( y < 0 ) return false ; if ( y < 0 ) return false ; if ( y < 0 ) return false ; if ( y < 0 ) return false ; if ( y < 0 ) return false ; if ( y < 0 ) return false ; if ( y < 0 ) return false ; if ( y < 0 ) return false ; if ( y < 0 ) return false ; if ( y < 0 ) return false ; if ( y < 0 ) return false ; if ( y < 0 ) return false ; if ( y < 0 ) return false ; if ( y < 0 ) return false ; if ( y < 0 ) return false ; if ( y < 0 ) return false ; if ( y < 0 ) return false ; if ( y < 0 ) return false ; if ( y < 0 ) return false ; if ( y < 0 ) return false ; if ( y < 0 ) return false ; if ( y < 0 ) return false ; if ( y < 0 ) return false ; if ( y < 0 ) return false ; if ( y < 0 ) return false ; if ( y < 0 ) return false ; if ( y < 0 ) return false ; if ( y < 0 ) return false ; if ( y < 0 ) return false ; if ( y < 0 ) return false ; if ( y < 0 ) return false ; if ( y < 0 ) return false ; if ( y < 0 ) return false ; if ( y < 0 ) return false ; if ( y < 0 ) return false ; if ( y < 0 ) return false ; if ( y < 0 ) return false ; if ( y < 0 ) return false ; if ( y < 0 ) return false ; if ( y < 0 ) return false ; if ( y < 0 ) return false ; if ( y < 0 ) return false ; if ( y < 0 ) System ."],"references":["class GFG { static void printPattern ( int radius ) { double dist ; for ( int i = 0 ; i <= 2 * radius ; i ++ ) { for ( int j = 0 ; j <= 2 * radius ; j ++ ) { dist = Math . sqrt ( ( i - radius ) * ( i - radius ) + ( j - radius ) * ( j - radius ) ) ; if ( dist > radius - 0.5 && dist < radius + 0.5 ) System . out . print ( \" * \" ) ; else System . out . print ( \" ▁ \" ) ; } System . out . print ( \" \\n \" ) ; } } public static void main ( String [ ] args ) { int radius = 6 ; printPattern ( radius ) ; } }"],"bleu":0.017423237435614164,"rouge_l":0.16667596051971223}
{"id":1215,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } System . out . println ( sum ) ; } }"],"references":["import java . util . * ; class GFG { static int findSum ( int arr [ ] , int N ) { Map < Integer , Integer > mp = new HashMap < > ( ) ; for ( int i = 0 ; i < N ; i ++ ) mp . put ( arr [ i ] , mp . get ( arr [ i ] ) == null ? 1 : mp . get ( arr [ i ] ) + 1 ) ; int sum = 0 ; for ( Map . Entry < Integer , Integer > entry : mp . entrySet ( ) ) { if ( entry . getValue ( ) % 2 != 0 ) sum += ( entry . getKey ( ) ) * ( entry . getValue ( ) ) ; } return sum ; } public static void main ( String args [ ] ) { int arr [ ] = { 10 , 20 , 20 , 10 , 40 , 40 , 10 } ; int N = arr . length ; System . out . println ( findSum ( arr , N ) ) ; } }"],"bleu":0.2975726689404927,"rouge_l":0.3869236399121737}
{"id":1216,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } return sum ; } static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static void findFrequencyUtil ( int arr [ ] , int low , int high , int [ ] freq ) { if ( arr [ low ] == arr [ high ] ) { freq [ arr [ low ] ] += high - low + 1 ; } else { int mid = ( low + high ) \/ 2 ; findFrequencyUtil ( arr , low , mid , freq ) ; findFrequencyUtil ( arr , mid + 1 , high , freq ) ; } } static void findFrequency ( int arr [ ] , int n ) { int [ ] freq = new int [ arr [ n - 1 ] + 1 ] ; findFrequencyUtil ( arr , 0 , n - 1 , freq ) ; for ( int i = 0 ; i <= arr [ n - 1 ] ; i ++ ) if ( freq [ i ] != 0 ) System . out . println ( \" Element ▁ \" + i + \" ▁ occurs ▁ \" + freq [ i ] + \" ▁ times \" ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 1 , 2 , 3 , 3 , 5 , 5 , 8 , 8 , 8 , 9 , 9 , 10 } ; int n = arr . length ; findFrequency ( arr , n ) ; } }"],"bleu":0.3211747275275779,"rouge_l":0.4916920031110797}
{"id":1217,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["import java . io . * ; import java . lang . * ; class GFG { public static double sumOfSeries ( double num ) { double res = 0 , fact = 1 ; for ( int i = 1 ; i <= num ; i ++ ) { fact = fact * i ; res = res + ( i \/ fact ) ; } return ( res ) ; } public static void main ( String [ ] args ) { double n = 5 ; System . out . println ( \" Sum : ▁ \" + sumOfSeries ( n ) ) ; } }"],"bleu":0.40036363745602843,"rouge_l":0.6732195206070013}
{"id":1218,"predictions":["import java . io . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["class GFG { static void calcSum ( int arr [ ] , int n , int k ) { int sum = 0 ; for ( int i = 0 ; i < k ; i ++ ) sum += arr [ i ] ; System . out . print ( sum + \" ▁ \" ) ; for ( int i = k ; i < n ; i ++ ) { sum = ( sum - arr [ i - k ] ) + arr [ i ] ; System . out . print ( sum + \" ▁ \" ) ; } } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 , 6 } ; int n = arr . length ; int k = 3 ; calcSum ( arr , n , k ) ; } }"],"bleu":0.5858169137168696,"rouge_l":0.6871249605221601}
{"id":1219,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % k == 0 ) { count ++ ; } } System . out . println ( count ) ; } }"],"references":["import java . lang . * ; import java . util . * ; class GFG { static int minChanges ( int [ ] A , int n ) { int cnt = 0 ; for ( int i = 0 ; i < n - 2 ; ++ i ) { if ( ( i - 1 >= 0 ) && A [ i - 1 ] == 1 && A [ i + 1 ] == 1 && A [ i ] == 0 ) { A [ i + 1 ] = 0 ; cnt ++ ; } } return cnt ; } public static void main ( String args [ ] ) { int [ ] A = { 1 , 1 , 0 , 1 , 1 , 0 , 1 , 0 , 1 , 0 } ; int n = A . length ; System . out . print ( minChanges ( A , n ) ) ; } }"],"bleu":0.29196950601706956,"rouge_l":0.37899063276620154}
{"id":1220,"predictions":["import java . io . * ; class GFG { static int sum ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( sum ( n ) ) ; } }"],"references":["class GfG { static int calcNodes ( int N , int I ) { int result = 0 ; result = I * ( N - 1 ) + 1 ; return result ; } public static void main ( String [ ] args ) { int N = 5 , I = 2 ; System . out . println ( \" Leaf ▁ nodes ▁ = ▁ \" + calcNodes ( N , I ) ) ; } }"],"bleu":0.3676400721875422,"rouge_l":0.5901156677181914}
{"id":1221,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static class pair { int first , second ; public pair ( int first , int second ) { this . first = first ; this . second = second ; } } static pair countSum ( int arr [ ] , int n ) { int NumberOfOdds = 0 , NumberOfEvens = 0 ; for ( int i = 0 ; i < n ; i ++ ) if ( arr [ i ] % 2 == 1 ) NumberOfOdds ++ ; NumberOfEvens = n - NumberOfOdds ; int NumberOfOddSubsequences = ( 1 << NumberOfEvens ) * ( 1 << ( NumberOfOdds - 1 ) ) ; int NumberOfEvenSubsequences = ( 1 << n ) - 1 - NumberOfOddSubsequences ; return new pair ( NumberOfEvenSubsequences , NumberOfOddSubsequences ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 2 , 3 } ; int n = arr . length ; pair ans = countSum ( arr , n ) ; System . out . print ( \" EvenSum ▁ = ▁ \" + ans . first ) ; System . out . print ( \" ▁ OddSum ▁ = ▁ \" + ans . second ) ; } }"],"bleu":0.3953286587404536,"rouge_l":0.507628294036061}
{"id":1222,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return true ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 3 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static int findMinNumber ( int n ) { int count = 0 , ans = 1 ; while ( n % 2 == 0 ) { count ++ ; n \/= 2 ; } if ( count % 3 != 0 ) ans *= Math . pow ( 2 , ( count % 3 ) ) ; for ( int i = 3 ; i <= Math . sqrt ( n ) ; i += 2 ) { count = 0 ; while ( n % i == 0 ) { count ++ ; n \/= i ; } if ( count % 3 != 0 ) ans *= Math . pow ( i , ( count % 3 ) ) ; } if ( n > 2 ) ans *= n ; return ans ; } public static void main ( String [ ] args ) { int n = 128 ; System . out . print ( findMinNumber ( n ) + \" \\n \" ) ; } }"],"bleu":0.17246576100896743,"rouge_l":0.4625066343164759}
{"id":1223,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String a = sc . next ( ) ; String b = sc . next ( ) ; String c = \" \" ; for ( int i = 0 ; i < a . length ( ) ; i ++ ) { if ( a . charAt ( i ) == b . charAt ( i ) ) { System . out . println ( \" Yes \" ) ; return ; } } System . out . println ( \" No \" ) ; } }"],"references":["import java . io . * ; import java . util . * ; import java . lang . * ; class GFG { static boolean is_vow ( char c ) { return ( c == ' a ' ) || ( c == ' e ' ) || ( c == ' i ' ) || ( c == ' o ' ) || ( c == ' u ' ) ; } static void removeVowels ( String str ) { System . out . print ( str . charAt ( 0 ) ) ; for ( int i = 1 ; i < str . length ( ) ; i ++ ) if ( ( ! is_vow ( str . charAt ( i - 1 ) ) ) || ( ! is_vow ( str . charAt ( i ) ) ) ) System . out . print ( str . charAt ( i ) ) ; } public static void main ( String [ ] args ) { String str = \" geeks ▁ for ▁ geeks \" ; removeVowels ( str ) ; } }"],"bleu":0.24580227153952244,"rouge_l":0.41733891555192487}
{"id":1224,"predictions":["import java . io . * ; class GFG { static float area ( float a , float b ) { if ( a * b < 0 ) return - 1 ; return area ; } public static void main ( String [ ] args ) { float a = 5 , b = 5 ; System . out . println ( area ( a , b ) ) ; } }"],"references":["import java . io . * ; class Gfg { static float areacircumscribed ( float a ) { float PI = 3.14159265f ; return ( a * a * ( PI \/ 2 ) ) ; } public static void main ( String arg [ ] ) { float a = 6 ; System . out . print ( \" Area ▁ of ▁ an ▁ circumscribed \" + \" circle ▁ is ▁ : \" ) ; System . out . println ( areacircumscribed ( a ) ) ; } }"],"bleu":0.34282463844226213,"rouge_l":0.5818571150476932}
{"id":1225,"predictions":["import java . io . * ; class GFG { static int count ( int a , int b ) { int count = 0 ; for ( int i = 0 ; i < a ; i ++ ) { if ( a % b == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int a = 10 , b = 10 ; System . out . println ( count ( a , b ) ) ; } }"],"references":["import java . io . * ; import java . lang . * ; class GFG { public static int breakEvenPoint ( int exp1 , int S , int M ) { double earn = S - M ; double exp = exp1 ; double res = Math . ceil ( exp \/ earn ) ; int res1 = ( int ) res ; return res1 ; } public static void main ( String [ ] args ) { int exp = 3550 , S = 90 , M = 65 ; System . out . println ( breakEvenPoint ( exp , S , M ) ) ; } }"],"bleu":0.3268649620628318,"rouge_l":0.5629276054097057}
{"id":1226,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { System . out . print ( a [ i ] + \" \" ) ; } System . out . println ( ) ; } }"],"references":["import java . io . * ; class GFG { static int MAX = 256 ; static int countPairs ( String s ) { int cnt [ ] = new int [ MAX ] ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) cnt [ s . charAt ( i ) ] ++ ; int ans = 0 ; for ( int i = 0 ; i < MAX ; i ++ ) ans += cnt [ i ] * cnt [ i ] ; return ans ; } public static void main ( String [ ] args ) { String s = \" geeksforgeeks \" ; System . out . println ( countPairs ( s ) ) ; } }"],"bleu":0.39433073521525347,"rouge_l":0.5411532774765896}
{"id":1227,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["import java . util . * ; class GFG { static double sumOfSeries ( int n ) { return 0.0246 * ( Math . pow ( 10 , n ) - 1 - ( 9 * n ) ) ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"bleu":0.5545396182281377,"rouge_l":0.7020988490182805}
{"id":1228,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int maxSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }"],"references":["import java . util . * ; class GFG { public static int maxLenSub ( int arr [ ] , int n ) { int mls [ ] = new int [ n ] , max = 0 ; for ( int i = 0 ; i < n ; i ++ ) mls [ i ] = 1 ; for ( int i = 1 ; i < n ; i ++ ) for ( int j = 0 ; j < i ; j ++ ) if ( Math . abs ( arr [ i ] - arr [ j ] ) <= 1 && mls [ i ] < mls [ j ] + 1 ) mls [ i ] = mls [ j ] + 1 ; for ( int i = 0 ; i < n ; i ++ ) if ( max < mls [ i ] ) max = mls [ i ] ; return max ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 5 , 6 , 3 , 7 , 6 , 5 , 8 } ; int n = arr . length ; System . out . println ( \" Maximum ▁ length ▁ subsequence ▁ = ▁ \" + maxLenSub ( arr , n ) ) ; } }"],"bleu":0.34835413161795525,"rouge_l":0.5899219545300306}
{"id":1229,"predictions":["import java . io . * ; import java . util . * ; class GFG { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { System . out . print ( a [ i ] + \" \" ) ; } System . out . println ( ) ; } } }"],"references":["import java . util . * ; class GFG { static int mod = 1000000007 ; static int [ ] [ ] dp = new int [ 1000 ] [ 1000 ] ; static int calculate ( int pos , int prev , String s , Vector < Integer > index ) { if ( pos == s . length ( ) ) return 1 ; if ( dp [ pos ] [ prev ] != - 1 ) return dp [ pos ] [ prev ] ; int answer = 0 ; for ( int i = 0 ; i < index . size ( ) ; i ++ ) { if ( index . get ( i ) . compareTo ( prev ) >= 0 ) { answer = ( answer % mod + calculate ( pos + 1 , index . get ( i ) , s , index ) % mod ) % mod ; } } return dp [ pos ] [ prev ] = answer ; } static int countWays ( Vector < String > a , String s ) { int n = a . size ( ) ; Vector < Integer > [ ] index = new Vector [ 26 ] ; for ( int i = 0 ; i < 26 ; i ++ ) index [ i ] = new Vector < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < a . get ( i ) . length ( ) ; j ++ ) { index [ a . get ( i ) . charAt ( j ) - ' a ' ] . add ( j + 1 ) ; } } for ( int i = 0 ; i < 1000 ; i ++ ) { for ( int j = 0 ; j < 1000 ; j ++ ) { dp [ i ] [ j ] = - 1 ; } } return calculate ( 0 , 0 , s , index [ 0 ] ) ; } public static void main ( String [ ] args ) { Vector < String > A = new Vector < String > ( ) ; A . add ( \" adc \" ) ; A . add ( \" aec \" ) ; A . add ( \" erg \" ) ; String S = \" ac \" ; System . out . print ( countWays ( A , S ) ) ; } }"],"bleu":0.07494575647633342,"rouge_l":0.3311275396784366}
{"id":1230,"predictions":["import java . io . * ; class GFG { static boolean isPrime ( int n ) { if ( n == 1 ) return false ; if ( n == 2 ) return true ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 12 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class IsDivisible { static boolean divisibleBy36 ( String num ) { int l = num . length ( ) ; if ( l == 0 ) return false ; if ( l == 1 && num . charAt ( 0 ) != '0' ) return false ; int two_digit_num = ( num . charAt ( l - 2 ) - '0' ) * 10 + ( num . charAt ( l - 1 ) - '0' ) ; if ( two_digit_num % 4 != 0 ) return false ; int sum = 0 ; for ( int i = 0 ; i < l ; i ++ ) sum += ( num . charAt ( i ) - '0' ) ; if ( sum % 9 != 0 ) return false ; return true ; } public static void main ( String [ ] args ) { String num = \"92567812197966231384\" ; if ( divisibleBy36 ( num ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.3392648685965002,"rouge_l":0.5570776255707762}
{"id":1231,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( n % i == 0 ) { count ++ ; } } return count ; } public static void main ( String [ ] args ) { int n = 3 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static int sum [ ] = new int [ 1000005 ] ; static int toInt ( char x ) { return x - '0' ; } static void prepareSum ( String s ) { sum [ 0 ] = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { sum [ i + 1 ] = sum [ i ] + toInt ( s . charAt ( i ) ) ; } } static void query ( int l , int r ) { if ( ( sum [ r + 1 ] - sum [ l ] ) % 3 == 0 ) { System . out . println ( \" Divisible ▁ by ▁ 3\" ) ; } else { System . out . println ( \" Not ▁ divisible ▁ by ▁ 3\" ) ; } } public static void main ( String [ ] args ) { String n = \"12468236544\" ; prepareSum ( n ) ; query ( 0 , 1 ) ; query ( 1 , 2 ) ; query ( 3 , 6 ) ; query ( 0 , 10 ) ; } }"],"bleu":0.20360494476437266,"rouge_l":0.3664204825209257}
{"id":1232,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["import java . io . * ; import java . util . * ; class GFG { static int distancesum ( int arr [ ] , int n ) { Arrays . sort ( arr ) ; int res = 0 , sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { res += ( arr [ i ] * i - sum ) ; sum += arr [ i ] ; } return res ; } static int totaldistancesum ( int x [ ] , int y [ ] , int n ) { return distancesum ( x , n ) + distancesum ( y , n ) ; } public static void main ( String [ ] args ) { int x [ ] = { - 1 , 1 , 3 , 2 } ; int y [ ] = { 5 , 6 , 5 , 3 } ; int n = x . length ; System . out . println ( totaldistancesum ( x , y , n ) ) ; } }"],"bleu":0.5400867310283245,"rouge_l":0.6852649316607378}
{"id":1233,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int squareSum ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += ( 2 * i ) * ( 2 * i ) ; return sum ; } public static void main ( String args [ ] ) throws IOException { System . out . println ( squareSum ( 8 ) ) ; } }"],"bleu":0.6714851823057661,"rouge_l":0.8340584213797391}
{"id":1234,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["class GFG { static int findAndSum ( int [ ] arr , int n ) { int sum = 0 ; int mul = 1 ; for ( int i = 0 ; i < 30 ; i ++ ) { boolean count_on = false ; int l = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( ( arr [ j ] & ( 1 << i ) ) > 0 ) if ( count_on ) l ++ ; else { count_on = true ; l ++ ; } else if ( count_on ) { sum += ( ( mul * l * ( l + 1 ) ) \/ 2 ) ; count_on = false ; l = 0 ; } } if ( count_on ) { sum += ( ( mul * l * ( l + 1 ) ) \/ 2 ) ; count_on = false ; l = 0 ; } mul *= 2 ; } return sum ; } public static void main ( String [ ] args ) { int [ ] arr = { 7 , 1 , 1 , 5 } ; int n = arr . length ; System . out . println ( findAndSum ( arr , n ) ) ; } }"],"bleu":0.33503062308520465,"rouge_l":0.5275042036992554}
{"id":1235,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i ) ) count ++ ; } System . out . println ( count ) ; } }"],"references":["import java . util . Arrays ; public class GFG { static boolean isAlphabaticOrder ( String s ) { int n = s . length ( ) ; char c [ ] = new char [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = s . charAt ( i ) ; } Arrays . sort ( c ) ; for ( int i = 0 ; i < n ; i ++ ) if ( c [ i ] != s . charAt ( i ) ) return false ; return true ; } public static void main ( String args [ ] ) { String s = \" aabbbcc \" ; if ( isAlphabaticOrder ( s ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.29049697045227063,"rouge_l":0.4865844815083394}
{"id":1236,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isDivisible ( int a , int b ) { if ( a < b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; return false ; return false ; } public static void main ( String [ ] args ) { int a = 10 , b = 15 ; if ( isDivisible ( a , b ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["public class DLL { Node head ; class Node { int data ; Node prev ; Node next ; Node ( int d ) { data = d ; } } public void push ( int new_data ) { Node new_Node = new Node ( new_data ) ; new_Node . next = head ; new_Node . prev = null ; if ( head != null ) head . prev = new_Node ; head = new_Node ; } public void InsertAfter ( Node prev_Node , int new_data ) { if ( prev_Node == null ) { System . out . println ( \" The ▁ given ▁ previous ▁ node ▁ cannot ▁ be ▁ NULL ▁ \" ) ; return ; } Node new_node = new Node ( new_data ) ; new_node . next = prev_Node . next ; prev_Node . next = new_node ; new_node . prev = prev_Node ; if ( new_node . next != null ) new_node . next . prev = new_node ; } void append ( int new_data ) { Node new_node = new Node ( new_data ) ; Node last = head ; new_node . next = null ; if ( head == null ) { new_node . prev = null ; head = new_node ; return ; } while ( last . next != null ) last = last . next ; last . next = new_node ; new_node . prev = last ; } public void printlist ( Node node ) { Node last = null ; System . out . println ( \" Traversal ▁ in ▁ forward ▁ Direction \" ) ; while ( node != null ) { System . out . print ( node . data + \" ▁ \" ) ; last = node ; node = node . next ; } System . out . println ( ) ; System . out . println ( \" Traversal ▁ in ▁ reverse ▁ direction \" ) ; while ( last != null ) { System . out . print ( last . data + \" ▁ \" ) ; last = last . prev ; } } public static void main ( String [ ] args ) { DLL dll = new DLL ( ) ; dll . append ( 6 ) ; dll . push ( 7 ) ; dll . push ( 1 ) ; dll . append ( 4 ) ; dll . InsertAfter ( dll . head . next , 8 ) ; System . out . println ( \" Created ▁ DLL ▁ is : ▁ \" ) ; dll . printlist ( dll . head ) ; } }"],"bleu":0.06943070092223967,"rouge_l":0.26389911634756996}
{"id":1237,"predictions":["import java . io . * ; import java . util . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) throws java . lang . Exception { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } Arrays . sort ( arr ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } System . out . println ( sum ) ; } }"],"references":["public class GFG { final static int size = 10001 ; static int prime [ ] = new int [ size ] ; static int freq [ ] = new int [ size ] ; static void sieve ( int a , int b ) { prime [ 1 ] = 1 ; for ( int i = 2 ; i * i < size ; i ++ ) { if ( prime [ i ] == 0 ) { for ( int j = i * 2 ; j < size ; j += i ) prime [ j ] = 1 ; } } for ( int p = 1 ; p < size ; p ++ ) { for ( int q = 1 ; q < size ; q ++ ) { if ( prime [ p ] == 0 && prime [ q ] == 0 && a * p + b * q < size ) { freq [ a * p + b * q ] ++ ; } } } } public static void main ( String [ ] args ) { int queries = 2 , a = 1 , b = 2 ; sieve ( a , b ) ; int arr [ ] = { 15 , 25 } ; for ( int i = 0 ; i < queries ; i ++ ) { System . out . print ( freq [ arr [ i ] ] + \" ▁ \" ) ; } } }"],"bleu":0.19237840663200503,"rouge_l":0.31852677017336206}
{"id":1238,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; String s = sc . next ( ) ; String s = sc . next ( ) ; int count = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i ) ) count ++ ; } System . out . println ( count ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . util . * ; import java . lang . * ; class GFG { static String replaceConsonants ( String str ) { String res = \" \" ; int i = 0 , count = 0 ; while ( i < str . length ( ) ) { if ( str . charAt ( i ) != ' a ' && str . charAt ( i ) != ' e ' && str . charAt ( i ) != ' i ' && str . charAt ( i ) != ' o ' && str . charAt ( i ) != ' u ' ) { i ++ ; count ++ ; } else { if ( count > 0 ) res += count ; res += str . charAt ( i ) ; i ++ ; count = 0 ; } } if ( count > 0 ) res += count ; return res ; } public static void main ( String [ ] args ) { String str = \" abcdeiop \" ; System . out . println ( replaceConsonants ( str ) ) ; } }"],"bleu":0.22969937439360633,"rouge_l":0.4092206679988581}
{"id":1239,"predictions":["import java . io . * ; class GFG { static int countPairs ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { if ( arr [ i ] < arr [ j ] ) count ++ ; } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( countPairs ( arr , n ) ) ; } }"],"references":["public static int count ( int S [ ] , int m , int n ) { int table [ ] = new int [ n + 1 ] ; table [ 0 ] = 1 ; for ( int i = 0 ; i < m ; i ++ ) for ( int j = S [ i ] ; j <= n ; j ++ ) table [ j ] += table [ j - S [ i ] ] ; return table [ n ] ; }"],"bleu":0.24738343042522173,"rouge_l":0.4777108433734939}
{"id":1240,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; String str = br . readLine ( ) ; int n = str . length ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( str . charAt ( i ) == str . charAt ( i ) ) count ++ ; else if ( str . charAt ( i ) == str . charAt ( i ) ) count ++ ; } System . out . println ( count ) ; } }"],"references":["class GFG { static void minReplacement ( String str ) { if ( str . length ( ) > 26 ) { System . out . println ( \" IMPOSSIBLE \" ) ; } else { int hash [ ] = new int [ 26 ] ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { hash [ str . charAt ( i ) - ' a ' ] ++ ; } int count = 0 ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { if ( hash [ str . charAt ( i ) - ' a ' ] > 1 ) { for ( int j = 0 ; j < 26 ; j ++ ) { if ( hash [ j ] == 0 ) { hash [ str . charAt ( i ) - ' a ' ] -- ; str = str . substring ( 0 , i ) + ( char ) ( j + ' a ' ) + str . substring ( i + 1 ) ; hash [ j ] ++ ; break ; } } } } System . out . println ( str ) ; } } public static void main ( String [ ] args ) { String str = \" xxxxyyyy \" ; minReplacement ( str ) ; } }"],"bleu":0.21810438087136064,"rouge_l":0.41138251500945805}
{"id":1241,"predictions":["import java . io . * ; import java . util . * ; class GFG { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int b [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { ans += Math . abs ( a [ i ] - b [ j ] ) ; } System . out . println ( ans ) ; } }"],"references":["class GFG { final static int N = 3 ; static int findStepsForDDM ( int arr [ ] [ ] ) { int result = 0 ; for ( int i = 0 ; i < N ; i ++ ) { int sum = 0 ; for ( int j = 0 ; j < N ; j ++ ) sum += Math . abs ( arr [ i ] [ j ] ) ; sum -= Math . abs ( arr [ i ] [ i ] ) ; if ( Math . abs ( arr [ i ] [ i ] ) < Math . abs ( sum ) ) result += Math . abs ( Math . abs ( arr [ i ] [ i ] ) - Math . abs ( sum ) ) ; } return result ; } public static void main ( String [ ] args ) { int arr [ ] [ ] = { { 3 , - 2 , 1 } , { 1 , - 3 , 2 } , { - 1 , 2 , 4 } } ; System . out . println ( findStepsForDDM ( arr ) ) ; } }"],"bleu":0.31342579125526987,"rouge_l":0.38766919775503467}
{"id":1242,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["class GFG { static boolean isArmstrong ( int x , int n ) { int sum1 = 0 ; int temp = x ; while ( temp > 0 ) { int digit = temp % 10 ; sum1 += Math . pow ( digit , n ) ; temp \/= 10 ; } return sum1 == x ; } static void CalculateXORandOR ( int n ) { int CalculateXOR = 0 ; int CalculateOR = 0 ; int start = ( int ) Math . pow ( 10 , n - 1 ) ; int end = ( int ) ( Math . pow ( 10 , n ) ) - 1 ; for ( int i = start ; i < end + 1 ; i ++ ) { if ( isArmstrong ( i , n ) ) { CalculateXOR = CalculateXOR ^ i ; CalculateOR = CalculateOR | i ; } } System . out . println ( \" XOR ▁ = ▁ \" + CalculateXOR ) ; System . out . println ( \" OR ▁ = ▁ \" + CalculateOR ) ; } public static void main ( String [ ] args ) { int n = 4 ; CalculateXORandOR ( n ) ; } }"],"bleu":0.1990485394567441,"rouge_l":0.40005702879954375}
{"id":1243,"predictions":["import java . io . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 10 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; import java . lang . * ; import java . io . * ; class GFG { static void decToOctal ( int n ) { int octalNum [ ] = new int [ 100 ] ; int i = 0 ; while ( n != 0 ) { octalNum [ i ] = n % 8 ; n = n \/ 8 ; i ++ ; } for ( int j = i - 1 ; j >= 0 ; j -- ) System . out . print ( octalNum [ j ] ) ; System . out . println ( \" \\n \" ) ; } static void nDigitPerfectSquares ( int n ) { int decimal = ( int ) Math . pow ( Math . ceil ( Math . sqrt ( Math . pow ( 8 , n ) ) ) - 1 , 2 ) ; decToOctal ( decimal ) ; } public static void main ( String [ ] args ) { int n = 2 ; nDigitPerfectSquares ( n ) ; } }"],"bleu":0.269413252961703,"rouge_l":0.37547083141938453}
{"id":1244,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["class OddPosition { public static long getFinalElement ( long n ) { long finalNum ; for ( finalNum = 2 ; finalNum * 2 <= n ; finalNum *= 2 ) ; return finalNum ; } public static void main ( String [ ] args ) { int N = 12 ; System . out . println ( getFinalElement ( N ) ) ; } }"],"bleu":0.3801143896619769,"rouge_l":0.6600799811808987}
{"id":1245,"predictions":["import java . io . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int maxSum ( int arr [ ] , int n ) { if ( n < 2 ) return - 1 ; int ans = arr [ 0 ] + arr [ 1 ] ; for ( int i = 1 ; i + 1 < n ; i ++ ) ans = Math . min ( ans , ( arr [ i ] + arr [ i + 1 ] ) ) ; return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 12 , 2 , 2 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }"],"bleu":0.5302910748357768,"rouge_l":0.727131381186836}
{"id":1246,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int count = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i ) ) count ++ ; } System . out . println ( count ) ; } }"],"references":["class GFG { static int findCount ( String str ) { int result = 0 ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { if ( i == ( str . charAt ( i ) - ' a ' ) || i == ( str . charAt ( i ) - ' A ' ) ) { result ++ ; } } return result ; } public static void main ( String [ ] args ) { String str = \" AbgdeF \" ; System . out . print ( findCount ( str ) ) ; } }"],"bleu":0.419180149244357,"rouge_l":0.5284296739644038}
{"id":1247,"predictions":["import java . io . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } public static void main ( String [ ] args ) { int n = 12 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . io . * ; class GFG { static int power ( int x , int y ) { if ( y == 0 ) return 1 ; else if ( y % 2 == 0 ) return power ( x , y \/ 2 ) * power ( x , y \/ 2 ) ; else return x * power ( x , y \/ 2 ) * power ( x , y \/ 2 ) ; } static void sieveOfEratosthenes ( int n , boolean isPrime [ ] ) { isPrime [ 0 ] = isPrime [ 1 ] = false ; for ( int i = 2 ; i <= n ; i ++ ) isPrime [ i ] = true ; for ( int p = 2 ; p * p <= n ; p ++ ) { if ( isPrime [ p ] == true ) { for ( int i = p * 2 ; i <= n ; i += p ) isPrime [ i ] = false ; } } } static boolean leftTruPrime ( int n ) { int temp = n , cnt = 0 , temp1 ; while ( temp != 0 ) { cnt ++ ; temp1 = temp % 10 ; if ( temp1 == 0 ) return false ; temp = temp \/ 10 ; } boolean isPrime [ ] = new boolean [ n + 1 ] ; sieveOfEratosthenes ( n , isPrime ) ; for ( int i = cnt ; i > 0 ; i -- ) { int mod = power ( 10 , i ) ; if ( ! isPrime [ n % mod ] ) return false ; } return true ; } public static void main ( String args [ ] ) { int n = 113 ; if ( leftTruPrime ( n ) ) System . out . println ( n + \" ▁ is ▁ left ▁ truncatable ▁ prime \" ) ; else System . out . println ( n + \" ▁ is ▁ not ▁ left ▁ truncatable ▁ prime \" ) ; } }"],"bleu":0.19543146908189202,"rouge_l":0.4020908556553867}
{"id":1248,"predictions":["import java . util . * ; class GFG { static boolean isVowel ( String s ) { for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i ) ) return false ; } return true ; } public static void main ( String [ ] args ) { String s = \" geeksforgeeksforgeeks \" ; if ( isVowel ( s ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static char findExtraCharcter ( char [ ] strA , char [ ] strB ) { int [ ] m1 = new int [ 256 ] ; for ( int i = 0 ; i < strB . length ; i ++ ) m1 [ strB [ i ] ] ++ ; for ( int i = 0 ; i < strA . length ; i ++ ) m1 [ strA [ i ] ] -- ; for ( int i = 0 ; i < m1 . length ; i ++ ) { if ( m1 [ i ] == 1 ) return ( char ) i ; } return Character . MIN_VALUE ; } public static void main ( String [ ] args ) { String strA = \" abcd \" ; String strB = \" cbdad \" ; System . out . println ( findExtraCharcter ( strA . toCharArray ( ) , strB . toCharArray ( ) ) ) ; } }"],"bleu":0.24092726096564393,"rouge_l":0.4512347786502789}
{"id":1249,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["import java . io . * ; public class GFG { static float AvgofSquareN ( int n ) { float sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += ( i * i ) ; return sum \/ n ; } static public void main ( String [ ] args ) { int n = 2 ; System . out . println ( AvgofSquareN ( n ) ) ; } }"],"bleu":0.6659488959374613,"rouge_l":0.8719701678060907}
{"id":1250,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int N = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; System . out . println ( ( int ) Math . pow ( 10 , M ) ) ; } }"],"references":["class GFG { static int lcm_fun ( int a , int b ) { if ( b == 0 ) return a ; return lcm_fun ( b , a % b ) ; } static int digitLCM ( int n ) { int lcm = 1 ; while ( n > 0 ) { lcm = ( n % 10 * lcm ) \/ lcm_fun ( n % 10 , lcm ) ; if ( lcm == 0 ) return 0 ; n = n \/ 10 ; } return lcm ; } public static void main ( String [ ] args ) { int n = 397 ; System . out . println ( digitLCM ( n ) ) ; } }"],"bleu":0.19424524481919767,"rouge_l":0.2995230078563412}
{"id":1251,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["import java . util . * ; public class GFG { static int fact ( int n ) { if ( n <= 1 ) return 1 ; return n * fact ( n - 1 ) ; } static int nPr ( int n , int r ) { return fact ( n ) \/ fact ( n - r ) ; } public static void main ( String args [ ] ) { int n = 5 ; int r = 2 ; System . out . println ( n + \" P \" + r + \" ▁ = ▁ \" + nPr ( n , r ) ) ; } }"],"bleu":0.2588098465017856,"rouge_l":0.5273482959268495}
{"id":1252,"predictions":["import java . io . * ; import java . util . * ; class GFG { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = sc . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( a [ i ] + \" \" ) ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( a [ i ] + \" \" ) ; } }"],"references":["class GFG { static boolean isPossible ( int a [ ] , int n ) { int cur = a [ 0 ] ; cur -- ; for ( int i = 1 ; i < n ; i ++ ) { int nxt = a [ i ] ; if ( nxt > cur ) nxt -- ; else if ( nxt < cur ) return false ; cur = nxt ; } return true ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 1 , 2 , 3 } ; int n = a . length ; if ( isPossible ( a , n ) ) System . out . printf ( \" Yes \" ) ; else System . out . printf ( \" No \" ) ; } }"],"bleu":0.3051380533010057,"rouge_l":0.42532613585245166}
{"id":1253,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["public class GFG { static int fact ( int n ) { int num = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { num = num * i ; } return num ; } static int Special_Factorial_Number ( int k ) { for ( int i = 1 ; i <= k ; i ++ ) { if ( fact ( i ) % k == 0 ) { return i ; } } return 0 ; } public static void main ( String [ ] args ) { int k = 16 ; System . out . println ( Special_Factorial_Number ( k ) ) ; } }"],"bleu":0.5129858028185865,"rouge_l":0.7184717035334675}
{"id":1254,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int sum ( int a [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += a [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = a . length ; System . out . println ( sum ( a , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static int mod = 1000000007 ; static int noOfBinaryStrings ( int N , int k ) { int dp [ ] = new int [ 100002 ] ; for ( int i = 1 ; i <= k - 1 ; i ++ ) { dp [ i ] = 1 ; } dp [ k ] = 2 ; for ( int i = k + 1 ; i <= N ; i ++ ) { dp [ i ] = ( dp [ i - 1 ] + dp [ i - k ] ) % mod ; } return dp [ N ] ; } public static void main ( String [ ] args ) { int N = 4 ; int K = 2 ; System . out . println ( noOfBinaryStrings ( N , K ) ) ; } }"],"bleu":0.3077473451475649,"rouge_l":0.515288518738846}
{"id":1255,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int maxSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }"],"references":["class GFG { static void reverse ( int arr [ ] , int n , int k ) { for ( int i = 0 ; i < n ; i += 2 * k ) { int left = i ; int right = Math . min ( i + k - 1 , n - 1 ) ; while ( left < right ) { swap ( arr , left ++ , right -- ) ; } } } static int [ ] swap ( int [ ] array , int i , int j ) { int temp = array [ i ] ; array [ i ] = array [ j ] ; array [ j ] = temp ; return array ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 } ; int k = 3 ; int n = arr . length ; reverse ( arr , n , k ) ; for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( arr [ i ] + \" ▁ \" ) ; } } }"],"bleu":0.30391935561600814,"rouge_l":0.4610099622122982}
{"id":1256,"predictions":["import java . io . * ; import java . util . * ; import java . lang . * ; class GFG { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { a [ i ] = sc . nextInt ( ) ; } System . out . println ( a [ n - 1 ] + \" \" + a [ n - 1 ] + \" \" + a [ n - 1 ] ) ; } } }"],"references":["class GFG { static final int MAX = 100 ; static int [ ] [ ] mat = new int [ MAX ] [ MAX ] ; static void fillRemaining ( int i , int j , int n ) { int x = 2 ; for ( int k = i + 1 ; k < n ; k ++ ) mat [ k ] [ j ] = x ++ ; for ( int k = 0 ; k < i ; k ++ ) mat [ k ] [ j ] = x ++ ; } static void constructMatrix ( int n ) { int right = n - 1 , left = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( i % 2 == 0 ) { mat [ i ] [ right ] = 1 ; fillRemaining ( i , right , n ) ; right -- ; } else { mat [ i ] [ left ] = 1 ; fillRemaining ( i , left , n ) ; left ++ ; } } } public static void main ( String args [ ] ) { int n = 5 ; constructMatrix ( n ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) System . out . print ( mat [ i ] [ j ] + \" ▁ \" ) ; System . out . println ( ) ; } } }"],"bleu":0.25402263496416705,"rouge_l":0.3939114391143911}
{"id":1257,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } Arrays . sort ( arr ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } System . out . println ( sum ) ; } }"],"references":["class Test { static int arr [ ] = { 10 , 20 , 30 , 50 , 10 , 70 , 30 } ; static void printMaxOfMin ( int n ) { for ( int k = 1 ; k <= n ; k ++ ) { int maxOfMin = Integer . MIN_VALUE ; for ( int i = 0 ; i <= n - k ; i ++ ) { int min = arr [ i ] ; for ( int j = 1 ; j < k ; j ++ ) { if ( arr [ i + j ] < min ) min = arr [ i + j ] ; } if ( min > maxOfMin ) maxOfMin = min ; } System . out . print ( maxOfMin + \" ▁ \" ) ; } } public static void main ( String [ ] args ) { printMaxOfMin ( arr . length ) ; } }"],"bleu":0.23899628425542993,"rouge_l":0.3815264684554025}
{"id":1258,"predictions":["import java . io . * ; class GFG { static int countPairs ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ i ] > arr [ j ] ) count ++ ; } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( countPairs ( arr , n ) ) ; } }"],"references":["import java . util . * ; class solution { static int countSubArrays ( int arr [ ] , int n , int K ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i ; j < n ; j ++ ) { int bitwise_or = 0 ; for ( int k = i ; k <= j ; k ++ ) { bitwise_or = bitwise_or | arr [ k ] ; } if ( bitwise_or >= K ) count ++ ; } } return count ; } public static void main ( String args [ ] ) { int arr [ ] = { 3 , 4 , 5 } ; int n = arr . length ; int k = 6 ; System . out . println ( countSubArrays ( arr , n , k ) ) ; } }"],"bleu":0.5502608775020599,"rouge_l":0.7582685904550499}
{"id":1259,"predictions":["import java . util . * ; class GFG { static boolean isVowel ( String str ) { int n = str . length ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( str . charAt ( i ) == str . charAt ( i ) ) count ++ ; } return count ; } public static void main ( String [ ] args ) { String str = \" geeksforgeeksforgeeks \" ; if ( isVowel ( str ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; class GFG { static String CHARS = \" qwertyuiopasdfghjklzxcvbnm \" ; static int MAX = 26 ; static String getString ( char [ ] str , int n ) { Map < Character , Character > uMap = new HashMap < > ( ) ; for ( int i = 0 ; i < MAX ; i ++ ) { uMap . put ( CHARS . charAt ( i ) , CHARS . charAt ( ( i + 1 ) % MAX ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { str [ i ] = uMap . get ( str [ i ] ) ; } return String . valueOf ( str ) ; } public static void main ( String [ ] args ) { String str = \" geeks \" ; int n = str . length ( ) ; System . out . println ( getString ( str . toCharArray ( ) , n ) ) ; } }"],"bleu":0.3554524012328929,"rouge_l":0.5326670173592847}
{"id":1260,"predictions":["import java . io . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["import java . util . * ; public class SortExample { static void printOrder ( Integer [ ] arr , int k ) { int n = arr . length ; Arrays . sort ( arr , 0 , k ) ; Arrays . sort ( arr , k , n , Collections . reverseOrder ( ) ) ; } public static void main ( String [ ] args ) { Integer [ ] arr = { 5 , 4 , 6 , 2 , 1 , 3 , 8 , 9 , - 1 } ; int k = 4 ; printOrder ( arr , k ) ; System . out . printf ( \" % s \" , Arrays . toString ( arr ) ) ; } }"],"bleu":0.28815758303201766,"rouge_l":0.545528455284553}
{"id":1261,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int N = Integer . parseInt ( st . nextToken ( ) ) ; int sum = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { sum += Integer . parseInt ( st . nextToken ( ) ) ; } System . out . println ( sum ) ; } }"],"references":["import java . lang . Math ; public class GfG { static int countSteps ( int n ) { int steps = 0 ; while ( n > 0 ) { int largest = ( int ) Math . sqrt ( n ) ; n -= ( largest * largest ) ; steps ++ ; } return steps ; } public static void main ( String [ ] args ) { int n = 85 ; System . out . println ( countSteps ( n ) ) ; } }"],"bleu":0.21977291049969724,"rouge_l":0.38432956381260097}
{"id":1262,"predictions":["import java . io . * ; class GFG { static float area ( float a ) { if ( a < 0 ) return - 1 ; float area = ( float ) Math . sqrt ( a ) ; return area ; } public static void main ( String [ ] args ) { float a = 5 , b = 5 ; System . out . println ( area ( a , b ) ) ; } }"],"references":["import java . io . * ; class GFG { static float Area ( float a ) { if ( a < 0 ) return - 1 ; float h = ( float ) 1.268 * a ; float A = ( float ) ( 0.70477 * Math . pow ( h , 2 ) ) ; return A ; } public static void main ( String [ ] args ) { float a = 5 ; System . out . println ( Area ( a ) ) ; } }"],"bleu":0.6358372179120374,"rouge_l":0.794001131861913}
{"id":1263,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { st = new StringTokenizer ( br . readLine ( ) ) ; a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( a [ i ] > a [ j ] ) { count ++ ; } } } System . out . println ( count ) ; } }"],"references":["import java . util . Arrays ; class GFG { static final int SIZE = 26 ; static boolean isVowel ( char ch ) { if ( ch == ' a ' || ch == ' e ' || ch == ' i ' || ch == ' o ' || ch == ' u ' ) { return true ; } return false ; } static String createAltStr ( String str1 , String str2 , int start , int l ) { String finalStr = \" \" ; for ( int i = 0 , j = start ; j < l ; i ++ , j ++ ) { finalStr = ( finalStr + str1 . charAt ( i ) ) + str2 . charAt ( j ) ; } return finalStr ; } static String findAltStr ( String str ) { int char_freq [ ] = new int [ SIZE ] ; Arrays . fill ( char_freq , 0 ) ; int nv = 0 , nc = 0 ; String vstr = \" \" , cstr = \" \" ; int l = str . length ( ) ; for ( int i = 0 ; i < l ; i ++ ) { char ch = str . charAt ( i ) ; if ( isVowel ( ch ) ) { nv ++ ; } else { nc ++ ; } char_freq [ ch - 97 ] ++ ; } if ( Math . abs ( nv - nc ) >= 2 ) { return \" no ▁ such ▁ String \" ; } for ( int i = 0 ; i < SIZE ; i ++ ) { char ch = ( char ) ( i + 97 ) ; for ( int j = 1 ; j <= char_freq [ i ] ; j ++ ) { if ( isVowel ( ch ) ) { vstr += ch ; } else { cstr += ch ; } } } if ( nv > nc ) { return ( vstr . charAt ( 0 ) + createAltStr ( cstr , vstr , 1 , nv ) ) ; } if ( nc > nv ) { return ( cstr . charAt ( 0 ) + createAltStr ( vstr , cstr , 1 , nc ) ) ; } if ( cstr . charAt ( 0 ) < vstr . charAt ( 0 ) ) { return createAltStr ( cstr , vstr , 0 , nv ) ; } return createAltStr ( vstr , cstr , 0 , nc ) ; } public static void main ( String [ ] args ) { String str = \" aeroplane \" ; System . out . println ( findAltStr ( str ) ) ; } }"],"bleu":0.11679618660697885,"rouge_l":0.3150630036956231}
{"id":1264,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int count ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ i ] > arr [ j ] ) count ++ ; } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 4 , 4 , 3 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4"],"references":["class GFG { static final int N = 5 ; static final int M = 5 ; static int minOperation ( boolean arr [ ] [ ] ) { int ans = 0 ; for ( int i = N - 1 ; i >= 0 ; i -- ) { for ( int j = M - 1 ; j >= 0 ; j -- ) { if ( arr [ i ] [ j ] == false ) { ans ++ ; for ( int k = 0 ; k <= i ; k ++ ) { for ( int h = 0 ; h <= j ; h ++ ) { if ( arr [ k ] [ h ] == true ) { arr [ k ] [ h ] = false ; } else { arr [ k ] [ h ] = true ; } } } } } } return ans ; } public static void main ( String [ ] args ) { boolean mat [ ] [ ] = { { false , false , true , true , true } , { false , false , false , true , true } , { false , false , false , true , true } , { true , true , true , true , true } , { true , true , true , true , true } } ; System . out . println ( minOperation ( mat ) ) ; } }"],"bleu":0.10953971649159924,"rouge_l":0.2627118644067797}
{"id":1265,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["import java . io . * ; class GFG { static void decToOctal ( int n ) { int [ ] octalNum = new int [ 100 ] ; int i = 0 ; while ( n != 0 ) { octalNum [ i ] = n % 8 ; n = n \/ 8 ; i ++ ; } for ( int j = i - 1 ; j >= 0 ; j -- ) System . out . print ( octalNum [ j ] ) ; } public static void main ( String [ ] args ) { int n = 33 ; decToOctal ( n ) ; } }"],"bleu":0.3844897479490873,"rouge_l":0.5348569785827224}
{"id":1266,"predictions":["import java . io . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return true ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 12 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static boolean isPrime ( long n ) { if ( n <= 1 ) return false ; if ( n <= 3 ) return true ; if ( n % 2 == 0 || n % 3 == 0 ) return false ; for ( int i = 5 ; i * i <= n ; i = i + 6 ) if ( n % i == 0 || n % ( i + 2 ) == 0 ) return false ; return true ; } static boolean isFactorialPrime ( long n ) { if ( ! isPrime ( n ) ) return false ; long fact = 1 ; int i = 1 ; while ( fact <= n + 1 ) { fact = fact * i ; if ( n + 1 == fact || n - 1 == fact ) return true ; i ++ ; } return false ; } public static void main ( String args [ ] ) { int n = 23 ; if ( isFactorialPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.38832495365983055,"rouge_l":0.6032083211251098}
{"id":1267,"predictions":["import java . io . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 3 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class ConvertNum { static int convert ( int m , int n ) { if ( m == n ) return 0 ; if ( m > n ) return m - n ; if ( m <= 0 && n > 0 ) return - 1 ; if ( n % 2 == 1 ) return 1 + convert ( m , n + 1 ) ; else return 1 + convert ( m , n \/ 2 ) ; } public static void main ( String [ ] args ) { int m = 3 , n = 11 ; System . out . println ( \" Minimum ▁ number ▁ of ▁ \" + \" operations ▁ : ▁ \" + convert ( m , n ) ) ; } }"],"bleu":0.32222821493694764,"rouge_l":0.544848408604856}
{"id":1268,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return true ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 3 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . Arrays ; import java . util . Collections ; class GFG { static final int MAX = 1000000 ; static boolean [ ] prime = new boolean [ MAX ] ; public static void sieve ( ) { Arrays . fill ( prime , true ) ; for ( int p = 2 ; p * p < MAX ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i < MAX ; i += p ) prime [ i ] = false ; } } } static void printPrimeQuad ( int n ) { for ( int i = 0 ; i < n - 7 ; i ++ ) { if ( prime [ i ] && prime [ i + 2 ] && prime [ i + 6 ] && prime [ i + 8 ] ) { System . out . println ( i + \" ▁ \" + ( i + 2 ) + \" ▁ \" + ( i + 6 ) + \" ▁ \" + ( i + 8 ) ) ; } } } public static void main ( String [ ] args ) { int n = 20 ; sieve ( ) ; printPrimeQuad ( n ) ; } }"],"bleu":0.15357447888525935,"rouge_l":0.3337362427635346}
{"id":1269,"predictions":["import java . io . * ; class GFG { static boolean isVowel ( int a , int b ) { if ( a < b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; return false ; return false ; } public static void main ( String [ ] args ) { int a = 10 , b = 10 ; if ( isVowel ( a , b ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static void sum ( int mat [ ] [ ] , int r , int c ) { int i , j ; int upper_sum = 0 ; int lower_sum = 0 ; for ( i = 0 ; i < r ; i ++ ) for ( j = 0 ; j < c ; j ++ ) { if ( i <= j ) { upper_sum += mat [ i ] [ j ] ; } } System . out . println ( \" Upper ▁ sum ▁ is ▁ \" + upper_sum ) ; for ( i = 0 ; i < r ; i ++ ) for ( j = 0 ; j < c ; j ++ ) { if ( j <= i ) { lower_sum += mat [ i ] [ j ] ; } } System . out . print ( \" Lower ▁ sum ▁ is ▁ \" + lower_sum ) ; } public static void main ( String [ ] args ) { int r = 3 ; int c = 3 ; int mat [ ] [ ] = { { 6 , 5 , 4 } , { 1 , 2 , 5 } , { 7 , 9 , 7 } } ; sum ( mat , r , c ) ; } }"],"bleu":0.13920374242974434,"rouge_l":0.2816158285243199}
{"id":1270,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int maxSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }"],"references":["class GFG { static void printArray ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + \" ▁ \" ) ; } static void removeMin ( int arr [ ] , int n ) { int i , minVal = arr [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) minVal = Math . min ( minVal , arr [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) arr [ i ] = arr [ i ] - minVal ; } static void removeFromMax ( int arr [ ] , int n ) { int i , maxVal = arr [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) maxVal = Math . max ( maxVal , arr [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) arr [ i ] = maxVal - arr [ i ] ; } static void modifyArray ( int arr [ ] , int n , int k ) { if ( k % 2 == 0 ) removeMin ( arr , n ) ; else removeFromMax ( arr , n ) ; printArray ( arr , n ) ; } public static void main ( String args [ ] ) { int arr [ ] = { 4 , 8 , 12 , 16 } ; int n = arr . length ; int k = 2 ; modifyArray ( arr , n , k ) ; } }"],"bleu":0.12222874384198405,"rouge_l":0.345494667157043}
{"id":1271,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int count ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { count ++ ; } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 4 , 3 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 ,"],"references":["class GFG { static int LongestSubarray ( int a [ ] , int n , int k ) { int [ ] pre = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] > k ) pre [ i ] = 1 ; else pre [ i ] = - 1 ; } for ( int i = 1 ; i < n ; i ++ ) pre [ i ] = pre [ i - 1 ] + pre [ i ] ; int len = 0 ; int lo = 1 , hi = n ; while ( lo <= hi ) { int mid = ( lo + hi ) \/ 2 ; boolean ok = false ; for ( int i = mid - 1 ; i < n ; i ++ ) { int x = pre [ i ] ; if ( i - mid >= 0 ) x -= pre [ i - mid ] ; if ( x > 0 ) { ok = true ; break ; } } if ( ok == true ) { len = mid ; lo = mid + 1 ; } else hi = mid - 1 ; } return len ; } public static void main ( String [ ] args ) { int a [ ] = { 2 , 3 , 4 , 5 , 3 , 7 } ; int k = 3 ; int n = a . length ; System . out . println ( LongestSubarray ( a , n , k ) ) ; } }"],"bleu":0.10970520231963721,"rouge_l":0.19845247516046774}
{"id":1272,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int findSum ( int n ) { int ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= n ; j ++ ) ans += ( i \/ j ) ; return ans ; } public static void main ( String [ ] args ) { int N = 2 ; System . out . println ( findSum ( N ) ) ; } }"],"bleu":0.5385262846362624,"rouge_l":0.7802558215808463}
{"id":1273,"predictions":["import java . util . * ; class GFG { static boolean isVowel ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) return false ; } return true ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; if ( isVowel ( arr , n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; class GFG { static boolean permutation ( int [ ] arr , int n ) { Set < Integer > hash = new HashSet < Integer > ( ) ; int maxEle = 0 ; for ( int i = 0 ; i < n ; i ++ ) { hash . add ( arr [ i ] ) ; maxEle = Math . max ( maxEle , arr [ i ] ) ; } if ( maxEle != n ) return false ; if ( hash . size ( ) == n ) return true ; return false ; } public static void main ( String args [ ] ) { int arr [ ] = { 1 , 2 , 5 , 3 , 2 } ; int n = arr . length ; if ( permutation ( arr , n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.5234521815775444,"rouge_l":0.7227187694865933}
{"id":1274,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int count ( int a [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( a [ i ] > a [ j ] ) { count ++ ; } } } return count ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = a . length ; System . out . println ( count ( a , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static int N = 5 ; static void printHosoya ( int n ) { int dp [ ] [ ] = new int [ N ] [ N ] ; dp [ 0 ] [ 0 ] = dp [ 1 ] [ 0 ] = 1 ; dp [ 1 ] [ 1 ] = 1 ; for ( int i = 2 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( i > j ) dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + dp [ i - 2 ] [ j ] ; else dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ] + dp [ i - 2 ] [ j - 2 ] ; } } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j <= i ; j ++ ) System . out . print ( dp [ i ] [ j ] + \" ▁ \" ) ; System . out . println ( \" \" ) ; } } public static void main ( String [ ] args ) { int n = 5 ; printHosoya ( n ) ; } }"],"bleu":0.2579275755939931,"rouge_l":0.41397205588822356}
{"id":1275,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int maxSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }"],"references":["import java . util . Arrays ; import java . io . * ; class GFG { static int pairs_count ( int arr [ ] , int n , int sum ) { int ans = 0 ; Arrays . sort ( arr ) ; int i = 0 , j = n - 1 ; while ( i < j ) { if ( arr [ i ] + arr [ j ] < sum ) i ++ ; else if ( arr [ i ] + arr [ j ] > sum ) j -- ; else { int x = arr [ i ] , xx = i ; while ( ( i < j ) && ( arr [ i ] == x ) ) i ++ ; int y = arr [ j ] , yy = j ; while ( ( j >= i ) && ( arr [ j ] == y ) ) j -- ; if ( x == y ) { int temp = i - xx + yy - j - 1 ; ans += ( temp * ( temp + 1 ) ) \/ 2 ; } else ans += ( i - xx ) * ( yy - j ) ; } } return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 5 , 7 , 5 , - 1 } ; int n = arr . length ; int sum = 6 ; System . out . println ( pairs_count ( arr , n , sum ) ) ; } }"],"bleu":0.19668561059112818,"rouge_l":0.48730774973868896}
{"id":1276,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static final int MAX = 100005 ; static HashSet < Integer > fibonacci = new HashSet < Integer > ( ) ; static void createHash ( ) { int prev = 0 , curr = 1 ; fibonacci . add ( prev ) ; fibonacci . add ( curr ) ; while ( curr <= MAX ) { int temp = curr + prev ; fibonacci . add ( temp ) ; prev = curr ; curr = temp ; } } static boolean checkArray ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) if ( fibonacci . contains ( arr [ i ] ) ) sum += arr [ i ] ; if ( fibonacci . contains ( sum ) ) return true ; return false ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 4 , 8 , 2 } ; int n = arr . length ; createHash ( ) ; if ( checkArray ( arr , n ) ) System . out . print ( \" Yes \" ) ; else System . out . print ( \" No \" ) ; } }"],"bleu":0.3632022257936622,"rouge_l":0.542686908259876}
{"id":1277,"predictions":["import java . io . * ; class GFG { static int countPairs ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( countPairs ( arr , n ) ) ; } }"],"references":["class GFG { static void makearrayequal ( int arr [ ] , int n ) { int x = 0 ; for ( int i = 0 ; i < n ; i ++ ) { x += ( arr [ i ] & 1 ) ; } System . out . println ( Math . min ( x , n - x ) ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 4 , 3 , 2 , 1 } ; int n = arr . length ; makearrayequal ( arr , n ) ; } }"],"bleu":0.6441131168676387,"rouge_l":0.7321084605126685}
{"id":1278,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; Arrays . sort ( arr ) ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + \" \" ) ; } }"],"references":["import java . util . * ; import java . lang . * ; import java . io . * ; class LinearSearch { static int countRotations ( int arr [ ] , int n ) { int min = arr [ 0 ] , min_index = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( min > arr [ i ] ) { min = arr [ i ] ; min_index = i ; } } return min_index ; } public static void main ( String [ ] args ) { int arr [ ] = { 15 , 18 , 2 , 3 , 6 , 12 } ; int n = arr . length ; System . out . println ( countRotations ( arr , n ) ) ; } }"],"bleu":0.3320019218739447,"rouge_l":0.41664887940234796}
{"id":1279,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int count = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { for ( int j = 0 ; j < s . length ( ) ; j ++ ) { if ( s . charAt ( i ) == s . charAt ( j ) ) count ++ ; } } System . out . println ( count ) ; } }"],"references":["class GFG { static boolean check ( int s ) { int [ ] freq = new int [ 10 ] ; int r , i ; for ( i = 0 ; i < 10 ; i ++ ) { freq [ i ] = 0 ; } while ( s != 0 ) { r = s % 10 ; s = ( int ) ( s \/ 10 ) ; freq [ r ] += 1 ; } int xor__ = 0 ; for ( i = 0 ; i < 10 ; i ++ ) { xor__ = xor__ ^ freq [ i ] ; if ( xor__ == 0 ) return true ; else return false ; } return true ; } public static void main ( String [ ] args ) { int s = 122233 ; if ( check ( s ) ) System . out . println ( \" Yes \\n \" ) ; else System . out . println ( \" No \\n \" ) ; } }"],"bleu":0.20307117298499702,"rouge_l":0.3871141228353232}
{"id":1280,"predictions":["import java . io . * ; class GFG { static int countWays ( int n ) { int count = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( n % i == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( countWays ( n ) ) ; } }"],"references":["class GFG { static int count ( int n ) { int cnt = 0 ; int p = 1 ; while ( p <= n ) { cnt ++ ; p *= 2 ; } return cnt ; } public static void main ( String args [ ] ) { int n = 7 ; System . out . print ( count ( n ) ) ; } }"],"bleu":0.4075496308841001,"rouge_l":0.7129870129870132}
{"id":1281,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( a [ i ] + \" \" ) ; } out . println ( ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } }"],"references":["import java . util . * ; class GFG { static void powerSet ( String str , int index , String curr ) { int n = str . length ( ) ; if ( index == n ) { return ; } System . out . println ( curr ) ; for ( int i = index + 1 ; i < n ; i ++ ) { curr += str . charAt ( i ) ; powerSet ( str , i , curr ) ; curr = curr . substring ( 0 , curr . length ( ) - 1 ) ; } } public static void main ( String [ ] args ) { String str = \" abc \" ; int index = - 1 ; String curr = \" \" ; powerSet ( str , index , curr ) ; } }"],"bleu":0.15457188257411317,"rouge_l":0.3564125036517674}
{"id":1282,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) if ( arr [ i ] % 2 == 0 ) return false ; return true ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; if ( isPrime ( arr , n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . HashSet ; import java . util . Iterator ; import java . util . Set ; class GFG { static int findMinimumX ( int a [ ] , int n ) { Set < Integer > st = new HashSet < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) st . add ( a [ i ] ) ; if ( st . size ( ) == 1 ) return 0 ; if ( st . size ( ) == 2 ) { Iterator < Integer > it = st . iterator ( ) ; int el1 = it . next ( ) ; int el2 = it . next ( ) ; if ( ( el2 - el1 ) % 2 == 0 ) return ( el2 - el1 ) \/ 2 ; else return ( el2 - el1 ) ; } if ( st . size ( ) == 3 ) { Iterator < Integer > it = st . iterator ( ) ; int el1 = it . next ( ) ; int el2 = it . next ( ) ; int el3 = it . next ( ) ; if ( ( el2 - el1 ) == ( el3 - el2 ) ) return el2 - el1 ; else return - 1 ; } return - 1 ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 4 , 4 , 7 , 4 , 1 } ; int n = a . length ; System . out . println ( findMinimumX ( a , n ) ) ; } }"],"bleu":0.18410024793404176,"rouge_l":0.41666079853531446}
{"id":1283,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["import java . util . * ; class solution { static void printFirstNegativeInteger ( int arr [ ] , int n , int k ) { boolean flag ; for ( int i = 0 ; i < ( n - k + 1 ) ; i ++ ) { flag = false ; for ( int j = 0 ; j < k ; j ++ ) { if ( arr [ i + j ] < 0 ) { System . out . print ( ( arr [ i + j ] ) + \" ▁ \" ) ; flag = true ; break ; } } if ( ! flag ) System . out . print ( \"0\" + \" ▁ \" ) ; } } public static void main ( String args [ ] ) { int arr [ ] = { 12 , - 1 , - 7 , 8 , - 15 , 30 , 16 , 28 } ; int n = arr . length ; int k = 3 ; printFirstNegativeInteger ( arr , n , k ) ; } }"],"bleu":0.3165030104248412,"rouge_l":0.5559584476675813}
{"id":1284,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["class GfG { static void printArray ( int arr [ ] , int size ) { for ( int i = 0 ; i < size ; i ++ ) System . out . print ( arr [ i ] + \" ▁ \" ) ; System . out . println ( ) ; return ; } static void printSequencesRecur ( int arr [ ] , int n , int k , int index ) { int i ; if ( k == 0 ) { printArray ( arr , index ) ; } if ( k > 0 ) { for ( i = 1 ; i <= n ; ++ i ) { arr [ index ] = i ; printSequencesRecur ( arr , n , k - 1 , index + 1 ) ; } } } static void printSequences ( int n , int k ) { int arr [ ] = new int [ k ] ; printSequencesRecur ( arr , n , k , 0 ) ; return ; } public static void main ( String [ ] args ) { int n = 3 ; int k = 2 ; printSequences ( n , k ) ; } }"],"bleu":0.3127767793813693,"rouge_l":0.4818924196698029}
{"id":1285,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; String str [ ] = br . readLine ( ) . split ( \" \" ) ; int n = Integer . parseInt ( str [ 0 ] ) ; int m = Integer . parseInt ( str [ 1 ] ) ; String [ ] str = br . readLine ( ) . split ( \" \" ) ; int k = Integer . parseInt ( str [ 0 ] ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( str [ i ] . equals ( str [ j ] ) ) { count ++ ; } } } System . out . println ( count ) ; } }"],"references":["public class GFG { static final int no_of_chars = 256 ; static String findSubString ( String str , String pat ) { int len1 = str . length ( ) ; int len2 = pat . length ( ) ; if ( len1 < len2 ) { System . out . println ( \" No ▁ such ▁ window ▁ exists \" ) ; return \" \" ; } int hash_pat [ ] = new int [ no_of_chars ] ; int hash_str [ ] = new int [ no_of_chars ] ; for ( int i = 0 ; i < len2 ; i ++ ) hash_pat [ pat . charAt ( i ) ] ++ ; int start = 0 , start_index = - 1 , min_len = Integer . MAX_VALUE ; int count = 0 ; for ( int j = 0 ; j < len1 ; j ++ ) { hash_str [ str . charAt ( j ) ] ++ ; if ( hash_pat [ str . charAt ( j ) ] != 0 && hash_str [ str . charAt ( j ) ] <= hash_pat [ str . charAt ( j ) ] ) count ++ ; if ( count == len2 ) { while ( hash_str [ str . charAt ( start ) ] > hash_pat [ str . charAt ( start ) ] || hash_pat [ str . charAt ( start ) ] == 0 ) { if ( hash_str [ str . charAt ( start ) ] > hash_pat [ str . charAt ( start ) ] ) hash_str [ str . charAt ( start ) ] -- ; start ++ ; } int len_window = j - start + 1 ; if ( min_len > len_window ) { min_len = len_window ; start_index = start ; } } } if ( start_index == - 1 ) { System . out . println ( \" No ▁ such ▁ window ▁ exists \" ) ; return \" \" ; } return str . substring ( start_index , start_index + min_len ) ; } public static void main ( String [ ] args ) { String str = \" this ▁ is ▁ a ▁ test ▁ string \" ; String pat = \" tist \" ; System . out . print ( \" Smallest ▁ window ▁ is ▁ : \\n ▁ \" + findSubString ( str , pat ) ) ; } }"],"bleu":0.11485461006943479,"rouge_l":0.29189606380241834}
{"id":1286,"predictions":["import java . io . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["class ProductArray { void productArray ( int arr [ ] , int n ) { if ( n == 1 ) { System . out . print ( \"0\" ) ; return ; } int i , temp = 1 ; int prod [ ] = new int [ n ] ; for ( int j = 0 ; j < n ; j ++ ) prod [ j ] = 1 ; for ( i = 0 ; i < n ; i ++ ) { prod [ i ] = temp ; temp *= arr [ i ] ; } temp = 1 ; for ( i = n - 1 ; i >= 0 ; i -- ) { prod [ i ] *= temp ; temp *= arr [ i ] ; } for ( i = 0 ; i < n ; i ++ ) System . out . print ( prod [ i ] + \" ▁ \" ) ; return ; } public static void main ( String [ ] args ) { ProductArray pa = new ProductArray ( ) ; int arr [ ] = { 10 , 3 , 5 , 6 , 2 } ; int n = arr . length ; System . out . println ( \" The ▁ product ▁ array ▁ is ▁ : ▁ \" ) ; pa . productArray ( arr , n ) ; } }"],"bleu":0.268020484106689,"rouge_l":0.5094796625741251}
{"id":1287,"predictions":["import java . io . * ; import java . util . * ; import java . lang . * ; class GFG { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans += a [ i ] ; } System . out . println ( ans ) ; } }"],"references":["import java . util . Arrays ; class GFG { static int NoofTriplets ( int N , int K ) { int [ ] cnt = new int [ K ] ; Arrays . fill ( cnt , 0 , cnt . length , 0 ) ; for ( int i = 1 ; i <= N ; i += 1 ) { cnt [ i % K ] += 1 ; } if ( ( K & 1 ) != 0 ) { return cnt [ 0 ] * cnt [ 0 ] * cnt [ 0 ] ; } else { return ( cnt [ 0 ] * cnt [ 0 ] * cnt [ 0 ] + cnt [ K \/ 2 ] * cnt [ K \/ 2 ] * cnt [ K \/ 2 ] ) ; } } public static void main ( String [ ] args ) { int N = 3 , K = 2 ; System . out . println ( NoofTriplets ( N , K ) ) ; } }"],"bleu":0.20971882391862284,"rouge_l":0.34928425357873205}
{"id":1288,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int maxSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 4 , 3 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 ,"],"references":["class GFG { static void command ( boolean arr [ ] , int a , int b ) { arr [ a ] ^= true ; arr [ b + 1 ] ^= true ; } static void process ( boolean arr [ ] , int n ) { for ( int k = 1 ; k <= n ; k ++ ) { arr [ k ] ^= arr [ k - 1 ] ; } } static void result ( boolean arr [ ] , int n ) { for ( int k = 1 ; k <= n ; k ++ ) { if ( arr [ k ] == true ) System . out . print ( \"1\" + \" ▁ \" ) ; else System . out . print ( \"0\" + \" ▁ \" ) ; } } public static void main ( String args [ ] ) { int n = 5 , m = 3 ; boolean arr [ ] = new boolean [ n + 2 ] ; command ( arr , 1 , 5 ) ; command ( arr , 2 , 5 ) ; command ( arr , 3 , 5 ) ; process ( arr , n ) ; result ( arr , n ) ; } }"],"bleu":0.059319030583333876,"rouge_l":0.17390022118456624}
{"id":1289,"predictions":["import java . io . * ; class GFG { static int countPairs ( int n ) { int count = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( n % i == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( countPairs ( n ) ) ; } }"],"references":["class GFG { static int countSetBits ( int n ) { int count = 0 ; while ( n > 0 ) { n &= ( n - 1 ) ; count ++ ; } return count ; } static int countSetBitsInGivenRange ( int n , int l , int r ) { int num = ( ( 1 << r ) - 1 ) ^ ( ( 1 << ( l - 1 ) ) - 1 ) ; return countSetBits ( n & num ) ; } public static void main ( String [ ] args ) { int n = 42 ; int l = 2 , r = 5 ; System . out . print ( countSetBitsInGivenRange ( n , l , r ) ) ; } }"],"bleu":0.2985081739238902,"rouge_l":0.5074430823117337}
{"id":1290,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isDivisible ( int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( n % i == 0 ) { sum += n \/ i ; } else { sum += n \/ i ; } } return sum ; } public static void main ( String [ ] args ) { int n = 10 ; if ( isDivisible ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . io . * ; class GFG { static long dig ( long a ) { long count = 0 ; while ( a > 0 ) { a \/= 10 ; count ++ ; } return count ; } static void required_number ( long num , long n , long d ) { long i , j , power = 1 , a , flag = 0 ; for ( i = num ; i >= 1 ; i -- ) { power = ( long ) Math . pow ( 10 , i ) ; a = n % power ; if ( d > a ) { flag = 1 ; break ; } } if ( flag > 0 ) { long t = 0 ; for ( j = 0 ; j < i ; j ++ ) { t += 9 * Math . pow ( 10 , j ) ; } if ( n % power == t ) System . out . print ( n ) ; else { System . out . print ( n - ( n % power ) - 1 ) ; } } else System . out . print ( n ) ; } public static void main ( String [ ] args ) { long n = 1029 , d = 102 ; long num = dig ( n ) ; required_number ( num , n , d ) ; } }"],"bleu":0.15381200179610863,"rouge_l":0.3506623344163959}
{"id":1291,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["class GFG { static int CountZeroBit ( int n ) { int count = 0 ; while ( n > 0 ) { if ( ( n & 1 ) != 0 ) count ++ ; n >>= 1 ; } return count ; } static int CountORandSumEqual ( int N ) { int count = CountZeroBit ( N ) ; return ( 1 << count ) ; } public static void main ( String [ ] args ) { int N = 10 ; System . out . print ( CountORandSumEqual ( N ) ) ; } }"],"bleu":0.34016116564687876,"rouge_l":0.560764846479132}
{"id":1292,"predictions":["import java . io . * ; class GFG { static boolean isPower ( int a , int b ) { if ( a < b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; return false ; return false ; } public static void main ( String [ ] args ) { int a = 2 , b = 3 , c = 3 ; if ( isPower ( a , b , c ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . io . * ; class GFG { static boolean checkConcurrent ( int a1 , int b1 , int c1 , int a2 , int b2 , int c2 , int a3 , int b3 , int c3 ) { return ( a3 * ( b1 * c2 - b2 * c1 ) + b3 * ( c1 * a2 - c2 * a1 ) + c3 * ( a1 * b2 - a2 * b1 ) == 0 ) ; } public static void main ( String [ ] args ) { int a1 = 2 , b1 = - 3 , c1 = 5 ; int a2 = 3 , b2 = 4 , c2 = - 7 ; int a3 = 9 , b3 = - 5 , c3 = 8 ; if ( checkConcurrent ( a1 , b1 , c1 , a2 , b2 , c2 , a3 , b3 , c3 ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.31577753803992337,"rouge_l":0.45953146531924677}
{"id":1293,"predictions":["import java . io . * ; class GFG { static boolean isPowerOfTwo ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) if ( arr [ i ] == arr [ j ] ) return false ; return true ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; if ( isPowerOfTwo ( arr , n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; class GFG { static String winner ( String moves ) { HashMap < Character , Integer > data = new HashMap < Character , Integer > ( ) ; data . put ( ' R ' , 0 ) ; data . put ( ' P ' , 1 ) ; data . put ( ' S ' , 2 ) ; if ( moves . charAt ( 0 ) == moves . charAt ( 1 ) ) { return \" Draw \" ; } if ( ( ( data . get ( moves . charAt ( 0 ) ) | 1 << ( 2 ) ) - ( data . get ( moves . charAt ( 1 ) ) | 0 << ( 2 ) ) ) % 3 != 0 ) { return \" A \" ; } return \" B \" ; } static void performQueries ( String arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) System . out . print ( winner ( arr [ i ] ) + \" \\n \" ) ; } public static void main ( String [ ] args ) { String arr [ ] = { \" RS \" , \" SR \" , \" SP \" , \" PP \" } ; int n = arr . length ; performQueries ( arr , n ) ; } }"],"bleu":0.24833812445057596,"rouge_l":0.37390962671905703}
{"id":1294,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int count ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ i ] > arr [ j ] ) { count ++ ; } } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( count ( arr , n ) ) ; } }"],"references":["import java . util . HashSet ; class GFG1 { static int MAX = 100000 ; static long catalan [ ] = new long [ MAX ] ; static void catalanDP ( long n ) { catalan [ 0 ] = catalan [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) { catalan [ i ] = 0 ; for ( int j = 0 ; j < i ; j ++ ) { catalan [ i ] += catalan [ j ] * catalan [ i - j - 1 ] ; } } } static int CatalanSequence ( int arr [ ] , int n ) { catalanDP ( n ) ; HashSet < Integer > s = new HashSet < Integer > ( ) ; int a = 1 , b = 1 ; int c ; s . add ( a ) ; if ( n >= 2 ) { s . add ( b ) ; } for ( int i = 2 ; i < n ; i ++ ) { s . add ( ( int ) catalan [ i ] ) ; } for ( int i = 0 ; i < n ; i ++ ) { if ( s . contains ( arr [ i ] ) ) { s . remove ( arr [ i ] ) ; } } return s . size ( ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 2 , 5 , 41 } ; int n = arr . length ; System . out . print ( CatalanSequence ( arr , n ) ) ; } }"],"bleu":0.22015098426237065,"rouge_l":0.4672376575447392}
{"id":1295,"predictions":["import java . util . * ; class GFG { static boolean isVowel ( String s ) { for ( int i = 0 ; i < s . length ( ) ; i ++ ) { for ( int j = 0 ; j < s . length ( ) ; j ++ ) { if ( s . charAt ( i ) == s . charAt ( j ) ) return false ; } } return true ; } public static void main ( String [ ] args ) { String s = \" geeksforgeeksforgeeks \" ; if ( isVowel ( s ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; class GFG { static void removeAnagrams ( String arr [ ] , int N ) { Vector < String > ans = new Vector < String > ( ) ; HashSet < String > found = new HashSet < String > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { String word = arr [ i ] ; word = sort ( word ) ; if ( ! found . contains ( word ) ) { ans . add ( arr [ i ] ) ; found . add ( word ) ; } } Collections . sort ( ans ) ; for ( int i = 0 ; i < ans . size ( ) ; ++ i ) { System . out . print ( ans . get ( i ) + \" ▁ \" ) ; } } static String sort ( String inputString ) { char tempArray [ ] = inputString . toCharArray ( ) ; Arrays . sort ( tempArray ) ; return new String ( tempArray ) ; } public static void main ( String [ ] args ) { String arr [ ] = { \" geeks \" , \" keegs \" , \" code \" , \" doce \" } ; int N = 4 ; removeAnagrams ( arr , N ) ; } }"],"bleu":0.18165316969665807,"rouge_l":0.4056738782725819}
{"id":1296,"predictions":["import java . io . * ; class GFG { static int countPairs ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 1 , 1 , 1 } ; int n = arr . length ; System . out . println ( countPairs ( arr , n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int findMaximumNum ( int arr [ ] , int n ) { for ( int i = n ; i >= 1 ; i -- ) { int count = 0 ; for ( int j = 0 ; j < n ; j ++ ) if ( i <= arr [ j ] ) count ++ ; if ( count >= i ) return i ; } return 1 ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 8 , 10 } ; int n = arr . length ; System . out . println ( findMaximumNum ( arr , n ) ) ; } }"],"bleu":0.60085407609948,"rouge_l":0.7735651719178978}
{"id":1297,"predictions":["import java . io . * ; class GFG { static int countPairs ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( countPairs ( arr , n ) ) ; } }"],"references":["class solution { static void printSubArrays ( int [ ] arr , int start , int end ) { if ( end == arr . length ) return ; else if ( start > end ) printSubArrays ( arr , 0 , end + 1 ) ; else { System . out . print ( \" [ \" ) ; for ( int i = start ; i < end ; i ++ ) { System . out . print ( arr [ i ] + \" , ▁ \" ) ; } System . out . println ( arr [ end ] + \" ] \" ) ; printSubArrays ( arr , start + 1 , end ) ; } return ; } public static void main ( String args [ ] ) { int [ ] arr = { 1 , 2 , 3 } ; printSubArrays ( arr , 0 , 0 ) ; } }"],"bleu":0.27238062900901006,"rouge_l":0.4709322727804421}
{"id":1298,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 3 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; class GFG { static int setBit ( int xorValue ) { int count = 0 ; while ( xorValue >= 1 ) { if ( xorValue % 2 == 1 ) count ++ ; xorValue \/= 2 ; } return count ; } static int minFlip ( int n , int k ) { int size = ( int ) ( Math . log ( n ) \/ Math . log ( 2 ) ) + 1 ; int max = ( int ) Math . pow ( 2 , k ) - 1 ; max = max << ( size - k ) ; int xorValue = ( n ^ max ) ; return ( setBit ( xorValue ) ) ; } public static void main ( String [ ] args ) { int n = 27 , k = 3 ; System . out . println ( \" Min ▁ Flips ▁ = ▁ \" + minFlip ( n , k ) ) ; } }"],"bleu":0.25512580281455494,"rouge_l":0.4502050113895216}
{"id":1299,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i ) ) out . print ( s . charAt ( i ) ) ; else out . print ( s . charAt ( i ) ) ; } out . println ( ) ; out . close ( ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . io . * ; import java . util . * ; import java . lang . * ; class GFG { static boolean isVowel ( char x ) { if ( x == ' a ' || x == ' e ' || x == ' i ' || x == ' o ' || x == ' u ' ) return true ; else return false ; } static String updateSandwichedVowels ( String a ) { int n = a . length ( ) ; String updatedString = \" \" ; for ( int i = 0 ; i < n ; i ++ ) { if ( i == 0 || i == n - 1 ) { updatedString += a . charAt ( i ) ; continue ; } if ( isVowel ( a . charAt ( i ) ) == true && isVowel ( a . charAt ( i - 1 ) ) == false && isVowel ( a . charAt ( i + 1 ) ) == false ) { continue ; } updatedString += a . charAt ( i ) ; } return updatedString ; } public static void main ( String [ ] args ) { String str = \" geeksforgeeks \" ; String updatedString = updateSandwichedVowels ( str ) ; System . out . print ( updatedString ) ; } }"],"bleu":0.26305650623414994,"rouge_l":0.4216763362547834}
{"id":1300,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int count ( int a [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( a [ i ] > a [ j ] ) { count ++ ; } } } return count ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = a . length ; System . out . println ( count ( a , n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int totalWays ( int N , int M , int X ) { int dp [ ] [ ] = new int [ N + 1 ] [ 2 ] ; if ( X == 1 ) { dp [ 0 ] [ 0 ] = 1 ; } else { dp [ 0 ] [ 1 ] = 0 ; } if ( X == 1 ) { dp [ 1 ] [ 0 ] = 0 ; dp [ 1 ] [ 1 ] = M - 1 ; } else { dp [ 1 ] [ 0 ] = 1 ; dp [ 1 ] [ 1 ] = ( M - 2 ) ; } for ( int i = 2 ; i < N ; i ++ ) { dp [ i ] [ 0 ] = dp [ i - 1 ] [ 1 ] ; dp [ i ] [ 1 ] = dp [ i - 1 ] [ 0 ] * ( M - 1 ) + dp [ i - 1 ] [ 1 ] * ( M - 2 ) ; } return dp [ N - 1 ] [ 0 ] ; } public static void main ( String [ ] args ) { int N = 4 , M = 3 , X = 2 ; System . out . println ( totalWays ( N , M , X ) ) ; } }"],"bleu":0.16820438272018187,"rouge_l":0.3871346862023035}
{"id":1301,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int maxSum ( int a [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += a [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 } ; int n = a . length ; System . out . println ( maxSum ( a , n ) ) ; } }"],"references":["import java . util . Arrays ; class GFG { static int findMinimal ( int [ ] a , int n ) { Arrays . sort ( a ) ; int sum = 0 ; for ( int i = 0 ; i < n \/ 2 ; i ++ ) sum += ( a [ i ] + a [ n - i - 1 ] ) * ( a [ i ] + a [ n - i - 1 ] ) ; return sum ; } public static void main ( String str [ ] ) { int [ ] a = { 8 , 5 , 2 , 3 } ; int n = a . length ; System . out . println ( findMinimal ( a , n ) ) ; } }"],"bleu":0.5038553331861152,"rouge_l":0.718738122386925}
{"id":1302,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int n = Integer . parseInt ( br . readLine ( ) ) ; String s = br . readLine ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == '0' ) count ++ ; } System . out . println ( count ) ; } }"],"references":["class GFG { static int minOperations ( String str , int n ) { int count = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( str . charAt ( i ) != str . charAt ( i + 1 ) ) count ++ ; } return ( count + 1 ) \/ 2 ; } public static void main ( String [ ] args ) { String str = \"000111\" ; int n = str . length ( ) ; System . out . println ( minOperations ( str , n ) ) ; } }"],"bleu":0.4304591452779623,"rouge_l":0.4485953816737756}
{"id":1303,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int n = Integer . parseInt ( br . readLine ( ) ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = Integer . parseInt ( br . readLine ( ) ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % 2 == 0 ) { count ++ ; } } System . out . println ( count ) ; } }"],"references":["class GFG { static int toDecimal ( String binary , int i ) { int n = binary . length ( ) ; if ( i == n - 1 ) return binary . charAt ( i ) - '0' ; return ( ( binary . charAt ( i ) - '0' ) << ( n - i - 1 ) ) + toDecimal ( binary , i + 1 ) ; } public static void main ( String [ ] args ) { String binary = \"1010\" ; int i = 0 ; System . out . println ( toDecimal ( binary , i ) ) ; } }"],"bleu":0.19584978068257652,"rouge_l":0.3492517891997398}
{"id":1304,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; out . println ( n + 1 ) ; for ( int i = 1 ; i <= n ; i ++ ) { out . print ( i + \" \" ) ; } out . close ( ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } public String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } } }"],"references":["class GFG { public static int countPairs ( int n ) { int num = ( ( n \/ 2 ) + 1 ) ; int max = n % num ; int count = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { int val = ( ( n % i ) % j ) % n ; if ( val == max ) count ++ ; } } return count ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( countPairs ( n ) ) ; } }"],"bleu":0.2202278687726668,"rouge_l":0.39950880065493244}
{"id":1305,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; Arrays . sort ( arr ) ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + \" \" ) ; } }"],"references":["import java . util . * ; class GFG { static void createHash ( HashSet < Integer > hash , int maxElement ) { int prev = 0 , curr = 1 ; hash . add ( prev ) ; hash . add ( curr ) ; while ( curr <= maxElement ) { int temp = curr + prev ; hash . add ( temp ) ; prev = curr ; curr = temp ; } } static void fibonacci ( int arr [ ] , int n ) { int max_val = Arrays . stream ( arr ) . max ( ) . getAsInt ( ) ; HashSet < Integer > hash = new HashSet < Integer > ( ) ; createHash ( hash , max_val ) ; int minimum = Integer . MAX_VALUE ; int maximum = Integer . MIN_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( hash . contains ( arr [ i ] ) ) { minimum = Math . min ( minimum , arr [ i ] ) ; maximum = Math . max ( maximum , arr [ i ] ) ; } } System . out . print ( minimum + \" , ▁ \" + maximum + \" \\n \" ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 } ; int n = arr . length ; fibonacci ( arr , n ) ; } }"],"bleu":0.2486544687583613,"rouge_l":0.3773356291052866}
{"id":1306,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) if ( arr [ i ] < arr [ j ] ) return false ; return true ; } static void findPrime ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + \" \" ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; findPrime ( arr , n ) ; } }"],"references":["class GFG { static void printInSortedOrder ( String arr [ ] , int n ) { int index [ ] = new int [ n ] ; int i , j , min ; for ( i = 0 ; i < n ; i ++ ) { index [ i ] = i ; } for ( i = 0 ; i < n - 1 ; i ++ ) { min = i ; for ( j = i + 1 ; j < n ; j ++ ) { if ( arr [ index [ min ] ] . compareTo ( arr [ index [ j ] ] ) > 0 ) { min = j ; } } if ( min != i ) { int temp = index [ min ] ; index [ min ] = index [ i ] ; index [ i ] = temp ; } } for ( i = 0 ; i < n ; i ++ ) { System . out . print ( arr [ index [ i ] ] + \" ▁ \" ) ; } } static public void main ( String [ ] args ) { String arr [ ] = { \" geeks \" , \" quiz \" , \" geeks \" , \" for \" } ; int n = 4 ; printInSortedOrder ( arr , n ) ; } }"],"bleu":0.3190014122378097,"rouge_l":0.5478756638550454}
{"id":1307,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int maxSum ( int a [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += a [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 } ; int n = a . length ; System . out . println ( maxSum ( a , n ) ) ; } }"],"references":["class GfG { static long binomialCoeff ( int n , int k ) { long res = 1 ; if ( k > n - k ) k = n - k ; for ( int i = 0 ; i < k ; ++ i ) { res *= ( n - i ) ; res \/= ( i + 1 ) ; } return res ; } static long countPaths ( int x1 , int y1 , int x2 , int y2 ) { int m = Math . abs ( x1 - x2 ) ; int n = Math . abs ( y1 - y2 ) ; return ( binomialCoeff ( m + n , n ) ) ; } public static void main ( String [ ] args ) { int x1 = 2 , y1 = 3 , x2 = 4 , y2 = 5 ; System . out . println ( countPaths ( x1 , y1 , x2 , y2 ) ) ; } }"],"bleu":0.2417550363866895,"rouge_l":0.4231912784935579}
{"id":1308,"predictions":["import java . io . * ; class GFG { static boolean isPower ( int a , int b ) { if ( a == b ) return true ; if ( a == b ) return true ; if ( a == b ) return false ; if ( a == b ) return false ; return false ; } public static void main ( String [ ] args ) { int a = 2 , b = 3 ; if ( isPower ( a , b ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . io . * ; class GFG { static int findN ( int k ) { int ans ; if ( k == 0 ) ans = 3 ; if ( k == 1 ) ans = 1 ; else if ( k % 4 == 0 ) ans = k ; else if ( k % 4 == 3 ) ans = k - 1 ; else ans = - 1 ; return ans ; } public static void main ( String [ ] args ) { int k = 7 ; int res = findN ( k ) ; if ( res == - 1 ) System . out . println ( \" Not ▁ possible \" ) ; else System . out . println ( res ) ; } }"],"bleu":0.37633129819357847,"rouge_l":0.6072398190045248}
{"id":1309,"predictions":["import java . io . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; return false ; } static boolean isPrime ( int n ) { if ( isPrime ( n ) ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 3 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static void print_asterisk ( int asterisk ) { if ( asterisk == 0 ) return ; System . out . print ( \" * ▁ \" ) ; print_asterisk ( asterisk - 1 ) ; } static void print_space ( int space ) { if ( space == 0 ) return ; System . out . print ( \" ▁ \" ) ; System . out . print ( \" ▁ \" ) ; print_space ( space - 1 ) ; } static void pattern ( int n , int num ) { if ( n == 0 ) return ; print_asterisk ( num - n + 1 ) ; print_space ( 2 * n - 1 ) ; print_asterisk ( num - n + 1 ) ; System . out . println ( ) ; pattern ( n - 1 , num ) ; } public static void main ( String [ ] args ) { int n = 5 ; pattern ( n , n ) ; } }"],"bleu":0.24563921142901426,"rouge_l":0.4015799868334431}
{"id":1310,"predictions":["import java . io . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 3 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . lang . * ; import java . util . * ; class GFG { static int isMultipleOf3 ( int n ) { int odd_count = 0 ; int even_count = 0 ; if ( n < 0 ) n = - n ; if ( n == 0 ) return 1 ; if ( n == 1 ) return 0 ; while ( n != 0 ) { if ( ( n & 1 ) != 0 ) odd_count ++ ; if ( ( n & 2 ) != 0 ) even_count ++ ; n = n >> 2 ; } return isMultipleOf3 ( Math . abs ( odd_count - even_count ) ) ; } public static void main ( String [ ] args ) { int num = 24 ; if ( isMultipleOf3 ( num ) != 0 ) System . out . println ( num + \" ▁ is ▁ multiple ▁ of ▁ 3\" ) ; else System . out . println ( num + \" ▁ is ▁ not ▁ a ▁ multiple ▁ of ▁ 3\" ) ; } }"],"bleu":0.2962681206332891,"rouge_l":0.5759244689221086}
{"id":1311,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int n ) { if ( n == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 3 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static float findNumber ( int N , int S ) { float i = ( ( ( float ) ( N ) * ( float ) ( N + 1 ) ) \/ 4 ) - ( ( float ) ( S + 1 ) \/ 2 ) ; return i ; } static void check ( int N , int S ) { float i = findNumber ( N , S ) ; int integerI = ( int ) i ; if ( i - integerI == 0 ) System . out . println ( \" Yes : ▁ \" + integerI + \" , ▁ \" + ( integerI + 1 ) ) ; else System . out . println ( \" No \" ) ; } public static void main ( String [ ] args ) { int N = 4 , S = 3 ; check ( N , S ) ; N = 5 ; S = 3 ; check ( N , S ) ; } }"],"bleu":0.27269100334007157,"rouge_l":0.36326961867255786}
{"id":1312,"predictions":["import java . util . * ; class GFG { static void findSum ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { System . out . print ( arr [ i ] + \" \" ) ; } System . out . println ( ) ; } } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; findSum ( arr , n ) ; } }"],"references":["class GFG { static void thirdLargest ( int arr [ ] , int arr_size ) { if ( arr_size < 3 ) { System . out . printf ( \" ▁ Invalid ▁ Input ▁ \" ) ; return ; } int first = arr [ 0 ] , second = Integer . MIN_VALUE , third = Integer . MIN_VALUE ; for ( int i = 1 ; i < arr_size ; i ++ ) { if ( arr [ i ] > first ) { third = second ; second = first ; first = arr [ i ] ; } else if ( arr [ i ] > second ) { third = second ; second = arr [ i ] ; } else if ( arr [ i ] > third ) { third = arr [ i ] ; } } System . out . printf ( \" The ▁ third ▁ Largest ▁ element ▁ is ▁ % d \\n \" , third ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 12 , 13 , 1 , 10 , 34 , 16 } ; int n = arr . length ; thirdLargest ( arr , n ) ; } }"],"bleu":0.2597072759322261,"rouge_l":0.4885774096659689}
{"id":1313,"predictions":["import java . io . * ; class GFG { static float area ( float a , float b ) { if ( a < 0 && b < 0 ) return - 1 ; if ( a < 0 ) return - 1 ; return area ; } public static void main ( String [ ] args ) { float a = 5 , b = 5 ; System . out . println ( area ( a , b ) ) ; } }"],"references":["class GFG { static int gcd ( int a , int b ) { if ( a == 0 || b == 0 ) return 0 ; if ( a == b ) return a ; if ( a > b ) return gcd ( a - b , b ) ; return gcd ( a , b - a ) ; } static int squarearea ( int l , int b ) { if ( l < 0 || b < 0 ) return - 1 ; int n = ( l * b ) \/ gcd ( l , b ) ; return n * n ; } public static void main ( String [ ] args ) { int l = 6 , b = 4 ; System . out . println ( squarearea ( l , b ) ) ; } }"],"bleu":0.26303865407604526,"rouge_l":0.512396694214876}
{"id":1314,"predictions":["import java . io . * ; class GFG { static int countPairs ( int n ) { int count = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( n % i == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( countPairs ( n ) ) ; } }"],"references":["class GFG { static int countUnsetBits ( int n ) { int x = n ; n |= n >> 1 ; n |= n >> 2 ; n |= n >> 4 ; n |= n >> 8 ; n |= n >> 16 ; return Integer . bitCount ( x ^ n ) ; } public static void main ( String [ ] args ) { int n = 17 ; System . out . println ( countUnsetBits ( n ) ) ; } }"],"bleu":0.42640982558834156,"rouge_l":0.5829510703363914}
{"id":1315,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( n % i == 0 ) { sum += n \/ i ; } else { sum += n \/ i ; } } return sum ; } public static void main ( String [ ] args ) { int n = 3 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . io . * ; class GFG { static int N = 1000001 ; static int visited [ ] = new int [ N ] ; static int goesTo [ ] = new int [ N ] ; static int dfs ( int i ) { if ( visited [ i ] == 1 ) return 0 ; visited [ i ] = 1 ; int x = dfs ( goesTo [ i ] ) ; return ( x + 1 ) ; } static int noOfTranspositions ( int P [ ] , int n ) { for ( int i = 1 ; i <= n ; i ++ ) visited [ i ] = 0 ; for ( int i = 0 ; i < n ; i ++ ) goesTo [ P [ i ] ] = i + 1 ; int transpositions = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( visited [ i ] == 0 ) { int ans = dfs ( i ) ; transpositions += ans - 1 ; } } return transpositions ; } public static void main ( String [ ] args ) { int permutation [ ] = { 5 , 1 , 4 , 3 , 2 } ; int n = permutation . length ; System . out . println ( noOfTranspositions ( permutation , n ) ) ; } }"],"bleu":0.18750150018384412,"rouge_l":0.40269073284866713}
{"id":1316,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["class GFG { static String getCount ( int N ) { if ( N % 2 == 1 ) return \"0\" ; String result = \"9\" ; for ( int i = 1 ; i <= N \/ 2 - 1 ; i ++ ) result += \"0\" ; return result ; } public static void main ( String [ ] args ) { int N = 4 ; System . out . println ( getCount ( N ) ) ; } }"],"bleu":0.4590887513333418,"rouge_l":0.6773596545342381}
{"id":1317,"predictions":["import java . io . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 10 == 0 ) return false ; for ( int i = 1 ; i <= n ; i ++ ) if ( n % i == 0 ) return false ; return true ; } public static void main ( String [ ] args ) { int n = 10 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . io . * ; class GFG { static boolean isDivisible ( long n ) { while ( n \/ 100 > 0 ) { long d = n % 10 ; n \/= 10 ; n += d * 2 ; } return ( n % 19 == 0 ) ; } public static void main ( String [ ] args ) { long n = 101156 ; if ( isDivisible ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.575725326205266,"rouge_l":0.7387543252595155}
{"id":1318,"predictions":["import java . io . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["class GFG { static void printArr ( int [ ] arr , int k ) { for ( int i = 0 ; i < k ; i ++ ) System . out . print ( arr [ i ] + \" ▁ \" ) ; System . out . print ( \" \\n \" ) ; } static void printSeqUtil ( int n , int k , int len , int [ ] arr ) { if ( len == k ) { printArr ( arr , k ) ; return ; } int i = ( len == 0 ) ? 1 : arr [ len - 1 ] + 1 ; len ++ ; while ( i <= n ) { arr [ len - 1 ] = i ; printSeqUtil ( n , k , len , arr ) ; i ++ ; } len -- ; } static void printSeq ( int n , int k ) { int [ ] arr = new int [ k ] ; int len = 0 ; printSeqUtil ( n , k , len , arr ) ; } static public void main ( String [ ] args ) { int k = 3 , n = 7 ; printSeq ( n , k ) ; } }"],"bleu":0.1821600389254407,"rouge_l":0.3977668602054489}
{"id":1319,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isDivisible ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) return false ; } return true ; } static boolean isDivisible ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ i ] % 2 == 0 ) return false ; } } return true ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = arr . length ; if ( isDivisible ( arr , n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static int MAXN = 1000001 ; static int [ ] spf = new int [ MAXN ] ; static int [ ] hash1 = new int [ MAXN ] ; static void sieve ( ) { spf [ 1 ] = 1 ; for ( int i = 2 ; i < MAXN ; i ++ ) spf [ i ] = i ; for ( int i = 4 ; i < MAXN ; i += 2 ) spf [ i ] = 2 ; for ( int i = 3 ; i * i < MAXN ; i ++ ) { if ( spf [ i ] == i ) { for ( int j = i * i ; j < MAXN ; j += i ) if ( spf [ j ] == j ) spf [ j ] = i ; } } } static void getFactorization ( int x ) { int temp ; while ( x != 1 ) { temp = spf [ x ] ; if ( x % temp == 0 ) { hash1 [ spf [ x ] ] ++ ; x = x \/ spf [ x ] ; } while ( x % temp == 0 ) x = x \/ temp ; } } static boolean check ( int x ) { int temp ; while ( x != 1 ) { temp = spf [ x ] ; if ( x % temp == 0 && hash1 [ temp ] > 1 ) return false ; while ( x % temp == 0 ) x = x \/ temp ; } return true ; } static boolean hasValidNum ( int [ ] arr , int n ) { sieve ( ) ; for ( int i = 0 ; i < n ; i ++ ) getFactorization ( arr [ i ] ) ; for ( int i = 0 ; i < n ; i ++ ) if ( check ( arr [ i ] ) ) return true ; return false ; } public static void main ( String [ ] args ) { int [ ] arr = { 2 , 8 , 4 , 10 , 6 , 7 } ; int n = arr . length ; if ( hasValidNum ( arr , n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.20104609652321884,"rouge_l":0.45377901210077365}
{"id":1320,"predictions":["import java . io . * ; class GFG { static float find_area ( float a , float b ) { if ( a < 0 ) return - 1 ; float d = ( float ) Math . sqrt ( Math . sqrt ( a ) ) ; float d = ( float ) Math . sqrt ( d ) ; return d ; } public static void main ( String [ ] args ) { float a = 5 , b = 5 ; System . out . println ( find_area ( a , b ) ) ; } }"],"references":["import java . io . * ; class GFG { static int __gcd ( int a , int b ) { if ( a == 0 ) return b ; if ( b == 0 ) return a ; if ( a == b ) return a ; if ( a > b ) return __gcd ( a - b , b ) ; return __gcd ( a , b - a ) ; } static void printRatio ( int a , int b , int c , int d ) { if ( b * c > a * d ) { int temp = c ; c = d ; d = c ; temp = a ; a = b ; b = temp ; } int lcm = ( a * c ) \/ __gcd ( a , c ) ; int x = lcm \/ a ; b *= x ; int y = lcm \/ c ; d *= y ; int k = __gcd ( b , d ) ; b \/= k ; d \/= k ; System . out . print ( b + \" : \" + d ) ; } public static void main ( String [ ] args ) { int a = 4 , b = 3 , c = 2 , d = 2 ; printRatio ( a , b , c , d ) ; } }"],"bleu":0.1129174482620501,"rouge_l":0.36831823832356597}
{"id":1321,"predictions":["import java . io . * ; import java . util . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) throws java . lang . Exception { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int N = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ M ] ; for ( int i = 0 ; i < M ; i ++ ) { st = new StringTokenizer ( br . readLine ( ) ) ; a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int [ ] b = new int [ M ] ; for ( int i = 0 ; i < M ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < M ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < M ; i ++ ) { for ( int j = 0 ; j < M ; j ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { if ( a [ k ] == a [ k ] ) { b [ k ] ++ ; } } } } } } } System . out . println ( \" Case # \" + i + \" : \" + b ) ; } }"],"references":["class GFG { static int SieveOfAtkin ( int limit ) { if ( limit > 2 ) System . out . print ( 2 + \" ▁ \" ) ; if ( limit > 3 ) System . out . print ( 3 + \" ▁ \" ) ; boolean sieve [ ] = new boolean [ limit ] ; for ( int i = 0 ; i < limit ; i ++ ) sieve [ i ] = false ; for ( int x = 1 ; x * x < limit ; x ++ ) { for ( int y = 1 ; y * y < limit ; y ++ ) { int n = ( 4 * x * x ) + ( y * y ) ; if ( n <= limit && ( n % 12 == 1 || n % 12 == 5 ) ) sieve [ n ] ^= true ; n = ( 3 * x * x ) + ( y * y ) ; if ( n <= limit && n % 12 == 7 ) sieve [ n ] ^= true ; n = ( 3 * x * x ) - ( y * y ) ; if ( x > y && n <= limit && n % 12 == 11 ) sieve [ n ] ^= true ; } } for ( int r = 5 ; r * r < limit ; r ++ ) { if ( sieve [ r ] ) { for ( int i = r * r ; i < limit ; i += r * r ) sieve [ i ] = false ; } } for ( int a = 5 ; a < limit ; a ++ ) if ( sieve [ a ] ) System . out . print ( a + \" ▁ \" ) ; return 0 ; } public static void main ( String [ ] args ) { int limit = 20 ; SieveOfAtkin ( limit ) ; } }"],"bleu":0.17988132629779716,"rouge_l":0.3445422303953763}
{"id":1322,"predictions":["import java . io . * ; import java . util . * ; import java . lang . * ; import java . math . * ; import java . text . * ; import java . lang . * ; import java . lang . * ; import java . lang . * ; import java . lang . * ; class GFG { public static void main ( String [ ] args ) { int N = 5 ; System . out . println ( N ) ; } }"],"references":["import java . lang . Math ; import java . io . * ; class GFG { static double calculateSide ( double n , double r ) { double theta , theta_in_radians ; theta = 360 \/ n ; theta_in_radians = theta * 3.14 \/ 180 ; return 2 * r * Math . sin ( theta_in_radians \/ 2 ) ; } public static void main ( String [ ] args ) { double n = 3 ; double r = 5 ; System . out . println ( calculateSide ( n , r ) ) ; } }"],"bleu":0.35178140768430444,"rouge_l":0.445406690439803}
{"id":1323,"predictions":["import java . io . * ; class GFG { static int maxSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }"],"references":["import java . io . * ; public class GFG { static int findSum ( int n ) { int [ ] [ ] arr = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) arr [ i ] [ j ] = Math . abs ( i - j ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) sum += arr [ i ] [ j ] ; return sum ; } static public void main ( String [ ] args ) { int n = 3 ; System . out . println ( findSum ( n ) ) ; } }"],"bleu":0.3586329458495134,"rouge_l":0.5657672849915683}
{"id":1324,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int sum ( int a [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += a [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 } ; int n = a . length ; System . out . println ( sum ( a , n ) ) ; } }"],"references":["import java . util . Vector ; class GFG { static class Pair { private int first ; private int second ; Pair ( int first , int second ) { this . first = first ; this . second = second ; } public int getFirst ( ) { return first ; } public int getSecond ( ) { return second ; } } static int solve ( int [ ] Array , int N , int K ) { int [ ] count_Arr = new int [ N + 2 ] ; int factor = 1 ; int size = N ; while ( size > 0 ) { int start = 1 ; int end = size ; count_Arr [ 1 ] += factor * N ; count_Arr [ end + 1 ] -= factor * N ; factor ++ ; size \/= 2 ; } for ( int i = 2 ; i <= N ; i ++ ) count_Arr [ i ] += count_Arr [ i - 1 ] ; Vector < Pair > element = new Vector < > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { Pair x = new Pair ( Array [ i ] , count_Arr [ i + 1 ] ) ; element . add ( x ) ; } int start = 1 ; for ( int i = 0 ; i < N ; i ++ ) { int end = start + element . elementAt ( 0 ) . getSecond ( ) - 1 ; if ( K >= start && K <= end ) return element . elementAt ( i ) . getFirst ( ) ; start += element . elementAt ( i ) . getSecond ( ) ; } return - 1 ; } public static void main ( String [ ] args ) { int [ ] arr = { 2 , 4 , 5 , 1 } ; int N = arr . length ; int K = 13 ; System . out . println ( solve ( arr , N , K ) ) ; } }"],"bleu":0.05588504888696761,"rouge_l":0.3227513227513228}
{"id":1325,"predictions":["import java . io . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 12 ; if ( isPrime ( n ) ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ; } }"],"references":["import java . util . Scanner ; class PatternA { void display ( int n ) { for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j <= n \/ 2 ; j ++ ) { if ( ( j == 0 || j == n \/ 2 ) && i != 0 || i == 0 && j != 0 && j != n \/ 2 || i == n \/ 2 ) System . out . print ( \" * \" ) ; else System . out . print ( \" ▁ \" ) ; } System . out . println ( ) ; } } public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; PatternA a = new PatternA ( ) ; a . display ( 7 ) ; } }"],"bleu":0.24581985598415548,"rouge_l":0.39098647971957934}
{"id":1326,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int maxSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }"],"references":["class GFG { static int maxSum ( int arr1 [ ] , int arr2 [ ] , int n ) { int initialParity = 0 , finalParity = 0 ; int sum = 0 , minPositive = Integer . MAX_VALUE , maxNegative = Integer . MIN_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { initialParity += arr2 [ i ] ; if ( arr1 [ i ] >= 0 ) { finalParity += 1 ; sum += arr1 [ i ] ; minPositive = Math . min ( minPositive , arr1 [ i ] ) ; } else { maxNegative = Math . max ( maxNegative , arr1 [ i ] ) ; } } if ( initialParity % 2 == finalParity % 2 ) { return sum ; } else { if ( minPositive + maxNegative >= 0 ) { return sum + maxNegative ; } else { return sum - minPositive ; } } } public static void main ( String [ ] args ) { int arr1 [ ] = { 2 , - 4 , 5 , 3 } ; int arr2 [ ] = { 0 , 1 , 0 , 1 } ; int n = arr1 . length ; System . out . println ( maxSum ( arr1 , arr2 , n ) ) ; } }"],"bleu":0.27575823415681966,"rouge_l":0.521278413946334}
{"id":1327,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) System . out . println ( isPrime ( n \/ 2 ) ) ; } public static void main ( String [ ] args ) { int n = 3 ; if ( isPrime ( n ) ) System . out . println ( isPrime ( n ) ) ; } }"],"references":["import java . util . * ; class GFG { public static void printTaxicab2 ( int N ) { int i = 1 , count = 0 ; while ( count < N ) { int int_count = 0 ; for ( int j = 1 ; j <= Math . pow ( i , 1.0 \/ 3 ) ; j ++ ) for ( int k = j + 1 ; k <= Math . pow ( i , 1.0 \/ 3 ) ; k ++ ) if ( j * j * j + k * k * k == i ) int_count ++ ; if ( int_count == 2 ) { count ++ ; System . out . println ( count + \" ▁ \" + i ) ; } i ++ ; } } public static void main ( String [ ] args ) { int N = 5 ; printTaxicab2 ( N ) ; } }"],"bleu":0.08448216338972181,"rouge_l":0.2626637162849112}
{"id":1328,"predictions":["import java . io . * ; import java . util . * ; class GFG { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { System . out . print ( a [ i ] + \" \" ) ; } System . out . println ( ) ; } } }"],"references":["class Test { static void findIndex ( int a [ ] , int n , int key ) { int start = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == key ) { start = i ; break ; } } if ( start == - 1 ) { System . out . println ( \" Key ▁ not ▁ present ▁ in ▁ array \" ) ; return ; } int end = start ; for ( int i = n - 1 ; i >= start ; i -- ) { if ( a [ i ] == key ) { end = i ; break ; } } if ( start == end ) System . out . println ( \" Only ▁ one ▁ key ▁ is ▁ present ▁ at ▁ index ▁ : ▁ \" + start ) ; else { System . out . println ( \" Start ▁ index : ▁ \" + start ) ; System . out . println ( \" Last ▁ index : ▁ \" + end ) ; } } public static void main ( String args [ ] ) { int a [ ] = { 1 , 2 , 7 , 8 , 8 , 9 , 8 , 0 , 0 , 0 , 8 } ; int key = 8 ; findIndex ( a , a . length , key ) ; } }"],"bleu":0.175286731919299,"rouge_l":0.35567130529425484}
{"id":1329,"predictions":["import java . io . * ; import java . util . * ; class GFG { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; System . out . println ( Math . min ( d , d ) ) ; } static int min ( int a , int b ) { return Math . min ( a , b ) ; } static int min ( int a , int b ) { return Math . min ( a , b ) ; } }"],"references":["import java . util . * ; class GFG { static int ans = 0 ; static Vector < Vector < Integer > > gr = new Vector < Vector < Integer > > ( ) ; static void Add_Edge ( int u , int v ) { gr . get ( u ) . add ( v ) ; gr . get ( v ) . add ( u ) ; } static void dfs ( int child , int par , int color [ ] ) { if ( color [ child ] != color [ par ] ) ans ++ ; for ( int i = 0 ; i < gr . get ( child ) . size ( ) ; i ++ ) { if ( gr . get ( child ) . get ( i ) == par ) continue ; dfs ( gr . get ( child ) . get ( i ) , child , color ) ; } } public static void main ( String args [ ] ) { for ( int i = 0 ; i <= 10 ; i ++ ) gr . add ( new Vector < Integer > ( ) ) ; int color [ ] = { 0 , 1 , 2 , 3 , 2 , 2 , 3 } ; Add_Edge ( 1 , 2 ) ; Add_Edge ( 1 , 3 ) ; Add_Edge ( 2 , 4 ) ; Add_Edge ( 2 , 5 ) ; Add_Edge ( 3 , 6 ) ; dfs ( 1 , 0 , color ) ; System . out . println ( ans ) ; } }"],"bleu":0.12827233315362704,"rouge_l":0.3210303995568174}
{"id":1330,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int count ( int a [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % 2 == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = a . length ; System . out . println ( count ( a , n ) ) ; } }"],"references":["class GFG { static int longestFibonacciSubarray ( int n , int a [ ] ) { if ( n <= 2 ) return n ; int len = 2 ; int mx = Integer . MIN_VALUE ; for ( int i = 2 ; i < n ; i ++ ) { if ( a [ i ] == a [ i - 1 ] + a [ i - 2 ] ) len ++ ; else len = 2 ; mx = Math . max ( mx , len ) ; } return mx ; } public static void main ( String [ ] args ) { int n = 5 ; int a [ ] = { 2 , 4 , 6 , 10 , 2 } ; System . out . println ( longestFibonacciSubarray ( n , a ) ) ; } }"],"bleu":0.40150346673443565,"rouge_l":0.5836967054263567}
{"id":1331,"predictions":["import java . io . * ; import java . util . * ; import java . lang . * ; class GFG { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( a [ i ] > b [ j ] ) { System . out . println ( i + 1 ) ; return ; } } } System . out . println ( - 1 ) ; } }"],"references":["import java . util . * ; class GFG { public static void ancestorMatrix ( Node root , int matrix [ ] [ ] , int size ) { if ( root == null ) return ; ancestorMatrix ( root . left , matrix , size ) ; ancestorMatrix ( root . right , matrix , size ) ; if ( root . left != null ) { matrix [ root . data ] [ root . left . data ] = 1 ; for ( int i = 0 ; i < size ; i ++ ) { if ( matrix [ root . left . data ] [ i ] == 1 ) matrix [ root . data ] [ i ] = 1 ; } } if ( root . right != null ) { matrix [ root . data ] [ root . right . data ] = 1 ; for ( int i = 0 ; i < size ; i ++ ) { if ( matrix [ root . right . data ] [ i ] == 1 ) matrix [ root . data ] [ i ] = 1 ; } } } public static void main ( String [ ] args ) { Node tree_root = new Node ( 5 ) ; tree_root . left = new Node ( 1 ) ; tree_root . right = new Node ( 2 ) ; tree_root . left . left = new Node ( 0 ) ; tree_root . left . right = new Node ( 4 ) ; tree_root . right . left = new Node ( 3 ) ; int size = 6 ; int matrix [ ] [ ] = new int [ size ] [ size ] ; ancestorMatrix ( tree_root , matrix , size ) ; for ( int i = 0 ; i < size ; i ++ ) { for ( int j = 0 ; j < size ; j ++ ) { System . out . print ( matrix [ i ] [ j ] + \" ▁ \" ) ; } System . out . println ( ) ; } } static class Node { public int data ; public Node left , right ; public Node ( int data ) { this . data = data ; this . left = this . right = null ; } } }"],"bleu":0.19392304459957163,"rouge_l":0.39703040781043425}
{"id":1332,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int OddDivCount ( int a , int b ) { int res = 0 ; for ( int i = a ; i <= b ; ++ i ) { int divCount = 0 ; for ( int j = 1 ; j <= i ; ++ j ) { if ( i % j == 0 ) { ++ divCount ; } } if ( ( divCount % 2 ) != 0 ) { ++ res ; } } return res ; } public static void main ( String [ ] args ) { int a = 1 , b = 10 ; System . out . println ( OddDivCount ( a , b ) ) ; } }"],"bleu":0.41977288454534334,"rouge_l":0.6306766130087685}
{"id":1333,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isDivisible ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = arr . length ; if ( isDivisible ( arr , n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . io . * ; class GFG { static void findNDigitNumsUtil ( int n , int sum , char out [ ] , int index ) { if ( index > n || sum < 0 ) return ; if ( index == n ) { if ( sum == 0 ) { out [ index ] = '';  System . out . print ( out ) ; System . out . print ( \" ▁ \" ) ; } return ; } for ( int i = 0 ; i <= 9 ; i ++ ) { out [ index ] = ( char ) ( i + '0' ) ; findNDigitNumsUtil ( n , sum - i , out , index + 1 ) ; } } static void findNDigitNums ( int n , int sum ) { char [ ] out = new char [ n + 1 ] ; for ( int i = 1 ; i <= 9 ; i ++ ) { out [ 0 ] = ( char ) ( i + '0' ) ; findNDigitNumsUtil ( n , sum - i , out , 1 ) ; } } public static void main ( String [ ] args ) { int n = 2 , sum = 3 ; findNDigitNums ( n , sum ) ; } }"],"bleu":0.2464837110493498,"rouge_l":0.4017842254460564}
{"id":1334,"predictions":["import java . io . * ; import java . util . * ; class GFG { public static void main ( String [ ] args ) { int a = 3 , b = 5 , c = 5 ; System . out . println ( Math . min ( a , b ) ) ; } }"],"references":["import java . util . * ; class GFG { static int minimumIncrease ( int a , int b , int c ) { int arr [ ] = { a , b , c } ; Arrays . sort ( arr ) ; if ( arr [ 0 ] + arr [ 1 ] >= arr [ 2 ] ) return 0 ; else return arr [ 2 ] - ( arr [ 0 ] + arr [ 1 ] ) ; } public static void main ( String [ ] args ) { int a = 3 , b = 5 , c = 10 ; System . out . println ( minimumIncrease ( a , b , c ) ) ; } }"],"bleu":0.22810415546618695,"rouge_l":0.4871069705539844}
{"id":1335,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int breakSum ( int n ) { if ( n == 0 || n == 1 ) return n ; return Math . max ( ( breakSum ( n \/ 2 ) + breakSum ( n \/ 3 ) + breakSum ( n \/ 4 ) ) , n ) ; } public static void main ( String [ ] args ) { int n = 12 ; System . out . println ( breakSum ( n ) ) ; } }"],"bleu":0.44523211697888615,"rouge_l":0.6073138043270151}
{"id":1336,"predictions":["import java . io . * ; import java . util . * ; class GFG { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { for ( int k = 0 ; k < n ; k ++ ) { for ( int k = 0 ; k < n ; k ++ ) { for ( int k = 0 ; k < n ; k ++ ) { if ( a [ k ] > b [ k ] ) { ans ++ ; } } } } } System . out . println ( ans ) ; } }"],"references":["import java . util . * ; class GFG { public static int maxLengthSquare ( int row , int column , int [ ] [ ] arr , int k ) { int sum [ ] [ ] = new int [ row + 1 ] [ column + 1 ] ; int cur_max = 1 ; int max = 0 ; for ( int i = 1 ; i <= row ; i ++ ) { for ( int j = 1 ; j <= column ; j ++ ) { sum [ i ] [ j ] = sum [ i - 1 ] [ j ] + sum [ i ] [ j - 1 ] + arr [ i - 1 ] [ j - 1 ] - sum [ i - 1 ] [ j - 1 ] ; if ( i >= cur_max && j >= cur_max && sum [ i ] [ j ] - sum [ i - cur_max ] [ j ] - sum [ i ] [ j - cur_max ] + sum [ i - cur_max ] [ j - cur_max ] <= k ) { max = cur_max ++ ; } } } return max ; } public static void main ( String args [ ] ) { int row = 4 , column = 4 ; int matrix [ ] [ ] = { { 1 , 1 , 1 , 1 } , { 1 , 0 , 0 , 0 } , { 1 , 0 , 0 , 0 } , { 1 , 0 , 0 , 0 } } ; int k = 6 ; int ans = maxLengthSquare ( row , column , matrix , k ) ; System . out . println ( ans ) ; } }"],"bleu":0.23109369339379,"rouge_l":0.3419011492951367}
{"id":1337,"predictions":["import java . io . * ; class GFG { static int countPairs ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 1 , 1 , 1 , 1 } ; int n = arr . length ; System . out . println ( countPairs ( arr , n ) ) ; } }"],"references":["class GFG { static int minimumChanges ( int arr [ ] , int n ) { int i ; int changes = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 1 ) { int j ; for ( j = i + 1 ; j < n ; j ++ ) { if ( arr [ j ] == 0 ) break ; } i = j - 1 ; changes ++ ; } } return changes ; } public static void main ( String args [ ] ) { int arr [ ] = { 1 , 1 , 0 , 0 , 0 , 1 , 0 , 1 , 1 } ; int n = arr . length ; System . out . println ( \" Minimum ▁ operations : ▁ \" + minimumChanges ( arr , n ) ) ; } }"],"bleu":0.47683106705975203,"rouge_l":0.6894245185099757}
{"id":1338,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return true ; if ( isPrime ( isPrime ( n \/ 2 ) ) ) return false ; if ( isPrime ( isPrime ( n \/ 2 ) ) ) return false ; if ( isPrime ( isPrime ( n \/ 2 ) ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } public static void main ( String [ ] args ) { int n = 10 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; } }"],"references":["import java . util . * ; class GFG { static int MAX = 100005 ; static Vector < Integer > addPrimes ( ) { int n = MAX ; boolean [ ] prime = new boolean [ n + 1 ] ; Arrays . fill ( prime , true ) ; for ( int p = 2 ; p * p <= n ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * p ; i <= n ; i += p ) prime [ i ] = false ; } } Vector < Integer > ans = new Vector < Integer > ( ) ; for ( int p = 2 ; p <= n ; p ++ ) if ( prime [ p ] ) ans . add ( p ) ; return ans ; } static boolean is_prime ( int n ) { return ( n == 3 || n == 5 || n == 7 ) ; } static int find_Sum ( int n ) { int sum = 0 ; Vector < Integer > v = addPrimes ( ) ; for ( int i = 0 ; i < v . size ( ) && n > 0 ; i ++ ) { int flag = 1 ; int a = v . get ( i ) ; while ( a != 0 ) { int d = a % 10 ; a = a \/ 10 ; if ( is_prime ( d ) ) { flag = 0 ; break ; } } if ( flag == 1 ) { n -- ; sum = sum + v . get ( i ) ; } } return sum ; } public static void main ( String [ ] args ) { int n = 7 ; System . out . println ( find_Sum ( n ) ) ; } }"],"bleu":0.13234145961042432,"rouge_l":0.33867982726711904}
{"id":1339,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["import java . io . * ; class GFG { static void NicomachuTheorum_sum ( int n ) { int sum = 0 ; for ( int k = 1 ; k <= n ; k ++ ) sum += k * k * k ; int triNo = n * ( n + 1 ) \/ 2 ; if ( sum == triNo * triNo ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } public static void main ( String [ ] args ) { int n = 5 ; NicomachuTheorum_sum ( n ) ; } }"],"bleu":0.4619748548452777,"rouge_l":0.5904957465532414}
{"id":1340,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["class GFG { static int MAX = 1000 ; static int sequence [ ] = new int [ MAX ] ; static void vanEckSequence ( ) { for ( int i = 0 ; i < MAX - 1 ; i ++ ) { sequence [ i ] = 0 ; } for ( int i = 0 ; i < MAX - 1 ; i ++ ) { for ( int j = i - 1 ; j >= 0 ; j -- ) { if ( sequence [ j ] == sequence [ i ] ) { sequence [ i + 1 ] = i - j ; break ; } } } } static int getNthTerm ( int n ) { return sequence [ n ] ; } public static void main ( String [ ] args ) { vanEckSequence ( ) ; int n = 6 ; System . out . println ( getNthTerm ( n ) ) ; n = 100 ; System . out . println ( getNthTerm ( n ) ) ; } }"],"bleu":0.2597465721469026,"rouge_l":0.4458214172227518}
{"id":1341,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int count ( int a [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] > a [ i ] ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 } ; int n = a . length ; System . out . println ( count ( a , n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int maximumFixedPoints ( int a [ ] , int n ) { int i , count = 0 , swapped = 0 ; int pos [ ] = new int [ n ] ; for ( i = 0 ; i < n ; i ++ ) pos [ a [ i ] ] = i ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] == i ) count ++ ; else if ( swapped == 0 && pos [ i ] == a [ i ] ) { count += 2 ; swapped = 1 ; } } if ( swapped == 0 && count < n - 1 ) count ++ ; return count ; } public static void main ( String [ ] args ) { int [ ] a = { 0 , 1 , 3 , 4 , 2 } ; int n = a . length ; System . out . println ( maximumFixedPoints ( a , n ) ) ; } }"],"bleu":0.4002093771558862,"rouge_l":0.6354809345605341}
{"id":1342,"predictions":["import java . util . * ; class GFG { static boolean isVowel ( int a [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) if ( a [ i ] < a [ j ] ) return false ; return true ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 } ; int n = a . length ; if ( isV ( a , n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; import java . lang . * ; public class GfG { public static void countCurrency ( int amount ) { int [ ] notes = new int [ ] { 2000 , 500 , 200 , 100 , 50 , 20 , 10 , 5 , 1 } ; int [ ] noteCounter = new int [ 9 ] ; for ( int i = 0 ; i < 9 ; i ++ ) { if ( amount >= notes [ i ] ) { noteCounter [ i ] = amount \/ notes [ i ] ; amount = amount - noteCounter [ i ] * notes [ i ] ; } } System . out . println ( \" Currency ▁ Count ▁ - > \" ) ; for ( int i = 0 ; i < 9 ; i ++ ) { if ( noteCounter [ i ] != 0 ) { System . out . println ( notes [ i ] + \" ▁ : ▁ \" + noteCounter [ i ] ) ; } } } public static void main ( String argc [ ] ) { int amount = 868 ; countCurrency ( amount ) ; } }"],"bleu":0.2165260716126747,"rouge_l":0.36704086214638526}
{"id":1343,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isDivisible ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) if ( arr [ i ] % arr [ j ] == 0 ) return false ; return true ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; if ( isDivisible ( arr , n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static int MAX_CHAR = 256 ; public static boolean isPalindrome ( String str , int l , int h ) { while ( h > l ) if ( str . charAt ( l ++ ) != str . charAt ( h -- ) ) return false ; return true ; } public static boolean check ( String str ) { int n = str . length ( ) ; int [ ] freq = new int [ MAX_CHAR ] ; for ( int i = 0 ; i < n ; i ++ ) { freq [ str . charAt ( i ) ] ++ ; if ( freq [ str . charAt ( i ) ] > 2 ) return true ; } int k = 0 ; for ( int i = 0 ; i < n ; i ++ ) if ( freq [ str . charAt ( i ) ] > 1 ) str . replace ( str . charAt ( k ++ ) , str . charAt ( i ) ) ; str . replace ( str . charAt ( k ) , ' \\0' ) ; if ( isPalindrome ( str , 0 , k - 1 ) ) { if ( ( k & 1 ) == 1 ) { if ( k \/ 2 >= 1 ) return ( str . charAt ( k \/ 2 ) == str . charAt ( k \/ 2 - 1 ) ) ; } return false ; } return true ; } public static void main ( String [ ] args ) { String str = \" ABCABD \" ; if ( check ( str ) ) System . out . println ( \" Repeated ▁ Subsequence ▁ Exists \" ) ; else System . out . println ( \" Repeated ▁ Subsequence \" + \" ▁ Doesn ' t ▁ Exists \" ) ; } }"],"bleu":0.15368316807531565,"rouge_l":0.35501407009465336}
{"id":1344,"predictions":["import java . io . * ; import java . util . * ; import java . lang . * ; class GFG { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += a [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { sum += a [ i ] ; } System . out . println ( sum ) ; } }"],"references":["class GFG { static int N = 100005 ; static int mod = 1000000007 ; static int cnt [ ] = new int [ N ] ; static void Divisors ( ) { for ( int i = 1 ; i < N ; i ++ ) { for ( int j = 1 ; j * i < N ; j ++ ) { cnt [ i * j ] ++ ; } } } static int Sumofdivisors ( int A , int B , int C ) { int sum = 0 ; Divisors ( ) ; for ( int i = 1 ; i <= A ; i ++ ) { for ( int j = 1 ; j <= B ; j ++ ) { for ( int k = 1 ; k <= C ; k ++ ) { int x = i * j * k ; sum += cnt [ x ] ; if ( sum >= mod ) { sum -= mod ; } } } } return sum ; } public static void main ( String [ ] args ) { int A = 5 , B = 6 , C = 7 ; System . out . println ( Sumofdivisors ( A , B , C ) ) ; } }"],"bleu":0.2198025977340831,"rouge_l":0.40731975319077}
{"id":1345,"predictions":["import java . io . * ; class GFG { static int nthTerm ( int N ) { return ( int ) Math . pow ( N , 2 ) + 1 ; } public static void main ( String [ ] args ) { int N = 4 ; System . out . println ( nthTerm ( N ) ) ; } }"],"references":["import java . util . * ; import java . lang . * ; import java . io . * ; class GFG { static int factorial ( int N ) { int fact = 1 ; for ( int i = 1 ; i <= N ; i ++ ) fact = fact * i ; return fact ; } static int nthTerm ( int N ) { return ( factorial ( N + 1 ) \/ 2 ) ; } public static void main ( String args [ ] ) { int N = 6 ; System . out . println ( nthTerm ( N ) ) ; } }"],"bleu":0.3444049131662646,"rouge_l":0.5957031249999999}
{"id":1346,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { System . out . print ( a [ i ] + \" \" ) ; } } out . println ( ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . util . * ; class GFG { static void prefix ( char [ ] str ) { int k = 1 , j ; int n = str . length ; Vector < Integer > g = new Vector < > ( ) ; int flag = 0 ; for ( int i = 1 ; i < n ; i ++ ) { if ( str [ i ] == str [ 0 ] ) { g . add ( i ) ; flag = 1 ; } } if ( flag == 0 ) { System . out . println ( String . valueOf ( str ) ) ; } else { int len = g . size ( ) ; while ( k < g . get ( 0 ) ) { int cnt = 0 ; for ( j = 0 ; j < len ; j ++ ) { if ( ( g . get ( j ) + k ) < n && str [ g . get ( j ) + k ] == str [ k ] ) { cnt ++ ; } } if ( cnt == len ) { k ++ ; } else { break ; } } for ( int i = 0 ; i < k ; i ++ ) { System . out . print ( str [ i ] ) ; } System . out . println ( ) ; } } public static void main ( String args [ ] ) { String str = \" abcab \" ; prefix ( str . toCharArray ( ) ) ; } }"],"bleu":0.2744070278524626,"rouge_l":0.42293849899438973}
{"id":1347,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["import java . lang . * ; class GFG { static int findTerm ( int n ) { if ( n == 1 ) return n ; else { int term = 7 ; for ( int i = 2 ; i <= n ; i ++ ) term = term * 2 + ( i - 1 ) ; return term ; } } public static void main ( String [ ] args ) { int n = 5 ; System . out . print ( findTerm ( n ) ) ; } }"],"bleu":0.48609122638239516,"rouge_l":0.7372993389990558}
{"id":1348,"predictions":["import java . io . * ; import java . util . * ; class GFG { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; System . out . println ( a + \" \" + b ) ; } }"],"references":["public class GFG { static int INT_SIZE = 32 ; static int Right_most_setbit ( int num ) { int pos = 1 ; for ( int i = 0 ; i < INT_SIZE ; i ++ ) { if ( ( num & ( 1 << i ) ) == 0 ) pos ++ ; else break ; } return pos ; } public static void main ( String [ ] args ) { int num = 18 ; int pos = Right_most_setbit ( num ) ; System . out . println ( pos ) ; } }"],"bleu":0.22539415335299923,"rouge_l":0.36465533345787404}
{"id":1349,"predictions":["import java . io . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["public class GFG { static long subarrayXor ( int arr [ ] , int n , int m ) { long ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int xorSum = 0 ; for ( int j = i ; j < n ; j ++ ) { xorSum = xorSum ^ arr [ j ] ; if ( xorSum == m ) ans ++ ; } } return ans ; } public static void main ( String args [ ] ) { int [ ] arr = { 4 , 2 , 2 , 6 , 4 } ; int n = arr . length ; int m = 6 ; System . out . println ( \" Number ▁ of ▁ subarrays \" + \" ▁ having ▁ given ▁ XOR ▁ is ▁ \" + subarrayXor ( arr , n , m ) ) ; } }"],"bleu":0.3787029654020745,"rouge_l":0.6333593837222284}
{"id":1350,"predictions":["import java . io . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 12 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; class GFG { static int TrialDivision ( int N ) { int i = 2 ; int k = ( int ) Math . ceil ( Math . sqrt ( N ) ) ; while ( i <= k ) { if ( N % i == 0 ) return 0 ; i += 1 ; } return 1 ; } public static void main ( String [ ] args ) { int N = 49 ; int p = TrialDivision ( N ) ; if ( p != 0 ) System . out . print ( \" Prime \" ) ; else System . out . print ( \" Composite \" ) ; } }"],"bleu":0.35107291894887116,"rouge_l":0.5923175781807798}
{"id":1351,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int countPairs ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) count ++ ; } return count ; } static int countPairs ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( countPairs ( arr , n ) ) ; } }"],"references":["class GFG { static int count ( int arr [ ] , int N , int K ) { int count = 0 , ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( arr [ i ] == K ) { count = count + 1 ; } else { ans += ( count * ( count + 1 ) ) \/ 2 ; count = 0 ; } } ans = ans + ( count * ( count + 1 ) ) \/ 2 ; return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 0 , 0 , 1 , 1 , 0 , 0 } ; int N = arr . length ; int K = 0 ; System . out . print ( count ( arr , N , K ) ) ; } }"],"bleu":0.44042144174814996,"rouge_l":0.6067875950848449}
{"id":1352,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["import java . io . * ; class GFG { static long centered_heptagonal_num ( long n ) { return ( 7 * n * n - 7 * n + 2 ) \/ 2 ; } public static void main ( String [ ] args ) { long n = 5 ; System . out . println ( n + \" th ▁ Centered ▁ \" + \" heptagonal ▁ number ▁ : ▁ \" + centered_heptagonal_num ( n ) ) ; } }"],"bleu":0.4240339779088217,"rouge_l":0.5852214737701572}
{"id":1353,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["class GFG { static double pie = 3.1415926535897 ; static double findsolution ( double d , double h , double m , double n ) { double k = ( 4 * m ) \/ ( pie * d * d ) ; if ( n > k ) return - 1 ; double ans = ( h \/ ( k - n ) ) ; return ans ; } public static void main ( String [ ] args ) { double d = 1 , h = 1 , m = 1 , n = 1 ; System . out . printf ( \" % .5f \" , findsolution ( d , h , m , n ) ) ; } }"],"bleu":0.2360124421623558,"rouge_l":0.4289259616710327}
{"id":1354,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { if ( a [ i ] < a [ j ] ) { count ++ ; } } } System . out . println ( count ) ; } }"],"references":["class GFG { static int countNum ( int N , int arr [ ] ) { int sum = 0 , count = 0 ; for ( int i = 0 ; i < N ; i ++ ) { sum += arr [ i ] ; } for ( int i = 0 ; i < N ; i ++ ) { if ( ( sum - arr [ i ] ) % arr [ i ] == 0 ) { count ++ ; } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 10 , 4 , 6 , 7 } ; int n = arr . length ; System . out . println ( countNum ( n , arr ) ) ; } }"],"bleu":0.4232650756638091,"rouge_l":0.4859451462387617}
{"id":1355,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % 2 == 0 ) { count ++ ; } } System . out . println ( count ) ; } }"],"references":["import java . util . * ; import java . lang . * ; import java . io . * ; class GFG { static int CountTrailingZeros ( int n ) { String bit = Integer . toBinaryString ( n ) ; StringBuilder bit1 = new StringBuilder ( ) ; bit1 . append ( bit ) ; bit1 = bit1 . reverse ( ) ; int zero = 0 ; for ( int i = 0 ; i < 64 ; i ++ ) { if ( bit1 . charAt ( i ) == '0' ) zero ++ ; else break ; } return zero ; } public static void main ( String [ ] args ) { int n = 4 ; int ans = CountTrailingZeros ( n ) ; System . out . println ( ans ) ; } }"],"bleu":0.3530939831622695,"rouge_l":0.4770211742059673}
{"id":1356,"predictions":["import java . io . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; return false ; } static boolean isPrime ( int n ) { if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 12 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GfG { static void printConsecutive ( int last , int first ) { System . out . print ( first ++ ) ; for ( int x = first ; x <= last ; x ++ ) System . out . print ( \" ▁ + ▁ \" + x ) ; } static void findConsecutive ( int N ) { for ( int last = 1 ; last < N ; last ++ ) { for ( int first = 0 ; first < last ; first ++ ) { if ( 2 * N == ( last - first ) * ( last + first + 1 ) ) { System . out . printf ( N + \" ▁ = ▁ \" ) ; printConsecutive ( last , first + 1 ) ; return ; } } } System . out . print ( \" - 1\" ) ; } public static void main ( String [ ] args ) { int n = 12 ; findConsecutive ( n ) ; } }"],"bleu":0.21899813453038464,"rouge_l":0.3547934215804252}
{"id":1357,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = sc . nextInt ( ) ; Arrays . sort ( a ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( a [ i ] < a [ j ] ) { count ++ ; } } } out . println ( count ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["public class LongestCommonSubSequence { static int LCSubStr ( char X [ ] , char Y [ ] , int m , int n ) { int LCStuff [ ] [ ] = new int [ m + 1 ] [ n + 1 ] ; int result = 0 ; for ( int i = 0 ; i <= m ; i ++ ) { for ( int j = 0 ; j <= n ; j ++ ) { if ( i == 0 || j == 0 ) LCStuff [ i ] [ j ] = 0 ; else if ( X [ i - 1 ] == Y [ j - 1 ] ) { LCStuff [ i ] [ j ] = LCStuff [ i - 1 ] [ j - 1 ] + 1 ; result = Integer . max ( result , LCStuff [ i ] [ j ] ) ; } else LCStuff [ i ] [ j ] = 0 ; } } return result ; } public static void main ( String [ ] args ) { String X = \" OldSite : GeeksforGeeks . org \" ; String Y = \" NewSite : GeeksQuiz . com \" ; int m = X . length ( ) ; int n = Y . length ( ) ; System . out . println ( \" Length ▁ of ▁ Longest ▁ Common ▁ Substring ▁ is ▁ \" + LCSubStr ( X . toCharArray ( ) , Y . toCharArray ( ) , m , n ) ) ; } }"],"bleu":0.2194083010139095,"rouge_l":0.34887813462384526}
{"id":1358,"predictions":["import java . io . * ; class GFG { static int countPairs ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( countPairs ( arr , n ) ) ; } }"],"references":["class GFG { static int getPassingCars ( int [ ] A , int n ) { int result = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( A [ i ] == 0 ) { for ( int j = i + 1 ; j < n ; j ++ ) if ( A [ j ] == 1 ) result ++ ; } } return result ; } public static void main ( String [ ] args ) { int [ ] A = { 0 , 1 , 0 , 1 , 1 } ; int n = A . length ; System . out . println ( getPassingCars ( A , n ) ) ; } }"],"bleu":0.46853335425526693,"rouge_l":0.713122290818337}
{"id":1359,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int count ( int a [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += a [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = a . length ; System . out . println ( count ( a , n ) ) ; } }"],"references":["public class DLL { Node head ; class Node { int data ; Node prev ; Node next ; Node ( int d ) { data = d ; } } }"],"bleu":0.03527245012571754,"rouge_l":0.21206853737273407}
{"id":1360,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 2 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["public class GFG { static int search ( int arr [ ] , int n , int x ) { int i ; for ( i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == x ) { return i ; } } return - 1 ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 10 , 30 , 15 } ; int x = 30 ; int n = arr . length ; System . out . printf ( \" % d ▁ is ▁ present ▁ at ▁ index ▁ % d \" , x , search ( arr , n , x ) ) ; } }"],"bleu":0.5034817729479573,"rouge_l":0.6662332596541412}
{"id":1361,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int count ( int a [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % 2 == 0 ) { count ++ ; } } return count ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 } ; int n = a . length ; System . out . println ( count ( a , n ) ) ; } }"],"references":["import java . lang . * ; class GFG { static int findKHCF ( int x , int y , int k ) { int small = Math . min ( x , y ) ; int count = 1 ; for ( int i = 2 ; i <= small ; i ++ ) { if ( x % i == 0 && y % i == 0 ) count ++ ; if ( count == k ) return i ; } return - 1 ; } public static void main ( String [ ] args ) { int x = 4 , y = 24 , k = 3 ; System . out . print ( findKHCF ( x , y , k ) ) ; } }"],"bleu":0.3714189719455525,"rouge_l":0.6036458333333333}
{"id":1362,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int sum ( int a [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += a [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = a . length ; System . out . println ( sum ( a , n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int distancesum ( int x [ ] , int y [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = i + 1 ; j < n ; j ++ ) sum += ( Math . abs ( x [ i ] - x [ j ] ) + Math . abs ( y [ i ] - y [ j ] ) ) ; return sum ; } public static void main ( String [ ] args ) { int x [ ] = { - 1 , 1 , 3 , 2 } ; int y [ ] = { 5 , 6 , 5 , 3 } ; int n = x . length ; System . out . println ( distancesum ( x , y , n ) ) ; } }"],"bleu":0.4282012274487391,"rouge_l":0.6562815196682729}
{"id":1363,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int N = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ M ] ; for ( int i = 0 ; i < M ; i ++ ) { a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < M ; i ++ ) { a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int count = 0 ; for ( int i = 0 ; i < M ; i ++ ) { if ( a [ i ] == 1 ) { count ++ ; } } System . out . println ( count ) ; } }"],"references":["class GFG { static int days [ ] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ; static int dayOfYear ( String date ) { int year = Integer . parseInt ( date . substring ( 0 , 4 ) ) ; int month = Integer . parseInt ( date . substring ( 5 , 7 ) ) ; int day = Integer . parseInt ( date . substring ( 8 ) ) ; if ( month > 2 && year % 4 == 0 && ( year % 100 != 0 || year % 400 == 0 ) ) { ++ day ; } while ( -- month > 0 ) { day = day + days [ month - 1 ] ; } return day ; } public static void main ( String [ ] args ) { String date = \"2019-01-09\" ; System . out . println ( dayOfYear ( date ) ) ; } }"],"bleu":0.1896934856988688,"rouge_l":0.37862774702231167}
{"id":1364,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 10 == 0 ) return false ; if ( n % 10 == 0 ) return false ; if ( n % 10 == 0 ) return false ; if ( n % 10 == 0 ) return false ; if ( n % 10 == 0 ) return false ; if ( n % 10 == 0 ) return false ; if ( n % 10 == 0 ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 10 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . io . * ; class GFG { static boolean isUnary ( int n ) { if ( n == 1 || n == 7 ) return true ; else if ( n \/ 10 == 0 ) return false ; int x , sum = 0 ; while ( n != 0 ) { x = n % 10 ; sum = sum + x * x ; n = n \/ 10 ; } return isUnary ( sum ) ; } static int countUnary ( int a , int b ) { int count = 0 ; for ( int i = a ; i <= b ; i ++ ) { if ( isUnary ( i ) == true ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int a = 1000 , b = 1099 ; System . out . println ( countUnary ( a , b ) ) ; } }"],"bleu":0.3184173947991946,"rouge_l":0.5035232534729213}
{"id":1365,"predictions":["import java . io . * ; class GFG { static int countPairs ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( countPairs ( arr , n ) ) ; } }"],"references":["class GFG { static int find_count ( int [ ] arr ) { int ans = 0 ; for ( int i : arr ) { int x = Integer . bitCount ( i ) ; if ( i % x == 0 ) ans += 1 ; } return ans ; } public static void main ( String [ ] args ) { int [ ] arr = { 1 , 2 , 3 , 4 , 5 , 6 } ; System . out . print ( find_count ( arr ) ) ; } }"],"bleu":0.39861976136537786,"rouge_l":0.6856102580338768}
{"id":1366,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int maxSum ( int a [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += a [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = a . length ; System . out . println ( maxSum ( a , n ) ) ; } }"],"references":["class GFG { static final int MOD = 1000000007 ; static int product ( int ar [ ] , int n ) { int result = 1 ; for ( int i = 0 ; i < n ; i ++ ) result = ( result * ar [ i ] ) % MOD ; return result ; } public static void main ( String [ ] args ) { int ar [ ] = { 1 , 2 , 3 , 4 , 5 } ; int n = ar . length ; System . out . printf ( \" % d \" , product ( ar , n ) ) ; } }"],"bleu":0.5434094683377211,"rouge_l":0.7181622397702799}
{"id":1367,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int maxSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } static int maxSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static int MOD = 1000000007 ; static void SieveOfEratosthenes ( boolean prime [ ] , int p_size ) { prime [ 0 ] = false ; prime [ 1 ] = false ; for ( int p = 2 ; p * p <= p_size ; p ++ ) { if ( prime [ p ] ) { for ( int i = p * 2 ; i <= p_size ; i += p ) prime [ i ] = false ; } } } static int productPrimeFreq ( int arr [ ] , int n ) { boolean [ ] prime = new boolean [ n + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) prime [ i ] = true ; SieveOfEratosthenes ( prime , n + 1 ) ; int i , j ; HashMap < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; for ( i = 0 ; i < n ; i ++ ) { if ( mp . containsKey ( arr [ i ] ) ) { mp . put ( arr [ i ] , mp . get ( arr [ i ] ) + 1 ) ; } else { mp . put ( arr [ i ] , 1 ) ; } } long product = 1 ; for ( Map . Entry < Integer , Integer > it : mp . entrySet ( ) ) { if ( prime [ it . getValue ( ) ] ) { product *= ( it . getKey ( ) % MOD ) ; product %= MOD ; } } return ( int ) ( product ) ; } static public void main ( String [ ] arg ) { int arr [ ] = { 5 , 4 , 6 , 5 , 4 , 6 } ; int n = arr . length ; System . out . println ( productPrimeFreq ( arr , n ) ) ; } }"],"bleu":0.24000556947894497,"rouge_l":0.4889365545269812}
{"id":1368,"predictions":["import java . io . * ; import java . util . * ; class GFG { public static void main ( String [ ] args ) { int [ ] a = { 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 , 5 , 5 , 6 } ; int n = a . length ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( a [ i ] + \" \" ) ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( a [ i ] + \" \" ) ; System . out . println ( ) ; } }"],"references":["class GFG { static int maxval ( int [ ] a , int n ) { if ( n < 2 ) { System . out . print ( \" Invalid ▁ Input \" ) ; return - 9999 ; } int max1 = 0 , max2 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int x = a [ i ] + i ; if ( x > max1 ) { max2 = max1 ; max1 = x ; } else if ( x > max2 & x != max1 ) { max2 = x ; } } return ( max1 * max2 ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 4 , 5 , 3 , 1 , 10 } ; int len = arr . length ; System . out . println ( maxval ( arr , len ) ) ; } }"],"bleu":0.3262199967444834,"rouge_l":0.36542575952075307}
{"id":1369,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int a , int b ) { if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; return false ; return false ; } public static void main ( String [ ] args ) { int a = 10 , b = 15 ; if ( isPrime ( a , b ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static class Node { int data ; Node left ; Node right ; } ; static Node newNode ( int data ) { Node node = new Node ( ) ; node . data = data ; node . left = node . right = null ; return ( node ) ; } static int result ; static int minPathSumUtil ( Node root ) { if ( root == null ) return 0 ; if ( root . left == null && root . right == null ) return root . data ; int ls = minPathSumUtil ( root . left ) ; int rs = minPathSumUtil ( root . right ) ; if ( root . left != null && root . right != null ) { result = Math . min ( result , ls + rs + root . data ) ; return Math . min ( ls + root . data , rs + root . data ) ; } if ( root . left == null ) return rs + root . data ; else return ls + root . data ; } static int minPathSum ( Node root ) { result = Integer . MAX_VALUE ; minPathSumUtil ( root ) ; return result ; } public static void main ( String args [ ] ) { Node root = newNode ( 4 ) ; root . left = newNode ( 5 ) ; root . right = newNode ( - 6 ) ; root . left . left = newNode ( 2 ) ; root . left . right = newNode ( - 3 ) ; root . right . left = newNode ( 1 ) ; root . right . right = newNode ( 8 ) ; System . out . print ( minPathSum ( root ) ) ; } }"],"bleu":0.08332798793207484,"rouge_l":0.3209347852685673}
{"id":1370,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int a = Integer . parseInt ( st . nextToken ( ) ) ; int b = Integer . parseInt ( st . nextToken ( ) ) ; int c = Integer . parseInt ( st . nextToken ( ) ) ; System . out . println ( c ) ; } }"],"references":["import java . io . * ; class GFG { static long andOperator ( long a , long b ) { while ( a < b ) { b -= ( b & - b ) ; } return b ; } public static void main ( String [ ] args ) { long a , b ; a = 10 ; b = 15 ; System . out . println ( andOperator ( a , b ) ) ; } }"],"bleu":0.240921010927929,"rouge_l":0.39238525730180807}
{"id":1371,"predictions":["import java . io . * ; class GFG { static int countPairs ( int n ) { int count = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( n % i == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( countPairs ( n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int __gcd ( int a , int b ) { if ( a == 0 ) return b ; if ( b == 0 ) return a ; if ( a == b ) return a ; if ( a > b ) return __gcd ( a - b , b ) ; return __gcd ( a , b - a ) ; } static int countPrimitiveRoots ( int p ) { int result = 1 ; for ( int i = 2 ; i < p ; i ++ ) if ( __gcd ( i , p ) == 1 ) result ++ ; return result ; } public static void main ( String [ ] args ) { int p = 5 ; System . out . println ( countPrimitiveRoots ( p - 1 ) ) ; } }"],"bleu":0.25719391271511577,"rouge_l":0.5316957210776545}
{"id":1372,"predictions":["import java . io . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ; } public static void main ( String [ ] args ) { int n = 12 ; if ( isPrime ( n ) ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ; } }"],"references":["import java . util . * ; class GFG { static void printPattern ( int n ) { int i , j ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j < 2 * n ; j ++ ) { if ( j == ( n - i + 1 ) || j == ( n + i - 1 ) ) { System . out . print ( \" * ▁ \" ) ; } else if ( ( i >= 4 && i <= n - 4 ) && ( j == n - i + 4 || j == n + i - 4 ) ) { System . out . print ( \" * ▁ \" ) ; } else if ( i == n || ( i == n - 4 && j >= n - ( n - 2 * 4 ) && j <= n + n - 2 * 4 ) ) { System . out . print ( \" * ▁ \" ) ; } else { System . out . print ( \" ▁ \" + \" ▁ \" ) ; } } System . out . print ( \" \\n \" ) ; } } public static void main ( String [ ] args ) { int N = 9 ; printPattern ( N ) ; } }"],"bleu":0.11044235670599133,"rouge_l":0.3300994539781592}
{"id":1373,"predictions":["import java . io . * ; class GFG { static int maxSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static void printOrder ( int [ ] arr , int n , int k ) { int len1 = k , len2 = n - k ; int [ ] arr1 = new int [ k ] ; int [ ] arr2 = new int [ n - k ] ; for ( int i = 0 ; i < k ; i ++ ) arr1 [ i ] = arr [ i ] ; for ( int i = k ; i < n ; i ++ ) arr2 [ i - k ] = arr [ i ] ; Arrays . sort ( arr1 , 0 , k ) ; Arrays . sort ( arr2 , k , n - k ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( i < k ) arr [ i ] = arr1 [ i ] ; else { arr [ i ] = arr2 [ len2 - 1 ] ; len2 -- ; } } for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( arr [ i ] + \" ▁ \" ) ; } } public static void main ( String [ ] args ) { int arr [ ] = { 5 , 4 , 6 , 2 , 1 , 3 , 8 , 9 , - 1 } ; int k = 4 ; int n = arr . length ; printOrder ( arr , n , k ) ; } }"],"bleu":0.1982593428426256,"rouge_l":0.47659864977622696}
{"id":1374,"predictions":["import java . io . * ; class GFG { static boolean isPower ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) return false ; } return true ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 1 , 1 , 1 , 1 , 1 } ; int n = arr . length ; if ( isPower ( arr , n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; class GFG { static boolean isPlusPossible ( int arr [ ] , int n ) { HashMap < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( mp . containsKey ( arr [ i ] ) ) { mp . put ( arr [ i ] , mp . get ( arr [ i ] ) + 1 ) ; } else { mp . put ( arr [ i ] , 1 ) ; } } boolean foundModOne = false ; for ( Map . Entry < Integer , Integer > x : mp . entrySet ( ) ) { int element = x . getKey ( ) ; int frequency = x . getValue ( ) ; if ( frequency % 4 == 0 ) continue ; if ( frequency % 4 == 1 ) { if ( foundModOne ) return false ; foundModOne = true ; } else return false ; } return true ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 1 , 1 , 2 , 2 , 2 , 3 , 2 } ; int n = arr . length ; if ( isPlusPossible ( arr , n ) ) System . out . print ( \" Yes \" ) ; else System . out . print ( \" No \" ) ; } }"],"bleu":0.28282623766133996,"rouge_l":0.5738609858497902}
{"id":1375,"predictions":["import java . io . * ; import java . util . * ; import java . lang . * ; import java . math . * ; import java . text . * ; import java . lang . * ; import java . lang . * ; import java . lang . * ; import java . lang . * ; import java . math . * ; import java . text . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { ans += i * i ; } System . out . println ( ans ) ; } }"],"references":["class GFG { static float sumOfAP ( float a , float d , float n ) { float sum = ( n \/ 2 ) * ( 2 * a + ( n - 1 ) * d ) ; return sum ; } public static void main ( String [ ] args ) { float n = 20 ; float a = 2.5f , d = 1.5f ; System . out . print ( sumOfAP ( a , d , n ) ) ; } }"],"bleu":0.13152974796668432,"rouge_l":0.2757765786787225}
{"id":1376,"predictions":["import java . io . * ; class GFG { static boolean isPower ( int a , int b ) { if ( a == b ) return true ; if ( a == b ) return true ; if ( a == b ) return false ; return false ; } static void findPower ( int a , int b ) { int n = a . length ( ) ; if ( isPower ( a , b ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } public static void main ( String [ ] args ) { int a = 10 , b = 10 ; findPower ( a , b ) ; } }"],"references":["import java . io . * ; import java . math . * ; class GFG { static boolean isPerfectSquare ( int num ) { int n = ( int ) ( Math . sqrt ( num ) ) ; return ( n * n == num ) ; } static void checkFib ( int array [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( isPerfectSquare ( 5 * array [ i ] * array [ i ] + 4 ) || isPerfectSquare ( 5 * array [ i ] * array [ i ] - 4 ) ) { System . out . print ( array [ i ] + \" ▁ \" ) ; count ++ ; } } if ( count == 0 ) System . out . println ( \" None ▁ Present \" ) ; } public static void main ( String [ ] args ) { int array [ ] = { 4 , 2 , 8 , 5 , 20 , 1 , 40 , 13 , 23 } ; int n = array . length ; checkFib ( array , n ) ; } }"],"bleu":0.22494474700423914,"rouge_l":0.47059357415138864}
{"id":1377,"predictions":["import java . io . * ; class GFG { static float area ( float a , float b ) { if ( a < 0 ) return - 1 ; return area ; } public static void main ( String [ ] args ) { float a = 5 , b = 5 ; System . out . println ( area ( a , b ) ) ; } }"],"references":["import java . util . * ; class Solution { static float largestCube ( float r ) { if ( r < 0 ) return - 1 ; float a = ( 2 * r ) \/ ( float ) Math . sqrt ( 3 ) ; return a ; } public static void main ( String args [ ] ) { float r = 5 ; System . out . println ( largestCube ( r ) ) ; } }"],"bleu":0.43098206135333855,"rouge_l":0.6761884459603495}
{"id":1378,"predictions":["import java . io . * ; import java . util . * ; class GFG { public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 } ; int n = a . length ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( a [ i ] + \" \" ) ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( a [ i ] + \" \" ) ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( \" \" ) ; System . out . println ( ) ; } }"],"references":["class GFG { static int countTransformation ( String a , String b ) { int n = a . length ( ) , m = b . length ( ) ; if ( m == 0 ) { return 1 ; } int dp [ ] [ ] = new int [ m ] [ n ] ; for ( int i = 0 ; i < m ; i ++ ) { for ( int j = i ; j < n ; j ++ ) { if ( i == 0 ) { if ( j == 0 ) { dp [ i ] [ j ] = ( a . charAt ( j ) == b . charAt ( i ) ) ? 1 : 0 ; } else if ( a . charAt ( j ) == b . charAt ( i ) ) { dp [ i ] [ j ] = dp [ i ] [ j - 1 ] + 1 ; } else { dp [ i ] [ j ] = dp [ i ] [ j - 1 ] ; } } else if ( a . charAt ( j ) == b . charAt ( i ) ) { dp [ i ] [ j ] = dp [ i ] [ j - 1 ] + dp [ i - 1 ] [ j - 1 ] ; } else { dp [ i ] [ j ] = dp [ i ] [ j - 1 ] ; } } } return dp [ m - 1 ] [ n - 1 ] ; } public static void main ( String [ ] args ) { String a = \" abcccdf \" , b = \" abccdf \" ; System . out . println ( countTransformation ( a , b ) ) ; } }"],"bleu":0.15225883742995103,"rouge_l":0.24543050925393725}
{"id":1379,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["import java . util . HashMap ; class GFG { static class pair { int first , second ; public pair ( int first , int second ) { this . first = first ; this . second = second ; } } static void findFourElements ( int arr [ ] , int n , int X ) { HashMap < Integer , pair > mp = new HashMap < Integer , pair > ( ) ; for ( int i = 0 ; i < n - 1 ; i ++ ) for ( int j = i + 1 ; j < n ; j ++ ) mp . put ( arr [ i ] + arr [ j ] , new pair ( i , j ) ) ; for ( int i = 0 ; i < n - 1 ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { int sum = arr [ i ] + arr [ j ] ; if ( mp . containsKey ( X - sum ) ) { pair p = mp . get ( X - sum ) ; if ( p . first != i && p . first != j && p . second != i && p . second != j ) { System . out . print ( arr [ i ] + \" , ▁ \" + arr [ j ] + \" , ▁ \" + arr [ p . first ] + \" , ▁ \" + arr [ p . second ] ) ; return ; } } } } } public static void main ( String [ ] args ) { int arr [ ] = { 10 , 20 , 30 , 40 , 1 , 2 } ; int n = arr . length ; int X = 91 ; findFourElements ( arr , n , X ) ; } }"],"bleu":0.19217836727338206,"rouge_l":0.4338012491497125}
{"id":1380,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( st . charAt ( i ) == st . charAt ( j ) ) count ++ ; } } System . out . println ( count ) ; } }"],"references":["import java . io . * ; class GFG { static int countWays ( int n ) { int counter = 0 ; for ( int i = 1 ; i < n ; i ++ ) for ( int j = i ; j < n ; j ++ ) for ( int k = j ; k < n ; k ++ ) for ( int l = k ; l < n ; l ++ ) if ( i + j + k + l == n ) counter ++ ; return counter ; } public static void main ( String [ ] args ) { int n = 8 ; System . out . println ( countWays ( n ) ) ; } }"],"bleu":0.3456948863371479,"rouge_l":0.45436273350673917}
{"id":1381,"predictions":["import java . io . * ; class GFG { static int count ( int n ) { int count = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( n % i == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( count ( n ) ) ; } }"],"references":["class MaxConsecutiveOnes { private static int maxConsecutiveOnes ( int x ) { int count = 0 ; while ( x != 0 ) { x = ( x & ( x << 1 ) ) ; count ++ ; } return count ; } public static void main ( String strings [ ] ) { System . out . println ( maxConsecutiveOnes ( 14 ) ) ; System . out . println ( maxConsecutiveOnes ( 222 ) ) ; } }"],"bleu":0.39248593670369886,"rouge_l":0.5958931419457736}
{"id":1382,"predictions":["import java . io . * ; class GFG { static boolean isDivisible ( int n ) { if ( n == 0 ) return false ; for ( int i = 1 ; i <= n ; i ++ ) if ( n % i == 0 ) return false ; return true ; } public static void main ( String [ ] args ) { int n = 12 ; if ( isDivisible ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . io . * ; import java . util . * ; public class GFG { public static boolean isFascinating ( int num ) { int [ ] freq = new int [ 10 ] ; String val = \" \" + num + num * 2 + num * 3 ; for ( int i = 0 ; i < val . length ( ) ; i ++ ) { int digit = val . charAt ( i ) - '0' ; if ( freq [ digit ] > 0 ) return false ; else freq [ digit ] ++ ; } for ( int i = 1 ; i < freq . length ; i ++ ) { if ( freq [ i ] == 0 ) return false ; } return true ; } public static void main ( String args [ ] ) { int num = 192 ; if ( num < 100 ) System . out . println ( \" No \" ) ; else { boolean ans = isFascinating ( num ) ; if ( ans ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } } }"],"bleu":0.22726829550962688,"rouge_l":0.5425136825645035}
{"id":1383,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int maxSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 10 , 10 , 10 , 10 , 10 , 10 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }"],"references":["import java . io . * ; class GFG { static void printDistinct ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { int j ; for ( j = 0 ; j < i ; j ++ ) if ( arr [ i ] == arr [ j ] ) break ; if ( i == j ) System . out . print ( arr [ i ] + \" ▁ \" ) ; } } public static void main ( String [ ] args ) { int arr [ ] = { 6 , 10 , 5 , 4 , 9 , 120 , 4 , 6 , 10 } ; int n = arr . length ; printDistinct ( arr , n ) ; } }"],"bleu":0.503814830832349,"rouge_l":0.635810894651942}
{"id":1384,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["import java . io . * ; class Solution { static int closestMultiple ( int n , int x ) { if ( x > n ) return x ; n = n + x \/ 2 ; n = n - ( n % x ) ; return n ; } public static void main ( String [ ] args ) { int n = 56287 , x = 27 ; System . out . println ( closestMultiple ( n , x ) ) ; } }"],"bleu":0.41660204078090046,"rouge_l":0.6410866547689866}
{"id":1385,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int count ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ i ] > arr [ j ] ) { count ++ ; } } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( count ( arr , n ) ) ; } }"],"references":["public class GFG { static final int MAX = 1000 ; static int maxSubsequenceSubstring ( char x [ ] , char y [ ] , int n , int m ) { int dp [ ] [ ] = new int [ MAX ] [ MAX ] ; for ( int i = 0 ; i <= m ; i ++ ) for ( int j = 0 ; j <= n ; j ++ ) dp [ i ] [ j ] = 0 ; for ( int i = 1 ; i <= m ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { if ( x [ j - 1 ] == y [ i - 1 ] ) dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ] ; else dp [ i ] [ j ] = dp [ i ] [ j - 1 ] ; } } int ans = 0 ; for ( int i = 1 ; i <= m ; i ++ ) ans = Math . max ( ans , dp [ i ] [ n ] ) ; return ans ; } public static void main ( String [ ] args ) { char x [ ] = \" ABCD \" . toCharArray ( ) ; char y [ ] = \" BACDBDCD \" . toCharArray ( ) ; int n = x . length , m = y . length ; System . out . println ( maxSubsequenceSubstring ( x , y , n , m ) ) ; } }"],"bleu":0.18275934580161995,"rouge_l":0.4056378749548248}
{"id":1386,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int maxSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }"],"references":["import java . io . * ; import java . util . * ; class GFG { static int findMaxGCD ( int [ ] arr , int n , int k ) { Arrays . sort ( arr ) ; int high = arr [ n - 1 ] ; int [ ] divisors = new int [ high + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 1 ; j <= Math . sqrt ( arr [ i ] ) ; j ++ ) { if ( arr [ i ] % j == 0 ) { divisors [ j ] ++ ; if ( j != arr [ i ] \/ j ) divisors [ arr [ i ] \/ j ] ++ ; } } } for ( int i = high ; i >= 1 ; i -- ) if ( divisors [ i ] >= k ) return i ; return 0 ; } static public void main ( String [ ] args ) { int [ ] arr = { 1 , 2 , 4 , 8 , 8 , 12 } ; int k = 3 ; int n = arr . length ; System . out . println ( findMaxGCD ( arr , n , k ) ) ; } }"],"bleu":0.2939837702330277,"rouge_l":0.5854425004246646}
{"id":1387,"predictions":["import java . io . * ; class GFG { static int nthTerm ( int n ) { return ( int ) Math . pow ( n , 2 ) + 1 ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( nthTerm ( n ) ) ; } }"],"references":["class GFG { static int Max_Sum ( int n ) { return ( n * ( n - 1 ) ) \/ 2 ; } public static void main ( String [ ] args ) { int n = 8 ; System . out . println ( Max_Sum ( n ) ) ; } }"],"bleu":0.5770590457581719,"rouge_l":0.766759776536313}
{"id":1388,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isDivisible ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = arr . length ; if ( isDivisible ( arr , n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static int [ ] [ ] [ ] [ ] lookup = new int [ 50 ] [ 1000 ] [ 1000 ] [ 2 ] ; static int countRec ( int digits , int esum , int osum , int isOdd , int n ) { if ( digits == n ) return ( esum - osum == 1 ) ? 1 : 0 ; if ( lookup [ digits ] [ esum ] [ osum ] [ isOdd ] != - 1 ) return lookup [ digits ] [ esum ] [ osum ] [ isOdd ] ; int ans = 0 ; if ( isOdd == 1 ) for ( int i = 0 ; i <= 9 ; i ++ ) ans += countRec ( digits + 1 , esum , osum + i , 0 , n ) ; else for ( int i = 0 ; i <= 9 ; i ++ ) ans += countRec ( digits + 1 , esum + i , osum , 1 , n ) ; return lookup [ digits ] [ esum ] [ osum ] [ isOdd ] = ans ; } static int finalCount ( int n ) { int digits = 0 ; for ( int i = 0 ; i < 50 ; i ++ ) for ( int j = 0 ; j < 1000 ; j ++ ) for ( int k = 0 ; k < 1000 ; k ++ ) for ( int l = 0 ; l < 2 ; l ++ ) lookup [ i ] [ j ] [ k ] [ l ] = - 1 ; int ans = 0 ; int esum = 0 , osum = 0 ; for ( int i = 1 ; i <= 9 ; i ++ ) ans += countRec ( digits + 1 , esum + i , osum , 1 , n ) ; return ans ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( \" Coutn ▁ of ▁ \" + n + \" ▁ digit ▁ numbers ▁ is ▁ \" + finalCount ( n ) ) ; } }"],"bleu":0.0925133122167608,"rouge_l":0.28323895809739524}
{"id":1389,"predictions":["import java . io . * ; import java . util . * ; class GFG { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { System . out . print ( b [ i ] + \" \" ) ; } System . out . println ( ) ; } }"],"references":["public class LCS_3Strings { static int lcsOf3 ( String X , String Y , String Z , int m , int n , int o ) { int [ ] [ ] [ ] L = new int [ m + 1 ] [ n + 1 ] [ o + 1 ] ; for ( int i = 0 ; i <= m ; i ++ ) { for ( int j = 0 ; j <= n ; j ++ ) { for ( int k = 0 ; k <= o ; k ++ ) { if ( i == 0 || j == 0 || k == 0 ) L [ i ] [ j ] [ k ] = 0 ; else if ( X . charAt ( i - 1 ) == Y . charAt ( j - 1 ) && X . charAt ( i - 1 ) == Z . charAt ( k - 1 ) ) L [ i ] [ j ] [ k ] = L [ i - 1 ] [ j - 1 ] [ k - 1 ] + 1 ; else L [ i ] [ j ] [ k ] = Math . max ( Math . max ( L [ i - 1 ] [ j ] [ k ] , L [ i ] [ j - 1 ] [ k ] ) , L [ i ] [ j ] [ k - 1 ] ) ; } } } return L [ m ] [ n ] [ o ] ; } public static void main ( String args [ ] ) { String X = \" AGGT12\" ; String Y = \"12TXAYB \" ; String Z = \"12XBA \" ; int m = X . length ( ) ; int n = Y . length ( ) ; int o = Z . length ( ) ; System . out . println ( \" Length ▁ of ▁ LCS ▁ is ▁ \" + lcsOf3 ( X , Y , Z , m , n , o ) ) ; } }"],"bleu":0.15790118500056563,"rouge_l":0.30093734583127774}
{"id":1390,"predictions":["import java . io . * ; class GFG { static boolean isPower ( int a , int b ) { if ( a < b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; return false ; } public static void main ( String [ ] args ) { int a = 2 , b = 3 , c = 3 ; if ( isPower ( a , b , c ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . io . * ; class GFG { static void printGreater ( int x , int y ) { double X = y * Math . log ( x ) ; double Y = x * Math . log ( y ) ; if ( Math . abs ( X - Y ) < 1e-9 ) { System . out . println ( \" Equal \" ) ; } else if ( X > Y ) { System . out . println ( x + \" ^ \" + y ) ; } else { System . out . println ( y + \" ^ \" + x ) ; } } public static void main ( String [ ] args ) { int x = 5 , y = 8 ; printGreater ( x , y ) ; } }"],"bleu":0.2951362905662116,"rouge_l":0.42744122965641956}
{"id":1391,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int sum ( int a [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += a [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += a [ i ] ; return sum ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = a . length ; System . out . println ( sum ( a , n ) ) ; } }"],"references":["import java . util . Arrays ; class GFG { static int getElement ( int a [ ] , int n , int S ) { Arrays . sort ( a ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( sum + ( a [ i ] * ( n - i ) ) == S ) return a [ i ] ; sum += a [ i ] ; } return - 1 ; } public static void main ( String [ ] args ) { int S = 5 ; int a [ ] = { 1 , 3 , 2 , 5 , 8 } ; int n = a . length ; System . out . println ( getElement ( a , n , S ) ) ; } }"],"bleu":0.5693603355975186,"rouge_l":0.7392659279778393}
{"id":1392,"predictions":["import java . util . * ; class GFG { static boolean isVowel ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) return false ; } return true ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = arr . length ; if ( isVowel ( arr , n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static boolean canMakeEqual ( int a [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { while ( a [ i ] % 5 == 0 ) { a [ i ] \/= 5 ; } while ( a [ i ] % 3 == 0 ) { a [ i ] \/= 3 ; } } int last = a [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( a [ i ] != last ) { return false ; } } return true ; } public static void main ( String [ ] args ) { int arr [ ] = { 18 , 30 , 54 , 90 , 162 } ; int n = arr . length ; if ( canMakeEqual ( arr , n ) ) { System . out . print ( \" YES \" + \" \\n \" ) ; } else { System . out . print ( \" NO \" + \" \\n \" ) ; } } }"],"bleu":0.3726313730532974,"rouge_l":0.6207436399217221}
{"id":1393,"predictions":["import java . io . * ; class GFG { static void print ( int a [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) System . out . print ( a [ i ] + \" \" ) ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( a [ i ] + \" \" ) ; System . out . println ( ) ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = a . length ; print ( a , n ) ; } }"],"references":["import java . * ; public class GFG { public static void main ( String a [ ] ) { int x = 10 ; int y = 5 ; x = x ^ y ; y = x ^ y ; x = x ^ y ; System . out . println ( \" After ▁ swap : ▁ x ▁ = ▁ \" + x + \" , ▁ y ▁ = ▁ \" + y ) ; } }"],"bleu":0.15573979456678472,"rouge_l":0.3553211586901763}
{"id":1394,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = sc . nextInt ( ) ; Arrays . sort ( a ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % 2 == 0 ) { count ++ ; } } out . println ( count ) ; out . close ( ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } }"],"references":["import java . util . * ; class geeks { public static int minimumOperations ( int [ ] a , int n ) { HashMap < Integer , Integer > mp = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( mp . get ( a [ i ] ) != null ) { int x = mp . get ( a [ i ] ) ; mp . put ( a [ i ] , ++ x ) ; } else mp . put ( a [ i ] , 1 ) ; } int count = 0 ; for ( HashMap . Entry < Integer , Integer > entry : mp . entrySet ( ) ) { if ( entry . getValue ( ) > 1 ) { count += ( entry . getValue ( ) - 1 ) ; } } return count ; } public static void main ( String [ ] args ) { int [ ] a = { 2 , 1 , 2 , 3 , 3 , 4 , 3 } ; int n = a . length ; System . out . println ( minimumOperations ( a , n ) ) ; } }"],"bleu":0.2380211718885276,"rouge_l":0.37250747756729813}
{"id":1395,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int count ( int a [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( a [ i ] > a [ j ] ) { count ++ ; } } } return count ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 4 , 3 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4"],"references":["import java . util . * ; class GFG { static int xorRange ( int pre [ ] , int l , int r ) { int cntOnes = pre [ r ] ; if ( l - 1 >= 0 ) cntOnes -= pre [ l - 1 ] ; if ( cntOnes % 2 == 0 ) return 0 ; else return 1 ; } static void performQueries ( int queries [ ] [ ] , int q , int a [ ] , int n ) { int [ ] pre = new int [ n ] ; pre [ 0 ] = a [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) pre [ i ] = pre [ i - 1 ] + a [ i ] ; for ( int i = 0 ; i < q ; i ++ ) System . out . println ( xorRange ( pre , queries [ i ] [ 0 ] , queries [ i ] [ 1 ] ) ) ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 0 , 1 , 1 , 0 , 1 , 1 } ; int n = a . length ; int queries [ ] [ ] = { { 0 , 3 } , { 0 , 2 } } ; int q = queries . length ; performQueries ( queries , q , a , n ) ; } }"],"bleu":0.1368395786621454,"rouge_l":0.24688494770350158}
{"id":1396,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["class gfg { static int countNums ( int n , int x , int y ) { boolean [ ] arr = new boolean [ n + 1 ] ; if ( x <= n ) arr [ x ] = true ; if ( y <= n ) arr [ y ] = true ; int result = 0 ; for ( int i = Math . min ( x , y ) ; i <= n ; i ++ ) { if ( arr [ i ] ) { if ( i + x <= n ) arr [ i + x ] = true ; if ( i + y <= n ) arr [ i + y ] = true ; result ++ ; } } return result ; } public static void main ( String [ ] args ) { int n = 15 , x = 5 , y = 7 ; System . out . println ( countNums ( n , x , y ) ) ; } }"],"bleu":0.24468611852840857,"rouge_l":0.44131303314976783}
{"id":1397,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { System . out . print ( a [ i ] + \" \" ) ; } System . out . println ( ) ; } } }"],"references":["class GFG { static int get_max_splits ( String num_String ) { int count = 0 , current_num ; int running_sum = 0 ; for ( int i = 0 ; i < num_String . length ( ) ; i ++ ) { current_num = num_String . charAt ( i ) - '0' ; running_sum += current_num ; if ( current_num % 3 == 0 || ( running_sum != 0 && running_sum % 3 == 0 ) ) { count += 1 ; running_sum = 0 ; } } return count ; } public static void main ( String [ ] args ) { System . out . print ( get_max_splits ( \"12345\" ) + \" \\n \" ) ; } }"],"bleu":0.30453874263435093,"rouge_l":0.4311785117594139}
{"id":1398,"predictions":["import java . io . * ; class GFG { static int nthTerm ( int n ) { return n * ( n + 1 ) \/ 2 ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( nthTerm ( n ) ) ; } }"],"references":["import java . io . * ; class Series { static int term ( int n ) { return n * ( n + 1 ) \/ 2 ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( term ( n ) ) ; } }"],"bleu":0.870857556702545,"rouge_l":0.9500000000000002}
{"id":1399,"predictions":["import java . io . * ; class GFG { public static void main ( String [ ] args ) { double a = 5 ; double b = 5 ; System . out . println ( a * b * a * b ) ; } }"],"references":["import java . io . * ; class GFG { static void anglequichord ( int z ) { System . out . println ( \" The ▁ angle ▁ is ▁ \" + z + \" ▁ degrees \" ) ; } public static void main ( String [ ] args ) { int z = 48 ; anglequichord ( z ) ; } }"],"bleu":0.3870178068109707,"rouge_l":0.4824858757062147}
{"id":1400,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( n % i == 0 ) { count ++ ; } } return count ; } public static void main ( String [ ] args ) { int n = 10 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . io . * ; class GFG { static int findLength ( String str ) { int n = str . length ( ) ; int maxlen = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j += 2 ) { int length = j - i + 1 ; int leftsum = 0 , rightsum = 0 ; for ( int k = 0 ; k < length \/ 2 ; k ++ ) { leftsum += ( str . charAt ( i + k ) - '0' ) ; rightsum += ( str . charAt ( i + k + length \/ 2 ) - '0' ) ; } if ( leftsum == rightsum && maxlen < length ) maxlen = length ; } } return maxlen ; } public static void main ( String [ ] args ) { String str = \"1538023\" ; System . out . println ( \" Length ▁ of ▁ the ▁ substring ▁ is ▁ \" + findLength ( str ) ) ; } }"],"bleu":0.2404586450845877,"rouge_l":0.44350196910027273}
{"id":1401,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int count ( int a [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % 2 == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = a . length ; System . out . println ( count ( a , n ) ) ; } }"],"references":["class GFG { static int MOD = 2019 ; static int min_modulo ( int l , int r ) { if ( r - l >= MOD ) return 0 ; else { int ans = MOD - 1 ; for ( int i = l ; i <= r ; i ++ ) { for ( int j = i + 1 ; j <= r ; j ++ ) { ans = Math . min ( ans , ( i * j ) % MOD ) ; } } return ans ; } } public static void main ( String [ ] args ) { int l = 2020 , r = 2040 ; System . out . println ( min_modulo ( l , r ) ) ; } }"],"bleu":0.31380858018257646,"rouge_l":0.5003845167905665}
{"id":1402,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int maxSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }"],"references":["class GFG { static int countPairsWithProdK ( int arr [ ] , int n , int k ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) if ( arr [ i ] * arr [ j ] == k ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 5 , 3 , 4 , 2 } ; int N = arr . length ; int K = 3 ; System . out . println ( countPairsWithProdK ( arr , N , K ) ) ; } }"],"bleu":0.5125931437988659,"rouge_l":0.6895311496467567}
{"id":1403,"predictions":["import java . io . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["class GFG { public static int Xor_Sum ( int [ ] arr , int n ) { int sum = 0 , index = - 1 ; int left_xor = 0 , right_xor = 0 ; for ( int i = 0 ; i < n ; i ++ ) { left_xor = left_xor ^ arr [ i ] ; right_xor = 0 ; for ( int j = i + 1 ; j < n ; j ++ ) { right_xor = right_xor ^ arr [ j ] ; } if ( left_xor + right_xor > sum ) { sum = left_xor + right_xor ; index = i ; } } return index + 1 ; } public static void main ( String [ ] args ) { int [ ] arr = { 1 , 4 , 6 , 3 , 8 , 13 , 34 , 2 , 21 , 10 } ; int n = arr . length ; System . out . println ( Xor_Sum ( arr , n ) ) ; } }"],"bleu":0.4574722372043817,"rouge_l":0.6387122027595655}
{"id":1404,"predictions":["import java . io . * ; import java . util . * ; class GFG { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { System . out . print ( a [ i ] + \" \" ) ; } System . out . println ( ) ; } }"],"references":["import java . util . * ; import java . lang . * ; public class GfG { public static void print ( char a [ ] , int n , int ind ) { for ( int i = ind ; i < n + ind ; i ++ ) System . out . print ( a [ ( i % n ) ] + \" ▁ \" ) ; } public static void main ( String argc [ ] ) { char [ ] a = new char [ ] { ' A ' , ' B ' , ' C ' , ' D ' , ' E ' , ' F ' } ; int n = 6 ; print ( a , n , 3 ) ; } }"],"bleu":0.34004164513955715,"rouge_l":0.42978266061619297}
{"id":1405,"predictions":["import java . io . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; return false ; } static boolean isPrime ( int n ) { if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 12 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static int printPattern ( int i , int j , int n ) { if ( j >= n ) { return 0 ; } if ( i >= n ) { return 1 ; } if ( j == i || j == n - 1 - i ) { if ( i == n - 1 - j ) { System . out . print ( \" \/ \" ) ; } else { System . out . print ( \" \\ \\\" ) ; } } else { System . out . print ( \" * \" ) ; } if ( printPattern ( i , j + 1 , n ) == 1 ) { return 1 ; } System . out . println ( ) ; return printPattern ( i + 1 , 0 , n ) ; } public static void main ( String [ ] args ) { int N = 9 ; printPattern ( 0 , 0 , N ) ; } }"],"bleu":0.2440139289179438,"rouge_l":0.41876430205949655}
{"id":1406,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int maxSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }"],"references":["import java . util . Arrays ; class GFG { static int findMaxValue ( int [ ] arr , int n ) { if ( n < 4 ) { System . out . println ( \" The ▁ array ▁ should ▁ have \" + \" ▁ atleast ▁ 4 ▁ elements \" ) ; } int table1 [ ] = new int [ n + 1 ] ; int table2 [ ] = new int [ n ] ; int table3 [ ] = new int [ n - 1 ] ; int table4 [ ] = new int [ n - 2 ] ; Arrays . fill ( table1 , Integer . MIN_VALUE ) ; Arrays . fill ( table2 , Integer . MIN_VALUE ) ; Arrays . fill ( table3 , Integer . MIN_VALUE ) ; Arrays . fill ( table4 , Integer . MIN_VALUE ) ; for ( int i = n - 1 ; i >= 0 ; i -- ) { table1 [ i ] = Math . max ( table1 [ i + 1 ] , arr [ i ] ) ; } for ( int i = n - 2 ; i >= 0 ; i -- ) { table2 [ i ] = Math . max ( table2 [ i + 1 ] , table1 [ i + 1 ] - arr [ i ] ) ; } for ( int i = n - 3 ; i >= 0 ; i -- ) table3 [ i ] = Math . max ( table3 [ i + 1 ] , table2 [ i + 1 ] + arr [ i ] ) ; for ( int i = n - 4 ; i >= 0 ; i -- ) table4 [ i ] = Math . max ( table4 [ i + 1 ] , table3 [ i + 1 ] - arr [ i ] ) ; return table4 [ 0 ] ; } public static void main ( String [ ] args ) { int arr [ ] = { 4 , 8 , 9 , 2 , 20 } ; int n = arr . length ; System . out . println ( findMaxValue ( arr , n ) ) ; } }"],"bleu":0.08810260737144843,"rouge_l":0.3703168362627197}
{"id":1407,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int countPairs ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( countPairs ( arr , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static void printElements ( int a [ ] , int n ) { Arrays . sort ( a ) ; a = reverse ( a ) ; int cnt = 1 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] != a [ i + 1 ] ) { System . out . print ( a [ i ] + \" ▁ occurs ▁ \" + cnt + \" ▁ times \\n \" ) ; cnt = 1 ; } else cnt += 1 ; } System . out . print ( a [ n - 1 ] + \" ▁ occurs ▁ \" + cnt + \" ▁ times \\n \" ) ; } static int [ ] reverse ( int a [ ] ) { int i , n = a . length , t ; for ( i = 0 ; i < n \/ 2 ; i ++ ) { t = a [ i ] ; a [ i ] = a [ n - i - 1 ] ; a [ n - i - 1 ] = t ; } return a ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 1 , 1 , 2 , 3 , 4 , 9 , 9 , 10 } ; int n = a . length ; printElements ( a , n ) ; } }"],"bleu":0.16784662658460356,"rouge_l":0.4244149272612271}
{"id":1408,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["class GFG { static int findMin ( int arr [ ] , int n ) { int m = 0 ; for ( int i = 0 ; i < n ; i ++ ) m = Math . max ( m , arr [ i ] ) ; int freq [ ] = new int [ m + 2 ] ; for ( int i = 0 ; i < n ; i ++ ) freq [ arr [ i ] ] ++ ; for ( int i = 1 ; i <= m + 1 ; i ++ ) { int j = i ; int cnt = 0 ; while ( j <= m ) { cnt += freq [ j ] ; j += i ; } if ( cnt == 0 ) return i ; } return m + 1 ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 12 , 6 } ; int n = arr . length ; System . out . println ( findMin ( arr , n ) ) ; } }"],"bleu":0.5384568703753102,"rouge_l":0.6494458504232481}
{"id":1409,"predictions":["import java . util . * ; class GFG { static boolean isVowel ( int a [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) isVowel ( a [ i ] , a [ i ] ) ; return isVowel ( a [ i ] , a [ i ] ) ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 } ; int n = a . length ; if ( isVowel ( a , n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static void swapOperations ( char [ ] a , char [ ] b , char [ ] c ) { int l = a . length ; int i = 0 ; int total_swaps = 0 ; char temp ; for ( i = 0 ; i < l ; i ++ ) { if ( a [ i ] == b [ i ] ) continue ; if ( a [ i ] == c [ i ] ) { temp = b [ i ] ; b [ i ] = c [ i ] ; c [ i ] = temp ; total_swaps ++ ; continue ; } if ( b [ i ] == c [ i ] ) { temp = a [ i ] ; a [ i ] = c [ i ] ; c [ i ] = temp ; total_swaps ++ ; continue ; } break ; } if ( i == l ) System . out . println ( total_swaps ) ; else System . out . println ( - 1 ) ; } public static void main ( String [ ] args ) { String a = \" xyz \" ; String b = \" yzx \" ; String c = \" yzx \" ; swapOperations ( a . toCharArray ( ) , b . toCharArray ( ) , c . toCharArray ( ) ) ; } }"],"bleu":0.21946957709496467,"rouge_l":0.4012497944417037}
{"id":1410,"predictions":["import java . io . * ; import java . util . * ; class GFG { public static void main ( String [ ] args ) { int a = 2 , b = 3 , c = 5 ; System . out . println ( Math . min ( a , b ) + \" \" + Math . min ( b , c ) ) ; } }"],"references":["class GFG { static int findMinimumZ ( int n , int a , int b ) { if ( a > b ) { swap ( a , b ) ; } int distClock = b - a ; int distAntiClock = ( a - 1 ) + ( n - b + 1 ) ; int minDist = Math . min ( distClock , distAntiClock ) ; if ( minDist == 1 ) { return 3 ; } return minDist ; } private static void swap ( int x , int y ) { int temp = x ; x = y ; y = temp ; } public static void main ( String [ ] args ) { int n = 4 , a = 1 , b = 2 ; System . out . println ( findMinimumZ ( n , a , b ) ) ; } }"],"bleu":0.14354980770947454,"rouge_l":0.3129940368880876}
{"id":1411,"predictions":["import java . io . * ; import java . util . * ; import java . lang . * ; import java . math . * ; class GFG { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; System . out . println ( n * ( n + 1 ) \/ 2 ) ; } }"],"references":["class GFG { static int solve ( int ang , int n ) { if ( ( ang * n ) > ( 180 * ( n - 2 ) ) ) { return 0 ; } else if ( ( ang * n ) % 180 != 0 ) { return 0 ; } int ans = 1 ; int freq = ( ang * n ) \/ 180 ; ans = ans * ( n - 1 - freq ) ; ans = ans * n ; return ans ; } public static void main ( String [ ] args ) { int ang = 90 , n = 4 ; System . out . println ( solve ( ang , n ) ) ; } }"],"bleu":0.17492009167091144,"rouge_l":0.3292847503373819}
{"id":1412,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 3 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static boolean bitsAreInAltPatrnInGivenTRange ( int n , int l , int r ) { int num , prev , curr ; num = n >> ( l - 1 ) ; prev = num & 1 ; num = num >> 1 ; for ( int i = 1 ; i <= ( r - l ) ; i ++ ) { curr = num & 1 ; if ( curr == prev ) return false ; prev = curr ; num = num >> 1 ; } return true ; } public static void main ( String [ ] args ) { int n = 18 ; int l = 1 , r = 3 ; if ( bitsAreInAltPatrnInGivenTRange ( n , l , r ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.35075542089081907,"rouge_l":0.5294526096516607}
{"id":1413,"predictions":["import java . io . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["public class GFG { static int countFibs ( int low , int high ) { int f1 = 0 , f2 = 1 , f3 = 1 ; int result = 0 ; while ( f1 <= high ) { if ( f1 >= low ) result ++ ; f1 = f2 ; f2 = f3 ; f3 = f1 + f2 ; } return result ; } public static void main ( String args [ ] ) { int low = 10 , high = 100 ; System . out . println ( \" Count ▁ of ▁ Fibonacci ▁ Numbers ▁ is ▁ \" + countFibs ( low , high ) ) ; } }"],"bleu":0.229785925203134,"rouge_l":0.46558538912362}
{"id":1414,"predictions":["import java . io . * ; class GFG { static int nthTerm ( int N ) { return ( int ) Math . pow ( N , 2 ) ; } public static void main ( String [ ] args ) { int N = 4 ; System . out . println ( nthTerm ( N ) ) ; } }"],"references":["import java . io . * ; class GFG { static void Sum_upto_nth_Term ( int n ) { int r = n * ( n + 1 ) * ( 2 * n + 7 ) \/ 3 ; System . out . println ( r ) ; } public static void main ( String [ ] args ) { int N = 5 ; Sum_upto_nth_Term ( N ) ; } }"],"bleu":0.5153271197641138,"rouge_l":0.6332689521970064}
{"id":1415,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int a , int b ) { if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; return false ; return false ; } public static void main ( String [ ] args ) { int a = 10 , b = 15 ; if ( isPrime ( a , b ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static class Node { int data ; Node next ; } static Node first , last ; static int length = 0 ; static void printList ( Node node ) { while ( node != null ) { System . out . printf ( \" % d ▁ \" , node . data ) ; node = node . next ; } } static void moveToFront ( Node head , Node p , int m ) { if ( head == null ) return ; p = head ; head = head . next ; m ++ ; if ( length == m ) { p . next = null ; last . next = first ; first = head ; } else moveToFront ( head , p , m ) ; } static Node push ( Node head_ref , int new_data ) { Node new_node = new Node ( ) ; new_node . data = new_data ; new_node . next = head_ref ; head_ref = new_node ; if ( length == 0 ) last = head_ref ; else first = head_ref ; length ++ ; return head_ref ; } public static void main ( String [ ] args ) { Node start = null ; start = push ( start , 5 ) ; start = push ( start , 4 ) ; start = push ( start , 3 ) ; start = push ( start , 2 ) ; start = push ( start , 1 ) ; start = push ( start , 0 ) ; System . out . printf ( \" \\n ▁ Initial ▁ Linked ▁ list \\n \" ) ; printList ( start ) ; int m = 4 ; Node temp = new Node ( ) ; moveToFront ( start , temp , m ) ; System . out . printf ( \" \\n ▁ Final ▁ Linked ▁ list \\n \" ) ; start = first ; printList ( start ) ; } }"],"bleu":0.09819378798733162,"rouge_l":0.29965156794425085}
{"id":1416,"predictions":["import java . io . * ; class GFG { static int countPairs ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 1 , 1 , 1 , 1 } ; int n = arr . length ; System . out . println ( countPairs ( arr , n ) ) ; } }"],"references":["import java . io . * ; import java . util . * ; public class GFG { static void printRepeating ( Integer [ ] arr , int size ) { SortedSet < Integer > s = new TreeSet < > ( ) ; Collections . addAll ( s , arr ) ; System . out . print ( s ) ; } public static void main ( String args [ ] ) { Integer [ ] arr = { 1 , 3 , 2 , 2 , 1 } ; int n = arr . length ; printRepeating ( arr , n ) ; } }"],"bleu":0.36539276461159603,"rouge_l":0.5803478519399435}
{"id":1417,"predictions":["import java . io . * ; class GFG { static int maxSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }"],"references":["public class GFG { static int maxsum_SIS ( int arr [ ] , int n ) { int max_sum = 0 ; int current_sum = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i - 1 ] < arr [ i ] ) { current_sum = current_sum + arr [ i ] ; } else { max_sum = Math . max ( max_sum , current_sum ) ; current_sum = arr [ i ] ; } } return Math . max ( max_sum , current_sum ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 2 , 4 } ; int n = arr . length ; System . out . println ( \" Maximum ▁ sum ▁ : ▁ \" + maxsum_SIS ( arr , n ) ) ; } }"],"bleu":0.43095934644033856,"rouge_l":0.6318267419962337}
{"id":1418,"predictions":["import java . io . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["import java . util . * ; class geeks { public static int sumoflength ( int [ ] arr , int n ) { Set < Integer > s = new HashSet < > ( ) ; int j = 0 , ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { while ( j < n && ! s . contains ( arr [ j ] ) ) { s . add ( arr [ i ] ) ; j ++ ; } ans += ( ( j - i ) * ( j - i + 1 ) ) \/ 2 ; s . remove ( arr [ i ] ) ; } return ans ; } public static void main ( String [ ] args ) { int [ ] arr = { 1 , 2 , 3 , 4 } ; int n = arr . length ; System . out . println ( sumoflength ( arr , n ) ) ; } }"],"bleu":0.4272211996187518,"rouge_l":0.6314322683388076}
{"id":1419,"predictions":["import java . io . * ; import java . util . * ; import java . lang . * ; class GFG { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( a [ i ] > b [ j ] ) { System . out . println ( i + 1 ) ; return ; } } } System . out . println ( - 1 ) ; } }"],"references":["import java . util . * ; class GFG { static void printVector ( Vector < Integer > v , int i ) { for ( int j = i ; j < v . size ( ) ; j ++ ) System . out . print ( v . get ( j ) + \" ▁ \" ) ; System . out . println ( ) ; } static class Node { int data ; Node left , right ; Node ( int x ) { data = x ; left = right = null ; } } ; static Vector < Integer > path = new Vector < Integer > ( ) ; static void printKPathUtil ( Node root , int k ) { if ( root == null ) return ; path . add ( root . data ) ; printKPathUtil ( root . left , k ) ; printKPathUtil ( root . right , k ) ; int f = 0 ; for ( int j = path . size ( ) - 1 ; j >= 0 ; j -- ) { f += path . get ( j ) ; if ( f == k ) printVector ( path , j ) ; } path . remove ( path . size ( ) - 1 ) ; } static void printKPath ( Node root , int k ) { path = new Vector < Integer > ( ) ; printKPathUtil ( root , k ) ; } public static void main ( String args [ ] ) { Node root = new Node ( 1 ) ; root . left = new Node ( 3 ) ; root . left . left = new Node ( 2 ) ; root . left . right = new Node ( 1 ) ; root . left . right . left = new Node ( 1 ) ; root . right = new Node ( - 1 ) ; root . right . left = new Node ( 4 ) ; root . right . left . left = new Node ( 1 ) ; root . right . left . right = new Node ( 2 ) ; root . right . right = new Node ( 5 ) ; root . right . right . right = new Node ( 2 ) ; int k = 5 ; printKPath ( root , k ) ; } }"],"bleu":0.10616387135775904,"rouge_l":0.2546524494517654}
{"id":1420,"predictions":["import java . io . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 2 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["import java . util . Arrays ; class GFG { static void reverseArray ( int arr [ ] , int n ) { for ( int i = 0 ; i < n \/ 2 ; i ++ ) { swap ( arr , i , ( n + ~ i + 1 ) + ~ 1 + 1 ) ; } } static int [ ] swap ( int [ ] arr , int i , int j ) { int temp = arr [ i ] ; arr [ i ] = arr [ j ] ; arr [ j ] = temp ; return arr ; } public static void main ( String args [ ] ) { int arr [ ] = { 5 , 3 , 7 , 2 , 1 , 6 } ; int n = arr . length ; reverseArray ( arr , n ) ; for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( arr [ i ] + \" ▁ \" ) ; } } }"],"bleu":0.3948049674609252,"rouge_l":0.5527232898536295}
{"id":1421,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int a , int b ) { if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; return false ; return false ; } public static void main ( String [ ] args ) { int a = 10 , b = 15 ; if ( isPrime ( a , b ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static class Node { int data ; Node next , prev ; } ; static Node getNode ( int data ) { Node new_node = new Node ( ) ; new_node . data = data ; new_node . next = new_node . prev = null ; return new_node ; } static Node push ( Node head_ref , Node new_node ) { new_node . prev = null ; new_node . next = ( head_ref ) ; if ( ( head_ref ) != null ) ( head_ref ) . prev = new_node ; ( head_ref ) = new_node ; return head_ref ; } static Node reverseList ( Node head_ref ) { if ( ( head_ref ) == null || ( ( head_ref ) . next ) == null ) return null ; Node new_head = null ; Node curr = head_ref , next ; while ( curr != null ) { next = curr . next ; new_head = push ( new_head , curr ) ; curr = next ; } head_ref = new_head ; return head_ref ; } static void printList ( Node head ) { while ( head != null ) { System . out . print ( head . data + \" ▁ \" ) ; head = head . next ; } } public static void main ( String args [ ] ) { Node head = null ; head = push ( head , getNode ( 2 ) ) ; head = push ( head , getNode ( 4 ) ) ; head = push ( head , getNode ( 8 ) ) ; head = push ( head , getNode ( 10 ) ) ; System . out . print ( \" Original ▁ list : ▁ \" ) ; printList ( head ) ; head = reverseList ( head ) ; System . out . print ( \" \\n Reversed ▁ list : ▁ \" ) ; printList ( head ) ; } }"],"bleu":0.08058097720768649,"rouge_l":0.3274080914180181}
{"id":1422,"predictions":["import java . io . * ; import java . util . * ; import java . lang . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) throws java . lang . Exception { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int N = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; System . out . println ( N * M ) ; } }"],"references":["import java . util . * ; import java . lang . * ; import java . io . * ; public class GFG { static double decdiagonal ( double a ) { if ( a < 0 ) return - 1 ; double d = 1.902 * a ; return d ; } public static void main ( String [ ] args ) { int a = 9 ; System . out . println ( decdiagonal ( a ) ) ; } }"],"bleu":0.3588445166919962,"rouge_l":0.47991295614328755}
{"id":1423,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["class GFG { static int findSum ( int N , int k ) { int sum = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { sum += ( int ) Math . pow ( i , k ) ; } return sum ; } public static void main ( String [ ] args ) { int N = 8 , k = 4 ; System . out . println ( findSum ( N , k ) ) ; } }"],"bleu":0.4476087420520915,"rouge_l":0.6761840779308029}
{"id":1424,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i ) ) count ++ ; } System . out . println ( count ) ; } }"],"references":["import java . util . Arrays ; import java . util . Stack ; class GFG { static void reverse ( String k ) { Stack < String > s = new Stack < > ( ) ; String [ ] token = k . split ( \" ▁ \" ) ; for ( int i = 0 ; i < token . length ; i ++ ) { s . push ( token [ i ] ) ; } while ( ! s . empty ( ) ) { System . out . print ( s . peek ( ) + \" ▁ \" ) ; s . pop ( ) ; } } public static void main ( String [ ] args ) { String k = \" geeks ▁ for ▁ geeks \" ; reverse ( k ) ; } }"],"bleu":0.2619644756662045,"rouge_l":0.4574605637445049}
{"id":1425,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static boolean subArray ( int [ ] arr , int n , int m ) { int i ; HashMap < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; for ( i = 0 ; i < n ; i ++ ) { mp . put ( arr [ i ] , i + 1 ) ; } int sumcur = 0 ; int p = Integer . MAX_VALUE ; Vector < Integer > ans = new Vector < Integer > ( ) ; for ( i = 1 ; i <= m ; i ++ ) { sumcur += mp . get ( i ) ; p = Math . min ( p , mp . get ( i ) ) ; int val = p * i - i + ( i * ( i + 1 ) ) \/ 2 ; if ( i == m ) { if ( val == sumcur ) { return true ; } else return false ; } } return false ; } public static void main ( String [ ] args ) { int arr [ ] = { 4 , 5 , 1 , 3 , 2 , 6 } ; int n = arr . length ; int m = 3 ; if ( subArray ( arr , n , m ) ) System . out . print ( \" Yes \" ) ; else System . out . print ( \" No \" ) ; } }"],"bleu":0.27352665946688975,"rouge_l":0.4805452801753665}
{"id":1426,"predictions":["import java . io . * ; import java . util . * ; class GFG { public static void main ( String [ ] args ) { String s = \" geeksforgeeks \" ; int n = s . length ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = s . charAt ( i ) ; } for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = s . charAt ( i ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { System . out . print ( a [ i ] + \" \" ) ; } System . out . println ( ) ; } }"],"references":["import java . util . * ; public class GFG { static class Graph { int V ; LinkedList < Integer > [ ] adj ; Graph ( int V ) { this . V = V ; adj = new LinkedList [ V ] ; for ( int i = 0 ; i < adj . length ; i ++ ) adj [ i ] = new LinkedList < Integer > ( ) ; } void addEdge ( int v , int w ) { adj [ v ] . add ( w ) ; } void DFS ( int s ) { Vector < Boolean > visited = new Vector < Boolean > ( V ) ; for ( int i = 0 ; i < V ; i ++ ) visited . add ( false ) ; Stack < Integer > stack = new Stack < > ( ) ; stack . push ( s ) ; while ( stack . empty ( ) == false ) { s = stack . peek ( ) ; stack . pop ( ) ; if ( visited . get ( s ) == false ) { System . out . print ( s + \" ▁ \" ) ; visited . set ( s , true ) ; } Iterator < Integer > itr = adj [ s ] . iterator ( ) ; while ( itr . hasNext ( ) ) { int v = itr . next ( ) ; if ( ! visited . get ( v ) ) stack . push ( v ) ; } } } } public static void main ( String [ ] args ) { Graph g = new Graph ( 5 ) ; g . addEdge ( 1 , 0 ) ; g . addEdge ( 0 , 2 ) ; g . addEdge ( 2 , 1 ) ; g . addEdge ( 0 , 3 ) ; g . addEdge ( 1 , 4 ) ; System . out . println ( \" Following ▁ is ▁ the ▁ Depth ▁ First ▁ Traversal \" ) ; g . DFS ( 0 ) ; } }"],"bleu":0.12628426956918704,"rouge_l":0.33192049945586805}
{"id":1427,"predictions":["import java . io . * ; class GFG { static boolean isDivisible ( int a , int b ) { for ( int i = 0 ; i < a ; i ++ ) { if ( a % b == 0 ) return false ; } return false ; } static boolean isDivisible ( int a , int b ) { if ( a % b == 0 ) return false ; if ( b % a == 0 ) return false ; return false ; } public static void main ( String [ ] args ) { int a = 10 , b = 10 ; if ( isDivisible ( a , b ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; class solution { static class Node { int data ; Node left , right ; } ; static Node newNode ( int data ) { Node node = new Node ( ) ; node . data = data ; node . left = node . right = null ; return ( node ) ; } static void diagonalPrint ( Node root ) { if ( root == null ) return ; Queue < Node > q = new LinkedList < Node > ( ) ; q . add ( root ) ; q . add ( null ) ; while ( q . size ( ) > 0 ) { Node temp = q . peek ( ) ; q . remove ( ) ; if ( temp == null ) { if ( q . size ( ) == 0 ) return ; System . out . println ( ) ; q . add ( null ) ; } else { while ( temp != null ) { System . out . print ( temp . data + \" ▁ \" ) ; if ( temp . left != null ) q . add ( temp . left ) ; temp = temp . right ; } } } } public static void main ( String args [ ] ) { Node root = newNode ( 8 ) ; root . left = newNode ( 3 ) ; root . right = newNode ( 10 ) ; root . left . left = newNode ( 1 ) ; root . left . right = newNode ( 6 ) ; root . right . right = newNode ( 14 ) ; root . right . right . left = newNode ( 13 ) ; root . left . right . left = newNode ( 4 ) ; root . left . right . right = newNode ( 7 ) ; diagonalPrint ( root ) ; } }"],"bleu":0.0673502641711834,"rouge_l":0.28546701711648187}
{"id":1428,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int maxSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }"],"references":["class GFG { static int __gcd ( int a , int b ) { if ( b == 0 ) return a ; return __gcd ( b , a % b ) ; } static char getWinner ( int [ ] arr , int n ) { int gcd = arr [ 0 ] ; int maxEle = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { gcd = __gcd ( gcd , arr [ i ] ) ; maxEle = Math . max ( maxEle , arr [ i ] ) ; } int totalMoves = ( maxEle \/ gcd ) - n ; if ( totalMoves % 2 == 1 ) return ' A ' ; return ' B ' ; } public static void main ( String args [ ] ) { int [ ] arr = { 5 , 6 , 7 } ; int n = arr . length ; System . out . print ( getWinner ( arr , n ) ) ; } }"],"bleu":0.2819007014781046,"rouge_l":0.518631258528393}
{"id":1429,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int countPairs ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ i ] > arr [ j ] ) count ++ ; } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 1 , 1 , 1 , 1 } ; int n = arr . length ; System . out . println ( countPairs ( arr , n ) ) ; } }"],"references":["import java . io . * ; class GFG { static void CountingEvenOdd ( int arr [ ] , int arr_size ) { int even_count = 0 ; int odd_count = 0 ; for ( int i = 0 ; i < arr_size ; i ++ ) { if ( ( arr [ i ] & 1 ) == 1 ) odd_count ++ ; else even_count ++ ; } System . out . println ( \" Number ▁ of ▁ even \" + \" ▁ elements ▁ = ▁ \" + even_count + \" ▁ Number ▁ of ▁ odd ▁ elements ▁ = ▁ \" + odd_count ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 3 , 4 , 5 , 6 } ; int n = arr . length ; CountingEvenOdd ( arr , n ) ; } }"],"bleu":0.48990610868172163,"rouge_l":0.5995582551076754}
{"id":1430,"predictions":["import java . io . * ; import java . util . * ; class GFG { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { System . out . print ( a [ i ] + \" \" ) ; } System . out . println ( ) ; } }"],"references":["class GFG { static int findSum ( String str ) { String temp = \" \" ; int sum = 0 ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { char ch = str . charAt ( i ) ; if ( Character . isDigit ( ch ) ) temp += ch ; else { sum += Integer . parseInt ( temp ) ; temp = \"0\" ; } } return sum + Integer . parseInt ( temp ) ; } public static void main ( String [ ] args ) { String str = \"12abc20yz68\" ; System . out . println ( findSum ( str ) ) ; } }"],"bleu":0.28129704229395,"rouge_l":0.4147569881641904}
{"id":1431,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int countPairs ( int a [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % 2 == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = a . length ; System . out . println ( countPairs ( a , n ) ) ; } }"],"references":["class fibonacci { static int fib ( int n ) { int f [ ] = new int [ n + 2 ] ; int i ; f [ 0 ] = 0 ; f [ 1 ] = 1 ; for ( i = 2 ; i <= n ; i ++ ) { f [ i ] = f [ i - 1 ] + f [ i - 2 ] ; } return f [ n ] ; } public static void main ( String args [ ] ) { int n = 9 ; System . out . println ( fib ( n ) ) ; } }"],"bleu":0.31934164096650725,"rouge_l":0.5378270762229808}
{"id":1432,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["import java . io . * ; class GFG { static long oddNumSum ( int n ) { int j = 0 ; long sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { j = ( 2 * i - 1 ) ; sum = sum + ( j * j * j * j ) ; } return sum ; } public static void main ( String args [ ] ) { int n = 6 ; System . out . println ( oddNumSum ( n ) ) ; } }"],"bleu":0.5408630846540398,"rouge_l":0.7028962939894114}
{"id":1433,"predictions":["import java . io . * ; class GFG { static boolean isVowel ( int a , int b ) { if ( a < b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; return false ; } public static void main ( String [ ] args ) { int a = 12 , b = 12 ; if ( isVowel ( a , b ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static void findAandB ( double N ) { double val = N * N - 4.0 * N ; if ( val < 0 ) { System . out . println ( \" NO \" ) ; return ; } double a = ( N + Math . sqrt ( val ) ) \/ 2.0 ; double b = ( N - Math . sqrt ( val ) ) \/ 2.0 ; System . out . println ( \" a ▁ = ▁ \" + a ) ; System . out . println ( \" b ▁ = ▁ \" + b ) ; } public static void main ( String [ ] args ) { double N = 69.0 ; findAandB ( N ) ; } }"],"bleu":0.27867451268550547,"rouge_l":0.37768409959162164}
{"id":1434,"predictions":["import java . io . * ; import java . util . * ; class GFG { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { System . out . print ( a [ i ] + \" \" ) ; } System . out . println ( ) ; } } }"],"references":["class GFG { public static void reverse ( char str [ ] ) { int r = str . length - 1 , l = 0 ; while ( l < r ) { if ( ! Character . isAlphabetic ( str [ l ] ) ) l ++ ; else if ( ! Character . isAlphabetic ( str [ r ] ) ) r -- ; else { char tmp = str [ l ] ; str [ l ] = str [ r ] ; str [ r ] = tmp ; l ++ ; r -- ; } } } public static void main ( String [ ] args ) { String str = \" a ! ! ! b . c . d , e ' f , ghi \" ; char [ ] charArray = str . toCharArray ( ) ; System . out . println ( \" Input ▁ string : ▁ \" + str ) ; reverse ( charArray ) ; String revStr = new String ( charArray ) ; System . out . println ( \" Output ▁ string : ▁ \" + revStr ) ; } }"],"bleu":0.17248164461432128,"rouge_l":0.3328003010064905}
{"id":1435,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["class GFG { static int geometricMean ( int n ) { return ( int ) Math . sqrt ( n ) ; } public static void main ( String [ ] args ) { int n = 16 ; System . out . println ( geometricMean ( n ) ) ; } }"],"bleu":0.4619035468130019,"rouge_l":0.7094898228918848}
{"id":1436,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int count ( int a [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % 2 == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = a . length ; System . out . println ( count ( a , n ) ) ; } }"],"references":["class GFG { static float kPresentProbability ( int a [ ] , int n , int k ) { float count = 0 ; for ( int i = 0 ; i < n ; i ++ ) if ( a [ i ] == k ) count ++ ; return count \/ n ; } public static void main ( String [ ] args ) { int A [ ] = { 4 , 7 , 2 , 0 , 8 , 7 , 5 } ; int K = 2 ; int N = A . length ; double n = kPresentProbability ( A , N , K ) ; double p = ( double ) Math . round ( n * 100 ) \/ 100 ; System . out . println ( p ) ; } }"],"bleu":0.4507230671491773,"rouge_l":0.6449004975124377}
{"id":1437,"predictions":["import java . io . * ; class GFG { static boolean isPower ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) if ( arr [ i ] == arr [ j ] ) return false ; return true ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = arr . length ; if ( isPower ( arr , n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . io . * ; class GFG { static void checkEvenOdd ( int [ ] arr , int n ) { for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { System . out . print ( \" Even \" ) ; return ; } } System . out . println ( \" Odd \" ) ; } public static void main ( String [ ] args ) { int [ ] arr = { 2 , 12 , 20 , 36 , 38 } ; int n = arr . length ; checkEvenOdd ( arr , n ) ; } }"],"bleu":0.5329120397726094,"rouge_l":0.6465330098327161}
{"id":1438,"predictions":["import java . io . * ; class GFG { static boolean isPowerOfTwo ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 3 ; if ( isPowerOfTwo ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . io . * ; class GFG { static int toggleLastMBits ( int n , int m ) { if ( m == 0 ) return n ; int num = ( 1 << m ) - 1 ; return ( n ^ num ) ; } static int largeNumWithNSetAndMUnsetBits ( int n , int m ) { int num = ( 1 << ( n + m ) ) - 1 ; return toggleLastMBits ( num , m ) ; } public static void main ( String [ ] args ) { int n = 2 , m = 2 ; System . out . println ( largeNumWithNSetAndMUnsetBits ( n , m ) ) ; } }"],"bleu":0.3409406663157864,"rouge_l":0.516012084592145}
{"id":1439,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["import java . io . * ; class GFG { static void series ( int A , int X , int n ) { int term = ( int ) Math . pow ( A , n ) ; System . out . print ( term + \" ▁ \" ) ; for ( int i = 1 ; i <= n ; i ++ ) { term = term * X * ( n - i + 1 ) \/ ( i * A ) ; System . out . print ( term + \" ▁ \" ) ; } } public static void main ( String [ ] args ) { int A = 3 , X = 4 , n = 5 ; series ( A , X , n ) ; } }"],"bleu":0.34252341407817,"rouge_l":0.503287353358257}
{"id":1440,"predictions":["import java . util . * ; class GFG { static boolean isVowel ( int a [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] > a [ i ] ) return false ; } return true ; } static boolean isVowel ( int a [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { if ( isVowel ( a [ i ] , a [ i ] ) ) return true ; } return true ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = a . length ; if ( isVowel ( a , n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class MergeSort { void merge ( int arr [ ] , int l , int m , int r ) { int n1 = m - l + 1 ; int n2 = r - m ; int L [ ] = new int [ n1 ] ; int R [ ] = new int [ n2 ] ; for ( int i = 0 ; i < n1 ; ++ i ) L [ i ] = arr [ l + i ] ; for ( int j = 0 ; j < n2 ; ++ j ) R [ j ] = arr [ m + 1 + j ] ; int i = 0 , j = 0 ; int k = l ; while ( i < n1 && j < n2 ) { if ( L [ i ] <= R [ j ] ) { arr [ k ] = L [ i ] ; i ++ ; } else { arr [ k ] = R [ j ] ; j ++ ; } k ++ ; } while ( i < n1 ) { arr [ k ] = L [ i ] ; i ++ ; k ++ ; } while ( j < n2 ) { arr [ k ] = R [ j ] ; j ++ ; k ++ ; } } void sort ( int arr [ ] , int l , int r ) { if ( l < r ) { int m = ( l + r ) \/ 2 ; sort ( arr , l , m ) ; sort ( arr , m + 1 , r ) ; merge ( arr , l , m , r ) ; } } static void printArray ( int arr [ ] ) { int n = arr . length ; for ( int i = 0 ; i < n ; ++ i ) System . out . print ( arr [ i ] + \" ▁ \" ) ; System . out . println ( ) ; } public static void main ( String args [ ] ) { int arr [ ] = { 12 , 11 , 13 , 5 , 6 , 7 } ; System . out . println ( \" Given ▁ Array \" ) ; printArray ( arr ) ; MergeSort ob = new MergeSort ( ) ; ob . sort ( arr , 0 , arr . length - 1 ) ; System . out . println ( \" \\n Sorted ▁ array \" ) ; printArray ( arr ) ; } }"],"bleu":0.08949369382715579,"rouge_l":0.3252860190032965}
{"id":1441,"predictions":["import java . io . * ; class GFG { static int count ( int a [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] > a [ i ] ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 } ; int n = a . length ; System . out . println ( count ( a , n ) ) ; } }"],"references":["import java . util . Arrays ; class GFG { static int answer ( int [ ] arr , int [ ] [ ] ranges , int reversals , int index ) { for ( int i = reversals - 1 ; i >= 0 ; i -- ) { int left = ranges [ i ] [ 0 ] , right = ranges [ i ] [ 1 ] ; if ( left <= index && right >= index ) index = right + left - index ; } return arr [ index ] ; } public static void main ( String [ ] args ) { int [ ] arr = { 10 , 20 , 30 , 40 , 50 } ; int reversals = 2 ; int [ ] [ ] ranges = { { 1 , 4 } , { 0 , 2 } } ; int index = 1 ; System . out . println ( answer ( arr , ranges , reversals , index ) ) ; } }"],"bleu":0.23905396479972335,"rouge_l":0.5320913202670688}
{"id":1442,"predictions":["import java . io . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 10 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class IsDivisible { static boolean isDivisibleBy25 ( String str ) { int n = str . length ( ) ; if ( n == 1 ) return false ; return ( ( str . charAt ( n - 1 ) - '0' == 0 && str . charAt ( n - 2 ) - '0' == 0 ) || ( ( str . charAt ( n - 2 ) - '0' ) * 10 + ( str . charAt ( n - 1 ) - '0' ) ) % 25 == 0 ) ; } public static void main ( String [ ] args ) { String str = \"76955\" ; if ( isDivisibleBy25 ( str ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.3447887273497013,"rouge_l":0.5552497883149872}
{"id":1443,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["class gfg { static int square ( int n ) { return n * n ; } static int sum ( int n ) { if ( n == 0 ) return 0 ; if ( n % 2 == 1 ) { return square ( ( n + 1 ) \/ 2 ) + sum ( n \/ 2 ) ; } else { return square ( n \/ 2 ) + sum ( n \/ 2 ) ; } } static int oddDivSum ( int a , int b ) { return sum ( b ) - sum ( a - 1 ) ; } public static void main ( String [ ] args ) { int a = 3 , b = 9 ; System . out . println ( oddDivSum ( a , b ) ) ; } }"],"bleu":0.26282152670310294,"rouge_l":0.47885540643200813}
{"id":1444,"predictions":["import java . util . * ; class GFG { static boolean isVowel ( String s ) { for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i ) ) return false ; } return true ; } public static void main ( String [ ] args ) { String s = \" geeksforgeeksforgeeks \" ; if ( isVowel ( s ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; class GFG { static String removeOddFrequencyCharacters ( String s ) { HashMap < Character , Integer > m = new HashMap < Character , Integer > ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { char p = s . charAt ( i ) ; Integer count = m . get ( p ) ; if ( count == null ) { count = 0 ; m . put ( p , 1 ) ; } else m . put ( p , count + 1 ) ; } String new_string = \" \" ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( ( m . get ( s . charAt ( i ) ) & 1 ) == 1 ) continue ; new_string += s . charAt ( i ) ; } return new_string ; } public static void main ( String [ ] args ) { String str = \" geeksforgeeks \" ; str = removeOddFrequencyCharacters ( str ) ; System . out . print ( str ) ; } }"],"bleu":0.26196764474840867,"rouge_l":0.4968109115886566}
{"id":1445,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( st . charAt ( i ) == st . charAt ( j ) ) count ++ ; } } System . out . println ( count ) ; } }"],"references":["class NDN { static int countNonDecreasing ( int n ) { int dp [ ] [ ] = new int [ 10 ] [ n + 1 ] ; for ( int i = 0 ; i < 10 ; i ++ ) dp [ i ] [ 1 ] = 1 ; for ( int digit = 0 ; digit <= 9 ; digit ++ ) { for ( int len = 2 ; len <= n ; len ++ ) { for ( int x = 0 ; x <= digit ; x ++ ) dp [ digit ] [ len ] += dp [ x ] [ len - 1 ] ; } } int count = 0 ; for ( int i = 0 ; i < 10 ; i ++ ) count += dp [ i ] [ n ] ; return count ; } public static void main ( String args [ ] ) { int n = 3 ; System . out . println ( countNonDecreasing ( n ) ) ; } }"],"bleu":0.23269479099371365,"rouge_l":0.3188770571151985}
{"id":1446,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int count ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ i ] > arr [ j ] ) { count ++ ; } } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 } ; int n = arr . length ; System . out . println ( count ( arr , n ) ) ; } }"],"references":["import java . util . HashMap ; import java . util . Map ; import java . lang . Math ; class GfG { static int maxCount ( int n , int a [ ] ) { HashMap < Integer , Integer > freq = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; ++ i ) { if ( freq . containsKey ( a [ i ] ) ) freq . put ( a [ i ] , freq . get ( a [ i ] ) + 1 ) ; else freq . put ( a [ i ] , 1 ) ; } int ans = 0 ; for ( Integer key : freq . keySet ( ) ) { if ( freq . containsKey ( key + 1 ) ) ans = Math . max ( ans , freq . get ( key ) + freq . get ( key + 1 ) ) ; } return ans ; } public static void main ( String [ ] args ) { int n = 5 ; int arr [ ] = { 2 , 2 , 3 , 4 , 5 } ; System . out . println ( maxCount ( n , arr ) ) ; } }"],"bleu":0.2510588201728585,"rouge_l":0.47551896294998686}
{"id":1447,"predictions":["import java . io . * ; class GFG { static float find_area ( float a , float b ) { if ( a < b ) return - 1 ; if ( a < b ) return - 1 ; float x = ( a * b ) \/ 2 ; float y = ( a * b ) \/ 2 ; return y ; } public static void main ( String [ ] args ) { float a = 5 , b = 5 , c = 5 ; System . out . println ( find_area ( a , b , c ) ) ; } }"],"references":["class GFG { static void dist ( double x1 , double y1 , double x2 , double y2 , double r ) { System . out . println ( \" The ▁ shortest ▁ distance ▁ \" + \" between ▁ a ▁ point ▁ and ▁ a ▁ circle ▁ is ▁ \" + ( Math . sqrt ( ( Math . pow ( ( x2 - x1 ) , 2 ) ) + ( Math . pow ( ( y2 - y1 ) , 2 ) ) ) - r ) ) ; } public static void main ( String [ ] args ) { double x1 = 4 , y1 = 6 , x2 = 35 , y2 = 42 , r = 5 ; dist ( x1 , y1 , x2 , y2 , r ) ; } }"],"bleu":0.19075028018369117,"rouge_l":0.3409119776451162}
{"id":1448,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int count ( int a [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % 2 == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 } ; int n = a . length ; System . out . println ( count ( a , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static int vis [ ] ; static int dfs ( int x , Vector < Vector < Integer > > adj ) { int sz = 1 ; vis [ x ] = 1 ; for ( int i = 0 ; i < adj . get ( x ) . size ( ) ; i ++ ) if ( vis [ adj . get ( x ) . get ( i ) ] == 0 ) sz += dfs ( adj . get ( x ) . get ( i ) , adj ) ; return sz ; } static int maxValue ( int n , Vector < Vector < Integer > > adj ) { int val = 0 ; vis = new int [ n + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) vis [ i ] = 0 ; for ( int i = 0 ; i < n ; i ++ ) if ( vis [ i ] == 0 ) val += dfs ( i , adj ) - 1 ; return val ; } public static void main ( String args [ ] ) { int n = 3 ; Vector < Vector < Integer > > adj = new Vector < Vector < Integer > > ( ) ; Vector < Integer > v = new Vector < Integer > ( ) ; v . add ( 0 ) ; v . add ( 1 ) ; Vector < Integer > v1 = new Vector < Integer > ( ) ; v1 . add ( 1 ) ; v1 . add ( 2 ) ; adj . add ( v ) ; adj . add ( v1 ) ; adj . add ( new Vector < Integer > ( ) ) ; System . out . println ( maxValue ( n , adj ) ) ; } }"],"bleu":0.08201842899220374,"rouge_l":0.3251513556199}
{"id":1449,"predictions":["import java . io . * ; class GFG { static float findSum ( float a , float b ) { float sum = 0 ; for ( int i = 0 ; i < a ; i ++ ) sum += a * b ; return sum ; } public static void main ( String [ ] args ) { float a = 5 , b = 5 ; System . out . println ( findSum ( a , b ) ) ; } }"],"references":["import java . util . * ; class GFG { static double area_of_regular_polygon ( double n , double len ) { double P = ( len * n ) ; double A = len \/ ( 2 * Math . tan ( ( 180 \/ n ) * 3.14159 \/ 180 ) ) ; double area = ( P * A ) \/ 2 ; return area ; } static double area_of_triangle_inscribed ( double n , double len ) { double area = area_of_regular_polygon ( n , len ) ; double triangle = area \/ n ; double ins_tri = ( triangle * 3 ) ; return ins_tri ; } static public void main ( String [ ] arg ) { double n = 6 , len = 10 ; System . out . printf ( \" % .3f \" , area_of_triangle_inscribed ( n , len ) ) ; } }"],"bleu":0.12648675122555017,"rouge_l":0.4100975481149486}
{"id":1450,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int centeredHexagonalNumber ( int n ) { return 3 * n * ( n - 1 ) + 1 ; } public static void main ( String args [ ] ) { int n = 10 ; System . out . print ( n + \" th ▁ centered ▁ \" + \" hexagonal ▁ number : ▁ \" ) ; System . out . println ( centeredHexagonalNumber ( n ) ) ; } }"],"bleu":0.4672722088748812,"rouge_l":0.6135586401126533}
{"id":1451,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isDivisible ( int a , int b ) { if ( a == b ) return true ; if ( a == b ) return false ; if ( a == b ) return false ; if ( a == b ) return false ; if ( a == b ) return false ; if ( a == b ) return false ; if ( a == b ) return false ; if ( a == b ) return false ; if ( a == b ) return false ; if ( a == b ) return false ; if ( a == b ) return false ; return false ; return false ; } public static void main ( String [ ] args ) { int a = 10 , b = 10 ; if ( isDivisible ( a , b ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["using System ; class GFG { static bool isOrthogonal ( int [ , ] a , int m , int n ) { if ( m != n ) return false ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { int sum = 0 ; for ( int k = 0 ; k < n ; k ++ ) { sum = sum + ( a [ i , k ] * a [ j , k ] ) ; } if ( i == j && sum != 1 ) return false ; if ( i != j && sum != 0 ) return false ; } } return true ; } public static void Main ( ) { int [ , ] a = { { 1 , 0 , 0 } , { 0 , 1 , 0 } , { 0 , 0 , 1 } } ; if ( isOrthogonal ( a , 3 , 3 ) ) Console . WriteLine ( \" Yes \" ) ; else Console . WriteLine ( \" No \" ) ; } }"],"bleu":0.208460666872743,"rouge_l":0.4178771871904919}
{"id":1452,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["class GFG { static float getAvg ( float prev_avg , float x , int n ) { return ( prev_avg * n + x ) \/ ( n + 1 ) ; } static void streamAvg ( float arr [ ] , int n ) { float avg = 0 ; for ( int i = 0 ; i < n ; i ++ ) { avg = getAvg ( avg , arr [ i ] , i ) ; System . out . printf ( \" Average ▁ of ▁ % d ▁ numbers ▁ is ▁ % f ▁ \\n \" , i + 1 , avg ) ; } return ; } public static void main ( String [ ] args ) { float arr [ ] = { 10 , 20 , 30 , 40 , 50 , 60 } ; int n = arr . length ; streamAvg ( arr , n ) ; } }"],"bleu":0.383343952390648,"rouge_l":0.540236168816969}
{"id":1453,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int count ( int a [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( a [ i ] < a [ j ] ) count ++ ; } } return count ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 } ; int n = a . length ; System . out . println ( count ( a , n ) ) ; } }"],"references":["import java . util . Arrays ; public class MinCostOp_Mintowerheight { static long costOfOperation ( int n , int h [ ] , int cost [ ] , int eq_h ) { long c = 0 ; for ( int i = 0 ; i < n ; i ++ ) c += Math . abs ( h [ i ] - eq_h ) * cost [ i ] ; return c ; } static long Bsearch ( int n , int h [ ] , int cost [ ] ) { int max_h = Arrays . stream ( h ) . max ( ) . getAsInt ( ) ; long ans = Long . MAX_VALUE ; long high = 1 + max_h ; long low = 0 ; while ( high > low ) { int mid = ( int ) ( ( low + high ) >> 1 ) ; long bm = ( mid > 0 ) ? costOfOperation ( n , h , cost , mid - 1 ) : Long . MAX_VALUE ; long m = costOfOperation ( n , h , cost , mid ) ; long am = costOfOperation ( n , h , cost , mid + 1 ) ; if ( ans == m ) break ; ans = Long . min ( ans , m ) ; if ( bm <= m ) high = mid ; else if ( am <= m ) low = mid + 1 ; else return m ; } return ans ; } public static void main ( String args [ ] ) { int h [ ] = { 1 , 2 , 3 } ; int cost [ ] = { 10 , 100 , 1000 } ; int n = h . length ; System . out . println ( Bsearch ( n , h , cost ) ) ; } }"],"bleu":0.13008247683760207,"rouge_l":0.3802135136927259}
{"id":1454,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; System . out . println ( ( n == k ) ? \" YES \" : \" NO \" ) ; } }"],"references":["class GFG { static boolean check ( int a [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) if ( a [ i ] == 1 ) return true ; return false ; } public static void main ( String [ ] args ) { int a [ ] = { 0 , 1 , 0 , 1 } ; int n = a . length ; if ( check ( a , n ) == true ) System . out . println ( \" YES \\n \" ) ; else System . out . println ( \" NO \\n \" ) ; } }"],"bleu":0.21458674091371527,"rouge_l":0.3592358517667337}
{"id":1455,"predictions":["import java . io . * ; import java . util . * ; class GFG { public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( n + \" \" + n ) ; } }"],"references":["import java . io . * ; class GFG { static int findIndex ( int n ) { if ( n <= 1 ) return n ; int a = 0 , b = 1 , c = 1 ; int res = 1 ; while ( c < n ) { c = a + b ; res ++ ; a = b ; b = c ; } return res ; } public static void main ( String [ ] args ) { int result = findIndex ( 21 ) ; System . out . println ( result ) ; } }"],"bleu":0.19787585163406585,"rouge_l":0.4173878043872006}
{"id":1456,"predictions":["import java . io . * ; import java . util . * ; import java . lang . * ; class GFG { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { ans += a [ i ] - a [ j ] ; } } System . out . println ( ans ) ; } }"],"references":["public class GFG { static int sumNth ( int A [ ] , int B [ ] , int m , int n ) { int res = 0 ; if ( n == 1 ) { for ( int i = 0 ; i < m ; i ++ ) res = res + A [ i ] ; } else if ( n == 2 ) { for ( int i = 0 ; i < m ; i ++ ) res = res + B [ i ] * m ; } else { int f [ ] = new int [ n ] ; f [ 0 ] = 0 ; f [ 1 ] = 1 ; for ( int i = 2 ; i < n ; i ++ ) f [ i ] = f [ i - 1 ] + f [ i - 2 ] ; for ( int i = 0 ; i < m ; i ++ ) { res = res + ( m * ( B [ i ] * f [ n - 1 ] ) ) + ( m * ( A [ i ] * f [ n - 2 ] ) ) ; } } return res ; } public static void main ( String args [ ] ) { int A [ ] = { 1 , 2 , 3 } ; int B [ ] = { 4 , 5 , 6 } ; int n = 3 ; int m = A . length ; System . out . println ( sumNth ( A , B , m , n ) ) ; } }"],"bleu":0.1809134362272317,"rouge_l":0.36379126730564426}
{"id":1457,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; String s = br . readLine ( ) ; String [ ] s = s . split ( \" \" ) ; int n = Integer . parseInt ( s [ 0 ] ) ; for ( int i = 1 ; i < n ; i ++ ) { s [ i ] = br . readLine ( ) . split ( \" \" ) ; for ( int j = 0 ; j < n ; j ++ ) { if ( s [ i ] . equals ( s [ j ] ) ) { System . out . println ( \" Yes \" ) ; return ; } } } System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static boolean isVowel ( char c ) { return ( c == ' a ' || c == ' A ' || c == ' e ' || c == ' E ' || c == ' i ' || c == ' I ' || c == ' o ' || c == ' O ' || c == ' u ' || c == ' U ' ) ; } static String reverseVowel ( String str1 ) { int j = 0 ; char [ ] str = str1 . toCharArray ( ) ; String vowel = \" \" ; for ( int i = 0 ; i < str . length ; i ++ ) { if ( isVowel ( str [ i ] ) ) { j ++ ; vowel += str [ i ] ; } } for ( int i = 0 ; i < str . length ; i ++ ) { if ( isVowel ( str [ i ] ) ) { str [ i ] = vowel . charAt ( -- j ) ; } } return String . valueOf ( str ) ; } public static void main ( String [ ] args ) { String str = \" hello ▁ world \" ; System . out . println ( reverseVowel ( str ) ) ; } }"],"bleu":0.21032181593927812,"rouge_l":0.37156870500751515}
{"id":1458,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int sum ( int a [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += a [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = a . length ; System . out . println ( sum ( a , n ) ) ; } }"],"references":["import java . io . * ; import java . util . * ; class GFG { static int minimumCost ( int cost [ ] , int n ) { int dp1 = 0 , dp2 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int dp0 = cost [ i ] + Math . min ( dp1 , dp2 ) ; dp2 = dp1 ; dp1 = dp0 ; } return Math . min ( dp1 , dp2 ) ; } public static void main ( String args [ ] ) { int a [ ] = { 2 , 5 , 3 , 1 , 7 , 3 , 4 } ; int n = a . length ; System . out . print ( minimumCost ( a , n ) ) ; } }"],"bleu":0.54191656464377,"rouge_l":0.7577173779362932}
{"id":1459,"predictions":["import java . io . * ; import java . util . * ; class GFG { public static void main ( String [ ] args ) { String s = \" geeksforgeeks \" ; String s = \" geeksforgeeks \" ; int len = s . length ( ) ; for ( int i = 0 ; i < len ; i ++ ) { for ( int j = 0 ; j < len ; j ++ ) { if ( s . charAt ( i ) == s . charAt ( j ) ) len ++ ; else len -- ; } System . out . println ( len ) ; } }"],"references":["class GFG { static int N = 2 ; static boolean isVowel ( char ch ) { return ( ch == ' a ' || ch == ' e ' || ch == ' i ' || ch == ' o ' || ch == ' u ' ) ; } static int countVowels ( String str , int l , int r ) { int cnt = 0 ; for ( int i = l ; i <= r ; i ++ ) { if ( isVowel ( str . charAt ( i ) ) ) cnt ++ ; } return cnt ; } static void performQueries ( String str , int queries [ ] [ ] , int q ) { for ( int i = 0 ; i < q ; i ++ ) { System . out . println ( countVowels ( str , queries [ i ] [ 0 ] , queries [ i ] [ 1 ] ) ) ; } } public static void main ( String [ ] args ) { String str = \" geeksforgeeks \" ; int queries [ ] [ ] = { { 1 , 3 } , { 2 , 4 } , { 1 , 9 } } ; int q = queries . length ; performQueries ( str , queries , q ) ; } }"],"bleu":0.16249981479528725,"rouge_l":0.26649429386590584}
{"id":1460,"predictions":["import java . io . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 3 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; class Circular { public static int removeAlternate ( int n ) { if ( n == 1 ) return 1 ; if ( n % 2 == 0 ) return 2 * removeAlternate ( n \/ 2 ) - 1 ; else return 2 * removeAlternate ( ( ( n - 1 ) \/ 2 ) ) + 1 ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . print ( removeAlternate ( n ) ) ; n = 10 ; System . out . print ( \" \\n \" + removeAlternate ( n ) ) ; } }"],"bleu":0.41620062001434216,"rouge_l":0.6359537897999435}
{"id":1461,"predictions":["import java . io . * ; class GFG { static boolean isPowerOfTwo ( int n ) { if ( n == 0 ) return false ; return false ; } static boolean isPowerOfTwo ( int n ) { if ( isPowerOfTwo ( n ) ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 12 ; if ( isPowerOfTwo ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static void lowerWythoff ( int n ) { double phi = ( 1 + Math . sqrt ( 5 ) ) \/ 2.0 ; for ( int i = 1 ; i <= n ; i ++ ) { double ans = Math . floor ( i * phi ) ; System . out . print ( ( int ) ans ) ; if ( i != n ) System . out . print ( \" ▁ , ▁ \" ) ; } } public static void main ( String [ ] args ) { int n = 5 ; lowerWythoff ( n ) ; } }"],"bleu":0.33805968786066865,"rouge_l":0.4232845026985351}
{"id":1462,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { a [ i ] = sc . nextInt ( ) ; } } out . println ( a [ n - 1 ] ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["class Test { static int countPairs ( String str ) { int result = 0 ; int n = str . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = i + 1 ; j < n ; j ++ ) if ( Math . abs ( str . charAt ( i ) - str . charAt ( j ) ) == Math . abs ( i - j ) ) result ++ ; return result ; } public static void main ( String args [ ] ) { String str = \" geeksforgeeks \" ; System . out . println ( countPairs ( str ) ) ; } }"],"bleu":0.16213302207028443,"rouge_l":0.3891857404896722}
{"id":1463,"predictions":["import java . io . * ; class GFG { static boolean isPowerOfTwo ( int n ) { if ( n == 0 ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 12 ; if ( isPowerOfTwo ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static boolean checkPowerof8 ( int n ) { double i = Math . log ( n ) \/ Math . log ( 8 ) ; return ( i - Math . floor ( i ) < 0.000001 ) ; } public static void main ( String args [ ] ) { int n = 65 ; if ( checkPowerof8 ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.5382321502817331,"rouge_l":0.7202437630927442}
{"id":1464,"predictions":["import java . io . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; return false ; } static boolean isPrime ( int n ) { if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 10 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . io . * ; class GFG { static void digitsNum ( int N ) { if ( N == 0 ) System . out . println ( \"0\" ) ; if ( N % 9 != 0 ) System . out . print ( ( N % 9 ) ) ; for ( int i = 1 ; i <= ( N \/ 9 ) ; ++ i ) System . out . print ( \"9\" ) ; for ( int i = 1 ; i <= N ; ++ i ) System . out . print ( \"0\" ) ; System . out . print ( \" \" ) ; } public static void main ( String [ ] args ) { int N = 5 ; System . out . print ( \" The ▁ number ▁ is ▁ : ▁ \" ) ; digitsNum ( N ) ; } }"],"bleu":0.2885263228481557,"rouge_l":0.46890775585130795}
{"id":1465,"predictions":["import java . io . * ; import java . util . * ; class GFG { public static void main ( String [ ] args ) { int arr [ ] = { 1 , 0 , 1 , 0 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 0 , 1 , 0 , 1 , 0 , 0 , 1 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,"],"references":["import java . util . * ; class GFG { static void printFirstNegativeInteger ( int arr [ ] , int n , int k ) { LinkedList < Integer > Di = new LinkedList < > ( ) ; int i ; for ( i = 0 ; i < k ; i ++ ) if ( arr [ i ] < 0 ) Di . add ( i ) ; for ( ; i < n ; i ++ ) { if ( ! Di . isEmpty ( ) ) System . out . print ( arr [ Di . peek ( ) ] + \" ▁ \" ) ; else System . out . print ( \"0\" + \" ▁ \" ) ; while ( ( ! Di . isEmpty ( ) ) && Di . peek ( ) < ( i - k + 1 ) ) Di . remove ( ) ; if ( arr [ i ] < 0 ) Di . add ( i ) ; } if ( ! Di . isEmpty ( ) ) System . out . print ( arr [ Di . peek ( ) ] + \" ▁ \" ) ; else System . out . print ( \"0\" + \" ▁ \" ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 12 , - 1 , - 7 , 8 , - 15 , 30 , 16 , 28 } ; int n = arr . length ; int k = 3 ; printFirstNegativeInteger ( arr , n , k ) ; } }"],"bleu":0.057508481164405406,"rouge_l":0.10066006600660066}
{"id":1466,"predictions":["import java . io . * ; class GFG { static boolean isPower ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) if ( arr [ i ] == arr [ j ] ) return false ; return true ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 4 , 4 , 4 , 4 , 4 , 3 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 }"],"references":["import java . io . * ; class GFG { public static void findFirstAndLast ( int arr [ ] , int x ) { int n = arr . length ; int first = - 1 , last = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( x != arr [ i ] ) continue ; if ( first == - 1 ) first = i ; last = i ; } if ( first != - 1 ) { System . out . println ( \" First ▁ Occurrence ▁ = ▁ \" + first ) ; System . out . println ( \" Last ▁ Occurrence ▁ = ▁ \" + last ) ; } else System . out . println ( \" Not ▁ Found \" ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 2 , 2 , 2 , 3 , 4 , 7 , 8 , 8 } ; int x = 8 ; findFirstAndLast ( arr , x ) ; } }"],"bleu":0.12326532970744236,"rouge_l":0.24423797546327192}
{"id":1467,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { a [ i ] = sc . nextInt ( ) ; } } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { System . out . print ( a [ i ] + \" \" ) ; } System . out . println ( ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) throws IOException { return br . readLine ( ) ; } } }"],"references":["public class GFG { static final int NO_OF_CHARS = 256 ; static boolean areAnagram ( String str1 , String str2 ) { int [ ] count = new int [ NO_OF_CHARS ] ; int i ; for ( i = 0 ; i < str1 . length ( ) && i < str2 . length ( ) ; i ++ ) { count [ str1 . charAt ( i ) ] ++ ; count [ str2 . charAt ( i ) ] -- ; } if ( str1 . length ( ) != str2 . length ( ) ) return false ; for ( i = 0 ; i < NO_OF_CHARS ; i ++ ) if ( count [ i ] != 0 ) return false ; return true ; } static void findAllAnagrams ( String arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) for ( int j = i + 1 ; j < n ; j ++ ) if ( areAnagram ( arr [ i ] , arr [ j ] ) ) System . out . println ( arr [ i ] + \" ▁ is ▁ anagram ▁ of ▁ \" + arr [ j ] ) ; } public static void main ( String args [ ] ) { String arr [ ] = { \" geeksquiz \" , \" geeksforgeeks \" , \" abcd \" , \" forgeeksgeeks \" , \" zuiqkeegs \" } ; int n = arr . length ; findAllAnagrams ( arr , n ) ; } }"],"bleu":0.23127697206887687,"rouge_l":0.38060875698551355}
{"id":1468,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["class GFG { static int MAX = 100 ; public static void main ( String [ ] args ) { long [ ] arr = new long [ MAX ] ; arr [ 0 ] = 0 ; arr [ 1 ] = 1 ; for ( int i = 2 ; i < MAX ; i ++ ) arr [ i ] = arr [ i - 1 ] + arr [ i - 2 ] ; System . out . print ( \" Fibonacci ▁ numbers ▁ divisible ▁ by ▁ \" + \" their ▁ indexes ▁ are ▁ : \\n \" ) ; for ( int i = 1 ; i < MAX ; i ++ ) if ( arr [ i ] % i == 0 ) System . out . print ( i + \" ▁ \" ) ; } }"],"bleu":0.23984581201064503,"rouge_l":0.3489107946939272}
{"id":1469,"predictions":["import java . io . * ; class GFG { static boolean isPower ( int a , int b ) { if ( a == b ) return false ; if ( a == b ) return true ; if ( a == b ) return false ; if ( a == b ) return false ; if ( a == b ) return false ; if ( a == b ) return false ; if ( a == b ) return false ; if ( a == b ) return false ; if ( a == b ) return false ; if ( a == b ) return false ; if ( a == b ) return false ; if ( a == b ) return false ; if ( a == b ) return false ; if ( a == b ) return false ; return false ; return false ; } public static void main ( String [ ] args ) { int a = 2 , b = 3 , c = 3 ; if ( isPower ( a , b ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . io . * ; class GFG { static boolean isPossible ( int Sx , int Sy , int Dx , int Dy , int x , int y ) { if ( Math . abs ( Sx - Dx ) % x == 0 && Math . abs ( Sy - Dy ) % y == 0 && ( Math . abs ( Sx - Dx ) \/ x ) % 2 == ( Math . abs ( Sy - Dy ) \/ y ) % 2 ) return true ; return false ; } public static void main ( String [ ] args ) { int Sx = 0 , Sy = 0 , Dx = 0 , Dy = 0 ; int x = 3 , y = 4 ; if ( isPossible ( Sx , Sy , Dx , Dy , x , y ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.3082199201156746,"rouge_l":0.4808087731322823}
{"id":1470,"predictions":["import java . io . * ; class GFG { static boolean isVowel ( String s ) { int n = s . length ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i ) ) count ++ ; } return count ; } public static void main ( String [ ] args ) { String s = \" geeksforgeeksforgeeks \" ; if ( isVowel ( s ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . io . * ; class GFG { static boolean isPerfectSquareString ( String str ) { int sum = 0 ; int len = str . length ( ) ; for ( int i = 0 ; i < len ; i ++ ) sum += ( int ) str . charAt ( i ) ; long squareRoot = ( long ) Math . sqrt ( sum ) ; return ( ( squareRoot - Math . floor ( squareRoot ) ) == 0 ) ; } public static void main ( String [ ] args ) { String str = \" d \" ; if ( isPerfectSquareString ( str ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.5481745394366776,"rouge_l":0.725009383210309}
{"id":1471,"predictions":["import java . util . * ; class GFG { static boolean isVowel ( String s ) { for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i ) ) return false ; } return true ; } public static void main ( String [ ] args ) { String s = \" geeksforgeeksforgeeks \" ; if ( isVowel ( s ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; class GfG { static boolean arePermutation ( String str1 , String str2 ) { int n1 = str1 . length ( ) ; int n2 = str2 . length ( ) ; if ( n1 != n2 ) return false ; char ch1 [ ] = str1 . toCharArray ( ) ; char ch2 [ ] = str2 . toCharArray ( ) ; Arrays . sort ( ch1 ) ; Arrays . sort ( ch2 ) ; for ( int i = 0 ; i < n1 ; i ++ ) if ( ch1 [ i ] != ch2 [ i ] ) return false ; return true ; } public static void main ( String [ ] args ) { String str1 = \" test \" ; String str2 = \" ttew \" ; if ( arePermutation ( str1 , str2 ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.35659337826573406,"rouge_l":0.5757875096037757}
{"id":1472,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPower ( int a [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % 2 == 0 ) { count ++ ; } else if ( a [ i ] % 2 == 0 ) { count ++ ; } else { count ++ ; } } return count ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = a . length ; if ( isPower ( a , n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static int catalanDP ( int n ) { int catalan [ ] = new int [ n + 2 ] ; catalan [ 0 ] = 1 ; catalan [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) { catalan [ i ] = 0 ; for ( int j = 0 ; j < i ; j ++ ) { catalan [ i ] += catalan [ j ] * catalan [ i - j - 1 ] ; } } return catalan [ n ] ; } public static void main ( String [ ] args ) { for ( int i = 0 ; i < 10 ; i ++ ) { System . out . print ( catalanDP ( i ) + \" ▁ \" ) ; } } }"],"bleu":0.31227008638703263,"rouge_l":0.44762309901095393}
{"id":1473,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ i ] > arr [ j ] ) { arr [ i ] = arr [ j ] ; arr [ i ] = arr [ j ] ; } } } System . out . println ( arr [ n - 1 ] ) ; } }"],"references":["import java . util . * ; class GFG { static void findGeometricTriplets ( int arr [ ] , int n ) { for ( int j = 1 ; j < n - 1 ; j ++ ) { int i = j - 1 , k = j + 1 ; while ( i >= 0 && k <= n - 1 ) { while ( i >= 0 && arr [ j ] % arr [ i ] == 0 && arr [ k ] % arr [ j ] == 0 && arr [ j ] \/ arr [ i ] == arr [ k ] \/ arr [ j ] ) { System . out . println ( arr [ i ] + \" ▁ \" + arr [ j ] + \" ▁ \" + arr [ k ] ) ; k ++ ; i -- ; } if ( i >= 0 && arr [ j ] % arr [ i ] == 0 && arr [ k ] % arr [ j ] == 0 ) { if ( i >= 0 && arr [ j ] \/ arr [ i ] < arr [ k ] \/ arr [ j ] ) i -- ; else k ++ ; } else if ( i >= 0 && arr [ j ] % arr [ i ] == 0 ) k ++ ; else i -- ; } } } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 4 , 16 } ; int n = arr . length ; findGeometricTriplets ( arr , n ) ; } }"],"bleu":0.2716366469685591,"rouge_l":0.3359068975305138}
{"id":1474,"predictions":["import java . io . * ; import java . util . * ; import java . lang . * ; class GFG { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { ans += b [ i ] ; } System . out . println ( ans ) ; } }"],"references":["class fibonacci { static int fib ( int n ) { int F [ ] [ ] = new int [ ] [ ] { { 1 , 1 } , { 1 , 0 } } ; if ( n == 0 ) return 0 ; power ( F , n - 1 ) ; return F [ 0 ] [ 0 ] ; } static void multiply ( int F [ ] [ ] , int M [ ] [ ] ) { int x = F [ 0 ] [ 0 ] * M [ 0 ] [ 0 ] + F [ 0 ] [ 1 ] * M [ 1 ] [ 0 ] ; int y = F [ 0 ] [ 0 ] * M [ 0 ] [ 1 ] + F [ 0 ] [ 1 ] * M [ 1 ] [ 1 ] ; int z = F [ 1 ] [ 0 ] * M [ 0 ] [ 0 ] + F [ 1 ] [ 1 ] * M [ 1 ] [ 0 ] ; int w = F [ 1 ] [ 0 ] * M [ 0 ] [ 1 ] + F [ 1 ] [ 1 ] * M [ 1 ] [ 1 ] ; F [ 0 ] [ 0 ] = x ; F [ 0 ] [ 1 ] = y ; F [ 1 ] [ 0 ] = z ; F [ 1 ] [ 1 ] = w ; } static void power ( int F [ ] [ ] , int n ) { int i ; int M [ ] [ ] = new int [ ] [ ] { { 1 , 1 } , { 1 , 0 } } ; for ( i = 2 ; i <= n ; i ++ ) multiply ( F , M ) ; } public static void main ( String args [ ] ) { int n = 9 ; System . out . println ( fib ( n ) ) ; } }"],"bleu":0.08827475019698862,"rouge_l":0.2695286929958543}
{"id":1475,"predictions":["import java . util . * ; class GFG { static boolean isVowel ( int a [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) if ( a [ i ] < a [ j ] ) return false ; return true ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 } ; int n = a . length ; if ( isVowel ( a , n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["public class GFG { static char largest_alphabet ( String a , int n ) { char max = ' A ' ; for ( int i = 0 ; i < n ; i ++ ) if ( a . charAt ( i ) > max ) max = a . charAt ( i ) ; return max ; } static char smallest_alphabet ( String a , int n ) { char min = ' z ' ; for ( int i = 0 ; i < n - 1 ; i ++ ) if ( a . charAt ( i ) < min ) min = a . charAt ( i ) ; return min ; } public static void main ( String args [ ] ) { String a = \" GeEksforGeeks \" ; int size = a . length ( ) ; System . out . print ( \" Largest ▁ and ▁ smallest ▁ alphabet ▁ is ▁ : ▁ \" ) ; System . out . print ( largest_alphabet ( a , size ) + \" ▁ and ▁ \" ) ; System . out . println ( smallest_alphabet ( a , size ) ) ; } }"],"bleu":0.24903541909933746,"rouge_l":0.48541114058355433}
{"id":1476,"predictions":["import java . io . * ; class GFG { static boolean check ( int a , int b ) { if ( a == b ) return true ; if ( a == b ) return true ; if ( a == b ) return true ; if ( a == b ) return true ; if ( a == b ) return false ; if ( a == b ) return false ; if ( a == b ) return false ; if ( a == b ) return true ; return true ; return false ; } public static void main ( String [ ] args ) { int a = 12 , b = 12 ; if ( check ( a , b ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { public boolean Check_is_possible ( int l , int r , int k ) { int count = 0 ; for ( int i = l ; i <= r ; i ++ ) { if ( i % k == 0 ) { count ++ ; } } return ( count > 1 ) ; } public static void main ( String [ ] args ) { GFG g = new GFG ( ) ; int l = 4 , r = 12 ; int k = 5 ; if ( g . Check_is_possible ( l , r , k ) ) { System . out . println ( \" YES \" ) ; } else { System . out . println ( \" NO \" ) ; } } }"],"bleu":0.2560248708636432,"rouge_l":0.499308277611252}
{"id":1477,"predictions":["import java . io . * ; class GFG { static int countPairs ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { if ( arr [ i ] > arr [ j ] ) count ++ ; } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 1 , 1 , 1 , 1 } ; int n = arr . length ; System . out . println ( countPairs ( arr , n ) ) ; } }"],"references":["import java . io . * ; class PushZero { static void pushZerosToEnd ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) if ( arr [ i ] != 0 ) arr [ count ++ ] = arr [ i ] ; while ( count < n ) arr [ count ++ ] = 0 ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 9 , 8 , 4 , 0 , 0 , 2 , 7 , 0 , 6 , 0 , 9 } ; int n = arr . length ; pushZerosToEnd ( arr , n ) ; System . out . println ( \" Array ▁ after ▁ pushing ▁ zeros ▁ to ▁ the ▁ back : ▁ \" ) ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + \" ▁ \" ) ; } }"],"bleu":0.41866073663575265,"rouge_l":0.5866535819430815}
{"id":1478,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { System . out . print ( a [ i ] + \" \" ) ; } System . out . println ( ) ; } } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["class GFG { static boolean check ( String s , int k ) { for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) != s . charAt ( i % k ) ) { return false ; } } return true ; } static int countCommonDivisors ( String a , String b ) { int ct = 0 ; int n = a . length ( ) , m = b . length ( ) ; for ( int i = 1 ; i <= Math . min ( n , m ) ; i ++ ) { if ( n % i == 0 && m % i == 0 ) { if ( a . substring ( 0 , i ) . equals ( b . substring ( 0 , i ) ) ) { if ( check ( a , i ) && check ( b , i ) ) { ct ++ ; } } } } return ct ; } public static void main ( String [ ] args ) { String a = \" xaxa \" , b = \" xaxaxaxa \" ; System . out . println ( countCommonDivisors ( a , b ) ) ; } }"],"bleu":0.18623984733507198,"rouge_l":0.3562999165573966}
{"id":1479,"predictions":["import java . io . * ; class GFG { static int sumOfDigits ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( sumOfDigits ( n ) ) ; } }"],"references":["class GFG { static int reversDigits ( int num ) { int rev_num = 0 ; while ( num > 0 ) { rev_num = rev_num * 10 + num % 10 ; num = num \/ 10 ; } return rev_num ; } public static void main ( String [ ] args ) { int num = 4562 ; System . out . println ( \" Reverse ▁ of ▁ no . ▁ is ▁ \" + reversDigits ( num ) ) ; } }"],"bleu":0.35723929719707165,"rouge_l":0.5644739489036411}
{"id":1480,"predictions":["import java . io . * ; class GFG { static boolean isPowerOfTwo ( int n ) { if ( n == 0 ) return true ; return false ; } static boolean isPowerOfTwo ( int n ) { if ( isPowerOfTwoOfTwo ( n ) ) return false ; return true ; } public static void main ( String [ ] args ) { int n = 12 ; if ( isPowerOfTwoOfTwoOfTwo ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . io . * ; class GFG { static int center_nonadecagon_num ( int n ) { return ( 19 * n * n - 19 * n + 2 ) \/ 2 ; } public static void main ( String [ ] args ) { int n = 2 ; System . out . print ( n + \" th ▁ centered ▁ \" + \" nonadecagonal ▁ number ▁ : ▁ \" ) ; System . out . println ( center_nonadecagon_num ( n ) ) ; n = 7 ; System . out . print ( n + \" th ▁ centered ▁ \" + \" nonadecagonal ▁ number ▁ : ▁ \" ) ; System . out . println ( center_nonadecagon_num ( n ) ) ; } }"],"bleu":0.35677333722774324,"rouge_l":0.5197196646969906}
{"id":1481,"predictions":["import java . util . * ; class GFG { static boolean isVowel ( String s ) { int n = s . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i ) ) return false ; } return true ; } static boolean isVowel ( String s ) { for ( int i = 0 ; i < n ; i ++ ) { if ( isVowel ( s . charAt ( i ) ) ) return false ; } return true ; } public static void main ( String [ ] args ) { String s = \" geeksforgeeksforgeeks \" ; if ( isVowel ( s ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . Arrays ; public class CountKSubStr { int countkDist ( String str , int k ) { int res = 0 ; int n = str . length ( ) ; int cnt [ ] = new int [ 26 ] ; for ( int i = 0 ; i < n ; i ++ ) { int dist_count = 0 ; Arrays . fill ( cnt , 0 ) ; for ( int j = i ; j < n ; j ++ ) { if ( cnt [ str . charAt ( j ) - ' a ' ] == 0 ) dist_count ++ ; cnt [ str . charAt ( j ) - ' a ' ] ++ ; if ( dist_count == k ) res ++ ; } } return res ; } public static void main ( String [ ] args ) { CountKSubStr ob = new CountKSubStr ( ) ; String ch = \" abcbaa \" ; int k = 3 ; System . out . println ( \" Total ▁ substrings ▁ with ▁ exactly ▁ \" + k + \" ▁ distinct ▁ characters ▁ : ▁ \" + ob . countkDist ( ch , k ) ) ; } }"],"bleu":0.2780464389694444,"rouge_l":0.4872455552692606}
{"id":1482,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int sum ( int a [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += a [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += a [ i ] ; return sum ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = a . length ; System . out . println ( sum ( a , n ) ) ; } }"],"references":["class GFG { static float percent ( int n , int x ) { float p = n * x ; p \/= 100 ; return p ; } static float getLoss ( int price [ ] , int quantity [ ] , int X [ ] , int n ) { float loss = 0 ; for ( int i = 0 ; i < n ; i ++ ) { float originalPrice = price [ i ] ; float sellingPrice = originalPrice + percent ( ( int ) originalPrice , X [ i ] ) ; float afterDiscount = sellingPrice - percent ( ( int ) sellingPrice , X [ i ] ) ; loss += ( ( originalPrice - afterDiscount ) * quantity [ i ] ) ; } return loss ; } public static void main ( String args [ ] ) { int price [ ] = { 20 , 48 , 200 , 100 } ; int quantity [ ] = { 20 , 48 , 1 , 1 } ; int X [ ] = { 0 , 48 , 200 , 5 } ; int n = X . length ; System . out . print ( getLoss ( price , quantity , X , n ) ) ; } }"],"bleu":0.2290005246760201,"rouge_l":0.4908798283261802}
{"id":1483,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; String s = sc . next ( ) ; String s = sc . next ( ) ; int count = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i ) ) count ++ ; } System . out . println ( count ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["class GFG { static int minCost ( char [ ] s ) { boolean alphabets [ ] = new boolean [ 26 ] ; for ( int i = 0 ; i < s . length ; i ++ ) { alphabets [ ( int ) s [ i ] - 97 ] = true ; } int count = 0 ; for ( int i = 0 ; i < 26 ; i ++ ) { if ( alphabets [ i ] ) { count ++ ; } } return count ; } public static void main ( String [ ] args ) { String s = \" geeksforgeeks \" ; System . out . println ( \" Total ▁ cost ▁ to ▁ construct ▁ \" + s + \" ▁ is ▁ \" + minCost ( s . toCharArray ( ) ) ) ; } }"],"bleu":0.19459272597221516,"rouge_l":0.3376925545571245}
{"id":1484,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["import java . util . * ; import java . lang . Math ; import java . io . * ; class GFG { static int nextPowerOfFour ( int n ) { int x = ( int ) Math . floor ( Math . sqrt ( Math . sqrt ( n ) ) ) ; if ( Math . pow ( x , 4 ) == n ) return n ; else { x = x + 1 ; return ( int ) Math . pow ( x , 4 ) ; } } public static void main ( String [ ] args ) throws java . lang . Exception { int n = 122 ; System . out . println ( nextPowerOfFour ( n ) ) ; } }"],"bleu":0.27047235545221027,"rouge_l":0.5211289092295958}
{"id":1485,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = sc . nextInt ( ) ; Arrays . sort ( a ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] < a [ i ] ) { count ++ ; } } out . println ( count ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["class GFG { static int findCost ( String s1 , String s2 , int a , int b , int c , int d , int n ) { int cost = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s1 . charAt ( i ) == s2 . charAt ( i ) ) continue ; else { if ( ( s1 . charAt ( i ) == '1' && s2 . charAt ( i ) == '2' ) || ( s2 . charAt ( i ) == '1' && s1 . charAt ( i ) == '2' ) ) cost += Math . min ( d , Math . min ( a , b + c ) ) ; else if ( ( s1 . charAt ( i ) == '2' && s2 . charAt ( i ) == '3' ) || ( s2 . charAt ( i ) == '2' && s1 . charAt ( i ) == '3' ) ) cost += Math . min ( d , Math . min ( b , a + c ) ) ; else if ( ( s1 . charAt ( i ) == '1' && s2 . charAt ( i ) == '3' ) || ( s2 . charAt ( i ) == '1' && s1 . charAt ( i ) == '3' ) ) cost += Math . min ( d , Math . min ( c , a + b ) ) ; } } return cost ; } public static void main ( String [ ] args ) { String s1 = \"121\" ; String s2 = \"223\" ; int a = 2 , b = 3 , c = 4 , d = 10 ; int n = s1 . length ( ) ; System . out . println ( findCost ( s1 , s2 , a , b , c , d , n ) ) ; } }"],"bleu":0.18542744989658894,"rouge_l":0.3201624083977026}
{"id":1486,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["class GFG { static void TwentyoneMatchstick ( int arr [ ] , int N ) { for ( int i = 0 ; i < N ; i += 1 ) { System . out . print ( 5 - arr [ i ] + \" ▁ \" ) ; } System . out . println ( ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 4 , 2 , 2 } ; int N = arr . length ; TwentyoneMatchstick ( arr , N ) ; } }"],"bleu":0.46858581052388787,"rouge_l":0.6522071177638613}
{"id":1487,"predictions":["import java . io . * ; class GFG { static boolean isPower ( int a , int b ) { if ( a == b ) return true ; if ( a == b ) return true ; return false ; } public static void main ( String [ ] args ) { int a = 12 , b = 12 ; if ( isPower ( a , b ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static double Perimeter ( double s , int n ) { double perimeter = 1 ; perimeter = n * s ; return perimeter ; } public static void main ( String [ ] args ) { int n = 5 ; double s = 2.5 , peri ; peri = Perimeter ( s , n ) ; System . out . println ( \" Perimeter ▁ of ▁ Regular ▁ Polygon \" + \" ▁ with ▁ \" + n + \" ▁ sides ▁ of ▁ length ▁ \" + s + \" ▁ = ▁ \" + peri ) ; } }"],"bleu":0.2581360156576821,"rouge_l":0.4444796451766197}
{"id":1488,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int n = Integer . parseInt ( br . readLine ( ) ) ; String s = br . readLine ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i ) ) { count ++ ; } } System . out . println ( count ) ; } }"],"references":["import java . io . * ; class GFG { static boolean checkPalindrome ( String str ) { int n = str . length ( ) ; int count = 0 ; for ( int i = 0 ; i < n \/ 2 ; ++ i ) if ( str . charAt ( i ) != str . charAt ( n - i - 1 ) ) ++ count ; return ( count <= 1 ) ; } public static void main ( String [ ] args ) { String str = \" abccaa \" ; if ( checkPalindrome ( str ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.4062868753192347,"rouge_l":0.5153366259422927}
{"id":1489,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["import java . util . * ; import java . lang . * ; class GfG { public static int getSum ( int n ) { int sum = 0 ; while ( n != 0 ) { sum = sum + n % 10 ; n = n \/ 10 ; } return sum ; } public static int largestDigitSumdivisior ( int n ) { int res = 0 ; for ( int i = 1 ; i <= n ; i ++ ) if ( n % i == 0 ) res = Math . max ( res , getSum ( i ) ) ; return res ; } public static void main ( String argc [ ] ) { int n = 14 ; System . out . println ( largestDigitSumdivisior ( n ) ) ; } }"],"bleu":0.4225054880585317,"rouge_l":0.6703296703296704}
{"id":1490,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int count ( int a , int b ) { return ( a * b ) \/ 2 ; } public static void main ( String [ ] args ) { int a = 2 , b = 3 ; System . out . println ( count ( a , b ) ) ; } }"],"references":["import java . util . * ; import java . lang . * ; import java . io . * ; class GFG { static int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } static int lcm ( int n , int m ) { return ( n * m ) \/ gcd ( n , m ) ; } public static void main ( String [ ] args ) { int n = 2 , m = 3 , k = 5 ; System . out . print ( k \/ lcm ( n , m ) ) ; } }"],"bleu":0.3554706529249164,"rouge_l":0.6121376234469577}
{"id":1491,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false"],"references":["import java . util . * ; class GFG { static boolean checkPrime ( String number ) { int num = Integer . valueOf ( number ) ; for ( int i = 2 ; i * i <= num ; i ++ ) if ( ( num % i ) == 0 ) return false ; return true ; } static int splitIntoPrimes ( String number ) { if ( number . length ( ) == 0 ) return 0 ; if ( number . length ( ) <= 6 && checkPrime ( number ) ) return 1 ; else { int numLen = number . length ( ) ; int ans = 1000000 ; for ( int i = 1 ; i <= 6 && i <= numLen ; i ++ ) { if ( checkPrime ( number . substring ( 0 , i ) ) ) { int val = splitIntoPrimes ( number . substring ( i ) ) ; if ( val != - 1 ) { ans = Math . min ( ans , 1 + val ) ; } } } if ( ans == 1000000 ) return - 1 ; return ans ; } } public static void main ( String [ ] args ) { System . out . print ( splitIntoPrimes ( \"13499315\" ) + \" \\n \" ) ; System . out . print ( splitIntoPrimes ( \"43\" ) + \" \\n \" ) ; } }"],"bleu":0.06571198648268314,"rouge_l":0.2976028521837032}
{"id":1492,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( a [ i ] + \" \" ) ; } out . println ( ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } }"],"references":["import java . util . * ; class GfG { static Character findKthChar ( String s , int k ) { int len = s . length ( ) ; int i = 0 ; int total_len = 0 ; while ( i < len ) { if ( Character . isLetter ( s . charAt ( i ) ) ) { total_len ++ ; if ( total_len == k ) return s . charAt ( i ) ; i ++ ; } else { int n = 0 ; while ( i < len && ! Character . isLetter ( s . charAt ( i ) ) ) { n = n * 10 + ( s . charAt ( i ) - '0' ) ; i ++ ; } int next_total_len = total_len * n ; if ( k <= next_total_len ) { int pos = k % total_len ; if ( pos == 0 ) { pos = total_len ; } return findKthChar ( s , pos ) ; } else { total_len = next_total_len ; } } } return ' ▁ ' ; } public static void main ( String [ ] args ) { String s = \" ab2c3\" ; int k = 5 ; System . out . println ( findKthChar ( s , k ) ) ; } }"],"bleu":0.16272167357126793,"rouge_l":0.37258103531688436}
{"id":1493,"predictions":["import java . util . * ; import java . lang . * ; import java . io . * ; class GFG { static int nthTerm ( int N ) { return ( int ) Math . pow ( N , 2 ) + 1 ; } public static void main ( String [ ] args ) { int N = 4 ; System . out . println ( nthTerm ( N ) ) ; } }"],"references":["import java . util . * ; import java . lang . * ; class GFG { static double Nth_Term ( int n ) { return ( 2 * Math . pow ( n , 3 ) - 3 * Math . pow ( n , 2 ) + n + 6 ) \/ 6 ; } static public void main ( String args [ ] ) { int N = 8 ; System . out . println ( Nth_Term ( N ) ) ; } }"],"bleu":0.5038413559874487,"rouge_l":0.7321920503738686}
{"id":1494,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int N = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ N ] ; int [ ] b = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < N ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < N ; j ++ ) { for ( int k = 0 ; k < N ; k ++ ) { for ( int k = 0 ; k < N ; k ++ ) { if ( a [ i ] > b [ j ] ) { ans ++ ; } } } } System . out . println ( ans ) ; } }"],"references":["import java . io . * ; class GFG { static int solve ( int [ ] A , int [ ] B , int [ ] C ) { int i , j , k ; i = A . length - 1 ; j = B . length - 1 ; k = C . length - 1 ; int min_diff , current_diff , max_term ; min_diff = Math . abs ( Math . max ( A [ i ] , Math . max ( B [ j ] , C [ k ] ) ) - Math . min ( A [ i ] , Math . min ( B [ j ] , C [ k ] ) ) ) ; while ( i != - 1 && j != - 1 && k != - 1 ) { current_diff = Math . abs ( Math . max ( A [ i ] , Math . max ( B [ j ] , C [ k ] ) ) - Math . min ( A [ i ] , Math . min ( B [ j ] , C [ k ] ) ) ) ; if ( current_diff < min_diff ) min_diff = current_diff ; max_term = Math . max ( A [ i ] , Math . max ( B [ j ] , C [ k ] ) ) ; if ( A [ i ] == max_term ) i -= 1 ; else if ( B [ j ] == max_term ) j -= 1 ; else k -= 1 ; } return min_diff ; } public static void main ( String [ ] args ) { int [ ] D = { 5 , 8 , 10 , 15 } ; int [ ] E = { 6 , 9 , 15 , 78 , 89 } ; int [ ] F = { 2 , 3 , 6 , 6 , 8 , 8 , 10 } ; System . out . println ( solve ( D , E , F ) ) ; } }"],"bleu":0.14131867531376646,"rouge_l":0.30896143623689887}
{"id":1495,"predictions":["import java . util . * ; class GFG { static boolean isVowel ( int a [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( a [ i ] < a [ j ] ) return false ; } } return true ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 , 3 } ; int n = a . length ; if ( isVowel ( a , n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; class GFG { static class Node { int data ; Node left , right ; } ; static Node newNode ( int data ) { Node node = new Node ( ) ; node . data = data ; node . left = node . right = null ; return ( node ) ; } static boolean CheckPerfectTree ( Node root ) { Queue < Node > q = new LinkedList < Node > ( ) ; q . add ( root ) ; int flag = 0 ; while ( q . size ( ) > 0 ) { Node temp = q . peek ( ) ; q . remove ( ) ; if ( temp . left != null && temp . right != null ) { if ( flag == 1 ) return false ; else { q . add ( temp . left ) ; q . add ( temp . right ) ; } } else if ( temp . left == null && temp . right == null ) { flag = 1 ; } else if ( temp . left == null || temp . right == null ) return false ; } return true ; } public static void main ( String args [ ] ) { Node root = newNode ( 7 ) ; root . left = newNode ( 5 ) ; root . right = newNode ( 6 ) ; root . left . left = newNode ( 8 ) ; root . left . right = newNode ( 1 ) ; root . right . left = newNode ( 3 ) ; root . right . right = newNode ( 9 ) ; root . right . right . right = newNode ( 13 ) ; root . right . right . left = newNode ( 10 ) ; if ( CheckPerfectTree ( root ) ) System . out . printf ( \" Yes \" ) ; else System . out . printf ( \" No \" ) ; } }"],"bleu":0.10018719913794305,"rouge_l":0.3233806593138749}
{"id":1496,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPower ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; if ( isPower ( arr , n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; import java . lang . * ; class GFG { static TreeSet < Integer > set = new TreeSet < Integer > ( ) ; public static void generateNumber ( int count , int a [ ] , int n , int num , int k ) { if ( count == k ) { set . add ( num ) ; return ; } for ( int i = 0 ; i < n ; i ++ ) generateNumber ( count + 1 , a , n , num + a [ i ] , k ) ; } public static void printDistinctIntegers ( int k , int a [ ] , int n ) { generateNumber ( 0 , a , n , 0 , k ) ; System . out . print ( \" The \" + \" ▁ \" + set . size ( ) + \" ▁ \" + \" distinct ▁ integers ▁ are : ▁ \" ) ; System . out . println ( ) ; Iterator < Integer > i = set . iterator ( ) ; while ( set . isEmpty ( ) == false ) { while ( i . hasNext ( ) ) { System . out . print ( i . next ( ) + \" ▁ \" ) ; } } } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 8 , 17 , 5 } ; int n = arr . length ; int k = 2 ; printDistinctIntegers ( k , arr , n ) ; } }"],"bleu":0.24630660838736035,"rouge_l":0.4163230484857102}
{"id":1497,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int maxSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static int findMin ( int a [ ] , int n ) { double sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += Math . log ( a [ i ] ) ; int x = ( int ) Math . exp ( sum \/ n ) ; return x + 1 ; } public static void main ( String [ ] args ) { int a [ ] = { 3 , 2 , 1 , 4 } ; int n = a . length ; System . out . println ( findMin ( a , n ) ) ; } }"],"bleu":0.5722163464275393,"rouge_l":0.7480583185720125}
{"id":1498,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; String ans = \" Yes \" ; for ( int i = 0 ; i < d ; i ++ ) { ans = \" No \" ; for ( int j = 0 ; j < d ; j ++ ) { ans = \" No \" ; for ( int k = 0 ; k < d ; k ++ ) { for ( int k = 0 ; k < d ; k ++ ) { if ( i == j ) { ans = \" Yes \" ; break ; } } } } out . println ( ans ) ; out . flush ( ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["public class GFG { private static void printPaths ( char [ ] [ ] input , int R , int C ) { for ( int i = 0 ; i < C ; i ++ ) { dfs ( input , \" \" , 0 , i , R , C ) ; System . out . println ( ) ; } } private static void dfs ( char [ ] [ ] input , String res , int i , int j , int R , int C ) { if ( i == R ) { System . out . print ( res + \" ▁ \" ) ; return ; } res = res + input [ i ] [ j ] ; for ( int k = 0 ; k < C ; k ++ ) { dfs ( input , res , i + 1 , k , R , C ) ; if ( i + 1 == R ) { break ; } } } public static void main ( String [ ] args ) { char [ ] [ ] input = { { ' a ' , ' b ' } , { ' d ' , ' e ' } } ; int R = input . length ; int C = input [ 0 ] . length ; printPaths ( input , R , C ) ; } }"],"bleu":0.163780749305651,"rouge_l":0.293840658151115}
{"id":1499,"predictions":["import java . io . * ; import java . util . * ; import java . lang . * ; import java . math . * ; import java . text . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( i % 2 == 0 ) { ans += 1 ; } else { ans += 1 ; } } out . println ( ans ) ; out . close ( ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . util . * ; class GFG { static final int mod = ( int ) ( 1e9 + 7 ) ; static int power ( int a , int m1 ) { if ( m1 == 0 ) return 1 ; else if ( m1 == 1 ) return a ; else if ( m1 == 2 ) return ( int ) ( ( 1L * a * a ) % mod ) ; else if ( m1 % 2 == 1 ) return ( int ) ( ( 1L * a * power ( power ( a , m1 \/ 2 ) , 2 ) ) % mod ) ; else return power ( power ( a , m1 \/ 2 ) , 2 ) % mod ; } static int factorial ( int x ) { int ans = 1 ; for ( int i = 1 ; i <= x ; i ++ ) ans = ( int ) ( ( 1L * ans * i ) % mod ) ; return ans ; } static int inverse ( int x ) { return power ( x , mod - 2 ) ; } static int binomial ( int n , int r ) { if ( r > n ) return 0 ; int ans = factorial ( n ) ; ans = ( int ) ( ( 1L * ans * inverse ( factorial ( r ) ) ) % mod ) ; ans = ( int ) ( ( 1L * ans * inverse ( factorial ( n - r ) ) ) % mod ) ; return ans ; } static int number_of_sets ( int n , int a , int b ) { int ans = power ( 2 , n ) ; ans = ans - binomial ( n , a ) ; if ( ans < 0 ) ans += mod ; ans = ans - binomial ( n , b ) ; ans -- ; if ( ans < 0 ) ans += mod ; return ans ; } public static void main ( String [ ] args ) { int N = 4 , A = 1 , B = 3 ; System . out . print ( number_of_sets ( N , A , B ) ) ; } }"],"bleu":0.1521726966359605,"rouge_l":0.3153517644414475}
{"id":1500,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["import java . io . * ; class GFG { public static void main ( String [ ] args ) { double n = 5 , a = 2 ; System . out . println ( sumOfSeries ( a , n ) ) ; } static double sumOfSeries ( double a , double n ) { double res = 0 , prev = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { prev *= ( a \/ i ) ; res = res + prev ; } return ( res ) ; } }"],"bleu":0.4769158539775936,"rouge_l":0.5034257240734974}
{"id":1501,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int countPairs ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ i ] > arr [ j ] ) count ++ ; } } return count ; } static int countPairs ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ i ] > arr [ j ] ) count ++ ; } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( countPairs ( arr , n ) ) ; } }"],"references":["import java . util . HashSet ; class GFG { static int countNum ( int arr [ ] , int n ) { HashSet < Integer > s = new HashSet < > ( ) ; int count = 0 , maxm = Integer . MIN_VALUE , minm = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { s . add ( arr [ i ] ) ; if ( arr [ i ] < minm ) minm = arr [ i ] ; if ( arr [ i ] > maxm ) maxm = arr [ i ] ; } for ( int i = minm ; i <= maxm ; i ++ ) if ( ! s . contains ( i ) ) count ++ ; return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 5 , 8 , 6 } ; int n = arr . length ; System . out . println ( countNum ( arr , n ) ) ; } }"],"bleu":0.47750026916754446,"rouge_l":0.6362516425755586}
{"id":1502,"predictions":["import java . util . * ; class GFG { static boolean isVowel ( String s ) { for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i ) ) return false ; } return true ; } public static void main ( String [ ] args ) { String s = \" geeksforgeeksforgeeks \" ; if ( isVowel ( s ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . io . * ; public class GFG { static int MAX_CHAR = 256 ; static boolean isPresent ( String s , String q ) { int [ ] freq = new int [ MAX_CHAR ] ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) freq [ s . charAt ( i ) ] ++ ; for ( int i = 0 ; i < q . length ( ) ; i ++ ) { freq [ q . charAt ( i ) ] -- ; if ( freq [ q . charAt ( i ) ] < 0 ) return false ; } return true ; } static public void main ( String [ ] args ) { String s = \" abctd \" ; String q = \" cat \" ; if ( isPresent ( s , q ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.4034624112216042,"rouge_l":0.6682937411866797}
{"id":1503,"predictions":["import java . io . * ; import java . util . * ; import java . lang . * ; import java . math . * ; class GFG { public static void main ( String [ ] args ) { int N = 5 ; System . out . println ( N * N ) ; } }"],"references":["class GFG { static double area_of_circle ( int m , int n ) { int square_of_radius = ( m * n ) \/ 4 ; double area = ( 3.141 * square_of_radius ) ; return area ; } public static void main ( String [ ] args ) { int n = 10 ; int m = 30 ; System . out . println ( area_of_circle ( m , n ) ) ; } }"],"bleu":0.28444546242638363,"rouge_l":0.4211904761904762}
{"id":1504,"predictions":["import java . io . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 12 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . io . * ; class GFG { static void printTwoSetBitNums ( int n ) { int x = 1 ; while ( n > 0 ) { int y = 0 ; while ( y < x ) { System . out . print ( ( ( 1 << x ) + ( 1 << y ) ) + \" ▁ \" ) ; n -- ; if ( n == 0 ) return ; y ++ ; } x ++ ; } } public static void main ( String [ ] args ) { int n = 4 ; printTwoSetBitNums ( n ) ; } }"],"bleu":0.39090118507911514,"rouge_l":0.513389441469013}
{"id":1505,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int countPairs ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) count ++ ; } return count ; } static int countPairs ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( countPairs ( arr , n ) ) ; } }"],"references":["class GFG { static int binomialCoeff ( int n , int k ) { int [ ] [ ] C = new int [ n + 1 ] [ k + 1 ] ; int i , j ; for ( i = 0 ; i <= n ; i ++ ) { for ( j = 0 ; j <= Math . min ( i , k ) ; j ++ ) { if ( j == 0 || j == i ) C [ i ] [ j ] = 1 ; else C [ i ] [ j ] = C [ i - 1 ] [ j - 1 ] + C [ i - 1 ] [ j ] ; } } return C [ n ] [ k ] ; } static int findMax ( int n ) { return binomialCoeff ( n , n \/ 2 ) ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( findMax ( n ) ) ; } }"],"bleu":0.31544071121789846,"rouge_l":0.4288031723143475}
{"id":1506,"predictions":["import java . io . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["import java . io . * ; class GFG { public static int calculateSum ( String arr [ ] , int n ) { if ( n == 0 ) return 0 ; String s = arr [ 0 ] ; int value = Integer . parseInt ( s ) ; int sum = value ; for ( int i = 2 ; i < n ; i = i + 2 ) { s = arr [ i ] ; value = Integer . parseInt ( s ) ; char operation = arr [ i - 1 ] . charAt ( 0 ) ; if ( operation == ' + ' ) sum += value ; else sum -= value ; } return sum ; } public static void main ( String [ ] args ) { String arr [ ] = { \"3\" , \" + \" , \"4\" , \" - \" , \"7\" , \" + \" , \"13\" } ; int n = arr . length ; System . out . println ( calculateSum ( arr , n ) ) ; } }"],"bleu":0.4005344731506574,"rouge_l":0.5899645695681317}
{"id":1507,"predictions":["import java . io . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 10 == 0 ) return false ; if ( n % 10 == 0 ) return false ; if ( n % 10 == 0 ) return false ; if ( isPrime ( n \/ 10 ) ) return false ; if ( isPrime ( n \/ 10 ) ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 10 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . io . * ; class GFG { static boolean checkplusperfect ( int x ) { int temp = x ; int n = 0 ; while ( x != 0 ) { x \/= 10 ; n ++ ; } x = temp ; int sum = 0 ; while ( x != 0 ) { sum += Math . pow ( x % 10 , n ) ; x \/= 10 ; } return ( sum == temp ) ; } public static void main ( String [ ] args ) { int x = 9474 ; if ( checkplusperfect ( x ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.4463471933113817,"rouge_l":0.6128343589099585}
{"id":1508,"predictions":["import java . io . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static boolean isPossible ( int arr [ ] , int p , int n , int m ) { int sum = 0 ; for ( int i = 0 ; i < p ; i ++ ) sum += arr [ i ] ; if ( sum == ( n * m ) ) return true ; return false ; } public static void main ( String [ ] args ) { int n = 3 , m = 4 ; int arr [ ] = { 6 , 3 , 2 , 1 } ; int p = arr . length ; if ( isPossible ( arr , p , n , m ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.480153068340017,"rouge_l":0.6527858555309992}
{"id":1509,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += st . nextToken ( ) ; sum += st . nextToken ( ) ; } System . out . println ( sum ) ; } }"],"references":["class GFG { static int reverse ( int n ) { int d = 0 , s = 0 ; while ( n > 0 ) { d = n % 10 ; s = s * 10 + d ; n = n \/ 10 ; } return s ; } static boolean isPalin ( int n ) { return n == reverse ( n ) ; } static int sumOfArray ( int [ ] arr , int n ) { int s = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( ( arr [ i ] > 10 ) && isPalin ( arr [ i ] ) ) { s += arr [ i ] ; } } return s ; } public static void main ( String [ ] args ) { int n = 6 ; int [ ] arr = { 12 , 313 , 11 , 44 , 9 , 1 } ; System . out . println ( sumOfArray ( arr , n ) ) ; } }"],"bleu":0.21289020609308526,"rouge_l":0.34524873398868033}
{"id":1510,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int n = Integer . parseInt ( br . readLine ( ) ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = Integer . parseInt ( br . readLine ( ) ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { count ++ ; } } System . out . println ( count ) ; } }"],"references":["class GFG { static int minCost ( int arr [ ] , int n ) { int count_even = 0 ; int count_odd = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) count_even ++ ; else count_odd ++ ; } return Math . min ( count_even , count_odd ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 4 , 3 , 1 , 5 } ; int n = arr . length ; System . out . println ( minCost ( arr , n ) ) ; } }"],"bleu":0.3837804835363981,"rouge_l":0.44067589077996816}
{"id":1511,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int countPairs ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( countPairs ( arr , n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int gcd ( int a , int b ) { if ( a == 0 || b == 0 ) return 0 ; if ( a == b ) return a ; if ( a > b ) return gcd ( a - b , b ) ; return gcd ( a , b - a ) ; } static boolean coprime ( int a , int b ) { return ( gcd ( a , b ) == 1 ) ; } static int numOfPairs ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) for ( int j = i + 1 ; j < n ; j ++ ) if ( coprime ( arr [ i ] , arr [ j ] ) ) count ++ ; return count ; } public static void main ( String args [ ] ) throws IOException { int arr [ ] = { 1 , 2 , 5 , 4 , 8 , 3 , 9 } ; int n = arr . length ; System . out . println ( numOfPairs ( arr , n ) ) ; } }"],"bleu":0.31483923606432807,"rouge_l":0.5642002176278563}
{"id":1512,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int count ( int a [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % 2 == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = a . length ; System . out . println ( count ( a , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static int countSubarrays ( int a [ ] , int n , int m ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int odd = 0 ; for ( int j = i ; j < n ; j ++ ) { if ( a [ j ] % 2 == 0 ) odd ++ ; if ( odd == m ) count ++ ; } } return count ; } public static void main ( String [ ] args ) { int a [ ] = { 2 , 2 , 5 , 6 , 9 , 2 , 11 } ; int n = a . length ; int m = 2 ; System . out . println ( countSubarrays ( a , n , m ) ) ; } }"],"bleu":0.5587057296796202,"rouge_l":0.7473416551086453}
{"id":1513,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPowerOfTwo ( int n ) { if ( n == 0 ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 3 ; if ( isPowerOfTwo ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . io . * ; public class GFG { static void divide ( int n , int m ) { System . out . println ( \" Remainder ▁ = ▁ \" + ( ( n ) & ( m - 1 ) ) ) ; System . out . println ( \" Quotient ▁ = ▁ \" + ( n >> ( int ) ( Math . log ( m ) \/ Math . log ( 2 ) ) ) ) ; } static public void main ( String [ ] args ) { int n = 43 , m = 8 ; divide ( n , m ) ; } }"],"bleu":0.32624106686715276,"rouge_l":0.40731319554848966}
{"id":1514,"predictions":["import java . io . * ; import java . util . * ; class GFG { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { System . out . print ( a [ i ] + \" \" ) ; } System . out . println ( ) ; for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( a [ i ] + \" \" ) ; } } }"],"references":["import java . util . HashMap ; class GFG { static int maxlen = 100 ; public static void generateSubStrings ( String s , HashMap < String , Integer > mpp ) { int l = s . length ( ) ; for ( int i = 0 ; i < l ; i ++ ) { String temp = \" \" ; for ( int j = i ; j < l ; j ++ ) { temp += s . charAt ( j ) ; if ( mpp . containsKey ( temp ) ) { int x = mpp . get ( temp ) ; mpp . put ( temp , ++ x ) ; } else mpp . put ( temp , 1 ) ; } } } public static void binomialCoeff ( int [ ] [ ] C ) { int i , j ; for ( i = 1 ; i < 100 ; i ++ ) { for ( j = 0 ; j < 100 ; j ++ ) { if ( j == 0 || j == i ) C [ i ] [ j ] = 1 ; else C [ i ] [ j ] = C [ i - 1 ] [ j - 1 ] + C [ i - 1 ] [ j ] ; } } } public static int answerQuery ( HashMap < String , Integer > mpp , int [ ] [ ] C , int k ) { int ans = 0 ; for ( HashMap . Entry < String , Integer > entry : mpp . entrySet ( ) ) { if ( entry . getValue ( ) >= k ) ans += C [ entry . getValue ( ) ] [ k ] ; } return ans ; } public static void main ( String [ ] args ) { String s = \" aabaab \" ; HashMap < String , Integer > mpp = new HashMap < > ( ) ; generateSubStrings ( s , mpp ) ; int [ ] [ ] C = new int [ maxlen ] [ maxlen ] ; binomialCoeff ( C ) ; int [ ] queries = { 2 , 3 , 4 } ; int q = queries . length ; for ( int i = 0 ; i < q ; i ++ ) System . out . println ( answerQuery ( mpp , C , queries [ i ] ) ) ; } }"],"bleu":0.11598931088402094,"rouge_l":0.32696921741793866}
{"id":1515,"predictions":["import java . io . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["import java . util . Arrays ; class GFG { static int findProduct ( int arr [ ] , int n ) { Arrays . sort ( arr ) ; int prod = 1 * arr [ 0 ] ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( arr [ i ] != arr [ i + 1 ] ) { prod = prod * arr [ i + 1 ] ; } } return prod ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 1 , 1 , 4 , 5 , 6 } ; int n = arr . length ; System . out . println ( findProduct ( arr , n ) ) ; } }"],"bleu":0.5092336294235598,"rouge_l":0.7437154348919055}
{"id":1516,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return true ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 3 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . Arrays ; class GFG { static int SieveOfSundaram ( int n ) { int nNew = ( n - 2 ) \/ 2 ; boolean marked [ ] = new boolean [ nNew + 1 ] ; Arrays . fill ( marked , false ) ; for ( int i = 1 ; i <= nNew ; i ++ ) for ( int j = i ; ( i + j + 2 * i * j ) <= nNew ; j ++ ) marked [ i + j + 2 * i * j ] = true ; if ( n > 2 ) System . out . print ( 2 + \" ▁ \" ) ; for ( int i = 1 ; i <= nNew ; i ++ ) if ( marked [ i ] == false ) System . out . print ( 2 * i + 1 + \" ▁ \" ) ; return - 1 ; } public static void main ( String [ ] args ) { int n = 20 ; SieveOfSundaram ( n ) ; } }"],"bleu":0.15454760567622508,"rouge_l":0.3539007576274657}
{"id":1517,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["class GFG { long ll ; static void solve ( long n ) { if ( n == 1 ) { System . out . println ( - 1 ) ; } else { int num = 2 ; for ( long i = 0 ; i < n - 1 ; i ++ ) { num = ( num * 10 ) + 3 ; } System . out . println ( num ) ; } } public static void main ( String [ ] args ) { long n = 4 ; solve ( n ) ; } }"],"bleu":0.2923464658684588,"rouge_l":0.4980947196516059}
{"id":1518,"predictions":["import java . io . * ; import java . util . * ; class GFG { static void print ( int a [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) System . out . print ( a [ i ] + \" \" ) ; System . out . print ( a [ i ] + \" \" ) ; } System . out . println ( ) ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 } ; int n = a . length ; print ( a , n ) ; } }"],"references":["class GFG { static int minimumOperations ( int arr [ ] , int n ) { int brr [ ] = { 0 , 0 , 0 , 0 } ; for ( int i = 0 ; i < n ; i ++ ) brr [ arr [ i ] % 4 ] ++ ; if ( ( brr [ 1 ] + 2 * brr [ 2 ] + 3 * brr [ 3 ] ) % 4 == 0 ) { int min_opr = Math . min ( brr [ 3 ] , brr [ 1 ] ) ; brr [ 3 ] -= min_opr ; brr [ 1 ] -= min_opr ; min_opr += brr [ 2 ] \/ 2 ; brr [ 2 ] %= 2 ; if ( brr [ 2 ] == 1 ) { min_opr += 2 ; brr [ 2 ] = 0 ; if ( brr [ 3 ] == 1 ) brr [ 3 ] -= 2 ; if ( brr [ 1 ] == 1 ) brr [ 1 ] -= 2 ; } if ( brr [ 1 ] == 1 ) min_opr += ( brr [ 1 ] \/ 4 ) * 3 ; if ( brr [ 3 ] == 1 ) min_opr += ( brr [ 3 ] \/ 4 ) * 3 ; return min_opr ; } return - 1 ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 1 , 2 , 3 , 8 } ; int n = arr . length ; System . out . println ( minimumOperations ( arr , n ) ) ; } }"],"bleu":0.1679546203461637,"rouge_l":0.3794115591585715}
{"id":1519,"predictions":["import java . util . * ; class GFG { static boolean isVowel ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) if ( arr [ i ] < arr [ j ] ) return false ; return true ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 4 , 3 , 4 , 4 , 4 , 4 , 4 , 4 , 3 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 ,"],"references":["import java . io . * ; import java . util . * ; import java . lang . * ; class GFG { static int minFn ( int arr [ ] ) { int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < arr . length ; i ++ ) if ( min > arr [ i ] ) min = arr [ i ] ; return min ; } static void minimizeGraph ( int arr [ ] [ ] ) { int min ; for ( int i = 0 ; i < arr . length ; i ++ ) for ( int j = 0 ; j < arr . length ; j ++ ) if ( arr [ i ] [ j ] == 0 ) arr [ i ] [ j ] = Integer . MAX_VALUE ; for ( int i = 0 ; i < arr . length ; i ++ ) { min = minFn ( arr [ i ] ) ; for ( int j = 0 ; j < arr . length ; j ++ ) { if ( ( arr [ i ] [ j ] != min ) || ( arr [ i ] [ j ] == Integer . MAX_VALUE ) ) arr [ i ] [ j ] = 0 ; else min = 0 ; } } for ( int i = 0 ; i < arr . length ; i ++ ) { for ( int j = 0 ; j < arr . length ; j ++ ) System . out . print ( arr [ i ] [ j ] + \" ▁ \" ) ; System . out . print ( \" \\n \" ) ; } } public static void main ( String [ ] args ) { int arr [ ] [ ] = { { 1 , 2 , 4 , 0 } , { 0 , 0 , 0 , 5 } , { 0 , 2 , 0 , 3 } , { 0 , 0 , 0 , 0 } } ; minimizeGraph ( arr ) ; } }"],"bleu":0.1420243376602283,"rouge_l":0.22584668147628514}
{"id":1520,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int count ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 4 , 4 , 3 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 6 } ; int n = arr . length ; System . out . println ( count ( arr , n ) ) ; } }"],"references":["import java . util . * ; public class GFG { static int getNumToAdd ( int arr [ ] , int n ) { Arrays . sort ( arr ) ; int d = arr [ 1 ] - arr [ 0 ] ; int numToAdd = - 1 ; boolean numAdded = false ; for ( int i = 2 ; i < n ; i ++ ) { int diff = arr [ i ] - arr [ i - 1 ] ; if ( diff != d ) { if ( numAdded ) return - 1 ; if ( diff == 2 * d ) { numToAdd = arr [ i ] - d ; numAdded = true ; } else return - 1 ; } } if ( numToAdd == - 1 ) return ( arr [ n - 1 ] + d ) ; return numToAdd ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 3 , 5 , 7 , 11 , 13 , 15 } ; int n = arr . length ; System . out . println ( getNumToAdd ( arr , n ) ) ; } }"],"bleu":0.3165026271324254,"rouge_l":0.44522329816447465}
{"id":1521,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int x , int y ) { if ( y == 0 ) return false ; if ( y > 0 ) return false ; if ( y > 0 ) return false ; if ( y < 0 ) return false ; if ( y > 0 ) return false ; if ( y > 0 ) return false ; if ( y > 0 ) return false ; if ( y > 0 ) return false ; if ( y > 0 ) return false ; if ( y > 0 ) return false ; if ( y > 0 ) return false ; if ( y > 0 ) return false ; if ( y > 0 ) return false ; if ( y < 0 ) return false ; if ( y > 0 ) return false ; if ( y > 0 ) return false ; if ( y > 0 ) return false ; if ( y > 0 ) return false ; if ( y > 0 ) return false ; if ( y > 0 ) return false ; if ( y > 0 ) return false ; if ( y > 0 ) return false ; if ( y > 0 ) return false ; if ( y > 0 ) return false ; if ( y > 0 ) return false ; if ( y > 0 ) return false ; if ( y > 0 ) return false ; if ( y > 0 ) return false ; if ( y > 0 ) return false ; if ( y > 0 ) return false ; if ( y > 0 ) return false ; if ( y > 0 ) return false ; if ( y > 0 ) return false ; if ( y > 0 ) return false ; if ( y > 0 ) return false ; if ( y > 0 ) return false ; if ( y > 0 ) return false ; if ( y > 0 ) return false ; if ( y > 0 ) return false ; if ( y > 0 ) return false ; if ( y > 0 ) return false ; if ( y > 0 ) return false ; if ( y > 0 ) return false ; if ( y > 0 ) return true ; if ( y > 0 ) return true ; if ( y = true ; if ( y > 0 ) return true ; if ( y > 0 ) System . out . out . println ( isPrime ( y ) ; else System . out . println ( isPrime ( y ) ) ; } public static void main ( String [ ] args ) { int x ="],"references":["import java . io . * ; class GFG { static double PI = 3.1415926535 ; static double findAnglesA ( double a , double b , double c ) { double A = Math . acos ( ( b * b + c * c - a * a ) \/ ( 2 * b * c ) ) ; return A * 180 \/ PI ; } static double findAnglesB ( double a , double b , double c ) { double B = Math . acos ( ( a * a + c * c - b * b ) \/ ( 2 * a * c ) ) ; return B * 180 \/ PI ; } static void printAngles ( int a , int b , int c ) { double x = ( double ) a ; double y = ( double ) b ; double z = ( double ) c ; double A = findAnglesA ( x , y , z ) ; double B = findAnglesB ( x , y , z ) ; System . out . println ( \" Angles ▁ are ▁ A ▁ = ▁ \" + A + \" , ▁ B ▁ = ▁ \" + B + \" , ▁ C ▁ = ▁ \" + 90 ) ; } static void printOtherSides ( int n ) { int b = 0 , c = 0 ; if ( ( n & 1 ) > 0 ) { if ( n == 1 ) System . out . println ( - 1 ) ; else { b = ( n * n - 1 ) \/ 2 ; c = ( n * n + 1 ) \/ 2 ; System . out . println ( \" Side ▁ b ▁ = ▁ \" + b + \" , ▁ Side ▁ c ▁ = ▁ \" + c ) ; } } else { if ( n == 2 ) System . out . println ( - 1 ) ; else { b = n * n \/ 4 - 1 ; c = n * n \/ 4 + 1 ; System . out . println ( \" Side ▁ b ▁ = ▁ \" + b + \" , ▁ Side ▁ c ▁ = ▁ \" + c ) ; } } printAngles ( n , b , c ) ; } public static void main ( String [ ] args ) { int a = 12 ; printOtherSides ( a ) ; } }"],"bleu":0.10954780585315677,"rouge_l":0.26361655773420484}
{"id":1522,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["import java . lang . * ; class GFG { static int MaximumHeight ( int a [ ] , int n ) { return ( int ) Math . floor ( ( - 1 + Math . sqrt ( 1 + ( 8 * n ) ) ) \/ 2 ) ; } public static void main ( String [ ] args ) { int arr [ ] = new int [ ] { 40 , 100 , 20 , 30 } ; int n = arr . length ; System . out . println ( MaximumHeight ( arr , n ) ) ; } }"],"bleu":0.34154988709817496,"rouge_l":0.5303443573133311}
{"id":1523,"predictions":["import java . io . * ; class GFG { static int countPairs ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { if ( arr [ i ] > arr [ j ] ) count ++ ; } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( countPairs ( arr , n ) ) ; } }"],"references":["import java . util . HashMap ; class GFG { static int firstElement ( int arr [ ] , int n , int k ) { HashMap < Integer , Integer > count_map = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int a = 0 ; if ( count_map . get ( arr [ i ] ) != null ) { a = count_map . get ( arr [ i ] ) ; } count_map . put ( arr [ i ] , a + 1 ) ; } for ( int i = 0 ; i < n ; i ++ ) { if ( count_map . get ( arr [ i ] ) == k ) { return arr [ i ] ; } } return - 1 ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 7 , 4 , 3 , 4 , 8 , 7 } ; int n = arr . length ; int k = 2 ; System . out . println ( firstElement ( arr , n , k ) ) ; } }"],"bleu":0.3563102862039326,"rouge_l":0.6255543237250554}
{"id":1524,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int sum ( int a [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += a [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = a . length ; System . out . println ( sum ( a , n ) ) ; } }"],"references":["class Subarray { static int calculate ( int a [ ] , int n ) { int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int r = i + 1 ; for ( int j = r ; j < n ; j ++ ) { if ( a [ i ] == a [ j ] ) r += 1 ; else break ; } int d = r - i ; ans += ( d * ( d + 1 ) \/ 2 ) ; i = r - 1 ; } return ans ; } public static void main ( String [ ] args ) { int a [ ] = { 2 , 4 , 5 , 3 , 3 , 3 } ; System . out . println ( calculate ( a , a . length ) ) ; } }"],"bleu":0.41599574966277314,"rouge_l":0.5875719487842124}
{"id":1525,"predictions":["import java . io . * ; class GFG { static int nthTerm ( int N ) { return ( int ) Math . pow ( N , 2 ) - 1 ; } public static void main ( String [ ] args ) { int N = 4 ; System . out . println ( nthTerm ( N ) ) ; } }"],"references":["import java . util . * ; class GFG { static int nth_group ( int n ) { return n * ( 2 * ( int ) Math . pow ( n , 2 ) + 1 ) ; } public static void main ( String arr [ ] ) { int N = 5 ; System . out . println ( nth_group ( N ) ) ; } }"],"bleu":0.5510678490431848,"rouge_l":0.8291262135922329}
{"id":1526,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter pw = new PrintWriter ( System . out ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int N = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; char [ ] [ ] arr = new char [ M ] [ M ] ; for ( int i = 0 ; i < M ; i ++ ) { String s = br . readLine ( ) . toCharArray ( ) ; for ( int j = 0 ; j < M ; j ++ ) { arr [ i ] [ j ] = s . charAt ( j ) ; } } for ( int i = 0 ; i < M ; i ++ ) { for ( int j = 0 ; j < M ; j ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { if ( arr [ i ] [ k ] [ k ] == ' # ' ) { arr [ i ] [ j ] [ k ] = ' # ' ; } } } } } } } } pw . println ( \" Case # \" + ( i + 1 ) + \" : \" + arr ) ; pw . flush ( ) ; } pw . close ( ) ; } }"],"references":["import java . util . Arrays ; import java . util . Comparator ; public class GFG { static class Word { String str ; int index ; Word ( String str , int index ) { this . str = str ; this . index = index ; } } static class DupArray { Word [ ] array ; int size ; public DupArray ( String str [ ] , int size ) { this . size = size ; array = new Word [ size ] ; int i ; for ( i = 0 ; i < size ; ++ i ) { array [ i ] = new Word ( str [ i ] , i ) ; } } } static class compStr implements Comparator < Word > { public int compare ( Word a , Word b ) { return a . str . compareTo ( b . str ) ; } } static void printAnagramsTogether ( String wordArr [ ] , int size ) { DupArray dupArray = new DupArray ( wordArr , size ) ; int i ; for ( i = 0 ; i < size ; ++ i ) { char [ ] char_arr = dupArray . array [ i ] . str . toCharArray ( ) ; Arrays . sort ( char_arr ) ; dupArray . array [ i ] . str = new String ( char_arr ) ; } Arrays . sort ( dupArray . array , new compStr ( ) ) ; for ( i = 0 ; i < size ; ++ i ) System . out . print ( wordArr [ dupArray . array [ i ] . index ] + \" ▁ \" ) ; } public static void main ( String args [ ] ) { String wordArr [ ] = { \" cat \" , \" dog \" , \" tac \" , \" god \" , \" act \" } ; int size = wordArr . length ; printAnagramsTogether ( wordArr , size ) ; } }"],"bleu":0.15766858685202675,"rouge_l":0.3256082914461101}
{"id":1527,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int maxSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }"],"references":["import java . util . * ; import java . lang . * ; class Main { static void minAbsSumPair ( int arr [ ] , int n ) { int sum , min_sum = 999999 ; int l = 0 , r = n - 1 ; int min_l = l , min_r = n - 1 ; if ( n < 2 ) { System . out . println ( \" Invalid ▁ Input \" ) ; return ; } sort ( arr , l , r ) ; while ( l < r ) { sum = arr [ l ] + arr [ r ] ; if ( Math . abs ( sum ) < Math . abs ( min_sum ) ) { min_sum = sum ; min_l = l ; min_r = r ; } if ( sum < 0 ) l ++ ; else r -- ; } System . out . println ( \" ▁ The ▁ two ▁ elements ▁ whose ▁ \" + \" sum ▁ is ▁ minimum ▁ are ▁ \" + arr [ min_l ] + \" ▁ and ▁ \" + arr [ min_r ] ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 60 , - 10 , 70 , - 80 , 85 } ; int n = arr . length ; minAbsSumPair ( arr , n ) ; } static int partition ( int arr [ ] , int low , int high ) { int pivot = arr [ high ] ; int i = ( low - 1 ) ; for ( int j = low ; j < high ; j ++ ) { if ( arr [ j ] <= pivot ) { i ++ ; int temp = arr [ i ] ; arr [ i ] = arr [ j ] ; arr [ j ] = temp ; } } int temp = arr [ i + 1 ] ; arr [ i + 1 ] = arr [ high ] ; arr [ high ] = temp ; return i + 1 ; } static void sort ( int arr [ ] , int low , int high ) { if ( low < high ) { int pi = partition ( arr , low , high ) ; sort ( arr , low , pi - 1 ) ; sort ( arr , pi + 1 , high ) ; } } }"],"bleu":0.06515407525057706,"rouge_l":0.2999048424614083}
{"id":1528,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; int n = sc . nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = sc . nextInt ( ) ; Arrays . sort ( a ) ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( a [ i ] + \" \" ) ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( a [ i ] + \" \" ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . util . * ; class GFG { static void countFreq ( int arr [ ] , int n ) { Map < Integer , Integer > mp = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { mp . put ( arr [ i ] , mp . get ( arr [ i ] ) == null ? 1 : mp . get ( arr [ i ] ) + 1 ) ; } for ( int i = 0 ; i < n ; i ++ ) { if ( mp . get ( arr [ i ] ) != - 1 ) { System . out . println ( arr [ i ] + \" ▁ \" + mp . get ( arr [ i ] ) ) ; mp . put ( arr [ i ] , - 1 ) ; } } } public static void main ( String [ ] args ) { int arr [ ] = { 10 , 20 , 20 , 10 , 10 , 20 , 5 , 20 } ; int n = arr . length ; countFreq ( arr , n ) ; } }"],"bleu":0.22516746901640497,"rouge_l":0.39909801181477483}
{"id":1529,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPower ( int a [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] > a [ i ] ) { sum += a [ i ] ; a [ i ] = a [ i ] ; a [ i ] = a [ i ] ; a [ i ] = a [ i ] = a [ i ] ; } } return true ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 } ; int n = a . length ; if ( isPower ( a , n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; class GFG { static class pair { int first , second ; public pair ( int first , int second ) { this . first = first ; this . second = second ; } } static boolean isPerfectSquare ( double x ) { double sr = Math . sqrt ( x ) ; return ( ( sr - Math . floor ( sr ) ) == 0 ) ; } static boolean isFibonacci ( int n ) { return isPerfectSquare ( 5 * n * n + 4 ) || isPerfectSquare ( 5 * n * n - 4 ) ; } static int totalPairs ( int a [ ] , int b [ ] , int n , int m ) { List < pair > s = new LinkedList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( isFibonacci ( a [ i ] + b [ j ] ) == true ) { if ( a [ i ] < b [ j ] ) { if ( checkDuplicate ( s , new pair ( a [ i ] , b [ j ] ) ) ) s . add ( new pair ( a [ i ] , b [ j ] ) ) ; } else { if ( checkDuplicate ( s , new pair ( b [ j ] , a [ i ] ) ) ) s . add ( new pair ( b [ j ] , a [ i ] ) ) ; } } } } return s . size ( ) ; } static boolean checkDuplicate ( List < pair > pairList , pair newPair ) { for ( pair p : pairList ) { if ( p . first == newPair . first && p . second == newPair . second ) return false ; } return true ; } public static void main ( String [ ] args ) { int a [ ] = { 99 , 1 , 33 , 2 } ; int b [ ] = { 1 , 11 , 2 } ; int n = a . length ; int m = b . length ; System . out . println ( totalPairs ( a , b , n , m ) ) ; } }"],"bleu":0.15961275646031256,"rouge_l":0.3901591458501209}
{"id":1530,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int n ) { if ( n == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 3 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . io . * ; class GFG { static int countSolutions ( int n ) { int res = 0 ; for ( int x = 0 ; x * x < n ; x ++ ) for ( int y = 0 ; x * x + y * y < n ; y ++ ) res ++ ; return res ; } public static void main ( String args [ ] ) { System . out . println ( \" Total ▁ Number ▁ of ▁ distinct ▁ Non - Negative ▁ pairs ▁ is ▁ \" + countSolutions ( 6 ) ) ; } }"],"bleu":0.30752403387199306,"rouge_l":0.4671171171171172}
{"id":1531,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) if ( arr [ i ] % 2 == 0 ) return false ; return true ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = arr . length ; if ( isPrime ( arr , n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static int findLength ( String str , int n ) { int ans = 0 ; for ( int i = 0 ; i <= n - 2 ; i ++ ) { int l = i , r = i + 1 ; int lsum = 0 , rsum = 0 ; while ( r < n && l >= 0 ) { lsum += str . charAt ( l ) - '0' ; rsum += str . charAt ( r ) - '0' ; if ( lsum == rsum ) { ans = Math . max ( ans , r - l + 1 ) ; } l -- ; r ++ ; } } return ans ; } static public void main ( String [ ] args ) { String str = \"123123\" ; System . out . println ( \" Length ▁ of ▁ the ▁ substring ▁ is ▁ \" + findLength ( str , str . length ( ) ) ) ; } }"],"bleu":0.2367819281968945,"rouge_l":0.40038372210441275}
{"id":1532,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { System . out . print ( arr [ i ] + \" \" ) ; } System . out . println ( ) ; } }"],"references":["class LargestSubArray2 { int min ( int x , int y ) { return ( x < y ) ? x : y ; } int max ( int x , int y ) { return ( x > y ) ? x : y ; } int findLength ( int arr [ ] , int n ) { int max_len = 1 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { int mn = arr [ i ] , mx = arr [ i ] ; for ( int j = i + 1 ; j < n ; j ++ ) { mn = min ( mn , arr [ j ] ) ; mx = max ( mx , arr [ j ] ) ; if ( ( mx - mn ) == j - i ) max_len = max ( max_len , mx - mn + 1 ) ; } } return max_len ; } public static void main ( String [ ] args ) { LargestSubArray2 large = new LargestSubArray2 ( ) ; int arr [ ] = { 1 , 56 , 58 , 57 , 90 , 92 , 94 , 93 , 91 , 45 } ; int n = arr . length ; System . out . println ( \" Length ▁ of ▁ the ▁ longest ▁ contiguous ▁ subarray ▁ is ▁ \" + large . findLength ( arr , n ) ) ; } }"],"bleu":0.2594949412709739,"rouge_l":0.3603964170001906}
{"id":1533,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["import java . io . * ; class GFG { static void findCombinationsUtil ( int arr [ ] , int index , int num , int reducedNum ) { if ( reducedNum < 0 ) return ; if ( reducedNum == 0 ) { for ( int i = 0 ; i < index ; i ++ ) System . out . print ( arr [ i ] + \" ▁ \" ) ; System . out . println ( ) ; return ; } int prev = ( index == 0 ) ? 1 : arr [ index - 1 ] ; for ( int k = prev ; k <= num ; k ++ ) { arr [ index ] = k ; findCombinationsUtil ( arr , index + 1 , num , reducedNum - k ) ; } } static void findCombinations ( int n ) { int arr [ ] = new int [ n ] ; findCombinationsUtil ( arr , 0 , n , n ) ; } public static void main ( String [ ] args ) { int n = 5 ; findCombinations ( n ) ; } }"],"bleu":0.28485084311396136,"rouge_l":0.4217012323414488}
{"id":1534,"predictions":["import java . io . * ; import java . util . * ; import java . lang . * ; import java . math . * ; class GFG { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; System . out . println ( n * k ) ; for ( int i = 1 ; i <= n ; i ++ ) { System . out . print ( i + \" \" ) ; } } }"],"references":["class GFG { static int fib ( int n ) { double phi = ( 1 + Math . sqrt ( 5 ) ) \/ 2 ; return ( int ) Math . round ( Math . pow ( phi , n ) \/ Math . sqrt ( 5 ) ) ; } static int calculateSum ( int l , int r ) { int sum = fib ( r + 2 ) - fib ( l + 1 ) ; return sum ; } public static void main ( String [ ] args ) { int l = 4 , r = 8 ; System . out . println ( calculateSum ( l , r ) ) ; } }"],"bleu":0.20654186484594775,"rouge_l":0.33244829513694796}
{"id":1535,"predictions":["import java . io . * ; class GFG { static int count ( int a , int b ) { if ( b == 0 ) return a ; if ( a == b ) return b ; if ( a > b ) return count ( a , b - a ) ; return count ( a , b - b ) ; } public static void main ( String [ ] args ) { int a = 5 , b = 5 ; System . out . println ( count ( a , b ) ) ; } }"],"references":["import java . io . * ; class GFG { static void MinimumValue ( int x , int y ) { if ( x > y ) { int temp = x ; x = y ; y = temp ; } int a = 1 ; int b = x - 1 ; int c = y - b ; System . out . print ( a + \" ▁ \" + b + \" ▁ \" + c ) ; } public static void main ( String [ ] args ) { int x = 123 , y = 13 ; MinimumValue ( x , y ) ; } }"],"bleu":0.3419842846277066,"rouge_l":0.5004557885141295}
{"id":1536,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { a [ i ] = a [ j ] + a [ i ] ; } } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans += a [ i ] ; } out . println ( ans ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["class GFG { static int maximumChars ( String str ) { int n = str . length ( ) ; int res = - 1 ; for ( int i = 0 ; i < n - 1 ; i ++ ) for ( int j = i + 1 ; j < n ; j ++ ) if ( str . charAt ( i ) == str . charAt ( j ) ) res = Math . max ( res , Math . abs ( j - i - 1 ) ) ; return res ; } public static void main ( String [ ] args ) { String str = \" abba \" ; System . out . println ( maximumChars ( str ) ) ; } }"],"bleu":0.15891916918008206,"rouge_l":0.3795144157814871}
{"id":1537,"predictions":["import java . io . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 12 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . io . * ; class GFG { static int printTribRec ( int n ) { if ( n == 0 || n == 1 || n == 2 ) return 0 ; if ( n == 3 ) return 1 ; else return printTribRec ( n - 1 ) + printTribRec ( n - 2 ) + printTribRec ( n - 3 ) ; } static void printTrib ( int n ) { for ( int i = 1 ; i < n ; i ++ ) System . out . print ( printTribRec ( i ) + \" ▁ \" ) ; } public static void main ( String args [ ] ) { int n = 10 ; printTrib ( n ) ; } }"],"bleu":0.33511717743844444,"rouge_l":0.5184594953519257}
{"id":1538,"predictions":["import java . io . * ; import java . util . * ; class GFG { public static void main ( String [ ] args ) { int N = 5 ; System . out . println ( N + \" \" + N ) ; } }"],"references":["import java . io . * ; class GFG { static int steps ( int N , int M ) { if ( N == 1 ) return 0 ; else if ( N == 2 ) return M ; return 2 * M + ( N - 3 ) ; } public static void main ( String [ ] args ) { int N = 4 , M = 4 ; System . out . print ( steps ( N , M ) ) ; } }"],"bleu":0.27003196613707364,"rouge_l":0.48600045526974733}
{"id":1539,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( n % i == 0 ) { count ++ ; } else { count ++ ; } } return count ; } public static void main ( String [ ] args ) { int n = 3 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; class solution { static int waysToKAdjacentSetBits ( int n , int k , int currentIndex , int adjacentSetBits , int lastBit ) { if ( currentIndex == n ) { if ( adjacentSetBits == k ) return 1 ; return 0 ; } int noOfWays = 0 ; if ( lastBit == 1 ) { noOfWays += waysToKAdjacentSetBits ( n , k , currentIndex + 1 , adjacentSetBits + 1 , 1 ) ; noOfWays += waysToKAdjacentSetBits ( n , k , currentIndex + 1 , adjacentSetBits , 0 ) ; } else if ( lastBit == 0 ) { noOfWays += waysToKAdjacentSetBits ( n , k , currentIndex + 1 , adjacentSetBits , 1 ) ; noOfWays += waysToKAdjacentSetBits ( n , k , currentIndex + 1 , adjacentSetBits , 0 ) ; } return noOfWays ; } public static void main ( String args [ ] ) { int n = 5 , k = 2 ; int totalWays = waysToKAdjacentSetBits ( n , k , 1 , 0 , 1 ) + waysToKAdjacentSetBits ( n , k , 1 , 0 , 0 ) ; System . out . println ( \" Number ▁ of ▁ ways ▁ = ▁ \" + totalWays ) ; } }"],"bleu":0.1488735563073931,"rouge_l":0.3863276520443327}
{"id":1540,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int countPairs ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) count ++ ; } return count ; } static int countPairs ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { count ++ ; } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( countPairs ( arr , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static boolean canPlace ( int a [ ] , int n , int p , int sep ) { int prisoners_placed = 1 ; int last_prisoner_placed = a [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { int current_cell = a [ i ] ; if ( current_cell - last_prisoner_placed >= sep ) { prisoners_placed ++ ; last_prisoner_placed = current_cell ; if ( prisoners_placed == p ) { return true ; } } } return false ; } static int maxDistance ( int cell [ ] , int n , int p ) { Arrays . sort ( cell ) ; int start = 0 ; int end = cell [ n - 1 ] - cell [ 0 ] ; int ans = 0 ; while ( start <= end ) { int mid = start + ( ( end - start ) \/ 2 ) ; if ( canPlace ( cell , n , p , mid ) ) { ans = mid ; start = mid + 1 ; } else { end = mid - 1 ; } } return ans ; } public static void main ( String [ ] args ) { int cell [ ] = { 1 , 2 , 8 , 4 , 9 } ; int n = cell . length ; int p = 3 ; System . out . println ( maxDistance ( cell , n , p ) ) ; } }"],"bleu":0.27768536788451476,"rouge_l":0.5406719085060758}
{"id":1541,"predictions":["import java . io . * ; class GFG { static boolean isPower ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) if ( arr [ i ] > arr [ j ] ) return false ; return true ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 1 , 1 , 1 , 1 } ; int n = arr . length ; if ( isPower ( arr , n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static boolean containsElement ( int [ ] arr , int n ) { int xorArr = 0 ; for ( int i = 0 ; i < n ; ++ i ) xorArr ^= arr [ i ] ; for ( int i = 0 ; i < n ; ++ i ) { int x = xorArr ^ arr [ i ] ; if ( arr [ i ] == x ) return true ; } return false ; } public static void main ( String [ ] args ) { int [ ] arr = { 8 , 2 , 4 , 15 , 1 } ; int n = arr . length ; if ( containsElement ( arr , n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.5787020758826358,"rouge_l":0.7698439056791764}
{"id":1542,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i ) ) count ++ ; } out . println ( count ) ; out . close ( ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . util . * ; class GFG { static void solve ( String s ) { HashMap < Character , Integer > m = new HashMap < > ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( m . containsKey ( s . charAt ( i ) ) ) m . put ( s . charAt ( i ) , m . get ( s . charAt ( i ) ) + 1 ) ; else m . put ( s . charAt ( i ) , 1 ) ; } String new_string = \" \" ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( m . get ( s . charAt ( i ) ) % 2 == 0 ) continue ; new_string = new_string + s . charAt ( i ) ; } System . out . println ( new_string ) ; } public static void main ( String [ ] args ) { String s = \" aabbbddeeecc \" ; solve ( s ) ; } }"],"bleu":0.24201849037247253,"rouge_l":0.41950877192982455}
{"id":1543,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int maxSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }"],"references":["import java . io . * ; public class GFG { static int getTotalXorOfSubarrayXors ( int arr [ ] , int N ) { int res = 0 ; for ( int i = 0 ; i < N ; i ++ ) { int freq = ( i + 1 ) * ( N - i ) ; if ( freq % 2 == 1 ) res = res ^ arr [ i ] ; } return res ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 5 , 2 , 4 , 6 } ; int N = arr . length ; System . out . println ( getTotalXorOfSubarrayXors ( arr , N ) ) ; } }"],"bleu":0.5374573995681065,"rouge_l":0.7278090992526551}
{"id":1544,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int N = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; System . out . println ( ( int ) Math . pow ( 2 , M ) ) ; } }"],"references":["class GFG { static int sum ( int N ) { int S1 , S2 , S3 ; S1 = ( ( N \/ 3 ) ) * ( 2 * 3 + ( N \/ 3 - 1 ) * 3 ) \/ 2 ; S2 = ( ( N \/ 4 ) ) * ( 2 * 4 + ( N \/ 4 - 1 ) * 4 ) \/ 2 ; S3 = ( ( N \/ 12 ) ) * ( 2 * 12 + ( N \/ 12 - 1 ) * 12 ) \/ 2 ; return S1 + S2 - S3 ; } public static void main ( String [ ] args ) { int N = 20 ; System . out . print ( sum ( 12 ) ) ; } }"],"bleu":0.170145514109934,"rouge_l":0.3242274412855377}
{"id":1545,"predictions":["import java . io . * ; class GFG { static int countPairs ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { if ( arr [ i ] < arr [ j ] ) count ++ ; } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( countPairs ( arr , n ) ) ; } }"],"references":["public static int count ( int S [ ] , int m , int n ) { int table [ ] = new int [ n + 1 ] ; table [ 0 ] = 1 ; for ( int i = 0 ; i < m ; i ++ ) for ( int j = S [ i ] ; j <= n ; j ++ ) table [ j ] += table [ j - S [ i ] ] ; return table [ n ] ; }"],"bleu":0.24738343042522173,"rouge_l":0.4777108433734939}
{"id":1546,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int count ( int n ) { int count = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( n % i == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( count ( n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int countSolutions ( int a ) { int count = Integer . bitCount ( a ) ; count = ( int ) Math . pow ( 2 , count ) ; return count ; } public static void main ( String [ ] args ) { int a = 3 ; System . out . println ( countSolutions ( a ) ) ; } }"],"bleu":0.45895029250266955,"rouge_l":0.6817002594292556}
{"id":1547,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["class GFG { static int countNumbers ( int n ) { if ( n % 2 == 1 ) return 0 ; return ( 9 * ( int ) Math . pow ( 10 , n \/ 2 - 1 ) ) ; } public static void main ( String args [ ] ) { int n = 2 ; System . out . print ( countNumbers ( n ) ) ; } }"],"bleu":0.3929848500010044,"rouge_l":0.5913196739369906}
{"id":1548,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int maxSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static int getMinDiff ( int arr [ ] , int n , int k ) { if ( n == 1 ) return 0 ; Arrays . sort ( arr ) ; int ans = arr [ n - 1 ] - arr [ 0 ] ; int small = arr [ 0 ] + k ; int big = arr [ n - 1 ] - k ; int temp = 0 ; if ( small > big ) { temp = small ; small = big ; big = temp ; } for ( int i = 1 ; i < n - 1 ; i ++ ) { int subtract = arr [ i ] - k ; int add = arr [ i ] + k ; if ( subtract >= small || add <= big ) continue ; if ( big - subtract <= add - small ) small = subtract ; else big = add ; } return Math . min ( ans , big - small ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 4 , 6 } ; int n = arr . length ; int k = 10 ; System . out . println ( \" Maximum ▁ difference ▁ is ▁ \" + getMinDiff ( arr , n , k ) ) ; } }"],"bleu":0.23823484767814662,"rouge_l":0.4813699967458509}
{"id":1549,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int count ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { count ++ ; } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( count ( arr , n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int minimumChanges ( int n , int a [ ] ) { int i ; int [ ] sf = new int [ n + 1 ] ; sf [ n ] = 0 ; for ( i = n - 1 ; i >= 0 ; i -- ) { sf [ i ] = sf [ i + 1 ] ; if ( a [ i ] <= 0 ) sf [ i ] ++ ; } int pos = 0 ; int mn = n ; for ( i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] >= 0 ) pos ++ ; mn = Math . min ( mn , pos + sf [ i + 1 ] ) ; } return mn ; } public static void main ( String [ ] args ) { int [ ] a = { - 1 , - 2 , - 3 , 3 , - 5 , 3 , 4 } ; int n = a . length ; System . out . println ( minimumChanges ( n , a ) ) ; } }"],"bleu":0.2663802924227351,"rouge_l":0.5576814326107448}
{"id":1550,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int countPairs ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ i ] > arr [ j ] ) count ++ ; } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 1 , 1 , 1 , 1 , 1 } ; int n = arr . length ; System . out . println ( countPairs ( arr , n ) ) ; } }"],"references":["import java . util . * ; class Main { static void printFirstRepeating ( int arr [ ] ) { int min = - 1 ; HashSet < Integer > set = new HashSet < > ( ) ; for ( int i = arr . length - 1 ; i >= 0 ; i -- ) { if ( set . contains ( arr [ i ] ) ) min = i ; else set . add ( arr [ i ] ) ; } if ( min != - 1 ) System . out . println ( \" The ▁ first ▁ repeating ▁ element ▁ is ▁ \" + arr [ min ] ) ; else System . out . println ( \" There ▁ are ▁ no ▁ repeating ▁ elements \" ) ; } public static void main ( String [ ] args ) throws java . lang . Exception { int arr [ ] = { 10 , 5 , 3 , 4 , 3 , 5 , 6 } ; printFirstRepeating ( arr ) ; } }"],"bleu":0.29142737736102015,"rouge_l":0.4628042171642527}
{"id":1551,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int count ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { count ++ ; } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 4 , 3 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 ,"],"references":["import java . io . * ; class GFG { static void solveEven ( int n , int arr [ ] , int b [ ] ) { int left = n - 1 ; for ( int i = 0 ; i < ( n \/ 2 ) ; ++ i ) { b [ i ] = arr [ left ] ; left = left - 2 ; if ( left < 0 ) break ; } int right = 0 ; for ( int i = n \/ 2 ; i <= n - 1 ; ++ i ) { b [ i ] = arr [ right ] ; right = right + 2 ; if ( right > n - 2 ) break ; } } static void solveOdd ( int n , int arr [ ] , int b [ ] ) { int left = n - 1 ; for ( int i = 0 ; i < ( n \/ 2 ) + 1 ; ++ i ) { b [ i ] = arr [ left ] ; left = left - 2 ; if ( left < 0 ) break ; } int right = 1 ; for ( int i = ( n \/ 2 ) + 1 ; i <= n - 1 ; ++ i ) { b [ i ] = arr [ right ] ; right = right + 2 ; if ( right > n - 2 ) break ; } } static void solve ( int n , int arr [ ] ) { int b [ ] = new int [ n ] ; if ( n % 2 == 0 ) solveEven ( n , arr , b ) ; else solveOdd ( n , arr , b ) ; for ( int i = 0 ; i <= n - 1 ; ++ i ) { System . out . print ( b [ i ] + \" ▁ \" ) ; } } public static void main ( String [ ] args ) { int [ ] arr = { 1 , 2 , 3 , 4 } ; int n = arr . length ; solve ( n , arr ) ; } }"],"bleu":0.12186966979040818,"rouge_l":0.18059667501708038}
{"id":1552,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( n % i == 0 ) { count ++ ; } } return count ; } public static void main ( String [ ] args ) { int n = 12 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static void findpair ( int l , int r ) { int c = 0 ; for ( int i = l ; i <= r ; i ++ ) { for ( int j = i + 1 ; j <= r ; j ++ ) { if ( j % i == 0 && j != i ) { System . out . println ( i + \" , ▁ \" + j ) ; c = 1 ; break ; } } if ( c == 1 ) break ; } } public static void main ( String args [ ] ) { int l = 1 , r = 10 ; findpair ( l , r ) ; } }"],"bleu":0.29880409180648504,"rouge_l":0.4566489723696747}
{"id":1553,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["class GFG { static int nthEven ( int n ) { return ( 2 * n ) ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( nthEven ( n ) ) ; } }"],"bleu":0.49318862081216946,"rouge_l":0.7375652651827426}
{"id":1554,"predictions":["import java . io . * ; class GFG { static boolean isVowel ( int a , int b ) { if ( a == b ) return true ; if ( a == b ) return true ; if ( a == b ) return true ; if ( a == b ) return false ; return false ; } public static void main ( String [ ] args ) { int a = 12 , b = 12 ; if ( isVowel ( a , b ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static boolean checkUtil ( int num , int dig , int base ) { if ( dig == 1 && num < base ) return true ; if ( dig > 1 && num >= base ) return checkUtil ( num \/ base , -- dig , base ) ; return false ; } static boolean check ( int num , int dig ) { for ( int base = 2 ; base <= 32 ; base ++ ) if ( checkUtil ( num , dig , base ) ) return true ; return false ; } public static void main ( String [ ] args ) { int num = 8 ; int dig = 3 ; if ( check ( num , dig ) ) System . out . print ( \" Yes \" ) ; else System . out . print ( \" No \" ) ; } }"],"bleu":0.343451273433918,"rouge_l":0.5699586043761088}
{"id":1555,"predictions":["import java . io . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["class SmallestSubArraySum { static int smallestSubWithSum ( int arr [ ] , int n , int x ) { int min_len = n + 1 ; for ( int start = 0 ; start < n ; start ++ ) { int curr_sum = arr [ start ] ; if ( curr_sum > x ) return 1 ; for ( int end = start + 1 ; end < n ; end ++ ) { curr_sum += arr [ end ] ; if ( curr_sum > x && ( end - start + 1 ) < min_len ) min_len = ( end - start + 1 ) ; } } return min_len ; } public static void main ( String [ ] args ) { int arr1 [ ] = { 1 , 4 , 45 , 6 , 10 , 19 } ; int x = 51 ; int n1 = arr1 . length ; int res1 = smallestSubWithSum ( arr1 , n1 , x ) ; if ( res1 == n1 + 1 ) System . out . println ( \" Not ▁ Possible \" ) ; else System . out . println ( res1 ) ; int arr2 [ ] = { 1 , 10 , 5 , 2 , 7 } ; int n2 = arr2 . length ; x = 9 ; int res2 = smallestSubWithSum ( arr2 , n2 , x ) ; if ( res2 == n2 + 1 ) System . out . println ( \" Not ▁ Possible \" ) ; else System . out . println ( res2 ) ; int arr3 [ ] = { 1 , 11 , 100 , 1 , 0 , 200 , 3 , 2 , 1 , 250 } ; int n3 = arr3 . length ; x = 280 ; int res3 = smallestSubWithSum ( arr3 , n3 , x ) ; if ( res3 == n3 + 1 ) System . out . println ( \" Not ▁ Possible \" ) ; else System . out . println ( res3 ) ; } }"],"bleu":0.12999412306361352,"rouge_l":0.37574858837620495}
{"id":1556,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int maxSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }"],"references":["public class GFG { public static int getSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { double sqrtCurrent = Math . sqrt ( arr [ i ] ) ; for ( int j = 0 ; j < n ; j ++ ) { double x = arr [ j ] ; if ( x == sqrtCurrent ) { sum += ( sqrtCurrent * sqrtCurrent ) ; break ; } } } return sum ; } public static void main ( String args [ ] ) { int arr [ ] = { 2 , 4 , 5 , 6 , 7 , 8 , 9 , 3 } ; int n = arr . length ; System . out . println ( getSum ( arr , n ) ) ; } }"],"bleu":0.4814769672509788,"rouge_l":0.656534594914252}
{"id":1557,"predictions":["import java . io . * ; import java . util . * ; import java . lang . * ; import java . math . * ; import java . text . * ; import java . lang . * ; import java . lang . * ; import java . lang . * ; import java . math . * ; class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; int k = scan . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans += ( k * ( i + 1 ) * ( i + 1 ) * ( i + 1 ) ) ; } System . out . println ( ans ) ; } }"],"references":["import java . io . * ; class GFG { static int findCountOfPairs ( int a , int b , int n ) { int ans = 0 ; ans += n * ( a \/ n ) * ( b \/ n ) ; ans += ( a \/ n ) * ( b % n ) ; ans += ( a % n ) * ( b \/ n ) ; ans += ( ( a % n ) + ( b % n ) ) \/ n ; return ans ; } public static void main ( String [ ] args ) { int a = 5 , b = 13 , n = 3 ; System . out . println ( findCountOfPairs ( a , b , n ) ) ; } }"],"bleu":0.2378044987638014,"rouge_l":0.3259853039412158}
{"id":1558,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["import java . util . Arrays ; class GFG { static int bsearch ( int prefixsum [ ] , int n , int k ) { int ans = - 1 ; int left = 1 , right = n ; while ( left <= right ) { int mid = ( left + right ) \/ 2 ; int i ; for ( i = mid ; i <= n ; i ++ ) { if ( prefixsum [ i ] - prefixsum [ i - mid ] > k ) break ; } if ( i == n + 1 ) { left = mid + 1 ; ans = mid ; } else right = mid - 1 ; } return ans ; } static int maxSize ( int arr [ ] , int n , int k ) { int prefixsum [ ] = new int [ n + 1 ] ; Arrays . fill ( prefixsum , 0 ) ; for ( int i = 0 ; i < n ; i ++ ) prefixsum [ i + 1 ] = prefixsum [ i ] + arr [ i ] ; return bsearch ( prefixsum , n , k ) ; } public static void main ( String arg [ ] ) { int arr [ ] = { 1 , 2 , 10 , 4 } ; int n = arr . length ; int k = 14 ; System . out . println ( maxSize ( arr , n , k ) ) ; } }"],"bleu":0.3166637045495693,"rouge_l":0.5643692175285089}
{"id":1559,"predictions":["import java . io . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 12 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["public class Prime { static boolean isprime ( int x ) { for ( int i = 2 ; i * i <= x ; i ++ ) if ( x % i == 0 ) return false ; return true ; } static boolean isSumOfKprimes ( int N , int K ) { if ( N < 2 * K ) return false ; if ( K == 1 ) return isprime ( N ) ; if ( K == 2 ) { if ( N % 2 == 0 ) return true ; return isprime ( N - 2 ) ; } return true ; } public static void main ( String [ ] args ) { int n = 10 , k = 2 ; if ( isSumOfKprimes ( n , k ) ) System . out . print ( \" Yes \" ) ; else System . out . print ( \" No \" ) ; } }"],"bleu":0.337037828883144,"rouge_l":0.5849791112799089}
{"id":1560,"predictions":["import java . util . * ; class GFG { static boolean isVowel ( String str ) { int len = str . length ( ) ; for ( int i = 0 ; i < len ; i ++ ) { if ( str . charAt ( i ) == str . charAt ( i ) ) return false ; } return false ; } public static void main ( String [ ] args ) { String str = \" geeksforgeeksforgeeks \" ; if ( isVowel ( str ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; class GFG { static int CountCharacters ( String str , int k ) { int cnt = 0 ; int len = str . length ( ) ; for ( int i = 0 ; i < len ; i ++ ) { if ( ( ( int ) str . charAt ( i ) ) < k ) cnt ++ ; } return cnt ; } public static void main ( String args [ ] ) { String str = \" GeeksForGeeks \" ; int k = 90 ; int count = CountCharacters ( str , k ) ; System . out . println ( \" Characters ▁ with ▁ ASCII ▁ values ▁ less ▁ than ▁ K ▁ are ▁ \" + count ) ; System . out . println ( \" Characters ▁ with ▁ ASCII ▁ values ▁ greater ▁ than ▁ or ▁ equal ▁ to ▁ K ▁ are ▁ \" + ( str . length ( ) - count ) ) ; } }"],"bleu":0.3694295317592916,"rouge_l":0.6332405821917809}
{"id":1561,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 4 , 4 , 3 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 6 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["import java . io . * ; class GFG { static void printUncommon ( int arr1 [ ] , int arr2 [ ] , int n1 , int n2 ) { int i = 0 , j = 0 , k = 0 ; while ( i < n1 && j < n2 ) { if ( arr1 [ i ] < arr2 [ j ] ) { System . out . print ( arr1 [ i ] + \" ▁ \" ) ; i ++ ; k ++ ; } else if ( arr2 [ j ] < arr1 [ i ] ) { System . out . print ( arr2 [ j ] + \" ▁ \" ) ; k ++ ; j ++ ; } else { i ++ ; j ++ ; } } while ( i < n1 ) { System . out . print ( arr1 [ i ] + \" ▁ \" ) ; i ++ ; k ++ ; } while ( j < n2 ) { System . out . print ( arr2 [ j ] + \" ▁ \" ) ; j ++ ; k ++ ; } } public static void main ( String [ ] args ) { int arr1 [ ] = { 10 , 20 , 30 } ; int arr2 [ ] = { 20 , 25 , 30 , 40 , 50 } ; int n1 = arr1 . length ; int n2 = arr2 . length ; printUncommon ( arr1 , arr2 , n1 , n2 ) ; } }"],"bleu":0.1811068544680696,"rouge_l":0.30755679747296805}
{"id":1562,"predictions":["import java . util . * ; class GFG { static boolean isVowel ( String s ) { for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i ) ) return false ; } return true ; } public static void main ( String [ ] args ) { String s = \" geeksforgeeksforgeeks \" ; if ( isVowel ( s ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["public class Test { private static char findExtraCharacter ( String s1 , String s2 ) { String smallStr ; String largeStr ; if ( s1 . length ( ) > s2 . length ( ) ) { smallStr = s2 ; largeStr = s1 ; } else { smallStr = s1 ; largeStr = s2 ; } int smallStrCodeTotal = 0 ; int largeStrCodeTotal = 0 ; int i = 0 ; for ( ; i < smallStr . length ( ) ; i ++ ) { smallStrCodeTotal += smallStr . charAt ( i ) ; largeStrCodeTotal += largeStr . charAt ( i ) ; } largeStrCodeTotal += largeStr . charAt ( i ) ; int intChar = largeStrCodeTotal - smallStrCodeTotal ; return ( char ) intChar ; } public static void main ( String [ ] args ) { String s1 = \" abcd \" ; String s2 = \" cbdae \" ; char extraChar = findExtraCharacter ( s1 , s2 ) ; System . out . println ( \" Extra ▁ character : ▁ \" + extraChar ) ; } }"],"bleu":0.22605603657299853,"rouge_l":0.4625654170671793}
{"id":1563,"predictions":["import java . io . * ; import java . util . * ; class GFG { public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 ,"],"references":["class GFG { static void sortMat ( int [ ] [ ] data , int row , int col ) { int size = row * col ; for ( int i = 0 ; i < size ; i ++ ) { for ( int j = 0 ; j < size - 1 ; j ++ ) { if ( data [ j \/ col ] [ j % col ] > data [ ( j + 1 ) \/ col ] [ ( j + 1 ) % col ] ) { int temp = data [ j \/ col ] [ j % col ] ; data [ j \/ col ] [ j % col ] = data [ ( j + 1 ) \/ col ] [ ( j + 1 ) % col ] ; data [ ( j + 1 ) \/ col ] [ ( j + 1 ) % col ] = temp ; } } } } static void printMat ( int [ ] [ ] mat , int row , int col ) { for ( int i = 0 ; i < row ; i ++ ) { for ( int j = 0 ; j < col ; j ++ ) { System . out . print ( mat [ i ] [ j ] + \" ▁ \" ) ; } System . out . println ( ) ; } } public static void main ( String [ ] args ) { int [ ] [ ] mat = { { 5 , 4 , 7 } , { 1 , 3 , 8 } , { 2 , 9 , 6 } } ; int row = mat . length ; int col = mat [ 0 ] . length ; sortMat ( mat , row , col ) ; printMat ( mat , row , col ) ; } }"],"bleu":0.03964573228640504,"rouge_l":0.09066138221451574}
{"id":1564,"predictions":["import java . io . * ; class GFG { static boolean isPrime ( int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( n % i == 0 ) { sum += n \/ i ; } else { sum += n \/ i ; } } return sum ; } public static void main ( String [ ] args ) { int n = 10 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["public class HelloWorld { static int distinctDigitSum ( int n ) { boolean used [ ] = new boolean [ 10 ] ; int sum = 0 ; while ( n > 0 ) { int digit = n % 10 ; if ( ! used [ digit ] ) { used [ digit ] = true ; sum += digit ; } n = n \/ 10 ; } return sum ; } static String checkSum ( int m , int n ) { int sumM = distinctDigitSum ( m ) ; int sumN = distinctDigitSum ( n ) ; if ( sumM == sumN ) return \" YES \" ; return \" NO \" ; } public static void main ( String [ ] args ) { int m = 2452 , n = 9222 ; System . out . println ( checkSum ( m , n ) ) ; } }"],"bleu":0.276571424907253,"rouge_l":0.4334438654666036}
{"id":1565,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int count ( int a [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( a [ i ] > a [ j ] ) { count ++ ; } } } return count ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 6 } ; int n = a . length ; System . out . println ( count ( a , n ) ) ; } }"],"references":["class GFG { static void initializeDiffArray ( int A [ ] , int D [ ] ) { int n = A . length ; D [ 0 ] = A [ 0 ] ; D [ n ] = 0 ; for ( int i = 1 ; i < n ; i ++ ) D [ i ] = A [ i ] - A [ i - 1 ] ; } static void update ( int D [ ] , int l , int r , int x ) { D [ l ] += x ; D [ r + 1 ] -= x ; } static int printArray ( int A [ ] , int D [ ] ) { for ( int i = 0 ; i < A . length ; i ++ ) { if ( i == 0 ) A [ i ] = D [ i ] ; else A [ i ] = D [ i ] + A [ i - 1 ] ; System . out . print ( A [ i ] + \" ▁ \" ) ; } System . out . println ( ) ; return 0 ; } public static void main ( String [ ] args ) { int A [ ] = { 10 , 5 , 20 , 40 } ; int n = A . length ; int D [ ] = new int [ n + 1 ] ; initializeDiffArray ( A , D ) ; update ( D , 0 , 1 , 10 ) ; printArray ( A , D ) ; update ( D , 1 , 3 , 20 ) ; update ( D , 2 , 2 , 30 ) ; printArray ( A , D ) ; } }"],"bleu":0.1974135639582295,"rouge_l":0.3568385578940675}
{"id":1566,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int n ) { if ( n == 0 ) return false ; for ( int i = 1 ; i <= n ; i ++ ) if ( n % i == 0 ) return false ; return true ; } public static void main ( String [ ] args ) { int n = 12 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static int MAX = 100 ; static void printPrincipalDiagonal ( int mat [ ] [ ] , int n ) { System . out . print ( \" Principal ▁ Diagonal : ▁ \" ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( i == j ) { System . out . print ( mat [ i ] [ j ] + \" , ▁ \" ) ; } } } System . out . println ( \" \" ) ; } static void printSecondaryDiagonal ( int mat [ ] [ ] , int n ) { System . out . print ( \" Secondary ▁ Diagonal : ▁ \" ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( ( i + j ) == ( n - 1 ) ) { System . out . print ( mat [ i ] [ j ] + \" , ▁ \" ) ; } } } System . out . println ( \" \" ) ; } public static void main ( String args [ ] ) { int n = 4 ; int a [ ] [ ] = { { 1 , 2 , 3 , 4 } , { 5 , 6 , 7 , 8 } , { 1 , 2 , 3 , 4 } , { 5 , 6 , 7 , 8 } } ; printPrincipalDiagonal ( a , n ) ; printSecondaryDiagonal ( a , n ) ; } }"],"bleu":0.07659328109357083,"rouge_l":0.31454880294659304}
{"id":1567,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int maxSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }"],"references":["class GFG { static int FindMinNumber ( int arr [ ] , int n , int k ) { int i = 0 ; int j = 0 ; int min_num = Integer . MAX_VALUE ; boolean found = false ; int sum = 0 ; while ( i < n ) { sum = sum + arr [ i ] ; if ( sum == k ) { min_num = Math . min ( min_num , ( ( n - ( i + 1 ) ) + j ) ) ; found = true ; } else if ( sum > k ) { while ( sum > k ) { sum = sum - arr [ j ] ; j ++ ; } if ( sum == k ) { min_num = Math . min ( min_num , ( ( n - ( i + 1 ) ) + j ) ) ; found = true ; } } i ++ ; } if ( found ) return min_num ; return - 1 ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 3 , 2 , 5 , 6 } ; int n = arr . length ; int k = 5 ; System . out . println ( FindMinNumber ( arr , n , k ) ) ; } }"],"bleu":0.2135144421519074,"rouge_l":0.4607817303469477}
{"id":1568,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["import java . util . PriorityQueue ; class GFG { public static int minProduct ( int [ ] arr , int n , int k ) { PriorityQueue < Integer > pq = new PriorityQueue < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) pq . add ( arr [ i ] ) ; int count = 0 , ans = 1 ; while ( pq . isEmpty ( ) == false && count < k ) { ans = ans * pq . element ( ) ; pq . remove ( ) ; count ++ ; } return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 198 , 76 , 544 , 123 , 154 , 675 } ; int k = 2 ; int n = arr . length ; System . out . print ( \" Minimum ▁ product ▁ is ▁ \" + minProduct ( arr , n , k ) ) ; } }"],"bleu":0.3331352632652499,"rouge_l":0.5754113824546693}
{"id":1569,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["class GFG { static int [ ] BitsSetTable256 = new int [ 256 ] ; public static void initialize ( ) { BitsSetTable256 [ 0 ] = 0 ; for ( int i = 0 ; i < 256 ; i ++ ) { BitsSetTable256 [ i ] = ( i & 1 ) + BitsSetTable256 [ i \/ 2 ] ; } } public static int countSetBits ( int n ) { return ( BitsSetTable256 [ n & 0xff ] + BitsSetTable256 [ ( n >> 8 ) & 0xff ] + BitsSetTable256 [ ( n >> 16 ) & 0xff ] + BitsSetTable256 [ n >> 24 ] ) ; } public static void main ( String [ ] args ) { initialize ( ) ; int n = 9 ; System . out . print ( countSetBits ( n ) ) ; } }"],"bleu":0.2906864468441456,"rouge_l":0.47511257149811364}
{"id":1570,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) System . out . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } public static void main ( String [ ] args"],"references":["import java . io . * ; import java . util . Arrays ; class GFG { static int numberOfBST ( int n ) { int dp [ ] = new int [ n + 1 ] ; Arrays . fill ( dp , 0 ) ; dp [ 0 ] = 1 ; dp [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= i ; j ++ ) { dp [ i ] = dp [ i ] + ( dp [ i - j ] * dp [ j - 1 ] ) ; } } return dp [ n ] ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( \" Number ▁ of ▁ structurally ▁ \" + \" Unique ▁ BST ▁ with ▁ \" + n + \" ▁ keys ▁ are ▁ : ▁ \" + numberOfBST ( n ) ) ; } }"],"bleu":0.08135798323592039,"rouge_l":0.2073636316092255}
{"id":1571,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int N = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { st = new StringTokenizer ( br . readLine ( ) ) ; a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int count = 0 ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < N ; j ++ ) { if ( a [ i ] > a [ j ] ) { count ++ ; } } } System . out . println ( count ) ; } }"],"references":["class GFG { static int countdig ( int m ) { if ( m == 0 ) return 0 ; else return 1 + countdig ( m \/ 10 ) ; } static int countSteps ( int x ) { int c = 0 ; int last = x ; while ( last > 0 ) { int digits = countdig ( last ) ; digits -= 1 ; int divisor = ( int ) Math . pow ( 10 , digits ) ; int first = last \/ divisor ; int lastnumber = first * divisor ; int skipped = ( last - lastnumber ) \/ first ; skipped += 1 ; c += skipped ; last = last - ( first * skipped ) ; } return c ; } public static void main ( String [ ] args ) { int n = 14 ; System . out . println ( countSteps ( n ) ) ; } }"],"bleu":0.15660617311408415,"rouge_l":0.34359952757336243}
{"id":1572,"predictions":["import java . io . * ; import java . util . * ; class GFG { public static void main ( String [ ] args ) { int a = 5 , b = 5 ; System . out . println ( a + \" \" + b ) ; } }"],"references":["import java . io . * ; class GFG { static int Add ( int x , int y ) { while ( y != 0 ) { int carry = x & y ; x = x ^ y ; y = carry << 1 ; } return x ; } public static void main ( String arg [ ] ) { System . out . println ( Add ( 15 , 32 ) ) ; } }"],"bleu":0.2703729074267271,"rouge_l":0.43895418565603256}
{"id":1573,"predictions":["import java . io . * ; class GFG { static boolean isVowel ( int a , int b ) { if ( a < b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; if ( a > b ) return false ; return false ; } public static void main ( String [ ] args ) { int a = 12 , b = 12 , c = 12 ; if ( isVowel ( a , b , c ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; import java . lang . * ; public class GfG { static Boolean isOverflow ( long a , long b ) { if ( a == 0 || b == 0 ) return false ; long result = a * b ; if ( a == result \/ b ) return false ; else return true ; } public static void main ( String argc [ ] ) { long a = Long . parseLong ( \"10000000000\" ) ; long b = Long . parseLong ( \" - 10000000000\" ) ; if ( isOverflow ( a , b ) ) System . out . print ( \" Yes \" ) ; else System . out . print ( \" No \" ) ; } }"],"bleu":0.391066313665318,"rouge_l":0.6327168207948013}
{"id":1574,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { System . out . print ( arr [ i ] + \" \" ) ; } System . out . println ( ) ; } }"],"references":["import java . util . * ; class GFG { static class pair { int first , second ; public pair ( int first , int second ) { this . first = first ; this . second = second ; } } static void pairWithEqualSum ( int A [ ] , int n ) { Map < Integer , Vector < pair > > mp = new HashMap < > ( ) ; for ( int i = 0 ; i < n - 1 ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { pair p = new pair ( A [ i ] , A [ j ] ) ; Vector < pair > pp = new Vector < pair > ( ) ; if ( mp . containsKey ( A [ i ] + A [ j ] ) ) pp . addAll ( mp . get ( A [ i ] + A [ j ] ) ) ; pp . add ( p ) ; mp . put ( A [ i ] + A [ j ] , pp ) ; } } for ( Map . Entry < Integer , Vector < pair > > itr : mp . entrySet ( ) ) { if ( itr . getValue ( ) . size ( ) > 1 ) { System . out . print ( \" Pairs ▁ : ▁ \" ) ; for ( int i = 0 ; i < itr . getValue ( ) . size ( ) ; i ++ ) { System . out . print ( \" ( ▁ \" + itr . getValue ( ) . get ( i ) . first + \" , ▁ \" + itr . getValue ( ) . get ( i ) . second + \" ) ▁ \" ) ; } System . out . print ( \" ▁ have ▁ sum ▁ : ▁ \" + itr . getKey ( ) + \" \\n \" ) ; } } } public static void main ( String [ ] args ) { int A [ ] = { 6 , 4 , 12 , 10 , 22 , 54 , 32 , 42 , 21 , 11 , 8 , 2 } ; int n = A . length ; pairWithEqualSum ( A , n ) ; } }"],"bleu":0.2148444947753154,"rouge_l":0.31935679895292857}
{"id":1575,"predictions":["import java . io . * ; import java . util . * ; import java . lang . * ; import java . math . * ; import java . text . * ; class Main { public static void main ( String [ ] args ) throws java . lang . Exception { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int m = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } Arrays . sort ( a ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += a [ i ] ; } System . out . println ( sum ) ; } }"],"references":["import java . util . * ; class GFG { static ArrayList < Integer > findingValues ( int m , int n , int mth , int nth ) { int d = ( Math . abs ( mth - nth ) ) \/ Math . abs ( ( m - 1 ) - ( n - 1 ) ) ; int a = mth - ( ( m - 1 ) * d ) ; ArrayList < Integer > res = new ArrayList < Integer > ( ) ; res . add ( a ) ; res . add ( d ) ; return res ; } static int findSum ( int m , int n , int mth , int nth , int p ) { ArrayList < Integer > ad = findingValues ( m , n , mth , nth ) ; int a = ad . get ( 0 ) ; int d = ad . get ( 1 ) ; int sum = ( p * ( 2 * a + ( p - 1 ) * d ) ) \/ 2 ; return sum ; } public static void main ( String [ ] args ) { int m = 6 , n = 10 , mTerm = 12 , nTerm = 20 , p = 5 ; System . out . println ( findSum ( m , n , mTerm , nTerm , p ) ) ; } }"],"bleu":0.19736922095384013,"rouge_l":0.33444771329232414}
{"id":1576,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int count ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ i ] > arr [ j ] ) { count ++ ; } } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 4 , 4 , 4 , 4 , 4 , 3 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4"],"references":["import java . util . * ; class GFG { static int sameOccurrence ( int arr [ ] , int n , int x , int y ) { int [ ] countX = new int [ n ] ; int [ ] countY = new int [ n ] ; Map < Integer , Integer > m = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == x ) { if ( i != 0 ) countX [ i ] = countX [ i - 1 ] + 1 ; else countX [ i ] = 1 ; } else { if ( i != 0 ) countX [ i ] = countX [ i - 1 ] ; else countX [ i ] = 0 ; } if ( arr [ i ] == y ) { if ( i != 0 ) countY [ i ] = countY [ i - 1 ] + 1 ; else countY [ i ] = 1 ; } else { if ( i != 0 ) countY [ i ] = countY [ i - 1 ] ; else countY [ i ] = 0 ; } if ( m . containsKey ( countX [ i ] - countY [ i ] ) ) { m . put ( countX [ i ] - countY [ i ] , m . get ( countX [ i ] - countY [ i ] ) + 1 ) ; } else { m . put ( countX [ i ] - countY [ i ] , 1 ) ; } } int result = m . get ( 0 ) ; for ( Map . Entry < Integer , Integer > it : m . entrySet ( ) ) result = result + ( ( it . getValue ( ) ) * ( ( it . getValue ( ) ) - 1 ) ) \/ 2 ; return ( result ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 2 , 3 , 4 , 1 } ; int n = arr . length ; int x = 2 , y = 3 ; System . out . println ( sameOccurrence ( arr , n , x , y ) ) ; } }"],"bleu":0.15431572265103927,"rouge_l":0.20879761124462892}
{"id":1577,"predictions":["import java . util . * ; class GFG { static boolean isVowel ( String s ) { for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i ) ) return false ; } return true ; } public static void main ( String [ ] args ) { String s = \" geeksforgeeksforgeeks \" ; if ( isVowel ( s ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GfG { static void findNonPalinString ( char s [ ] ) { int freq [ ] = new int [ 26 ] ; int flag = 0 ; for ( int i = 0 ; i < s . length ; i ++ ) { if ( s [ i ] != s [ 0 ] ) flag = 1 ; freq [ s [ i ] - ' a ' ] ++ ; } if ( flag == 0 ) System . out . println ( \" - 1\" ) ; else { for ( int i = 0 ; i < 26 ; i ++ ) for ( int j = 0 ; j < freq [ i ] ; j ++ ) System . out . print ( ( char ) ( ' a ' + i ) ) ; } } public static void main ( String [ ] args ) { String s = \" abba \" ; findNonPalinString ( s . toCharArray ( ) ) ; } }"],"bleu":0.2775553688209996,"rouge_l":0.43691460055096426}
{"id":1578,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i ) ) out . print ( s . charAt ( i ) + \" \" ) ; else out . print ( s . charAt ( i ) ) ; } out . close ( ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["class GFG { static boolean isFrequencyEqual ( String str , int len ) { if ( len % 2 == 1 ) { return false ; } int i , freq [ ] = new int [ 26 ] ; for ( i = 0 ; i < len ; i ++ ) { freq [ str . charAt ( i ) - ' a ' ] ++ ; } for ( i = 0 ; i < 26 ; i ++ ) { if ( freq [ i ] == len \/ 2 ) { return true ; } } return false ; } public static void main ( String [ ] args ) { String str = \" geeksforgeeks \" ; int len = str . length ( ) ; if ( isFrequencyEqual ( str , len ) ) { System . out . println ( \" Yes \" ) ; } else { System . out . println ( \" No \" ) ; } } }"],"bleu":0.1672235083642596,"rouge_l":0.3380352644836272}
{"id":1579,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( n % i == 0 ) { sum += n \/ i ; } else { sum += n \/ i ; } } return sum ; } public static void main ( String [ ] args ) { int n = 10 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static int summ ( int n ) { if ( n == 0 ) return 0 ; return ( n % 9 == 0 ) ? 9 : ( n % 9 ) ; } static void printDigitalRoot ( int n ) { int maxi = 1 ; int dig = 1 ; for ( int i = 1 ; i <= Math . sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { int d1 = summ ( n \/ i ) ; int d2 = summ ( i ) ; if ( d1 > maxi ) { dig = n \/ i ; maxi = d1 ; } if ( d2 > maxi ) { dig = i ; maxi = d2 ; } if ( d1 == maxi ) { if ( dig < ( n \/ i ) ) { dig = n \/ i ; maxi = d1 ; } } if ( d2 == maxi ) { if ( dig < i ) { dig = i ; maxi = d2 ; } } } } System . out . println ( dig + \" ▁ \" + maxi ) ; } public static void main ( String [ ] args ) { int n = 10 ; printDigitalRoot ( n ) ; } }"],"bleu":0.20340810531866046,"rouge_l":0.3790146145094951}
{"id":1580,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int maxSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }"],"references":["class GFG { static int countSubarrays ( int [ ] arr , int n ) { int difference = 0 ; int ans = 0 ; int [ ] hash_positive = new int [ n + 1 ] ; int [ ] hash_negative = new int [ n + 1 ] ; hash_positive [ 0 ] = 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( ( arr [ i ] & 1 ) == 1 ) { difference ++ ; } else { difference -- ; } if ( difference < 0 ) { ans += hash_negative [ - difference ] ; hash_negative [ - difference ] ++ ; } else { ans += hash_positive [ difference ] ; hash_positive [ difference ] ++ ; } } return ans ; } public static void main ( String [ ] args ) { int [ ] arr = new int [ ] { 3 , 4 , 6 , 8 , 1 , 10 , 5 , 7 } ; int n = arr . length ; System . out . println ( \" Total ▁ Number ▁ of ▁ Even - Odd \" + \" ▁ subarrays ▁ are ▁ \" + countSubarrays ( arr , n ) ) ; } }"],"bleu":0.23153900928707388,"rouge_l":0.49009403816306035}
{"id":1581,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int maxSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } static int maxSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static int MAX = 1000000 ; static boolean [ ] prime = new boolean [ MAX + 1 ] ; static void sieve ( ) { Arrays . fill ( prime , true ) ; prime [ 0 ] = prime [ 1 ] = false ; for ( int p = 2 ; p * p <= MAX ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * p ; i <= MAX ; i += p ) prime [ i ] = false ; } } } static int distinctSum ( int arr1 [ ] , int arr2 [ ] , int m , int n ) { sieve ( ) ; Set < Integer > sumSet = new HashSet < Integer > ( ) ; for ( int i = 0 ; i < m ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) if ( prime [ arr1 [ i ] ] && prime [ arr2 [ j ] ] ) sumSet . add ( arr1 [ i ] + arr2 [ j ] ) ; return sumSet . size ( ) ; } public static void main ( String [ ] args ) { int arr1 [ ] = { 2 , 3 } ; int arr2 [ ] = { 2 , 2 , 4 , 7 } ; int m = arr1 . length ; int n = arr2 . length ; System . out . println ( distinctSum ( arr1 , arr2 , m , n ) ) ; } }"],"bleu":0.2744117284357506,"rouge_l":0.516949152542373}
{"id":1582,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int count ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 4 , 3 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 3 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 ,"],"references":["import java . io . * ; public class GFG { static void shufleArray ( int [ ] a , int n ) { int temp ; n = n \/ 2 ; for ( int start = n + 1 , j = n + 1 , done = 0 , i ; done < 2 * n - 2 ; done ++ ) { if ( start == j ) { start -- ; j -- ; } i = j > n ? j - n : j ; j = j > n ? 2 * i : 2 * i - 1 ; temp = a [ start ] ; a [ start ] = a [ j ] ; a [ j ] = temp ; } } static public void main ( String [ ] args ) { int [ ] a = { - 1 , 1 , 3 , 5 , 7 , 2 , 4 , 6 , 8 } ; int n = a . length ; shufleArray ( a , n ) ; for ( int i = 1 ; i < n ; i ++ ) System . out . print ( a [ i ] + \" ▁ \" ) ; } }"],"bleu":0.09447523811558622,"rouge_l":0.21073931497384266}
{"id":1583,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int maxSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static int MAX = 100005 ; static int Min_Replace ( int [ ] arr , int n , int k ) { Arrays . sort ( arr ) ; Integer [ ] freq = new Integer [ MAX ] ; Arrays . fill ( freq , 0 ) ; int p = 0 ; freq [ p ] = 1 ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] == arr [ i - 1 ] ) ++ freq [ p ] ; else ++ freq [ ++ p ] ; } Arrays . sort ( freq , Collections . reverseOrder ( ) ) ; int ans = 0 ; for ( int i = k ; i <= p ; i ++ ) ans += freq [ i ] ; return ans ; } public static void main ( String [ ] args ) { int [ ] arr = { 1 , 2 , 7 , 8 , 2 , 3 , 2 , 3 } ; int n = arr . length ; int k = 2 ; System . out . println ( Min_Replace ( arr , n , k ) ) ; } }"],"bleu":0.27343190537972334,"rouge_l":0.5481528546791322}
{"id":1584,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( n % i == 0 ) { sum += n \/ i ; } else { sum += n \/ i ; } } return sum ; } public static void main ( String [ ] args ) { int n = 3 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . io . * ; class GFG { static int MAX = 500 ; static int size = 1 ; static void factorial ( int [ ] prevFact , int prev , int n ) { for ( int x = prev + 1 ; x <= n ; x ++ ) size = multiply ( x , prevFact , size ) ; for ( int i = size - 1 ; i >= 0 ; i -- ) System . out . print ( prevFact [ i ] ) ; System . out . print ( \" ▁ \" ) ; } static void printfibFactorials ( int limit ) { if ( limit < 1 ) return ; int a = 1 , b = 1 , c = 2 ; System . out . print ( a + \" ▁ \" + b + \" ▁ \" ) ; int [ ] prevFact = new int [ MAX ] ; prevFact [ 0 ] = 1 ; while ( c < limit ) { factorial ( prevFact , b , c ) ; a = b ; b = c ; c = a + b ; } } static int multiply ( int x , int [ ] prevFact , int size ) { int carry = 0 ; for ( int i = 0 ; i < size ; i ++ ) { int prod = prevFact [ i ] * x + carry ; prevFact [ i ] = prod % 10 ; carry = prod \/ 10 ; } while ( carry != 0 ) { prevFact [ size ] = carry % 10 ; carry = carry \/ 10 ; size ++ ; } return size ; } public static void main ( String args [ ] ) { int limit = 20 ; printfibFactorials ( limit ) ; } }"],"bleu":0.09070539618502978,"rouge_l":0.26748886605001715}
{"id":1585,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int sum ( int a [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += a [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += a [ i ] ; return sum ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = a . length ; System . out . println ( sum ( a , n ) ) ; } }"],"references":["import java . util . * ; import java . lang . * ; class GFG { static int MAX = 3000 ; public static int smartNumber ( int n ) { Integer [ ] primes = new Integer [ MAX ] ; Arrays . fill ( primes , new Integer ( 0 ) ) ; Vector < Integer > result = new Vector < > ( ) ; for ( int i = 2 ; i < MAX ; i ++ ) { if ( primes [ i ] == 0 ) { primes [ i ] = 1 ; for ( int j = i * 2 ; j < MAX ; j = j + i ) { primes [ j ] -= 1 ; if ( ( primes [ j ] + 3 ) == 0 ) result . add ( j ) ; } } } Collections . sort ( result ) ; return result . get ( n - 1 ) ; } public static void main ( String [ ] args ) { int n = 50 ; System . out . println ( smartNumber ( n ) ) ; } }"],"bleu":0.27597521436014566,"rouge_l":0.48967889908256884}
{"id":1586,"predictions":["import java . io . * ; class GFG { static int countPairs ( int n ) { int count = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( n % i == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( countPairs ( n ) ) ; } }"],"references":["class GFG { static int countPairs ( int n ) { int count = 0 ; for ( int x = 1 ; x < n ; x ++ ) { for ( int y = x + 1 ; y <= n ; y ++ ) { if ( ( y + x ) % ( y ^ x ) == 0 ) count ++ ; } } return count ; } public static void main ( String [ ] args ) { int n = 6 ; System . out . println ( countPairs ( n ) ) ; } }"],"bleu":0.5866850163742975,"rouge_l":0.7456955922865014}
{"id":1587,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; out . println ( Math . min ( a , b ) ) ; out . close ( ) ; } static int l_min ( int [ ] a ) { Arrays . sort ( a ) ; return a [ 0 ] ; } static int l_max ( int [ ] a ) { int l = a . length ; Arrays . sort ( a ) ; return a [ l - 1 ] ; } public static PrintWriter out ; public static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } }"],"references":["public class GFG { public int [ ] AllIndexesRecursive ( int input [ ] , int x , int start ) { if ( start == input . length ) { int [ ] ans = new int [ 0 ] ; return ans ; } int [ ] smallIndex = AllIndexesRecursive ( input , x , start + 1 ) ; if ( input [ start ] == x ) { int [ ] myAns = new int [ smallIndex . length + 1 ] ; myAns [ 0 ] = start ; for ( int i = 0 ; i < smallIndex . length ; i ++ ) { myAns [ i + 1 ] = smallIndex [ i ] ; } return myAns ; } else { return smallIndex ; } } public int [ ] AllIndexes ( int input [ ] , int x ) { return AllIndexesRecursive ( input , x , 0 ) ; } public static void main ( String args [ ] ) { GFG g = new GFG ( ) ; int arr [ ] = { 1 , 2 , 3 , 2 , 2 , 5 } , x = 2 ; int output [ ] = g . AllIndexes ( arr , x ) ; for ( int i = 0 ; i < output . length ; i ++ ) { System . out . print ( output [ i ] + \" ▁ \" ) ; } } }"],"bleu":0.10092998168986109,"rouge_l":0.2992725427169684}
{"id":1588,"predictions":["import java . io . * ; import java . util . * ; import java . lang . * ; import java . math . * ; class GFG { static int findSum ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } static int findSum ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( findSum ( n ) ) ; } }"],"references":["import java . lang . Math ; class GFG { static int fib ( int n ) { double phi = ( 1 + Math . sqrt ( 5 ) ) \/ 2 ; return ( int ) Math . round ( Math . pow ( phi , n ) \/ Math . sqrt ( 5 ) ) ; } static int calculateSum ( int l , int r ) { int sum = 0 ; for ( int i = l ; i <= r ; i ++ ) sum += fib ( i ) ; return sum ; } public static void main ( String [ ] args ) { int l = 4 , r = 8 ; System . out . println ( calculateSum ( l , r ) ) ; } }"],"bleu":0.4329039535115387,"rouge_l":0.6020470330205923}
{"id":1589,"predictions":["import java . io . * ; class GFG { static int nthTerm ( int N ) { return ( int ) Math . pow ( N , 2 ) - 1 ; } public static void main ( String [ ] args ) { int N = 4 ; System . out . println ( nthTerm ( N ) ) ; } }"],"references":["import java . util . * ; class solution { static int findSum ( int N ) { return ( N * ( N + 1 ) * ( 2 * N - 5 ) + 4 * N ) \/ 2 ; } public static void main ( String arr [ ] ) { int N = 3 ; System . out . println ( findSum ( N ) ) ; } }"],"bleu":0.4554558053786566,"rouge_l":0.7152908067542214}
{"id":1590,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int maxSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } static int maxSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }"],"references":["class Sum { void sumOfPrevK ( int N , int K ) { int arr [ ] = new int [ N ] ; arr [ 0 ] = 1 ; for ( int i = 1 ; i < N ; i ++ ) { int j = i - 1 , count = 0 , sum = 0 ; while ( j >= 0 && count < K ) { sum += arr [ j ] ; j -- ; count ++ ; } arr [ i ] = sum ; } for ( int i = 0 ; i < N ; i ++ ) { System . out . print ( arr [ i ] + \" ▁ \" ) ; } } public static void main ( String args [ ] ) { Sum s = new Sum ( ) ; int N = 10 , K = 4 ; s . sumOfPrevK ( N , K ) ; } }"],"bleu":0.31122560789048587,"rouge_l":0.4832383344604387}
{"id":1591,"predictions":["import java . io . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; return false ; } static boolean isPrime ( int n ) { if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 12 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static boolean productDivisible ( int n , int k ) { int product = 1 , position = 1 ; while ( n > 0 ) { if ( position % 2 == 0 ) { product *= n % 10 ; } n = n \/ 10 ; position ++ ; } if ( product % k == 0 ) { return true ; } return false ; } public static void main ( String [ ] args ) { int n = 321922 ; int k = 3 ; if ( productDivisible ( n , k ) ) { System . out . println ( \" YES \" ) ; } else { System . out . println ( \" NO \" ) ; } } }"],"bleu":0.3835704940630443,"rouge_l":0.6023204147124167}
{"id":1592,"predictions":["import java . io . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return true ; if ( n % 3 == 0 ) System . out . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } public static void main ( String [ ] args ) { int n = 3 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; } }"],"references":["class Test { static int countPairs ( int N ) { int count = 0 ; for ( int i = 1 ; i <= Math . cbrt ( N ) ; i ++ ) { int cb = i * i * i ; int diff = N - cb ; int cbrtDiff = ( int ) Math . cbrt ( diff ) ; if ( cbrtDiff * cbrtDiff * cbrtDiff == diff ) count ++ ; } return count ; } public static void main ( String args [ ] ) { for ( int i = 1 ; i <= 10 ; i ++ ) System . out . println ( \" For ▁ n ▁ = ▁ \" + i + \" , ▁ \" + + countPairs ( i ) + \" ▁ pair ▁ exists \" ) ; } }"],"bleu":0.053090007650475696,"rouge_l":0.1937496455107481}
{"id":1593,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int count ( int n ) { int count = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( n % i == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( count ( n ) ) ; } }"],"references":["import java . util . * ; class GFG { static int MAX = 100 ; static Vector < Integer > Prefix = new Vector < > ( ) ; static int repeated_digit ( int n ) { HashSet < Integer > a = new HashSet < > ( ) ; int d ; while ( n != 0 ) { d = n % 10 ; if ( a . contains ( d ) ) return 0 ; a . add ( d ) ; n \/= 10 ; } return 1 ; } static void pre_calculations ( ) { Prefix . add ( 0 ) ; Prefix . add ( repeated_digit ( 1 ) ) ; for ( int i = 2 ; i < MAX + 1 ; i ++ ) Prefix . add ( repeated_digit ( i ) + Prefix . elementAt ( i - 1 ) ) ; } static int calculate ( int L , int R ) { return Prefix . elementAt ( R ) - Prefix . elementAt ( L - 1 ) ; } public static void main ( String [ ] args ) { int L = 1 , R = 100 ; pre_calculations ( ) ; System . out . println ( calculate ( L , R ) ) ; } }"],"bleu":0.1306109316401204,"rouge_l":0.39075997282344954}
{"id":1594,"predictions":["import java . io . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 12 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static boolean Survives ( int n ) { for ( int i = 2 ; ; i ++ ) { if ( i > n ) return true ; if ( n % i == 0 ) return false ; n -= n \/ i ; } } public static void main ( String [ ] args ) { int n = 17 ; if ( Survives ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.6064946093821528,"rouge_l":0.765108323831243}
{"id":1595,"predictions":["import java . io . * ; import java . util . * ; class GFG { public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 } ; int n = arr . length ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) System . out . print ( arr [ i ] + \" \" ) ; } }"],"references":["import java . io . * ; class GFG { static void maxPerimeter ( int arr [ ] , int n ) { int maxi = 0 ; for ( int i = 0 ; i < n - 2 ; i ++ ) { for ( int j = i + 1 ; j < n - 1 ; j ++ ) { for ( int k = j + 1 ; k < n ; k ++ ) { int a = arr [ i ] ; int b = arr [ j ] ; int c = arr [ k ] ; if ( a < b + c && b < c + a && c < a + b ) { maxi = Math . max ( maxi , a + b + c ) ; } } } } if ( maxi > 0 ) System . out . println ( \" Maximum ▁ Perimeter ▁ is : ▁ \" + maxi ) ; else System . out . println ( \" Triangle ▁ formation ▁ \" + \" is ▁ not ▁ possible . \" ) ; } public static void main ( String [ ] args ) { int arr1 [ ] = { 6 , 1 , 6 , 5 , 8 , 4 } ; maxPerimeter ( arr1 , 6 ) ; int arr2 [ ] = { 2 , 20 , 7 , 55 , 1 , 33 , 12 , 4 } ; maxPerimeter ( arr2 , 8 ) ; int arr3 [ ] = { 33 , 6 , 20 , 1 , 8 , 12 , 5 , 55 , 4 , 9 } ; maxPerimeter ( arr3 , 10 ) ; } }"],"bleu":0.22297233172217046,"rouge_l":0.22341682419659734}
{"id":1596,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["import java . util . * ; class GFG { static boolean isPerfectSquare ( int x ) { int s = ( int ) Math . sqrt ( x ) ; return ( s * s == x ) ; } static boolean isFibonacci ( int N ) { return isPerfectSquare ( 5 * N * N + 4 ) || isPerfectSquare ( 5 * N * N - 4 ) ; } static int nextNonFibonacci ( int N ) { if ( N <= 3 ) return 4 ; if ( isFibonacci ( N + 1 ) ) return N + 2 ; else return N + 1 ; } public static void main ( String [ ] args ) { int N = 3 ; System . out . print ( nextNonFibonacci ( N ) + \" \\n \" ) ; N = 5 ; System . out . print ( nextNonFibonacci ( N ) + \" \\n \" ) ; N = 7 ; System . out . print ( nextNonFibonacci ( N ) + \" \\n \" ) ; } }"],"bleu":0.12984529735522168,"rouge_l":0.37818599311136625}
{"id":1597,"predictions":["import java . io . * ; class GFG { static boolean isPowerOfTwo ( int n ) { if ( n == 1 ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 12 ; if ( isPowerOfTwo ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["public class GFG { static boolean bit_check ( int n ) { if ( ( n & ( n - 1 ) ) == 0 ) return true ; return false ; } public static void main ( String args [ ] ) { int n = 14 ; if ( bit_check ( n ) ) System . out . println ( '1' ) ; else System . out . println ( '0' ) ; } }"],"bleu":0.5655990288155173,"rouge_l":0.7710132715399199}
{"id":1598,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int center_hexadecagonal_num ( int n ) { return 8 * n * n - 8 * n + 1 ; } public static void main ( String args [ ] ) { int n = 2 ; System . out . print ( n + \" th ▁ centered ▁ \" + \" hexadecagonal ▁ number : ▁ \" ) ; System . out . println ( center_hexadecagonal_num ( n ) ) ; n = 12 ; System . out . print ( n + \" th ▁ centered ▁ \" + \" hexadecagonal ▁ number : ▁ \" ) ; System . out . println ( center_hexadecagonal_num ( n ) ) ; } }"],"bleu":0.2594745587027755,"rouge_l":0.4472001247855249}
{"id":1599,"predictions":["import java . io . * ; import java . util . * ; class GFG { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; System . out . println ( Math . min ( a , b ) ) ; } }"],"references":["import java . io . * ; class GFG { static void fib ( int n ) { int a = 0 , b = 1 ; if ( n >= 0 ) System . out . print ( a + \" ▁ \" ) ; if ( n >= 1 ) System . out . print ( b + \" ▁ \" ) ; for ( int i = 2 ; i <= n ; i ++ ) { System . out . print ( a + b + \" ▁ \" ) ; b = a + b ; a = b - a ; } } public static void main ( String [ ] args ) { fib ( 9 ) ; } }"],"bleu":0.23545150179253513,"rouge_l":0.3891547049441787}
{"id":1600,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return true ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 3 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; class GFG { static boolean prime ( int n ) { for ( int i = 2 ; i * i <= n ; i ++ ) { if ( n % i == 0 ) return false ; } return true ; } static void thirdNumber ( int a , int b ) { int sum = 0 , temp = 0 ; sum = a + b ; temp = 1 ; if ( sum == 0 ) { temp = 2 ; } while ( ! prime ( sum + temp ) ) { temp += 2 ; } System . out . print ( temp ) ; } static public void main ( String [ ] arr ) { int a = 3 , b = 5 ; thirdNumber ( a , b ) ; } }"],"bleu":0.13973839580588193,"rouge_l":0.35915277565376963}
{"id":1601,"predictions":["import java . io . * ; import java . util . * ; class GFG { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; System . out . println ( Math . min ( Math . abs ( a - b ) , Math . abs ( b - c ) ) ) ; } }"],"references":["import java . io . * ; class GFG { static boolean isBetween ( int a , int b , int c ) { return ( Math . min ( a , b ) <= c && c <= Math . max ( a , b ) ) ; } static boolean canJoin ( int x [ ] , int y [ ] , int i , int j , int k ) { return ( x [ k ] == x [ i ] || x [ k ] == x [ j ] ) && isBetween ( y [ i ] , y [ j ] , y [ k ] ) || ( y [ k ] == y [ i ] || y [ k ] == y [ j ] ) && isBetween ( x [ i ] , x [ j ] , x [ k ] ) ; } static int countLineSegments ( int x [ ] , int y [ ] ) { if ( ( x [ 0 ] == x [ 1 ] && x [ 1 ] == x [ 2 ] ) || ( y [ 0 ] == y [ 1 ] && y [ 1 ] == y [ 2 ] ) ) return 1 ; else if ( canJoin ( x , y , 0 , 1 , 2 ) || canJoin ( x , y , 0 , 2 , 1 ) || canJoin ( x , y , 1 , 2 , 0 ) ) return 2 ; else return 3 ; } public static void main ( String [ ] args ) { int x [ ] = new int [ 3 ] , y [ ] = new int [ 3 ] ; x [ 0 ] = - 1 ; y [ 0 ] = - 1 ; x [ 1 ] = - 1 ; y [ 1 ] = 3 ; x [ 2 ] = 4 ; y [ 2 ] = 3 ; System . out . println ( countLineSegments ( x , y ) ) ; } }"],"bleu":0.0414682674804613,"rouge_l":0.18336673346693386}
{"id":1602,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["class GFG { static void ReplaceElements ( int arr [ ] , int n ) { int min_ele = arr [ 0 ] ; arr [ 0 ] = - 1 ; for ( int i = 1 ; i < n ; ++ i ) { if ( min_ele < arr [ i ] ) { arr [ i ] = min_ele ; } else if ( min_ele >= arr [ i ] ) { int temp = arr [ i ] ; arr [ i ] = min_ele ; min_ele = temp ; } } } public static void main ( String [ ] args ) { int arr [ ] = { 4 , 5 , 2 , 1 , 7 , 6 } ; int n = arr . length ; ReplaceElements ( arr , n ) ; for ( int i = 0 ; i < n ; ++ i ) { System . out . print ( arr [ i ] + \" ▁ \" ) ; } } }"],"bleu":0.33981691169019,"rouge_l":0.5185421315481883}
{"id":1603,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int maxSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }"],"references":["class GFG { static void printArray ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( arr [ i ] + \" ▁ \" ) ; } } static int getMin ( int arr [ ] , int i , int j ) { int minVal = arr [ i ++ ] ; while ( i <= j ) { minVal = Math . min ( minVal , arr [ i ] ) ; i ++ ; } return minVal ; } static int getMax ( int arr [ ] , int i , int j ) { int maxVal = arr [ i ++ ] ; while ( i <= j ) { maxVal = Math . max ( maxVal , arr [ i ] ) ; i ++ ; } return maxVal ; } static void generateArr ( int arr [ ] , int n ) { if ( n == 0 ) return ; if ( n == 1 ) { System . out . println ( arr [ 0 ] ) ; return ; } int tmpArr [ ] = new int [ n ] ; tmpArr [ 0 ] = getMax ( arr , 1 , n - 1 ) ; for ( int i = 1 ; i < n - 1 ; i ++ ) { tmpArr [ i ] = Math . abs ( getMax ( arr , i + 1 , n - 1 ) - getMin ( arr , 0 , i - 1 ) ) ; } tmpArr [ n - 1 ] = getMin ( arr , 0 , n - 2 ) ; printArray ( tmpArr , n ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 5 , 2 , 4 , 3 } ; int n = arr . length ; generateArr ( arr , n ) ; } }"],"bleu":0.13215270534524076,"rouge_l":0.35044336205819904}
{"id":1604,"predictions":["import java . io . * ; class GFG { static int nthTerm ( int n ) { return ( int ) Math . pow ( n , 2 ) - 1 ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( nthTerm ( n ) ) ; } }"],"references":["class GFG { static int totEdge ( int n ) { int result = 0 ; result = ( n * ( n - 1 ) ) \/ 2 ; return result ; } public static void main ( String [ ] args ) { int n = 6 ; System . out . println ( totEdge ( n ) ) ; } }"],"bleu":0.5622018036995995,"rouge_l":0.703125}
{"id":1605,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int count ( int a [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % 2 == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 1 , 2 , 3 , 3 , 3 , 3 , 3 } ; int n = a . length ; System . out . println ( count ( a , n ) ) ; } }"],"references":["class GFG { static int countNumbers ( int L , int R , int K ) { if ( K == 9 ) { K = 0 ; } int totalnumbers = R - L + 1 ; int factor9 = totalnumbers \/ 9 ; int rem = totalnumbers % 9 ; int ans = factor9 ; for ( int i = R ; i > R - rem ; i -- ) { int rem1 = i % 9 ; if ( rem1 == K ) { ans ++ ; } } return ans ; } public static void main ( String [ ] args ) { int L = 10 ; int R = 22 ; int K = 3 ; System . out . println ( countNumbers ( L , R , K ) ) ; } }"],"bleu":0.2926079159357615,"rouge_l":0.48200826647216144}
{"id":1606,"predictions":["import java . io . * ; import java . util . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner fs = new FastScanner ( ) ; PrintWriter out = new PrintWriter ( System . out ) ;"],"references":["import java . io . * ; class GFG { static void SieveOfEratosthenes ( int n , boolean prime [ ] , boolean primesquare [ ] , int a [ ] ) { for ( int i = 2 ; i <= n ; i ++ ) prime [ i ] = true ; for ( int i = 0 ; i < ( ( n * n ) + 1 ) ; i ++ ) primesquare [ i ] = false ; prime [ 1 ] = false ; for ( int p = 2 ; p * p <= n ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i <= n ; i += p ) prime [ i ] = false ; } } int j = 0 ; for ( int p = 2 ; p <= n ; p ++ ) { if ( prime [ p ] ) { a [ j ] = p ; primesquare [ p * p ] = true ; j ++ ; } } } static int countDivisors ( int n ) { if ( n == 1 ) return 1 ; boolean prime [ ] = new boolean [ n + 1 ] ; boolean primesquare [ ] = new boolean [ ( n * n ) + 1 ] ; int a [ ] = new int [ n ] ; SieveOfEratosthenes ( n , prime , primesquare , a ) ; int ans = 1 ; for ( int i = 0 ; ; i ++ ) { if ( a [ i ] * a [ i ] * a [ i ] > n ) break ; int cnt = 1 ; while ( n % a [ i ] == 0 ) { n = n \/ a [ i ] ; cnt = cnt + 1 ; } ans = ans * cnt ; } if ( prime [ n ] ) ans = ans * 2 ; else if ( primesquare [ n ] ) ans = ans * 3 ; else if ( n != 1 ) ans = ans * 4 ; return ans ; } public static void main ( String args [ ] ) { System . out . println ( \" Total ▁ distinct ▁ divisors \" + \" ▁ of ▁ 100 ▁ are ▁ : ▁ \" + countDivisors ( 100 ) ) ; } }"],"bleu":0.00041425608270124505,"rouge_l":0.10848301618353196}
{"id":1607,"predictions":["import java . io . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["class Test { static int arr [ ] = new int [ ] { 1 , 2 , 3 , 4 } ; static void subArray ( int n ) { for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i ; j < n ; j ++ ) { for ( int k = i ; k <= j ; k ++ ) System . out . print ( arr [ k ] + \" ▁ \" ) ; } } } public static void main ( String [ ] args ) { System . out . println ( \" All ▁ Non - empty ▁ Subarrays \" ) ; subArray ( arr . length ) ; } }"],"bleu":0.4013744475132586,"rouge_l":0.5056752965183012}
{"id":1608,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int findCullen ( int n ) { return ( 1 << n ) * n + 1 ; } public static void main ( String [ ] args ) { int n = 2 ; System . out . println ( findCullen ( n ) ) ; } }"],"bleu":0.5551357059619156,"rouge_l":0.7710037174721189}
{"id":1609,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["public class GFG { static double printProbability ( int L , int n ) { int p = ( 1 << ( n - 1 ) ) ; return 1.0 - ( ( double ) n ) \/ ( ( double ) p ) ; } public static void main ( String args [ ] ) { int n = 3 , L = 5 ; System . out . println ( printProbability ( L , n ) ) ; } }"],"bleu":0.3710576989039132,"rouge_l":0.5939506940128445}
{"id":1610,"predictions":["import java . util . * ; class GFG { static boolean isVowel ( String s ) { for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i ) ) return false ; } return true ; } public static void main ( String [ ] args ) { String s = \" geeksforgeeksforgeeks \" ; if ( isVowel ( s ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static String firstLetterWord ( String str ) { String result = \" \" ; boolean v = true ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { if ( str . charAt ( i ) == ' ▁ ' ) { v = true ; } else if ( str . charAt ( i ) != ' ▁ ' && v == true ) { result += ( str . charAt ( i ) ) ; v = false ; } } return result ; } public static void main ( String [ ] args ) { String str = \" geeks ▁ for ▁ geeks \" ; System . out . println ( firstLetterWord ( str ) ) ; } }"],"bleu":0.4041908133167215,"rouge_l":0.5804979794029462}
{"id":1611,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { a [ i ] = sc . nextInt ( ) ; } } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { System . out . print ( a [ i ] + \" \" ) ; } System . out . println ( ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } }"],"references":["import java . util . * ; class GFG { static void findPrevious ( char [ ] number , int n ) { int i , j ; for ( i = n - 1 ; i > 0 ; i -- ) { if ( number [ i ] < number [ i - 1 ] ) { break ; } } if ( i == 0 ) { System . out . print ( \" Previous ▁ number ▁ is ▁ not ▁ possible \" ) ; return ; } int x = number [ i - 1 ] , greatest = i ; for ( j = i ; j < n ; j ++ ) { if ( number [ j ] < x && number [ j ] > number [ greatest ] ) { greatest = j ; } } swap ( number , greatest , i - 1 ) ; Arrays . sort ( number , i , n ) ; reverse ( number , i , n - 1 ) ; System . out . print ( \" Greatest ▁ smaller ▁ number ▁ with \" + \" same ▁ set ▁ of ▁ digits ▁ is ▁ \" + String . valueOf ( number ) ) ; return ; } static String swap ( char [ ] ch , int i , int j ) { char temp = ch [ i ] ; ch [ i ] = ch [ j ] ; ch [ j ] = temp ; return String . valueOf ( ch ) ; } static void reverse ( char str [ ] , int start , int end ) { char temp ; while ( start <= end ) { temp = str [ start ] ; str [ start ] = str [ end ] ; str [ end ] = temp ; start ++ ; end -- ; } } public static void main ( String [ ] args ) { String digits = \"262345\" ; int n = digits . length ( ) ; findPrevious ( digits . toCharArray ( ) , n ) ; } }"],"bleu":0.19477392294094723,"rouge_l":0.34600267976775345}
{"id":1612,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int countPairs ( int a [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % 2 == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = a . length ; System . out . println ( countPairs ( a , n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int countDecreasing ( int A [ ] , int n ) { int cnt = 0 ; int len = 1 ; for ( int i = 0 ; i < n - 1 ; ++ i ) { if ( A [ i + 1 ] < A [ i ] ) len ++ ; else { cnt += ( ( ( len - 1 ) * len ) \/ 2 ) ; len = 1 ; } } if ( len > 1 ) cnt += ( ( ( len - 1 ) * len ) \/ 2 ) ; return cnt ; } public static void main ( String [ ] args ) { int A [ ] = { 100 , 3 , 1 , 13 } ; int n = A . length ; System . out . println ( countDecreasing ( A , n ) ) ; } }"],"bleu":0.3901423291209535,"rouge_l":0.63201871657754}
{"id":1613,"predictions":["import java . io . * ; class GFG { static int countWays ( int n ) { int count = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( n % i == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( countWays ( n ) ) ; } }"],"references":["import java . util . * ; class GFG { static int count ( int n ) { if ( n == 0 ) return 1 ; if ( n == 1 ) return 1 ; else return ( n * count ( n - 1 ) ) + ( ( n - 1 ) * count ( n - 2 ) ) ; } public static void main ( String [ ] args ) { int A [ ] = { 1 , 2 , 3 , 9 } ; int n = 4 ; System . out . println ( count ( n - 1 ) ) ; } }"],"bleu":0.3616104204583786,"rouge_l":0.5670254403131115}
{"id":1614,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } Arrays . sort ( arr ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } System . out . println ( sum ) ; } }"],"references":["import java . util . * ; import java . lang . * ; class GFG { public static void SplitAndAdd ( int [ ] A , int length , int rotation ) { int [ ] tmp = new int [ length * 2 ] ; System . arraycopy ( A , 0 , tmp , 0 , length ) ; System . arraycopy ( A , 0 , tmp , length , length ) ; for ( int i = rotation ; i < rotation + length ; i ++ ) A [ i - rotation ] = tmp [ i ] ; } public static void main ( String [ ] args ) { int arr [ ] = { 12 , 10 , 5 , 6 , 52 , 36 } ; int n = arr . length ; int position = 2 ; SplitAndAdd ( arr , n , position ) ; for ( int i = 0 ; i < n ; ++ i ) System . out . print ( arr [ i ] + \" ▁ \" ) ; } }"],"bleu":0.30940428412300663,"rouge_l":0.43702099300233255}
{"id":1615,"predictions":["import java . io . * ; import java . util . * ; class GFG { public static void main ( String [ ] args ) { int N = 5 ; System . out . println ( N + \" \" + N ) ; } }"],"references":["class GFG { static int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } static void commDiv ( int a , int b ) { int n = gcd ( a , b ) ; a = a \/ n ; b = b \/ n ; System . out . println ( \" A ▁ = ▁ \" + a + \" , ▁ B ▁ = ▁ \" + b ) ; } public static void main ( String [ ] args ) { int a = 10 , b = 15 ; commDiv ( a , b ) ; } }"],"bleu":0.09901550336130084,"rouge_l":0.26806117068026014}
{"id":1616,"predictions":["import java . io . * ; class GFG { static boolean isPowerOfTwo ( int n ) { if ( n == 1 ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 12 ; if ( isPowerOfTwo ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static boolean adjacentSet ( int n ) { int x = ( n & ( n >> 1 ) ) ; if ( x == 1 ) return true ; else return false ; } public static void main ( String args [ ] ) { int n = 3 ; if ( adjacentSet ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.6199124960506227,"rouge_l":0.7939262472885033}
{"id":1617,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int maxSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }"],"references":["import java . util . * ; import java . lang . * ; import java . io . * ; class GFG { static int MinimumMoves ( int a [ ] , int n , int x ) { int ans = 0 ; for ( int i = 1 ; i < n ; i ++ ) { if ( a [ i ] <= a [ i - 1 ] ) { int p = ( a [ i - 1 ] - a [ i ] ) \/ x + 1 ; ans += p ; a [ i ] += p * x ; } } return ans ; } public static void main ( String args [ ] ) { int arr [ ] = { 1 , 3 , 3 , 2 } ; int x = 2 ; int n = arr . length ; System . out . println ( MinimumMoves ( arr , n , x ) ) ; } }"],"bleu":0.42918443258237465,"rouge_l":0.6613733435549229}
{"id":1618,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int avg_of_even_num ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += 2 * i ; return ( sum \/ n ) ; } public static void main ( String [ ] args ) { int n = 9 ; System . out . print ( avg_of_even_num ( n ) ) ; } }"],"bleu":0.7566325743099364,"rouge_l":0.9039866416197038}
{"id":1619,"predictions":["import java . io . * ; class GFG { static void print ( int a [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) System . out . print ( a [ i ] + \" \" ) ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( a [ i ] + \" \" ) ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( a [ i ] + \" \" ) ; System . out . println ( ) ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 } ; int n = a . length ; print ( a , n ) ; } }"],"references":["class GFG { static int findX ( int A , int B ) { int j = 0 , x = 0 ; while ( A != 0 || B != 0 ) { if ( ( A % 2 == 1 ) && ( B % 2 == 1 ) ) { x += ( 1 << j ) ; } A >>= 1 ; B >>= 1 ; j += 1 ; } return x ; } public static void main ( String [ ] args ) { int A = 2 , B = 3 ; int X = findX ( A , B ) ; System . out . println ( \" X ▁ = ▁ \" + X + \" , ▁ Sum ▁ = ▁ \" + ( ( A ^ X ) + ( B ^ X ) ) ) ; } }"],"bleu":0.20873194032634185,"rouge_l":0.33765013054830284}
{"id":1620,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int maxSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }"],"references":["class GFG { static final int MAX = 1000001 ; static int factor [ ] = new int [ MAX ] ; static void cal_factor ( ) { factor [ 1 ] = 1 ; for ( int i = 2 ; i < MAX ; i ++ ) factor [ i ] = i ; for ( int i = 4 ; i < MAX ; i += 2 ) factor [ i ] = 2 ; for ( int i = 3 ; i * i < MAX ; i ++ ) { if ( factor [ i ] == i ) { for ( int j = i * i ; j < MAX ; j += i ) { if ( factor [ j ] == j ) factor [ j ] = i ; } } } } static int no_of_representations ( int a [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int temp = a [ i ] ; int flag = 0 ; while ( factor [ temp ] != 1 ) { flag = - 1 ; count ++ ; temp = temp \/ factor [ temp ] ; } count += flag ; } return count ; } public static void main ( String [ ] args ) { cal_factor ( ) ; int a [ ] = { 4 , 4 , 4 } ; int n = a . length ; System . out . print ( no_of_representations ( a , n ) ) ; } }"],"bleu":0.13219129243018632,"rouge_l":0.3893515995952362}
{"id":1621,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; Arrays . sort ( arr ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; System . out . println ( sum ) ; } }"],"references":["public class AAB { static int maxSumPair ( int arr1 [ ] , int n1 , int arr2 [ ] , int n2 ) { int max1 = Integer . MIN_VALUE ; int max2 = Integer . MIN_VALUE ; for ( int i = 0 ; i < n1 ; i ++ ) { if ( arr1 [ i ] > max1 ) max1 = arr1 [ i ] ; } for ( int i = 0 ; i < n2 ; i ++ ) { if ( arr2 [ i ] > max2 ) max2 = arr2 [ i ] ; } return max1 + max2 ; } public static void main ( String [ ] args ) { int arr1 [ ] = { 10 , 2 , 3 } ; int arr2 [ ] = { 3 , 4 , 7 } ; int n1 = arr1 . length ; int n2 = arr2 . length ; System . out . println ( maxSumPair ( arr1 , n1 , arr2 , n2 ) ) ; } }"],"bleu":0.23972372738242714,"rouge_l":0.4007299270072992}
{"id":1622,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( a [ i ] + \" \" ) ; } } }"],"references":["import java . io . * ; class GFG { static int remainder ( String str ) { int len = str . length ( ) ; int num , rem = 0 ; for ( int i = 0 ; i < len ; i ++ ) { num = rem * 10 + ( str . charAt ( i ) - '0' ) ; rem = num % 11 ; } return rem ; } public static void main ( String args [ ] ) { String str = \"3435346456547566345436457867978\" ; System . out . println ( remainder ( str ) ) ; } }"],"bleu":0.2903894208334181,"rouge_l":0.5024711696869852}
{"id":1623,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int findSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }"],"references":["class GFG { static void printArr ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + \" ▁ \" ) ; } static void randomList ( int m , int n ) { int arr [ ] = new int [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ ( int ) ( Math . random ( ) * m ) ] ++ ; } printArr ( arr , m ) ; } public static void main ( String args [ ] ) { int m = 4 , n = 8 ; randomList ( m , n ) ; } }"],"bleu":0.3844747483718887,"rouge_l":0.49086728828713755}
{"id":1624,"predictions":["import java . util . * ; class GFG { static boolean isPrime ( int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( n % i == 0 ) { sum += n \/ i ; } else { sum += n \/ i ; } } return sum ; } static boolean isPrime ( int n ) { for ( int i = 0 ; i < n ; i ++ ) { if ( isPrime ( n ) ) return false ; } return true ; } static boolean isPrime ( int n ) { if ( isPrime ( n ) ) { return false ; } return true ; } static boolean isPrime ( int n ) { if ( isPrime ( n ) ) { return false ; } if ( isPrime ( n ) ) { return false ; } if ( isPrime ( n ) ) { return false ; } if ( isPrime ( n ) ) { return false ; } return true ; } public static void main ( String [ ] args ) { int n = 10 ; if ( isPrime ( n ) ) { System . out . println ( \" Yes \" ) ; } else { System . out . println ( \" No \" ) ; } } }"],"references":["import java . util . * ; class GFG { static final int N = 100005 ; static void SieveOfEratosthenes ( boolean prime [ ] , int p_size ) { prime [ 0 ] = false ; prime [ 1 ] = false ; for ( int p = 2 ; p * p <= p_size ; p ++ ) { if ( prime [ p ] ) { for ( int i = p * 2 ; i <= p_size ; i += p ) prime [ i ] = false ; } } } static int longestPrimeSubsequence ( int arr [ ] , int n ) { boolean [ ] prime = new boolean [ N + 1 ] ; Arrays . fill ( prime , true ) ; SieveOfEratosthenes ( prime , N ) ; int answer = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( prime [ arr [ i ] ] ) { answer ++ ; } } return answer ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 4 , 11 , 2 , 9 , 21 } ; int n = arr . length ; System . out . print ( longestPrimeSubsequence ( arr , n ) + \" \\n \" ) ; } }"],"bleu":0.3115951756460241,"rouge_l":0.4161957270847691}
{"id":1625,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["class CatalnNumber { int catalan ( int n ) { int res = 0 ; if ( n <= 1 ) { return 1 ; } for ( int i = 0 ; i < n ; i ++ ) { res += catalan ( i ) * catalan ( n - i - 1 ) ; } return res ; } public static void main ( String [ ] args ) { CatalnNumber cn = new CatalnNumber ( ) ; for ( int i = 0 ; i < 10 ; i ++ ) { System . out . print ( cn . catalan ( i ) + \" ▁ \" ) ; } } }"],"bleu":0.2685913698036889,"rouge_l":0.5611959914572039}
{"id":1626,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { System . out . print ( a [ i ] + \" \" ) ; } System . out . println ( ) ; } }"],"references":["class GFG { static int smallestIndex ( int [ ] a , int n ) { int right1 = 0 , right0 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == 1 ) right1 = i ; else right0 = i ; } return Math . min ( right1 , right0 ) ; } public static void main ( String [ ] args ) { int [ ] a = { 1 , 1 , 1 , 0 , 0 , 1 , 0 , 1 , 1 } ; int n = a . length ; System . out . println ( smallestIndex ( a , n ) ) ; } }"],"bleu":0.36258444085145936,"rouge_l":0.4322476379910493}
{"id":1627,"predictions":["import java . io . * ; class GFG { static int findMin ( int a [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += a [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = a . length ; System . out . println ( findMin ( a , n ) ) ; } }"],"references":["import java . io . * ; import java . math . * ; class GFG { static double polygonArea ( double X [ ] , double Y [ ] , int n ) { double area = 0.0 ; int j = n - 1 ; for ( int i = 0 ; i < n ; i ++ ) { area += ( X [ j ] + X [ i ] ) * ( Y [ j ] - Y [ i ] ) ; j = i ; } return Math . abs ( area \/ 2.0 ) ; } public static void main ( String [ ] args ) { double X [ ] = { 0 , 2 , 4 } ; double Y [ ] = { 1 , 3 , 7 } ; int n = X . length ; System . out . println ( polygonArea ( X , Y , n ) ) ; } }"],"bleu":0.37410760648822056,"rouge_l":0.6257491931765791}
{"id":1628,"predictions":["import java . io . * ; class GFG { static float area ( float a , float b ) { if ( a * b < 0 ) return - 1 ; return area ; } public static void main ( String [ ] args ) { float a = 5 , b = 5 ; System . out . println ( area ( a , b ) ) ; } }"],"references":["import java . io . * ; class GFG { static double PI = 3.14 ; static double areaOfInscribedCircle ( float a ) { return ( PI \/ 4 ) * a * a ; } public static void main ( String [ ] args ) { float a = 8 ; System . out . println ( \" Area ▁ of ▁ an ▁ inscribed \" + \" ▁ circle : ▁ \" + areaOfInscribedCircle ( a ) ) ; } }"],"bleu":0.45491854968146495,"rouge_l":0.6210263868688968}
{"id":1629,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int divisorSum ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; j * j <= i ; ++ j ) { if ( i % j == 0 ) { if ( i \/ j == j ) sum += j ; else sum += j + i \/ j ; } } } return sum ; } public static void main ( String args [ ] ) { int n = 4 ; System . out . println ( divisorSum ( n ) ) ; n = 5 ; System . out . println ( divisorSum ( n ) ) ; } }"],"bleu":0.4519428022312682,"rouge_l":0.6480953614926147}
{"id":1630,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int maxSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { sum += arr [ i ] \/ 2 ; } else { sum += arr [ i ] \/ 2 ; } } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 3 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static int MAX = 32 ; static int countSetBits ( int n ) { int count = 0 ; while ( n > 0 ) { n &= ( n - 1 ) ; count ++ ; } return count ; } static int pairs ( int arr [ ] , int n , int k ) { int count = 0 ; int [ ] f = new int [ MAX + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) f [ countSetBits ( arr [ i ] ) ] ++ ; for ( int i = 0 ; i <= MAX ; i ++ ) { for ( int j = i ; j <= MAX ; j ++ ) { if ( i + j == k ) { if ( i == j ) count += ( ( f [ i ] * ( f [ i ] - 1 ) ) \/ 2 ) ; else count += ( f [ i ] * f [ j ] ) ; } } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 } ; int n = arr . length ; int k = 4 ; System . out . println ( pairs ( arr , n , k ) ) ; } }"],"bleu":0.29028971637997364,"rouge_l":0.5380687093779016}
{"id":1631,"predictions":["import java . io . * ; class GFG { static boolean isPrime ( int n ) { if ( n == 1 ) return false ; if ( n == 2 ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 12 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . io . * ; import java . util . * ; public class CheckPallindromNumberRecursion { public static int oneDigit ( int num ) { if ( ( num >= 0 ) && ( num < 10 ) ) return 1 ; else return 0 ; } public static int isPalUtil ( int num , int dupNum ) throws Exception { if ( num == 0 ) { return dupNum ; } else { dupNum = isPalUtil ( num \/ 10 , dupNum ) ; } if ( num % 10 == dupNum % 10 ) { return dupNum \/ 10 ; } else { throw new Exception ( ) ; } } public static int isPal ( int num ) throws Exception { if ( num < 0 ) num = ( - num ) ; int dupNum = ( num ) ; return isPalUtil ( num , dupNum ) ; } public static void main ( String args [ ] ) { int n = 1242 ; try { isPal ( n ) ; System . out . println ( \" Yes \" ) ; } catch ( Exception e ) { System . out . println ( \" No \" ) ; } n = 1231 ; try { isPal ( n ) ; System . out . println ( \" Yes \" ) ; } catch ( Exception e ) { System . out . println ( \" No \" ) ; } n = 12 ; try { isPal ( n ) ; System . out . println ( \" Yes \" ) ; } catch ( Exception e ) { System . out . println ( \" No \" ) ; } n = 88 ; try { isPal ( n ) ; System . out . println ( \" Yes \" ) ; } catch ( Exception e ) { System . out . println ( \" No \" ) ; } n = 8999 ; try { isPal ( n ) ; System . out . println ( \" Yes \" ) ; } catch ( Exception e ) { System . out . println ( \" No \" ) ; } } }"],"bleu":0.08473511080980506,"rouge_l":0.3376252621766488}
{"id":1632,"predictions":["import java . io . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 10 == 0 ) return false ; if ( n % 10 == 0 ) return false ; return false ; } static boolean isPrime ( int n ) { if ( isPrime ( n ) ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 10 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; import java . lang . * ; class GFG { static int isSumDivides ( int N ) { int temp = N ; int sum = 0 ; while ( temp > 0 ) { sum += temp % 10 ; temp \/= 10 ; } if ( N % sum == 0 ) return 1 ; else return 0 ; } public static void main ( String args [ ] ) { int N = 12 ; if ( isSumDivides ( N ) == 1 ) System . out . print ( \" YES \" ) ; else System . out . print ( \" NO \" ) ; } }"],"bleu":0.3264299497515022,"rouge_l":0.5899915895710682}
{"id":1633,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( a [ i ] + \" \" ) ; } out . println ( ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["class GFG { static int nextZero ( int i , int occurrences [ ] ) { while ( i < occurrences . length ) { if ( occurrences [ i ] == 0 ) return i ; i ++ ; } return - 1 ; } static String getModifiedString ( String str ) { int n = str . length ( ) ; if ( n > 26 ) return \" - 1\" ; char ch [ ] = str . toCharArray ( ) ; int i , occurrences [ ] = new int [ 26 ] ; for ( i = 0 ; i < n ; i ++ ) occurrences [ ch [ i ] - ' a ' ] ++ ; int index = nextZero ( 0 , occurrences ) ; for ( i = 0 ; i < n ; i ++ ) { if ( occurrences [ ch [ i ] - ' a ' ] > 1 ) { occurrences [ ch [ i ] - ' a ' ] -- ; ch [ i ] = ( char ) ( ' a ' + index ) ; occurrences [ index ] = 1 ; index = nextZero ( index + 1 , occurrences ) ; } } return String . valueOf ( ch ) ; } public static void main ( String arr [ ] ) { String str = \" geeksforgeeks \" ; System . out . print ( getModifiedString ( str ) ) ; } }"],"bleu":0.2297622544427907,"rouge_l":0.38589669181659897}
{"id":1634,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int count ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ i ] % 2 == 0 ) { count ++ ; } } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 3 } ; int n = arr . length ; System . out . println ( count ( arr , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static int calculateCycleOperations ( int len ) { int cycle_operations = 0 ; while ( len > 0 ) { len \/= 3 ; ++ cycle_operations ; } return -- cycle_operations ; } static int minimumOperations ( int p [ ] , int n ) { int [ ] visited = new int [ n + 1 ] ; Arrays . fill ( visited , 0 ) ; int ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { int ele = p [ i ] ; if ( visited [ ele ] == 0 ) { visited [ ele ] = 1 ; int len = 1 ; ele = p [ ele ] ; while ( visited [ ele ] == 0 ) { visited [ ele ] = 1 ; ++ len ; ele = p [ ele ] ; } int operations = calculateCycleOperations ( len ) ; int num = ( int ) Math . pow ( 3 , operations ) ; if ( num != len ) { return - 1 ; } ans = Math . max ( ans , operations ) ; } } return ans ; } public static void main ( String args [ ] ) { int P [ ] = { - 1 , 4 , 6 , 5 , 3 , 2 , 7 , 8 , 9 , 1 } ; int n = P . length - 1 ; System . out . println ( minimumOperations ( P , n ) ) ; } }"],"bleu":0.17506810935218978,"rouge_l":0.45373400773579287}
{"id":1635,"predictions":["import java . io . * ; class GFG { static float area ( float a , float b ) { if ( a * b < 0 ) return - 1 ; float area = ( float ) Math . sqrt ( Math . sqrt ( a ) ) ; return area ; } public static void main ( String [ ] args ) { float a = 5 , b = 5 ; System . out . println ( area ( a , b ) ) ; } }"],"references":["class Test { public static void main ( String args [ ] ) { double r = 3 ; double R = 7 ; float pi = ( float ) 3.14159 ; double Volume = 0 ; Volume = 2 * pi * pi * R * r * r ; System . out . printf ( \" Volume : ▁ % f \" , Volume ) ; double Surface = 4 * pi * pi * R * r ; System . out . printf ( \" \\n Surface : ▁ % f \" , Surface ) ; } }"],"bleu":0.1687906454911827,"rouge_l":0.2992725427169683}
{"id":1636,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int count ( int a [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % 2 == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 } ; int n = a . length ; System . out . println ( count ( a , n ) ) ; } }"],"references":["class GFG { static int numberOfPaths ( int m , int n ) { int [ ] dp = new int [ n ] ; dp [ 0 ] = 1 ; for ( int i = 0 ; i < m ; i ++ ) { for ( int j = 1 ; j < n ; j ++ ) { dp [ j ] += dp [ j - 1 ] ; } } return dp [ n - 1 ] ; } public static void main ( String args [ ] ) { System . out . println ( numberOfPaths ( 3 , 3 ) ) ; } }"],"bleu":0.3699549555797368,"rouge_l":0.5329418504726439}
{"id":1637,"predictions":["import java . io . * ; class GFG { static boolean isVowel ( int a , int b ) { if ( a < b ) return false ; if ( a < b ) return false ; return false ; } public static void main ( String [ ] args ) { int a = 10 , b = 10 ; if ( isVowel ( a , b ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static int alternate ( int a , int b , int x ) { return x = a ^ b ^ x ; } public static void main ( String [ ] args ) { int a = - 10 ; int b = 15 ; int x = a ; System . out . print ( \" x ▁ is ▁ : ▁ \" + x ) ; x = alternate ( a , b , x ) ; System . out . print ( \" \\n After ▁ exchange ▁ \" ) ; System . out . print ( \" \\n x ▁ is ▁ : ▁ \" + x ) ; } }"],"bleu":0.31011992217548995,"rouge_l":0.5546281114920256}
{"id":1638,"predictions":["import java . io . * ; class GFG { static float area ( float a , float b ) { if ( a * b < 0 ) return - 1 ; return area ; } public static void main ( String [ ] args ) { float a = 5 , b = 5 ; System . out . println ( area ( a , b ) ) ; } }"],"references":["import java . io . * ; import java . util . * ; class GFG { static double surface_area_octahedron ( double side ) { return ( 2 * ( Math . sqrt ( 3 ) ) * ( side * side ) ) ; } public static void main ( String [ ] args ) { double side = 7 ; System . out . println ( \" Surface ▁ area ▁ of ▁ octahedron ▁ = \" + surface_area_octahedron ( side ) ) ; } }"],"bleu":0.37237310189282696,"rouge_l":0.549769677548568}
{"id":1639,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int CenteredDodecahedral_num ( int n ) { return ( 2 * n + 1 ) * ( 5 * n * n + 5 * n + 1 ) ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . print ( n + \" th ▁ Centered ▁ \" + \" Dodecahedral ▁ number ▁ : ▁ \" ) ; System . out . println ( CenteredDodecahedral_num ( n ) ) ; n = 10 ; System . out . print ( n + \" th ▁ Centered ▁ \" + \" Dodecahedral ▁ number ▁ : ▁ \" ) ; System . out . println ( CenteredDodecahedral_num ( n ) ) ; } }"],"bleu":0.25785348000588526,"rouge_l":0.4635393833114131}
{"id":1640,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { System . out . print ( a [ i ] + \" \" ) ; } System . out . println ( ) ; } } }"],"references":["import java . lang . Math ; class GfG { static int longestSubstring ( String s ) { int cnt = 1 , maxi = 1 ; int n = s . length ( ) ; for ( int i = 1 ; i < n ; i ++ ) { if ( s . charAt ( i ) != s . charAt ( i - 1 ) ) cnt ++ ; else { maxi = Math . max ( cnt , maxi ) ; cnt = 1 ; } } maxi = Math . max ( cnt , maxi ) ; return maxi ; } public static void main ( String [ ] args ) { String s = \" ccccdeededff \" ; System . out . println ( longestSubstring ( s ) ) ; } }"],"bleu":0.29813163622971783,"rouge_l":0.4506136065769093}
{"id":1641,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; System . out . println ( n * ( n + 1 ) \/ 10 ) ; } }"],"references":["class Test { static int firstDigit ( int x ) { while ( x >= 10 ) x = x \/ 10 ; return x ; } public static void main ( String args [ ] ) { System . out . println ( firstDigit ( 12345 ) ) ; System . out . println ( firstDigit ( 5432 ) ) ; } }"],"bleu":0.28609859032980756,"rouge_l":0.47793157482371373}
{"id":1642,"predictions":["import java . io . * ; import java . util . * ; import java . lang . * ; class GFG { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { for ( int k = 0 ; k < n ; k ++ ) { for ( int k = 0 ; k < n ; k ++ ) { for ( int k = 0 ; k < n ; k ++ ) { for ( int k = 0 ; k < n ; k ++ ) { if ( a [ k ] < b [ k ] && b [ k ] < b [ k ] ) { ans ++ ; } } } } } } System . out . println ( ans ) ; } }"],"references":["class GFG { static int C [ ] [ ] = new int [ 1000 ] [ 1000 ] ; static void binomialCoeff ( int n ) { int i , j ; for ( i = 0 ; i <= n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( j == 0 || j == i ) C [ i ] [ j ] = 1 ; else C [ i ] [ j ] = C [ i - 1 ] [ j - 1 ] + C [ i - 1 ] [ j ] ; } } } static int numberOfWays ( int x , int y , int z ) { binomialCoeff ( Math . max ( x , Math . max ( y , z ) ) ) ; int sum = 0 ; for ( int i = 1 ; i <= z ; i ++ ) { sum = ( sum + C [ z ] [ i ] ) ; } int sum1 = 0 ; for ( int i = 1 ; i <= y ; i ++ ) { for ( int j = i + 1 ; j <= x ; j ++ ) { sum1 = ( sum1 + ( C [ y ] [ i ] * C [ x ] [ j ] ) ) ; } } sum1 = ( sum * sum1 ) ; return sum1 ; } public static void main ( String args [ ] ) { int x = 3 ; int y = 2 ; int z = 1 ; System . out . println ( numberOfWays ( x , y , z ) ) ; } }"],"bleu":0.28404228691220235,"rouge_l":0.3939360770577934}
{"id":1643,"predictions":["import java . io . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 10 == 0 ) return false ; if ( n % 10 == 0 ) return false ; if ( n % 10 == 0 ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 10 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; class GFG { static boolean isDivisible ( int n ) { int d ; while ( ( n \/ 100 ) > 0 ) { d = n % 10 ; n \/= 10 ; n = Math . abs ( n - ( d * 14 ) ) ; } return ( n % 47 == 0 ) ; } public static void main ( String [ ] args ) { int N = 59173 ; if ( isDivisible ( N ) ) System . out . print ( \" Yes \" ) ; else System . out . print ( \" No \" ) ; } }"],"bleu":0.46138345880216364,"rouge_l":0.6776773811287216}
{"id":1644,"predictions":["import java . io . * ; import java . util . * ; import java . lang . * ; import java . math . * ; import java . text . * ; public class Main { public static void main ( String [ ] args ) throws java . lang . Exception { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int N = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; System . out . println ( ( int ) Math . pow ( 2 , M ) ) ; } }"],"references":["public final class p028 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p028 ( ) . run ( ) ) ; } private static final int SIZE = 1001 ; public String run ( ) { long sum = 1 ; for ( int n = 3 ; n <= SIZE ; n += 2 ) sum += 4 * n * n - 6 * ( n - 1 ) ; return Long . toString ( sum ) ; } }"],"bleu":0.1733389430988886,"rouge_l":0.3525017618040873}
{"id":1645,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int N = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { st = new StringTokenizer ( br . readLine ( ) ) ; a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } Arrays . sort ( a ) ; int sum = 0 ; for ( int i = 0 ; i < N ; i ++ ) { sum += a [ i ] ; } System . out . println ( sum ) ; } }"],"references":["import java . math . BigInteger ; public final class p387 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p387 ( ) . run ( ) ) ; } private static final long LIMIT = 100000000000000L ; private BigInteger sum = BigInteger . ZERO ; public String run ( ) { for ( int i = 1 ; i <= 9 ; i ++ ) findHarshadPrimes ( i , i , false ) ; return sum . toString ( ) ; } private void findHarshadPrimes ( long n , int digitSum , boolean isStrong ) { long m = n * 10 ; int s = digitSum ; for ( int i = 0 ; i < 10 && m < LIMIT ; i ++ , m ++ , s ++ ) { if ( isStrong && isPrime ( m ) ) sum = sum . add ( BigInteger . valueOf ( m ) ) ; if ( m % s == 0 ) findHarshadPrimes ( m , s , isPrime ( m \/ s ) ) ; } } private static boolean isPrime ( long x ) { if ( x < 0 ) throw new IllegalArgumentException ( \" Negative ▁ number \" ) ; if ( x == 0 || x == 1 ) return false ; for ( long i = 2 , end = Library . sqrt ( x ) ; i <= end ; i ++ ) { if ( x % i == 0 ) return false ; } return true ; } }"],"bleu":0.18249340576258616,"rouge_l":0.3862885462555066}
{"id":1646,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } System . out . println ( a [ n - 1 ] ) ; } }"],"references":["public final class p117 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p117 ( ) . run ( ) ) ; } private static final int LENGTH = 50 ; public String run ( ) { long [ ] ways = new long [ LENGTH + 1 ] ; ways [ 0 ] = 1 ; for ( int n = 1 ; n <= LENGTH ; n ++ ) { for ( int k = 1 ; k <= 4 && k <= n ; k ++ ) ways [ n ] += ways [ n - k ] ; } return Long . toString ( ways [ LENGTH ] ) ; } }"],"bleu":0.21456928975617978,"rouge_l":0.4444689776992714}
{"id":1647,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) System ."],"references":["public final class p188 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p188 ( ) . run ( ) ) ; } public String run ( ) { return Integer . toString ( tetrationMod ( 1777 , 1855 , Library . pow ( 10 , 8 ) ) ) ; } private static int tetrationMod ( int x , int y , int m ) { if ( y == 1 ) return x % m ; else return Library . powMod ( x , tetrationMod ( x , y - 1 , Library . totient ( m ) ) , m ) ; } }"],"bleu":0.013495981685030245,"rouge_l":0.146029086121252}
{"id":1648,"predictions":["import java . io . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 3 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["public final class p160 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p160 ( ) . run ( ) ) ; } public String run ( ) { return Long . toString ( factorialSuffix ( 1000000000000L ) ) ; } private static long factorialSuffix ( long n ) { long twos = countFactors ( n , 2 ) - countFactors ( n , 5 ) ; if ( twos >= 2505 ) twos = ( twos - 5 ) % 2500 + 5 ; return factorialish ( n ) * Library . powMod ( 2 , ( int ) twos , 100000 ) % 100000 ; } private static long factorialish ( long n ) { return evenFactorialish ( n ) * oddFactorialish ( n ) % 100000 ; } private static long evenFactorialish ( long n ) { if ( n == 0 ) return 1 ; else return factorialish ( n \/ 2 ) ; } private static long oddFactorialish ( long n ) { if ( n == 0 ) return 1 ; else return oddFactorialish ( n \/ 5 ) * factorialCoprime ( n ) % 100000 ; } private static long factorialCoprime ( long n ) { n %= 100000 ; long product = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( i % 2 != 0 && i % 5 != 0 ) product = i * product % 100000 ; } return product ; } private static long countFactors ( long end , long n ) { if ( end == 0 ) return 0 ; else return end \/ n + countFactors ( end \/ n , n ) ; } }"],"bleu":0.16105925258505815,"rouge_l":0.33870481018769993}
{"id":1649,"predictions":["import java . io . * ; import java . util . * ; import java . lang . * ; class GFG { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { a [ i ] = sc . nextInt ( ) ; } System . out . println ( a [ n - 1 ] + \" \" + a [ n - 1 ] + \" \" + a [ n - 1 ] + \" \" + a [ n - 1 ] ) ; } } }"],"references":["public final class p166 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p166 ( ) . run ( ) ) ; } public String run ( ) { int count = 0 ; int [ ] num = new int [ 8 ] ; do { int a = num [ 0 ] , b = num [ 1 ] , c = num [ 2 ] , d = num [ 3 ] ; int e = num [ 4 ] , g = num [ 5 ] , i = num [ 6 ] , k = num [ 7 ] ; int m = b + c + d - e - i ; if ( m < 0 || m > 9 ) continue ; int o = a + b + d - g - k ; if ( o < 0 || o > 9 ) continue ; int j = a + b + c - g - m ; if ( j < 0 || j > 9 ) continue ; int l = a + b + c + d - i - j - k ; if ( l < 0 || l > 9 ) continue ; int f = b + c + d * 2 - e - i - k ; if ( f < 0 || f > 9 ) continue ; int h = a + b + c + d - e - f - g ; if ( h < 0 || h > 9 ) continue ; int n = a + c + d - f - j ; if ( n < 0 || n > 9 ) continue ; int p = a + b + c - h - l ; if ( p < 0 || p > 9 ) continue ; count ++ ; } while ( increment ( num ) ) ; return Integer . toString ( count ) ; } private static boolean increment ( int [ ] num ) { int i = 0 ; while ( num [ i ] == 9 ) { num [ i ] = 0 ; i ++ ; if ( i == num . length ) return false ; } num [ i ] ++ ; return true ; } }"],"bleu":0.07787758928827855,"rouge_l":0.24686105634533567}
{"id":1650,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["import java . math . BigInteger ; public final class p097 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p097 ( ) . run ( ) ) ; } public String run ( ) { BigInteger modulus = BigInteger . TEN . pow ( 10 ) ; BigInteger n = BigInteger . valueOf ( 2 ) . modPow ( BigInteger . valueOf ( 7830457 ) , modulus ) ; n = n . multiply ( BigInteger . valueOf ( 28433 ) ) . mod ( modulus ) ; n = n . add ( BigInteger . ONE ) . mod ( modulus ) ; return String . format ( \" % 010d \" , n ) ; } }"],"bleu":0.15508909186746228,"rouge_l":0.2945525878979931}
{"id":1651,"predictions":["import java . io . * ; import java . util . * ; import java . lang . * ; class GFG { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { a [ i ] = sc . nextInt ( ) ; } System . out . println ( a [ n - 1 ] + \" \" + a [ n - 1 ] + \" \" + a [ n - 1 ] + \" \" + a [ n - 1 ] ) ; } } }"],"references":["import java . math . BigInteger ; public final class p329 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p329 ( ) . run ( ) ) ; } private static final int START_NUM = 1 ; private static final int END_NUM = 500 ; private static final String CROAK_SEQ = \" PPPPNNPPPNPPNPN \" ; static { assert 0 <= START_NUM && START_NUM < END_NUM && END_NUM < Integer . MAX_VALUE ; assert 1 <= CROAK_SEQ . length ( ) && CROAK_SEQ . length ( ) <= 31 ; } private static final int NUM_JUMPS = CROAK_SEQ . length ( ) - 1 ; private static final int NUM_TRIALS = 1 << NUM_JUMPS ; public String run ( ) { long globalNumerator = 0 ; boolean [ ] isPrime = Library . listPrimality ( END_NUM ) ; for ( int i = START_NUM ; i <= END_NUM ; i ++ ) { for ( int j = 0 ; j < NUM_TRIALS ; j ++ ) { int pos = i ; int trialNumerator = 1 ; if ( isPrime [ pos ] == ( CROAK_SEQ . charAt ( 0 ) == ' P ' ) ) trialNumerator *= 2 ; for ( int k = 0 ; k < NUM_JUMPS ; k ++ ) { if ( pos <= START_NUM ) pos ++ ; else if ( pos >= END_NUM ) pos -- ; else if ( ( ( j >>> k ) & 1 ) == 0 ) pos ++ ; else pos -- ; if ( isPrime [ pos ] == ( CROAK_SEQ . charAt ( k + 1 ) == ' P ' ) ) trialNumerator *= 2 ; } globalNumerator += trialNumerator ; } } BigInteger globalDenominator = BigInteger . valueOf ( END_NUM + 1L - START_NUM ) . shiftLeft ( NUM_JUMPS ) . multiply ( BigInteger . valueOf ( 3 ) . pow ( CROAK_SEQ . length ( ) ) ) ; return new Fraction ( BigInteger . valueOf ( globalNumerator ) , globalDenominator ) . toString ( ) ; } }"],"bleu":0.11725410282966774,"rouge_l":0.30593867548159126}
{"id":1652,"predictions":["import java . io . * ; import java . util . * ; import java . lang . * ; class GFG { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { System . out . print ( a [ i ] + \" \" ) ; } System . out . println ( ) ; } } }"],"references":["public final class p518 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p518 ( ) . run ( ) ) ; } private static final int LIMIT = Library . pow ( 10 , 8 ) ; public String run ( ) { long sum = 0 ; boolean [ ] isPrime = Library . listPrimality ( LIMIT - 1 ) ; for ( int x = 1 ; x < isPrime . length ; x ++ ) { for ( int y = 1 ; ; y ++ ) { long a = ( long ) x * y * y - 1 ; if ( a >= isPrime . length ) break ; if ( ! isPrime [ ( int ) a ] ) continue ; for ( int z = y + 1 ; ; z ++ ) { if ( Library . gcd ( y , z ) != 1 ) continue ; long b = ( long ) x * y * z - 1 ; long c = ( long ) x * z * z - 1 ; if ( c >= isPrime . length ) break ; if ( isPrime [ ( int ) b ] && isPrime [ ( int ) c ] ) { long addend = a + b + c ; if ( sum + addend < sum ) throw new ArithmeticException ( \" Overflow \" ) ; sum += addend ; } } } } return Long . toString ( sum ) ; } }"],"bleu":0.13065344850274518,"rouge_l":0.32970531615578264}
{"id":1653,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int n ) { for ( int i = 1 ; i <= n ; i ++ ) if ( n % i == 0 ) return false ; return true ; } static boolean isPrime ( int n ) { if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; return true ; } public static void main ( String [ ] args ) { int n = 10 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . math . BigInteger ; public final class p101 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p101 ( ) . run ( ) ) ; } private static final int DEGREE = 10 ; public String run ( ) { Fraction sum = Fraction . ZERO ; for ( int k = 1 ; k <= DEGREE ; k ++ ) { for ( int n = k + 1 ; ; n ++ ) { if ( n == DEGREE + 2 ) throw new AssertionError ( ) ; Fraction reference = new Fraction ( generatingFunction ( n ) ) ; Fraction term = optimumPolynomial ( k , n ) ; if ( ! term . equals ( reference ) ) { sum = sum . add ( term ) ; break ; } } } if ( sum . denominator . equals ( BigInteger . ONE ) ) return sum . numerator . toString ( ) ; else return sum . toString ( ) ; } private static Fraction optimumPolynomial ( int k , int n ) { Fraction sum = Fraction . ZERO ; for ( int i = 1 ; i <= k ; i ++ ) { Fraction product = new Fraction ( generatingFunction ( i ) ) ; for ( int j = 1 ; j <= k ; j ++ ) { if ( j != i ) product = product . multiply ( new Fraction ( BigInteger . valueOf ( n - j ) , BigInteger . valueOf ( i - j ) ) ) ; } sum = sum . add ( product ) ; } return sum ; } private static BigInteger generatingFunction ( int n ) { BigInteger sum = BigInteger . ZERO ; BigInteger biN = BigInteger . valueOf ( - n ) ; for ( int i = 0 ; i <= DEGREE ; i ++ ) sum = sum . add ( biN . pow ( i ) ) ; return sum ; } }"],"bleu":0.10609949953948986,"rouge_l":0.310781990521327}
{"id":1654,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int sum ( int a [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += a [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += a [ i ] ; return sum ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = a . length ; System . out . println ( sum ( a , n ) ) ; } }"],"references":["public final class p250 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p250 ( ) . run ( ) ) ; } private static final long MODULUS = 10000000000000000L ; public String run ( ) { long [ ] numSubsets = new long [ 250 ] ; numSubsets [ 0 ] = 1 ; for ( int i = 1 ; i <= 250250 ; i ++ ) { int temp = Library . powMod ( i , i , 250 ) ; long [ ] newArray = new long [ numSubsets . length ] ; for ( int j = 0 ; j < 250 ; j ++ ) newArray [ ( j + temp ) % 250 ] = ( numSubsets [ j ] + numSubsets [ ( j + temp ) % 250 ] ) % MODULUS ; numSubsets = newArray ; } return Long . toString ( ( numSubsets [ 0 ] - 1 + MODULUS ) % MODULUS ) ; } }"],"bleu":0.20228080246522168,"rouge_l":0.33057259713701426}
{"id":1655,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isDivisible ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 10 ; if ( isDivisible ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["public final class p072 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p072 ( ) . run ( ) ) ; } private static final int LIMIT = Library . pow ( 10 , 6 ) ; public String run ( ) { long sum = 0 ; int [ ] totients = Library . listTotients ( LIMIT ) ; for ( int i = 2 ; i < totients . length ; i ++ ) sum += totients [ i ] ; return Long . toString ( sum ) ; } }"],"bleu":0.32227055968175605,"rouge_l":0.3283723875870804}
{"id":1656,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans += a [ i ] ; } out . println ( ans ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["public final class p031 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p031 ( ) . run ( ) ) ; } private static final int TOTAL = 200 ; private static int [ ] COINS = { 1 , 2 , 5 , 10 , 20 , 50 , 100 , 200 } ; public String run ( ) { int [ ] [ ] ways = new int [ COINS . length + 1 ] [ TOTAL + 1 ] ; ways [ 0 ] [ 0 ] = 1 ; for ( int i = 0 ; i < COINS . length ; i ++ ) { int coin = COINS [ i ] ; for ( int j = 0 ; j <= TOTAL ; j ++ ) ways [ i + 1 ] [ j ] = ways [ i ] [ j ] + ( j >= coin ? ways [ i + 1 ] [ j - coin ] : 0 ) ; } return Integer . toString ( ways [ COINS . length ] [ TOTAL ] ) ; } }"],"bleu":0.17496660546033804,"rouge_l":0.3213309328532373}
{"id":1657,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; return false ; } static boolean isPrime ( int n ) { if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; return false ; return false ; } public static void main ( String [ ] args ) { int n = 12 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["public final class p197 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p197 ( ) . run ( ) ) ; } private static long ITERATIONS = 1000000000000L ; public String run ( ) { double x = - 1 ; double y = - 1 ; long i = 0 ; for ( ; i < ITERATIONS ; i ++ ) { if ( i > 0 && x == y ) break ; x = f ( x ) ; y = f ( f ( y ) ) ; } long remain = ( ITERATIONS - i ) % i ; for ( ; remain > 0 ; remain -- ) x = f ( x ) ; double answer = x + f ( x ) ; answer = Math . floor ( answer * 1e9 ) \/ 1e9 ; return String . format ( \" % .9f \" , answer ) ; } private static double f ( double x ) { return Math . floor ( Math . pow ( 2 , 30.403243784 - x * x ) ) \/ 1e9 ; } }"],"bleu":0.11966038846647813,"rouge_l":0.2860865033871808}
{"id":1658,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int N = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int sum = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { sum += Integer . parseInt ( st . nextToken ( ) ) ; } System . out . println ( sum ) ; } }"],"references":["import java . math . BigInteger ; public final class p056 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p056 ( ) . run ( ) ) ; } public String run ( ) { int max = 0 ; for ( int a = 1 ; a < 100 ; a ++ ) { for ( int b = 1 ; b < 100 ; b ++ ) { BigInteger pow = BigInteger . valueOf ( a ) . pow ( b ) ; max = Math . max ( digitSum ( pow ) , max ) ; } } return Integer . toString ( max ) ; } private static int digitSum ( BigInteger n ) { int sum = 0 ; String s = n . toString ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) sum += s . charAt ( i ) - '0' ; return sum ; } }"],"bleu":0.2302326602927114,"rouge_l":0.4428425357873211}
{"id":1659,"predictions":["import java . util . * ; import java . lang . * ; import java . io . * ; public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) {"],"references":["public final class p008 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p008 ( ) . run ( ) ) ; } public String run ( ) { long maxProd = - 1 ; for ( int i = 0 ; i + ADJACENT <= NUMBER . length ( ) ; i ++ ) { long prod = 1 ; for ( int j = 0 ; j < ADJACENT ; j ++ ) prod *= NUMBER . charAt ( i + j ) - '0' ; maxProd = Math . max ( prod , maxProd ) ; } return Long . toString ( maxProd ) ; } private static final int ADJACENT = 13 ; private static final String NUMBER = \"7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450\" ; }"],"bleu":0.005416420638253414,"rouge_l":0.1143490115882754}
{"id":1660,"predictions":["import java . util . * ; import java . io . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; } public static long mod = 17352642619633L ; void run ( FastScanner in , PrintWriter out ) { int N = in . nextInt ( ) ; int [ ] a = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { a [ i ] = in . nextInt ( ) ; } long ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < N ; j ++ ) { ans += a [ i ] ; } } out . println ( ans ) ; } static class FastScanner { BufferedReader br ; StringTokenizer st ; public FastScanner ( InputStream in ) { br = new BufferedReader ( new InputStreamReader ( in ) ) ; st = null ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . math . BigInteger ; public final class p164 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p164 ( ) . run ( ) ) ; } private static final int BASE = 10 ; private static final int DIGITS = 20 ; private static final int CONSECUTIVE = 3 ; private static final int MAX_SUM = 9 ; public String run ( ) { BigInteger [ ] [ ] ways = new BigInteger [ DIGITS + CONSECUTIVE + 1 ] [ Library . pow ( BASE , CONSECUTIVE ) ] ; ways [ 0 ] [ 0 ] = BigInteger . ONE ; for ( int prefix = 1 ; prefix < ways [ 0 ] . length ; prefix ++ ) ways [ 0 ] [ prefix ] = BigInteger . ZERO ; for ( int digits = 1 ; digits < ways . length ; digits ++ ) { for ( int prefix = 0 ; prefix < ways [ digits ] . length ; prefix ++ ) { BigInteger sum = BigInteger . ZERO ; if ( digitSum ( prefix ) <= MAX_SUM ) { for ( int nextDigit = 0 ; nextDigit < BASE ; nextDigit ++ ) sum = sum . add ( ways [ digits - 1 ] [ prefix % Library . pow ( BASE , CONSECUTIVE - 1 ) * BASE + nextDigit ] ) ; } ways [ digits ] [ prefix ] = sum ; } } return ways [ DIGITS + CONSECUTIVE ] [ 0 ] . subtract ( ways [ DIGITS + CONSECUTIVE - 1 ] [ 0 ] ) . toString ( ) ; } private static int digitSum ( int n ) { int sum = 0 ; for ( ; n != 0 ; n \/= 10 ) sum += n % 10 ; return sum ; } }"],"bleu":0.16085004720759996,"rouge_l":0.37065473386716913}
{"id":1661,"predictions":["import java . util . * ; import java . lang . * ; import java . io . * ; public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } public static void main ( String [ ] args ) {"],"references":["import java . math . BigInteger ; public final class p401 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p401 ( ) . run ( ) ) ; } private static final long LIMIT = 1000000000000000L ; private static final long MODULUS = Library . pow ( 10 , 9 ) ; public String run ( ) { int splitCount = ( int ) Library . sqrt ( LIMIT ) ; splitCount = Math . max ( splitCount \/ 3 , 1 ) ; int splitAt = ( int ) ( LIMIT \/ ( splitCount + 1 ) ) ; long sum = 0 ; for ( int i = 1 ; i <= splitAt ; i ++ ) { long count = LIMIT \/ i % MODULUS ; long term = ( long ) i * i % MODULUS ; term = term * count % MODULUS ; sum = ( sum + term ) % MODULUS ; } for ( int i = splitCount ; i >= 1 ; i -- ) { long start = LIMIT \/ ( i + 1 ) ; long end = LIMIT \/ i ; long sumSquares = sumSquaresMod ( end ) - sumSquaresMod ( start ) ; sumSquares = ( sumSquares + MODULUS ) % MODULUS ; sum = ( sum + i * sumSquares % MODULUS ) % MODULUS ; } return Long . toString ( sum ) ; } private static final BigInteger MODULUS_BI = BigInteger . valueOf ( MODULUS ) ; private static final BigInteger SIX_BI = BigInteger . valueOf ( 6 ) ; private static long sumSquaresMod ( long n ) { BigInteger x = BigInteger . valueOf ( n ) ; BigInteger y = x . multiply ( x . add ( BigInteger . ONE ) ) ; y = y . multiply ( x . shiftLeft ( 1 ) . add ( BigInteger . ONE ) ) ; y = y . divide ( SIX_BI ) ; y = y . mod ( MODULUS_BI ) ; return y . longValue ( ) ; } }"],"bleu":0.08322284663545824,"rouge_l":0.2946536392578768}
{"id":1662,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( n % i == 0 ) { sum += n \/ i ; } else { sum += n \/ i ; } } return sum ; } public static void main ( String [ ] args ) { int n = 10 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["public final class p027 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p027 ( ) . run ( ) ) ; } public String run ( ) { int bestNum = 0 ; int bestA = 0 ; int bestB = 0 ; for ( int a = - 1000 ; a <= 1000 ; a ++ ) { for ( int b = - 1000 ; b <= 1000 ; b ++ ) { int num = numberOfConsecutivePrimesGenerated ( a , b ) ; if ( num > bestNum ) { bestNum = num ; bestA = a ; bestB = b ; } } } return Integer . toString ( bestA * bestB ) ; } private static int numberOfConsecutivePrimesGenerated ( int a , int b ) { for ( int i = 0 ; ; i ++ ) { int n = i * i + i * a + b ; if ( n < 0 || ! Library . isPrime ( n ) ) return i ; } } }"],"bleu":0.2266472252817661,"rouge_l":0.3036675810220462}
{"id":1663,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int n ) { for ( int i = 1 ; i <= n ; i ++ ) if ( n % i == 0 ) return false ; return true ; } static boolean isPrime ( int n ) { if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; return true ; } public static void main ( String [ ] args ) { int n = 10 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["public final class p249 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p249 ( ) . run ( ) ) ; } private static final int LIMIT = 5000 ; private static final long MODULUS = 10000000000000000L ; public String run ( ) { boolean [ ] isPrime = Library . listPrimality ( LIMIT * LIMIT \/ 2 ) ; long [ ] numSubsets = new long [ LIMIT * LIMIT \/ 2 ] ; numSubsets [ 0 ] = 1 ; int maxSum = 0 ; for ( int i = 0 ; i < LIMIT ; i ++ ) { if ( ! isPrime [ i ] ) continue ; maxSum += i ; for ( int j = maxSum ; j >= i ; j -- ) { long temp = numSubsets [ j ] + numSubsets [ j - i ] ; if ( temp < MODULUS ) numSubsets [ j ] = temp ; else numSubsets [ j ] = temp - MODULUS ; } } long sum = 0 ; for ( int i = 0 ; i < numSubsets . length ; i ++ ) { if ( isPrime [ i ] ) sum = ( sum + numSubsets [ i ] ) % MODULUS ; } return Long . toString ( sum ) ; } }"],"bleu":0.14770987864088683,"rouge_l":0.26559531348955034}
{"id":1664,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 10 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["public final class p265 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p265 ( ) . run ( ) ) ; } private static final int N = 5 ; private static final int TWO_POW_N = 1 << N ; public String run ( ) { long sum = 0 ; int start = ( 1 << ( TWO_POW_N - N - 1 ) ) + 1 ; int end = 1 << ( TWO_POW_N - N ) ; for ( int i = start ; i < end ; i += 2 ) { if ( checkArrangement ( i ) ) sum += i ; } return Long . toString ( sum ) ; } private static final int MASK = TWO_POW_N - 1 ; private static final int FULL_SET = ( int ) ( 1L << TWO_POW_N ) - 1 ; private static boolean checkArrangement ( int digits ) { int seen = 0 ; long temp = ( digits & 0xFFFFFFFFL ) | ( ( digits & 0xFFFFFFFFL ) << TWO_POW_N ) ; for ( int i = 0 ; i < TWO_POW_N ; i ++ ) seen |= 1 << ( ( int ) ( temp >>> i ) & MASK ) ; return seen == FULL_SET ; } }"],"bleu":0.12058000896521924,"rouge_l":0.2469058924262474}
{"id":1665,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return true ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; if ( isPrime ( n \/ 2 ) ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 3 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . Arrays ; public final class p179 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p179 ( ) . run ( ) ) ; } private static final int LIMIT = Library . pow ( 10 , 7 ) ; public String run ( ) { int [ ] numDivisors = new int [ LIMIT + 1 ] ; Arrays . fill ( numDivisors , 2 ) ; for ( int i = 2 ; i < numDivisors . length ; i ++ ) { for ( int j = i * 2 ; j < numDivisors . length ; j += i ) numDivisors [ j ] ++ ; } int count = 0 ; for ( int i = 2 ; i < numDivisors . length - 1 ; i ++ ) { if ( numDivisors [ i ] == numDivisors [ i + 1 ] ) count ++ ; } return Integer . toString ( count ) ; } }"],"bleu":0.1113153160337856,"rouge_l":0.26748420661464134}
{"id":1666,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int t = 1 ;"],"references":["public final class p018 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p018 ( ) . run ( ) ) ; } public String run ( ) { for ( int i = triangle . length - 2 ; i >= 0 ; i -- ) { for ( int j = 0 ; j < triangle [ i ] . length ; j ++ ) triangle [ i ] [ j ] += Math . max ( triangle [ i + 1 ] [ j ] , triangle [ i + 1 ] [ j + 1 ] ) ; } return Integer . toString ( triangle [ 0 ] [ 0 ] ) ; } private int [ ] [ ] triangle = { { 75 } , { 95 , 64 } , { 17 , 47 , 82 } , { 18 , 35 , 87 , 10 } , { 20 , 4 , 82 , 47 , 65 } , { 19 , 1 , 23 , 75 , 3 , 34 } , { 88 , 2 , 77 , 73 , 7 , 63 , 67 } , { 99 , 65 , 4 , 28 , 6 , 16 , 70 , 92 } , { 41 , 41 , 26 , 56 , 83 , 40 , 80 , 70 , 33 } , { 41 , 48 , 72 , 33 , 47 , 32 , 37 , 16 , 94 , 29 } , { 53 , 71 , 44 , 65 , 25 , 43 , 91 , 52 , 97 , 51 , 14 } , { 70 , 11 , 33 , 28 , 77 , 73 , 17 , 78 , 39 , 68 , 17 , 57 } , { 91 , 71 , 52 , 38 , 17 , 14 , 91 , 43 , 58 , 50 , 27 , 29 , 48 } , { 63 , 66 , 4 , 68 , 89 , 53 , 67 , 30 , 73 , 16 , 69 , 87 , 40 , 31 } , { 4 , 62 , 98 , 27 , 23 , 9 , 70 , 98 , 73 , 93 , 38 , 53 , 60 , 4 , 23 } , } ; }"],"bleu":0.000550634594987025,"rouge_l":0.10522424839822572}
{"id":1667,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int N = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; System . out . println ( N * M ) ; } }"],"references":["public final class p015 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p015 ( ) . run ( ) ) ; } public String run ( ) { return Library . binomial ( 40 , 20 ) . toString ( ) ; } }"],"bleu":0.22519278615588628,"rouge_l":0.45562390158172233}
{"id":1668,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int N = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { st = new StringTokenizer ( br . readLine ( ) ) ; a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < N ; i ++ ) { a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } System . out . println ( a [ N - 1 ] ) ; } }"],"references":["import java . util . HashSet ; import java . util . Set ; public final class p087 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p087 ( ) . run ( ) ) ; } private static final int LIMIT = 50000000 ; public String run ( ) { int [ ] primes = Library . listPrimes ( Library . sqrt ( LIMIT ) ) ; Set < Integer > sums = new HashSet < > ( ) ; sums . add ( 0 ) ; for ( int i = 2 ; i <= 4 ; i ++ ) { Set < Integer > newsums = new HashSet < > ( ) ; for ( int p : primes ) { long q = 1 ; for ( int j = 0 ; j < i ; j ++ ) q *= p ; if ( q > LIMIT ) break ; int r = ( int ) q ; for ( int x : sums ) { if ( x + r <= LIMIT ) newsums . add ( x + r ) ; } } sums = newsums ; } return Integer . toString ( sums . size ( ) ) ; } }"],"bleu":0.2390233359999451,"rouge_l":0.451282858492051}
{"id":1669,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["import java . math . BigInteger ; public final class p048 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p048 ( ) . run ( ) ) ; } public String run ( ) { BigInteger modulus = BigInteger . TEN . pow ( 10 ) ; BigInteger sum = BigInteger . ZERO ; for ( int i = 1 ; i <= 1000 ; i ++ ) sum = sum . add ( BigInteger . valueOf ( i ) . modPow ( BigInteger . valueOf ( i ) , modulus ) ) ; return sum . mod ( modulus ) . toString ( ) ; } }"],"bleu":0.26456446905580894,"rouge_l":0.39159043492216333}
{"id":1670,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { System . out . print ( a [ i ] + \" \" ) ; } System . out . println ( ) ; } }"],"references":["public final class p069 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p069 ( ) . run ( ) ) ; } private static final int LIMIT = Library . pow ( 10 , 6 ) ; public String run ( ) { int maxNumer = 0 ; int maxDenom = 1 ; int [ ] totients = Library . listTotients ( LIMIT ) ; for ( int n = 1 ; n < totients . length ; n ++ ) { if ( ( long ) n * maxDenom > ( long ) maxNumer * totients [ n ] ) { maxNumer = n ; maxDenom = totients [ n ] ; } } return Integer . toString ( maxNumer ) ; } }"],"bleu":0.2847118469939434,"rouge_l":0.45195984703632885}
{"id":1671,"predictions":["import java . io . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 10 == 0 ) return false ; if ( n % 10 == 0 ) return false ; if ( n % 10 != 0 ) return false ; if ( n % 10 != 0 ) return false ; if ( n % 10 != 0 ) return false ; if ( n % 10 != 0 ) return false ; if ( n % 10 != 0 ) return false ; if ( n % 10 != 0 ) return false ; if ( n % 10 != 0 ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 10 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["public final class p381 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p381 ( ) . run ( ) ) ; } public String run ( ) { boolean [ ] isPrime = Library . listPrimality ( Library . pow ( 10 , 8 ) ) ; long sum = 0 ; for ( int i = 5 ; i < isPrime . length ; i ++ ) { if ( isPrime [ i ] ) sum += s ( i ) ; } return Long . toString ( sum ) ; } private static int s ( int p ) { return ( int ) ( ( long ) ( p - 3 ) * Library . reciprocalMod ( 8 % p , p ) % p ) ; } }"],"bleu":0.1659633993233991,"rouge_l":0.3035468501852832}
{"id":1672,"predictions":["import java . io . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 10 == 0 ) return false ; if ( n % 10 == 0 ) return false ; if ( n % 10 == 0 ) return false ; if ( n % 10 == 0 ) return false ; if ( n % 10 == 0 ) return false ; if ( n % 10 == 0 ) return false ; if ( n % 10 == 0 ) return false ; if ( n % 10 == 0 ) return false ; if ( isPrime ( n \/ 10 ) ) return false ; if ( isPrime ( n \/ 10 ) ) return false ; if ( isPrime ( n \/ 10 ) ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 10 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["public final class p129 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p129 ( ) . run ( ) ) ; } private static final int LIMIT = Library . pow ( 10 , 6 ) ; public String run ( ) { for ( int n = LIMIT ; ; n ++ ) { if ( findLeastDivisibleRepunit ( n ) > LIMIT ) return Integer . toString ( n ) ; } } private static int findLeastDivisibleRepunit ( int n ) { if ( n % 2 == 0 || n % 5 == 0 ) return 0 ; if ( n > Integer . MAX_VALUE \/ 10 ) throw new IllegalArgumentException ( \" Arithmetic ▁ overflow \" ) ; int sum = 1 ; int pow = 1 ; int k = 1 ; while ( sum % n != 0 ) { k ++ ; pow = pow * 10 % n ; sum = ( sum + pow ) % n ; } return k ; } }"],"bleu":0.22480822663457703,"rouge_l":0.33918331885317116}
{"id":1673,"predictions":["import java . io . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 10 == 0 ) return false ; if ( n % 10 == 0 ) return false ; if ( n % 10 == 0 ) return false ; if ( isPrime ( n \/ 10 ) ) return false ; if ( isPrime ( n \/ 10 ) ) return false ; if ( isPrime ( n \/ 10 ) ) return false ; if ( isPrime ( n \/ 10 ) ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 10 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . Arrays ; public final class p032 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p032 ( ) . run ( ) ) ; } public String run ( ) { int sum = 0 ; for ( int i = 1 ; i < 10000 ; i ++ ) { if ( hasPandigitalProduct ( i ) ) sum += i ; } return Integer . toString ( sum ) ; } private static boolean hasPandigitalProduct ( int n ) { for ( int i = 1 ; i <= n ; i ++ ) { if ( n % i == 0 && isPandigital ( \" \" + n + i + n \/ i ) ) return true ; } return false ; } private static boolean isPandigital ( String s ) { if ( s . length ( ) != 9 ) return false ; char [ ] temp = s . toCharArray ( ) ; Arrays . sort ( temp ) ; return new String ( temp ) . equals ( \"123456789\" ) ; } }"],"bleu":0.20456003835879547,"rouge_l":0.3704794331462225}
{"id":1674,"predictions":["import java . util . * ; class GFG { static boolean isPrime ( int n ) { if ( n == 0 ) return false ; if ( n == 1 ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 10 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . HashSet ; import java . util . Set ; public final class p347 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p347 ( ) . run ( ) ) ; } private static final int LIMIT = 10000000 ; public String run ( ) { Set < Integer > possible = new HashSet < > ( ) ; int [ ] primes = Library . listPrimes ( LIMIT \/ 2 ) ; for ( int i = 0 , end = Library . sqrt ( LIMIT ) ; i < primes . length ; i ++ ) { int p = primes [ i ] ; if ( p > end ) break ; for ( int j = i + 1 ; j < primes . length ; j ++ ) { int q = primes [ j ] ; int lcm = p * q ; if ( lcm > LIMIT ) break ; int multLimit = LIMIT \/ lcm ; int multiplier = 1 ; while ( multiplier * p <= multLimit ) multiplier *= p ; int maxMult = multiplier ; while ( multiplier % p == 0 ) { multiplier \/= p ; while ( multiplier * q <= multLimit ) multiplier *= q ; maxMult = Math . max ( multiplier , maxMult ) ; } possible . add ( maxMult * lcm ) ; } } long sum = 0 ; for ( int x : possible ) sum += x ; return Long . toString ( sum ) ; } }"],"bleu":0.11901850571465229,"rouge_l":0.2758447431227233}
{"id":1675,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) return false ; if ( n % 3 == 0 ) System . out . out . println ( \" Yes \" No \" ) ; else System . out . println ( \" No"],"references":["public final class p134 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p134 ( ) . run ( ) ) ; } public String run ( ) { long sum = 0 ; int [ ] primes = Library . listPrimes ( 2000000 ) ; for ( int i = 2 ; primes [ i ] <= 1000000 ; i ++ ) { int p = primes [ i ] ; int q = primes [ i + 1 ] ; int k = 1 ; while ( k < p ) k *= 10 ; long m = ( long ) ( q - p ) * Library . reciprocalMod ( k % q , q ) % q ; sum += m * k + p ; } return Long . toString ( sum ) ; } }"],"bleu":0.020359024872097124,"rouge_l":0.15306975966096026}
{"id":1676,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int b [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { for ( int k = 0 ; k < n ; k ++ ) { for ( int k = 0 ; k < n ; k ++ ) { for ( int l = 0 ; l < n ; l ++ ) { for ( int l = 0 ; l < n ; l ++ ) { for ( int l = 0 ; l < n ; l ++ ) { if ( a [ l ] < b [ l ] && b [ l ] < b [ l ] ) { b [ l ] ++ ; } } } } } } out . println ( a [ n ] ) ; } out . close ( ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) throws IOException { return br . readLine ( ) ; } } }"],"references":["class Solution { public int [ ] [ ] floodFill ( int [ ] [ ] image , int sr , int sc , int newColor ) { Queue < Node > queue = new LinkedList < Node > ( ) ; int color = image [ sr ] [ sc ] ; if ( color == newColor ) return image ; queue . add ( new Node ( sr , sc ) ) ; while ( ! queue . isEmpty ( ) ) { Node curr = queue . remove ( ) ; int r = curr . r , c = curr . c ; if ( image [ r ] [ c ] == color ) { image [ r ] [ c ] = newColor ; if ( r - 1 >= 0 ) queue . add ( new Node ( r - 1 , c ) ) ; if ( r + 1 < image . length ) queue . add ( new Node ( r + 1 , c ) ) ; if ( c - 1 >= 0 ) queue . add ( new Node ( r , c - 1 ) ) ; if ( c + 1 < image [ 0 ] . length ) queue . add ( new Node ( r , c + 1 ) ) ; } } return image ; } class Node { int r ; int c ; public Node ( int r , int c ) { this . r = r ; this . c = c ; } } }"],"bleu":0.06416062411768013,"rouge_l":0.2924501954943214}
{"id":1677,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { for ( int k = 0 ; k < n ; k ++ ) { for ( int l = 0 ; l < n ; l ++ ) { if ( a [ i ] > a [ j ] ) { a [ i ] = a [ j ] ; } } } } out . println ( a [ n - 1 ] ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["public class Solution { public int thirdMax ( int [ ] nums ) { PriorityQueue < Integer > pq = new PriorityQueue < > ( 3 ) ; Set < Integer > set = new HashSet < > ( ) ; for ( int i : nums ) { if ( set . contains ( i ) ) continue ; pq . offer ( i ) ; set . add ( i ) ; if ( pq . size ( ) > 3 ) set . remove ( pq . poll ( ) ) ; } while ( pq . size ( ) < 3 && pq . size ( ) > 1 ) { pq . poll ( ) ; } return pq . peek ( ) ; } }"],"bleu":0.06937624674907351,"rouge_l":0.302595814079913}
{"id":1678,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int N = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { st = new StringTokenizer ( br . readLine ( ) ) ; a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int count = 0 ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < N ; j ++ ) { if ( a [ i ] > a [ j ] ) { count ++ ; } } } System . out . println ( count ) ; } }"],"references":["class Solution { public String licenseKeyFormatting ( String s , int k ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = s . length ( ) - 1 ; i >= 0 ; i -- ) if ( s . charAt ( i ) != ' - ' ) sb . append ( sb . length ( ) % ( k + 1 ) == k ? ' - ' : \" \" ) . append ( s . charAt ( i ) ) ; return sb . reverse ( ) . toString ( ) . toUpperCase ( ) ; } }"],"bleu":0.07405545769632293,"rouge_l":0.33520025361935957}
{"id":1679,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; out . println ( Math . min ( a , b ) ) ; out . close ( ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["class RecentCounter { Queue < Integer > q ; public RecentCounter ( ) { q = new LinkedList ( ) ; } public int ping ( int t ) { q . add ( t ) ; while ( q . peek ( ) < t - 3000 ) q . poll ( ) ; return q . size ( ) ; } }"],"bleu":0.044147172400397665,"rouge_l":0.23414010022390444}
{"id":1680,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int t = 1 ;"],"references":["class Solution { public int uniqueMorseRepresentations ( String [ ] words ) { String [ ] MORSE = new String [ ] { \" . - \" , \" - . . . \" , \" - . - . \" , \" - . . \" , \" . \" , \" . . - . \" , \" - - . \" , \" . . . . \" , \" . . \" , \" . - - - \" , \" - . - \" , \" . - . . \" , \" - - \" , \" - . \" , \" - - - \" , \" . - - . \" , \" - - . - \" , \" . - . \" , \" . . . \" , \" - \" , \" . . - \" , \" . . . - \" , \" . - - \" , \" - . . - \" , \" - . - - \" , \" - - . . \" } ; Set < String > seen = new HashSet ( ) ; for ( String word : words ) { StringBuilder code = new StringBuilder ( ) ; for ( char c : word . toCharArray ( ) ) code . append ( MORSE [ c - ' a ' ] ) ; seen . add ( code . toString ( ) ) ; } return seen . size ( ) ; } }"],"bleu":0.00394831672756388,"rouge_l":0.1317123544874202}
{"id":1681,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans += a [ i ] ; } System . out . println ( ans ) ; } }"],"references":["class Solution { public int [ ] runningSum ( int [ ] nums ) { if ( nums . length <= 1 ) return nums ; for ( int i = 1 ; i < nums . length ; i ++ ) nums [ i ] += nums [ i - 1 ] ; return nums ; } }"],"bleu":0.12871833927556334,"rouge_l":0.4187095508923318}
{"id":1682,"predictions":["import java . io . * ; import java . util . * ; import java . lang . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) throws java . lang . Exception { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int N = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ M ] ; int [ ] b = new int [ M ] ; for ( int i = 0 ; i < M ; i ++ ) { a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < M ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int ans = 0 ; for ( int i = 0 ; i < M ; i ++ ) { for ( int j = 0 ; j < M ; j ++ ) { for ( int k = 0 ; k < M ; k ++ ) { for ( int k = 0 ; k < M ; k ++ ) { if ( a [ i ] > b [ j ] ) { ans ++ ; } } } } System . out . println ( ans ) ; } }"],"references":["class MyHashMap { final ListNode [ ] nodes = new ListNode [ 10000 ] ; public void put ( int key , int value ) { int i = idx ( key ) ; if ( nodes [ i ] == null ) nodes [ i ] = new ListNode ( - 1 , - 1 ) ; ListNode prev = find ( nodes [ i ] , key ) ; if ( prev . next == null ) prev . next = new ListNode ( key , value ) ; else prev . next . val = value ; } public int get ( int key ) { int i = idx ( key ) ; if ( nodes [ i ] == null ) return - 1 ; ListNode node = find ( nodes [ i ] , key ) ; return node . next == null ? - 1 : node . next . val ; } public void remove ( int key ) { int i = idx ( key ) ; if ( nodes [ i ] == null ) return ; ListNode prev = find ( nodes [ i ] , key ) ; if ( prev . next == null ) return ; prev . next = prev . next . next ; } int idx ( int key ) { return Integer . hashCode ( key ) % nodes . length ; } ListNode find ( ListNode bucket , int key ) { ListNode node = bucket , prev = null ; while ( node != null && node . key != key ) { prev = node ; node = node . next ; } return prev ; } class ListNode { int key , val ; ListNode next ; ListNode ( int key , int val ) { this . key = key ; this . val = val ; } } }"],"bleu":0.07317264532987329,"rouge_l":0.28077532859407767}
{"id":1683,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int N = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { st = new StringTokenizer ( br . readLine ( ) ) ; a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int [ ] b = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < N ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < N ; j ++ ) { System . out . print ( b [ i ] + \" \" ) ; } System . out . println ( ) ; } }"],"references":["class MaxStack { TreeMap < Integer , List < Node > > map ; DoubleLinkedList dll ; public MaxStack ( ) { map = new TreeMap ( ) ; dll = new DoubleLinkedList ( ) ; } public void push ( int x ) { Node node = dll . add ( x ) ; if ( ! map . containsKey ( x ) ) map . put ( x , new ArrayList < Node > ( ) ) ; map . get ( x ) . add ( node ) ; } public int pop ( ) { int val = dll . pop ( ) ; List < Node > L = map . get ( val ) ; L . remove ( L . size ( ) - 1 ) ; if ( L . isEmpty ( ) ) map . remove ( val ) ; return val ; } public int top ( ) { return dll . peek ( ) ; } public int peekMax ( ) { return map . lastKey ( ) ; } public int popMax ( ) { int max = peekMax ( ) ; List < Node > L = map . get ( max ) ; Node node = L . remove ( L . size ( ) - 1 ) ; dll . unlink ( node ) ; if ( L . isEmpty ( ) ) map . remove ( max ) ; return max ; } } class DoubleLinkedList { Node head , tail ; public DoubleLinkedList ( ) { head = new Node ( 0 ) ; tail = new Node ( 0 ) ; head . next = tail ; tail . prev = head ; } public Node add ( int val ) { Node x = new Node ( val ) ; x . next = tail ; x . prev = tail . prev ; tail . prev = tail . prev . next = x ; return x ; } public int pop ( ) { return unlink ( tail . prev ) . val ; } public int peek ( ) { return tail . prev . val ; } public Node unlink ( Node node ) { node . prev . next = node . next ; node . next . prev = node . prev ; return node ; } } class Node { int val ; Node prev , next ; public Node ( int v ) { val = v ; } }"],"bleu":0.044914891373426774,"rouge_l":0.283056268865162}
{"id":1684,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int count ( int a [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( a [ i ] > a [ j ] ) count ++ ; } } return count ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = a . length ; System . out . println ( count ( a , n ) ) ; } }"],"references":["class Solution { public boolean canReorderDoubled ( int [ ] A ) { HashMap < Integer , Integer > valueMap = new HashMap < > ( ) ; A = Arrays . stream ( A ) . boxed ( ) . sorted ( ( a , b ) -> Integer . compare ( Math . abs ( a ) , Math . abs ( b ) ) ) . mapToInt ( i -> i ) . toArray ( ) ; for ( int n : A ) valueMap . put ( n , valueMap . getOrDefault ( n , 0 ) + 1 ) ; for ( int n : A ) { if ( valueMap . get ( n ) <= 0 ) continue ; if ( valueMap . containsKey ( 2 * n ) && valueMap . get ( 2 * n ) > 0 ) { valueMap . put ( n , valueMap . get ( n ) - 1 ) ; valueMap . put ( 2 * n , valueMap . get ( 2 * n ) - 1 ) ; } else { return false ; } } return true ; } }"],"bleu":0.08263922761909773,"rouge_l":0.23699421965317916}
{"id":1685,"predictions":["import java . io . * ; class GFG { static int count ( int a [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % 2 == 0 ) count ++ ; else if ( a [ i ] % 2 == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = a . length ; System . out . println ( count ( a , n ) ) ; } }"],"references":["class Solution { public int repeatedNTimes ( int [ ] A ) { HashMap < Integer , Integer > hash = new HashMap < > ( ) ; int ans = A [ 0 ] ; for ( int n : A ) { int count = hash . getOrDefault ( n , 0 ) + 1 ; hash . put ( n , count ) ; if ( count >= hash . get ( ans ) ) ans = n ; } return ans ; } }"],"bleu":0.1146367564197637,"rouge_l":0.3352701005025125}
{"id":1686,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans += a [ i ] ; } out . println ( ans ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . util . Map ; class Solution { public int [ ] smallerNumbersThanCurrent ( int [ ] nums ) { int [ ] countList = new int [ 101 ] ; int [ ] res = new int [ nums . length ] ; for ( int i = 0 ; i < nums . length ; i ++ ) countList [ nums [ i ] ] ++ ; for ( int i = 1 ; i < 101 ; i ++ ) countList [ i ] += countList [ i - 1 ] ; for ( int i = 0 ; i < nums . length ; i ++ ) { if ( nums [ i ] == 0 ) res [ i ] = 0 ; else res [ i ] = countList [ nums [ i ] - 1 ] ; } return res ; } }"],"bleu":0.14257894121096132,"rouge_l":0.36037989829494466}
{"id":1687,"predictions":["import java . io . * ; import java . util . * ; class GFG { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = sc . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( a [ i ] + \" \" ) ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( a [ i ] + \" \" ) ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( a [ i ] + \" \" ) ; } }"],"references":["class Solution { HashMap < Character , Integer > orderMap = new HashMap < > ( ) ; public boolean isAlienSorted ( String [ ] words , String order ) { for ( int i = 0 ; i < order . length ( ) ; i ++ ) { orderMap . put ( order . charAt ( i ) , i ) ; } for ( int i = 0 ; i < words . length - 1 ; i ++ ) { if ( cmp_alien ( words [ i ] , words [ i + 1 ] ) > 0 ) return false ; } return true ; } private int cmp_alien ( String a , String b ) { int ls = a . length ( ) < b . length ( ) ? a . length ( ) : b . length ( ) ; int pos = 0 ; while ( pos < ls ) { if ( orderMap . get ( a . charAt ( pos ) ) != orderMap . get ( b . charAt ( pos ) ) ) return orderMap . get ( a . charAt ( pos ) ) - orderMap . get ( b . charAt ( pos ) ) ; pos += 1 ; } return a . length ( ) <= b . length ( ) ? - 1 : 1 ; } }"],"bleu":0.1535823746725631,"rouge_l":0.33685929843664936}
{"id":1688,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int sum ( int a [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += a [ i ] ; for ( int i = 0 ; i < n ; i ++ ) sum += a [ i ] ; return sum ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 , 3 , 3 } ; int n = a . length ; System . out . println ( sum ( a , n ) ) ; } }"],"references":["class Solution { public List < Integer > findDisappearedNumbers ( int [ ] nums ) { List < Integer > ret = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < nums . length ; i ++ ) { int val = Math . abs ( nums [ i ] ) - 1 ; if ( nums [ val ] > 0 ) { nums [ val ] = - nums [ val ] ; } } for ( int i = 0 ; i < nums . length ; i ++ ) { if ( nums [ i ] > 0 ) { ret . add ( i + 1 ) ; } } return ret ; } }"],"bleu":0.2557707120952761,"rouge_l":0.3909273686855994}
{"id":1689,"predictions":["import java . util . * ; class GFG { static boolean isVowel ( String str ) { int n = str . length ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( str . charAt ( i ) == str . charAt ( i ) ) count ++ ; } return count ; } public static void main ( String [ ] args ) { String str = \" geeksforgeeksforgeeks \" ; if ( isVowel ( str ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import com . sun . corba . se . spi . orbutil . fsm . Guard . Result ; class Solution { public String toHex ( int num ) { String hex_map = \"0123456789abcdef \" ; if ( num == 0 ) return \"0\" ; String res = \" \" ; while ( num != 0 && res . length ( ) < 8 ) { res = hex_map . charAt ( num & 15 ) + res ; num = num >> 4 ; } return res ; } }"],"bleu":0.10756021497246931,"rouge_l":0.3194730995080146}
{"id":1690,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans += a [ i ] ; } out . println ( ans ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["class Solution { public int [ ] kWeakestRows ( int [ ] [ ] mat , int k ) { List < Integer > res = new ArrayList < > ( ) ; int col = 0 ; boolean flag = true ; while ( col < mat [ 0 ] . length && flag ) { for ( int i = 0 ; i < mat . length ; i ++ ) { if ( res . contains ( i ) ) continue ; if ( mat [ i ] [ col ] == 0 ) res . add ( i ) ; if ( res . size ( ) == k ) { flag = false ; break ; } } col += 1 ; } if ( flag ) { for ( int i = 0 ; i < mat . length ; i ++ ) { if ( res . contains ( i ) ) continue ; res . add ( i ) ; if ( res . size ( ) == k ) break ; } } int [ ] ret = new int [ k ] ; for ( int i = 0 ; i < k ; i ++ ) ret [ i ] = res . get ( i ) ; return ret ; } }"],"bleu":0.19089300823359578,"rouge_l":0.3607445219123506}
{"id":1691,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isDivisible ( int a , int b ) { if ( a % b == 0 ) return false ; if ( b % a == 0 ) return false ; if ( a % b == 0 ) return false ; if ( a % b == 0 ) return false ; if ( a % b == 0 ) return false ; return false ; } public static void main ( String [ ] args ) { int a = 10 , b = 10 ; if ( isDivisible ( a , b ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class Solution { public int [ ] [ ] flipAndInvertImage ( int [ ] [ ] A ) { int C = A [ 0 ] . length ; for ( int [ ] row : A ) for ( int i = 0 ; i < ( C + 1 ) \/ 2 ; ++ i ) { int tmp = row [ i ] ^ 1 ; row [ i ] = row [ C - 1 - i ] ^ 1 ; row [ C - 1 - i ] = tmp ; } return A ; } }"],"bleu":0.03946347990714539,"rouge_l":0.22036959844379597}
{"id":1692,"predictions":["import java . io . * ; import java . util . * ; class GFG { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; System . out . println ( Math . min ( Math . abs ( a - b ) , Math . abs ( b - c ) ) ) ; } }"],"references":["class Solution { public int [ ] sortedSquares ( int [ ] A ) { int pos = 0 ; int [ ] res = new int [ A . length ] ; int curr = 0 ; while ( pos < A . length && A [ pos ] < 0 ) pos ++ ; int npos = pos - 1 ; while ( pos < A . length && npos >= 0 ) { if ( A [ pos ] * A [ pos ] < A [ npos ] * A [ npos ] ) { res [ curr ++ ] = A [ pos ] * A [ pos ] ; pos ++ ; } else { res [ curr ++ ] = A [ npos ] * A [ npos ] ; npos -- ; } } while ( npos >= 0 ) { res [ curr ++ ] = A [ npos ] * A [ npos ] ; npos -- ; } while ( pos < A . length ) { res [ curr ++ ] = A [ pos ] * A [ pos ] ; pos ++ ; } return res ; } }"],"bleu":0.021085014151164837,"rouge_l":0.2138635680657117}
{"id":1693,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String a = sc . next ( ) ; String b = sc . next ( ) ; System . out . println ( a . charAt ( 0 ) == b . charAt ( 1 ) ? \" Yes \" : \" No \" ) ; } }"],"references":["class Solution { public String defangIPaddr ( String address ) { return address . replace ( \" . \" , \" [ . ] \" ) ; } }"],"bleu":0.08411685556022677,"rouge_l":0.3351648351648352}
{"id":1694,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i < d ; i ++ ) { if ( d % d == 0 ) { ans += d \/ d ; } else { ans += d \/ d ; } } out . println ( ans ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["class Solution { public TreeNode searchBST ( TreeNode root , int val ) { while ( root != null && root . val != val ) { root = val < root . val ? root . left : root . right ; } return root ; } }"],"bleu":0.021202721281423725,"rouge_l":0.13871860787027882}
{"id":1695,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int N = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ M ] ; for ( int i = 0 ; i < M ; i ++ ) { st = new StringTokenizer ( br . readLine ( ) ) ; a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int [ ] b = new int [ M ] ; for ( int i = 0 ; i < M ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < M ; i ++ ) { b [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < M ; i ++ ) { for ( int j = 0 ; j < M ; j ++ ) { System . out . print ( b [ i ] + \" \" ) ; } System . out . println ( ) ; } }"],"references":["class Solution { public List < String > ipToCIDR ( String ip , int n ) { long start = ipToLong ( ip ) ; List < String > ans = new ArrayList ( ) ; while ( n > 0 ) { int mask = Math . max ( 33 - bitLength ( Long . lowestOneBit ( start ) ) , 33 - bitLength ( n ) ) ; ans . add ( longToIP ( start ) + \" \/ \" + mask ) ; start += 1 << ( 32 - mask ) ; n -= 1 << ( 32 - mask ) ; } return ans ; } private long ipToLong ( String ip ) { long ans = 0 ; for ( String x : ip . split ( \" \\\\ . \" ) ) { ans = 256 * ans + Integer . valueOf ( x ) ; } return ans ; } private String longToIP ( long x ) { return String . format ( \" % s . % s . % s . % s \" , x >> 24 , ( x >> 16 ) % 256 , ( x >> 8 ) % 256 , x % 256 ) ; } private int bitLength ( long x ) { if ( x == 0 ) return 1 ; int ans = 0 ; while ( x > 0 ) { x >>= 1 ; ans ++ ; } return ans ; } }"],"bleu":0.047375546323497005,"rouge_l":0.31079542048792186}
{"id":1696,"predictions":["import java . io . * ; import java . util . * ; class GFG { public static void main ( String [ ] args ) { int a = 5 , b = 5 , c = 5 ; System . out . println ( a + \" \" + b + \" \" + c + \" \" + c + \" , \" + c + \" + c + \" , \" + c + c + \" , \" + c + c + \" , \" + c + c + \" , \" + c + c + c + \" , \" + c + c + \" , \" + c + c + \" , \" + c + c + c + \" , \" + c + c + \" , \" + c + c + c + \" , \" + c + c + \" , \" + c + c + c + \" , \" + c + c + \" , \" + c + c + c + \" \\n \" + c + c + c + \" \\n \" ) ; } }"],"references":["class Solution { int ans ; public int diameterOfBinaryTree ( TreeNode root ) { ans = 1 ; depth ( root ) ; return ans - 1 ; } public int depth ( TreeNode node ) { if ( node == null ) return 0 ; int L = depth ( node . left ) ; int R = depth ( node . right ) ; ans = Math . max ( ans , L + R + 1 ) ; return Math . max ( L , R ) + 1 ; } }"],"bleu":0.02093620671348734,"rouge_l":0.14277355178466938}
{"id":1697,"predictions":["import java . io . * ; class GFG { static boolean isVowel ( int a , int b ) { if ( a == b ) return true ; if ( a == b ) return false ; if ( a == b ) return true ; if ( a == b ) return false ; if ( a == b ) return false ; if ( a == b ) return false ; if ( a == b ) return false ; if ( a == b ) return false ; if ( a == b ) return false ; return false ; return false ; } public static void main ( String [ ] args ) { int a = 12 , b = 12 , c = 12 ; if ( isVowel ( a , b , c ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class Solution { public int findSecondMinimumValue ( TreeNode root ) { if ( root == null ) return - 1 ; Stack < TreeNode > stack = new Stack < TreeNode > ( ) ; int min_val = root . val ; int ans = Integer . MAX_VALUE ; stack . push ( root ) ; while ( ! stack . empty ( ) ) { TreeNode node = stack . pop ( ) ; if ( node == null ) continue ; if ( node . val < ans && node . val > min_val ) { ans = node . val ; } else if ( node . val == min_val ) { stack . push ( node . left ) ; stack . push ( node . right ) ; } } return ans < Integer . MAX_VALUE ? ans : - 1 ; } }"],"bleu":0.07352968292294006,"rouge_l":0.3053498800709145}
{"id":1698,"predictions":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int n ) { if ( n == 0 ) return false ; if ( n % 2 == 0 ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; if ( isPrime ( n ) ) return false ; return false ; } public static void main ( String [ ] args ) { int n = 12 ; if ( isPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class Solution { public ListNode removeNthFromEnd ( ListNode head , int n ) { ListNode slow , fast , curr ; slow = head ; fast = head ; for ( int i = 0 ; i < n ; i ++ ) fast = fast . next ; if ( fast == null ) { head = head . next ; return head ; } while ( fast . next != null ) { fast = fast . next ; slow = slow . next ; } curr = slow . next ; slow . next = curr . next ; return head ; } }"],"bleu":0.06814142433911277,"rouge_l":0.3038280916465063}
