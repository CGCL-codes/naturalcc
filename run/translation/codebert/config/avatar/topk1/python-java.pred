{"id":0,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String a = sc . nextLine ( ) ; int b = sc . nextLine ( ) ; int c = Integer . parseInt ( a + \" \" ) ; int c = Integer . parseInt ( a + \" \" + b ) ; if ( a < b ) { System . out . println ( a ) ; } else { System . out . println ( c ) ; } } }"],"references":["import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; System . out . println ( Math . max ( x , y ) ) ; } }"],"bleu":0.4047425019822262,"rouge_l":0.6689111196614083}
{"id":1,"predictions":["import java . util . * ; import static java . lang . System . * ; public class Main { public static void main ( String [ ] $ ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { Set < Character > set = new HashSet < > ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { set . add ( s . charAt ( i ) ) ; } for ( int i = 0 ; i < s . length ( ) ; i ++ ) { set . add ( s . charAt ( i ) ) ; } System . out . println ( set . size ( ) ) ; } }"],"references":["import java . util . Scanner ; import java . util . TreeSet ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; if ( s . length ( ) == 26 ) { TreeSet < Character > set = new TreeSet < > ( ) ; set . add ( s . charAt ( 25 ) ) ; for ( int i = 24 ; 0 <= i ; i -- ) { if ( set . higher ( s . charAt ( i ) ) != null ) { System . out . println ( s . substring ( 0 , i ) + set . higher ( s . charAt ( i ) ) ) ; return ; } else { set . add ( s . charAt ( i ) ) ; } } System . out . println ( - 1 ) ; } else { for ( int i = ' a ' ; i <= ' z ' ; i ++ ) { if ( s . indexOf ( i ) == - 1 ) { System . out . println ( s + ( char ) i ) ; break ; } } } } }"],"bleu":0.4083044733643153,"rouge_l":0.6072845002023471}
{"id":2,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int t = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int p [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { d [ i ] = sc . nextInt ( ) ; } int p [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = sc . nextInt ( ) ; } int t = 0 ; for ( int i = 0 ; i < n ; i ++ ) { t += Math . min ( t , p [ i ] - t [ i ] ) ; } System . out . println ( t ) ; } }"],"references":["import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int T = sc . nextInt ( ) ; int [ ] pushes = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { pushes [ i ] = sc . nextInt ( ) ; } int sum = 0 ; int till = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( till > pushes [ i ] ) { sum += ( pushes [ i ] - pushes [ i - 1 ] ) ; } else { sum += T ; } till = pushes [ i ] + T ; } System . out . println ( sum ) ; sc . close ( ) ; } }"],"bleu":0.5722898604523292,"rouge_l":0.705876993166287}
{"id":3,"predictions":["import java . io . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int numCases = Integer . parseInt ( br . readLine ( ) ) ; System . out . println ( numCases ) ; } }"],"references":["import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scn = new Scanner ( System . in ) ; int num = scn . nextInt ( ) ; int ans = 0 ; if ( num % 2 == 0 ) { ans = num - 1 ; } else { ans = num + 1 ; } System . out . println ( ans ) ; } }"],"bleu":0.3454856628046963,"rouge_l":0.5982999128160419}
{"id":4,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int K = sc . nextInt ( ) ; long [ ] a = new long [ N + 1 ] ; long [ ] b = new long [ N + 1 ] ; for ( int i = 1 ; i <= N ; i ++ ) { a [ i ] = sc . nextInt ( ) - 1 ; b [ i ] = sc . nextInt ( ) - 1 ; } for ( int i = 1 ; i <= N ; i ++ ) { b [ i ] = sc . nextLong ( ) - 1 ; } long ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { long ans = ( N * ( i - 1 ) + 1 ) \/ 2 ; for ( int j = i - 1 ; j >= 0 ; j -- ) { ans += Math . max ( ans , a [ j ] - b [ i - j ] ) ; } if ( j == 0 ) ans ++ ; System . out . println ( ans ) ; } sc . close ( ) ; } }"],"references":["import java . lang . reflect . Array ; import java . util . * ; public class Main { private void print ( ArrayList < Integer > arrayMid ) { StringBuilder Mid = new StringBuilder ( ) ; for ( int i = 0 ; i < arrayMid . size ( ) ; i ++ ) { Mid . append ( arrayMid . get ( i ) + \" ▁ \" ) ; } System . out . println ( Mid ) ; } private void Even ( int K , int N ) { ArrayList < Integer > arrayMid = new ArrayList < Integer > ( N ) ; arrayMid . add ( 0 , K \/ 2 ) ; for ( int i = 1 ; i < N ; i ++ ) { arrayMid . add ( i , K ) ; } print ( arrayMid ) ; } private void Odd ( int K , int N ) { ArrayList < Integer > arrayMid = new ArrayList < Integer > ( N ) ; for ( int i = 0 ; i < N ; i ++ ) { arrayMid . add ( i , ( K + 1 ) \/ 2 ) ; } for ( int i = 0 ; i < N \/ 2 ; i ++ ) { if ( arrayMid . get ( arrayMid . size ( ) - 1 ) == 1 ) arrayMid . remove ( arrayMid . size ( ) - 1 ) ; else { arrayMid . set ( ( arrayMid . size ( ) - 1 ) , arrayMid . get ( arrayMid . size ( ) - 1 ) - 1 ) ; for ( int j = arrayMid . size ( ) ; j < N ; j ++ ) arrayMid . add ( j , K ) ; } } print ( arrayMid ) ; } private void Judge ( int K , int N ) { if ( K % 2 == 0 ) Even ( K , N ) ; else Odd ( K , N ) ; } public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int [ ] in = new int [ 2 ] ; for ( int i = 0 ; i < 2 ; i ++ ) { in [ i ] = input . nextInt ( ) ; } Main myEncyclopedia = new Main ( ) ; myEncyclopedia . Judge ( in [ 0 ] , in [ 1 ] ) ; input . close ( ) ; } }"],"bleu":0.2129945540035888,"rouge_l":0.36369299221357065}
{"id":5,"predictions":["import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; if ( a <= 8 ) System . out . println ( \" Y ! \" ) ; else System . out . println ( \" : \" ) ; } }"],"references":["import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner reader = new Scanner ( System . in ) ; System . out . println ( reader . nextInt ( ) <= 8 && reader . nextInt ( ) <= 8 ? \" Yay ! \" : \" : ( \" ) ; reader . close ( ) ; } }"],"bleu":0.5617881504093564,"rouge_l":0.6822114370120279}
{"id":6,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int A = sc . nextInt ( ) ; int B = sc . nextInt ( ) ; int [ ] a = new int [ N ] ; long [ ] b = new long [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { a [ i ] = sc . nextLong ( ) ; b [ i ] = sc . nextLong ( ) ; } long ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { b [ i ] = sc . nextLong ( ) ; } Arrays . sort ( b ) ; long ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( b [ i ] > max ) { ans = Math . max ( ans , ( long ) b [ i ] ) ; } if ( ans > max ) { ans = ans ; } else { ans = Math . max ( ans , max ) ; } System . out . println ( ans ) ; } }"],"references":["import java . util . Arrays ; import java . util . Scanner ; public class Main { static long pow ( long b , long n , long mod ) { if ( n == 0 ) return 1 ; if ( n % 2 == 0 ) { long t = pow ( b , n \/ 2 , mod ) ; return t * t % mod ; } return b * pow ( b , n - 1 , mod ) % mod ; } public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a = sc . nextInt ( ) , b = sc . nextInt ( ) ; final int MOD = 1000000007 ; long [ ] as = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { as [ i ] = sc . nextInt ( ) ; } Arrays . sort ( as ) ; if ( a == 1 ) { for ( int i = 0 ; i < n ; i ++ ) { System . out . println ( as [ i ] ) ; } return ; } int cnt = 0 ; while ( cnt < b && as [ 0 ] * a < as [ n - 1 ] ) { as [ 0 ] *= a ; as [ 0 ] %= MOD ; Arrays . sort ( as ) ; cnt ++ ; } b -= cnt ; for ( int i = 0 ; i < b % n ; i ++ ) { as [ 0 ] *= a ; as [ 0 ] %= MOD ; long [ ] nxt = new long [ n ] ; for ( int j = 0 ; j < n - 1 ; j ++ ) { nxt [ j ] = as [ j + 1 ] ; } nxt [ n - 1 ] = as [ 0 ] ; as = nxt ; } for ( int i = 0 ; i < n ; i ++ ) { as [ i ] *= pow ( a , b \/ n , MOD ) ; System . out . println ( as [ i ] % MOD ) ; } } }"],"bleu":0.253003714554284,"rouge_l":0.46727822961982224}
{"id":7,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int m = sc . nextInt ( ) ; int n = sc . nextInt ( ) ; int ans = n ; int sum = 0 ; for ( int i = 1 ; i < n ; i ++ ) { sum += sc . nextInt ( ) ; } System . out . println ( sum ) ; } }"],"references":["import java . util . HashMap ; import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int m = in . nextInt ( ) , n = in . nextInt ( ) , N = in . nextInt ( ) ; int ans = 0 , rem = 0 ; while ( N + rem >= m ) { ans += N ; N += rem ; rem = N % m ; N = N \/ m * n ; } System . out . println ( ans + N ) ; } }"],"bleu":0.43865300887427244,"rouge_l":0.605595667870036}
{"id":8,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int w = sc . nextInt ( ) ; int [ ] x = new int [ w ] ; int n = sc . nextInt ( ) ; int [ ] y = new int [ w ] ; for ( int i = 0 ; i < n ; i ++ ) { x [ i ] = sc . nextInt ( ) ; y [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { x [ i ] = sc . nextInt ( ) ; y [ i ] = sc . nextInt ( ) ; } sc . close ( ) ; int max = 0 ; for ( int i = 0 ; i < w ; i ++ ) { max = Math . max ( max , x [ i ] ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( x [ i ] < 0 ) { ans = Math . max ( ans , x [ i ] ) ; } } System . out . println ( ans ) ; } }"],"references":["import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { Scanner scan = new Scanner ( System . in ) ; int w = scan . nextInt ( ) ; int h = scan . nextInt ( ) ; int n = scan . nextInt ( ) ; int x_min = 0 ; int y_min = 0 ; int x_max = w ; int y_max = h ; for ( int i = 0 ; i < n ; i ++ ) { int x = scan . nextInt ( ) ; int y = scan . nextInt ( ) ; int a = scan . nextInt ( ) ; if ( a == 1 ) { if ( x_min < x ) { x_min = x ; } } else if ( a == 2 ) { if ( x_max > x ) { x_max = x ; } } else if ( a == 3 ) { if ( y_min < y ) { y_min = y ; } } else if ( a == 4 ) { if ( y_max > y ) { y_max = y ; } } } int area = 0 ; if ( x_max > x_min && y_max > y_min ) { area = ( x_max - x_min ) * ( y_max - y_min ) ; } System . out . println ( area ) ; } }"],"bleu":0.3718113841539949,"rouge_l":0.5250612461100443}
{"id":9,"predictions":["import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; if ( s . length ( ) % 2 == 0 ) { System . out . println ( \" Second \" ) ; } else if ( s . length ( ) % 2 == 0 ) { System . out . println ( \" First \" ) ; } else { System . out . println ( \" Second \" ) ; } } }"],"references":["import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) throws Exception { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int L = s . length ( ) ; int same = 0 ; if ( s . charAt ( 0 ) == s . charAt ( L - 1 ) ) { same = 1 ; } if ( ( L + same ) % 2 == 0 ) { System . out . println ( \" Second \" ) ; } else { System . out . println ( \" First \" ) ; } } }"],"bleu":0.6562904897796032,"rouge_l":0.7589822452117992}
{"id":10,"predictions":["import java . math . * ; import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } }"],"references":["import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . IOException ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; String s = new String ( br . readLine ( ) ) ; long total = 0 , bit ; int lOprIndex , rOprIndex ; String tmp = new String ( ) ; for ( int i = 0 ; i < Math . pow ( 2 , s . length ( ) - 1 ) ; i ++ ) { lOprIndex = 0 ; rOprIndex = 1 ; for ( bit = i ; bit != 0 ; bit = bit >> 1 ) { if ( ( bit & 1 ) == 1 ) { tmp = s . substring ( lOprIndex , rOprIndex ) ; total += Long . parseLong ( tmp . toString ( ) ) ; lOprIndex = rOprIndex ; } rOprIndex ++ ; } tmp = s . substring ( lOprIndex , s . length ( ) ) ; total += Long . parseLong ( tmp . toString ( ) ) ; } System . out . println ( total ) ; } }"],"bleu":0.013844769640976137,"rouge_l":0.2651309355644898}
{"id":11,"predictions":["import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] t = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { t [ i ] = sc . nextInt ( ) ; } int res = 0 ; for ( int i = 0 ; i < m ; i ++ ) { int n = sc . nextInt ( ) ; int m = Math . min ( t , n \/ g ) ; if ( n % m == 0 ) { res = - 1 ; } else { res = n \/ g ; } } System . out . println ( res ) ; } }"],"references":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long length [ ] = { sc . nextInt ( ) , sc . nextInt ( ) } ; String st [ ] = { sc . next ( ) , sc . next ( ) } ; long gcd = gcd ( length [ 0 ] , length [ 1 ] ) ; boolean ok = true ; for ( int i = 0 ; i < gcd ; i ++ ) { if ( st [ 0 ] . charAt ( ( int ) ( length [ 0 ] \/ gcd * i ) ) != st [ 1 ] . charAt ( ( int ) ( length [ 1 ] \/ gcd * i ) ) ) { ok = false ; break ; } } System . out . println ( ok ? length [ 0 ] * length [ 1 ] \/ gcd : - 1 ) ; } public static long gcd ( long a , long b ) { return b == 0 ? a : gcd ( b , a % b ) ; } }"],"bleu":0.3155082496524039,"rouge_l":0.4875124875124875}
{"id":12,"predictions":["import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;  "],"references":["import java . util . HashSet ; import java . util . Scanner ; import java . util . Set ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; Set < Integer > set = new HashSet < > ( ) ; set . add ( sc . nextInt ( ) ) ; set . add ( sc . nextInt ( ) ) ; set . add ( sc . nextInt ( ) ) ; System . out . println ( set . size ( ) ) ; } }"],"bleu":0.06269719816229179,"rouge_l":0.307273826314729}
{"id":13,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; System . out . println ( a + \" ▁ \" + b ) ; } }"],"references":["import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; String po = sc . nextLine ( ) ; System . out . println ( po . replace ( \" , \" , \" ▁ \" ) ) ; } }"],"bleu":0.6199252752234077,"rouge_l":0.776973026973027}
{"id":14,"predictions":["import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; System . out . println ( y ) ; } }"],"references":["import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long X = sc . nextLong ( ) ; long Y = sc . nextLong ( ) ; int ans = 0 ; while ( X <= Y ) { X *= 2 ; ans ++ ; } System . out . println ( ans ) ; } }"],"bleu":0.45313565426606756,"rouge_l":0.6928901977282289}
{"id":15,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int K = sc . nextInt ( ) ; int [ ] p = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { p [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { p [ i ] = sc . nextInt ( ) ; } int ans = 0 ; int [ ] c = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { c [ i ] = sc . nextInt ( ) - 1 ; } for ( int i = 0 ; i < N ; i ++ ) { if ( c [ i ] == 1 ) ans ++ ; } for ( int i = 0 ; i < N ; i ++ ) { if ( i != 0 ) continue ; int [ ] c = new int [ N ] ; for ( int j = 0 ; j < N ; j ++ ) { c [ j ] = sc . nextInt ( ) ; if ( c [ j ] == 1 ) c [ j ] ++ ; } ans ++ ; } System . out . println ( ans ) ; } }"],"references":["import java . util . ArrayList ; import java . util . List ; import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { new Thread ( null , ( ) -> { int n ; int k ; List < Integer > as = new ArrayList < > ( ) ; try ( Scanner sc = new Scanner ( System . in ) ) { n = sc . nextInt ( ) ; k = sc . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { as . add ( sc . nextInt ( ) - 1 ) ; } } System . out . println ( new Calculator ( n , k , as ) . calculate ( ) ) ; } , \" \" , 1 << 27 ) . start ( ) ; } } class Calculator { private int k ; private int answer = 0 ; private boolean isCalculate = false ; private List < List < Integer > > lists = new ArrayList < > ( ) ; Calculator ( int n , int k , List < Integer > as ) { this . k = k ; for ( int i = 0 ; i < n ; i ++ ) { this . lists . add ( new ArrayList < > ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { int j = as . get ( i ) ; if ( 0 < i ) { this . lists . get ( j ) . add ( i ) ; } else if ( 0 < j ) { this . answer ++ ; } } } int calculate ( ) { if ( ! this . isCalculate ) { this . dfs ( 0 , 0 ) ; this . isCalculate = true ; } return this . answer ; } private int dfs ( int a , int pre ) { int h = 0 ; for ( int i : this . lists . get ( a ) ) { h = Math . max ( h , this . dfs ( i , a ) ) ; } if ( 0 < pre && h == this . k - 1 ) { h = 0 ; this . answer ++ ; } else { h ++ ; } return h ; } }"],"bleu":0.24808835223957473,"rouge_l":0.4275638498269592}
{"id":16,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int M = sc . nextInt ( ) ; int Q = sc . nextInt ( ) ; int [ ] [ ] a = new int [ N + 1 ] [ M ] ; for ( int i = 0 ; i < M ; i ++ ) { a [ i ] [ l ] = sc . nextInt ( ) - 1 ; } int [ ] [ ] b = new int [ N + 1 ] [ N + 1 ] ; for ( int i = 0 ; i < Q ; i ++ ) { for ( int j = 0 ; j < N ; j ++ ) { b [ i ] [ j ] += a [ i ] ; } } for ( int i = 0 ; i < Q ; i ++ ) { int sum = 0 ; for ( int j = 0 ; j < N ; j ++ ) { sum += a [ j ] [ i ] ; b [ j ] ] ] ++ ; } int [ ] [ ] dp = new int [ Q + 1 ] [ N + 1 ] ; for ( int i = 0 ; i < Q ; i ++ ) { for ( int j = 0 ; j < N ; j ++ ) { dp [ i ] [ j ] = sum [ i ] ; } } for ( int i = 0 ; i < Q ; i ++ ) { for ( int j = 0 ; j < N ; j ++ ) { for ( int k = 0 ; k < N ; k ++ ) { System . out . print ( dp [ i ] [ j ] ) ; } } System . out . println ( ) ; } }"],"references":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; final int N = sc . nextInt ( ) ; int M = sc . nextInt ( ) ; final int Q = sc . nextInt ( ) ; int [ ] [ ] LR = new int [ N + 1 ] [ N + 1 ] ; int [ ] [ ] sum = new int [ N + 1 ] [ N + 1 ] ; for ( int i = 0 ; i < M ; i ++ ) { int li = sc . nextInt ( ) ; int ri = sc . nextInt ( ) ; LR [ li ] [ ri ] ++ ; } for ( int i = 1 ; i < N + 1 ; i ++ ) { for ( int j = 1 ; j < N + 1 ; j ++ ) { sum [ i ] [ j ] += sum [ i ] [ j - 1 ] + LR [ i ] [ j ] ; } } int [ ] ANS = new int [ Q ] ; for ( int i = 0 ; i < Q ; i ++ ) { int ans = 0 ; int pi = sc . nextInt ( ) ; int qi = sc . nextInt ( ) ; for ( int j = pi ; j <= qi ; j ++ ) { ans += sum [ j ] [ qi ] - sum [ j ] [ pi - 1 ] ; } ANS [ i ] = ans ; } for ( int i = 0 ; i < Q ; i ++ ) System . out . println ( ANS [ i ] ) ; } }"],"bleu":0.6026322025622174,"rouge_l":0.678165855520565}
{"id":17,"predictions":["import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int M = sc . nextInt ( ) ; int X = sc . nextInt ( ) ; int [ ] [ ] a = new int [ N ] [ X ] ; for ( int i = 0 ; i < N ; i ++ ) { a [ i ] [ 0 ] = 1 ; } for ( int i = 0 ; i < M ; i ++ ) { int low = 0 ; int high = 0 ; for ( int i = 0 ; i < N ; i ++ ) { int [ ] upper += a [ i ] ; for ( int j = 0 ; j < N ; j ++ ) { if ( i > lower [ j ] ) { low += a [ j ] ; } } } int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { ans += a [ i ] ; } System . out . println ( ans ) ; } }"],"references":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int po [ ] = new int [ n + 1 ] ; for ( int i = 0 ; i < m ; i ++ ) { po [ sc . nextInt ( ) ] ++ ; } int r = 0 , l = 0 ; for ( int i = x ; i <= n ; i ++ ) { r += po [ i ] ; } for ( int i = 0 ; i <= x ; i ++ ) { l += po [ i ] ; } System . out . println ( Math . min ( r , l ) ) ; } }"],"bleu":0.46493576279749593,"rouge_l":0.6968773800456969}
{"id":18,"predictions":["import java . util . * ; class Main { static Scanner sc = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { int N = sc . nextInt ( ) ; int [ ] dist = new int [ N ] ; for ( int i = 0 ; i < dist . length ; i ++ ) { dist [ i ] = INF ; } dist [ i ] = new ArrayList < Edge > ( ) ; dist [ i ] = new ArrayList < Edge > ( dist [ 0 ] ; for ( int i = 0 ; i < N ; i ++ ) dist [ i ] = new ArrayList < Edge > ( ) ; dist [ i ] = new ArrayList < Edge > ( ) ; dist [ 0 ] = new ArrayList < Edge > ( ) ; for ( int i = 0 ; i < [ 0 ; i ++ ) dist [ i ] = new ArrayList < Edge > ( ) ; for ( int i = 0 ; i < dist . size ( ) ; i ++ ) . add ( new ArrayList < Edge > ( ) ) ; for ( int i = 0 ; i < N ; i ++ ) dist [ i ] = new ArrayList < Edge > ( ) ; for ( int i = 0 ; i < Integer . toString ( dist [ i ] ) ; i ++ ) { int v = sc . nextInt ( ) - 1 ; for ( int j = 0 ; j < edges . size ( ) - 1 ; j ++ ) { int v = sc . nextInt ( ) - dist [ v ] . add ( v ) ; } dist [ v ] . add ( v ) ; } dist [ v ] . add ( v ) ; dist [ v ] . add ( v ) ; } System . out . println ( dist + \" ▁ \" + v ) ; } } Note : . \/ Main . java uses unchecked or unsafe operations . Note : Recompile with - Xlint : unchecked for details ."],"references":["import java . util . * ; public class Main { static ArrayList < Edge > edges [ ] ; static int d [ ] ; static int max ; static int maxt ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; edges = new ArrayList [ N ] ; for ( int i = 0 ; i < N ; i ++ ) edges [ i ] = new ArrayList < Edge > ( ) ; for ( int i = 0 ; i < N - 1 ; i ++ ) { int a = sc . nextInt ( ) - 1 ; int b = sc . nextInt ( ) - 1 ; edges [ a ] . add ( new Edge ( b , 1 ) ) ; edges [ b ] . add ( new Edge ( a , 1 ) ) ; } int s = 0 ; d = new int [ N ] ; Arrays . fill ( d , - 1 ) ; d [ s ] = 0 ; max = 0 ; maxt = - 1 ; dfs ( s ) ; s = maxt ; d = new int [ N ] ; Arrays . fill ( d , - 1 ) ; d [ s ] = 0 ; max = 0 ; maxt = - 1 ; dfs ( s ) ; System . out . printf ( \" % d ▁ % d % n \" , s + 1 , maxt + 1 ) ; } private static void dfs ( int i ) { for ( Edge e : edges [ i ] ) { if ( d [ e . v ] == - 1 ) { d [ e . v ] = d [ i ] + e . w ; if ( d [ e . v ] > max ) { max = d [ e . v ] ; maxt = e . v ; } dfs ( e . v ) ; } } return ; } private static class Edge { int u ; int v ; int w ; Edge ( int v , int w ) { this . u = u ; this . v = v ; this . w = w ; } } } Note : . \/ Main . java uses unchecked or unsafe operations . Note : Recompile with - Xlint : unchecked for details ."],"bleu":0.3901226345460336,"rouge_l":0.4574348214632631}
{"id":19,"predictions":["import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; if ( a < b ) { System . out . println ( \" No \" ) ; } else if ( b > 0 ) { System . out . println ( \" Yes \" ) ; } } else { System . out . println ( \" No \" ) ; } }"],"references":["import java . util . HashSet ; import java . util . Scanner ; public class Main { void run ( ) { Scanner scan = new Scanner ( System . in ) ; int t = scan . nextInt ( ) ; while ( t -- != 0 ) { long a = scan . nextLong ( ) ; long b = scan . nextLong ( ) ; long c = scan . nextLong ( ) ; long d = scan . nextLong ( ) ; System . out . println ( eval ( a , b , c , d ) ? \" Yes \" : \" No \" ) ; } } boolean eval ( long a , long b , long c , long d ) { if ( b > a || b > d ) return false ; if ( c >= b ) return true ; if ( b - gcd ( b , d ) + ( a % gcd ( b , d ) ) > c ) return false ; else return true ; } long gcd ( long a , long b ) { if ( a % b == 0 ) return b ; return gcd ( b , a % b ) ; } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } }"],"bleu":0.1591350957948743,"rouge_l":0.38877248122926494}
{"id":20,"predictions":["import java . util . * ; import java . awt . * ; import static java . lang . System . * ; import static java . lang . Math . * ; public class Main { public static void main ( String [ ] $ ) { Scanner sc = new Scanner ( in ) ; int n = sc . nextInt ( ) ; long arr [ ] [ ] = new long [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { arr [ i ] [ j ] += arr [ i ] [ j ] ; } } long ans = n \/ 4 * n ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { ans += ( i + j ) % n + 1 ; } } out . println ( ans ) ; out . close ( ) ; } }"],"references":["import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; if ( k == 1 ) { System . out . println ( 1 ) ; System . out . print ( 1 ) ; return ; } int n = 2 * ( ( k + 3 ) \/ 4 ) ; int curt = n * 2 - k ; int [ ] [ ] mat = new int [ n ] [ n ] ; for ( int r = 0 ; r < n ; r ++ ) { for ( int c = 0 ; c < n ; c ++ ) { if ( r % 2 == 1 && ( r + c ) % n < n - curt ) { mat [ r ] [ c ] = n + ( r + c ) % n ; mat [ r ] [ c ] ++ ; } else { mat [ r ] [ c ] = ( r + c ) % n ; mat [ r ] [ c ] ++ ; } } } int rr = 1 ; System . out . println ( n ) ; for ( int [ ] row : mat ) { int cc = 1 ; for ( int x : row ) { System . out . print ( x ) ; if ( cc < n ) System . out . print ( \" ▁ \" ) ; cc ++ ; } if ( rr < n ) System . out . println ( \" \" ) ; rr ++ ; } } }"],"bleu":0.24187812950171741,"rouge_l":0.43732823515354285}
{"id":21,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = sc . nextInt ( ) ; System . out . println ( a [ n - 1 ] ) ; } }"],"references":["import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { int n , s ; s = 0 ; Scanner sc = new Scanner ( System . in ) ; n = sc . nextInt ( ) ; int a [ ] = new int [ n + 1 ] ; a [ 1 ] = sc . nextInt ( ) ; for ( int i = 2 ; i <= n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; for ( int j = 1 ; j < i ; j ++ ) { if ( a [ j ] == a [ i ] ) { s = s + 1 ; break ; } } } System . out . println ( s ) ; } }"],"bleu":0.4035522773676209,"rouge_l":0.6532903225806451}
{"id":22,"predictions":["import java . util . Arrays ; import java . util . Comparator ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { new Main ( ) . solve ( ) ; } public void solve ( ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; int tmp = 0 ; for ( int i = 0 ; i < n ; i ++ ) { tmp += a [ i ] ; tmp += a [ i ] ; } System . out . println ( tmp ) ; sc . close ( ) ; } }"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Comparator ; import java . util . PriorityQueue ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int n = Integer . parseInt ( br . readLine ( ) ) ; int [ ] input = new int [ n ] ; String [ ] tmpArray = br . readLine ( ) . split ( \" ▁ \" ) ; for ( int i = 0 ; i < n ; i ++ ) { input [ i ] = Integer . parseInt ( tmpArray [ i ] ) ; } Arrays . sort ( input ) ; int a = 0 ; int b = n - 1 ; int med = input [ n - 1 ] \/ 2 ; for ( int i = 1 ; i < n - 2 ; i ++ ) { if ( Math . abs ( input [ a ] - med ) >= Math . abs ( input [ i ] - med ) ) { a = i ; } } System . out . println ( input [ b ] + \" ▁ \" + input [ a ] ) ; } }"],"bleu":0.34487437261361686,"rouge_l":0.5717765148719464}
{"id":23,"predictions":["import java . util . * ; import java . lang . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; long [ ] a = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextLong ( ) ; } Arrays . sort ( a ) ; long [ ] b = new long [ n - 1 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n - 1 ; j ++ ) { b [ i ] = a [ j ] - a [ i + 1 ] ; } int [ ] pos = new int [ n - 1 ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( ( a [ i ] - 1 < b [ i ] ) { pos [ i ] = i ; } else { pos [ i ] = a [ i ] - 1 ; } } long sum = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { sum += a [ i ] - a [ i ] ; } System . out . println ( sum ) ; } }"],"references":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] a = new int [ m ] ; for ( int i = 0 ; i < m ; ++ i ) { a [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; int [ ] d = new int [ m - 1 ] ; for ( int i = 0 ; i < m - 1 ; ++ i ) { d [ i ] = a [ i + 1 ] - a [ i ] ; } Arrays . sort ( d ) ; int c = 0 ; for ( int i = 0 ; i < m - n ; ++ i ) { c += d [ i ] ; } System . out . println ( c ) ; } }"],"bleu":0.4945525157721403,"rouge_l":0.7234761357101782}
{"id":24,"predictions":["import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i < a ; i ++ ) { ans += Math . min ( ans , a * b ) ; } System . out . println ( ans ) ; } }"],"references":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long a = sc . nextLong ( ) ; long b = sc . nextLong ( ) ; long k = sc . nextLong ( ) ; long l = sc . nextLong ( ) ; long ans = k \/ l * b ; k -= k \/ l * l ; System . out . println ( ans + ( k == 0 ? 0 : Math . min ( k * a , b ) ) ) ; } }"],"bleu":0.46954679912288577,"rouge_l":0.6368181149830906}
{"id":25,"predictions":["import java . util . * ; import java . lang . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] a = new int [ N ] ; int [ ] b = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { a [ i ] = sc . nextInt ( ) ; b [ i ] = sc . nextInt ( ) ; } int mini = - 1 , maxi = - 1 ; for ( int i = 0 ; i < N ; i ++ ) { int tmp = 0 ; for ( int j = i ; j < N ; j ++ ) { if ( a [ j ] > i ) { tmp += a [ j ] ; b [ j ] = a [ j ] ; } else { tmp += a [ j ] ; min = Math . max ( tmp , min ) ; } } int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < N ; j ++ ) { if ( b [ i ] > 0 ) { ans = j ; break ; } } } if ( i > 0 ) { for ( int j = 0 ; j < N ; j ++ ) { ans = Math . min ( ans , t [ j ] ) ; } else { ans = Math . max ( ans , mini - 1 ) ; } } System . out . println ( ans ) ; } }"],"references":["import java . util . * ; public class Main { static Scanner sc = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { int N = sc . nextInt ( ) ; int [ ] values = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { values [ i ] = sc . nextInt ( ) ; } int ans = Integer . MIN_VALUE ; for ( int i = 0 ; i < N ; i ++ ) { int aokiSum = Integer . MIN_VALUE ; int aokiPosi = 0 ; for ( int j = 0 ; j < N ; j ++ ) { if ( i == j ) continue ; int tmp = 0 ; for ( int k = Math . min ( i , j ) ; k <= Math . max ( i , j ) ; k ++ ) { if ( ( k - Math . min ( i , j ) + 1 ) % 2 == 0 ) { tmp += values [ k ] ; } } if ( tmp > aokiSum ) { aokiPosi = j ; aokiSum = tmp ; } } int tmp = 0 ; for ( int k = Math . min ( i , aokiPosi ) ; k <= Math . max ( i , aokiPosi ) ; k ++ ) { if ( ( k - Math . min ( i , aokiPosi ) + 1 ) % 2 == 1 ) { tmp += values [ k ] ; } } ans = Math . max ( tmp , ans ) ; } System . out . println ( ans ) ; } }"],"bleu":0.5231434600178327,"rouge_l":0.572232645403377}
{"id":26,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; long K = sc . nextLong ( ) ; long [ ] a = new long [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { a [ i ] = sc . nextLong ( ) ; } long sum = 0 ; for ( int i = 0 ; i < N ; i ++ ) { sum += a [ i ] ; } sum += Math . min ( sum , K - x [ i ] ) * 2 ; System . out . println ( sum ) ; } }"],"references":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int N = scanner . nextInt ( ) ; int K = scanner . nextInt ( ) ; int sum = 0 ; for ( int i = 0 ; i < N ; i ++ ) { int temp = scanner . nextInt ( ) ; if ( temp > Math . abs ( temp - K ) ) { sum += Math . abs ( ( temp - K ) * 2 ) ; } else { sum += temp * 2 ; } } System . out . println ( sum ) ; } }"],"bleu":0.5246683216453133,"rouge_l":0.6708104231412861}
{"id":27,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int t = Integer . parseInt ( br . readLine ( ) ) ; while ( t -- > 0 ) { StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } if ( a [ 0 ] == 1 ) return a ; if ( b [ 1 ] == 1 ) return b ; return a ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) throws IOException { return br . readLine ( ) ; } } }"],"references":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] A = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) A [ i ] = sc . nextInt ( ) ; System . out . println ( win ( A ) ? \" First \" : \" Second \" ) ; sc . close ( ) ; } static boolean win ( int [ ] A ) { int N = A . length ; int even = 0 ; for ( int i = 0 ; i < N ; i ++ ) if ( A [ i ] % 2 == 0 ) even ++ ; if ( even % 2 == 1 ) { return true ; } else { if ( even == N - 1 ) { for ( int i = 0 ; i < N ; i ++ ) { if ( A [ i ] % 2 == 1 ) { if ( A [ i ] == 1 ) return false ; A [ i ] -- ; break ; } } int gcd = A [ 0 ] ; for ( int i = 1 ; i < N ; i ++ ) gcd = gcd ( gcd , A [ i ] ) ; for ( int i = 0 ; i < N ; i ++ ) A [ i ] \/= gcd ; return ! win ( A ) ; } else { return false ; } } } static int gcd ( int a , int b ) { return a % b == 0 ? b : gcd ( b , a % b ) ; } }"],"bleu":0.26965065330428234,"rouge_l":0.4216963573517682}
{"id":28,"predictions":["import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; boolean flag = true ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) != ' * ' && s . charAt ( i ) != ' * ' ) { flag = true ; } if ( ! flag ) { System . out . println ( \" YES \" ) ; } else { System . out . println ( \" NO \" ) ; } } } }"],"references":["import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String [ ] s = sc . next ( ) . split ( \" \" ) ; for ( int i = 0 ; i < s . length ; i ++ ) { if ( s [ i ] . equals ( s [ s . length - i - 1 ] ) || s [ i ] . equals ( \" * \" ) || s [ s . length - i - 1 ] . equals ( \" * \" ) ) continue ; System . out . println ( \" NO \" ) ; return ; } System . out . println ( \" YES \" ) ; } }"],"bleu":0.5289849297631337,"rouge_l":0.6712713650199016}
{"id":29,"predictions":["import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] a = new int [ n + 1 ] ; int [ ] b = new int [ n + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } if ( n < m ) { System . out . println ( \" no \" ) ; return ; } } System . out . println ( \" yes \" ) ; } }"],"references":["import java . util . * ; import static java . lang . System . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int T = sc . nextInt ( ) ; int N = sc . nextInt ( ) ; int [ ] A = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { A [ i ] = sc . nextInt ( ) ; } int M = sc . nextInt ( ) ; int [ ] B = new int [ M ] ; for ( int i = 0 ; i < M ; i ++ ) { B [ i ] = sc . nextInt ( ) ; } int n = 0 ; for ( int m = 0 ; m < M ; m ++ ) { while ( true ) { if ( n >= N ) { out . println ( \" no \" ) ; return ; } if ( A [ n ] <= B [ m ] && B [ m ] <= A [ n ] + T ) { n ++ ; break ; } n ++ ; } } out . println ( \" yes \" ) ; } }"],"bleu":0.4953033019714202,"rouge_l":0.6452516139068213}
{"id":30,"predictions":["import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . StringTokenizer ; import java . io . IOException ; import java . io . BufferedReader ; import java . io . InputStreamReader ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; TaskA solver = new TaskA ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class TaskA { public void solve ( int testNumber , InputReader in , PrintWriter out ) { int N = in . nextInt ( ) ; int D = in . nextInt ( ) ; for ( int i = 0 ; i < N ; i ++ ) { A [ i ] = in . nextInt ( ) ; } } out . println ( sum ) ; } } static class InputReader { public BufferedReader reader ; public StringTokenizer tokenizer ; public InputReader ( InputStream stream ) { reader = new BufferedReader ( new InputStreamReader ( stream ) ) ; tokenizer = null ; } public String next ( ) { while ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } public long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } } }"],"references":["import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int D = sc . nextInt ( ) ; int X = sc . nextInt ( ) ; int [ ] data = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { data [ i ] = sc . nextInt ( ) ; } int cnt = 0 ; for ( int i = 0 ; i < N ; i ++ ) { int x = 1 ; while ( x <= D ) { cnt ++ ; x += data [ i ] ; } } System . out . println ( X + cnt ) ; sc . close ( ) ; } }"],"bleu":0.21629104797191634,"rouge_l":0.4197644721906925}
{"id":31,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { String s = sc . next ( ) ; StringBuilder sb = new StringBuilder ( ) ; for ( int j = 0 ; j < s . length ( ) ; j ++ ) { sb . append ( s . charAt ( j ) ) ; sb . append ( sb . charAt ( j ) ) ; } } System . out . println ( sb ) ; } }"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . UncheckedIOException ; import java . util . StringTokenizer ; class Main { public static void main ( String [ ] args ) { SC sc = new SC ( System . in ) ; int sq = sc . nextInt ( ) ; String s = \" \" ; int t = 0 ; int a = 0 ; for ( int i = 0 ; i < sq ; i ++ ) { s = sc . next ( ) ; for ( int j = 0 ; j < sq ; j ++ ) { if ( s . charAt ( j ) == ' R ' ) { t ++ ; } else if ( s . charAt ( j ) == ' B ' ) { a ++ ; } } } if ( a == t ) { System . out . println ( \" DRAW \" ) ; } else if ( a > t ) { System . out . println ( \" AOKI \" ) ; } else if ( a < t ) { System . out . println ( \" TAKAHASHI \" ) ; } } static class SC { private BufferedReader reader = null ; private StringTokenizer tokenizer = null ; public SC ( InputStream in ) { reader = new BufferedReader ( new InputStreamReader ( in ) ) ; } public String next ( ) { if ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } } return tokenizer . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } public long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } } }"],"bleu":0.11435415513502535,"rouge_l":0.38469148015333254}
{"id":32,"predictions":["import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] a = new int [ b ] ; for ( int i = 0 ; i < b ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int s = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i < k ; i ++ ) { b = sc . nextInt ( ) ; } System . out . println ( ans ) ; } }"],"references":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int A = sc . nextInt ( ) ; int B = sc . nextInt ( ) ; int C = sc . nextInt ( ) ; int K = sc . nextInt ( ) ; int S = sc . nextInt ( ) ; int T = sc . nextInt ( ) ; int ans = A * S + B * T ; if ( S + T >= K ) ans -= C * ( S + T ) ; System . out . println ( ans ) ; } }"],"bleu":0.5037353899061244,"rouge_l":0.7034132841328413}
{"id":33,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int w = sc . nextInt ( ) ; int [ ] [ ] table = new int [ n ] [ w ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < w ; j ++ ) { table [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] [ ] table = new int [ n ] [ w ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < w ; j ++ ) { table [ i ] [ j ] += table [ i ] [ j ] ; } } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < w ; j ++ ) { for ( int k = 0 ; k < w ; k ++ ) { int p = table [ i ] [ j ] + table [ k ] [ j ] ; table [ j ] [ k ] += table [ i - 1 ] [ j ] ; } } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < w ; j ++ ) { for ( int k = 0 ; k < w ; k ++ ) { for ( int k = 0 ; k < w ; k ++ ) { for ( int l = 0 ; l < w ; l ++ ) { int tmp = table [ k ] [ l ] ; if ( i > 0 ) { ans += table [ j ] [ k - 1 ] [ l ] ; } } } } ans = Math . max ( ans , v ) ; } return ans ; } }"],"references":["import java . util . * ; import java . util . stream . Collectors ; import java . util . stream . Stream ; public class Main { static Map < Integer , List < Integer > > map ; static long ans = 0 ; static int [ ] keys ; public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int N = in . nextInt ( ) , W = in . nextInt ( ) ; map = new HashMap < > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { int w = in . nextInt ( ) , v = in . nextInt ( ) ; if ( ! map . containsKey ( w ) ) { List < Integer > list = new ArrayList < > ( ) ; list . add ( v ) ; map . put ( w , list ) ; } else { map . get ( w ) . add ( v ) ; } } keys = new int [ map . keySet ( ) . size ( ) ] ; int idx = 0 ; for ( int key : map . keySet ( ) ) { keys [ idx ++ ] = key ; } map . keySet ( ) . stream ( ) . map ( key -> map . get ( key ) ) . forEach ( list -> Collections . sort ( list , Collections . reverseOrder ( ) ) ) ; solve ( W , 0 , 0 , 0L ) ; System . out . println ( ans ) ; } public static void solve ( int W , int idx , int wSum , long vSum ) { if ( idx == keys . length ) { ans = Math . max ( ans , vSum ) ; } else { solve ( W , idx + 1 , wSum , vSum ) ; for ( int v : map . get ( keys [ idx ] ) ) { if ( W - wSum < keys [ idx ] ) return ; wSum += keys [ idx ] ; vSum += ( long ) v ; solve ( W , idx + 1 , wSum , vSum ) ; } } } }"],"bleu":0.2361237594379922,"rouge_l":0.334049975661204}
{"id":34,"predictions":["import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int M = sc . nextInt ( ) ; int [ ] x = new int [ M ] ; int [ ] y = new int [ M ] ; for ( int i = 0 ; i < M ; i ++ ) { x [ i ] = sc . nextInt ( ) - sc . nextInt ( ) ; x [ i ] = sc . nextInt ( ) - 1 ; } int a [ ] = new int [ M ] ; int [ ] b = new int [ M + 1 ] ; for ( int i = 0 ; i < M ; i ++ ) { a [ i ] = sc . nextInt ( ) - 1 ; b [ i ] = sc . nextInt ( ) - 1 ; } if ( a [ 0 ] > b [ 0 ] ) { System . out . println ( \" No \" ) ; } else { for ( int i = 0 ; i < M ; i ++ ) { int l = find ( l , r ) ; int d = find ( l , r ) ; if ( d [ l ] - dist [ r ] != 0 ) { System . out . println ( \" Yes \" ) ; return ; } } } System . out . println ( \" No \" ) ; } }"],"references":["import java . util . Scanner ; import java . util . * ; public class Main { public static ArrayList < Integer > linkList [ ] [ ] ; public static int dists [ ] ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int M = sc . nextInt ( ) ; linkList = new ArrayList [ N + 1 ] [ 2 ] ; dists = new int [ N + 1 ] ; for ( int i = 0 ; i < N + 1 ; i ++ ) { dists [ i ] = Integer . MIN_VALUE ; linkList [ i ] [ 0 ] = new ArrayList < Integer > ( ) ; linkList [ i ] [ 1 ] = new ArrayList < Integer > ( ) ; } for ( int i = 0 ; i < M ; i ++ ) { int l = sc . nextInt ( ) ; int r = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; linkList [ l ] [ 0 ] . add ( r ) ; linkList [ l ] [ 1 ] . add ( d ) ; linkList [ r ] [ 0 ] . add ( l ) ; linkList [ r ] [ 1 ] . add ( - d ) ; } for ( int i = 0 ; i < N ; i ++ ) { if ( dists [ i ] != Integer . MIN_VALUE ) continue ; if ( ! dfs ( i , 0 ) ) { System . out . println ( \" No \" ) ; return ; } } System . out . println ( \" Yes \" ) ; } public static boolean dfs ( int i , int dist ) { if ( dists [ i ] != Integer . MIN_VALUE ) return dists [ i ] == dist ; dists [ i ] = dist ; for ( int j = 0 ; j < linkList [ i ] [ 0 ] . size ( ) ; j ++ ) { if ( ! dfs ( linkList [ i ] [ 0 ] . get ( j ) , dist + linkList [ i ] [ 1 ] . get ( j ) ) ) return false ; } return true ; } } Note : . \/ Main . java uses unchecked or unsafe operations . Note : Recompile with - Xlint : unchecked for details ."],"bleu":0.34329934738748397,"rouge_l":0.4830963126969258}
{"id":35,"predictions":["import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a , b , c ; a = sc . nextInt ( ) ; b = sc . nextInt ( ) ; c = sc . nextInt ( ) ; System . out . println ( a ) ; } }"],"references":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; System . out . println ( a == b ? c : b == c ? a : b ) ; } }"],"bleu":0.7367223551019696,"rouge_l":0.8529714168208925}
{"id":36,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int y = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; System . out . println ( ( int ) ( ( y \/ 4 + f ) - 1 ) ; } }"],"references":["import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . io . UncheckedIOException ; import java . util . StringTokenizer ; import java . io . IOException ; import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . InputStream ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; LightScanner in = new LightScanner ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; A solver = new A ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class A { public void solve ( int testNumber , LightScanner in , PrintWriter out ) { int y = in . ints ( ) , m = in . ints ( ) , d = in . ints ( ) ; if ( m <= 2 ) { y -= 1 ; m += 12 ; } int r = 365 * y + ( y \/ 4 ) - ( y \/ 100 ) + ( y \/ 400 ) + ( 306 * ( m + 1 ) \/ 10 ) + d - 429 ; out . println ( 735369 - r ) ; } } static class LightScanner { private BufferedReader reader = null ; private StringTokenizer tokenizer = null ; public LightScanner ( InputStream in ) { reader = new BufferedReader ( new InputStreamReader ( in ) ) ; } public String string ( ) { if ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } } return tokenizer . nextToken ( ) ; } public int ints ( ) { return Integer . parseInt ( string ( ) ) ; } } }"],"bleu":0.01501038834735377,"rouge_l":0.23542879570877215}
{"id":37,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i < 1000000 ; i ++ ) { ans += sc . nextInt ( ) ; } System . out . println ( ans ) ; for ( int i = 0 ; i < 1000000 ; i ++ ) { ans *= x ; } System . out . println ( ans ) ; } }"],"references":["import java . util . LinkedHashSet ; import java . util . Scanner ; import java . util . Set ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long K = sc . nextLong ( ) ; Set < Long > sunekeSet = new LinkedHashSet < > ( ) ; for ( long m = 1 ; m <= 10e15 ; m *= 10 ) { boolean sunukeCheckFlag = true ; for ( int i = 1 ; sunukeCheckFlag ; i ++ ) { long x = i * m + m - 1 ; long y = ( i + 1 ) * m + m - 1 ; if ( x * Sn ( y ) <= y * Sn ( x ) ) { sunekeSet . add ( x ) ; if ( K == sunekeSet . size ( ) ) { sunekeSet . stream ( ) . forEach ( System . out :: println ) ; return ; } } else { sunukeCheckFlag = false ; } } } } public static long Sn ( long num ) { long Sn = 0 ; while ( num != 0 ) { Sn += num % 10 ; num \/= 10 ; } return Sn ; } }"],"bleu":0.1823660216733634,"rouge_l":0.4109929078014185}
{"id":38,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int [ ] l = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { l [ i ] = sc . nextInt ( ) ; r [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < n - 1 ; i ++ ) { sb . append ( s . charAt ( i ) ) ; } int l = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sb . append ( sb . charAt ( i + 1 ) ) ; System . out . print ( sb . toString ( ) ) ; } System . out . println ( ) ; } } }"],"references":["import java . util . Arrays ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { final Scanner sc = new Scanner ( System . in ) ; char [ ] s = sc . next ( ) . toCharArray ( ) ; int N = sc . nextInt ( ) ; int [ ] [ ] map = new int [ N ] [ 2 ] ; for ( int i = 0 ; i < N ; i ++ ) { map [ i ] [ 0 ] = sc . nextInt ( ) ; map [ i ] [ 1 ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < N ; i ++ ) { int start = map [ i ] [ 0 ] ; int end = map [ i ] [ 1 ] ; String tmp = new String ( s ) ; char [ ] target = tmp . substring ( start - 1 , end ) . toCharArray ( ) ; for ( int j = 0 ; j <= end - start ; j ++ ) { s [ start - 1 + j ] = target [ target . length - j - 1 ] ; } } System . out . println ( new String ( s ) ) ; } }"],"bleu":0.45036461827701857,"rouge_l":0.6048158640226629}
{"id":39,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; System . out . println ( a - b ) ; } }"],"references":["import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int x = sc . nextInt ( ) ; int t = sc . nextInt ( ) ; System . out . println ( ( x - t > 0 ) ? x - t : 0 ) ; sc . close ( ) ; } }"],"bleu":0.6306209998984628,"rouge_l":0.8033482142857145}
{"id":40,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int q = sc . nextInt ( ) ; for ( int i = 1 ; i <= q ; i ++ ) { long a = sc . nextLong ( ) ; long b = sc . nextLong ( ) ; if ( a == b ) { System . out . println ( 0 ) ; return ; } long sum = 0 ; for ( int i = Math . sqrt ( b ) ; i ++ ) { sum += a ; for ( int i = Math . sqrt ( a ) ; i <= b ; i ++ ) { sum += b \/ i ; } if ( sum == 0 ) { System . out . println ( 0 ) ; continue ; } long z = 1 * x ; for ( int i = 2 ; i <= n ; ++ i ) { if ( i * i + 1 < n ) { long a = i - 1 , b [ i ] = i - 1 ; if ( ( i - 1 ) * ( x - i ) + 1 >= n ) { x = i - 1 ; break ; } } if ( ( x - y ) * ( x - y ) % 2 == 1 ) { z = 1 ; } else { z ++ ; } } } System . out . println ( z - sum - x ) ; } }"],"references":["import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int q = scanner . nextInt ( ) ; for ( int i = 0 ; i < q ; i ++ ) { long a = scanner . nextLong ( ) ; long b = scanner . nextLong ( ) ; System . out . println ( solve ( a , b ) ) ; } } private static long solve ( long a , long b ) { if ( a > b ) return solve ( b , a ) ; if ( a == b ) return 2 * a - 2 ; if ( a + 1 == b ) return 2 * a - 2 ; long ab = a * b ; long c = findUpperRoot ( ab ) ; if ( c * ( c + 1 ) >= ab ) return 2 * c - 2 ; return 2 * c - 1 ; } private static long findUpperRoot ( long n ) { long ll = 0 ; long ul = ( long ) Math . sqrt ( n ) + 1 ; while ( ll + 1 < ul ) { long mid = ( ll + ul ) \/ 2 ; if ( mid * mid < n ) { ll = mid ; } else { ul = mid ; } } return ll ; } }"],"bleu":0.35356144801172107,"rouge_l":0.500959117611797}
{"id":41,"predictions":["import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int H = scan . nextInt ( ) ; int W = scan . nextInt ( ) ; int B = scan . nextInt ( ) ; int A = scan . nextInt ( ) ; int B = scan . nextInt ( ) ; int [ ] map = new int [ H + 1 ] ; for ( int i = 0 ; i < H ; ++ i ) { map [ i ] = scan . nextInt ( ) - 1 ; } long ans = 0 ; for ( int i = 0 ; i < int ; i ++ ) { long ans = 0 ; for ( int j = 2 ; j < map . get ( i + 1 ) ; j ++ ) { ans *= map [ j ] ; } ans %= map [ i ] ; } ans = ( ( ans + 1 ) % 2 == 1 ? 1 : 0 ; System . out . println ( ans ) ; } static long ( long a , long b ) { if ( b == 0 ) return 0 ; return ( b * ( a + 1 - b ) % P ) % MOD ; } long ans = ( long ) 1e9 ; for ( int i = 1 ; i <= A ; i ++ ) { ans = ( ( i * ( a - 1 - i ) + ( b - 1 ) * ( ( b - 1 - i ) ) % P ; } return ans ; }"],"references":["import java . math . BigInteger ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long H = sc . nextInt ( ) - 1 ; long W = sc . nextInt ( ) - 1 ; long A = sc . nextInt ( ) - 1 ; long B = sc . nextInt ( ) - 1 ; long MOD = 1000000007L ; BigInteger BMOD = BigInteger . valueOf ( MOD ) ; long x = 1 ; long y = 1 ; for ( long i = W - B ; i <= W - B - 1 + H ; i ++ ) { y = ( y * i ) % MOD ; } for ( long i = 1 ; i <= H ; i ++ ) { y = ( y * BigInteger . valueOf ( i ) . modInverse ( BMOD ) . longValue ( ) ) % MOD ; } long ans = ( x * y ) % MOD ; long a1 = B + 1 ; long a2 = 1 ; long b1 = W - B - 1 + H ; long b2 = H ; for ( int i = 1 ; i < H - A ; i ++ ) { x = ( x * a1 ) % MOD ; x = ( x * BigInteger . valueOf ( a2 ) . modInverse ( BMOD ) . longValue ( ) ) % MOD ; a1 += 1 ; a2 += 1 ; y = ( y * b2 ) % MOD ; y = ( y * BigInteger . valueOf ( b1 ) . modInverse ( BMOD ) . longValue ( ) ) % MOD ; b1 -= 1 ; b2 -= 1 ; ans = ( ans + x * y ) % MOD ; } System . out . println ( ans ) ; } }"],"bleu":0.2895548155965251,"rouge_l":0.4542746499851057}
{"id":42,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int L = sc . nextInt ( ) ; int R = sc . nextInt ( ) ; int [ ] L = new int [ L ] ; int [ ] R = new int [ R ] ; for ( int i = 0 ; i < L ; i ++ ) { R [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ L ] ; for ( int i = 0 ; i < R ; i ++ ) { c [ i ] = sc . nextInt ( ) ; } int sum = 0 ; for ( int i = 0 ; i < L ; i ++ ) { sum += R [ i ] ; } System . out . println ( sum ) ; } }"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . ArrayList ; import java . util . Collections ; import java . util . List ; import java . util . Scanner ; import java . util . HashMap ; public class Main { public static void main ( String args [ ] ) { int leftNum , rightNum , cnt = 0 ; Scanner scan = new Scanner ( System . in ) ; leftNum = scan . nextInt ( ) ; rightNum = scan . nextInt ( ) ; ArrayList < Integer > l_list = new ArrayList < Integer > ( ) ; ArrayList < Integer > r_list = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < leftNum ; i ++ ) l_list . add ( scan . nextInt ( ) ) ; for ( int i = 0 ; i < rightNum ; i ++ ) r_list . add ( scan . nextInt ( ) ) ; for ( int i = 0 ; i < leftNum ; i ++ ) { int sameIndex = r_list . indexOf ( l_list . get ( i ) ) ; if ( sameIndex != - 1 ) { cnt ++ ; l_list . set ( i , - 1 ) ; r_list . set ( sameIndex , - 1 ) ; } } System . out . println ( cnt ) ; } }"],"bleu":0.2897774168395505,"rouge_l":0.4924721797948941}
{"id":43,"predictions":["import java . util . * ; import static java . lang . System . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int a = 1 ; int b = sc . nextInt ( ) ; int max = 1 ; for ( int i = 1 ; i <= 100 ; i ++ ) { max = Math . max ( max , a ) ; } System . out . println ( max ) ; } }"],"references":["import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int x = sc . nextInt ( ) ; int max = 1 ; for ( int i = 2 ; i <= x ; i ++ ) { int tmp = i * i ; while ( tmp <= x ) { if ( tmp > max ) { max = tmp ; } tmp *= i ; } } System . out . println ( max ) ; sc . close ( ) ; } }"],"bleu":0.6074155488424906,"rouge_l":0.6807022764469572}
{"id":44,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] a = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int b [ ] = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int max = 0 ; for ( int i = 0 ; i < N ; i ++ ) { max += a [ i ] ; max = Math . max ( max , b [ i ] ) ; } System . out . println ( max ) ; } }"],"references":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int prev = - 1 ; int count = 0 ; int max = 0 ; for ( int i = 0 ; i < 2 * n ; i ++ ) { if ( prev == arr [ i % n ] ) { count ++ ; if ( max < count ) { max = count ; } } else { count = 1 ; } prev = arr [ i % n ] ; } if ( max > n ) { System . out . println ( - 1 ) ; } else { System . out . println ( ( max - 1 ) \/ 2 + 1 ) ; } } }"],"bleu":0.50689264589068,"rouge_l":0.6633342102955363}
{"id":45,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] x = new int [ N ] ; int [ ] y = new int [ N ] ; int [ ] x = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { x [ i ] = sc . nextInt ( ) ; y [ i ] = sc . nextInt ( ) ; x [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } if ( n == 0 && b [ 0 ] == 1 ) { System . out . println ( \" NO \" ) ; } else { int [ ] c = new int [ N ] ; for ( int j = 0 ; j < N ; j ++ ) { b [ i ] = sc . nextInt ( ) ; boolean [ ] can = new boolean [ N ] ; Arrays . fill ( c , 0 ) ; for ( int k = 0 ; k < N ; k ++ ) { if ( b [ k ] == 0 && c [ k ] >= x [ k ] ) { if ( c [ k ] < 100 && b [ k ] >= x [ k ] ) { c [ k ] = false ; break ; } } if ( c [ 0 ] == true && b [ k ] >= x [ k ] ) { if ( c [ k ] + 1 >= 100 && b [ k ] [ 0 ] ) { isTrue = true ; break ; } } } if ( isOk ) { System . out . println ( \" YES \" ) ; } else { System . out . println ( \" NO \" ) ; } } else { System . out . println ( \" YES \" ) ; } } }"],"references":["import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scn = new Scanner ( System . in ) ; int n = scn . nextInt ( ) ; int ng1 = scn . nextInt ( ) ; int ng2 = scn . nextInt ( ) ; int ng3 = scn . nextInt ( ) ; String ans = \" \" ; if ( n == ng1 || n == ng2 || n == ng3 ) { ans = \" NO \" ; } else { for ( int i = 0 ; i < 100 ; i ++ ) { if ( n - 3 != ng1 && n - 3 != ng2 && n - 3 != ng3 ) n -= 3 ; else if ( n - 2 != ng1 && n - 2 != ng2 && n - 2 != ng3 ) n -= 2 ; else if ( n - 1 != ng1 && n - 1 != ng2 && n - 1 != ng3 ) n -= 1 ; } if ( n > 0 ) ans = \" NO \" ; else ans = \" YES \" ; } System . out . println ( ans ) ; } }"],"bleu":0.19960802620427082,"rouge_l":0.41293340671436435}
{"id":46,"predictions":["import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int M = sc . nextInt ( ) ; int [ ] [ ] e = new int [ N ] [ N ] ; int [ ] [ ] b = new int [ N ] [ N ] ; int [ ] c = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { a [ i ] = sc . nextInt ( ) - 1 ; b [ i ] = sc . nextInt ( ) - 1 ; } for ( int i = 0 ; i < M ; i ++ ) { int u = sc . nextInt ( ) - 1 ; int v = sc . nextInt ( ) - 1 ; int u = sc . nextInt ( ) - 1 ; int v = sc . nextInt ( ) - 1 ; for ( int i = 0 ; c < N ; i ++ ) { int u = sc . nextInt ( ) - 1 ; int v = sc . nextInt ( ) - 1 ; b [ u ] [ v ] = v ; v [ u ] [ v ] = true ; } for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < E ; j ++ ) { int u = sc . nextInt ( ) - 1 ; int v = sc . nextInt ( ) ; v = sc . nextInt ( ) ; if ( v [ u ] [ v ] == v [ u ] ) { v = v ; continue ; } u = Math . max ( v , u ) ; } } System . out . println ( v [ u ] ) ; sc . close ( ) ; } }"],"references":["import java . util . ArrayList ; import java . util . HashSet ; import java . util . List ; import java . util . Scanner ; import java . util . Set ; public class Main { private static List < Set < Integer > > edge ; private static boolean [ ] checked ; private static boolean dfs ( int i ) { if ( checked [ i ] ) return false ; checked [ i ] = true ; Set < Integer > set = edge . get ( i ) ; for ( int j : set ) { edge . get ( j ) . remove ( i ) ; if ( ! dfs ( j ) ) return false ; } set . clear ( ) ; return true ; } public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; edge = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { edge . add ( new HashSet < > ( ) ) ; } for ( int i = 0 ; i < m ; i ++ ) { int u = sc . nextInt ( ) - 1 ; int v = sc . nextInt ( ) - 1 ; edge . get ( u ) . add ( v ) ; edge . get ( v ) . add ( u ) ; } checked = new boolean [ n ] ; int res = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( dfs ( i ) ) res ++ ; } System . out . println ( res ) ; sc . close ( ) ; } }"],"bleu":0.4025411241343783,"rouge_l":0.4698294192694797}
{"id":47,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int r = sc . nextInt ( ) ; int G = sc . nextInt ( ) ; System . out . println ( 2 * G - r ) ; } }"],"references":["import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; double R = sc . nextDouble ( ) ; double G = sc . nextDouble ( ) ; System . out . println ( ( int ) ( G + ( G - R ) ) ) ; } }"],"bleu":0.6095239320669722,"rouge_l":0.8127629733520337}
{"id":48,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; System . out . println ( ( a - 1 ) * ( b - 1 ) ) ; } }"],"references":["import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = Integer . parseInt ( sc . next ( ) ) - 1 ; int b = Integer . parseInt ( sc . next ( ) ) - 1 ; System . out . println ( a * b ) ; } }"],"bleu":0.6254612323183524,"rouge_l":0.8075086805555555}
{"id":49,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int h = sc . nextInt ( ) ; int w = sc . nextInt ( ) ; StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < h ; i ++ ) { sb . append ( sb . charAt ( i ) ) ; } System . out . println ( sb . reverse ( ) ) ; } }"],"references":["import java . util . * ; import java . lang . * ; import java . math . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int h = sc . nextInt ( ) ; int w = sc . nextInt ( ) ; String [ ] s = new String [ h ] ; for ( int i = 0 ; i < h ; i ++ ) { s [ i ] = sc . next ( ) ; } for ( int i = 0 ; i < h ; i ++ ) { System . out . println ( s [ i ] ) ; System . out . println ( s [ i ] ) ; } sc . close ( ) ; } }"],"bleu":0.4593471397540621,"rouge_l":0.6752201257861634}
{"id":50,"predictions":["import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;  "],"references":["import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = Integer . parseInt ( sc . next ( ) ) ; Set < String > set = new HashSet ( ) ; for ( int i = 0 ; i < N ; i ++ ) { set . add ( sc . next ( ) ) ; } System . out . println ( set . size ( ) ) ; } } Note : . \/ Main . java uses unchecked or unsafe operations . Note : Recompile with - Xlint : unchecked for details ."],"bleu":0.029522239981282564,"rouge_l":0.23278211884426678}
{"id":51,"predictions":["import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long n = sc . nextLong ( ) ; System . out . println ( n - 1 - n ) ; } }"],"references":["import java . util . Scanner ; public class Main { static int ans , N ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . nextLine ( ) ; String S [ ] = s . split ( \" \" ) ; s = \" \" ; for ( int i = 0 ; i < S . length ; i ++ ) { s += 10 - Integer . parseInt ( S [ i ] ) ; } System . out . println ( s ) ; } }"],"bleu":0.2518849971647826,"rouge_l":0.5385048835462058}
{"id":52,"predictions":["import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { try ( Scanner sc = new Scanner ( System . in ) { new Main ( ) . solve ( ) ; } } void solve ( Scanner sc ) { int n = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; if ( x < y ) { System . out . print ( \" Impossible \" ) ; } else { int count = 0 ; for ( int j = 0 ; j < 2 * y - 10 ; j ++ ) { if ( 0 < a [ j ] && a [ j ] % 2 == 0 ) { count ++ ; } } System . out . print ( \" Impossible \" ) ; } System . out . println ( \" Impossible \" ) ; } sc . close ( ) ; } }"],"references":["import java . util . Scanner ; class Main { static long gcd ( long a , long b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; } public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; String in = scan . next ( ) ; String [ ] in2 = in . split ( \" \/ \" ) ; long x = Long . parseLong ( in2 [ 0 ] ) ; long y = Long . parseLong ( in2 [ 1 ] ) ; long g = gcd ( x , y ) ; x \/= g ; y \/= g ; scan . close ( ) ; long n = 2 * x \/ y ; n = Math . max ( n , 1 ) ; boolean f = true ; for ( ; n <= 2 * x \/ y + 1 ; n ++ ) { if ( n % y == 0 ) { System . out . println ( n + \" ▁ \" + ( n * ( n + 1 ) \/ 2 - n \/ y * x ) ) ; f = false ; } } if ( f ) System . out . println ( \" Impossible \" ) ; } }"],"bleu":0.273316665840552,"rouge_l":0.45212339743589747}
{"id":53,"predictions":["import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int A = sc . nextInt ( ) ; int B = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i <= N ; i ++ ) { ans += i ; } System . out . println ( ans ) ; } }"],"references":["import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { int n , a , b , digitsSum = 0 , totalSum = 0 ; Scanner sc = new Scanner ( System . in ) ; n = sc . nextInt ( ) ; a = sc . nextInt ( ) ; b = sc . nextInt ( ) ; for ( int i = 1 ; i <= n ; i ++ ) { int tmp = i ; for ( int j = 0 ; j < 5 ; j ++ ) { digitsSum += tmp % 10 ; tmp \/= 10 ; } if ( a <= digitsSum && digitsSum <= b ) totalSum += i ; digitsSum = 0 ; } System . out . println ( totalSum ) ; } }"],"bleu":0.3995313762782775,"rouge_l":0.6335194080228483}
{"id":54,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String a = sc . next ( ) ; String b = sc . next ( ) ; for ( int i = 0 ; i < a . length ( ) ; i ++ ) { System . out . print ( a . substring ( 0 , i ) + \" \" ) ; } System . out . print ( \" \" ) ; } }"],"references":["import java . util . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; String input = s . next ( ) ; int a = s . nextInt ( ) ; int b = s . nextInt ( ) ; int c = s . nextInt ( ) ; int d = s . nextInt ( ) ; for ( int i = 0 ; i < input . length ( ) ; i ++ ) { if ( i == a || i == b || i == c || i == d ) { System . out . print ( \" \\\" \" ) ; } System . out . print ( input . charAt ( i ) ) ; } if ( input . length ( ) == d ) { System . out . print ( \" \\\" \" ) ; } System . out . println ( ) ; } }"],"bleu":0.32846479152348645,"rouge_l":0.5874370759465967}
{"id":55,"predictions":["import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; if ( a * b == n ) { System . out . println ( \" Yes \" ) ; return ; } } else { System . out . println ( \" No \" ) ; } sc . close ( ) ; } }"],"references":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; for ( int i = 0 ; i <= n ; i += 7 ) { for ( int j = 0 ; i + j <= n ; j += 4 ) { if ( i + j == n ) { System . out . println ( \" Yes \" ) ; return ; } } } System . out . println ( \" No \" ) ; } }"],"bleu":0.6688541957525329,"rouge_l":0.7872071819329499}
{"id":56,"predictions":["import java . util . Scanner ;   public class d1481 {   public static void main ( String [ ] args ) {"],"references":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long x = sc . nextLong ( ) ; long a = sc . nextLong ( ) ; long b = sc . nextLong ( ) ; System . out . println ( b <= a ? \" delicious \" : b <= x + a ? \" safe \" : \" dangerous \" ) ; } }"],"bleu":0.03305875930199767,"rouge_l":0.31475748194014447}
{"id":57,"predictions":["class GFG { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; if ( ( a - b ) % 2 == 0 ) { System . out . println ( \" B \" ) ; } else { System . out . println ( \" Bshirt \" ) ; } } }"],"references":["import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . io . UncheckedIOException ; import java . util . StringTokenizer ; import java . io . IOException ; import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . InputStream ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; LightScanner in = new LightScanner ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; AMoveAndWin solver = new AMoveAndWin ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class AMoveAndWin { public void solve ( int testNumber , LightScanner in , PrintWriter out ) { int n = in . ints ( ) , a = in . ints ( ) , b = in . ints ( ) ; if ( ( b - a ) % 2 == 0 ) { out . println ( \" Alice \" ) ; } else { out . println ( \" Borys \" ) ; } } } static class LightScanner { private BufferedReader reader = null ; private StringTokenizer tokenizer = null ; public LightScanner ( InputStream in ) { reader = new BufferedReader ( new InputStreamReader ( in ) ) ; } public String string ( ) { if ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } } return tokenizer . nextToken ( ) ; } public int ints ( ) { return Integer . parseInt ( string ( ) ) ; } } }"],"bleu":0.03705918772621243,"rouge_l":0.2960959711531794}
{"id":58,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { System . out . println ( i ) ; } } }"],"references":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s [ ] = \" abcdefghijklmnopqrstuvwxyz \" . split ( \" \" , 0 ) ; String po = sc . next ( ) ; String a [ ] = po . split ( \" \" , 0 ) ; Map < String , Integer > map = new HashMap < > ( ) ; for ( int i = 0 ; i < a . length ; i ++ ) { map . put ( a [ i ] , 0 ) ; } if ( map . size ( ) == 26 ) System . out . println ( \" None \" ) ; else for ( int i = 0 ; i < s . length ; i ++ ) { if ( ! map . containsKey ( s [ i ] ) ) { System . out . println ( s [ i ] ) ; break ; } } } }"],"bleu":0.18246792562946396,"rouge_l":0.506866705135603}
{"id":59,"predictions":["import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] < a [ i - 1 ] ) { cnt ++ ; } } if ( cnt < n ) { System . out . println ( \" Yes \" ) ; } else { System . out . println ( \" No \" ) ; } } }"],"references":["import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int sum = 0 ; int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int a = sc . nextInt ( ) ; max = Math . max ( max , a ) ; sum += a ; } if ( max < sum - max ) { System . out . println ( \" Yes \" ) ; } else { System . out . println ( \" No \" ) ; } sc . close ( ) ; } }"],"bleu":0.6236692540950681,"rouge_l":0.7530864197530863}
{"id":60,"predictions":["import java . util . Arrays ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int N = scan . nextInt ( ) ; int [ ] x = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { x [ i ] = scan . nextInt ( ) ; } int sum = 0 ; for ( int i = 1 ; i < N ; i ++ ) { sum += x [ i ] ; } System . out . println ( sum ) ; } }"],"references":["import java . util . * ; public class Main { private static long f ( long x ) { long ret = 0 ; while ( x > 0 ) { ret += x % 10 ; x \/= 10 ; } return ret ; } public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long N = sc . nextLong ( ) ; ArrayList < Long > set = new ArrayList < Long > ( ) ; for ( long i = Math . max ( 1 , N - 1000 ) ; i < N ; i ++ ) { long val = i + f ( i ) ; if ( val == N ) { set . add ( i ) ; } } System . out . println ( set . size ( ) ) ; for ( long c : set ) { System . out . println ( c ) ; } } }"],"bleu":0.28830391084445867,"rouge_l":0.4776719576719577}
{"id":61,"predictions":["import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } System . out . println ( solve ( arr , arr ) ) ; } }"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader input = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int n = Integer . parseInt ( input . readLine ( ) ) ; StringTokenizer tokenizer ; long sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { tokenizer = new StringTokenizer ( input . readLine ( ) ) ; sum += Math . abs ( Integer . parseInt ( tokenizer . nextToken ( ) ) - Integer . parseInt ( tokenizer . nextToken ( ) ) ) + 1 ; } System . out . println ( sum ) ; } }"],"bleu":0.3061026015716053,"rouge_l":0.5346798780487805}
{"id":62,"predictions":["import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; long a [ ] = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextLong ( ) ; } long b = 0 ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextLong ( ) ; } if ( a [ 0 ] == 1 ) { System . out . println ( \" - 1\" ) ; } else { if ( b [ 0 ] == 1 ) { System . out . println ( \" W \" ) ; } } else { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 1 ; i < sb . length ( ) ; i ++ ) { sb . append ( sb . charAt ( i ) ) ; } if ( sb . charAt ( 1 ) == sb . charAt ( 0 ) ) { sb . append ( sb . charAt ( i ) - 1 ) ; } else { for ( int i = 1 ; i < sb . length ( ) - 1 ; i ++ ) { if ( s [ i ] == 1 ) { sb . append ( sb . charAt ( i ) * ( sb . length ( ) - 1 ) == sb . charAt ( i - 1 ) * ( sb . length ( ) - 1 ) { sb . append ( sb . charAt ( sb . length ( ) - 1 ) ) ; } } } } System . out . println ( sb ) ; } }"],"references":["import java . util . Arrays ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; char [ ] c = sc . next ( ) . toCharArray ( ) ; boolean sh [ ] = new boolean [ n + 2 ] ; for ( int z = 0 ; z < 4 ; z ++ ) { Arrays . fill ( sh , false ) ; sh [ 0 ] = ( z & 1 ) == 0 ; sh [ 1 ] = ( z & 2 ) == 0 ; for ( int i = 2 ; i < n + 2 ; i ++ ) { sh [ i ] = sh [ i - 1 ] ^ sh [ i - 2 ] ^ c [ ( i - 1 ) % n ] == ' o ' ; } if ( sh [ n ] == sh [ 0 ] && sh [ n + 1 ] == sh [ 1 ] ) { put ( sh ) ; return ; } } System . out . println ( - 1 ) ; } static void put ( boolean [ ] sh ) { for ( int i = 0 ; i < sh . length - 2 ; i ++ ) { System . out . print ( sh [ i ] ? \" S \" : \" W \" ) ; } System . out . println ( ) ; } }"],"bleu":0.3646309372622112,"rouge_l":0.5067463886978147}
{"id":63,"predictions":["import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; System . out . println ( \" Y \" ) ; } }"],"references":["import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int m = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; if ( m >= d ) { if ( m % d == 0 ) { System . out . println ( \" YES \" ) ; } else { System . out . println ( \" NO \" ) ; } } else { System . out . println ( \" NO \" ) ; } } }"],"bleu":0.2980495604063694,"rouge_l":0.5831302717900656}
{"id":64,"predictions":["import java . util . * ;   public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] dp = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { dp [ i ] [ j ] = sc . nextInt ( ) ; } } Arrays . sort ( sorted ) ; int sum = 0 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { sum += dp [ i ] [ 0 ] ; sum += dp [ i ] [ n - 1 ] ; } System . out . println ( sum ) ; sc . close ( ) ; } }"],"references":["import java . util . * ; import java . awt . * ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] d = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { d [ i ] = sc . nextInt ( ) ; } long m = 1000000007 ; Arrays . sort ( d ) ; int [ ] two = new int [ n ] ; for ( int i = n - 1 ; i > 0 ; i -- ) { int j = i - 1 ; while ( true ) { if ( j < 0 ) { two [ i ] = - 1 ; break ; } if ( d [ j ] * 2 <= d [ i ] ) { two [ i ] = j ; break ; } else { j -- ; } } } long [ ] [ ] dp = new long [ n ] [ 4 ] ; dp [ 0 ] [ 0 ] = 1 ; for ( int i = 1 ; i < n ; i ++ ) { dp [ i ] [ 0 ] = ( dp [ i - 1 ] [ 0 ] + 1 ) % m ; if ( two [ i ] != - 1 ) { dp [ i ] [ 1 ] = ( dp [ i - 1 ] [ 1 ] + dp [ two [ i ] ] [ 0 ] ) % m ; dp [ i ] [ 2 ] = ( dp [ i - 1 ] [ 2 ] + dp [ two [ i ] ] [ 1 ] ) % m ; dp [ i ] [ 3 ] = ( dp [ i - 1 ] [ 3 ] + dp [ two [ i ] ] [ 2 ] ) % m ; } } System . out . println ( dp [ n - 1 ] [ 3 ] ) ; } }"],"bleu":0.2140866407057297,"rouge_l":0.43795900471336185}
{"id":65,"predictions":["import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = Integer . parseInt ( sc . nextLine ( ) ) ; List < Integer > list = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < n \/ 2 ; i ++ ) { int x = Integer . parseInt ( sc . nextLine ( ) ) ; int y = Integer . parseInt ( sc . nextLine ( ) ) ; list . add ( x ) ; list . add ( y ) ; } Collections . sort ( list ) ; int ans = 0 ; for ( int i = 0 ; i < n \/ 2 ; i ++ ) { for ( int j = 0 ; j < list . size ( ) ; j ++ ) { if ( list . get ( j ) == 1 ) { ans ++ ; } } System . out . println ( ans ) ; } sc . close ( ) ; } }"],"references":["import java . util . Arrays ; import java . util . HashMap ; import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; long [ ] A = new long [ N ] ; long [ ] B = new long [ N ] ; HashMap < Long , Integer > map = new HashMap < Long , Integer > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { A [ i ] = sc . nextLong ( ) ; B [ i ] = A [ i ] ; } Arrays . sort ( A ) ; for ( int i = 0 ; i < N ; i ++ ) { map . put ( A [ i ] , i ) ; } int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( i % 2 != map . get ( B [ i ] ) % 2 ) { ans ++ ; } } System . out . println ( ans \/ 2 ) ; } }"],"bleu":0.4684489783964246,"rouge_l":0.6189751395230847}
{"id":66,"predictions":["import java . util . Arrays ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { int p = 0 ; for ( int j = 0 ; j < n ; j ++ ) { a [ j ] = a [ j ] ; b [ i ] = p ; } } int cost = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { cost += a [ j ] - b [ i ] ; cost += Math . max ( cost , cost ) ; cost += Math . max ( cost , cost ) ; } } System . out . println ( Math . max ( cost + Math . abs ( cost ) + cost ) ) ; } }"],"references":["import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . Arrays ; import java . util . StringTokenizer ; import java . io . IOException ; import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . InputStream ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; FastScanner in = new FastScanner ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; ProblemC solver = new ProblemC ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class ProblemC { public void solve ( int testNumber , FastScanner in , PrintWriter out ) { int n = in . nextInt ( ) ; int [ ] l = new int [ n + 1 ] ; int [ ] r = new int [ n + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) { l [ i ] = in . nextInt ( ) ; r [ i ] = in . nextInt ( ) ; } Arrays . sort ( l ) ; Arrays . sort ( r ) ; long ans = 0 ; for ( int i = 0 ; i < n + 1 ; i ++ ) { ans += Math . max ( 0 , l [ n - i ] - r [ i ] ) ; } ans *= 2 ; out . println ( ans ) ; } } static class FastScanner { private BufferedReader in ; private StringTokenizer st ; public FastScanner ( InputStream stream ) { in = new BufferedReader ( new InputStreamReader ( stream ) ) ; } public String next ( ) { while ( st == null || ! st . hasMoreTokens ( ) ) { try { String rl = in . readLine ( ) ; if ( rl == null ) { return null ; } st = new StringTokenizer ( rl ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return st . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } } }"],"bleu":0.22575496069070228,"rouge_l":0.3935483870967742}
{"id":67,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int a [ ] = new int [ N ] ; int b [ ] = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { a [ i ] = sc . nextInt ( ) ; b [ i ] = sc . nextInt ( ) ; } double max = 0 ; for ( int i = 0 ; i < N ; i ++ ) { max = Math . max ( max , a [ i ] ) ; if ( b [ i ] != 0 ) { System . out . println ( - 1 ) ; return ; } } System . out . println ( max + \" ▁ \" + ( a [ 0 ] - ( b [ 0 ] ) ) ; } }"],"references":["import java . util . * ; public class Main { private static Scanner scanner = new Scanner ( System . in ) ; public static void main ( String [ ] $ ) { int n = scanner . nextInt ( ) , a = scanner . nextInt ( ) , b = scanner . nextInt ( ) ; int [ ] s = java . util . stream . IntStream . range ( 0 , n ) . map ( i -> scanner . nextInt ( ) ) . toArray ( ) ; double d = Arrays . stream ( s ) . max ( ) . getAsInt ( ) - Arrays . stream ( s ) . min ( ) . getAsInt ( ) ; System . out . println ( d == 0 ? - 1 : b \/ d + \" ▁ \" + ( a - Arrays . stream ( s ) . average ( ) . getAsDouble ( ) * b \/ d ) ) ; } }"],"bleu":0.2971518499383648,"rouge_l":0.4602727272727273}
{"id":68,"predictions":["import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] a = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] res = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { res [ i ] += a [ i ] ; } for ( int i = 0 ; i < N ; i ++ ) { res [ i ] += a [ i ] ; } System . out . println ( res [ N - 1 ] ) ; } }"],"references":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; b [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; Arrays . sort ( b ) ; int users = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == 0 ) { users ++ ; } else { break ; } } int output = users ; int nowA = users ; int nowB = 0 ; int nowATmp = 0 ; int nowBTmp = 0 ; for ( int i = 1 ; i < 1000001 ; i ++ ) { nowATmp = nowA ; nowBTmp = nowB ; for ( int j = 0 ; j < n - nowA ; j ++ ) { if ( a [ nowA + j ] == i ) { users ++ ; nowATmp ++ ; } else { break ; } } nowA = nowATmp ; for ( int j = 0 ; j < n - nowB ; j ++ ) { if ( b [ nowB + j ] == i - 1 ) { users -- ; nowBTmp ++ ; } else { break ; } } nowB = nowBTmp ; if ( users > output ) { output = users ; } } System . out . println ( output ) ; } }"],"bleu":0.24734563556598702,"rouge_l":0.5054923877433032}
{"id":69,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; int w = sc . nextInt ( ) ; StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < 8 ; i ++ ) { int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; if ( x >= 0 ) { sb . append ( \" L \" ) ; } else if ( x >= 0 ) { sb . append ( \" R \" ) ; } else { sb . append ( \" L \" ) ; } } System . out . println ( sb ) ; } }"],"references":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; String s = sc . next ( ) ; String [ ] field = new String [ 9 ] ; int count = 0 ; for ( int i = 0 ; i < 9 ; i ++ ) { field [ i ] = sc . next ( ) ; } int dx = 0 ; int dy = 0 ; if ( s . equals ( \" R \" ) ) { dx = 1 ; dy = 0 ; } else if ( s . equals ( \" L \" ) ) { dx = - 1 ; dy = 0 ; } else if ( s . equals ( \" U \" ) ) { dx = 0 ; dy = - 1 ; } else if ( s . equals ( \" D \" ) ) { dx = 0 ; dy = 1 ; } else if ( s . equals ( \" RU \" ) ) { dx = 1 ; dy = - 1 ; } else if ( s . equals ( \" RD \" ) ) { dx = 1 ; dy = 1 ; } else if ( s . equals ( \" LU \" ) ) { dx = - 1 ; dy = - 1 ; } else if ( s . equals ( \" LD \" ) ) { dx = - 1 ; dy = 1 ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < 4 ; i ++ ) { sb . append ( field [ y - 1 ] . charAt ( x - 1 ) ) ; if ( x == 1 && dx == - 1 ) { dx = 1 ; } if ( x == 9 && dx == 1 ) { dx = - 1 ; } if ( y == 1 && dy == - 1 ) { dy = 1 ; } if ( y == 9 && dy == 1 ) { dy = - 1 ; } x += dx ; y += dy ; } System . out . println ( sb ) ; } }"],"bleu":0.13380116739551803,"rouge_l":0.41481519933554817}
{"id":70,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; double ans = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { ans = ( ( n - k ) * 6 + 1 ; } System . out . println ( ans ) ; } }"],"references":["import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . io . UncheckedIOException ; import java . util . StringTokenizer ; import java . io . IOException ; import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . InputStream ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; LightScanner in = new LightScanner ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; D solver = new D ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class D { public void solve ( int testNumber , LightScanner in , PrintWriter out ) { int n = in . ints ( ) , k = in . ints ( ) ; double p = 1L + 3L * ( n - 1L ) + 6L * ( n - k ) * ( k - 1L ) ; p \/= n ; p \/= n ; p \/= n ; out . println ( p ) ; } } static class LightScanner { private BufferedReader reader = null ; private StringTokenizer tokenizer = null ; public LightScanner ( InputStream in ) { reader = new BufferedReader ( new InputStreamReader ( in ) ) ; } public String string ( ) { if ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } } return tokenizer . nextToken ( ) ; } public int ints ( ) { return Integer . parseInt ( string ( ) ) ; } } }"],"bleu":0.035814301050790684,"rouge_l":0.25808652927528325}
{"id":71,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int H = 10 ; int W = sc . nextInt ( ) ; int H = sc . nextInt ( ) ; int W = sc . nextInt ( ) ; int [ ] [ ] = new int [ H ] [ W ] ; boolean [ ] [ ] b = new boolean [ H ] [ W ] ; int [ ] [ ] = new int [ H ] ; for ( int i = 0 ; i < H ; i ++ ) { for ( int j = 0 ; j < W ; j ++ ) { b [ i ] [ j ] = sc . nextInt ( ) - 1 ; } } int c = 0 ; for ( int i = 0 ; i < H ; i ++ ) { for ( int j = 0 ; j < W ; j ++ ) { if ( c [ j ] [ i ] == ' ) { b [ i ] [ j ] = true ; } } if ( ( j < H ) { for ( int i = 0 ; i < H ; i ++ ) { for ( int j = 0 ; j < W ; j ++ ) { b [ i ] [ j ] = true ; } } } } int ans = 0 ; for ( int i = 0 ; i < H ; i ++ ) { for ( int k = 0 ; k < W ; k ++ ) { for ( int l = 0 ; l < C ; l ++ ) { for ( int r = 0 ; l < W ; l ++ ) { if ( c [ l ] [ r ] == d [ l ] [ r ] ) { ans ++ ; } } } } } System . out . println ( ans ) ; } }"],"references":["import java . util . Scanner ; public class Main { static int sum ; static int [ ] dx = { 0 , 0 , 1 , - 1 } ; static int [ ] dy = { 1 , - 1 , 0 , 0 } ; static char [ ] [ ] map ; static int count ; static boolean [ ] [ ] ma ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; map = new char [ 10 ] [ 10 ] ; for ( int i = 0 ; i < 10 ; i ++ ) { String a = sc . next ( ) ; for ( int j = 0 ; j < 10 ; j ++ ) { map [ i ] [ j ] = a . charAt ( j ) ; if ( map [ i ] [ j ] == ' o ' ) { sum ++ ; } } } for ( int i = 0 ; i < 10 ; i ++ ) { for ( int j = 0 ; j < 10 ; j ++ ) { if ( map [ i ] [ j ] == ' x ' ) { map [ i ] [ j ] = ' o ' ; count = 0 ; ma = new boolean [ 10 ] [ 10 ] ; dfs ( j , i ) ; if ( count == ( sum + 1 ) ) { System . out . println ( \" YES \" ) ; return ; } else { map [ i ] [ j ] = ' x ' ; } } } } System . out . println ( \" NO \" ) ; } static boolean judge ( int x , int y ) { return x >= 0 && x < 10 && y >= 0 && y < 10 ; } static void dfs ( int x , int y ) { if ( ma [ y ] [ x ] == true ) { return ; } count ++ ; map [ y ] [ x ] = ' x ' ; ma [ y ] [ x ] = true ; for ( int i = 0 ; i < 4 ; i ++ ) { if ( judge ( x + dx [ i ] , y + dy [ i ] ) && map [ y + dy [ i ] ] [ x + dx [ i ] ] != ' x ' ) { dfs ( x + dx [ i ] , y + dy [ i ] ) ; } } map [ y ] [ x ] = ' o ' ; } }"],"bleu":0.3351008910600519,"rouge_l":0.4398542832463289}
{"id":72,"predictions":["import java . util . ArrayList ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int num = sc . nextInt ( ) ; Map < Character , Integer > map = new HashMap < > ( ) ; int c = 0 ; for ( int i = 0 ; i < num ; i ++ ) { if ( map . containsKey ( num ) ) { map . put ( num , map . get ( num ) + 1 ) ; } else { map . put ( num , 1 ) ; } } for ( int i = 0 ; i < num ; i ++ ) { if ( map . containsKey ( num ) ) { map . put ( num , 1 ) ; } } System . out . println ( \" Yes \" ) ; } }"],"references":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int [ ] arr = new int [ 26 ] ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { arr [ s . charAt ( i ) - ' a ' ] ++ ; } for ( int i = 0 ; i < 26 ; i ++ ) { if ( arr [ i ] % 2 != 0 ) { System . out . println ( \" No \" ) ; return ; } } System . out . println ( \" Yes \" ) ; } }"],"bleu":0.45819280638973064,"rouge_l":0.6310566874274253}
{"id":73,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int M = sc . nextInt ( ) ; int [ ] x = sc . nextInt ( ) ; int [ ] y = new int [ N + 1 ] ; for ( int i = 0 ; i < N ; i ++ ) { x [ i ] = sc . nextInt ( ) ; y [ i ] = sc . nextInt ( ) ; } int [ ] l = new int [ N + 1 ] ; int [ ] t = new int [ N + 1 ] ; for ( int i = 0 ; i < N ; i ++ ) { l [ i ] = sc . nextInt ( ) - x [ i + 1 ] + l [ i ] ; } int [ ] [ ] dp = new int [ N + 1 ] [ N + 1 ] ; for ( int i = 0 ; i < N + 1 ; i ++ ) { for ( int j = 0 ; j < N ; j ++ ) { dp [ i ] [ j ] = Math . max ( dp [ i + 1 ] [ j ] , ( l [ i ] - x [ j ] ) ; } } int max = 0 ; for ( int i = 0 ; i <= N ; i ++ ) { max = Math . max ( max , ( x [ i ] - x [ i ] ) ) ; } System . out . println ( max ) ; } }"],"references":["import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int L = scanner . nextInt ( ) ; int N = scanner . nextInt ( ) ; int [ ] x = new int [ N ] ; int [ ] y = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { x [ i ] = scanner . nextInt ( ) ; y [ N - i - 1 ] = L - x [ i ] ; } long [ ] x2 = new long [ N + 1 ] ; long [ ] y2 = new long [ N + 1 ] ; for ( int i = 1 ; i <= N ; i ++ ) x2 [ i ] = x2 [ i - 1 ] + x [ i - 1 ] * 2L ; for ( int i = 1 ; i <= N ; i ++ ) y2 [ i ] = y2 [ i - 1 ] + y [ i - 1 ] * 2L ; long max = x [ N - 1 ] ; for ( int n = N - 1 ; n > 0 ; n -- ) { int m = N - n ; if ( n > m ) { max = Math . max ( max , Math . max ( x2 [ n - 1 ] - x2 [ n - m - 1 ] + y2 [ m ] - y2 [ 0 ] + x [ n - 1 ] , x2 [ n ] - x2 [ n - m ] + y2 [ m - 1 ] - y2 [ 0 ] + y [ m - 1 ] ) ) ; } else { max = Math . max ( max , Math . max ( x2 [ n - 1 ] - x2 [ 0 ] + y2 [ m ] - y2 [ m - n ] + x [ n - 1 ] , x2 [ n ] - x2 [ 0 ] + y2 [ m - 1 ] - y2 [ Math . max ( m - n - 1 , 0 ) ] + y [ m - 1 ] ) ) ; } } max = Math . max ( max , y [ N - 1 ] ) ; System . out . println ( max ) ; } }"],"bleu":0.36562686902941394,"rouge_l":0.5491847487864582}
{"id":74,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] a = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] cnt = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { c [ i ] -- ; } int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { int count = 0 ; for ( int j = 0 ; j < N ; j ++ ) { if ( count [ j ] > 0 ) { count ++ ; } else { ans ++ ; } } } System . out . println ( ans ) ; } }"],"references":["import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int res = 0 ; Integer [ ] a = new Integer [ n ] ; Map < Integer , Integer > map = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; map . put ( a [ i ] , map . getOrDefault ( a [ i ] , 0 ) + 1 ) ; } Arrays . sort ( a , ( x , y ) -> y - x ) ; for ( int key : a ) { int countKey = map . getOrDefault ( key , 0 ) ; if ( countKey > 0 ) { map . put ( key , countKey - 1 ) ; int diff = Integer . highestOneBit ( key ) * 2 - key ; int countDiff = map . getOrDefault ( diff , 0 ) ; if ( countDiff > 0 ) { map . put ( diff , countDiff - 1 ) ; res ++ ; } else map . put ( key , countKey ) ; } } System . out . println ( res ) ; } }"],"bleu":0.3517387765692074,"rouge_l":0.546643161451447}
{"id":75,"predictions":["import java . io . * ; import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int C = sc . nextInt ( ) ; int [ ] [ ] v = new int [ n ] [ n ] ; int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { v [ i ] = sc . nextInt ( ) ; c [ i ] = sc . nextInt ( ) ; } int [ ] sum = new int [ n + 1 ] ; for ( int i = 0 ; i < n + 1 ; i ++ ) sum [ i ] = new int [ n + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) sum [ i ] = sum [ i - 1 ] - sum [ n - 1 - i - 1 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i - 1 ; j >= 0 ; j -- ) { sum [ j ] = sum [ i + 1 ] - sum [ j ] ; } if ( c [ i ] > 0 ) c [ j ] = sum [ i - 1 ] - sum [ j ] ; } int ans = Math . max ( max ( n - 1 , sum [ n - 1 ] - sum [ n - 1 ] ) - sum [ n - 1 ] ; for ( int i = n - 1 ; i > 0 ; i -- ) ans = Math . max ( ans , max [ i ] - sum [ n - 1 ] ) ; return ans ; } }"],"references":["import java . util . * ; public class Main { public static Scanner sc ; public static void main ( String [ ] args ) { sc = new Scanner ( System . in ) ; final int INF = 1_000_000_000 ; int n = sc . nextInt ( ) ; long c = sc . nextLong ( ) ; long [ ] x = new long [ n ] ; long [ ] v = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { x [ i ] = sc . nextLong ( ) ; v [ i ] = sc . nextLong ( ) ; } long sum1 = 0 ; long sum2 = 0 ; long [ ] dp1 = new long [ n + 1 ] ; long [ ] dp2 = new long [ n + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) { sum1 += v [ i ] ; dp1 [ i + 1 ] = sum1 - x [ i ] ; dp1 [ i + 1 ] = Math . max ( dp1 [ i ] , dp1 [ i + 1 ] ) ; sum2 += v [ n - i - 1 ] ; dp2 [ i + 1 ] = sum2 - ( c - x [ n - i - 1 ] ) ; dp2 [ i + 1 ] = Math . max ( dp2 [ i ] , dp2 [ i + 1 ] ) ; } long ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { long a1 = Math . max ( dp1 [ i + 1 ] , dp1 [ i + 1 ] - x [ i ] + dp2 [ n - i - 1 ] ) ; long a2 = Math . max ( dp2 [ i + 1 ] , dp2 [ i + 1 ] - ( c - x [ n - i - 1 ] ) + dp1 [ n - i - 1 ] ) ; long aa = Math . max ( a1 , a2 ) ; ans = Math . max ( ans , aa ) ; } System . out . println ( ans ) ; } }"],"bleu":0.42423287376449903,"rouge_l":0.5729638248360481}
{"id":76,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; System . out . println ( ( n - 1 ) * ( m - 1 ) ) ; } }"],"references":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; System . out . println ( ( a - 1 ) * ( b - 1 ) ) ; } }"],"bleu":0.8566743677524833,"rouge_l":0.9444444444444445}
{"id":77,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int a [ ] [ ] = new int [ n ] [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; a [ b ] [ c ] = sc . nextInt ( ) ; c [ b ] [ c ] = sc . nextInt ( ) ; } int max = 100 ; for ( int i = 0 ; i < n ; i ++ ) { int a [ ] [ ] = new int [ n + 1 ] ; for ( int b = 0 ; b < m ; b ++ ) { for ( int c = 0 ; c < n ; c ++ ) { int a = sc . nextInt ( ) ; int b [ ] c = sc . nextInt ( ) ; a [ b ] [ c ] = Math . min ( a [ b ] [ c ] , max ) ; max = Math . max ( max , a [ b ] [ c ] ) ; } } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { for ( int k = 0 ; k < m ; k ++ ) { int a = sc . nextInt ( ) - 1 ; int b = sc . nextInt ( ) - 1 ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int c = sc . nextInt ( ) - 1 ; for ( int k = 0 ; k <= c ; k ++ ) { int c = sc . nextInt ( ) ; int d = Math . min ( c , d ) ; if ( c [ c ] [ k ] > max ) { max = Math . min ( max , ( c [ k ] + b ) , c ) ; } } } } } System . out . println ( max ) ; } }"],"references":["import java . util . Scanner ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int ma = sc . nextInt ( ) ; int mb = sc . nextInt ( ) ; int [ ] [ ] dp = new int [ 401 ] [ 401 ] ; for ( int i = 0 ; i < 401 ; i ++ ) { Arrays . fill ( dp [ i ] , Integer . MAX_VALUE ) ; } dp [ 0 ] [ 0 ] = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; for ( int j = 400 ; j >= a ; j -- ) { for ( int k = 400 ; k >= b ; k -- ) { if ( dp [ j - a ] [ k - b ] != Integer . MAX_VALUE ) { dp [ j ] [ k ] = Math . min ( dp [ j ] [ k ] , c + dp [ j - a ] [ k - b ] ) ; } } } } int ans = Integer . MAX_VALUE ; for ( int i = 1 ; 401 > Math . max ( ma , mb ) * i ; i ++ ) { if ( dp [ ma * i ] [ mb * i ] != Integer . MAX_VALUE ) { ans = Math . min ( ans , dp [ ma * i ] [ mb * i ] ) ; } } if ( ans == Integer . MAX_VALUE ) { System . out . println ( - 1 ) ; } else { System . out . println ( ans ) ; } } }"],"bleu":0.4177000609367655,"rouge_l":0.5255541614387286}
{"id":78,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer tokenizer = new StringTokenizer ( br . readLine ( ) ) ; int N = Integer . parseInt ( tokenizer . nextToken ( ) ) ; int res = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( tokenizer . nextToken ( ) ) { res ++ ; } } System . out . println ( res ) ; } }"],"references":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; if ( b == 100 ) { System . out . println ( 101 * ( int ) Math . pow ( 100 , a ) ) ; } else { System . out . println ( b * ( int ) Math . pow ( 100 , a ) ) ; } } }"],"bleu":0.3574925399653528,"rouge_l":0.5499556606562223}
{"id":79,"predictions":["import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int total = 0 ; int counter = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) { total += 3 ; } System . out . println ( count ) ; } }"],"references":["import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = Integer . parseInt ( sc . next ( ) ) ; System . out . println ( n \/ 3 ) ; sc . close ( ) ; } }"],"bleu":0.49530111782439945,"rouge_l":0.6266190263510495}
{"id":80,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String a = sc . next ( ) ; System . out . println ( \" A \" + \" C \" ) ; } }"],"references":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; sc . next ( ) ; System . out . println ( \" A \" + sc . next ( ) . charAt ( 0 ) + \" C \" ) ; sc . next ( ) ; } }"],"bleu":0.71324884297192,"rouge_l":0.8325615403363391}
{"id":81,"predictions":["import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; if ( s . equals ( \" T \" ) ) { System . out . println ( \" YES \" ) ; } else { System . out . println ( \" NO \" ) ; } } }"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . OutputStream ; import java . io . PrintWriter ; import java . util . StringTokenizer ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; Task solver = new Task ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class Task { public void solve ( int testNumber , InputReader in , PrintWriter out ) { String S = in . next ( ) ; out . println ( S . charAt ( S . length ( ) - 1 ) == ' T ' ? \" YES \" : \" NO \" ) ; } } static class InputReader { public BufferedReader reader ; public StringTokenizer tokenizer ; public InputReader ( InputStream stream ) { reader = new BufferedReader ( new InputStreamReader ( stream ) , 32768 ) ; tokenizer = null ; } public String next ( ) { while ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } public double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } } }"],"bleu":0.027143406533945976,"rouge_l":0.2615662378695554}
{"id":82,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int N = scanner . nextInt ( ) ; int X [ ] = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { X [ i ] = scanner . nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( X [ i ] == i - 1 ) { count ++ ; } } System . out . println ( count ) ; } }"],"references":["import java . util . * ; public class Main { static int [ ] [ ] [ ] dp ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int prev = - 1 ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int a = sc . nextInt ( ) ; if ( prev == a ) { count ++ ; prev = - 1 ; } else { prev = a ; } } System . out . println ( count ) ; } }"],"bleu":0.5800253396391201,"rouge_l":0.6749209694415175}
{"id":83,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int iX = sc . nextInt ( ) ; int [ ] aC = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ N ] ; for ( int i = 0 ; i < i ++ ) b [ i ] = sc . nextInt ( ) ; int [ ] c = new int [ N ] ; for ( int i = 1 ; i < i + 1 ; i ++ ) { c [ i ] = sc . nextInt ( ) - 1 ; } for ( int i = 1 ; i < i ; i ++ ) { for ( int i = 2 ; i < N ; i ++ ) c [ i ] += a [ i ] + b [ i ] ; } int i = 0 ; for ( int i = 2 ; i <= N ; i ++ ) { int j = i * i + 1 ; for ( int j = 2 ; j <= i ; j ++ ) { if ( i != j ) break ; } if ( j > 0 ) break ; else if ( i % 2 == 0 ) break ; } System . out . println ( i ) ; } }"],"references":["import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; long X = sc . nextLong ( ) ; long [ ] positionArr = new long [ N ] ; long [ ] cumulativeSum = new long [ N + 1 ] ; for ( int i = 0 ; i < N ; i ++ ) { positionArr [ i ] = sc . nextLong ( ) ; cumulativeSum [ i + 1 ] = cumulativeSum [ i ] + positionArr [ i ] ; } long sum = X * N + 5 * cumulativeSum [ N ] ; for ( int i = 1 ; i < N ; i ++ ) { long cost = X * i + 5 * ( cumulativeSum [ N ] - cumulativeSum [ N - i ] ) ; for ( int j = 5 , k = N - i ; k >= 0 ; j += 2 , k -= i ) { if ( cost > sum ) { break ; } cost += j * ( cumulativeSum [ k ] - cumulativeSum [ Math . max ( k - i , 0 ) ] ) ; } sum = Math . min ( sum , cost ) ; } System . out . println ( sum + X * N ) ; } }"],"bleu":0.41668930940195337,"rouge_l":0.5585278276481149}
{"id":84,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; double a = sc . nextDouble ( ) ; double b = sc . nextDouble ( ) ; System . out . println ( ( a + b ) * h \/ 2 ) ; } }"],"references":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = Integer . parseInt ( sc . next ( ) ) ; int b = Integer . parseInt ( sc . next ( ) ) ; int h = Integer . parseInt ( sc . next ( ) ) ; System . out . println ( ( a + b ) * h \/ 2 ) ; } }"],"bleu":0.5750008862042748,"rouge_l":0.7841838722243865}
{"id":85,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; char [ ] [ ] s = new char [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { s [ i ] = sc . next ( ) . toCharArray ( ) ; } int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s [ i ] [ 0 ] == ' . ' ) { cnt ++ ; } } while ( cnt < n - 1 ) { if ( s [ i ] [ c ] != ' . ' ) { cnt ++ ; } cnt ++ ; } System . out . println ( cnt ) ; } }"],"references":["import java . util . Arrays ; import java . util . Comparator ; import java . util . Scanner ; public class Main implements Runnable { public static void main ( String [ ] args ) { new Thread ( null , new Main ( ) , \" \" , Runtime . getRuntime ( ) . maxMemory ( ) ) . start ( ) ; } public void run ( ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; boolean [ ] [ ] a = new boolean [ n ] [ n ] ; for ( int i = 0 ; i < n ; ++ i ) { String s = sc . next ( ) ; for ( int j = 0 ; j < n ; ++ j ) { a [ i ] [ n - 1 - j ] = s . charAt ( j ) == ' o ' ; } } int cnt = 0 ; for ( int i = 0 ; i < n ; ++ i ) { for ( int j = 0 ; j < n ; ++ j ) { if ( a [ i ] [ j ] ) continue ; if ( ! a [ i ] [ j ] ) { ++ cnt ; for ( int k = j ; k < n ; ++ k ) { a [ i ] [ k ] = true ; } for ( int k = 0 ; i + 1 < n && k <= j ; ++ k ) { a [ i + 1 ] [ k ] = true ; } } } } System . out . println ( cnt ) ; } static void tr ( Object ... objects ) { System . out . println ( Arrays . deepToString ( objects ) ) ; } }"],"bleu":0.25090272647900447,"rouge_l":0.5168222003929274}
{"id":86,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] x = new int [ n ] ; int [ ] y = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { x [ i ] = sc . nextInt ( ) ; y [ i ] = sc . nextInt ( ) ; } double [ ] time = new double [ n ] ; for ( int i = 0 ; i < n ; i ++ ) time [ i ] = sc . nextInt ( ) ; double [ ] min = new double [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) min = Math . min ( time [ i ] , time [ j ] - time [ i ] ) ; min = Math . min ( min , time ) ; } long [ ] time = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { time [ i ] = time [ i ] - time [ i - 1 ] + time [ i ] ;"],"references":["import java . util . * ; public class Main { private class Section { int l , r , v ; public Section ( int now , int t , int v ) { this . l = now ; this . r = now + t ; this . v = v ; } public double getMaxV ( double t ) { if ( t < l ) { return v + ( l - t ) ; } else if ( r < t ) { return v + ( t - r ) ; } else { return v ; } } } public void main ( Scanner sc ) { int n = sc . nextInt ( ) ; int t [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { t [ i ] = sc . nextInt ( ) ; } Section secs [ ] = new Section [ n + 2 ] ; int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { int v = sc . nextInt ( ) ; secs [ i ] = new Section ( sum , t [ i - 1 ] , v ) ; sum += t [ i - 1 ] ; } secs [ 0 ] = new Section ( 0 , 0 , 0 ) ; secs [ n + 1 ] = new Section ( sum , 0 , 0 ) ; double ans = 0.0 ; for ( double now = 0.0 ; now <= sum - 0.5 ; now += 0.5 ) { double v1 = secs [ 0 ] . getMaxV ( now ) ; double v2 = secs [ 0 ] . getMaxV ( now + 0.5 ) ; for ( int i = 1 ; i < n + 2 ; i ++ ) { v1 = Math . min ( v1 , secs [ i ] . getMaxV ( now ) ) ; v2 = Math . min ( v2 , secs [ i ] . getMaxV ( now + 0.5 ) ) ; } ans += ( v1 + v2 ) * 0.25 ; } System . out . println ( ans ) ; } public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; new Main ( ) . main ( sc ) ; sc . close ( ) ; } }"],"bleu":0.25378110684864885,"rouge_l":0.4012434672914038}
{"id":87,"predictions":["import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int M = sc . nextInt ( ) ; int [ ] x = new int [ M + 1 ] ; int [ ] y = new int [ M + 1 ] ; for ( int i = 0 ; i < M ; i ++ ) { x [ i ] = sc . nextInt ( ) ; y [ i ] += x [ i ] ; } int [ ] b [ ] = new int [ M + 1 ] ; int [ ] sum = new int [ M + 1 ] ; for ( int i = 0 ; i < N ; i ++ ) { b [ i ] = sc . nextInt ( ) ; sum [ i ] += x [ i - 1 ] ; } for ( int i = 0 ; i < M ; i ++ ) { sum [ i ] += x [ i ] ; } long ans = 0 ; for ( int i = 0 ; i < M ; i ++ ) { sum += sum [ i ] ; ans += sum [ i ] ; } System . out . println ( ans ) ; } }"],"references":["import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int M = sc . nextInt ( ) ; int l [ ] = new int [ N ] ; int r [ ] = new int [ N ] ; int s [ ] = new int [ N ] ; int point [ ] = new int [ M ] ; int sum = 0 ; for ( int i = 0 ; i < N ; i ++ ) { l [ i ] = sc . nextInt ( ) - 1 ; r [ i ] = sc . nextInt ( ) - 1 ; s [ i ] = sc . nextInt ( ) ; sum += s [ i ] ; point [ l [ i ] ] += s [ i ] ; if ( r [ i ] != M - 1 ) { point [ r [ i ] + 1 ] -= s [ i ] ; } } int min = Integer . MAX_VALUE ; int temp = 0 ; for ( int i = 0 ; i < M ; i ++ ) { temp += point [ i ] ; min = Math . min ( min , temp ) ; } System . out . println ( sum - min ) ; } }"],"bleu":0.5690393713434118,"rouge_l":0.6650302837105515}
{"id":88,"predictions":["import java . util . * ; class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int d = sc . nextInt ( ) ; System . out . println ( \" Friendship \" ) ; for ( int j = 0 ; j < 25 ; j ++ ) { System . out . println ( \" Friendship \" ) ; } } }"],"references":["import java . util . * ; public class Main { static Scanner sc = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { int D = sc . nextInt ( ) ; String S = \" \" ; switch ( D ) { case 22 : S = \" Christmas ▁ Eve ▁ Eve ▁ Eve \" ; break ; case 23 : S = \" Christmas ▁ Eve ▁ Eve \" ; break ; case 24 : S = \" Christmas ▁ Eve \" ; break ; case 25 : S = \" Christmas \" ; break ; } System . out . println ( S ) ; } }"],"bleu":0.2799317331966614,"rouge_l":0.4562879850397382}
{"id":89,"predictions":["import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; if ( a == 0 ) System . out . println ( \" No \" ) ; else System . out . println ( \" Yes \" ) ; } }"],"references":["import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; String turn = \" Ant \" ; while ( n > 0 ) { if ( turn . equals ( \" Ant \" ) ) { n -= a ; turn = \" Bug \" ; } else { n -= b ; turn = \" Ant \" ; } } if ( turn . equals ( \" Ant \" ) ) { System . out . println ( \" Bug \" ) ; } else { System . out . println ( \" Ant \" ) ; } } }"],"bleu":0.43735779700295213,"rouge_l":0.6838036335523772}
{"id":90,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String S = sc . next ( ) ; System . out . println ( S . replaceFirst ( \" Right \" ) ) ; } }"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . UncheckedIOException ; import java . util . Scanner ; import java . util . StringTokenizer ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . nextLine ( ) ; String [ ] bu = s . split ( \" ▁ \" ) ; StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < bu . length - 1 ; i ++ ) { if ( bu [ i ] . charAt ( 0 ) == ' L ' ) { sb . append ( \" < ▁ \" ) ; } else if ( bu [ i ] . charAt ( 0 ) == ' R ' ) { sb . append ( \" > ▁ \" ) ; } else if ( bu [ i ] . charAt ( 0 ) == ' A ' ) { sb . append ( \" A ▁ \" ) ; } } if ( bu [ bu . length - 1 ] . charAt ( 0 ) == ' L ' ) { sb . append ( \" < \" ) ; } else if ( bu [ bu . length - 1 ] . charAt ( 0 ) == ' R ' ) { sb . append ( \" > \" ) ; } else if ( bu [ bu . length - 1 ] . charAt ( 0 ) == ' A ' ) { sb . append ( \" A \" ) ; } System . out . println ( sb . toString ( ) ) ; } static class SC { private BufferedReader reader = null ; private StringTokenizer tokenizer = null ; public SC ( InputStream in ) { reader = new BufferedReader ( new InputStreamReader ( in ) ) ; } public String next ( ) { if ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } } return tokenizer . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } public long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } } }"],"bleu":0.0010604822133496602,"rouge_l":0.17576271186440678}
{"id":91,"predictions":["import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String a = sc . next ( ) ; if ( a . charAt ( 0 ) == a . charAt ( 1 ) ) { System . out . println ( \" Yes \" ) ; return ; } } }"],"references":["import java . util . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; String X = sc . next ( ) ; if ( X . charAt ( 0 ) == X . charAt ( 1 ) && X . charAt ( 1 ) == X . charAt ( 2 ) ) { System . out . println ( \" Yes \" ) ; } else if ( X . charAt ( 1 ) == X . charAt ( 2 ) && X . charAt ( 2 ) == X . charAt ( 3 ) ) { System . out . println ( \" Yes \" ) ; } else { System . out . println ( \" No \" ) ; } } }"],"bleu":0.3050494040809757,"rouge_l":0.5957862425003487}
{"id":92,"predictions":["import java . util . * ; import java . lang . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = 0 ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; b [ i ] = sc . nextInt ( ) ; } sc . close ( ) ; int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( a [ i ] < a [ j ] ) { a [ j ] = a [ i ] ; } else { c [ j ] = 0 ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( b [ i ] > k ) { ans += b [ i ] ; } } System . out . println ( ans ) ; } }"],"references":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( sc . hasNextInt ( ) ) { int N = sc . nextInt ( ) ; int K = sc . nextInt ( ) ; Map < Integer , Integer > map = new HashMap < > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { int x = sc . nextInt ( ) ; if ( ! map . containsKey ( x ) ) { map . put ( x , 1 ) ; } else { map . put ( x , map . get ( x ) + 1 ) ; } } List < Integer > list = new ArrayList < > ( map . values ( ) ) ; Collections . sort ( list ) ; int ans = 0 ; for ( int i = 0 ; i < list . size ( ) - K ; i ++ ) { ans += list . get ( i ) ; } System . out . println ( ans ) ; } } }"],"bleu":0.38436752880630154,"rouge_l":0.5239978183801473}
{"id":93,"predictions":["import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int a = scan . nextInt ( ) ; int b = scan . nextInt ( ) ; int c = scan . nextInt ( ) ; int a = scan . nextInt ( ) ; int b = scan . nextInt ( ) ; int a = scan . nextInt ( ) ; if ( a * b >= a * b ) { System . out . println ( a * b * a ) ; } else if ( a >= b * b ) { System . out . println ( a * b ) ; } else if ( a >= ( b * a ) { System . out . println ( a * b ) ; } else { System . out . println ( a * b ) ; } } }"],"references":["import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int ans = Math . max ( a * b , c * d ) ; System . out . println ( ans ) ; sc . close ( ) ; } }"],"bleu":0.3700460807552106,"rouge_l":0.6589624419042833}
{"id":94,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; System . out . println ( b - a ) ; } }"],"references":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long a = sc . nextLong ( ) ; long b = sc . nextLong ( ) ; System . out . println ( ( b - a % b ) % b ) ; } }"],"bleu":0.7269556303849227,"rouge_l":0.8883495145631068}
{"id":95,"predictions":["import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long x = sc . nextLong ( ) ; long y = sc . nextLong ( ) ; long inv = 0 ; for ( int i = 0 ; i < Math . min ( x , y - 1 ) ; i ++ ) { fac = ( ( x + i ) * ( x - 1 ) % MOD ; y -- ; } long ans = 10000007 ; for ( int i = 0 ; i < Math . min ( x , y - 1 ) ; i ++ ) { ans = ans * ( ( i + 1 ) * ( x + y - i ) ) % MOD ; } System . out . println ( ans ) ; } }"],"references":["import java . math . BigDecimal ; import java . util . * ; public class Main { static Scanner sc = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { int W = sc . nextInt ( ) ; int H = sc . nextInt ( ) ; System . out . println ( calc ( W - 1 , H - 1 ) ) ; } private static long calc ( long w , long h ) { long start = Math . max ( w , h ) + 1 ; long a = 1 ; long b = 1 ; for ( long i = start ; i <= w + h ; i ++ ) { a *= i ; b *= i - start + 1 ; a = a % 1000000007l ; b = b % 1000000007l ; } return a * pow ( b , 1000000005l ) % 1000000007l ; } static long pow ( long a , long n ) { long mod = 1000000007l ; long tmp = 1 ; while ( n != 0 ) { if ( n % 2 == 1 ) tmp = tmp * a % mod ; a = a * a % mod ; n \/= 2 ; } return tmp ; } }"],"bleu":0.21070855789866472,"rouge_l":0.3741425227988056}
{"id":96,"predictions":["import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] x = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) x [ i ] = sc . nextInt ( ) ; long y = sc . nextLong ( ) ; long ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( x % 2 == 0 ) ans -= x ; else ans -= y ; } System . out . println ( ans ) ; } }"],"references":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; long xor = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int a = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; xor ^= grundy ( a , k ) ; } System . out . println ( ( xor == 0 ) ? \" Aoki \" : \" Takahashi \" ) ; } static long grundy ( int a , int k ) { if ( a % k == 0 ) return a \/ k ; if ( a < k ) return 0 ; long d = a \/ k + 1 ; long rem = a % d ; long c = ( long ) Math . ceil ( ( double ) ( a \/ k * k - rem ) \/ d ) ; long b = d * c + rem ; if ( b % k == 0 ) return b \/ k ; a = ( int ) ( b - d ) ; return grundy ( a , k ) ; } }"],"bleu":0.2787078254869932,"rouge_l":0.47104247104247104}
{"id":97,"predictions":["import java . util . * ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int M = sc . nextInt ( ) ; int [ ] x = new int [ M ] ; int [ ] y = new int [ M ] ; for ( int i = 0 ; i < M ; i ++ ) { x [ i ] = sc . nextInt ( ) ; y [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < M ; i ++ ) { y [ i ] = sc . nextInt ( ) ; } Arrays . sort ( y ) ; long [ ] b = new long [ M ] ; for ( int i = 0 ; i < N ; i ++ ) b [ i ] = y [ i ] ; for ( int i = 0 ; i < M ; i ++ ) b [ i ] = y [ i ] ; for ( int i = 0 ; i < M ; i ++ ) { for ( int j = 0 ; j < N ; j ++ ) { int z = z [ i ] - y [ j ] ; b [ z ] [ j ] = z [ j ] ; } long ans = 1 ; for ( int i = 0 ; i < M ; i ++ ) { for ( int j = 0 ; j < M ; j ++ ) { if ( z [ i ] == 0 ) continue ; if ( b [ i ] == y [ j ] ) continue ; ans ++ ; } } ans = ( ans ) ; System . out . println ( ans ) ; } }"],"references":["import java . io . InputStream ; import java . io . PrintStream ; import java . util . Arrays ; import java . util . Comparator ; import java . util . Scanner ; public class Main { InputStream in = System . in ; PrintStream out = System . out ; void solv ( int [ ] [ ] x ) { Arrays . sort ( x , new Comparator < int [ ] > ( ) { @ Override public int compare ( int [ ] a , int [ ] b ) { int x = a [ 1 ] - b [ 1 ] ; if ( x == 0 ) { return a [ 2 ] - b [ 2 ] ; } return x ; } } ) ; int prev = - 1 ; int num = 0 ; for ( int i = 0 ; i < x . length ; i ++ ) { if ( x [ i ] [ 1 ] != prev ) { num = 1 ; prev = x [ i ] [ 1 ] ; } else { num ++ ; } x [ i ] [ 3 ] = num ; } Arrays . sort ( x , ( a , b ) -> a [ 0 ] - b [ 0 ] ) ; StringBuilder sb = new StringBuilder ( ) ; for ( int [ ] a : x ) { sb . append ( String . format ( \" % 06d % 06d \\n \" , a [ 1 ] , a [ 3 ] ) ) ; } out . print ( sb ) ; } public void _main ( String [ ] args ) { Scanner sc = new Scanner ( in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] [ ] x = new int [ m ] [ 4 ] ; for ( int i = 0 ; i < m ; i ++ ) { x [ i ] = new int [ ] { i , sc . nextInt ( ) , sc . nextInt ( ) , - 1 } ; } solv ( x ) ; sc . close ( ) ; } public static void main ( String [ ] args ) { new Main ( ) . _main ( args ) ; } }"],"bleu":0.3293753516384329,"rouge_l":0.3787866073676261}
{"id":98,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int K = sc . nextInt ( ) ; int [ ] a = new int [ N ] ; int [ ] b = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < N ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int cost = 0 ; for ( int i = 0 ; i < N - 1 ; i ++ ) { for ( int j = i ; j < N ; j ++ ) { if ( a [ j ] < b [ i ] ) { cost += b [ j ] ; } } } int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < N ; i ++ ) { int ans = Math . min ( ans , min ) ; ans = Math . min ( ans , min ) ; } System . out . println ( min ) ; } }"],"references":["import java . util . Arrays ; import java . util . PriorityQueue ; import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int N = scan . nextInt ( ) ; int K = scan . nextInt ( ) ; int Q = scan . nextInt ( ) ; int [ ] A = new int [ N ] ; int [ ] B = new int [ N ] ; for ( int i = 0 ; i < N ; ++ i ) { A [ i ] = scan . nextInt ( ) ; B [ i ] = A [ i ] ; } Arrays . sort ( B ) ; int ans = 1000000001 ; PriorityQueue < Integer > que = new PriorityQueue < > ( ) ; for ( int i = 0 ; i < N ; ++ i ) { if ( i + Q - 1 >= N || B [ i + Q - 1 ] - B [ i ] >= ans ) continue ; int left = - 1 , right = ans ; while ( right - left > 1 ) { int center = ( right + left ) \/ 2 ; int cnt = 0 ; que . clear ( ) ; for ( int j = 0 ; j < N ; ++ j ) { if ( A [ j ] < B [ i ] ) que . clear ( ) ; else { que . add ( A [ j ] ) ; if ( que . size ( ) >= K ) { if ( que . poll ( ) - B [ i ] <= center ) ++ cnt ; if ( cnt >= Q ) { break ; } } } } if ( cnt >= Q ) right = center ; else left = center ; } ans = Math . min ( ans , right ) ; } System . out . println ( ans ) ; } }"],"bleu":0.3418973989189266,"rouge_l":0.5559237779618889}
{"id":99,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; System . out . println ( a + \" ▁ \" + b ) ; } }"],"references":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] a = new int [ 2 ] ; a [ 0 ] = sc . nextInt ( ) ; a [ 1 ] = sc . nextInt ( ) ; System . out . println ( a [ 1 ] + \" ▁ \" + a [ 0 ] ) ; } }"],"bleu":0.6299698904638309,"rouge_l":0.8085236541598696}
{"id":100,"predictions":["import java . util . * ; import java . util . stream . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = sc . nextInt ( ) ; int max = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { max = Math . max ( max , arr [ i ] ) ; } for ( int i = 0 ; i < n ; i ++ ) { max = Math . max ( max , arr [ i ] ) ; } int ans = 2000 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > max ) { ans = i ; } } System . out . println ( ans ) ; } }"],"references":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; char [ ] arr = new char [ ] { ' A ' , ' B ' , ' X ' , ' Y ' } ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < arr . length ; i ++ ) { for ( int j = 0 ; j < arr . length ; j ++ ) { for ( int k = 0 ; k < arr . length ; k ++ ) { for ( int l = 0 ; l < arr . length ; l ++ ) { if ( i == k && j == l ) { continue ; } String x = s . replaceAll ( String . valueOf ( arr [ i ] ) + String . valueOf ( arr [ j ] ) , \" L \" ) ; x = x . replaceAll ( String . valueOf ( arr [ k ] ) + String . valueOf ( arr [ l ] ) , \" R \" ) ; int len = x . length ( ) ; if ( min > len ) { min = len ; } } } } } System . out . println ( min ) ; } }"],"bleu":0.35813711207650634,"rouge_l":0.5275319235186812}
{"id":101,"predictions":["import java . util . Arrays ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; int sum = 0 ; int p = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += a [ i ] ; sum += a [ i ] ; } System . out . println ( sum ) ; sc . close ( ) ; } }"],"references":["import java . util . Arrays ; import java . util . Comparator ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; Integer [ ] a = new Integer [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = sc . nextInt ( ) ; Arrays . sort ( a , Comparator . reverseOrder ( ) ) ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( i % 2 == 0 ) { ans += a [ i ] ; } } System . out . println ( ans ) ; } }"],"bleu":0.7453981809252218,"rouge_l":0.8313123725721645}
{"id":102,"predictions":["import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; char [ ] [ ] s = new char [ N ] [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { s [ i ] = sc . next ( ) . toCharArray ( ) ; } int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < i ; j ++ ) { if ( s [ i ] . charAt ( j ) == ' x ' && s [ i ] [ j ] != ' o ' ) { ans ++ ; } } } System . out . println ( ans ) ; } }"],"references":["import java . util . * ; public class Main { private static int n ; private static String [ ] x ; private static int count = 0 ; public static void input ( ) { Scanner scan = new Scanner ( System . in ) ; n = scan . nextInt ( ) ; x = new String [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { x [ i ] = scan . next ( ) ; } } public static void main ( String args [ ] ) { input ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( x [ i ] . contains ( \" x \" ) ) { int j = 0 ; while ( x [ i ] . indexOf ( ' x ' , j ) != - 1 ) { j = x [ i ] . indexOf ( ' x ' , j ) + 1 ; count ++ ; } } } boolean flag = true ; for ( int i = 0 ; i < 9 ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( x [ j ] . charAt ( i ) == ' o ' ) { if ( flag ) { count ++ ; flag = false ; } } else flag = true ; } flag = true ; } System . out . println ( count ) ; } }"],"bleu":0.307989414243739,"rouge_l":0.5368727375967066}
{"id":103,"predictions":["import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int M = sc . nextInt ( ) ; ArrayList < Integer > [ ] graph = new ArrayList [ N + 1 ] ; for ( int i = 0 ; i < M ; i ++ ) { int a = sc . nextInt ( ) - 1 ; int b = sc . nextInt ( ) - 1 ; graph [ a ] . add ( b ) ; } for ( int i = 0 ; i < N + 1 ; i ++ ) { int b = sc . nextInt ( ) - 1 ; graph [ b - 1 ] . add ( a - 1 ) ; } for ( int i = 1 ; i < N + 1 ; i ++ ) { int c = sc . nextInt ( ) - 1 ; graph [ b - 1 ] . add ( a ) ; } for ( int i = 1 ; i <= N ; i ++ ) { int tmp = sc . nextInt ( ) - 1 ; graph [ b ] . add ( c ) ; } System . out . println ( 0 ) ; sc . close ( ) ; } }"],"references":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; HashMap < Integer , ArrayList < Integer > > map = new HashMap < > ( ) ; boolean [ ] isVisited = new boolean [ n + 1 ] ; isVisited [ 0 ] = true ; for ( int i = 0 ; i < m ; i ++ ) { int num1 = sc . nextInt ( ) ; int num2 = sc . nextInt ( ) ; if ( map . containsKey ( num1 ) ) { map . get ( num1 ) . add ( num2 ) ; } else { ArrayList < Integer > list = new ArrayList < > ( ) ; list . add ( num2 ) ; map . put ( num1 , list ) ; } if ( map . containsKey ( num2 ) ) { map . get ( num2 ) . add ( num1 ) ; } else { ArrayList < Integer > list = new ArrayList < > ( ) ; list . add ( num1 ) ; map . put ( num2 , list ) ; } } System . out . println ( helper ( map , isVisited , 1 ) ) ; } private static int helper ( HashMap < Integer , ArrayList < Integer > > map , boolean [ ] isVisited , int current ) { if ( isVisited [ current ] || ! map . containsKey ( current ) ) return 0 ; isVisited [ current ] = true ; if ( check ( isVisited ) ) { isVisited [ current ] = false ; return 1 ; } ArrayList < Integer > list = map . get ( current ) ; int count = 0 ; for ( int num : list ) { count += helper ( map , isVisited , num ) ; } isVisited [ current ] = false ; return count ; } private static boolean check ( boolean [ ] isVisited ) { for ( int i = 0 ; i < isVisited . length ; i ++ ) { if ( ! isVisited [ i ] ) return false ; } return true ; } }"],"bleu":0.2334098825283666,"rouge_l":0.4317463313358185}
{"id":104,"predictions":["import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int min = m \/ 2 ; for ( int i = 0 ; i < m ; i ++ ) { int j = m \/ 2 ; if ( i < m ) break ; min = m \/ 2 ; } System . out . println ( min ) ; } }"],"references":["import java . io . * ; import java . util . * ; import java . lang . Math . * ; public class Main { private static MyScanner scanner ; public static void main ( String [ ] args ) { Main instance = new Main ( ) ; scanner = instance . new MyScanner ( ) ; instance . solve ( ) ; } private void solve ( ) { try { Long counter = 0l ; Long N = scanner . nextLong ( ) ; Long M = scanner . nextLong ( ) ; Long amari ; if ( M > 2 * N ) { counter += N ; M -= 2 * N ; } else { counter += M \/ 2 ; M -= ( M \/ 2 ) * 2 ; } if ( M > 3 ) { counter += M \/ 4 ; } System . out . println ( counter ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } } private class MyScanner { String [ ] s ; int i ; BufferedReader br ; String reg = \" ▁ \" ; MyScanner ( ) { s = new String [ 0 ] ; i = 0 ; br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } public String next ( ) throws IOException { if ( i < s . length ) return s [ i ++ ] ; String line = br . readLine ( ) ; while ( line . equals ( \" \" ) ) { line = br . readLine ( ) ; } s = line . split ( reg , 0 ) ; i = 0 ; return s [ i ++ ] ; } public int nextInt ( ) throws NumberFormatException , IOException { return Integer . parseInt ( next ( ) ) ; } public double nextDouble ( ) throws NumberFormatException , IOException { return Double . parseDouble ( next ( ) ) ; } public long nextLong ( ) throws NumberFormatException , IOException { return Long . parseLong ( next ( ) ) ; } } }"],"bleu":0.034034275296712345,"rouge_l":0.25574119266629125}
{"id":105,"predictions":["import java . util . Arrays ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; String s = scan . next ( ) ; int k = scan . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i - 1 ) ) { ans ++ ; break ; } } System . out . println ( ans ) ; } }"],"references":["import java . util . Scanner ; public class Main { private static Scanner sc = new Scanner ( System . in ) ; public static void main ( String args [ ] ) { String s = sc . nextLine ( ) ; long k = sc . nextLong ( ) ; int numOfOnes = 0 ; int ans = 1 ; for ( char ch : s . toCharArray ( ) ) { if ( ch != '1' ) { ans = Integer . valueOf ( String . valueOf ( ch ) ) ; break ; } else { numOfOnes ++ ; } } System . out . println ( k <= numOfOnes ? \"1\" : ans ) ; } }"],"bleu":0.4349722841273393,"rouge_l":0.593272997433473}
{"id":106,"predictions":["import java . util . Arrays ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = scan . nextInt ( ) ; } Arrays . sort ( a ) ; int result = 0 ; for ( int i = 0 ; i < n ; i ++ ) { result += a [ i ] ; } System . out . println ( result ) ; } }"],"references":["import java . util . * ; import java . lang . * ; import java . math . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] pr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { pr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( pr ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( pr [ pr . length - 1 - i ] != pr [ pr . length - 1 - i - 1 ] ) { System . out . println ( pr [ pr . length - 1 - i - 1 ] ) ; break ; } } sc . close ( ) ; } }"],"bleu":0.511216999456966,"rouge_l":0.7124830534988007}
{"id":107,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int A = sc . nextInt ( ) ; int B = sc . nextInt ( ) ; int C = sc . nextInt ( ) ; System . out . println ( ( A * B * C ) ) ; } }"],"references":["import java . math . BigInteger ; import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] abc = scanner . nextLine ( ) . split ( \" ▁ \" , 3 ) ; BigInteger a = new BigInteger ( abc [ 0 ] ) ; BigInteger b = new BigInteger ( abc [ 1 ] ) ; BigInteger c = new BigInteger ( abc [ 2 ] ) ; BigInteger x = a . multiply ( b ) . multiply ( c ) ; BigInteger mod = new BigInteger ( \"1000000007\" ) ; System . out . println ( x . mod ( mod ) ) ; } }"],"bleu":0.24867463389922853,"rouge_l":0.5124539425202653}
{"id":108,"predictions":["import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int P = sc . nextInt ( ) ; int [ ] x = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { x [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < N - 1 ; i ++ ) { if ( x % 2 == 0 ) { ans ++ ; } else { ans = ( int ) Math . pow ( 2 , N - 1 ) ; } } System . out . println ( ans ) ; } }"],"references":["import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int p = sc . nextInt ( ) ; int even = 0 ; int odd = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int a = sc . nextInt ( ) ; if ( a % 2 == 0 ) { even ++ ; } else { odd ++ ; } } if ( p == 0 ) { if ( odd == 0 ) { System . out . println ( ( long ) Math . pow ( 2 , n ) ) ; } else { System . out . println ( ( long ) Math . pow ( 2 , n - 1 ) ) ; } } else { if ( odd == 0 ) { System . out . println ( 0 ) ; } else { System . out . println ( ( long ) Math . pow ( 2 , n - 1 ) ) ; } } } }"],"bleu":0.41960183638089377,"rouge_l":0.6041191936897459}
{"id":109,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; HashSet < String > set = new HashSet < > ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { set . add ( s . charAt ( i ) ) ; } System . out . println ( 1 ) ; } }"],"references":["import java . io . * ; import java . util . * ; import java . math . * ; public class Main { static boolean debug = false ; static boolean debug2 = false ; public static void main ( String [ ] args ) throws java . io . IOException { debug = 1 <= args . length ; debug2 = 2 <= args . length ; BufferedReader in = new BufferedReader ( new InputStreamReader ( System . in ) ) ; String [ ] e = in . readLine ( ) . split ( \" ▁ \" ) ; char b = in . readLine ( ) . charAt ( 0 ) ; String l = in . readLine ( ) ; int n = 0 ; for ( int i = 0 ; i < e . length ; ++ i ) { if ( 0 <= l . indexOf ( e [ i ] ) ) { ++ n ; } } boolean f = 0 <= l . indexOf ( b ) ; switch ( n ) { case 6 : System . out . println ( 1 ) ; break ; case 5 : System . out . println ( f ? 2 : 3 ) ; break ; case 4 : System . out . println ( 4 ) ; break ; case 3 : System . out . println ( 5 ) ; break ; default : System . out . println ( 0 ) ; break ; } } }"],"bleu":0.0976111221930393,"rouge_l":0.3862063143677191}
{"id":110,"predictions":["import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int x1 = sc . nextInt ( ) ; int y1 = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; int [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; b [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } long ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int x2 = Math . abs ( a [ i ] - x [ i ] ) - 1 ; int y2 = Math . abs ( y [ i ] - y1 ) ; long ans = Math . abs ( y2 - y1 ) ; long ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { for ( int k = 0 ; k <= i ; k ++ ) { int x = Math . abs ( ( x - y ) * ( y - y1 ) ; long y2 = Math . abs ( y2 - y ) ; ans += ( long ) Math . abs ( y - y ) ; ans = Math . abs ( y - y2 ) ; } } } System . out . println ( ans ) ; sc . close ( ) ; } }"],"references":["import java . awt . * ; import java . util . * ; public class Main { static Scanner s = new Scanner ( System . in ) ; static int g ( ) { return Integer . parseInt ( s . next ( ) ) ; } public static void main ( String [ ] $ ) { Point st = new Point ( g ( ) , g ( ) ) , go = new Point ( g ( ) , g ( ) ) ; if ( st . y > go . y ) { Point buf = go ; go = st ; st = buf ; } Comparator < Point > c = Comparator . comparingDouble ( Point :: getX ) ; TreeSet < Point > p = new TreeSet < > ( st . x < go . x ? c : c . reversed ( ) ) ; for ( int i = g ( ) ; i > 0 ; -- i ) { int x = g ( ) , y = g ( ) ; if ( st . y <= y && y <= go . y ) p . add ( new Point ( x , y ) ) ; } int v = lis ( p . subSet ( st , true , go , true ) ) ; System . out . println ( ( Math . abs ( st . x - go . x ) + Math . abs ( st . y - go . y ) ) * 100L + v * - 20 + ( v == Math . min ( go . y - st . y , Math . abs ( go . x - st . x ) ) + 1 ? v + 1 : v ) * 5 * Math . PI ) ; } static int lis ( NavigableSet < Point > p ) { ArrayList < Integer > l = new ArrayList < > ( ) ; l . add ( Integer . MIN_VALUE ) ; while ( ! p . isEmpty ( ) ) { int y = p . pollFirst ( ) . y ; if ( l . get ( l . size ( ) - 1 ) < y ) l . add ( y ) ; else { int v = Collections . binarySearch ( l , y ) ; if ( v < 0 ) l . set ( ~ v , y ) ; } } return l . size ( ) - 1 ; } }"],"bleu":0.16088406334234742,"rouge_l":0.33920526038072824}
{"id":111,"predictions":["import java . util . * ; public class Main { static Scanner scan = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { int N = scan . nextInt ( ) , Y = scan . nextInt ( ) ; int n = scan . nextInt ( ) ; int i = 0 , j = 0 ; for ( i = 0 ; i <= N ; i ++ ) { j = scan . nextInt ( ) ; if ( ( i * i - j ) == y ) { return i ; } } System . out . print ( ( i + \" ▁ \" + i + \" ▁ \" ) ; } }"],"references":["import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = Integer . parseInt ( sc . next ( ) ) ; int Y = Integer . parseInt ( sc . next ( ) ) ; for ( int a = 0 ; a <= N ; a ++ ) { for ( int b = 0 ; b <= N - a ; b ++ ) { if ( a * 10000 + b * 5000 + ( N - a - b ) * 1000 == Y ) { System . out . println ( a + \" ▁ \" + b + \" ▁ \" + ( N - a - b ) ) ; return ; } } } System . out . println ( \" - 1 ▁ - 1 ▁ - 1\" ) ; } }"],"bleu":0.30458698418719565,"rouge_l":0.5077288941736029}
{"id":112,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; System . out . println ( a * b * 2 ) ; } }"],"references":["import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int s = ( a * c ) + ( a * b ) + ( b * c ) ; System . out . print ( s * 2 ) ; } }"],"bleu":0.7161482338500692,"rouge_l":0.817537813517136}
{"id":113,"predictions":["import java . util . * ; import java . lang . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; String s = sc . next ( ) ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i - 1 ) ) { s . append ( s . charAt ( i ) ) ; break ; } } System . out . print ( s ) ; } }"],"references":["import java . util . * ; public class Main { long INF = Long . MAX_VALUE ; public static void main ( String [ ] args ) { new Main ( ) . solve ( ) ; } void solve ( ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; String S = sc . next ( ) ; String T = sc . next ( ) ; char [ ] s = S . toCharArray ( ) ; char [ ] t = T . toCharArray ( ) ; int ans = 2 * N ; lavel : for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < N - ( i ) ; j ++ ) { if ( s [ i + j ] != t [ j ] ) { continue lavel ; } if ( j == N - i - 1 ) { System . out . println ( ( N + i ) ) ; return ; } } } System . out . println ( ans ) ; } }"],"bleu":0.3479372498206122,"rouge_l":0.5776298518657417}
{"id":114,"predictions":["import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int A = sc . nextInt ( ) ; int B = sc . nextInt ( ) ; int [ ] C = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { C = sc . nextInt ( ) ; } int [ ] C = new int [ N ] ; int [ ] b = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { B [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < N ; i ++ ) { C [ i ] = sc . nextInt ( ) - 1 ; } for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { int a = sc . nextInt ( ) - 1 ; int b = sc . nextInt ( ) - 1 ; int c = sc . nextInt ( ) - 1 ; int d = 0 ; for ( int j = 0 ; j < 2 ; j ++ ) { if ( ( ( j & ( 1 << j ) ) > 0 ) { d = Math . max ( a , B ) ; } else { d = Math . min ( d , Math . min ( d , Math . min ( c , d ) ) ; } } } System . out . println ( ans ) ; } }"],"references":["import java . util . * ; class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; double inA = sc . nextDouble ( ) ; double inB = sc . nextDouble ( ) ; double A = Math . min ( inA , inB ) ; double B = Math . max ( inA , inB ) ; double r = Math . sqrt ( Math . pow ( A , 2 ) + Math . pow ( B , 2 ) ) ; double p = Math . atan ( A \/ B ) ; int N = sc . nextInt ( ) ; for ( int i = 0 ; i < N ; i ++ ) { double inC = sc . nextDouble ( ) ; double inD = sc . nextDouble ( ) ; double C = Math . min ( inC , inD ) ; double D = Math . max ( inC , inD ) ; if ( C >= A && D >= B ) { System . out . println ( \" YES \" ) ; } else if ( C < A && D < B || r < D ) { System . out . println ( \" NO \" ) ; } else if ( C >= r * Math . cos ( Math . asin ( D \/ r ) - 2 * p ) ) { System . out . println ( \" YES \" ) ; } else { System . out . println ( \" NO \" ) ; } } } }"],"bleu":0.2871038742720667,"rouge_l":0.4593975114603798}
{"id":115,"predictions":["import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . StringTokenizer ; import java . io . IOException ; import java . io . BufferedReader ; import java . io . InputStreamReader ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; TaskC solver = new TaskC ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class TaskC { public void solve ( int testNumber , Scanner in , PrintWriter out ) { int n = in . nextInt ( ) ; int m = in . nextInt ( ) ; int [ ] b = new int [ n + 1 ] ; for ( int i = 0 ; i < m ; i ++ ) b [ i ] ++ ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] -- ; } int [ ] cnt = new int [ n + 1 ] ; for ( int i = 0 ; i < m ; i ++ ) { c [ i ] ++ ; } out . println ( cnt ) ; } static class TaskC { public BufferedReader reader ; StringTokenizer tokenizer ; public Reader ( InputStream stream ) { reader = new BufferedReader ( new InputStreamReader ( stream ) , 32768 ) ; tokenizer = null ; } public String next ( ) { while ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } } }"],"references":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int ans [ ] = new int [ n ] ; int a [ ] = new int [ 2 * m ] ; for ( int i = 0 ; i <= 2 * m - 2 ; i = i + 2 ) { a [ i ] = sc . nextInt ( ) ; a [ i + 1 ] = sc . nextInt ( ) ; ans [ a [ i ] - 1 ] ++ ; ans [ a [ i + 1 ] - 1 ] ++ ; } for ( int i = 0 ; i < n ; i ++ ) { System . out . println ( ans [ i ] ) ; } } static int l_min ( int [ ] a ) { Arrays . sort ( a ) ; return a [ 0 ] ; } static int l_max ( int [ ] a ) { int l = a . length ; Arrays . sort ( a ) ; return a [ l - 1 ] ; } public static PrintWriter out ; public static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"bleu":0.38865078498684463,"rouge_l":0.49873272831330223}
{"id":116,"predictions":["import java . util . Scanner ; class Main { static final long MOD = 1000000007 ; public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int A = scan . nextInt ( ) ; long B = scan . nextLong ( ) ; long C = scan . nextLong ( ) ; long [ ] fact = new long [ C ] ; for ( int i = 0 ; i < C ; i ++ ) { fact [ i ] = scan . nextLong ( ) ; } long res = 0 ; for ( int i = 0 ; i < A ; i ++ ) { if ( ( i % 2 == 0 ) { res = 1 ; } else { if ( ( ( i * B ) % 2 == 0 ) { res = ( ( ( i * A - B ) * ( C - A ) ) % MOD ; } else { pow ( ( A , B - B , C ) + 1 ) % MOD ; } } } long inverse ( long ) { long a = ( a * B ) % 2 ; long b = ( a * ( B - B - A ) ) % MOD ; long c = ( a * b ) % MOD ; if ( c % 2 == 1 ) { ans = ( ans * ( c - 1 ) % MOD ; } } long inv = ( a ) % MOD ; long inv = ( ( long ) ( Math . pow ( B , A ) - 1 ) % MOD ; inv = ( ( ( ( MOD - 1 ) * ( A - B ) ) ) % MOD ; } System . out . println ( ( ( long ) ( ans % MOD ) % MOD ) ; } }"],"references":["import java . util . Scanner ; public class Main { static final int MOD = 1000000007 ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; final long A = sc . nextLong ( ) ; final long B = sc . nextLong ( ) ; final long C = sc . nextLong ( ) ; sc . close ( ) ; long div = getInverse ( getMod ( A * ( B + C ) - B * C ) ) ; long c = getMod ( getMod ( B * ( C - A ) ) * div ) ; long r = getMod ( getMod ( C * ( B - A ) ) * div ) ; System . out . println ( r + \" ▁ \" + c ) ; } static long getPower ( long a , int n ) { if ( n == 0 ) { return 1 ; } else if ( n % 2 == 0 ) { return getPower ( getMod ( a * a ) , n \/ 2 ) ; } else { return getMod ( a * getPower ( a , n - 1 ) ) ; } } static long getInverse ( long a ) { return getPower ( a , MOD - 2 ) ; } static long getMod ( long a ) { if ( a >= 0 ) { return a % MOD ; } else { return MOD + a % MOD ; } } }"],"bleu":0.32219035698312287,"rouge_l":0.47411056376573624}
{"id":117,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] x = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { x [ i ] = sc . nextInt ( ) ; } int y = 0 ; for ( int i = 0 ; i < n ; i ++ ) { y = sc . nextInt ( ) ; } System . out . println ( ( x * y [ 0 ] ) \/ g ) ; } }"],"references":["import java . util . * ; import static java . lang . System . * ; public class Main { public static void main ( String [ ] $ ) { Scanner sc = new Scanner ( in ) ; int n = sc . nextInt ( ) ; long ans = 1 ; for ( int i = 0 ; i < n ; i ++ ) { long t = sc . nextLong ( ) ; long g = gcd ( ans , t ) ; ans = t \/ g * ans ; } out . println ( ans ) ; } static long gcd ( long a , long b ) { long temp ; while ( ( temp = a % b ) != 0 ) { a = b ; b = temp ; } return b ; } }"],"bleu":0.4276208023670814,"rouge_l":0.5586474110602325}
{"id":118,"predictions":["import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int odd = 0 ; if ( N % 2 == 0 ) { even = odd \/ 2 ; odd = N \/ 2 + 1 ; } else { even = odd \/ 2 ; } } System . out . println ( even * odd ) ; } }"],"references":["import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int buf = n \/ 2 ; System . out . println ( buf * ( n - buf ) ) ; } }"],"bleu":0.5242461141249627,"rouge_l":0.7357173085061363}
{"id":119,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { a [ i ] [ 0 ] = sc . nextInt ( ) - sc . nextInt ( ) - 1 ; } long ans = 1 ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < c ; j ++ ) { int count = 0 ; for ( int k = 0 ; k < 3 ; k ++ ) { if ( ( a [ i ] [ j ] - c [ i ] == 0 && ( b [ i ] [ j ] - c [ i ] == 0 ) && ( a [ i ] [ j ] - c [ i ] == 0 ) && ( b [ i ] [ j ] == 0 && c [ i ] [ j ] == 0 ) ) { count ++ ; } } } if ( count == 0 ) { ans = 0 ; } else { ans = 0 ; } } System . out . println ( ans ) ; } }"],"references":["import java . util . Arrays ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner reader = new Scanner ( System . in ) ; int [ ] [ ] arr = new int [ 3 ] [ 3 ] ; int [ ] A = new int [ 2 ] ; int [ ] B = new int [ 2 ] ; Arrays . fill ( A , 101 ) ; Arrays . fill ( B , 101 ) ; String ans = \" Yes \" ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { arr [ i ] [ j ] = reader . nextInt ( ) ; } } A [ 0 ] = arr [ 0 ] [ 0 ] - arr [ 1 ] [ 0 ] ; A [ 1 ] = arr [ 1 ] [ 0 ] - arr [ 2 ] [ 0 ] ; B [ 0 ] = arr [ 0 ] [ 0 ] - arr [ 0 ] [ 1 ] ; B [ 1 ] = arr [ 0 ] [ 1 ] - arr [ 0 ] [ 2 ] ; for ( int i = 1 ; i < 3 ; i ++ ) { for ( int j = 1 ; j < 3 ; j ++ ) { if ( arr [ i - 1 ] [ j ] - A [ i - 1 ] != arr [ i ] [ j ] || arr [ i ] [ j - 1 ] - B [ j - 1 ] != arr [ i ] [ j ] ) { ans = \" No \" ; } } } System . out . print ( ans ) ; reader . close ( ) ; } }"],"bleu":0.40665470979137935,"rouge_l":0.4995649280851717}
{"id":120,"predictions":["import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { new Main ( ) . solve ( ) ; } void solve ( ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = sc . nextInt ( ) ; int index = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == arr [ i - 1 ] ) { index ++ ; } } System . out . println ( index + 1 ) ; } }"],"references":["import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; ArrayList < Integer > A = new ArrayList < > ( ) ; ArrayList < Integer > B = new ArrayList < > ( ) ; for ( int i = 0 ; i < 3 ; i ++ ) { int a = sc . nextInt ( ) ; A . add ( a ) ; B . add ( a ) ; } Collections . sort ( A , Comparator . reverseOrder ( ) ) ; for ( int i = 0 ; i < A . size ( ) ; i ++ ) { System . out . println ( A . indexOf ( B . get ( i ) ) + 1 ) ; } } }"],"bleu":0.4880858160437154,"rouge_l":0.5620915032679739}
{"id":121,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] a = new int [ N ] ; int [ ] b = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { a [ i ] = sc . nextInt ( ) - 1 ; b [ i ] = sc . nextInt ( ) - 1 ; } long max = 1 ; for ( int i = 0 ; i < N - 1 ; i ++ ) { max = Math . min ( a [ i ] , b [ i ] ) ; } HashSet < Integer > ans = new HashSet < > ( ) ; for ( int i = 0 ; i < N - 1 ; i ++ ) { for ( int j = 0 ; j < N - 1 ; j ++ ) { ans . add ( a [ j ] ) ; } } System . out . println ( ans ) ; } }"],"references":["import java . util . * ; import java . io . * ; import java . awt . geom . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringBuilder sb = new StringBuilder ( ) ; int n = Integer . parseInt ( br . readLine ( ) ) ; Node [ ] nodes = new Node [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { nodes [ i ] = new Node ( i ) ; } for ( int i = 0 ; i < n - 1 ; i ++ ) { String [ ] s = br . readLine ( ) . split ( \" ▁ \" ) ; int a = Integer . parseInt ( s [ 0 ] ) - 1 ; int b = Integer . parseInt ( s [ 1 ] ) - 1 ; nodes [ a ] . adj . add ( nodes [ b ] ) ; nodes [ b ] . adj . add ( nodes [ a ] ) ; } if ( solve ( nodes [ 0 ] , - 1 ) != 0 ) { System . out . println ( \" Alice \" ) ; } else { System . out . println ( \" Bob \" ) ; } } static int solve ( Node a , int from ) { if ( a . adj . size ( ) == 1 && a . i != 0 ) { return 0 ; } int ans = 0 ; for ( Node n : a . adj ) { if ( n . i != from ) { ans ^= 1 + solve ( n , a . i ) ; } } return ans ; } } class Node { int i ; ArrayList < Node > adj ; public Node ( int ii ) { i = ii ; adj = new ArrayList < Node > ( ) ; } }"],"bleu":0.21835594691058746,"rouge_l":0.4031270148291424}
{"id":122,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int G = sc . nextInt ( ) ; int [ ] [ ] b = new int [ N + 1 ] ; for ( int i = 0 ; i < N ; i ++ ) { b [ i ] [ 0 ] = sc . nextInt ( ) - 1 ; } for ( int i = 1 ; i <= N ; i ++ ) { int a = sc . nextInt ( ) - 1 ; int b = sc . nextInt ( ) - 1 ; b [ b ] [ a ] = sc . nextInt ( ) - 1 ; } int [ ] [ ] g = new int [ N + 1 ] [ 1 ] ; for ( int i = 0 ; i < N + 1 ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { g [ i ] [ j ] += g [ j ] [ i ] ] ; g [ j ] [ i ] = g [ i ] [ j ] ; } } int sum = 0 ; while ( true ) { for ( int i = 0 ; i < N + 1 ; i ++ ) { for ( int j = 0 ; j < N ; j ++ ) { sum += g [ i ] [ j ] ; } if ( j > 0 ) { continue ; } sum += g [ i ] [ j ] ; } if ( sum > 0 ) { sum += d [ i ] [ j ] ; } } System . out . println ( sum ) ; } }"],"references":["import java . util . HashMap ; import java . util . HashSet ; import java . util . Map ; import java . util . Scanner ; import java . util . Set ; public class Main { private static Map < Integer , Set < Integer > > neighborsMap = new HashMap < > ( ) ; private static Set < Integer > p = new HashSet < Integer > ( ) ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; final int N = sc . nextInt ( ) ; final int G = sc . nextInt ( ) ; final int E = sc . nextInt ( ) ; for ( int i = 0 ; i <= N ; i ++ ) neighborsMap . put ( i , new HashSet < Integer > ( ) ) ; for ( int i = 0 ; i < G ; i ++ ) p . add ( sc . nextInt ( ) ) ; for ( int i = 0 ; i < E ; i ++ ) { int id1 = sc . nextInt ( ) ; int id2 = sc . nextInt ( ) ; neighborsMap . get ( id1 ) . add ( id2 ) ; neighborsMap . get ( id2 ) . add ( id1 ) ; } sc . close ( ) ; int ans = 0 ; while ( p . size ( ) > 0 && calcMaxFlow ( 0 , new HashSet < Integer > ( ) ) ) { ans ++ ; } System . out . println ( ans ) ; } private static boolean calcMaxFlow ( int currentId , Set < Integer > visited ) { visited . add ( currentId ) ; if ( p . contains ( currentId ) ) { p . remove ( currentId ) ; return true ; } Integer [ ] neighbors = neighborsMap . get ( currentId ) . toArray ( new Integer [ neighborsMap . get ( currentId ) . size ( ) ] ) ; if ( neighbors . length == 0 ) { return false ; } for ( int n : neighbors ) { if ( visited . contains ( n ) ) { continue ; } neighborsMap . get ( currentId ) . remove ( n ) ; if ( ! calcMaxFlow ( n , visited ) ) { neighborsMap . get ( currentId ) . add ( n ) ; } else { return true ; } } visited . remove ( currentId ) ; return false ; } }"],"bleu":0.27834789726314096,"rouge_l":0.3898078867542973}
{"id":123,"predictions":["import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; System . out . println ( Math . max ( x - x , y ) ) ; } }"],"references":["import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { int x , a , b ; Scanner sc = new Scanner ( System . in ) ; x = sc . nextInt ( ) ; a = sc . nextInt ( ) ; b = sc . nextInt ( ) ; simpleDist ( x , a , b ) ; } private static void simpleDist ( int x , int a , int b ) { int max = 1000 , min = 1 ; if ( ( x <= max && a <= max && b <= max ) && ( x >= min && a >= min && b >= min ) ) { String res = Math . abs ( x - a ) < Math . abs ( x - b ) ? \" A \" : \" B \" ; System . out . println ( res ) ; } } }"],"bleu":0.19075398788499842,"rouge_l":0.47131095630145664}
{"id":124,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int Q = sc . nextInt ( ) ; int [ ] x = new int [ n ] ; int [ ] y = new int [ Q ] ; for ( int i = 0 ; i < Q ; i ++ ) { x [ i ] = sc . nextInt ( ) ; y [ i ] = sc . nextInt ( ) ; } int [ ] map = new int [ Q ] ; for ( int i = 0 ; i < Q ; i ++ ) { map [ i ] = sc . nextInt ( ) ; } int [ ] = new int [ Q ] ; for ( int i = 0 ; i < Q ; i ++ ) { map [ i ] = sc . nextInt ( ) ; } long [ ] count = new long [ Q ; for ( int i = 0 ; i < Q ; i ++ ) { count [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < Q ; i ++ ) { for ( int j = 0 ; j < Q ; j ++ ) { count [ j ] += map [ i ] * ( x [ j ] - x [ i ] ) \/ 3 * ( x [ i ] + y [ j ] - x [ i ] ) \/ 3 * ( y [ i ] ) ; } } int ans [ ] = new int [ Q ] ; int [ ] = new int [ Q ] ; for ( int i = 0 ; i < Q ; i ++ ) { ans [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < Q ; i ++ ) { for ( int j = 0 ; j < Q ; j ++ ) { count [ j ] += map [ i ] * ( x [ j ] - x [ j ] ) \/ 3 * sc . nextInt ( ) ; } } System . out . println ( ans [ Q ] ) ; } }"],"references":["import java . util . Scanner ; class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int input1 = scan . nextInt ( ) ; int input2 = scan . nextInt ( ) ; int [ ] [ ] sui = new int [ input1 ] [ 3 ] ; for ( int [ ] _sui : sui ) { _sui [ 0 ] = scan . nextInt ( ) ; _sui [ 1 ] = scan . nextInt ( ) ; _sui [ 2 ] = scan . nextInt ( ) ; } for ( int repeatCount = 0 ; repeatCount < input2 ; repeatCount ++ ) { int a = scan . nextInt ( ) ; int b = scan . nextInt ( ) ; double answer = 0.0 ; double normal = 0.0 ; double rate1 = 1.0 ; double rate2 = 0.0 ; for ( int i = 0 ; i < sui . length ; i ++ ) { normal = sui [ i ] [ 1 ] * sui [ i ] [ 1 ] * sui [ i ] [ 2 ] \/ 3.0 * Math . PI ; boolean flag = true ; if ( sui [ i ] [ 0 ] <= a && sui [ i ] [ 0 ] + sui [ i ] [ 2 ] >= a ) { rate1 = ( sui [ i ] [ 0 ] + sui [ i ] [ 2 ] - a ) \/ ( double ) sui [ i ] [ 2 ] ; flag = false ; } if ( sui [ i ] [ 0 ] + sui [ i ] [ 2 ] >= b && sui [ i ] [ 0 ] <= b ) { rate2 = ( sui [ i ] [ 0 ] + sui [ i ] [ 2 ] - b ) \/ ( double ) sui [ i ] [ 2 ] ; flag = false ; } if ( sui [ i ] [ 0 ] >= a && sui [ i ] [ 0 ] + sui [ i ] [ 2 ] <= b ) { rate1 = 1.0 ; rate2 = 0.0 ; flag = false ; } if ( flag ) { rate1 = 0.0 ; rate2 = 0.0 ; } answer += normal * ( rate1 * rate1 * rate1 - rate2 * rate2 * rate2 ) ; rate1 = 1.0 ; rate2 = 0.0 ; } System . out . println ( String . format ( \" % 6f \" , answer ) ) ; } } }"],"bleu":0.270577280461183,"rouge_l":0.4593339913002157}
{"id":125,"predictions":["import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int t = 0 ; for ( int i = 0 ; i < 60 ; i ++ ) { t = ( n % 60 ) ; } System . out . println ( t ) ; } }"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . OutputStream ; import java . io . PrintWriter ; import java . util . StringTokenizer ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; Task solver = new Task ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class Task { public void solve ( int testNumber , InputReader in , PrintWriter out ) { int N = in . nextInt ( ) ; int h = N \/ 3600 ; int m = N \/ 60 % 60 ; int s = N % 60 ; out . printf ( \" % 02d : %02d : %02d \" , h , m , s ) ; out . println ( ) ; } } static class InputReader { public BufferedReader reader ; public StringTokenizer tokenizer ; public InputReader ( InputStream stream ) { reader = new BufferedReader ( new InputStreamReader ( stream ) , 32768 ) ; tokenizer = null ; } public String next ( ) { while ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( ) ; } public char nextChar ( ) { return next ( ) . charAt ( 0 ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } public long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } public double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } } }"],"bleu":0.03066961300386827,"rouge_l":0.2529344220464404}
{"id":126,"predictions":["import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } System . out . println ( Math . ceil ( ( n - 1 ) \/ ( k - 1 ) ) ; } }"],"references":["import java . util . * ; import java . io . * ; class Main { public static void main ( String [ ] args ) throws IOException { Scanner sc = new Scanner ( System . in ) ; PrintWriter pw = new PrintWriter ( System . out ) ; int n = sc . nextInt ( ) , k = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int idx = 0 ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; if ( a [ i ] == 1 ) idx = i ; } int ans = n ; int x = k - 1 ; for ( int i = Math . max ( idx - k , 1 ) - 1 ; i < Math . min ( idx + k , n ) ; i ++ ) { int curr = 1 + ( i + x - 1 ) \/ x ; int tmp = n - ( i + k ) ; curr += ( tmp + x - 1 ) \/ x ; ans = Math . min ( ans , curr ) ; } pw . println ( ans ) ; pw . close ( ) ; } static class Scanner { StringTokenizer st ; BufferedReader br ; public Scanner ( InputStream s ) { br = new BufferedReader ( new InputStreamReader ( s ) ) ; } public Scanner ( FileReader s ) { br = new BufferedReader ( s ) ; } public String next ( ) throws IOException { while ( st == null || ! st . hasMoreTokens ( ) ) st = new StringTokenizer ( br . readLine ( ) ) ; return st . nextToken ( ) ; } public int nextInt ( ) throws IOException { return Integer . parseInt ( next ( ) ) ; } public long nextLong ( ) throws IOException { return Long . parseLong ( next ( ) ) ; } public String nextLine ( ) throws IOException { return br . readLine ( ) ; } public boolean ready ( ) throws IOException { return br . ready ( ) ; } public double nextDouble ( ) throws IOException { return Double . parseDouble ( next ( ) ) ; } } }"],"bleu":0.05827149276719579,"rouge_l":0.35783180100400475}
{"id":127,"predictions":["import java . util . Scanner ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; List < Integer > list = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { list . add ( scan . nextInt ( ) ) ; } int [ ] nums = new int [ n ] ; List < Integer > list = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { nums [ i ] = scan . nextInt ( ) ; } for ( int i = 0 ; i < n - 1 ; i ++ ) { list . add ( nums [ i ] ) ; } int ans = 0 ; for ( int i = 0 ; i < list . size ( ) ; i ++ ) { if ( list . get ( i ) == n ) { ans += list . get ( i ) ; list . add ( ans ) ; } } System . out . println ( list . size ( ) ) ; sc . close ( ) ; } }"],"references":["import java . util . Scanner ; class Main { static boolean [ ] al ; static int [ ] c ; static int [ ] t ; static int n ; static int search ( ) { boolean f = true ; for ( int i = 0 ; i < n ; i ++ ) f = ( f && t [ i ] > 0 ) ; if ( f ) return 0 ; int min = n ; for ( int i = 0 ; i < n ; i ++ ) { if ( ! al [ i ] ) { al [ i ] = true ; for ( int j = 0 ; j < n ; j ++ ) t [ j ] += ( c [ ( j + i ) % n ] > 0 ) ? 1 : 0 ; min = Math . min ( min , search ( ) + 1 ) ; for ( int j = 0 ; j < n ; j ++ ) t [ j ] -= ( c [ ( j + i ) % n ] > 0 ) ? 1 : 0 ; al [ i ] = false ; } } return min ; } public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; String cin = scan . next ( ) ; n = cin . length ( ) ; c = new int [ n ] ; t = new int [ n ] ; al = new boolean [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = t [ i ] = ( cin . charAt ( i ) == ' o ' ) ? 1 : 0 ; al [ i ] = false ; } al [ 0 ] = true ; System . out . println ( search ( ) + 1 ) ; } }"],"bleu":0.29965660987298826,"rouge_l":0.40347788979570065}
{"id":128,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; long [ ] p = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) p [ i ] = sc . nextLong ( ) ; Arrays . sort ( p1 ) ; long [ ] c = new long [ n + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = p [ i ] * p [ i ] % m ; } long ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( p [ i ] != p [ i ] ) { ans += c [ i ] * m ; } else { ans += c [ i ] % m ; } } System . out . println ( ans ) ; } }"],"references":["import java . util . * ; public class Main { private final static long MOD = 1000000007 ; public static long mul ( long n , long m ) { return ( n * m ) % MOD ; } public static long fact ( long n ) { long ans = 1 ; for ( long i = n ; i >= 1 ; i -- ) { ans = mul ( ans , i ) ; } return ans ; } public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; int N = s . nextInt ( ) ; int t [ ] = new int [ N ] ; int counter [ ] = new int [ 10001 ] ; for ( int i = 0 ; i < N ; i ++ ) { t [ i ] = s . nextInt ( ) ; counter [ t [ i ] ] ++ ; } Arrays . sort ( t ) ; long currenttime = 0 ; long penalty = 0 ; for ( int time : t ) { currenttime += time ; penalty += currenttime ; } long count = 1 ; for ( int i = 0 ; i < counter . length ; i ++ ) { count = mul ( count , fact ( counter [ i ] ) ) ; } System . out . println ( penalty ) ; System . out . println ( count ) ; } }"],"bleu":0.3447165053931853,"rouge_l":0.5009661835748793}
{"id":129,"predictions":["import java . util . Scanner ; import java . util . ArrayList ; import java . util . List ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int C = sc . nextInt ( ) ; int K = sc . nextInt ( ) ; ArrayList < Integer > T = new ArrayList < > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; ArrayList < Integer > t = new ArrayList < Integer > ( ) ; for ( int j = 0 ; j < n ; j ++ ) { int t = 0 ; for ( int k = 0 ; k < n ; k ++ ) { int u = sc . nextInt ( ) - 1 ; int v = sc . nextInt ( ) - 1 ; int u = sc . nextInt ( ) - 1 ; for ( int k = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int u = sc . nextInt ( ) - 1 ; int v = sc . nextInt ( ) - 1 ; int k = sc . nextInt ( ) - 1 ; for ( int j = 0 ; j < k ; j ++ ) { int u = 0 ; int v = 0 ; for ( int k = 0 ; k < n ; k ++ ) { if ( u >= t ) { int count = 0 ; for ( int k = 0 ; k < k ; k ++ ) { int u = sc . nextInt ( ) - 1 ; if ( u <= t ) ++ ; if ( u <= t ) count ++ ; } else t += u ; } } } } System . out . println ( count ) ; } }"],"references":["import java . util . ArrayList ; import java . util . Collections ; import java . util . List ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int C = sc . nextInt ( ) ; int K = sc . nextInt ( ) ; List < Integer > TList = new ArrayList < > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { TList . add ( sc . nextInt ( ) ) ; } Collections . sort ( TList ) ; int cnt = 0 ; int bus = 0 ; int start = TList . get ( 0 ) ; for ( int i : TList ) { if ( cnt < C && i <= start + K ) { cnt ++ ; continue ; } cnt = 1 ; start = i ; bus ++ ; } bus ++ ; System . out . println ( bus ) ; } }"],"bleu":0.33905177824067334,"rouge_l":0.5709196304570979}
{"id":130,"predictions":["import java . util . Arrays ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a [ ] = new int [ n ] ; int b [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) - b [ i ] ; } Arrays . sort ( a ) ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { b [ j ] = sc . nextInt ( ) - b [ i ] ; } } long [ ] temp = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { temp [ i ] = a [ i ] - b [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { temp [ i ] = b [ i ] - a [ i ] ; } long sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += temp \/ 2 ; } sum += temp [ 0 ] \/ 2 ; System . out . println ( sum ) ; } sc . close ( ) ; } }"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . ArrayList ; public class Main { private static int n ; private static long a , b ; private static long [ ] enemy ; private static boolean C ( long k ) { long cnt = 0 ; for ( long hp : enemy ) { hp -= b * k ; if ( hp > 0 ) { cnt += Math . ceil ( ( double ) hp \/ ( a - b ) ) ; } } if ( cnt > k ) return false ; else return true ; } public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; String [ ] str = br . readLine ( ) . split ( \" ▁ \" ) ; n = Integer . parseInt ( str [ 0 ] ) ; a = Long . parseLong ( str [ 1 ] ) ; b = Long . parseLong ( str [ 2 ] ) ; enemy = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) enemy [ i ] = Long . parseLong ( br . readLine ( ) ) ; long l = 0 , r = ( long ) 1e9 + 1 , med = - 1 ; while ( r - l > 0 ) { med = ( r + l ) \/ 2 ; if ( C ( med ) ) { r = med ; } else { l = med + 1 ; } } System . out . println ( l ) ; } }"],"bleu":0.2463051974453502,"rouge_l":0.3699549162730785}
{"id":131,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int K = sc . nextInt ( ) ; int [ ] a = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { a [ i ] = sc . nextInt ( ) - 1 ; } int [ ] b = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { b [ i ] = sc . nextInt ( ) - 1 ; } System . out . print ( \" Case ▁ # \" + ( i + \" : ▁ \" ) + \" : ▁ \" ) ; for ( int i = 0 ; i < N ; i ++ ) { char [ ] c = sc . next ( ) . toCharArray ( ) ; for ( int j = 0 ; j < N ; j ++ ) { if ( c [ j ] == ' A ' ) b [ j ] = 1 ; } else if ( c [ j ] == ' B ' ) { System . out . print ( \" Case ▁ # \" + i + \" : ▁ \" ) ; System . out . println ( ) ; } else { for ( int i = 0 ; i < N + K ; i ++ ) { System . out . print ( c [ i ] ) ; } System . out . println ( ) ; } } } }"],"references":["import java . io . PrintWriter ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; PrintWriter pw = new PrintWriter ( System . out ) ; int N = sc . nextInt ( ) ; int K = sc . nextInt ( ) ; char [ ] S = sc . next ( ) . toCharArray ( ) ; boolean [ ] a = new boolean [ N ] ; for ( int i = 0 ; i < N ; i ++ ) a [ i ] = S [ i ] == ' A ' ; boolean flip = false ; int idx = 0 ; int T = Math . min ( 2 * N , K ) ; for ( int i = 0 ; i < T ; i ++ ) { if ( a [ idx ] ^ flip ) { a [ idx ] = false ^ flip ; } else { flip ^= true ; a [ idx ] = true ^ flip ; idx = ( idx + 1 ) % N ; } } if ( T < K && N % 2 == 1 ) a [ idx ] ^= ( K - T ) % 2 == 1 ; for ( int i = 0 ; i < N ; i ++ ) pw . print ( a [ ( i + idx ) % N ] ^ flip ? ' A ' : ' B ' ) ; pw . println ( ) ; sc . close ( ) ; pw . close ( ) ; } }"],"bleu":0.4876428661494842,"rouge_l":0.5217367618217476}
{"id":132,"predictions":["import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { new Main ( ) . solve ( ) ; } void solve ( ) { Scanner sc = new Scanner ( System . in ) ; System . out . println ( sc . nextInt ( ) ) ; } }"],"references":["import java . util . Scanner ; public class Main { public static void main ( String [ ] arg ) { Scanner in = new Scanner ( System . in ) ; int a = in . nextInt ( ) ; String op = in . next ( ) ; int b = in . nextInt ( ) ; if ( op . equals ( \" + \" ) ) { System . out . print ( a + b ) ; } else if ( op . equals ( \" - \" ) ) { System . out . print ( a - b ) ; } } }"],"bleu":0.28567047830026365,"rouge_l":0.5036797702387362}
{"id":133,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; String s = sc . next ( ) ; long ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( s . charAt ( i ) == ' U ' ) { ans += i + 1 ; } else { ans += 2 * ( i - 1 ) + 2 * ( i - 1 ) ; } } System . out . println ( ans ) ; } }"],"references":["import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner io = new Scanner ( System . in ) ; String S = io . next ( ) ; long ans = 0 ; for ( int i = 0 ; i < S . length ( ) ; i ++ ) { if ( S . charAt ( i ) == ' U ' ) { ans += ( ( S . length ( ) - 1 ) - i ) + i * 2 ; } else { ans += ( ( S . length ( ) - 1 ) - i ) * 2 + i ; } } System . out . println ( ans ) ; } }"],"bleu":0.6318088127731304,"rouge_l":0.7605036778456552}
{"id":134,"predictions":["import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; if ( a > b ) ans = b ; } System . out . println ( ans ) ; } }"],"references":["import java . util . List ; import java . util . Scanner ; import java . util . stream . Collectors ; import java . util . stream . IntStream ; public class Main { public static String process ( TestCase testCase ) { final int N = testCase . N ; final int X = testCase . X ; final List < Integer > x = testCase . x ; final int num = x . stream ( ) . map ( xi -> Math . abs ( X - xi ) ) . reduce ( Main :: gcd ) . orElseThrow ( ( ) -> new IllegalArgumentException ( \" x ▁ is ▁ empty \" ) ) ; return String . valueOf ( num ) ; } private static int gcd ( int a , int b ) { if ( b == 0 ) { return a ; } else { return gcd ( b , a % b ) ; } } public static void main ( String [ ] args ) { TestCase testCase = readFromInput ( ) ; final String result = process ( testCase ) ; output ( result ) ; } private static TestCase readFromInput ( ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int X = sc . nextInt ( ) ; final List < Integer > x = IntStream . range ( 0 , N ) . mapToObj ( i -> sc . nextInt ( ) ) . collect ( Collectors . toList ( ) ) ; return new TestCase ( N , X , x ) ; } private static void output ( String result ) { System . out . println ( result ) ; } public static class TestCase { final int N ; final int X ; final List < Integer > x ; public TestCase ( int N , int X , List < Integer > x ) { this . N = N ; this . X = X ; this . x = x ; } } }"],"bleu":0.07322657934350833,"rouge_l":0.2981203007518797}
{"id":135,"predictions":["import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int i = sc . nextInt ( ) ; System . out . println ( N - i + 1 ) ; } }"],"references":["import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long N = sc . nextLong ( ) ; long K = sc . nextLong ( ) ; long ans ; ans = N - K + 1 ; System . out . println ( ans ) ; } }"],"bleu":0.5786919460669756,"rouge_l":0.7601692922642841}
{"id":136,"predictions":["import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . StringTokenizer ; import java . io . IOException ; import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . InputStream ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; TaskA solver = new TaskA ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class TaskB { public void solve ( int testNumber , Scanner in , PrintWriter out ) { int n = in . nextInt ( ) ; int A = in . nextInt ( ) ; int B = in . nextInt ( ) ; int [ ] B = new int [ n ] ; int [ ] B = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) B [ i ] = in . nextInt ( ) ; out . println ( \" - 1\" ) ; while ( i >= 0 ) { B [ i ] = B [ i ] - B [ i - 1 ] ; -- ; i -= B [ i ] ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) B [ i ] = B [ i ] ; for ( int i = 0 ; i < n ; i ++ ) B [ i ] -= B [ i ] ; ans += B [ i ] - B [ i ] ; out . println ( ans ) ; } }"],"references":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int A = sc . nextInt ( ) ; int B = sc . nextInt ( ) ; int sq = ( int ) Math . sqrt ( ( double ) N ) ; if ( ( A + B > N + 1 ) || ( A < sq && B < sq ) ) System . out . println ( - 1 ) ; else if ( A + B == N + 1 ) { for ( int i = B ; i <= N ; ++ i ) System . out . print ( i + \" ▁ \" ) ; for ( int i = B - 1 ; i >= 1 ; -- i ) System . out . print ( i + \" ▁ \" ) ; System . out . println ( ) ; } else { int tempA = ( N \/ B ) + ( N % B != 0 ? 1 : 0 ) ; int hidari = 0 ; while ( tempA + hidari != A ) { hidari ++ ; if ( hidari > N ) { System . out . println ( - 1 ) ; return ; } if ( ( N - hidari ) % B == 0 ) tempA -- ; } int nowN = N - hidari ; for ( int i = 1 ; i <= hidari ; ++ i ) System . out . print ( i + \" ▁ \" ) ; for ( int i = 1 ; i <= nowN \/ B ; i ++ ) { for ( int j = i * B ; j > ( i - 1 ) * B ; j -- ) { System . out . print ( ( j + hidari ) + \" ▁ \" ) ; } } for ( int j = nowN ; j > B * ( nowN \/ B ) ; -- j ) System . out . print ( ( j + hidari ) + \" ▁ \" ) ; System . out . println ( ) ; } return ; } }"],"bleu":0.21660803932517825,"rouge_l":0.35016617031378133}
{"id":137,"predictions":["import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; String s = scan . next ( ) ; int max = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { for ( int j = 0 ; j < s . length ( ) ; j ++ ) { if ( i % 2 == 0 ) { max = Math . max ( max , i ) ; } } } System . out . println ( max ) ; } }"],"references":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int min = Integer . MAX_VALUE ; for ( char c = ' a ' ; c <= ' z ' ; c = ( char ) ( c + 1 ) ) { int max = 0 ; int current = 0 ; String t = String . valueOf ( c ) ; int idx = s . indexOf ( t ) ; while ( idx != - 1 ) { if ( max < idx - current ) { max = idx - current ; } current = idx + 1 ; idx = s . indexOf ( t , current ) ; } if ( max < s . length ( ) - current + 1 ) { max = s . length ( ) - current ; } if ( min > max ) { min = max ; } } System . out . println ( min ) ; } }"],"bleu":0.29146583843779483,"rouge_l":0.5192517074136396}
{"id":138,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int H = sc . nextInt ( ) ; int a [ ] = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < N ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } if ( a [ N - 1 ] <= H ) { System . out . println ( 0 ) ; } else { System . out . println ( - 1 ) ; } } } }"],"references":["import java . util . * ; import static java . lang . System . in ; import static java . lang . System . out ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( in ) ; String [ ] input = sc . nextLine ( ) . split ( \" ▁ \" , 0 ) ; int [ ] lh = new int [ 2 ] ; lh [ 0 ] = Integer . parseInt ( input [ 0 ] ) ; lh [ 1 ] = Integer . parseInt ( input [ 1 ] ) ; int num = sc . nextInt ( ) ; int [ ] st = new int [ num ] ; for ( int i = 0 ; i < num ; i ++ ) st [ i ] = sc . nextInt ( ) ; for ( int i = 0 ; i < num ; i ++ ) if ( st [ i ] < lh [ 0 ] ) out . println ( lh [ 0 ] - st [ i ] ) ; else if ( st [ i ] > lh [ 1 ] ) out . println ( - 1 ) ; else out . println ( \"0\" ) ; } }"],"bleu":0.3601550924194803,"rouge_l":0.595171159252522}
{"id":139,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int M = sc . nextInt ( ) ; int [ ] a = new int [ M ] ; int [ ] b = new int [ M ] ; int [ ] c = new int [ M ] ; for ( int i = 0 ; i < M ; i ++ ) { a [ i ] = sc . nextInt ( ) ; b [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ M ] ; for ( int i = 0 ; i < M ; i ++ ) { c [ i ] = sc . nextInt ( ) ; } int [ ] b [ ] = new int [ M ] ; for ( int i = 0 ; i < N ; i ++ ) { b [ c [ i ] = sc . nextInt ( ) - 1 ; } int [ ] c = new int [ M + 1 ] ; for ( int i = 0 ; i < M ; i ++ ) { c [ i ] = sc . nextInt ( ) - 1 ; } for ( int i = 0 ; i < M ; i ++ ) { c [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ M + 1 ] ; int count = 0 ; for ( int i = 0 ; i < N + 1 ; i ++ ) { b [ i ] ] = sc . nextInt ( ) - 1 ; } count ++ ; for ( int i = 0 ; i < M ; ++ ) { b [ i ] = sc . nextInt ( ) ; count ++ ; } System . out . println ( count ) ; } }"],"references":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int M = sc . nextInt ( ) ; int [ ] a = new int [ N ] ; int [ ] b = new int [ N + 1 ] ; int [ ] c = new int [ N ] ; for ( int i = 1 ; i < N + 1 ; i ++ ) { b [ i ] = i ; } for ( int i = 0 ; i < N ; i ++ ) { a [ i ] = sc . nextInt ( ) ; b [ a [ i ] ] -- ; if ( b [ a [ i ] ] >= 0 ) c [ b [ a [ i ] ] ] ++ ; } int L = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( c [ i ] == 0 ) L ++ ; } for ( int i = 0 ; i < M ; i ++ ) { int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; if ( b [ a [ x - 1 ] ] >= 0 ) c [ b [ a [ x - 1 ] ] ] -- ; if ( b [ a [ x - 1 ] ] >= 0 && c [ b [ a [ x - 1 ] ] ] == 0 ) L ++ ; b [ a [ x - 1 ] ] ++ ; a [ x - 1 ] = y ; b [ y ] -- ; if ( b [ y ] >= 0 && c [ b [ y ] ] == 0 ) L -- ; if ( b [ y ] >= 0 ) c [ b [ y ] ] ++ ; System . out . println ( L ) ; } } }"],"bleu":0.529487932036809,"rouge_l":0.6086534216335542}
{"id":140,"predictions":["import java . util . * ; import java . awt . Point ; import static java . lang . Math . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int K = sc . nextInt ( ) ; Pair [ ] arr = new Pair [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { arr [ i ] = new Pair ( sc . nextInt ( ) , sc . nextInt ( ) ) ; } Arrays . sort ( arr ) ; int [ ] b = new int [ K ] ; for ( int i = 0 ; i < K ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int [ ] b = new int [ K + 1 ] ; int [ ] c = new int [ K + 1 ] ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = i ; j < K ; j ++ ) { if ( arr [ j ] < - 1 ) { b [ j ] = arr [ j ] ; } else { b [ j ] = i - 1 ; } } } int min = Integer . MAX_VALUE ; for ( int i = K - 1 ; i < K ; i ++ ) { if ( arr [ i ] < min ) { min = b [ i ] ; } } System . out . println ( min ) ; } }"],"references":["import java . io . PrintWriter ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int K = sc . nextInt ( ) ; sc . nextLine ( ) ; String [ ] s = sc . nextLine ( ) . split ( \" ▁ \" ) ; int [ ] n = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { n [ i ] = Integer . parseInt ( s [ i ] ) ; } PriorityQueue < int [ ] > pq = new PriorityQueue < int [ ] > ( new MyComp ( ) ) ; PrintWriter out = new PrintWriter ( System . out ) ; for ( int i = 0 ; i < N ; i ++ ) { pq . add ( new int [ ] { i + 1 , n [ i ] } ) ; if ( i >= K - 1 ) { if ( i >= K ) pq . poll ( ) ; int [ ] p = pq . poll ( ) ; out . println ( p [ 0 ] ) ; pq . add ( p ) ; } } out . flush ( ) ; } } class MyComp implements Comparator { @ Override public int compare ( Object arg1 , Object arg2 ) { int v1 = ( ( int [ ] ) arg1 ) [ 1 ] ; int v2 = ( ( int [ ] ) arg2 ) [ 1 ] ; return Integer . compare ( v2 , v1 ) ; } } Note : . \/ Main . java uses unchecked or unsafe operations . Note : Recompile with - Xlint : unchecked for details ."],"bleu":0.418888652224495,"rouge_l":0.5085886489201406}
{"id":141,"predictions":["import java . util . Arrays ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; ArrayList < Integer > list = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { list . add ( Integer . parseInt ( scanner . next ( ) ) ) ; } Collections . sort ( list ) ; int ans = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { ans += list . get ( i ) * list . get ( i - 1 ) ; } System . out . println ( ans ) ; } }"],"references":["import java . util . Arrays ; import java . util . Collections ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N , b , c = 0 , d = 0 ; N = sc . nextInt ( ) ; Integer [ ] a = new Integer [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { b = sc . nextInt ( ) ; a [ i ] = b ; } Arrays . sort ( a , Collections . reverseOrder ( ) ) ; for ( int i = 0 ; i < N ; i ++ ) { c += a [ i ] ; i ++ ; if ( i < N ) { d += a [ i ] ; } } System . out . println ( c - d ) ; sc . close ( ) ; } }"],"bleu":0.4565631982730005,"rouge_l":0.6150965139729185}
{"id":142,"predictions":["import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . io . IOException ; import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . InputStreamReader ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; TaskA solver = new TaskA ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class TaskA { public void solve ( int testNumber , FastScanner in , PrintWriter out ) { out . println ( in . next ( ) == 0 ? \" YES \" : \" NO \" ) ; } } static class FastScanner { private BufferedReader br ; private StringTokenizer st ; public FastScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } public String next ( ) { while ( st == null || ! st . hasMoreTokens ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } public long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } public long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ; } String nextLine ( ) throws IOException { return br . readLine ( ) ; } } }"],"references":["import java . util . Scanner ; public class Main { static Scanner s = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { String [ ] days = { \" Monday \" , \" Tuesday \" , \" Wednesday \" , \" Thursday \" , \" Friday \" , \" Saturday \" , \" Sunday \" } ; String in = s . next ( ) ; for ( int i = 0 ; i < 7 ; i ++ ) { if ( days [ i ] . equals ( in ) ) { System . out . println ( Math . max ( 5 - i , 0 ) ) ; return ; } } } }"],"bleu":0.12210696910066933,"rouge_l":0.29607087827426815}
{"id":143,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . StringTokenizer ; public class A { public static void main ( String [ ] args ) throws Exception { BufferedReader br = new BufferedReader ( new FileReader ( \" input . txt \" ) ) ; BufferedWriter bw = new BufferedWriter ( new FileWriter ( \" output . txt \" ) ) ; int N = Integer . parseInt ( br . readLine ( ) ) ; int [ ] a = new int [ N ] ; int [ ] a = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) a [ i ] = Integer . parseInt ( br . readLine ( ) ) ; for ( int i = 0 ; i < N ; i ++ ) a [ i ] = Integer . parseInt ( br . readLine ( ) ) ; int [ ] b = Arrays . parseInt ( b ) ) ; int sum1 = 0 , sum2 = 0 ; for ( int i = 0 ; i < N ; i ++ ) { sum1 [ i ] = Integer . parseInt ( br . readLine ( ) ) ; int [ ] b = Arrays . copyOf ( b [ i ] ) ; sum1 [ i ] = sum1 + b [ i ] ; b [ i ] = Math . max ( b [ i ] , sum1 ) ; } b [ i ] = sum ; for ( int i = 0 ; i < N ; i ++ ) b [ i ] = sum2 [ i - 1 ] ; out . println ( \" Case ▁ # \" + i + \" : ▁ \" + b [ i ] ) ; } b [ 0 ] = Integer . parseInt ( b [ 0 ] ) ; for ( int i = 0 ; i < N ; i ++ ) b [ i ] = Integer . parseInt ( b [ i ] ) ; return a ; } }"],"references":["import java . util . * ; import static java . lang . Math . * ; public class A { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int T = in . nextInt ( ) ; for ( int zz = 1 ; zz <= T ; zz ++ ) { int N = in . nextInt ( ) ; long [ ] M = new long [ N ] ; for ( int i = 0 ; i < N ; i ++ ) M [ i ] = in . nextInt ( ) ; long ans1 = 0 ; for ( int i = 0 ; i < N - 1 ; i ++ ) { ans1 += max ( 0 , M [ i ] - M [ i + 1 ] ) ; } long max = 0 ; for ( int i = 0 ; i < N - 1 ; i ++ ) { max = max ( max , M [ i ] - M [ i + 1 ] ) ; } long ans2 = 0 ; for ( int i = 0 ; i < N - 1 ; i ++ ) ans2 += min ( max , M [ i ] ) ; System . out . format ( \" Case ▁ # % d : ▁ % d ▁ % d \\n \" , zz , ans1 , ans2 ) ; } } }"],"bleu":0.2839001475824054,"rouge_l":0.5046043390042141}
{"id":144,"predictions":["import java . util . * ; import static java . lang . Math . * ; public class C { void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int T = in . nextInt ( ) ; for ( int C = 1 ; C <= T ; ++ C ) { System . out . printf ( \" Case ▁ # % d : ▁ % d \\n \" , solve ( ) ) ; } } }"],"references":["import java . util . * ; import java . io . * ; public class Main implements Runnable { public Scanner in ; public PrintWriter out ; Main ( ) throws IOException { in = new Scanner ( new File ( \" in \" ) ) ; out = new PrintWriter ( new File ( \" out \" ) ) ; } void close ( ) throws IOException { out . close ( ) ; } public void run ( ) { int tn = in . nextInt ( ) ; for ( int test = 1 ; test <= tn ; test ++ ) { int n = in . nextInt ( ) ; double [ ] x = new double [ n ] ; double [ ] y = new double [ n ] ; double [ ] r = new double [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { x [ i ] = in . nextDouble ( ) ; y [ i ] = in . nextDouble ( ) ; r [ i ] = in . nextDouble ( ) ; } double res = 1E100 ; if ( n == 1 ) { res = r [ 0 ] ; } else if ( n == 2 ) { res = Math . max ( r [ 0 ] , r [ 1 ] ) ; } else { for ( int i = 0 ; i < 3 ; i ++ ) { int j = ( i + 1 ) % 3 ; int k = ( i + 2 ) % 3 ; res = Math . min ( res , Math . max ( r [ i ] , 0.5 * ( Math . hypot ( x [ j ] - x [ k ] , y [ j ] - y [ k ] ) + r [ j ] + r [ k ] ) ) ) ; } } out . println ( \" Case ▁ # \" + test + \" : ▁ \" + res ) ; } try { close ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } public static void main ( String [ ] args ) throws IOException { new Thread ( new Main ( ) ) . start ( ) ; } }"],"bleu":0.014741352266267731,"rouge_l":0.22739981360671013}
{"id":145,"predictions":["import java . io . File ; import java . io . FileNotFoundException ; import java . io . IOException ; import java . io . PrintWriter ; import java . util . Scanner ; public class A { public static void main ( String [ ] args ) throws FileNotFoundException { Scanner in = new Scanner ( new File ( \" C . txt \" ) ) ; PrintWriter out = new PrintWriter ( \" output . txt \" ) ) ; int T = in . nextInt ( ) ; for ( int i = 0 ; i < T ; i ++ ) { String s = in . next ( ) ; int x = 0 ; for ( int j = 0 ; j < s . length ( ) ; j ++ ) { if ( s . charAt ( j ) == ' W ' ) { x ++ ; } else if ( s . charAt ( j ) < x ) { x += s . charAt ( j ) ; } } out . println ( \" Case ▁ # \" + ( i + 1 ) + \" : ▁ \" + x ) ; } out . close ( ) ; } }"],"references":["import java . util . * ; import static java . lang . Math . * ; public class A { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int T = in . nextInt ( ) ; int [ ] num = { 0 , 6 , 2 , 8 , 3 , 4 , 5 , 7 , 1 , 9 } ; char [ ] ch = { ' Z ' , ' X ' , ' W ' , ' G ' , ' H ' , ' R ' , ' F ' , ' V ' , ' O ' , ' E ' } ; String [ ] word = { \" ZERO \" , \" SIX \" , \" TWO \" , \" EIGHT \" , \" THREE \" , \" FOUR \" , \" FIVE \" , \" SEVEN \" , \" ONE \" , \" NINE \" } ; for ( int zz = 1 ; zz <= T ; zz ++ ) { String S = in . next ( ) ; int [ ] C = new int [ 26 ] ; for ( int i = 0 ; i < S . length ( ) ; i ++ ) { C [ ( int ) ( S . charAt ( i ) - ' A ' ) ] ++ ; } int [ ] ans = new int [ 10 ] ; for ( int i = 0 ; i < 10 ; i ++ ) { int count = C [ ( int ) ( ch [ i ] - ' A ' ) ] ; ans [ num [ i ] ] += count ; for ( int j = 0 ; j < word [ i ] . length ( ) ; j ++ ) { C [ ( int ) ( word [ i ] . charAt ( j ) - ' A ' ) ] -= count ; } } for ( int i = 0 ; i < 10 ; i ++ ) { if ( C [ i ] != 0 ) { throw new RuntimeException ( ) ; } } System . out . format ( \" Case ▁ # % d : ▁ \" , zz ) ; for ( int i = 0 ; i < 10 ; i ++ ) for ( int j = 0 ; j < ans [ i ] ; j ++ ) System . out . print ( i ) ; System . out . println ( ) ; } } }"],"bleu":0.15670470994631802,"rouge_l":0.3589059986210067}
{"id":146,"predictions":["import java . io . File ; import java . io . FileNotFoundException ; import java . io . PrintWriter ; import java . util . Arrays ; import java . util . Scanner ; public class B { public static void main ( String [ ] args ) throws FileNotFoundException { Scanner in = new Scanner ( new File ( \" C - large . in \" ) ) ; PrintWriter out = new PrintWriter ( \" C - large . out \" ) ) ; int T = in . nextInt ( ) ; for ( int zz = 1 ; zz <= T ; zz ++ ) { out . print ( \" Case ▁ # \" + ( zz + 1 ) + \" : \" ) ; int n = in . nextInt ( ) ; int base = 0 ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) b [ i ] = in . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) b [ i ] = in . nextInt ( ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += b [ i ] = in . nextInt ( ) ; for ( int j = 0 ; j < n ; j ++ ) { sum += b [ j ] * b [ i ] ; } if ( sum == 0 ) return 0 ; boolean ok = true ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < i ; j ++ ) { sum += b [ i ] * b [ j ] ; } if ( j > 0 ) continue ; int c = 0 ; for ( int i = 0 ; i < n ; i ++ ) if ( sum [ i ] > 0 ) continue ; for ( int j = 0 ; j < n ; j ++ ) c [ j ] = c [ j ] ; int p = 0 ; for ( int k = 0 ; k > 0 ; k -- ) { int x = 0 ; for ( int i = 0 ; k < n ; k ++ ) sum += b [ i ] ; b [ k ] = true ; } } out . printf ( \" Case ▁ # % d : ▁ % d \\n \" , zz ) ; } out . close ( ) ; } }"],"references":["import java . io . * ; import java . util . * ; public class AAA { boolean getsum1 ( int n , int k ) { TreeSet < Integer > y = new TreeSet < Integer > ( ) ; while ( true ) { if ( y . contains ( n ) ) return false ; y . add ( n ) ; int res = 0 ; while ( n != 0 ) { res += ( n % k ) * ( n % k ) ; n \/= k ; } n = res ; if ( n == 1 ) return true ; } } TreeMap < Integer , Integer > result = new TreeMap < Integer , Integer > ( ) ; void solve ( ) throws IOException { Scanner in = new Scanner ( new FileInputStream ( \" input . txt \" ) ) ; PrintWriter out = new PrintWriter ( new FileOutputStream ( \" output . txt \" ) ) ; String s ; int n = in . nextInt ( ) ; in . nextLine ( ) ; for ( int t = 1 ; t <= n ; ++ t ) { s = in . nextLine ( ) ; if ( s == null ) break ; ArrayList < Integer > a = new ArrayList < Integer > ( ) ; Scanner in2 = new Scanner ( s ) ; while ( in2 . hasNextInt ( ) ) a . add ( in2 . nextInt ( ) ) ; int mask = 0 ; for ( int i = 0 ; i < a . size ( ) ; ++ i ) mask += 1 << a . get ( i ) ; if ( a . size ( ) == 9 ) result . put ( mask , 11814485 ) ; int tr = 2 ; if ( result . containsKey ( mask ) ) { tr = result . get ( mask ) ; } else { while ( true ) { boolean good = true ; for ( int i = a . size ( ) - 1 ; i >= 0 ; -- i ) if ( ! getsum1 ( tr , a . get ( i ) ) ) { good = false ; break ; } if ( good ) break ; tr ++ ; } result . put ( mask , tr ) ; } out . println ( \" Case ▁ # \" + t + \" : ▁ \" + tr ) ; out . flush ( ) ; } out . close ( ) ; } public static void main ( String [ ] args ) throws IOException { AAA a = new AAA ( ) ; a . solve ( ) ; } }"],"bleu":0.26177369520046506,"rouge_l":0.36863733683265415}
{"id":147,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . Arrays ; import java . util . StringTokenizer ; public class A { public static void main ( String [ ] args ) { FastScanner fs = new FastScanner ( ) ; int T = 1 ; for ( int C = 1 ; C <= T ; C ++ ) { int N = fs . nextInt ( ) - 1 ; int A = fs . nextInt ( ) - 1 ; int B = fs . nextInt ( ) - 1 ; int [ ] [ ] graph = new int [ N ] [ 2 ] ; for ( int i = 0 ; i < N - 1 ; i ++ ) { graph [ a ] = fs . nextInt ( ) - 1 ; } int ans = 0 ; for ( int i = 0 ; i < N - 1 ; i ++ ) { int b = fs . nextInt ( ) - 1 ; ans = Math . max ( ans , sum ) ; ans ++ ; } out . println ( n - ans ) ; } } static class FastScanner { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( \" \" ) ; String next ( ) { while ( ! st . hasMoreTokens ( ) ) try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . io . FileReader ; import java . io . FileWriter ; import java . io . IOException ; import java . io . PrintWriter ; import java . util . ArrayList ; import java . util . Scanner ; public class FullBinaryTree { public final static String INPUT_FILE_NAME = \" B - large ( 1 ) . in \" ; public final static String OUTPUT_FILE_NAME = \" FullBinaryTree . out \" ; public static void main ( String [ ] args ) { try ( Scanner in = new Scanner ( new FileReader ( INPUT_FILE_NAME ) ) ; PrintWriter out = new PrintWriter ( new FileWriter ( OUTPUT_FILE_NAME ) ) ) { int numT = in . nextInt ( ) ; for ( int t = 1 ; t <= numT ; t ++ ) { System . out . println ( \" Case ▁ \" + t ) ; int numNode = in . nextInt ( ) ; ArrayList < Node > nodes = new ArrayList < > ( ) ; for ( int i = 0 ; i < numNode ; i ++ ) { nodes . add ( new Node ( ) ) ; } for ( int i = 0 ; i < numNode - 1 ; i ++ ) { int a = in . nextInt ( ) - 1 ; int b = in . nextInt ( ) - 1 ; nodes . get ( a ) . addChild ( nodes . get ( b ) ) ; nodes . get ( b ) . addChild ( nodes . get ( a ) ) ; } int best = 0 ; for ( Node n : nodes ) { best = Math . max ( best , n . maxChildren ( null ) ) ; } int res = numNode - best ; out . println ( \" Case ▁ # \" + t + \" : ▁ \" + res ) ; } } catch ( IOException e ) { e . printStackTrace ( ) ; } } public static class Node { ArrayList < Node > children ; public Node ( ) { children = new ArrayList < > ( ) ; } public void addChild ( Node n ) { children . add ( n ) ; } public int maxChildren ( Node parent ) { int best = 0 ; int best2 = 0 ; for ( Node n : children ) { if ( n != parent ) { int nv = n . maxChildren ( this ) ; if ( nv > best ) { best2 = best ; best = nv ; } else if ( nv > best2 ) { best2 = nv ; } } } if ( best2 == 0 ) return 1 ; return best + best2 + 1 ; } } }"],"bleu":0.32129808250428393,"rouge_l":0.4846255701044579}
{"id":148,"predictions":["import java . util . * ; import java . lang . * ; public class A { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int T = in . nextInt ( ) ; for ( int i = 0 ; i < T ; i ++ ) { int n = in . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = in . nextInt ( ) ; b [ i ] = in . nextInt ( ) ; count ++ ; } System . out . println ( \" Case ▁ # \" + ( count + 1 ) + \" : ▁ \" + count ) ; } }"],"references":["import java . math . BigInteger ; import java . util . Scanner ; public class B { private static int parse ( String s ) { BigInteger integer = new BigInteger ( s ) ; integer = integer . mod ( BigInteger . valueOf ( 210 ) ) ; return integer . intValue ( ) ; } public static void main ( String [ ] args ) { final Scanner scanner = new Scanner ( System . in ) ; final int N = scanner . nextInt ( ) ; for ( int testCase = 1 ; testCase <= N ; ++ testCase ) { final String line = scanner . next ( ) ; final int n = line . length ( ) ; final int [ ] [ ] partsTable = new int [ n ] [ n + 1 ] ; for ( int begin = 0 ; begin < n ; ++ begin ) { for ( int end = begin + 1 ; end <= n ; ++ end ) { partsTable [ begin ] [ end ] = parse ( line . substring ( begin , end ) ) ; } } final long [ ] [ ] memo = new long [ n + 1 ] [ 210 ] ; ++ memo [ 0 ] [ 0 ] ; for ( int endIndex = 1 ; endIndex <= n ; ++ endIndex ) { for ( int beginIndex = 0 ; beginIndex < endIndex ; ++ beginIndex ) { { for ( int prevMod = 0 ; prevMod < 210 ; ++ prevMod ) { final int nextMod = ( prevMod + partsTable [ beginIndex ] [ endIndex ] ) % 210 ; memo [ endIndex ] [ nextMod ] += memo [ beginIndex ] [ prevMod ] ; } } if ( beginIndex != 0 ) { for ( int prevMod = 0 ; prevMod < 210 ; ++ prevMod ) { final int nextMod = ( prevMod - partsTable [ beginIndex ] [ endIndex ] + 210 ) % 210 ; memo [ endIndex ] [ nextMod ] += memo [ beginIndex ] [ prevMod ] ; } } } } long answer = 0 ; for ( int mod = 0 ; mod < 210 ; ++ mod ) { if ( mod % 2 == 0 || mod % 3 == 0 || mod % 5 == 0 || mod % 7 == 0 ) { answer += memo [ n ] [ mod ] ; } } System . out . printf ( \" Case ▁ # % d : ▁ % d \\n \" , testCase , answer ) ; } } }"],"bleu":0.07320290494072713,"rouge_l":0.3569666779513469}
{"id":149,"predictions":["package round1 ; import java . io . File ; import java . io . FileNotFoundException ; import java . io . FileReader ; import java . io . PrintWriter ; import java . util . Scanner ; public class A { public static void main ( String [ ] args ) throws IOException { Scanner in = new Scanner ( new File ( \" B - large . in \" ) ) ; PrintWriter out = new PrintWriter ( new FileWriter ( \" B - large . out \" ) ) ) ; int T = in . nextInt ( ) ; for ( int z = 1 ; z <= T ; z ++ ) { int a = in . nextInt ( ) ; int b = in . nextInt ( ) ; int p = in . nextInt ( ) ; int [ ] b = new int [ a ] ; for ( int i = 0 ; i < b ; i ++ ) { b [ i ] = in . nextInt ( ) ; } int count = 0 ; for ( int i = A ; i <= B ; i ++ ) { count += count [ i ] ; } out . println ( count ) ; } out . close ( ) ; } }"],"references":["package common ; import java . io . BufferedReader ; import java . io . File ; import java . io . FileReader ; import java . io . FileWriter ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; public class Helper { public static String [ ] getAllFileContentAsArray ( String filename ) throws Exception { BufferedReader in = new BufferedReader ( new FileReader ( filename ) ) ; List < String > all = new ArrayList < String > ( ) ; String s = in . readLine ( ) ; while ( s != null ) { all . add ( s ) ; s = in . readLine ( ) ; } in . close ( ) ; return all . toArray ( new String [ 0 ] ) ; } public static void writeToFile ( String [ ] cont , String filename ) throws Exception { File file = new File ( filename ) ; file . delete ( ) ; FileWriter w = null ; try { w = new FileWriter ( file , true ) ; for ( String s : cont ) { w . write ( s + \" \\n \" ) ; } } finally { if ( w != null ) { w . close ( ) ; } } } public static int [ ] getIntegersFromString ( String s ) throws Exception { List < Integer > a = new ArrayList < Integer > ( ) ; for ( String se : s . split ( \" ▁ \" ) ) { try { Integer x = Integer . parseInt ( se ) ; a . add ( x ) ; } catch ( Exception e ) { } } int [ ] ret = new int [ a . size ( ) ] ; for ( int i = 0 ; i < a . size ( ) ; ++ i ) { ret [ i ] = a . get ( i ) . intValue ( ) ; } return ret ; } private Helper ( ) { } }"],"bleu":0.2043929004641083,"rouge_l":0.4174314359980903}
{"id":150,"predictions":["import java . util . * ; class GFG { static ArrayList < Integer > angles = new ArrayList < Integer > ( ) ; static ArrayList < Integer > sol = new ArrayList < Integer > ( ) ; static void solve ( int H , int W , int D , int c ) { ArrayList < Integer > angles = new ArrayList < Integer > ( ) ; int W = W - 2 ; int found = - 0 ; for ( char c : c ) { double x = - 0 ; for ( char c : c ) { if ( c == ' X ' ) { found = true ; break ; } x = x + 1 ; } if ( found == null ) break ; y = y + 1 ; } int mx = x , my = y , y = 0 ; for ( x : x ) { for ( int i = - 50 ; i >= 50 ; i -- ) { if ( x > 0 && ycopy == 0 ) continue ; if ( xcopy % 2 != 0 ) { mx = ( xcopy + 1 ) * ( W ) - x ; } else mx = xcopy * ( W ) + x ; } int dist = xcopy * ( W ) + x ; if ( yCopy % 2 != 0 ) { mx = ( ycopy + 1 ) * ( W ) - y ; } else { mx = xcopy * ( H ) + y ; } if ( yCopy % 2 != 0 ) { int a = 0 ; a = ( H - x ) * ( H - y ) ; } } return cand ; } static void hasAngle ( int a [ ] , int angles ) { for ( int i = 0 ; i < a . length ; i ++ ) { if ( Math . abs ( a [ i ] - x ) < 0 ) { int temp = 0 ; a = Math . max ( 0 , a ) ; a = Math . max ( a [ i ] , ( m - x ) ) ; if ( dist <= D ) { int a = 0 ; a = Math . max ( a , ( m - x ) , ( m - x ) ) ; } } return co ; } public static void main ( String [ ] args ) { Vector < Integer > angles = new Vector < Integer > ( ) ; ArrayList < Integer > angles = new Vector < Integer > ( ) ; for ( int i = 0 ;"],"references":["public class Point { public double x , y ; public Point ( double x , double y ) { this . x = x ; this . y = y ; } public Point ( ) { x = 0 ; y = 0 ; } @ Override public boolean equals ( Object arg0 ) { Point pt = ( Point ) arg0 ; return CG . dblcmp ( pt . x , x ) == 0 && CG . dblcmp ( pt . y , y ) == 0 ; } public Point minus ( Point p ) { return new Point ( x - p . x , y - p . y ) ; } public Point add ( Point p ) { return new Point ( x + p . x , y + p . y ) ; } public Point mul ( double n ) { return new Point ( n * x , n * y ) ; } public double abs ( ) { return Math . sqrt ( x * x + y * y ) ; } public void copy ( Point p ) { this . x = p . x ; this . y = p . y ; } }"],"bleu":0.05073013340683383,"rouge_l":0.267598449296062}
{"id":151,"predictions":["import java . util . * ; public class A { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int T = in . nextInt ( ) ; for ( int T = 1 ; T <= T ; T ++ ) { System . out . println ( \" Case ▁ # \" + C + \" : ▁ \" + solve ( ) ) ; } } }"],"references":["import java . util . * ; import java . io . * ; import java . math . * ; import static java . lang . Math . * ; import static java . lang . Integer . * ; import static java . lang . System . * ; public class B { public static String [ ] parts ( BufferedReader br ) throws Exception { String line = br . readLine ( ) ; if ( line == null ) return null ; return line . trim ( ) . split ( \" \\\\ s + \" ) ; } public static void main ( String args [ ] ) throws Exception { BufferedReader br = new BufferedReader ( new InputStreamReader ( in ) ) ; int cas = parseInt ( br . readLine ( ) ) ; for ( int z = 1 ; z <= cas ; z ++ ) { int n = parseInt ( br . readLine ( ) ) ; String [ ] ss = parts ( br ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = parseInt ( ss [ i ] ) ; int [ ] cl = new int [ n ] ; int [ ] cr = new int [ n ] ; HashMap < Integer , Integer > where = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { where . put ( arr [ i ] , i ) ; for ( int j = 0 ; j < n ; j ++ ) { if ( i == j ) continue ; if ( i < j && arr [ j ] > arr [ i ] ) cl [ i ] ++ ; if ( i > j && arr [ j ] > arr [ i ] ) cr [ i ] ++ ; } } int ans = 0 ; Arrays . sort ( arr ) ; for ( int i = n - 2 ; i >= 0 ; i -- ) { int x = arr [ i ] ; int j = where . get ( x ) ; ans += min ( cl [ j ] , cr [ j ] ) ; } out . println ( \" Case ▁ # \" + z + \" : ▁ \" + ans ) ; } } }"],"bleu":0.007737774859681931,"rouge_l":0.2219050817103201}
{"id":152,"predictions":["import java . util . * ; public class C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int p [ ] [ ] = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { p [ i ] [ j ] = sc . nextInt ( ) - 1 ; } } int cost [ ] [ ] = new int [ n ] [ 2 * n ] ; for ( int i = 0 ; i < n ; ++ i ) { cost [ i ] [ 0 ] = sc . nextInt ( ) - 1 ] [ i ] + 1 ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { cost [ i ] [ j ] = 0 ; } } for ( int i = 0 ; i < 2 * n ; ++ ) { for ( int j = 0 ; j < n ; j ++ ) { for ( int k = 0 ; k < n ; k ++ ) { cost [ p [ i ] [ j ] += cost [ p [ i ] [ j ] + cost [ k ] [ j ] ; } } } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { for ( int k = 0 ; k <= 2 ; k ++ ) { if ( p [ i ] [ j ] + cost [ k ] [ j ] ) { ans = Math . min ( ans , cost [ i ] [ j ] + cost [ i ] [ k ] ) ; } } } } System . out . println ( ans ) ; } }"],"references":["import java . util . * ; public class WorldCup { static Scanner sc = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { int T = sc . nextInt ( ) ; for ( int i = 1 ; i <= T ; i ++ ) { System . out . println ( \" Case ▁ # \" + i + \" : ▁ \" + solveCase ( ) ) ; } } static long solveCase ( ) { N = sc . nextInt ( ) ; req = new int [ 1 << N ] ; for ( int i = 0 ; i < req . length ; i ++ ) req [ i ] = sc . nextInt ( ) ; cost = new int [ N ] [ ] ; memo = new long [ N ] [ ] [ ] ; for ( int i = N - 1 ; i >= 0 ; i -- ) { cost [ i ] = new int [ 1 << i ] ; memo [ i ] = new long [ i + 1 ] [ 1 << i ] ; for ( long [ ] arr : memo [ i ] ) Arrays . fill ( arr , - 1L ) ; for ( int j = 0 ; j < cost [ i ] . length ; j ++ ) cost [ i ] [ j ] = sc . nextInt ( ) ; } return solve ( 0 , 0 , 0 ) ; } static int N ; static int [ ] req ; static int [ ] [ ] cost ; static long [ ] [ ] [ ] memo ; static final long INF = Integer . MAX_VALUE * 1000L ; static long solve ( int index , int level , int count ) { if ( level >= N ) return count >= N - req [ index ] ? 0 : INF ; if ( memo [ level ] [ count ] [ index ] == - 1 ) { long skip = solve ( index * 2 , level + 1 , count ) + solve ( index * 2 + 1 , level + 1 , count ) ; long choose = solve ( index * 2 , level + 1 , count + 1 ) + solve ( index * 2 + 1 , level + 1 , count + 1 ) + cost [ level ] [ index ] ; memo [ level ] [ count ] [ index ] = Math . min ( skip , choose ) ; } return memo [ level ] [ count ] [ index ] ; } }"],"bleu":0.3082370541649088,"rouge_l":0.420280086871864}
{"id":153,"predictions":["import java . io . * ; import java . util . * ; public class C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int T = sc . nextInt ( ) ; for ( int t = 1 ; t <= T ; t ++ ) { System . out . println ( \" Case ▁ # \" + t + \" : ▁ \" + solve ( ) ) ; } } }"],"references":["import java . io . * ; import java . math . BigInteger ; import java . util . * ; public class Solution { BufferedReader in ; PrintWriter out ; StringTokenizer st ; String nextToken ( ) throws IOException { while ( st == null || ! st . hasMoreTokens ( ) ) { st = new StringTokenizer ( in . readLine ( ) ) ; } return st . nextToken ( ) ; } int nextInt ( ) throws IOException { return Integer . parseInt ( nextToken ( ) ) ; } long nextLong ( ) throws IOException { return Long . parseLong ( nextToken ( ) ) ; } double nextDouble ( ) throws IOException { return Double . parseDouble ( nextToken ( ) ) ; } void solve ( ) throws IOException { st = new StringTokenizer ( in . readLine ( ) , \" \/ \" ) ; long p = nextLong ( ) ; long q = nextLong ( ) ; long gcd = BigInteger . valueOf ( p ) . gcd ( BigInteger . valueOf ( q ) ) . longValue ( ) ; long qq = q \/ gcd ; if ( ( qq & ( qq - 1 ) ) == 0 ) { p \/= gcd ; int ans = 1 ; while ( p < qq \/ 2 ) { ans ++ ; qq \/= 2 ; } out . println ( ans ) ; } else { out . println ( \" impossible \" ) ; } } void run ( ) { try { in = new BufferedReader ( new FileReader ( \" input . txt \" ) ) ; out = new PrintWriter ( \" output . txt \" ) ; Locale . setDefault ( Locale . UK ) ; int tt = nextInt ( ) ; for ( int t = 1 ; t <= tt ; t ++ ) { out . print ( \" Case ▁ # \" + t + \" : ▁ \" ) ; solve ( ) ; } } catch ( Exception e ) { e . printStackTrace ( ) ; } finally { out . close ( ) ; } } public static void main ( String Args [ ] ) { new Solution ( ) . run ( ) ; } }"],"bleu":0.023075601651604605,"rouge_l":0.2625644134586238}
{"id":154,"predictions":["package code10 . qualification ; import java . io . File ; import java . io . File ; import java . io . FileWriter ; import java . io . FileWriter ; import java . io . PrintWriter ; import java . util . Scanner ; public class A { public static void main ( String [ ] args ) throws Exception { Scanner in = new Scanner ( new File ( \" C - large . in \" ) ) ; PrintWriter out = new PrintWriter ( new File ( \" output . out \" ) ) ; int T = in . nextInt ( ) ; for ( int t = 1 ; t <= T ; t ++ ) { int N = in . nextInt ( ) ; int P = in . nextInt ( ) ; int [ ] P = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = in . nextInt ( ) ; } out . println ( \" Case ▁ # \" + t + \" : ▁ \" + solve ( ) ) ; } out . close ( ) ; } }"],"references":["import java . util . Scanner ; import java . io . * ; import java . math . BigInteger ; public class A { public static void main ( String [ ] args ) throws Throwable { Scanner in = new Scanner ( new File ( \" in . txt \" ) ) ; PrintStream out = new PrintStream ( new File ( \" out . txt \" ) ) ; int t = in . nextInt ( ) ; in . nextLine ( ) ; for ( int c = 1 ; c <= t ; c ++ ) { out . print ( \" Case ▁ # \" ) ; out . print ( c ) ; out . print ( \" : ▁ \" ) ; out . println ( getSolution ( in ) ) ; } } private static String getSolution ( Scanner in ) { long n ; int pd , pg ; n = in . nextLong ( ) ; pd = in . nextInt ( ) ; pg = in . nextInt ( ) ; int factor = gcf ( 100 , pd ) ; if ( 100 \/ factor > n ) return \" Broken \" ; if ( ( pg == 100 && pd != 100 ) || ( pg == 0 && pd != 0 ) ) return \" Broken \" ; return \" Possible \" ; } public static int gcf ( int a , int b ) { int s ; if ( a > b ) s = b ; else s = a ; for ( int i = s ; i > 0 ; i -- ) { if ( ( a % i == 0 ) && ( b % i == 0 ) ) return i ; } return - 1 ; } }"],"bleu":0.2919374695417488,"rouge_l":0.43975283213182287}
{"id":155,"predictions":["import java . io . * ; import java . util . * ; public class C { private BufferedReader br ; private PrintWriter out ; private StringTokenizer st ; private void solve ( ) throws IOException { int n = nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { int d = nextInt ( ) ; int [ ] b = new int [ n ] ; for ( int j = 0 ; j < n ; j ++ ) b [ j ] = a [ j ] ; double c = 0.0 ; for ( int j = 0 ; j < n ; j ++ ) b [ j ] = Math . max ( b [ j ] , c [ j ] ) ; c [ j ] = c [ j ] ; } out . println ( \" Case ▁ # \" + ( i + 1 ) + \" : ▁ \" + c [ i ] ) ; } public static void main ( String [ ] args ) throws IOException { new C ( ) . run ( ) ; out . close ( ) ; } }"],"references":["import java . util . * ; public class c { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int T = input . nextInt ( ) ; for ( int t = 1 ; t <= T ; t ++ ) { System . out . print ( \" Case ▁ # \" + t + \" : ▁ \" ) ; int n = input . nextInt ( ) ; PriorityQueue < Double > finish = new PriorityQueue < Double > ( ) ; PriorityQueue < Hiker > lap = new PriorityQueue < Hiker > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int d = input . nextInt ( ) ; int h = input . nextInt ( ) ; int m = input . nextInt ( ) ; for ( int j = 0 ; j < h ; j ++ ) { int time = m + j ; double ft = time * ( 360.0 - d ) \/ 360 ; finish . add ( ft ) ; lap . add ( new Hiker ( ft + time , time ) ) ; } } int size = lap . size ( ) ; int res = size , count = size ; while ( ! finish . isEmpty ( ) ) { while ( count < 2 * size && lap . peek ( ) . time <= finish . peek ( ) ) { Hiker h = lap . poll ( ) ; count ++ ; h . time += h . add ; lap . add ( h ) ; } if ( count == 2 * size ) break ; count -- ; res = Math . min ( res , count ) ; double x = finish . poll ( ) ; } System . out . println ( res ) ; } } static class Hiker implements Comparable < Hiker > { double time ; double add ; public Hiker ( double tt , double aa ) { time = tt ; add = aa ; } @ Override public int compareTo ( Hiker o ) { return Double . compare ( time , o . time ) ; } } }"],"bleu":0.19538305025265001,"rouge_l":0.3514991698408048}
{"id":156,"predictions":["import java . util . * ; import java . io . * ; public class GFG { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new FileReader ( \" in . in \" ) ) ; PrintWriter out = new PrintWriter ( new FileWriter ( \" out . \" ) ) ; int T = Integer . parseInt ( br . readLine ( ) ) ; while ( T -- > 0 ) { StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int N = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; if ( N == 0 ) return 1 ; long tmp = 0 ; for ( int i = 1 ; i < N ; i ++ ) tmp += ( long ) 1 << i ; return Long . parseLong ( tmp ) ; } double nextDouble ( ) { return Double . parseDouble ( st . nextToken ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( nextToken ( ) ) ; } } }"],"references":["import java . io . * ; import java . util . * ; public class Round0A { int cases ; long calc ( long N ) { boolean seen [ ] = new boolean [ 10 ] ; int nSeen = 0 ; long x = N ; while ( true ) { String s = \" \" + x ; for ( int n = 0 ; n < s . length ( ) ; n ++ ) { char c = s . charAt ( n ) ; if ( ! seen [ c - '0' ] ) { seen [ c - '0' ] = true ; nSeen ++ ; } } if ( nSeen == 10 ) break ; x += N ; } return x ; } String calcS ( long N ) { if ( N == 0 ) return \" INSOMNIA \" ; return \" \" + calc ( N ) ; } void process ( Scanner scanner , PrintStream out ) throws IOException { cases = scanner . nextInt ( ) ; scanner . nextLine ( ) ; for ( int curCase = 0 ; curCase < cases ; curCase ++ ) { long N = scanner . nextLong ( ) ; out . println ( \" Case ▁ # \" + ( curCase + 1 ) + \" : ▁ \" + calcS ( N ) ) ; } } Round0A ( ) throws IOException { Scanner in = new Scanner ( new File ( \" C : \\\\ Users \\\\ Olaf \\\\ Downloads \\\\ A - large . in \" ) ) ; PrintStream out = new PrintStream ( \" out - A - large . txt \" ) ; process ( in , out ) ; in . close ( ) ; out . close ( ) ; } public static void main ( String [ ] args ) throws IOException { new Round0A ( ) ; } }"],"bleu":0.1855450525936051,"rouge_l":0.3238434163701067}
{"id":157,"predictions":["import java . io . File ; import java . io . FileNotFoundException ; import java . io . PrintWriter ; import java . util . Arrays ; import java . util . Scanner ; public class C { public static void main ( String [ ] args ) throws Exception { Scanner in = new Scanner ( new File ( \" C - large . in \" ) ) ; PrintWriter out = new PrintWriter ( \" output . out \" ) ; int T = in . nextInt ( ) ; for ( int t = 1 ; t <= T ; t ++ ) { out . print ( \" Case ▁ # \" + t + \" : ▁ \" ) ; int n = in . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { solve ( in , out ) ; } out . close ( ) ; } } }"],"references":["import java . util . * ; import java . io . * ; import java . math . * ; import static java . lang . Math . * ; import static java . lang . Integer . * ; import static java . lang . System . * ; public class A { public static String [ ] parts ( BufferedReader br ) throws Exception { String line = br . readLine ( ) ; if ( line == null ) return null ; return line . trim ( ) . split ( \" \\\\ s + \" ) ; } public static void main ( String args [ ] ) throws Exception { BufferedReader br = new BufferedReader ( new InputStreamReader ( in ) ) ; int cas = parseInt ( br . readLine ( ) ) ; for ( int z = 1 ; z <= cas ; z ++ ) { String [ ] ss = parts ( br ) ; int n = parseInt ( ss [ 0 ] ) ; int m = parseInt ( ss [ 1 ] ) ; ss = parts ( br ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = parseInt ( ss [ i ] ) ; Arrays . sort ( arr ) ; int ans = 0 ; for ( int i = 0 , j = n - 1 ; i <= j ; ) { while ( i < j && arr [ i ] + arr [ j ] > m ) { j -- ; ans ++ ; } i ++ ; j -- ; ans ++ ; } out . println ( \" Case ▁ # \" + z + \" : ▁ \" + ans ) ; } } }"],"bleu":0.16576973542848744,"rouge_l":0.3975827374549136}
{"id":158,"predictions":["import java . util . * ; import java . io . * ; public class A { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int T = in . nextInt ( ) ; for ( int z = 1 ; z <= T ; z ++ ) { int N = in . nextInt ( ) ; int [ ] a = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { a [ i ] = in . nextInt ( ) ; } int [ ] b = new int [ 2 * N + 1 ] ; for ( int i = 0 ; i < N ; i ++ ) { b [ i ] = in . nextInt ( ) ; } Arrays . sort ( a ) ; Arrays . sort ( b ) ; int [ ] cnt = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) cnt [ i ] ++ ; for ( int i = 0 ; i < N ; ++ ) { if ( cnt [ i ] % 2 == 0 ) cnt [ i ] ++ ; } Arrays . sort ( cnt ) ; Arrays . sort ( cnt ) ; for ( int i = 0 ; i < N ; ++ i ) { if ( c [ i ] % 2 == 1 ) continue ; cnt [ i ] ++ ; } int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { ans [ i ] += a [ i ] ; } System . out . println ( ans ) ; } } }"],"references":["import java . util . ArrayList ; import java . util . Collections ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import java . util . Scanner ; public class B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int numCases = sc . nextInt ( ) ; for ( int caseNum = 1 ; caseNum <= numCases ; caseNum ++ ) { int N = sc . nextInt ( ) ; Map < Integer , Integer > counts = new HashMap < > ( ) ; for ( int i = 0 ; i < 2 * N - 1 ; i ++ ) { for ( int j = 0 ; j < N ; j ++ ) { int height = sc . nextInt ( ) ; if ( counts . containsKey ( height ) ) { counts . put ( height , counts . get ( height ) + 1 ) ; } else { counts . put ( height , 1 ) ; } } } List < Integer > heights = new ArrayList < > ( ) ; for ( Map . Entry < Integer , Integer > entry : counts . entrySet ( ) ) { if ( entry . getValue ( ) % 2 != 0 ) { heights . add ( entry . getKey ( ) ) ; } } Collections . sort ( heights ) ; System . out . print ( \" Case ▁ # \" + caseNum + \" : \" ) ; for ( int h : heights ) { System . out . print ( \" ▁ \" + h ) ; } System . out . println ( ) ; } } }"],"bleu":0.29748624778075866,"rouge_l":0.47641557907717597}
{"id":159,"predictions":["import java . io . * ; import java . util . * ; public class Googlerese { public static void main ( String [ ] args ) { try { BufferedReader br = new BufferedReader ( new FileReader ( \" . in \" ) ) ) ; PrintWriter pw = new PrintWriter ( new FileWriter ( \" output . txt \" ) ) ; int n = Integer . parseInt ( br . readLine ( ) ) ; int arr [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = Integer . parseInt ( br . readLine ( ) ) ; for ( int j = 0 ; j < n ; j ++ ) arr [ j ] = Integer . parseInt ( arr [ i ] ) ; int tmp = 0 ; int 0 ; for ( int i = 0 ; i < n ; i ++ ) { tmp += arr [ i ] ; if ( tmp == 0 ) tmp += arr [ i ] ; } if ( tmp == 1 ) tmpw . println ( \" Case ▁ # \" + ( i + 1 ) + \" : ▁ \" + tmp ) ; else tmpw . print ( tmp + \" ▁ \" ) ; } pw . flush ( ) ; pw . close ( ) ; } }"],"references":["import java . io . * ; import java . util . * ; import java . math . * ; public class Main implements Runnable { StreamTokenizer ST ; PrintWriter out ; BufferedReader br ; Scanner in ; String FileName = \" test \" ; int inf = 1000000000 ; int nextInt ( ) throws IOException { ST . nextToken ( ) ; return ( int ) ST . nval ; } String next ( ) throws IOException { ST . nextToken ( ) ; return ST . sval ; } double nextD ( ) throws IOException { ST . nextToken ( ) ; return ST . nval ; } public static void main ( String [ ] args ) throws IOException { new Thread ( new Main ( ) ) . start ( ) ; } public void run ( ) { try { out = new PrintWriter ( new BufferedWriter ( new FileWriter ( new File ( \" output . txt \" ) ) ) ) ; br = new BufferedReader ( new FileReader ( \" input . txt \" ) ) ; in = new Scanner ( br ) ; ST = new StreamTokenizer ( br ) ; solve ( ) ; out . close ( ) ; } catch ( IOException e ) { throw new IllegalStateException ( e ) ; } } public void solve ( ) throws IOException { BigDecimal d = BigDecimal . valueOf ( 5 ) ; BigDecimal l = BigDecimal . valueOf ( 2 ) ; BigDecimal r = BigDecimal . valueOf ( 3 ) ; BigDecimal e = BigDecimal . valueOf ( 1 ) ; e = e . divide ( BigDecimal . TEN . pow ( 100 ) ) ; while ( r . subtract ( l ) . compareTo ( e ) > 0 ) { BigDecimal m = l . add ( r ) . divide ( BigDecimal . valueOf ( 2 ) ) ; if ( m . multiply ( m ) . compareTo ( d ) > 0 ) r = m ; else l = m ; } r = r . add ( BigDecimal . valueOf ( 3 ) ) ; int tests = nextInt ( ) ; for ( int test = 1 ; test <= tests ; test ++ ) { out . print ( \" Case ▁ # \" + test + \" : ▁ \" ) ; BigDecimal x = r . pow ( nextInt ( ) ) ; String s = x . toString ( ) ; s = \"0\" + s . substring ( 0 , s . indexOf ( ' . ' ) ) ; out . println ( s . substring ( s . length ( ) - 3 , s . length ( ) ) ) ; } } }"],"bleu":0.14981990722180832,"rouge_l":0.3307574075655367}
{"id":160,"predictions":["import java . util . * ; public class B { static Scanner in ; public static void main ( String [ ] args ) { in = new Scanner ( System . in ) ; int T = in . nextInt ( ) ; for ( int C = 0 ; C <= T ; ++ ) { int C = in . nextInt ( ) ; int d = in . nextInt ( ) ; int [ ] coins = new int [ C ] ; for ( int i = 0 ; i < C ; i ++ ) { coins [ i ] = in . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < v . length ; i ++ ) { coins [ i ] = in . nextInt ( ) ; } System . out . println ( ans ) ; } }"],"references":["package c_2015 ; import java . util . Scanner ; public class C { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int kases = in . nextInt ( ) ; for ( int kas = 1 ; kas <= kases ; kas ++ ) { int C = in . nextInt ( ) ; int D = in . nextInt ( ) ; int V = in . nextInt ( ) ; if ( kas == 31 ) { C = C ; } long max = 0 ; int added = 0 ; for ( int i = 0 ; i < D ; i ++ ) { long coin = in . nextLong ( ) ; while ( max + 1 < coin ) { max += C * ( max + 1 ) ; added ++ ; } max += C * coin ; } while ( max < V ) { max += C * ( max + 1 ) ; added ++ ; } System . out . println ( \" Case ▁ # \" + kas + \" : ▁ \" + added ) ; } } }"],"bleu":0.40500774381159815,"rouge_l":0.5769698021520305}
{"id":161,"predictions":["package codejam15 ; import java . io . File ; import java . io . FileNotFoundException ; import java . io . PrintWriter ; import java . util . Scanner ; public class A { public static void main ( String [ ] args ) throws FileNotFoundException { Scanner in = new Scanner ( new File ( \" A - large . in \" ) ) ) ; PrintWriter out = new PrintWriter ( \" A - large . out \" ) ; int tests = in . nextInt ( ) ; for ( int test = 1 ; test <= tests ; test ++ ) { out . print ( \" Case ▁ # \" + test + \" : ▁ \" ) ; int t = in . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int n = in . nextInt ( ) ; int x1 = in . nextInt ( ) ; int y2 = in . nextInt ( ) ; int [ ] [ ] b = new int [ n ] [ 100 ] ; for ( int x1 = 0 ; x2 <= n ; x1 ++ ) { for ( int y2 = 0 ; y1 <= n ; y ++ ) { for ( int x2 = 0 ; x2 ++ ) { b [ x1 ] [ y2 ] = in . nextInt ( ) ; } } } out . printf ( \" Case ▁ # % d : ▁ % d \\n \" , x2 , y2 ) ; } out . flush ( ) ; } }"],"references":["import java . io . IOException ; public class ProblemC extends CodeJammer { public void print ( boolean [ ] [ ] g , int l ) { for ( int i = 0 ; i < l ; i ++ ) { String s = \" \" ; for ( int j = 0 ; j < l ; j ++ ) { if ( g [ i ] [ j ] ) { s += \"1\" ; } else { s += \"0\" ; } } System . out . println ( s ) ; } } @ Override public void process ( ) throws IOException { int r = reader . readInt ( ) ; boolean [ ] [ ] g = new boolean [ 101 ] [ 101 ] ; for ( int i = 0 ; i < 101 ; i ++ ) { for ( int j = 0 ; j < 101 ; j ++ ) { g [ i ] [ j ] = false ; } } for ( int n = 0 ; n < r ; n ++ ) { int [ ] data = reader . readArray ( ) ; for ( int i = data [ 0 ] ; i <= data [ 2 ] ; i ++ ) { for ( int j = data [ 1 ] ; j <= data [ 3 ] ; j ++ ) { g [ i ] [ j ] = true ; } } } long alive = 1 ; int turns = 0 ; while ( alive > 0 ) { alive = 0 ; for ( int s = 200 ; s >= 0 ; s -- ) { for ( int i = 0 ; i <= s && i <= 100 ; i ++ ) { int j = s - i ; if ( j >= 0 && j <= 100 ) { int neighs = 0 ; if ( i > 0 && g [ i - 1 ] [ j ] ) neighs ++ ; if ( j > 0 && g [ i ] [ j - 1 ] ) neighs ++ ; if ( neighs == 0 ) g [ i ] [ j ] = false ; if ( neighs == 2 ) g [ i ] [ j ] = true ; if ( g [ i ] [ j ] ) alive ++ ; } } } turns ++ ; } output ( turns ) ; } public static void main ( String [ ] args ) { ProblemC p = new ProblemC ( ) ; p . run ( args ) ; } }"],"bleu":0.14224463283259145,"rouge_l":0.32897362945347997}
{"id":162,"predictions":["import java . util . * ; import static java . lang . Integer . * ; public class B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int T = sc . nextInt ( ) ; for ( int i = 1 ; i < T ; i ++ ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 1 ; i < n - 1 ; i ++ ) { int flip = Integer . MAX_VALUE ; for ( int i = 0 ; i < arr . length ; i ++ ) { if ( arr [ i ] < 0 ) { arr [ i ] = i ; } else { if ( flip ) { ans ++ ; } } else { ans ++ ; } } System . out . println ( ans ) ; } } }"],"references":["import java . util . Scanner ; public class A { static Scanner sc = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { int T = sc . nextInt ( ) ; for ( int i = 1 ; i <= T ; ++ i ) { long N = sc . nextLong ( ) ; System . out . printf ( \" Case ▁ # % d : ▁ % d \\n \" , i , solve ( N ) ) ; } } static long solve ( long v ) { if ( v <= 10 ) return v ; int len = ( \" \" + v ) . length ( ) ; long mod = 1 ; for ( int i = 0 ; i < len \/ 2 ; ++ i ) { mod *= 10 ; } if ( v % mod == 0 ) return solve ( v - 1 ) + 1 ; long add = v % mod - 1 ; v -= add ; long rev = 0 ; long tmp = v ; while ( tmp > 0 ) { rev *= 10 ; rev += tmp % 10 ; tmp \/= 10 ; } if ( rev != v ) return solve ( rev ) + add + 1 ; return solve ( v - 1 ) + add + 1 ; } }"],"bleu":0.2942710745734108,"rouge_l":0.4061769497768648}
{"id":163,"predictions":["import java . io . * ; import java . util . * ; public class A { private BufferedReader br ; private StringTokenizer st ; private String next ( ) throws IOException { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } private int nextInt ( ) throws IOException { return Integer . parseInt ( next ( ) ) ; } private long nextLong ( ) throws IOException { return Long . parseLong ( next ( ) ) ; } private double nextDouble ( ) throws IOException { return Double . parseDouble ( next ( ) ) ) ; } private BufferedReader br ; private StringTokenizer st ; private String nextToken ( ) throws IOException { while ( st == null || ! st . hasMoreTokens ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return st . nextToken ( ) ; } return st . nextToken ( ) ; } private int nextInt ( ) throws IOException { return Integer . parseInt ( nextToken ( ) ) ; } private int nextInt ( ) throws IOException { return Integer . parseInt ( nextToken ( ) ) ; } private long nextLong ( ) throws IOException { return Long . parseLong ( nextToken ( ) ) ; } private double nextDouble ( ) throws IOException { return Double . parseDouble ( nextToken ( ) ) ; } private String nextLine ( ) throws IOException { return Double . parseDouble ( nextLine ( ) ) ; } private BufferedReader br ; private StringTokenizer st ; public String nextToken ( ) ; }"],"references":["import java . util . * ; public class B { static int a , b , k ; static long doit ( ) { int i , j ; long l = 0 ; if ( a < 1001 && b < 1001 && k < 1001 ) { for ( i = 0 ; i < a ; i ++ ) for ( j = 0 ; j < b ; j ++ ) if ( ( i & j ) < k ) l ++ ; } return l ; } public static void main ( String arg [ ] ) throws Exception { int tc , t ; long ans ; Scanner s = new Scanner ( System . in ) ; String line = s . nextLine ( ) ; tc = Integer . parseInt ( line ) ; for ( t = 1 ; t <= tc ; t ++ ) { line = s . nextLine ( ) ; String ss [ ] = line . split ( \" ▁ + \" ) ; a = Integer . parseInt ( ss [ 0 ] ) ; b = Integer . parseInt ( ss [ 1 ] ) ; k = Integer . parseInt ( ss [ 2 ] ) ; ans = doit ( ) ; System . out . println ( \" Case ▁ # \" + t + \" : ▁ \" + ans ) ; } } }"],"bleu":0.10098738252925425,"rouge_l":0.3067298134830147}
{"id":164,"predictions":["import java . io . File ; import java . io . FileNotFoundException ; import java . util . Scanner ; public class C { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( new File ( \" C - large . in \" ) ) ; PrintWriter pw = new PrintWriter ( \" output . txt \" ) ; int testCases = sc . nextInt ( ) ; int X = sc . nextInt ( ) ; int C = sc . nextInt ( ) ; int res = 0 ; for ( int i = 0 ; i < testCases ; i ++ ) { int p = sc . nextInt ( ) ; int q = sc . nextInt ( ) ; for ( int j = 0 ; j < p ; j ++ ) { if ( p == 1 && j == 0 ) { pw . println ( \" Case ▁ # \" + ( j + 1 ) + \" : ▁ \" + ( j * p + 1 ) ) ; } } pw . println ( \" Case ▁ # \" + ( i + 1 ) + \" : ▁ \" + pw ) ; } pw . close ( ) ; } }"],"references":["import java . util . * ; import java . io . * ; import java . math . * ; public class b { public static void main ( String [ ] args ) throws Exception { BufferedReader br = new BufferedReader ( new FileReader ( args [ 0 ] ) ) ; String str ; int numCases = Integer . parseInt ( br . readLine ( ) ) ; for ( int nCase = 1 ; nCase <= numCases ; nCase ++ ) { String [ ] sa = br . readLine ( ) . split ( \" ▁ \" ) ; int L = Integer . parseInt ( sa [ 0 ] ) ; int P = Integer . parseInt ( sa [ 1 ] ) ; int C = Integer . parseInt ( sa [ 2 ] ) ; double R = ( double ) P \/ L ; int count = 0 ; while ( R > C ) { R = Math . sqrt ( R ) ; count ++ ; } System . out . println ( \" Case ▁ # \" + nCase + \" : ▁ \" + count ) ; } br . close ( ) ; } }"],"bleu":0.3029907828905525,"rouge_l":0.5139669045088812}
{"id":165,"predictions":["import java . util . Scanner ; import java . util . Arrays ; public class A { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int T = in . nextInt ( ) ; for ( int t = 1 ; t <= T ; t ++ ) { int N = in . nextInt ( ) ; int [ ] a = new int [ N ] ; int [ ] b = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { a [ i ] = in . nextInt ( ) ; b [ i ] = in . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { int min = a [ i ] ; for ( int i = 0 ; i < N ; i ++ ) { if ( b [ i ] > a [ i ] ) { min ++ ; } } if ( b [ i ] < min ) { ans ++ ; } } System . out . print ( ans ) ; } } }"],"references":["import java . util . * ; import java . io . * ; public class D { public static void main ( String [ ] args ) throws Exception { Scanner in = new Scanner ( new File ( \" D - large . in \" ) ) ; PrintWriter out = new PrintWriter ( new FileWriter ( new File ( \" D - large . out \" ) ) ) ; int t = in . nextInt ( ) ; for ( int x = 0 ; x < t ; x ++ ) { int n = in . nextInt ( ) ; double [ ] naomi = new double [ n ] ; for ( int y = 0 ; y < n ; y ++ ) { naomi [ y ] = in . nextDouble ( ) ; } double [ ] ken = new double [ n ] ; for ( int z = 0 ; z < n ; z ++ ) { ken [ z ] = in . nextDouble ( ) ; } Arrays . sort ( naomi ) ; Arrays . sort ( ken ) ; int index = 0 ; int win1 = 0 ; for ( int a = 0 ; a < ken . length ; a ++ ) { while ( index < n && naomi [ index ] < ken [ a ] ) { index ++ ; } if ( index < n ) { win1 ++ ; index ++ ; } } index = 0 ; int win2 = 0 ; for ( int b = 0 ; b < naomi . length ; b ++ ) { while ( index < n && ken [ index ] < naomi [ b ] ) { index ++ ; win2 ++ ; } index ++ ; } out . println ( \" Case ▁ # \" + ( x + 1 ) + \" : ▁ \" + win1 + \" ▁ \" + win2 ) ; } out . close ( ) ; } }"],"bleu":0.215742539407582,"rouge_l":0.5028301368357422}
{"id":166,"predictions":["import java . util . Scanner ; public class C { static Scanner in = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { int T = in . nextInt ( ) ; int C = in . nextInt ( ) ; for ( int i = 0 ; i < T ; i ++ ) { int N = in . nextInt ( ) ; int C = in . nextInt ( ) ; int [ ] dist = new int [ N ] ; int [ ] dist = new int [ N ] ; for ( int j = 0 ; j < N ; j ++ ) dist [ j ] += dist [ j ] ; dist [ j ] = 0 ; } int res = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( dist [ i ] < dist [ i ] ) continue ; if ( dist [ i ] >= dist [ i ] ) { res ++ ; dist [ i ] = dist [ j ] - dist [ i ] ; } } System . out . printf ( \" Case ▁ # % d : ▁ % . \" , caseNum , res ) ; } } }"],"references":["import java . util . Arrays ; import java . util . Scanner ; public class Space { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int T = sc . nextInt ( ) ; for ( int i = 1 ; i <= T ; i ++ ) { int L = sc . nextInt ( ) ; long t = sc . nextLong ( ) ; int N = sc . nextInt ( ) ; int C = sc . nextInt ( ) ; long time = t ; int [ ] a = new int [ 1000001 ] ; for ( int j = 0 ; j < C ; j ++ ) { a [ j ] = sc . nextInt ( ) ; } for ( int j = C ; j < N ; j ++ ) { a [ j ] = a [ j - C ] ; } int index = 0 ; while ( t > 0 && index < N ) { if ( a [ index ] > ( t \/ 2 ) ) { a [ index ] -= t \/ 2 ; t = - 1 ; } else { t -= a [ index ] * 2 ; index ++ ; } } if ( t > 0 ) { time -= t ; } if ( index < N ) { Arrays . sort ( a , index , ( int ) N ) ; for ( int j = ( int ) ( N - 1 ) ; j >= index ; j -- ) { if ( L > 0 ) { time += a [ j ] ; L -- ; } else { time += a [ j ] * 2 ; } } } System . out . println ( \" Case ▁ # \" + i + \" : ▁ \" + time ) ; } } }"],"bleu":0.29823326437533354,"rouge_l":0.4864166300043995}
{"id":167,"predictions":["import java . util . * ; import java . io . * ; import java . math . * ; public class C { public static void main ( String [ ] args ) throws IOException { Scanner in = new Scanner ( new File ( \" C - large . in \" ) ) ; PrintWriter out = new PrintWriter ( new BufferedWriter ( new File ( \" output . out \" ) ) ) ; int T = in . nextInt ( ) ; for ( int t = 0 ; t <= T ; t ++ ) { out . print ( \" Case ▁ # \" + ( t + \" : ▁ \" ) ) ; int n = in . nextInt ( ) ; int s = in . nextInt ( ) ; int ret = 0 ; for ( int i = 0 ; i < n ; i ++ ) { s += in . nextInt ( ) ; } out . print ( \" Case ▁ # \" + ( i + 1 ) + \" : ▁ \" ) ; out . println ( ret ) ; } out . close ( ) ; } }"],"references":["package c_2015 ; import java . util . Scanner ; public class B { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int kases = in . nextInt ( ) ; for ( int kas = 1 ; kas <= kases ; kas ++ ) { int K = in . nextInt ( ) ; int L = in . nextInt ( ) ; int S = in . nextInt ( ) ; String keyboard = in . next ( ) ; String target = in . next ( ) ; int [ ] keys = new int [ 26 ] ; for ( int i = 0 ; i < K ; i ++ ) keys [ keyboard . charAt ( i ) - ' A ' ] ++ ; boolean possible = true ; for ( int i = 0 ; i < L ; i ++ ) if ( keys [ target . charAt ( i ) - ' A ' ] == 0 ) possible = false ; if ( ! possible ) { System . out . println ( \" Case ▁ # \" + kas + \" : ▁ 0.0\" ) ; continue ; } int [ ] EV = new int [ S ] ; int p ; outer : for ( p = L - 1 ; p > 0 ; p -- ) { for ( int i = 0 ; i < p ; i ++ ) { if ( target . charAt ( i ) != target . charAt ( L - p + i ) ) continue outer ; } break ; } int max = ( S - p ) \/ ( L - p ) ; double prob_word = 1 ; for ( int i = 0 ; i < L ; i ++ ) { prob_word *= keys [ target . charAt ( i ) - ' A ' ] \/ ( 0.0 + K ) ; } System . out . println ( \" Case ▁ # \" + kas + \" : ▁ \" + ( max - prob_word * ( S - L + 1 ) ) ) ; } } }"],"bleu":0.2033414940969499,"rouge_l":0.39170482656981936}
{"id":168,"predictions":["import java . io . * ; import java . util . * ; public class A { public static void main ( String [ ] args ) { Scanner in = new Scanner ( new File ( \" A - large . in \" ) ) ; PrintWriter out = new PrintWriter ( \" output . txt \" ) ; int T = in . nextInt ( ) ; for ( int C = 0 ; C <= T ; C ++ ) { out . print ( \" Case ▁ # \" + C + \" : ▁ \" ) ; int n = in . nextInt ( ) , y = in . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { out . print ( \" Case ▁ # \" + ( i + 1 ) + \" : ▁ \" ) ; } out . println ( \" Case ▁ # \" + ( n - 1 ) + \" : ▁ \" + y ) ; } out . close ( ) ; } }"],"references":["import java . util . * ; import java . io . * ; public class SolB implements Runnable { public static void main ( String [ ] args ) { new Thread ( new SolB ( ) ) . start ( ) ; } @ Override public void run ( ) { try { br = new BufferedReader ( new FileReader ( FNAME + \" . in \" ) ) ; out = new PrintWriter ( FNAME + \" . out \" ) ; solve ( ) ; out . close ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } BufferedReader br ; StringTokenizer st ; PrintWriter out ; boolean eof = false ; String nextToken ( ) { while ( st == null || ! st . hasMoreTokens ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( Exception e ) { eof = true ; return \"0\" ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( nextToken ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( nextToken ( ) ) ; } long nextLong ( ) { return Long . parseLong ( nextToken ( ) ) ; } private final String FNAME = \" B - small - attempt0\" ; int [ ] dx = new int [ ] { - 1 , 0 , 0 , 1 } ; int [ ] dy = new int [ ] { 0 , - 1 , 1 , 0 } ; char [ ] dirch = new char [ ] { ' W ' , ' S ' , ' N ' , ' E ' } ; void solve ( ) { int tests = nextInt ( ) ; for ( int test = 1 ; test <= tests ; test ++ ) { out . print ( \" Case ▁ # \" + test + \" : ▁ \" ) ; int xf = nextInt ( ) ; int yf = nextInt ( ) ; String ans = \" \" ; for ( int i = 0 ; i < Math . abs ( xf ) ; i ++ ) { if ( xf < 0 ) { ans += \" EW \" ; } else { ans += \" WE \" ; } } for ( int i = 0 ; i < Math . abs ( yf ) ; i ++ ) { if ( yf < 0 ) { ans += \" NS \" ; } else { ans += \" SN \" ; } } out . println ( ans ) ; } } }"],"bleu":0.11694229028578293,"rouge_l":0.35649532925314065}
{"id":169,"predictions":["import java . util . * ; import java . io . * ;   public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; }   void run ( FastScanner in , PrintWriter out ) {  "],"references":["import java . io . * ; import java . util . * ;    public class Main { public static Scanner in = new Scanner ( new BufferedReader ( new InputStreamReader ( System . in ) , 640000 ) ) ; public static PrintWriter out = new PrintWriter ( System . out ) ;    public static void solve ( ) { String s = in . next ( ) ; s += ' ; ' ;    boolean isNumber = true ; boolean first = true ; boolean leadingZero = false ; StringBuilder part = new StringBuilder ( ) ;"],"bleu":0.39483056475419154,"rouge_l":0.49456615490771094}
{"id":170,"predictions":["import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . StringTokenizer ; import java . io . IOException ; import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . InputStream ;   public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; FastScanner in = new FastScanner ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; TaskB solver = new TaskB ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; }   static class TaskB { public void solve ( int testNumber , FastScanner in , PrintWriter out ) {   long b = in . nextLong ( ) ; long p = in . nextLong ( ) ; long q = in . nextLong ( ) ;   long h = in . nextLong ( ) ;   double p = in . nextDouble ( ) ;  "],"references":["import java . util . Scanner ;   public class A1207 { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int t = scanner . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int r = 0 ; int b = scanner . nextInt ( ) , p = scanner . nextInt ( ) , f = scanner . nextInt ( ) ; int h = scanner . nextInt ( ) , c = scanner . nextInt ( ) ; if ( h > c ) { if ( b \/ 2 >= p ) { r = p * h ; b = b \/ 2 - p ; if ( b > f ) { r += f * c ; } else { r += b * c ; } } else { r = b \/ 2 * h ; } } else { if ( b \/ 2 >= f ) { r = f * c ; b = b \/ 2 - f ; if ( b > p ) { r += p * h ; } else { r += b * h ; } } else { r = b \/ 2 * c ; } } System . out . println ( r ) ; } } }"],"bleu":0.1274486897272444,"rouge_l":0.30699547055863113}
{"id":171,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . Scanner ;   import java . util . StringTokenizer ;   public class Main { static class RealScanner { BufferedReader br ; StringTokenizer st ;   public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; }   String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   long nextLong ( ) { return Long . parseLong ( next ( ) ) ; }   double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; }   String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; }   public static void main ( String [ ] args ) { FastScanner sc = new FastScanner ( ) ; int t = sc . nextInt ( ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ;"],"references":["import java . util . * ;   public class Absolutezero { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; String t = sc . next ( ) ; String [ ] s1 = s . split ( \" : \" ) ; String [ ] t1 = t . split ( \" : \" ) ; int h1 = Integer . parseInt ( s1 [ 0 ] ) ; int m1 = Integer . parseInt ( s1 [ 1 ] ) ;   int h2 = Integer . parseInt ( t1 [ 0 ] ) ; int m2 = Integer . parseInt ( t1 [ 1 ] ) ;  "],"bleu":0.12561859474701842,"rouge_l":0.3395896293939875}
{"id":172,"predictions":["import java . util . * ; import java . io . * ;   public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; }   void run ( FastScanner in , PrintWriter out ) {   int n = in . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = in . nextInt ( ) ; }   int min = 0 , max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { min = Math . min ( min , a [ i ] ) ; max = Math . max ( min , a [ i ] ) ; } Arrays . sort ( a ) ;   for ( int i = 0 ; i < n && ( a [ i ] - a [ i ] ) ; i ++ ) { int j = a [ i ] - a [ j ] ;   if ( j < min ) { min ++ ; } else { j ++ ; } } out . println ( min ) ;   }   static class FastScanner { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( \" \" ) ;   String next ( ) { while ( ! st . hasMoreTokens ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   long nextLong ( ) { return Long . parseLong ( next ( ) ) ; }   double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; }   String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } }"],"references":["import java . lang . * ; import java . util . * ;   public class Abhishek {   public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int m = sc . nextInt ( ) ; int [ ] g = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { g [ i ] = sc . nextInt ( ) ; } Arrays . sort ( b ) ; Arrays . sort ( g ) ; int i = 0 , j = 0 , count = 0 ; while ( i < n && j < m ) { if ( Math . abs ( b [ i ] - g [ j ] ) <= 1 ) { count ++ ; i ++ ; j ++ ; } else if ( b [ i ] < g [ j ] ) { i ++ ; } else { j ++ ; } } System . out . println ( count ) ;   }   }"],"bleu":0.2916289256453281,"rouge_l":0.5013953016388453}
{"id":173,"predictions":["import java . util . * ;   public class Solution { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; if ( n % 2 == 0 ) { System . out . println ( \" Fen \" ) ; } else if ( n % 2 == 0 ) { System . out . println ( \" Fen \" ) ; } else { System . out . println ( \" E \" ) ; } } }"],"references":["import java . util . Scanner ;   public class Vsa {   public static void main ( String [ ] args ) {   Scanner in = new Scanner ( System . in ) ;   int n = in . nextInt ( ) ; System . out . println ( ( n % 2 == 0 ) ? \" Mahmoud \" : \" Ehab \" ) ;   } }"],"bleu":0.4443980009957448,"rouge_l":0.7117852975495915}
{"id":174,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import java . util . StringTokenizer ;   public class ProblemA { public static void main ( String [ ] args ) throws FileNotFoundException {"],"references":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a [ ] = new int [ n ] ; int b [ ] = new int [ n ] ; int c [ ] = new int [ n ] ; int d [ ] = new int [ 2 ] ; boolean num [ ] = new boolean [ n + 1 ] ;   for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; c [ i ] = a [ i ] ; num [ i ] = false ; }   for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; }   int flag = 0 ;   for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] != b [ i ] ) { d [ flag ] = i ; flag ++ ; } else { num [ a [ i ] ] = true ; num [ b [ i ] ] = true ; } }   if ( flag == 2 ) { if ( num [ a [ d [ 1 ] ] ] || num [ b [ d [ 0 ] ] ] ) { a [ d [ 1 ] ] = b [ d [ 1 ] ] ; } else { a [ d [ 0 ] ] = b [ d [ 0 ] ] ; } for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( a [ i ] + \" ▁ \" ) ; } } if ( flag == 1 ) { for ( int i = 1 ; i <= n ; i ++ ) { if ( num [ i ] != true ) { a [ d [ 0 ] ] = i ; } } for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( a [ i ] + \" ▁ \" ) ; } }    }   }"],"bleu":0.00608902962822704,"rouge_l":0.09318246110325316}
{"id":175,"predictions":["import java . io . File ; import java . io . FileNotFoundException ; import java . io . IOException ; import java . io . PrintWriter ; import java . util . Arrays ; import java . util . List ; import java . util . Scanner ;   public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; double d = sc . nextDouble ( ) ; double x = sc . nextDouble ( ) ; double g = sc . nextDouble ( ) ; double b = sc . nextDouble ( ) ; double c = sc . nextDouble ( ) ; double min = Double . MAX_VALUE ; for ( int i = 0 ; i < g ; i ++ ) { if ( g >= b && g <= b ) { min = g ; } else if ( g > b && g <= b ) { double temp = ( g - b ) \/ g ;"],"references":["import java . util . Scanner ;   public class TrafficLights {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int l = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int v = sc . nextInt ( ) ; int g = sc . nextInt ( ) ; int r = sc . nextInt ( ) ;   double ans = l * 1.0 \/ v ; double v1 = ( d * 1.0 \/ v ) % ( g + r ) ; if ( v1 >= g ) ans += g + r - v1 ;   System . out . println ( ans ) ; } }"],"bleu":0.2932391246102872,"rouge_l":0.5485726236536651}
{"id":176,"predictions":["import java . util . * ; import java . io . * ; public class Solution { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; }   void run ( FastScanner in , PrintWriter out ) {  "],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . StringTokenizer ;   public class NiceTable {   static int [ ] [ ] bestAns ; static int leastChanged ; static int w , h ; public static void main ( String [ ] args ) { FastScanner fs = new FastScanner ( ) ; h = fs . nextInt ( ) ; w = fs . nextInt ( ) ; int [ ] [ ] board = new int [ w ] [ h ] ; String letters = \" ACGT \" ; for ( int y = 0 ; y < h ; y ++ ) { String next = fs . next ( ) ; for ( int x = 0 ; x < w ; x ++ ) { board [ x ] [ y ] = letters . indexOf ( next . charAt ( x ) + \" \" ) ; } } leastChanged = w * h ; solveHLines ( board , 0 , 1 ) ; solveHLines ( board , 0 , 2 ) ; solveHLines ( board , 0 , 3 ) ; solveHLines ( board , 1 , 2 ) ; solveHLines ( board , 1 , 3 ) ; solveHLines ( board , 2 , 3 ) ; solveVLines ( board , 0 , 1 ) ; solveVLines ( board , 0 , 2 ) ; solveVLines ( board , 0 , 3 ) ; solveVLines ( board , 1 , 2 ) ; solveVLines ( board , 1 , 3 ) ; solveVLines ( board , 2 , 3 ) ; PrintWriter out = new PrintWriter ( System . out ) ; for ( int y = 0 ; y < h ; y ++ ) { for ( int x = 0 ; x < w ; x ++ ) { char toPrint = letters . charAt ( bestAns [ x ] [ y ] ) ; out . print ( toPrint ) ; } out . println ( ) ; } out . close ( ) ;"],"bleu":0.015675049910164312,"rouge_l":0.23177485832045333}
{"id":177,"predictions":["import java . util . * ; import java . lang . * ; import java . io . * ;   public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) {"],"references":["   import java . io . * ; import java . util . * ; public class pt { public static void main ( String [ ] args ) { FastReader sc = new FastReader ( ) ; PrintWriter out = new PrintWriter ( System . out ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int a2 = sc . nextInt ( ) ; int b2 = sc . nextInt ( ) ; int c2 = sc . nextInt ( ) ; if ( a == 0 && b == 0 && a2 == 0 && b2 == 0 ) { if ( c == 0 && c2 == 0 ) out . println ( \" - 1\" ) ; else out . println ( \"0\" ) ; } else if ( a * b2 == b * a2 ) { if ( c * b2 == b * c2 && c * a2 == a * c2 ) out . println ( \" - 1\" ) ; else out . println ( \"0\" ) ; } else { out . println ( \"1\" ) ; }   out . flush ( ) ; }   static class FastReader { BufferedReader br ; StringTokenizer st ; public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"bleu":0.000037372753883985336,"rouge_l":0.11764314690430272}
{"id":178,"predictions":["import java . util . * ; import java . io . * ; public class GFG { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; }   void run ( FastScanner in , PrintWriter out ) {  "],"references":["import java . util . * ; import java . io . * ;   public class Codeforces {   InputStream is ; PrintWriter out ; String INPUT = \" \" ;  "],"bleu":0.21864945308624956,"rouge_l":0.4267031630170317}
{"id":179,"predictions":["import java . util . * ; public class CodeForces { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int n = sc . nextInt ( ) ; String s = sc . next ( ) ;   for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == ' > ' || s . charAt ( i ) == ' < ' ) { s = s . substring ( i - 1 , i ) ; } else { s = s . substring ( i , i + 1 ) ; } } System . out . println ( s ) ; } } }"],"references":["import java . util . * ; import java . io . * ; public class EdE { static long [ ] mods = { 1000000007 , 998244353 , 1000000009 } ; static long mod = mods [ 0 ] ; public static MyScanner sc ; public static PrintWriter out ; public static void main ( String [ ] omkar ) throws Exception {"],"bleu":0.11275560293587672,"rouge_l":0.23315814620162445}
{"id":180,"predictions":["import java . util . * ; import java . lang . * ; import java . io . * ; public class Main { PrintWriter out ; FastReader sc ; StringTokenizer st ; public FastReader ( ) {"],"references":["import java . util . * ; import java . io . * ; import java . math . * ;   public class Main { static PrintWriter pw = new PrintWriter ( System . out ) ;   public static void main ( String [ ] args ) throws IOException , InterruptedException { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; w : while ( t -- > 0 ) { int n = sc . nextInt ( ) , m = sc . nextInt ( ) ; char [ ] s = sc . next ( ) . toCharArray ( ) , f = sc . next ( ) . toCharArray ( ) ; pair [ ] q = new pair [ m ] ; for ( int i = 0 ; i < q . length ; i ++ ) { q [ i ] = new pair ( sc . nextInt ( ) , sc . nextInt ( ) ) ; } int N = 1 ; while ( N < n ) N <<= 1 ;"],"bleu":0.012944676110953008,"rouge_l":0.2463713239934369}
{"id":181,"predictions":["import java . util . * ; import java . io . * ;   public class Functions_Again {   static class FastReader { BufferedReader br ; StringTokenizer st ;   public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; }   String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   long nextLong ( ) { return Long . parseLong ( next ( ) ) ; }   double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; }   String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; }   }   public static void shuffle ( int [ ] a ) { Random r = new Random ( ) ;   for ( int i = 0 ; i <= a . length - 2 ; i ++ ) { int j = i + r . nextInt ( a . length - i ) ;   swap ( a , i , j ) ; }   Arrays . sort ( a ) ; }   public static void swap ( int [ ] a , int i , int j ) { int temp = a [ i ] ; a [ i ] = a [ j ] ; a [ j ] = temp ; }   public static void main ( String [ ] args ) {"],"references":["import java . util . * ; import java . io . * ; public class Main2 { static class FastReader { BufferedReader br ; StringTokenizer st ; public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } static FastReader sc = new FastReader ( ) ; static PrintWriter out = new PrintWriter ( System . out ) ; public static void main ( String [ ] args ) { int z = 1 ;"],"bleu":0.6419116434243826,"rouge_l":0.7841752670650008}
{"id":182,"predictions":["import java . util . * ; import java . lang . * ; import java . io . * ;   public class Codechef { public static void main ( String [ ] args ) throws java . lang . Exception { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = Integer . parseInt ( sc . next ( ) ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . next ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j <= Math . min ( arr [ i ] , arr [ j ] ) ; j ++ ; } ans = 0 ; for ( int i = 0 ; i <= n ; i ++ ) { for ( int j = i ; j <= n ; j ++ ) { if ( arr [ j ] < arr [ i ] ) { ans = j ; break ; } } } if ( k <= n ) ans = k ; } System . out . println ( ans ) ; } }"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;   public class Maximizer { public static void main ( String [ ] args ) throws IOException { BufferedReader reader = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( reader . readLine ( ) ) ;   String num = st . nextToken ( ) ; int n = num . length ( ) ; char [ ] a = num . toCharArray ( ) ;   int k = Integer . parseInt ( st . nextToken ( ) ) ;   for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( k == 0 ) break ; int max = i ;   for ( int j = i + 1 ; j < i + k + 1 && j < n ; j ++ ) if ( a [ j ] > a [ max ] ) max = j ;   int ok = max - i ; if ( ok > 0 ) { char x = a [ max ] ; while ( max > i ) { a [ max ] = a [ max - 1 ] ; max -- ; } a [ max ] = x ; k -= ok ; } }   StringBuilder ans = new StringBuilder ( ) ;   for ( int i = 0 ; i < n ; i ++ ) { ans . append ( a [ i ] ) ; }   System . out . println ( ans ) ; } }"],"bleu":0.4003144228477788,"rouge_l":0.5082425757305244}
{"id":183,"predictions":["import java . util . * ; import java . lang . * ; import java . io . * ;   public class A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int sum = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { sum += arr [ i + 1 ] ; } if ( ( sum % 2 == 0 ) { System . out . println ( \" YES \" ) ; } else { System . out . println ( \" NO \" ) ; } sc . close ( ) ; } } }"],"references":["import java . util . Scanner ;   public class Balanced_Matrix {   public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ;   int t = in . nextInt ( ) ; int n ; while ( t -- != 0 ) { n = in . nextInt ( ) ; if ( n % 4 != 0 ) { System . out . println ( \" NO \" ) ; } else { System . out . println ( \" YES \" ) ; for ( int i = 2 ; i <= n ; i += 2 ) { System . out . print ( i + \" ▁ \" ) ; }   for ( int i = 1 ; i < n - 1 ; i += 2 ) { System . out . print ( i + \" ▁ \" ) ; } System . out . println ( n + n \/ 2 - 1 ) ; }   }   }   }"],"bleu":0.4882720179263255,"rouge_l":0.5893976323119777}
{"id":184,"predictions":["import java . util . * ; import java . lang . * ; import java . io . * ;   public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) {"],"references":["import java . util . * ; import java . lang . * ; import java . io . * ; public class Choosing_Symbol_Pairs {   public static void main ( String [ ] args ) throws java . lang . Exception { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; String s = br . readLine ( ) ; Map < Character , Integer > m = new HashMap < > ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( m . containsKey ( s . charAt ( i ) ) ) m . put ( s . charAt ( i ) , m . get ( s . charAt ( i ) ) + 1 ) ; else m . put ( s . charAt ( i ) , 1 ) ; } long ans = 0 ; for ( Character c : m . keySet ( ) ) ans += Math . pow ( m . get ( c ) , 2 ) ; System . out . println ( ans ) ; }   }"],"bleu":0.007799279925447514,"rouge_l":0.2317118000245068}
{"id":185,"predictions":["import java . util . * ; import java . io . * ;   public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( ) ; }   void run ( FastScanner in , PrintWriter out ) {  "],"references":["import java . util . ArrayList ; import java . util . Collections ; import java . util . HashSet ; import java . util . Scanner ;   public class bingo { static class Joe implements Comparable < Joe > { ArrayList < Integer > list ; int ogIndex ; public Joe ( ArrayList < Integer > list , int ogIndex ) { this . list = list ; this . ogIndex = ogIndex ; } @ Override public int compareTo ( Joe other ) { int min = Math . min ( list . size ( ) , other . list . size ( ) ) ; for ( int i = 0 ; i < min ; i ++ ) { if ( list . get ( i ) != other . list . get ( i ) ) return list . get ( i ) - other . list . get ( i ) ; } return other . list . size ( ) - list . size ( ) ; } public boolean isSuperSet ( Joe in ) { if ( in . list . size ( ) > list . size ( ) ) return false ; HashSet < Integer > inSet = new HashSet < Integer > ( ) ; for ( int e : list ) inSet . add ( e ) ; for ( int e : in . list ) if ( ! inSet . contains ( e ) ) return false ; return true ; } public String toString ( ) { return list . toString ( ) ; } } public static void main ( String [ ] args ) {"],"bleu":0.016245441107548025,"rouge_l":0.20311329393157412}
{"id":186,"predictions":["import java . util . * ;   public class C {   public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int t = in . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int n = in . nextInt ( ) ; int k = in . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int j = 0 ; j < n ; j ++ ) { a [ i ] = in . nextInt ( ) ; } Arrays . sort ( a ) ; long ans = 1 ; for ( int i = 0 ; i < n ; i ++ ) { ans = 1 + Math . abs ( a [ i ] - a [ i ] ) ; } System . out . println ( ans ) ;   } }"],"references":["import java . util . Arrays ; import java . util . HashMap ; import java . util . Scanner ; import java . util . Vector ; import javafx . util . Pair ;   public class NewClass {   static int n11 = 100000 ; static boolean a11 [ ] = new boolean [ n11 + 1 ] ; static Vector < Long > v11 = new Vector ( ) ;   static int gcd ( int a , int b ) { if ( b == 0 ) { return a ; } return gcd ( b , a % b ) ; }   static void seive ( ) {"],"bleu":0.07837142090132185,"rouge_l":0.30305180979418034}
{"id":187,"predictions":["import java . util . * ; import java . io . * ;"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ;   public class CF749A { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int n = Integer . parseInt ( br . readLine ( ) ) ; System . out . println ( n \/ 2 ) ; for ( int i = 1 ; i < n \/ 2 ; i ++ ) { System . out . print ( \"2 ▁ \" ) ; } System . out . print ( ( n & 1 ) == 0 ? 2 : 3 ) ; }   }"],"bleu":0.00014975685856835345,"rouge_l":0.1333996023856859}
{"id":188,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ;"],"references":["import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;  "],"bleu":0.36787944117144233,"rouge_l":0.61794500723589}
{"id":189,"predictions":["import java . util . Arrays ; import java . util . Scanner ;   public class BadUglyNumbers { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int t = scan . nextInt ( ) ; while ( t -- > 0 ) { int n = scan . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = scan . nextInt ( ) ; } Arrays . sort ( a ) ; for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( a [ i ] ) ; } System . out . println ( ) ; } } }"],"references":["import java . util . * ;   public class M_Round_4 {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ;  "],"bleu":0.1645025658116863,"rouge_l":0.372904752514297}
{"id":190,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ;"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ;   public class Codeforces {   private static final Scanner sc = new Scanner ( System . in ) ; private static final BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; private static final long MOD = ( long ) ( 1e9 + 7 ) ;   public static int [ ] LPS ( String p ) { int [ ] lps = new int [ p . length ( ) ] ;   int i = 1 ; int j = 0 ; while ( i < p . length ( ) ) { if ( p . charAt ( i ) == p . charAt ( j ) ) { lps [ i ] = j + 1 ; i ++ ; j ++ ; } else { if ( j == 0 ) { lps [ i ] = 0 ; i ++ ; } else { j = lps [ j - 1 ] ; } } } return lps ; }   public static void KMP ( String text , String pattern ) { int [ ] lps = LPS ( pattern ) ; int i = 0 ; int j = 0 ; ArrayList < Integer > matches = new ArrayList < > ( ) ; while ( i < text . length ( ) ) { if ( text . charAt ( i ) == pattern . charAt ( j ) ) { i ++ ; j ++ ; } else { if ( j != 0 ) { j = lps [ j - 1 ] ; } else { i ++ ; } } if ( j == pattern . length ( ) ) { matches . add ( i - j ) ; j = lps [ j - 1 ] ; } } for ( int x : matches ) { System . out . println ( \" Match ▁ at ▁ : ▁ \" + x ) ; } }   private static class SegmentTree { private long [ ] st ; private int size ; private int n ; private long [ ] a ; SegmentTree ( long [ ] a , int n ) { this . size = 4 * n ; this . n = n ; this . a = a ; st = new long [ size ] ;"],"bleu":4.210374300532351e-9,"rouge_l":0.07967904459787274}
{"id":191,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int t = sc . nextInt ( ) ; for ( int i = 1 ; i <= n ; i ++ ) { t += sc . nextInt ( ) ; } if ( t == 1 ) System . out . println ( \" NO \" ) ; else System . out . println ( \" YES \" ) ; } }"],"references":["import java . util . * ; import java . io . * ; import java . lang . * ; import java . math . * ;   public class cp { static BufferedReader br ; static StringTokenizer st ;   public static void main ( String [ ] args ) throws IOException {   br = new BufferedReader ( new InputStreamReader ( System . in ) ) ;   st = readLine ( ) ; int n = tokenInt ( ) ; int t = tokenInt ( ) ;   st = readLine ( ) ; int [ ] array = readIntArray ( n ) ;  "],"bleu":0.3277986448613296,"rouge_l":0.45466991177365385}
{"id":192,"predictions":["import java . io . * ;"],"references":["import java . util . * ; public class VanyaL { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; int n = s . nextInt ( ) ; int l = s . nextInt ( ) ; double [ ] arr = new double [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = s . nextInt ( ) ; } Arrays . sort ( arr ) ; double dis = arr [ 0 ] - 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { double k = ( arr [ i + 1 ] - arr [ i ] ) \/ 2 ; if ( k > dis ) { dis = k ; } } if ( ( l - arr [ n - 1 ] ) > dis ) { dis = l - arr [ n - 1 ] ; } System . out . println ( dis ) ; } }"],"bleu":1.250555960811169e-12,"rouge_l":0.051124458723285374}
{"id":193,"predictions":["import java . util . * ; import java . io . * ;   public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = sc . nextInt ( ) ; int res [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ j ] == 0 ) { res [ i ] = ( int ) ( arr [ j ] ) ; } } } for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( arr [ i ] ) ; } System . out . println ( res ) ; } }"],"references":["import java . io . IOException ; import java . io . InputStream ; import java . io . OutputStream ; import java . io . PrintWriter ; import java . math . BigInteger ; import java . util . * ;     public class DivisibilitySeven {   public static void main ( String [ ] args ) {   InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader sc = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; Solver solver = new Solver ( ) ;"],"bleu":0.15041169890980247,"rouge_l":0.3262744241894989}
{"id":194,"predictions":["import java . util . * ; import java . lang . * ; import java . io . * ;  "],"references":["import java . util . * ; public class Main {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int i = 0 ; int j = 0 ; int t = sc . nextInt ( ) ; for ( int f = 0 ; f < t ; f ++ ) {   int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int count = 0 ; int [ ] row = new int [ n ] ; int [ ] column = new int [ m ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < m ; j ++ ) { int current = sc . nextInt ( ) ; if ( current == 1 ) { row [ i ] = 1 ; column [ j ] = 1 ; } } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < m ; j ++ ) { if ( row [ i ] == 0 && column [ j ] == 0 ) { count ++ ; row [ i ] = 1 ; column [ j ] = 1 ; } } } if ( count % 2 == 0 ) { System . out . println ( \" Vivek \" ) ; } else { System . out . println ( \" Ashish \" ) ; }   count = 0 ; }   sc . close ( ) ; }   }"],"bleu":0.000001190139013120737,"rouge_l":0.0774532922183929}
{"id":195,"predictions":["import java . util . Scanner ; public class A1377 { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) % 2 == 0 ) { cnt += ( i + 1 ) ; } } System . out . println ( cnt ) ; } }"],"references":["import java . util . * ; public class question { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int sum = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { char ch = s . charAt ( i ) ; int x = Character . getNumericValue ( ch ) ; if ( ( x & 1 ) == 0 ) { sum += i + 1 ; } } System . out . println ( sum ) ;   } }"],"bleu":0.6332398357551242,"rouge_l":0.7979404397439466}
{"id":196,"predictions":["import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int op = 1 ; int ans = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] > 1 ) ans ++ ; } System . out . println ( ans ) ; } System . out . println ( ans ) ; } }"],"references":["import java . io . * ; import java . util . * ; public class CF1361B {   static class FastReader { BufferedReader br ; StringTokenizer st ; public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } } static int MOD = 1000000007 ; public static void main ( String [ ] args ) { FastReader br = new FastReader ( ) ; int T = br . nextInt ( ) ; StringBuilder sb = new StringBuilder ( ) ; int n , p = 0 ; int [ ] a = new int [ 0 ] ; int num = 0 ; int cur = 0 ; long ans = 0 ;"],"bleu":0.22723016739078858,"rouge_l":0.34251041477993116}
{"id":197,"predictions":["import java . io . BufferedReader ; import java . io . FileReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Scanner ; import java . util . StringTokenizer ; import java . util . * ; import java . io . * ; public class codeforces { static class Student { int x , y ;"],"references":["import java . util . * ; import java . io . * ; public class Main implements Runnable { FastScanner sc ; PrintWriter pw ; final class FastScanner { BufferedReader br ; StringTokenizer st ; public FastScanner ( ) { try { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } } public long nlo ( ) { return Long . parseLong ( next ( ) ) ; } public String next ( ) { if ( st . hasMoreTokens ( ) ) return st . nextToken ( ) ; try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } return st . nextToken ( ) ; } public int ni ( ) { return Integer . parseInt ( next ( ) ) ; } public String nli ( ) { String line = \" \" ; if ( st . hasMoreTokens ( ) ) line = st . nextToken ( ) ; else try { return br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } while ( st . hasMoreTokens ( ) ) line += \" ▁ \" + st . nextToken ( ) ; return line ; } public double nd ( ) { return Double . parseDouble ( next ( ) ) ; } } public static void main ( String [ ] args ) { new Thread ( null , new Main ( ) , \" codeforces \" , 1 << 25 ) . start ( ) ; } public void run ( ) { sc = new FastScanner ( ) ; pw = new PrintWriter ( System . out ) ; solve ( ) ; pw . flush ( ) ; pw . close ( ) ; } public long gcd ( long a , long b ) { return b == 0L ? a : gcd ( b , a % b ) ; } public long ppow ( long a , long b , long mod ) { if ( b == 0L ) return 1L ; long tmp = 1 ; while ( b > 1L ) { if ( ( b & 1L ) == 1 ) tmp *= a ; a *= a ; a %= mod ; tmp %= mod ; b >>= 1 ; } return ( tmp * a ) % mod ; }"],"bleu":0.0011981301122178196,"rouge_l":0.11958774435669076}
{"id":198,"predictions":["import java . util . Arrays ; import java . util . Scanner ;   public class Ostap { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int m = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] arr = new int [ m ] ; int [ ] t = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < m ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int ans = 0 ; for ( int i = 1 ; i < arr . length ; i ++ ) { ans += arr [ i ] - ( arr [ i - 1 ] + k - arr [ i ] ) ; ans += arr [ i ] ; } System . out . print ( ans ) ; } }  "],"references":["import java . util . * ;   public class Check2 { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] ar = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { ar [ i ] = sc . nextInt ( ) ; } int c = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { int sum = ar [ i ] + ar [ i + 1 ] ; if ( sum < k ) { ar [ i + 1 ] += k - sum ; c += k - sum ; } } System . out . println ( c ) ; for ( Integer integer : ar ) { System . out . print ( integer + \" ▁ \" ) ; } System . out . println ( ) ;     }    public static long power ( long a , long b , long c ) { long ans = 1 ; while ( b != 0 ) { if ( b % 2 == 1 ) { ans = ans * a ; ans %= c ; } a = a * a ; a %= c ; b \/= 2 ; } return ans ; }   public static long power1 ( long a , long b , long c ) { long ans = 1 ; while ( b != 0 ) { if ( b % 2 == 1 ) { ans = multiply ( ans , a , c ) ; } a = multiply ( a , a , c ) ; b \/= 2 ;   } return ans ;   }   public static long multiply ( long a , long b , long c ) { long res = 0 ; a %= c ; while ( b > 0 ) { if ( b % 2 == 1 ) { res = ( res + a ) % c ; } a = ( a + a ) % c ; b \/= 2 ; }   return res % c ;   }   public static long totient ( long n ) { long result = n ; for ( long i = 2 ; i * i <= n ; i ++ ) { if ( n % i == 0 ) {"],"bleu":0.17688673291313442,"rouge_l":0.37797493310801294}
{"id":199,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] > b [ i ] ) { count ++ ; } else { if ( count == 0 ) { continue ; } } } System . out . println ( count ) ; } }"],"references":["import java . util . Arrays ; import java . util . Scanner ;   public class B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long n = sc . nextLong ( ) ; String s = sc . next ( ) ; char [ ] ch = s . toCharArray ( ) ; long arr [ ] = new long [ 10 ] ; for ( long i = 1 ; i <= 9 ; i ++ ) { arr [ ( int ) i ] = sc . nextLong ( ) ; }"],"bleu":0.27881285500971603,"rouge_l":0.5528483992467043}
{"id":200,"predictions":["import java . util . Scanner ;   public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int t = scanner . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int n = scanner . nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int j = 0 ; j < n ; j ++ ) { a [ j ] = scanner . nextInt ( ) ; } int b [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = scanner . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = scanner . nextInt ( ) ; } System . out . println ( d [ 0 ] ) ; } } }"],"references":["import java . io . * ; import java . util . * ; public class Main implements Runnable { private void solve ( ) throws IOException { char s [ ] = ( \" ▁ \" + nextLine ( ) ) . toCharArray ( ) ; int n = s . length - 1 ; int dp [ ] = new int [ n + 1 ] ;"],"bleu":0.10698024942778465,"rouge_l":0.3260655507103672}
{"id":201,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ;"],"references":["import java . util . * ; import java . util . Arrays ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int count = 0 ; if ( b == 0 ) { System . out . println ( 0 ) ; } else { if ( a == 0 ) { while ( b != 0 && c > 1 ) { count = count + 3 ; b = b - 1 ; c = c - 2 ; } System . out . println ( count ) ; } else if ( c == 0 ) { while ( a != 0 && b > 1 ) { count = count + 3 ; a = a - 1 ; b = b - 2 ; } System . out . println ( count ) ; } else { while ( b != 0 && c > 1 ) { count = count + 3 ; b = b - 1 ; c = c - 2 ; } while ( a != 0 && b > 1 ) { count = count + 3 ; a = a - 1 ; b = b - 2 ; } System . out . println ( count ) ; } } } } }"],"bleu":8.22911586898173e-7,"rouge_l":0.07328343036687923}
{"id":202,"predictions":["  import java . util . Scanner ;   public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int m = scanner . nextInt ( ) ; int a [ ] = new int [ n ] ; int b [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = scanner . nextInt ( ) ; b [ i ] = scanner . nextInt ( ) ; }   for ( int i = 1 ; i <= n ; i ++ ) { int sum = 0 ; for ( int j = 0 ; j < m ; j ++ ) sum += a [ j ] ; b [ i ] = sum ; }   Arrays . sort ( sum ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum = sum + a [ i ] ;   for ( int i = 0 ; i < n ; i ++ ) { int sum = 0 ; for ( int j = 0 ; j < m ; j ++ ) { sum = ( sum + a [ j ] - sum ) * ( sum - sum ) ; } sum = sum - 1 ;   System . out . println ( sum ) ; }   }"],"references":["import java . io . * ; import java . util . * ; import static java . lang . Math . * ;   public class LipschitzSequenceMaxIslands { public static void main ( String [ ] args ) { FastScanner sc = new FastScanner ( ) ; PrintWriter out = new PrintWriter ( System . out ) ; int N = sc . nextInt ( ) ; int Q = sc . nextInt ( ) ; int [ ] a = new int [ N ] ; int [ ] diff = new int [ N - 1 ] ; Arrays . setAll ( a , i -> sc . nextInt ( ) ) ; Arrays . setAll ( diff , i -> abs ( a [ i + 1 ] - a [ i ] ) ) ; int [ ] [ ] bounds = new int [ 2 ] [ N ] ; ArrayDeque < Integer > decr = new ArrayDeque < > ( ) ; for ( int i = 0 ; i < N - 1 ; i ++ ) {"],"bleu":0.24007889930053047,"rouge_l":0.459323785619371}
{"id":203,"predictions":["import java . util . Arrays ; import java . util . Comparator ; import java . util . Scanner ;   public class A { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int T = in . nextInt ( ) ; for ( int t = 0 ; t < T ; t ++ ) { int n = in . nextInt ( ) ; int [ ] A = new int [ n ] ; int [ ] B = new int [ n ] ; for ( int n = 0 ; n < n ; ++ ) { A [ n ] = in . nextInt ( ) ; } for ( int n = 0 ; n < n ; n ++ ) { B [ n ] = in . nextInt ( ) ; } int [ ] c = new int [ n ] ; int [ ] y = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = in . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( c [ j ] != A [ i ] [ j ] ) { c [ j ] += A [ i ] [ j ] ; } } } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { ans += c [ j ] * 2 ; } } System . out . println ( ans ) ; } }"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Arrays ; import java . util . Scanner ;   public class _0697IntegerPoints {   public static void main ( String [ ] args ) throws NumberFormatException , IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int cases = Integer . parseInt ( br . readLine ( ) ) ; while ( cases > 0 ) { int n = Integer . parseInt ( br . readLine ( ) ) ; String [ ] arr = new String [ n ] ; arr = br . readLine ( ) . trim ( ) . split ( \" ▁ \" ) ; int m = Integer . parseInt ( br . readLine ( ) ) ; String [ ] arr1 = new String [ m ] ; arr1 = br . readLine ( ) . trim ( ) . split ( \" ▁ \" ) ; long count = 0 ; long even1 = 0 ; long even2 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int val = Integer . parseInt ( arr [ i ] ) ; if ( val % 2 == 0 ) even1 ++ ; } for ( int i = 0 ; i < m ; i ++ ) { int val = Integer . parseInt ( arr1 [ i ] ) ; if ( val % 2 == 0 ) even2 ++ ; } count += even1 * even2 ; count += ( n - even1 ) * ( m - even2 ) ; System . out . println ( count ) ; cases -- ; } }   }"],"bleu":0.2989501412027812,"rouge_l":0.4773528192371476}
{"id":204,"predictions":["import java . util . * ; import java . io . * ;   public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; }   void run ( FastScanner in , PrintWriter out ) {  "],"references":["# include < iostream > # include < vector > # include < iomanip > # include < cstring > # include < string . h > # include < iterator > # include < math . h > # include < set > # include < queue > # include < stack > # include < algorithm > # include < tuple > # include < limits . h > # include < string > # include < bitset > # include < map > # include < numeric > # include < unordered_map >   # define endl cout << \" \\n \" # define lli long long int # define ld long double # define M_PI ( 3.14159265358979323846264338327950288 ) # define MOD ( 1000000007 )   using namespace std ;  "],"bleu":0.011693013615880404,"rouge_l":0.07941559380876609}
{"id":205,"predictions":["import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; HashMap < Integer , Integer > map = new HashMap < > ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int k = sc . nextInt ( ) ; HashMap < Integer , Integer > map = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int a = sc . nextInt ( ) ; if ( map . containsKey ( a ) ) { map . put ( a , map . get ( a ) - 1 ) ; } else { map . put ( a , map . get ( a ) - 1 ) ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( map . containsKey ( a ) ) { map . put ( a , map . get ( a ) ; } else { map . put ( a , map . get ( a ) - 1 ) ; } } System . out . println ( map . size ( ) ) ; for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( map . get ( a [ i ] ) + \" ▁ \" ) ; } System . out . println ( map . size ( ) ) ; } }"],"references":["import java . util . * ;   public class A { public static void main ( String [ ] args ) { List < String > pre = new ArrayList < > ( ) ; List < String > post = new ArrayList < > ( ) ; Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { pre . add ( sc . next ( ) ) ; post . add ( sc . next ( ) ) ; }"],"bleu":0.21584444458595517,"rouge_l":0.41601414498610756}
{"id":206,"predictions":["import java . util . * ;"],"references":["import java . io . File ; import java . io . FileNotFoundException ; import java . io . IOException ; import java . io . PrintWriter ; import java . util . * ;   public class Main { public static void main ( String [ ] args ) throws FileNotFoundException { Scanner input = new Scanner ( System . in ) ; int a = input . nextInt ( ) ; int b = input . nextInt ( ) ; int temp = 0 ; int i = 1 ; while ( a >= 0 && b >= 0 ) { if ( temp == 0 ) { a -= i ; if ( a < 0 ) { System . out . println ( \" Vladik \" ) ; return ; } temp = ++ temp % 2 ; } else if ( temp == 1 ) { b -= i ; if ( b < 0 ) { System . out . println ( \" Valera \" ) ; return ; } temp = ++ temp % 2 ; } i ++ ; } } }"],"bleu":5.109089028063325e-12,"rouge_l":0.0608695652173913}
{"id":207,"predictions":["import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collections ; import java . util . Scanner ; import java . lang . Math ; public class Account { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = sc . nextInt ( ) ; int min = Integer . MAX_VALUE ; int min = Integer . MIN_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { int x = sc . nextInt ( ) ; min = Math . min ( x , y ) ; min = Math . min ( min , x ) ; } Collections . sort ( min ) ; System . out . println ( min + a [ min ] ) ; } }"],"references":["import java . io . * ; import java . util . Arrays ; import java . util . StringTokenizer ;"],"bleu":0.07497967764535231,"rouge_l":0.19941881583726845}
{"id":208,"predictions":["import java . util . * ;   public class Check2 { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int L = sc . nextInt ( ) ; int [ ] A = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { A [ i ] = sc . nextInt ( ) ; } int [ ] B = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { B [ i ] = sc . nextInt ( ) ; } long [ ] arr = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = arr [ i ] - 1 ; } long count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = arr [ i ] - 1 ; } for ( int i = 0 ; i < n + 1 ; i ++ ) { long count = 0 ; for ( int j = i + 1 ; j < n ; j ++ ) { arr [ j ] = arr [ j ] - arr [ i - 1 ] ; } } if ( count == 0 )"],"references":["import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;  "],"bleu":0.0298708500318118,"rouge_l":0.12727049582719685}
{"id":209,"predictions":["import java . util . * ; import java . io . * ; import java . math . * ;   public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( ) ; PrintWriter out = new PrintWriter ( System . out ) ;"],"references":["import java . util . * ; public class Main {   static int civ [ ] = new int [ 1000006 + 1 ] ; static void feed ( ) { for ( int i = 0 ; i < civ . length ; i ++ ) {   civ [ i ] = 1 ; }   civ [ 0 ] = civ [ 1 ] = 0 ;   for ( int i = 2 ; i * i < civ . length ; i ++ ) { if ( civ [ i ] == 1 ) { for ( int j = i ; j * i < civ . length ; j ++ ) civ [ i * j ] = 0 ; } }   }   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; long arr [ ] = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) {   arr [ i ] = sc . nextLong ( ) ; } feed ( ) ; for ( int i = 0 ; i < n ; i ++ ) { long tp = ( long ) Math . sqrt ( arr [ i ] ) ;   if ( tp * tp == arr [ i ] && civ [ ( int ) tp ] == 1 ) { System . out . println ( \" YES \" ) ; } else System . out . println ( \" NO \" ) ;    } } }"],"bleu":0.009078591462434431,"rouge_l":0.1955458073224228}
{"id":210,"predictions":["import java . util . * ; import java . io . * ;"],"references":["  import java . util . * ; import java . lang . * ; import java . io . * ;   public class B { public static void main ( String [ ] args ) throws java . lang . Exception { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int N = Integer . parseInt ( st . nextToken ( ) ) ; st = new StringTokenizer ( br . readLine ( ) ) ; int [ ] [ ] ip = new int [ N ] [ 2 ] ; int negs = 0 ; for ( int i = 0 ; i < N ; i ++ ) { ip [ i ] [ 1 ] = i ; ip [ i ] [ 0 ] = Integer . parseInt ( st . nextToken ( ) ) ; if ( ip [ i ] [ 0 ] >= 0 ) { ip [ i ] [ 0 ] = - ip [ i ] [ 0 ] - 1 ; } if ( ip [ i ] [ 0 ] < 0 ) { negs ++ ; } }   if ( negs % 2 == 1 ) { int min = 1 , idx = - 1 ; for ( int i = 0 ; i < N ; i ++ ) { if ( min > ip [ i ] [ 0 ] ) { min = ip [ i ] [ 0 ] ; idx = i ; } } ip [ idx ] [ 0 ] = - ip [ idx ] [ 0 ] - 1 ; }    for ( int i = 0 ; i < N ; i ++ ) { System . out . print ( ip [ i ] [ 0 ] + \" ▁ \" ) ; } System . out . println ( ) ;   } }"],"bleu":7.711569527495757e-11,"rouge_l":0.06687548942834769}
{"id":211,"predictions":["import java . io . * ; import java . util . * ; public class"],"references":["import java . util . Scanner ;   public class Solutions { static long dp [ ] [ ] ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int arr [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = sc . nextInt ( ) ; int c [ ] = new int [ n ] ; c [ n - 1 ] = arr [ n - 1 ] ; for ( int i = n - 2 ; i >= 0 ; i -- ) c [ i ] = Math . max ( c [ i + 1 ] , arr [ i ] ) ; int max = b ; for ( int i = 0 ; i < n ; i ++ ) { int temp = b % arr [ i ] + ( b \/ arr [ i ] ) * c [ i ] ; if ( temp > max ) max = temp ; } System . out . println ( max ) ; } }"],"bleu":8.887054600592717e-7,"rouge_l":0.06458823529411765}
{"id":212,"predictions":["import java . util . * ;   public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int t = 1 ; for ( int i = 0 ; i < n ; i ++ ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ;"],"references":["import java . util . * ;   public class Main {   public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; String s = input . next ( ) ; StringBuilder ans = new StringBuilder ( ) ; ArrayList < Integer > a1 = new ArrayList < > ( ) , a2 = new ArrayList < > ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == ' r ' ) ans . append ( ( i + 1 ) + \" \\n \" ) ; } for ( int i = s . length ( ) - 1 ; i >= 0 ; i -- ) { if ( s . charAt ( i ) == ' l ' ) ans . append ( ( i + 1 ) + \" \\n \" ) ; } System . out . println ( ans ) ;"],"bleu":0.17436434017280225,"rouge_l":0.4570893338016625}
{"id":213,"predictions":["import java . util . * ;   public class Codeforces {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ;   int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ;   for ( int i = 0 ; i < x ; i ++ ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; for ( int j = 0 ; j < b ; j ++ ) { if ( ( ( a - i * ( b - i * ( a - i * b ) == x ) || ( ( ( a - b ) * y ) == x ) { System . out . println ( \" NO \" ) ; return ; } } } System . out . println ( \" YES \" ) ; }   }"],"references":["import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collections ; import java . util . HashMap ; import java . util . Scanner ; import java . util . TreeMap ; import java . util . TreeSet ;    public class Main {   public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int x = input . nextInt ( ) ; int t = input . nextInt ( ) ; int a = input . nextInt ( ) ; int b = input . nextInt ( ) ; int da = input . nextInt ( ) ; int db = input . nextInt ( ) ; if ( x == 0 ) { System . out . println ( \" YES \" ) ; return ; } for ( int i = 0 ; i < t ; i ++ ) { if ( ( a - da * i ) == x ) { System . out . println ( \" YES \" ) ; return ; } } for ( int i = 0 ; i < t ; i ++ ) { if ( ( b - db * i ) == x ) { System . out . println ( \" YES \" ) ; return ; } } for ( int i = 0 ; i < t ; i ++ ) { for ( int j = 0 ; j < t ; j ++ ) { if ( ( a - da * i ) + ( b - db * j ) == x ) { System . out . println ( \" YES \" ) ; return ; } } } for ( int i = t - 1 ; i >= 0 ; i -- ) { for ( int j = 0 ; j < t ; j ++ ) { if ( ( a - da * i ) + ( b - db * j ) == x ) { System . out . println ( \" YES \" ) ; return ; } } } System . out . println ( \" NO \" ) ; } }"],"bleu":0.24670487623718818,"rouge_l":0.5072026268403771}
{"id":214,"predictions":["import java . util . * ; import java . io . * ;   public class CFA { BufferedReader br ; PrintWriter out ; StringTokenizer st ; boolean eof ; private static final long MOD = 1000L * 1000L * 1000L + 7 ; private static final int [ ] dx = { 0 , - 1 , 0 , 1 } ; private static final int [ ] dy = { 1 , 0 , - 1 , 0 } ; private static final String yes = \" YES \" ; private static final String no = \" NO \" ;   void solve ( ) { int T = nextInt ( ) ;"],"references":["import java . util . * ; public class Solution { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; int n = s . nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = s . nextInt ( ) ; Arrays . sort ( a ) ; boolean v = false ; for ( int j = 0 ; j < n - 2 ; j ++ ) { if ( ( a [ j ] + a [ j + 1 ] ) > a [ j + 2 ] ) { v = true ; break ; } } if ( v == false ) System . out . println ( \" NO \" ) ; else System . out . println ( \" YES \" ) ; } }"],"bleu":0.10296655583993418,"rouge_l":0.22993348115299336}
{"id":215,"predictions":["import java . util . * ;   public class Check2 { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int arr [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = sc . nextInt ( ) ; for ( int i = 0 ; i < arr . length ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int result = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { for ( int j = i + 1 ; j < arr [ i ] ; j ++ ) { result += arr [ j ] ; arr [ i ] = Math . max ( result , arr [ j ] ) ; } } System . out . println ( result ) ; }   }"],"references":["import java . lang . * ; import java . util . * ;   public class Main {   public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; char [ ] a = sc . nextLine ( ) . toCharArray ( ) ; char s = a [ 0 ] ; for ( int i = 0 ; i < a . length ; i ++ ) { if ( s < a [ i ] ) s = a [ i ] ; } int count = 0 ; for ( int i = 0 ; i < a . length ; i ++ ) { if ( a [ i ] == s ) { count ++ ; } } for ( int i = 0 ; i < count ; i ++ ) System . out . print ( s ) ;   } }"],"bleu":0.44249348567978497,"rouge_l":0.5942109657667686}
{"id":216,"predictions":["import javax . swing . plaf . IconUIResource ; import java . io . * ;  "],"references":["import java . util . * ; public class DesignTutorialLearnFromMath { public static void main ( String [ ] args ) {   Scanner sc = new Scanner ( System . in ) ; int val = sc . nextInt ( ) ;   int val1 ; if ( val % 2 == 0 ) { val1 = 8 ; } else { val1 = 9 ;   } System . out . println ( val1 + \" ▁ \" + ( val - val1 ) ) ; } }"],"bleu":0.0027415247622772855,"rouge_l":0.13315143246930422}
{"id":217,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int r = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int [ ] [ ] a = new int [ r ] [ c ] ; for ( int i = 0 ; i < r ; i ++ ) { for ( int j = 0 ; j < c ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } int ans = 0 ; for ( int i = 0 ; i < r ; i ++ ) { for ( int j = 0 ; j < r ; j ++ ) { if ( a [ i ] [ j ] == a [ i - 1 ] [ j ] ) { ans ++ ; } } } System . out . println ( ans ) ; } }"],"references":["import java . util . * ; import java . io . * ;   public class Main { private StreamTokenizer in ; private PrintWriter out ;   public static void main ( String [ ] args ) throws IOException { new Main ( ) . run ( ) ; }   private String substring ( String str , int idx , int len ) { return str . substring ( idx , str . offsetByCodePoints ( idx , len ) ) ; }   private void run ( ) throws IOException { in = new StreamTokenizer ( new BufferedReader ( new InputStreamReader ( System . in ) ) ) ; out = new PrintWriter ( System . out ) ;   solve ( ) ;   out . flush ( ) ; }   private int nextInt ( ) throws IOException { in . nextToken ( ) ;   return ( int ) in . nval ; }   private String nextString ( ) throws IOException { in . nextToken ( ) ;   return in . sval ; }   private void solve ( ) throws IOException { final int rows = nextInt ( ) ; final int cols = nextInt ( ) ;  "],"bleu":0.20697063317297457,"rouge_l":0.32763179639728973}
{"id":218,"predictions":["import java . util . * ; public class Practise {  "],"references":["import java . awt . * ; import java . util . * ; import java . io . * ;   public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; StringBuilder sb = new StringBuilder ( ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) , k = sc . nextInt ( ) ; int [ ] arr = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) arr [ i ] = sc . nextInt ( ) ; boolean [ ] peak = new boolean [ n + 1 ] ; for ( int i = 2 ; i < n ; i ++ ) { if ( arr [ i ] > arr [ i - 1 ] && arr [ i ] > arr [ i + 1 ] ) peak [ i ] = true ; } int count = 0 ; for ( int i = 2 ; i < k ; i ++ ) { if ( peak [ i ] ) count ++ ; } int max = count ; int l = 1 ; int L = 2 , R = k + 1 ; while ( R <= n ) { if ( peak [ L ] ) count -- ; if ( peak [ R - 1 ] ) count ++ ; if ( count > max ) { max = count ; l = L ; } R ++ ; L ++ ; } sb . append ( ( max + 1 ) + \" ▁ \" + l + \" \\n \" ) ; } System . out . println ( sb ) ; } }"],"bleu":2.521589300994002e-13,"rouge_l":0.05023056653491436}
{"id":219,"predictions":["import java . util . * ; public class P2 {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( arr [ i ] < arr [ i - 1 ] ) { count ++ ; } } } System . out . println ( count ) ; } }"],"references":["import java . util . * ;   public class codeforces { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String x = \" \" ;   int n = sc . nextInt ( ) ; String s = sc . next ( ) ;   ArrayList < String > gram = new ArrayList < String > ( ) ; ArrayList < Integer > count = new ArrayList < Integer > ( ) ;   for ( int i = 0 ; i < n - 1 ; i ++ ) { x = \" \" + s . charAt ( i ) + s . charAt ( i + 1 ) ; boolean flag = false ; for ( int j = 0 ; j < gram . size ( ) ; j ++ ) { if ( x . equals ( gram . get ( j ) ) ) { count . set ( j , count . get ( j ) + 1 ) ; flag = true ; } } if ( flag == false ) { gram . add ( x ) ; count . add ( 1 ) ; } } String ans = \" \" ; int start = 0 ; for ( int i = 0 ; i < count . size ( ) ; i ++ ) { if ( count . get ( i ) > start ) { start = count . get ( i ) ; ans = gram . get ( i ) ; }   } System . out . println ( ans ) ;     } }"],"bleu":0.22308137708472917,"rouge_l":0.459585984931607}
{"id":220,"predictions":["import java . util . Scanner ;   public class Main {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int j = 0 ; j < n ; j ++ ) { arr [ j ] = sc . nextInt ( ) ; } }   for ( int i = 0 ; i < n - 1 ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { arr [ i ] = sc . nextInt ( ) ; } } System . out . println ( ans ) ; }   public static void main ( String [ ] args ) {"],"references":["import java . io . File ; import java . util . Scanner ; import java . util . StringTokenizer ;   public class p007 { public static void main ( String args [ ] ) throws Exception { StringTokenizer stok = new StringTokenizer ( new Scanner ( System . in ) . useDelimiter ( \" \\\\ A \" ) . next ( ) ) ; StringBuilder sb = new StringBuilder ( ) ; char [ ] s = new char [ ( int ) 1e7 ] ; long mod = ( long ) 1e9 + 7 ; int T = Integer . parseInt ( stok . nextToken ( ) ) ; while ( T -- > 0 ) { int x = Integer . parseInt ( stok . nextToken ( ) ) ; char [ ] ss = stok . nextToken ( ) . toCharArray ( ) ; for ( int i = 0 ; i < ss . length ; i ++ ) s [ i ] = ss [ i ] ; long n = ss . length ; boolean fl = true ; for ( int i = 0 ; i < x ; i ++ ) { int v = s [ i ] - 49 , cnt = 0 ; long d = ( n - i - 1 ) ; long nn = ( n + v * d ) % mod ; while ( ++ cnt <= v ) { if ( n <= x && fl ) { for ( int j = i + 1 ; j <= n ; j ++ ) s [ j + ( int ) ( cnt * d ) ] = s [ j ] ; } else fl = false ; } n = nn ; } sb . append ( ( n + mod ) % mod + \" \\n \" ) ; } System . out . println ( sb ) ; } }"],"bleu":0.19448372657896973,"rouge_l":0.4236885395722903}
{"id":221,"predictions":["import java . util . * ;"],"references":["import java . io . * ; import java . util . * ;   public class Main { private static String smallest ( String a ) { if ( a . length ( ) % 2 == 1 ) { return a ; } String first = smallest ( a . substring ( 0 , a . length ( ) \/ 2 ) ) ; String second = smallest ( a . substring ( a . length ( ) \/ 2 ) ) ; if ( first . compareTo ( second ) < 0 ) { return first + second ; } return second + first ; } private static boolean equal ( String a , String b ) { return smallest ( a ) . equals ( smallest ( b ) ) ; } public static void main ( String [ ] args ) throws IOException {"],"bleu":1.7867685232820168e-9,"rouge_l":0.07708972738761509}
{"id":222,"predictions":["import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;  "],"references":["import java . util . * ; import java . io . * ; import java . math . BigInteger ; import java . text . * ; public class Main { static long mod = 1000_000_007 ; static long mod1 = 998244353 ; static boolean fileIO = false ; static boolean memory = true ; static FastScanner f ; static PrintWriter pw ; static double eps = ( double ) 1e-6 ; static FileWriter fw ; static long oo = Long . MAX_VALUE ;"],"bleu":0.18171816405038618,"rouge_l":0.38355501813784765}
{"id":223,"predictions":["import java . util . Arrays ; import java . util . Scanner ;   public class SolutionB { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int index [ ] = new int [ n ] ; for ( int i = 0 ; i < n - 1 ; i ++ ) { for ( int j = 0 ; j < n - 1 ; j ++ ) { arr [ index [ j ] = j ; index [ j + 1 ] = index [ j - 1 ] ; } } int sum = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { sum += arr [ i ] ; } System . out . print ( sum + \" ▁ \" ) ; for ( int i = 0 ; i < n - 1 ; i ++ ) { sum += arr [ i ] ; } System . out . print ( sum ) ; } }   }"],"references":["  import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Scanner ; import java . util . StringTokenizer ; import java . util . * ; import java . math . * ; public class c705b {"],"bleu":0.05536508555999671,"rouge_l":0.17598269022719074}
{"id":224,"predictions":["import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;  "],"references":["import java . util . Scanner ;   public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; sc . nextLine ( ) ; while ( t -- > 0 ) { String s1 = sc . nextLine ( ) ; StringBuilder s2 = new StringBuilder ( ) ; int cr = 0 , cs = 0 , cp = 0 ; for ( int i = 0 ; i < s1 . length ( ) ; i ++ ) { if ( s1 . charAt ( i ) == ' R ' ) { cp ++ ; } else if ( s1 . charAt ( i ) == ' P ' ) { cs ++ ; } else { cr ++ ; } } char c ; if ( cp >= cs && cp >= cr ) { c = ' P ' ; } else if ( cs >= cp && cs >= cr ) { c = ' S ' ; } else { c = ' R ' ; } for ( int i = 0 ; i < s1 . length ( ) ; i ++ ) { s2 . append ( c ) ; } System . out . println ( s2 . toString ( ) ) ; } } }  "],"bleu":0.0012721094172679945,"rouge_l":0.13661814109742443}
{"id":225,"predictions":["import java . util . Scanner ;   public class Main { public static void main ( String [ ] args ) { int n , p , k ; Scanner sc = new Scanner ( System . in ) ; n = sc . nextInt ( ) ; p = sc . nextInt ( ) ; StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int p = sc . nextInt ( ) ; if ( p . equals ( \" . \" ) && ! sb . equals ( \" . \" ) ) { sb . append ( \" NO . \" ) ; } else { sb . append ( p ) ; } } while ( p >= 0 ) { sb . append ( s ) ; k -- ; } System . out . println ( sb ) ; } }"],"references":["import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;  "],"bleu":0.03755596999514204,"rouge_l":0.22883172561629156}
{"id":226,"predictions":["import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;  "],"references":["import java . util . Scanner ; public class Acm2challenge3 { public static void main ( String [ ] args ) {"],"bleu":0.10912441388497131,"rouge_l":0.19603642206748795}
{"id":227,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . Scanner ; import java . util . StringTokenizer ; import java . util . * ; import java . io . * ; public class codeforces { static class Student { int x ; int y ;  "],"references":["import java . text . * ; import java . util . * ;   public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int r = scanner . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] flag = new int [ n ] ; for ( int i = 0 ; i < n ; ++ i ) { a [ i ] = scanner . nextInt ( ) ; flag [ i ] = 0 ; } int cnt = 0 ; int begin = 0 ; if ( r - 1 < n ) begin = r - 1 ; else begin = n - 1 ; for ( int i = begin ; ; ) { if ( a [ i ] == 1 ) { cnt ++ ; flag [ i ] = 1 ; if ( i + r - 1 >= n - 1 ) break ; if ( i + 2 * r - 1 <= n - 1 ) i = i + 2 * r - 1 ; else i = n - 1 ; continue ; } while ( i >= 0 && a [ i ] == 0 && flag [ i ] == 0 ) i -- ; if ( i == - 1 || flag [ i ] == 1 ) { System . out . println ( \" - 1\" ) ; return ; } cnt ++ ; flag [ i ] = 1 ; if ( i + r - 1 >= n - 1 ) break ; if ( i + 2 * r - 1 <= n - 1 ) i = i + 2 * r - 1 ; else i = n - 1 ; } if ( cnt == 0 ) System . out . println ( \" - 1\" ) ; else System . out . println ( cnt ) ; scanner . close ( ) ; }"],"bleu":0.0035062627797389258,"rouge_l":0.11015985552805833}
{"id":228,"predictions":["import java . util . * ; import java . io . * ; import java . lang . * ; public class Codechef { public static void main ( String [ ] args ) throws java . lang . Exception { Scanner sc = new Scanner ( System . in ) ;"],"references":["  import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; String str = \" \" ; String ans = \" \" ; boolean f = false ; for ( int i = 0 ; i < n ; ++ i ) { String in = sc . next ( ) ; str += in + \" ) \" ; } for ( int i = ' a ' ; i <= ' z ' ; ++ i ) { if ( ! str . contains ( \" \" + ( char ) i ) ) { f = true ; out . println ( ( char ) i ) ; break ; } } if ( ! f ) { String in = \" \" ; for ( int i = ' a ' ; i <= ' z ' ; ++ i ) { for ( int j = ' a ' ; j <= ' z ' ; ++ j ) { in = ( char ) i + \" \" ; in += ( char ) j ; if ( ! str . contains ( in ) ) { out . println ( in ) ; f = true ; break ; } } if ( f ) break ; } } out . close ( ) ;   }  "],"bleu":0.00919396521464435,"rouge_l":0.19563474387527843}
{"id":229,"predictions":["import java . util . * ; public class Solution { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; int t = 0 ; while ( t -- > 0 ) { int n = s . nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = s . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = s . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % 2 == 1 ) ans ++ ; else if ( ans % 2 == 1 ) ans ++ ; } System . out . println ( ans ) ; } } }"],"references":["import java . util . Scanner ;   public class DigitGame { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ;   String t = scanner . nextLine ( ) ; int tt = Integer . parseInt ( t ) ;   while ( tt -- != 0 ) { String n = scanner . nextLine ( ) ; int nn = Integer . parseInt ( n ) ; String number = scanner . nextLine ( ) ; System . out . println ( solve ( nn , number ) ) ; } }   public static int solve ( int n , String number ) {   if ( n % 2 == 1 ) { int counter = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( Integer . parseInt ( String . valueOf ( number . charAt ( i ) ) ) % 2 == 0 ) { counter ++ ; } i ++ ; } if ( counter > ( n - 1 ) \/ 2 ) { return 2 ; } else { return 1 ; } } else { int counter = 0 ; for ( int i = 1 ; i < n ; i ++ ) { if ( Integer . parseInt ( String . valueOf ( number . charAt ( i ) ) ) % 2 == 1 ) { counter ++ ; } i ++ ; } if ( counter > ( n - 2 ) \/ 2 ) { return 1 ; } else { return 2 ; } }   } }"],"bleu":0.28190174740001217,"rouge_l":0.47376240967110156}
{"id":230,"predictions":["import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;  "],"references":["import java . util . * ; public class Solution { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; String s1 = s . nextLine ( ) ; if ( s1 . contains ( \" ABC \" ) || s1 . contains ( \" ACB \" ) || s1 . contains ( \" BAC \" ) || s1 . contains ( \" BCA \" ) || s1 . contains ( \" CBA \" ) || s1 . contains ( \" CAB \" ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.02888698168000343,"rouge_l":0.2216972560421588}
{"id":231,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; PrintWriter pw = new PrintWriter ( System . out ) ; int cnt = 1 ; while ( cnt ) { int n = sc . nextInt ( ) ; int a [ ] = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) { char ch [ ] = sc . next ( ) . toCharArray ( ) ; if ( ch [ i ] % 4 == 0 ) cnt ++ ; } if ( cnt % 2 == 0 ) pw . println ( \" YES \" ) ; else pw . println ( \" NO \" ) ; } pw . flush ( ) ; pw . close ( ) ; } }"],"references":["import java . util . * ; public class ApplejackStorage { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ 100001 ] ; int [ ] freq = new int [ 100001 ] ; for ( int i = 0 ; i < n ; i ++ ) { int num = sc . nextInt ( ) ; arr [ num ] ++ ; freq [ arr [ num ] ] ++ ; } int q = sc . nextInt ( ) ; for ( int i = 0 ; i < q ; i ++ ) { String s = sc . next ( ) ; int x = sc . nextInt ( ) ; if ( s . equals ( \" + \" ) ) { arr [ x ] ++ ; freq [ arr [ x ] ] ++ ; } else { freq [ arr [ x ] ] -- ; arr [ x ] -- ; } if ( freq [ 8 ] > 0 || ( freq [ 6 ] > 0 && freq [ 2 ] > 1 ) || ( freq [ 4 ] > 1 ) || ( freq [ 4 ] > 0 && freq [ 2 ] > 2 ) ) { System . out . println ( \" YES \" ) ; } else { System . out . println ( \" NO \" ) ; } } } }"],"bleu":0.41793407783005126,"rouge_l":0.5677436511102246}
{"id":232,"predictions":["import java . io . * ; import java . util . * ;   public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; StringBuilder out = new StringBuilder ( ) ;"],"references":["import java . util . * ; import java . io . * ; import java . math . * ;   public class A { public static void main ( String hi [ ] ) throws Exception { BufferedReader infile = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( infile . readLine ( ) ) ; int K = Integer . parseInt ( st . nextToken ( ) ) ; if ( K == 0 ) { System . out . println ( \" a \" ) ; return ; } StringBuilder sb = new StringBuilder ( ) ; for ( int c = 0 ; c < 26 ; c ++ ) { if ( K == 0 ) break ; int low = 1 ; int high = 446 ; while ( low != high ) { int mid = ( low + high + 1 ) \/ 2 ; if ( mid * ( mid + 1 ) \/ 2 > K ) high = mid - 1 ; else low = mid ; } K -= low * ( low + 1 ) \/ 2 ; while ( low -- > - 1 ) sb . append ( ( char ) ( ' a ' + c ) ) ; } if ( K > 0 ) { int lol = 4 \/ 0 ; } System . out . print ( sb ) ; } }"],"bleu":0.024926130932316454,"rouge_l":0.2928826962907174}
{"id":233,"predictions":["import java . util . * ;   public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) ; int c = in . nextInt ( ) ; int [ ] d = new int [ n ] ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = in . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = in . nextInt ( ) ; } int [ ] res = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { res [ i ] = i ; } for ( int i = 0 ; i < n ; i ++ ) { int j = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( j < a [ j ] && j < b [ i ] ) { res [ j ] = i ; } else { res [ j ] = j - b [ j ] ; } } } int max = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { if ( j > max ) max = j ; } } max = j ; } System . out . println ( max ) ; }   }"],"references":["import java . util . Scanner ;   public class rasberryandhoney { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int days = sc . nextInt ( ) ; int cost = sc . nextInt ( ) ;   int [ ] arr = new int [ days ] ;   for ( int i = 0 ; i < days ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int max = Integer . MIN_VALUE ; for ( int i = 0 ; i < days - 1 ; i ++ ) { max = Math . max ( max , arr [ i ] - arr [ i + 1 ] ) ; }   if ( max <= 0 ) System . out . println ( 0 ) ; else { if ( cost > max ) System . out . println ( 0 ) ; else System . out . println ( max - cost ) ; } } }"],"bleu":0.29841285177302723,"rouge_l":0.5465426441419876}
{"id":234,"predictions":["import java . util . * ; import java . util . Scanner ; import java . io . * ; import javax . lang . model . util . ElementScanner6 ; import static java . lang . System . out ; import java . util . Stack ; import java . util . Queue ; import java . util . LinkedList ;   public class B129 {   static int mod = ( int ) ( 1e9 + 7 ) ; static long MOD = ( long ) ( 1e9 + 7 ) ; static FastReader in = new FastReader ( ) ; static PrintWriter pr = new PrintWriter ( new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ) ; static ArrayList < HashSet < Integer > > al ; static boolean vis [ ] ; public static void main ( String args [ ] ) {   int tc = 1 ;"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;   public class K_good { public static void main ( String [ ] args ) throws IOException { BufferedReader reader = new BufferedReader ( new InputStreamReader ( System . in ) ) ;   StringTokenizer st = new StringTokenizer ( reader . readLine ( ) ) ;   int n = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int count = 0 ;   for ( int i = 0 ; i < n ; i ++ ) { String num = reader . readLine ( ) ; boolean [ ] check = new boolean [ 10 ] ; boolean flag = true ;   for ( int j = 0 ; j < num . length ( ) ; j ++ ) { check [ num . charAt ( j ) - '0' ] = true ; }   for ( int j = 0 ; j < k + 1 ; j ++ ) { if ( ! check [ j ] ) flag = false ; }   if ( flag ) count ++ ; }   System . out . println ( count ) ; } }"],"bleu":0.1267859270228957,"rouge_l":0.2987075539857109}
{"id":235,"predictions":["import java . util . * ; import java . io . * ;   public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; PrintWriter pw = new PrintWriter ( System . out ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = sc . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) arr [ i % n ] = sc . nextInt ( ) ;   int [ ] ans = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { ans [ i % n ] = i % n ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int i = 1 ; i % n ; i < n ; i ++ ) { ans [ i % n ] = ans [ i ] ; } } pw . println ( ans ) ; }   pw . flush ( ) ; }  "],"references":["import java . util . * ; import java . math . * ; public class YoungExplorers { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int runs = sc . nextInt ( ) ; while ( runs -- > 0 ) { int size = sc . nextInt ( ) ;   int [ ] arr = new int [ size ] ; for ( int i = 0 ; i < size ; i ++ ) arr [ i ] = sc . nextInt ( ) ; shuffleArray ( arr ) ; Arrays . sort ( arr ) ; int out = 0 ; int num = 0 ; int goal = 0 ; outer : for ( int i = 0 ; i < size ; ) { goal = arr [ i ] ; num ++ ; if ( goal <= num ) { out ++ ; num = 0 ; goal = 0 ; } i ++ ;   } System . out . println ( out ) ; } } static void shuffleArray ( int [ ] arr ) { int n = arr . length ; Random rnd = new Random ( ) ; for ( int i = 0 ; i < n ; ++ i ) { int tmp = arr [ i ] ; int randomPos = i + rnd . nextInt ( n - i ) ; arr [ i ] = arr [ randomPos ] ; arr [ randomPos ] = tmp ; } } }"],"bleu":0.4449325476606948,"rouge_l":0.574877356054738}
{"id":236,"predictions":["import java . util . * ; public class Solution { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; int n = s . nextInt ( ) ; String a [ ] = new String [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = s . next ( ) ; } int sum = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { sum += a [ i ] ; } else { sum += a [ n - i ] ; } for ( int i = n - 1 ; i >= 0 ; i -- ) { sum += a [ i ] ; } } if ( sum % 2 == 0 ) { for ( int i = n - 1 ; i >= 1 ; i -- ) { sum += a [ i ] ; } else { sum += a [ i ] ; } } System . out . println ( sum ) ;   }"],"references":["import java . util . Scanner ; public class Decoding { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int num = sc . nextInt ( ) ; String text = sc . next ( ) ; String newText = \" \" ; int i = 0 ; while ( num != 0 ) { if ( num % 2 != 0 ) { newText = newText + text . toCharArray ( ) [ i ] ; } else { newText = text . toCharArray ( ) [ i ] + newText ; } num -- ; i ++ ; } System . out . println ( newText ) ; } }"],"bleu":0.28607034691559186,"rouge_l":0.5444167704441676}
{"id":237,"predictions":["import java . io . * ; import java . util . * ;   public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; }   void run ( FastScanner in , PrintWriter out ) {   int n = in . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = in . nextInt ( ) ; }  "],"references":["import java . io . * ; import java . util . * ;   public class Main { private static long binarySearch1 ( long [ ] arr , long tar ) { int low = 0 ; int high = arr . length - 1 ; long ans = - 1 ; while ( low <= high ) { int mid = ( low + high ) \/ 2 ; if ( arr [ mid ] <= tar ) { low = mid + 1 ; ans = arr [ mid ] ; } else { high = mid - 1 ; } } return ans ; } private static long binarySearch2 ( long [ ] arr , long tar ) { int low = 0 ; int high = arr . length - 1 ; long ans = - 1 ; while ( low <= high ) { int mid = ( low + high ) \/ 2 ; if ( arr [ mid ] >= tar ) { high = mid - 1 ; ans = arr [ mid ] ; } else { low = mid + 1 ; } } return ans ; } private static long solve ( long [ ] a , long [ ] b , long [ ] c ) { long min = Long . MAX_VALUE ; for ( long i : b ) { long j = binarySearch1 ( a , i ) ; long k = binarySearch2 ( c , i ) ; if ( j == - 1 || k == - 1 ) { continue ; } min = Math . min ( min , ( i - j ) * ( i - j ) + ( k - i ) * ( k - i ) + ( k - j ) * ( k - j ) ) ; } return min ; } public static void main ( String [ ] args ) throws IOException {"],"bleu":0.07044319761226123,"rouge_l":0.28216821942797576}
{"id":238,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ;"],"references":["import java . util . * ;   public class Main { static Scanner input = new Scanner ( System . in ) ; static int mod = 1000000007 ;   public static void main ( String [ ] args ) { int n = input . nextInt ( ) , l , r , lenth ; for ( int i = 0 ; i < n ; i ++ ) { l = input . nextInt ( ) ; r = input . nextInt ( ) ; lenth = r - l + 1 ; if ( l % 2 == 1 ) { if ( lenth % 2 == 1 ) { System . out . println ( - l - ( lenth - 1 ) \/ 2 ) ; } else { System . out . println ( lenth \/ 2 ) ; } } else { if ( lenth % 2 == 1 ) { System . out . println ( l + ( lenth - 1 ) \/ 2 ) ; } else { System . out . println ( - lenth \/ 2 ) ; } } } input . close ( ) ; }   public static int modulo ( int dividend ) { while ( dividend >= mod ) dividend -= mod ; return dividend ; }   public static int combination ( int n , int r ) { int ans = 1 ; for ( int i = 1 ; i <= r ; i ++ ) { ans *= ( n - i + 1 ) ; ans \/= i ; } return ans ; } }  "],"bleu":8.337047168497278e-7,"rouge_l":0.06348755795250259}
{"id":239,"predictions":["import java . util . ArrayList ; import java . util . Arrays ; import java . util . Scanner ;   public class Singleton_Pattern { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = scan . nextInt ( ) ; } Arrays . sort ( a ) ; int result = a [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { result = a [ i ] - a [ i - 1 ] ; result = a [ i ] ; } System . out . println ( result ) ; } }   }"],"references":["import java . io . * ; import java . util . * ;   public class B_1095 { static PrintWriter pw = new PrintWriter ( System . out ) ;   public static void main ( String arg [ ] ) throws IOException { InputStreamReader isr = new InputStreamReader ( System . in ) ; BufferedReader br = new BufferedReader ( isr ) ; StringTokenizer token = new StringTokenizer ( \" ▁ \" ) ;   int i = 0 ; int j = 0 ; int x = 0 ; int n = 0 ; int arr [ ] ;   n = Integer . parseInt ( br . readLine ( ) ) ; arr = new int [ n ] ;   token = new StringTokenizer ( br . readLine ( ) ) ;   for ( j = 0 ; j <= n - 1 ; j ++ ) arr [ j ] = Integer . parseInt ( token . nextToken ( ) ) ;   pw . println ( getResult ( n , arr ) ) ;   pw . close ( ) ;   }   private static int getResult ( int n , int arr [ ] ) {   int i = 0 ; int sum = 0 ; int min = Integer . MAX_VALUE ; int min2 = Integer . MAX_VALUE ; int max = Integer . MIN_VALUE ; int max2 = Integer . MIN_VALUE ;   int minpos = - 1 ; int maxpos = - 1 ;    for ( i = 0 ; i <= n - 1 ; i ++ ) { if ( arr [ i ] > max ) { max = arr [ i ] ; maxpos = i ; }   if ( arr [ i ] < min ) { min = arr [ i ] ; minpos = i ; } }   for ( i = 0 ; i <= n - 1 ; i ++ ) { if ( arr [ i ] > max2 && i != maxpos ) max2 = arr [ i ] ;   if ( arr [ i ] < min2 && i != minpos ) min2 = arr [ i ] ; } return Math . min ( max - min2 , max2 - min ) ;   } }"],"bleu":0.09465170823811099,"rouge_l":0.35015307238136895}
{"id":240,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ;"],"references":["import java . util . Scanner ;   public class Problem275A {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a [ ] [ ] = new int [ 5 ] [ 5 ] ; for ( int i = 1 ; i <= 3 ; i ++ ) for ( int j = 1 ; j <= 3 ; j ++ ) a [ i ] [ j ] = sc . nextInt ( ) ; for ( int i = 1 ; i <= 3 ; i ++ ) { for ( int j = 1 ; j <= 3 ; j ++ ) { if ( ( a [ i ] [ j ] + a [ i ] [ j + 1 ] + a [ i + 1 ] [ j ] + a [ i - 1 ] [ j ] + a [ i ] [ j - 1 ] ) % 2 == 0 ) System . out . print ( \"1\" ) ; else System . out . print ( \"0\" ) ; } System . out . println ( ) ; } } }"],"bleu":0.00001931691519433895,"rouge_l":0.08299319727891157}
{"id":241,"predictions":["import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;  "],"references":["  import java . util . Scanner ; import java . util . Arrays ; public class Codechef { public static void main ( String [ ] args ) throws java . lang . Exception { try { Scanner sc = new Scanner ( System . in ) ; int n , m , i , j , c , k ; n = sc . nextInt ( ) ; m = sc . nextInt ( ) ; int a [ ] [ ] = new int [ n ] [ m ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < m ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } k = 0 ; for ( i = 0 ; i < n ; i ++ ) { c = a [ i ] [ 0 ] ; for ( j = 0 ; j < m ; j ++ ) { if ( a [ i ] [ j ] < c ) c = a [ i ] [ j ] ; } if ( c > k ) k = c ; } System . out . println ( k ) ; } catch ( Exception e ) { } } }"],"bleu":0.0028303875532934724,"rouge_l":0.1482616506393321}
{"id":242,"predictions":["import java . util . Arrays ; import java . util . Scanner ;   public class ProblemB {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ 5 ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ 5 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 5 ; j ++ ) { a [ j ] += a [ i ] ; } } int c [ ] = new int [ 5 ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] += a [ i ] ; } for ( int i = 0 ; i < 5 ; i ++ ) { for ( int j = 0 ; j < 5 ; j ++ ) { a [ j ] += a [ j ] ; } } int ans = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 5 ; j ++ ) { for ( int k = 0 ; k < 3 ; k ++ ) { c [ j ] += a [ i ] ; } } if ( c [ 0 ] > 1 ) { ans += b [ i ] ; } else { ans += c [ 1 ] ; } } System . out . println ( ans ) ;   }   }"],"references":["import java . io . BufferedReader ; import java . io . File ; import java . io . FileInputStream ; import java . io . FileNotFoundException ; import java . io . FileOutputStream ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . math . BigInteger ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . BitSet ; import java . util . Calendar ; import java . util . Collections ; import java . util . Comparator ; import java . util . HashMap ; import java . util . HashSet ; import java . util . LinkedList ; import java . util . PriorityQueue ; import java . util . SortedSet ; import java . util . Stack ; import java . util . StringTokenizer ; import java . util . TreeMap ; import java . util . TreeSet ;   public class B_VK2017_Round3 {   public static long MOD = 1000000007 ;   public static void main ( String [ ] args ) throws FileNotFoundException {"],"bleu":0.08211858925077976,"rouge_l":0.17202712683811183}
{"id":243,"predictions":["import java . io . BufferedReader ; import java . io . FileReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Scanner ; import java . util . StringTokenizer ; import java . util . * ; import java . io . * ; public class codeforces { static class Student { int x , y ; Student ( int c , int c ) { this . x = c ; this . y = c ;"],"references":["import java . util . * ; import java . io . * ;   public class freebies { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; String a = br . readLine ( ) ; a = br . readLine ( ) ; String [ ] info = a . split ( \" ▁ \" ) ; int [ ] left = new int [ 1002 ] ; int max = 0 ; for ( int z = 0 ; z < info . length ; z ++ ) { int current = Integer . parseInt ( info [ z ] ) ; left [ current ] ++ ; max = Math . max ( max , left [ current ] ) ; } for ( int z = 1 ; z < left . length ; z ++ ) { left [ z ] += left [ z - 1 ] ; } a = br . readLine ( ) ; int dist = Integer . parseInt ( a ) + 1 ; for ( int z = dist ; z < left . length ; z ++ ) { max = Math . max ( max , left [ z ] - left [ z - dist ] ) ; } System . out . println ( max ) ; } }"],"bleu":0.04389094909031126,"rouge_l":0.19837398373983745}
{"id":244,"predictions":["import java . util . * ; public class Solution { static Scanner in = new Scanner ( System . in ) ; public static void main ( String args [ ] ) { int n = in . nextInt ( ) ; int a [ ] [ ] = new int [ n ] [ n ] ; int b [ ] [ ] = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] [ 0 ] = in . nextInt ( ) ; b [ i ] [ 1 ] = in . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { int t = in . nextInt ( ) - 1 ; int res = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { int p = in . nextInt ( ) - 1 ; int q = 0 ; for ( int j = 0 ; j < n ; j ++ ) { p += a [ j ] [ i ] ; if ( p < a [ i ] [ j ] ) { res += p ; } else if ( p >= b [ j ] [ j ] ) { res += p ; } else { res = p ; } } } System . out . println ( res ) ; } }"],"references":["import java . util . * ; import java . io . * ;   public class CF { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter pw = new PrintWriter ( new OutputStreamWriter ( System . out ) ) ;  "],"bleu":0.08195547482111538,"rouge_l":0.25379511975711233}
{"id":245,"predictions":["import java . util . * ; import java . io . * ;  "],"references":["import java . util . * ; import java . math . * ; public class RockAndLever { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int runs = sc . nextInt ( ) ; while ( runs -- > 0 ) { int size = sc . nextInt ( ) ; long [ ] arr = new long [ 33 ] ; for ( int i = 0 ; i < size ; i ++ ) { arr [ Integer . numberOfLeadingZeros ( sc . nextInt ( ) ) ] ++ ; } long out = 0 ; for ( int i = 1 ; i < 33 ; i ++ ) { out += arr [ i ] * ( arr [ i ] - 1 ) \/ 2 ; } System . out . println ( out ) ; } } }"],"bleu":0.000025422242246794078,"rouge_l":0.13002131496966712}
{"id":246,"predictions":["import java . util . * ; public class HelloWorld {   public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int t = in . nextInt ( ) ; while ( t -- > 0 ) { int n = in . nextInt ( ) ; for ( int i = 1 ; i <= n ; i ++ ) { System . out . print ( i + \" ▁ \" ) ; } System . out . println ( ) ; } } }"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . StringTokenizer ; public class Main { static class FastScanner { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( \" \" ) ; String next ( ) { while ( ! st . hasMoreTokens ( ) ) try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } int [ ] nextArray ( int n ) { int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = nextInt ( ) ; return a ; } long [ ] nextArray ( long n ) { long [ ] a = new long [ ( int ) n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = nextLong ( ) ; return a ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } } static class FastWriter extends PrintWriter { FastWriter ( ) { super ( System . out ) ; } void println ( int [ ] array ) { for ( int i = 0 ; i < array . length ; i ++ ) { print ( array [ i ] + \" ▁ \" ) ; } println ( ) ; } void println ( long [ ] array ) { for ( int i = 0 ; i < array . length ; i ++ ) { print ( array [ i ] + \" ▁ \" ) ; } println ( ) ; } } public static void main ( String [ ] args ) { FastScanner in = new FastScanner ( ) ; FastWriter out = new FastWriter ( ) ; int t = in . nextInt ( ) ; while ( t -- > 0 ) { int n = in . nextInt ( ) ; for ( int i = 1 ; i <= n ; i ++ ) { out . print ( i + \" ▁ \" ) ; } out . println ( ) ; } out . close ( ) ; } }"],"bleu":0.023528704576145382,"rouge_l":0.2870588235294118}
{"id":247,"predictions":["import java . util . * ; import java . io . * ;   public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; }   void run ( FastScanner in , PrintWriter out ) {  "],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . math . BigInteger ; import java . util . * ;   import javafx . util . Pair ;   public class Main {   public static void main ( String [ ] args ) { FastScanner input = new FastScanner ( ) ;   int n = input . nextInt ( ) ; String s = input . next ( ) ; int a [ ] = new int [ n ] ; int left = - 1 ; int right = - 1 ; int count = 0 ; int ans [ ] = new int [ n ] ; Arrays . fill ( ans , 1 ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == ' L ' && right == - 1 ) { for ( int j = 0 ; j <= i ; j ++ ) { ans [ j ] = 0 ; } left = - 1 ; right = - 1 ; } else if ( s . charAt ( i ) == ' L ' && right != - 1 ) { for ( int j = right ; j <= i ; j ++ ) { ans [ j ] = 0 ; } if ( ( i - right + 1 ) % 2 != 0 ) ans [ right ] = 1 ; left = - 1 ; right = - 1 ; } else if ( s . charAt ( i ) == ' R ' && right != - 1 ) { for ( int j = right ; j < n ; j ++ ) { ans [ j ] = 0 ; } } else if ( s . charAt ( i ) == ' R ' ) { right = i ; } } if ( right != - 1 && left == - 1 ) { for ( int i = right ; i < n ; i ++ ) { ans [ i ] = 0 ; } } for ( int i = 0 ; i < n ; i ++ ) { count += ans [ i ] ; }"],"bleu":0.008825004310598742,"rouge_l":0.20537485721156737}
{"id":248,"predictions":["import java . io . * ; import java . util . * ; import java . util . Arrays ; import java . util . Collections ; import java . util . HashMap ; import java . util . StringTokenizer ;   public class A { public static void main ( String [ ] args ) { FastScanner fs = new FastScanner ( ) ; StringBuilder ans = new StringBuilder ( ) ; int n = fs . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = 0 ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = fs . nextInt ( ) ; } int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = fs . nextInt ( ) ; } Arrays . sort ( a ) ; int [ ] b = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) b [ i ] = i ; Arrays . fill ( b , - 1 ) ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = i ; } for ( int i = 0 ; i < n ; i ++ ) { if ( c [ i ] == 0 ) { a [ i ] = a [ i ] ; b [ c [ i ] ] = b [ i ] ; } else { a [ c [ i ] ] = i ; } } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = a [ i ] ; } int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { max = Math . max ( max , b [ i ] ) ; } for ( int i = 0 ; i < n ; i ++ ) { max = Math . max ( max , a [ i ] ) ; } System . out . println ( max ) ; } }"],"references":["  import java . util . ArrayList ; import java . util . Arrays ; import java . util . Scanner ; import java . util . Stack ;    public class UkkonenForPreXSufEditTest { static int [ ] suffixOccurrences ; static Node root ;"],"bleu":0.05700629419390172,"rouge_l":0.17378917378917377}
{"id":249,"predictions":["import java . util . Scanner ;   public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { long n = sc . nextLong ( ) ; long x = sc . nextLong ( ) ; long sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += sc . nextLong ( ) ; } if ( x < t ) { System . out . println ( \" NO \" ) ; continue ; } long sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { long temp = sc . nextLong ( ) ; sum += temp ; } if ( sum >= t ) { System . out . println ( \" YES \" ) ; continue ; } } System . out . println ( \" NO \" ) ; } }"],"references":["import java . util . * ; import java . io . * ;   public class Main { class FastScanner { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( \" \" ) ; String next ( ) { while ( ! st . hasMoreTokens ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } }   public static void main ( String [ ] args ) { FastScanner scan = new Main ( ) . new FastScanner ( ) ; int t = scan . nextInt ( ) ; while ( t -- > 0 ) {   int n = scan . nextInt ( ) ; int a [ ] = new int [ n ] ; int sum = 0 ; for ( int i = 0 ; i < n ; ++ i ) { a [ i ] = scan . nextInt ( ) ; if ( a [ i ] <= 2048 ) { sum += a [ i ] ; } } if ( sum >= 2048 ) { System . out . println ( \" YES \" ) ; } else { System . out . println ( \" NO \" ) ; } } } }"],"bleu":0.24565645887698456,"rouge_l":0.43531564501372366}
{"id":250,"predictions":["import java . util . Scanner ;   public class FrameArtist { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int [ ] a = new int [ n ] ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = scanner . nextInt ( ) ; } int pos = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] > a [ i ] ) { pos ++ ; } else { int count = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] > a [ i ] ) { pos ++ ; } } }   System . out . println ( pos ) ;   count = 0 ; }   }"],"references":["import java . util . * ;   public class VotingPhotos {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; HashMap < Integer , Integer > hm = new HashMap < > ( ) ; int n = sc . nextInt ( ) ; int a [ ] = new int [ n ] ; int like = 1 ; int id = 0 ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; if ( ! hm . containsKey ( a [ i ] ) ) { hm . put ( a [ i ] , 1 ) ; } else { int value = hm . get ( a [ i ] ) ; value ++ ; hm . put ( a [ i ] , value ) ; if ( value > like ) { like = value ; id = a [ i ] ; } } } if ( id == 0 ) { System . out . println ( a [ 0 ] ) ; } else { System . out . println ( id ) ; } } }"],"bleu":0.441756667656052,"rouge_l":0.6076478149100256}
{"id":251,"predictions":["import java . util . * ;   public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { long n = sc . nextInt ( ) ; long arr [ ] = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = sc . nextLong ( ) ; ans += arr [ 0 ] ; solve ( arr , 1 , n - 1 ) ; out . println ( ans ) ; } }   public static void main ( String [ ] args ) { solve ( ) ; } }"],"references":["  import java . util . * ; import java . lang . * ; import java . io . * ;   public class Main { public static void main ( String [ ] args ) throws java . lang . Exception { Scanner scn = new Scanner ( System . in ) ; int t = scn . nextInt ( ) ; while ( t -- > 0 ) { int d = scn . nextInt ( ) ; long a = d + 1 ; a = primeNext ( a ) ; long b = a + d ; b = primeNext ( b ) ; long ans = a * b ; System . out . println ( ans ) ; } } public static long primeNext ( long n ) { while ( true ) { if ( isPrime ( n ) ) { break ; } else { n ++ ; } } return n ; } public static boolean isPrime ( long n ) { boolean flag = true ; for ( long i = 2 ; i * i <= n ; i ++ ) { if ( n % i == 0 ) { flag = false ; break ; } } return flag ; } }"],"bleu":0.27683662387546826,"rouge_l":0.43586615545486235}
{"id":252,"predictions":["import java . util . * ; import java . io . * ; import java . math . * ;   public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) {"],"references":["import java . io . * ; import java . util . * ;   public class Main { public static void main ( String [ ] args ) throws IOException {"],"bleu":0.4647053720414078,"rouge_l":0.6167549350024072}
{"id":253,"predictions":["import java . io . * ; import java . util . StringTokenizer ;"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . * ;   public class Solution { private static final BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ;   public static void main ( String [ ] args ) throws IOException {   int n = nextInt ( ) ; int inp [ ] = readIntArray ( ) ; int min1 = inp [ 0 ] , max1 = inp [ 1 ] ; inp = readIntArray ( ) ; int min2 = inp [ 0 ] , max2 = inp [ 1 ] ; inp = readIntArray ( ) ; int min3 = inp [ 0 ] , max3 = inp [ 1 ] ;   int res1 = min1 , res2 = min2 , res3 = min3 ; int tot = ( res1 + res2 + res3 ) ; if ( tot < n ) { res1 += Math . min ( ( n - tot ) , ( max1 - res1 ) ) ; tot = ( res1 + res2 + res3 ) ; } if ( tot < n ) { res2 += Math . min ( ( n - tot ) , ( max2 - res2 ) ) ; tot = ( res1 + res2 + res3 ) ; }   if ( tot < n ) { res3 += Math . min ( ( n - tot ) , ( max3 - res3 ) ) ; } println ( res1 + \" ▁ \" + res2 + \" ▁ \" + res3 ) ; }   public static void swap ( int arr [ ] , int from , int to ) { println ( \" swapping : ▁ \" + from + \" ▁ & ▁ \" + to ) ; int temp = arr [ from ] ; arr [ from ] = arr [ to ] ; arr [ to ] = temp ; }   "],"bleu":3.1591066685058794e-11,"rouge_l":0.055750190403655746}
{"id":254,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ;  "],"references":["import javax . print . DocFlavor ; import java . io . * ; import java . net . Inet4Address ; import java . sql . ClientInfoStatus ; import java . util . * ;  "],"bleu":0.3065080460893311,"rouge_l":0.5897790055248618}
{"id":255,"predictions":["import java . io . * ; import java . util . * ;   public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; }   void run ( FastScanner in , PrintWriter out ) {  "],"references":["  import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ;   public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;  "],"bleu":0.22172383307295956,"rouge_l":0.40197693574958815}
{"id":256,"predictions":["import java . util . * ; import java . lang . * ; import java . io . * ;   public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) {"],"references":["import java . util . * ; import static java . lang . Math . pow ;   public class Test { public static void main ( String [ ] args ) {   Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; System . out . println ( ( ( n & 1 ) == 0 ) ? ( int ) pow ( 2 , n \/ 2 ) : 0 ) ; } }"],"bleu":0.09287628176045615,"rouge_l":0.3307862952920878}
{"id":257,"predictions":["import java . io . * ; import java . util . * ;   public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; }  "],"references":["import java . io . BufferedReader ; import java . io . FileReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Scanner ; import java . util . StringTokenizer ; import java . util . * ; import java . io . * ; public class codeforces { static class Student { int x , y , z ; Student ( int x , int y , int z ) { this . x = x ; this . y = y ; this . z = z ; } } static int prime [ ] ; static void sieveOfEratosthenes ( int n ) {"],"bleu":0.14964810931425596,"rouge_l":0.2817551963048499}
{"id":258,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ;"],"references":["import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collections ; import java . util . Scanner ; import java . lang . Math ; public class Account { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; ArrayList < Integer > list = new ArrayList < > ( ) ; list . add ( 1 ) ; if ( n == 1 ) { System . out . println ( \"1\" ) ; return ; } int i = 2 , d = 1 ; while ( i < n ) { if ( n % i == 0 ) { list . add ( i ) ; d = i ; } i += d ; } list . add ( n ) ; for ( i = list . size ( ) - 1 ; i >= 0 ; i -- ) { System . out . print ( list . get ( i ) + \" ▁ \" ) ; } } }"],"bleu":0.00007263394032601445,"rouge_l":0.11900117050331643}
{"id":259,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . * ;   import javafx . util . Pair ;   public class Main { public static void main ( String args [ ] ) { FastScanner input = new FastScanner ( ) ; int n = input . nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = input . nextInt ( ) ; } int b [ ] = new int [ n - 1 ] ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = input . nextInt ( ) ; count ++ ; } for ( int i = 0 ; i < n ; i ++ ) { count += a [ i ] ; }"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import static java . lang . Math . * ; import static java . lang . System . out ; import java . util . * ; import java . io . PrintStream ; import java . io . PrintWriter ; public class A { static final int N = ( int ) ( 1e5 + 100 ) ; static final int mod = 1000000007 ; static final long temp = 998244353 ; static final long MOD = 1000000007 ; static final long M = ( long ) 1e9 + 7 ; static class Pair implements Comparable < Pair > { long first , second ; public Pair ( long aa , long bb ) { first = aa ; second = bb ; } public int compareTo ( Pair o ) { return ( int ) ( o . first - this . first ) ; } } static class Tuple implements Comparable < Tuple > { long first , second , third ; public Tuple ( long first , long second , long third ) { this . first = first ; this . second = second ; this . third = third ; } public int compareTo ( Tuple o ) { return ( int ) ( o . third - this . third ) ; } } public static class DSU { int [ ] parent ; int [ ] rank ;"],"bleu":0.18935784684716064,"rouge_l":0.3560567846076241}
{"id":260,"predictions":["import java . util . * ;   public class Test {   public static void main ( String [ ] args ) {"],"references":["import java . util . * ; public class ChessCheater {   public static void main ( String [ ] args ) {"],"bleu":0.8787419089273848,"rouge_l":0.9397759103641455}
{"id":261,"predictions":["import java . util . * ; import java . io . * ;   public class A { public static void main ( String [ ] args ) { FastScanner sc = new FastScanner ( ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = sc . nextInt ( ) ; if ( a [ i ] >= 2 ) { System . out . println ( \" NO \" ) ; } else { System . out . println ( \" YES \" ) ; } } System . out . println ( \" NO \" ) ; } }"],"references":["import java . nio . file . LinkOption ; import java . util . * ; public class Example { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t > 0 ) { int n = sc . nextInt ( ) ; String s = sc . next ( ) ; if ( s . length ( ) == 2 ) { int a = Integer . parseInt ( String . valueOf ( s . charAt ( 0 ) ) ) ; int b = Integer . parseInt ( String . valueOf ( s . charAt ( 1 ) ) ) ; if ( b > a ) { System . out . println ( \" YES \" ) ; System . out . println ( 2 ) ; System . out . println ( s . charAt ( 0 ) + \" ▁ \" + s . charAt ( 1 ) ) ; } else System . out . println ( \" NO \" ) ; } else { System . out . println ( \" YES \" ) ; System . out . println ( 2 ) ; System . out . println ( s . substring ( 0 , 1 ) + \" ▁ \" + s . substring ( 1 ) ) ; }   t -- ; } } }"],"bleu":0.31305110412461656,"rouge_l":0.5262745098039217}
{"id":262,"predictions":["import java . util . * ; import java . lang . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = \" \" ; for ( int i = 0 ; i < n ; i ++ ) { String s = sc . next ( ) ; if ( ! ( s . contains ( \" NO \" ) ) ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ; } }"],"references":["import java . util . * ; public class Pangram { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; int n = s . nextInt ( ) ; String str = s . next ( ) ; if ( n < 26 ) { System . out . println ( \" NO \" ) ; } else { int [ ] arr = new int [ 26 ] ; for ( int i = 0 ; i < n ; i ++ ) { char a = str . charAt ( i ) ; if ( a >= 65 && a <= 91 ) { arr [ a - 65 ] ++ ; } else if ( a >= 97 && a <= 122 ) { arr [ a - 97 ] ++ ; } } int flag = 0 ; for ( int i = 0 ; i < 26 ; i ++ ) { if ( arr [ i ] == 0 ) { System . out . println ( \" NO \" ) ; flag = 1 ; break ; } } if ( flag == 0 ) { System . out . println ( \" YES \" ) ; } } } }"],"bleu":0.2914047440016443,"rouge_l":0.5145791307537135}
{"id":263,"predictions":["import java . util . * ;   public class Codeforces { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; char a = s . toCharArray ( ) ; int b = sc . nextInt ( ) ; if ( a < b ) { System . out . println ( \" > \" ) ; } else if ( a < b . charAt ( 0 ) ) { System . out . println ( \" < \" ) ; } else { System . out . println ( \" > \" ) ; } } }"],"references":["import java . util . * ; import java . io . * ; import java . math . * ; public class Main {"],"bleu":0.08051391933935696,"rouge_l":0.21757961783439492}
{"id":264,"predictions":["import java . io . * ; import java . util . * ;   public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; }   void run ( FastScanner in , PrintWriter out ) {  "],"references":["import java . util . * ; import java . io . * ; public class A { static FastReader in = new FastReader ( ) ; static final Random random = new Random ( ) ; static long mod = 1000000007L ; static HashMap < Integer , Integer > map = new HashMap < > ( ) ;   public static void main ( String args [ ] ) throws IOException { int t = 1 ;"],"bleu":0.3491983170223702,"rouge_l":0.4451652138658017}
{"id":265,"predictions":["import java . util . * ; import java . util . Scanner ; public class Solution { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int cost = 0 ; for ( int i = 1 ; i < n ; i ++ ) { cost += a ; } System . out . println ( cost ) ; } }"],"references":["import java . util . * ; import java . util . Scanner ; import java . io . * ; import javax . lang . model . util . ElementScanner6 ; import static java . lang . System . out ; import java . util . Stack ; import java . util . Queue ; import java . util . LinkedList ;   public class B911 {   static int mod = ( int ) ( 1e9 + 7 ) ; static long MOD = ( long ) ( 1e9 + 7 ) ; static FastReader in = new FastReader ( ) ; static PrintWriter pr = new PrintWriter ( new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ) ; public static void main ( String args [ ] ) {   int tc = 1 ;"],"bleu":0.2097513660557466,"rouge_l":0.32688537446085475}
{"id":266,"predictions":["import java . util . * ; import java . lang . * ; import java . io . * ;   public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double next ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } public static void main ( String [ ] args ) { FastReader sc = new FastReader ( ) ; String s = sc . next ( ) ; StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < sb . length ( ) ; i ++ ) { sb . append ( sb . charAt ( i ) ) ; } System . out . println ( sb ) ; }   }"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Arrays ; import java . util . Scanner ; import java . util . StringTokenizer ; import java . util . ArrayList ; import java . util . TreeSet ; import java . util . Collections ; import java . util . List ; public class Hello { static class FastReader { BufferedReader br ; StringTokenizer st ; public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } public static void main ( String [ ] args ) { FastReader in = new FastReader ( ) ;"],"bleu":0.7200169061829921,"rouge_l":0.7547764905683265}
{"id":267,"predictions":["  import java . util . * ; import java . lang . * ; import java . io . * ;   public class Codeforces { public static void main ( String [ ] args ) throws IOException { Scanner sc = new Scanner ( System . in ) ; PrintWriter pw = new PrintWriter ( System . out ) ; long n = sc . nextLong ( ) ; long x = 0 , y = 0 ; for ( int i = 0 ; i < n ; i ++ ) { String s = sc . next ( ) ; long l = 0 , r = 0 ; for ( int j = 0 ; j < s . length ( ) ; j ++ ) { if ( s . charAt ( j ) == ' ^ ' ) { x = Long . parseLong ( s . charAt ( j ) ) ; y += l ; } else if ( x != y ) { pw . println ( \" left \" ) ; } } pw . flush ( ) ; pw . close ( ) ; }   }"],"references":["import java . util . * ; import java . io . * ; import java . math . * ; public class Main {"],"bleu":0.10274687100501784,"rouge_l":0.22842553191489365}
{"id":268,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ;  "],"references":["import java . util . * ;   public class Check2 { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int q = sc . nextInt ( ) ; for ( int i = 1 ; i <= q ; i ++ ) { int l = sc . nextInt ( ) ; int r = sc . nextInt ( ) ; int d = sc . nextInt ( ) ;   int ans1 = ( l - 1 ) \/ d ; if ( ans1 > 0 ) { ans1 = d ; } else { ans1 = ( int ) ( Math . ceil ( ( r + 1 ) \/ ( double ) d ) ) * d ; } System . out . println ( ans1 ) ; }    }      public static long power ( long a , long b , long c ) { long ans = 1 ; while ( b != 0 ) { if ( b % 2 == 1 ) { ans = ans * a ; ans %= c ; } a = a * a ; a %= c ; b \/= 2 ; } return ans ; }   public static long power1 ( long a , long b , long c ) { long ans = 1 ; while ( b != 0 ) { if ( b % 2 == 1 ) { ans = multiply ( ans , a , c ) ; } a = multiply ( a , a , c ) ; b \/= 2 ;   } return ans ;   }   public static long multiply ( long a , long b , long c ) { long res = 0 ; a %= c ; while ( b > 0 ) { if ( b % 2 == 1 ) { res = ( res + a ) % c ; } a = ( a + a ) % c ; b \/= 2 ; }   return res % c ;   }   public static long totient ( long n ) { long result = n ; for ( long i = 2 ; i * i <= n ; i ++ ) { if ( n % i == 0 ) {"],"bleu":3.0247597416579134e-9,"rouge_l":0.04849609116205114}
{"id":269,"predictions":["import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int l = sc . nextInt ( ) ; int r = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int sum = 0 ; for ( int i = l ; i > 0 ; i -- ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; sum += 2 * 2 ; sum += Math . min ( sum , c + 1 ) ; } System . out . println ( sum ) ; } }"],"references":["import java . util . * ;   public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; int z = sc . nextInt ( ) ; int a ; int sum = 0 ; if ( x > y ) { sum += y ; a = x - y ; } else { sum += x ; a = y - x ; } if ( a <= z ) { sum = sum + ( a + z ) \/ 2 ; } else { sum = sum + z ; } sum *= 2 ; System . out . println ( sum ) ; } }"],"bleu":0.4889409992032723,"rouge_l":0.6499884178827889}
{"id":270,"predictions":["import java . util . Scanner ;   public class JavaApplication1 {   public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; int m = scan . nextInt ( ) ;   int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = scan . nextInt ( ) ; }   int count = 0 ; for ( int i = 0 ; i < m ; i ++ ) { if ( a [ i ] != a [ i ] ) count ++ ; } System . out . println ( count ) ; } }"],"references":["import java . util . * ; import java . io . * ; public class Main { int a ; public static void main ( String args [ ] ) { Scanner scan = new Scanner ( System . in ) ; int t = scan . nextInt ( ) ; int a [ ] = new int [ t ] ; int temp [ ] = new int [ 4 ] ; TreeMap < Integer , Integer > T = new TreeMap < > ( ) ; for ( int i = 0 ; i < t ; ++ i ) { a [ i ] = scan . nextInt ( ) ; temp [ a [ i ] ] ++ ; } Arrays . sort ( temp ) ; System . out . print ( temp [ 1 ] + temp [ 2 ] ) ; } }"],"bleu":0.4417224841977788,"rouge_l":0.6211951656222023}
{"id":271,"predictions":["  import java . util . * ; import java . lang . * ; import java . io . * ;   public class Codechef { public static void main ( String [ ] args ) throws java . lang . Exception { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a [ ] [ ] = new int [ n ] [ n ] ; int b [ ] [ ] = new int [ n ] [ ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] [ 0 ] = sc . nextInt ( ) ; b [ i ] [ 1 ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) b [ i ] [ j ] = sc . nextInt ( ) ; } int [ ] t = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) t [ i ] = sc . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) t [ i ] = sc . nextInt ( ) ; int [ ] t = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { t [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { t [ i ] = 0 ; } System . out . println ( t ) ; } }"],"references":["import java . io . BufferedReader ; import java . io . File ; import java . io . FileWriter ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . math . BigInteger ; import java . util . * ;     public class Main { public static void main ( String [ ] args ) { FastScanner input = new FastScanner ( ) ; int n , c ; n = input . nextInt ( ) ; c = input . nextInt ( ) ; long limak = 0 , Rad = 0 ; int a [ ] = new int [ n ] ; int t [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = input . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { t [ i ] = input . nextInt ( ) ; } long time = 0 ; for ( int i = 0 ; i < n ; i ++ ) { time += t [ i ] ; limak += Math . max ( 0 , a [ i ] - ( c * time ) ) ; } time = 0 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { time += t [ i ] ; Rad += Math . max ( 0 , a [ i ] - ( c * time ) ) ; }"],"bleu":0.4454899192114291,"rouge_l":0.5682716784921192}
{"id":272,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ;"],"references":["import java . io . * ; import java . util . * ;   public class Test {   static FastScanner sc ; static boolean [ ] visited ; static int four = 0 , seven = 0 ;   public static void main ( String args [ ] ) { sc = new FastScanner ( System . in ) ; solve ( ) ; }   public static void solve ( ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; }   int a = 0 , b = 0 , c = 0 , d = 0 ; for ( int i = 1 ; i < arr . length ; i ++ ) { a = Math . min ( arr [ i - 1 ] , arr [ i ] ) ; b = Math . max ( arr [ i - 1 ] , arr [ i ] ) ;   for ( int j = i + 1 ; j < arr . length ; j ++ ) { c = Math . min ( arr [ j - 1 ] , arr [ j ] ) ; d = Math . max ( arr [ j - 1 ] , arr [ j ] ) ;  "],"bleu":0.00011190948030682083,"rouge_l":0.10534335635920358}
{"id":273,"predictions":["import java . util . ArrayList ; import java . util . Arrays ; import java . util . Scanner ;   public class Singleton_Pattern { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; b [ i ] = sc . nextInt ( ) ; } long ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans += a [ i ] ; } System . out . println ( ans ) ; for ( int i = 0 ; i < n ; i ++ ) { ans += a [ i ] ; } System . out . println ( ans ) ; } }"],"references":["import java . util . Scanner ;   public class pROBLEM39 {   public static void main ( String [ ] args ) {"],"bleu":0.10116732316901363,"rouge_l":0.24119338605319912}
{"id":274,"predictions":["import java . util . Scanner ;   public class B {   public static void main ( String [ ] args ) {"],"references":["import java . util . Scanner ;   public class Holidays { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ;   int n = scanner . nextInt ( ) ;   int min = 0 ; int max = 0 ;   for ( int i = 1 ; i <= n ; i ++ ) { if ( i % 7 == 0 || ( i + 1 ) % 7 == 0 ) { min ++ ; } if ( i % 7 == 1 || i % 7 == 2 ) { max ++ ; } }   System . out . println ( min ) ; System . out . println ( max ) ;   } }"],"bleu":0.006484406706343666,"rouge_l":0.24417758369723433}
{"id":275,"predictions":["import java . util . * ; import java . lang . * ; import java . io . * ;   public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) {"],"references":["import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int f = 0 ; for ( int i = 0 ; i < 5 ; i ++ ) { String s1 = sc . next ( ) ; if ( s1 . charAt ( 0 ) == s . charAt ( 0 ) || s1 . charAt ( 1 ) == s . charAt ( 1 ) ) { f = 1 ; } } if ( f == 1 ) { System . out . println ( \" YES \" ) ; } else { System . out . println ( \" NO \" ) ; } } }"],"bleu":0.015739634038784943,"rouge_l":0.1707558043800428}
{"id":276,"predictions":["import java . util . * ; import java . io . * ;   public class B {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { String s = sc . next ( ) ;"],"references":["import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . math . BigDecimal ; import java . math . BigInteger ; import java . util . StringTokenizer ;   public class Main { public static void main ( String [ ] args )"],"bleu":0.2852974790273739,"rouge_l":0.3883371530430353}
{"id":277,"predictions":["import java . util . * ; import java . util . Scanner ; import java . io . * ; import javax . lang . model . util . ElementScanner6 ; import static java . lang . System . out ;    public class B545 {   public static void main ( String args [ ] ) {   FastReader in = new FastReader ( ) ; PrintWriter pr = new PrintWriter ( new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ) ; int tc = 1 ;"],"references":["import java . io . File ; import java . io . FileNotFoundException ; import java . io . PrintWriter ; import java . util . * ;    public class LOL {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) {    int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; List < Integer > list = new ArrayList < > ( ) ; for ( int j = 0 ; j < n ; j ++ ) { list . add ( sc . nextInt ( ) ) ; } SortedSet < Integer > sortedSet = new TreeSet < > ( list ) ; for ( Integer integer : sortedSet ) { if ( integer <= k + 1 ) { k = k + 1 ; } } System . out . println ( k ) ; } } }"],"bleu":0.11293744208766338,"rouge_l":0.3603938730853391}
{"id":278,"predictions":["import java . io . * ; import java . util . * ;   public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; }   void run ( FastScanner in , PrintWriter out ) {  "],"references":["import java . io . * ; import java . util . * ; public class Ishu { static class Reader { final private int BUFFER_SIZE = 1 << 16 ; private DataInputStream din ; private byte [ ] buffer ; private int bufferPointer , bytesRead ; public Reader ( ) { din = new DataInputStream ( System . in ) ; buffer = new byte [ BUFFER_SIZE ] ; bufferPointer = bytesRead = 0 ; } public Reader ( String file_name ) throws IOException { din = new DataInputStream ( new FileInputStream ( file_name ) ) ; buffer = new byte [ BUFFER_SIZE ] ; bufferPointer = bytesRead = 0 ; } public String readLine ( ) throws IOException { byte [ ] buf = new byte [ 64 ] ;"],"bleu":0.19016910221235067,"rouge_l":0.3902864621201105}
{"id":279,"predictions":["import java . util . Arrays ; import java . util . Comparator ; import java . util . Scanner ;   public class n456A { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int [ ] [ ] result = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { result [ i ] [ 0 ] = scanner . nextInt ( ) ; result [ i ] [ 1 ] = scanner . nextInt ( ) ; } Arrays . sort ( result , new Comparator < int [ ] > ( ) { @ Override public int compare ( int [ ] o1 , int [ ] o2 ) { if ( o1 [ 0 ] < o2 [ 0 ] ) return 1 ; else if ( o1 [ 1 ] < o2 ) return 1 ; else if ( o1 [ 1 ] < o2 [ 1 ] ) return 1 ; else { if ( o1 [ 1 ] < o2 [ 1 ] ) return 1 ; else if ( o2 [ 1 ] < o2 [ 1 ] ) return 1 ; } else { for ( int i = 1 ; i < n ; i ++ ) { if ( o2 [ i ] < o2 [ i - 1 ] ) return 1 ; } } } System . out . println ( result ) ; } } }"],"references":["import java . util . * ;   public class _1437B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int zero = 0 , one = 0 ; for ( int i = 0 ; i < s . length ( ) - 1 ; i ++ ) { if ( s . charAt ( i ) == '1' && s . charAt ( i + 1 ) == '1' ) one ++ ; if ( s . charAt ( i ) == '0' && s . charAt ( i + 1 ) == '0' ) zero ++ ; } System . out . println ( Math . max ( zero , one ) ) ; } } }"],"bleu":0.24460960899973952,"rouge_l":0.4267045891306019}
{"id":280,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int n = sc . nextInt ( ) ; int a = 0 ; for ( int j = 0 ; j < n ; j ++ ) { a += sc . nextInt ( ) ; } if ( ( a * ( i + 1 ) % 2000 == 0 ) { System . out . println ( \" YES \" ) ; return ; } } System . out . println ( \" NO \" ) ; } }"],"references":["import java . util . Scanner ; public class Main {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int tc = sc . nextInt ( ) ; while ( tc -- > 0 ) { int n = sc . nextInt ( ) ; if ( n % 2020 <= n \/ 2020 ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ; } sc . close ( ) ; } }"],"bleu":0.5192147014805968,"rouge_l":0.6913390233664475}
{"id":281,"predictions":["import java . io . BufferedReader ; import java . io . FileReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Scanner ; import java . util . StringTokenizer ; import java . util . * ; import java . io . * ; public class codeforces { static class Student { int x , y ; Student ( int x , int y ) { this . x = x ; this . y = y ;"],"references":["import java . io . * ; import java . util . * ; public class Solution { static class FastReader { BufferedReader br ; StringTokenizer st ; public FastReader ( ) { boolean env = System . getProperty ( \" ONLINE _ JUDGE \" ) != null ; if ( ! env ) { try { br = new BufferedReader ( new FileReader ( \" src \\\\ input . txt \" ) ) ; } catch ( FileNotFoundException e ) { e . printStackTrace ( ) ; } } else br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } static FastReader sc = new FastReader ( ) ; static PrintWriter out = new PrintWriter ( System . out ) ; static long gcd ( long a , long b ) { return b == 0 ? a : gcd ( b , a % b ) ; }"],"bleu":0.024316534260561226,"rouge_l":0.18280313508529275}
{"id":282,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . ArrayList ; import java . util . Collections ; import java . util . StringTokenizer ; public class A { public static void main ( String [ ] args ) { FastScanner sc = new FastScanner ( ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; ArrayList < Integer > a = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int v = sc . nextInt ( ) ; if ( v > 0 ) { a . add ( i ) ; } else { a . add ( v ) ; } } if ( v > n ) { System . out . println ( i + 1 ) ; } else { a . add ( i + 1 ) ; } } System . out . println ( n ) ; } }"],"references":["import java . util . * ; public class MyClass { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int x = sc . nextInt ( ) ; int i = 1 ; int s = 0 , count = 0 ; while ( s < x ) { s = s + i ; i ++ ; count ++ ; } int d = s - x ; if ( s == x ) System . out . println ( count ) ; else { if ( d == 1 ) System . out . println ( count + 1 ) ; else System . out . println ( count ) ; } } } }"],"bleu":0.3191647707539861,"rouge_l":0.5711499073441919}
{"id":283,"predictions":["import java . util . Scanner ;   public class Main { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; String s = s . nextLine ( ) ; int n = s . length ( ) ; int [ ] v = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { v [ i ] = s . charAt ( i ) == '0' + 1 ; } for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == '0' ) { v ++ ; } else { v ++ ; } } System . out . println ( v + 1 ) ; } }"],"references":["   import java . io . * ; import java . util . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ;    public class Main1 {   static class pair implements Comparable < pair > { int a ; int b ; public pair ( int a , int b ) { this . a = a ; this . b = b ; } @ Override public int compareTo ( pair o ) {"],"bleu":0.064912807553975,"rouge_l":0.2390420899854862}
{"id":284,"predictions":["import java . io . BufferedReader ; import java . io . FileReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Scanner ; import java . util . StringTokenizer ; import java . util . * ; import java . io . * ; public class codeforces { static class Student { int x , y ; Student ( int x , int y ) { this . x = x ; this . y = y ;"],"references":["import java . io . * ; import java . util . StringTokenizer ;   public class Main { public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; }   void run ( ) { long n = in . nextInt ( ) ; long n2 = n * n ; long result = 0 ; for ( long x = 0 ; x >= 1 - n ; x -- ) { long y2 = ( long ) Math . sqrt ( n2 - x * x ) - 1 ; while ( ( x - 1 ) * ( x - 1 ) + y2 * y2 > n2 ) { result += 1 ; y2 -= 1 ; } } result += n ; result *= 4 ;   if ( result <= 0 ) result = 1 ; out . println ( result ) ;   out . close ( ) ; }  "],"bleu":0.09378489503473,"rouge_l":0.21958243340532754}
{"id":285,"predictions":["import java . util . Scanner ;   public class Main {   public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int T = in . nextInt ( ) ; for ( int t = 0 ; t < T ; t ++ ) { int A = in . nextInt ( ) ; int B = in . nextInt ( ) ; int N = in . nextInt ( ) ; int A = in . nextInt ( ) ; double answer = ( A * B ) \/ 2 ; System . out . println ( answer ) ; }   }   }"],"references":["import java . io . BufferedReader ; import java . io . InputStreamReader ;   public class AandB { public static void main ( String [ ] args ) throws Exception { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int t = Integer . parseInt ( br . readLine ( ) ) ; while ( t -- > 0 ) { String [ ] inp = br . readLine ( ) . split ( \" ▁ \" ) ; long a = Long . parseLong ( inp [ 0 ] ) ; long b = Long . parseLong ( inp [ 1 ] ) ; if ( b > a ) { long tmp = b ; b = a ; a = tmp ; } long diff = a - b ; int i = 0 ; while ( true ) { long val = i * ( i + 1 ) ; if ( val >= 2 * diff && ( ( val \/ 2 ) - diff ) % 2 == 0 ) { break ; } i ++ ; } System . out . println ( i ) ; } } }"],"bleu":0.14377768337913752,"rouge_l":0.44228538283062646}
{"id":286,"predictions":["import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;  "],"references":["import java . util . * ;   public class Main {   public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int a1 = scanner . nextInt ( ) ; int a2 = scanner . nextInt ( ) ; int a3 = scanner . nextInt ( ) ; int b1 = scanner . nextInt ( ) ; int b2 = scanner . nextInt ( ) ; int b3 = scanner . nextInt ( ) ; int n = scanner . nextInt ( ) ;   int cups = ( int ) Math . ceil ( ( double ) ( a1 + a2 + a3 ) \/ 5 ) ; int medals = ( int ) Math . ceil ( ( double ) ( b1 + b2 + b3 ) \/ 10 ) ;   if ( cups + medals <= n ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ;   } }"],"bleu":0.00807513581093787,"rouge_l":0.18395175036056113}
{"id":287,"predictions":["import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; System . out . println ( k ) ; } }"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ;   public class CF579A { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int x = Integer . parseInt ( br . readLine ( ) ) ; int set_bits = 0 ; while ( x != 0 ) { set_bits += x & 1 ; x >>= 1 ; } System . out . print ( set_bits ) ; } }"],"bleu":0.1868817028446396,"rouge_l":0.5127076245747448}
{"id":288,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] ar = new int [ n ] ; int [ ] br = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { ar [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { br [ i ] = sc . nextInt ( ) ; } int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += ar [ i ] ; } sum += ar [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { sum += ar [ i ] ; } System . out . println ( sum ) ; }   }"],"references":["  import java . util . * ; import java . lang . * ; import java . io . * ;   public class Main { public static void main ( String [ ] args ) throws java . lang . Exception { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int t = Integer . parseInt ( br . readLine ( ) ) ; int [ ] a1 = new int [ t - 1 ] ; int [ ] a2 = new int [ t - 1 ] ; int [ ] b = new int [ t ] ; int [ ] sum1 = new int [ t ] ; int sum = 0 ; int homer = 0 ; int marketr = 0 ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; StringTokenizer st1 = new StringTokenizer ( br . readLine ( ) ) ; StringTokenizer st2 = new StringTokenizer ( br . readLine ( ) ) ; for ( int i = 0 ; i < t ; i ++ ) { if ( i < t - 1 ) { a1 [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; a2 [ i ] = Integer . parseInt ( st1 . nextToken ( ) ) ; homer += a2 [ i ] ; } b [ i ] = Integer . parseInt ( st2 . nextToken ( ) ) ; } for ( int i = 0 ; i < t ; i ++ ) { sum = 0 ; if ( i != 0 ) { homer -= a2 [ i - 1 ] ; marketr += a1 [ i - 1 ] ; } sum = homer + marketr ; sum1 [ i ] = sum + b [ i ] ; } Arrays . sort ( sum1 ) ; System . out . println ( sum1 [ 0 ] + sum1 [ 1 ] ) ; } }"],"bleu":0.257094364638564,"rouge_l":0.49693075555045607}
{"id":289,"predictions":["import java . io . BufferedReader ; import java . io . File ; import java . io . FileNotFoundException ; import java . io . FileNotFoundException ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import java . util . Map ; import java . util . PriorityQueue ; import java . util . Map ; import java . util . Scanner ; import java . util . StringTokenizer ;   public class codeforcesB { public static void main ( String [ ] args ) { FastScanner fs = new FastScanner ( ) ; int t = 1 ;"],"references":["import java . lang . * ; import java . util . * ; import java . io . * ;   public class Compressing { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; Map < Integer , List < Integer > > map = new HashMap < Integer , List < Integer > > ( ) ; Map < Integer , List < Integer > > win = new HashMap < Integer , List < Integer > > ( ) ; List < Integer > temp ; int tot = n * ( n - 1 ) \/ 2 ; for ( int i = 0 ; i < tot - 1 ; i ++ ) { int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; if ( map . containsKey ( x ) ) map . get ( x ) . add ( y ) ; else { temp = new ArrayList < Integer > ( ) ; temp . add ( y ) ; map . put ( x , temp ) ; } if ( map . containsKey ( y ) ) map . get ( y ) . add ( x ) ; else { temp = new ArrayList < Integer > ( ) ; temp . add ( x ) ; map . put ( y , temp ) ; } if ( win . containsKey ( x ) ) win . get ( x ) . add ( y ) ; else { temp = new ArrayList < Integer > ( ) ; temp . add ( y ) ; win . put ( x , temp ) ; } }"],"bleu":0.0711576975470113,"rouge_l":0.21756393001345894}
{"id":290,"predictions":["import java . io . * ; import java . util . * ;   public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; }   void run ( FastScanner in , PrintWriter out ) {  "],"references":["import java . util . * ; import java . io . * ; public class MyClass { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) , sum = 0 ; int [ ] arr = new int [ 6 ] ; for ( int i = 0 ; i < n ; i ++ ) { int num = sc . nextInt ( ) ; arr [ num ] += 1 ; } for ( int i = 0 ; i < n ; i ++ ) { int num = sc . nextInt ( ) ; arr [ num ] -= 1 ; } boolean flag = true ; for ( int i = 1 ; i < 6 ; i ++ ) { int num = Math . abs ( arr [ i ] ) ; if ( num % 2 != 0 ) { flag = false ; break ; } sum += num ; } if ( ! flag ) System . out . println ( - 1 ) ; else System . out . println ( ( sum \/ 2 ) \/ 2 ) ; } }"],"bleu":0.0831231550524446,"rouge_l":0.3277242777496199}
{"id":291,"predictions":["import java . io . * ; import java . util . * ;   public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; }   void run ( FastScanner in , PrintWriter out ) {  "],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . OutputStream ; import java . io . PrintWriter ; import java . util . StringTokenizer ;   public class Main { public static void main ( String [ ] args ) throws Exception { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ;   Task task = new Task ( ) ; task . solve ( in , out ) ; out . close ( ) ;   } static class Rectangle { int x1 , y1 ; int x2 , y2 ; } static class Task { public void solve ( InputReader in , PrintWriter out ) { int n = in . nextInt ( ) ;"],"bleu":0.24319325281798268,"rouge_l":0.5242246855150081}
{"id":292,"predictions":["import java . util . * ; import java . io . * ;   public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; }   void run ( FastScanner in , PrintWriter out ) {  "],"references":["import sysfrom collections import defaultdict as ddinput = sys . stdin . readlineI = lambda : list ( map ( int , input ( ) . split ( ) ) )   n , a , b = I ( ) l = I ( ) dic = dd ( int ) for i in range ( n ) : dic [ l [ i ] ] = 1 bs = [ ] pa = dd ( int ) for i in range ( n ) : if dic [ a - l [ i ] ] == 0 : bs . append ( l [ i ] ) else : pa [ l [ i ] ] = a - l [ i ] j = 0 while j < len ( bs ) : for i in range ( j , len ( bs ) ) : cr = bs [ i ] dic [ cr ] = 2 if dic [ b - cr ] == 0 : print ( \" NO \" ) ; exit ( ) dic [ b - cr ] = 2 if dic [ a - b + cr ] == 1 : dic [ a - b + cr ] = 2 bs . append ( a - b + cr ) j += 1 # ct = 0 ; vt = a - b + cr # while vt != pa [ pa [ vt ] ] : # vt = pa [ vt ] ; dic [ b - vt ] = 2 # dic [ vt ] = 2 an = [ 0 ] * nfor i in range ( n ) : an [ i ] = dic [ l [ i ] ] - 1 print ( \" YES \" ) print ( * an )"],"bleu":0.003535694788432914,"rouge_l":0.12856605193827625}
{"id":293,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ;"],"references":["import java . util . Scanner ;   public class _0678BalancedRatingChanges {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int countoddneg = 0 ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { int temp = sc . nextInt ( ) ; arr [ i ] = temp ; if ( temp % 2 != 0 ) { if ( temp < 0 ) { countoddneg ++ ; } else { countoddneg -- ; } } } countoddneg = countoddneg \/ 2 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { System . out . println ( arr [ i ] \/ 2 ) ; } else { if ( arr [ i ] > 0 && countoddneg < 0 ) { System . out . println ( ( arr [ i ] \/ 2 ) + 1 ) ; countoddneg ++ ; } else if ( arr [ i ] < 0 && countoddneg > 0 ) { System . out . println ( ( arr [ i ] \/ 2 ) - 1 ) ; countoddneg -- ; } else { System . out . println ( arr [ i ] \/ 2 ) ; } } } }   }"],"bleu":0.0000015483217821882915,"rouge_l":0.06690597267923024}
{"id":294,"predictions":["import java . util . Scanner ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int [ ] dist = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { dist [ i ] = sc . nextInt ( ) ; } sc . close ( ) ; Arrays . sort ( dist ) ; int cost = 0 ; for ( int i = 0 ; i < N ; i ++ ) { cost = Math . abs ( dist [ i ] - dist [ i ] ) ; } System . out . println ( cost ) ; sc . close ( ) ; } }"],"references":["import java . util . ArrayList ; import java . util . Collections ; import java . util . List ; import java . util . Locale ; import java . util . Scanner ;   public class A1495 {   public static void main ( String [ ] args ) { Locale . setDefault ( Locale . US ) ; Scanner in = new Scanner ( System . in ) ; int T = in . nextInt ( ) ; for ( int t = 0 ; t < T ; t ++ ) { int N = in . nextInt ( ) ; List < Integer > miners = new ArrayList < > ( N ) ; List < Integer > diamonds = new ArrayList < > ( N ) ; for ( int n = 0 ; n < 2 * N ; n ++ ) { int x = in . nextInt ( ) ; int y = in . nextInt ( ) ; if ( x == 0 ) { miners . add ( Math . abs ( y ) ) ; } else { diamonds . add ( Math . abs ( x ) ) ; } } Collections . sort ( miners ) ; Collections . sort ( diamonds ) ; double answer = 0 ; for ( int n = 0 ; n < N ; n ++ ) { int x = diamonds . get ( n ) ; int y = miners . get ( n ) ; answer += Math . sqrt ( x * ( long ) x + y * ( long ) y ) ; } System . out . println ( answer ) ; } }   }"],"bleu":0.19573051159787755,"rouge_l":0.45677043610899265}
{"id":295,"predictions":["import java . util . * ; import java . lang . * ; import java . io . * ;   public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) {"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . math . BigInteger ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collections ; import java . util . HashMap ; import java . util . HashSet ; import java . util . List ; import java . util . PriorityQueue ; import java . util . Random ; import java . util . StringTokenizer ; import java . util . TreeMap ;   public class A {   public static void main ( String [ ] args ) throws IOException {   FastScanner sc = new FastScanner ( ) ; PrintWriter out = new PrintWriter ( System . out ) ; String str = sc . next ( ) ; int n = str . length ( ) ;"],"bleu":0.012717445935723024,"rouge_l":0.2166642000887968}
{"id":296,"predictions":["import java . util . * ; import java . io . * ;   public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; }   void run ( FastScanner in , PrintWriter out ) {  "],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Arrays ; import java . util . StringTokenizer ;   public class Main {   public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ;   StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; long p = Long . parseLong ( st . nextToken ( ) ) ; long q = Long . parseLong ( st . nextToken ( ) ) ; long r = Long . parseLong ( st . nextToken ( ) ) ;   st = new StringTokenizer ( br . readLine ( ) ) ; long arr [ ] = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = Long . parseLong ( st . nextToken ( ) ) ; }   long [ ] pmax = new long [ n ] ; pmax [ 0 ] = p * arr [ 0 ] ;   for ( int i = 1 ; i < n ; i ++ ) { pmax [ i ] = Math . max ( pmax [ i - 1 ] , p * arr [ i ] ) ; }"],"bleu":0.05388147284026767,"rouge_l":0.3080539834566826}
{"id":297,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ;"],"references":["import java . util . * ; import java . lang . * ; import java . io . * ;   public class sample { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) , cnt = 0 ; int arr [ ] = new int [ n ] ;   for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = sc . nextInt ( ) ;   for ( int i = 1 ; i <= n - 2 ; i ++ ) { if ( arr [ i - 1 ] == 1 && arr [ i ] == 0 && arr [ i + 1 ] == 1 ) { cnt ++ ; arr [ i + 1 ] = 0 ; } }   System . out . println ( cnt ) ; } }"],"bleu":0.00045568949018637744,"rouge_l":0.14687735139202407}
{"id":298,"predictions":["import java . util . * ; public class ar_and_"],"references":["import java . util . * ; public class CodeForces1496B { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int t = input . nextInt ( ) ; for ( int j = 0 ; j < t ; j ++ ) { int n = input . nextInt ( ) ; int k = input . nextInt ( ) ; Set < Integer > set = new HashSet < > ( ) ; int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int c = input . nextInt ( ) ; set . add ( c ) ; max = Math . max ( max , c ) ; } if ( k == 0 ) { System . out . println ( set . size ( ) ) ; continue ; } int min = 0 ; while ( set . contains ( min ) ) { min ++ ; } if ( min < max ) { int count = ( max + min + 1 ) \/ 2 ; set . add ( count ) ; System . out . println ( set . size ( ) ) ; } else { System . out . println ( set . size ( ) + k ) ; } } } }"],"bleu":9.165438653877355e-11,"rouge_l":0.06175478065241845}
{"id":299,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . StringTokenizer ;   public class B { public static void main ( String [ ] args ) throws IOException { FastScanner fs = new FastScanner ( ) ; PrintWriter out = new PrintWriter ( System . out ) ; int n = fs . nextInt ( ) ; int m = fs . nextInt ( ) ; long [ ] l = fs . nextLong ( ) ; long x = fs . nextLong ( ) ; long y = fs . nextLong ( ) ;   for ( int i = 0 ; i < n ; i ++ ) { long g = fs . nextLong ( ) ; long b = fs . nextLong ( ) ; if ( g > 0 && y < 0 ) { out . println ( \" infinity \" ) ; } else if ( g > 0 || y < 0 || y > 0 ) { out . println ( \"0 \/ \" ) ; } else if ( g > 1 ) { out . println ( \"0 \/ \" + y ) ; } else { out . println ( \" - 1\" ) ; } }   if ( n > m ) { out . println ( \"0 ▁ \/ \" + b ) ; } else { out . println ( \" infinity \" ) ; }   }   static class FastScanner { BufferedReader br ; StringTokenizer st ;   public FastScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; }   public FastScanner ( InputStreamReader ( System . in ) ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; }   public String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   public long nextLong ( ) { return Long . parseLong ( next ( ) ) ; }   }"],"references":["  import java . io . * ; import java . util . * ; public class Main { static MyScanner sc = new MyScanner ( ) ; public static void main ( String [ ] args ) { int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] a = init ( n + 1 ) ; int [ ] b = init ( m + 1 ) ; if ( n > m ) { if ( a [ 0 ] * b [ 0 ] < 0 ) out . print ( \" - \" ) ; out . println ( \" Infinity \" ) ; } else if ( n < m ) out . println ( \"0\/1\" ) ; else { int high = gcd ( Math . abs ( a [ 0 ] ) , Math . abs ( b [ 0 ] ) ) ; if ( a [ 0 ] * b [ 0 ] < 0 ) out . print ( \" - \" ) ; out . println ( Math . abs ( a [ 0 ] ) \/ high + \" \/ \" + Math . abs ( b [ 0 ] ) \/ high ) ; } out . close ( ) ; }"],"bleu":0.17875178569453617,"rouge_l":0.4034778897957006}
{"id":300,"predictions":["import java . util . * ; import java . lang . * ; import java . io . * ; public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) {"],"references":["import java . util . * ; public class Main { public static Scanner ayah = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { int t , n ; t = ayah . nextInt ( ) ; while ( t > 0 ) { n = ayah . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = ayah . nextInt ( ) ; int min = Math . abs ( arr [ 0 ] - arr [ 1 ] ) ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) { if ( j == i ) continue ; else { if ( Math . abs ( arr [ i ] - arr [ j ] ) <= min ) min = Math . abs ( arr [ i ] - arr [ j ] ) ; } } System . out . println ( min ) ; t -- ; } } }"],"bleu":0.0025717883250420126,"rouge_l":0.13034188034188035}
{"id":301,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . Scanner ; import java . util . StringTokenizer ; import java . util . * ; import java . io . * ; public class c693a {"],"references":["import java . util . * ;   public class StackBracket { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ;"],"bleu":0.15929324413978396,"rouge_l":0.2001312335958005}
{"id":302,"predictions":["import java . util . * ; import java . io . * ;   public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; }   void run ( FastScanner in , PrintWriter out ) {  "],"references":["import java . util . * ;   public class Test {   static Scanner sc ; public static void main ( String [ ] args ) { sc = new Scanner ( System . in ) ; int t = Integer . parseInt ( sc . next ( ) ) ; while ( t -- > 0 ) solve ( ) ; }   static void solve ( ) { long n = sc . nextLong ( ) ; long k = sc . nextLong ( ) ;   long l = 2 , r = n , mid = 0 , x = 0 , y = 0 ;   while ( l <= r ) { mid = ( l + r ) \/ 2 ; x = ( mid - 1 ) * ( mid - 2 ) \/ 2 + 1 ; if ( x == k ) break ; else if ( x < k ) l = mid + 1 ; else r = mid - 1 ; } if ( x > k ) { mid -- ; x = ( mid - 1 ) * ( mid - 2 ) \/ 2 + 1 ; }   for ( y = 1 ; y < mid ; y ++ ) { if ( ( x + y - 1 ) == k ) break ; }   StringBuilder sb = new StringBuilder ( ) ; for ( int i = 1 ; i <= n ; i ++ ) sb . append ( ' a ' ) ; sb . setCharAt ( ( int ) ( mid - 1 ) , ' b ' ) ; sb . setCharAt ( ( int ) ( y - 1 ) , ' b ' ) ; sb . reverse ( ) ;   System . out . println ( sb . toString ( ) ) ; } }"],"bleu":0.021244129091442944,"rouge_l":0.22502712477396022}
{"id":303,"predictions":["import java . util . Scanner ;   public class A1358 {   public static void main ( String [ ] args ) {"],"references":["import java . util . * ;   public class Solution { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ;   int n = s . nextInt ( ) ; int t = s . nextInt ( ) ;   int [ ] [ ] intv = new int [ n ] [ 2 ] ;   for ( int i = 0 ; i < n ; i ++ ) { intv [ i ] [ 0 ] = s . nextInt ( ) ; intv [ i ] [ 1 ] = s . nextInt ( ) ; }   Arrays . sort ( intv , ( a , b ) -> a [ 0 ] - b [ 0 ] ) ;   int res = 2 ;"],"bleu":0.003730224357069707,"rouge_l":0.22010309278350512}
{"id":304,"predictions":["import java . io . BufferedReader ; import java . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . StringTokenizer ;   public class A { static class FastReader { BufferedReader br ; StringTokenizer st ;   public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; }   }   public static void main ( String [ ] args ) { FastScanner fs = new FastScanner ( ) ; int n = fs . nextInt ( ) ; long count = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { count += ( i * 2 ) \/ 2 ; } System . out . println ( count ) ; }   }"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . ArrayList ; import java . util . List ; import java . util . StringTokenizer ;   public class Vany_and_Cubes { static class RealScanner { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( \" \" ) ;   String next ( ) { while ( ! st . hasMoreTokens ( ) ) try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   int [ ] readArray ( int n ) { int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = nextInt ( ) ; return a ; }   long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } }   public static void main ( String [ ] args ) { RealScanner sc = new RealScanner ( ) ; int n = sc . nextInt ( ) ; List < Integer > l = new ArrayList < > ( ) ; l . add ( 1 ) ; int sum = 1 , k = 1 ; for ( int i = 1 ; i <= 10000 ; i ++ ) { sum += i + k ; l . add ( sum ) ; } int valSum = 0 , count = 0 ; if ( n == 1 ) { System . out . println ( 1 ) ; return ; } for ( int i = 1 ; i <= l . size ( ) ; i ++ ) { valSum += l . get ( i - 1 ) ; if ( valSum > n ) { break ; } count ++ ; }   System . out . println ( count ) ; } }"],"bleu":0.4795324446297039,"rouge_l":0.5851594093858743}
{"id":305,"predictions":["import java . util . * ; import java . io . * ; import java . math . * ;   public class FastIO { BufferedReader br ; StringTokenizer st ;   public FastIO ( ) {"],"references":["import javafx . scene . layout . Priority ; import sun . reflect . generics . tree . Tree ;   import java . sql . Array ; import java . util . * ; import java . io . * ; import java . util . stream . Stream ;   import static java . lang . Math . * ; public class D { static InputReader in = new InputReader ( System . in ) ; static OutputWriter out = new OutputWriter ( System . out ) ; static StringBuilder sb = new StringBuilder ( ) ; static long MOD = ( long ) ( 998244353 ) ;   static TreeSet < Integer > [ ] graph ; static TreeSet < Integer > vertices ; static boolean visited [ ] ; static int n ; static int m ; static int size ;   public static void dfs ( int i ) { ArrayList < Integer > list = new ArrayList < > ( ) ; Iterator < Integer > itr = vertices . iterator ( ) ; while ( itr . hasNext ( ) ) { int j = itr . next ( ) ; if ( ! graph [ i ] . contains ( j ) ) { list . add ( j ) ; itr . remove ( ) ; } }   for ( int x : list ) dfs ( x ) ; }   "],"bleu":0.002392620593624209,"rouge_l":0.1894017801697371}
{"id":306,"predictions":["import java . util . * ; import java . io . * ;   public class Main { public static void main ( String args [ ] ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; }   void run ( FastScanner in , PrintWriter out ) {  "],"references":["public class p1143B { public static void main ( String [ ] args ) { System . out . println ( max ( new java . util . Scanner ( System . in ) . nextInt ( ) ) ) ; } static int max ( int n ) { return n < 10 ? Math . max ( 1 , n ) : Math . max ( ( n % 10 ) * max ( n \/ 10 ) , 9 * max ( n \/ 10 - 1 ) ) ; } }"],"bleu":0.19884631001857808,"rouge_l":0.3740306582506763}
{"id":307,"predictions":["import java . util . * ; import java . util . Scanner ; import java . io . * ;   public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] arr = new int [ 200 ] ; for ( int i = 0 ; i < m ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < 200 ; i ++ ) { System . out . print ( arr [ i ] ) ; } System . out . println ( ) ; } }"],"references":["import java . util . * ; import java . io . * ; public class Main { public static int mod = 1000000007 ; public static void solve ( InputReader in ) { int n = in . readInt ( ) ; int m = in . readInt ( ) ; for ( int i = 0 ; i < 1130 ; i ++ ) { System . out . print ( 8 ) ; if ( i == 1129 ) System . out . print ( 9 ) ; } System . out . println ( ) ; for ( int i = 0 ; i < 1131 ; i ++ ) { System . out . print ( 1 ) ; } } public static void main ( String [ ] args ) {"],"bleu":0.5658530817269272,"rouge_l":0.5969111058712568}
{"id":308,"predictions":["import java . util . * ; import java . io . * ;   public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; }   public static long gcd ( long a , long b ) { if ( a == 0 ) return 1 ; return gcd ( b , a % b ) ; }   void run ( FastScanner in , PrintWriter out ) {   gcd = in . nextInt ( ) ; out . close ( ) ; }   private static long gcd ( long a , long b ) {   gcd = gcd ( b , a ) ; b = gcd ( b , a ) ; }   long [ ] [ ] sum = new long [ 1000001 ] [ 200001 ] ;   for ( int i = 0 ; i < 100001 ; i ++ ) { sum [ i ] = new long [ 1000001 ] ; }   for ( int i = 0 ; i < 12 ; i ++ ) { sum [ i ] = gcd ( g [ i ] , 0.0 ) ; }   sum [ 0 ] = ( sum [ 0 ] - sum [ 0 ] ) + ( sum [ 1 ] - g [ 1 ] ) * ( sum [ 1 ] - gcd [ 1 ] ) ;"],"references":["from sys import stdinfrom math import gcd    def main ( ) : input ( ) l = stdin . read ( ) . splitlines ( ) d = [ 3. , 1. , 2. , 2. , 2. , 1. ] * 16667 for i in range ( 4 , 100001 ) : for j in range ( i , 100001 , i ) : d [ j ] += 1. for i , s in enumerate ( l ) : a , b , c = map ( int , s . split ( ) ) k = gcd ( b , c ) ab = d [ gcd ( a , b ) ] ac = d [ gcd ( a , c ) ] bc = d [ k ] abc = d [ gcd ( a , k ) ] asz = d [ a ] - ab - ac + abc bsz = d [ b ] - bc - ab + abc csz = d [ c ] - ac - bc + abc absz = ab - abc bcsz = bc - abc acsz = ac - abc l [ i ] = ' % d ' % ( asz * bsz * csz + ( absz * ( asz + bsz ) * csz ) + ( bcsz * ( bsz + csz ) * asz ) + ( acsz * ( asz + csz ) * bsz ) + ( abc * ( asz * bsz + asz * csz + bsz * csz ) ) + ( abc * ( absz + bcsz + acsz ) * ( asz + bsz + csz ) ) + ( ( asz + bsz + csz + absz + bcsz + acsz ) * ( abc * ( abc + 1 ) * .5 ) ) + ( absz * bcsz * acsz ) + ( ( absz * ( absz + 1. ) * d [ c ] ) + ( bcsz * ( bcsz + 1. ) * d [ a ] ) + ( acsz * ( acsz + 1. ) * d [ b ] ) ) * .5 + ( ( asz + bsz + csz + abc ) * ( absz * acsz + absz * bcsz + bcsz * acsz ) ) + ( abc + ( abc * ( abc - 1. ) ) + ( abc * ( abc - 1. ) * ( abc - 2. ) \/ 6. ) ) ) print ( ' \\n ' . join ( map ( str , l ) ) )    if __name__ == ' _ _ main _ _ ' : main ( )"],"bleu":0.04046000662022052,"rouge_l":0.20829644618692297}
{"id":309,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int t = scan . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int n = scan . nextInt ( ) ; int a [ ] = new int [ n ] ; int b [ ] = new int [ n ] ; for ( int j = 0 ; j < n ; j ++ ) { a [ j ] = scan . nextInt ( ) ; b [ j ] = a [ i ] ; } } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { a [ i ] = scan . nextInt ( ) ; } } int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { max = Math . max ( max , a [ i ] ) ; } System . out . print ( max ) ; } }"],"references":["import java . util . Arrays ; import java . util . Collections ;   import java . util . Scanner ;   public class Problem36 {   public static void main ( String [ ] args ) {"],"bleu":0.08091040283304139,"rouge_l":0.1799675468358165}
{"id":310,"predictions":["import java . util . * ; import java . io . * ;   public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; }   void run ( FastScanner in , PrintWriter out ) {  "],"references":["import java . util . * ; public class _274_A_k_multiple_free_set {"],"bleu":0.10588612806056377,"rouge_l":0.24196747322491075}
{"id":311,"predictions":["import java . util . * ;   public class FastIO { BufferedReader br ; StringTokenizer st ;   public static void main ( String [ ] args ) {"],"references":["import java . util . * ; import java . io . * ; import java . math . BigInteger ; import java . text . * ; public class Main { static long mod = 1000_000_007 ; static long mod1 = 998244353 ; static boolean fileIO = false ; static boolean memory = true ; static FastScanner f ; static PrintWriter pw ; static double eps = ( double ) 1e-6 ; static FileWriter fw ; static long oo = Long . MAX_VALUE ;"],"bleu":0.04503652399050788,"rouge_l":0.24015748031496065}
{"id":312,"predictions":["import java . util . Scanner ;   public class Main { static Scanner sc = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { int t = sc . nextInt ( ) ; int sx = sc . nextInt ( ) ; int sy = sc . nextInt ( ) ; int ny = sc . nextInt ( ) ;   for ( int i = 0 ; i < t ; i ++ ) { int sx = sc . nextInt ( ) ; int sy = sc . nextInt ( ) ; int sx = sc . nextInt ( ) ; int sy = sc . nextInt ( ) ; if ( sx >= n && sy == 0 ) { System . out . println ( - 1 ) ; } else if ( sx >= n && sy == 0 ) { System . out . println ( - 1 ) ; } else { System . out . println ( - 1 ) ; } }   }"],"references":["   import java . util . * ;    public class dummycodes {   public static class data { int prevIndex ; int comDiff ; public data ( int i ) { prevIndex = i ; comDiff = 0 ; } } public static void solve ( int t , int s1 , int s2 , int e1 , int e2 , String s ) { int reqDirs [ ] = new int [ 26 ] ; if ( s1 < e1 ) reqDirs [ ' E ' - ' A ' ] = ( e1 - s1 ) ; else reqDirs [ ' W ' - ' A ' ] = ( s1 - e1 ) ; if ( s2 < e2 ) reqDirs [ ' N ' - ' A ' ] = ( e2 - s2 ) ; else reqDirs [ ' S ' - ' A ' ] = ( s2 - e2 ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( reqDirs [ s . charAt ( i ) - ' A ' ] > 0 ) reqDirs [ s . charAt ( i ) - ' A ' ] -- ; if ( reqDirs [ ' N ' - ' A ' ] == 0 && reqDirs [ ' S ' - ' A ' ] == 0 && reqDirs [ ' E ' - ' A ' ] == 0 && reqDirs [ ' W ' - ' A ' ] == 0 ) { System . out . println ( i + 1 ) ; return ; } } System . out . println ( \" - 1\" ) ; }   public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; int s1 = sc . nextInt ( ) ; int s2 = sc . nextInt ( ) ; int e1 = sc . nextInt ( ) ; int e2 = sc . nextInt ( ) ; sc . nextLine ( ) ; String s = sc . nextLine ( ) ;   solve ( t , s1 , s2 , e1 , e2 , s ) ;        } }  "],"bleu":0.17350048147729474,"rouge_l":0.3202694102672889}
{"id":313,"predictions":["import java . util . Scanner ;   public class Stock { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int t = scanner . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int a = scanner . nextInt ( ) ; int b = scanner . nextInt ( ) ; int c = scanner . nextInt ( ) ;   int [ ] a = new int [ t ] ; for ( int i = 0 ; i < t ; i ++ ) a [ i ] = scanner . nextInt ( ) ;   for ( int j = 0 ; j < t ; j ++ ) b [ j ] = scanner . nextInt ( ) ;   int minPrice = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] < minPrice ) continue ; minPrice += a [ i ] [ j ] ; } System . out . println ( minPrice ) ; } }"],"references":["import java . util . Scanner ;    public class Main {   public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) ; int a , b ; int ans = 0 , p = 100 ; for ( int i = 0 ; i < n ; i ++ ) { a = in . nextInt ( ) ; b = in . nextInt ( ) ; p = Math . min ( p , b ) ; ans += p * a ; } System . out . println ( ans ) ;   } }"],"bleu":0.34258717526486376,"rouge_l":0.5947075208913649}
{"id":314,"predictions":["import java . util . * ; import java . io . * ; import java . math . * ;   public class B { public static void main ( String [ ] args ) throws IOException { FastScanner fs = new FastScanner ( ) ; PrintWriter out = new PrintWriter ( System . out ) ;"],"references":["import java . io . * ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; import java . util . StringTokenizer ; import java . util . * ; public class realfast implements Runnable { private static final int INF = ( int ) 1e9 ; long in = ( long ) Math . pow ( 10 , 9 ) + 7 ; long fac [ ] = new long [ 3000 ] ; public void solve ( ) throws IOException { String s = readString ( ) ; int n = s . length ( ) ; int last [ ] = new int [ s . length ( ) ] ; Arrays . fill ( last , n ) ; for ( int j = 1 ; j <= 9 ; j ++ ) { for ( int i = 0 ; i < n - 2 * j ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i + j ) && s . charAt ( i + j ) == s . charAt ( i + 2 * j ) ) { last [ i ] = Math . min ( last [ i ] , i + 2 * j ) ; } } } for ( int i = n - 2 ; i >= 0 ; i -- ) { last [ i ] = Math . min ( last [ i ] , last [ i + 1 ] ) ; } long count = 0 ; for ( int i = 0 ; i < n ; i ++ ) count = count + n - last [ i ] ;   out . println ( count ) ; } public long pow ( long n , long p , long m ) { if ( p == 0 ) return 1 ; long val = pow ( n , p \/ 2 , m ) ; ; val = ( val * val ) % m ; if ( p % 2 == 0 ) return val ; else return ( val * n ) % m ; }"],"bleu":0.0015600409963818292,"rouge_l":0.1568640379796914}
{"id":315,"predictions":["import java . util . * ; import java . lang . * ; import java . io . * ; public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) {"],"references":["import java . io . * ; import java . util . * ;   public class Codeforces { int l , r , x ; int count ; void subsetSums ( int arr [ ] , int n ) { int total = 1 << n ; for ( int i = 0 ; i < total ; i ++ ) { long sum = 0 , min = Integer . MAX_VALUE , max = Integer . MIN_VALUE ; for ( int j = 0 ; j < n ; j ++ ) { if ( ( i & ( 1 << j ) ) != 0 ) { min = Math . min ( min , arr [ j ] ) ; max = Math . max ( max , arr [ j ] ) ; sum += arr [ j ] ; } } if ( sum >= l && sum <= r && max - min >= x ) {"],"bleu":0.014447848274070613,"rouge_l":0.1882716049382716}
{"id":316,"predictions":["import java . io . * ; import java . util . * ; public class Asd { static PrintWriter w = new PrintWriter ( System . out ) ; static FastScanner s = new FastScanner ( ) ; public static void main ( String [ ] args ) { int n = 1 ;"],"references":["import java . util . * ;    public class Main {    public static void main ( String [ ] args ) { int n , l = 0 , r ; int [ ] a = new int [ 1020 ] ; Scanner in = new Scanner ( System . in ) ; r = n = in . nextInt ( ) ; a [ 0 ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { a [ i ] = in . nextInt ( ) ; }   while ( a [ l ] == l && l <= n ) l ++ ; while ( a [ r ] == r && r >= 1 ) r -- ;   if ( l == n + 1 && r == 0 ) { System . out . println ( \"0 ▁ 0\" ) ; return ; } for ( int i = l ; i < r ; i ++ ) { if ( a [ i ] < a [ i + 1 ] ) { System . out . println ( \"0 ▁ 0\" ) ; return ; } } System . out . println ( l + \" ▁ \" + r ) ; }    }"],"bleu":0.02566272630830447,"rouge_l":0.2011060299904286}
{"id":317,"predictions":["import java . util . * ; import java . io . * ;   public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ;   int [ ] a = new int [ n ] ; int [ ] b = new int [ m ] ;   for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; }   for ( int i = 0 ; i < m ; i ++ ) { b [ i ] = sc . nextInt ( ) ; }   int count = 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( b [ i ] - x ) && b [ i ] <= y ) count ++ ; } System . out . println ( count ) ;   } }"],"references":["import java . util . Scanner ;   public class Array_524 { public static void main ( String [ ] args ) { Scanner sn = new Scanner ( System . in ) ; int n = sn . nextInt ( ) ; int m = sn . nextInt ( ) ; int x = sn . nextInt ( ) ; int y = sn . nextInt ( ) ; int [ ] N = new int [ n ] ; int [ ] M = new int [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { N [ i ] = sn . nextInt ( ) ; } for ( int i = 0 ; i < m ; i ++ ) { M [ i ] = sn . nextInt ( ) ; }   int [ ] [ ] ans = solution ( N , M , x , y ) ; int total = 0 ;   for ( int i = 0 ; i < ans . length ; i ++ ) { if ( ans [ i ] [ 0 ] != 0 && ans [ i ] [ 1 ] != 0 ) { total ++ ; } }   System . out . println ( total ) ; for ( int i = 0 ; i < total ; i ++ ) { System . out . println ( ans [ i ] [ 0 ] + \" ▁ \" + ans [ i ] [ 1 ] ) ; } }   private static int [ ] [ ] solution ( int [ ] N , int [ ] M , int x , int y ) { int [ ] [ ] result = new int [ M . length ] [ 2 ] ; int resultIndex = 0 ; int i = 0 ; int j = 0 ; while ( i < N . length && j < M . length ) { int a = Math . max ( 0 , N [ i ] - x ) ; int b = N [ i ] + y ; if ( M [ j ] >= a && M [ j ] <= b ) { result [ resultIndex ] [ 0 ] = i + 1 ; result [ resultIndex ] [ 1 ] = j + 1 ; resultIndex ++ ; i ++ ; j ++ ; } else { if ( N [ i ] < M [ j ] ) { i ++ ; } else { j ++ ; } } } return result ; }   }"],"bleu":0.21195849375818235,"rouge_l":0.4927074679220899}
{"id":318,"predictions":["import java . util . * ;   public class ICPC {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = sc . nextInt ( ) ;   for ( int i = 0 ; i < q ; i ++ ) { arr [ sc . nextInt ( ) ] = sc . nextInt ( ) ; }   for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } sc . close ( ) ; }  "],"references":["import java . io . * ; import java . util . * ;   public class A1008 { public static void main ( String [ ] args ) { InputStream inputReader = System . in ; OutputStream outputReader = System . out ; InputReader in = new InputReader ( inputReader ) ;"],"bleu":0.1412127854736818,"rouge_l":0.34954158480681075}
{"id":319,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ;"],"references":["import java . io . * ; import java . util . * ; import javax . print . attribute . standard . Finishings ;   import java . math . * ;   public class Shell { static final Random random = new Random ( ) ; static PrintWriter out = new PrintWriter ( ( System . out ) ) ; static Reader sc = new Reader ( ) ;   public static void main ( String args [ ] ) throws IOException {   int k = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int left [ ] = { 1 , 2 , 2 , 1 , 0 , 0 } ; int right [ ] = { 2 , 1 , 0 , 0 , 1 , 2 } ; int middle [ ] = { 0 , 0 , 1 , 2 , 2 , 1 } ; int y = k % 6 ; if ( y > 0 ) { if ( left [ y - 1 ] == x ) System . out . println ( 0 ) ; if ( right [ y - 1 ] == x ) System . out . println ( 2 ) ; if ( middle [ y - 1 ] == x ) System . out . println ( 1 ) ; } else { if ( left [ 5 ] == x ) System . out . println ( 0 ) ; if ( right [ 5 ] == x ) System . out . println ( 2 ) ; if ( middle [ 5 ] == x ) System . out . println ( 1 ) ;   }   }  "],"bleu":0.00000126028682467934,"rouge_l":0.08701078719800304}
{"id":320,"predictions":["import java . util . * ;   public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] a = new int [ n + 1 ] ; for ( int i = 0 ; i < n + 1 ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int c = 0 ; for ( int i = 0 ; i < n + 1 ; i ++ ) { if ( a [ i ] <= a [ i ] ) { c ++ ; } else { c ++ ; } } System . out . println ( c ) ; } }"],"references":["import java . util . Scanner ;   public class Queue_in_bus_stop {   public static void main ( String [ ] args ) {   Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) ; int m = in . nextInt ( ) ; int groupN = in . nextInt ( ) ; int count = 1 ; int j = m - groupN ; for ( int i = 1 ; i < n ; i ++ ) { groupN = in . nextInt ( ) ; if ( groupN > j ) { count ++ ; j = m - groupN ; } else { j -= groupN ; } } System . out . println ( count ) ; }   }"],"bleu":0.45754120376092855,"rouge_l":0.664041690793283}
{"id":321,"predictions":["import com . sun . org . apache . bcel . internal . generic . AALOAD ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . * ; import java . util . stream . IntStream ; import javafx . util . Pair ;   public class Main {   static void sort ( int a [ ] ) { Random ran = new Random ( ) ; for ( int i = 0 ; i < a . length ; i ++ ) { int r = ran . nextInt ( a . length ) ; int temp = a [ r ] ; a [ r ] = a [ i ] ; a [ i ] = temp ; }   Arrays . sort ( a ) ; } public static void main ( String [ ] args ) throws IOException { Scanner input = new Scanner ( System . in ) ; StringBuilder sb = new StringBuilder ( input . next ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { sb . append ( sb . charAt ( i ) ) ; } System . out . println ( sb . toString ( ) ) ; }   }"],"references":["import java . util . Scanner ;   public class MikeAndPallindrome {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String str = sc . next ( ) ; int lo = 0 ; int hi = str . length ( ) - 1 ; Check ( str , lo , hi ) ;   }   public static void Check ( String str , int lo , int hi ) { int check = 0 ; while ( lo < hi ) { if ( str . charAt ( lo ) != str . charAt ( hi ) ) { check ++ ; } hi -- ; lo ++ ; } if ( check == 1 || ( str . length ( ) % 2 != 0 && check == 0 ) ) { System . out . println ( \" YES \" ) ; } else { System . out . println ( \" NO \" ) ; } }   }"],"bleu":0.21711843821870005,"rouge_l":0.37745098039215685}
{"id":322,"predictions":["import java . util . * ;   public class CodeForces { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int t = scanner . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int n = scanner . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int j = 0 ; j < n ; j ++ ) { arr [ j ] = scanner . nextInt ( ) ; } int count = 0 ; while ( n % 2 != 0 ) { if ( arr [ j ] == 0 ) count ++ ; else count ++ ; } System . out . println ( count ) ; } }"],"references":["import java . io . * ; import java . math . * ; import java . util . * ;   public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int T = sc . nextInt ( ) ; sc . nextLine ( ) ; while ( T -- > 0 ) { String x = sc . nextLine ( ) ;"],"bleu":0.26214642024339374,"rouge_l":0.483905415713196}
{"id":323,"predictions":["import java . util . * ; import java . io . * ; public class Solution { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int a [ ] = new int [ n + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = sc . nextInt ( ) ; int b [ ] = new int [ n + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; b [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] > b [ i - 1 ] ) ans ++ ; } System . out . println ( ans ) ; } }"],"references":["import java . io . InputStream ; import java . io . OutputStream ; import java . io . IOException ; import java . util . ArrayList ; import java . io . InputStream ; import java . io . BufferedWriter ; import java . io . Writer ; import java . io . OutputStreamWriter ; import java . io . IOException ; import java . util . InputMismatchException ; import java . io . PrintWriter ; import java . util . Arrays ; import java . io . OutputStream ;   public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; OutputWriter out = new OutputWriter ( outputStream ) ; TaskB solver = new TaskB ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; } static class TaskB { double special ( int [ ] loyalties , int [ ] levels , int playerlevelsum ) { int poss = 1 << loyalties . length ; double res = 0 ; for ( int pos = 0 ; pos < poss ; pos ++ ) { double occurs = 1 ; int happy = 0 ; int badlevelssum = 0 ; for ( int i = 0 ; i < loyalties . length ; i ++ ) { if ( ( ( pos >> i ) & 1 ) == 1 ) {"],"bleu":0.21597493513495442,"rouge_l":0.4043399385989394}
{"id":324,"predictions":["import java . util . * ; import java . lang . * ; import java . io . * ;   public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) {"],"references":["import java . util . * ; import java . io . * ;   public class Main { public static void main ( String [ ] args ) throws IOException { Scanner sc = new Scanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; int n = sc . nextInt ( ) ; Point c = new Point ( sc . nextInt ( ) , sc . nextInt ( ) ) ; Point [ ] arr = new Point [ n ] ; double INF = 1e16 ; double minr = INF , maxr = - INF ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = new Point ( sc . nextInt ( ) , sc . nextInt ( ) ) ; maxr = Math . max ( maxr , arr [ i ] . dist ( c ) ) ; } for ( int i = 0 ; i < n ; i ++ ) minr = Math . min ( minr , Point . distToLineSegment ( c , arr [ i ] , arr [ ( i + 1 ) % n ] ) ) ; out . println ( Math . PI * ( maxr * maxr - minr * minr ) ) ; out . close ( ) ; }   static class Vector {   double x , y ;   Vector ( double a , double b ) { x = a ; y = b ; }   Vector ( Point a , Point b ) { this ( b . x - a . x , b . y - a . y ) ; }   Vector scale ( double s ) { return new Vector ( x * s , y * s ) ; }"],"bleu":0.00023798995852104035,"rouge_l":0.12325224278671298}
{"id":325,"predictions":["import java . util . * ; import java . lang . * ; import java . io . * ; public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) {"],"references":["import java . util . * ;   public class Main { public static void main ( String [ ] args ) { Scanner stdin = new Scanner ( System . in ) ; int N = stdin . nextInt ( ) ; int K = stdin . nextInt ( ) ; int [ ] arr = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { arr [ i ] = stdin . nextInt ( ) ; } Arrays . sort ( arr ) ; int k = arr [ N - K ] ; int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( arr [ i ] >= k && arr [ i ] > 0 ) { ans = N - i ; break ; } } System . out . println ( ans ) ; } }"],"bleu":0.008783268975200549,"rouge_l":0.16052631578947368}
{"id":326,"predictions":["import java . util . * ;   public class StackBracket { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; b [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; for ( int i = 1 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < m ; j ++ ) { a [ i ] += a [ j ] ; } } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { b [ i ] += a [ j ] ; b [ j ] += a [ i ] ; } } int k = 0 ; for ( int i = 0 ; i < n ; i ++ ) { k += a [ i ] ; } System . out . println ( k ) ; } }"],"references":["import java . util . * ; public class contest14 { static Scanner scn = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { int n = scn . nextInt ( ) ; int A = scn . nextInt ( ) ; int B = scn . nextInt ( ) ; Integer [ ] arr = new Integer [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = scn . nextInt ( ) ; if ( A == B ) { System . out . println ( n - 1 ) ; return ; } int s1 = arr [ 0 ] ; Arrays . sort ( arr , Collections . reverseOrder ( ) ) ; int S = 0 ; for ( int val : arr ) S += val ; boolean is_s1 = false ; int block = 0 ; if ( ( s1 * A ) \/ S >= B ) { System . out . println ( block ) ; return ; } for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == s1 && ! is_s1 ) { is_s1 = true ; continue ; } S = S - arr [ i ] ; block ++ ; if ( ( s1 * A ) \/ S >= B ) { System . out . println ( block ) ; return ; } } } }  "],"bleu":0.3969632562511562,"rouge_l":0.5055883461007157}
{"id":327,"predictions":["import java . util . * ; public class f {"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . ArrayList ; import java . util . Collections ; import java . util . HashMap ; import java . util . StringTokenizer ;   public class B { public static void main ( String [ ] args ) { FastScanner fs = new FastScanner ( ) ; int t = fs . nextInt ( ) ; while ( t -- > 0 ) { int n = fs . nextInt ( ) ; ArrayList < Integer > a = new ArrayList < > ( ) ; int ans = 0 , one = 0 , two = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int b = fs . nextInt ( ) ; if ( b % 3 == 0 ) ans ++ ; else if ( b % 3 == 1 ) { one ++ ; } else two ++ ; } int e = Math . min ( one , two ) ; one -= e ; two -= e ; ans += e + ( one ) \/ 3 + ( two ) \/ 3 ; System . out . println ( ans ) ; } } static class FastScanner { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( \" \" ) ; String next ( ) { while ( ! st . hasMoreTokens ( ) ) try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } int [ ] readArray ( int n ) { int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = nextInt ( ) ; return a ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } } }"],"bleu":9.345032796857792e-16,"rouge_l":0.0387410909604121}
{"id":328,"predictions":["import java . io . BufferedReader ; import java . io . FileReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . util . HashMap ; import java . util . List ; import java . util . Map ; import java . util . Map ; import java . util . StringTokenizer ; import java . util . TreeMap ;     public class Main { static class FastReader { BufferedReader br ; StringTokenizer st ;   public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; }   String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   long nextLong ( ) { return Long . parseLong ( next ( ) ) ; }   double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } }   String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . io . BufferedReader ; import java . io . File ; import java . io . FileWriter ; import java . io . IOException ; import java . io . InputStreamReader ; import java . math . BigInteger ; import java . util . * ;   import javafx . util . Pair ;   public class Main {   public static void main ( String args [ ] ) { FastScanner input = new FastScanner ( ) ; int n = input . nextInt ( ) ; long price [ ] = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { price [ i ] = input . nextLong ( ) ; } int front [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { front [ i ] = input . nextInt ( ) ; } int back [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { back [ i ] = input . nextInt ( ) ; } HashMap < Integer , TreeMap < Long , Integer > > map = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( ! map . containsKey ( front [ i ] ) ) { TreeMap < Long , Integer > lol = new TreeMap < > ( ) ; map . put ( front [ i ] , lol ) ; } if ( front [ i ] != back [ i ] ) map . get ( front [ i ] ) . put ( price [ i ] , back [ i ] ) ; if ( ! map . containsKey ( back [ i ] ) ) { TreeMap < Long , Integer > lol = new TreeMap < > ( ) ; map . put ( back [ i ] , lol ) ; } if ( front [ i ] == back [ i ] ) map . get ( back [ i ] ) . put ( price [ i ] , 0 ) ; else map . get ( back [ i ] ) . put ( price [ i ] , front [ i ] ) ; }"],"bleu":0.1583694076656326,"rouge_l":0.3501435014350143}
{"id":329,"predictions":["import java . util . * ;   public class ICPC { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; boolean ar [ ] = new boolean [ 5000 + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) { ar [ sc . nextInt ( ) ] = true ; } int c = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( ar [ i ] != 0 ) { c ++ ; } } System . out . println ( c ) ;   }   }"],"references":["import java . util . * ;   public class P3 { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; Map < String , Integer > map = new HashMap ( ) ; int c = 0 ; while ( t -- > 0 ) { String breed = sc . next ( ) ; String color = sc . next ( ) ; String m = breed + ' . ' + color ; if ( ! map . containsKey ( m ) ) { map . put ( m , 1 ) ; c ++ ; } } System . out . println ( c ) ; } }"],"bleu":0.4629433098438843,"rouge_l":0.5950117298431906}
{"id":330,"predictions":["import java . util . * ; import java . lang . * ; import java . io . * ;   public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) {"],"references":["import java . util . Scanner ;   public class SentimentReplace { public static void main ( String [ ] args ) {   Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) , k = in . nextInt ( ) ;   if ( k == 1 ) { int i , a [ ] = new int [ n ] ; String o = \" No \" ; for ( i = 0 ; i < n ; i ++ ) a [ i ] = in . nextInt ( ) ; int b = in . nextInt ( ) ;   for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] == 0 ) a [ i ] = b ; if ( i > 0 ) if ( a [ i ] <= a [ i - 1 ] ) o = \" Yes \" ; } System . out . println ( o ) ; } else { System . out . println ( \" Yes \" ) ; } in . close ( ) ; } }"],"bleu":0.0022479539565322996,"rouge_l":0.14077493015911577}
{"id":331,"predictions":["import java . util . * ; import java . lang . * ; import java . io . * ;   public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) {"],"references":["import java . io . * ; import java . util . * ;   public class Main { static class FastReader { BufferedReader br ; StringTokenizer st ;   public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; }   String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   long nextLong ( ) { return Long . parseLong ( next ( ) ) ; }   double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; }   String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } }   public static void main ( String [ ] args ) { FastReader sc = new FastReader ( ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int t = reverse ( m ) ; System . out . println ( t + n ) ;"],"bleu":0.0018624934346799242,"rouge_l":0.15639483285672023}
{"id":332,"predictions":["import java . util . * ;   public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = b + c ; if ( c != 1 ) System . out . println ( \" NO \" ) ; else if ( c != 7 ) System . out . println ( \" YES \" ) ; else System . out . println ( \" YES \" ) ; } }"],"references":["import java . util . Scanner ;   public class LuckyTicket {   public static void main ( String [ ] argus ) { Scanner scanner = new Scanner ( System . in ) ; int size = scanner . nextInt ( ) ; String value = scanner . next ( ) ; int domain = size \/ 2 ; boolean res = true ; int sum1 = 0 ; int sum2 = 0 ; for ( int i = 0 ; i < size ; i ++ ) { char myChar = value . charAt ( i ) ; if ( myChar != '4' && myChar != '7' ) { res = false ; break ; } int newMyChar = Integer . parseInt ( myChar + \" \" ) ; if ( i < domain ) { sum1 += newMyChar ; } else { sum2 += newMyChar ; } } if ( res && sum1 == sum2 ) { System . out . println ( \" YES \" ) ; } else { System . out . println ( \" NO \" ) ; } }   }"],"bleu":0.3440184785634519,"rouge_l":0.5735352335708631}
{"id":333,"predictions":["import java . util . * ; import java . io . * ;   public class A { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ;   int n = in . nextInt ( ) ; int L = in . nextInt ( ) ;   for ( int i = 0 ; i < n ; i ++ ) { out . print ( \" R \" ) ; }   for ( int i = 0 ; i < L ; i ++ ) { out . print ( \" R \" ) ; } out . println ( \" \" ) ; for ( int i = 0 ; i < n ; i ++ ) { out . print ( \" R \" ) ; } out . println ( ) ;   }  "],"references":["import java . util . * ; import java . io . * ; public class problem2 { public static void primeFactors ( int n , ArrayList < Integer > arr ) {"],"bleu":0.12446957159269505,"rouge_l":0.2985130811217767}
{"id":334,"predictions":["import java . util . * ;   public class Check2 { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; System . out . println ( s + s ) ; } }"],"references":["import java . util . Scanner ;   public class problem54 {   public static void main ( String [ ] args ) {"],"bleu":0.2998726352962656,"rouge_l":0.5658127208480566}
{"id":335,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; System . out . println ( solve ( a , b , c , d ) ) ; sc . close ( ) ; } static int solve ( int a , int b , int c , int d ) { int g = gcd ( b , a ) ; if ( b == 0 ) { g = gcd ( b , b ) ; } else { g = gcd ( b , a ) ; } return gcd ( b , a % b ) ; } }"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . math . BigInteger ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader bf = new BufferedReader ( new InputStreamReader ( System . in ) ) ; BigInteger n = new BigInteger ( bf . readLine ( ) . trim ( ) ) ; int in = n . intValue ( ) , L = 0 ; while ( ( in & 1 ) == 0 ) { in >>= 1 ; L ++ ; } if ( in == 1 ) { System . out . printf ( \" % d \/ 1 \\n \" , L ) ; return ; } n = new BigInteger ( String . valueOf ( in ) ) ; BigInteger s = BigInteger . ONE , t = BigInteger . ONE , two = new BigInteger ( \"2\" ) ; int m = 0 ; for ( int i = 0 ; i < in ; i ++ ) { s = s . multiply ( two ) ; t = t . multiply ( two ) . mod ( n ) ; if ( t . equals ( BigInteger . ONE ) ) { m = i + 1 ; break ; } } t = s . multiply ( n ) ; BigInteger r = s , ans = BigInteger . ZERO ; int i = L ; while ( r . compareTo ( BigInteger . ONE ) > 0 ) { i ++ ; t = t . divide ( two ) ; if ( r . compareTo ( t ) > 0 ) { r = r . subtract ( t ) ; ans = ans . add ( t . multiply ( new BigInteger ( String . valueOf ( i ) ) ) ) ; } } ans = ans . add ( new BigInteger ( String . valueOf ( m ) ) ) ; s = s . subtract ( BigInteger . ONE ) ; BigInteger d = ans . gcd ( s ) ; System . out . printf ( \" % s \/ % s \\n \" , ans . divide ( d ) , s . divide ( d ) ) ; } }"],"bleu":0.06556635735730408,"rouge_l":0.29911628408233654}
{"id":336,"predictions":["import java . util . Scanner ;   public class BuildContest { public static void main ( String [ ] args ) {   Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) , m = in . nextInt ( ) , a [ ] = new int [ n ] , i , j , z = n ;   for ( i = 0 ; i < m ; i ++ ) { int x = in . nextInt ( ) - 1 ; int y = in . nextInt ( ) - 1 ; for ( i = 0 ; i < n ; i ++ ) { if ( ( a [ i ] <= a [ i ] ) z ++ ; else z -- ; } System . out . println ( z ) ; } }"],"references":["  import java . lang . reflect . Array ; import java . text . CollationElementIterator ; import java . util . * ; import java . util . Map . Entry ; import java . io . * ; import java . lang . Math . * ; import java . math . BigInteger ;   import static java . lang . System . * ; import static java . util . Arrays . fill ; import static java . lang . Math . log ; import static java . lang . Math . abs ; import static java . lang . Math . pow ; import static java . lang . Math . sqrt ; import static java . lang . Math . floor ; import static java . lang . Math . ceil ; import static java . lang . Math . sin ; import static java . lang . Math . cos ; import static java . lang . Math . tan ; import static java . util . Arrays . spliterator ; public class ContestMain implements Runnable { private static Reader in = new Reader ( ) ; private static StringBuilder ans = new StringBuilder ( ) ; private static long MOD = 998244353 ; private static final int N = ( int ) ( 2e5 + 7 ) ;"],"bleu":0.043639494384325864,"rouge_l":0.1636897274633124}
{"id":337,"predictions":["import java . util . Scanner ;   public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int numNum = 0 ; int num = input . nextInt ( ) ; String s1 = input . next ( ) ; int count = 0 ; for ( int i = 0 ; i < num ; i ++ ) { if ( s1 . charAt ( i ) == '0' ) { count ++ ; } } else { count += Math . abs ( s1 - s1 ) ; } System . out . println ( count ) ;   }   }"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ;   public class NewClass {   public static void main ( String [ ] args ) throws IOException { BufferedReader reader = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int len = Integer . parseInt ( reader . readLine ( ) ) ; String str = reader . readLine ( ) ; int conuterOnces = 0 , counterZeros = 0 ;  "],"bleu":0.21623303086667828,"rouge_l":0.46294203132569023}
{"id":338,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ;"],"references":["import java . io . * ; import java . util . Arrays ; import java . util . Iterator ; import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) throws IOException { PrintWriter out = new PrintWriter ( new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ) ; StreamTokenizer sc = new StreamTokenizer ( new BufferedReader ( new InputStreamReader ( System . in ) ) ) ;"],"bleu":0.024706516648690967,"rouge_l":0.29518929689723883}
{"id":339,"predictions":["import java . util . * ; import java . io . * ;   public class Main { static class FastReader { BufferedReader br ; StringTokenizer st ;   public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; }   String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   long nextLong ( ) { return Long . parseLong ( next ( ) ) ; }   double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; }   String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } }   public static void main ( String [ ] args ) { FastReader in = new FastReader ( ) ; PrintWriter out = new PrintWriter ( System . out ) ;   int n = in . nextInt ( ) ; int arr [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = in . nextInt ( ) - 1 ;   int g [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = in . nextInt ( ) ; } for ( int i = 0 ; i < n - 1 ; i ++ ) { arr [ i ] = in . nextInt ( ) ; }   int ans = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { int temp = arr [ i ] ; arr [ i ] = arr [ i ] ; ans = Math . max ( ans , g [ i ] ) ; } out . println ( ans ) ;   }  "],"references":["import java . util . * ; import java . io . * ; public class helloworld { static long fact [ ] ; static long max ; static class Reader { final private int BUFFER_SIZE = 1 << 16 ; private DataInputStream din ; private byte [ ] buffer ; private int bufferPointer , bytesRead ; public Reader ( ) { din = new DataInputStream ( System . in ) ; buffer = new byte [ BUFFER_SIZE ] ; bufferPointer = bytesRead = 0 ; } public Reader ( String file_name ) throws IOException { din = new DataInputStream ( new FileInputStream ( file_name ) ) ; buffer = new byte [ BUFFER_SIZE ] ; bufferPointer = bytesRead = 0 ; } public String readLine ( ) throws IOException { byte [ ] buf = new byte [ 64 ] ;"],"bleu":0.09241328347626582,"rouge_l":0.28893070334804044}
{"id":340,"predictions":["import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;  "],"references":["import java . io . * ; import java . util . * ;   public class task1 { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; String str = br . readLine ( ) . trim ( ) ; int k = Integer . parseInt ( br . readLine ( ) . trim ( ) ) ; int len = str . length ( ) ; int st = 0 ; int ct = 0 ; if ( len % k != 0 ) { System . out . println ( \" NO \" ) ; return ; } k = len \/ k ; while ( st < len ) {"],"bleu":0.04237270631351803,"rouge_l":0.23929728807777587}
{"id":341,"predictions":["import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;  "],"references":["import java . io . * ; import java . lang . * ; import java . util . * ;   public class Training3_C { public static void main ( String [ ] args ) throws IOException { StringTokenizer st ; BufferedReader f = new BufferedReader ( new InputStreamReader ( System . in ) ) ; st = new StringTokenizer ( f . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int m = Integer . parseInt ( st . nextToken ( ) ) ; int ta = Integer . parseInt ( st . nextToken ( ) ) ; int tb = Integer . parseInt ( st . nextToken ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; long [ ] arr = new long [ n ] ; long [ ] arr1 = new long [ m ] ; st = new StringTokenizer ( f . readLine ( ) ) ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = Long . parseLong ( st . nextToken ( ) ) ; } st = new StringTokenizer ( f . readLine ( ) ) ; for ( int i = 0 ; i < m ; i ++ ) { arr1 [ i ] = Long . parseLong ( st . nextToken ( ) ) ; }   f . close ( ) ; long start = arr [ k - 1 ] + ta ; int end = - 1 ; for ( int i = 0 ; i < m ; i ++ ) { if ( arr1 [ i ] >= start ) { end = i ; } } if ( end == - 1 ) { System . out . println ( - 1 ) ; return ; } long best = - 1 ; for ( int i = k ; i > - 1 ; i -- ) { int index = k ; if ( k >= n ) { int r = k - n ; best = Math . min ( best , arr1 [ r ] + tb ) ; } else { index = Arrays . binarySearch ( arr1 , arr [ i ] + ta ) ; if ( index < 0 ) { index = Math . abs ( index + 1 ) + ( k - i ) ; }"],"bleu":0.000048029372038883415,"rouge_l":0.10755760929044812}
{"id":342,"predictions":["import java . util . * ;   public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int arr [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { ans ++ ; } System . out . println ( ans ) ; } } }"],"references":["import java . io . BufferedReader ; import java . io . BufferedWriter ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . OutputStreamWriter ; import java . util . Arrays ; import java . util . HashSet ; import java . util . Scanner ; import java . util . Set ; import java . util . StringTokenizer ; import java . util . TreeSet ; import javafx . scene . shape . TriangleMesh ;   public class Cf { static class FastReader { BufferedReader br ; StringTokenizer st ; public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } static class BufPrint { final BufferedWriter bw ; public BufPrint ( ) { this . bw = new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ; } public void print ( Object object ) throws IOException { bw . append ( \" \" + object ) ; } public void println ( Object object ) throws IOException { print ( object ) ; bw . append ( \" \\n \" ) ; } public void close ( ) throws IOException { bw . close ( ) ; } }   public static int GCD ( int l , int r ) { int gcd = 1 ; for ( int i = 1 ; i <= l && i <= r ; ++ i ) {"],"bleu":0.031219834899839174,"rouge_l":0.21569522071404132}
{"id":343,"predictions":["import java . util . * ; import java . io . * ;   public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; }   public static long mod = 17352642619633L ;   void run ( FastScanner in , PrintWriter out ) { int n = in . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = in . nextInt ( ) ; long ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int tmp = in . nextInt ( ) ; for ( int j = 0 ; j < n ; j ++ ) { tmp += a [ j ] ; } ans = Math . min ( ans , tmp ) ; } return ans ; }   static class FastScanner { BufferedReader br ; StringTokenizer st ;   public FastScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; }   String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   long nextLong ( ) { return Long . parseLong ( next ( ) ) ; }   double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; }   String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; }   }   }"],"references":["import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collections ; import java . util . Scanner ; import java . lang . Math ; public class Account { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] sum = new int [ k ] ; int min = Integer . MAX_VALUE , res = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum [ i % k ] += sc . nextInt ( ) ; } for ( int i = 0 ; i < k ; i ++ ) { if ( sum [ i ] < min ) { res = i ; min = sum [ i ] ; } } System . out . println ( res + 1 ) ; } }"],"bleu":0.2132326343545687,"rouge_l":0.40939597315436244}
{"id":344,"predictions":["import java . util . * ; import java . io . * ; import java . math . * ;  "],"references":["import java . util . * ; import java . io . * ; public final class Example { public static void main ( String [ ] args ) { Map < Integer , List < Integer > > map = new HashMap < > ( ) ; try { BufferedReader buffer = new BufferedReader ( new InputStreamReader ( System . in ) ) ; args = buffer . readLine ( ) . split ( \" ▁ \" ) ; int n = Integer . parseInt ( args [ 0 ] ) ; int x = Integer . parseInt ( args [ 1 ] ) ; args = buffer . readLine ( ) . split ( \" ▁ \" ) ; int [ ] arr = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { arr [ i ] = Integer . parseInt ( args [ i - 1 ] ) ; } for ( int i = 1 ; i <= n ; i ++ ) { int y = arr [ i ] ; if ( ! map . containsKey ( y ) ) { map . put ( y , new ArrayList < Integer > ( ) ) ; } map . get ( y ) . add ( arr [ i ] ) ; if ( x == 0 ) { continue ; } y = y ^ x ; if ( ! map . containsKey ( y ) ) { map . put ( y , new ArrayList < Integer > ( ) ) ; } map . get ( y ) . add ( arr [ i ] ) ; } long counter = 0 ; if ( x == 0 ) { for ( int key : map . keySet ( ) ) { long m = map . get ( key ) . size ( ) ; counter += ( m * ( m - 1 ) ) \/ 2 ; } } else { for ( int key : map . keySet ( ) ) {"],"bleu":7.133818833192118e-8,"rouge_l":0.08149027757161942}
{"id":345,"predictions":["import java . io . BufferedReader ; import java . io . FileNotFoundException ; import java . io . FileReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . StringTokenizer ;    public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int x1 = Integer . parseInt ( st . nextToken ( ) ) ; int y1 = Integer . parseInt ( st . nextToken ( ) ) ; int x2 = Integer . parseInt ( st . nextToken ( ) ) ; int y1 = Integer . parseInt ( st . nextToken ( ) ) ; int x2 = Integer . parseInt ( st . nextToken ( ) ) ; int y2 = Integer . parseInt ( st . nextToken ( ) ) ; int y2 = Integer . parseInt ( st . nextToken ( ) ) ; long x3 = Long . parseLong ( st . nextToken ( ) ) ; double y1 = Double . parseDouble ( st . nextToken ( ) ) ; if ( x1 + y1 ) { System . out . println ( \" YES \" ) ; } else { System . out . println ( \" NO \" ) ; } }   }"],"references":["import java . util . * ; import java . util . Scanner ; import java . io . * ; import javax . lang . model . util . ElementScanner6 ; import static java . lang . System . out ; import java . util . Stack ; import java . util . Queue ; import java . util . LinkedList ;   public class A187 {   static int mod = ( int ) ( 1e9 + 7 ) ; static long MOD = ( long ) ( 1e9 + 7 ) ; static FastReader in = new FastReader ( ) ; static PrintWriter pr = new PrintWriter ( new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ) ; public static void main ( String args [ ] ) {   int tc = 1 ;"],"bleu":0.13584765200894586,"rouge_l":0.39705378554299425}
{"id":346,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ;   public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int nextInt ( ) { int n = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; int c = 0 ; while ( c < n ) { arr [ c ++ ] = Integer . parseInt ( st . nextToken ( ) ) ; c ++ ; if ( c == 1 ) c ++ ; else c ++ ; } System . out . println ( c ) ; } }"],"references":["import java . util . LinkedHashSet ; import java . util . Scanner ; public class A { public static int sol ( int x ) { x += 1 ; while ( x % 10 == 0 ) { x \/= 10 ; } return x ; } public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; LinkedHashSet < Integer > h = new LinkedHashSet < > ( ) ; while ( ! h . contains ( n ) ) { h . add ( n ) ; n = sol ( n ) ; }"],"bleu":0.16800871679667997,"rouge_l":0.3982440342188204}
{"id":347,"predictions":["import java . io . * ; import java . util . * ; public class Main { public static void main ( String args [ ] ) { FastReader input = new FastReader ( ) ; PrintWriter out = new PrintWriter ( System . out ) ; int T = input . nextInt ( ) ; while ( T -- > 0 ) { int n = input . nextInt ( ) ; int x = input . nextInt ( ) ; int y = input . nextInt ( ) ; int z = input . nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = input . nextInt ( ) ; b [ i ] = input . nextInt ( ) ; } int d = 0 ; for ( int i = 0 ; i < n ; i ++ ) { d += Math . max ( ( a [ i ] - a [ i ] ) ; } out . println ( d ) ; out . close ( ) ; } static class FastReader { BufferedReader br ; StringTokenizer st ; public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . io . * ;   public class Main { static long a , b , x , y , z ; static StreamTokenizer st = new StreamTokenizer ( new BufferedReader ( new InputStreamReader ( System . in ) ) ) ; static BufferedWriter bw = new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ;   public static void main ( String [ ] args ) throws IOException { st . nextToken ( ) ; a = ( int ) st . nval ; st . nextToken ( ) ; b = ( int ) st . nval ; st . nextToken ( ) ; x = ( int ) st . nval ; st . nextToken ( ) ; y = ( int ) st . nval ; st . nextToken ( ) ; z = ( int ) st . nval ; a = 2 * x + y - a ; b = 3 * z + y - b ; if ( a < 1 ) { a = 0 ; } if ( b < 1 ) { b = 0 ; } bw . write ( a + b + \" \" ) ; bw . close ( ) ; } }"],"bleu":0.16240762612456033,"rouge_l":0.3516953990181527}
{"id":348,"predictions":["import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;  "],"references":["import java . io . BufferedReader ; import java . io . BufferedWriter ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . OutputStreamWriter ; import java . io . PrintWriter ;   public class Div1_453B {   static int n ;   public static void main ( String [ ] args ) throws IOException { BufferedReader reader = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter printer = new PrintWriter ( new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ) ; n = Integer . parseInt ( reader . readLine ( ) ) ; int [ ] prev = new int [ n + 1 ] ; int [ ] cur = new int [ n + 1 ] ; prev [ 0 ] = 1 ; cur [ 1 ] = 1 ;   for ( int i = 1 ; i < n ; i ++ ) { int [ ] nxt = add ( prev , lShift ( cur ) ) ; prev = cur ; cur = nxt ; } printer . println ( n ) ; for ( int i = 0 ; i <= n ; i ++ ) { printer . print ( cur [ i ] + \" ▁ \" ) ; } printer . println ( ) ; printer . println ( n - 1 ) ; for ( int i = 0 ; i <= n - 1 ; i ++ ) { printer . print ( prev [ i ] + \" ▁ \" ) ; } printer . println ( ) ; printer . close ( ) ; }   static int [ ] add ( int [ ] a , int [ ] b ) { int [ ] ret = new int [ n + 1 ] ; for ( int i = 0 ; i <= n ; i ++ ) { ret [ i ] = ( a [ i ] + b [ i ] ) % 2 ; } return ret ; }   static int [ ] lShift ( int [ ] items ) { int [ ] ret = new int [ n + 1 ] ; for ( int i = n ; i >= 1 ; i -- ) { ret [ i ] = items [ i - 1 ] ; } return ret ; }   }"],"bleu":0.00010234489250314376,"rouge_l":0.1280642173510343}
{"id":349,"predictions":["import java . util . * ; import java . util . Scanner ; import java . io . * ; import javax . lang . model . util . ElementScanner6 ; import static java . lang . System . out ; import java . util . Stack ; import java . util . Queue ;   public class B102 {   static int mod = ( int ) ( 1e9 + 7 ) ; static long MOD = ( long ) ( 1e9 + 7 ) ; static long MOD = ( long ) ( 1e9 + 7 ) ;"],"references":["import java . util . * ; public class Solution { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; String first = sc . next ( ) . toLowerCase ( ) ; String second = sc . next ( ) . toLowerCase ( ) ; int c1 = 0 , c2 = 0 ; if ( first . compareTo ( second ) == 0 ) { System . out . println ( \"0\" ) ; } if ( first . compareTo ( second ) > 0 ) { System . out . println ( \"1\" ) ; } if ( first . compareTo ( second ) < 0 ) { System . out . println ( \" - 1\" ) ; } } }"],"bleu":0.08944455063419482,"rouge_l":0.2767916722274123}
{"id":350,"predictions":["import java . util . * ; import java . io . * ;   public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; }   void run ( FastScanner in , PrintWriter out ) {  "],"references":["import java . util . ArrayDeque ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Scanner ;   public final class PermutationGamesCF { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int arr [ ] = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int ans [ ] = new int [ n + 1 ] ; Arrays . fill ( ans , - 1 ) ; boolean vis [ ] = new boolean [ n + 1 ] ; boolean isTrue = true ; for ( int i = 0 ; i < m - 1 ; i ++ ) { int src = arr [ i ] ; int dest = arr [ i + 1 ] ; if ( dest > src ) { int val = dest - src ;"],"bleu":0.08070249233294331,"rouge_l":0.34404597211876126}
{"id":351,"predictions":["import java . io . * ; import java . util . StringTokenizer ;   public class A { public static void main ( String [ ] args ) { FastReader in = new FastReader ( ) ; PrintWriter out = new PrintWriter ( System . out ) ; int T = in . nextInt ( ) ; while ( T -- > 0 ) { long n = in . nextLong ( ) ; long m = in . nextLong ( ) ; if ( m > 0 ) { out . print ( n + \" ▁ \" ) ; } else { out . print ( m + \" ▁ \" ) ; } } out . println ( \" \" + m ) ; }   out . close ( ) ; } static class FastReader { BufferedReader br ; StringTokenizer st ;   public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; }   String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   long nextLong ( ) { return Long . parseLong ( next ( ) ) ; }   double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; }   String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } }   }"],"references":["import java . util . Scanner ; import java . util . Arrays ; import java . util . Vector ; import java . util . Collections ;    public class Problem_Solving1 { public static void main ( String [ ] args ) {"],"bleu":0.06342822629771876,"rouge_l":0.15953551626739199}
{"id":352,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ;   import java . io . PrintWriter ; import java . util . * ;   public class Main { static class FastReader { BufferedReader br ; StringTokenizer st ;   public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; }   String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   long nextLong ( ) { return Long . parseLong ( next ( ) ) ; }   String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; }   double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; }   }   public static void main ( String [ ] args ) { FastReader sc = new FastReader ( ) ; String s = sc . next ( ) ; StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < sb . length ( ) ; i ++ ) { sb . append ( sb . charAt ( i ) ) ; } System . out . println ( sb . toString ( ) ) ; }   }"],"references":["import java . util . * ; import java . io . * ; public class Solve {   static BufferedReader input = new BufferedReader ( new InputStreamReader ( System . in ) ) ; static StringTokenizer st ; static PrintWriter pr = new PrintWriter ( new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ) ; public static void main ( String [ ] args ) throws IOException { String s = readLine ( ) ; Map < Character , Integer > mp = new HashMap ( ) ; mp . put ( ' f ' , 1 ) ; mp . put ( ' e ' , 2 ) ; mp . put ( ' d ' , 3 ) ; mp . put ( ' a ' , 4 ) ; mp . put ( ' b ' , 5 ) ; mp . put ( ' c ' , 6 ) ; char col = s . charAt ( s . length ( ) - 1 ) ; long row = Long . parseLong ( s . substring ( 0 , s . length ( ) - 1 ) ) ; long ans = 0 ; ans += 1L * ( row - 1 ) \/ 4 * 16 ; if ( row % 2 == 0 ) { ans += 7 ; ans += mp . get ( col ) ; } else ans += mp . get ( col ) ; println ( ans ) ; } static String next ( ) throws IOException { while ( st == null || ! st . hasMoreTokens ( ) ) st = new StringTokenizer ( input . readLine ( ) . trim ( ) ) ; return st . nextToken ( ) ; } static long readLong ( ) throws IOException { return Long . parseLong ( next ( ) ) ; } static int readInt ( ) throws IOException { return Integer . parseInt ( next ( ) ) ; } static double readDouble ( ) throws IOException { return Double . parseDouble ( next ( ) ) ; } static char readChar ( ) throws IOException { return next ( ) . charAt ( 0 ) ; } static String readLine ( ) throws IOException { return input . readLine ( ) . trim ( ) ; } static void print ( Object b ) { System . out . print ( b ) ; } static void println ( Object b ) { System . out . println ( b ) ; } static void println ( ) { System . out . println ( ) ; } }"],"bleu":0.2734114919734732,"rouge_l":0.3844053270596143}
{"id":353,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collections ; import java . util . Comparator ; import java . util . HashSet ; import java . util . LinkedList ; import java . util . List ; import java . util . Map ; import java . util . Map ; import java . util . LinkedList ; import java . util . Map ; import java . util . PriorityQueue ; import java . util . Scanner ; import java . util . Set ; import java . util . StringTokenizer ; import java . util . TreeMap ; import java . util . TreeSet ;   "],"references":["import java . io . * ; import java . util . StringTokenizer ;"],"bleu":0.07349788470886884,"rouge_l":0.18862987630827782}
{"id":354,"predictions":["import java . io . * ; import java . util . * ;   public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; }   void run ( FastScanner in , PrintWriter out ) {  "],"references":["import java . util . * ; public class CF_357B {   public static void main ( String [ ] args ) {"],"bleu":0.2245853775771534,"rouge_l":0.4337961395191331}
{"id":355,"predictions":["import java . util . * ; import java . io . * ;   public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; }   void run ( FastScanner in , PrintWriter out ) {  "],"references":["   import java . util . * ;    public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; if ( n == 1 || n == 2 ) { System . out . println ( 1 ) ; System . out . println ( 1 ) ; } else if ( n == 3 ) { System . out . println ( 2 ) ; System . out . println ( 1 + \" ▁ \" + 3 ) ; } else if ( n == 4 ) { System . out . println ( 4 ) ; System . out . println ( 3 + \" ▁ \" + 1 + \" ▁ \" + 4 + \" ▁ \" + 2 ) ; } else { int a [ ] = new int [ n ] ; System . out . println ( n ) ; int j = 0 ; int i ; for ( i = 0 ; j < n ; i ++ ) { a [ j ] = i + 1 ; j += 2 ; } i ++ ; j = 1 ; for ( ; j < n ; i ++ ) { a [ j ] = i ; j += 2 ; } for ( int k = 0 ; k < n ; k ++ ) { System . out . print ( a [ k ] + \" ▁ \" ) ; } System . out . println ( \" \" ) ; } } }  "],"bleu":0.03583991814639822,"rouge_l":0.2651960389662668}
{"id":356,"predictions":["import java . io . * ; import java . util . * ;   public class Main { public static void main ( String [ ] args ) throws IOException {"],"references":["import java . io . * ; import java . util . * ; import java . lang . * ; import java . math . * ; import java . text . DecimalFormat ; import java . lang . reflect . Array ; import java . io . BufferedOutputStream ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . math . BigDecimal ; public class B { public static PrintWriter out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ;"],"bleu":0.046702327470507364,"rouge_l":0.27536543422184007}
{"id":357,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; String first = s . next ( ) ; StringBuffer sb = new StringBuffer ( s ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { sb . append ( s . charAt ( i ) ) ; i ++ ; } System . out . println ( sb . toString ( ) ) ; } }"],"references":["import java . io . * ; import java . util . * ;   public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ;"],"bleu":0.26749051563643883,"rouge_l":0.4628883092245672}
{"id":358,"predictions":["import java . util . * ; import java . io . * ;   public class Solution { public static void main ( String [ ] args ) { FastReader sc = new FastReader ( ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; long ans = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( arr [ i ] < k ) { ans += arr [ i ] ; } else { ans += arr [ i ] ; } } System . out . println ( ans ) ; }  "],"references":["  import java . util . * ; import java . lang . * ; import java . io . * ; import java . math . * ;    public class file {   "],"bleu":0.10499609094725156,"rouge_l":0.22867853795688847}
{"id":359,"predictions":["import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int N = scanner . nextInt ( ) ; int m = scanner . nextInt ( ) ; int ans = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { ans -= m ; } System . out . println ( ans ) ; } }"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . math . BigInteger ; import java . util . * ; public class Template { private static BufferedReader input = new BufferedReader ( new InputStreamReader ( System . in ) ) ; static String readln ( ) throws IOException { String line = input . readLine ( ) ; return line ; } public static void main ( String [ ] args ) throws IOException { solution ( ) ; } public static void test ( ) throws IOException { int t = Integer . parseInt ( readln ( ) ) ; } public static void solution ( ) throws IOException { String [ ] nm = readln ( ) . split ( \" ▁ \" ) ; int n = Integer . parseInt ( nm [ 0 ] ) ; int m = Integer . parseInt ( nm [ 1 ] ) ; int cur = 1 ; while ( m > 0 ) { if ( m >= cur ) { m -= cur ; } else { System . out . println ( m ) ; return ; } if ( cur != n ) { cur ++ ; } else { cur = 1 ; } } System . out . println ( m ) ; } }"],"bleu":0.07669599755202938,"rouge_l":0.33726923437353573}
{"id":360,"predictions":["import java . util . * ;    public class Practise {  "],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . * ;   public class Main implements Runnable { int n , m , k ; static boolean use_n_tests = false ; long [ ] res ;   void solve ( FastScanner in , PrintWriter out , int testNumber ) { n = in . nextInt ( ) ; int a , b ; a = in . nextInt ( ) ; b = in . nextInt ( ) ; Set < Integer > p = new HashSet < > ( ) ; for ( int i = 0 ; i < a ; i ++ ) { p . add ( in . nextInt ( ) ) ; } Set < Integer > q = new HashSet < > ( ) ; for ( int i = 0 ; i < b ; i ++ ) { q . add ( in . nextInt ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { if ( p . contains ( i + 1 ) ) { out . print ( \"1 ▁ \" ) ; } else if ( q . contains ( i + 1 ) ) { out . print ( \"2 ▁ \" ) ; } } out . println ( ) ; }  "],"bleu":1.7552102392745156e-10,"rouge_l":0.06954088506580994}
{"id":361,"predictions":["import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; import java . util . Scanner ;   public class Singleton_Pattern { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; }"],"references":["import java . util . Arrays ; import java . util . Scanner ;   public class A1445 {   public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int T = in . nextInt ( ) ; for ( int t = 0 ; t < T ; t ++ ) { int N = in . nextInt ( ) ; int X = in . nextInt ( ) ; int [ ] A = new int [ N ] ; for ( int n = 0 ; n < N ; n ++ ) { A [ n ] = in . nextInt ( ) ; } int [ ] B = new int [ N ] ; for ( int n = 0 ; n < N ; n ++ ) { B [ n ] = in . nextInt ( ) ; } Arrays . sort ( A ) ; Arrays . sort ( B ) ; boolean ok = true ; for ( int n = 0 ; n < N ; n ++ ) { if ( A [ n ] + B [ N - 1 - n ] > X ) { ok = false ; break ; } } System . out . println ( ok ? \" Yes \" : \" No \" ) ; } }   }"],"bleu":0.1498469146408914,"rouge_l":0.4116497957733973}
{"id":362,"predictions":["import java . util . * ; public class Euler { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } long sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += a [ i ] ; } if ( sum > 1 ) { sum ++ ; } else { sum = sum ; } } if ( sum == 1 ) { for ( int i = 1 ; i < n && sum <= n ; i ++ ) { sum += a [ i ] ; } else { sum = sum ; } } System . out . println ( sum ) ; } }"],"references":["import java . io . * ; import java . lang . reflect . Array ; import java . util . * ; import java . math . * ; import java . lang . * ; import static java . lang . Math . * ;   public class TaskB implements Runnable { ArrayList < Integer > prime ; boolean is_prime [ ] ; InputReader c ; PrintWriter w ;   long m = ( int ) 1e9 + 7 ; long MAXN = 4294967295L ;   public void run ( ) { c = new InputReader ( System . in ) ; w = new PrintWriter ( System . out ) ;   HashSet < Character > hs = new HashSet < > ( ) ; hs . add ( ' ! ' ) ; hs . add ( ' . ' ) ; hs . add ( ' ? ' ) ; int k = Integer . parseInt ( c . nextLine ( ) ) ; String s = c . nextLine ( ) ; int prev = 0 ; ArrayList < String > str = new ArrayList < > ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( hs . contains ( s . charAt ( i ) ) ) { str . add ( s . substring ( prev , i + 1 ) ) ; prev = i + 2 ; } }"],"bleu":0.15675407846077125,"rouge_l":0.3218997361477572}
{"id":363,"predictions":["import java . util . * ; import java . io . * ; import java . io . * ;   public class Main"],"references":["import java . util . * ; import java . io . * ; import java . math . BigInteger ;   public class tr0 { static PrintWriter out ; static StringBuilder sb ; static int mod = 1000000007 ; static long inf = ( long ) 1e16 ; static int n , m ; static ArrayList < Integer > [ ] ad ; static long [ ] [ ] [ ] memo ; static boolean f ; static boolean vis [ ] ; static int [ ] sub ; static char [ ] a ; static ArrayList < Long > ar ;   public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; out = new PrintWriter ( System . out ) ; long k = sc . nextLong ( ) ; long d = sc . nextLong ( ) ; long t = sc . nextLong ( ) ; if ( k % d == 0 || t <= k ) { System . out . println ( ( double ) t ) ; } else { double w = k + ( d - k % d ) \/ 2d ; double w1 = k + ( d - k % d ) ;"],"bleu":0.00022788251732381594,"rouge_l":0.15639202890106046}
{"id":364,"predictions":["import java . util . * ; public class P2 {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a [ ] = new int [ n ] ; int b [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; b [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { b [ j ] += a [ i ] ; } } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { int p = 0 ; for ( int k = 0 ; k < n ; k ++ ) { p += a [ j ] ; b [ k ] += b [ j ] ; } } int p = 0 ; for ( int i = 0 ; i < n ; i ++ ) { p += a [ i ] ; p += b [ i ] ; } int result = 0 ; for ( int i = 0 ; i < n ; i ++ ) { result += b [ i ] ; result = Math . max ( result , result ) ; } System . out . println ( result ) ; } }"],"references":["import java . io . BufferedReader ; import java . io . File ; import java . io . FileWriter ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . math . BigInteger ; import java . util . * ;   public class Main {   public static void main ( String [ ] args ) throws IOException { FastScanner input = new FastScanner ( ) ; int n = input . nextInt ( ) ; String AnsName = \" \" ; long maxAns = Long . MIN_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { long sum = 0 ; String s = input . next ( ) ; int succesHack = input . nextInt ( ) ; int unsuccess = input . nextInt ( ) ; for ( int j = 0 ; j < 5 ; j ++ ) { sum += input . nextInt ( ) ; } sum = sum + ( 100 * succesHack ) - ( 50 * unsuccess ) ; if ( sum > maxAns ) { maxAns = sum ; AnsName = s ; } } System . out . println ( AnsName ) ; }   static class FastScanner { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( \" \" ) ; String next ( ) { while ( ! st . hasMoreTokens ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } }   }"],"bleu":0.24971500200552157,"rouge_l":0.3754405122350723}
{"id":365,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ;  "],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ;"],"bleu":1.0,"rouge_l":0.9808575803981624}
{"id":366,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int h = sc . nextInt ( ) ; int w = sc . nextInt ( ) ; int area = sc . nextInt ( ) ; double min = Double . MAX_VALUE ; double min = Double . MAX_VALUE ; for ( int i = 0 ; i < w ; i ++ ) { double temp = Math . min ( Math . log ( h , w ) ) ; if ( temp % 2 == 0 ) { min = temp ; } else { min = Math . min ( min , temp \/ i ) ; } } if ( min < min ) { System . out . println ( min ) ; } else { System . out . println ( min + \" ▁ \" + max ) ; } } }"],"references":["import java . io . IOException ; import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . ArrayList ; public class BlogPhoto { public static void main ( String [ ] args ) throws IOException { PrintWriter pw = new PrintWriter ( System . out , true ) ; BufferedReader bf = new BufferedReader ( new InputStreamReader ( System . in ) ) ; String s = bf . readLine ( ) ; String [ ] sa = s . split ( \" ▁ \" ) ; long h = Integer . parseInt ( sa [ 0 ] ) ; long w = Integer . parseInt ( sa [ 1 ] ) ; long [ ] a = new long [ 30 ] ; a [ 0 ] = 1 ; for ( int i = 1 ; i < 30 ; i ++ ) a [ i ] = a [ i - 1 ] * 2 ; long max = 0 ; long xmax = 0 , ymax = 0 ; for ( int i = 29 ; i >= 0 ; i -- ) { long x = a [ i ] , y = Math . min ( w , ( x * 5 ) \/ 4 ) ; if ( x <= h ) { if ( 4 * y <= 5 * x && 4 * x <= 5 * y ) { if ( x * y > max || ( x * y == max && x > xmax ) ) { max = x * y ; xmax = x ; ymax = y ; } } } } for ( int i = 29 ; i >= 0 ; i -- ) { long y = a [ i ] , x = Math . min ( h , ( y * 5 ) \/ 4 ) ; if ( y <= w ) { if ( 16 * x <= 20 * y && 20 * y <= 25 * x ) { if ( x * y > max || ( x * y == max && x > xmax ) ) { max = x * y ; xmax = x ; ymax = y ; } } } } System . out . println ( xmax + \" ▁ \" + ymax ) ; } }"],"bleu":0.09022881991559259,"rouge_l":0.3503570319776467}
{"id":367,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . * ; import java . util . StringTokenizer ;  "],"references":["import java . util . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;   public class a { static int [ ] count , count1 , count2 ; static long [ ] arr ; static char [ ] ch , ch1 ; static long [ ] darr , farr ; static Character [ ] [ ] mat , mat1 ; static long x , h ; static long maxl ; static double dec ; static String s ; static long minl ; static int mx = ( int ) 1e6 ; static long mod = 998244353l ;"],"bleu":0.13702791590677701,"rouge_l":0.35286434036200787}
{"id":368,"predictions":["import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a [ ] = new int [ n + 1 ] ; int b [ ] = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; b [ i + 1 ] = a ^ b [ i ] ; } for ( int i = 1 ; i <= n ; i ++ ) { b [ i ] = i ^ b [ i - 1 ] ; } long ans = 0 ; for ( int i = 1 ; i <= n && i <= n ; i ++ ) { for ( int j = i + 1 ; j <= i - 1 ; j ++ ) { for ( int k = i + 1 ; k <= n ; k ++ ) { int l = b [ k ] - a [ l ] ; for ( int i = j ; i + 1 < n && k <= i + 1 ; l ++ ) { if ( i + j < n && k > i - j ) { ans = i ; } } } System . out . println ( ans ) ; } } }"],"references":["  import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Scanner ; import java . util . StringTokenizer ; import java . util . * ; public class er103b {"],"bleu":0.03821842445691295,"rouge_l":0.10870856599738625}
{"id":369,"predictions":["import java . util . * ; import java . io . * ; import java . lang . * ;   public class Ideone { public static void main ( String [ ] args ) throws java . lang . Exception {"],"references":["import java . io . * ; import java . math . * ; import java . security . * ; import java . text . * ; import java . util . * ;    public class CodeForce { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ;"],"bleu":0.41719438486774624,"rouge_l":0.5713880215725233}
{"id":370,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ;   public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader reader = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringBuffer sb = new StringBuffer ( ) ; int t = Integer . parseInt ( reader . readLine ( ) ) ; for ( int i = 0 ; i < t . length ( ) ; i ++ ) { String s1 = reader . readLine ( ) ; String s2 = reader . readLine ( ) ; int count = 0 ; int arr [ ] = new int [ 26 ] ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s1 [ i ] . charAt ( i ) == '1' ) { arr [ i ] ++ ; } else if ( s1 . charAt ( i ) == '2' ) { count ++ ; } else { arr [ i ] = 1 ; } } if ( arr [ i ] . equals ( \"1\" ) ) { arr [ i ] = 0 ; } else if ( arr [ i ] . equals ( \"2\" ) ) { count ++ ; } } System . out . println ( count ) ; } }"],"references":["import java . util . * ; import java . math . * ; public class TernaryString { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int runs = sc . nextInt ( ) ; while ( runs -- > 0 ) { String in = sc . next ( ) ; char [ ] arr = in . toCharArray ( ) ; int n = arr . length ; int [ ] last = new int [ ] { - n , - n , - n } ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < arr . length ; i ++ ) { last [ arr [ i ] - '1' ] = i ; int dist = 1 + i - Math . min ( Math . min ( last [ 0 ] , last [ 1 ] ) , last [ 2 ] ) ; min = Math . min ( min , dist ) ; } System . out . println ( min > arr . length ? 0 : min ) ; } } }"],"bleu":0.24849491753512484,"rouge_l":0.507996167735279}
{"id":371,"predictions":["import java . util . * ;   public class Check2 { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int a = 0 , b = 0 , c = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == ' a ' ) { if ( s . charAt ( i ) == ' b ' ) { c ++ ; } } else { if ( s . charAt ( i ) == ' c ' ) { if ( s . charAt ( i ) == ' c ' ) { c ++ ; } else { if ( s . charAt ( i ) == ' c ' ) { if ( s . charAt ( i ) == ' b ' ) { c ++ ; } else { c ++ ; } } } } if ( c == 0 ) { System . out . println ( \" YES \" ) ; } else { System . out . println ( \" NO \" ) ; } } }"],"references":["import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;  "],"bleu":0.03815408359572928,"rouge_l":0.19040862656072643}
{"id":372,"predictions":["import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int d = sc . nextInt ( ) ; int e = sc . nextInt ( ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int a = sc . nextInt ( ) ; sum += a ; if ( a % 2 == 0 && a % 2 == 1 ) { sum += a ; } else { sum += a ; } } if ( sum % 2 == 1 ) { sum += a ; } System . out . println ( sum ) ; } }"],"references":["import java . util . Arrays ; import java . util . Scanner ;   public class Apple {   public static void main ( String args [ ] ) {   try {   Scanner sc = new Scanner ( System . in ) ;   int n = sc . nextInt ( ) ; int count = 0 ;   int A [ ] = new int [ n ] ; int sum = 0 ; boolean flag = false ;   for ( int i = 0 ; i < n ; i ++ ) {   A [ i ] = sc . nextInt ( ) ; sum += A [ i ] ;   }   Arrays . sort ( A ) ; if ( sum % 2 == 1 ) { count = sum ; flag = true ; } else {   for ( int i = 0 ; i < n ; i ++ ) {   if ( ( sum - A [ i ] ) % 2 == 1 ) { sum = sum - A [ i ] ; count = sum ; flag = true ; break ; }   } }   if ( flag ) { System . out . println ( count ) ; } else { System . out . println ( 0 ) ; }   } catch (   Exception e ) { return ;   } } }"],"bleu":0.32546844301364153,"rouge_l":0.5348705041812131}
{"id":373,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ;"],"references":["import java . util . * ; import java . io . * ;   public class cf_7 { public static void main ( String [ ] args ) { new Solution ( ) . solve ( ) ; } }   class Solution { private int [ ] [ ] dp ;   public void solve ( ) { FastScanner fs = new FastScanner ( ) ; int m = fs . nextInt ( ) , n = fs . nextInt ( ) ; String a = fs . next ( ) ; String b = fs . next ( ) ; dp = new int [ m ] [ n ] ;"],"bleu":0.004925832769579272,"rouge_l":0.1844890905163102}
{"id":374,"predictions":["import java . util . * ; import java . io . * ;   public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; }   void run ( FastScanner in , PrintWriter out ) {  "],"references":["  import java . util . Arrays ; import java . util . HashSet ; import java . util . Scanner ; import java . util . Set ; import java . util . Vector ;   public class Javaweb {   public static void main ( String [ ] args ) {"],"bleu":0.2343645269433976,"rouge_l":0.39325564096206306}
{"id":375,"predictions":["import java . util . * ;   public class Main {   public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int t = in . nextInt ( ) ; while ( t -- > 0 ) { long a = in . nextLong ( ) ; long b = in . nextLong ( ) ; if ( ( % b == 0 ) { System . out . println ( 0 ) ; } else { System . out . println ( 0 ) ; } } }   }"],"references":["import java . util . * ; import java . io . * ; public class Divisibility { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; int t = s . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int a = s . nextInt ( ) ; int b = s . nextInt ( ) ; int c = a - ( a % b ) ; if ( a % b == 0 ) { System . out . println ( 0 ) ; } else { System . out . println ( ( c + b ) - a ) ; } } } }"],"bleu":0.49728378036803694,"rouge_l":0.7159044921084582}
{"id":376,"predictions":["  import java . util . * ;    public class Practise {  "],"references":["import java . io . * ; import java . util . * ; import java . math . * ;   public class Main { public static void main ( String [ ] args ) throws java . lang . Exception { Reader pm = new Reader ( ) ;"],"bleu":0.02384955885495908,"rouge_l":0.2790484903934127}
{"id":377,"predictions":["import java . util . * ; import java . io . * ; public class A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int b [ ] = sc . nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] >= b [ i ] ) { count += b [ i ] ; } } if ( count >= b [ 0 ] ) { System . out . println ( \" YES \" ) ; } else { System . out . println ( \" NO \" ) ; } } }"],"references":["import java . util . * ;   public class questionCF {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; int z = sc . nextInt ( ) ; int g = sc . nextInt ( ) ; int p = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; if ( g >= x ) { g = g - x ; if ( ( g + p ) >= y ) { int total = ( g + p ) - y ; if ( ( total + b ) >= z ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ; } else System . out . println ( \" NO \" ) ; } else System . out . println ( \" NO \" ) ; } }"],"bleu":0.4443773926640021,"rouge_l":0.5817078456870394}
{"id":378,"predictions":["import java . util . Scanner ;   public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int h = in . nextInt ( ) ; int w = in . nextInt ( ) ; int [ ] [ ] grid = new int [ h ] [ w ] ; for ( int i = 0 ; i < w ; i ++ ) { grid [ i ] [ 0 ] = in . nextInt ( ) ; } int row = in . nextInt ( ) ; for ( int i = 0 ; i < h ; i ++ ) { for ( int j = 0 ; j < w ; j ++ ) { grid [ i ] [ j ] = in . nextInt ( ) ; } } int ans = Integer . MAX_VALUE ; for ( int i = 0 ; i < h ; i ++ ) { for ( int j = 0 ; j < w ; j ++ ) { for ( int k = 0 ; k < grid [ i ] . length ; k ++ ) { if ( grid [ i ] [ j ] == ' ? ' ) { ans = ( ans * 2 % mod ) ; } } } System . out . println ( ans ) ; } }"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ;   public class Main { static long mod = 1000000007L ; public static void main ( String args [ ] ) { FastScanner input = new FastScanner ( ) ; int n = input . nextInt ( ) ; int m = input . nextInt ( ) ; int row [ ] = new int [ n ] ; int col [ ] = new int [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { row [ i ] = input . nextInt ( ) ; } for ( int i = 0 ; i < m ; i ++ ) { col [ i ] = input . nextInt ( ) ; } long ans = 1 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( row [ i ] == j && col [ j ] > i || ( col [ j ] == i && row [ i ] > j ) ) { System . out . println ( \"0\" ) ; return ; } else if ( col [ j ] < i && row [ i ] < j ) { ans *= 2 ; ans = ans % mod ; } } } System . out . println ( ans ) ; }        static class FastScanner {   BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( \" \" ) ;   String next ( ) { while ( ! st . hasMoreTokens ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   long nextLong ( ) {   return Long . parseLong ( next ( ) ) ; }   double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; }   String nextLine ( ) throws IOException { return br . readLine ( ) ; } }   }"],"bleu":0.25731294753404443,"rouge_l":0.45938375350140054}
{"id":379,"predictions":["import java . io . * ; import java . math . BigInteger ; import java . util . * ; import java . util . StringTokenizer ;   public class Main {   static int MOD = ( int ) Math . pow ( 10 , 9 ) + 7 ;   public static void main ( String [ ] args ) throws IOException { FastReader fr = new FastReader ( ) ; PrintWriter writer = new PrintWriter ( new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ) ;   int tc = fr . nextInt ( ) ;   int tc = fr . nextInt ( ) ;"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . ArrayList ; import java . util . Collections ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import java . util . StringTokenizer ; import java . util . TreeMap ;   public class Main implements Runnable { int n , m , k ; static boolean use_n_tests = false ;   void solve ( FastScanner in , PrintWriter out , int testNumber ) { n = in . nextInt ( ) ; k = in . nextInt ( ) ; int [ ] a = in . nextArray ( n ) ; int ans = Integer . MAX_VALUE ; List < Integer > ls = new ArrayList < > ( ) ; for ( int h = 1 ; h <= 1000 ; h ++ ) { int c = 0 ; int hk = h ; List < Integer > ls1 = new ArrayList < > ( ) ; for ( int j = 0 ; j < n ; j ++ ) { if ( a [ j ] != hk ) { c ++ ; if ( hk < a [ j ] ) { ls1 . add ( 1 ) ; } else { ls1 . add ( 0 ) ; } ls1 . add ( j + 1 ) ; ls1 . add ( Math . abs ( a [ j ] - hk ) ) ; } hk += k ; } if ( c < ans ) { ans = c ; ls = ls1 ; } } out . println ( ans ) ; for ( int i = 0 ; i < ls . size ( ) ; i += 3 ) { if ( ls . get ( i ) == 1 ) { out . print ( \" - ▁ \" ) ; } else { out . print ( \" + ▁ \" ) ; } out . println ( ls . get ( i + 1 ) + \" ▁ \" + ls . get ( i + 2 ) ) ; } }  "],"bleu":0.023015728711365358,"rouge_l":0.23981037174076433}
{"id":380,"predictions":["import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } boolean flag = false ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] < a [ i ] ) { flag = false ; } } if ( flag ) { System . out . println ( flag ) ; } } } }"],"references":["import java . util . HashSet ; import java . util . Scanner ;   public class A1325 { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int t = scanner . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int n = scanner . nextInt ( ) ; HashSet < Integer > set = new HashSet < > ( ) ; for ( int j = 0 ; j < n ; j ++ ) { int k = scanner . nextInt ( ) ; set . add ( k ) ; } System . out . println ( set . size ( ) ) ;   } } }"],"bleu":0.4224057178986806,"rouge_l":0.6067916761948319}
{"id":381,"predictions":["import java . util . * ; import java . lang . * ; import java . io . * ;   public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) {"],"references":["import java . util . * ; import java . io . * ; import java . math . BigInteger ; public class Little_Elephant_and_Interval { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter pw = new PrintWriter ( System . out ) ;   int t = 1 ;   while ( t -- > 0 ) {   String str [ ] = br . readLine ( ) . trim ( ) . split ( \" ▁ \" ) ; BigInteger a = giveme ( Long . parseLong ( str [ 1 ] ) ) ;   BigInteger b = giveme ( Long . parseLong ( str [ 0 ] ) - 1 ) ; BigInteger c = a . add ( new BigInteger ( \" - \" + b . toString ( ) ) ) ; pw . println ( c . toString ( ) ) ; } pw . flush ( ) ; }   public static BigInteger giveme ( long x ) {"],"bleu":0.00994789957802674,"rouge_l":0.22994930456258936}
{"id":382,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int m [ ] = new int [ n ] ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { String s = sc . next ( ) ; for ( int j = 0 ; j < m ; j ++ ) { if ( s . charAt ( j ) == ' D ' ) { sum += s . charAt ( j ) ; continue ; } sum += s . charAt ( j ) ; } System . out . println ( sum ) ; } } }"],"references":["import java . util . Scanner ; public class B1391 { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int T = in . nextInt ( ) ; for ( int t = 0 ; t < T ; t ++ ) { int R = in . nextInt ( ) ; int C = in . nextInt ( ) ; char [ ] [ ] A = new char [ R ] [ ] ; for ( int r = 0 ; r < R ; r ++ ) { A [ r ] = in . next ( ) . toCharArray ( ) ; } int answer = 0 ; for ( int r = 0 ; r < R ; r ++ ) { if ( A [ r ] [ C - 1 ] == ' R ' ) { answer ++ ; } } for ( int c = 0 ; c < C ; c ++ ) { if ( A [ R - 1 ] [ c ] == ' D ' ) { answer ++ ; } } System . out . println ( answer ) ; } } }"],"bleu":0.3311094400486761,"rouge_l":0.5743879472693032}
{"id":383,"predictions":["import java . util . * ;   public class CodeForces990B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int k = sc . nextInt ( ) ; int p = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] <= arr [ i ] ) { p = i ; break ; } } if ( arr [ 0 ] < arr [ i ] ) { arr [ i ] = arr [ i ] ; i ++ ; } } System . out . println ( ( arr [ 0 ] ) ;   }"],"references":["import java . util . Scanner ; public class sol { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) ; int k = in . nextInt ( ) ; String letters = \" abcdefghijklmnopqrstuvwxyz \" ; String password = \" \" ; int t = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( t < k ) password += letters . charAt ( t ) ; t ++ ; if ( t >= k ) { t = 0 ; } } System . out . println ( password ) ; } }"],"bleu":0.4078664447798432,"rouge_l":0.604096331307675}
{"id":384,"predictions":["import java . io . * ; import java . util . * ;   public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; }   void run ( FastScanner in , PrintWriter out ) {  "],"references":["import java . io . BufferedReader ; import java . io . BufferedWriter ; import java . io . FileNotFoundException ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . OutputStreamWriter ; import java . io . PrintWriter ; import java . util . Arrays ; import java . util . StringTokenizer ;   public class Main { public static void main ( String [ ] args ) throws FileNotFoundException { InputReader in = new InputReader ( System . in ) ; PrintWriter out = new PrintWriter ( new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ) ; TaskB solver = new TaskB ( ) ; solver . solve ( 1 , in , out ) ; out . flush ( ) ; out . close ( ) ; } }   class Pair implements Comparable < Pair > { int first ; int second ;   Pair ( int first , int second ) { this . first = first ; this . second = second ; }   @ Override public int compareTo ( Pair e ) { return Long . compare ( second , e . second ) ;   } }  "],"bleu":0.13405823589193702,"rouge_l":0.4435915564084436}
{"id":385,"predictions":["import java . util . * ; import java . lang . * ; import java . io . * ;   public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) {"],"references":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; for ( int i = 0 ; i <= N ; i ++ ) { for ( int j = 0 ; j < 2 * ( N - i ) ; j ++ ) { System . out . print ( \" ▁ \" ) ; } for ( int j = 0 ; j < i + 1 ; j ++ ) { System . out . print ( ( j == i ) ? j : j + \" ▁ \" ) ; } for ( int j = i - 1 ; j >= 0 ; j -- ) { System . out . print ( \" ▁ \" + j ) ; } System . out . println ( ) ; } for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < 2 * ( i + 1 ) ; j ++ ) { System . out . print ( \" ▁ \" ) ; } for ( int j = 0 ; j < N - i ; j ++ ) { System . out . print ( ( j == N - i - 1 ) ? j : j + \" ▁ \" ) ; } for ( int j = N - i - 2 ; j >= 0 ; j -- ) { System . out . print ( \" ▁ \" + j ) ; } System . out . println ( ) ; } } }"],"bleu":0.00018356346230321945,"rouge_l":0.10792821636195131}
{"id":386,"predictions":["import java . util . * ; import java . io . * ;   public class Main { public static void main ( String [ ] args ) throws IOException {"],"references":["import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;  "],"bleu":0.29460837683502766,"rouge_l":0.3637137989778535}
{"id":387,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;   public class Codeforces { static class RealScanner { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ;   String next ( ) { while ( ! st . hasMoreTokens ( ) ) try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   long nextLong ( ) { return Long . parseLong ( next ( ) ) ; }   double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; }   String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; }   public static void main ( String [ ] args ) {"],"references":["import java . io . * ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; import java . util . StringTokenizer ; public class realfast implements Runnable { private static final int INF = ( int ) 1e9 ; long in = ( long ) Math . pow ( 10 , 9 ) + 7 ; public void solve ( ) throws IOException {   int n = readInt ( ) ; int k = readInt ( ) ; String a = readString ( ) ; String b = readString ( ) ;   int i = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( a . charAt ( i ) != b . charAt ( i ) ) break ; }   long count = i ; long match [ ] = new long [ n ] ; long val = 0 ; if ( i < n ) match [ i ] ++ ;   for ( int j = i + 1 ; j < n ; j ++ ) { val = 2 * val ;   if ( a . charAt ( j ) == ' a ' ) val ++ ; val = Math . min ( val , k ) ; match [ j ] = match [ j ] + val + 1 ; } if ( i < n ) match [ i ] ++ ; val = 0 ;   for ( int j = i + 1 ; j < n ; j ++ ) { val = 2 * val ;   if ( b . charAt ( j ) == ' b ' ) val ++ ; val = Math . min ( val , k ) ; match [ j ] = match [ j ] + val + 1 ; }   for ( int j = i ; j < n ; j ++ ) count = count + Math . min ( k , match [ j ] ) ;   out . println ( count ) ; }"],"bleu":0.0833068317728217,"rouge_l":0.3247444633730835}
{"id":388,"predictions":["import java . util . Scanner ;   public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int [ ] arr = new int [ k ] ; for ( int i = 0 ; i < k ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < k ; i ++ ) { if ( a < 0 ) { arr [ i ] = - b ; } else if ( ( arr [ i ] < 0 ) { arr [ i ] = - 1 ; } else { arr [ i ] = - 1 ; } } System . out . println ( arr [ 0 ] ) ; } }"],"references":["import java . util . Scanner ; public class test43 { public static long testCase43 ( long k , long a , long b ) { long result = 0 ; if ( ( a == 0 && b == 0 ) || ( a == b && a % k == 0 ) ) result = 1 ; else if ( ( b > 0 && a > 0 ) || ( b < 0 && a < 0 ) ) { if ( ( a % k == 0 || b % k == 0 ) && k != 1 ) { result = ( b - a ) \/ k + 1 ; } else result = ( b - a + 1 ) \/ k ; } else if ( a == 0 && b > 0 ) result = ( b \/ k ) + 1 ; else if ( ( b == 0 && a < 0 ) ) result = ( - a \/ k ) + 1 ; else if ( a < 0 && b > 0 ) result = ( b \/ k ) + ( - a \/ k ) + 1 ; return result ; } public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; long k = input . nextLong ( ) ; long a = input . nextLong ( ) ; long b = input . nextLong ( ) ; System . out . println ( testCase43 ( k , a , b ) ) ; } }"],"bleu":0.19647566415091736,"rouge_l":0.3108551483420593}
{"id":389,"predictions":["import java . util . * ; import java . lang . * ; import java . io . * ; public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } public static void main ( String [ ] args ) {"],"references":["import java . io . * ; import java . util . * ; import java . math . * ; import java . lang . * ;   "],"bleu":0.10334724487856568,"rouge_l":0.207651159020911}
{"id":390,"predictions":["import java . util . * ;   public class practice { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) , m = sc . nextInt ( ) , p = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int arr1 [ ] [ ] [ ] ; int arr2 [ ] [ ] = new int [ n ] [ 2 ] ;   for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { arr2 [ i ] [ j ] = sc . nextInt ( ) ; } }   for ( int i = 0 ; i < m ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { arr1 [ i ] [ j ] = sc . nextInt ( ) ; } }   }   int ans = 0 ;   for ( int i = 0 ; i < k ; i ++ ) { for ( int k = 0 ; k < n ; k ++ ) { for ( int j = 0 ; k < m ; k ++ ) { int aa = arr2 [ i ] [ 0 ] + k ; int bb = arr1 [ j ] [ k ] + k ] ;"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;   public class FilyaAndHomework { public static void main ( String [ ] args ) { FastReader fs = new FastReader ( ) ; StringBuilder sb = new StringBuilder ( ) ; int t = fs . nextInt ( ) ; int a = - 1 , b = - 1 , c = - 1 ; for ( int tt = 0 ; tt < t ; tt ++ ) { int curr = fs . nextInt ( ) ; if ( a == - 1 ) a = curr ; else if ( b == - 1 && curr != a ) b = curr ; else if ( c == - 1 && curr != a && curr != b ) c = curr ; else if ( curr != a && curr != b && curr != c ) { System . out . println ( \" NO \" ) ; return ; } } if ( c == - 1 ) { System . out . println ( \" YES \" ) ; return ; } else { if ( ( ( a + b ) \/ 2 == c && ( a + b ) % 2 == 0 ) || ( ( a + c ) \/ 2 == b && ( a + c ) % 2 == 0 ) || ( ( b + c ) \/ 2 == a && ( b + c ) % 2 == 0 ) ) { System . out . println ( \" YES \" ) ; } else { System . out . println ( \" NO \" ) ; } } }   static class FastReader { BufferedReader br ; StringTokenizer st ; public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; }   String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   long nextLong ( ) { return Long . parseLong ( next ( ) ) ; }   double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; }   float nextFloat ( ) { return Float . parseFloat ( next ( ) ) ; } } }"],"bleu":0.09731358268356176,"rouge_l":0.2572414380644062}
{"id":391,"predictions":["import java . util . * ;    public class Practise {  "],"references":["import java . io . * ; import java . util . * ; import java . math . * ;   public class Main { static final Random random = new Random ( ) ; static PrintWriter out = new PrintWriter ( ( System . out ) ) ; static Reader sc = new Reader ( ) ;   public static void main ( String args [ ] ) throws IOException {"],"bleu":0.0035348639478083514,"rouge_l":0.22722654927192687}
{"id":392,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . Scanner ; import java . util . StringTokenizer ; import java . util . * ; import java . io . * ; public class codeforces { static class FastScanner { BufferedReader br ; StringTokenizer st ; public FastScanner ( ) {"],"references":["import java . io . * ; import java . util . Arrays ; import java . util . StringTokenizer ;   public class main897 { public static PrintWriter out = new PrintWriter ( System . out ) ; public static FastScanner enter = new FastScanner ( System . in ) ; public static int [ ] arr ;   public static void main ( String [ ] args ) throws IOException { int n = enter . nextInt ( ) ;"],"bleu":0.2833664471090247,"rouge_l":0.3791174642635177}
{"id":393,"predictions":["import java . util . * ; import java . io . * ;   public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; }   void run ( FastScanner in , PrintWriter out ) {  "],"references":["import java . util . * ;   public class CodeForces1009B { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; String s = input . nextLine ( ) ; String a = \" \" ; int i = 0 ; while ( i < s . length ( ) && s . charAt ( i ) != '2' ) { char ch = s . charAt ( i ) ; if ( ch == '0' ) System . out . print ( ch ) ; i ++ ; } for ( int j = 0 ; j < s . length ( ) ; j ++ ) { char ch = s . charAt ( j ) ; if ( ch == '1' ) { System . out . print ( ch ) ; } } while ( i < s . length ( ) ) { char ch = s . charAt ( i ) ; if ( ch != '1' ) System . out . print ( ch ) ; i ++ ; }   } }"],"bleu":0.09851998394737405,"rouge_l":0.3563319739887578}
{"id":394,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; if ( a == 5 && b == 7 ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ; } }"],"references":["import java . util . * ;   public class Main {   public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String s1 = scanner . nextLine ( ) ; String s2 = scanner . nextLine ( ) ; String s3 = scanner . nextLine ( ) ;    int v1 = 0 , v2 = 0 , v3 = 0 ; for ( int i = 0 ; i < s1 . length ( ) ; i ++ ) { if ( s1 . charAt ( i ) == ' a ' || s1 . charAt ( i ) == ' e ' || s1 . charAt ( i ) == ' i ' || s1 . charAt ( i ) == ' o ' || s1 . charAt ( i ) == ' u ' ) v1 ++ ; } for ( int i = 0 ; i < s2 . length ( ) ; i ++ ) { if ( s2 . charAt ( i ) == ' a ' || s2 . charAt ( i ) == ' e ' || s2 . charAt ( i ) == ' i ' || s2 . charAt ( i ) == ' o ' || s2 . charAt ( i ) == ' u ' ) v2 ++ ; } for ( int i = 0 ; i < s3 . length ( ) ; i ++ ) { if ( s3 . charAt ( i ) == ' a ' || s3 . charAt ( i ) == ' e ' || s3 . charAt ( i ) == ' i ' || s3 . charAt ( i ) == ' o ' || s3 . charAt ( i ) == ' u ' ) v3 ++ ; } if ( v1 == 5 && v2 == 7 && v3 == 5 ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ;   } }"],"bleu":0.033086450790061464,"rouge_l":0.3219965254577041}
{"id":395,"predictions":["import java . util . Scanner ;   public class Balloons { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int [ ] word = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { char [ ] word = scanner . next ( ) . toCharArray ( ) ; int a = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( word [ i ] == word [ j ] ) { if ( word [ i ] == word [ j ] || word [ i ] == word [ j ] ) { System . out . println ( \" YES \" ) ; return ; } } } } System . out . println ( \" NO \" ) ; } }"],"references":["  import java . util . * ;   public class Absolutezero {    public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int n = sc . nextInt ( ) ; List < String > list = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { list . add ( sc . next ( ) ) ; } int c1 = 0 ; int c2 = 0 ; char ch1 = s . charAt ( 0 ) ; char ch2 = s . charAt ( 1 ) ; for ( String st : list ) { if ( st . equals ( s ) || ( st . charAt ( 1 ) == ch1 && st . charAt ( 0 ) == ch2 ) ) { System . out . println ( \" YES \" ) ; return ; } else if ( st . charAt ( 1 ) == ch1 ) { c1 ++ ; } else if ( st . charAt ( 0 ) == ch2 ) { c2 ++ ; }   if ( c1 >= 1 && c2 >= 1 ) { System . out . println ( \" YES \" ) ; return ; } } System . out . println ( \" NO \" ) ;     }   }   "],"bleu":0.33273170053173484,"rouge_l":0.5160203623296901}
{"id":396,"predictions":["import java . util . Scanner ;   public class A1408 {   public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int T = in . nextInt ( ) ; for ( int t = 0 ; t < T ; t ++ ) { int N = in . nextInt ( ) ; int M = in . nextInt ( ) ; int sumA = 0 , sumB = 0 ; for ( int n = 0 ; n < N ; n ++ ) { sumA = in . nextInt ( ) ; } for ( int n = 0 ; n < M ; n ++ ) { sumA = sumA + N ; } System . out . println ( sumA ) ; } }   }"],"references":["import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner teclado = new Scanner ( System . in ) ; long num = teclado . nextLong ( ) ; for ( int i = 0 ; i < num ; i ++ ) { long n = teclado . nextLong ( ) ; long m = teclado . nextLong ( ) ; long suma = 0 ; boolean interruptor = false ; for ( int j = 0 ; j < n ; j ++ ) { String x = String . valueOf ( teclado . nextLong ( ) ) ; if ( x == \" \" ) { interruptor = true ; break ; } long newX = Integer . parseInt ( x ) ; suma += newX ; } if ( suma == m ) System . out . println ( \" YES \" ) ; else if ( suma != m && ! interruptor ) System . out . println ( \" NO \" ) ; }   } }"],"bleu":0.24810152643381686,"rouge_l":0.5496560410812905}
{"id":397,"predictions":["import java . util . * ; import java . io . * ; import java . math . * ;   public class Main { static FastReader sc = new FastReader ( ) ; static long mod = ( long ) 1e9 + 7 ; static long maxlong = Long . MAX_VALUE ; static long minlong = Long . MAX_VALUE ; static int minlong = ( int ) 1e9 + 7 ;"],"references":["import java . io . BufferedOutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . InputMismatchException ;   public class FlexingOP2_E {   public static void solve ( ) { long w = s . nextLong ( ) ; long m = s . nextLong ( ) ; long k = s . nextLong ( ) ; long [ ] starts = new long [ 18 ] ; starts [ 1 ] = 10L ; for ( int i = 2 ; i < 18 ; i ++ ) { starts [ i ] = starts [ i - 1 ] * 10L ; } long [ ] ends = new long [ 18 ] ; ends [ 0 ] = 9 ; for ( int i = 1 ; i < 18 ; i ++ ) { ends [ i ] = ( ends [ i - 1 ] * 10L + 9L ) ; }"],"bleu":0.058559618259958195,"rouge_l":0.3303384615384615}
{"id":398,"predictions":["import java . util . * ; import java . io . * ; public class A { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a [ ] = new int [ n + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } long ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans += a [ i ] ; } System . out . println ( ans ) ; } }"],"references":["import java . util . Scanner ;   public class Demo2 {   public static void main ( String [ ] args ) {   int n , t = 0 , sum = 0 , fin = 0 ; Scanner sc = new Scanner ( System . in ) ; n = sc . nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; sum += a [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { fin += a [ i ] ; if ( fin * 2 >= sum ) { t = i ; break ; } } System . out . println ( t + 1 ) ; }   }"],"bleu":0.6056111269854153,"rouge_l":0.7442385901491189}
{"id":399,"predictions":["   import java . util . * ; import java . lang . * ; import java . io . * ; import java . math . * ;    public class file {   "],"references":["import java . util . * ; public class asd { static Scanner s = new Scanner ( System . in ) ; public static void main ( String args [ ] ) { int t = 1 ; while ( t -- > 0 ) { solve ( ) ; } } static void solve ( ) { int n = s . nextInt ( ) ; String str = s . next ( ) ; if ( n % 2 == 0 ) { for ( int i = 0 ; i < str . length ( ) ; i ++ ) { if ( i % 2 == 0 && i != 0 ) System . out . print ( \" - \" + str . charAt ( i ) ) ; else System . out . print ( str . charAt ( i ) ) ; } } else { if ( n == 3 ) { System . out . print ( str . substring ( 0 , 3 ) ) ; return ; } System . out . print ( str . substring ( 0 , 3 ) ) ; for ( int i = 3 ; i < str . length ( ) ; i ++ ) { if ( i % 2 == 1 && i != 0 ) System . out . print ( \" - \" + str . charAt ( i ) ) ; else System . out . print ( str . charAt ( i ) ) ; } } } }"],"bleu":0.00022604422834505218,"rouge_l":0.09991328644378071}
{"id":400,"predictions":["import java . util . * ; import java . io . * ;"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . ArrayDeque ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collections ; import java . util . HashMap ; import java . util . HashSet ; import java . util . Iterator ; import java . util . PriorityQueue ; import java . util . Random ; import java . util . StringTokenizer ; import java . util . TreeMap ;   public class Solution {   public static void main ( String [ ] args ) throws IOException { FastScanner fs = new FastScanner ( ) ; PrintWriter out = new PrintWriter ( System . out ) ; int tt = 1 ; while ( tt -- > 0 ) { char [ ] s = fs . next ( ) . toCharArray ( ) ; int n = s . length ; int [ ] cnt = new int [ 26 ] ; for ( int i = 0 ; i < n ; i ++ ) cnt [ s [ i ] - ' a ' ] ++ ; for ( int i = 0 ; i < 26 ; i ++ ) { if ( cnt [ i ] >= 100 ) { for ( int j = 0 ; j < 100 ; j ++ ) { out . print ( ( char ) ( ' a ' + i ) ) ; } out . flush ( ) ; return ; } } if ( n >= 2600 ) new RuntimeException ( ) ;"],"bleu":1.5707700246011531e-9,"rouge_l":0.0613682092555332}
{"id":401,"predictions":["import java . util . Scanner ;   public class Problem374 {   public static void main ( String [ ] args ) {"],"references":["import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;  "],"bleu":0.08494722680591464,"rouge_l":0.19878957169459965}
{"id":402,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . OutputStream ; import java . io . PrintWriter ; import java . util . StringTokenizer ; import java . math . BigInteger ; public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; TaskA solver = new TaskA ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; out . close ( ) ; }   static class TaskA { public void solve ( int testNumber , InputReader in , PrintWriter out ) { int n = in . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; ++ i ) a [ i ] = in . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = in . nextInt ( ) ; } }   int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] > a [ i ] ) count ++ ; } out . println ( count % 2 ) ;   }   }"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . ArrayDeque ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collections ; import java . util . HashMap ; import java . util . HashSet ; import java . util . PriorityQueue ; import java . util . Random ; import java . util . StringTokenizer ; import java . util . TreeMap ;   public class Solution { public static void main ( String [ ] args ) throws IOException { FastScanner fs = new FastScanner ( ) ; PrintWriter out = new PrintWriter ( System . out ) ; int tt = 1 ; while ( tt -- > 0 ) { int n = fs . nextInt ( ) ; int [ ] p = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { p [ i ] = fs . nextInt ( ) ; } Ftree ft = new Ftree ( n ) ; int inv = 0 ; for ( int i = n ; i > 0 ; i -- ) { inv += ft . query ( p [ i ] ) ; ft . update ( p [ i ] , 1 ) ; } int ans = inv % 2 + ( inv - inv % 2 ) * 2 ; out . println ( ans ) ; } out . close ( ) ; } static class Ftree { int [ ] bit ; int n ; Ftree ( int n ) { this . n = n ; bit = new int [ n + 1 ] ; } void update ( int ind , int val ) { while ( ind <= n ) { bit [ ind ] += val ; ind += ind & ( - ind ) ; } } int query ( int ind ) { int sum = 0 ; while ( ind > 0 ) { sum += bit [ ind ] ; ind -= ind & ( - ind ) ; } return sum ; } } static final Random random = new Random ( ) ; static void ruffleSort ( int [ ] a ) { int n = a . length ;"],"bleu":0.28282364102945257,"rouge_l":0.43997078426002}
{"id":403,"predictions":["import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;  "],"references":["import java . io . * ; import java . util . * ; public class Asd { static PrintWriter w = new PrintWriter ( System . out ) ; static FastScanner s = new FastScanner ( ) ;   public static void main ( String [ ] args ) {"],"bleu":0.26274368688265815,"rouge_l":0.33527997251803504}
{"id":404,"predictions":["import java . util . * ; import java . io . * ; import java . math . * ;  "],"references":["import java . io . BufferedReader ; import java . io . FileReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Scanner ; import java . util . StringTokenizer ; import java . util . * ; import java . io . * ; public class codeforces { static class Student { int x , y ; Student ( int x , int y ) { this . x = x ; this . y = y ;"],"bleu":0.02932948286889321,"rouge_l":0.28970976253298153}
{"id":405,"predictions":["import java . util . Scanner ;   public class ForgotEp { public static void main ( String [ ] args ) {   Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) ; int [ ] digits = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { digits [ i ] = in . nextInt ( ) ; } in . close ( ) ; System . out . println ( digits [ 0 ] - 1 ) ; } }"],"references":["import java . util . * ;   public class zmperorjgf {   static Scanner in = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { int n = in . nextInt ( ) ; String s = in . next ( ) ; int [ ] nums = { 14 , 9 , 1 , 3 , 8 , 0 , 2 , 12 , 0 , 6 } ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans |= nums [ s . charAt ( i ) - '0' ] ; } System . out . println ( ans == 15 ? \" YES \" : \" NO \" ) ; } }"],"bleu":0.44352877382066297,"rouge_l":0.5507169410515136}
{"id":406,"predictions":["import java . util . * ; import java . lang . * ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; Map < Integer , Integer > map = new HashMap < > ( ) ; int [ ] arr = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < m ; i ++ ) { if ( map . containsKey ( arr [ i ] ) ) { map . put ( arr [ i ] , 0 ) ; } else { map . put ( arr [ i ] , map . get ( arr [ i ] ) + 1 ) ; } } for ( int i = 0 ; i < m ; i ++ ) { System . out . print ( map . get ( arr [ i ] ) + \" ▁ \" ) ; } System . out . println ( \" \" ) ; } }"],"references":["import java . util . * ; import java . io . * ;  "],"bleu":0.04732860029594631,"rouge_l":0.12708333333333333}
{"id":407,"predictions":["  import java . util . * ;    public class Main {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = sc . nextInt ( ) ; int b [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) b [ i ] = sc . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) if ( a [ i ] >= b [ i ] && count >= 0 ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ; }   }"],"references":["import java . util . HashSet ; import java . util . Scanner ;   public class A1382 { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int t = scanner . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int n = scanner . nextInt ( ) ; HashSet < Integer > listA = new HashSet < > ( ) ; int m = scanner . nextInt ( ) ; HashSet < Integer > listB = new HashSet < > ( ) ;   for ( int j = 0 ; j < n ; j ++ ) { int a = scanner . nextInt ( ) ; listA . add ( a ) ; } for ( int j = 0 ; j < m ; j ++ ) { int b = scanner . nextInt ( ) ; listB . add ( b ) ; } listA . retainAll ( listB ) ; if ( listA . size ( ) == 0 ) { System . out . println ( \" NO \" ) ;   } else { System . out . println ( \" YES \" ) ; System . out . println ( 1 + \" ▁ \" + listA . stream ( ) . findFirst ( ) . get ( ) ) ; }   } } }"],"bleu":0.3986204081653619,"rouge_l":0.5366323024054983}
{"id":408,"predictions":["import java . io . * ; import java . util . * ;   public class Main { public static void main ( String [ ] args ) throws IOException {"],"references":["import java . util . HashMap ; import java . util . Scanner ;   public class Problem_43B { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; char [ ] heading = s . nextLine ( ) . toCharArray ( ) ; char [ ] text = s . nextLine ( ) . toCharArray ( ) ;   HashMap < Character , Integer > freqOf = new HashMap < > ( ) ; for ( int i = 0 ; i < heading . length ; i ++ ) { if ( heading [ i ] == ' ▁ ' ) continue ;   freqOf . computeIfPresent ( heading [ i ] , ( K , V ) -> V + 1 ) ; freqOf . putIfAbsent ( heading [ i ] , 1 ) ; }  "],"bleu":0.013387731083479387,"rouge_l":0.2528698979591837}
{"id":409,"predictions":["import java . io . * ; import java . util . HashMap ; import java . util . StringTokenizer ;  "],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . Arrays ; import java . util . HashMap ; import java . util . Map ; import java . util . Scanner ;   public class Codeforces {   private static final Scanner sc = new Scanner ( System . in ) ; private static final BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; private static final long MOD = ( long ) ( 1e9 + 7 ) ; private static PrintWriter out = new PrintWriter ( System . out ) ;   static boolean isValid ( int [ ] a , int mid , int n ) { int c = 0 ; for ( int i = 0 ; i < a . length ; i ++ ) { int x = mid - 1 ; while ( i + 1 < a . length && x > 0 && a [ i ] == a [ i + 1 ] ) { i ++ ; x -- ; } if ( x == 0 ) { c ++ ; } } return c >= n ; } public static void solve ( int T ) throws IOException { int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; Map < Integer , Integer > mp = new HashMap < > ( ) ; int [ ] a = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { a [ i ] = sc . nextInt ( ) ; mp . put ( a [ i ] , mp . getOrDefault ( a [ i ] , 0 ) + 1 ) ; } Arrays . sort ( a ) ; int l = 1 ; int r = m \/ n ; int ans = 0 ; while ( l <= r ) { int mid = l + ( r - l ) \/ 2 ;"],"bleu":5.4796570991527424e-8,"rouge_l":0.08795962509012258}
{"id":410,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ;"],"references":["import java . util . * ; import java . io . * ; import java . math . * ; import java . lang . Math . * ;   public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int x = 0 ; if ( ( c % a == 0 ) || ( c % b == 0 ) ) { x = 1 ; } else { for ( int m = 0 ; m <= 10000 ; m ++ ) { for ( int n = 0 ; n <= 10000 ; n ++ ) { if ( m * a + n * b == c ) { x = 1 ; break ; } else if ( m * a + n * b > c ) { break ; } } if ( x == 1 ) { break ; } } } if ( x == 1 ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.000024954389291505883,"rouge_l":0.11175999083934501}
{"id":411,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; int t = s . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int n = s . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int j = 0 ; j < n ; j ++ ) { a [ j ] = s . nextInt ( ) ; } int max = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { max = Math . max ( max , a [ i ] ) ; } int ans = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { int tmp = 0 ; for ( int j = 0 ; j < n - 1 ; j ++ ) { if ( a [ j ] > max ) { ans += a [ j ] ; max = tmp ; } } } System . out . println ( ans ) ; } }"],"references":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int a [ ] = new int [ n ] ; int res [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = sc . nextInt ( ) ; int max = a [ n - 1 ] ; for ( int i = n - 1 ; i >= 0 ; i -- ) { max = max > a [ i ] ? max : a [ i ] ; if ( max > 0 ) { res [ i ] = 1 ; max -- ; } else { res [ i ] = 0 ; } } for ( int i = 0 ; i < n ; i ++ ) System . out . print ( res [ i ] + \" ▁ \" ) ; System . out . println ( ) ; } } }"],"bleu":0.5178635854670648,"rouge_l":0.6471906754333533}
{"id":412,"predictions":["import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;  "],"references":["import java . awt . Desktop ;    import java . io . BufferedReader ;    import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . net . URI ; import java . net . URISyntaxException ; import java . sql . Array ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collections ; import java . util . Comparator ; import java . util . HashMap ; import java . util . HashSet ; import java . util . Iterator ; import java . util . LinkedHashMap ; import java . util . LinkedHashSet ; import java . util . LinkedList ; import java . util . List ; import java . util . Map ; import java . util . PriorityQueue ; import java . util . Queue ; import java . util . Scanner ; import java . util . Set ; import java . util . Stack ; import java . util . StringTokenizer ; import java . util . TreeSet ; import java . util . Vector ;     public class codechef3 { static class comp implements Comparator < Integer > {   @ Override public int compare ( Integer o1 , Integer o2 ) { if ( Math . abs ( o1 ) > Math . abs ( o2 ) ) return - 1 ; else return 1 ; } }"],"bleu":0.006173024389783224,"rouge_l":0.21641864590519366}
{"id":413,"predictions":["import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . * ; import java . io . IOException ; import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . StringTokenizer ;   public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; TaskB solver = new TaskB ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; }   static class TaskB { public void solve ( int testNumber , InputReader in , PrintWriter out ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( sb . toString ( ) ) ; int base = 0 ; for ( int i = 0 ; i < sb . length ( ) ; i ++ ) { if ( Character . isLetter ( sb . charAt ( i ) ) { sb . charAt ( i ) ) ; } else { sb . append ( sb . charAt ( i ) ) ; } } for ( int i = 0 ; i < sb . length ( ) ; i ++ ) { if ( sb . charAt ( i ) == ' A ' ) { sb . append ( ( sb . charAt ( i ) ) ; } else if ( sb . charAt ( i ) == ' B ' ) { sb . append ( sb . charAt ( i ) ) ; } else { if ( sb . charAt ( 0 ) == ' A ' ) { sb . append ( sb . charAt ( i ) ) ; } else { sb . append ( sb . charAt ( i ) ) ; } }   if ( sb . length ( ) < 0 ) { sb . append ( sb . charAt ( 0 ) ) ;"],"references":["import java . util . * ;   public class CF149B { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ;   String input = in . next ( ) ; String hour = input . substring ( 0 , input . indexOf ( \" : \" ) ) ; String minute = input . substring ( input . indexOf ( \" : \" ) + 1 ) ; int minBase = 2 ; for ( int i = 0 ; i < input . length ( ) ; ++ i ) { char c = input . charAt ( i ) ; if ( c == ' : ' ) continue ; minBase = Math . max ( minBase , toNum ( c ) + 1 ) ; }"],"bleu":0.119946909933842,"rouge_l":0.36464560204953034}
{"id":414,"predictions":["  import java . util . * ;    public class Practise {  "],"references":["import java . util . Scanner ;   public class P222A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int j = n - 1 ; while ( j > 0 && a [ j ] == a [ j - 1 ] ) j -- ; System . out . println ( j < k ? j : - 1 ) ; } }"],"bleu":0.000006932820630603053,"rouge_l":0.10465116279069768}
{"id":415,"predictions":["import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . Scanner ;   public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; TaskA solver solver = new TaskA ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; }   static class TaskA { public void solve ( int testNumber , Scanner in , PrintWriter out ) {   int a = in . nextInt ( ) , b = in . nextInt ( ) , c = in . nextInt ( ) , c = in . nextInt ( ) ; out . println ( Math . max ( Math . max ( a , b ) - Math . min ( b , c ) ) ; while ( a -- ) { if ( b >= 0 ) out . println ( \" U \" ) ; else out . println ( \" D \" ) ; out . println ( \" U \" ) ; } out . flush ( ) ; }   static class InputReader { BufferedReader br ; StringTokenizer st ;   public InputReader ( InputStream in ) { br = new BufferedReader ( new InputStreamReader ( in ) ) ; st = new StringTokenizer ( br . readLine ( ) ) ; }   String next ( ) { while ( st == null || ! st . hasMoreTokens ( ) ) st = new StringTokenizer ( br . readLine ( ) ) ; return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   long nextLong ( ) { return Long . parseLong ( next ( ) ) ; }   double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; }   String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . util . Scanner ;   public class P3A { private static int ans = 0 ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . nextLine ( ) ; String d = sc . nextLine ( ) ; int n1 = s . charAt ( 0 ) - d . charAt ( 0 ) ; int n2 = s . charAt ( 1 ) - d . charAt ( 1 ) ; System . out . println ( Math . max ( Math . abs ( n1 ) , Math . abs ( n2 ) ) ) ; while ( n1 != 0 || n2 != 0 ) { String path = \" \" ; if ( n1 > 0 ) { path += \" L \" ; n1 -- ; } if ( n1 < 0 ) { path += \" R \" ; n1 ++ ; } if ( n2 > 0 ) { path += \" D \" ; n2 -- ; } if ( n2 < 0 ) { path += \" U \" ; n2 ++ ; } System . out . println ( path ) ; } }    }"],"bleu":0.14918729317804413,"rouge_l":0.3761700253276071}
{"id":416,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ;   public class A { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int t = Integer . parseInt ( br . readLine ( ) ) ; int n = Integer . parseInt ( br . readLine ( ) ) ; double ans = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { ans *= i ; } System . out . println ( ans ) ; }  "],"references":["  import java . util . Scanner ;   public class b { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; System . out . println ( scan . nextDouble ( ) * Math . pow ( 1.000000011 , scan . nextDouble ( ) ) ) ; } }"],"bleu":0.22762973506043666,"rouge_l":0.5026830203142966}
{"id":417,"predictions":["import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;  "],"references":["import java . util . * ; import java . * ;   public class Solution { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; int m = sc . nextInt ( ) ;"],"bleu":0.1564682727740129,"rouge_l":0.3289809821175135}
{"id":418,"predictions":["import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . InputMismatchException ; import java . io . IOException ; import java . io . InputStream ;   public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; TaskA solver = new TaskA ( ) ;"],"references":["import java . util . * ;   public class Solution { public static int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = 15000001 ; int prime [ ] = new int [ n + 1 ] ; for ( int i = 0 ; i <= n ; i ++ ) prime [ i ] = i ; for ( int p = 2 ; p * p <= n ; p ++ ) {"],"bleu":0.17320083802383668,"rouge_l":0.31295425395468146}
{"id":419,"predictions":["import java . util . * ; import java . io . * ; import java . math . * ;  "],"references":["import java . util . * ; import java . io . * ;   public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; }   public static long mod = 17352642619633L ;   void run ( FastScanner in , PrintWriter out ) { int N = in . nextInt ( ) ; int K = in . nextInt ( ) ;   if ( K == 1 ) { out . println ( N ) ; return ; }   List < Integer > fac = new ArrayList < > ( ) ;   for ( int p = 2 ; p * p <= N ; p ++ ) { while ( N > 1 && N % p == 0 ) { fac . add ( p ) ; N \/= p ; } } if ( N > 1 ) fac . add ( N ) ;   if ( fac . size ( ) < K ) { out . println ( - 1 ) ; return ; }   for ( int i = 0 ; i < K - 1 ; i ++ ) { out . print ( fac . get ( i ) + \" ▁ \" ) ; } long t = 1 ; for ( int i = K - 1 ; i < fac . size ( ) ; i ++ ) { t *= fac . get ( i ) ; } out . println ( t ) ;   }   static class FastScanner { BufferedReader br ; StringTokenizer st ;   public FastScanner ( InputStream in ) { br = new BufferedReader ( new InputStreamReader ( in ) ) ; st = null ; }   String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } } }"],"bleu":4.5065280478515005e-9,"rouge_l":0.0721399228183742}
{"id":420,"predictions":["import java . util . * ; import java . io . * ;   public class C {   static class FastReader { BufferedReader br ; StringTokenizer st ;   public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; }   String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   long nextLong ( ) { return Long . parseLong ( next ( ) ) ; }   double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } }   public static void main ( String [ ] args ) { FastReader sc = new FastReader ( ) ; int t = 1 ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int arr [ ] = new int [ n ] ; int arr [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; for ( int i : arr ) { System . out . print ( arr [ i ] + \" ▁ \" ) ; } System . out . println ( \" - 1\" ) ; } }  "],"references":["import java . io . * ; import java . lang . Math ; import java . util . * ;   public class Main {   public BufferedReader in ; public PrintStream out ;   public boolean log_enabled = false ; public boolean multiply_tests = true ;   public static boolean do_gen_test = false ; public void gen_test ( ) { } private class TestCase {   public Object solve ( ) { int n = readInt ( ) ; String s = readLn ( ) ; int first = - 1 ; int second = - 1 ; int c ; for ( int i = 0 ; i < n ; i ++ ) { c = s . charAt ( i ) - '0' ; if ( c % 2 == 1 ) { if ( first == - 1 ) { first = i ; } else if ( second == - 1 ) { second = i ; break ; } } } if ( second > - 1 ) { return s . substring ( first , second + 1 ) ; } else { return - 1 ; }"],"bleu":0.15495899895058568,"rouge_l":0.3622193356838003}
{"id":421,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . Scanner ; import java . util . StringTokenizer ; import java . util . * ; import java . io . * ; public class codeforces { static class Student { int x , y ; Student ( int x , int y ) { this . x = x ; this . y = y ;"],"references":["import java . io . * ; import java . util . * ; import java . math . * ;     public class Test {   static boolean [ ] visited ; static boolean [ ] [ ] [ ] graph ;   public static boolean dfs ( int a , int b , int color ) { visited [ a ] = true ; if ( a == b ) { return true ; } boolean ans = false ; for ( int i = 1 ; i <= 100 ; i ++ ) { if ( graph [ a ] [ i ] [ color ] && ! visited [ i ] ) { ans = ans || dfs ( i , b , color ) ; } } return ans ; }   public static void process ( ) throws IOException { int n = ni ( ) ; int m = ni ( ) ; graph = new boolean [ 101 ] [ 101 ] [ 101 ] ; for ( int i = 0 ; i < m ; i ++ ) { int u = ni ( ) ; int v = ni ( ) ; int color = ni ( ) ; graph [ u ] [ v ] [ color ] = true ; graph [ v ] [ u ] [ color ] = true ; } int q = ni ( ) ; while ( q -- > 0 ) { int count = 0 ; int a = ni ( ) ; int b = ni ( ) ; for ( int j = 0 ; j <= 100 ; j ++ ) { visited = new boolean [ 102 ] ; if ( dfs ( a , b , j ) ) { count ++ ; } } pn ( count ) ; }   }    static AnotherReader sc ; static PrintWriter out ; public static void main ( String [ ] args ) throws IOException { out = new PrintWriter ( System . out ) ; sc = new AnotherReader ( ) ; boolean oj = true ;  "],"bleu":0.013248942196911738,"rouge_l":0.14699752507489905}
{"id":422,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . OutputStreamWriter ; import java . io . PrintWriter ; import java . util . * ;   public class Main {   static class FastScanner { BufferedReader br ; StringTokenizer st ;   public FastScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; }   String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   long nextLong ( ) { return Long . parseLong ( next ( ) ) ; }   double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; }   String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; }   public static void main ( String [ ] args ) throws IOException { FastScanner sc = new FastScanner ( ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } if ( arr [ 0 ] % 3 != 0 ) { out . println ( ( arr [ 0 ] - 1 ) + \" ▁ \" + ( i + 1 ) ; return ; } long sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; if ( i < 0 ) { sum += ( arr [ i ] - 1 ) ; } else { sum -= arr [ i ] ; if ( i > 0 ) { sum += 3 ; } else if ( sum == 0 ) { System . out . println ( ( sum - 1 ) + \" ▁ \" + ( i + 1 ) ; } else {"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . OutputStream ; import java . io . PrintWriter ; import java . util . StringTokenizer ;    public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; TaskA solver = new TaskA ( ) ; solver . solve ( in , out ) ; out . close ( ) ; } static class TaskA { public void solve ( InputReader in , PrintWriter out ) { int n = in . nextInt ( ) - 1 ; out . print ( 1 + \" ▁ \" ) ; for ( int i = 1 ; i <= n ; i ++ ) { int j = n - i ; if ( i % 3 != 0 && j % 3 != 0 ) { out . print ( i + \" ▁ \" + j ) ; break ; } } } } static class InputReader { public BufferedReader reader ; public StringTokenizer tokenizer ; public InputReader ( InputStream stream ) { reader = new BufferedReader ( new InputStreamReader ( stream ) ) ; tokenizer = null ; } public String next ( ) { while ( tokenizer == null || ! tokenizer . hasMoreElements ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } } }"],"bleu":0.3688155632202936,"rouge_l":0.41795597206259394}
{"id":423,"predictions":["import java . util . * ;   public class Check2 { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } sc . close ( ) ; StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < n ; i ++ ) { sb . append ( arr [ i ] ) ; } System . out . println ( sb . toString ( ) ) ;   }  "],"references":["import com . sun . org . apache . bcel . internal . generic . AALOAD ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . * ; import java . util . stream . IntStream ; import javafx . util . Pair ;   public class Main {   static void sort ( int a [ ] ) { Random ran = new Random ( ) ; for ( int i = 0 ; i < a . length ; i ++ ) { int r = ran . nextInt ( a . length ) ; int temp = a [ r ] ; a [ r ] = a [ i ] ; a [ i ] = temp ; }   Arrays . sort ( a ) ; }   public static void main ( String [ ] args ) throws IOException { Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; StringBuilder ans = new StringBuilder ( ) ; String NotB = \" \" ; int zero = 0 ; int flag = 0 ; int totalZeroCount = 0 ; for ( int i = 0 ; i < n ; i ++ ) { String value = input . next ( ) ; if ( flag == 0 ) { long count = value . chars ( ) . filter ( ch -> ch == '1' ) . count ( ) ; if ( count > 1 ) { NotB += value ; flag = 1 ; continue ; } else { for ( char j = '2' ; j <= '9' ; j ++ ) { if ( value . contains ( j + \" \" ) ) { NotB += value ; flag = 1 ; break ; } } if ( flag == 1 ) continue ; } } if ( value . length ( ) == 1 && value . equals ( \"0\" ) ) { System . out . println ( \"0\" ) ; return ; } else { totalZeroCount += ( value . length ( ) - 1 ) ; } } while ( totalZeroCount -- > 0 ) { ans . append ( \"0\" ) ; } System . out . println ( ( ( NotB . isEmpty ( ) ) ? \"1\" : NotB ) + ans ) ; } }"],"bleu":0.07305953603857651,"rouge_l":0.31358312576183156}
{"id":424,"predictions":["import java . util . Scanner ; public class CodeForces { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int n = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; System . out . print ( ( n - 1 ) + \" ▁ \" ) ; for ( int j = 0 ; j < n - 1 ; j ++ ) { System . out . print ( c + \" ▁ \" ) ; } System . out . println ( ) ; } } }"],"references":["import java . util . Scanner ;   public class A1325 { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int t = scanner . nextInt ( ) ; for ( int i = t ; i > 0 ; i -- ) { int x = scanner . nextInt ( ) ; System . out . println ( 1 + \" ▁ \" + ( x - 1 ) ) ; } } }"],"bleu":0.4492571992806235,"rouge_l":0.7073542874580409}
{"id":425,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collections ; import java . util . StringTokenizer ; public class A { public static void main ( String [ ] args ) { FastScanner fs = new FastScanner ( ) ; PrintWriter out = new PrintWriter ( System . out ) ;"],"references":["import java . awt . Desktop ;    import java . io . BufferedReader ;    import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . net . URI ; import java . net . URISyntaxException ; import java . sql . Array ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collections ; import java . util . Comparator ; import java . util . HashMap ; import java . util . HashSet ; import java . util . Iterator ; import java . util . LinkedHashMap ; import java . util . LinkedHashSet ; import java . util . LinkedList ; import java . util . List ; import java . util . Map ; import java . util . PriorityQueue ; import java . util . Queue ; import java . util . Scanner ; import java . util . Set ; import java . util . Stack ; import java . util . StringTokenizer ; import java . util . TreeSet ; import java . util . Vector ;     public class codechef3 { static class comp implements Comparator < Integer > {   @ Override public int compare ( Integer o1 , Integer o2 ) { if ( Math . abs ( o1 ) > Math . abs ( o2 ) ) return - 1 ; else return 1 ; } }"],"bleu":0.08804196798521653,"rouge_l":0.33381178792500227}
{"id":426,"predictions":["import java . util . * ; import java . util . Arrays ; import java . util . Comparator ; import java . util . Scanner ;   public class Solution { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] [ ] a = new int [ n ] [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; b [ i ] = sc . nextInt ( ) ; b [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; int [ ] pos = new int [ n ] ; int [ ] pos = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; pos [ i ] = sc . nextInt ( ) ; } pos [ i ] = sc . nextInt ( ) ; } Arrays . sort ( pos ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { for ( int j = 0 ; j < n ; j ++ ) { pos [ j ] = - Math . abs ( pos [ j ] + Math . abs ( pos [ i ] - pos [ j ] ) ; } pos [ j ] = pos [ j ] ; } } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { for ( int k = 0 ; k < n ; k ++ ) { if ( pos [ i ] + Math . abs ( pos [ j ] - pos [ k ] ) { ans = ( pos [ j ] - 1 ) ; } } } System . out . println ( ans ) ; } }"],"references":["import java . util . * ; import java . io . * ;   public class Codeforces { InputStream is ; PrintWriter out ; String INPUT = \" \" ;  "],"bleu":0.02705995921753997,"rouge_l":0.09896974121846355}
{"id":427,"predictions":["import java . io . * ; import java . util . HashMap ; import java . util . Map ; import java . util . StringTokenizer ;  "],"references":["import java . util . Arrays ; import java . util . Scanner ;   public class _0695ShuffleHashing {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int cases = sc . nextInt ( ) ; sc . nextLine ( ) ; while ( cases > 0 ) { String p = sc . nextLine ( ) ; String h = sc . nextLine ( ) ; boolean flag = false ; char [ ] ori = p . toCharArray ( ) ; Arrays . sort ( ori ) ; p = new String ( ori ) ; a : { for ( int i = 0 ; i <= h . length ( ) - p . length ( ) ; i ++ ) { String temp = h . substring ( i , i + p . length ( ) ) ; char [ ] first = temp . toCharArray ( ) ; Arrays . sort ( first ) ; if ( new String ( first ) . equals ( p ) ) { flag = true ;"],"bleu":0.000981273531374182,"rouge_l":0.1338928340865074}
{"id":428,"predictions":["import java . util . * ; import java . io . * ; import java . math . * ;  "],"references":["import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;  "],"bleu":0.3359484994410173,"rouge_l":0.5524308865586273}
{"id":429,"predictions":["import java . util . * ;   public class Check2 { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 0 ) { continue ; } else if ( arr [ i ] % 3 == 0 ) { sum += arr [ i ] ; i ++ ; } } System . out . println ( sum ) ;   }   }"],"references":["import java . util . * ; import java . lang . * ; import java . io . * ;   public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) {"],"bleu":0.0701629708338282,"rouge_l":0.20689655172413798}
{"id":430,"predictions":["import java . util . * ; public class HelloWorld {   public static void main ( String [ ] args ) {"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Scanner ; import java . util . StringTokenizer ;   public class worldCup1 { static class FastReader { BufferedReader br ; StringTokenizer st ;   public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; }   String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   long nextLong ( ) { return Long . parseLong ( next ( ) ) ; }   double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; }   String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } }   public static void main ( String [ ] args ) { FastReader sc = new FastReader ( ) ; int n = sc . nextInt ( ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int i = 0 ; while ( a != b ) { a = ( int ) Math . ceil ( a \/ 2.0 ) ; b = ( int ) Math . ceil ( b \/ 2.0 ) ; i ++ ; } if ( Math . pow ( 2 , i ) == n ) { System . out . println ( \" Final ! \" ) ; } else { System . out . println ( i ) ; } } }"],"bleu":3.1383785007424275e-7,"rouge_l":0.09670113988072772}
{"id":431,"predictions":["import java . util . Scanner ;   public class A1348 { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int t = scanner . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int n = scanner . nextInt ( ) ; if ( n % 2 == 0 ) { System . out . println ( n \/ 2 ) ; } else { System . out . println ( n \/ 2 + 1 ) ; } } } }"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ;   public class CF1371A { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int t = Integer . parseInt ( br . readLine ( ) ) ; while ( t -- > 0 ) { System . out . println ( ( Integer . parseInt ( br . readLine ( ) ) + 1 ) \/ 2 ) ; } } }"],"bleu":0.3575175865416049,"rouge_l":0.5447281842393858}
{"id":432,"predictions":["import java . io . BufferedReader ; import java . io . File ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . StringTokenizer ;  "],"references":["import java . util . * ; import java . io . * ;   public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; String a [ ] = new String [ 8 ] ; for ( int i = 0 ; i < 8 ; i ++ ) { a [ i ] = input . next ( ) ; } boolean check = true ; int whitemin = 100 ; int blackmin = 100 ; for ( int i = 0 ; i < 8 ; i ++ ) { for ( int j = 0 ; j < 8 ; j ++ ) { check = true ; if ( a [ i ] . charAt ( j ) == ' B ' ) { for ( int k = i + 1 ; k < 8 ; k ++ ) { if ( a [ k ] . charAt ( j ) == ' W ' ) check = false ; } if ( check ) { blackmin = Math . min ( blackmin , 7 - i ) ; } } else if ( a [ i ] . charAt ( j ) == ' W ' ) { check = true ; if ( a [ i ] . charAt ( j ) == ' W ' ) { for ( int k = 0 ; k < i ; k ++ ) { if ( a [ k ] . charAt ( j ) == ' B ' ) check = false ; } if ( check ) { whitemin = Math . min ( whitemin , i ) ; } } } } } if ( whitemin <= blackmin ) System . out . println ( \" A \" ) ; else System . out . println ( \" B \" ) ; } }"],"bleu":0.0002717852936824685,"rouge_l":0.10829795445773832}
{"id":433,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int T = sc . nextInt ( ) ; while ( T -- > 0 ) { long n = sc . nextLong ( ) ; long m = sc . nextLong ( ) ; for ( int i = 1 ; i <= n ; i ++ ) { if ( m % i == 0 ) { break ; } } } System . out . println ( n ) ; } }"],"references":["import java . util . * ;    public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; long k = sc . nextLong ( ) ; long sz = 1 ;"],"bleu":0.44663214807371204,"rouge_l":0.6803451178451179}
{"id":434,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ;"],"references":["import java . util . Arrays ; import java . util . Scanner ;   public class NewYear { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int testcases = sc . nextInt ( ) ; sc . nextLine ( ) ;   for ( int i = 0 ; i < testcases ; i ++ ) { String array = sc . nextLine ( ) ; int [ ] stream = Arrays . stream ( array . split ( \" ▁ \" ) ) . mapToInt ( Integer :: parseInt ) . toArray ( ) ; System . out . println ( output ( stream ) ) ; } }   private static int output ( int [ ] stream ) { int out = 0 ; int hours = 23 - stream [ 0 ] ; int minutes = 60 - stream [ 1 ] ; out += minutes ; out += 60 * hours ; return out ;"],"bleu":0.0001874786395776552,"rouge_l":0.1161904761904762}
{"id":435,"predictions":["import java . util . ArrayList ; import java . util . Arrays ; import java . util . Scanner ;   public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int p = sc . nextInt ( ) ; int q = sc . nextInt ( ) ; int area = sc . nextInt ( ) ; int area = b * ( a - p - 1 ) ; int area1 = b * ( b - p - 1 ) ; int area2 = b * ( a - p - 1 ) ; int area3 = b * ( a - p - 1 ) ; int max4 = Math . max ( area , area ) ; System . out . println ( maxArea , area ) ; } }"],"references":["import java . util . * ; public class P2 {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; int f = Math . max ( x , a - x - 1 ) ; int sum = f * b ; int s = Math . max ( y , b - y - 1 ) ; int sum2 = s * a ; int r = Math . max ( sum2 , sum ) ; System . out . println ( r ) ; }   } }"],"bleu":0.5254751507844997,"rouge_l":0.7181525457838599}
{"id":436,"predictions":["import java . util . Scanner ;   public class Main {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int a [ ] [ ] = new int [ n ] [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] [ 0 ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < m ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } boolean check = true ; for ( int i = 0 ; i < m ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { if ( a [ i ] [ j ] == ' B ' ) { check = false ; break ; } } } if ( check ) { for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( a [ i ] [ j ] == 0 && a [ i ] [ j ] == ' B ' ) {"],"references":["import java . io . * ; import java . util . * ; import java . lang . * ;   public class B { public static char [ ] [ ] board ; public static void main ( String [ ] args ) { FastReader in = new FastReader ( ) ; PrintWriter out = new PrintWriter ( System . out ) ; int n = in . nextInt ( ) , m = in . nextInt ( ) ; board = new char [ n ] [ m ] ; int [ ] [ ] cost = new int [ n ] [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { board [ i ] = in . next ( ) . toCharArray ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( board [ i ] [ j ] != ' B ' ) continue ; for ( int l = i ; l < n ; l ++ ) { for ( int r = 0 ; r < m ; r ++ ) { if ( i == l && j == r ) continue ; if ( board [ l ] [ r ] != ' B ' ) continue ; if ( ! check ( i , j , l , r ) ) {"],"bleu":0.469128072012325,"rouge_l":0.6148115687992989}
{"id":437,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . Scanner ; import java . util . StringTokenizer ; import java . util . * ; import java . io . * ; public class codeforces { static class Student { int x , y ; Student ( int x , int y ) { this . x = x ; this . y = y ;"],"references":["import java . util . * ;   public class problem967A { private static Scanner in = new Scanner ( System . in ) ; private static int n = 0 , s = 0 ; private static ArrayList < Time > schedule = new ArrayList < Time > ( ) ; public static void main ( String [ ] args ) { n = in . nextInt ( ) ; s = in . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { Time time = new Time ( in . nextInt ( ) , in . nextInt ( ) ) ; schedule . add ( time ) ; } schedule . add ( new Time ( 0 , 0 ) ) ; Collections . sort ( schedule , new SortByTime ( ) ) ;"],"bleu":0.0764539298443771,"rouge_l":0.19504396482813746}
{"id":438,"predictions":["import java . util . * ;   public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String str = sc . nextLine ( ) ; String str = sc . nextLine ( ) ; int j = 0 ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { if ( str . charAt ( i ) == ' ^ ' ) { j = str . substring ( i , i + 1 ) ; } else { j = str . substring ( j , i + 1 ) ; } } StringBuilder sb = new StringBuilder ( str ) ; int i = 0 ; while ( i < str . length ( ) && j < str . length ( ) ) { if ( str . charAt ( i ) == ' || str . charAt ( j ) == ' ) { sb . append ( \" \/ \" ) ; i ++ ; } else { sb . append ( str . charAt ( 0 ) == ' . ' ) ; i ++ ; } else { sb . append ( str . charAt ( i ) ) ; j ++ ; } } if ( sb . charAt ( i ) == ' || sb . charAt ( j ) == ' ) { sb . deleteCharAt ( j ) ; i = j ; break ; } else if ( sb . charAt ( i ) == ' . ' ) { sb . append ( \" \/ \" ) ; } else { sb . append ( \" \\n \" ) ; } } System . out . println ( sb ) ; }   }"],"references":["import java . util . * ;   public class Main {   public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; StringBuilder s = new StringBuilder ( input . next ( ) ) ; if ( s . indexOf ( \" http \" ) == 0 ) { s . insert ( s . indexOf ( \" http \" ) + 4 , \" : \/\/ \" ) ; } else { s . insert ( s . indexOf ( \" ftp \" ) + 3 , \" : \/\/ \" ) ; } int ruindex = - 1 ; for ( int i = 1 ; i < s . length ( ) - 1 ; i ++ ) { if ( s . charAt ( i ) == ' r ' && s . charAt ( i + 1 ) == ' u ' && s . charAt ( i - 1 ) != ' \/ ' ) { ruindex = i ; break ; } }"],"bleu":0.25731450308328296,"rouge_l":0.4562958858567668}
{"id":439,"predictions":["import java . util . * ; import java . io . * ;   public class CodeForces { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int t = in . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { String s = in . next ( ) ;"],"references":["import java . util . Arrays ; import java . util . Locale ; import java . util . Scanner ;   public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { long l = sc . nextLong ( ) ; String s = sc . next ( ) ; try { int j = 0 ; for ( ; s . charAt ( j ) != '8' ; j ++ ) { } if ( s . length ( ) - j < 11 ) { System . out . println ( \" NO \" ) ; } else { System . out . println ( \" YES \" ) ; }   } catch ( Exception Arrayindexoutofbounds ) { System . out . println ( \" NO \" ) ; continue ; }    } } }"],"bleu":0.16430376307145514,"rouge_l":0.4780564263322884}
{"id":440,"predictions":["import java . util . * ; public class P2 { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int arr [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } String s = sc . next ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) s -- ; } System . out . print ( s + \" ▁ \" ) ; System . out . println ( ) ; } }"],"references":["import java . util . Scanner ;   public class AdjacentReplacement {   public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ;   int n = in . nextInt ( ) ;   int a [ ] = new int [ n ] ;   for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = in . nextInt ( ) ; if ( a [ i ] % 2 == 0 ) { a [ i ] -- ; }   System . out . print ( a [ i ] + \" ▁ \" ) ; }   }   }"],"bleu":0.5789103918200144,"rouge_l":0.7501863354037267}
{"id":441,"predictions":["import java . io . * ; import java . util . * ;   public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; }   void run ( FastScanner in , PrintWriter out ) {  "],"references":["import java . util . * ;   import java . io . * ;   public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; }   public static long mod = 17352642619633L ;   void run ( FastScanner in , PrintWriter out ) {  "],"bleu":0.9010099253002931,"rouge_l":0.919041568342712}
{"id":442,"predictions":["import java . util . * ;   public class CodeForces { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int n = sc . nextInt ( ) ; String s [ ] = new String [ n ] ; for ( int j = 0 ; j < n ; j ++ ) { s [ i ] = sc . next ( ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s [ i ] . equals ( s [ j ] ) && s . charAt ( i ) == s . charAt ( i ) ) { count ++ ; } } if ( count == s ) { System . out . println ( \" YES \" ) ; } else { System . out . println ( \" NO \" ) ; } } }   }"],"references":["import java . util . * ; import java . io . * ;   public class threestrings { public static void main ( String [ ] args ) { FastReader in = new FastReader ( ) ; PrintWriter out = new PrintWriter ( System . out ) ; int T = in . nextInt ( ) ; for ( int tt = 0 ; tt < T ; tt ++ ) { String a = in . nextLine ( ) ; String b = in . nextLine ( ) ; String c = in . nextLine ( ) ; boolean swappable = true ; for ( int i = 0 ; i < a . length ( ) ; i ++ ) { if ( a . charAt ( i ) == c . charAt ( i ) || b . charAt ( i ) == c . charAt ( i ) ) swappable = true ; else { swappable = false ; break ; }   } if ( swappable ) out . println ( \" YES \" ) ; else out . println ( \" NO \" ) ;   } out . close ( ) ; }   static class FastReader { BufferedReader br ; StringTokenizer st ;   public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; }   String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   long nextLong ( ) { return Long . parseLong ( next ( ) ) ; }   double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; }   String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"bleu":0.19094753688760097,"rouge_l":0.4107305082028536}
{"id":443,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . ArrayList ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . HashSet ; import java . util . List ; import java . util . Map ; import java . util . StringTokenizer ;   public class Main implements Runnable {   int n = ( int ) 1e9 ;  "],"references":["from collections import defaultdictfrom collections import dequen , m = list ( map ( int , input ( ) . split ( ) ) ) d = defaultdict ( list ) for i in range ( m ) : x , y = map ( int , input ( ) . split ( ) ) d [ x ] . append ( y ) d [ y ] . append ( x ) c = { } f = 0 visited = [ 0 ] * ( n + 1 ) for i in range ( 1 , n + 1 ) : if visited [ i ] == 0 : q = deque ( ) q . append ( i ) visited [ i ] = 1 while q : j = q . popleft ( ) co = c . get ( j , 0 ) if co == 0 : c [ j ] = ' a ' co = ' a ' for k in d [ j ] : if visited [ k ] == 0 : coo = c . get ( k , 0 ) if coo == 0 : c [ k ] = ' a ' if co == ' b ' else ' b ' q . append ( k ) visited [ k ] = 1f or i in d : co = c [ i ] for j in d [ i ] : coo = c [ j ] if co == coo : f = 1 break if f : breakif f : print ( - 1 ) else : a , b = [ ] , [ ] for i in range ( 1 , n + 1 ) : co = c . get ( i , 0 ) if co == ' a ' : a . append ( i ) elif co == ' b ' : b . append ( i ) print ( len ( a ) ) print ( * a ) print ( len ( b ) ) print ( * b )"],"bleu":0.0015642871976180484,"rouge_l":0.06450760079312624}
{"id":444,"predictions":["import java . util . Scanner ;   public class _0721A {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int x1 = sc . nextInt ( ) ; int y1 = sc . nextInt ( ) ; int x2 = sc . nextInt ( ) ; int y2 = sc . nextInt ( ) ; int c3 = sc . nextInt ( ) ; int d3 = Math . abs ( x1 - x2 ) ; d3 = Math . abs ( y1 - y1 ) ; System . out . println ( d1 - d2 ) ;   }   }  "],"references":["import java . util . * ; import java . lang . * ; import java . io . * ; public class Main {    public static void main ( String [ ] args ) throws java . lang . Exception { Scanner sc = new Scanner ( System . in ) ; int x1 = sc . nextInt ( ) ; int y1 = sc . nextInt ( ) ; int x2 = sc . nextInt ( ) ; int y2 = sc . nextInt ( ) ; if ( ( x1 != x2 ) && ( y1 != y2 ) && Math . abs ( x1 - x2 ) != Math . abs ( y1 - y2 ) ) { System . out . println ( \" - 1\" ) ; } else if ( x1 == x2 ) { System . out . println ( ( x1 + Math . abs ( y2 - y1 ) ) + \" ▁ \" + y1 + \" ▁ \" + ( x2 + Math . abs ( y2 - y1 ) ) + \" ▁ \" + y2 ) ; } else if ( y1 == y2 ) { System . out . println ( x1 + \" ▁ \" + ( y1 + Math . abs ( x2 - x1 ) ) + \" ▁ \" + x2 + \" ▁ \" + ( y2 + Math . abs ( x2 - x1 ) ) ) ; } else { System . out . println ( x1 + \" ▁ \" + y2 + \" ▁ \" + x2 + \" ▁ \" + y1 ) ; } } }"],"bleu":0.16819153705918685,"rouge_l":0.454151789105827}
{"id":445,"predictions":["import java . io . * ; import java . util . StringTokenizer ;"],"references":["import java . util . * ; import java . lang . * ; import java . io . * ; public class African_Crossword {   public static void main ( String [ ] args ) throws java . lang . Exception { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) , m = Integer . parseInt ( st . nextToken ( ) ) ; char c [ ] [ ] = new char [ n ] [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { String s = br . readLine ( ) ; for ( int j = 0 ; j < m ; j ++ ) { c [ i ] [ j ] = s . charAt ( j ) ; } } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { boolean ok = false ; for ( int k = 0 ; k < m ; k ++ ) { if ( c [ i ] [ j ] == c [ i ] [ k ] && j != k ) { ok = true ; break ; } } if ( ! ok ) { for ( int k = 0 ; k < n ; k ++ ) { if ( c [ i ] [ j ] == c [ k ] [ j ] && i != k ) { ok = true ; break ; } } } if ( ! ok ) System . out . print ( c [ i ] [ j ] ) ; } }   }   }"],"bleu":1.7208640037738674e-10,"rouge_l":0.059852820932134086}
{"id":446,"predictions":["import java . io . * ; import java . lang . * ; import java . util . * ; public class Task { public static void main ( String [ ] args ) throws IOException { FastScanner fs = new FastScanner ( ) ; PrintWriter out = new PrintWriter ( System . out ) ;"],"references":["  import java . util . ArrayList ; import java . util . Scanner ;   public class B {   public static void main ( String [ ] args ) {   Scanner nik = new Scanner ( System . in ) ; int n = nik . nextInt ( ) ; int m = nik . nextInt ( ) ;   int [ ] a = new int [ n + 2 ] ;   int max = 0 ;   for ( int i = 1 ; i <= n ; i ++ ) { a [ i ] = nik . nextInt ( ) ; } a [ 0 ] = 0 ; a [ n + 1 ] = m ;  "],"bleu":0.13191569274990145,"rouge_l":0.3661830915457729}
{"id":447,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . StringTokenizer ;   public class Main { public static void main ( String [ ] args ) { FastScanner sc = new FastScanner ( ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; char [ ] s = sc . next ( ) . toCharArray ( ) ; for ( int i = 0 ; i < n ; i ++ ) { s [ i ] = sc . nextInt ( ) ; } if ( s [ 0 ] == ' W ' ) { if ( s [ i ] == ' U ' ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ; } } else {"],"references":["import java . io . * ; import java . math . * ; import java . security . * ; import java . text . * ; import java . util . * ;    public class CodeForce {   static boolean flag = false ; public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringBuilder sb = new StringBuilder ( ) ; int n = Integer . parseInt ( br . readLine ( ) ) ; mp [ ] arr = new mp [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { String [ ] sr = br . readLine ( ) . split ( \" ▁ \" ) ; int x = Integer . parseInt ( sr [ 0 ] ) ; arr [ i ] = new mp ( x , sr [ 1 ] ) ; } long total = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( ( total == 0 ) && ( ! arr [ i ] . sr . equals ( \" South \" ) ) ) { System . out . println ( \" NO \" ) ; return ; } if ( ( total == 20000 ) && ( ! arr [ i ] . sr . equals ( \" North \" ) ) ) { System . out . println ( \" NO \" ) ; return ; } if ( arr [ i ] . sr . equals ( \" North \" ) ) { total -= arr [ i ] . dist ; if ( total < 0 ) { System . out . println ( \" NO \" ) ; return ; } } if ( arr [ i ] . sr . equals ( \" South \" ) ) { total += arr [ i ] . dist ; ; if ( total > 20000 ) { System . out . println ( \" NO \" ) ; return ; } } } if ( total != 0 ) { System . out . println ( \" NO \" ) ; return ; } System . out . println ( \" YES \" ) ;    } } class mp { int dist ; String sr ; mp ( int a , String s ) { dist = a ; sr = s ; } }  "],"bleu":0.14409046166804138,"rouge_l":0.3878052304580263}
{"id":448,"predictions":["import java . util . Scanner ;   public class Main {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int a [ ] = new int [ n ] ; int b [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { if ( ( m % 2 == 0 ) { System . out . println ( - 1 ) ; return ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( m [ i ] > 0 ) { System . out . println ( i ) ; return ; } } for ( int i = 0 ; i < m ; i ++ ) { if ( m [ i ] > 1 ) { System . out . println ( 0 ) ; return ; } } System . out . println ( m ) ; }   }"],"references":["import java . util . Scanner ;   public class MidBalls { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ;   int n = scanner . nextInt ( ) ; int m = scanner . nextInt ( ) ;   StringBuilder ans = new StringBuilder ( ) ;   if ( m % 2 != 0 ) { while ( n > 0 ) { int left = ( m + 1 ) \/ 2 - 1 ; int right = left + 1 ;   while ( ( left > 0 || right <= m ) && n > 0 ) { ans . append ( right + \" \\n \" ) ; right ++ ; n -- ;   if ( left == 0 || n == 0 ) continue ; ans . append ( left + \" \\n \" ) ; left -- ; n -- ; } } } else { while ( n > 0 ) { int left = m \/ 2 ; int right = left + 1 ;   while ( ( left > 0 || right <= m ) && n > 0 ) { ans . append ( left + \" \\n \" ) ; left -- ; n -- ;   if ( right > m || n == 0 ) continue ; ans . append ( right + \" \\n \" ) ; right ++ ; n -- ; } } } System . out . println ( ans ) ; } }"],"bleu":0.289408832234792,"rouge_l":0.46648843571250925}
{"id":449,"predictions":["import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;  "],"references":["import java . util . * ; public class Solution { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long n = sc . nextLong ( ) ; long x = sc . nextLong ( ) ; long y = sc . nextLong ( ) ; long p = ( long ) Math . ceil ( ( double ) n * ( double ) ( y ) \/ ( double ) 100 ) ; if ( p - x <= 0 ) System . out . print ( 0 ) ; else System . out . print ( p - x ) ; } }"],"bleu":0.032128454439072175,"rouge_l":0.2390371337936182}
{"id":450,"predictions":["import java . util . * ; import java . io . * ;"],"references":["import java . lang . * ; import java . util . * ; import java . util . stream . Collectors ; import java . io . * ;   public class Equalize { static public class Pair { int i ; int j ; public Pair ( int i , int j ) { this . i = i ; this . j = j ; } } public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] ar = new int [ n ] ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ar [ i ] = sc . nextInt ( ) ; sum += ar [ i ] ; } if ( ar [ 0 ] == 0 || sum < n - 1 ) System . out . println ( - 1 ) ; else { List < Pair > list = new ArrayList < Pair > ( ) ; int i = 0 , j = 1 ; while ( i < n ) { while ( j < n && ar [ j ] == 0 ) j ++ ; if ( j == n ) { i = j ; break ; } list . add ( new Pair ( i + 1 , j + 1 ) ) ; ar [ i ] -- ; if ( ar [ i ] == 0 ) ar [ i ] = 1001 ; i = j ; j += 1 ; } i = 1 ; j = 0 ;"],"bleu":2.213764385569988e-9,"rouge_l":0.07810499359795134}
{"id":451,"predictions":["import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . * ; import java . io . IOException ; import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . InputStream ;  "],"references":["import java . util . * ; public class Solution { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; int n = s . nextInt ( ) ; int k = s . nextInt ( ) ; s . nextLine ( ) ; String s1 = s . nextLine ( ) ; int [ ] last = new int [ 26 ] ; boolean c [ ] = new boolean [ 26 ] ;"],"bleu":0.0866288861688793,"rouge_l":0.217491610738255}
{"id":452,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; double A = sc . nextDouble ( ) ; double B = sc . nextDouble ( ) ; System . out . println ( ( ( A * B ) + \" ▁ \" ) ) ; } }"],"references":["import java . util . * ;    public class StackBracket { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int h = sc . nextInt ( ) ; int l = sc . nextInt ( ) ; double ans = ( Math . pow ( l , 2 ) - Math . pow ( h , 2 ) ) \/ ( 2 * h ) ; System . out . println ( ans ) ;    }    public static int getAns ( int i , int [ ] e , int [ ] dp ) { if ( i < 0 ) { return Integer . MIN_VALUE ; } if ( i == 0 && e [ i ] == 1 ) { return 1 ; } if ( dp [ i ] != - 1 ) { return dp [ i ] ; }   dp [ i ] = Math . max ( 1 + getAns ( i - ( e [ i ] ) , e , dp ) , getAns ( i - 1 , e , dp ) ) ; return dp [ i ] ;    }    public static long power ( long a , long b , long c ) { long ans = 1 ; while ( b != 0 ) { if ( b % 2 == 1 ) { ans = ans * a ; ans %= c ; } a = a * a ; a %= c ; b \/= 2 ; } return ans ; }   public static long power1 ( long a , long b , long c ) { long ans = 1 ; while ( b != 0 ) { if ( b % 2 == 1 ) { ans = multiply ( ans , a , c ) ; } a = multiply ( a , a , c ) ; b \/= 2 ;   } return ans ;   }   public static long multiply ( long a , long b , long c ) { long res = 0 ; a %= c ; while ( b > 0 ) { if ( b % 2 == 1 ) { res = ( res + a ) % c ; } a = ( a + a ) % c ; b \/= 2 ; }   return res % c ;   }   public static long totient ( long n ) { long result = n ; for ( long i = 2 ; i * i <= n ; i ++ ) { if ( n % i == 0 ) {"],"bleu":0.0033249780576889466,"rouge_l":0.198180636777128}
{"id":453,"predictions":["import java . util . * ; import java . io . * ;   public class Main { public static void main ( String [ ] args ) { FastScanner sc = new FastScanner ( ) ; String a = sc . next ( ) ; int b = sc . next ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; String s = \" \" ; for ( int i = 0 ; i < a . length ( ) ; i ++ ) { if ( s . charAt ( i ) == '0' || s . charAt ( i ) == '9' || s . charAt ( i ) == '9' || s . charAt ( i ) == '9' ) { c = i + 1 ; break ; } } if ( c . charAt ( i ) == '0' || s . charAt ( i ) == '9' ) { c = Math . max ( c , ( c ) ) ; } if ( c < 10 ) { if ( c . charAt ( i ) == '9' ) { d = Math . max ( d , c ) ; c = Math . max ( c , d ) ; } } System . out . println ( c ) ; }   }"],"references":["import java . util . * ; import java . util . stream . IntStream ;     public class Main { static boolean isvalid ( String s ) { if ( s . equals ( \"0\" ) || s . equals ( \"1000000\" ) ) return true ; if ( s . charAt ( 0 ) == '0' || s . length ( ) > 6 ) return false ; return true ; }   public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; String s = in . next ( ) ;   int mx = - 1 ; for ( int i = 1 ; i < s . length ( ) ; i ++ ) for ( int j = i + 1 ; j < s . length ( ) ; j ++ ) { String s1 = s . substring ( 0 , i ) ; String s2 = s . substring ( i , j ) ; String s3 = s . substring ( j ) ;   if ( isvalid ( s1 ) && isvalid ( s2 ) && isvalid ( s3 ) ) { int a = Integer . parseInt ( s1 ) ; int b = Integer . parseInt ( s2 ) ; int c = Integer . parseInt ( s3 ) ;   mx = Math . max ( mx , a + b + c ) ; } } System . out . println ( mx ) ; } }  "],"bleu":0.36375296552870834,"rouge_l":0.46862491930277606}
{"id":454,"predictions":["import java . util . * ; import java . io . * ;   public class CFA { BufferedReader br ; PrintWriter out ; StringTokenizer st ; boolean eof ; private static final long MOD = 1000L * 1000L * 1000L + 7 ; private static final int [ ] dx = { 0 , - 1 , 0 , 1 } ; private static final int [ ] dx = { 1 , 0 , - 1 , 0 } ; private static final String yes = \" YES \" ; private static final String no = \" NO \" ;   void solve ( ) { int T = nextInt ( ) ;"],"references":["import java . awt . Desktop ;    import java . io . BufferedReader ;    import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . net . URI ; import java . net . URISyntaxException ; import java . sql . Array ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collections ; import java . util . Comparator ; import java . util . HashMap ; import java . util . HashSet ; import java . util . Iterator ; import java . util . LinkedHashMap ; import java . util . LinkedHashSet ; import java . util . LinkedList ; import java . util . List ; import java . util . Map ; import java . util . PriorityQueue ; import java . util . Queue ; import java . util . Scanner ; import java . util . Set ; import java . util . Stack ; import java . util . StringTokenizer ; import java . util . TreeSet ; import java . util . Vector ;     public class codechef3 { static class comp implements Comparator < Integer > {   @ Override public int compare ( Integer o1 , Integer o2 ) { if ( Math . abs ( o1 ) > Math . abs ( o2 ) ) return - 1 ; else return 1 ; } }"],"bleu":0.036520463187598995,"rouge_l":0.1426662211827598}
{"id":455,"predictions":["import java . io . * ; import java . util . * ;"],"references":["import java . io . * ; import java . util . * ; public class Solution { public static void main ( String [ ] args ) throws Exception { FastReader fr = new FastReader ( ) ; int n = fr . nextInt ( ) ; long a [ ] [ ] = new long [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { a [ i ] [ j ] = fr . nextLong ( ) ; } } long a0 = ( a [ 0 ] [ 1 ] * a [ 0 ] [ 2 ] ) \/ a [ 1 ] [ 2 ] ; a0 = ( long ) Math . sqrt ( a0 ) ; long res [ ] = new long [ n ] ; res [ 0 ] = a0 ; for ( int i = 1 ; i < n ; i ++ ) { res [ i ] = ( a [ 0 ] [ i ] \/ a0 ) ; } for ( long i : res ) System . out . print ( i + \" ▁ \" ) ;"],"bleu":3.528782087880895e-7,"rouge_l":0.1023735315272117}
{"id":456,"predictions":["import java . util . * ;   public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = sc . nextInt ( ) ; int min = arr [ 0 ] ; int max = 0 ; for ( int i = 1 ; i < n ; i ++ ) { int a = arr [ i ] ; if ( a < min ) min = a ; } int max = arr [ n - 1 ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] != 1 ) max = arr [ i ] ; } int min = arr [ n - 1 ] ; for ( int i = 0 ; i < n - min ; i ++ ) max = Math . max ( max , arr [ i ] ) ; System . out . println ( max - min ) ; } }"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Arrays ; import java . util . Scanner ;   public class Nicho { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int t = Integer . parseInt ( br . readLine ( ) ) ; int [ ] rong1 = Arrays . stream ( br . readLine ( ) . split ( \" \\\\ s \" ) ) . mapToInt ( Integer :: parseInt ) . toArray ( ) ; int max = Integer . MIN_VALUE , maxindex = 0 , min = Integer . MAX_VALUE , minindex = 0 ; for ( int i = 0 ; i < rong1 . length ; i ++ ) { if ( rong1 [ i ] > max ) { max = rong1 [ i ] ; maxindex = i ; } if ( rong1 [ i ] < min ) { min = rong1 [ i ] ; minindex = i ; } } if ( minindex == maxindex ) { System . out . println ( \"0\" ) ; } else if ( maxindex == 0 && minindex == rong1 . length - 1 ) { System . out . println ( rong1 . length - 1 ) ; } else if ( minindex == 0 && maxindex == rong1 . length - 1 ) { System . out . println ( rong1 . length - 1 ) ; } else if ( minindex < maxindex ) { System . out . println ( Math . max ( rong1 . length - minindex - 1 , maxindex ) ) ; } else if ( maxindex < minindex ) { System . out . println ( Math . max ( rong1 . length - maxindex - 1 , minindex ) ) ; } }   }"],"bleu":0.18891635405952428,"rouge_l":0.3932836239277906}
{"id":457,"predictions":["import java . util . Scanner ; public class A { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = in . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = in . nextInt ( ) ; } Arrays . sort ( a ) ; int result = 0 ; for ( int i = 0 ; i < n ; i ++ ) { result += a [ i ] ; } System . out . println ( result ) ; } }"],"references":["import java . util . * ; import java . io . * ;   public class CFA { BufferedReader br ; PrintWriter out ; StringTokenizer st ; boolean eof ; private static final long MOD = 1000L * 1000L * 1000L + 7 ; private static final int [ ] dx = { 0 , - 1 , 0 , 1 } ; private static final int [ ] dy = { 1 , 0 , - 1 , 0 } ; private static final String yes = \" Yes \" ; private static final String no = \" No \" ;   void solve ( ) {"],"bleu":0.06750813372048386,"rouge_l":0.23615950445218736}
{"id":458,"predictions":["import java . util . * ; import java . io . * ;   public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; }   void run ( FastScanner in , PrintWriter out ) {  "],"references":["import java . util . Scanner ; public class Main { static Scanner r = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { int n ; n = r . nextInt ( ) ; int [ ] x = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { x [ i ] = r . nextInt ( ) ; } boolean [ ] vis = new boolean [ n + 1 ] ; int c = n ; for ( int i = 1 ; i <= n ; i ++ ) { vis [ x [ i ] ] = true ; while ( vis [ c ] && c > 0 ) System . out . print ( c -- + \" ▁ \" ) ; System . out . print ( \" \\n \" ) ; } } }"],"bleu":0.1259857276929105,"rouge_l":0.3298512965466388}
{"id":459,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; String str [ ] = new String [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { str [ i ] = sc . next ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { str [ i ] = sc . next ( ) ; } int index = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( str [ i ] == \"0\" ) { index ++ ; } else if ( str [ i ] == \"1\" ) { index += \"0\" ; } } System . out . println ( index ) ; } }"],"references":["import java . util . * ; public class puzzle { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int t = input . nextInt ( ) ; for ( int j = 0 ; j < t ; j ++ ) { int n = input . nextInt ( ) ; String s = input . next ( ) ; int c = ( s . charAt ( 0 ) - '0' ) + 1 ; System . out . print ( \"1\" ) ; for ( int i = 1 ; i < n ; i ++ ) { int ch = s . charAt ( i ) - '0' ; if ( ch + 1 != c ) { System . out . print ( \"1\" ) ; c = ch + 1 ; } else { System . out . print ( \"0\" ) ; c = ch ; } } System . out . println ( ) ; } }   }  "],"bleu":0.42932148043326285,"rouge_l":0.569232136509065}
{"id":460,"predictions":["import java . util . * ; import java . io . * ;   public class Main { public static void main ( String [ ] args ) throws IOException {"],"references":["  import java . util . * ; import java . io . * ; import java . math . * ;   public class Main { long MOD = 1000000007 ; InputReader in ; BufferedReader br ; PrintWriter out ; public static void main ( String [ ] args ) throws java . lang . Exception { Main solver = new Main ( ) ; solver . in = new InputReader ( System . in ) ; solver . br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; solver . out = new PrintWriter ( System . out ) ; solver . solve ( ) ; solver . out . flush ( ) ; solver . out . close ( ) ; }   public void solve ( ) { int tc = 1 ;"],"bleu":0.028209923600836274,"rouge_l":0.32181756296800546}
{"id":461,"predictions":["import java . Scanner ;   public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = n \/ 12 ; int count = 0 ; while ( m % 12 > 0 ) { count ++ ; n \/= 12 ; count ++ ; } System . out . println ( count ) ; } }"],"references":["import java . util . * ; public class MeasuringLengthsInBaden { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int inches = ( n + 1 ) \/ 3 ; int feets = inches \/ 12 ; System . out . println ( feets + \" ▁ \" + ( inches - 12 * feets ) ) ; } }"],"bleu":0.5488348505897951,"rouge_l":0.683372641509434}
{"id":462,"predictions":["import java . util . * ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int [ ] arr1 = new int [ n ] ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int sum = 0 , x = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { arr1 [ j ] = sc . nextInt ( ) ; sum += arr [ i ] ; } } System . out . println ( sum ) ; } }"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;    public class MainCP {   public static void main ( String [ ] args ) { FastReader s = new FastReader ( ) ; int n = s . nextInt ( ) ; int b = s . nextInt ( ) ; int d = s . nextInt ( ) ; int [ ] a = new int [ n ] ; int sum = 0 , c = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int x = s . nextInt ( ) ; if ( x <= b ) { a [ i ] = x ; } } for ( int i = 0 ; i < n ; i ++ ) { sum += a [ i ] ; if ( sum > d ) { sum = 0 ; c ++ ; }   } System . out . println ( c ) ; }"],"bleu":0.5775206712969359,"rouge_l":0.6745399858457184}
{"id":463,"predictions":["import java . io . * ; import java . util . * ;   public class Main { public static void main ( String [ ] args ) throws IOException {"],"references":["import java . io . * ; import java . util . * ; public class CF0543A {   public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int N = Integer . parseInt ( st . nextToken ( ) ) ; int M = Integer . parseInt ( st . nextToken ( ) ) ; int B = Integer . parseInt ( st . nextToken ( ) ) ; int MOD = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] a = new int [ N ] ; st = new StringTokenizer ( br . readLine ( ) ) ; for ( int i = 0 ; i < N ; i ++ ) { a [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; }"],"bleu":0.01033802828552018,"rouge_l":0.2630822311673376}
{"id":464,"predictions":["import java . util . * ;   public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( j ) ) { System . out . print ( s . charAt ( i - 1 ) ) ; break ; } } } }"],"references":["from math import sqrt   a = map ( int , list ( raw_input ( ) ) [ :: - 1 ] ) b = map ( int , list ( raw_input ( ) ) [ :: - 1 ] )   i = max ( len ( a ) , len ( b ) )   a += [ 0 ] * ( i - len ( a ) ) b += [ 0 ] * ( i - len ( b ) )   i -= 1 while i >= 2 : while a [ i ] == b [ i ] : i -= 1 if i == - 1 : print \" = \" exit ( 0 ) if a [ i ] == 1 : a [ i - 1 ] += 1 - b [ i - 1 ] a [ i - 2 ] += 1 - b [ i - 2 ] b [ i - 1 ] = b [ i - 2 ] = 0 if a [ i - 1 ] == 2 or a [ i - 2 ] == 2 : print \" > \" exit ( 0 ) else : b [ i - 1 ] += 1 - a [ i - 1 ] b [ i - 2 ] += 1 - a [ i - 2 ] a [ i - 1 ] = a [ i - 2 ] = 0 if b [ i - 1 ] == 2 or b [ i - 2 ] == 2 : print \" < \" exit ( 0 ) i -= 1   a . append ( 0 ) b . append ( 0 ) ans = ( a [ 0 ] - b [ 0 ] ) + ( a [ 1 ] - b [ 1 ] ) * ( 1 + sqrt ( 5 ) ) \/ 2 if ans > 0 : print \" > \" elif ans < 0 : print \" < \" else : print \" = \""],"bleu":0.0053326085881232055,"rouge_l":0.13647430413897482}
{"id":465,"predictions":["import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . * ; import java . io . IOException ; import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . InputStream ;   public class Main {   public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; TaskB solver = new TaskB ( ) ; solver . call ( in , out ) ; out . close ( ) ; }   static class TaskB {   static class TaskB { public void solve ( int testNumber , InputReader in , PrintWriter out ) { int n = in . nextInt ( ) ; int arr [ ] = new int [ 4 ] ; arr [ 0 ] = 1 ; for ( int i = 1 ; i < n ; i ++ ) { arr [ i ] = in . nextInt ( ) ; }   int m = in . nextInt ( ) ; for ( int i = 0 ; i < m ; i ++ ) { arr [ i ] = in . nextInt ( ) ; } arr [ i ] = Math . max ( arr [ i ] , 0 ) ; }   int max = 0 ; for ( int i : arr ) { max = Math . min ( max , arr [ i ] ) ; max = Math . max ( max , m + 1 ) ; } out . println ( max ) ; }   }   static class InputReader { public BufferedReader br ; StringTokenizer st ;   public Reader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; st = new StringTokenizer ( br ) ; }   public String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   long nextLong ( )"],"references":["import java . util . * ; import java . io . * ;   public class ATwistyMovement {"],"bleu":0.03026759080779582,"rouge_l":0.0883756604738367}
{"id":466,"predictions":["import java . util . * ;   public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < m ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int cnt [ ] = new int [ n ] ; int prev [ ] = new int [ n ] ; for ( int i = n ; i >= 0 ; i -- ) { arr [ i ] = sc . nextInt ( ) ; } int ans [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 0 ) { cnt [ i ] ++ ; } else { ans [ arr [ i ] ] ++ ; } prev [ n ] = - 1 ; } for ( int i = 0 ; i < m ; i ++ ) { if ( arr [ i ] == 0 ) { cnt [ i ] ++ ; } else { ans [ i ] ++ ; } } System . out . println ( ans [ n ] ) ; } }"],"references":["import javax . swing . plaf . IconUIResource ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ;   public class codeforces { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;  "],"bleu":0.04917303775537549,"rouge_l":0.1647350061888151}
{"id":467,"predictions":["import java . util . * ;   public class FastIO { BufferedReader br ; StringTokenizer st ;   public FastIO ( ) {"],"references":["import java . util . * ; import java . io . * ; public class Main { public static void main ( String args [ ] ) {   FastReader in = new FastReader ( ) ; PrintWriter so = new PrintWriter ( new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ) ; String s = in . next ( ) ; String str = in . next ( ) ; if ( s . equals ( str ) ) so . println ( s ) ; else so . println ( \"1\" ) ; so . flush ( ) ; } static class FastReader { BufferedReader br ; StringTokenizer st ;   public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; }   String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   long nextLong ( ) { return Long . parseLong ( next ( ) ) ; }   double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; }   int [ ] readIntArray ( int n ) { int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = nextInt ( ) ; return a ; }   long [ ] readLongArray ( int n ) { long a [ ] = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = nextLong ( ) ; return a ; }   String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"bleu":8.465047783819714e-8,"rouge_l":0.0890325271059216}
{"id":468,"predictions":["import java . io . * ; import java . util . * ;   public class A { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] [ ] arr = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; HashMap < Integer , Integer > map = new HashMap < > ( ) ; for ( int i = 0 ; i < n - 1 ; i ++ ) { arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; map . put ( arr [ i ] [ 0 ] , map . get ( arr [ i ] [ 1 ] ) ; } long k = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { arr [ i ] [ j ] = arr [ i ] [ 0 ] + arr [ j ] ; k += arr [ i ] [ 1 ] ; } } long k = 0 ; for ( int i = 0 ; i < n ; i ++ ) { k += arr [ i ] [ 0 ] + arr [ i ] [ 0 ] ; arr [ i ] [ 1 ] += arr [ i ] [ k ] ; if ( k == 0 ) k ++ ; } k ++ ; } System . out . println ( k ) ;   } }"],"references":["import java . io . * ; import java . math . * ; import java . math . BigInteger ; import java . util . * ;   public class Main { static int bool [ ] [ ] = new int [ 3005 ] [ 3005 ] ;"],"bleu":0.06788298273552118,"rouge_l":0.18769230769230769}
{"id":469,"predictions":["import java . util . * ; import java . lang . * ; import java . io . * ;   public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) {"],"references":["import java . util . * ; import java . util . Scanner ; import java . io . * ; import javax . lang . model . util . ElementScanner6 ; import static java . lang . System . out ; import java . util . Stack ; import java . util . Queue ; import java . util . LinkedList ;   public class B215 {   static int mod = ( int ) ( 1e9 + 7 ) ; static long MOD = ( long ) ( 1e9 + 7 ) ; static FastReader in = new FastReader ( ) ; static PrintWriter pr = new PrintWriter ( new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ) ; public static void main ( String args [ ] ) {   int tc = 1 ;"],"bleu":0.03528015711201261,"rouge_l":0.2947842026328945}
{"id":470,"predictions":["import java . util . * ; import java . io . * ;   public class Main { public static void main ( String [ ] args ) throws IOException {"],"references":["import java . io . * ; import java . util . * ;   public class Main { public static void main ( String [ ] args ) throws IOException {"],"bleu":1.0,"rouge_l":0.9375000000000001}
{"id":471,"predictions":["import java . util . * ;   public class Practise {  "],"references":["    import java . io . * ; import java . math . * ; import java . security . * ; import java . text . * ; import java . util . * ; import javafx . util . Pair ;   public class CodeForce { static BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; static StringBuilder sb = new StringBuilder ( ) ;   static boolean flag = false ; static int next ( String [ ] sr , int ind ) { return Integer . parseInt ( sr [ ind ] ) ; }   public static void main ( String [ ] args ) throws IOException { String [ ] sr = br . readLine ( ) . split ( \" ▁ \" ) ; int n = next ( sr , 0 ) ; int m = next ( sr , 1 ) ; int [ ] [ ] arr = new int [ n ] [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { sr = br . readLine ( ) . split ( \" ▁ \" ) ; for ( int j = 0 ; j < m ; j ++ ) { arr [ i ] [ j ] = next ( sr , j ) ; } } long total = 0l ; for ( int i = 0 ; i < n ; i ++ ) { long count = 0 , count1 = 0 ; for ( int j = 0 ; j < m ; j ++ ) { if ( arr [ i ] [ j ] == 0 ) count ++ ; else count1 ++ ; } total += ( long ) Math . pow ( 2 , count ) - count - 1 ; total += ( long ) Math . pow ( 2 , count1 ) - count1 - 1 ; } for ( int i = 0 ; i < m ; i ++ ) { long count = 0 , count1 = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ j ] [ i ] == 0 ) count ++ ; else count1 ++ ; } total += ( long ) Math . pow ( 2 , count ) - count - 1 ; total += ( long ) Math . pow ( 2 , count1 ) - count1 - 1 ; } total += n * m ; System . out . println ( total ) ;   } }       "],"bleu":5.386793441200402e-18,"rouge_l":0.04420022945474308}
{"id":472,"predictions":["import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;  "],"references":["import java . util . * ;   public class Game { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int arr [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; System . out . println ( arr [ ( arr . length - 1 ) \/ 2 ] ) ; } }"],"bleu":0.039365776461682246,"rouge_l":0.21807348560079445}
{"id":473,"predictions":["import java . util . * ; import java . io . * ; import java . math . * ;  "],"references":["import java . util . * ; import java . io . * ; public class Message { public static void main ( String [ ] args ) throws Exception {"],"bleu":0.4082467011419753,"rouge_l":0.5126050420168067}
{"id":474,"predictions":["import java . io . * ; import java . util . * ;   public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; }   void run ( FastScanner in , PrintWriter out ) {  "],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . ArrayList ; import java . util . List ;   public class kaka {   public static void main ( String [ ] args ) throws IOException { BufferedReader s = new BufferedReader ( new InputStreamReader ( System . in ) ) ; ArrayList < String > strs = new ArrayList < > ( ) ; while ( true ) { String line = s . readLine ( ) ; if ( line == null ) { break ; } strs . add ( line ) ; } ArrayList < String > res = new ArrayList < > ( ) ; StringBuffer comp = new StringBuffer ( ) ; boolean agaramp = true ; for ( int i = 0 ; i < strs . size ( ) ; i ++ ) { String l = strs . get ( i ) ; int len = l . length ( ) ; boolean nonspace = false ; boolean foundhash = false ; for ( int j = 0 ; j < len ; j ++ ) { if ( l . charAt ( j ) == ' # ' ) { foundhash = true ; break ; } else if ( l . charAt ( j ) != ' ▁ ' ) { nonspace = true ; } } if ( ! nonspace && foundhash ) { if ( ! agaramp ) { if ( comp . length ( ) >= 1 ) { res . add ( comp . toString ( ) ) ; comp = new StringBuffer ( ) ; } else { res . add ( \" \" ) ; } } agaramp = true ; res . add ( l ) ; } else { agaramp = false ; for ( int j = 0 ; j < len ; j ++ ) { if ( l . charAt ( j ) != ' ▁ ' ) { comp . append ( l . charAt ( j ) ) ; } } } } if ( ! agaramp ) { if ( comp . length ( ) >= 1 ) { res . add ( comp . toString ( ) ) ; } else { res . add ( \" \" ) ; } }   for ( String line : res ) { System . out . println ( line ) ; } } }"],"bleu":0.006550920751595701,"rouge_l":0.20611648817364414}
{"id":475,"predictions":["import java . util . * ; import java . io . * ;"],"references":["import java . io . * ; import java . util . * ;   public class Main {   public static void main ( String [ ] args ) throws Exception { BufferedReader in = new BufferedReader ( new InputStreamReader ( System . in ) ) ;"],"bleu":0.10170139230422684,"rouge_l":0.35226179018286813}
{"id":476,"predictions":["import java . io . BufferedReader ; import java . io . FileReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . StringTokenizer ;   import java . util . * ;   public class B { static class FastScanner { BufferedReader br ; StringTokenizer st ;   public FastScanner ( ) {"],"references":["import java . io . * ; import java . util . * ; import java . math . * ;      public class spoj { InputStream is ; static PrintWriter out ; static int dp [ ] = new int [ 10001 ] ; static int solver ( int left , int c , int d , int n ) { if ( left <= 0 ) return 0 ; if ( dp [ left ] != - 1 ) return dp [ left ] ; return dp [ left ] = Math . min ( c + solver ( left - n , c , d , n ) , d + solver ( left - 1 , c , d , n ) ) ; } void solve ( ) { int c = ni ( ) , d = ni ( ) ; int n = ni ( ) , m = ni ( ) ; Arrays . fill ( dp , - 1 ) ; int k = ni ( ) ; int left = n * m - k ; out . println ( solver ( left , c , d , n ) ) ; }"],"bleu":0.03811097286286503,"rouge_l":0.19399056914135324}
{"id":477,"predictions":["import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;  "],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ;"],"bleu":0.49341914287954186,"rouge_l":0.699617695248498}
{"id":478,"predictions":["import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;  "],"references":["import java . util . Scanner ; public class Cp { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ;"],"bleu":0.11620051194987183,"rouge_l":0.2156429518338489}
{"id":479,"predictions":["import java . util . * ;   public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; long [ ] a = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextLong ( ) ; } Arrays . sort ( a ) ; long ans = 0 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { ans += a [ i ] ; } System . out . println ( ans ) ; } }"],"references":["import java . io . * ; import java . util . * ;   public class P1 { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; System . out . println ( a [ n - k ] ) ; } }"],"bleu":0.656891173582559,"rouge_l":0.7929214929214929}
{"id":480,"predictions":["import java . util . * ;   public class CF102 { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < m ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int b [ ] = new int [ n ] ; for ( int i = 0 ; i < m ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == 1 ) { System . out . print ( \" > \" ) ; } else if ( a [ i ] > 1 ) { System . out . print ( \" > \" ) ; } else { for ( int i = 0 ; i < n ; i ++ ) { if ( b [ i ] == 0 ) { System . out . print ( \" > \" ) ; } } System . out . println ( \" ) ;   } } }"],"references":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { long n1 , bx , n2 , by , temp ; long x = 0 , y = 0 ; Scanner sc = new Scanner ( System . in ) ; n1 = sc . nextInt ( ) ; bx = sc . nextInt ( ) ; while ( n1 != 0 ) { n1 -- ; temp = sc . nextInt ( ) ; x = x * bx + temp ; } n2 = sc . nextInt ( ) ; by = sc . nextInt ( ) ; while ( n2 != 0 ) { n2 -- ; temp = sc . nextInt ( ) ; y = y * by + temp ; } if ( x > y ) System . out . print ( \" > \" ) ; else if ( x < y ) System . out . print ( \" < \" ) ; else System . out . print ( \" = \" ) ; } }  "],"bleu":0.34165903292167693,"rouge_l":0.5556131516587677}
{"id":481,"predictions":["import java . util . * ; import java . io . * ;   public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; }   public static long mod = 17352642619633L ;   void run ( FastScanner in , PrintWriter out ) { int N = in . nextInt ( ) ; int [ ] a = new int [ 2 * N ] ; for ( int i = 0 ; i < 2 ; i ++ ) { a [ i ] = in . nextInt ( ) ; }   int [ ] arr = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { arr [ i ] = in . nextInt ( ) ; } Arrays . sort ( arr ) ; for ( int i = 0 ; i < arr . length ; i ++ ) { if ( arr [ i ] != arr [ i ] ) { out . println ( \" YES \" ) ; return ; } } else { out . println ( \" NO \" ) ; }   }   static class FastScanner { BufferedReader br ; StringTokenizer st ;   public FastScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; }   String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   long nextLong ( ) { return Long . parseLong ( next ( ) ) ; }   double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; }   String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"references":["import java . util . * ; import java . io . * ; import java . math . BigInteger ; import java . text . * ; public class Main { static long mod = 1000_000_007 ; static long mod1 = 998244353 ; static boolean fileIO = false ; static boolean memory = true ; static FastScanner f ; static PrintWriter pw ; static double eps = ( double ) 1e-6 ; static int maxN = ( int ) 1e6 ;"],"bleu":0.060467643896373456,"rouge_l":0.20180855756506394}
{"id":482,"predictions":["import java . io . * ; import java . util . * ;   public class Main { static PrintWriter w = new PrintWriter ( System . out ) ; static FastScanner sc = new FastScanner ( ) ;  "],"references":["n = int ( input ( ) ) stones = list ( map ( lambda t : int ( t ) , input ( ) . split ( ) ) ) q = int ( input ( ) ) queries = list ( map ( lambda t : int ( t ) , input ( ) . split ( ) ) )   stones . sort ( )   added_stones = [ ] added_stones . append ( stones [ 0 ] ) for i in range ( 1 , n , 1 ) : added_stones . append ( stones [ i ] + added_stones [ i - 1 ] )   computed_queries = { }   for qidx , qq in enumerate ( queries ) : if qq in computed_queries : queries [ qidx ] = computed_queries [ qq ] continue   i = n - 2 multiplier = 1 cost = 0 while i >= 0 : pp = pow ( qq , multiplier ) nexti = i - pp if nexti < 0 : cost += added_stones [ i ] * multiplier break cost += ( added_stones [ i ] - added_stones [ nexti ] ) * multiplier multiplier += 1 i = nexti queries [ qidx ] = cost computed_queries [ qq ] = cost   print ( * queries , sep = ' ▁ ' )"],"bleu":0.0005295268471751759,"rouge_l":0.08522299838796346}
{"id":483,"predictions":["import java . util . * ; import java . io . * ;   public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; }   void run ( FastScanner in , PrintWriter out ) {   int n = in . nextInt ( ) ;  "],"references":["import java . util . * ;   public class Unary_B {   public static void main ( String [ ] args ) {"],"bleu":0.20224732225890238,"rouge_l":0.4143254090768756}
{"id":484,"predictions":["import java . io . BufferedReader ; import java . io . File ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . StringTokenizer ;   public class B {   public static void main ( String [ ] args ) { FastScanner fs = new FastScanner ( ) ; PrintWriter out = new PrintWriter ( System . out ) ; int t = 1 ;"],"references":["import java . io . * ; import java . util . * ;   public class Main { public static void main ( String args [ ] ) { Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; int M [ ] = new int [ 20 ] ; int R [ ] = new int [ 20 ] ; for ( int i = 0 ; i < n ; ++ i ) M [ i ] = input . nextInt ( ) ; for ( int i = 0 ; i < n ; ++ i ) R [ i ] = input . nextInt ( ) ; int range = 720720 , cnt = 0 ; for ( int x = 0 ; x < range ; ++ x ) { int bj = 0 ; for ( int i = 0 ; i < n ; ++ i ) if ( x % M [ i ] == R [ i ] ) { bj = 1 ; break ; } if ( bj == 1 ) cnt ++ ; } System . out . printf ( \" % .6f \\n \" , ( double ) cnt \/ range ) ; } }"],"bleu":0.0541123439832121,"rouge_l":0.25112963148910533}
{"id":485,"predictions":["import java . util . * ; import java . io . * ;"],"references":["import java . util . Scanner ;   public class A644 {   public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int N = in . nextInt ( ) ; int R = in . nextInt ( ) ; int C = in . nextInt ( ) ; if ( N > R * C ) { System . out . println ( \" - 1\" ) ; } else { int [ ] [ ] A = new int [ R ] [ C ] ; for ( int n = 0 ; n < N ; n ++ ) { int r = n \/ C ; int c = n % C ; if ( r % 2 != 0 ) { c = C - 1 - c ; } A [ r ] [ c ] = n + 1 ; } StringBuilder output = new StringBuilder ( ) ; for ( int r = 0 ; r < R ; r ++ ) { for ( int c = 0 ; c < C ; c ++ ) { output . append ( A [ r ] [ c ] ) . append ( ' ▁ ' ) ; } output . append ( ' \\n ' ) ; } System . out . print ( output ) ; } }   }"],"bleu":3.6753290841329965e-8,"rouge_l":0.06704770279182239}
{"id":486,"predictions":["import java . util . * ;   public class Codeforces { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ;   String x = \" \" ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( x . equals ( \" a \" ) && s . equals ( \" i \" ) || x . charAt ( i ) == s . charAt ( i ) ) { x = x . charAt ( i ) ; } else { x = s . charAt ( i ) ; } } if ( x . length ( ) == 0 ) { System . out . println ( \" YES \" ) ; } else { System . out . println ( \" NO \" ) ; } }   }"],"references":["import java . util . * ;   public class Example { static long [ ] [ ] dp ;"],"bleu":0.058554761813670475,"rouge_l":0.18692543411644535}
{"id":487,"predictions":["import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;  "],"references":["import java . io . * ; import java . util . * ;   public class a { static class Reader { final private int BUFFER_SIZE = 1 << 16 ; private DataInputStream din ; private byte [ ] buffer ; private int bufferPointer , bytesRead ; public Reader ( ) { din = new DataInputStream ( System . in ) ; buffer = new byte [ BUFFER_SIZE ] ; bufferPointer = bytesRead = 0 ; } public Reader ( String file_name ) throws IOException { din = new DataInputStream ( new FileInputStream ( file_name ) ) ; buffer = new byte [ BUFFER_SIZE ] ; bufferPointer = bytesRead = 0 ; } public String next ( ) throws IOException { byte [ ] buf = new byte [ 64 ] ;"],"bleu":0.0387579423999312,"rouge_l":0.18727613849565072}
{"id":488,"predictions":["import java . util . * ; import java . lang . * ; import java . io . * ;   public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) {"],"references":["import java . lang . * ; import java . util . * ; import java . io . * ; public class Codechef {   public void solve ( ) throws IOException { FastScanner fs = new FastScanner ( ) ; StringBuilder ans = new StringBuilder ( \" \" ) ;"],"bleu":0.44986778770387964,"rouge_l":0.5670361101179835}
{"id":489,"predictions":["import java . util . * ; public class HelloWorld {   public static void main ( String [ ] args ) {"],"references":["import java . util . Scanner ;   public class Codeforces {   public static void main ( String [ ] args ) {   Scanner input = new Scanner ( System . in ) ;  "],"bleu":0.45624055142116005,"rouge_l":0.6717357105401154}
{"id":490,"predictions":["import java . util . Arrays ; import java . util . Scanner ;   public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; int m = scan . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = scan . nextInt ( ) ; } Arrays . sort ( a ) ; int result = 0 ; for ( int i = 0 ; i < n ; i ++ ) { result += a [ i ] ; } System . out . println ( result ) ; }   }"],"references":["import java . io . File ; import java . io . FileNotFoundException ; import java . io . IOException ; import java . io . PrintWriter ; import java . util . * ;   public class Main {   public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; int m = input . nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = input . nextInt ( ) ; } Arrays . sort ( a ) ; int i = n - 1 ; int count = 0 ; while ( m > 0 ) { count ++ ; m -= a [ i ] ; i -- ; } System . out . println ( count ) ; } }"],"bleu":0.5854850097468846,"rouge_l":0.7593621399176954}
{"id":491,"predictions":["import java . util . * ;   import java . io . * ;   public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; }   void run ( FastScanner in , PrintWriter out ) {   N = in . nextInt ( ) ; int K = in . nextInt ( ) ; long [ ] A = new long [ N ] ; for ( int i = 0 ; i < N ; i ++ ) A [ i ] = in . nextLong ( ) ;   long [ ] B = new long [ N ] ;   for ( int i = 0 ; i < N ; i ++ ) { A [ i ] = in . nextLong ( ) ; } out . println ( A [ 0 ] ) ; }  "],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;   public class RomaAndChangingSigns {   public static void main ( String [ ] args ) { FastReader reader = new FastReader ( ) ;   int n = reader . nextInt ( ) ; int k = reader . nextInt ( ) ; int ed = n - 1 , st = 0 ; int a [ ] = new int [ n ] ; long sum = 0 ;   for ( int i = 0 ; i < n ; i ++ ) a [ i ] = reader . nextInt ( ) ;   while ( st < ed ) { if ( a [ st ] < 0 && Math . abs ( a [ st ] ) >= a [ ed ] && k > 0 ) { k -- ; sum += Math . abs ( a [ st ++ ] ) ; } else { sum += a [ ed -- ] ; } }   for ( int i = st ; i <= ed ; i ++ ) { sum += a [ i ] ; }   if ( k > 0 ) { sum -= a [ ed ] ; sum += ( k % 2 == 0 ) ? a [ ed ] : a [ ed ] * - 1 ; } System . out . println ( sum ) ; }   static class FastReader { BufferedReader br ; StringTokenizer st ;   public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; }   String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   long nextLong ( ) { return Long . parseLong ( next ( ) ) ; }   double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; }   String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"bleu":0.1050872552811685,"rouge_l":0.31918774902789115}
{"id":492,"predictions":["import java . util . * ; import java . io . * ; import java . math . * ;  "],"references":["import java . util . Scanner ;   public class Hate_A {   public static void main ( String [ ] args ) {   Scanner in = new Scanner ( System . in ) ;   int x = in . nextInt ( ) ; in . nextLine ( ) ; String s = in . nextLine ( ) ;   char ch [ ] = s . toCharArray ( ) ; int countS = 0 ; int countF = 0 ; for ( int i = 1 ; i < x ; i ++ ) { if ( ch [ i - 1 ] != ch [ i ] ) { if ( ch [ i ] == ' F ' ) { countF ++ ; } else { countS ++ ; } } } System . out . println ( ( countF > countS && countF != 0 ) ? \" YES \" : \" NO \" ) ;   } }"],"bleu":0.00036139495935369877,"rouge_l":0.1221879815100154}
{"id":493,"predictions":["import java . io . * ; import java . util . StringTokenizer ;"],"references":["import java . io . * ;   public class Main { static int n ; static String str ; static BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; static BufferedWriter bw = new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ;   public static void main ( String [ ] args ) throws IOException { br = new BufferedReader ( new InputStreamReader ( new FileInputStream ( \" input . txt \" ) ) ) ; bw = new BufferedWriter ( new OutputStreamWriter ( new FileOutputStream ( \" output . txt \" ) ) ) ; n = Integer . parseInt ( br . readLine ( ) ) ; str = br . readLine ( ) ; int i = 0 ; while ( i < n && str . charAt ( i ) == '0' ) { ++ i ; } int k = 0 ; boolean flag = true ; for ( int j = i + 1 ; j < n ; ++ j ) { if ( str . charAt ( j ) == '1' ) { if ( k == 0 ) { k = j - i ; } else if ( k != j - i ) { flag = false ; break ; } i = j ; } } bw . write ( flag ? \" YES \" : \" NO \" ) ; bw . close ( ) ; } }"],"bleu":2.6431629169062574e-8,"rouge_l":0.06499041125079907}
{"id":494,"predictions":["import java . util . * ; import java . io . * ;"],"references":["import java . util . * ;   public class AutomaticDoor {   public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; long n = scan . nextLong ( ) ; int m = scan . nextInt ( ) ; long a = scan . nextLong ( ) ; long d = scan . nextLong ( ) ; long [ ] arr = new long [ m ] ; for ( int i = 0 ; i < m ; i ++ ) arr [ i ] = scan . nextLong ( ) ; int count = 0 ; long time = 0 ; long x = d \/ a + 1 ; long y = d - ( x - 1 ) * a ; if ( y < 0 ) y = 0 ; long last = 0 ; for ( int i = 0 ; i < m ; ) { long b = Math . max ( Math . min ( ( arr [ i ] - 1 ) \/ a , n ) , 0 ) ; long c = b - time ; long k = c \/ x ; count += k ; time += k * x ; if ( k != 0 ) { while ( i < m && arr [ i ] <= time * a + y ) { i ++ ; } } if ( i >= m ) break ; count ++ ; last = arr [ i ] + d ; if ( time < n ) last = Math . min ( last , ( time + 1 ) * a + d ) ; while ( i < m && arr [ i ] <= last ) i ++ ; time = Math . max ( time , Math . min ( n , last \/ a ) ) ; } if ( time < n ) { count += ( n - time + x - 1 ) \/ x ; } System . out . println ( count ) ; } }"],"bleu":8.437119167027594e-12,"rouge_l":0.0498736435260889}
{"id":495,"predictions":["import java . util . * ; import java . lang . * ; import java . io . * ;   public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) {"],"references":["import java . util . * ;   public class Example { static int [ ] dp ;   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ;   int n = sc . nextInt ( ) ; int [ ] [ ] arr = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] [ 0 ] = sc . nextInt ( ) ; arr [ i ] [ 1 ] = sc . nextInt ( ) ;   } int [ ] fi = new int [ n ] ; fi [ 0 ] = Math . max ( arr [ 0 ] [ 1 ] , arr [ 0 ] [ 0 ] ) ; for ( int i = 1 ; i < n ; i ++ ) { if ( Math . max ( arr [ i ] [ 0 ] , arr [ i ] [ 1 ] ) <= fi [ i - 1 ] ) { fi [ i ] = Math . max ( arr [ i ] [ 0 ] , arr [ i ] [ 1 ] ) ; } else { fi [ i ] = Math . min ( arr [ i ] [ 0 ] , arr [ i ] [ 1 ] ) ; } } for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( fi [ i + 1 ] > fi [ i ] ) { System . out . println ( \" NO \" ) ; return ;   } } System . out . println ( \" YES \" ) ;    }    }    "],"bleu":0.00016440892709631674,"rouge_l":0.09917892854239493}
{"id":496,"predictions":["import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;  "],"references":["  import java . util . * ; import java . lang . * ; import java . io . * ;   public class Codechef { public static void main ( String [ ] args ) throws java . lang . Exception { Scanner sc = new Scanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; long n = sc . nextLong ( ) ; int m = sc . nextInt ( ) ; long k = sc . nextLong ( ) ; long p [ ] = new long [ m ] ; for ( int i = 0 ; i < m ; i ++ ) p [ i ] = sc . nextLong ( ) ; int cnt = 0 ; int special = 0 ; for ( int i = 0 ; i < m ; i ++ ) {"],"bleu":0.03164308118572239,"rouge_l":0.267260915546155}
{"id":497,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int T = sc . nextInt ( ) ; for ( int t = 1 ; t <= T ; t ++ ) { System . out . println ( t ) ; } } }"],"references":["import java . util . Scanner ; public class B { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int t = in . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int n = in . nextInt ( ) ; int k = in . nextInt ( ) ; String s = in . next ( ) ; System . out . println ( result ( n , k , s ) ) ; } } private static int result ( int n , int k , String s ) { int firstIndex = s . indexOf ( ' * ' ) ; int lastIndex = s . lastIndexOf ( ' * ' ) ; if ( firstIndex == lastIndex ) { return 1 ; } int res = 2 ; while ( firstIndex != lastIndex ) { int middleIndex = firstIndex + k ; if ( middleIndex >= lastIndex ) { return res ; } while ( s . charAt ( middleIndex ) != ' * ' ) { middleIndex -- ; } res ++ ; firstIndex = middleIndex ; } return res ; } }"],"bleu":0.07748291090993728,"rouge_l":0.3766634727988928}
{"id":498,"predictions":["import java . io . * ; import java . util . * ;   public class Main { public static void main ( String [ ] args ) throws IOException {"],"references":["import java . util . * ; public class Main { static int vis [ ] = new int [ 1000 ] ; public static void main ( String args [ ] ) { Scanner input = new Scanner ( System . in ) ; int n , A , B , C , T ; n = input . nextInt ( ) ; A = input . nextInt ( ) ; B = input . nextInt ( ) ; C = input . nextInt ( ) ; T = input . nextInt ( ) ; for ( int i = 1 ; i <= T ; i ++ ) vis [ i ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { int x = input . nextInt ( ) ; vis [ x ] ++ ; } if ( C <= B ) { System . out . println ( n * A ) ; } else { int get = n * A ; int cost = 0 ; int num = 0 ; for ( int i = 1 ; i <= T ; i ++ ) { get += num * C ; cost -= num * B ; num += vis [ i ] ; } System . out . println ( get + cost ) ; } } }  "],"bleu":0.0007582892159887866,"rouge_l":0.1378012048192771}
{"id":499,"predictions":["import java . util . * ; import java . io . * ;   public class Solution { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; }   void run ( FastScanner in , PrintWriter out ) {  "],"references":["import java . util . * ;   public class Main {   public static int solution ( int [ ] games , ArrayList < Set < Integer > > dep , int position , Set < Integer > completed , int left ) { int completedThisComp = 0 ;   boolean taken = true ; while ( taken ) { taken = false ; for ( int i = 0 ; i < games . length ; i ++ ) { if ( completed . contains ( i ) ) continue ;   if ( games [ i ] != position ) continue ;   boolean canComplete = true ; for ( Integer d : dep . get ( i ) ) { if ( completed . contains ( d ) ) continue ; canComplete = false ; }   if ( canComplete ) { taken = true ; completed . add ( i ) ; completedThisComp += 1 ; } } }   if ( completedThisComp == left ) return 0 ;   if ( position == 0 ) { return 1 + solution ( games , dep , 1 , completed , left - completedThisComp ) ; } if ( position == 1 ) { return 1 + solution ( games , dep , 2 , completed , left - completedThisComp ) ; }   return 1 + solution ( games , dep , 0 , completed , left - completedThisComp ) ; }"],"bleu":0.02856153818113551,"rouge_l":0.24362349096850316}
{"id":500,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String ar [ ] = sc . next ( ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; String f = sc . next ( ) ; boolean f = true ; for ( int i = 0 ; i < n ; i ++ ) { f = sc . next ( ) ; if ( f . equals ( ar [ i ] ) ) { f = true ; } } if ( f ) { System . out . println ( \" YES \" ) ; } else { System . out . println ( \" NO \" ) ; } } }"],"references":["import java . util . Scanner ;   public class Solution { public static String solve ( String sentence ) { String [ ] words = sentence . split ( \" ▁ \" ) ; int gender = - 1 ; boolean noun = false , vers = false ; if ( words . length == 0 ) return \" NO \" ; int firstCode = encode ( words [ 0 ] ) ; if ( firstCode == - 1 ) return \" NO \" ; if ( words . length == 1 ) return \" YES \" ; noun = firstCode \/ 2 == 1 ; vers = firstCode \/ 2 == 2 ; gender = firstCode % 2 ; for ( int i = 1 ; i < words . length ; i ++ ) { int code = encode ( words [ i ] ) ; if ( code % 2 != gender || code == - 1 ) return \" NO \" ; if ( code \/ 2 < 2 && vers ) return \" NO \" ; if ( noun ) { if ( code \/ 2 == 0 || code \/ 2 == 1 ) return \" NO \" ; vers = true ; } else { if ( code \/ 2 == 2 ) return \" NO \" ; if ( code \/ 2 == 1 ) noun = true ; } } return noun ? \" YES \" : \" NO \" ; } private static int encode ( String word ) { if ( word . endsWith ( \" lios \" ) ) { return 0 ; } else if ( word . endsWith ( \" liala \" ) ) { return 1 ; } else if ( word . endsWith ( \" etr \" ) ) { return 2 ; } else if ( word . endsWith ( \" etra \" ) ) { return 3 ; } else if ( word . endsWith ( \" initis \" ) ) { return 4 ; } else if ( word . endsWith ( \" inites \" ) ) { return 5 ; } else { return - 1 ; } } public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String str = sc . nextLine ( ) ; System . out . println ( solve ( str ) ) ;   } }"],"bleu":0.08131600384202146,"rouge_l":0.2927843848328089}
{"id":501,"predictions":["import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int N = in . nextInt ( ) ; Set < Character > letter = new HashSet < > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { int a = in . nextInt ( ) ; int b = in . nextInt ( ) ; boolean flag = false ; for ( int j = 0 ; j < N ; j ++ ) { if ( Character . isEmpty ( ) ) { flag = true ; } else { if ( Character . isEmpty ( ( ) ) ) { flag = true ; } } } System . out . println ( ( flag ) ; } }"],"references":["import java . util . LinkedHashSet ; import java . util . Scanner ; import java . util . Set ;   public class Anton_and_Letters { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String s = scanner . nextLine ( ) ; s = s . replace ( \" { \" , \" \" ) ; s = s . replace ( \" } \" , \" \" ) ; s = s . replaceAll ( \" , ▁ \" , \" \" ) ; s = s . trim ( ) ; Set < Character > characterSet = new LinkedHashSet < > ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { characterSet . add ( s . charAt ( i ) ) ; } System . out . println ( characterSet . size ( ) ) ; } }"],"bleu":0.3903236081379035,"rouge_l":0.5329097587610444}
{"id":502,"predictions":["import java . util . * ; import java . io . * ;   public class Main { public static void main ( String [ ] args ) throws IOException { Scanner in = new Scanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; int a , b , c ; int d = in . nextInt ( ) ; for ( int i = 0 ; i < a ; i ++ ) { a = in . nextInt ( ) ; b = in . nextInt ( ) ; c = in . nextInt ( ) ; if ( a >= b && c <= d ) { out . println ( 1 ) ; } else { out . flush ( ) ; } } out . close ( ) ; }   }"],"references":["import java . util . Scanner ;   public class MeetOldFriend { public static void main ( String [ ] args ) {   Scanner in = new Scanner ( System . in ) ; long l1 = in . nextLong ( ) , r1 = in . nextLong ( ) , l2 = in . nextLong ( ) , r2 = in . nextLong ( ) , k = in . nextLong ( ) , l = Math . max ( l1 , l2 ) , r = Math . min ( r1 , r2 ) ;   in . close ( ) ; System . out . println ( l <= r ? k >= l && k <= r ? r - l : r - l + 1 : 0 ) ; } }"],"bleu":0.3111636619779782,"rouge_l":0.5152146245516603}
{"id":503,"predictions":["import java . util . * ;   public class questionCF {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] time = new int [ n ] ; int [ ] time = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { time [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { time [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { time += time [ i ] ; } System . out . println ( time ) ; } }  "],"references":["import java . io . * ; import java . util . * ;   public class a { public static void main ( String [ ] args ) throws IOException { FastReader scan = new FastReader ( ) ;"],"bleu":0.12801546130485814,"rouge_l":0.29729241877256324}
{"id":504,"predictions":["import java . util . * ;   public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; String S = scan . next ( ) ; int index = - 1 ; for ( int i = 0 ; i < S . length ( ) ; i ++ ) { if ( S . charAt ( i ) == S . charAt ( i ) ) { index = 1 ; break ; } } if ( index == - 1 ) { System . out . println ( \" YES \" ) ; return ; } else { System . out . println ( \" NO \" ) ; } } }"],"references":["import java . util . Scanner ;     public class Boredom { public static void main ( final String [ ] parameters ) { Scanner input = new Scanner ( System . in ) ;   String string = input . next ( ) ; String result = \" NO \" ; boolean foundAB = false ; boolean foundBA = false ;   for ( int index = 1 ; index < string . length ( ) ; index ++ ) { if ( ! foundAB && string . charAt ( index ) == ' B ' && string . charAt ( index - 1 ) == ' A ' ) { foundAB = true ; index ++ ; } else if ( foundAB && string . charAt ( index ) == ' A ' && string . charAt ( index - 1 ) == ' B ' ) { result = \" YES \" ; break ; } }   if ( ! result . equals ( \" YES \" ) ) { for ( int index = 1 ; index < string . length ( ) ; index ++ ) { if ( ! foundBA && string . charAt ( index ) == ' A ' && string . charAt ( index - 1 ) == ' B ' ) { foundBA = true ; index ++ ; } else if ( foundBA && string . charAt ( index ) == ' B ' && string . charAt ( index - 1 ) == ' A ' ) { result = \" YES \" ; break ; } } }   System . out . println ( result ) ; } }"],"bleu":0.15492518753317772,"rouge_l":0.4506834133727373}
{"id":505,"predictions":["import java . util . * ; import java . io . * ;   public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; }   void run ( FastScanner in , PrintWriter out ) {  "],"references":["import java . util . Scanner ;   public class LightOnNight { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ;   int n = scan . nextInt ( ) * scan . nextInt ( ) ; int count = 0 ;   for ( int i = 0 ; i < n ; i ++ ) { int sum = scan . nextInt ( ) + scan . nextInt ( ) ;   if ( sum > 0 ) count ++ ; } System . out . println ( count ) ; } }"],"bleu":0.2524521002642267,"rouge_l":0.4768002660901381}
{"id":506,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int total = sc . nextInt ( ) ; System . out . println ( total ) ; } }"],"references":["import java . util . * ;   public class Main {   public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int ans = ( n \/ 2 ) * 3 ; System . out . println ( ans ) ;   } }"],"bleu":0.6521991982252803,"rouge_l":0.7998394434037999}
{"id":507,"predictions":["import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; System . out . println ( n - 1 ) ; } }"],"references":["import java . util . * ; public class MyClass { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int s = 0 ; while ( n \/ 10 > 0 ) { while ( n > 0 ) { s = s + n % 10 ; n = n \/ 10 ; } n = s ; s = 0 ; } System . out . println ( n ) ; } }"],"bleu":0.34065117844263193,"rouge_l":0.6252562525625255}
{"id":508,"predictions":["import java . util . * ; import java . io . * ;   public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; }   void run ( FastScanner in , PrintWriter out ) {   int n = in . nextInt ( ) ; int [ ] a = in . nextIntArray ( n ) ;   double [ ] a = new double [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = in . nextDouble ( ) ; }   if ( 2 * a [ 0 ] > d ) { out . println ( 2 * a [ 0 ] ) ; } else { for ( int i = 1 ; i < n ; i ++ ) { if ( a [ i ] < d ) { out . println ( 2 * a [ i ] ) ; } else { if ( a [ i ] > d ) { out . println ( 2 * a [ i ] ) ; } } else { if ( a [ i ] > d ) { out . println ( 2 * d ) ; } else { out . println ( d * a [ i ] ) ; } } }     out . flush ( ) ; }    "],"references":["import java . util . * ;   public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int t = in . nextInt ( ) ; while ( t -- > 0 ) { int a = in . nextInt ( ) ; int b = in . nextInt ( ) ;   int squareSide = Math . max ( Math . max ( a , b ) , 2 * Math . min ( a , b ) ) ; System . out . println ( squareSide * squareSide ) ; } }    }     "],"bleu":0.1866579598496755,"rouge_l":0.4508860984949684}
{"id":509,"predictions":["import java . util . * ; import java . lang . * ; import java . io . * ;   public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) {"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;    public class winner {   static class Fs { private BufferedReader reader ; private StringTokenizer stt ; public Fs ( ) { reader = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } public String nextLine ( ) { try { return reader . readLine ( ) ; } catch ( IOException e ) { return null ; } } public String nextString ( ) { while ( stt == null || ! stt . hasMoreTokens ( ) ) { stt = new StringTokenizer ( nextLine ( ) ) ; } return stt . nextToken ( ) ; } public int nextInt ( ) { return Integer . parseInt ( nextString ( ) ) ; } public long nextLong ( ) { return Long . parseLong ( nextString ( ) ) ; } }   static Fs scan = new Fs ( ) ;   public static void main ( String [ ] args ) { int n = scan . nextInt ( ) ; long arr [ ] = new long [ n + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) { int x = scan . nextInt ( ) ; arr [ x ] = i ; } long Lside = 0 ; long Rside = 0 ; int x = scan . nextInt ( ) ; for ( int i = 0 ; i < x ; i ++ ) { int num = scan . nextInt ( ) ; long index = arr [ num ] + 1 ; Lside += index ; Rside += ( n - index ) + 1 ; } System . out . print ( Lside + \" ▁ \" + Rside ) ;   }   }"],"bleu":0.00013681030008106068,"rouge_l":0.1286216321749317}
{"id":510,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a [ ] = new int [ 26 ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } long count = 0 ; for ( int i = 0 ; i < 26 ; i ++ ) { if ( ( a [ i ] - 1 ) \/ 2 ] <= a [ i ] ) count ++ ; } System . out . println ( count ) ; } }"],"references":["import java . util . * ; import java . io . * ; public class Solution { public static void main ( String [ ] args ) throws IOException {"],"bleu":0.1397469740184406,"rouge_l":0.28683385579937304}
{"id":511,"predictions":["import java . io . * ; import java . util . StringTokenizer ;"],"references":["import java . util . * ; import java . io . * ; import java . math . BigInteger ; import java . text . * ; public class Main { static long mod = 1000_000_007 ; static long mod1 = 998244353 ; static boolean fileIO = false ; static boolean memory = true ; static FastScanner f ; static PrintWriter pw ; static double eps = ( double ) 1e-6 ; static FileWriter fw ; static long oo = Long . MAX_VALUE ;"],"bleu":0.005436834017431453,"rouge_l":0.21466275659824047}
{"id":512,"predictions":["import java . util . Scanner ;   public class [ ] { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; for ( int i = 1 ; i <= 7 ; i ++ ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; if ( Math . abs ( a - i ) < Math . abs ( b - i ) ) { c ++ ; } else if ( Math . abs ( b - i ) < Math . abs ( b - i ) ) { c ++ ; } } System . out . println ( c ) ;   } }"],"references":["import java . util . * ;   public class Main {   public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int a = scanner . nextInt ( ) ; int b = scanner . nextInt ( ) ;   int aWin = 0 , draw = 0 , bWin = 0 ; for ( int i = 1 ; i <= 6 ; i ++ ) { int d1 = Math . abs ( a - i ) ; int d2 = Math . abs ( b - i ) ; if ( d1 < d2 ) aWin ++ ; else if ( d2 < d1 ) bWin ++ ; else draw ++ ; } System . out . println ( aWin + \" ▁ \" + draw + \" ▁ \" + bWin ) ;   } }"],"bleu":0.5064919472085243,"rouge_l":0.6664565605630844}
{"id":513,"predictions":["  import java . util . * ;    public class Practise {  "],"references":["import java . util . Scanner ;   public class A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; sc . nextLine ( ) ; for ( int i = 0 ; i < t ; i ++ ) { long a = sc . nextLong ( ) ;"],"bleu":0.0021292806423578916,"rouge_l":0.18435191403626597}
{"id":514,"predictions":["import java . util . * ; import java . io . * ;   public class Main {   public static void main ( String [ ] args ) { FastScanner in = new FastScanner ( ) ; PrintWriter out = new PrintWriter ( System . out ) ;"],"references":["import java . util . * ;   public class bs { static int [ ] [ ] psum ; public static void precal ( String str ) {   for ( int i = 0 ; i < str . length ( ) ; i ++ ) { char ch = str . charAt ( i ) ; psum [ i + 1 ] [ ch - ' a ' ] ++ ;   for ( int j = 0 ; j < 26 ; j ++ ) { psum [ i + 1 ] [ j ] += psum [ i ] [ j ] ; } } } public static void main ( String [ ] args ) { Scanner scn = new Scanner ( System . in ) ;"],"bleu":0.08644774248803903,"rouge_l":0.3030804902285525}
{"id":515,"predictions":["import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; char [ ] s = sc . next ( ) . toCharArray ( ) ; int a = 0 , b = 0 , cur = 0 ; for ( int i = 0 ; i < s . length ; i ++ ) { if ( s [ i ] == ' Q ' ) { a ++ ; b += a ; } else if ( s [ i ] == ' Q ' ) { b += b ; cur += a ; b += b ; } else { cur += b ; } System . out . println ( cur ) ; } } }"],"references":["import java . util . Scanner ;   public class A894 { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String word = scanner . next ( ) ; int res = 0 ; for ( int i = 0 ; i < word . length ( ) ; i ++ ) {   if ( word . charAt ( i ) == ' A ' ) { int l = 0 , r = 0 ; for ( int j = i - 1 ; j >= 0 ; j -- ) { if ( word . charAt ( j ) == ' Q ' ) l ++ ; } for ( int j = i + 1 ; j < word . length ( ) ; j ++ ) { if ( word . charAt ( j ) == ' Q ' ) r ++ ; } res += l * r ; } } System . out . println ( res ) ; } }"],"bleu":0.34074478033057354,"rouge_l":0.5360916362200059}
{"id":516,"predictions":["import java . util . Scanner ;   public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int a = in . nextInt ( ) ; int b = in . nextInt ( ) ; int m = in . nextInt ( ) ; int r = in . nextInt ( ) ; int counter = 1 ; for ( int i = 1 ; i <= r ; i ++ ) { long sub = ( ( a * r + b ) % m ;"],"references":["import java . util . Scanner ;   public class B172 {   public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int A = in . nextInt ( ) ; int B = in . nextInt ( ) ; int M = in . nextInt ( ) ; int x = in . nextInt ( ) ; int [ ] seen = new int [ M ] ; int index = 1 ; while ( seen [ x ] == 0 ) { seen [ x ] = index ; index ++ ; x = ( A * x + B ) % M ; } int answer = index - seen [ x ] ; System . out . println ( answer ) ; }   }"],"bleu":0.42510261725015097,"rouge_l":0.6406898340248962}
{"id":517,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . HashSet ; import java . util . List ; import java . util . Map ; import java . util . StringTokenizer ;   public class Main {  "],"references":["import java . util . * ; public class drazil_date { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int x = in . nextInt ( ) ; int y = in . nextInt ( ) ; int s = in . nextInt ( ) ; int min = Math . abs ( x ) + Math . abs ( y ) ; if ( s < min || ( s - min ) % 2 != 0 ) System . out . println ( \" No \" ) ; else System . out . println ( \" Yes \" ) ; }   }"],"bleu":0.05741202276887328,"rouge_l":0.22063217487026263}
{"id":518,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; System . out . println ( 4 - a ) ; } }"],"references":["import java . util . Scanner ;   public class IsYourHorseShoeOnOtherRoof {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; boolean visited [ ] = new boolean [ 4 ] ; long arr [ ] = new long [ 4 ] ; int repeated = 0 ; for ( int i = 0 ; i < 4 ; i ++ ) arr [ i ] = sc . nextLong ( ) ; for ( int i = 0 ; i < 4 ; i ++ ) { long j = arr [ i ] ; for ( int k = i + 1 ; k < 4 ; k ++ ) { if ( j == arr [ k ] && visited [ k ] == false ) { visited [ k ] = true ; repeated ++ ; } } } System . out . println ( repeated ) ; } }"],"bleu":0.12210977818717957,"rouge_l":0.42272489539748953}
{"id":519,"predictions":["import java . util . * ; import java . lang . * ; import java . io . * ;   public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) {"],"references":["import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . StringTokenizer ; import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . InputStream ;   public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; TaskA solver = new TaskA ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; }   static class TaskA { public void solve ( int testNumber , InputReader in , PrintWriter out ) { int n = in . nextInt ( ) ; String s = in . next ( ) ; int ans = 0 ; for ( int i = 3 ; i < s . length ( ) ; i ++ ) { if ( i % n == 0 && s . charAt ( i - 1 ) == s . charAt ( i - 2 ) && s . charAt ( i - 1 ) == s . charAt ( i - 3 ) ) ans ++ ; } out . println ( ans ) ; }   }   static class InputReader { private StringTokenizer tokenizer ; private BufferedReader reader ;   public InputReader ( InputStream inputStream ) { reader = new BufferedReader ( new InputStreamReader ( inputStream ) ) ; }   private void fillTokenizer ( ) { if ( tokenizer == null || ! tokenizer . hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader . readLine ( ) ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } }   public String next ( ) { fillTokenizer ( ) ; return tokenizer . nextToken ( ) ; }   public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   } }  "],"bleu":0.00004260316850996586,"rouge_l":0.12232902288915012}
{"id":520,"predictions":["import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;  "],"references":["import java . util . * ; import java . lang . * ; import java . io . * ; import java . math . BigDecimal ;   public class R108C { public static void main ( String [ ] args ) throws java . lang . Exception { InputReader in = new InputReader ( System . in ) ; PrintWriter w = new PrintWriter ( System . out ) ; int n = in . nextInt ( ) , q = in . nextInt ( ) ; char [ ] ca1 = in . next ( ) . toCharArray ( ) ;   while ( q -- > 0 ) { int l = in . nextInt ( ) - 1 , r = in . nextInt ( ) - 1 ; char [ ] ca = Arrays . copyOfRange ( ca1 , 0 , n ) ; int cur = l , d = 1 ; int [ ] a = new int [ 10 ] ; int prev = - 1 ; while ( cur >= l && cur <= r ) {"],"bleu":0.0175476568858704,"rouge_l":0.25003202254387086}
{"id":521,"predictions":["import java . io . * ; import java . util . * ;   public class Chewbacca { public static void main ( String args [ ] ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter pw = new PrintWriter ( new OutputStreamWriter ( System . out ) ) ; int t = Integer . parseInt ( br . readLine ( ) ) ; while ( t -- > 0 ) { StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int N = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] arr = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < N ; i ++ ) { arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } for ( int i = 0 ; i < N ; i ++ ) { System . out . print ( arr [ i ] + \" ▁ \" ) ; } System . out . println ( ) ; for ( int i = 0 ; i < N ; i ++ ) { arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } } pw . println ( \" \" ) ; for ( int i = 0 ; i < N ; i ++ ) { System . out . print ( arr [ i ] + \" ▁ \" ) ; } pw . flush ( ) ; } }"],"references":["import java . io . * ; import java . util . Scanner ;   public class Main {   public static void main ( String [ ] args ) { Scanner in = new Scanner ( new BufferedReader ( new InputStreamReader ( System . in ) ) ) ; PrintWriter out = new PrintWriter ( new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ) ; int n = in . nextInt ( ) , m = 0 , mx = 0 ; int [ ] digits = new int [ 10 ] ; while ( n > 0 ) { int cur = n % 10 ; mx = Math . max ( mx , cur ) ; digits [ m ++ ] = cur ; n \/= 10 ; }   out . println ( mx ) ; while ( true ) { int num = 0 ; boolean flag = false ; for ( int i = 0 , j = 1 ; i < m ; i ++ , j *= 10 ) { if ( digits [ i ] > 0 ) { flag = true ; digits [ i ] -- ; num += j ; } } if ( ! flag ) break ; out . print ( num + \" ▁ \" ) ; }   out . flush ( ) ; out . close ( ) ; in . close ( ) ; } }"],"bleu":0.30529454199802936,"rouge_l":0.508118548922557}
{"id":522,"predictions":["import java . util . * ; import java . io . * ;   public class Main { public static void main ( String [ ] args ) throws IOException {"],"references":["import java . io . * ; import java . util . * ; import java . math . BigInteger ;   public class test1 { static class sort implements Comparator < int [ ] > { public int compare ( int [ ] a , int [ ] b ) {"],"bleu":0.28538604269029305,"rouge_l":0.5022455089820359}
{"id":523,"predictions":["import java . util . * ;   public class Main {   public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ;   int n = in . nextInt ( ) ;   in . nextLine ( ) ; String s = in . nextLine ( ) ;   int [ ] a = new int [ n ] ; for ( int i = 0 ; i < a . length ; i ++ ) { a [ i ] = in . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == ' ( ' ) ' ) { a [ i ] = 1 ; } else { if ( s . charAt ( i ) == ' ) { a [ i ] = i ; } } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == ' ( ' ) { if ( s . charAt ( i ) == ' ) { ans ++ ; ans ++ ; } else { ans ++ ; } } } System . out . println ( ans ) ; }   }"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . math . BigInteger ;   import java . util . * ; import javafx . util . Pair ;   public class Main {   public static void main ( String args [ ] ) { FastScanner input = new FastScanner ( ) ; String s = input . next ( ) ; int ans = 0 ; LinkedList < Character > q = new LinkedList < > ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( q . isEmpty ( ) ) { q . add ( s . charAt ( i ) ) ; } else if ( q . peekLast ( ) == ' ( ' && s . charAt ( i ) == ' ) ' ) { ans += 2 ; q . pollLast ( ) ; } else q . add ( s . charAt ( i ) ) ; } System . out . println ( ans ) ; }   static class FastScanner {   BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( \" \" ) ;   String next ( ) { while ( ! st . hasMoreTokens ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   long nextLong ( ) {   return Long . parseLong ( next ( ) ) ; }   double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; }   String nextLine ( ) throws IOException { return br . readLine ( ) ; } }   }"],"bleu":0.27120417645607225,"rouge_l":0.40094822477237224}
{"id":524,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ;   public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader input = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( input . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int i = 0 ; for ( i = 0 ; i < n ; i ++ ) { count += arr [ i ] ; } System . out . println ( i ) ; } }"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . Arrays ;    public class CF677BVanyaAndFoodProcessor {   static BufferedReader in = new BufferedReader ( new InputStreamReader ( System . in ) ) ; static PrintWriter out = new PrintWriter ( System . out ) ;   public static void main ( String [ ] args ) throws IOException { int [ ] l1 = readArray ( ) ; int n = l1 [ 0 ] ; int h = l1 [ 1 ] ; int k = l1 [ 2 ] ; int [ ] pieces = readArray ( ) ; long seconds = 0 ; int content = 0 ; int i = 0 ; while ( true ) { while ( i < n && content + pieces [ i ] <= h ) { content += pieces [ i ++ ] ; } if ( i == n ) { seconds += Math . ceil ( ( double ) content \/ ( double ) k ) ; break ; } else if ( content < k ) { seconds ++ ; content = 0 ; } else { seconds += ( long ) ( content \/ k ) ; content %= k ; }   }   out . println ( seconds ) ; out . close ( ) ; }   private static String read ( ) throws IOException { return in . readLine ( ) ; }   private static int readInt ( ) throws IOException { return Integer . parseInt ( in . readLine ( ) ) ; }   private static int [ ] readArray ( ) throws IOException { String [ ] line = in . readLine ( ) . split ( \" \\\\ s \" ) ; int [ ] a = Arrays . stream ( line ) . mapToInt ( Integer :: parseInt ) . toArray ( ) ; return a ; }   private static int [ ] readSortedArray ( ) throws IOException { String [ ] line = in . readLine ( ) . split ( \" \\\\ s \" ) ; int [ ] a = Arrays . stream ( line ) . mapToInt ( Integer :: parseInt ) . sorted ( ) . toArray ( ) ; return a ; } }"],"bleu":0.15807372684729437,"rouge_l":0.3532639065278131}
{"id":525,"predictions":["import java . util . Scanner ;   public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = scanner . nextInt ( ) ; } int max = 0 , max = Integer . MIN_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { max = Math . max ( max , a [ i ] ) ; } for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] < a [ i ] ) { max = Math . max ( max , a [ i ] ) ; } } System . out . println ( max ) ; } }"],"references":["import javax . print . attribute . standard . PrinterMessageFromOperator ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . net . Inet4Address ; import java . util . * ; public class Main { static long dp [ ] [ ] = new long [ 300 ] [ 300 ] ;   static long ways ( int i , int n , int cuts ) { if ( i > n ) return 0 ; if ( cuts == 0 ) return 1 ; if ( dp [ i ] [ cuts ] != 0 ) return dp [ i ] [ cuts ] ; long ans = 0 ; for ( int j = i + 1 ; j < n ; j ++ ) { ans += ( ways ( j , n , cuts - 1 ) ) ; } return dp [ i ] [ cuts ] = ans ; }   public static void main ( String [ ] args ) { FastScanner sc = new FastScanner ( ) ;"],"bleu":0.20102176234263347,"rouge_l":0.3379208863498658}
{"id":526,"predictions":["import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . * ; import java . io . BufferedReader ; import java . io . InputStreamReader ;   public class First {   public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; TaskB solver = new TaskB ( ) ;"],"references":["import java . lang . * ; import java . util . * ;   public class Abhishek {   public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; String s = sc . nextLine ( ) ; char [ ] arr = new char [ 4 ] ; String t = \" ! \" + s ; for ( int i = 1 ; i <= s . length ( ) ; i ++ ) { if ( t . charAt ( i ) != ' ! ' ) { arr [ i % 4 ] = t . charAt ( i ) ; } }   int r = 0 , b = 0 , y = 0 , g = 0 ; for ( int i = 1 ; i <= s . length ( ) ; i ++ ) { if ( t . charAt ( i ) == ' ! ' ) { char k = arr [ i % 4 ] ; switch ( k ) { case ' Y ' : y ++ ; break ; case ' B ' : b ++ ; break ; case ' R ' : r ++ ; break ; case ' G ' : g ++ ; break ; } } } System . out . println ( r + \" ▁ \" + b + \" ▁ \" + y + \" ▁ \" + g ) ; } }"],"bleu":0.06490382351953687,"rouge_l":0.2488759367194005}
{"id":527,"predictions":["import java . util . Scanner ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int count = 0 ; for ( int i = 1 ; i <= 1 ; i ++ ) { if ( i == 5 ) { count += 5 - i ; c = i % 5 ; } else { count += i \/ 5 ; } } System . out . println ( c ) ; } }"],"references":["import java . util . * ; import java . math . * ; public class AlyonaAndNumbers { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; long out = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { long num = i + m ; out += ( long ) num \/ 5 - i \/ 5 ; } System . out . println ( out ) ; } }"],"bleu":0.5480191835406298,"rouge_l":0.7497206703910615}
{"id":528,"predictions":["import java . util . * ; import java . io . * ;   public class A {   public static void main ( String [ ] args ) { FastScanner in = new FastScanner ( ) ; PrintWriter out = new PrintWriter ( System . out ) ; int t = 1 ;"],"references":["import java . io . BufferedReader ; import java . io . InputStreamReader ;   public class SherlockAndGF { static int n = 1000000 ;   static int [ ] sieve = new int [ n + 1 ] ;   static void createSieve ( ) { sieve [ 0 ] = sieve [ 1 ] = 0 ; for ( int i = 2 ; i <= n ; i ++ ) { sieve [ i ] = 1 ; } for ( int i = 2 ; i * i <= n ; i ++ ) { if ( sieve [ i ] == 1 ) { for ( int j = i * i ; j <= n ; j = j + i ) { sieve [ j ] = 0 ; } } } } public static void main ( String [ ] args ) { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; try { StringBuilder sb = new StringBuilder ( ) ; createSieve ( ) ; int X = Integer . parseInt ( br . readLine ( ) . trim ( ) ) ; int nonPrime = 0 ; int prime = 0 ; for ( int i = 2 ; i <= X + 1 ; i ++ ) { if ( sieve [ i ] == 1 ) { prime ++ ; } else { nonPrime ++ ; } } if ( nonPrime == 0 ) { System . out . println ( 1 ) ; } else { System . out . println ( 2 ) ; } for ( int i = 2 ; i <= X + 1 ; i ++ ) { if ( sieve [ i ] == 1 ) { System . out . print ( 1 + \" ▁ \" ) ; } else { System . out . print ( 2 + \" ▁ \" ) ; } } } catch ( Exception e ) { e . printStackTrace ( ) ; }   }   }"],"bleu":0.001863130314218775,"rouge_l":0.19156377132253233}
{"id":529,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int arr [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = sc . nextInt ( ) ; int max = - 1 ; for ( int i = 0 ; i < arr . length ; i ++ ) { if ( arr [ i ] > max ) { max = arr [ i ] ; } else if ( arr [ i ] > max ) { max ++ ; } } } System . out . println ( max ) ; } }"],"references":["import java . util . Scanner ;   public class LocalExtrema { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int count = 0 ; int n1 [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { n1 [ i ] = sc . nextInt ( ) ; } for ( int i = 1 ; i < n - 1 ; i ++ ) { if ( n1 [ i ] < n1 [ i - 1 ] && n1 [ i ] < n1 [ i + 1 ] || n1 [ i ] > n1 [ i - 1 ] && n1 [ i ] > n1 [ i + 1 ] ) count ++ ; } System . out . println ( count ) ; } }"],"bleu":0.574245726344367,"rouge_l":0.7152113545202099}
{"id":530,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . ArrayList ; import java . util . List ; import java . util . StringTokenizer ;   public class Main { public static void main ( String [ ] args ) { FastScanner fs = new FastScanner ( ) ;"],"references":["import java . util . Scanner ;   public class RobotTask { public static int testCase ( int n , int a [ ] ) { int collected = 0 ; int direction = - 1 ; boolean b [ ] = new boolean [ a . length ] ; while ( collected < n ) { for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] <= collected && b [ i ] != true ) { collected ++ ; b [ i ] = true ; } if ( i == n - 1 ) { direction ++ ; } } if ( collected != n ) for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( a [ i ] <= collected && b [ i ] != true ) { collected ++ ; b [ i ] = true ; } if ( i == 0 ) { direction ++ ; } } } return direction ; } public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } System . out . println ( testCase ( n , a ) ) ; } }"],"bleu":0.01829968438259478,"rouge_l":0.1546734283465944}
{"id":531,"predictions":["import java . util . * ; import java . util . Scanner ; import java . io . * ; import javax . lang . model . util . ElementScanner6 ; import static java . lang . System . out ; import java . util . Stack ; import java . util . Queue ; import java . util . LinkedList ;   public class B545 {   static int mod = ( int ) ( 1e9 + 7 ) ; static long MOD = ( long ) ( 1e9 + 7 ) ; static FastReader in = new FastReader ( ) ; static PrintWriter pr = new PrintWriter ( new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ) ; public static void main ( String args [ ] ) {   int tc = 1 ;"],"references":["import java . util . * ; public class java1 { public static void main ( String [ ] agrs ) { int [ ] t = new int [ 2 ] ; t [ 0 ] = 0 ; t [ 1 ] = 0 ; Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) ; for ( int i = 1 ; i <= n ; i ++ ) t [ in . nextInt ( ) ] = i ; System . out . println ( t [ 0 ] < t [ 1 ] ? t [ 0 ] : t [ 1 ] ) ; } }"],"bleu":0.16508831690886702,"rouge_l":0.2709047075244258}
{"id":532,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ;"],"references":["import java . util . Arrays ; import java . util . Scanner ;   public class Bookshelf { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int testcases = sc . nextInt ( ) ; sc . nextLine ( ) ;   for ( int i = 0 ; i < testcases ; i ++ ) { int n = sc . nextInt ( ) ; sc . nextLine ( ) ; String array = sc . nextLine ( ) ; int [ ] stream = Arrays . stream ( array . split ( \" ▁ \" ) ) . mapToInt ( Integer :: parseInt ) . toArray ( ) ; output ( n , stream ) ; } }   private static void output ( int n , int [ ] stream ) { int first = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( stream [ i ] == 1 ) { first = i ; i = n ; } } int last = - 1 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( stream [ i ] == 1 ) { last = i ; i = 0 ; } } int count = 0 ; if ( first == last ) { count = 0 ; } else { for ( int i = first ; i < last ; i ++ ) if ( stream [ i ] == 0 ) count ++ ; } System . out . println ( count ) ; } }"],"bleu":7.481553711463744e-7,"rouge_l":0.0720843559676393}
{"id":533,"predictions":["import java . util . * ; import java . lang . * ; import java . io . * ; public class Codechef { public static void main ( String [ ] args ) throws java . lang . Exception { Scanner scanner = new Scanner ( System . in ) ; int t = scanner . nextInt ( ) ;"],"references":["import java . io . * ; import java . util . * ; public class Practice1 { public static void main ( String args [ ] ) { FastReader input = new FastReader ( ) ; PrintWriter out = new PrintWriter ( System . out ) ; int T = input . nextInt ( ) ; while ( T -- > 0 ) { long a = input . nextInt ( ) ; long b = input . nextInt ( ) ; long p = a * b ; long c = ( long ) Math . cbrt ( p ) ; long p1 = ( c * c * c ) ; if ( p1 != p ) { out . println ( \" NO \" ) ; } else { if ( a % c == 0 && b % c == 0 ) { out . println ( \" YES \" ) ; } else { out . println ( \" NO \" ) ; } } } out . close ( ) ; } static class FastReader { BufferedReader br ; StringTokenizer st ;   public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; }   String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   long nextLong ( ) {   return Long . parseLong ( next ( ) ) ; }   double nextDouble ( ) {   return Double . parseDouble ( next ( ) ) ; }   String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }"],"bleu":0.0046437474832604405,"rouge_l":0.17151282402962556}
{"id":534,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ;"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . * ; public class C { static class FastScanner { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( \" \" ) ;   String next ( ) { while ( ! st . hasMoreTokens ( ) ) try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   int [ ] nextArray ( int n ) { int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = nextInt ( ) ; return a ; }   long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } } static class FastWriter extends PrintWriter { FastWriter ( ) { super ( System . out ) ; }   void println ( int [ ] array ) { for ( int i = 0 ; i < array . length ; i ++ ) { print ( array [ i ] + \" ▁ \" ) ; } println ( ) ; }   void println ( long [ ] array ) { for ( int i = 0 ; i < array . length ; i ++ ) { print ( array [ i ] + \" ▁ \" ) ; } println ( ) ; } } public static void main ( String [ ] args ) {"],"bleu":7.928601015218321e-7,"rouge_l":0.10571923743500866}
{"id":535,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . * ;   public class Main { static class pair implements Comparable < pair > { int x ; int y ;   public pair ( int x , int y ) { this . x = x ; this . y = y ; }   @ Override public int compareTo ( pair o ) {"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . Random ; import java . util . StringTokenizer ;   public class Main implements Runnable {   long INF = ( long ) 1e9 + 9 ;   private void solve ( ) throws IOException { int n = nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; ++ i ) { a [ i ] = nextInt ( ) ; }"],"bleu":0.36315295471952974,"rouge_l":0.5049347341610951}
{"id":536,"predictions":["import java . util . * ;   public class Main {   public static void main ( String [ ] args ) {"],"references":["import java . lang . * ; import java . util . * ; import java . util . stream . Collectors ; import java . io . * ; public class Cat_Furrier { public static void main ( String [ ] args ) {"],"bleu":0.30890589702645,"rouge_l":0.577027027027027}
{"id":537,"predictions":["import java . util . HashMap ; import java . util . Scanner ;   public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % 2 == 0 ) { count ++ ; } } System . out . println ( count ) ; } }"],"references":["import java . util . * ; import java . io . * ;   public class solution { public static void main ( String args [ ] ) { Scanner s = new Scanner ( System . in ) ; int n = s . nextInt ( ) , k = s . nextInt ( ) ; int freq [ ] = new int [ k + 1 ] ; for ( int i = 0 ; i <= k ; i ++ ) freq [ i ] = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int temp = s . nextInt ( ) ; freq [ temp ] ++ ; } int cnt = 0 , ans = 0 ; int ava = ( int ) Math . ceil ( ( double ) n \/ 2 ) ; for ( int i = 1 ; i <= k ; i ++ ) { if ( ( freq [ i ] & 1 ) == 0 ) ans += freq [ i ] ; else { ans += freq [ i ] - 1 ; cnt ++ ; } } ans = ans + ( int ) Math . ceil ( ( double ) cnt \/ 2 ) ; System . out . println ( ans ) ;    } }"],"bleu":0.30360079235907755,"rouge_l":0.5865384615384616}
{"id":538,"predictions":["  import java . util . * ;    public class Practise {  "],"references":["import java . util . * ; import java . io . * ; import java . math . * ;   public class Practice   { static FastReader sc = new FastReader ( ) ; public static void main ( String [ ] args ) { int ttt = 1 ;"],"bleu":0.02384955885495908,"rouge_l":0.27452745274527457}
{"id":539,"predictions":["import java . util . * ; import java . util . Scanner ; import java . io . * ; import javax . lang . model . util . ElementScanner6 ; import static java . lang . System . out ; import java . util . Stack ; import java . util . Queue ; import java . util . LinkedList ;   public class B129 {   static int mod = ( int ) ( 1e9 + 7 ) ; static long MOD = ( long ) ( 1e9 + 7 ) ; static FastReader in = new FastReader ( ) ; static PrintWriter pr = new PrintWriter ( new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ) ; public static void main ( String args [ ] ) {   int n = 1 ;"],"references":["import java . util . Scanner ;   public class A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int count = 0 ; char ch [ ] = s . toCharArray ( ) ; for ( int i = 0 ; i < s . length ( ) ; i += 2 ) { if ( s . charAt ( i ) == s . charAt ( i + 1 ) ) { count ++ ; if ( s . charAt ( i ) == ' a ' ) { ch [ i ] = ' b ' ; } else { ch [ i ] = ' a ' ; } } else { continue ; } } System . out . println ( count ) ; System . out . println ( ch ) ; } }"],"bleu":0.13451207071969196,"rouge_l":0.2564339177688916}
{"id":540,"predictions":["import java . io . * ; import java . util . * ;   public class Main { public static void main ( String [ ] args ) throws IOException {"],"references":["import java . util . * ; import java . io . * ; import java . math . BigInteger ;   public class StadiumandGames { static BigInteger isPerfectSq ( BigInteger n ) { BigInteger lo = BigInteger . ONE ; BigInteger hi = new BigInteger ( n . toString ( ) ) ; BigInteger sqrt = BigInteger . ZERO ; while ( lo . compareTo ( hi ) <= 0 ) { BigInteger mid = lo . add ( hi ) ; mid = mid . divide ( BigInteger . valueOf ( 2 ) ) ; if ( mid . multiply ( mid ) . compareTo ( n ) > 0 ) hi = mid . subtract ( BigInteger . ONE ) ; else { lo = mid . add ( BigInteger . ONE ) ; sqrt = mid ; } } return sqrt . multiply ( sqrt ) . equals ( n ) ? sqrt : BigInteger . ZERO ; } private static void solve ( ) { long X = nextLong ( ) ; TreeSet < BigInteger > ans = new TreeSet < > ( ) ; for ( int i = 0 ; i < 70 ; i ++ ) { BigInteger term1 = BigInteger . valueOf ( 2 ) . pow ( i + 1 ) . subtract ( BigInteger . valueOf ( 3 ) ) ; BigInteger term2 = isPerfectSq ( term1 . multiply ( term1 ) . add ( BigInteger . valueOf ( 8L * X ) ) ) ;   BigInteger numer = term2 . subtract ( term1 ) ; BigInteger div [ ] = numer . divideAndRemainder ( BigInteger . valueOf ( 2 ) ) ; if ( ! term2 . equals ( BigInteger . ZERO ) && numer . compareTo ( BigInteger . ZERO ) >= 0 && div [ 1 ] . equals ( BigInteger . ZERO ) ) { BigInteger m = div [ 0 ] ; BigInteger answer = m . multiply ( BigInteger . valueOf ( 2 ) . pow ( i ) ) ;"],"bleu":0.00002035264709232377,"rouge_l":0.10498353786291527}
{"id":541,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ;"],"references":["import java . util . * ;   public class EduRound25B { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; char [ ] [ ] a = new char [ 10 ] [ 10 ] ; for ( int i = 0 ; i < 10 ; i ++ ) { a [ i ] = scanner . next ( ) . toCharArray ( ) ; } for ( int i = 0 ; i < 10 ; i ++ ) { for ( int j = 0 ; j < 10 ; j ++ ) { if ( a [ i ] [ j ] != ' . ' ) continue ; a [ i ] [ j ] = ' X ' ; int countX = 0 ; int countY = 0 ; for ( int k = 0 ; k < 10 ; k ++ ) { if ( a [ i ] [ k ] == ' X ' ) { countX ++ ; } else { countX = 0 ; } if ( a [ k ] [ j ] == ' X ' ) { countY ++ ; } else { countY = 0 ; } if ( countX == 5 || countY == 5 ) { System . out . println ( \" YES \" ) ; return ; } } int count = 0 ; for ( int k = - 5 ; k < 5 ; k ++ ) { int r = i + k ; int c = j + k ; if ( r < 0 || c < 0 ) continue ; if ( r > 9 || c > 9 ) break ; if ( a [ r ] [ c ] == ' X ' ) { count ++ ; } else { count = 0 ; } if ( count == 5 ) { System . out . println ( \" YES \" ) ; return ; } } count = 0 ; for ( int k = - 5 ; k < 5 ; k ++ ) { int r = i - k ; int c = j + k ; if ( r > 9 || c < 0 ) continue ; if ( r < 0 || c > 9 ) break ; if ( a [ r ] [ c ] == ' X ' ) { count ++ ; } else { count = 0 ; } if ( count == 5 ) { System . out . println ( \" YES \" ) ; return ; } } a [ i ] [ j ] = ' . ' ; } } System . out . println ( \" NO \" ) ; } }"],"bleu":4.3662591465923475e-11,"rouge_l":0.03753426190076634}
{"id":542,"predictions":["import java . util . * ; import java . io . * ;  "],"references":["import java . io . * ; import java . util . * ; public class Asd { static PrintWriter w = new PrintWriter ( System . out ) ; static FastScanner s = new FastScanner ( ) ;   public static void main ( String [ ] args ) {"],"bleu":0.07642628699076812,"rouge_l":0.35866123925825416}
{"id":543,"predictions":["import java . util . Scanner ;   public class A [ ] { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int t = in . nextInt ( ) ; while ( t -- > 0 ) { int n = in . nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = in . nextInt ( ) ; } in . close ( ) ; int count = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] % 2 == 0 ) { count ++ ; } else { count ++ ; } } System . out . println ( count ) ; } } }"],"references":["import java . util . ArrayList ; import java . util . Scanner ;   public class A1462 { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int t = scanner . nextInt ( ) ; ArrayList < Integer > list = new ArrayList < > ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int n = scanner . nextInt ( ) ; for ( int j = 0 ; j < n ; j ++ ) { int b = scanner . nextInt ( ) ; list . add ( b ) ; } if ( n % 2 == 0 ) { for ( int j = 0 ; j < n \/ 2 ; j ++ ) { System . out . print ( list . get ( j ) + \" ▁ \" + list . get ( n - 1 - j ) + \" ▁ \" ) ; } System . out . print ( \" \\n \" ) ; } else { for ( int j = 0 ; j < n \/ 2 ; j ++ ) { System . out . print ( list . get ( j ) + \" ▁ \" + list . get ( n - 1 - j ) + \" ▁ \" ) ; } System . out . print ( list . get ( n \/ 2 ) + \" \\n \" ) ; } list . clear ( ) ; } } }"],"bleu":0.26132212162944884,"rouge_l":0.4638783269961977}
{"id":544,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . * ;   public class codeforces {   static class FastScanner { BufferedReader br ; StringTokenizer st ;   public FastScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; }   String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   long nextLong ( ) { return Long . parseLong ( next ( ) ) ; }   double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; }   String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } }   public static void main ( String [ ] args ) throws IOException {"],"references":["import java . util . Scanner ;   public class Solution { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } if ( n > 1 ) { for ( int i = 0 ; i < n ; i ++ ) { int minIdx = i ; for ( int j = i + 1 ; j < n ; j ++ ) { if ( a [ minIdx ] > a [ j ] ) { minIdx = j ; } } int temp = a [ i ] ; a [ i ] = a [ minIdx ] ; a [ minIdx ] = temp ; } } for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( a [ i ] + \" ▁ \" ) ; } } }  "],"bleu":0.1477533632323994,"rouge_l":0.3066706685675696}
{"id":545,"predictions":["import java . util . * ; import java . io . * ; public class Main { static class FastReader { BufferedReader br ; StringTokenizer st ; public FastReader ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = \" \" ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } }   public static void main ( String [ ] args ) {"],"references":["import java . util . * ; import java . io . * ; public class MyClass { public static void main ( String args [ ] ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int n = Integer . parseInt ( br . readLine ( ) ) ; int count0left = 0 ; int count1left = 0 ; int count0right = 0 ; int count1right = 0 ; while ( n -- > 0 ) { String s [ ] = br . readLine ( ) . split ( \" ▁ \" ) ; int l = Integer . parseInt ( s [ 0 ] ) ; int r = Integer . parseInt ( s [ 1 ] ) ; if ( l == 0 ) { count0left = count0left + 1 ; } else if ( l == 1 ) { count1left = count1left + 1 ; } if ( r == 0 ) { count0right = count0right + 1 ; } else if ( r == 1 ) { count1right = count1right + 1 ; } } int rs = Math . min ( count0left , count1left ) + Math . min ( count0right , count1right ) ; System . out . println ( rs ) ; } }"],"bleu":0.2825398000284673,"rouge_l":0.42748324192565507}
{"id":546,"predictions":["import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;  "],"references":["import java . io . * ; import java . util . * ; public class Solution { public static void main ( String [ ] args ) throws Exception { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer stt ; int n = Integer . parseInt ( br . readLine ( ) ) ; int records [ ] = new int [ n ] , succ_records [ ] = new int [ n ] , unsucc_records [ ] = new int [ n ] , count = Integer . MIN_VALUE , count_zero = 0 , count_one = 0 ; stt = new StringTokenizer ( br . readLine ( ) ) ; for ( int i = 0 ; i < n ; i ++ ) { records [ i ] = Integer . parseInt ( stt . nextToken ( ) ) ; count_zero = ( records [ i ] == 0 ) ? count_zero + 1 : count_zero ; unsucc_records [ i ] = count_zero ; } for ( int i = n - 1 ; i >= 0 ; i -- ) { count_one = ( records [ i ] == 1 ) ? count_one + 1 : count_one ; succ_records [ i ] = count_one ; } count = count_one ; for ( int i = 0 ; i < n - 1 ; i ++ ) count = ( count < unsucc_records [ i ] + succ_records [ i + 1 ] ) ? unsucc_records [ i ] + succ_records [ i + 1 ] : count ; count = ( count < unsucc_records [ n - 1 ] ) ? unsucc_records [ n - 1 ] : count ; System . out . println ( count ) ; return ; } }"],"bleu":0.0006889798986230979,"rouge_l":0.12144338448776443}
{"id":547,"predictions":["import java . util . * ;   public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int q = sc . nextInt ( ) ; for ( int i = 0 ; i < n - 1 ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } long ans = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { ans += a [ i ] ; } System . out . println ( ans ) ;   } }"],"references":["import java . lang . * ; import java . util . * ;   public class Abhishek {   public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] psum = new int [ n ] ; psum [ 0 ] = a [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { psum [ i ] = psum [ i - 1 ] + a [ i ] ; } int m = sc . nextInt ( ) ;"],"bleu":0.6506124900207202,"rouge_l":0.7267217055073676}
{"id":548,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; System . out . println ( s ) ; } }"],"references":["import java . util . * ;   public class StackBracket { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; StringBuilder n = new StringBuilder ( sc . next ( ) ) ; String ans = n + n . reverse ( ) . toString ( ) ; System . out . println ( ans ) ;    }    public static int getAns ( String s , int k , int start1 , int end1 ) {"],"bleu":0.4137535296204164,"rouge_l":0.6314427431529006}
{"id":549,"predictions":["import java . util . * ; import java . io . * ;   public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; int t = in . nextInt ( ) ; Main m = new Main ( ) ; while ( t -- > 0 ) { m . run ( in , out ) ; } out . close ( ) ; }  "],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ;   public class Main {   public static int countone ( String s ) { int count = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == '0' ) { count ++ ; } } return count ; }   public static void main ( String [ ] args ) throws IOException {   FastScanner input = new FastScanner ( ) ; int tc = input . nextInt ( ) ; while ( tc -- > 0 ) { int zero = 0 ; int n = input . nextInt ( ) ; boolean check = false ; for ( int i = 0 ; i < n ; i ++ ) { String s = input . next ( ) ; int one = 0 ; if ( s . length ( ) % 2 == 1 ) { check = true ; continue ; } zero += ( countone ( s ) ) ;   } if ( ! check && zero % 2 == 1 ) { System . out . println ( n - 1 ) ; } else { System . out . println ( n ) ; } }   }   static class FastScanner {   BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( \" \" ) ;   String next ( ) { while ( ! st . hasMoreTokens ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; }   int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   long nextLong ( ) {   return Long . parseLong ( next ( ) ) ; }   double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; }   String nextLine ( ) throws IOException { return br . readLine ( ) ; } }   }"],"bleu":0.026353129111599403,"rouge_l":0.253247138366645}
{"id":550,"predictions":["import java . util . * ; import java . io . * ;   public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; }   void run ( FastScanner in , PrintWriter out ) {  "],"references":["import java . util . * ; import java . io . * ; public class A { static FastReader in = new FastReader ( ) ; static final Random random = new Random ( ) ; static long mod = 1000000007L ; public static void main ( String args [ ] ) throws IOException { int t = 1 ;"],"bleu":0.33906581921681217,"rouge_l":0.4799814857671835}
{"id":551,"predictions":["import java . io . * ; import java . util . * ;   public class B {   public static void main ( String [ ] args ) { FastScanner in = new FastScanner ( ) ; PrintWriter out = new PrintWriter ( System . out ) ; int t = 1 ;"],"references":["import java . io . BufferedWriter ; import java . io . IOException ; import java . io . InputStream ; import java . io . OutputStreamWriter ; import java . math . BigDecimal ;    import java . util . ArrayDeque ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collections ; import java . util . HashMap ; import java . util . Map . Entry ; import java . util . PriorityQueue ; import java . util . TreeSet ;     public final class CF_115_B { static boolean verb = true ; static void log ( Object X ) { if ( verb ) System . err . println ( X ) ; } static void log ( Object [ ] X ) { if ( verb ) { for ( Object U : X ) System . err . print ( U + \" ▁ \" ) ; System . err . println ( \" \" ) ; } } static void log ( int [ ] X ) { if ( verb ) { for ( int U : X ) System . err . print ( U + \" ▁ \" ) ; System . err . println ( \" \" ) ; } } static void logWln ( Object X ) { if ( verb ) System . err . print ( X ) ; } static void info ( Object o ) { System . out . println ( o ) ; } static void output ( Object o ) { outputWln ( \" \" + o + \" \\n \" ) ; } static void outputWln ( Object o ) { try { out . write ( \" \" + o ) ; } catch ( Exception e ) { } }    static int MX = Integer . MAX_VALUE ; static class Composite implements Comparable < Composite > { int idx ; int v ; String name ; public int compareTo ( Composite X ) { if ( v != X . v ) return X . v - v ; return idx - X . idx ; }   public Composite ( int idx , int v , String name ) { this . idx = idx ; this . v = v ; this . name = name ; }   }     "],"bleu":0.00038890303249358005,"rouge_l":0.1296979550997436}
{"id":552,"predictions":["import java . io . * ; import java . util . Arrays ; import java . util . Collections ; import java . util . Comparator ; import java . util . Comparator ; import java . util . Map ; import java . util . Comparator ; import java . util . Map ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ;   public class A { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( in ) ; int n = scan . nextInt ( ) ; Integer [ ] arr = new Integer [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = scanInt ( ) ; } Arrays . sort ( arr ) ; int i = 0 ; int j = 0 ; for ( i = 0 ; i < n ; i ++ ) { arr [ i ] = Integer . parseInt ( String . valueOf ( arr [ i ] ) ) ; } Collections . sort ( arr , new Comparator < Integer > ( ) { @ Override public int compare ( Integer o1 , Integer o2 ) { return - Integer . compare ( o1 , o2 ) ; } } ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; int cur = 0 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( sum += arr [ i ] ; else cur ++ ; } sum += Math . min ( sum , cur ) ; } System . out . println ( sum ) ; } }"],"references":["import java . util . * ;   public class Combination_B {   public static void main ( String [ ] args ) {"],"bleu":0.05253834074900217,"rouge_l":0.1421122698025294}
{"id":553,"predictions":["import java . io . * ; import java . util . * ;   public class Main { public static void main ( String [ ] args ) throws IOException {"],"references":["# include < bits \/ stdc ++ . h > using namespace std ; int u [ 10 ] , k [ 2000001 ] ; int a [ 2000005 ] ; int b [ 2000005 ] ; void fake ( ) { b [ 1 ] = 1 ; int cnt = 0 ; for ( int i = 2 ; i < 2000005 ; i ++ ) { if ( ! b [ i ] ) a [ cnt ++ ] = i ; for ( int j = 0 ; j < cnt && i * a [ j ] < 2000005 ; j ++ ) { b [ i * a [ j ] ] = 1 ; if ( i % a [ j ] == 0 ) break ; } } } int main ( ) { int i , j , p , q , n ; cin >> p >> q ; n = 2000005 ; fake ( ) ; for ( int i = 1 ; i <= n ; i ++ ) { b [ i ] = 1 - b [ i ] ; b [ i ] += b [ i - 1 ] ; int y = i , f = 0 ; while ( y != 0 ) { u [ f ] = y % 10 ; y \/= 10 ; f ++ ; } for ( j = 0 ; j <= f ; j ++ ) if ( u [ j ] != u [ f - 1 - j ] ) break ; if ( j == f + 1 ) k [ i ] = k [ i - 1 ] + 1 ; else k [ i ] = k [ i - 1 ] ; } int ans ; for ( int i = 1 ; i <= 2000005 ; i ++ ) if ( b [ i ] * q <= p * k [ i ] ) ans = i ; cout << ans << endl ; return 0 ; }"],"bleu":0.000002326606647525933,"rouge_l":0.0496742671009772}
{"id":554,"predictions":["import java . util . * ;   public class ScannerB {   public static void main ( String [ ] args ) {"],"references":["import java . util . * ;   public class Test {   public static void main ( String args [ ] ) { Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) ; int m = in . nextInt ( ) ; int x = in . nextInt ( ) ; if ( x > Math . min ( ( n + 1 ) \/ 2 , ( m + 1 ) \/ 2 ) ) { System . out . println ( 0 ) ; return ; } n = n - 2 * x + 2 ; m = m - 2 * x + 2 ; int n1 = Math . max ( n - 2 , 0 ) ; int m1 = Math . max ( m - 2 , 0 ) ; int ans = n * m - n1 * m1 ; System . out . println ( ( ans + 1 ) \/ 2 ) ; } }"],"bleu":0.000707329711898456,"rouge_l":0.19348327566320644}
{"id":555,"predictions":["import java . util . * ; public class HelloWorld {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int j = 0 ; j < n ; j ++ ) arr [ j ] = sc . nextInt ( ) ;   for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; }   Arrays . sort ( arr ) ; int i = 0 ; for ( i < arr . length ; i ++ ) { i += arr [ i ] ; } System . out . println ( i ) ;   } } }"],"references":["import java . util . Arrays ; import java . util . Scanner ; import java . util . Vector ;   public class Main {   public static void main ( String [ ] args ) {   Scanner scan = new Scanner ( System . in ) ;   int t = scan . nextInt ( ) ;   for ( int h = 0 ; h < t ; h ++ ) {   int n = scan . nextInt ( ) ;   int [ ] s = new int [ n ] ;   int ans = - 1 ;   for ( int i = 0 ; i < n ; i ++ ) {   s [ i ] = scan . nextInt ( ) ;   }   boolean exit = false ;   for ( int i = 1 ; i < 1024 && ! exit ; i ++ ) {   for ( int j = 0 ; j < n ; j ++ ) {   boolean flag = false ;   for ( int k = 0 ; k < n ; k ++ ) {   if ( ( s [ j ] ^ i ) == s [ k ] ) {   flag = true ;   break ;   }   }   if ( ! flag ) {   break ;   }   else if ( j == n - 1 ) {   ans = i ;   exit = true ;   }   }   }   System . out . println ( ans ) ;   }   }   }"],"bleu":0.4102166469111254,"rouge_l":0.5551905837268186}
{"id":556,"predictions":["import java . util . * ;   public class CF102 { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; ArrayList < Integer > [ ] list = new ArrayList < > ( ) ; for ( int i = 0 ; i < n - 1 ; i ++ ) list [ i ] = new ArrayList < > ( ) ; for ( int i = 0 ; i < n - 1 ; i ++ ) list [ sc . nextInt ( ) - 1 ] . add ( i + 2 ) ; list . add ( new ArrayList < > ( ) ) ; } for ( int i = 0 ; i < list . size ( ) - 1 ; i ++ ) { int v = sc . nextInt ( ) - 1 ; list . add ( v ) ; list . add ( v ) ; } System . out . println ( list . size ( ) ) ; for ( int i = 0 ; i < list . size ( ) ; i ++ ) { int v = list . get ( i ) ; list . add ( v ) ; } System . out . println ( list . size ( ) ) ; for ( int i : list ) { System . out . println ( i ) ; } } }"],"references":["  import java . math . * ; import java . util . * ; import java . io . * ; public class gr13b {"],"bleu":0.03679189360531092,"rouge_l":0.1055784848888297}
{"id":557,"predictions":["import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int T = in . nextInt ( ) ; for ( int C = 0 ; C < T ; C ++ ) { int N = in . nextInt ( ) ; int [ ] x = new int [ n ] ; int [ ] y = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { x [ i ] = in . nextInt ( ) ; y [ i ] = in . nextInt ( ) ; } for ( int i = 0 ; i < N ; i ++ ) { y [ i ] = in . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { ans += x [ i ] - y [ i ] ; } System . out . println ( ans ) ; } } }"],"references":["import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int x = sc . nextInt ( ) ; int candies [ ] = new int [ x ] ; int oranges [ ] = new int [ x ] ; int mincandies = Integer . MAX_VALUE ; int minoranges = Integer . MAX_VALUE ; for ( int i = 0 ; i < x ; i ++ ) { candies [ i ] = sc . nextInt ( ) ; mincandies = Math . min ( candies [ i ] , mincandies ) ; } for ( int i = 0 ; i < x ; i ++ ) { oranges [ i ] = sc . nextInt ( ) ; minoranges = Math . min ( oranges [ i ] , minoranges ) ; } long tot = 0 ; for ( int i = 0 ; i < x ; i ++ ) { if ( candies [ i ] > mincandies | oranges [ i ] > minoranges ) { tot += ( Math . min ( candies [ i ] - mincandies , oranges [ i ] - minoranges ) ) ; tot += ( Math . max ( candies [ i ] - mincandies , oranges [ i ] - minoranges ) - Math . min ( candies [ i ] - mincandies , oranges [ i ] - minoranges ) ) ; } } System . out . println ( tot ) ; } } } ;"],"bleu":0.3414934486175451,"rouge_l":0.610540985683517}
{"id":558,"predictions":["import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; int n = s . nextInt ( ) ; int a = 0 ; int b = 0 ; for ( int i = 1 ; i < n ; i ++ ) { a = s . nextInt ( ) ; b ++ ; } if ( a % 100 == 0 && b % 7 == 0 ) return 366 ; return 366 ; } }"],"references":["import java . util . * ; import java . util . Scanner ; import java . io . * ; import javax . lang . model . util . ElementScanner6 ; import static java . lang . System . out ; import java . util . Stack ; import java . util . Queue ; import java . util . LinkedList ;   public class B678 {   public static void main ( String args [ ] ) {   FastReader in = new FastReader ( ) ; PrintWriter pr = new PrintWriter ( new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ) ; int tc = 1 ;"],"bleu":0.1902776638602733,"rouge_l":0.3053238283027454}
{"id":559,"predictions":["import java . util . Scanner ;   public class Main {   public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int h1 = in . nextInt ( ) ; int a1 = in . nextInt ( ) ; int b1 = in . nextInt ( ) ; int a2 = in . nextInt ( ) ; int b1 = in . nextInt ( ) ; int c2 = in . nextInt ( ) ; if ( c1 - a1 > 0 ) { System . out . println ( \" Stair \" ) ; return ; } else if ( i == 1 && b1 > 0 ) { a1 += a1 ; i ++ ; } else if ( i == 1 ) { System . out . println ( \" WIN \" ) ; } else { System . out . println ( \" ) ; } } }   }"],"references":["import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int h1 = scan . nextInt ( ) ; int a1 = scan . nextInt ( ) ; int c = scan . nextInt ( ) ; int h2 = scan . nextInt ( ) ; int a2 = scan . nextInt ( ) ; int i = 0 , heal = 0 , strike = 0 ; while ( h2 > 0 ) { if ( h1 <= a2 ) { if ( h2 <= a1 ) { h2 -= a1 ; strike ++ ; } else { h1 = h1 - a2 + c ; heal ++ ; } } else { h2 -= a1 ; h1 -= a2 ; strike ++ ; } i ++ ; } System . out . println ( i ) ; for ( i = 0 ; i < heal ; i ++ ) System . out . println ( \" HEAL \" ) ; for ( i = 0 ; i < strike ; i ++ ) System . out . println ( \" STRIKE \" ) ; } }"],"bleu":0.431760478897279,"rouge_l":0.5928837052062206}
{"id":560,"predictions":["import java . util . Scanner ;   public class Main {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long a = sc . nextInt ( ) ; long b = sc . nextInt ( ) ; long c = sc . nextInt ( ) ; for ( int i = 1 ; i <= Math . min ( a + 1 , b ) ; i ++ ) { if ( ( a + b < 0 ) { System . out . println ( i + \" ▁ \" + i ) ; break ; } } if ( a + c ) { long res = 1 ; while ( b > 0 ) { long z = a % b ; long c = z * ( a + 1 ) % m ; if ( z < 0 ) { res = z ; c = z ; } else { res += c ; } } System . out . println ( res ) ; } }"],"references":["import java . io . * ; import java . util . * ;   public class Main {   public static void main ( String [ ] args ) throws Exception { BufferedReader in = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter out = new PrintWriter ( System . out ) ; StringTokenizer st = new StringTokenizer ( in . readLine ( ) ) ; long a = Integer . parseInt ( st . nextToken ( ) ) ; long b = Integer . parseInt ( st . nextToken ( ) ) ; long m = Integer . parseInt ( st . nextToken ( ) ) ;   a = Math . min ( m , a ) ; for ( long i = 0 ; i <= a ; i ++ ) { long q = ( m - ( ( ( long ) 1e9 * i ) % m ) ) % m ; if ( q > b ) { out . println ( \"1 ▁ \" + String . format ( \" % 09d \" , i ) ) ; out . close ( ) ; return ; } } out . println ( \"2\" ) ; out . close ( ) ; }   }"],"bleu":0.29429796885091347,"rouge_l":0.4573661960596634}
{"id":561,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ;"],"references":["import javax . xml . crypto . dsig . spec . XSLTTransformParameterSpec ; import java . util . * ;   public class Example { static int [ ] dp ;   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ;   int t = sc . nextInt ( ) ; while ( t > 0 ) { t -- ; int n = sc . nextInt ( ) ;"],"bleu":0.012367205240727867,"rouge_l":0.20836891545687447}
{"id":562,"predictions":["import java . io . * ; import java . util . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;  "],"references":["import java . util . * ; import java . lang . * ; import java . math . * ; import java . awt . image . ConvolveOp ; import java . io . * ; import java . text . DecimalFormat ; import java . lang . reflect . Array ; import java . io . BufferedOutputStream ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . math . BigDecimal ; import java . util . * ; public class Codeforces { public static PrintWriter out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; static long MOD = ( long ) ( 1e9 + 7 ) ; static FastReader sc = new FastReader ( ) ; static int pInf = Integer . MAX_VALUE ; static int nInf = Integer . MIN_VALUE ; public static void main ( String [ ] args ) { int test = 1 ;"],"bleu":0.038477108135168595,"rouge_l":0.3194574996642944}
{"id":563,"predictions":["import java . util . * ; import java . lang . * ; import java . io . * ;   public class Codechef { public static void main ( String [ ] args ) throws java . lang . Exception { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int i = ( int ) Math . sqrt ( n ) ; if ( n % i == 0 ) { System . out . println ( i ) ; System . exit ( 0 ) ; } for ( i = 2 ; i * i <= n ; i ++ ) { if ( n % i == 0 ) { System . out . println ( i ) ; return ; } } } System . out . println ( n ) ; } }"],"references":["import java . util . * ; import java . awt . Point ; import java . lang . Math ; import java . util . Arrays ; import java . util . Scanner ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . io . OutputStream ; import java . util . Comparator ; import java . math . BigInteger ; import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . util . stream . IntStream ; import java . io . IOException ; import java . util . ArrayList ; import java . math . BigInteger ; import java . util . Collections ; import java . util . StringTokenizer ; public class S { public static void main ( String [ ] args ) throws java . lang . Exception { FastScanner in = new FastScanner ( ) ; int t = in . ni ( ) ; while ( t -- > 0 ) { long n = in . nl ( ) ; long k = in . nl ( ) ; if ( n % 2 == 0 ) { n += ( 2 * k ) ; } else { long d = 0 ; while ( k > 0 ) { d = div ( n ) ; n += d ; k -- ; if ( n % 2 == 0 ) { break ; } } n = k > 0 ? n + ( 2 * k ) : n ; } System . out . println ( n ) ; } } static long div ( long n ) { long s = 3 ; while ( n % s != 0 ) { s ++ ; } return s ; } static class sortByFirst implements Comparator < Pair > {   public int compare ( Pair a , Pair b ) { return a . x - b . x ; } } static class Pair { int x ; int y ;   public Pair ( int a , int b ) { this . x = a ; this . y = b ; } }  "],"bleu":0.15323099737257775,"rouge_l":0.3872168107693991}
{"id":564,"predictions":["import java . io . * ; import java . util . * ;   public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; int h = input . nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = input . nextInt ( ) ; } System . out . print ( ( a [ n - 1 ] + \" ▁ \" ) ; for ( int i = 0 ; i < n - 1 ; i ++ ) { System . out . print ( ( a [ i ] ) * h ) ; } System . out . println ( ) ; } }"],"references":["import java . util . * ; import java . io . * ;   public class Main { public static void main ( String [ ] args ) throws IOException , InterruptedException { Scanner sc = new Scanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; int n = sc . nextInt ( ) ; int h = sc . nextInt ( ) ; for ( int i = 1 ; i < n ; i ++ ) out . print ( h * Math . sqrt ( 1.0 * i \/ n ) + \" ▁ \" ) ; out . close ( ) ; }   static class Scanner { StringTokenizer st ; BufferedReader br ;   public Scanner ( InputStream s ) { br = new BufferedReader ( new InputStreamReader ( s ) ) ; }   public Scanner ( String s ) throws FileNotFoundException { br = new BufferedReader ( new FileReader ( s ) ) ; }   public String next ( ) throws IOException { while ( st == null || ! st . hasMoreTokens ( ) ) st = new StringTokenizer ( br . readLine ( ) ) ; return st . nextToken ( ) ; }   public int nextInt ( ) throws IOException { return Integer . parseInt ( next ( ) ) ; }   public int [ ] nextIntArray ( int n ) throws IOException { int [ ] ans = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) ans [ i ] = nextInt ( ) ; return ans ; }   public long nextLong ( ) throws IOException { return Long . parseLong ( next ( ) ) ; }   public String nextLine ( ) throws IOException { return br . readLine ( ) ; }   public double nextDouble ( ) throws IOException { return Double . parseDouble ( next ( ) ) ; }   public boolean ready ( ) throws IOException { return br . ready ( ) ; }   } }"],"bleu":0.19176920434638936,"rouge_l":0.39396430248943165}
{"id":565,"predictions":["import java . util . Scanner ;   public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; int a = input . nextInt ( ) ; int b = input . nextInt ( ) ; String ans = \" # \" ; for ( int i = 0 ; i < n ; i ++ ) { ans += ( i * i ) ; } System . out . println ( ans ) ; } }"],"references":["import java . util . Scanner ; public class Solution { public static void main ( String [ ] args ) { int n , m ; Scanner sc = new Scanner ( System . in ) ; n = sc . nextInt ( ) ; m = sc . nextInt ( ) ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= m ; j ++ ) { if ( i % 4 == 0 && j == 1 ) { System . out . print ( \" # \" ) ; } else if ( i % 4 == 0 ) { System . out . print ( \" . \" ) ; } else if ( i % 2 == 0 && j == m ) { System . out . print ( \" # \" ) ; } else if ( i % 2 == 0 ) { System . out . print ( \" . \" ) ; } else System . out . print ( \" # \" ) ; } System . out . println ( ) ; } } }"],"bleu":0.21032225011425912,"rouge_l":0.46291611858747345}
{"id":566,"predictions":["import java . util . Scanner ;   public class _0709DiceTower {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long a = sc . nextLong ( ) ; long b = sc . nextLong ( ) ; long max = 0 ; for ( int i = 0 ; i < a ; i ++ ) { long x = sc . nextLong ( ) ; long y = sc . nextLong ( ) ;"],"references":["import java . util . * ; import java . io . * ;   public class CFA { BufferedReader br ; PrintWriter out ; StringTokenizer st ; boolean eof ; private static final long MOD = 1000L * 1000L * 1000L + 7 ; private static final int [ ] dx = { 0 , - 1 , 0 , 1 } ; private static final int [ ] dy = { 1 , 0 , - 1 , 0 } ; private static final String yes = \" Yes \" ; private static final String no = \" No \" ;   void solve ( ) {"],"bleu":0.08020939944983986,"rouge_l":0.26568801419583804}
{"id":567,"predictions":["import java . util . ArrayList ; import java . util . HashMap ; import java . util . Map ; import java . util . Scanner ;   public class Polygons {   public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ;   for ( int i = 0 ; i < n ; i ++ ) { String a = scanner . nextLine ( ) ; String b = scanner . nextLine ( ) ;   int c = scanner . nextLine ( ) ; ArrayList < Character > arr [ ] = new ArrayList < > ( ) ; for ( int j = 0 ; j < n ; j ++ ) { arr [ j ] = scanner . nextLine ( ) ; arr [ j ] = a ; }   }   int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int x = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ j ] . contains ( a ) ) { max = Math . max ( max , x ) ; } } System . out . println ( max ) ; } }"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ;   public class Reposts_522A { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int n = Integer . parseInt ( br . readLine ( ) ) ;   Map < String , List < String > > adj = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { String [ ] l = br . readLine ( ) . split ( \" \\\\ s \" ) ; String a = l [ 0 ] . toLowerCase ( ) ; String b = l [ 2 ] . toLowerCase ( ) ; if ( ! adj . containsKey ( a ) ) { adj . put ( a , new ArrayList < > ( ) ) ; } if ( ! adj . containsKey ( b ) ) { adj . put ( b , new ArrayList < > ( ) ) ; } adj . get ( b ) . add ( a ) ;"],"bleu":0.3197678549003173,"rouge_l":0.502185633105056}
{"id":568,"predictions":["import java . util . * ;   public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; Set < Integer > set = new HashSet < > ( ) ; for ( int j = 0 ; j < 10 ; j ++ ) { int c = sc . nextInt ( ) ; for ( int k = 0 ; k < 10 ; k ++ ) { if ( set . contains ( k ) ) { set . add ( c ) ; } } } System . out . println ( c ) ; }   }"],"references":["import java . util . * ; import java . lang . * ; import java . io . * ; public class Main { PrintWriter out ; FastReader sc ; long mod = ( long ) ( 1e9 + 7 ) ; long maxlong = Long . MAX_VALUE ; long minlong = Long . MIN_VALUE ; public void sol ( ) { int n = ni ( ) ; String [ ] s = new String [ n ] ; HashMap < String , ArrayList < Integer > > h = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { s [ i ] = rl1 ( ) ; if ( h . get ( s [ i ] ) == null ) { ArrayList < Integer > list = new ArrayList < > ( ) ; list . add ( i ) ; h . put ( s [ i ] , list ) ; } else { h . get ( s [ i ] ) . add ( i ) ; } } int ans = 0 ; String [ ] ss = new String [ n ] ; HashSet < Character > has = new HashSet < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { has . add ( s [ i ] . charAt ( 0 ) ) ; }"],"bleu":0.19898169459722892,"rouge_l":0.39415384615384613}
{"id":569,"predictions":["import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;  "],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . StringTokenizer ;   public class VisitingAFriend { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter pw = new PrintWriter ( System . out ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int m = Integer . parseInt ( st . nextToken ( ) ) ; boolean reachable [ ] = new boolean [ 101 ] ; reachable [ 0 ] = true ; for ( int i = 0 ; i < n ; i ++ ) { st = new StringTokenizer ( br . readLine ( ) ) ; int a = Integer . parseInt ( st . nextToken ( ) ) ; int b = Integer . parseInt ( st . nextToken ( ) ) ; for ( int j = a + 1 ; j <= b ; j ++ ) reachable [ j ] = true ; } for ( int i = 0 ; i <= m ; i ++ ) { if ( ! reachable [ i ] ) { pw . print ( \" NO \" ) ; pw . flush ( ) ; pw . close ( ) ; return ; } }   pw . print ( \" YES \" ) ; pw . flush ( ) ; pw . close ( ) ; } }"],"bleu":0.0021218568148784157,"rouge_l":0.17481545809813287}
{"id":570,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ;   public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int n = Integer . parseInt ( br . readLine ( ) ) ; int [ ] arr = new int [ 45 ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = br . readLine ( ) . split ( \" ▁ \" ) ; int count = 1 ; for ( int i = 1 ; i <= 45 ; i ++ ) { System . out . print ( arr [ i ] + \" ▁ \" ) ; } System . out . println ( \" \" ) ; } }  "],"references":["import java . util . * ; public class StackBracket { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; List < Integer > list = new ArrayList < > ( ) ; int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) {"],"bleu":0.23917892448935696,"rouge_l":0.5170260223048327}
{"id":571,"predictions":["import java . util . * ; import java . io . * ; import java . math . * ;  "],"references":["import java . util . * ; import java . util . Map . Entry ;    import java . io . * ; import java . math . * ; import static java . util . stream . Collectors . * ; import static java . util . Map . Entry . * ;   public class Main { static int k ; public static void main ( String [ ] args ) throws IOException { final long mod = ( long ) ( 1e9 + 7 ) ; Reader s = new Reader ( ) ; PrintWriter pt = new PrintWriter ( System . out ) ;"],"bleu":0.016651781101095952,"rouge_l":0.29995529727313364}
{"id":572,"predictions":["import java . io . * ; import java . util . * ;   public class Main { public static void main ( String [ ] args ) throws IOException {"],"references":["import java . io . * ; import java . util . * ; public class Asd { static PrintWriter w = new PrintWriter ( System . out ) ; static FastScanner s = new FastScanner ( ) ; static HashSet < Long > list = new HashSet < > ( ) ; public static void main ( String [ ] args ) {"],"bleu":0.2752644156990641,"rouge_l":0.5502577319587628}
{"id":573,"predictions":["import java . util . * ;    public class Practise {  "],"references":["import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;  "],"bleu":0.03661865575662412,"rouge_l":0.2605445808862787}
{"id":574,"predictions":["import java . util . * ; import java . lang . * ; import java . io . * ;   public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) {"],"references":["    import java . io . * ; import java . util . ArrayDeque ; import java . util . Arrays ; import java . util . InputMismatchException ; import java . util . Queue ; import java . io . * ; import java . lang . reflect . Array ; import java . math . BigInteger ; import java . util . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . util . Collections ; import java . io . InputStreamReader ; import java . util . logging . SimpleFormatter ;    public class Main1 {  "],"bleu":0.0872201656091527,"rouge_l":0.3019179212208703}
{"id":575,"predictions":["import java . util . * ;   public class Example { static int [ ] d ;   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ;"],"references":["import java . util . Scanner ;   public class problem102 {   public static void main ( String [ ] args ) {"],"bleu":0.4025507137377396,"rouge_l":0.7104287983059819}
{"id":576,"predictions":["import java . util . * ;   public class CodeForces626A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s1 = sc . nextLine ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ j ] != 0 ) { System . out . print ( \"0\" ) ; } else { for ( int k = 0 ; k < n ; k ++ ) { System . out . print ( arr [ k ] + \" ▁ \" ) ; } } System . out . println ( ) ; } } }"],"references":["import java . io . BufferedReader ; import java . io . File ; import java . io . FileInputStream ; import java . io . FileNotFoundException ; import java . io . IOException ; import java . io . InputStreamReader ; import java . nio . file . Paths ; import java . util . ArrayList ; import java . util . List ; import java . util . Stack ; import java . util . StringTokenizer ;   public class Main {   public Main ( ) throws FileNotFoundException {  "],"bleu":0.044613343791808195,"rouge_l":0.19829957489372338}
{"id":577,"predictions":["import java . util . * ; public class Practice { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int arr [ ] = new int [ 5 ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int cost = 0 ; for ( int i = 0 ; i < 5 ; i ++ ) { cost = sc . nextInt ( ) ; cost += arr [ i ] ; } int cost = 0 ; for ( int i = 0 ; i < n ; i ++ ) { cost += arr [ i ] ; cost += arr [ i ] ; } System . out . println ( cost ) ; } }"],"references":["import java . util . Scanner ;   public class SastaCoder { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ;   int [ ] m = new int [ 5 ] ; int [ ] w = new int [ 5 ] ;   for ( int i = 0 ; i < 5 ; i ++ ) m [ i ] = scan . nextInt ( ) ; for ( int i = 0 ; i < 5 ; i ++ ) w [ i ] = scan . nextInt ( ) ;   int sum = 0 ; for ( int i = 0 ; i < 5 ; i ++ ) { sum += Math . max ( 150 * ( i + 1 ) , ( 250 - m [ i ] ) * 2 * ( i + 1 ) - 50 * w [ i ] ) ; } sum += 100 * scan . nextInt ( ) - 50 * scan . nextInt ( ) ;   System . out . println ( sum ) ; } }"],"bleu":0.4931932011585723,"rouge_l":0.6636347422864277}
{"id":578,"predictions":["import java . util . Scanner ;   public class Beautiful_Year {   public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; int [ ] arr = new int [ n + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = scan . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { arr [ j ] = scan . nextInt ( ) ; } }   for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { arr [ j ] = scan . nextInt ( ) ; } }   if ( arr [ i ] == arr [ j ] ) { System . out . println ( - 1 + \" ▁ \" + arr [ j ] ) ; return ; } } System . out . println ( - 1 ) ; }   }"],"references":["import java . util . * ; import java . lang . * ; import java . io . * ;   public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) {"],"bleu":0.03425687025015111,"rouge_l":0.16902435467405572}
{"id":579,"predictions":["import java . util . Scanner ;   public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] ar = new int [ n + 1 ] ; int [ ] ar = new int [ k + 1 ] ; for ( int i = 0 ; i < n + 1 ; i ++ ) { ar [ i ] = sc . nextInt ( ) ; } int c = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 1 ; i <= k ; i ++ ) { ar [ i ] = sc . nextInt ( ) ; } int [ ] ar = new int [ k + 1 ] ; for ( int i = 0 ; i < k ; i ++ ) { ar [ i ] = sc . nextInt ( ) ; } Arrays . sort ( ar ) ; int ans = 0 ; for ( int i = 0 ; i <= k + 1 ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { int x = ar [ i ] - ar [ j ] ; int y = ar [ j ] - ar [ i ] * ar [ j ] ; int m = ar [ i ] - ar [ j ] ; int ans = m + ( ar [ j ] - ar [ m ] ) * m + ( ar [ i ] - ar [ j ] ) ; if ( m < 0 ) { ans = m ; } else { ans += ar [ i ] - ( m - 1 ) * ar [ i ] ; } } ans = Math . min ( ans , ans ) ; } System . out . println ( ans ) ; } }"],"references":["import java . util . Arrays ; import java . util . Scanner ; public class B10 { static int distance ( int xc , int yc , int x , int left , int right ) { int result = 0 ; for ( int i = left ; i <= right ; i ++ ) { result += ( Math . abs ( xc - x ) + Math . abs ( yc - i ) ) ; } return result ; } public static void main ( String [ ] args ) { try ( Scanner scan = new Scanner ( System . in ) ) { int N = scan . nextInt ( ) ; int K = scan . nextInt ( ) ; int [ ] [ ] cinema = new int [ K ] [ K ] ; int xc = K \/ 2 + 1 ; int yc = xc ; int seats , min , right , left ; int [ ] request = new int [ N ] ;"],"bleu":0.17677801148278194,"rouge_l":0.32109286878054893}
{"id":580,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ;"],"references":["import java . util . Scanner ;   public class Fafa_And_His_Company {   public static void main ( String [ ] args ) {   Scanner in = new Scanner ( System . in ) ;   int n = in . nextInt ( ) ;"],"bleu":0.0500192226020862,"rouge_l":0.2517193947730399}
{"id":581,"predictions":["import java . util . * ; public class C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int b [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } long ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans = Math . max ( ans , a [ i ] ) ; } System . out . println ( ans ) ; } }"],"references":["import java . util . * ; public class p1486B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; for ( int t = sc . nextInt ( ) ; t -- > 0 ; ) { int n = sc . nextInt ( ) , x [ ] = new int [ n ] , y [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { x [ i ] = sc . nextInt ( ) ; y [ i ] = sc . nextInt ( ) ; } Arrays . sort ( x ) ; Arrays . sort ( y ) ; System . out . println ( n % 2 == 1 ? 1 : ( x [ n \/ 2 ] - x [ n \/ 2 - 1 ] + 1 ) * ( long ) ( y [ n \/ 2 ] - y [ n \/ 2 - 1 ] + 1 ) ) ; } } }"],"bleu":0.5292170639401377,"rouge_l":0.5827859762859336}
{"id":582,"predictions":["import java . lang . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;   public class A { public static void main ( String [ ] args ) { FastScanner fs = new FastScanner ( ) ; int t = 1 ;"],"references":["import java . util . Scanner ;   public class Main { static char c [ ] [ ] ; static int num ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = Integer . parseInt ( sc . next ( ) ) ; c = new char [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = sc . next ( ) . toCharArray ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { int count = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( c [ i ] [ j ] == ' C ' ) { count ++ ; } } for ( int j = count - 1 ; j > 0 ; j -- ) { num += j ; } } for ( int i = 0 ; i < n ; i ++ ) { int count = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( c [ j ] [ i ] == ' C ' ) { count ++ ; } } for ( int j = count - 1 ; j > 0 ; j -- ) { num += j ; }   } System . out . println ( num ) ; }   }"],"bleu":0.012336411069825097,"rouge_l":0.16114829165199016}
{"id":583,"predictions":["import java . io . * ; import java . util . * ;   public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; int t = in . nextInt ( ) ; PrintWriter out = new PrintWriter ( System . out ) ;"],"references":["import java . awt . * ; import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . UncheckedIOException ; import java . io . Closeable ; import java . io . Writer ; import java . io . OutputStreamWriter ; import java . lang . reflect . Array ; import java . util . Arrays ;   public class water { public static long sum = 0 ; public static boolean ok = true ; public static int dps ( int a [ ] [ ] , int sx [ ] , int x , int poi ) { int add = - 1 ; if ( sx [ poi ] != - 1 && sx [ poi ] < x ) { ok = false ; } else if ( sx [ poi ] >= x ) { add = sx [ poi ] - x ; sum += add ; x = sx [ poi ] ; }   if ( a [ poi ] . length == 1 ) {   } else { int add2 = - 1 ; int lon = a [ poi ] . length - 2 ; for ( int i = 1 ; i < a [ poi ] . length ; i ++ ) { int add3 = dps ( a , sx , x , a [ poi ] [ i ] ) ; if ( add3 == - 1 ) { lon -- ; } else if ( add2 == - 1 ) { add2 = add3 ; } else if ( add3 < add2 ) add2 = add3 ; } if ( add2 >= 0 && add == - 1 ) {"],"bleu":0.010766645841564122,"rouge_l":0.20195491092542958}
{"id":584,"predictions":["import java . util . * ; import java . io . * ;   public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; int t = in . nextInt ( ) ; while ( t -- > 0 ) { int n = in . nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = in . nextInt ( ) ; } HashSet < Integer > set = new HashSet < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = in . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] > 0 && a [ i ] < a [ i ] ) { set . add ( a [ i ] ) ; } } if ( set . size ( ) == 1 ) { out . println ( \" YES \" ) ; return ; } } out . println ( \" NO \" ) ; }   }"],"references":["import java . util . Scanner ;   public class _0853KindAnton {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t > 0 ) { int n = sc . nextInt ( ) ; boolean pos = false ; boolean neg = false ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int j = 0 ; j < n ; j ++ ) { b [ j ] = sc . nextInt ( ) ; } boolean fsuc = true ; a : { for ( int i = 0 ; i < n ; i ++ ) { if ( i == 0 ) { if ( a [ i ] != b [ i ] ) { fsuc = false ; break a ; } } if ( a [ i ] == b [ i ] ) { if ( a [ i ] == 1 ) pos = true ; if ( a [ i ] == - 1 ) neg = true ; continue ; } else { if ( b [ i ] == 0 ) { if ( a [ i ] == 1 && neg == false || a [ i ] == - 1 && pos == false ) { fsuc = false ; break a ; } } else if ( b [ i ] > 0 ) { if ( ! pos ) { fsuc = false ; break a ; } } else { if ( ! neg ) { fsuc = false ; break a ; } } } if ( a [ i ] == 1 ) pos = true ; if ( a [ i ] == - 1 ) neg = true ; } } if ( fsuc ) { System . out . println ( \" YES \" ) ; } else { System . out . println ( \" NO \" ) ; } t -- ; } }   }"],"bleu":0.31441432938778113,"rouge_l":0.5385256756093972}
{"id":585,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Scanner ;   public class Codeforces {   public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringBuilder sb = new StringBuilder ( ) ;   int n = Integer . parseInt ( br . readLine ( ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int a = Integer . parseInt ( st . nextToken ( ) ) ; int b = Integer . parseInt ( st . nextToken ( ) ) ;   int c = 0 ; for ( int i = 0 ; i < a . length ( ) ; i ++ ) { if ( sb . charAt ( i ) == ' . ' || sb . charAt ( i ) == ' A ' || sb . charAt ( i ) == ' Z ' ) {"],"references":["import java . io . * ;   public class Main { static String str ; static BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; static BufferedWriter bw = new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ;   static boolean judge ( char x ) { return x >= ' A ' && x <= ' Z ' || x >= ' a ' && x <= ' z ' || x >= '0' && x <= '9' || x == ' _ ' ; }   public static void main ( String [ ] args ) throws IOException {"],"bleu":0.21228824194387094,"rouge_l":0.35878214738784453}
{"id":586,"predictions":["import java . util . Scanner ;   public class C { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int t = in . nextInt ( ) ; while ( t -- > 0 ) { int n = in . nextInt ( ) ; int a [ ] = new int [ n ] ; int b [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = in . nextInt ( ) ; b [ i ] = in . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { int d = in . nextInt ( ) ; int ans = Math . abs ( a [ 0 ] - a [ i ] ) ; ans = Math . abs ( b [ i ] - a [ i + 1 ] ) + Math . abs ( a [ i ] - b [ i ] ) ; } System . out . println ( ans ) ; } } }"],"references":["import java . util . Scanner ;   public class A1428 {   public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int T = in . nextInt ( ) ; for ( int t = 0 ; t < T ; t ++ ) { int X1 = in . nextInt ( ) ; int Y1 = in . nextInt ( ) ; int X2 = in . nextInt ( ) ; int Y2 = in . nextInt ( ) ; int dx = Math . abs ( X2 - X1 ) ; int dy = Math . abs ( Y2 - Y1 ) ; int answer = dx + dy ; if ( dx != 0 && dy != 0 ) { answer += 2 ; } System . out . println ( answer ) ; } }   }"],"bleu":0.4267065099888495,"rouge_l":0.6153632577510412}
{"id":587,"predictions":["import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int a = in . nextInt ( ) ; int b = in . nextInt ( ) ; int c = in . nextInt ( ) ; int d = in . nextInt ( ) ; int e = in . nextInt ( ) ; int e = 0 , f = 0 ; while ( f > 0 && c > 0 ) { f = in . nextInt ( ) ; e = in . nextInt ( ) ; } if ( f > 0 && f > 0 ) { f = 1 ; } else if ( f > 0 && f > 0 ) { f = 0 ; } if ( f > 0 && f > 0 ) { f = 1 ; } else if ( f > 1 && f > 1 ) { f = 1 ; } System . out . println ( f ) ; } }"],"references":["import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . StringTokenizer ; import java . io . IOException ; import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . InputStream ;   public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; a65 solver = new a65 ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; }   static class a65 { public void solve ( int testNumber , InputReader in , PrintWriter out ) { int a = in . nextInt ( ) ; int b = in . nextInt ( ) ; int c = in . nextInt ( ) ; int d = in . nextInt ( ) ; int e = in . nextInt ( ) ; int f = in . nextInt ( ) ; int next = b * d * f ; int prev = a * c * e ; if ( c == 0 && d > 0 ) { out . println ( \" Ron \" ) ; return ; } if ( a == 0 && b > 0 && d > 0 ) { out . println ( \" Ron \" ) ; return ; } if ( prev >= next ) { out . println ( \" Hermione \" ) ; return ; } out . println ( \" Ron \" ) ; }   }   static class InputReader { private BufferedReader reader ; private StringTokenizer stt ;   public InputReader ( InputStream stream ) { reader = new BufferedReader ( new InputStreamReader ( stream ) ) ; }   public String nextLine ( ) { try { return reader . readLine ( ) ; } catch ( IOException e ) { return null ; } }   public String next ( ) { while ( stt == null || ! stt . hasMoreTokens ( ) ) { stt = new StringTokenizer ( nextLine ( ) ) ; } return stt . nextToken ( ) ; }   public int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; }   } }  "],"bleu":0.16010803271563526,"rouge_l":0.3829703747302334}
{"id":588,"predictions":["import java . util . * ;   public class Check2 { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long n = sc . nextLong ( ) ; if ( n % 2 == 0 ) { long a = n \/ 2 ; if ( n % 2 == 0 ) { a = n \/ 2 ;"],"references":["import java . util . Scanner ;   public class Main {   public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ;   long n = in . nextLong ( ) ;   if ( n == 1 ) { System . out . println ( - 1 ) ; return ; }   long even ; long odd ; if ( n % 2 == 0 ) { even = n * ( 2 + n ) \/ 4 ; odd = n * n \/ 4 ; } else { even = n \/ 2 * ( 2 + n - 1 ) \/ 2 ; odd = ( n \/ 2 + 1 ) * ( 1 + n ) \/ 2 ; } System . out . println ( even - odd ) ; } }"],"bleu":0.24235400190650752,"rouge_l":0.505708072845882}
{"id":589,"predictions":["import java . util . * ;   public class RegBracket { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ 4 ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ sc . nextInt ( ) ] = sc . nextInt ( ) ; } if ( arr [ 0 ] == 0 ) { System . out . println ( \" NO \" ) ; return ; } for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 1 ) { System . out . println ( \" YES \" ) ; return ; } } System . out . println ( \" NO \" ) ; } }"],"references":["  import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ;   public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ;  "],"bleu":0.07830589080725076,"rouge_l":0.22724327826368637}
{"id":590,"predictions":["import java . util . * ; import java . lang . * ; import java . io . * ;   public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) {"],"references":["import java . util . HashMap ; import java . util . Map ; import java . util . Scanner ;   public class Solution { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String gn = sc . next ( ) ; String h = sc . next ( ) ; String p = sc . next ( ) ; char [ ] a = ( gn + h ) . toCharArray ( ) ; char [ ] b = p . toCharArray ( ) ; HashMap < Character , Integer > hm1 = new HashMap ( ) ; HashMap < Character , Integer > hm2 = new HashMap < > ( ) ; for ( int i = 0 ; i < a . length ; i ++ ) { int count = 1 ; if ( hm1 . containsKey ( a [ i ] ) ) { count = hm1 . get ( a [ i ] ) ; count ++ ; } hm1 . put ( a [ i ] , count ) ; } for ( int j = 0 ; j < b . length ; j ++ ) { int count = 1 ; if ( hm2 . containsKey ( b [ j ] ) ) { count = hm2 . get ( b [ j ] ) ; count ++ ; } hm2 . put ( b [ j ] , count ) ; } if ( hm1 . equals ( hm2 ) ) { System . out . println ( \" YES \" ) ; } else { System . out . println ( \" NO \" ) ; }    } }"],"bleu":0.000250387530388916,"rouge_l":0.1316812019687419}
{"id":591,"predictions":["import java . util . * ; import java . lang . * ; import java . io . * ;   public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) {"],"references":["import java . io . * ; import java . math . * ; import java . util . * ;     public class Main {   private static int dx [ ] = { 1 , 0 , - 1 , 0 } ; private static int dy [ ] = { 0 , - 1 , 0 , 1 } ;   private static final long INF = Long . MAX_VALUE ; private static final int INT_INF = Integer . MAX_VALUE ; private static final long NEG_INF = Long . MIN_VALUE ; private static final int NEG_INT_INF = Integer . MIN_VALUE ; private static final double EPSILON = 1e-10 ;   private static final int MAX = 2000007 ; private static final long MOD = 1000000007 ;   private static final int MAXN = 100007 ; private static final int MAXA = 10000009 ; private static final int MAXLOG = 22 ;   public static void main ( String [ ] args ) throws IOException {   InputReader in = new InputReader ( System . in ) ;"],"bleu":0.013472309134563366,"rouge_l":0.2295390404515522}
{"id":592,"predictions":["import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int arr [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = sc . nextInt ( ) ; int res = 0 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( arr [ i ] - arr [ i ] >= arr [ i + 1 ] ) { res = Math . max ( res , arr [ i ] - 1 ) ; } else { res = Math . max ( res , arr [ i ] - 1 ) ; } } System . out . println ( res ) ; } }"],"references":["import java . util . * ;   public class Check2 { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] ar = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { ar [ i ] = sc . nextInt ( ) ; } long sum = ar [ n - 1 ] ; long thresh = ar [ n - 1 ] - 1 ; for ( int j = n - 2 ; j >= 0 ; j -- ) {   if ( thresh <= 0 ) { break ; } sum = sum + Math . min ( ar [ j ] , thresh ) ; thresh = Math . min ( ar [ j ] , thresh ) - 1 ;    } System . out . println ( sum ) ;    }   public static void Mybfs ( List < List < Integer > > lists , int source , int [ ] dist , boolean [ ] visited ) { dist [ source ] = 0 ;"],"bleu":0.46347585543786324,"rouge_l":0.614724743899392}
{"id":593,"predictions":["import java . util . * ;   public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) ; int k = in . nextInt ( ) ; System . out . println ( \" YES \" ) ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( i % 2 == 0 ) { System . out . println ( \" # \" ) ; } else System . out . println ( \" NO \" ) ; } else { System . out . println ( \" YES \" ) ; } for ( int i = 0 ; i < n - k ; i ++ ) { StringBuilder ans = new StringBuilder ( ) ; for ( int j = 0 ; j < k ; j ++ ) { ans . append ( \" . \" ) ; } } System . out . println ( ans ) ; }   }"],"references":["import java . io . * ; import java . util . * ; import java . lang . * ;   public class B {   public static void main ( String [ ] args ) { FastReader in = new FastReader ( ) ; PrintWriter out = new PrintWriter ( System . out ) ; int n = in . nextInt ( ) , k = in . nextInt ( ) ; if ( false ) out . println ( \" NO \" ) ; else { char [ ] [ ] board = new char [ 4 ] [ n ] ; for ( int i = 0 ; i < 4 ; i ++ ) Arrays . fill ( board [ i ] , ' . ' ) ; out . println ( \" YES \" ) ; for ( int i = 1 ; i < ( n \/ 2 ) ; i ++ ) { if ( k < 2 ) break ; board [ 1 ] [ i ] = ' # ' ; board [ 1 ] [ n - 1 - i ] = ' # ' ; k -= 2 ; } for ( int i = 1 ; i < ( n \/ 2 ) ; i ++ ) { if ( k < 2 ) break ; board [ 2 ] [ i ] = ' # ' ; board [ 2 ] [ n - 1 - i ] = ' # ' ; k -= 2 ; } if ( k % 2 != 0 ) { if ( board [ 1 ] [ n \/ 2 ] == ' . ' ) board [ 1 ] [ n \/ 2 ] = ' # ' ; else board [ 2 ] [ n \/ 2 ] = ' + ' ; } else if ( k != 0 ) { board [ 1 ] [ n \/ 2 ] = ' # ' ; board [ 2 ] [ n \/ 2 ] = ' # ' ; } for ( int i = 0 ; i < 4 ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) out . print ( board [ i ] [ j ] ) ; out . println ( ) ; } } out . close ( ) ; }   static final Random random = new Random ( ) ;"],"bleu":0.17365663177696236,"rouge_l":0.4032653878900185}
{"id":594,"predictions":["import java . util . * ; import java . lang . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int size = sc . nextInt ( ) ; int a1 = sc . nextInt ( ) ; int b1 = sc . nextInt ( ) ; int c2 = sc . nextInt ( ) ; int [ ] g = new int [ 200001 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { g [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < b ; i ++ ) { if ( g [ i ] < g ) { ans = g ; } else { ans = 1 ; } } System . out . println ( ans ) ; } }"],"references":["import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . Scanner ;   public class Main { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; Scanner in = new Scanner ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; TaskA solver = new TaskA ( ) ; solver . solve ( 1 , in , out ) ; out . close ( ) ; }   static class TaskA { public void solve ( int testNumber , Scanner in , PrintWriter out ) { int T = 1 ; while ( T -- > 0 ) { solveOne ( in , out ) ; } }   private void solveOne ( Scanner in , PrintWriter out ) { int k = in . nextInt ( ) ; int a = in . nextInt ( ) ; int b = in . nextInt ( ) ; int v = in . nextInt ( ) ;   int box = 0 ; while ( a > 0 ) { int divisor = 0 ; if ( b > 0 ) { divisor = Math . min ( k - 1 , b ) ; b -= k - 1 ; } int sections = 1 + divisor ; a -= sections * v ; box ++ ; } out . println ( box ) ;    }   } }  "],"bleu":0.24402567150457144,"rouge_l":0.42975549108992955}
{"id":595,"predictions":["import java . util . * ;   public class Practise {   public static void main ( String [ ] args ) {"],"references":["import java . util . * ; public class Solution { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; long a = s . nextLong ( ) ; long b = s . nextLong ( ) ; long ans = 1L ; if ( b - a >= 10 ) { System . out . println ( \"0\" ) ; } else { for ( long i = a + 1 ; i <= b ; i ++ ) { ans = ans * ( i % 10 ) ; } ans = ans % 10 ; System . out . println ( ans ) ; } } }"],"bleu":0.008913635158957642,"rouge_l":0.25477326968973746}
{"id":596,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ;   public class Main {   public static void main ( String [ ] args ) throws IOException { BufferedReader bf = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int n = Integer . parseInt ( bf . readLine ( ) ) ; int [ ] arr = new int [ n + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = ( int ) ( Math . pow ( 2 , arr . length ) - 1 ) ; arr [ i ] = ( int ) Math . pow ( 2 , n \/ 2 ) ; } b += arr [ n - 1 ] ; System . out . println ( b ) ; } }"],"references":["import java . util . ArrayList ; import java . util . Arrays ; import java . util . HashMap ; import java . util . LinkedHashMap ; import java . util . Map ; import java . util . Scanner ; import java . util . * ; import java . util . stream . Collectors ;   public class absolute {   public static void main ( String [ ] args ) {"],"bleu":0.12825707625974966,"rouge_l":0.28223880597014933}
{"id":597,"predictions":["import java . util . * ;   public class questionCF {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = Math . min ( Math . min ( Math . max ( a , b ) - Math . max ( Math . ceil ( Math . min ( Math . max ( b , c + r ) ) , ( c - c ) ) ; System . out . println ( d ) ; } }   }"],"references":["import java . util . Scanner ;   public class TemporarilyUnavailable { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int testCase = scanner . nextInt ( ) ; for ( int i = 0 ; i < testCase ; i ++ ) { System . out . println ( solve ( scanner . nextInt ( ) , scanner . nextInt ( ) , scanner . nextInt ( ) , scanner . nextInt ( ) ) ) ; } }   public static int solve ( int a , int b , int c , int r ) {   if ( a == b ) return 0 ;   int min , max ; if ( a > b ) { max = a ; min = b ; } else { max = b ; min = a ; } int result = Math . abs ( a - b ) ; int plus = c + r ; int minus = c - r ;   if ( min <= minus && plus <= max ) return result - 2 * r ; if ( min >= plus || max <= minus ) return result ; if ( min > minus ) { if ( plus < max ) return result - ( plus - min ) ; else return 0 ; } else return result - ( max - minus ) ; } }"],"bleu":0.24039448759368587,"rouge_l":0.4424426766495087}
{"id":598,"predictions":["import java . util . * ;   public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { max = Math . max ( max , a [ i ] ) ; } System . out . println ( max - max ) ; } }"],"references":["import java . lang . reflect . Array ; import java . util . * ;   public class Main { private static Scanner in = new Scanner ( System . in ) ;  "],"bleu":0.1491663626794502,"rouge_l":0.3128205128205129}
{"id":599,"predictions":["import java . util . * ; import java . lang . * ; import java . io . * ; public class Expedition { public static void main ( String [ ] args ) throws java . lang . Exception { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ;"],"references":["import java . util . * ;   public class Solution { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ;   Set < Integer > set = new HashSet < > ( ) ; PriorityQueue < Integer > pq = new PriorityQueue ( Collections . reverseOrder ( ) ) ; int n = s . nextInt ( ) ;   int i = 0 ; while ( pq . size ( ) != 2 && i < n ) { int x = s . nextInt ( ) ; if ( ! set . contains ( x ) ) { set . add ( x ) ; pq . offer ( x ) ; } i ++ ; }   while ( i < n ) { int x = s . nextInt ( ) ; if ( ! set . contains ( x ) ) { set . add ( x ) ; if ( x < pq . peek ( ) ) { pq . offer ( x ) ; pq . poll ( ) ; } } i ++ ; }   if ( set . size ( ) <= 1 ) System . out . println ( \" NO \" ) ; else { System . out . println ( pq . peek ( ) ) ; }   s . close ( ) ; } }"],"bleu":0.031365239410897076,"rouge_l":0.22941176470588237}
{"id":600,"predictions":["import java . util . Arrays ; import java . util . Scanner ;   public class AlyonaAndMex { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; Integer [ ] a = new Integer [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = scan . nextInt ( ) ; } Arrays . sort ( a ) ; int result = 1 ; for ( int i = 1 ; i < n ; i ++ ) { if ( a [ i ] >= cur ) { result ++ ; } else { result = 1 ; } } System . out . println ( result ) ; } }"],"references":["import java . util . * ; public class PolycarpTraining { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int size = sc . nextInt ( ) ; Integer [ ] arr = new Integer [ size ] ; for ( int i = 0 ; i < size ; i ++ ) arr [ i ] = sc . nextInt ( ) ; Arrays . sort ( arr ) ; int index = 1 ; for ( int i = 0 ; i < size ; i ++ ) { if ( arr [ i ] >= index ) { index ++ ; } } System . out . println ( index - 1 ) ; } }"],"bleu":0.5603298630876059,"rouge_l":0.8120876531573986}
{"id":601,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int c = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == k ) { c ++ ; } else { c ++ ; } } System . out . println ( c ) ; for ( int i = 0 ; i < n + 1 ; i ++ ) { if ( a [ i ] == k ) { System . out . println ( i + 1 ) ; return ; } } System . out . println ( c ) ; } }"],"references":["import java . io . * ; import java . util . * ;   public class ProblemA {   BufferedReader in ; PrintWriter out ; StringTokenizer ss ;   String _token ( ) throws IOException { while ( ! ss . hasMoreTokens ( ) ) ss = new StringTokenizer ( in . readLine ( ) ) ; return ss . nextToken ( ) ; }   int _int ( ) throws IOException { return Integer . parseInt ( _token ( ) ) ; }   void RUN ( ) throws IOException { in = new BufferedReader ( new InputStreamReader ( System . in ) ) ; out = new PrintWriter ( System . out ) ; ss = new StringTokenizer ( \" ▁ \" ) ;   int n = _int ( ) ; int k = _int ( ) ; int c = _int ( ) ; int a [ ] = new int [ 366 ] ; a [ 0 ] = 1 ; for ( int i = 0 ; i < c ; i ++ ) a [ _int ( ) ] ++ ; int it = 0 ; int ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( a [ i ] != 0 ) { it = 0 ; ans ++ ; } else { it ++ ; }   if ( it == k ) { it = 0 ; ans ++ ; } } out . println ( ans ) ; out . close ( ) ; }   public static void main ( String [ ] args ) throws Exception { try { new ProblemA ( ) . RUN ( ) ; } catch ( Exception e ) { System . out . println ( \" RE \" ) ; } }   }"],"bleu":0.3224098031462608,"rouge_l":0.4666004904823077}
{"id":602,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; while ( k <= n ) { k ++ ; } System . out . println ( k ) ; } }"],"references":["n , k = map ( int , input ( ) . split ( ) ) if ( n == k ) : print ( \"1\" * n ) exit ( ) a = ( n - k ) >> 1 i = 0 Ans = \" \" while ( i < n ) : Ans += \"0\" * ( a ) i += a if ( i > n - 1 ) : break Ans += \"1\" i += 1 if ( i > n - 1 ) : breakprint ( Ans [ : n ] )"],"bleu":0.03631600839663775,"rouge_l":0.1937231458994956}
{"id":603,"predictions":["import java . util . * ; import java . io . * ;   public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; }   void run ( FastScanner in , out ) {"],"references":["import java . util . Scanner ;   public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; char [ ] ch = sc . next ( ) . toCharArray ( ) ; boolean f = true ; for ( int i = k ; i < n ; i ++ ) { if ( ch [ i ] == ' ? ' || ch [ i ] == ch [ i % k ] ) continue ; else if ( ch [ i % k ] == ' ? ' ) { ch [ i % k ] = ch [ i ] ; } else { f = false ; break ; } } if ( ! f ) { System . out . println ( \" NO \" ) ; continue ; } else { int s0 = 0 , s1 = 0 ; for ( int i = 0 ; i < k ; i ++ ) { if ( ch [ i ] == '0' ) s0 ++ ; else if ( ch [ i ] == '1' ) s1 ++ ; } if ( s0 > k \/ 2 || s1 > k \/ 2 ) { System . out . println ( \" NO \" ) ; } else { System . out . println ( \" YES \" ) ; } } } } }  "],"bleu":0.0318081276460306,"rouge_l":0.2522091609241994}
{"id":604,"predictions":["import java . io . BufferedReader ; import java . io . File ; import java . io . FileWriter ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . math . BigInteger ; import java . util . * ;   import static java . lang . Math . * ;   public class Test { public static void main ( String [ ] args ) { FastScanner input = new FastScanner ( ) ; PrintWriter out = new PrintWriter ( System . out ) ; int t = input . nextInt ( ) ;"],"references":["import java . io . * ; import java . util . * ;    public class test { int INF = ( int ) 1e9 ; long MOD = 1000000007 ; void solve ( InputReader in , PrintWriter out ) throws IOException { long p = in . nextLong ( ) ; long k = in . nextInt ( ) ; ArrayList < Long > rs = new ArrayList < > ( ) ; while ( p != 0 ) { long r = p % k ; if ( r < 0 ) r += k ; rs . add ( r % k ) ; p -= ( r % k ) ; p \/= k ; p *= - 1 ; } out . println ( rs . size ( ) ) ; for ( long x : rs ) out . print ( x + \" ▁ \" ) ; out . println ( ) ; } public static void main ( String [ ] args ) throws IOException { if ( args . length > 0 && args [ 0 ] . equalsIgnoreCase ( \" d \" ) ) { DEBUG_FLAG = true ; } InputReader in = new InputReader ( ) ; PrintWriter out = new PrintWriter ( System . out ) ; int t = 1 ;"],"bleu":0.14759662346376642,"rouge_l":0.3141149425287356}
{"id":605,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . StringTokenizer ;   public class Test {"],"references":["import java . util . * ;   public class Main {   public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int k = scanner . nextInt ( ) ; int [ ] a = new int [ n ] ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = scanner . nextInt ( ) ; String s = Integer . toString ( a [ i ] ) ; int cnt = 0 ; for ( int j = 0 ; j < s . length ( ) ; j ++ ) { if ( s . charAt ( j ) == '4' || s . charAt ( j ) == '7' ) { cnt ++ ; } } if ( cnt <= k ) ans ++ ; } System . out . println ( ans ) ;    } }"],"bleu":0.005234692735057286,"rouge_l":0.13863636363636364}
{"id":606,"predictions":["import java . util . * ; import java . io . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner fs = new FastScanner ( ) ; PrintWriter out = new PrintWriter ( System . out ) ;"],"references":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . ArrayList ; import java . util . List ; import java . util . StringTokenizer ;   public class VasyaAndWrestling { public static void main ( String [ ] args ) { FastReader ( ) ; int t = 1 ; while ( t > 0 ) { solve ( ) ; -- t ; } write . flush ( ) ; write . close ( ) ; } static void solve ( ) { int n = ni ( ) ; int m = ni ( ) ; int a [ ] = ina ( n ) ; int b [ ] = ina ( m ) ; int i = 0 , j = 0 ; while ( i < n && j < m ) { if ( a [ i ] <= b [ j ] ) { ++ i ; ++ j ; } else { ++ j ; } } out ( n - i ) ; }"],"bleu":0.038565407461073876,"rouge_l":0.2793237055301162}
{"id":607,"predictions":["import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;  "],"references":["import java . math . BigInteger ; import java . util . * ; public class _1238A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { BigInteger x = new BigInteger ( sc . next ( ) ) ; BigInteger y = new BigInteger ( sc . next ( ) ) ; if ( ( x . subtract ( y ) ) . equals ( BigInteger . ONE ) ) System . out . println ( \" NO \" ) ; else System . out . println ( \" YES \" ) ; } } }"],"bleu":0.0400397574643461,"rouge_l":0.2484505046927572}
{"id":608,"predictions":["import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ;   public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int m = Integer . parseInt ( st . nextToken ( ) ) ; int f = Integer . parseInt ( st . nextToken ( ) ) ; int x = Integer . parseInt ( st . nextToken ( ) ) ; int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int x = Integer . parseInt ( st . nextToken ( ) ) ; int y = Integer . parseInt ( st . nextToken ( ) ) ; if ( x >= f && x >= f ) { cnt += l ; } else { cnt ++ ; } } System . out . println ( \" \" ) ; for ( int i = 0 ; i < m ; i ++ ) { if ( x >= f && x >= f ) { cnt += l ; } else { cnt ++ ; } } System . out . println ( cnt ) ; } }"],"references":["import java . io . IOException ; import java . io . InputStream ; import java . util . StringTokenizer ;    import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . OutputStreamWriter ; import java . io . PrintWriter ; public class Main { static int maxn = ( int ) ( 1e5 + 5 ) ; static int [ ] t = new int [ maxn ] ; static int [ ] l = new int [ maxn ] ; static int [ ] r = new int [ maxn ] ; public static void main ( String [ ] args ) { InputStream inputStream = System . in ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( new OutputStreamWriter ( System . out ) ) ; int n = in . nextInt ( ) ; int m = in . nextInt ( ) ; int s = in . nextInt ( ) ; int f = in . nextInt ( ) ; for ( int i = 1 ; i <= m ; ++ i ) { t [ i ] = in . nextInt ( ) ; l [ i ] = in . nextInt ( ) ; r [ i ] = in . nextInt ( ) ; } int pos = s , p = 0 ; for ( int i = 1 ; pos != f ; ++ i ) { while ( p <= m && t [ p ] < i ) { ++ p ; } if ( pos < f ) { if ( p > m || t [ p ] != i || ( t [ p ] == i && ( l [ p ] > pos + 1 || r [ p ] < pos ) ) ) { out . print ( ' R ' ) ; ++ pos ; } else { out . print ( ' X ' ) ; } } else { if ( p > m || t [ p ] != i || ( t [ p ] == i && ( l [ p ] > pos || r [ p ] < pos - 1 ) ) ) { out . print ( ' L ' ) ; -- pos ; } else { out . print ( ' X ' ) ; } } } out . flush ( ) ; out . close ( ) ;"],"bleu":0.17910420261013638,"rouge_l":0.37611006303777667}
{"id":609,"predictions":["import java . util . * ; import java . io . * ;   public class Main { public static void main ( String [ ] args ) throws IOException {"],"references":["n , m = map ( int , input ( ) . split ( ) ) a = [ 10 * * 9 for _ in range ( n ) ] extra = [ 0 for _ in range ( n ) ] query = list ( ) for _ in range ( m ) : t , l , r , x = map ( int , input ( ) . split ( ) ) l -= 1 r -= 1 query . append ( ( t , l , r , x ) ) if t == 1 : for j in range ( l , r + 1 ) : extra [ j ] += x else : for j in range ( l , r + 1 ) : a [ j ] = min ( a [ j ] , x - extra [ j ] ) extra = a . copy ( ) for t , l , r , x in query : if t == 1 : for j in range ( l , r + 1 ) : a [ j ] += x else : val = - 10 * * 9 for j in range ( l , r + 1 ) : val = max ( val , a [ j ] ) if not val == x : print ( ' NO ' ) exit ( 0 )   print ( ' YES ' ) for x in extra : print ( x , end = ' ▁ ' )"],"bleu":0.000034685349500564825,"rouge_l":0.053467082197117266}
{"id":610,"predictions":["import java . util . * ; import java . io . * ;   public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ;   int [ ] count = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } int i = 0 ; for ( int i = 0 ; i < arr . length ; i ++ ) { if ( arr [ i ] == arr [ i - 1 ] ) { count ++ ; } else if ( arr [ i ] == arr [ i ] ) { count ++ ; } } System . out . println ( count ) ; System . out . println ( count ) ;   }   }"],"references":["import java . util . * ;   public class TestCodeforces {   public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ;   String s = scanner . nextLine ( ) ; String s2 = scanner . nextLine ( ) ;   int i = s . length ( ) - 1 , j = s2 . length ( ) - 1 ;   while ( i >= 0 && j >= 0 ) { if ( s . charAt ( i ) == s2 . charAt ( j ) ) { i -- ; j -- ; } else break ; } System . out . println ( i + j + 2 ) ;   scanner . close ( ) ; }   }"],"bleu":0.1867522303747229,"rouge_l":0.4590624716656088}
{"id":611,"predictions":["import java . util . * ; import java . lang . * ; import java . io . * ;   public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) {"],"references":["import java . io . * ;   public class CF { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; long [ ] sequence = { 1 , 2 , 4 , 8 , 16 , 32 , 64 , 128 , 256 , 512 , 1024 , 2048 , 4096 , 8092 , 16184 , 32368 , 64736 , 129472 , 258944 , 517888 , 1035776 , 2071552 , 4143104 , 8286208 , 16572416 , 33144832 , 66289664 , 132579328 , 265158656 , 530317312 , 1060634624 , 2121269248 , 4242538496L , 8485076992L , 16970153984L , 33940307968L } ; System . out . println ( sequence [ Integer . parseInt ( br . readLine ( ) ) ] ) ; } }  "],"bleu":0.017700202047822786,"rouge_l":0.1707558043800428}
{"id":612,"predictions":["import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;  "],"references":["import java . util . Arrays ; import java . util . Scanner ;   public class _0833IlyaandQueries { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; char [ ] str = sc . nextLine ( ) . toCharArray ( ) ; long [ ] oriArr = new long [ str . length + 1 ] ; oriArr [ 1 ] = 1 ; for ( int i = 1 ; i < str . length ; i ++ ) { if ( str [ i ] == str [ i - 1 ] ) { oriArr [ i + 1 ] = oriArr [ i ] + 1 ; } else { oriArr [ i + 1 ] = oriArr [ i ] ; } } int m = sc . nextInt ( ) ; for ( int i = 0 ; i < m ; i ++ ) { int l = sc . nextInt ( ) ; int r = sc . nextInt ( ) ; System . out . println ( oriArr [ r ] - oriArr [ l ] ) ; } }   }"],"bleu":0.005590488312215405,"rouge_l":0.17389238626915313}
{"id":613,"predictions":["import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;  "],"references":["import java . util . * ;   public class Example { static int [ ] dp ;   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ;"],"bleu":0.1671139084055298,"rouge_l":0.2391219129753038}
{"id":614,"predictions":["import java . util . * ; import java . io . * ;   public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; }   public static void run ( FastScanner in , PrintWriter out ) {  "],"references":["import java . io . BufferedReader ; import java . io . FileReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Scanner ; import java . util . StringTokenizer ; import java . util . * ; import java . io . * ; public class codeforces { static class Student { int x , y , z ; Student ( int x , int y , int z ) { this . x = x ; this . y = y ; this . z = z ; } } static int prime [ ] ; static void sieveOfEratosthenes ( int n ) {"],"bleu":0.1666925568046141,"rouge_l":0.3247220917488649}
{"id":615,"predictions":["import java . util . * ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; char [ ] arr = new char [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . next ( ) . toCharArray ( ) ; } int last = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( arr [ i ] != 0 ) { System . out . print ( - 1 ) ; for ( int j = i + 1 ; j < n - 1 ; j ++ ) { if ( arr [ j ] != last - 1 ) { System . out . print ( arr [ i ] + \" ▁ \" ) ; last = i + 1 ; } else { System . out . println ( \" \" ) ; return ; } } } System . out . println ( \" - 1\" ) ; } }"],"references":["import java . util . Scanner ;   public class PoloPenguinStringMaker { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; int k = scan . nextInt ( ) ;   if ( k == 1 ) { if ( n == 1 ) { System . out . println ( \" a \" ) ; } else System . out . println ( - 1 ) ; return ; } if ( k > n ) { System . out . println ( - 1 ) ; return ; } StringBuilder ans = new StringBuilder ( ) ;   for ( int i = 0 ; i < n - k + 2 ; i ++ ) { if ( i % 2 == 0 ) ans . append ( ' a ' ) ; else ans . append ( ' b ' ) ; }   char c = ' c ' ; for ( int i = 0 ; i < k - 2 ; i ++ ) { ans . append ( c ) ; c ++ ; }   System . out . println ( ans ) ; } }"],"bleu":0.4763589024181133,"rouge_l":0.5165651463378399}
{"id":616,"predictions":["import java . util . * ; import java . lang . * ; import java . io . * ;   public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) {"],"references":["import java . util . Scanner ;   public class mahmoudAndLongestUncommonSubsequence { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String value1 = sc . next ( ) ; String value2 = sc . next ( ) ; if ( value1 . equals ( value2 ) ) { System . out . println ( - 1 ) ; } else if ( value1 . length ( ) > value2 . length ( ) ) { System . out . println ( value1 . length ( ) ) ; } else { System . out . println ( value2 . length ( ) ) ; } } }"],"bleu":0.020175417226148726,"rouge_l":0.1848134822950199}
{"id":617,"predictions":["import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String a = sc . next ( ) ; System . out . println ( \" W \" ) ; } }"],"references":["import java . io . * ; import java . util . * ; import java . util . Scanner ; import java . util . Arrays ;   public class cas { public static void main ( String [ ] args ) {"],"bleu":0.35676066549538454,"rouge_l":0.4329165258533289}
{"id":618,"predictions":["public class GFG { static int findSum ( int n ) { int sum2 = ( ( n \/ 2 ) * ( 4 + ( n \/ 2 - 1 ) * 2 ) \/ 2 ) ; int sum5 = ( ( n \/ 5 ) * ( 10 + ( n \/ 5 - 1 ) * 5 ) ) \/ 2 ; int sum10 = ( ( n \/ 10 ) * ( 20 + ( n \/ 10 - 1 ) * 10 ) \/ 2 ; return sum2 + sum5 - sum10 ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( findSum ( n ) ) ; } }"],"references":["import java . lang . * ; import java . util . * ; class GFG { static long findSum ( int n ) { long sum2 , sum5 , sum10 ; sum2 = ( ( n \/ 2 ) * ( 4 + ( n \/ 2 - 1 ) * 2 ) ) \/ 2 ; sum5 = ( ( n \/ 5 ) * ( 10 + ( n \/ 5 - 1 ) * 5 ) ) \/ 2 ; sum10 = ( ( n \/ 10 ) * ( 20 + ( n \/ 10 - 1 ) * 10 ) ) \/ 2 ; return sum2 + sum5 - sum10 ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( findSum ( n ) ) ; } }"],"bleu":0.7748087970378364,"rouge_l":0.8817906271858243}
{"id":619,"predictions":["class GFG { static int waysToSplit ( String s ) { int n = s . length ( ) ; int answer = 0 ; int [ ] prefix = new int [ n ] ; int [ ] suffix = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { prefix [ i - 1 ] = ( i - 1 >= 0 ) ? 0 : 0 ; } int seen [ ] = new int [ 26 ] ; for ( int i = 0 ; i < n ; i ++ ) { int prev = prefix [ i - 1 ] ; if ( seen [ s . charAt ( i ) - ' a ' ] == 0 ) { prefix [ i ] += ( prev + 1 ) ; } else { prefix [ i ] = prev ; } visited [ s . charAt ( i ) - ' a ' ] = 1 ; } int len [ ] = new int [ 26 ] ; suffix [ n - 1 ] = 0 ; for ( int i = n - 1 ; i >= 1 ; i -- ) { prev = suffix [ i ] ; if ( seen [ i ] == 0 ) { suffix [ i - 1 ] += ( prev + 1 ) ; } else { suffix [ i - 1 ] = prev ; } dupl [ s . length ( ) - ' a ' ] = 1 ; } for ( int i = 0 ; i < n ; i ++ ) { if ( prefix [ i ] == suffix [ i ] ) { answer ++ ; } } return answer ; } public static void main ( String [ ] args ) { String s = \" ababa \" ; System . out . print ( waysToSplit ( s ) ) ; } }"],"references":["class GFG { static int waysToSplit ( String s ) { int n = s . length ( ) ; int answer = 0 ; int prefix [ ] = new int [ n ] ; int suffix [ ] = new int [ n ] ; int seen [ ] = new int [ 26 ] ; for ( int i = 0 ; i < n ; i ++ ) { int prev = ( i - 1 >= 0 ? prefix [ i - 1 ] : 0 ) ; if ( seen [ s . charAt ( i ) - ' a ' ] == 0 ) { prefix [ i ] += ( prev + 1 ) ; } else prefix [ i ] = prev ; seen [ s . charAt ( i ) - ' a ' ] = 1 ; } for ( int i = 0 ; i < 26 ; i ++ ) seen [ i ] = 0 ; suffix [ n - 1 ] = 0 ; for ( int i = n - 1 ; i >= 1 ; i -- ) { int prev = suffix [ i ] ; if ( seen [ s . charAt ( i ) - ' a ' ] == 0 ) { suffix [ i - 1 ] += ( prev + 1 ) ; } else suffix [ i - 1 ] = prev ; seen [ s . charAt ( i ) - ' a ' ] = 1 ; } for ( int i = 0 ; i < n ; i ++ ) { if ( prefix [ i ] == suffix [ i ] ) answer ++ ; } return answer ; } public static void main ( String [ ] args ) { String s = \" ababa \" ; System . out . println ( waysToSplit ( s ) ) ; } }"],"bleu":0.8145055623761115,"rouge_l":0.8594491463235653}
{"id":620,"predictions":["class GFG { static boolean check ( int a [ ] , int n ) { if ( n % 2 == 1 ) return false ; for ( int i = 0 ; i < n \/ 2 ; i ++ ) { if ( a [ i ] != a [ i + ( n \/ 2 ) ] ) return false ; } return true ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 4 , 1 , 4 } ; int n = a . length ; if ( check ( a , n ) ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ; } }"],"references":["public class GFG { static boolean check ( int a [ ] , int n ) { if ( n % 2 == 1 ) return false ; for ( int i = 0 ; i < n \/ 2 ; i ++ ) { if ( a [ i ] != a [ i + ( n \/ 2 ) ] ) return false ; } return true ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 4 , 1 , 4 } ; int n = a . length ; if ( check ( a , n ) ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ; } }"],"bleu":0.992727304900193,"rouge_l":0.9957107113070416}
{"id":621,"predictions":["class GFG { static boolean solve ( int n , int k ) { if ( n >= ( k * ( k + 1 ) ) \/ 2 ) { return true ; } return false ; } public static void main ( String [ ] args ) { int n = 12 , k = 4 ; if ( solve ( n , k ) ) { System . out . println ( \" Yes \" ) ; } else { System . out . println ( \" No \" ) ; } } }"],"references":["import java . io . * ; class GFG { static boolean solve ( int n , int k ) { if ( n >= ( k * ( k + 1 ) ) \/ 2 ) { return true ; } return false ; } public static void main ( String [ ] args ) { int n = 12 , k = 4 ; if ( solve ( n , k ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.890968346828312,"rouge_l":0.9415767634854773}
{"id":622,"predictions":["class GFG { static void numbersWith3Divisors ( int n ) { boolean [ ] prime = new boolean [ n + 1 ] ; for ( int i = 0 ; i < n + 1 ; i ++ ) prime [ i ] = true ; prime [ 0 ] = prime [ 1 ] = false ; for ( int p = 2 ; p * p <= n ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i < n + 1 ; i += p ) prime [ i ] = false ; } } System . out . print ( \" Number ▁ with ▁ 3 ▁ divisors ▁ : \" ) ; for ( int i = 0 ; i * i <= n ; i ++ ) { if ( prime [ i ] ) System . out . print ( i * i + \" ▁ \" ) ; } } public static void main ( String [ ] args ) { int n = 96 ; numbersWith3Divisors ( n ) ; } }"],"references":["import java . io . * ; import java . util . * ; class GFG { static void numbersWith3Divisors ( int n ) { boolean [ ] prime = new boolean [ n + 1 ] ; Arrays . fill ( prime , true ) ; prime [ 0 ] = prime [ 1 ] = false ; for ( int p = 2 ; p * p <= n ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i <= n ; i += p ) prime [ i ] = false ; } } System . out . println ( \" Numbers ▁ with ▁ 3 ▁ divisors ▁ : ▁ \" ) ; for ( int i = 0 ; i * i <= n ; i ++ ) if ( prime [ i ] ) System . out . print ( i * i + \" ▁ \" ) ; } public static void main ( String [ ] args ) { int n = 96 ; numbersWith3Divisors ( n ) ; } }"],"bleu":0.8060677170573308,"rouge_l":0.8758921823830716}
{"id":623,"predictions":["class GfG { static int countWays ( int A , int B , int C ) { int minAddA = Math . max ( 0 , ( C + A + 2 ) \/ 2 ) ; int countWays = Math . max ( C - minAddA + 1 ) ; return countWays ; } public static void main ( String [ ] args ) { int A = 3 , B = 5 , C = 5 ; System . out . println ( countWays ( A , B , C ) ) ; } }"],"references":["import java . util . * ; class GFG { static int countWays ( int A , int B , int C ) { int minAddA = Math . max ( 0 , ( C + B - A + 2 ) \/ 2 ) ; int count_ways = Math . max ( C - minAddA + 1 , 0 ) ; return count_ways ; } public static void main ( String args [ ] ) { int A = 3 , B = 5 , C = 5 ; System . out . println ( countWays ( A , B , C ) ) ; } }"],"bleu":0.7665578760939524,"rouge_l":0.89862189133534}
{"id":624,"predictions":["class GFG { static boolean isOperand ( char x ) { return ( ( x >= ' a ' && x <= ' Z ' ) || ( x >= ' Z ' ) ) ; } static String getInfix ( String exp ) { Stack < String > s = new Stack < > ( ) ; for ( int i = 0 ; i < exp . length ( ) ; i ++ ) { if ( isOperand ( i ) ) s . push ( i ) ; else s . pop ( ) ; char op1 = s . pop ( ) ; s . pop ( ) ; s . pop ( ) ; } return s . next ( ) ; } public static void main ( String [ ] args ) { String exp = \" ab * c + \" ; System . out . println ( getInfix ( exp ) ) ; } }"],"references":["import java . util . * ; class GFG { static boolean isOperand ( char x ) { return ( x >= ' a ' && x <= ' z ' ) || ( x >= ' A ' && x <= ' Z ' ) ; } static String getInfix ( String exp ) { Stack < String > s = new Stack < String > ( ) ; for ( int i = 0 ; i < exp . length ( ) ; i ++ ) { if ( isOperand ( exp . charAt ( i ) ) ) { s . push ( exp . charAt ( i ) + \" \" ) ; } else { String op1 = s . peek ( ) ; s . pop ( ) ; String op2 = s . peek ( ) ; s . pop ( ) ; s . push ( \" ( \" + op2 + exp . charAt ( i ) + op1 + \" ) \" ) ; } } return s . peek ( ) ; } public static void main ( String args [ ] ) { String exp = \" ab * c + \" ; System . out . println ( getInfix ( exp ) ) ; } }"],"bleu":0.5873516128008961,"rouge_l":0.7855171837110126}
{"id":625,"predictions":["class GFG { static int CountPairs ( int arr [ ] , int n ) { int twoCount = 0 ; int twoGCount = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 2 ) twoCount ++ ; else if ( arr [ i ] > 2 ) twoCount ++ ; } return ( twoCount * ( twoGCount * ( twoGCount - 1 ) ) \/ 2 ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 4 , 5 } ; int n = arr . length ; System . out . println ( CountPairs ( arr , n ) ) ; } }"],"references":["import java . * ; public class GFG { static int countPairs ( int arr [ ] , int n ) { int twoCount = 0 , twoGrCount = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 2 ) twoCount ++ ; else if ( arr [ i ] > 2 ) twoGrCount ++ ; } return twoCount * twoGrCount + ( twoGrCount * ( twoGrCount - 1 ) ) \/ 2 ; } public static void main ( String args [ ] ) { int arr [ ] = { 3 , 4 , 5 } ; int n = arr . length ; System . out . println ( countPairs ( arr , n ) ) ; } }"],"bleu":0.770925011126192,"rouge_l":0.896622934888241}
{"id":626,"predictions":["import java . io . * ; class GFG { static boolean isValidTime ( String num ) { String regexPattern = \" ( \"1\" ) ? \" : \" + \"9\" ) : \" + \" ? \" : ▁ \" + String . valueOf ( num ) : \" + \" ? \" : \" ) ; } static boolean isValidTime ( String str1 ) { char regexPattern [ ] = str . toCharArray ( ) ; StringBuilder sb = new StringBuilder ( ) ; sPattern . reverse ( ) . toCharArray ( ) ; if ( h == null ) return false ; if ( map == null ) return true ; else return false ; } public static void main ( String [ ] args ) { String str1 = \"1246 ▁ AM \" ; String str2 = \"9:45\" ; System . out . println ( isValidTime ( str1 ) ) ; if ( isValidTime ( str2 ) ) return true ; else return false ; } }"],"references":["import java . util . regex . * ; class GFG { public static boolean isValidTime ( String time ) { String regexPattern = \" ( 1[012 ] | [ 1-9 ] ) : \" + \" [ 0-5 ] [ 0-9 ] ( \\\\ s ) \" + \" ? ( ? i ) ( am | pm ) \" ; Pattern compiledPattern = Pattern . compile ( regexPattern ) ; if ( time == null ) { return false ; } Matcher m = compiledPattern . matcher ( time ) ; return m . matches ( ) ; } public static void main ( String args [ ] ) { String str1 = \"12:15 ▁ AM \" ; System . out . println ( isValidTime ( str1 ) ) ; String str2 = \"9:45PM \" ; System . out . println ( isValidTime ( str2 ) ) ; String str3 = \"1:15\" ; System . out . println ( isValidTime ( str3 ) ) ; String str4 = \"17:30\" ; System . out . println ( isValidTime ( str4 ) ) ; } }"],"bleu":0.35554032882545866,"rouge_l":0.539330963449093}
{"id":627,"predictions":["import java . util . * ; class GFG { static int minXOR ( int arr [ ] , int n ) { Arrays . sort ( arr ) ; int minXor = Integer . MIN_VALUE ; for ( int i = 0 ; i < n - 1 ; i ++ ) { val = arr [ i ] ^ arr [ i + 1 ] ; minXor = Math . min ( minXor , val ) ; } return minXor ; } public static void main ( String [ ] args ) { int arr [ ] = { 9 , 5 , 3 } ; int n = arr . length ; System . out . println ( minXOROR ( arr , n ) ) ; } }"],"references":["import java . util . Arrays ; class GFG { static int minXOR ( int arr [ ] , int n ) { Arrays . parallelSort ( arr ) ; int minXor = Integer . MAX_VALUE ; int val = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { val = arr [ i ] ^ arr [ i + 1 ] ; minXor = Math . min ( minXor , val ) ; } return minXor ; } public static void main ( String args [ ] ) { int arr [ ] = { 9 , 5 , 3 } ; int n = arr . length ; System . out . println ( minXOR ( arr , n ) ) ; } }"],"bleu":0.8610783334177624,"rouge_l":0.9406437400562967}
{"id":628,"predictions":["class GFG { static int sum ( int m , int n ) { return 8 * m * n - 6 * m - 6 * n + 4 ; } public static void main ( String args [ ] ) { int m = 3 , n = 2 ; System . out . println ( sum ( m , n ) ) ; } }"],"references":["class GFG { static int sum ( int m , int n ) { return 8 * m * n - 6 * m - 6 * n + 4 ; } public static void main ( String [ ] args ) { int m = 3 , n = 2 ; System . out . println ( sum ( m , n ) ) ; } }"],"bleu":0.9469611486431311,"rouge_l":0.9852941176470589}
{"id":629,"predictions":["import java . util . * ; class GFG { static boolean isPossible ( String str ) { HashMap < Character , Integer > freq = new HashMap < Character , Integer > ( ) ; for ( int j = 0 ; j < str . length ( ) ; j ++ ) { if ( freq . containsKey ( str . charAt ( j ) ) ) { freq . put ( str . charAt ( j ) , freq . get ( str . charAt ( j ) ) ; } else { freq . put ( str . charAt ( j ) , freq . get ( str . charAt ( j ) ) ) ; } } if ( freq . containsKey ( str . length ( ) - max_freq + 1 ) ) return true ; return false ; } public static void main ( String [ ] args ) { String str = \" geeksforgeeks \" ; if ( isPossible ( str ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; class GFG { static boolean isPossible ( char [ ] str ) { Map < Character , Integer > freq = new HashMap < > ( ) ; int max_freq = 0 ; for ( int j = 0 ; j < ( str . length ) ; j ++ ) { if ( freq . containsKey ( str [ j ] ) ) { freq . put ( str [ j ] , freq . get ( str [ j ] ) + 1 ) ; if ( freq . get ( str [ j ] ) > max_freq ) max_freq = freq . get ( str [ j ] ) ; } else { freq . put ( str [ j ] , 1 ) ; if ( freq . get ( str [ j ] ) > max_freq ) max_freq = freq . get ( str [ j ] ) ; } } if ( max_freq <= ( str . length - max_freq + 1 ) ) return true ; return false ; } public static void main ( String [ ] args ) { String str = \" geeksforgeeks \" ; if ( isPossible ( str . toCharArray ( ) ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.5952815837570659,"rouge_l":0.76997326997327}
{"id":630,"predictions":["class GFG { static boolean isVowel ( char c ) { return ( c == ' a ' || c == ' E ' || c == ' E ' || c == ' I ' || c == ' I ' || c == ' o ' || c == ' U ' || c == ' || c == ' U ' || c == ' U ' || c == ' u ' || c == ' U ' ) ; } static String reverseVowel ( String str ) { int i = 0 , j = str . length ( ) - 1 ; while ( i < j ) { if ( ! isVowel ( str . charAt ( i ) ) ) { i ++ ; continue ; } str = str . charAt ( i ) ; str . charAt ( j ) ; i ++ ; j -- ; } return str ; } public static void main ( String [ ] args ) { String str = \" hello ▁ world \" ; System . out . print ( reverseVowel ( str . toCharArray ( ) ) ; } }"],"references":["class GFG { static boolean isVowel ( char c ) { return ( c == ' a ' || c == ' A ' || c == ' e ' || c == ' E ' || c == ' i ' || c == ' I ' || c == ' o ' || c == ' O ' || c == ' u ' || c == ' U ' ) ; } static String reverseVowel ( String str ) { int i = 0 ; int j = str . length ( ) - 1 ; char [ ] str1 = str . toCharArray ( ) ; while ( i < j ) { if ( ! isVowel ( str1 [ i ] ) ) { i ++ ; continue ; } if ( ! isVowel ( str1 [ j ] ) ) { j -- ; continue ; } char t = str1 [ i ] ; str1 [ i ] = str1 [ j ] ; str1 [ j ] = t ; i ++ ; j -- ; } String str2 = String . copyValueOf ( str1 ) ; return str2 ; } public static void main ( String [ ] args ) { String str = \" hello ▁ world \" ; System . out . println ( reverseVowel ( str ) ) ; } }"],"bleu":0.6257040278088678,"rouge_l":0.7303749158123176}
{"id":631,"predictions":["import java . util . * ; class GFG { static int findBucketNo ( int p ) { int return ( int ) Math . ceil ( ( Math . sqrt ( 8 * p + 1 ) - 1 ) \/ 2 ) ; } public static void main ( String [ ] args ) { int p = 10 ; System . out . println ( findBucketNo ( p ) ) ; } }"],"references":["import java . lang . System . * ; class GFG { static int findBucketNo ( int p ) { return ( int ) Math . ceil ( ( Math . sqrt ( 8 * p + 1 ) - 1 ) \/ 2 ) ; } public static void main ( String [ ] args ) { int p = 10 ; System . out . println ( findBucketNo ( p ) ) ; } }"],"bleu":0.9206254369308361,"rouge_l":0.966181506849315}
{"id":632,"predictions":["class GFG { static class Node { int data ; Node left , right ; Node ( int data ) { this . data = data ; left = right = null ; } } ; static Node insert ( Node node , int data ) { if ( node == null ) return new Node ( data ) ; node . left = insert ( node . left , data ) ; else node . right = insert ( node . right , data ) ; return node ; } static int minValue ( Node node ) { if ( node . left == null ) return node . data ; return minValue ( node . left ) ; } public static void main ( String [ ] args ) { Node root = null ; root = insert ( root , 4 ) ; insert ( root , 2 ) ; insert ( root , 3 ) ; insert ( root , 1 ) ; insert ( root , 3 ) ; insert ( root , 6 ) ; insert ( root , 5 ) ; insert ( root , 6 ) ; System . out . println ( minValue ( root ) ) ; } }"],"references":["class GFG { static class Node { int data ; Node left ; Node right ; } ; static Node newNode ( int data ) { Node node = new Node ( ) ; node . data = data ; node . left = null ; node . right = null ; return ( node ) ; } static Node insert ( Node node , int data ) { if ( node == null ) return ( newNode ( data ) ) ; else { if ( data <= node . data ) node . left = insert ( node . left , data ) ; else node . right = insert ( node . right , data ) ; return node ; } } static int minValue ( Node node ) { if ( node . left == null ) return node . data ; return minValue ( node . left ) ; } public static void main ( String args [ ] ) { Node root = null ; root = insert ( root , 4 ) ; insert ( root , 2 ) ; insert ( root , 1 ) ; insert ( root , 3 ) ; insert ( root , 6 ) ; insert ( root , 5 ) ; System . out . println ( minValue ( root ) ) ; } }"],"bleu":0.7724493623797031,"rouge_l":0.8514366322666865}
{"id":633,"predictions":["class GFG { static void removeZeros ( int [ ] a , int n ) { int ind = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] != 0 ) { ind = i ; break ; } } if ( ind == - 1 ) { System . out . println ( \" Array ▁ has ▁ leading ▁ \" ) ; return ; } int [ ] b = new int [ n - ind ] ; for ( int i = 0 ; i < n - ind ; i ++ ) { b [ i ] = a [ ind + i ] ; } for ( int i = 0 ; i < n - ind ; i ++ ) System . out . print ( b [ i ] + \" ▁ \" ) ; } public static void main ( String [ ] args ) { int [ ] a = { 0 , 0 , 0 , 1 , 2 , 0 , 3 } ; int n = a . length ; removeZeros ( a , n ) ; } }"],"references":["import java . util . * ; class solution { static void removeZeros ( int [ ] a , int n ) { int ind = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] != 0 ) { ind = i ; break ; } } if ( ind == - 1 ) { System . out . print ( \" Array ▁ has ▁ leading ▁ zeros ▁ only \" ) ; return ; } int [ ] b = new int [ n - ind ] ; for ( int i = 0 ; i < n - ind ; i ++ ) b [ i ] = a [ ind + i ] ; for ( int i = 0 ; i < n - ind ; i ++ ) System . out . print ( b [ i ] + \" ▁ \" ) ; } public static void main ( String args [ ] ) { int [ ] a = { 0 , 0 , 0 , 1 , 2 , 0 , 3 } ; int n = a . length ; removeZeros ( a , n ) ; } }"],"bleu":0.8944030748827045,"rouge_l":0.9538665007001711}
{"id":634,"predictions":["class GFG { static int countCoins ( int n ) { int c = 0 ; if ( n < 10 ) return n ; if ( n > 9 && n < 25 ) { c = n \/ 10 + n % 10 ; return c ; } if ( n > 24 ) { c = c + n % 25 ; return c ; } if ( n % 25 > 9 ) { c = c + ( n % 25 ) \/ 10 + ( n % 25 ) % 10 ; return c ; } } return c ; } public static void main ( String [ ] args ) { int n = 14 ; System . out . println ( countCoins ( n ) ) ; } }"],"references":["class GFG { static int countCoins ( int n ) { int c = 0 ; if ( n < 10 ) { return n ; } if ( n > 9 && n < 25 ) { c = n \/ 10 + n % 10 ; return c ; } if ( n > 24 ) { c = n \/ 25 ; if ( n % 25 < 10 ) { c = c + n % 25 ; return c ; } if ( n % 25 > 9 ) { c = c + ( n % 25 ) \/ 10 + ( n % 25 ) % 10 ; return c ; } } return c ; } public static void main ( String [ ] args ) { int n = 14 ; System . out . println ( countCoins ( n ) ) ; } }"],"bleu":0.8685495672850445,"rouge_l":0.9317649682238822}
{"id":635,"predictions":["class GFG { static boolean isVowel ( char ch ) { if ( ch == ' a ' || ch == ' e ' || ch == ' i ' || ch == ' o ' || ch == ' u ' ) return true ; return false ; } static String createAltStr ( String str1 , String str2 , int l ) { String finalStr = \" \" ; int i = 0 ; for ( int j = start ; j < l ; j ++ ) { finalStr = ( finalStr + str1 . charAt ( i ) ) + str2 . charAt ( j ) ; } return finalStr ; } static String findAltStr ( String str1 ) { int nv = 0 ; int nc = str1 . length ( ) ; for ( int i = 0 ; i < l ; i ++ ) { if ( isVowel ( str1 . charAt ( i ) ) ) { nv ++ ; vstr = vstr + str1 . charAt ( i ) ; } else { nc ++ ; cstr = cstr + str1 . charAt ( i ) ; } } if ( Math . abs ( nv - nc ) >= 2 ) return \" no ▁ such ▁ string \" ; if ( nv > nc ) return \" no \" ; if ( nv > nv ) return new String ( cstr . substring ( 0 , vstr , 1 , nc ) ) ; return createAltStr ( vstr , vstr , 0 , nc ) ; } public static void main ( String [ ] args ) { String str1 = \" arr . toCharArray ( ) ; String str2 = \" \" ; int n = str1 . length ( ) ; int l = str1 . length ( ) ; for ( int i = 0 ; i < l ; i ++ ) { if ( findAltStr ( str , v , 0 , nv ) ) { System . out . print ( \" no ▁ \" + createAltStr ( vstr , 0 , nv ) ) ; } } }"],"references":["import java . util . * ; class GFG { static boolean isVowel ( char ch ) { if ( ch == ' a ' || ch == ' e ' || ch == ' i ' || ch == ' o ' || ch == ' u ' ) return true ; return false ; } static String createAltStr ( String str1 , String str2 , int start , int l ) { String finalStr = \" \" ; for ( int i = 0 , j = start ; j < l ; i ++ , j ++ ) finalStr = ( finalStr + str1 . charAt ( i ) ) + str2 . charAt ( j ) ; return finalStr ; } static String findAltStr ( String str ) { int nv = 0 , nc = 0 ; String vstr = \" \" , cstr = \" \" ; int l = str . length ( ) ; for ( int i = 0 ; i < l ; i ++ ) { char ch = str . charAt ( i ) ; if ( isVowel ( ch ) ) { nv ++ ; vstr = vstr + ch ; } else { nc ++ ; cstr = cstr + ch ; } } if ( Math . abs ( nv - nc ) >= 2 ) return \" no ▁ such ▁ string \" ; if ( nv > nc ) return ( vstr . charAt ( 0 ) + createAltStr ( cstr , vstr , 1 , nv ) ) ; if ( nc > nv ) return ( cstr . charAt ( 0 ) + createAltStr ( vstr , cstr , 1 , nc ) ) ; if ( cstr . charAt ( 0 ) < vstr . charAt ( 0 ) ) return createAltStr ( cstr , vstr , 0 , nv ) ; return createAltStr ( vstr , cstr , 0 , nc ) ; } public static void main ( String args [ ] ) { String str = \" geeks \" ; System . out . println ( findAltStr ( str ) ) ; } }"],"bleu":0.7020230955920052,"rouge_l":0.709238887398265}
{"id":636,"predictions":["import java . util . * ; class GFG { static int MAX = 3 ; static int [ ] [ ] dp = new int [ 15 ] [ 2 ] ; static int convertToString ( int num ) { return Integer . toString ( num ) ; } static int calculate ( int pos , int tight , int D , int sz , int num ) { if ( pos == num . length ( ) ) return 1 ; if ( dp [ pos ] [ tight ] != - 1 ) return dp [ pos ] [ tight ] ; int val = 0 ; if ( tight == 0 ) { for ( int i = 0 ; i < sz ; i ++ ) { if ( D [ i ] < ( num [ pos ] - '0' ) ) val += calculate ( pos + 1 , 1 , D , sz , num ) ; else if ( D [ i ] == num [ pos ] ) val += calculate ( pos + 1 , 1 , D , num ) ; } } else { for ( int i = 0 ; i < sz ; i ++ ) val += calculate ( pos + 1 , tight , D , sz , num ) ; } return dp [ pos ] [ tight ] = val ; } static int countNumbers ( int D , int N , int sz ) { int num = convertToString ( N ) ; int len = num . length ( N ) ; int ans = calculateToString ( 0 , 0 , D , D , sz , num ) ; for ( int i = 1 ; i < sz ; i ++ ) ans += calculate ( i , 1 , D , sz , num ) ; return ans ; } public static void main ( String [ ] args ) { int s = 3 ; int D [ ] = { 1 , 4 , 9 } ; int N = 10 ; System . out . println ( countNumbers ( D , N , S , sz , num ) ) ; } }"],"references":["import java . util . * ; class GFG { static int [ ] [ ] dp = new int [ 15 ] [ 2 ] ; static String convertToString ( int num ) { return String . valueOf ( num ) ; } static int calculate ( int pos , int tight , int D [ ] , int sz , String num ) { if ( pos == num . length ( ) ) return 1 ; if ( dp [ pos ] [ tight ] != - 1 ) return dp [ pos ] [ tight ] ; int val = 0 ; if ( tight == 0 ) { for ( int i = 0 ; i < sz ; i ++ ) { if ( D [ i ] < ( num . charAt ( pos ) - '0' ) ) { val += calculate ( pos + 1 , 1 , D , sz , num ) ; } else if ( D [ i ] == num . charAt ( pos ) - '0' ) val += calculate ( pos + 1 , tight , D , sz , num ) ; } } else { for ( int i = 0 ; i < sz ; i ++ ) { val += calculate ( pos + 1 , tight , D , sz , num ) ; } } return dp [ pos ] [ tight ] = val ; } static int countNumbers ( int D [ ] , int N , int sz ) { String num = convertToString ( N ) ; int len = num . length ( ) ; for ( int i = 0 ; i < 15 ; i ++ ) for ( int j = 0 ; j < 2 ; j ++ ) dp [ i ] [ j ] = - 1 ; int ans = calculate ( 0 , 0 , D , sz , num ) ; for ( int i = 1 ; i < len ; i ++ ) ans += calculate ( i , 1 , D , sz , num ) ; return ans ; } public static void main ( String [ ] args ) { int sz = 3 ; int D [ ] = { 1 , 4 , 9 } ; int N = 10 ; System . out . print ( countNumbers ( D , N , sz ) ) ; } }"],"bleu":0.7627601014872086,"rouge_l":0.8720638263405153}
{"id":637,"predictions":["import java . io . * ; class GFG { static int summation ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += Math . pow ( i , 2 ) ; return sum ; } public static void main ( String [ ] args ) { int n = 2 ; System . out . println ( summation ( n ) ) ; } }"],"references":["import java . util . * ; import java . lang . * ; class GFG { public static int summation ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += ( i * i ) ; return sum ; } public static void main ( String args [ ] ) { int n = 2 ; System . out . println ( summation ( n ) ) ; } }"],"bleu":0.7624378554918382,"rouge_l":0.8828637591663451}
{"id":638,"predictions":["import java . util . HashMap ; class GFG { public static int countPairs ( int a [ ] , int n ) { HashMap < Integer , Integer > frequency = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( frequency . containsKey ( a [ i ] ) ) frequency . put ( a [ i ] , frequency . get ( a [ i ] ) + 1 ) ; else frequency . put ( a [ i ] , 1 ) ; } int count = 0 ; for ( Map . Entry < Integer , Integer > x : frequency . entrySet ( ) ) { int f = frequency . getValue ( ) ; count += f * ( f - 1 ) \/ 2 ; } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 1 } ; int n = arr . length ; System . out . println ( countPairs ( arr , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static int countPairs ( int arr [ ] , int n ) { HashMap < Integer , Integer > frequency = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( frequency . containsKey ( arr [ i ] ) ) { frequency . put ( arr [ i ] , frequency . get ( arr [ i ] ) + 1 ) ; } else { frequency . put ( arr [ i ] , 1 ) ; } } int count = 0 ; for ( Map . Entry < Integer , Integer > x : frequency . entrySet ( ) ) { int f = x . getValue ( ) ; count += f * ( f - 1 ) \/ 2 ; } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 1 } ; int n = arr . length ; System . out . print ( countPairs ( arr , n ) ) ; } }"],"bleu":0.8274603613236431,"rouge_l":0.9380817482800486}
{"id":639,"predictions":["class GFG { static int search ( int a [ ] , int k , int x ) { for ( int j = k - 1 ; j >= 0 ; j -- ) if ( a [ j ] == x ) return j ; return - 1 ; } static void genArray ( int arr [ ] , int N ) { for ( int i = 0 ; i < N - 1 ; i ++ ) { if ( search ( arr , i , arr [ i ] ) == - 1 ) arr [ i + 1 ] = 0 ; else arr [ i + 1 ] = ( i - search ( arr , i , arr [ i ] ) ) ; } } static public void main ( String [ ] args ) { int N = 5 ; int size = N + 1 ; int a [ ] = new int [ N ] ; genArray ( a , N ) ; System . out . println ( a ) ; } }"],"references":["class GFG { static int a [ ] ; static int search ( int a [ ] , int k , int x ) { int j ; for ( j = k - 1 ; j > - 1 ; j -- ) { if ( a [ j ] == x ) return j ; } return - 1 ; } static void genArray ( int [ ] arr , int N ) { for ( int i = 0 ; i < N - 1 ; i ++ ) { if ( search ( arr , i , arr [ i ] ) == - 1 ) arr [ i + 1 ] = 0 ; else arr [ i + 1 ] = ( i - search ( arr , i , arr [ i ] ) ) ; } } public static void main ( String [ ] args ) { int N = 5 ; int size = N + 1 ; int a [ ] = new int [ N ] ; genArray ( a , N ) ; for ( int i = 0 ; i < N ; i ++ ) System . out . print ( a [ i ] + \" ▁ \" ) ; } }"],"bleu":0.7448206879356984,"rouge_l":0.8785405664906386}
{"id":640,"predictions":["class GFG { static int cntSplits ( String s ) { if ( s . charAt ( s . length ( ) - 1 ) == '1' ) { return 0 ; } int c_zero = 0 ; for ( int i = 0 ; i < s . length ( ) ; ++ i ) { c_zero += ( s . charAt ( i ) == '0' ) ; } return ( int ) ( Math . pow ( 2 , c_zero - 1 ) ) ; } public static void main ( String [ ] args ) { String s = \"10010\" ; System . out . println ( cntSplits ( s ) ) ; } }"],"references":["class GFG { static int maxN = 20 ; static int maxM = 64 ; static int cntSplits ( String s ) { if ( s . charAt ( s . length ( ) - 1 ) == '1' ) return 0 ; int c_zero = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) c_zero += ( s . charAt ( i ) == '0' ) ? 1 : 0 ; return ( int ) Math . pow ( 2 , c_zero - 1 ) ; } public static void main ( String [ ] args ) { String s = \"10010\" ; System . out . println ( cntSplits ( s ) ) ; } }"],"bleu":0.7804240225967989,"rouge_l":0.8967056044100276}
{"id":641,"predictions":["class GFG { static void moonsSum ( int mat [ ] [ ] , int n ) { int row_sum = 0 , col_sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { row_sum += mat [ n \/ 2 ] [ i ] ; } System . out . println ( \" Sum ▁ of ▁ middle ▁ row ▁ = ▁ \" + row_sum ) ; for ( int i = 0 ; i < n ; i ++ ) { col_sum += mat [ i ] [ n \/ 2 ] ; } System . out . println ( \" Sum ▁ of ▁ middle ▁ column ▁ = ▁ \" + col_sum ) ; } public static void main ( String [ ] args ) { int mat [ ] [ ] = { { 2 , 5 , 7 } , { 3 , 7 , 2 } , { 5 , 6 , 9 } } ; }"],"references":["import java . io . * ; class GFG { static int MAX = 100 ; static void middlesum ( int mat [ ] [ ] , int n ) { int row_sum = 0 , col_sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) row_sum += mat [ n \/ 2 ] [ i ] ; System . out . println ( \" Sum ▁ of ▁ middle ▁ row ▁ = ▁ \" + row_sum ) ; for ( int i = 0 ; i < n ; i ++ ) col_sum += mat [ i ] [ n \/ 2 ] ; System . out . println ( \" Sum ▁ of ▁ middle ▁ column ▁ = ▁ \" + col_sum ) ; } public static void main ( String [ ] args ) { int mat [ ] [ ] = { { 2 , 5 , 7 } , { 3 , 7 , 2 } , { 5 , 6 , 9 } } ; middlesum ( mat , 3 ) ; } }"],"bleu":0.8357614006701244,"rouge_l":0.9178683385579937}
{"id":642,"predictions":["import java . util . * ; class GFG { static void Vertices ( int x , int y ) { int val = Math . abs ( x ) + Math . abs ( y ) ; if ( x < 0 ) x = - 1 ; else x = 1 ; System . out . print ( val * x + \" ▁ \" ) ; if ( y < 0 ) y = - 1 ; else y = 1 ; System . out . print ( \"0\" + val * y ) ; } public static void main ( String [ ] args ) { int x = 3 , y = 3 ; Vertices ( x , y ) ; } }"],"references":["class GFG { static void Vertices ( int x , int y ) { int val = Math . abs ( x ) + Math . abs ( y ) ; System . out . print ( val * ( x < 0 ? - 1 : 1 ) + \" ▁ 0 ▁ \" ) ; System . out . print ( \"0 ▁ \" + val * ( y < 0 ? - 1 : 1 ) ) ; } public static void main ( String [ ] args ) { int x = 3 , y = 3 ; Vertices ( x , y ) ; } }"],"bleu":0.669982180106084,"rouge_l":0.7459699833240688}
{"id":643,"predictions":["class GFG { static boolean isPrime ( int n ) { for ( int i = 2 ; i * i <= Math . sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) return false ; } } static void printMinCountPrime ( int N ) { if ( isPrime ( N ) ) { minCount = 1 ; } else { if ( isPrime ( N - 2 ) ) { minCount = 2 ; } else { minCount = 3 ; } } System . out . println ( minCount ) ; } public static void main ( String [ ] args ) { int N = 100 ; printMinCountPrime ( N ) ; } }"],"references":["class GFG { static boolean isPrime ( int n ) { for ( int i = 2 ; i * i <= n ; i ++ ) { if ( n % i == 0 ) { return false ; } } return true ; } static void printMinCountPrime ( int N ) { int minCount ; if ( isPrime ( N ) ) { minCount = 1 ; } else if ( N % 2 == 0 ) { minCount = 2 ; } else { if ( isPrime ( N - 2 ) ) { minCount = 2 ; } else { minCount = 3 ; } } System . out . print ( minCount + \" \\n \" ) ; } public static void main ( String [ ] args ) { int N = 100 ; printMinCountPrime ( N ) ; } }"],"bleu":0.7406249994351041,"rouge_l":0.862421290245931}
{"id":644,"predictions":["import java . io . * ; import java . math . * ; class GFG { static int findCountUpto ( int d ) { int GP1_Sum = 9 * ( ( int ) ( ( Math . pow ( 10 , d ) - 1 ) \/ 9 ) \/ 9 ) ; int GP2_Sum = 9 * ( ( int ) ( ( Math . pow ( 9 , d ) - 1 ) \/ 8 ) ; return GP1_Sum - GP2_Sum ; } public static void main ( String args [ ] ) { int d = 1 ; System . out . println ( findCountUpto ( d ) ) ; d = 2 ; System . out . println ( findCountUpto ( d ) ) ; } }"],"references":["import java . io . * ; import java . math . * ; class GFG { static int findCount ( int d ) { return 9 * ( int ) ( ( Math . pow ( 10 , d - 1 ) - Math . pow ( 9 , d - 1 ) ) ) ; } static int findCountUpto ( int d ) { int totalCount = 0 ; for ( int i = 1 ; i <= d ; i ++ ) totalCount += findCount ( i ) ; return totalCount ; } public static void main ( String args [ ] ) { int d = 1 ; System . out . println ( findCountUpto ( d ) ) ; d = 2 ; System . out . println ( findCountUpto ( d ) ) ; d = 4 ; System . out . println ( findCountUpto ( d ) ) ; } }"],"bleu":0.6097258717598257,"rouge_l":0.6990431686693369}
{"id":645,"predictions":["import java . util . * ; class GfG { static int two_sets ( int a [ ] , int n ) { Arrays . sort ( a ) ; return ( a [ n \/ 2 ] - a [ ( n \/ 2 ) - 1 ] ) ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 4 , 4 , 6 , 7 , 9 } ; int n = a . length ; System . out . println ( two_sets ( a , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static int two_sets ( int a [ ] , int n ) { Arrays . sort ( a ) ; return a [ n \/ 2 ] - a [ ( n \/ 2 ) - 1 ] ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 4 , 4 , 6 , 7 , 9 } ; int n = a . length ; System . out . println ( two_sets ( a , n ) ) ; } }"],"bleu":0.9272950087156667,"rouge_l":0.9824727617243011}
{"id":646,"predictions":["class GFG { static void maximumArea ( int l , int b , int x , int y ) { double left = 0 , right = 0 ; left = x * b ; right = ( l - x - 1 ) * b ; right = ( b - y - 1 ) * l ; below = ( b - y - 1 ) * l ; } public static void main ( String [ ] args ) { int l = 8 , b = 8 , x = 0 ; maximumArea ( l , b , x , y ) ; } }"],"references":["import java . util . * ; class GFG { static void maximumArea ( int l , int b , int x , int y ) { int left , right , above , below ; left = x * b ; right = ( l - x - 1 ) * b ; above = l * y ; below = ( b - y - 1 ) * l ; System . out . print ( Math . max ( Math . max ( left , right ) , Math . max ( above , below ) ) ) ; } public static void main ( String [ ] args ) { int L = 8 , B = 8 ; int X = 0 , Y = 0 ; maximumArea ( L , B , X , Y ) ; } }"],"bleu":0.4815826142213049,"rouge_l":0.6756450597860288}
{"id":647,"predictions":["class GFG { static boolean check ( int arr [ ] , int N , int K ) { Map < Integer , Integer > unique = new HashMap < > ( ) ; for ( int i = 0 ; i < N ; i ++ ) unique . put ( arr [ i ] , 1 ) ; if ( unique . size ( ) == K ) return true ; return false ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 2 , 3 } ; int N = arr . length ; int K = 3 ; if ( check ( arr , N , K ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; class GFG { static boolean check ( int arr [ ] , int N , int K ) { HashSet < Integer > unique = new HashSet < Integer > ( ) ; for ( int i = 0 ; i < N ; i ++ ) unique . add ( arr [ i ] ) ; if ( unique . size ( ) == K ) return true ; return false ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 2 , 3 } ; int N = arr . length ; int K = 3 ; if ( check ( arr , N , K ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.8822228690425439,"rouge_l":0.9389631213254944}
{"id":648,"predictions":["import java . util . * ; import java . lang . * ; public class GFG { static int rstripPeasant ( int a , int b ) { int res = 0 ; while ( b > 0 ) { if ( ( b & 1 ) == 1 ) res += a ; a = a << 1 ; b = b >> 1 ; } return res ; } public static void main ( String args [ ] ) { System . out . println ( rstripPeasant ( 18 , 1 ) ) ; } }"],"references":["import java . io . * ; class GFG { static int russianPeasant ( int a , int b ) { int res = 0 ; while ( b > 0 ) { if ( ( b & 1 ) != 0 ) res = res + a ; a = a << 1 ; b = b >> 1 ; } return res ; } public static void main ( String [ ] args ) { System . out . println ( russianPeasant ( 18 , 1 ) ) ; System . out . println ( russianPeasant ( 20 , 12 ) ) ; } }"],"bleu":0.6762459205998366,"rouge_l":0.8098624940730204}
{"id":649,"predictions":["class GFG { static int FindMinimumCost ( int ind [ ] , int a [ ] , int n , int k , int dp [ ] ) { if ( ind == ( n - 1 ) ) return 0 ; else if ( dp [ ind ] != - 1 ) return dp [ ind ] ; else { int ans = Integer . MAX_VALUE ; for ( int i = 1 ; i < k ; i ++ ) { if ( ind + i < n ) ans = Math . min ( ans , Math . abs ( a [ ind + i ] - a [ ind ] ) + FindMinimumCost ( ind + i , a , n , k , dp ) ) ; else break ; } } dp [ ind ] = ans ; return ans ; } public static void main ( String [ ] args ) { int a [ ] = { 10 , 30 , 40 , 50 , 20 } ; int k = 3 ; int n = a . length ; int dp [ ] = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( FindMinimumCost ( 0 , a , n , k , dp ) ) ; } } }"],"references":["import java . util . * ; class GfG { static int FindMinimumCost ( int ind , int a [ ] , int n , int k , int dp [ ] ) { if ( ind == ( n - 1 ) ) return 0 ; else if ( dp [ ind ] != - 1 ) return dp [ ind ] ; else { int ans = Integer . MAX_VALUE ; for ( int i = 1 ; i <= k ; i ++ ) { if ( ind + i < n ) ans = Math . min ( ans , Math . abs ( a [ ind + i ] - a [ ind ] ) + FindMinimumCost ( ind + i , a , n , k , dp ) ) ; else break ; } return dp [ ind ] = ans ; } } public static void main ( String [ ] args ) { int a [ ] = { 10 , 30 , 40 , 50 , 20 } ; int k = 3 ; int n = a . length ; int dp [ ] = new int [ n ] ; Arrays . fill ( dp , - 1 ) ; System . out . println ( FindMinimumCost ( 0 , a , n , k , dp ) ) ; } }"],"bleu":0.855864417026624,"rouge_l":0.8974358974358975}
{"id":650,"predictions":["class GFG { static int maxi ( int x , int y ) { return ( x > y ) ? x : y ; } static int longestPalindromic ( String str , int i , int j , int count ) { if ( i > j ) { return count ; } if ( i == j ) { return ( count + 1 ) ; } if ( str . charAt ( i ) == str . charAt ( j ) ) { count = longestPalindromic ( str . charAt ( i + 1 , j - 1 , count + 2 ) ; } return maxi ( count , maxi ( String . valueOf ( str , i + 1 , j , 0 ) ) ) ; } static int longestPalindromic ( String str ) { int k = str . length ( ) - 1 ; return longestPalindromic ( str . charAt ( i + 1 , j , 0 ) ; } static int longestPalindromic_substr ( String str ) { int k = str . length ( ) - 1 ; return longestPalindromic ( str . length ( ) - 1 , 0 ) ; } public static void main ( String [ ] args ) { String str = \" aaaabbbaa \" ; System . out . println ( longestPalindromic ( str ) ) ; } }"],"references":["class GFG { static int max ( int x , int y ) { return ( x > y ) ? x : y ; } static int longestPalindromic ( String str , int i , int j , int count ) { if ( i > j ) return count ; if ( i == j ) return ( count + 1 ) ; if ( str . charAt ( i ) == str . charAt ( j ) ) { count = longestPalindromic ( str , i + 1 , j - 1 , count + 2 ) ; return max ( count , max ( longestPalindromic ( str , i + 1 , j , 0 ) , longestPalindromic ( str , i , j - 1 , 0 ) ) ) ; } return Math . max ( longestPalindromic ( str , i + 1 , j , 0 ) , longestPalindromic ( str , i , j - 1 , 0 ) ) ; } static int longest_palindromic_substr ( String str ) { return longestPalindromic ( str , 0 , str . length ( ) - 1 , 0 ) ; } public static void main ( String [ ] args ) { String str = \" aaaabbaa \" ; System . out . print ( longest_palindromic_substr ( str ) ) ; } }"],"bleu":0.6978265241335857,"rouge_l":0.8035979885260996}
{"id":651,"predictions":["import java . util . * ; class GFG { static int MAX_CHAR = 26 ; static int countPairs ( String str ) { int result = 0 ; int n = str . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 1 ; j <= MAX_CHAR ; j ++ ) { if ( ( i + j ) < n ) { if ( ( Math . abs ( str . charAt ( i + j ) - str . charAt ( i ) ) == j ) { result ++ ; } } } } return result ; } static public void main ( String [ ] args ) { String str = \" geeksforgeeks \" ; System . out . println ( countPairs ( str ) ) ; } }"],"references":["class Test { static final int MAX_CHAR = 26 ; static int countPairs ( String str ) { int result = 0 ; int n = str . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = 1 ; ( i + j ) < n && j <= MAX_CHAR ; j ++ ) if ( ( Math . abs ( str . charAt ( i + j ) - str . charAt ( i ) ) == j ) ) result ++ ; return result ; } public static void main ( String args [ ] ) { String str = \" geeksforgeeks \" ; System . out . println ( countPairs ( str ) ) ; } }"],"bleu":0.7506007062883602,"rouge_l":0.8705111708971809}
{"id":652,"predictions":["class GFG { static int countSetBits ( int n ) { int count = 0 ; while ( n > 0 ) { count += n & 1 ; n >>= 1 ; } return count ; } static int countOfOddPascal ( int n ) { int c = countSetBits ( n ) ; return ( int ) Math . pow ( 2 , c ) ; } public static void main ( String [ ] args ) { int n = 20 ; System . out . println ( countOfOddPascal ( n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int countSetBits ( int n ) { long count = 0 ; while ( n > 0 ) { count += n & 1 ; n >>= 1 ; } return ( int ) count ; } static int countOfOddsPascal ( int n ) { int c = countSetBits ( n ) ; return ( int ) Math . pow ( 2 , c ) ; } public static void main ( String [ ] args ) { int n = 20 ; System . out . println ( countOfOddsPascal ( n ) ) ; } }"],"bleu":0.8201765089800828,"rouge_l":0.9143262858946039}
{"id":653,"predictions":["class RearrangeArray { void rearrange ( int arr [ ] , int n ) { int i = 0 , j = n - 1 ; while ( i < j ) { while ( arr [ i ] > 0 ) i ++ ; while ( arr [ j ] < 0 ) j -- ; if ( i < j ) { temp = arr [ i ] ; arr [ i ] = arr [ j ] ; arr [ j ] = temp ; } } if ( i == 0 || i == n ) return 0 ; int k = 0 ; while ( k < n && i < n ) { temp = arr [ k ] ; arr [ k ] = arr [ i ] ; arr [ i ] = temp ; } } if ( i == 0 || i == n ) return 0 ; int k ; while ( k < n && i < n ) { temp = arr [ k ] ; arr [ k ] = arr [ i ] ; arr [ i ++ ] = temp ; k ++ ; } } void printArray ( arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + \" ▁ \" ) ; System . out . println ( \" \" ) ; } public static void main ( String args [ ] ) { Rearrange rearrange = new RearrangeArray ( ) ; int arr [ ] = { 2 , 3 , - 4 , - 1 , 6 , - 9 } ; int n = arr . length ; System . out . println ( \" Given ▁ array ▁ is ▁ \" ) ; rearrange . printArray ( arr , n ) ; rearrange . printArray ( arr , n ) ; rearrange . rearrange ( arr , n ) ; rearrange . printArray ( arr , n ) ; rearrange . rearrange ( arr , n ) ; } }"],"references":["class GFG { static void rearrange ( int arr [ ] , int n ) { int i = - 1 , j = n ; while ( i < j ) { while ( arr [ ++ i ] > 0 ) ; while ( arr [ -- j ] < 0 ) ; if ( i < j ) swap ( arr , i , j ) ; } if ( i == 0 || i == n ) return ; int k = 0 ; while ( k < n && i < n ) { swap ( arr , k , i ) ; i = i + 1 ; k = k + 2 ; } } static void printArray ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + \" ▁ \" ) ; System . out . println ( \" \" ) ; } static void swap ( int arr [ ] , int index1 , int index2 ) { int c = arr [ index1 ] ; arr [ index1 ] = arr [ index2 ] ; arr [ index2 ] = c ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 3 , - 4 , - 1 , 6 , - 9 } ; int n = arr . length ; System . out . println ( \" Given ▁ array ▁ is ▁ \" ) ; printArray ( arr , n ) ; rearrange ( arr , n ) ; System . out . println ( \" Rearranged ▁ array ▁ is ▁ \" ) ; printArray ( arr , n ) ; } }"],"bleu":0.5774984612399507,"rouge_l":0.7059285048791253}
{"id":654,"predictions":["class GFG { static int countDivibles ( int A , int B , int M ) { if ( A % M == 0 ) return ( ( B \/ M ) - ( A \/ M ) ) + 1 ; return ( ( B \/ M ) - ( A \/ M ) ) ; } public static void main ( String [ ] args ) { int A = 30 , B = 70 , M = 10 ; System . out . print ( countDivisibles ( A , B , M ) ) ; } }"],"references":["import java . io . * ; class GFG { static int countDivisibles ( int A , int B , int M ) { if ( A % M == 0 ) return ( B \/ M ) - ( A \/ M ) + 1 ; return ( B \/ M ) - ( A \/ M ) ; } public static void main ( String [ ] args ) { int A = 30 , B = 100 , M = 30 ; System . out . println ( countDivisibles ( A , B , M ) ) ; } }"],"bleu":0.8000151152968272,"rouge_l":0.9039948453608249}
{"id":655,"predictions":["class GFG { static int findMissing ( int arr [ ] , int n ) { int l = 0 , h = n - 1 ; int mid = 0 ; while ( h > l ) { mid = l + ( h - l ) \/ 2 ; if ( arr [ mid ] - mid == arr [ 0 ] ) { if ( arr [ mid + 1 ] - arr [ mid ] > 1 ) return arr [ mid ] + 1 ; else l = mid + 1 ; } else { if ( arr [ mid ] - arr [ mid - 1 ] > 1 ) return arr [ mid ] - 1 ; else h = mid - 1 ; } } return - 1 ; } public static void main ( String [ ] args ) { int arr [ ] = { - 9 , - 8 , - 7 , - 5 , - 2 , - 1 , 0 } ; int n = arr . length ; System . out . println ( findMissing ( arr , n ) ) ; } }"],"references":["class GFG { public static int findMissing ( int arr [ ] , int n ) { int l = 0 , h = n - 1 ; int mid ; while ( h > l ) { mid = l + ( h - l ) \/ 2 ; if ( arr [ mid ] - mid == arr [ 0 ] ) { if ( arr [ mid + 1 ] - arr [ mid ] > 1 ) return arr [ mid ] + 1 ; else { l = mid + 1 ; } } else { if ( arr [ mid ] - arr [ mid - 1 ] > 1 ) return arr [ mid ] - 1 ; else { h = mid - 1 ; } } } return - 1 ; } public static void main ( String args [ ] ) { int arr [ ] = { - 9 , - 8 , - 7 , - 5 , - 4 , - 3 , - 2 , - 1 , 0 } ; int n = arr . length ; System . out . print ( findMissing ( arr , n ) ) ; } }"],"bleu":0.8809390702082882,"rouge_l":0.9544250982909411}
{"id":656,"predictions":["import java . util . * ; class GFG { static int maxSum ( int a [ ] , int n ) { Arrays . sort ( a ) ; int sum = 0 ; for ( int i = 0 ; i < n - 1 ; i += 2 ) { sum += a [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 3 , 2 , 1 , 4 , 5 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }"],"references":["import java . util . Arrays ; class GFG { static int maxSum ( int a [ ] , int n ) { Arrays . sort ( a ) ; int sum = 0 ; for ( int i = 0 ; i < n - 1 ; i += 2 ) { sum += a [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 3 , 2 , 1 , 4 , 5 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }"],"bleu":0.9785826525822038,"rouge_l":0.9915254237288138}
{"id":657,"predictions":["public class GFG { static int trailing_zos ( int N ) { int count_of_two = 0 , count_of_five = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { val = i ; while ( val % 2 == 0 && val > 0 ) { val \/= 2 ; count_of_two += i ; } while ( val % 5 == 0 && val > 0 ) { val \/= 5 ; count_of_five += i ; } } int ans = Math . min ( count_of_two , count_of_five ) ; return ans ; } public static void main ( String [ ] args ) { int N = 12 ; System . out . println ( trailing_zos ( N ) ) ; } }"],"references":["class GFG { static int trailing_zeros ( int N ) { int count_of_two = 0 , count_of_five = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { int val = i ; while ( val % 2 == 0 && val > 0 ) { val \/= 2 ; count_of_two += i ; } while ( val % 5 == 0 && val > 0 ) { val \/= 5 ; count_of_five += i ; } } int ans = Math . min ( count_of_two , count_of_five ) ; return ans ; } public static void main ( String [ ] args ) { int N = 12 ; System . out . println ( trailing_zeros ( N ) ) ; } }"],"bleu":0.9419398408736426,"rouge_l":0.9770992366412214}
{"id":658,"predictions":["import java . util . * ; class GFG { static int sumOfSubstrings ( String num ) { int n = num . length ( ) ; sumofdigit = ( int ) ( num . charAt ( 0 ) - '0' ) ; int res = sumofdigit [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { int numi = num . charAt ( i ) - '0' ; sumofdigit [ i ] = ( int ) ( i + 1 ) * num . substring ( i + 1 ) ; res += sumofdigit [ i ] ; } return res ; } public static void main ( String [ ] args ) { String num = \"1234\" ; System . out . println ( sumOfSubstrings ( num ) ) ; } }"],"references":["import java . util . Arrays ; class GFG { public static int sumOfSubstrings ( String num ) { int n = num . length ( ) ; int sumofdigit [ ] = new int [ n ] ; sumofdigit [ 0 ] = num . charAt ( 0 ) - '0' ; int res = sumofdigit [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { int numi = num . charAt ( i ) - '0' ; sumofdigit [ i ] = ( i + 1 ) * numi + 10 * sumofdigit [ i - 1 ] ; res += sumofdigit [ i ] ; } return res ; } public static void main ( String [ ] args ) { String num = \"1234\" ; System . out . println ( sumOfSubstrings ( num ) ) ; } }"],"bleu":0.7730194860081372,"rouge_l":0.8697910909693821}
{"id":659,"predictions":["import java . util . * ; class GFG { static int sumOfDiv ( int x ) { int sum = 1 ; for ( int i = 2 ; i <= Math . sqrt ( x ) ; i ++ ) { if ( x % i == 0 ) { sum += i ; if ( i != x \/ i ) sum += x \/ i ; } } return sum ; } static boolean isAmicable ( int a , int b ) { return ( sumOfDiv ( a ) == b && sumOfDiv ( b ) == a ) ; } static int countPairs ( int arr [ ] , int n ) { return ( sumOfDiv ( int a ) == b && sumOfDiv ( b ) == a ) ; } static int countPairs ( int arr [ ] , int n ) { Set < Integer > s = new HashSet < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) s . add ( arr [ i ] ) ; for ( int i = 0 ; i < n ; i ++ ) s . add ( arr [ i ] ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . contains ( arr [ i ] ) ) { int sum = sumOfDiv ( arr [ i ] ) ; if ( isAmicable ( arr [ i ] ) ) count ++ ; } } return count \/ 2 ; } public static void main ( String [ ] args ) { int arr1 [ ] = { 220 , 284 , 1184 , 1210 , 2 , 5 } ; int n1 = arr1 . length ; System . out . println ( countPairs ( arr1 , n1 ) ) ; } }"],"references":["import java . util . * ; class GFG { static int sumOfDiv ( int x ) { int sum = 1 ; for ( int i = 2 ; i <= Math . sqrt ( x ) ; i ++ ) { if ( x % i == 0 ) { sum += i ; if ( x \/ i != i ) sum += x \/ i ; } } return sum ; } static boolean isAmicable ( int a , int b ) { return ( sumOfDiv ( a ) == b && sumOfDiv ( b ) == a ) ; } static int countPairs ( int arr [ ] , int n ) { HashSet < Integer > s = new HashSet < Integer > ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) s . add ( arr [ i ] ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . contains ( sumOfDiv ( arr [ i ] ) ) ) { int sum = sumOfDiv ( arr [ i ] ) ; if ( isAmicable ( arr [ i ] , sum ) ) count ++ ; } } return count \/ 2 ; } public static void main ( String [ ] args ) { int arr1 [ ] = { 220 , 284 , 1184 , 1210 , 2 , 5 } ; int n1 = arr1 . length ; System . out . println ( countPairs ( arr1 , n1 ) ) ; int arr2 [ ] = { 2620 , 2924 , 5020 , 5564 , 6232 , 6368 } ; int n2 = arr2 . length ; System . out . println ( countPairs ( arr2 , n2 ) ) ; } }"],"bleu":0.8227988237573891,"rouge_l":0.839920444693763}
{"id":660,"predictions":["class GFG { static int gcd ( int n ) { return n ^ ( n >> 1 ) ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( gcd ( n ) ) ; } }"],"references":["class GFG { static int grayCode ( int n ) { return n ^ ( n >> 1 ) ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( grayCode ( n ) ) ; } }"],"bleu":0.8987547482669214,"rouge_l":0.9607843137254902}
{"id":661,"predictions":["import java . io . * ; class GFG { static void printNonSquare ( int n ) { int curr_count = 2 , num = 2 , count = 0 ; while ( count < n ) { for ( int i = 0 ; i < curr_count && count < n ; i ++ ) { System . out . print ( num + \" ▁ \" ) ; count ++ ; num ++ ; } num = num + 1 ; curr_count = curr_count + 2 ; } } public static void main ( String [ ] args ) { int n = 10 ; printNonSquare ( n ) ; } }"],"references":["import java . io . * ; import java . math . * ; class GFG { static void printNonSquare ( int n ) { int curr_count = 2 , num = 2 , count = 0 ; while ( count < n ) { for ( int i = 0 ; i < curr_count && count < n ; i ++ ) { System . out . print ( num + \" ▁ \" ) ; count ++ ; num ++ ; } num ++ ; curr_count += 2 ; } } public static void main ( String args [ ] ) { int n = 10 ; printNonSquare ( n ) ; } }"],"bleu":0.8667361046978617,"rouge_l":0.9202960432678623}
{"id":662,"predictions":["import java . util . * ; class GFG { static void sortWithSetbits ( int arr [ ] , int n , int k ) { Vector < Integer > v1 = new Vector < Integer > ( ) ; Vector < Integer > v2 = new Vector < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int count = Integer . bitCount ( arr [ i ] ) ; v2 . add ( arr [ i ] ) ; } Collections . sort ( v2 ) ; for ( int i = 0 ; i < v1 . size ( ) ; i ++ ) arr [ v1 . get ( i ) ] = v2 . get ( i ) ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + \" ▁ \" ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 14 , 255 , 1 , 7 , 13 } ; int n = arr . length ; int k = 3 ; sortWithSetbits ( arr , n , k ) ; } }"],"references":["import java . util . * ; class Node { static void sortWithSetbits ( int arr [ ] , int n , int k ) { Vector < Integer > v1 = new Vector < > ( ) , v2 = new Vector < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( Integer . bitCount ( arr [ i ] ) == k ) { v1 . add ( i ) ; v2 . add ( arr [ i ] ) ; } } Collections . sort ( v2 ) ; for ( int i = 0 ; i < v1 . size ( ) ; i ++ ) { arr [ v1 . get ( i ) ] = v2 . get ( i ) ; } for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( arr [ i ] + \" ▁ \" ) ; } } public static void main ( String [ ] args ) { int arr [ ] = { 14 , 255 , 1 , 7 , 13 } ; int n = arr . length ; int k = 3 ; sortWithSetbits ( arr , n , k ) ; } }"],"bleu":0.8495940572676096,"rouge_l":0.92909426987061}
{"id":663,"predictions":["class GFG { static boolean isRotation ( int x , int y ) { int x64 = x | ( x << 32 ) ; while ( x64 >= y ) { if ( ( x64 ) == y ) return true ; xAAAAAAAA >>= 1 ; } return false ; } public static void main ( String [ ] args ) { int x = 122 , y = 2147483648 ; if ( isRotation ( x , y ) ) System . out . println ( \" yes \" ) ; else System . out . println ( \" no \" ) ; } }"],"references":["class GFG { static boolean isRotation ( long x , long y ) { long x64 = x | ( x << 32 ) ; while ( x64 >= y ) { if ( x64 == y ) { return true ; } x64 >>= 1 ; } return false ; } public static void main ( String [ ] args ) { long x = 122 ; long y = 2147483678L ; if ( isRotation ( x , y ) == false ) { System . out . println ( \" Yes \" ) ; } else { System . out . println ( \" No \" ) ; } } }"],"bleu":0.6383788277680239,"rouge_l":0.8626079190235189}
{"id":664,"predictions":["class GFG { static int findXorSum ( int arr [ ] , int n ) { int sum = 0 , mul = 1 ; for ( int i = 0 ; i < 30 ; i ++ ) { int c_odd = 0 ; int odd = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( ( arr [ j ] & ( 1 << i ) ) > 0 ) odd = ( ~ oddodd ) ; if ( odd > 0 ) c_odd ++ ; } for ( int j = 0 ; j < n ; j ++ ) { sum += ( mul * c_odd ) ; if ( ( arr [ j ] & ( 1 << i ) ) > 0 ) c_odd = ( n - j - c_odd ) ; } mul *= 2 ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 8 , 13 } ; int n = arr . length ; System . out . println ( findXorSum ( arr , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static int findXorSum ( int arr [ ] , int n ) { int sum = 0 ; int mul = 1 ; for ( int i = 0 ; i < 30 ; i ++ ) { int c_odd = 0 ; boolean odd = false ; for ( int j = 0 ; j < n ; j ++ ) { if ( ( arr [ j ] & ( 1 << i ) ) > 0 ) odd = ( ! odd ) ; if ( odd ) c_odd ++ ; } for ( int j = 0 ; j < n ; j ++ ) { sum += ( mul * c_odd ) ; if ( ( arr [ j ] & ( 1 << i ) ) > 0 ) c_odd = ( n - j - c_odd ) ; } mul *= 2 ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 8 , 13 } ; int n = arr . length ; System . out . println ( findXorSum ( arr , n ) ) ; } }"],"bleu":0.9105444168463489,"rouge_l":0.9496948834298233}
{"id":665,"predictions":["class GFG { static float calTime ( float arr [ ] , int n ) { float count = 0.0 ; for ( int i = 0 ; i < n ; i ++ ) count += 1 \/ arr [ i ] ; return 1 \/ count ; } public static void main ( String [ ] args ) { float arr [ ] = { 6.0 , 3.0 , 4.0 } ; int n = arr . length ; System . out . println ( calTime ( arr , n ) + \" ▁ Hours \" ) ; } }"],"references":["import java . io . * ; class GFG { static double calTime ( double arr [ ] , int n ) { double work = 0 ; for ( int i = 0 ; i < n ; i ++ ) work += 1 \/ arr [ i ] ; return 1 \/ work ; } public static void main ( String [ ] args ) { double arr [ ] = { 6.0 , 3.0 , 4.0 } ; int n = arr . length ; System . out . println ( calTime ( arr , n ) + \" ▁ Hours \" ) ; } }"],"bleu":0.769390687339574,"rouge_l":0.8856966326845845}
{"id":666,"predictions":["class GFG { static int GetMinSubarrayLength ( int a [ ] , int n ) { int ans = Math . max ( a [ 0 ] , a [ n - 1 ] ) ; int lo = 0 , hi = n - 1 ; while ( lo < n && a [ lo ] % ans == 0 ) { lo ++ ; } while ( hi > lo && a [ hi ] % ans == 0 ) hi -- ; return ( hi - lo + 1 ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 4 , 8 , 2 , 1 , 4 } ; int N = arr . length ; System . out . println ( getMinSubarrayLength ( arr , N ) ) ; } }"],"references":["class GFG { static int GetMinSubarrayLength ( int a [ ] , int n ) { int ans = Math . max ( a [ 0 ] , a [ n - 1 ] ) ; int lo = 0 , hi = n - 1 ; while ( lo < n && a [ lo ] % ans == 0 ) lo ++ ; while ( hi > lo && a [ hi ] % ans == 0 ) hi -- ; return ( hi - lo + 1 ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 4 , 8 , 2 , 1 , 4 } ; int N = arr . length ; int Length = GetMinSubarrayLength ( arr , N ) ; System . out . println ( Length ) ; } }"],"bleu":0.9130280773798023,"rouge_l":0.9338806301309075}
{"id":667,"predictions":["import java . util . * ; class GFG { static int maxSumBitonicSubArr ( int arr [ ] , int n ) { int mins [ ] = new int [ n ] ; int max_sum = 0 ; mins [ ] = new int [ n ] ; int max_sum = 0 ; mins [ 0 ] = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] > arr [ i - 1 ] ) mse [ i ] = mins [ i - 1 ] + arr [ i ] ; else mins [ i ] = arr [ i ] ; } msds [ n - 1 ] = arr [ n - 1 ] ; for ( int i = n - 2 ; i >= 0 ; i -- ) { if ( arr [ i ] > arr [ i + 1 ] ) msds [ i ] = msds [ i + 1 ] + arr [ i ] ; else msds [ i ] = arr [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) if ( max_sum < ( misa [ i ] + msds [ i ] - arr [ i ] ) ) max_sum = ( msin [ i ] + msds [ i ] - arr [ i ] ) ; return max_sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 5 , 3 , 9 , 2 , 7 , 6 , 4 } ; int n = arr . length ; System . out . print ( \" Maximum ▁ Sum ▁ = ▁ \" + maxSumBitonicSubArr ( arr , n ) ) ; } }"],"references":["class GFG { static int maxSumBitonicSubArr ( int arr [ ] , int n ) { int [ ] msis = new int [ n ] ; int [ ] msds = new int [ n ] ; int max_sum = Integer . MIN_VALUE ; msis [ 0 ] = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) if ( arr [ i ] > arr [ i - 1 ] ) msis [ i ] = msis [ i - 1 ] + arr [ i ] ; else msis [ i ] = arr [ i ] ; msds [ n - 1 ] = arr [ n - 1 ] ; for ( int i = n - 2 ; i >= 0 ; i -- ) if ( arr [ i ] > arr [ i + 1 ] ) msds [ i ] = msds [ i + 1 ] + arr [ i ] ; else msds [ i ] = arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) if ( max_sum < ( msis [ i ] + msds [ i ] - arr [ i ] ) ) max_sum = msis [ i ] + msds [ i ] - arr [ i ] ; return max_sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 5 , 3 , 9 , 2 , 7 , 6 , 4 } ; int n = arr . length ; System . out . println ( \" Maximum ▁ Sum ▁ = ▁ \" + maxSumBitonicSubArr ( arr , n ) ) ; } }"],"bleu":0.8372412764570343,"rouge_l":0.9412981228125996}
{"id":668,"predictions":["import java . util . * ; class GFG { static int minimumDeletions ( String s ) { int freqOfTwo [ ] = new int [ 26 ] ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) freqOfLetOfLet [ s . charAt ( i ) - ' a ' ] ++ ; HashMap < Character , Integer > letterFreq = new HashMap < > ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( freqOfLetter [ i ] != 0 ) { for ( int j = 0 ; j < 26 ; j ++ ) { if ( freqOfLetter . charAt ( i ) != 0 ) { letterFreq . put ( freqOfLetter . charAt ( i ) , ( freqOfLetter . charAt ( i ) ) + 1 ) ; } } else if ( letterFreq . containsKey ( ) ) { int i = 0 ; letterFreq . put ( i , 1 ) ; } else if ( letterFreq . size ( ) > 0 ) { while ( i > 0 ) { suffixFreq . put ( i , ++ i ) ; letterFreq . put ( i , 1 ) ; } else if ( ( ( it - 1 ) > 0 ) { List < Integer > a = new ArrayList < > ( ) ; while ( it - 1 ) { a [ it - 1 ] = a [ it . size ( ) - 1 ] ; if ( Integer . MAX_VALUE ) { Deque . add ( i ) ; } else if ( it - 1 ) > 0 ) { a . add ( 0 , it - 1 ) ; L = it - 1 ; } } } } return deletion ; } public static void main ( String [ ] args ) { String s = \" geeksforgeeks \" ; System . out . println ( minimumDeletions ( s ) ) ; } }"],"references":["import java . util . * ; import java . lang . * ; import java . io . * ; class GFG { public static int minimumDeletions ( char [ ] s ) { int [ ] freqOfLetter ; freqOfLetter = new int [ 26 ] ; for ( int i = 0 ; i < 26 ; i ++ ) freqOfLetter [ i ] = 0 ; for ( int i = 0 ; i < s . length ; i ++ ) { freqOfLetter [ s [ i ] - ' a ' ] ++ ; } Map < Integer , Integer > LetterFreqMap = new TreeMap < Integer , Integer > ( Collections . reverseOrder ( ) ) ; for ( int i = 0 ; i < 26 ; i ++ ) { if ( freqOfLetter [ i ] != 0 ) { if ( LetterFreqMap . containsKey ( freqOfLetter [ i ] ) ) { LetterFreqMap . put ( freqOfLetter [ i ] , LetterFreqMap . get ( freqOfLetter [ i ] ) + 1 ) ; } else LetterFreqMap . put ( freqOfLetter [ i ] , 1 ) ; } } int deletions = 0 ; Set < Map . Entry < Integer , Integer > > set = LetterFreqMap . entrySet ( ) ; for ( Map . Entry < Integer , Integer > me : set ) { if ( me . getKey ( ) == 0 ) break ; while ( me . getValue ( ) > 1 ) { deletions ++ ; LetterFreqMap . put ( me . getKey ( ) , LetterFreqMap . get ( me . getKey ( ) ) - 1 ) ; if ( LetterFreqMap . containsKey ( me . getKey ( ) - 1 ) ) { LetterFreqMap . put ( me . getKey ( ) - 1 , LetterFreqMap . get ( me . getKey ( ) - 1 ) + 1 ) ; } else LetterFreqMap . put ( me . getKey ( ) - 1 , 1 ) ; } } return deletions ; } public static void main ( String [ ] args ) throws java . lang . Exception { String s = \" geeksforgeeks \" ; System . out . println ( minimumDeletions ( s . toCharArray ( ) ) ) ; } }"],"bleu":0.403244614533696,"rouge_l":0.5576060710589859}
{"id":669,"predictions":["class GFG { static void findMax ( int arr [ ] , int n ) { int maxFirst = Integer . MIN_VALUE ; int mid = n \/ 2 ; for ( int i = 0 ; i < mid ; i ++ ) maxFirst = Math . max ( maxFirst , arr [ i ] ) ; if ( n % 2 == 1 ) maxFirst = Math . max ( maxFirst , arr [ mid ] ) ; int maxSecond = Integer . MIN_VALUE ; for ( int i = mid ; i < n ; i ++ ) maxSecond = Math . max ( maxSecond , arr [ i ] ) ; System . out . println ( maxFirst + \" , ▁ \" + maxSecond ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 12 , 14 , 5 } ; int n = arr . length ; findMax ( arr , n ) ; } }"],"references":["import java . io . * ; class GFG { static void findMax ( int [ ] arr , int n ) { int maxFirst = Integer . MIN_VALUE ; int mid = n \/ 2 ; for ( int i = 0 ; i < mid ; i ++ ) { maxFirst = Math . max ( maxFirst , arr [ i ] ) ; } if ( n % 2 == 1 ) { maxFirst = Math . max ( maxFirst , arr [ mid ] ) ; } int maxSecond = Integer . MIN_VALUE ; for ( int i = mid ; i < n ; i ++ ) { maxSecond = Math . max ( maxSecond , arr [ i ] ) ; } System . out . print ( maxFirst + \" , ▁ \" + maxSecond ) ; } public static void main ( String [ ] args ) { int [ ] arr = { 1 , 12 , 14 , 5 } ; int n = arr . length ; findMax ( arr , n ) ; } }"],"bleu":0.8259709203667108,"rouge_l":0.9412560909583109}
{"id":670,"predictions":["import java . util . * ; class GFG { static int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } static int lcm ( int a , int b ) { return ( a * b ) \/ gcd ( a , b ) ; } static void printSum ( int num1 , int den1 , int den2 ) { int lcd = lcm ( den1 , den2 ) ; num1 *= ( lcd \/ den1 ) ; num2 *= ( lcd \/ den2 ) ; res_num = num1 + num2 ; System . out . print ( res_num + \" \/ \" + lcd ) ; } public static void main ( String [ ] args ) { int num1 = 1 , den den1 = 6 , num2 = 7 ; printSum ( num1 , den1 , num2 , den2 ) ; } }"],"references":["public class GFG { static int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } static int lcm ( int a , int b ) { return ( a * b ) \/ gcd ( a , b ) ; } static void printSum ( int num1 , int den1 , int num2 , int den2 ) { int lcd = lcm ( den1 , den2 ) ; num1 *= ( lcd \/ den1 ) ; num2 *= ( lcd \/ den2 ) ; int res_num = num1 + num2 ; System . out . print ( res_num + \" \/ \" + lcd ) ; } public static void main ( String args [ ] ) { int num1 = 1 , den1 = 6 ; int num2 = 7 , den2 = 15 ; printSum ( num1 , den1 , num2 , den2 ) ; } }"],"bleu":0.8782454183692975,"rouge_l":0.9335217857490984}
{"id":671,"predictions":["class GFG { static int maxProduct ( int arr [ ] , int n , int p ) { int minVal = arr [ 0 ] ; int maxVal = arr [ 0 ] ; int maxProduct = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] < 0 ) { maxVal = minVal ; minVal = maxVal ; } maxVal = Math . max ( arr [ i ] , maxVal * arr [ i ] ) ; minVal = Math . min ( arr [ i ] , minVal * arr [ i ] ) ; if ( minVal == p || maxVal == p ) return true ; maxProduct = Math . max ( maxProduct , maxVal ) ; } return false ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , - 5 , - 4 } ; int product = - 10 ; if ( maxProduct ( arr , n , product ) ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ; } }"],"references":["import java . io . * ; class GFG { static boolean maxProduct ( int arr [ ] , int n , int p ) { int minVal = arr [ 0 ] ; int maxVal = arr [ 0 ] ; int maxProduct = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] < 0 ) { int temp = maxVal ; maxVal = minVal ; minVal = temp ; } maxVal = Math . max ( arr [ i ] , maxVal * arr [ i ] ) ; minVal = Math . min ( arr [ i ] , minVal * arr [ i ] ) ; if ( minVal == p || maxVal == p ) { return true ; } maxProduct = Math . max ( maxProduct , maxVal ) ; } return false ; } public static void main ( String [ ] args ) { int [ ] arr = { 1 , 2 , - 5 , - 4 } ; int product = - 10 ; int n = arr . length ; if ( maxProduct ( arr , n , product ) ) { System . out . println ( \" YES \" ) ; } else System . out . println ( \" NO \" ) ; } }"],"bleu":0.8311772995038164,"rouge_l":0.9271718772511166}
{"id":672,"predictions":["class GFG { static int solve ( int M , int N , int s ) { int ans = ( int ) ( ( Math . ceil ( M \/ s ) ) * ( Math . ceil ( N \/ s ) ) ) ; return ans ; } public static void main ( String args [ ] ) { int N = 12 , M = 13 , s = 4 ; System . out . println ( solve ( M , N , s ) ) ; } }"],"references":["class GFG { static int solve ( double M , double N , double s ) { int ans = ( ( int ) ( Math . ceil ( M \/ s ) ) * ( int ) ( Math . ceil ( N \/ s ) ) ) ; return ans ; } public static void main ( String [ ] args ) { double N = 12 , M = 13 , s = 4 ; System . out . println ( solve ( M , N , s ) ) ; } }"],"bleu":0.8043652362988554,"rouge_l":0.9180072651790349}
{"id":673,"predictions":["import java . util . * ; class GFG { static void if ( int [ ] arr , int n ) { int [ ] sum = new int [ n ] ; Arrays . sort ( arr ) ; sum [ 0 ] = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) sum [ i ] = sum [ i - 1 ] + arr [ i ] ; int max = arr [ n - 1 ] ; boolean flag = false ; for ( int i = 1 ; i <= max ; i ++ ) { int minx = 0 , l = 0 , rindex = n - 1 ; while ( l <= r ) { int m = ( l + r ) \/ 2 ; if ( arr [ m ] < i ) { findex = m ; l = m + 1 ; } else r = m - 1 ; } l = 1 ; int r = false ; while ( l <= r ) { int m = ( r + l ) \/ 2 ; if ( arr [ m ] > i ) { lindex = m ; r = m - 1 ; } else l = m + 1 ; } if ( sum [ findExists ( arr , find [ n - 1 ] - sum [ lindex - 1 ] ) { flag = true ; break ; } } if ( flag ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } public static void main ( String args [ ] ) { int arr [ ] = { 1 , 2 , 2 , 5 } ; int n = arr . length ; if ( flag ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; class GFG { static void IfExists ( int arr [ ] , int n ) { int sum [ ] = new int [ n ] ; Arrays . sort ( arr ) ; sum [ 0 ] = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) sum [ i ] = sum [ i - 1 ] + arr [ i ] ; int max = arr [ n - 1 ] ; boolean flag = false ; for ( int i = 1 ; i <= max ; i ++ ) { int findex = 0 ; int lindex = 0 ; int l = 0 ; int r = n - 1 ; while ( l <= r ) { int m = ( l + r ) \/ 2 ; if ( arr [ m ] < i ) { findex = m ; l = m + 1 ; } else r = m - 1 ; } l = 1 ; r = n ; flag = false ; while ( l <= r ) { int m = ( r + l ) \/ 2 ; if ( arr [ m ] > i ) { lindex = m ; r = m - 1 ; } else l = m + 1 ; } if ( sum [ findex ] == sum [ n - 1 ] - sum [ lindex - 1 ] ) { flag = true ; break ; } } if ( flag ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } public static void main ( String args [ ] ) { int arr [ ] = { 1 , 2 , 2 , 5 } ; int n = arr . length ; IfExists ( arr , n ) ; } }"],"bleu":0.85628138268905,"rouge_l":0.911444206519153}
{"id":674,"predictions":["class GFG { static float sumOfTheSeries ( int n ) { return ( float ) ( n ) \/ ( n + 1 ) ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( sumOfTheSeries ( n ) ) ; } }"],"references":["class demo { public static double sumOfTheSeries ( int n ) { return ( double ) n \/ ( n + 1 ) ; } public static void main ( String args [ ] ) { int n = 10 ; System . out . println ( sumOfTheSeries ( n ) ) ; } }"],"bleu":0.7439970880474202,"rouge_l":0.9023668639053256}
{"id":675,"predictions":["public class GFG { static void printClosest ( int arr [ ] , int n , int x ) { int res_l = 0 , res_r = 0 , l = n - 1 , diff = MAX_VAL ; while ( r > l ) { if ( Math . abs ( arr [ l ] + arr [ r ] - x ) < diff ) { res_l = l ; res_r = r ; diff = Math . abs ( arr [ l ] + arr [ r ] - x ) ; } if ( arr [ l ] + arr [ r ] > x ) r -- ; else l ++ ; } System . out . println ( \" The ▁ closest ▁ pair ▁ is ▁ \" + arr [ res_l ] ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 10 , 22 , 28 , 29 , 30 , 40 } ; int n = arr . length ; int x = 54 ; printClosest ( arr , n , x ) ; } }"],"references":["import java . io . * ; import java . util . * ; import java . lang . Math ; class CloseSum { static void printClosest ( int arr [ ] , int n , int x ) { int res_l = 0 , res_r = 0 ; int l = 0 , r = n - 1 , diff = Integer . MAX_VALUE ; while ( r > l ) { if ( Math . abs ( arr [ l ] + arr [ r ] - x ) < diff ) { res_l = l ; res_r = r ; diff = Math . abs ( arr [ l ] + arr [ r ] - x ) ; } if ( arr [ l ] + arr [ r ] > x ) r -- ; else l ++ ; } System . out . println ( \" ▁ The ▁ closest ▁ pair ▁ is ▁ \" + arr [ res_l ] + \" ▁ and ▁ \" + arr [ res_r ] ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 10 , 22 , 28 , 29 , 30 , 40 } , x = 54 ; int n = arr . length ; printClosest ( arr , n , x ) ; } }"],"bleu":0.7625716796700863,"rouge_l":0.8554625650305362}
{"id":676,"predictions":["class GFG { static int binomialCoeff ( int n , int k ) { int res = 1 ; if ( k > n - k ) k = n - k ; for ( int i = 0 ; i < k ; i ++ ) { res *= ( n - i ) ; res \/= ( i + 1 ) ; } return res ; } static int power ( int x , int y ) { int res = 1 ; while ( y > 0 ) { if ( ( y & 1 ) != 0 ) res = res * x ; y \/= 2 ; } return res ; } static void FindProbability ( int n ) { int up = binomialCoeff ( 2 * n , n ) ; int g = power ( 2 , 2 * n ) ; int g = gcd ( 2 , down ) ; down = down \/ g ; down \/ g ; } System . out . println ( up + \" \/ \" + down ) ; } public static void main ( String [ ] args ) { int N = 8 ; FindProbability ( N ) ; } }"],"references":["class GFG { static int binomialCoeff ( int n , int k ) { int res = 1 ; if ( k > n - k ) k = n - k ; for ( int i = 0 ; i < k ; ++ i ) { res *= ( n - i ) ; res \/= ( i + 1 ) ; } return res ; } static int power ( int x , int y ) { int res = 1 ; while ( y > 0 ) { if ( ( y & 1 ) == 1 ) res = res * x ; y = y >> 1 ; x = x * x ; } return res ; } static int gcd ( int a , int b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; } static void FindProbability ( int n ) { int up = binomialCoeff ( 2 * n , n ) ; int down = power ( 2 , 2 * n ) ; int g = gcd ( up , down ) ; up \/= g ; down \/= g ; System . out . println ( up + \" \/ \" + down ) ; } public static void main ( String [ ] args ) { int N = 8 ; FindProbability ( N ) ; } }"],"bleu":0.7462307142921819,"rouge_l":0.8512637949448203}
{"id":677,"predictions":["class GFG { static class Node { int key ; Node left ; Node right ; } ; static Node newNode ( int key ) { Node temp = new Node ( ) ; temp . key = key ; temp . left = null ; temp . right = null ; return temp ; } static Node newNode ( int key ) { Node temp = new Node ( ) ; temp . key = key ; temp . left = temp . right = null ; return temp ; } static Node createTree ( Node root ) { if ( root != null ) { inorder ( root . left ) ; System . out . print ( root . key + \" ▁ \" ) ; inorder ( root . right ) ; } } static Node createTree ( int parent [ ] , int n ) { HashMap < Node , Integer > mp = new HashMap < Node > ( ) ; Node node = new Node ( ) ; node . left = null ; node . right = null ; for ( int i = 0 ; i < n ; i ++ ) { if ( mp . containsKey ( i ) ) { temp = new Node ( i ) ; mp . put ( i , mp . get ( i ) ) ; } if ( mp . containsKey ( key ) ) { temp . put ( mp . get ( key ) ; } else if ( mp . containsKey ( parent [ i ] ) { mp . put ( parent [ i ] , mp . get ( parent [ i ] ) ; } else { mp . put ( parent [ i ] , mp . get ( parent [ i ] ) ) ; } } return root ; } public static void main ( String [ ] args ) { int parent [ ] = { - 1 , 0 , 0 , 1 , 1 , 3 , 5 } ; int n = parent . length ; Node root = createTree ( parent , n ) ; System . out . println ( \" Inorder ▁ Traversal ▁ of ▁ constructed ▁ \" + \" in ▁ tree \\n \" ) ; inorder ( root , n ) ; } }"],"references":["import java . util . * ; class GFG { static class Node { int key ; Node left , right ; } ; static Node newNode ( int key ) { Node temp = new Node ( ) ; temp . key = key ; temp . left = temp . right = null ; return ( temp ) ; } static void inorder ( Node root ) { if ( root != null ) { inorder ( root . left ) ; System . out . print ( root . key + \" ▁ \" ) ; inorder ( root . right ) ; } } static Node createTree ( int parent [ ] , int n ) { HashMap < Integer , Node > m = new HashMap < > ( ) ; Node root = new Node ( ) , temp = new Node ( ) ; int i ; for ( i = 0 ; i < n ; i ++ ) { if ( m . get ( i ) == null ) { temp = newNode ( i ) ; m . put ( i , temp ) ; } if ( parent [ i ] == - 1 ) root = m . get ( i ) ; else if ( m . get ( parent [ i ] ) == null ) { temp = newNode ( parent [ i ] ) ; temp . left = m . get ( i ) ; m . put ( parent [ i ] , temp ) ; } else { if ( m . get ( parent [ i ] ) . left == null ) m . get ( parent [ i ] ) . left = m . get ( i ) ; else m . get ( parent [ i ] ) . right = m . get ( i ) ; } } return root ; } public static void main ( String args [ ] ) { int parent [ ] = { - 1 , 0 , 0 , 1 , 1 , 3 , 5 } ; int n = parent . length ; Node root = createTree ( parent , n ) ; System . out . print ( \" Inorder ▁ Traversal ▁ of ▁ coned ▁ tree \\n \" ) ; inorder ( root ) ; } }"],"bleu":0.6733706496844002,"rouge_l":0.7443849833779291}
{"id":678,"predictions":["class GFG { static int findExtra ( int arr1 [ ] , int arr2 [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { if ( arr1 [ i ] != arr2 [ i ] ) return i ; } return n ; } public static void main ( String [ ] args ) { int arr1 [ ] = { 2 , 4 , 6 , 8 , 10 , 12 , 13 } ; int arr2 [ ] = { 2 , 4 , 6 , 8 , 10 , 12 } ; int n = arr2 . length ; System . out . println ( findExtra ( arr1 , arr2 , n ) ) ; } }"],"references":["class GFG { static int findExtra ( int arr1 [ ] , int arr2 [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) if ( arr1 [ i ] != arr2 [ i ] ) return i ; return n ; } public static void main ( String [ ] args ) { int arr1 [ ] = { 2 , 4 , 6 , 8 , 10 , 12 , 13 } ; int arr2 [ ] = { 2 , 4 , 6 , 8 , 10 , 12 } ; int n = arr2 . length ; System . out . println ( findExtra ( arr1 , arr2 , n ) ) ; } }"],"bleu":0.961673662702593,"rouge_l":0.993734335839599}
{"id":679,"predictions":["class GFG { static int countPairs ( int n ) { int k = n ; int imin = 1 ; int ans = 0 ; while ( imin <= n ) { int imax = n \/ k ; ans += k * ( im - imin + 1 ) ; k = n \/ imin ; } return ans ; } public static void main ( String [ ] args ) { System . out . println ( countPairs ( 1 ) ) ; System . out . println ( CountPairs ( 2 ) ) ; System . out . println ( CountPairs ( 3 ) ) ; } }"],"references":["class GFG { static int CountPairs ( int n ) { int k = n ; int imin = 1 ; int ans = 0 ; while ( imin <= n ) { int imax = n \/ k ; ans += k * ( imax - imin + 1 ) ; imin = imax + 1 ; k = n \/ imin ; } return ans ; } public static void main ( String [ ] args ) { System . out . println ( CountPairs ( 1 ) ) ; System . out . println ( CountPairs ( 2 ) ) ; System . out . println ( CountPairs ( 3 ) ) ; } }"],"bleu":0.8766050757051963,"rouge_l":0.9433881952326901}
{"id":680,"predictions":["import java . util . * ; class GFG { static void find3Numbers ( int arr [ ] , int n ) { int small = + 2147483647 ; int small = + 2147483647 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] <= small ) smallest = arr [ i ] ; else if ( arr [ i ] <= small ) largest = arr [ i ] ; else break ; } if ( i == n ) { System . out . println ( \" No ▁ such ▁ found \" ) ; return ; } for ( int j = 0 ; j <= i ; j ++ ) { if ( arr [ j ] < small ) { small = arr [ j ] ; break ; } } System . out . println ( smallest + \" ▁ such ▁ found \" ) ; return ; } public static void main ( String [ ] args ) { int arr [ ] = { 5 , 7 , 4 , 8 } ; int n = arr . length ; find3Numbers ( arr , n ) ; } }"],"references":["class GFG { static void find3Numbers ( int arr [ ] , int n ) { int small = + 2147483647 , large = + 2147483647 ; int i ; for ( i = 0 ; i < n ; i ++ ) { if ( arr [ i ] <= small ) small = arr [ i ] ; else if ( arr [ i ] <= large ) large = arr [ i ] ; else break ; } if ( i == n ) { System . out . print ( \" No ▁ such ▁ triplet ▁ found \" ) ; return ; } for ( int j = 0 ; j <= i ; j ++ ) { if ( arr [ j ] < large ) { small = arr [ j ] ; break ; } } System . out . print ( small + \" ▁ \" + large + \" ▁ \" + arr [ i ] ) ; return ; } public static void main ( String arg [ ] ) { int arr [ ] = { 5 , 7 , 4 , 8 } ; int n = arr . length ; find3Numbers ( arr , n ) ; } }"],"bleu":0.798679506313822,"rouge_l":0.8894749088652759}
{"id":681,"predictions":["class GFG { static void countCharacter ( String str ) { int [ ] diels = new int [ 26 ] ; int consonant = 0 , flag = 0 ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { char ch = str . charAt ( i ) ; if ( ( ch >= ' a ' && ch <= ' z ' ) || ( ch >= ' A ' && ch <= ' E ' ) ) { ch = Character . toLowerCase ( ch ) ; if ( ch == ' a ' || ch == ' e ' || ch == ' i ' || ch == ' u ' ) { vowels ++ ; } else { consonant ++ ; } } else if ( ch >= '0' && ch <= '9' ) { digit ++ ; } else if ( ch >= '0' && ch <= '9' ) { digit ++ ; } else { specialChar ++ ; } } System . out . println ( \" Vowel : ▁ \" + consonant ) ; System . out . print ( \" Case ▁ : ▁ \" + digit ) ; System . out . println ( \" Digit : ▁ \" + consonant ) ; } public static void main ( String [ ] args ) { String str = \" geeks ▁ for ▁ geeks \" ; countCharacter ( str ) ; } }"],"references":["import java . io . * ; public class GFG { static void countCharacterType ( String str ) { int vowels = 0 , consonant = 0 , specialChar = 0 , digit = 0 ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { char ch = str . charAt ( i ) ; if ( ( ch >= ' a ' && ch <= ' z ' ) || ( ch >= ' A ' && ch <= ' Z ' ) ) { ch = Character . toLowerCase ( ch ) ; ; if ( ch == ' a ' || ch == ' e ' || ch == ' i ' || ch == ' o ' || ch == ' u ' ) vowels ++ ; else consonant ++ ; } else if ( ch >= '0' && ch <= '9' ) digit ++ ; else specialChar ++ ; } System . out . println ( \" Vowels : ▁ \" + vowels ) ; System . out . println ( \" Consonant : ▁ \" + consonant ) ; System . out . println ( \" Digit : ▁ \" + digit ) ; System . out . println ( \" Special ▁ Character : ▁ \" + specialChar ) ; } static public void main ( String [ ] args ) { String str = \" geeks ▁ for ▁ geeks121\" ; countCharacterType ( str ) ; } }"],"bleu":0.7097076490402598,"rouge_l":0.8085708770349398}
{"id":682,"predictions":["import java . util . * ; class solution { static int calculateSum ( int n ) { return 2 * ( n + 1 ) * ( 2 * n + 1 ) \/ 6 + n * ( n + 1 ) \/ 2 + 2 * ( n ) ) ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . print ( \" Sum ▁ = ▁ \" + calculateSum ( n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int calculateSum ( int n ) { return 2 * ( n * ( n + 1 ) * ( 2 * n + 1 ) \/ 6 ) + n * ( n + 1 ) \/ 2 + 2 * ( n ) ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . print ( \" Sum ▁ = ▁ \" + calculateSum ( n ) ) ; } }"],"bleu":0.8813718340720371,"rouge_l":0.9491258741258741}
{"id":683,"predictions":["class GFG { static int countPairs ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = i + 1 ; j < n ; j ++ ) if ( arr [ i ] * arr [ j ] > arr [ i ] + arr [ j ] ) count ++ ; return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 5 , 0 , 3 , 1 , 2 } ; int n = arr . length ; System . out . println ( countPairs ( arr , n ) ) ; } }"],"references":["import java . util . * ; class solution { static long countPairs ( int arr [ ] , int n ) { long count = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { if ( arr [ i ] * arr [ j ] > arr [ i ] + arr [ j ] ) count ++ ; } } return count ; } public static void main ( String args [ ] ) { int arr [ ] = { 5 , 0 , 3 , 1 , 2 } ; int n = arr . length ; System . out . println ( countPairs ( arr , n ) ) ; } }"],"bleu":0.7914657005949739,"rouge_l":0.9158292942428182}
{"id":684,"predictions":["class GFG { static double PI = 3.14159 \/ 180 ; static double areaOfKonacci ( double a , double b , double angle ) { double angle = angle * PI ; double area = a * b * Math . sin ( angle ) ; return area ; } public static void main ( String [ ] args ) { double a = 4 , b = 7 , angle = 78 ; System . out . println ( \" Area ▁ of ▁ Kite ▁ = ▁ \" + areaOfKonacci ( a , b , angle ) ) ; } }"],"references":["import java . io . * ; class GFG { static double PI = ( 3.14159 \/ 180 ) ; static float areaOfKite ( int a , int b , double angle ) { angle = angle * PI ; double area = a * b * Math . sin ( angle ) ; return ( float ) area ; } public static void main ( String [ ] args ) { int a = 4 , b = 7 , angle = 78 ; System . out . println ( \" Area ▁ of ▁ Kite ▁ = ▁ \" + areaOfKite ( a , b , angle ) ) ; } }"],"bleu":0.7249899613357519,"rouge_l":0.8767779607725708}
{"id":685,"predictions":["import java . io . * ; class GFG { public static int target =93 ; public static void main ( String [ ] args ) { int target =93 ; int [ ] arr = { 1 , 31 , 3 , 1 , 3 , 31 , 31 , 1 } ; int length = arr . length ; for ( int i = 0 ; i < arr . length ; i ++ ) { if ( target % arr [ i ] == 0 ) { for ( int j = i + 1 ; j < arr . length - 1 ; j ++ ) { if ( target % ( arr [ i ] * arr [ j ] ) == 0 ) { int toFound = target \/ ( arr [ i ] * arr [ j ] ) ; for ( int k = j + 1 ; k < length ; k ++ ) if ( arr [ k ] == toFind ) totalCount ++ ; } } } } System . out . println ( \" Total ▁ number ▁ of ▁ triplets ▁ found : ▁ \" + totalCount ) ; } }"],"references":["class GFG { public static void main ( String [ ] args ) { int target = 93 ; int [ ] arr = { 1 , 31 , 3 , 1 , 93 , 3 , 31 , 1 , 93 } ; int length = arr . length ; int totalCount = 0 ; for ( int i = 0 ; i < length - 2 ; i ++ ) { if ( target % arr [ i ] == 0 ) { for ( int j = i + 1 ; j < length - 1 ; j ++ ) { if ( target % ( arr [ i ] * arr [ j ] ) == 0 ) { int toFind = target \/ ( arr [ i ] * arr [ j ] ) ; for ( int k = j + 1 ; k < length ; k ++ ) { if ( arr [ k ] == toFind ) { totalCount ++ ; } } } } } } System . out . println ( \" Total ▁ number ▁ of ▁ triplets ▁ found ▁ : ▁ \" + totalCount ) ; } }"],"bleu":0.8266677451015828,"rouge_l":0.9022793404461689}
{"id":686,"predictions":["class GFG { static boolean checkSpecialPrime ( boolean [ ] sieve , int num ) { while ( num > 0 ) { if ( ! sieve [ num ] ) { return false ; } num \/= 10 ; } return true ; } static void findSpecialPrime ( int N ) { boolean [ ] sieve = new boolean [ N + 10 ] ; sieve [ 0 ] = sieve [ 1 ] = sieve [ 1 ] ; for ( int i = 2 ; i <= N ; i ++ ) { if ( ! sieve [ i ] ) { for ( int j = i * i ; j <= N ; j += i ) { sieve [ j ] = true ; } } } while ( true ) { if ( checkSpecialPrime ( sieve , N ) ) { System . out . println ( N ) ; break ; } else N -- ; } } public static void main ( String [ ] args ) { findSpecialPrime ( 379 ) ; findSpecialPrime ( 100 ) ; } }"],"references":["class GFG { static boolean checkSpecialPrime ( boolean [ ] sieve , int num ) { while ( num != 0 ) { if ( ! sieve [ num ] ) { return false ; } num \/= 10 ; } return true ; } static void findSpecialPrime ( int N ) { boolean [ ] sieve = new boolean [ N + 10 ] ; sieve [ 0 ] = sieve [ 1 ] = false ; for ( int i = 0 ; i < N + 10 ; i ++ ) sieve [ i ] = true ; for ( int i = 2 ; i <= N ; i ++ ) { if ( sieve [ i ] ) { for ( int j = i * i ; j <= N ; j += i ) { sieve [ j ] = false ; } } } while ( true ) { if ( checkSpecialPrime ( sieve , N ) ) { System . out . println ( N ) ; break ; } else N -- ; } } public static void main ( String [ ] args ) { findSpecialPrime ( 379 ) ; findSpecialPrime ( 100 ) ; } }"],"bleu":0.8533914448911244,"rouge_l":0.9240153934332269}
{"id":687,"predictions":["class GFG { static int MAX = 1000005 ; static int [ ] fib = new int [ MAX + 1 ] ; static int [ ] fibU = new int [ MAX + 1 ] ; static void compute ( int sz ) { for ( int i = 0 ; i < sz + 1 ; i ++ ) { boolean isFib [ ] = new boolean [ sz + 1 ] ; int prev = 0 ; isFib [ prev ] = true ; while ( curr <= sz ) { int temp = curr + prev ; if ( temp <= sz ) isFib [ temp ] = true ; prev = curr ; curr = temp ; } fibU = 1 ; for ( int i = 1 ; i <= sz ; i ++ ) { fibUpto [ i ] = fibUpto [ i - 1 ] ; if ( isFibo [ i ] ) { fibUpto [ i ] ++ ; } } } static int countOfNumbers ( int N , int K ) { compute ( N ) ; int low = 1 , high = N ; int ans = 0 ; while ( low <= high ) { int mid = ( low + high ) >> 1 ; if ( isFibo [ mid ] >= K ) { ans = mid ; high = mid - 1 ; } else low = mid + 1 ; } if ( ans != 0 ) return ( N - ans + 1 ) ; return 0 ; } public static void main ( String [ ] args ) { int N = 10 , K = 3 ; System . out . println ( countOfNumbers ( N , K ) ) ; } }"],"references":["import java . util . * ; class GFG { static int MAX = 1000005 ; static int [ ] fibUpto = new int [ MAX + 1 ] ; static void compute ( int sz ) { boolean [ ] isFib = new boolean [ sz + 1 ] ; int prev = 0 , curr = 1 ; isFib [ prev ] = isFib [ curr ] = true ; while ( curr <= sz ) { int temp = curr + prev ; if ( temp <= sz ) isFib [ temp ] = true ; prev = curr ; curr = temp ; } fibUpto [ 0 ] = 1 ; for ( int i = 1 ; i <= sz ; i ++ ) { fibUpto [ i ] = fibUpto [ i - 1 ] ; if ( isFib [ i ] ) fibUpto [ i ] ++ ; } } static int countOfNumbers ( int N , int K ) { compute ( N ) ; int low = 1 , high = N , ans = 0 ; while ( low <= high ) { int mid = ( low + high ) >> 1 ; if ( mid - fibUpto [ mid ] >= K ) { ans = mid ; high = mid - 1 ; } else low = mid + 1 ; } return ( ans > 0 ? N - ans + 1 : 0 ) ; } public static void main ( String [ ] args ) { int N = 10 , K = 3 ; System . out . print ( countOfNumbers ( N , K ) ) ; } }"],"bleu":0.7794663603831672,"rouge_l":0.8652482269503544}
{"id":688,"predictions":["import java . io . * ; class GFG { static int setBitNumber ( int n ) { n |= n >> 1 ; n |= n >> 2 ; n |= n >> 4 ; n |= n >> 8 ; n |= n >> 16 ; n = n >> 16 ; return ( n >> 1 ) ; } public static void main ( String [ ] args ) { int n = 273 ; System . out . println ( setBitNumber ( n ) ) ; } }"],"references":["class GFG { static int setBitNumber ( int n ) { n |= n >> 1 ; n |= n >> 2 ; n |= n >> 4 ; n |= n >> 8 ; n |= n >> 16 ; n = n + 1 ; return ( n >> 1 ) ; } public static void main ( String arg [ ] ) { int n = 273 ; System . out . print ( setBitNumber ( n ) ) ; } }"],"bleu":0.8149816442114654,"rouge_l":0.9218283582089553}
{"id":689,"predictions":["import java . io . * ; class GFG { static boolean isHargestogram ( String s , int n ) { int hash [ ] = new int [ 26 ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) != ' ▁ ' ) { if ( hash [ s . charAt ( i ) - ' a ' ] == 0 ) hash [ s . charAt ( i ) - ' a ' ] = 1 ; else return false ; } return true ; } return true ; } public static void main ( String [ ] args ) { String s = \" the ▁ big ▁ egg \" ; int n = s . length ( ) ; if ( isHaserogram ( s , n ) ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ; } }"],"references":["class GFG { static boolean isHeterogram ( String s , int n ) { int hash [ ] = new int [ 26 ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) != ' ▁ ' ) { if ( hash [ s . charAt ( i ) - ' a ' ] == 0 ) hash [ s . charAt ( i ) - ' a ' ] = 1 ; else return false ; } } return true ; } public static void main ( String [ ] args ) { String s = \" the ▁ big ▁ dwarf ▁ only ▁ jumps \" ; int n = s . length ( ) ; if ( isHeterogram ( s , n ) ) System . out . print ( \" YES \" ) ; else System . out . print ( \" NO \" ) ; } }"],"bleu":0.8596901940647196,"rouge_l":0.9323788333172102}
{"id":690,"predictions":["import java . util . Arrays ; import java . io . * ; class GFG { static int minimumCuts ( int [ ] a , int n ) { Arrays . sort ( a ) ; int gcd = a [ 1 ] - a [ 0 ] ; int s = gcd ; for ( int i = 2 ; i < n ; i ++ ) { gcd = __gcd ( gcd , a [ i ] - a [ i - 1 ] ) ; s += a [ i ] ; } if ( 360 - s > 0 ) { gcd = __gcd ( gcd , 360 - s ) ; } return ( 360 \/ gcd ) - n ; } static int __gcd ( int a , int b ) { return b == 0 ? a : __gcd ( b , a % b ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 30 , 60 , 180 } ; int n = arr . length ; System . out . println ( minimumCuts ( arr , n ) ) ; } }"],"references":["import java . util . Arrays ; class GFG { static int findgcd ( int a , int b ) { if ( b == 0 ) return a ; return findgcd ( b , a % b ) ; } static int minimumCuts ( int a [ ] , int n ) { Arrays . sort ( a ) ; int gcd = a [ 1 ] - a [ 0 ] ; int s = gcd ; for ( int i = 2 ; i < n ; i ++ ) { gcd = findgcd ( gcd , a [ i ] - a [ i - 1 ] ) ; s += a [ i ] - a [ i - 1 ] ; } if ( 360 - s > 0 ) gcd = findgcd ( gcd , 360 - s ) ; return ( 360 \/ gcd ) - n ; } public static void main ( String [ ] args ) { int [ ] arr = new int [ ] { 30 , 60 , 180 } ; int n = arr . length ; System . out . println ( minimumCuts ( arr , n ) ) ; } }"],"bleu":0.7980397311646366,"rouge_l":0.7865955583857359}
{"id":691,"predictions":["import java . util . * ; class GfG { static int MAX = 1005 ; static Vector < Integer > SieveOfEratosthenes ( int [ ] primes ) { boolean prime [ ] = new boolean [ MAX ] ; for ( int i = 0 ; i < MAX ; i ++ ) prime [ i ] = true ; for ( int p = 2 ; p * p < MAX ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i < MAX ; i += p ) prime [ i ] = false ; } } for ( int p = 2 ; p < MAX ; p ++ ) if ( prime [ p ] == true ) primes . add ( p ) ; } return primes ; } static int minimumSquareFreqors ( int N ) { Vector < Integer > prime = new Vector < > ( ) ; int [ ] primes = SieveOfEratosthenes ( prime ) ; primes . add ( prime ) ; int max_count = 0 , i ; for ( int i = 0 ; i < primes . size ( ) && primes . get ( i ) * primes . get ( i ) <= N ; i ++ ) { if ( N % primes . get ( i ) == 0 ) { int tmp = 0 ; while ( N % primes . get ( i ) == 0 ) { tmp += 1 ; while ( N % primes . get ( i ) == 0 ) { tmp ++ ; N \/= primes . get ( i ) ; } max_count = Math . max ( max_count , tmp ) ; } } if ( max_count == 0 ) max_count = 1 ; return max_count ; } public static void main ( String [ ] args ) { int N = 24 ; System . out . println ( \" Minimum ▁ Number ▁ of ▁ Square ▁ \" + N ) ; N = 6 ; System . out . println ( \" Minimum ▁ Number ▁ of ▁ Square ▁ are ▁ \" + minimumSquareDivisors ( N ) ) ; } }"],"references":["import java . util . Vector ; public class GFG { static final int MAX = 1005 ; static void SieveOfEratosthenes ( Vector < Integer > primes ) { boolean prime [ ] = new boolean [ MAX ] ; for ( int i = 0 ; i < prime . length ; i ++ ) { prime [ i ] = true ; } for ( int p = 2 ; p * p < MAX ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i < MAX ; i += p ) { prime [ i ] = false ; } } } for ( int p = 2 ; p < MAX ; p ++ ) { if ( prime [ p ] ) { primes . add ( primes . size ( ) , p ) ; } } } static int minimumSquareFreeDivisors ( int N ) { Vector < Integer > primes = new Vector < > ( ) ; SieveOfEratosthenes ( primes ) ; int max_count = 0 ; for ( int i = 0 ; i < primes . size ( ) && primes . get ( i ) * primes . get ( i ) <= N ; i ++ ) { if ( N % primes . get ( i ) == 0 ) { int tmp = 0 ; while ( N % primes . get ( i ) == 0 ) { tmp ++ ; N \/= primes . get ( i ) ; } max_count = Math . max ( max_count , tmp ) ; } } if ( max_count == 0 ) { max_count = 1 ; } return max_count ; } public static void main ( String [ ] args ) { int N = 24 ; System . out . println ( \" Minimum ▁ Number ▁ of ▁ Square ▁ Free ▁ Divisors ▁ is ▁ \" + minimumSquareFreeDivisors ( N ) ) ; N = 6 ; System . out . println ( \" Minimum ▁ Number ▁ of ▁ Square ▁ Free ▁ Divisors ▁ is ▁ \" + minimumSquareFreeDivisors ( N ) ) ; } }"],"bleu":0.7879008783116017,"rouge_l":0.8828088203810748}
{"id":692,"predictions":["import java . util . * ; class solution { static int calculateSum ( int n ) { return ( n * ( n + 1 ) \/ 2 ) ; } public static void main ( String arr [ ] ) { int n = 4 ; System . out . println ( calculateSum ( n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int calculateSum ( int n ) { return ( int ) Math . pow ( n * ( n + 1 ) \/ 2 , 2 ) ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( calculateSum ( n ) ) ; } }"],"bleu":0.7259551460537413,"rouge_l":0.8842751842751843}
{"id":693,"predictions":["import java . util . * ; class GFG { static Stack < Integer > st = new Stack < Integer > ( ) ; static void push_digits ( int number ) { while ( num != 0 ) { st . push ( number % 10 ) ; number \/= 10 ; } } static int reverse_number ( int number ) { push_digits ( number ) ; int reverse = 0 ; int i = 1 ; while ( ! st . empty ( ) ) { reverse = reverse + ( st . peek ( ) * i ) ; st . pop ( ) ; i = i * 10 ; } return reverse ; } public static void main ( String [ ] args ) { int number = 50097 ; System . out . print ( reverse_number ( number ) ) ; } }"],"references":["import java . util . Stack ; public class GFG { static Stack < Integer > st = new Stack < > ( ) ; static void push_digits ( int number ) { while ( number != 0 ) { st . push ( number % 10 ) ; number = number \/ 10 ; } } static int reverse_number ( int number ) { push_digits ( number ) ; int reverse = 0 ; int i = 1 ; while ( ! st . isEmpty ( ) ) { reverse = reverse + ( st . peek ( ) * i ) ; st . pop ( ) ; i = i * 10 ; } return reverse ; } public static void main ( String [ ] args ) { int number = 39997 ; System . out . println ( reverse_number ( number ) ) ; } }"],"bleu":0.8632364032125251,"rouge_l":0.9455299639777316}
{"id":694,"predictions":["import java . util . * ; import java . lang . * ; class GFG { static boolean inProplet ( int arr [ ] ) { int n = arr [ 0 ] ; Arrays . sort ( arr ) ; int mean = arr [ 0 ] * arr [ 3 ] ; int mean = arr [ 1 ] * arr [ 2 ] ; if ( differences == true ) return true ; return false ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 4 , 2 } ; if ( inProportion ( arr ) ) System . out . print ( \" Yes \" ) ; else System . out . print ( \" No \" ) ; } }"],"references":["import java . util . * ; class GFG { static boolean inProportion ( int [ ] arr ) { int n = 4 ; Arrays . sort ( arr ) ; long extremes = ( long ) arr [ 0 ] * ( long ) arr [ 3 ] ; long means = ( long ) arr [ 1 ] * ( long ) arr [ 2 ] ; if ( extremes == means ) return true ; return false ; } public static void main ( String args [ ] ) { int arr [ ] = { 1 , 2 , 4 , 2 } ; if ( inProportion ( arr ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.6833324468796327,"rouge_l":0.8346392234826335}
{"id":695,"predictions":["class GFG { static final int M = 100 ; static int memo [ ] [ ] = new int [ M ] [ M ] [ 2 ] ; static int numberOfPermInvert ( int N , int K ) { if ( N == 0 ) return 0 ; if ( K == 0 ) return 1 ; if ( memo [ N ] [ K ] != 0 ) return memo [ N ] [ K ] ; int sum = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { if ( i <= N - 1 ) sum += numberOfPermInvert ( N - 1 , K - i ) ; } return sum ; } public static void main ( String [ ] args ) { int N = 4 , K = 2 ; System . out . print ( numberOfPermInvert ( N , K ) ) ; } }"],"references":["import java . io . * ; class GFG { static int M = 100 ; static int memo [ ] [ ] = new int [ M ] [ M ] ; static int numberOfPermWithKInversion ( int N , int K ) { if ( N == 0 ) return 0 ; if ( K == 0 ) return 1 ; if ( memo [ N ] [ K ] != 0 ) return memo [ N ] [ K ] ; int sum = 0 ; for ( int i = 0 ; i <= K ; i ++ ) { if ( i <= N - 1 ) sum += numberOfPermWithKInversion ( N - 1 , K - i ) ; } memo [ N ] [ K ] = sum ; return sum ; } public static void main ( String [ ] args ) { int N = 4 ; int K = 2 ; System . out . println ( numberOfPermWithKInversion ( N , K ) ) ; } }"],"bleu":0.8088581236982046,"rouge_l":0.8986135181975738}
{"id":696,"predictions":["import java . util . * ; class GFG { static void findkth ( int n , int k ) { Vector < Integer > v1 = new Vector < Integer > ( ) ; Vector < Integer > v2 = new Vector < Integer > ( ) ; for ( int i = 1 ; i * i <= n ; i ++ ) { if ( n % i == 0 ) { v1 . add ( i ) ; if ( i != Math . ceil ( n \/ i ) ) v2 . add ( n \/ i ) ; } } v2 . add ( n ) ; if ( k > ( v1 . size ( ) + v2 . size ( ) ) System . out . print ( \" Doesn ' t ▁ Exist \" ) ; else { if ( k <= v1 . size ( ) ) System . out . print ( v1 . get ( k - v1 . size ( ) ) ; else System . out . print ( v2 . get ( k - v1 . size ( ) - 1 ) ; } } public static void main ( String [ ] args ) { int n = 15 , k = 2 ; findkth ( n , k ) ; } }"],"references":["import java . util . * ; class GFG { static void findkth ( int n , int k ) { Vector < Integer > v1 = new Vector < Integer > ( ) ; Vector < Integer > v2 = new Vector < Integer > ( ) ; for ( int i = 1 ; i <= Math . sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { v1 . add ( i ) ; if ( i != Math . sqrt ( n ) ) v2 . add ( n \/ i ) ; } } Collections . reverse ( v2 ) ; if ( k > ( v1 . size ( ) + v2 . size ( ) ) ) System . out . print ( \" Doesn ' t ▁ Exist \" ) ; else { if ( k <= v1 . size ( ) ) System . out . print ( v1 . get ( k - 1 ) ) ; else System . out . print ( v2 . get ( k - v1 . size ( ) - 1 ) ) ; } } public static void main ( String [ ] args ) { int n = 15 , k = 2 ; findkth ( n , k ) ; } }"],"bleu":0.9071316898949757,"rouge_l":0.9475982532751092}
{"id":697,"predictions":["class GFG { static int maxSubArraySum ( int a [ ] , int size ) { int max_so_far = Integer . MIN_VALUE , max_ending_here = 0 ; for ( int i = 0 ; i < size ; i ++ ) { max_ending_here = max_ending_here + a [ i ] ; if ( max_so_far < max_ending_here ) max_so_far = max_ending_here ; if ( max_ending_here < 0 ) max_ending_here = 0 ; } return max_so_far ; } static int minimizedSum ( int a [ ] , int n , int K ) { int sum = maxSubArraySum ( a , n ) ; int totalSum = 0 ; for ( int i = 0 ; i < n ; i ++ ) totalSum += a [ i ] ; if ( sum < 0 ) return totalSum ; int totalSum = totalSum - sum + sum \/ K ; return totalSum ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , - 2 , 3 } ; int n = a . length ; int K = 2 ; System . out . println ( minimizedSum ( a , n , K ) ) ; } }"],"references":["import java . util . * ; class GFG { static int maxSubArraySum ( int a [ ] , int size ) { int max_so_far = Integer . MIN_VALUE , max_ending_here = 0 ; for ( int i = 0 ; i < size ; i ++ ) { max_ending_here = max_ending_here + a [ i ] ; if ( max_so_far < max_ending_here ) max_so_far = max_ending_here ; if ( max_ending_here < 0 ) max_ending_here = 0 ; } return max_so_far ; } static double minimizedSum ( int a [ ] , int n , int K ) { int sum = maxSubArraySum ( a , n ) ; double totalSum = 0 ; for ( int i = 0 ; i < n ; i ++ ) totalSum += a [ i ] ; if ( sum < 0 ) return totalSum ; totalSum = totalSum - sum + ( double ) sum \/ ( double ) K ; return totalSum ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , - 2 , 3 } ; int n = a . length ; int K = 2 ; System . out . println ( minimizedSum ( a , n , K ) ) ; } }"],"bleu":0.896376251306678,"rouge_l":0.9529060418102459}
{"id":698,"predictions":["public class countSetBits { static int countSetBits ( int n ) { int cnt = 0 ; int setBits [ ] = new int [ n + 1 ] ; setBits [ 0 ] = 0 ; setBits [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) { if ( i % 2 == 0 ) setBits [ i ] = setBits [ i \/ 2 ] ; else setBits [ i ] = setBits [ i - 1 ] + 1 ; } for ( int i = 0 ; i <= n ; i ++ ) cnt += setBits [ i ] ; return cnt ; } public static void main ( String [ ] args ) { int n = 6 ; System . out . println ( countSetBits ( n ) ) ; } }"],"references":["import java . util . * ; class GFG { static int countSetBits ( int n ) { int cnt = 0 ; int [ ] setBits = new int [ n + 1 ] ; setBits [ 0 ] = 0 ; setBits [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) { if ( i % 2 == 0 ) { setBits [ i ] = setBits [ i \/ 2 ] ; } else { setBits [ i ] = setBits [ i - 1 ] + 1 ; } } for ( int i = 0 ; i <= n ; i ++ ) { cnt = cnt + setBits [ i ] ; } return cnt ; } public static void main ( String [ ] args ) { int n = 6 ; System . out . println ( countSetBits ( n ) ) ; } }"],"bleu":0.8143662310903645,"rouge_l":0.9225191630412265}
{"id":699,"predictions":["class GFG { static double areaCircle ( double b ) { double area = Math . PI * b * b ; return area ; } public static void main ( String [ ] args ) { double a = 10 ; System . out . println ( areaCircle ( b ) ) ; } }"],"references":["class GFG { static double areaCircle ( double b ) { double area = ( double ) 3.1415926 * b * b ; return area ; } public static void main ( String args [ ] ) { float a = 10 , b = 8 ; System . out . println ( areaCircle ( b ) ) ; } }"],"bleu":0.7167990067667286,"rouge_l":0.8651279199110121}
{"id":700,"predictions":["import java . util . * ; class GfG { static class Node { int data ; Node next ; } ; static Node push ( Node head_ref , int new_data ) { Node new_node = new Node ( ) ; new_node . data = new_data ; new_node . next = new_node ; head_ref = new_node ; return head = head ; } static void printList ( Node head ) { while ( head != null ) { System . out . print ( head . data + \" - > \" ) ; head = head . next ; } } static Node sortList ( Node arr [ ] , int N , Node head ) { HashMap < Integer , Integer > hash = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { hash . put ( arr [ i ] , hash . get ( i ) ) ; } temp = head . next ; } static void sortList ( Node arr [ ] , int N , Node head ) { HashMap < Integer , Integer > hash = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { int frequency = hash . get ( arr [ i ] ) ; while ( frequency != null ) { int frequency = hash . get ( arr [ i ] ) ; temp . data = arr [ i ] ; temp . next = temp . next ; } } return head ; } public static void main ( String args [ ] ) { Node head = null ; int arr [ ] = { 5 , 1 , 3 , 2 } ; head = push ( head , 5 ) ; head = push ( head , 2 ) ; int N = arr . length ; System . out . println ( \" Sorted ▁ List ▁ : ▁ \" ) ; printList ( head ) ; } }"],"references":["import java . util . * ; class GFG { static class Node { int data ; Node next ; } ; static Node push ( Node head_ref , int new_data ) { Node new_node = new Node ( ) ; new_node . data = new_data ; new_node . next = head_ref ; head_ref = new_node ; return head_ref ; } static void printList ( Node head ) { while ( head != null ) { System . out . print ( head . data + \" - > \" ) ; head = head . next ; } } static void sortlist ( int arr [ ] , int N , Node head ) { HashMap < Integer , Integer > hash = new HashMap < Integer , Integer > ( ) ; Node temp = head ; while ( temp != null ) { if ( hash . containsKey ( temp . data ) ) hash . put ( temp . data , hash . get ( temp . data ) + 1 ) ; else hash . put ( temp . data , 1 ) ; temp = temp . next ; } temp = head ; for ( int i = 0 ; i < N ; i ++ ) { int frequency = hash . get ( arr [ i ] ) ; while ( frequency -- > 0 ) { temp . data = arr [ i ] ; temp = temp . next ; } } } public static void main ( String [ ] args ) { Node head = null ; int arr [ ] = { 5 , 1 , 3 , 2 , 8 } ; int N = arr . length ; head = push ( head , 3 ) ; head = push ( head , 2 ) ; head = push ( head , 5 ) ; head = push ( head , 8 ) ; head = push ( head , 5 ) ; head = push ( head , 2 ) ; head = push ( head , 1 ) ; sortlist ( arr , N , head ) ; System . out . print ( \" Sorted ▁ List : \" + \" \\n \" ) ; printList ( head ) ; } }"],"bleu":0.6533747504618024,"rouge_l":0.7243023054255503}
{"id":701,"predictions":["class GFG { static void printPattern ( int N ) { for ( int i = 1 ; i <= N ; i ++ ) System . out . print ( i % 2 == 0 ? i - 1 : i + 1 ) ; } public static void main ( String [ ] args ) { int N = 10 ; printPattern ( N ) ; } }"],"references":["import java . util . * ; import java . lang . * ; import java . io . * ; class GFG { static void printPattern ( int N ) { for ( int i = 1 ; i <= N ; i ++ ) { System . out . print ( \" ▁ \" + ( ( i % 2 == 0 ) ? ( i - 1 ) : ( i + 1 ) ) ) ; } } public static void main ( String args [ ] ) { int N = 10 ; printPattern ( N ) ; } }"],"bleu":0.4968310919584341,"rouge_l":0.761121157323689}
{"id":702,"predictions":["import java . util . * ; class GFG { static int minIndex ( Queue < Integer > q ) { int min_index = - 1 ; int min_val = 99999 ; int n = q . size ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int curr = q . peek ( ) ; q . poll ( ) ; if ( curr <= min_val && i <= sorted_val ) { min_index = i ; min_val = curr ; } q . add ( curr ) ; } return min_index ; } static void insertMinToRear ( Queue < Integer > q ) { int min_val = null ; int n = q . size ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int curr = q . peek ( ) ; q . poll ( ) ; if ( i != min_index ) { q . add ( curr ) ; } else { min_val = curr ; } } q . add ( min_val ) ; } static void sortQueue ( Queue < Integer > q ) { for ( int i = 1 ; i <= q . size ( ) ; i ++ ) { int min_index = minIndex ( q , q . size ( ) - i ) ; insert_val = curr ; if ( i != min_index ) { System . out . print ( q . peek ( ) + \" ▁ \" ) ; q . remove ( ) ; } } } public static void main ( String args [ ] ) { q . add ( 30 ) ; q . add ( 30 ) ; q . add ( 11 ) ; q . add ( 15 ) ; q . add ( 15 ) ; q . add ( 15 ) ; q . add ( 4 ) ; sortQueue ( q ) ; } }"],"references":["import java . util . LinkedList ; import java . util . Queue ; class GFG { public static int minIndex ( Queue < Integer > list , int sortIndex ) { int min_index = - 1 ; int min_value = Integer . MAX_VALUE ; int s = list . size ( ) ; for ( int i = 0 ; i < s ; i ++ ) { int current = list . peek ( ) ; list . poll ( ) ; if ( current <= min_value && i <= sortIndex ) { min_index = i ; min_value = current ; } list . add ( current ) ; } return min_index ; } public static void insertMinToRear ( Queue < Integer > list , int min_index ) { int min_value = 0 ; int s = list . size ( ) ; for ( int i = 0 ; i < s ; i ++ ) { int current = list . peek ( ) ; list . poll ( ) ; if ( i != min_index ) list . add ( current ) ; else min_value = current ; } list . add ( min_value ) ; } public static void sortQueue ( Queue < Integer > list ) { for ( int i = 1 ; i <= list . size ( ) ; i ++ ) { int min_index = minIndex ( list , list . size ( ) - i ) ; insertMinToRear ( list , min_index ) ; } } public static void main ( String [ ] args ) { Queue < Integer > list = new LinkedList < Integer > ( ) ; list . add ( 30 ) ; list . add ( 11 ) ; list . add ( 15 ) ; list . add ( 4 ) ; sortQueue ( list ) ; while ( list . isEmpty ( ) == false ) { System . out . print ( list . peek ( ) + \" ▁ \" ) ; list . poll ( ) ; } } }"],"bleu":0.5431350257671157,"rouge_l":0.7170372468488883}
{"id":703,"predictions":["class GFG { static int cntRotations ( String s , int n ) { String str = s + s ; int pre [ ] = new int [ 2 * n ] ; for ( int i = 0 ; i < 2 * n ; i ++ ) pre [ i ] += pre [ i - 1 ] ; for ( int i = 0 ; i < 2 * n ; i ++ ) { if ( i != 0 ) pre [ i ] += pre [ i - 1 ] ; if ( str . charAt ( i ) == ' a ' || str . charAt ( i ) == ' i ' || str . charAt ( i ) == ' u ' ) pre [ i ] ++ ; } int ans = 0 ; for ( int i = n - 1 ; i > 0 ; i -- ) { int r = i , l = i - n ; int x1 = pre [ r ] ; if ( l >= 0 ) ans -= pre [ l ] ; r = i - n \/ 2 ; if ( l >= 0 ) ans += pre [ l ] ; } return ans ; } public static void main ( String [ ] args ) { String s = \" abecid \" ; int n = s . length ( ) ; System . out . println ( cntRotations ( s , n ) ) ; } }"],"references":["class GFG { static int cntRotations ( String s , int n ) { String str = s + s ; int pre [ ] = new int [ 2 * n ] ; for ( int i = 0 ; i < 2 * n ; i ++ ) { if ( i != 0 ) pre [ i ] += pre [ i - 1 ] ; if ( str . charAt ( i ) == ' a ' || str . charAt ( i ) == ' e ' || str . charAt ( i ) == ' i ' || str . charAt ( i ) == ' o ' || str . charAt ( i ) == ' u ' ) { pre [ i ] ++ ; } } int ans = 0 ; for ( int i = n - 1 ; i < 2 * n - 1 ; i ++ ) { int r = i , l = i - n ; int x1 = pre [ r ] ; if ( l >= 0 ) x1 -= pre [ l ] ; r = i - n \/ 2 ; int left = pre [ r ] ; if ( l >= 0 ) left -= pre [ l ] ; int right = x1 - left ; if ( left > right ) { ans ++ ; } } return ans ; } public static void main ( String args [ ] ) { String s = \" abecidft \" ; int n = s . length ( ) ; System . out . println ( cntRotations ( s , n ) ) ; } }"],"bleu":0.7643187867090827,"rouge_l":0.814871734247547}
{"id":704,"predictions":["class GFG { static int msb_p = - 1 ; static int msb_p ( int N ) { int msb = - 1 ; while ( N != 0 ) { N = N >> 1 ; msb_p ++ ; } return msb_p ; } static int findBitwiseOR ( int L , int R ) { int res = 0 ; int msb1 = LCS >> 1 ; msb2 = msb ; while ( msb1 == msb2 ) { int res_val = ( 1 << msb1 ) ; res += res_val ; L -= res_val ; R -= res_val ; R -= res_val ; msb2 = msb ; msb1 = msb ; } msb1 = msb1 ; } static int findBitwiseOR ( int L , int [ ] R ) { int res_val = 0 ; int i = 0 ; for ( int i = msb1 ; i >= 0 ; i -- ) { res_val = ( 1 << i ) ; res += res_val ; } return res ; } public static void main ( String [ ] args ) { int L = 12 , R = 18 ; System . out . println ( findBitwiseOR ( L , R ) ) ; } }"],"references":["import java . io . * ; class GFG { static int MSBPosition ( long N ) { int msb_p = - 1 ; while ( N > 0 ) { N = N >> 1 ; msb_p ++ ; } return msb_p ; } static long findBitwiseOR ( long L , long R ) { long res = 0 ; int msb_p1 = MSBPosition ( L ) ; int msb_p2 = MSBPosition ( R ) ; while ( msb_p1 == msb_p2 ) { long res_val = ( 1 << msb_p1 ) ; res += res_val ; L -= res_val ; R -= res_val ; msb_p1 = MSBPosition ( L ) ; msb_p2 = MSBPosition ( R ) ; } msb_p1 = Math . max ( msb_p1 , msb_p2 ) ; for ( int i = msb_p1 ; i >= 0 ; i -- ) { long res_val = ( 1 << i ) ; res += res_val ; } return res ; } public static void main ( String [ ] args ) { int L = 12 , R = 18 ; System . out . println ( findBitwiseOR ( L , R ) ) ; } }"],"bleu":0.5876739454613648,"rouge_l":0.7462374245472837}
{"id":705,"predictions":["import java . util . * ; class GFG { static void sieve ( boolean [ ] prime , int n ) { prime [ 0 ] = false ; prime [ 1 ] = false ; for ( int p = 2 ; p * p <= n ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * p ; i <= n ; i += p ) prime [ i ] = false ; } } } static int sumPrime ( int d ) { int maxVal = ( int ) ( Math . pow ( 10 , d ) - 1 ) ; boolean [ ] prime = new boolean [ maxVal + 1 ] ; Arrays . fill ( prime , true ) ; sieve ( prime , maxVal ) ; int sum = 0 ; for ( int i = 2 ; i <= maxVal ; i ++ ) { if ( prime [ i ] ) sum += i ; } return sum ; } public static void main ( String [ ] args ) { int d = 3 ; System . out . println ( sumPrime ( d ) ) ; } }"],"references":["class GFG { static void sieve ( boolean [ ] prime , int n ) { prime [ 0 ] = false ; prime [ 1 ] = false ; for ( int p = 2 ; p * p <= n ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * p ; i <= n ; i += p ) prime [ i ] = false ; } } } static int sumPrime ( int d ) { int i ; int maxVal = ( int ) Math . pow ( 10 , d ) - 1 ; boolean prime [ ] = new boolean [ maxVal + 1 ] ; for ( i = 0 ; i < maxVal + 1 ; i ++ ) prime [ i ] = true ; sieve ( prime , maxVal ) ; int sum = 0 ; for ( i = 2 ; i <= maxVal ; i ++ ) { if ( prime [ i ] ) { sum += i ; } } return sum ; } public static void main ( String [ ] args ) { int d = 3 ; System . out . println ( sumPrime ( d ) ) ; } }"],"bleu":0.8321044495351072,"rouge_l":0.9048264437918833}
{"id":706,"predictions":["import java . util . Arrays ; class GFG { static int MAX_CHAR = 256 ; static int kthNonRepeating ( String str , int k ) { int n = str . length ( ) ; int [ ] count [ ] = new int [ MAX_CHAR ] ; int [ ] index = new int [ MAX_CHAR ] ; for ( int i = 0 ; i < MAX_CHAR ; i ++ ) { count [ i ] = 0 ; index [ i ] = n ; } for ( int i = 0 ; i < n ; i ++ ) { char x = str . charAt ( i ) ; count [ x ] ++ ; if ( count [ x ] == 1 ) { index [ x ] = i ; } if ( count [ x - 1 ] == 2 ) { index [ x ] = n ; } } Arrays . sort ( index ) ; return index [ k - 1 ] ; } public static void main ( String [ ] args ) { String str = \" geeksforgeeks \" ; int k = 3 ; int res = kthNonRepeating ( str , k ) ; if ( res == - 1 ) System . out . println ( \" There ▁ are ▁ \" + \" nonRepeating ▁ k ▁ is ▁ \" + kthNonRepeating ( str , k ) ) ; else System . out . println ( \" k ' th ▁ are ▁ : ▁ \" + str . charAt ( res ) ) ; } }"],"references":["import java . util . Arrays ; class GFG { public static int MAX_CHAR = 256 ; static int kthNonRepeating ( String str , int k ) { int n = str . length ( ) ; int [ ] count = new int [ MAX_CHAR ] ; int [ ] index = new int [ MAX_CHAR ] ; for ( int i = 0 ; i < MAX_CHAR ; i ++ ) { count [ i ] = 0 ; index [ i ] = n ; } for ( int i = 0 ; i < n ; i ++ ) { char x = str . charAt ( i ) ; ++ count [ x ] ; if ( count [ x ] == 1 ) index [ x ] = i ; if ( count [ x ] == 2 ) index [ x ] = n ; } Arrays . sort ( index ) ; return ( index [ k - 1 ] != n ) ? index [ k - 1 ] : - 1 ; } public static void main ( String [ ] args ) { String str = \" geeksforgeeks \" ; int k = 3 ; int res = kthNonRepeating ( str , k ) ; System . out . println ( res == - 1 ? \" There ▁ are ▁ less ▁ than ▁ k ▁ non - repeating ▁ characters \" : \" k ' th ▁ non - repeating ▁ character ▁ is ▁ ▁ \" + str . charAt ( res ) ) ; } }"],"bleu":0.7884923819425002,"rouge_l":0.8632422016138744}
{"id":707,"predictions":["class GFG { static long squareDigitSum ( long num ) { long sum = 0 ; num = ( long ) num ; long squareNum = num * num ; while ( squareNum > 0 ) { sum = sum + ( squareNum % 10 ) ; squareNum = squareNum \/ 10 ; } return sum ; } public static void main ( String [ ] args ) { String N = \"1111\" ; System . out . println ( squareDigitSum ( N ) ) ; } }"],"references":["class GFG { static int squareDigitSum ( String number ) { int summ = 0 ; int num = Integer . parseInt ( number ) ; int squareNum = num * num ; while ( squareNum > 0 ) { summ = summ + ( squareNum % 10 ) ; squareNum = squareNum \/ 10 ; } return summ ; } public static void main ( String [ ] args ) { String N = \"1111\" ; System . out . println ( squareDigitSum ( N ) ) ; } }"],"bleu":0.6967187702420541,"rouge_l":0.8577428780131483}
{"id":708,"predictions":["class GFG { static int maxCost ( int a [ ] , int n , int l , int r ) { int mx = 0 ; for ( int i = 0 ; i < n ; ++ i ) mx = Math . max ( mx , a [ i ] ) ; int [ ] count = new int [ mx + 1 ] ; for ( int i = 0 ; i < n ; ++ i ) count [ a [ i ] ++ ; int [ ] res = new int [ mx + 1 ] ; for ( int i = 1 ; i <= mx ; i ++ ) { int k = Math . max ( num - l - 1 , 0 ) ; res [ 0 ] = Math . max ( res [ num - 1 ] , num * count [ num ] + res [ k ] ) ; } return res [ mx ] ; } public static void main ( String [ ] args ) { int a [ ] = { 2 , 1 , 2 , 3 , 2 , 1 } ; int l = 1 , r = 1 ; int n = a . length ; System . out . println ( maxCost ( a , n , l , r ) ) ; } }"],"references":["public class GFG { static int maxCost ( int a [ ] , int n , int l , int r ) { int mx = 0 , k ; for ( int i = 0 ; i < n ; ++ i ) mx = Math . max ( mx , a [ i ] ) ; int [ ] count = new int [ mx + 1 ] ; for ( int i = 0 ; i < count . length ; i ++ ) count [ i ] = 0 ; for ( int i = 0 ; i < n ; i ++ ) count [ a [ i ] ] ++ ; int [ ] res = new int [ mx + 1 ] ; res [ 0 ] = 0 ; l = Math . min ( l , r ) ; for ( int num = 1 ; num <= mx ; num ++ ) { k = Math . max ( num - l - 1 , 0 ) ; res [ num ] = Math . max ( res [ num - 1 ] , num * count [ num ] + res [ k ] ) ; } return res [ mx ] ; } public static void main ( String [ ] args ) { int a [ ] = { 2 , 1 , 2 , 3 , 2 , 2 , 1 } , l = 1 , r = 1 ; int n = a . length ; System . out . println ( maxCost ( a , n , l , r ) ) ; } }"],"bleu":0.7761835907223551,"rouge_l":0.8688810101387076}
{"id":709,"predictions":["import java . io . * ; class GFG { static int findPosition ( int k , int n ) { int f1 = 0 ; int f2 = 1 ; for ( int i = 2 ; i != 0 ; i ++ ) { f3 = f1 + f2 ; f1 = f2 ; f2 = f3 ; if ( f2 % k == 0 ) return n * i ; i ++ ; } return 0 ; } public static void main ( String [ ] args ) { int n = 5 ; int k = 4 ; System . out . println ( \" Position ▁ of ▁ n \" + \" ▁ and ▁ \" + \" Fibonacci ▁ is ▁ \" + findPosition ( k , n ) ) ; } }"],"references":["class GFG { public static int findPosition ( int k , int n ) { long f1 = 0 , f2 = 1 , f3 ; int i = 2 ; while ( i != 0 ) { f3 = f1 + f2 ; f1 = f2 ; f2 = f3 ; if ( f2 % k == 0 ) { return n * i ; } i ++ ; } return 0 ; } public static void main ( String [ ] args ) { int n = 5 ; int k = 4 ; System . out . print ( \" Position ▁ of ▁ n ' th ▁ multiple \" + \" ▁ of ▁ k ▁ in ▁ Fibonacci ▁ Series ▁ is ▁ \" ) ; System . out . println ( findPosition ( k , n ) ) ; } }"],"bleu":0.6754980616297074,"rouge_l":0.8210334207824799}
{"id":710,"predictions":["class GFG { static void printTheArray ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( arr [ i ] + \" ▁ \" ) ; } System . out . println ( ) ; } static void generateAllBinaryStrings ( int n , int arr [ ] , int i ) { if ( i == n ) { printTheArray ( arr , n ) ; return ; } arr [ i ] = 0 ; generateAllBinaryStrings ( n , arr , i + 1 ) ; arr [ i ] = 1 ; generateAllBinaryStrings ( n , arr , i + 1 ) ; } public static void main ( String [ ] args ) { int n = 4 ; int arr [ ] = new int [ n ] ; generateAllBinaryStrings ( n , arr , 0 ) ; } }"],"references":["import java . util . * ; class GFG { static void printTheArray ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( arr [ i ] + \" ▁ \" ) ; } System . out . println ( ) ; } static void generateAllBinaryStrings ( int n , int arr [ ] , int i ) { if ( i == n ) { printTheArray ( arr , n ) ; return ; } arr [ i ] = 0 ; generateAllBinaryStrings ( n , arr , i + 1 ) ; arr [ i ] = 1 ; generateAllBinaryStrings ( n , arr , i + 1 ) ; } public static void main ( String args [ ] ) { int n = 4 ; int [ ] arr = new int [ n ] ; generateAllBinaryStrings ( n , arr , 0 ) ; } }"],"bleu":0.9171074778092136,"rouge_l":0.963749151885238}
{"id":711,"predictions":["import java . util . Arrays ; class GFG { static String X = \" AGGTAB \" ; static int [ ] [ ] Y = new int [ 100 ] [ 100 ] ; static String [ ] [ ] dp = new String [ 100 ] [ 100 ] ; static int lcsOf3 ( int i , int j , int k ) { if ( i == - 1 || j == - 1 || k == - 1 ) { return 0 ; } if ( dp [ i ] [ j ] [ k ] != - 1 ) { return dp [ i ] [ j ] ; } if ( X [ i ] [ j ] && Y [ j ] == - 1 ) { return dp [ i ] [ j ] ; } if ( X [ i ] == Y [ j ] && Y [ j ] == Z [ k ] ) { dp [ i ] [ j ] = 1 + lcsOf3 ( i - 1 , j - 1 , k - 1 ) ; return dp [ i ] [ j ] ; } else { dp [ i ] [ j ] = Math . max ( Math . max ( lcsOf3 ( i - 1 , j , k ) , lcsOf3 ( i , j - 1 , k ) ) ; } return dp [ i ] [ j ] ; } public static void main ( String [ ] args ) { int m = X . length ( ) ; int n = Y . length ( ) ; int o = Z . length ( ) ; System . out . println ( \" Length ▁ of ▁ LCS ▁ is ▁ \" + lcsOf3 ( m - 1 , n - 1 , o - 1 ) ) ; } }"],"references":["class GFG { static String X = \" AGGT12\" ; static String Y = \"12TXAYB \" ; static String Z = \"12XBA \" ; static int [ ] [ ] [ ] dp = new int [ 100 ] [ 100 ] [ 100 ] ; static int lcsOf3 ( int i , int j , int k ) { if ( i == - 1 || j == - 1 || k == - 1 ) { return 0 ; } if ( dp [ i ] [ j ] [ k ] != - 1 ) { return dp [ i ] [ j ] [ k ] ; } if ( X . charAt ( i ) == Y . charAt ( j ) && Y . charAt ( j ) == Z . charAt ( k ) ) { return dp [ i ] [ j ] [ k ] = 1 + lcsOf3 ( i - 1 , j - 1 , k - 1 ) ; } else { return dp [ i ] [ j ] [ k ] = Math . max ( Math . max ( lcsOf3 ( i - 1 , j , k ) , lcsOf3 ( i , j - 1 , k ) ) , lcsOf3 ( i , j , k - 1 ) ) ; } } public static void main ( String [ ] args ) { for ( int i = 0 ; i < 100 ; i ++ ) { for ( int j = 0 ; j < 100 ; j ++ ) { for ( int k = 0 ; k < 100 ; k ++ ) { dp [ i ] [ j ] [ k ] = - 1 ; } } } int m = X . length ( ) ; int n = Y . length ( ) ; int o = Z . length ( ) ; System . out . print ( \" Length ▁ of ▁ LCS ▁ is ▁ \" + lcsOf3 ( m - 1 , n - 1 , o - 1 ) ) ; } }"],"bleu":0.6786052614299001,"rouge_l":0.7159021835694581}
{"id":712,"predictions":["import java . util . * ; class GFG { static boolean checkTriangularSum ( int n ) { HashMap < Integer , Integer > tri = new HashMap < Integer , Integer > ( ) ; for ( int i = 1 ; ; i ++ ) { int x = i * ( i + 1 ) \/ 2 ; if ( x >= n ) break ; tri . put ( x , i ++ ) ; } for ( HashMap . Entry < Integer , Integer > trim = new HashMap < Integer , Integer > ( ) ; if ( trim . containsKey ( n ) ) return true ; return false ; } public static void main ( String [ ] args ) { int n = 24 ; if ( checkTriangularSum ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; class GFG { static boolean checkTriangularSumRepresentation ( int n ) { HashSet < Integer > tri = new HashSet < > ( ) ; int i = 1 ; while ( true ) { int x = i * ( i + 1 ) \/ 2 ; if ( x >= n ) { break ; } tri . add ( x ) ; i ++ ; } for ( Integer tm : tri ) { if ( tri . contains ( n - tm ) && ( n - tm ) != ( int ) tri . toArray ( ) [ tri . size ( ) - 1 ] ) { return true ; } } return false ; } public static void main ( String [ ] args ) { int n = 24 ; if ( checkTriangularSumRepresentation ( n ) ) { System . out . println ( \" Yes \" ) ; } else { System . out . println ( \" No \" ) ; } } }"],"bleu":0.5494818240516212,"rouge_l":0.7402634054562558}
{"id":713,"predictions":["class GFG { static double getArea ( int base , double hypoten ) { double height = Math . sqrt ( base ) ; return ( double ) Math . sqrt ( base ) ; } static double printRightAngleTriangle ( double BASE , double slope ) { double hSquare = 180 ; double sideForMaxArea = Math . sqrt ( HSquare ) ; double sideForMaxArea = Math . sqrt ( sideArea \/ 2.0 ) ; double maxArea = getArea ( sideArea ) ; while ( Math . abs ( high - low ) > 1e-6 ) { double base = ( low + high ) \/ 2 ; double maxArea = getArea ( base ) ; while ( Math . abs ( high - low ) > 1e-6 ) { double base = ( low + high ) \/ 2.0 ; if ( getArea > maxArea ) max = base ; else low = base ; } double height = Math . ceil ( Math . sqrt ( hsquare - base * base ) ) ; base = base ; System . out . println ( base + \" ▁ \" + height ) ; } public static void main ( String [ ] args ) { double upten = 5 ; double area = 6 ; printRightAngleTriangle ( Math . sqrt ( area , area ) ; } }"],"references":["public class GFG { final static double eps = ( double ) 1e-6 ; static double getArea ( double base , double hypotenuse ) { double height = Math . sqrt ( hypotenuse * hypotenuse - base * base ) ; return 0.5 * base * height ; } static void printRightAngleTriangle ( int hypotenuse , int area ) { int hsquare = hypotenuse * hypotenuse ; double sideForMaxArea = Math . sqrt ( hsquare \/ 2.0 ) ; double maxArea = getArea ( sideForMaxArea , hypotenuse ) ; if ( area > maxArea ) { System . out . print ( \" Not ▁ possible \" ) ; return ; } double low = 0.0 ; double high = sideForMaxArea ; double base = 0 ; while ( Math . abs ( high - low ) > eps ) { base = ( low + high ) \/ 2.0 ; if ( getArea ( base , hypotenuse ) >= area ) { high = base ; } else { low = base ; } } double height = Math . sqrt ( hsquare - base * base ) ; System . out . println ( Math . round ( base ) + \" ▁ \" + Math . round ( height ) ) ; } static public void main ( String [ ] args ) { int hypotenuse = 5 ; int area = 6 ; printRightAngleTriangle ( hypotenuse , area ) ; } }"],"bleu":0.47661235750652686,"rouge_l":0.6442630820931349}
{"id":714,"predictions":["class GFG { static void Rearder ( String str , int R ) { int len = str . length ( ) ; int rem = 0 ; for ( int i = 0 ; i < len ; ++ i ) { int Num = rem * 10 + ( str . charAt ( i ) - '0' ) ; rem = Num % R ; } return rem ; } public static void main ( String [ ] args ) { String str = \"13589234\" ; int R = 13 ; System . out . println ( cirder ( str , R ) ) ; } }"],"references":["class GFG { static int Remainder ( String str , int R ) { int len = str . length ( ) ; int Num , Rem = 0 ; for ( int i = 0 ; i < len ; i ++ ) { Num = Rem * 10 + ( str . charAt ( i ) - '0' ) ; Rem = Num % R ; } return Rem ; } public static void main ( String [ ] args ) { String str = \"13589234356546756\" ; int R = 13 ; System . out . println ( Remainder ( str , R ) ) ; } }"],"bleu":0.7736437087027335,"rouge_l":0.9033657442034406}
{"id":715,"predictions":["import java . util . * ; class GFG { static int xorGivenSetBits ( int arr [ ] , int n , int k ) { Vector < Integer > v = new Vector < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( Integer . bitCount ( arr [ i ] ) == k ) v . add ( arr [ i ] ) ; } } int result = v . get ( 0 ) ; for ( int i = 1 ; i < v . size ( ) ; i ++ ) result ^= v . get ( i ) ; return result ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 13 , 1 , 19 , 7 } ; int n = arr . length ; int k = 3 ; System . out . print ( xorGivenSetBits ( arr , n , k ) ) ; } }"],"references":["import java . util . * ; class GFG { static int xorGivenSetBits ( int arr [ ] , int n , int k ) { Vector < Integer > v = new Vector < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( Integer . bitCount ( arr [ i ] ) == k ) { v . add ( arr [ i ] ) ; } } int result = v . get ( 0 ) ; for ( int i = 1 ; i < v . size ( ) ; i ++ ) { result = result ^ v . get ( i ) ; } return result ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 13 , 1 , 19 , 7 } ; int n = arr . length ; int k = 3 ; System . out . println ( xorGivenSetBits ( arr , n , k ) ) ; } }"],"bleu":0.84883089009111,"rouge_l":0.9288540949759119}
{"id":716,"predictions":["class GFG { static String addBinaryUtil ( String a [ ] , String b [ ] ) { String result = \" \" ; int s = 0 ; int i = a . length ( ) - 1 , j = b . length ( ) - 1 ; while ( i >= 0 || j >= 0 || s . charAt ( i ) ) { s += ( a . charAt ( i ) - '0' ) ; s += ( b . charAt ( i ) - '0' ) ; s += ( ( j >= 0 ) ? 0 : 0 ; result = ( char ) ( s % 2 + '0' ) + result ; s \/= 2 ; i -- ; } return result ; } static void addBinary ( String arr [ ] , int n ) { String result = \" \" ; for ( int i = 0 ; i < n ; i ++ ) result = addBinaryUtil ( result , arr [ i ] ) ; return result ; } public static void main ( String [ ] args ) { String arr [ ] = { \"1\" , \"10\" , \"11\" } ; int n = arr . length ; System . out . print ( addBinary ( arr , n ) ) ; } }"],"references":["class GFG { static String addBinaryUtil ( String a , String b ) { String result = \" \" ; int s = 0 ; int i = a . length ( ) - 1 , j = b . length ( ) - 1 ; while ( i >= 0 || j >= 0 || s == 1 ) { s += ( ( i >= 0 ) ? a . charAt ( i ) - '0' : 0 ) ; s += ( ( j >= 0 ) ? b . charAt ( j ) - '0' : 0 ) ; result = s % 2 + result ; s \/= 2 ; i -- ; j -- ; } return result ; } static String addBinary ( String arr [ ] , int n ) { String result = \" \" ; for ( int i = 0 ; i < n ; i ++ ) { result = addBinaryUtil ( result , arr [ i ] ) ; } return result ; } public static void main ( String [ ] args ) { String arr [ ] = { \"1\" , \"10\" , \"11\" } ; int n = arr . length ; System . out . println ( addBinary ( arr , n ) ) ; } }"],"bleu":0.8003953362543149,"rouge_l":0.8831620095555234}
{"id":717,"predictions":["import java . util . * ; import java . lang . * ; class GFG { public static void printComplement ( int arr1 [ ] , int arr2 [ ] , int n , int m ) { int i = 0 , j = 0 ; while ( i < n && j < m ) { if ( arr1 [ i ] < arr2 [ j ] ) System . out . print ( arr1 [ i ] + \" ▁ \" ) ; i ++ ; } else if ( arr1 [ i ] > arr2 [ j ] ) j ++ ; else if ( arr1 [ i ] == arr2 [ j ] ) j ++ ; } while ( i < n ) System . out . print ( arr1 [ i ] + \" ▁ \" ) ; } public static void main ( String [ ] args ) { int arr1 [ ] = { 3 , 6 , 10 , 12 , 15 } ; int arr2 [ ] = { 1 , 3 , 5 , 10 , 16 } ; int n = arr1 . length ; int m = arr2 . length ; int n = arr2 . length ; int m = arr2 . length ; printComplement ( arr1 , arr2 , n , m ) ; } }"],"references":["class GFG { static void relativeComplement ( int arr1 [ ] , int arr2 [ ] , int n , int m ) { int i = 0 , j = 0 ; while ( i < n && j < m ) { if ( arr1 [ i ] < arr2 [ j ] ) { System . out . print ( arr1 [ i ] + \" ▁ \" ) ; i ++ ; } else if ( arr1 [ i ] > arr2 [ j ] ) { j ++ ; } else if ( arr1 [ i ] == arr2 [ j ] ) { i ++ ; j ++ ; } } while ( i < n ) System . out . print ( arr1 [ i ] + \" ▁ \" ) ; } public static void main ( String [ ] args ) { int arr1 [ ] = { 3 , 6 , 10 , 12 , 15 } ; int arr2 [ ] = { 1 , 3 , 5 , 10 , 16 } ; int n = arr1 . length ; int m = arr2 . length ; relativeComplement ( arr1 , arr2 , n , m ) ; } }"],"bleu":0.8193727104970594,"rouge_l":0.9156572787396896}
{"id":718,"predictions":["import java . util . * ; class GFG { static boolean flag = false ; public static void main ( String [ ] args ) { String s = \" ABC146Dba \" ; int u = 0 ; int n = s . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( Character . isLowerCase ( s . charAt ( i ) ) { u [ s . charAt ( i ) - 65 ] ) { u [ s . charAt ( i ) - 65 ] ++ ; } else { u [ s . charAt ( s . charAt ( i ) - 65 ] -- ; } } if ( u == 0 && ne == 0 ) { System . out . println ( \" YES \" ) ; } else if ( po == 0 && ne == 0 ) { System . out . println ( \" YES \" ) ; } else if ( po == 1 && ne == 0 ) { System . out . println ( \" YES \" ) ; } else if ( po == 0 && ne == - 1 ) { System . out . println ( \" YES \" ) ; } else if ( po == 0 && ne == - 1 ) { System . out . println ( \" YES \" ) ; } else { System . out . println ( \" NO \" ) ; } } }"],"references":["public class Improve { public static void main ( String args [ ] ) { String s = \" ABCdcba \" ; int u [ ] = new int [ 26 ] ; int n = s . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( Character . isUpperCase ( s . charAt ( i ) ) ) { u [ s . charAt ( i ) - 65 ] += 1 ; } else { u [ s . charAt ( i ) - 97 ] -= 1 ; } } boolean f1 = true ; int po = 0 ; int ne = 0 ; for ( int i = 0 ; i < 26 ; i ++ ) { if ( u [ i ] > 0 ) po += u [ i ] ; if ( u [ i ] < 0 ) ne += u [ i ] ; } if ( po == 0 && ne == 0 ) System . out . println ( \" YES \" ) ; else if ( po == 1 && ne == 0 ) System . out . println ( \" YES \" ) ; else if ( po == 0 && ne == - 1 ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ; } }"],"bleu":0.5780901481521267,"rouge_l":0.705452900891588}
{"id":719,"predictions":["class GFG { static boolean isPalindrome ( String s ) { int i = 0 , j = s . length ( ) - 1 ; while ( i < j ) { if ( s . charAt ( i ) != s . charAt ( j ) ) { return false ; } i ++ ; j -- ; } return true ; } static int getIndex ( String S1 , String S2 , int n ) { String S = \" \" ; for ( int i = 0 ; i < n ; i ++ ) { S = S + S1 . charAt ( i ) ; String temp = \" \" ; for ( int j = i + 1 ; j < n ; j ++ ) temp += S2 . charAt ( j ) ; if ( isPalindrome ( S + temp ) ) return i ; } return - 1 ; } public static void main ( String [ ] args ) { String S1 = \" abcdf \" , S2 = \" sfgba \" ; int n = S1 . length ( ) ; System . out . println ( getIndex ( S1 , S2 , n ) ) ; } }"],"references":["class GFG { static boolean isPalindrome ( String s ) { int i = 0 ; int j = s . length ( ) - 1 ; while ( i < j ) { if ( s . charAt ( i ) != s . charAt ( j ) ) return false ; i ++ ; j -- ; } return true ; } static int getIndex ( String S1 , String S2 , int n ) { String S = \" \" ; for ( int i = 0 ; i < n ; i ++ ) { S = S + S1 . charAt ( i ) ; String Temp = \" \" ; for ( int j = i + 1 ; j < n ; j ++ ) Temp += S2 . charAt ( j ) ; if ( isPalindrome ( S + Temp ) ) { return i ; } } return - 1 ; } public static void main ( String [ ] args ) { String S1 = \" abcdf \" , S2 = \" sfgba \" ; int n = S1 . length ( ) ; System . out . println ( getIndex ( S1 , S2 , n ) ) ; } }"],"bleu":0.9243868533669743,"rouge_l":0.9688541101727745}
{"id":720,"predictions":["class GFG { static int XorSum ( int arr [ ] , int n ) { int result = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 != 0 ) result += arr [ i ] ; } return result ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 6 , 3 , 4 , 5 } ; int n = arr . length ; System . out . println ( XorSum ( arr , n ) ) ; } }"],"references":["class GFG { static int XorSum ( int arr [ ] , int n ) { int result = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 != 0 ) result += arr [ i ] ; } return result ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 6 , 3 , 4 , 5 } ; int n = arr . length ; System . out . println ( XorSum ( arr , n ) ) ; } }"],"bleu":1.0,"rouge_l":1.0}
{"id":721,"predictions":["class GFG { static int count ( int arr [ ] , int n , int x ) { if ( x == 1 ) { int ans = ( int ) Math . pow ( 2 , n ) - 1 ; return ans ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % x == 0 ) count ++ ; } int ans = ( int ) Math . pow ( 2 , count ) - 1 ; return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 4 , 3 , 5 } ; int n = arr . length ; int x = 1 ; System . out . println ( count ( arr , n , x ) ) ; } }"],"references":["import java . util . * ; class solution { static long count ( int arr [ ] , int n , int x ) { if ( x == 1 ) { long ans = ( long ) Math . pow ( 2 , n ) - 1 ; return ans ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % x == 0 ) count ++ ; } long ans = ( long ) Math . pow ( 2 , count ) - 1 ; return ans ; } public static void main ( String args [ ] ) { int [ ] arr = { 2 , 4 , 3 , 5 } ; int n = arr . length ; int x = 1 ; System . out . println ( count ( arr , n , x ) ) ; } }"],"bleu":0.8274082733498923,"rouge_l":0.9256356145111044}
{"id":722,"predictions":["class GFG { static void removeSpecialCharacter ( String s ) { String t = \" \" ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) >= ' A ' && ( i >= ' z ' ) || ( i >= ' a ' && i <= ' z ' ) ) { t += i ; } } System . out . print ( t ) ; } public static void main ( String [ ] args ) { String s = \" $ee * k ; s . fo , ▁ r ' Ge ^ eks ? \" ; removeSpecialCharacter ( s ) ; } }"],"references":["class GFG { static void removeSpecialCharacter ( String str ) { char [ ] s = str . toCharArray ( ) ; int j = 0 ; for ( int i = 0 ; i < s . length ; i ++ ) { if ( ( s [ i ] >= ' A ' && s [ i ] <= ' Z ' ) || ( s [ i ] >= ' a ' && s [ i ] <= ' z ' ) ) { s [ j ] = s [ i ] ; j ++ ; } } System . out . println ( String . valueOf ( s ) . substring ( 0 , j ) ) ; } public static void main ( String [ ] args ) { String s = \" $ Gee * k ; s . . fo , ▁ r ' Ge ^ eks ? \" ; removeSpecialCharacter ( s ) ; } }"],"bleu":0.5070571306981912,"rouge_l":0.7227646736149205}
{"id":723,"predictions":["class GFG { static void calculate ( int a [ ] , int b [ ] , int n , int m ) { int mul = 1 ; for ( int i = 0 ; i < m ; i ++ ) { if ( b [ i ] != 0 ) mul = mul * b [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) System . out . print ( x + \" ▁ \" ) ; } public static void main ( String [ ] args ) { int a [ ] = { 5 , 100 , 8 } ; int b [ ] = { 2 , 3 } ; int n = a . length ; int m = b . length ; calculate ( a , b , n , m ) ; } }"],"references":["import java . io . * ; class GFG { static void calculate ( int a [ ] , int b [ ] , int n , int m ) { int mul = 1 ; for ( int i = 0 ; i < m ; i ++ ) if ( b [ i ] != 0 ) mul = mul * b [ i ] ; for ( int i = 0 ; i < n ; i ++ ) { int x = ( int ) Math . floor ( a [ i ] \/ mul ) ; System . out . print ( x + \" ▁ \" ) ; } } public static void main ( String [ ] args ) { int a [ ] = { 5 , 100 , 8 } ; int b [ ] = { 2 , 3 } ; int n = a . length ; int m = b . length ; calculate ( a , b , n , m ) ; } }"],"bleu":0.8152667832368852,"rouge_l":0.9001270399687286}
{"id":724,"predictions":["import java . util . * ; class GFG { static void sieve ( int maxEle , int prime [ ] ) { prime [ 0 ] = prime [ 1 ] = 1 ; for ( int i = 2 ; i * i <= maxEle ; i ++ ) { if ( prime [ i ] == 0 ) for ( int j = 2 * i ; j <= maxEle ; j += i ) prime [ j ] = 1 ; } } static void printSum ( int n ) { int sum = 0 ; while ( n > 0 ) { sum += n % 10 ; n = n \/ 10 ; } return ; } static void printAdditivePrime ( int arr [ ] , int n ) { int maxEle = maxEle ( arr ) ; int [ ] prime = new int [ maxEle + 1 ] ; sieve ( maxEle , prime ) ; for ( int i = 0 ; i < n ; ++ i ) { if ( prime [ arr [ i ] == 0 ) { int sum = digitSum ( arr [ i ] ) ; if ( prime [ sum ] == 0 ) System . out . print ( arr [ i ] + \" ▁ \" ) ; } } } static public void main ( String [ ] args ) { int a [ ] = { 2 , 4 , 6 , 11 , 12 , 18 , 7 } ; int n = a . length ; printAdditivePrime ( a , n ) ; } }"],"references":["import java . util . Arrays ; class GFG { static void sieve ( int maxEle , int prime [ ] ) { prime [ 0 ] = prime [ 1 ] = 1 ; for ( int i = 2 ; i * i <= maxEle ; i ++ ) { if ( prime [ i ] == 0 ) { for ( int j = 2 * i ; j <= maxEle ; j += i ) prime [ j ] = 1 ; } } } static int digitSum ( int n ) { int sum = 0 ; while ( n > 0 ) { sum += n % 10 ; n = n \/ 10 ; } return sum ; } static void printAdditivePrime ( int arr [ ] , int n ) { int maxEle = Arrays . stream ( arr ) . max ( ) . getAsInt ( ) ; int prime [ ] = new int [ maxEle + 1 ] ; sieve ( maxEle , prime ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( prime [ arr [ i ] ] == 0 ) { int sum = digitSum ( arr [ i ] ) ; if ( prime [ sum ] == 0 ) System . out . print ( arr [ i ] + \" ▁ \" ) ; } } } public static void main ( String [ ] args ) { int a [ ] = { 2 , 4 , 6 , 11 , 12 , 18 , 7 } ; int n = a . length ; printAdditivePrime ( a , n ) ; } }"],"bleu":0.8732988721778413,"rouge_l":0.9466842286106976}
{"id":725,"predictions":["import java . util . * ; class solution { static void check ( int n , int m ) { if ( m % n == 0 ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ; } public static void main ( String [ ] args ) { int n = 5 , m = 10 ; check ( n , m ) ; } }"],"references":["class GFG { static int check ( int n , int m ) { if ( m % n == 0 ) { System . out . print ( \" YES \" ) ; } else { System . out . print ( \" NO \" ) ; } return 0 ; } public static void main ( String [ ] args ) { int n = 5 ; int m = 10 ; check ( n , m ) ; } }"],"bleu":0.7102627137629459,"rouge_l":0.8475585549821358}
{"id":726,"predictions":["import java . util . * ; class GFG { static int findPowerOfP ( int N , int p ) { int count = 0 ; int r = p ; while ( r <= N ) { count += ( int ) ( N \/ r ) ; r = r * p ; } return count ; } static Vector < Integer > primeFactorofPfB ( int B ) { Vector < Integer > ans = new Vector < Integer > ( ) ; int i = 2 ; while ( B != 1 ) { if ( B % i == 0 ) { int count = 0 ; while ( B % i == 0 ) { B \/= i ; count ++ ; } ans . add ( new ArrayList < Integer > ( ) ) ; } i ++ ; } return ans ; } static int largestPowerOfB ( int N , int B ) { Vector < Integer > vec = new Vector < Integer > ( ) ; int [ ] vec = new Vector < Integer > ( ) ; int ans = primeFactorsofB ( B ) ; int ans = Integer . MAX_VALUE ; ans = Integer . MAX_VALUE ; ans = Integer . MAX_VALUE ; ans = Integer . MAX_VALUE ; ans = Math . min ( ans , ( findPowerOfP ( N , vec . get ( 0 ) ) \/ vec . get ( 0 ) ) ) ; return ans ; } public static void main ( String [ ] args ) { System . out . println ( largestPowerOfB ( 5 , 2 ) ) ; System . out . println ( largestPowerOfB ( 6 , 9 ) ) ; } }"],"references":["import java . util . * ; class GFG { static class pair { int first , second ; public pair ( int first , int second ) { this . first = first ; this . second = second ; } } static int findPowerOfP ( int N , int p ) { int count = 0 ; int r = p ; while ( r <= N ) { count += ( N \/ r ) ; r = r * p ; } return count ; } static Vector < pair > primeFactorsofB ( int B ) { Vector < pair > ans = new Vector < pair > ( ) ; for ( int i = 2 ; B != 1 ; i ++ ) { if ( B % i == 0 ) { int count = 0 ; while ( B % i == 0 ) { B = B \/ i ; count ++ ; } ans . add ( new pair ( i , count ) ) ; } } return ans ; } static int largestPowerOfB ( int N , int B ) { Vector < pair > vec = new Vector < pair > ( ) ; vec = primeFactorsofB ( B ) ; int ans = Integer . MAX_VALUE ; for ( int i = 0 ; i < vec . size ( ) ; i ++ ) ans = Math . min ( ans , findPowerOfP ( N , vec . get ( i ) . first ) \/ vec . get ( i ) . second ) ; return ans ; } public static void main ( String [ ] args ) { System . out . println ( largestPowerOfB ( 5 , 2 ) ) ; System . out . println ( largestPowerOfB ( 6 , 9 ) ) ; } }"],"bleu":0.6870967577486908,"rouge_l":0.7959629314017895}
{"id":727,"predictions":["import java . io . * ; class GFG { static void printCombination ( int n ) { System . out . print ( \"1 ▁ \" ) ; if ( ( n - 2 ) % 3 == 0 ) System . out . print ( \"2\" + ( n - 3 ) ) ; else System . out . print ( \"1\" + ( n - 2 ) ) ; } public static void main ( String [ ] args ) { int n = 233 ; printCombination ( n ) ; } }"],"references":["class GFG { static void printCombination ( int n ) { System . out . print ( 1 + \" ▁ \" ) ; if ( ( n - 2 ) % 3 == 0 ) System . out . print ( 2 + \" ▁ \" + ( n - 3 ) ) ; else System . out . print ( 1 + \" ▁ \" + ( n - 2 ) ) ; } public static void main ( String [ ] args ) { int n = 233 ; printCombination ( n ) ; } }"],"bleu":0.8208732733931962,"rouge_l":0.8796109993293094}
{"id":728,"predictions":["import java . util . * ; class GFG { static createHash ( int maxElement ) { int prev = 0 , curr = 1 ; HashMap < Integer , Integer > d = new HashMap < > ( ) ; for ( int i = 0 ; i < maxElement ; i ++ ) { int temp = curr + prev ; d . put ( prev , 1 ) ; } d . put ( curr , 1 ) ; d . put ( curr , 1 ) ; while ( curr <= maxElement ) { int temp = curr + prev ; d . put ( temp , 1 ) ; prev = curr ; curr = temp ; } return d ; } static int countFibonacciDivisors ( int n ) { HashSet < Integer > hash = createHash ( n ) ; int cnt = 0 ; for ( int i = 1 ; i <= Math . sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { if ( ( n \/ i == i ) { cnt ++ ; } else { if ( hash . containsKey ( n \/ i ) ) { cnt ++ ; } if ( hash . contains ( n \/ i ) ) { cnt ++ ; } } } return cnt ; } public static void main ( String [ ] args ) { int n = 12 ; System . out . print ( countFibonacciDivisors ( n ) ) ; } }"],"references":["import java . util . * ; class GFG { static void createHash ( HashSet < Integer > hash , int maxElement ) { int prev = 0 , curr = 1 ; hash . add ( prev ) ; hash . add ( curr ) ; while ( curr <= maxElement ) { int temp = curr + prev ; hash . add ( temp ) ; prev = curr ; curr = temp ; } } static int countFibonacciDivisors ( int n ) { HashSet < Integer > hash = new HashSet < Integer > ( ) ; createHash ( hash , n ) ; int cnt = 0 ; for ( int i = 1 ; i <= Math . sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { if ( ( n \/ i == i ) && ( hash . contains ( n \/ i ) ) ) cnt ++ ; else { if ( hash . contains ( n \/ i ) ) cnt ++ ; if ( hash . contains ( n \/ ( n \/ i ) ) ) cnt ++ ; } } } return cnt ; } public static void main ( String [ ] args ) { int n = 12 ; System . out . print ( countFibonacciDivisors ( n ) ) ; } }"],"bleu":0.6619192425962211,"rouge_l":0.7919978802331743}
{"id":729,"predictions":["class GFG { static int MAX = 100000 ; static boolean [ ] prime = new boolean [ MAX + 1 ] ; static void SieveOfEratosthenes ( ) { for ( int i = 0 ; i <= MAX ; i ++ ) prime [ i ] = true ; prime [ 1 ] = false ; for ( int p = 2 ; p * p <= MAX ; p ++ ) { if ( prime [ p ] ) { for ( int i = p * 2 ; i <= MAX ; i += p ) prime [ i ] = false ; } } } static void SumOfKthPrimes ( int arr [ ] , int n , int k ) { int c = 0 , sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( prime [ arr [ i ] ] ) { c += 1 ; if ( c % k == 0 ) { sum += arr [ i ] ; c = 0 ; } } } System . out . print ( sum ) ; } public static void main ( String [ ] args ) { SieveOfEratosthenes ( ) ; int arr [ ] = { 2 , 3 , 5 , 7 , 11 } ; int n = arr . length ; int k = 2 ; SumOfKthPrimes ( arr , n , k ) ; } }"],"references":["public class GFG { static int MAX = 1000000 ; static boolean prime [ ] = new boolean [ MAX + 1 ] ; static void SieveOfEratosthenes ( ) { for ( int i = 0 ; i < prime . length ; i ++ ) { prime [ i ] = true ; } prime [ 1 ] = false ; prime [ 0 ] = false ; for ( int p = 2 ; p * p <= MAX ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i <= MAX ; i += p ) { prime [ i ] = false ; } } } } static void SumOfKthPrimes ( int arr [ ] , int n , int k ) { int c = 0 ; long sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( prime [ arr [ i ] ] ) { c ++ ; if ( c % k == 0 ) { sum += arr [ i ] ; c = 0 ; } } } System . out . println ( sum ) ; } public static void main ( String [ ] args ) { SieveOfEratosthenes ( ) ; int arr [ ] = { 2 , 3 , 5 , 7 , 11 } ; int n = arr . length ; int k = 2 ; SumOfKthPrimes ( arr , n , k ) ; } }"],"bleu":0.8493229461587616,"rouge_l":0.9332831703034863}
{"id":730,"predictions":["class GFG { static void generatePrimeFactors ( int N , int [ ] s ) { boolean [ ] prime = new boolean [ N + 1 ] ; for ( int i = 0 ; i < N ; i ++ ) prime [ i ] = false ; for ( int i = 2 ; i < N ; i += 2 ) s [ i ] = 2 ; for ( int i = 3 ; i * i <= N \/ i ; i += 2 ) { if ( prime [ i ] == false ) { s [ i * i ] = true ; for ( int j = i ; j <= N \/ i ; j += 2 ) { if ( prime [ i * j ] == false ) { prime [ i * j ] = true ; s [ i * j ] = i ; } } } } } static void generatePrimeFactors ( int N ) { int [ ] s = new int [ N + 1 ] ; sieveOfEratosthenes ( N , s ) ; System . out . println ( \" Factors ▁ Power \" + s [ N ] ) ; int curr = s [ N ] ; int cnt = 1 ; while ( N > 1 ) { N \/= s [ N ] ; if ( curr == s [ N ] ) { cnt ++ ; continue ; } System . out . println ( \" factor ▁ \" + cnt ) ; curr = s [ N ] ; cnt = 1 ; } } public static void main ( String [ ] args ) { int N = 360 ; generatePrimeFactors ( N ) ; } }"],"references":["class GFG { static void sieveOfEratosthenes ( int N , int s [ ] ) { boolean [ ] prime = new boolean [ N + 1 ] ; for ( int i = 2 ; i <= N ; i += 2 ) s [ i ] = 2 ; for ( int i = 3 ; i <= N ; i += 2 ) { if ( prime [ i ] == false ) { s [ i ] = i ; for ( int j = i ; j * i <= N ; j += 2 ) { if ( prime [ i * j ] == false ) { prime [ i * j ] = true ; s [ i * j ] = i ; } } } } } static void generatePrimeFactors ( int N ) { int [ ] s = new int [ N + 1 ] ; sieveOfEratosthenes ( N , s ) ; System . out . println ( \" Factor ▁ Power \" ) ; int curr = s [ N ] ; int cnt = 1 ; while ( N > 1 ) { N \/= s [ N ] ; if ( curr == s [ N ] ) { cnt ++ ; continue ; } System . out . println ( curr + \" \\t \" + cnt ) ; curr = s [ N ] ; cnt = 1 ; } } public static void main ( String [ ] args ) { int N = 360 ; generatePrimeFactors ( N ) ; } }"],"bleu":0.8148410804713988,"rouge_l":0.920251050843554}
{"id":731,"predictions":["class GFG { static int nearest ( int n ) { int prevSquare = ( int ) Math . sqrt ( n ) ; int nextSquare = prevSquare + 1 ; int nextSquare = prevSquare * prevSquare ; prevSquare = nextSquare * prevSquare ; nextSquare = nextSquare * nextSquare ; nextSquare = nextSquare * nextSquare ; nextSquare = nextSquare * nextSquare ; } int ans = ( prevSquare - n ) ? ( ( n - prevSquare - n ) : ( nextSquare - n ) ; return ans ; } public static void main ( String [ ] args ) { int n = 14 ; System . out . println ( nearest ( n ) ) ; n = 16 ; System . out . println ( nearest ( n ) ) ; n = 18 ; System . out . println ( nearest ( n ) ) ; } }"],"references":["class GFG { static int nearest ( int n ) { int prevSquare = ( int ) Math . sqrt ( n ) ; int nextSquare = prevSquare + 1 ; prevSquare = prevSquare * prevSquare ; nextSquare = nextSquare * nextSquare ; int ans = ( n - prevSquare ) < ( nextSquare - n ) ? ( prevSquare - n ) : ( nextSquare - n ) ; return ans ; } public static void main ( String [ ] args ) { int n = 14 ; System . out . println ( nearest ( n ) ) ; n = 16 ; System . out . println ( nearest ( n ) ) ; n = 18 ; System . out . println ( nearest ( n ) ) ; } }"],"bleu":0.8264828944237521,"rouge_l":0.9023047815617474}
{"id":732,"predictions":["class GFG { static void checkIfSortRotated ( int arr [ ] , int n ) { int minEle = Integer . MAX_VALUE ; int maxEle = Integer . MIN_VALUE ; int minIndex = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < minEle ) { minEle = arr [ i ] ; minIndex = i ; } } int flag1 = 1 ; for ( int i = minIndex + 1 ; i < minIndex ; i ++ ) { if ( arr [ i ] < arr [ i - 1 ] ) { flag1 = 0 ; break ; } } int flag2 = 2 ; for ( int i = minIndex + 1 ; i < n ; i ++ ) { if ( arr [ i ] < arr [ i - 1 ] ) { flag2 = 0 ; break ; } } if ( flag1 && flag2 == arr [ minIndex - 1 ] ) { System . out . println ( \" YES \" ) ; } else { System . out . println ( \" NO \" ) ; } } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 4 , 5 , 1 , 2 } ; int n = arr . length ; checkIfSortRotated ( arr , n ) ; } }"],"references":["import java . io . * ; class GFG { static void checkIfSortRotated ( int arr [ ] , int n ) { int minEle = Integer . MAX_VALUE ; int maxEle = Integer . MIN_VALUE ; int minIndex = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < minEle ) { minEle = arr [ i ] ; minIndex = i ; } } boolean flag1 = true ; for ( int i = 1 ; i < minIndex ; i ++ ) { if ( arr [ i ] < arr [ i - 1 ] ) { flag1 = false ; break ; } } boolean flag2 = true ; for ( int i = minIndex + 1 ; i < n ; i ++ ) { if ( arr [ i ] < arr [ i - 1 ] ) { flag2 = false ; break ; } } if ( minIndex == 0 ) { System . out . print ( \" NO \" ) ; return ; } if ( flag1 && flag2 && ( arr [ n - 1 ] < arr [ minIndex - 1 ] ) ) System . out . println ( \" YES \" ) ; else System . out . print ( \" NO \" ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 4 , 5 , 1 , 2 } ; int n = arr . length ; checkIfSortRotated ( arr , n ) ; } }"],"bleu":0.7824623193628166,"rouge_l":0.8791781662066851}
{"id":733,"predictions":["class GFG { static void printSquares ( int n ) { int square = 0 , prev_x = 0 ; for ( int x = 0 ; x < n ; x ++ ) { square = ( square + x + prev_x ) ; System . out . print ( square + \" ▁ \" ) ; prev_x = x ; } } public static void main ( String [ ] args ) { int n = 5 ; printSquares ( n ) ; } }"],"references":["import java . io . * ; class GFG { static void printSquares ( int n ) { int square = 0 , prev_x = 0 ; for ( int x = 0 ; x < n ; x ++ ) { square = ( square + x + prev_x ) ; System . out . print ( square + \" ▁ \" ) ; prev_x = x ; } } public static void main ( String [ ] args ) { int n = 5 ; printSquares ( n ) ; } }"],"bleu":0.9226920226311179,"rouge_l":0.95466810577442}
{"id":734,"predictions":["import java . util . * ; import java . lang . * ; class GFG { public static int __gcd ( int a , int b ) { if ( a == 0 ) return b ; return __gcd ( b % a , a % b ) ; } static void solveProblems ( int a , int b1 , int b2 , int c ) { int A = a * b ; int B = b1 * b2 ; int C = b1 * c ; int gcd1 = c1 * c ; int gcd1 = __gcd ( gcd1 , B ) ; System . out . print ( a \/ gcd1 + \" : ▁ \" + B \/ gcd1 ) ; } public static void main ( String [ ] args ) { int a = 3 , b1 = 4 , b2 = 8 , c = 9 ; solveProblems ( a , b1 , b2 , c ) ; } }"],"references":["import java . util . * ; import java . lang . * ; import java . io . * ; class GFG { static int __gcd ( int a , int b ) { return b == 0 ? a : __gcd ( b , a % b ) ; } static void solveProportion ( int a , int b1 , int b2 , int c ) { int A = a * b2 ; int B = b1 * b2 ; int C = b1 * c ; int gcd = __gcd ( __gcd ( A , B ) , C ) ; System . out . print ( A \/ gcd + \" : \" + B \/ gcd + \" : \" + C \/ gcd ) ; } public static void main ( String args [ ] ) { int a , b1 , b2 , c ; a = 3 ; b1 = 4 ; b2 = 8 ; c = 9 ; solveProportion ( a , b1 , b2 , c ) ; } }"],"bleu":0.6102701253636678,"rouge_l":0.7772507440476191}
{"id":735,"predictions":["import java . util . * ; class GFG { static void countPairs ( int arr [ ] , int N ) { HashMap < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { if ( mp . containsKey ( arr [ i ] ) ) { mp . put ( arr [ i ] , mp . get ( arr [ i ] ) + 1 ) ; } else { mp . put ( arr [ i ] , 1 ) ; } } int maxFreq = 0 ; for ( Map . Entry < Integer , Integer > it : mp . entrySet ( ) ) { maxFreq = Math . max ( maxFreq , it . getValue ( ) ) ; } System . out . println ( N - maxFreq ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 8 , 5 , 9 , 8 , 7 , 5 , 7 } ; int N = arr . length ; countPairs ( arr , N ) ; } }"],"references":["import java . util . * ; class GFG { static void countPairs ( int arr [ ] , int N ) { HashMap < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { if ( mp . containsKey ( arr [ i ] ) ) { mp . put ( arr [ i ] , mp . get ( arr [ i ] ) + 1 ) ; } else { mp . put ( arr [ i ] , 1 ) ; } } int maxFreq = 0 ; for ( Map . Entry < Integer , Integer > it : mp . entrySet ( ) ) { maxFreq = Math . max ( maxFreq , it . getValue ( ) ) ; } System . out . print ( N - maxFreq + \" \\n \" ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 8 , 5 , 9 , 8 , 8 , 7 , 7 , 5 , 7 , 7 } ; int N = arr . length ; countPairs ( arr , N ) ; } }"],"bleu":0.9340151451785298,"rouge_l":0.9680334092634777}
{"id":736,"predictions":["import java . util . * ; class GFG { static void numberOfSubarrays ( int arr [ ] , int n ) { int v [ ] = new int [ n + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) { v [ i + 1 ] = v [ i ] + arr [ i ] ; } HashMap < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; int answer = 0 , end = 0 ; do { while ( end < n ) { while ( end < n && ( v [ end + 1 ] ) == 1 ) { end ++ ; mp . put ( v [ end ] , 1 ) ; } answer = answer + end - 1 ; } answer = answer + end - begin ; } System . out . println ( answer ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 4 , - 6 } ; int size = arr . length ; numberOfSubarrays ( arr , size ) ; } }"],"references":["import java . util . * ; class GFG { static void numberOfSubarrays ( int arr [ ] , int n ) { int [ ] v = new int [ n + 1 ] ; v [ 0 ] = 0 ; for ( int i = 0 ; i < n ; i ++ ) { v [ i + 1 ] = v [ i ] + arr [ i ] ; } HashMap < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; int begin = 0 , end = 0 , answer = 0 ; mp . put ( 0 , 1 ) ; while ( begin < n ) { while ( end < n && ! mp . containsKey ( v [ end + 1 ] ) ) { end ++ ; mp . put ( v [ end ] , 1 ) ; } answer = answer + end - begin ; mp . remove ( v [ begin ] ) ; begin ++ ; } System . out . print ( answer + \" \\n \" ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 4 , - 6 } ; int size = arr . length ; numberOfSubarrays ( arr , size ) ; } }"],"bleu":0.7515038451083259,"rouge_l":0.855140186915888}
{"id":737,"predictions":["import java . util . * ; class GFG { static int minimizeDiff ( int arr [ ] , int n , int k ) { int max_element = Arrays . stream ( arr ) . max ( ) . getAsInt ( ) ; int min_element = Arrays . stream ( arr ) . min ( ) . getAsInt ( ) ; if ( ( max_element - min_element ) <= k ) return ( max_element - min_element ) ; int avg = ( max_element + min_element ) \/ 2 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > avg ) arr [ i ] -= k ; else arr [ i ] += k ; } int max_element = arr [ 0 ] ; int min_element = Math . min ( arr [ 0 ] , min_element ) ; return ( max_element - min_element ) ; } static public void main ( String [ ] args ) { int arr [ ] = { 3 , 16 , 12 , 9 , 20 } ; int n = arr . length ; int k = 3 ; System . out . println ( \" Max ▁ height ▁ difference ▁ = ▁ \" + minimizeDiff ( arr , n , k ) ) ; } }"],"references":["import java . util . * ; class GFG { static int minimizeDiff ( int [ ] arr , int n , int k ) { int max = Arrays . stream ( arr ) . max ( ) . getAsInt ( ) ; int min = Arrays . stream ( arr ) . min ( ) . getAsInt ( ) ; if ( ( max - min ) <= k ) { return ( max - min ) ; } int avg = ( max + min ) \/ 2 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > avg ) { arr [ i ] -= k ; } else { arr [ i ] += k ; } } max = Arrays . stream ( arr ) . max ( ) . getAsInt ( ) ; min = Arrays . stream ( arr ) . min ( ) . getAsInt ( ) ; return ( max - min ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 16 , 12 , 9 , 20 } ; int n = 5 ; int k = 3 ; System . out . println ( \" Max ▁ height ▁ difference ▁ = ▁ \" + minimizeDiff ( arr , n , k ) ) ; } }"],"bleu":0.6939032735321671,"rouge_l":0.8415236787920384}
{"id":738,"predictions":["import java . util . * ; public class Graph { private LinkedList < Integer > adj [ ] ; Graph ( int [ ] v ) { V = new LinkedList ( ) ; adj = new LinkedList [ v ] ; for ( int i = 0 ; i < v ; ++ i ) adj [ i ] = new LinkedList ( ) ; adj [ i ] = new LinkedList ( ) ; } void addEdge ( int u , int s ) { adj [ u ] . add ( v ) ; visited . add ( s ) ; while ( ! queue . isEmpty ( ) ) { s = queue . poll ( ) ; System . out . print ( s + \" ▁ \" ) ; for ( int i = 0 ; i < graph . size ( ) ; i ++ ) System . out . print ( visited [ i ] + \" ▁ \" ) ; } } }"],"references":["import java . io . * ; import java . util . * ; class Graph { private int V ; private LinkedList < Integer > adj [ ] ; Graph ( int v ) { V = v ; adj = new LinkedList [ v ] ; for ( int i = 0 ; i < v ; ++ i ) adj [ i ] = new LinkedList ( ) ; } void addEdge ( int v , int w ) { adj [ v ] . add ( w ) ; } void BFS ( int s ) { boolean visited [ ] = new boolean [ V ] ; LinkedList < Integer > queue = new LinkedList < Integer > ( ) ; visited [ s ] = true ; queue . add ( s ) ; while ( queue . size ( ) != 0 ) { s = queue . poll ( ) ; System . out . print ( s + \" ▁ \" ) ; Iterator < Integer > i = adj [ s ] . listIterator ( ) ; while ( i . hasNext ( ) ) { int n = i . next ( ) ; if ( ! visited [ n ] ) { visited [ n ] = true ; queue . add ( n ) ; } } } } public static void main ( String args [ ] ) { Graph g = new Graph ( 4 ) ; g . addEdge ( 0 , 1 ) ; g . addEdge ( 0 , 2 ) ; g . addEdge ( 1 , 2 ) ; g . addEdge ( 2 , 0 ) ; g . addEdge ( 2 , 3 ) ; g . addEdge ( 3 , 3 ) ; System . out . println ( \" Following ▁ is ▁ Breadth ▁ First ▁ Traversal ▁ \" + \" ( starting ▁ from ▁ vertex ▁ 2 ) \" ) ; g . BFS ( 2 ) ; } }"],"bleu":0.2514376229216371,"rouge_l":0.500564904560861}
{"id":739,"predictions":["import java . io . * ; class GFG { static int cal ( int n ) { int res = ( int ) ( Math . ceil ( Math . pow ( 10 , ( n - 1 ) ) , 4 ) ) ; return res ; } public static void main ( String [ ] args ) { int n = 1 ; System . out . println ( cal ( n ) ) ; } }"],"references":["class GFG { static int cal ( int n ) { double res = Math . pow ( Math . ceil ( ( Math . pow ( Math . pow ( 10 , ( n - 1 ) ) , 1 \/ 4 ) ) ) , 4 ) ; return ( int ) res ; } public static void main ( String [ ] args ) { int n = 1 ; System . out . println ( cal ( n ) ) ; } }"],"bleu":0.7379016825279854,"rouge_l":0.8201480904130944}
{"id":740,"predictions":["class GFG { static int bit ( int n ) { int count = 0 ; while ( n > 0 ) { count ++ ; n = n & ( n - 1 ) ; } return count ; } static int maxSumOfBits ( int arr [ ] , int n ) { int i ; for ( i = 0 ; i < n ; i ++ ) arr [ i ] = bit ( arr [ i ] ) ; int incl = arr [ 0 ] ; int excl = 0 ; for ( i = 1 ; i < n ; i ++ ) { if ( inc > excl ) { excl_new_new = i ; } else { excl_new_new_new ; } inccl = excl + arr [ i ] ; excl = exclap ; } if ( inc > excl ) return inc ; else return excl ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 4 , 5 , 6 , 7 , 20 , 25 } ; int n = arr . length ; System . out . print ( maxSumOfBits ( arr , n ) ) ; } }"],"references":["import java . util . * ; import java . lang . * ; import java . io . * ; class GFG { static int bit ( int n ) { int count = 0 ; while ( n > 0 ) { count ++ ; n = n & ( n - 1 ) ; } return count ; } static int maxSumOfBits ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = bit ( arr [ i ] ) ; } int incl = arr [ 0 ] ; int excl = 0 ; int excl_new ; for ( int i = 1 ; i < n ; i ++ ) { excl_new = ( incl > excl ) ? incl : excl ; incl = excl + arr [ i ] ; excl = excl_new ; } return ( ( incl > excl ) ? incl : excl ) ; } public static void main ( String args [ ] ) { int arr [ ] = { 1 , 2 , 4 , 5 , 6 , 7 , 20 , 25 } ; int n = arr . length ; System . out . print ( maxSumOfBits ( arr , n ) ) ; } }"],"bleu":0.7224077050166752,"rouge_l":0.83555523000293}
{"id":741,"predictions":["class GFG { static int subsetXOR ( int arr [ ] , int n , int K ) { int max_ele = Arrays . stream ( arr ) . max ( ) . getAsInt ( ) ; int m = ( 1 << ( max_ele ) + 1 ) ; int [ ] [ ] dp = new int [ n + 1 ] [ m + 1 ] ; for ( int i = 0 ; i < n + 1 ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { for ( int k = 0 ; k <= n ; k ++ ) { for ( int k = 0 ; k <= m ; k ++ ) dp [ i ] [ j ] = 0 ; } } } for ( int i = 0 ; i <= n ; i ++ ) dp [ i ] [ 0 ] = 1 ; for ( int i = 0 ; i < n ; i ++ ) dp [ i ] [ 0 ] = 1 ; for ( int i = 0 ; i < n + 1 ; i ++ ) { for ( int j = 0 ; j <= m ; j ++ ) { for ( int k = 0 ; k <= n ; k ++ ) { dp [ i ] [ j ] = dp [ i - 1 ] [ j ] ; if ( k != 0 ) dp [ i ] [ j ] += k * dp [ i - 1 ] [ j ] ; } } } int ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) ans += dp [ n ] [ K ] ; return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 } ; int k = 1 ; int n = arr . length ; System . out . print ( subsetXOR ( arr , n , k ) ) ; } }"],"references":["import java . util . * ; class GFG { static int subsetXOR ( int arr [ ] , int n , int K ) { int max_ele = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) if ( arr [ i ] > max_ele ) max_ele = arr [ i ] ; int m = ( 1 << ( int ) ( Math . log ( max_ele ) \/ Math . log ( 2 ) + 1 ) ) - 1 ; int [ ] [ ] [ ] dp = new int [ n + 1 ] [ m + 1 ] [ n + 1 ] ; for ( int i = 0 ; i <= n ; i ++ ) for ( int j = 0 ; j <= m ; j ++ ) for ( int k = 0 ; k <= n ; k ++ ) dp [ i ] [ j ] [ k ] = 0 ; for ( int i = 0 ; i <= n ; i ++ ) dp [ i ] [ 0 ] [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 0 ; j <= m ; j ++ ) { for ( int k = 0 ; k <= n ; k ++ ) { dp [ i ] [ j ] [ k ] = dp [ i - 1 ] [ j ] [ k ] ; if ( k != 0 ) { dp [ i ] [ j ] [ k ] += k * dp [ i - 1 ] [ j ^ arr [ i - 1 ] ] [ k - 1 ] ; } } } } int ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { ans += dp [ n ] [ K ] [ i ] ; } return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 } ; int k = 1 ; int n = arr . length ; System . out . println ( subsetXOR ( arr , n , k ) ) ; } }"],"bleu":0.7368738772477718,"rouge_l":0.7952667635457754}
{"id":742,"predictions":["class GFG { static int MaximumHeight ( int a [ ] , int n ) { int result = 1 ; for ( int i = 1 ; i < n ; i ++ ) { int y = ( i * ( i + 1 ) ) \/ 2 ; if ( y < n ) result = i ; else break ; } return result ; } public static void main ( String [ ] args ) { int arr [ ] = { 40 , 100 , 20 , 30 } ; int n = arr . length ; System . out . println ( MaximumHeight ( arr , n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int MaximumHeight ( int [ ] a , int n ) { int result = 1 ; for ( int i = 1 ; i <= n ; ++ i ) { int y = ( i * ( i + 1 ) ) \/ 2 ; if ( y < n ) result = i ; else break ; } return result ; } public static void main ( String [ ] args ) { int [ ] arr = { 40 , 100 , 20 , 30 } ; int n = arr . length ; System . out . println ( MaximumHeight ( arr , n ) ) ; } }"],"bleu":0.8415943624147869,"rouge_l":0.9334228187919463}
{"id":743,"predictions":["class GFG { static String toNegativeBase ( int n , int negBase ) { if ( n == 0 ) { return \"0\" ; } String suffix = \"01\" ; while ( n != 0 ) { int remainder = n % ( negBase ) ; n = n \/ negBase ; if ( remainder < 0 ) { remainder += ( ( - 1 ) * negBase ) ; n ++ ; } dupl = remainder + converted ; } return converted ; } public static void main ( String [ ] args ) { int n = 13 ; int negBase = - 2 ; System . out . println ( toNegativeBase ( n , negBase ) ) ; } }"],"references":["class GFG { static String toNegativeBase ( int n , int negBase ) { if ( n == 0 ) return \"0\" ; String converted = \" \" ; while ( n != 0 ) { int remainder = n % negBase ; n \/= negBase ; if ( remainder < 0 ) { remainder += ( - negBase ) ; n += 1 ; } converted = String . valueOf ( remainder ) + converted ; } return converted ; } public static void main ( String [ ] args ) { int n = 13 ; int negBase = - 2 ; System . out . print ( toNegativeBase ( n , negBase ) ) ; } }"],"bleu":0.7399241657458646,"rouge_l":0.8826233941852603}
{"id":744,"predictions":["class GFG { static int m = 6 ; static int n = 4 ; static int compareRow ( int a [ ] [ ] , int a [ ] [ ] ) { for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] < a [ i ] ) return 1 ; else if ( a [ i ] > a [ i ] ) return - 1 ; } return 0 ; } static int binaryCheck ( int ar [ ] [ ] , int arr [ ] [ ] ) { int l = 0 , r = m - 1 ; while ( l <= r ) { int mid = ( l + r ) \/ 2 ; int temp = compareRow ( ar [ mid ] , arr ) ; if ( temp == 0 ) return mid + 1 ; else if ( temp == 1 ) l = mid + 1 ; else r = mid - 1 ; } return - 1 ; } public static void main ( String [ ] args ) { int mat [ ] [ ] = { { 0 , 0 , 1 , 0 } , { 10 , 9 , 22 , 23 } , { 40 , 44 , 55 , 68 } , { 100 , 73 , 125 , 125 } } ; int row [ ] = { 10 , 9 , 22 , 23 } ; System . out . print ( binaryCheck ( mat , row ) ) ; } }"],"references":["class GFG { static int m = 6 , n = 4 ; static int compareRow ( int a1 [ ] , int a2 [ ] ) { for ( int i = 0 ; i < n ; i ++ ) { if ( a1 [ i ] < a2 [ i ] ) return 1 ; else if ( a1 [ i ] > a2 [ i ] ) return - 1 ; } return 0 ; } static int binaryCheck ( int ar [ ] [ ] , int arr [ ] ) { int l = 0 , r = m - 1 ; while ( l <= r ) { int mid = ( l + r ) \/ 2 ; int temp = compareRow ( ar [ mid ] , arr ) ; if ( temp == 0 ) return mid + 1 ; else if ( temp == 1 ) l = mid + 1 ; else r = mid - 1 ; } return - 1 ; } public static void main ( String [ ] args ) { int mat [ ] [ ] = { { 0 , 0 , 1 , 0 } , { 10 , 9 , 22 , 23 } , { 40 , 40 , 40 , 40 } , { 43 , 44 , 55 , 68 } , { 81 , 73 , 100 , 132 } , { 100 , 75 , 125 , 133 } } ; int row [ ] = { 10 , 9 , 22 , 23 } ; System . out . println ( binaryCheck ( mat , row ) ) ; } }"],"bleu":0.8408165351751131,"rouge_l":0.9110826989016099}
{"id":745,"predictions":["class GFG { static int longestSubArray ( int arr [ ] , int n ) { boolean isZeroPresent = false ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 0 ) { isZero = true ; break ; } } if ( isZero ) return n ; return 0 ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 0 , 1 , 2 , 0 } ; int n = arr . length ; System . out . println ( longestSubArray ( arr , n ) ) ; } }"],"references":["class GFG { static int longestSubArray ( int arr [ ] , int n ) { boolean isZeroPresent = false ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 0 ) { isZeroPresent = true ; break ; } } if ( isZeroPresent ) return n ; return 0 ; } public static void main ( String args [ ] ) { int arr [ ] = { 1 , 2 , 3 , 0 , 1 , 2 , 0 } ; int n = arr . length ; System . out . print ( longestSubArray ( arr , n ) ) ; } }"],"bleu":0.9062534544550106,"rouge_l":0.9666666666666667}
{"id":746,"predictions":["class GFG { static void printMinNumberForPattern ( int arr [ ] ) { int curr_max = 0 , last_entry = 0 , i = 0 ; for ( i = 0 ; i < arr . length ; i ++ ) { noOfNextD = 0 ; if ( arr [ i ] == \" I \" ) { int j = i + 1 ; while ( j < arr [ j ] && arr [ j ] == ' D ' ) noOfNextOfNextD ++ ; j ++ ; } if ( i == 0 ) { curr_max = noOfNextD + 2 ; last_row ++ ; System . out . print ( \" \" + lastOfNext ) ; } else { curr_max += noOfNextD + 1 ; last_flag = curr_max ; } else { curr_max += noOfNextD + 1 ; last_row = curr_max ; System . out . print ( \" \\n \" + lastOfNext ) ; } } else if ( arr [ i ] == \" D \" ) { for ( i = i + 1 ; i < arr . length && arr [ i ] == ' D ' ) { noOfNextD + 1 ; i ++ ; } } else if ( arr [ i ] == \" D \" ) { i ++ ; while ( arr [ i ] == \" D \" ) { noOfNextD ++ ; System . out . print ( arr [ i ] + \" ▁ \" ) ; i ++ ; } } else if ( arr [ i ] == \" D \" ) { int i = i + 1 ; while ( j < arr [ j ] && arr [ j ] == ' D ' ) { noOfNextD + 1 ; j ++ ; } curr_max = noOfNextD + 2 ; System . out . print ( \" ▁ \" + curr + \" ▁ \" ) ; last = curr_max - 1 ; } System . out . println ( \" \" ) ; } public static void main ( String [ ] args ) { String arr = \" arr . printMinNumberForPattern ( arr ) ; } }"],"references":["class GFG { static void PrintMinNumberForPattern ( String arr ) { int curr_max = 0 ; int last_entry = 0 ; int j ; for ( int i = 0 ; i < arr . length ( ) ; i ++ ) { int noOfNextD = 0 ; switch ( arr . charAt ( i ) ) { case ' I ' : j = i + 1 ; while ( j < arr . length ( ) && arr . charAt ( j ) == ' D ' ) { noOfNextD ++ ; j ++ ; } if ( i == 0 ) { curr_max = noOfNextD + 2 ; System . out . print ( \" ▁ \" + ++ last_entry ) ; System . out . print ( \" ▁ \" + curr_max ) ; last_entry = curr_max ; } else { curr_max = curr_max + noOfNextD + 1 ; last_entry = curr_max ; System . out . print ( \" ▁ \" + last_entry ) ; } for ( int k = 0 ; k < noOfNextD ; k ++ ) { System . out . print ( \" ▁ \" + -- last_entry ) ; i ++ ; } break ; case ' D ' : if ( i == 0 ) { j = i + 1 ; while ( j < arr . length ( ) && arr . charAt ( j ) == ' D ' ) { noOfNextD ++ ; j ++ ; } curr_max = noOfNextD + 2 ; System . out . print ( \" ▁ \" + curr_max + \" ▁ \" + ( curr_max - 1 ) ) ; last_entry = curr_max - 1 ; } else { System . out . print ( \" ▁ \" + ( last_entry - 1 ) ) ; last_entry -- ; } break ; } } System . out . println ( ) ; } public static void main ( String [ ] args ) { PrintMinNumberForPattern ( \" IDID \" ) ; PrintMinNumberForPattern ( \" I \" ) ; PrintMinNumberForPattern ( \" DD \" ) ; PrintMinNumberForPattern ( \" II \" ) ; PrintMinNumberForPattern ( \" DIDI \" ) ; PrintMinNumberForPattern ( \" IIDDD \" ) ; PrintMinNumberForPattern ( \" DDIDDIID \" ) ; } }"],"bleu":0.47661116689546706,"rouge_l":0.6058643174849937}
{"id":747,"predictions":["class GFG { static void findNumbers ( int n ) { int i = 1 ; while ( i <= n ) { System . out . print ( ( 3 * i * ( i - 1 ) + 1 ) + \" ▁ \" ) ; i ++ ; } } public static void main ( String args [ ] ) { int n = 4 ; findNumbers ( n ) ; } }"],"references":["class GFG { static void findNumbers ( int n ) { int i = 1 ; while ( i <= n ) { System . out . print ( ( 3 * i * ( i - 1 ) + 1 ) + \" ▁ \" ) ; i ++ ; } } public static void main ( String [ ] args ) { int n = 4 ; findNumbers ( n ) ; } }"],"bleu":0.952699219363813,"rouge_l":0.9868421052631579}
{"id":748,"predictions":["class GFG { static int MOD = 1000000007 ; static int number_of_ways ( int arr [ ] , int n , int k ) { if ( k == 1 ) return 1 ; int [ ] dp = new int [ k + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) dp [ arr [ i ] = 0 ; dp [ 0 ] = 1 ; dp [ 0 ] = ( dp [ 1 ] == - 1 ) ? 1 : dp [ 1 ] ; for ( int i = 2 ; i < k ; i ++ ) { if ( dp [ i ] == 0 ) continue ; dp [ i ] = dp [ i - 1 ] + dp [ i - 2 ] ; dp [ i ] %= MOD ; } return dp [ k ] ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 } ; int n = arr . length ; int k = 6 ; System . out . println ( number_of_ways ( arr , n , k ) ) ; } }"],"references":["class GFG { static final int MOD = 1000000007 ; static int number_of_ways ( int arr [ ] , int n , int k ) { if ( k == 1 ) return 1 ; int dp [ ] = new int [ k + 1 ] ; int i ; for ( i = 0 ; i < k + 1 ; i ++ ) dp [ i ] = - 1 ; for ( i = 0 ; i < n ; i ++ ) dp [ arr [ i ] ] = 0 ; dp [ 0 ] = 1 ; dp [ 1 ] = ( dp [ 1 ] == - 1 ) ? 1 : dp [ 1 ] ; for ( i = 2 ; i <= k ; ++ i ) { if ( dp [ i ] == 0 ) continue ; dp [ i ] = dp [ i - 1 ] + dp [ i - 2 ] ; dp [ i ] %= MOD ; } return dp [ k ] ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 } ; int n = arr . length ; int k = 6 ; System . out . println ( number_of_ways ( arr , n , k ) ) ; } }"],"bleu":0.8178995500999362,"rouge_l":0.9048593350383634}
{"id":749,"predictions":["class GFG { static int maxProfit ( int price [ ] [ ] , int n , int k ) { int [ ] [ ] profit = new int [ k + 1 ] [ n + 1 ] ; for ( int i = 1 ; i <= k ; i ++ ) profit [ i ] [ 0 ] = 0 ; for ( int i = 1 ; i <= k ; i ++ ) { int prevDiff = Integer . MAX_VALUE ; for ( int j = 1 ; j < n ; j ++ ) { prevDiff = Math . max ( prevDiff , profit [ i - 1 ] [ j - 1 ] - price [ j - 1 ] ) ; profit [ i ] [ j ] = Math . max ( profit [ i ] [ j - 1 ] , price [ j ] + prevDiff ) ; } } return profit [ k ] [ n - 1 ] ; } public static void main ( String [ ] args ) { int k = 3 ; int price [ ] = { 12 , 14 , 17 , 10 , 14 , 12 , 15 } ; int n = price . length ; System . out . println ( \" Maximum ▁ profit ▁ is : ▁ \" + maxProfit ( price , n , k ) ) ; } }"],"references":["import java . io . * ; class GFG { static int maxProfit ( int price [ ] , int n , int k ) { int profit [ ] [ ] = new int [ k + 1 ] [ n + 1 ] ; for ( int i = 0 ; i <= k ; i ++ ) profit [ i ] [ 0 ] = 0 ; for ( int j = 0 ; j <= n ; j ++ ) profit [ 0 ] [ j ] = 0 ; for ( int i = 1 ; i <= k ; i ++ ) { int prevDiff = Integer . MIN_VALUE ; for ( int j = 1 ; j < n ; j ++ ) { prevDiff = Math . max ( prevDiff , profit [ i - 1 ] [ j - 1 ] - price [ j - 1 ] ) ; profit [ i ] [ j ] = Math . max ( profit [ i ] [ j - 1 ] , price [ j ] + prevDiff ) ; } } return profit [ k ] [ n - 1 ] ; } public static void main ( String [ ] args ) { int k = 3 ; int price [ ] = { 12 , 14 , 17 , 10 , 14 , 13 , 12 , 15 } ; int n = price . length ; System . out . println ( \" Maximum ▁ profit ▁ is : ▁ \" + maxProfit ( price , n , k ) ) ; } }"],"bleu":0.8416385136626447,"rouge_l":0.911859570772857}
{"id":750,"predictions":["class GFG { static void originalArray ( int arr [ ] , int n ) { Vector < Integer > temp = new Vector < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) temp . add ( i ) ; for ( int i = 0 ; i < n ; i ++ ) { int k = n - greater [ i ] - i ; arr [ i ] = temp . remove ( k ) ; } for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + \" ▁ \" ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 6 , 3 , 2 , 1 , 0 , 1 } ; int n = arr . length ; originalArray ( arr , n ) ; } }"],"references":["import java . util . Vector ; class GFG { static void originalArray ( int greater [ ] , int n ) { Vector < Integer > temp = new Vector < Integer > ( ) ; for ( int i = 0 ; i <= n ; i ++ ) temp . add ( i ) ; int arr [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { int k = n - greater [ i ] - i ; arr [ i ] = temp . get ( k ) ; temp . remove ( k ) ; } for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + \" ▁ \" ) ; } public static void main ( String [ ] args ) { int Arr [ ] = { 6 , 3 , 2 , 1 , 0 , 1 , 0 } ; int n = Arr . length ; originalArray ( Arr , n ) ; } }"],"bleu":0.76913183583415,"rouge_l":0.8827154979901742}
{"id":751,"predictions":["class fib ( int n ) { int max = 1000 ; if ( n == 0 ) return 0 ; if ( n == 1 || n == 2 ) return ( f [ n ] = 1 ) ; if ( ( n & 1 ) != 0 ) k = ( n + 1 ) \/ 2 ; else k = n \/ 2 ; if ( ( n & 1 ) != 0 ) f [ n ] = ( fib ( k ) * fib ( k ) + fib ( k - 1 ) * fib ( k - 1 ) ) ; else f [ n ] = ( 2 * fib ( k - 1 ) + fib ( k ) * fib ( k ) ; return f [ n ] ; } public static void main ( String [ ] args ) { int n = 9 ; System . out . println ( fib ( n ) ) ; } }"],"references":["import java . util . * ; class GFG { static int MAX = 1000 ; static int f [ ] ; public static int fib ( int n ) { if ( n == 0 ) return 0 ; if ( n == 1 || n == 2 ) return ( f [ n ] = 1 ) ; if ( f [ n ] != 0 ) return f [ n ] ; int k = ( n & 1 ) == 1 ? ( n + 1 ) \/ 2 : n \/ 2 ; f [ n ] = ( n & 1 ) == 1 ? ( fib ( k ) * fib ( k ) + fib ( k - 1 ) * fib ( k - 1 ) ) : ( 2 * fib ( k - 1 ) + fib ( k ) ) * fib ( k ) ; return f [ n ] ; } public static void main ( String [ ] args ) { int n = 9 ; f = new int [ MAX ] ; System . out . println ( fib ( n ) ) ; } }"],"bleu":0.679117320210969,"rouge_l":0.7462095106822881}
{"id":752,"predictions":["class GfG { static int getCount ( int l , int r , int p ) { int cnt = 0 ; int val = p ; while ( true ) { int a = r \/ val ; int b = ( l - 1 ) \/ val ; val *= p ; if ( a - b ) == cnt += ( a - b ) ; else break ; } return cnt ; } public static void main ( String [ ] args ) { int l = 2 , r = 8 , p = 2 ; System . out . println ( getCount ( l , r , p ) ) ; } }"],"references":["import java . util . * ; class GFG { static int getCount ( int l , int r , int p ) { int cnt = 0 ; int val = p ; while ( true ) { int a = r \/ val ; int b = ( l - 1 ) \/ val ; val *= p ; if ( ( a - b ) > 0 ) { cnt += ( a - b ) ; } else break ; } return cnt ; } public static void main ( String [ ] args ) { int l = 2 , r = 8 , p = 2 ; System . out . println ( getCount ( l , r , p ) ) ; } }"],"bleu":0.8538428216417975,"rouge_l":0.9279677545182682}
{"id":753,"predictions":["import java . util . * ; class GFG { static String findMaxLen ( String str ) { int n = str . length ( ) ; Stack < Character > stk = new Stack < > ( ) ; stk . push ( - 1 ) ; int result = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( str . charAt ( i ) == ' ( ' ) stk . push ( i ) ; else stk . pop ( ) ; if ( stk . empty ( ) != 0 ) result = Math . max ( result , i - stk . peek ( ) ) ; else stk . pop ( ) ; } return result ; } public static void main ( String [ ] args ) { String str = \" ( ) ( ) \" ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) System . out . println ( findMaxLen ( str ) ) ; str = \" ( ( ) ) ; System . out . println ( findMaxLen ( str ) ) ; } }"],"references":["import java . util . Stack ; class Test { static int findMaxLen ( String str ) { int n = str . length ( ) ; Stack < Integer > stk = new Stack < > ( ) ; stk . push ( - 1 ) ; int result = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( str . charAt ( i ) == ' ( ' ) stk . push ( i ) ; else { stk . pop ( ) ; if ( ! stk . empty ( ) ) result = Math . max ( result , i - stk . peek ( ) ) ; else stk . push ( i ) ; } } return result ; } public static void main ( String [ ] args ) { String str = \" ( ( ( ) ( ) \" ; System . out . println ( findMaxLen ( str ) ) ; str = \" ( ) ( ( ) ) ) ) ) \" ; System . out . println ( findMaxLen ( str ) ) ; } }"],"bleu":0.8053758120310461,"rouge_l":0.8997487640813678}
{"id":754,"predictions":["class GFG { static void print binomial ( int max ) { for ( int m = 0 ; m <= max ; m ++ ) { System . out . print ( m + \" % d ▁ \" ) ; } int binom = 1 ; for ( int x = 0 ; x <= m ; x ++ ) { if ( m != 0 && x != 0 ) binom = binom * ( m - x + 1 ) \/ x ; System . out . print ( \" % ▁ 4d ▁ \" ) ; } System . out . println ( ) ; } public static void main ( String [ ] args ) { int max = 10 ; print binomial ( max ) ; } }"],"references":["import java . io . * ; class GFG { static void printbinomial ( int max ) { for ( int m = 0 ; m <= max ; m ++ ) { System . out . print ( m + \" ▁ \" ) ; int binom = 1 ; for ( int x = 0 ; x <= m ; x ++ ) { if ( m != 0 && x != 0 ) binom = binom * ( m - x + 1 ) \/ x ; System . out . print ( binom + \" ▁ \" ) ; } System . out . println ( ) ; } } public static void main ( String [ ] args ) { int max = 10 ; printbinomial ( max ) ; } }"],"bleu":0.8458594967622215,"rouge_l":0.9179005657878898}
{"id":755,"predictions":["import java . util . * ; class GFG { static void getmax ( int arr [ ] , int n , int x ) { int s = 0 ; for ( int i = 0 ; i < n ; i ++ ) { s += arr [ i ] ; } System . out . println ( Math . min ( s , x ) ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 4 } ; int x = 5 ; int arr_size = arr . length ; getmax ( arr , arr_size , x ) ; } }"],"references":["import java . util . * ; class GFG { static void getmax ( int arr [ ] , int n , int x ) { int s = 0 ; for ( int i = 0 ; i < n ; i ++ ) { s = s + arr [ i ] ; } System . out . print ( Math . min ( s , x ) ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 4 } ; int x = 5 ; int arr_size = arr . length ; getmax ( arr , arr_size , x ) ; } }"],"bleu":0.9419587445352203,"rouge_l":0.9737554112554112}
{"id":756,"predictions":["class sol { static boolean isPossible ( int w , int h , int x , int y ) { if ( x * 2 == w && y * 2 == h ) return true ; return false ; } public static void main ( String [ ] args ) { int w = 1 , h = 2 ; int x = 1 , y = 2 ; if ( isPossible ( w , h , x , y ) ) System . out . print ( \" Yes \" ) ; else System . out . print ( \" No \" ) ; } }"],"references":["class GFG { static boolean isPossible ( int w , int h , int x , int y ) { if ( x * 2 == w && y * 2 == h ) return true ; return false ; } public static void main ( String [ ] args ) { int w = 1 , h = 2 , x = 1 , y = 2 ; if ( isPossible ( w , h , x , y ) ) System . out . print ( \" Yes \" ) ; else System . out . print ( \" No \" ) ; } }"],"bleu":0.9509111515400221,"rouge_l":0.9775641025641024}
{"id":757,"predictions":["class GFG { static double ddx ( double x , double y ) { return ( x + y - 2 ) ; } static double __gcd ( double x0 , double y0 , double x , double h ) { double n = ( double ) ( x0 + y ) \/ h ; double y2 = y0 ; for ( int i = 1 ; i <= n ; i ++ ) { double k1 = h * dvy ( x0 + 0.5 * h , y + 0.5 * k1 ) ; double k = y + ( 1.0 \/ 6.0 ) * ( k1 + 2 * k2 ) ; x0 = x0 + h ; } return y ; } public static void main ( String [ ] args ) { double x0 = 0 , y = 1 ; double l = 2 , h = 0.2 ; System . out . printf ( \" y ( x0 , y , x , h ) ) ; } }"],"references":["class GFG { static double dydx ( double x , double y ) { return ( x + y - 2 ) ; } static double rungeKutta ( double x0 , double y0 , double x , double h ) { int n = ( int ) ( ( x - x0 ) \/ h ) ; double k1 , k2 ; double y = y0 ; for ( int i = 1 ; i <= n ; i ++ ) { k1 = h * dydx ( x0 , y ) ; k2 = h * dydx ( x0 + 0.5 * h , y + 0.5 * k1 ) ; y = y + ( 1.0 \/ 6.0 ) * ( k1 + 2 * k2 ) ; x0 = x0 + h ; } return y ; } public static void main ( String [ ] args ) { double x0 = 0 , y = 1 , x = 2 , h = 0.2 ; System . out . println ( rungeKutta ( x0 , y , x , h ) ) ; } }"],"bleu":0.73964112200491,"rouge_l":0.862152249754003}
{"id":758,"predictions":["class GFG { static final int MAX_CHAR = 26 ; static int countPalindrome ( String str ) { int n = str . length ( ) ; int sum = 0 ; int hashTable [ ] = new int [ MAX_CHAR ] ; for ( int i = 0 ; i < n ; i ++ ) hashTable [ str . charAt ( i ) - ' a ' ] ++ ; for ( int i = 0 ; i < 26 ; i ++ ) { if ( hashTable [ i ] != 0 ) sum += ( hashTable [ i ] * ( hashTable [ i ] + 1 ) \/ 2 ) ; } return sum ; } public static void main ( String [ ] args ) { String str = \" anomanddand \" ; System . out . println ( countPalindrome ( str ) ) ; } }"],"references":["class GFG { final static int MAX_CHAR = 26 ; static int countPalindrome ( String str ) { int n = str . length ( ) ; int sum = 0 ; int hashTable [ ] = new int [ MAX_CHAR ] ; for ( int i = 0 ; i < n ; i ++ ) { hashTable [ str . charAt ( i ) - ' a ' ] ++ ; } for ( int i = 0 ; i < 26 ; i ++ ) { if ( hashTable [ i ] != 0 ) { sum += ( hashTable [ i ] * ( hashTable [ i ] + 1 ) \/ 2 ) ; } } return sum ; } public static void main ( String [ ] args ) { String str = \" ananananddd \" ; System . out . println ( countPalindrome ( str ) ) ; } }"],"bleu":0.9040452693097769,"rouge_l":0.9719320460061202}
{"id":759,"predictions":["class GFG { static int __gcd ( int a , int b ) { if ( a == 0 || b == 0 ) return 0 ; if ( a == b ) return a ; if ( a > b ) return __gcd ( a - b , b ) ; return __gcd ( a , b - a ) ; } static int NumberOfSquares ( int x , int y ) { int s = __gcd ( x , y ) ; int ans = ( x * y ) \/ ( s * s ) ; return ans ; } public static void main ( String [ ] args ) { int m = 350 , n = 60 ; System . out . println ( NumberOfSquares ( m , n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int __gcd ( int a , int b ) { if ( a == 0 || b == 0 ) return 0 ; if ( a == b ) return a ; if ( a > b ) return __gcd ( a - b , b ) ; return __gcd ( a , b - a ) ; } static int NumberOfSquares ( int x , int y ) { int s = __gcd ( x , y ) ; int ans = ( x * y ) \/ ( s * s ) ; return ans ; } public static void main ( String [ ] args ) { int m = 385 , n = 60 ; System . out . println ( NumberOfSquares ( m , n ) ) ; } }"],"bleu":0.9336274813900571,"rouge_l":0.9641507272935517}
{"id":760,"predictions":["import java . util . * ; class GFG { static void divisibilityCheck ( int arr [ ] , int n ) { HashSet < Integer > s = new HashSet < Integer > ( ) ; int max_ele = Integer . MIN_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { s . add ( arr [ i ] ) ; max_ele = Math . max ( max_ele , arr [ i ] ) ; } HashSet < Integer > res = new HashSet < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] != 0 ) { for ( int j = arr [ i ] * 2 ; j <= max_ele ; j += arr [ i ] ) { if ( s . containsKey ( j ) ) { res . add ( j ) ; } } } } for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + \" ▁ \" ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 3 , 8 , 6 , 9 , 10 } ; int n = arr . length ; divisibilityCheck ( arr , n ) ; } }"],"references":["import java . io . * ; import java . util . * ; class GFG { static void divisibilityCheck ( List < Integer > arr , int n ) { List < Integer > s = new ArrayList < Integer > ( ) ; int max_ele = Integer . MIN_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { s . add ( arr . get ( i ) ) ; max_ele = Math . max ( max_ele , arr . get ( i ) ) ; } LinkedHashSet < Integer > res = new LinkedHashSet < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr . get ( i ) != 0 ) for ( int j = arr . get ( i ) * 2 ; j <= max_ele ; j += arr . get ( i ) ) { if ( s . contains ( j ) ) res . add ( j ) ; } } List < Integer > list = new ArrayList < Integer > ( res ) ; Collections . reverse ( list ) ; for ( Integer temp : list ) System . out . print ( temp + \" ▁ \" ) ; } public static void main ( String args [ ] ) { List < Integer > arr = Arrays . asList ( 2 , 3 , 8 , 6 , 9 , 10 ) ; int n = arr . size ( ) ; divisibilityCheck ( arr , n ) ; } }"],"bleu":0.5865220353160463,"rouge_l":0.7654842517239238}
{"id":761,"predictions":["class GFG { static void leftRotate ( int arr [ ] , int d , int n ) { int d = d % n ; int gcd = gcd ( d , n ) ; for ( int i = 0 ; i < g ; i ++ ) { int temp = arr [ i ] ; int j = i ; while ( true ) { k = j + d ; if ( k >= n ) break ; arr [ j ] = k ; } arr [ j ] = temp ; } } static void printArray ( int arr [ ] , int size ) { for ( int i = 0 ; i < size ; i ++ ) System . out . print ( arr [ i ] + \" ▁ \" ) ; } static int gcd ( int arr [ ] , int size ) { for ( int i = 0 ; i < size ; i ++ ) System . out . print ( arr [ i ] + \" ▁ \" ) ; } static int gcd ( int a , int b ) { if ( b == 0 ) return a ; else return gcd ( b , a % b ) ; } static int gcd ( int a , int b ) { if ( b == 0 ) return a ; else return gcd ( b , a % b ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 } ; int n = arr . length ; int d = 2 ; leftRotate ( arr , n ) ; printArray ( arr , n ) ; } }"],"references":["class RotateArray { void leftRotate ( int arr [ ] , int d , int n ) { d = d % n ; int i , j , k , temp ; int g_c_d = gcd ( d , n ) ; for ( i = 0 ; i < g_c_d ; i ++ ) { temp = arr [ i ] ; j = i ; while ( true ) { k = j + d ; if ( k >= n ) k = k - n ; if ( k == i ) break ; arr [ j ] = arr [ k ] ; j = k ; } arr [ j ] = temp ; } } void printArray ( int arr [ ] , int size ) { int i ; for ( i = 0 ; i < size ; i ++ ) System . out . print ( arr [ i ] + \" ▁ \" ) ; } int gcd ( int a , int b ) { if ( b == 0 ) return a ; else return gcd ( b , a % b ) ; } public static void main ( String [ ] args ) { RotateArray rotate = new RotateArray ( ) ; int arr [ ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 } ; rotate . leftRotate ( arr , 2 , 7 ) ; rotate . printArray ( arr , 7 ) ; } }"],"bleu":0.6193645276841994,"rouge_l":0.7626773668294953}
{"id":762,"predictions":["class GFG { static boolean isCorrectOrder ( int n ) { boolean flag = true ; int prev = - 1 ; int type = - 1 ; while ( n != 0 ) { if ( type == - 1 ) { if ( prev == - 1 ) { int prev = n % 10 ; n = n \/ 10 ; continue ; } if ( prev == n % 10 ) { flag = false ; break ; } if ( prev > n % 10 ) { flag = 1 ; prev = n % 10 ; n \/= 10 ; continue ; } prev = n % 10 ; n \/= 10 ; } else { if ( prev == n % 10 ) { flag = false ; break ; } prev = n % 10 ; n = n \/ 10 ; } } return flag ; } public static void main ( String [ ] args ) { int n = 1234521 ; if ( isCorrectOrder ( n ) ) { System . out . println ( \" YES \" ) ; } else { System . out . println ( \" NO \" ) ; } } }"],"references":["import java . io . * ; class GFG { static boolean isCorrectOrder ( int n ) { boolean flag = true ; int prev = - 1 ; int type = - 1 ; while ( n != 0 ) { if ( type == - 1 ) { if ( prev == - 1 ) { prev = n % 10 ; n = n \/ 10 ; continue ; } if ( prev == n % 10 ) { flag = false ; break ; } if ( prev > n % 10 ) { type = 1 ; prev = n % 10 ; n = n \/ 10 ; continue ; } prev = n % 10 ; n = n \/ 10 ; } else { if ( prev == n % 10 ) { flag = false ; break ; } if ( prev < n % 10 ) { flag = false ; break ; } prev = n % 10 ; n = n \/ 10 ; } } return flag ; } public static void main ( String [ ] args ) { int n = 123454321 ; if ( isCorrectOrder ( n ) ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ; } }"],"bleu":0.8226632955829228,"rouge_l":0.9005192878338278}
{"id":763,"predictions":["import java . util . * ; class GFG { static void K_multiple ( int a [ ] , int n , int k ) { Arrays . sort ( a ) ; HashSet < Integer > s = new HashSet < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( ( a [ i ] % k == 0 && s . contains ( a [ i ] \/ k ) || s . contains ( a [ i ] ) ) { s . add ( a [ i ] ) ; } } for ( Integer i : s ) System . out . print ( i + \" ▁ \" ) ; } public static void main ( String [ ] args ) { int a [ ] = { 2 , 3 , 4 , 5 , 6 , 10 } ; int k = 2 ; int n = a . length ; K_multiple ( a , n , k ) ; } }"],"references":["import java . util . * ; class GFG { static void K_multiple ( int a [ ] , int n , int k ) { Arrays . sort ( a ) ; HashSet < Integer > s = new HashSet < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( ( a [ i ] % k == 0 && ! s . contains ( a [ i ] \/ k ) ) || a [ i ] % k != 0 ) s . add ( a [ i ] ) ; } for ( Integer i : s ) System . out . print ( i + \" ▁ \" ) ; } public static void main ( String args [ ] ) { int a [ ] = { 2 , 3 , 4 , 5 , 6 , 10 } ; int k = 2 ; int n = a . length ; K_multiple ( a , n , k ) ; } }"],"bleu":0.8956096872148377,"rouge_l":0.9569921558020014}
{"id":764,"predictions":["import java . util . * ; class GFG { static int maxN = 20 ; static int maxM = 10 ; static int dp [ ] [ ] = new int [ maxM ] [ maxN ] ; static boolean v [ ] [ ] = new boolean [ maxM ] [ maxN ] ; static int findCnt ( int arr [ ] , int i , int curr , int n , int m ) { if ( i == n ) { if ( curr == 0 ) return 1 ; else return 0 ; } if ( v [ i ] [ curr ] ) return dp [ i ] [ curr ] ; v [ i ] [ curr ] = true ; dp [ i ] [ curr ] = findCnt ( arr , i + 1 , curr , n , m ) + findCnt ( arr , i + 1 , ( curr + arr [ i ] ) % m , n , m ) ; return dp [ i ] [ curr ] ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 3 , 3 , 3 } ; int n = arr . length ; int m = 6 ; System . out . println ( findCnt ( arr , 0 , n , m ) - 1 ) ; } }"],"references":["class GFG { static int maxN = 20 ; static int maxM = 10 ; static int [ ] [ ] dp = new int [ maxN ] [ maxM ] ; static boolean [ ] [ ] v = new boolean [ maxN ] [ maxM ] ; static int findCnt ( int [ ] arr , int i , int curr , int n , int m ) { if ( i == n ) { if ( curr == 0 ) return 1 ; else return 0 ; } if ( v [ i ] [ curr ] ) return dp [ i ] [ curr ] ; v [ i ] [ curr ] = true ; return dp [ i ] [ curr ] = findCnt ( arr , i + 1 , curr , n , m ) + findCnt ( arr , i + 1 , ( curr + arr [ i ] ) % m , n , m ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 3 , 3 , 3 } ; int n = arr . length ; int m = 6 ; System . out . println ( findCnt ( arr , 0 , 0 , n , m ) - 1 ) ; } }"],"bleu":0.8626262756289889,"rouge_l":0.9354147958831251}
{"id":765,"predictions":["class GfG { static int minSteps ( String str ) { int count = 0 ; for ( int i = 0 ; i < str . length ( ) - 2 ; i ++ ) { if ( str . charAt ( i ) == '0' ) { if ( str . charAt ( i + 1 ) == '1' ) { if ( str . charAt ( i + 2 ) == '0' ) { count ++ ; i = i + 2 ; } } } } return count ; } public static void main ( String [ ] args ) { String str = \"0101010\" ; System . out . println ( minSteps ( str ) ) ; } }"],"references":["import java . util . * ; class GFG { static int minSteps ( String str ) { int count = 0 ; for ( int i = 0 ; i < str . length ( ) - 2 ; i ++ ) { if ( ( ( int ) str . charAt ( i ) ) == '0' ) { if ( str . charAt ( i + 1 ) == '1' ) { if ( str . charAt ( i + 2 ) == '0' ) { count ++ ; i += 2 ; } } } } return count ; } public static void main ( String args [ ] ) { String str = \"0101010\" ; System . out . println ( minSteps ( str ) ) ; } }"],"bleu":0.831409326245474,"rouge_l":0.9160777385159012}
{"id":766,"predictions":["class GFG { static boolean checkSemiprime ( int num ) { int cnt = 0 ; for ( int i = 2 ; i < 2 ; i ++ ) { while ( num % i == 0 ) { num \/= i ; cnt ++ ; } if ( cnt >= 2 ) break ; } if ( num > 1 ) ++ cnt ; return cnt == 2 ; } static boolean semiprime ( int n ) { return true ; } public static void main ( String [ ] args ) { int n = 6 ; semiprime ( n ) ; n = 8 ; semiprime ( n ) ; } }"],"references":["class GFG { static int checkSemiprime ( int num ) { int cnt = 0 ; for ( int i = 2 ; cnt < 2 && i * i <= num ; ++ i ) while ( num % i == 0 ) { num \/= i ; ++ cnt ; } if ( num > 1 ) ++ cnt ; return cnt == 2 ? 1 : 0 ; } static void semiprime ( int n ) { if ( checkSemiprime ( n ) != 0 ) System . out . printf ( \" True \\n \" ) ; else System . out . printf ( \" False \\n \" ) ; } public static void main ( String [ ] args ) { int n = 6 ; semiprime ( n ) ; n = 8 ; semiprime ( n ) ; } }"],"bleu":0.5753030625925425,"rouge_l":0.7446289062500001}
{"id":767,"predictions":["class GFG { static int [ ] XandYandZintercept ( int [ ] A , int B , int C , int D , int D ) { double x1 = 0.0 \/ A ; double y1 = p [ 0 ] ; double x2 = p [ 1 ] ; double y = q [ 0 ] ; int z2 = q [ 1 ] ; int z2 = q [ 2 ] ; int x3 = q [ 2 ] ; int y3 = r [ 2 ] ; int x3 = r [ 2 ] ; int x3 = r [ 2 ] ; int y3 = r [ 2 ] ; int c1 = r [ 2 ] ; int c3 = r [ 2 ] ; int a1 = x2 - x1 ; int b2 = y3 - y1 ; int c2 = z3 - z1 ; int a2 = x3 - x1 ; int b2 = y3 - y1 ; int c2 = z3 - z1 ; int A2 = b1 * c2 - x1 ; int B2 = x3 - y1 * c2 ; int C = a1 * c1 - b2 * c2 ; int D = a1 * c2 - b1 * c2 ; D = a1 * b2 - B1 * c2 ; System . out . println ( XandY ( A , B , C , D ) ; } public static void main ( String [ ] args ) { int x1 = - 1 , y1 = 2 ; int z1 = 0 ; int x2 = 1 ; int y2 = - 3 ; int z2 = 1 ; int x3 = - 4 ; int y3 = - 4 ; int C = 1 ; System . out . println ( XandYandZintercept ( x1 , y1 , z1 ) ) ; } }"],"references":["import java . util . * ; class solution { static double [ ] XandYandZintercept ( double A , double B , double C , double D ) { double [ ] rslt = new double [ 3 ] ; double x = - D \/ A ; double y = - D \/ B ; double z = - D \/ C ; rslt [ 0 ] = x ; rslt [ 1 ] = y ; rslt [ 2 ] = z ; return rslt ; } static void equation_plane ( int [ ] p , int [ ] q , int [ ] r ) { int x1 = p [ 0 ] ; int y1 = p [ 1 ] ; int z1 = p [ 2 ] ; int x2 = q [ 0 ] ; int y2 = q [ 1 ] ; int z2 = q [ 2 ] ; int x3 = r [ 0 ] ; int y3 = r [ 1 ] ; int z3 = r [ 2 ] ; int a1 = x2 - x1 ; int b1 = y2 - y1 ; int c1 = z2 - z1 ; int a2 = x3 - x1 ; int b2 = y3 - y1 ; int c2 = z3 - z1 ; int A = b1 * c2 - b2 * c1 ; int B = a2 * c1 - a1 * c2 ; int C = a1 * b2 - b1 * a2 ; int D = ( - A * x1 - B * y1 - C * z1 ) ; double [ ] rslt = XandYandZintercept ( A , B , C , D ) ; for ( int i = 0 ; i < 3 ; i ++ ) { System . out . printf ( rslt [ i ] + \" ▁ \" ) ; } } public static void main ( String args [ ] ) { int x1 = - 1 ; int y1 = 2 ; int z1 = 1 ; int x2 = 0 ; int y2 = - 3 ; int z2 = 2 ; int x3 = 1 ; int y3 = 1 ; int z3 = - 4 ; int [ ] p = { x1 , y1 , z1 } ; int [ ] q = { x2 , y2 , z2 } ; int [ ] r = { x3 , y3 , z3 } ; equation_plane ( p , q , r ) ; } }"],"bleu":0.41752018219822223,"rouge_l":0.5820164416237168}
{"id":768,"predictions":["class GFG { static double mulmod ( long a , long b , long mod ) { long res = 0 ; a = a % mod ; while ( b > 0 ) { if ( b % 2 == 1 ) { res = ( res + a ) % mod ; } a = ( a * 2 ) % mod ; b \/= 2 ; } return res % mod ; } % mod ; } public static void main ( String [ ] args ) { long a = 92233756575797975477 ; long b = 92233D ; System . out . println ( mulmod ( a , b , 100000000000 ) ) ; } }"],"references":["class GFG { static long mulmod ( long a , long b , long mod ) { long res = 0 ; a = a % mod ; while ( b > 0 ) { if ( b % 2 == 1 ) { res = ( res + a ) % mod ; } a = ( a * 2 ) % mod ; b \/= 2 ; } return res % mod ; } public static void main ( String [ ] args ) { long a = 9223372036854775807L , b = 9223372036854775807L ; System . out . println ( mulmod ( a , b , 100000000000L ) ) ; } }"],"bleu":0.8679542990622771,"rouge_l":0.9392569571973441}
{"id":769,"predictions":["class GFG { static int MAX_CHAR = 26 ; static void sortString ( String str ) { int charCount [ ] = new int [ MAX_CHAR ] ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { charCount [ str . charAt ( i ) - ' a ' ] ++ ; } for ( int i = 0 ; i < MAX_CHAR ; i ++ ) { for ( int j = 0 ; j < charCount [ i ] ; j ++ ) System . out . print ( ( ( char ) ( ' a ' + i ) ) ; } } public static void main ( String [ ] args ) { String s = \" geeksforgeeks \" ; sortString ( s ) ; } }"],"references":["public class SortString { static final int MAX_CHAR = 26 ; static void sortString ( String str ) { int letters [ ] = new int [ MAX_CHAR ] ; for ( char x : str . toCharArray ( ) ) { letters [ x - ' a ' ] ++ ; } for ( int i = 0 ; i < MAX_CHAR ; i ++ ) { for ( int j = 0 ; j < letters [ i ] ; j ++ ) { System . out . print ( ( char ) ( i + ' a ' ) ) ; } } } public static void main ( String [ ] args ) { sortString ( \" geeksforgeeks \" ) ; } }"],"bleu":0.6467275343708995,"rouge_l":0.828701988390762}
{"id":770,"predictions":["class GFG { static int pentagon_pyramidal ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { int p = ( 3 * i * i - i ) \/ 2 ; sum += p ; } return sum ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . print ( pentagon_pyramidal ( n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int pentagon_pyramidal ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { int p = ( 3 * i * i - i ) \/ 2 ; sum = sum + p ; } return sum ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( pentagon_pyramidal ( n ) ) ; } }"],"bleu":0.8456238674597519,"rouge_l":0.919041568342712}
{"id":771,"predictions":["import java . io . * ; class GFG { static int count ( int n ) { int [ ] table = new int [ n + 1 ] ; table [ 0 ] = 1 ; for ( int i = 3 ; i <= n ; i ++ ) table [ i ] += table [ i - 3 ] ; for ( int i = 5 ; i <= n ; i ++ ) table [ i ] += table [ i - 5 ] ; return table [ n ] ; } public static void main ( String [ ] args ) { int n = 20 ; System . out . println ( \" Count ▁ for ▁ \" + n + \" ▁ is ▁ \" + count ( n ) ) ; n = 13 ; System . out . println ( \" Count ▁ for ▁ \" + n + \" ▁ is ▁ \" + count ( n ) ) ; } }"],"references":["import java . util . Arrays ; class GFG { static int count ( int n ) { int table [ ] = new int [ n + 1 ] , i ; Arrays . fill ( table , 0 ) ; table [ 0 ] = 1 ; for ( i = 3 ; i <= n ; i ++ ) table [ i ] += table [ i - 3 ] ; for ( i = 5 ; i <= n ; i ++ ) table [ i ] += table [ i - 5 ] ; for ( i = 10 ; i <= n ; i ++ ) table [ i ] += table [ i - 10 ] ; return table [ n ] ; } public static void main ( String [ ] args ) { int n = 20 ; System . out . println ( \" Count ▁ for ▁ \" + n + \" ▁ is ▁ \" + count ( n ) ) ; n = 13 ; System . out . println ( \" Count ▁ for ▁ \" + n + \" ▁ is ▁ \" + count ( n ) ) ; } }"],"bleu":0.7526062974271169,"rouge_l":0.8701706716481276}
{"id":772,"predictions":["class GFG { static int MAX = 26 ; static int minimumAddition ( String str , int len ) { int freq [ ] = new int [ MAX ] ; for ( int i = 0 ; i < len ; i ++ ) { freq [ str . charAt ( i ) - ' a ' ] ++ ; } int maxFreq = Collections . max ( freq ) ; int minAbsition = 0 ; for ( int i = 0 ; i < MAX ; ++ i ) { if ( freq [ i ] > 0 ) minAddition += Math . abs ( maxFreq - freq [ i ] ) ; } return minAddition ; } public static void main ( String [ ] args ) { String str = \" geeksforgeeks \" ; int len = str . length ( ) ; System . out . println ( minimumAddition ( str , len ) ) ; } }"],"references":["class GFG { final static int MAX = 26 ; static int max_element ( int freq [ ] ) { int max_ele = freq [ 0 ] ; for ( int i = 0 ; i < MAX ; i ++ ) { if ( max_ele < freq [ i ] ) max_ele = freq [ i ] ; } return max_ele ; } static int minimumAddition ( String str , int len ) { int freq [ ] = new int [ MAX ] ; for ( int i = 0 ; i < len ; i ++ ) { freq [ str . charAt ( i ) - ' a ' ] ++ ; } int maxFreq = max_element ( freq ) ; int minAddition = 0 ; for ( int i = 0 ; i < MAX ; i ++ ) { if ( freq [ i ] > 0 ) { minAddition += Math . abs ( maxFreq - freq [ i ] ) ; } } return minAddition ; } public static void main ( String [ ] args ) { String str = \" geeksforgeeks \" ; int len = str . length ( ) ; System . out . println ( minimumAddition ( str , len ) ) ; } }"],"bleu":0.6521914180408084,"rouge_l":0.8083536022813049}
{"id":773,"predictions":["import java . util . * ; class GFG { static int __gcd ( int a , int b ) { if ( b == 0 ) return a ; return __gcd ( b , a % b ) ; } static void addEgcd ( Vector < Integer > adj , int u , int v [ ] ) { adj [ u ] . add ( v ) ; adj [ v ] . add ( u ) ; } static void DFS ( int node , int parent [ ] , int leaf [ ] , Vector < Integer > [ ] adj , Vector < Integer > > adj [ ] ) { if ( node == leaf ) { G = gcd ( GCD ( G , val . get ( node ) ) ; return ; } for ( Integer it : adj [ node ] ) { GCD ( it , node ) ; System . out . print ( it + \" ▁ \" ) ; return ; } for ( Integer it : adj [ node ] ) { GCD ( it , node , gcd ( G , val , val ) , val , adj ) ; } } public static void main ( String [ ] args ) { int n = 8 ; int [ ] adj = new int [ n + 1 ] ; for ( int i = 0 ; i < n + 1 ; i ++ ) adj [ i ] = new Vector < > ( n + 1 ) ; for ( int j = 0 ; j < n ; j ++ ) { adj [ j ] = new Vector [ n + 1 ] ; } addEgcd ( adj , 1 , 2 ) ; addEgcd ( adj , 2 , 3 ) ; addEgcd ( adj , 4 ) ; addEgcd ( adj , 3 , 6 ) ; addEge ( adj , 6 , 7 ) ; addEgcd ( adj , 6 , 7 ) ; addEgcd ( adj , 6 , 7 ) ; } int leaf [ ] = new int [ - 1 ] ; int [ ] val = new int [ n + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( 1 , - 1 , ▁ \" ) ; } }"],"references":["import java . util . * ; class GFG { static final int N = 9 ; static void addEgde ( List < Integer > [ ] adj , int u , int v ) { adj [ u ] . add ( v ) ; adj [ v ] . add ( u ) ; } static void DFS ( int node , int parent , int G , int leaf , int val [ ] , List < Integer > [ ] adj ) { if ( node == leaf ) { G = __gcd ( G , val [ node ] ) ; System . out . print ( G ) ; return ; } for ( int it : adj [ node ] ) { if ( it != parent ) DFS ( it , node , __gcd ( G , val [ it ] ) , leaf , val , adj ) ; } } static int __gcd ( int a , int b ) { return b == 0 ? a : __gcd ( b , a % b ) ; } public static void main ( String [ ] args ) { int n = 8 ; List < Integer > [ ] adj = new LinkedList [ n + 1 ] ; for ( int i = 0 ; i < n + 1 ; i ++ ) adj [ i ] = new LinkedList < Integer > ( ) ; addEgde ( adj , 1 , 2 ) ; addEgde ( adj , 2 , 4 ) ; addEgde ( adj , 1 , 3 ) ; addEgde ( adj , 3 , 5 ) ; addEgde ( adj , 3 , 6 ) ; addEgde ( adj , 6 , 7 ) ; addEgde ( adj , 6 , 8 ) ; int leaf = 5 ; int val [ ] = { - 1 , 6 , 2 , 6 , 3 , 4 , 12 , 10 , 18 } ; int G = val [ 1 ] ; DFS ( 1 , - 1 , G , leaf , val , adj ) ; } }"],"bleu":0.5406180987710028,"rouge_l":0.6567725046444858}
{"id":774,"predictions":["class GFG { static int countNums ( int l , int r ) { int cnt = 0 ; for ( int i = l ; i <= r ; i ++ ) { int lastDigit = ( int ) ( i % 10 ) ; if ( ( lastDigit % 10 ) == 2 || ( lastDigit % 10 ) == 3 || ( lastDigit % 10 ) == 9 ) cnt ++ ; } return cnt ; } public static void main ( String [ ] args ) { int l = 11 , r = 33 ; System . out . println ( countNums ( l , r ) ) ; } }"],"references":["class GFG { static int countNums ( int l , int r ) { int cnt = 0 ; for ( int i = l ; i <= r ; i ++ ) { int lastDigit = ( i % 10 ) ; if ( ( lastDigit % 10 ) == 2 || ( lastDigit % 10 ) == 3 || ( lastDigit % 10 ) == 9 ) { cnt ++ ; } } return cnt ; } public static void main ( String [ ] args ) { int l = 11 , r = 33 ; System . out . print ( countNums ( l , r ) ) ; } }"],"bleu":0.9254510899739387,"rouge_l":0.9704545454545456}
{"id":775,"predictions":["class GFG { static int countMaxSetBits ( int left , int right ) { int max_count = - 1 ; for ( int i = left ; i <= right ; i ++ ) { int temp = i ; int cnt = 0 ; while ( temp != 0 ) { if ( ( temp & 1 ) == 0 ) cnt ++ ; temp = temp >> 1 ; } if ( cnt > max_count ) { max_count = cnt ; num = i ; } } return num ; } public static void main ( String [ ] args ) { int l = 1 , r = 5 ; System . out . println ( countMaxSetBits ( l , r ) ) ; l = 1 ; r = 10 ; System . out . println ( countMaxSetBits ( l , r ) ) ; } }"],"references":["class gfg { static int countMaxSetBits ( int left , int right ) { int max_count = - 1 , num = 0 ; for ( int i = left ; i <= right ; ++ i ) { int temp = i , cnt = 0 ; while ( temp > 0 ) { if ( temp % 2 == 1 ) ++ cnt ; temp >>= 1 ; } if ( cnt > max_count ) { max_count = cnt ; num = i ; } } return num ; } public static void main ( String [ ] args ) { int l = 1 , r = 5 ; System . out . println ( countMaxSetBits ( l , r ) ) ; l = 1 ; r = 10 ; System . out . print ( countMaxSetBits ( l , r ) ) ; } }"],"bleu":0.8096651985966745,"rouge_l":0.9041961852861035}
{"id":776,"predictions":["class GFG { static boolean checkPerfectcube ( int n ) { int int d = ( int ) Math . cbrt ( n ) ; if ( d * d * d == n ) return true ; return false ; } static int smallestPerfectCube ( int a [ ] , int n ) { int mini = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( checkPerfectcube ( a [ i ] ) ) mini = Math . min ( a [ i ] , mini ) ; } return mini ; } public static void main ( String [ ] args ) { int a [ ] = { 16 , 8 , 25 , 2 , 3 , 10 } ; int n = a . length ; System . out . print ( smallestPerfectCube ( a , n ) ) ; } }"],"references":["import java . io . * ; class GFG { static boolean checkPerfectcube ( int n ) { int d = ( int ) Math . cbrt ( n ) ; if ( d * d * d == n ) return true ; return false ; } static int smallestPerfectCube ( int a [ ] , int n ) { int mini = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( checkPerfectcube ( a [ i ] ) ) { mini = Math . min ( a [ i ] , mini ) ; } } return mini ; } public static void main ( String [ ] args ) { int a [ ] = { 16 , 8 , 25 , 2 , 3 , 10 } ; int n = a . length ; System . out . print ( smallestPerfectCube ( a , n ) ) ; } }"],"bleu":0.926667352702379,"rouge_l":0.9650545709422249}
{"id":777,"predictions":["import java . util . * ; class GFG { static int count = 0 ; static void construct ( int a [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int s = Integer . bitCount ( a [ i ] ) ; int maximum = 0 ; for ( int j = i ; j < Math . min ( n , i + 60 ) ) ; j ++ ) { s += a [ j ] ; max = Math . max ( a [ j ] , maximum ) ; if ( s % 2 == 0 && 2 * maximum > s ) count ++ ; } } return count ; } static int countSubarrays ( int a [ ] , int n ) { int i ; for ( i = 0 ; i < n ; i ++ ) { pre [ i ] = a [ i ] ; if ( i != 0 ) pre [ i ] += pre [ i - 1 ] ; } int odd = 0 , even = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( pre [ i ] % 2 == 1 ) odd ++ ; } even = ( odd * ( odd - 1 ) \/ 2 ) + ( even * ( even - 1 ) \/ 2 ) ; return answer ; } public static void main ( String args [ ] ) { int a [ ] = { 6 , 7 , 14 } ; int n = a . length ; System . out . println ( countSubarrays ( a , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static int exclude ( int a [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int s = 0 ; int maximum = 0 ; for ( int j = i ; j < Math . min ( n , i + 60 ) ; j ++ ) { s += a [ j ] ; maximum = Math . max ( a [ j ] , maximum ) ; if ( s % 2 == 0 && 2 * maximum > s ) count ++ ; } } return count ; } static int countSubarrays ( int a [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) a [ i ] = Integer . bitCount ( a [ i ] ) ; int [ ] pre = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { pre [ i ] = a [ i ] ; if ( i != 0 ) pre [ i ] += pre [ i - 1 ] ; } int odd = 0 , even = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( pre [ i ] % 2 == 1 ) odd ++ ; } even = n - odd ; even ++ ; int answer = ( odd * ( odd - 1 ) \/ 2 ) + ( even * ( even - 1 ) \/ 2 ) ; System . out . println ( answer ) ; answer = answer - exclude ( a , n ) ; return answer ; } public static void main ( String [ ] args ) { int a [ ] = { 6 , 7 , 14 } ; int n = a . length ; System . out . println ( countSubarrays ( a , n ) ) ; } }"],"bleu":0.7861563809190399,"rouge_l":0.8531059916662677}
{"id":778,"predictions":["import java . util . * ; class GFG { static void printPermutation ( int N , int K ) { ArrayList < Integer > res = new ArrayList < Integer > ( ) ; int l = 1 , r = N , flag = 0 ; for ( int i = 0 ; i < K ; i ++ ) { if ( flag == false ) { res . add ( l ) ; l ++ ; } else { res . add ( r ) ; r -- ; } flag = flag ^ 1 ; } if ( flag == false ) { for ( int i = l ; i >= 1 ; i -- ) { res . add ( i ) ; } } else { for ( int i = l ; i < r ; i ++ ) { res . add ( i ) ; } } for ( int i = l ; i < r ; i ++ ) { System . out . print ( res . get ( i ) + \" ▁ \" ) ; } } public static void main ( String [ ] args ) { int N = 10 , K = 4 ; printPermutation ( N , K ) ; } }"],"references":["import java . util . Vector ; class GFG { static void printPermutation ( int N , int K ) { Vector < Integer > res = new Vector < > ( ) ; int l = 1 , r = N , flag = 0 ; for ( int i = 0 ; i < K ; i ++ ) { if ( flag == 0 ) { res . add ( l ) ; l ++ ; } else { res . add ( r ) ; r -- ; } flag ^= 1 ; } if ( flag != 1 ) { for ( int i = r ; i >= l ; i -- ) { res . add ( i ) ; } } else { for ( int i = l ; i <= r ; i ++ ) { res . add ( i ) ; } } for ( Integer i : res ) { System . out . print ( i + \" ▁ \" ) ; } } public static void main ( String [ ] args ) { int N = 10 , K = 4 ; printPermutation ( N , K ) ; } }"],"bleu":0.7968846352786987,"rouge_l":0.9101676665128443}
{"id":779,"predictions":["public class GFG { static int solve ( int [ ] A , int B [ ] , int n ) { int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i ; j < n ; j ++ ) { if ( Integer . bitCount ( A [ i ] | A [ j ] ) == B [ j ] ) { cnt ++ ; } } } return cnt ; } public static void main ( String [ ] args ) { int A [ ] = { 5 , 3 , 2 , 4 , 6 , 1 } ; int B [ ] = { 2 , 2 , 1 , 4 , 2 , 3 } ; int size = A . length ; System . out . println ( solve ( A , B , size ) ) ; } }"],"references":["class GFG { static int solve ( int A [ ] , int B [ ] , int n ) { int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = i ; j < n ; j ++ ) if ( Integer . bitCount ( A [ i ] | A [ j ] ) == B [ j ] ) { cnt ++ ; } return cnt ; } public static void main ( String args [ ] ) { int A [ ] = { 5 , 3 , 2 , 4 , 6 , 1 } ; int B [ ] = { 2 , 2 , 1 , 4 , 2 , 3 } ; int size = A . length ; System . out . println ( solve ( A , B , size ) ) ; } }"],"bleu":0.9021542114454449,"rouge_l":0.9748574918566777}
{"id":780,"predictions":["class GFG { static double sum ( int n ) { double i = 1.0 ; double s = 0.0 ; for ( i = 1 ; i <= n ; i ++ ) s += 1 \/ i ; return s ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . printf ( \" Sum ▁ is ▁ % d \" , sum ( n ) ) ; } }"],"references":["import java . io . * ; class GFG { static double sum ( int n ) { double i , s = 0.0 ; for ( i = 1 ; i <= n ; i ++ ) s = s + 1 \/ i ; return s ; } public static void main ( String args [ ] ) { int n = 5 ; System . out . printf ( \" Sum ▁ is ▁ % f \" , sum ( n ) ) ; } }"],"bleu":0.7736497533867484,"rouge_l":0.8781966281492707}
{"id":781,"predictions":["class GFG { static final int M = 3 , N = 2 ; static void getIndex ( int n , shuffle [ ] [ ] ) { for ( int i = 0 ; i < 3 ; i ++ ) { if ( shuffle [ i ] [ 0 ] == n ) n = shuffle [ i ] [ 1 ] ; else if ( shuffle [ i ] [ 1 ] == n ) n = shuffle [ i ] [ 0 ] ; } System . out . println ( n ) ; } public static void main ( String [ ] args ) { int n = 3 ; shuffle [ ] [ ] = { { 3 , 1 } , { 2 , 1 } } ; getIndex ( n , shuffle ) ; } }"],"references":["import java . io . * ; class GFG { static int M = 3 ; static int N = 2 ; static void getIndex ( int n , int shuffle [ ] [ ] ) { for ( int i = 0 ; i < 3 ; i ++ ) { if ( shuffle [ i ] [ 0 ] == n ) n = shuffle [ i ] [ 1 ] ; else if ( shuffle [ i ] [ 1 ] == n ) n = shuffle [ i ] [ 0 ] ; } System . out . println ( n ) ; } public static void main ( String [ ] args ) { int n = 3 ; int shuffle [ ] [ ] = { { 3 , 1 } , { 2 , 1 } , { 1 , 2 } } ; getIndex ( n , shuffle ) ; } }"],"bleu":0.8408196492308782,"rouge_l":0.9254273504273502}
{"id":782,"predictions":["class GFG { static void printArr ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + \" ▁ \" ) ; } static void findArrangement ( int arr [ ] , int n ) { if ( n < 2 ) { System . out . print ( \" - 1\" ) ; return ; } int minVal = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] < minVal ) { swap ( arr , i , n - 1 ) ; break ; } } int andVal = arr [ 0 ] ; for ( int i = 1 ; i < n - 1 ; i ++ ) { if ( arr [ i ] == minVal ) { swap ( arr , i , n - 1 ) ; break ; } } int andVal = arr [ 0 ] ; for ( int i = 1 ; i < n - 1 ; i ++ ) { if ( arr [ i ] & arr [ i ] ) { printArr ( arr , n ) ; } else { System . out . print ( - 1 ) ; } } System . out . print ( \" - 1\" ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 5 , 3 , 3 } ; int n = arr . length ; findArrangement ( arr , n ) ; } }"],"references":["import java . util . * ; class GFG { static void printArr ( int [ ] arr , int n ) { for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + \" ▁ \" ) ; } static void findArrangement ( int arr [ ] , int n ) { if ( n < 2 ) { System . out . print ( \" - 1\" ) ; return ; } int minVal = Arrays . stream ( arr ) . min ( ) . getAsInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == minVal ) { swap ( arr , i , n - 1 ) ; break ; } } int andVal = arr [ 0 ] ; for ( int i = 1 ; i < n - 1 ; i ++ ) { andVal &= arr [ i ] ; } if ( andVal == arr [ n - 1 ] ) printArr ( arr , n ) ; else System . out . print ( \" - 1\" ) ; } static int [ ] swap ( int [ ] arr , int i , int j ) { int temp = arr [ i ] ; arr [ i ] = arr [ j ] ; arr [ j ] = temp ; return arr ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 5 , 3 , 3 } ; int n = arr . length ; findArrangement ( arr , n ) ; } }"],"bleu":0.7444011950933979,"rouge_l":0.7621206257946819}
{"id":783,"predictions":["import java . util . * ; class GFG { static int findOccurrences ( String str , String substr ) { int counter = 0 ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { if ( str . charAt ( i ) == substr . charAt ( 0 ) ) { for ( int j = i + 1 ; j < str . length ( ) ; j ++ ) { if ( str . charAt ( j ) == substr . charAt ( 1 ) ) { for ( int k = j + 1 ; k < str . length ( ) ; k ++ ) { if ( str . charAt ( k ) == substr . charAt ( 2 ) ) { counter ++ ; } } } } } } return counter ; } static public void main ( String [ ] args ) { String str = \" GFGFGWIN \" ; String substr = \" GFG \" ; System . out . println ( findOccurrences ( str , substr ) ) ; } }"],"references":["import java . util . * ; import java . lang . * ; public class GfG { public static int findOccurrences ( String str1 , String substr1 ) { int counter = 0 ; char [ ] str = str1 . toCharArray ( ) ; char [ ] substr = substr1 . toCharArray ( ) ; for ( int i = 0 ; i < str1 . length ( ) ; i ++ ) { if ( str [ i ] == substr [ 0 ] ) { for ( int j = i + 1 ; j < str1 . length ( ) ; j ++ ) { if ( str [ j ] == substr [ 1 ] ) { for ( int k = j + 1 ; k < str1 . length ( ) ; k ++ ) { if ( str [ k ] == substr [ 2 ] ) counter ++ ; } } } } } return counter ; } public static void main ( String argc [ ] ) { String str = \" GFGFGYSYIOIWIN \" ; String substr = \" GFG \" ; System . out . println ( findOccurrences ( str , substr ) ) ; } }"],"bleu":0.6010970231747752,"rouge_l":0.7771015903927296}
{"id":784,"predictions":["class GFG { static String decimalToBinary ( int num , int k_pre ) { String binary = \" \" ; int i = Integer . valueOf ( num ) ; int fractional = num - decimal ; while ( i > 0 ) { int rem = Integer . valueOf ( 2 ) ; binary += Long . valueOf ( rem ) ; i += 1 ; } binary += ( binary ) ; while ( k > 0 ) { fraction *= 2 ; binary += ' . ' ; } else binary += ' . ' ; k_pre -= 1 ; } return binary ; } static public void main ( String [ ] args ) { int n = 4.47 ; int k = 3.986 ; System . out . print ( decimalToBinary ( n , k ) ) ; } }"],"references":["import java . util . * ; class GFG { static String decimalToBinary ( double num , int k_prec ) { String binary = \" \" ; int Integral = ( int ) num ; double fractional = num - Integral ; while ( Integral > 0 ) { int rem = Integral % 2 ; binary += ( ( char ) ( rem + '0' ) ) ; Integral \/= 2 ; } binary = reverse ( binary ) ; binary += ( ' . ' ) ; while ( k_prec -- > 0 ) { fractional *= 2 ; int fract_bit = ( int ) fractional ; if ( fract_bit == 1 ) { fractional -= fract_bit ; binary += ( char ) ( 1 + '0' ) ; } else { binary += ( char ) ( 0 + '0' ) ; } } return binary ; } static String reverse ( String input ) { char [ ] temparray = input . toCharArray ( ) ; int left , right = 0 ; right = temparray . length - 1 ; for ( left = 0 ; left < right ; left ++ , right -- ) { char temp = temparray [ left ] ; temparray [ left ] = temparray [ right ] ; temparray [ right ] = temp ; } return String . valueOf ( temparray ) ; } public static void main ( String [ ] args ) { double n = 4.47 ; int k = 3 ; System . out . println ( decimalToBinary ( n , k ) ) ; n = 6.986 ; k = 5 ; System . out . println ( decimalToBinary ( n , k ) ) ; } }"],"bleu":0.18958311436102526,"rouge_l":0.4655836426020587}
{"id":785,"predictions":["import java . io . * ; class GFG { static int evenDecimalValue ( String str , int n ) { int result = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i ; j < n ; j ++ ) { double decimalValue = 0 ; int powerOf2 = 1 ; for ( int k = i ; k <= j ; k ++ ) { decimalValue += ( ( int ) ( str . charAt ( k ) - 0 ) * powerOf2 ) ; powerOf2 *= 2 ; } if ( decimalValue % 2 == 0 ) result ++ ; } } return result ; } public static void main ( String [ ] args ) { String str = \"10010\" ; int n = 5 ; System . out . println ( evenDecimalValue ( str , n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int evenDecimalValue ( String str , int n ) { int result = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i ; j < n ; j ++ ) { int decimalValue = 0 ; int powerOf2 = 1 ; for ( int k = i ; k <= j ; k ++ ) { decimalValue += ( ( str . charAt ( k ) - '0' ) * powerOf2 ) ; powerOf2 *= 2 ; } if ( decimalValue % 2 == 0 ) result ++ ; } } return result ; } public static void main ( String [ ] args ) { String str = \"10010\" ; int n = 5 ; System . out . println ( evenDecimalValue ( str , n ) ) ; } }"],"bleu":0.9463163005158499,"rouge_l":0.9795897223373395}
{"id":786,"predictions":["import java . util . * ; class GFG { static boolean isSubSeqDivisible ( String str ) { int len = str . length ( ) ; char [ ] arr = str . toCharArray ( ) ; for ( int i = 0 ; i < len ; i ++ ) { for ( int j = i ; j < len ; j ++ ) { if ( arr [ i ] % 8 == 0 ) return true ; else if ( ( arr [ i ] * 10 + arr [ j ] ) % 8 == 0 && i != j ) return true ; else if ( ( arr [ i ] * 100 + arr [ j ] * 10 + arr [ k ] ) % 8 == 0 && i != j && i != k ) return true ; } } return false ; } public static void main ( String args [ ] ) { String str = \"3144\" ; if ( isSubSeqDivisible ( str ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . io . * ; class GFG { static boolean isSubSeqDivisible ( String str ) { int i , j , k , l = str . length ( ) ; int arr [ ] = new int [ l ] ; for ( i = 0 ; i < l ; i ++ ) arr [ i ] = str . charAt ( i ) - '0' ; for ( i = 0 ; i < l ; i ++ ) { for ( j = i ; j < l ; j ++ ) { for ( k = j ; k < l ; k ++ ) { if ( arr [ i ] % 8 == 0 ) return true ; else if ( ( arr [ i ] * 10 + arr [ j ] ) % 8 == 0 && i != j ) return true ; else if ( ( arr [ i ] * 100 + arr [ j ] * 10 + arr [ k ] ) % 8 == 0 && i != j && j != k && i != k ) return true ; } } } return false ; } public static void main ( String args [ ] ) { String str = \"3144\" ; if ( isSubSeqDivisible ( str ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.6879737087669978,"rouge_l":0.8386801099908341}
{"id":787,"predictions":["import java . util . * ; class GFG { static void sub_seples ( String str , int n ) { int l = str . length ( ) ; for ( int i = 0 ; i < l ; i += n ) { String newString = new String ( str . substring ( 0 , i ) ; for ( int j = i ; j < n ; j += n ) { newstrings . substring ( i , j ) ; } } System . out . print ( arr . substring ( 0 , n ) ) ; } } public static void main ( String [ ] args ) { String str = \" geeksforgeeks \" ; int n = 4 ; sub_segments ( str , n ) ; } }"],"references":["import java . util . * ; class GFG { static void sub_segments ( String str , int n ) { int l = str . length ( ) ; for ( int x = 0 ; x < l ; x += n ) { String newlist = str . substring ( x , x + n ) ; List < Character > arr = new ArrayList < Character > ( ) ; for ( char y : newlist . toCharArray ( ) ) { if ( ! arr . contains ( y ) ) arr . add ( y ) ; } for ( char y : arr ) System . out . print ( y ) ; System . out . println ( ) ; } } public static void main ( String [ ] args ) { String str = \" geeksforgeeksgfg \" ; int n = 4 ; sub_segments ( str , n ) ; } }"],"bleu":0.5071722579723894,"rouge_l":0.6834733893557423}
{"id":788,"predictions":["public class GFG { static final int CHARS = 26 ; static int remAnagram ( String str1 , String str2 ) { int count1 [ ] = new int [ CHARS ] ; int count2 [ ] = new int [ CHARS ] ; int i = 0 ; while ( i < str1 . length ( ) ) { count1 [ str1 . charAt ( i ) - ' a ' ] ++ ; i ++ ; } i = 0 ; while ( i < str2 . length ( ) ) { count2 [ str2 . charAt ( i ) - ' a ' ] ++ ; i ++ ; } int result = 0 ; for ( int i = 0 ; i < 26 ; i ++ ) result += Math . abs ( count1 [ i ] - count2 [ i ] ) ; return result ; } public static void main ( String [ ] args ) { String str1 = \" bcadeh \" , str2 = \" hea \" ; System . out . println ( remAnagram ( str1 , str2 ) ) ; } }"],"references":["import java . util . * ; class GFG { static int remAnagram ( String str1 , String str2 ) { int count1 [ ] = new int [ 26 ] ; int count2 [ ] = new int [ 26 ] ; for ( int i = 0 ; i < str1 . length ( ) ; i ++ ) count1 [ str1 . charAt ( i ) - ' a ' ] ++ ; for ( int i = 0 ; i < str2 . length ( ) ; i ++ ) count2 [ str2 . charAt ( i ) - ' a ' ] ++ ; int result = 0 ; for ( int i = 0 ; i < 26 ; i ++ ) result += Math . abs ( count1 [ i ] - count2 [ i ] ) ; return result ; } public static void main ( String [ ] args ) { String str1 = \" bcadeh \" , str2 = \" hea \" ; System . out . println ( remAnagram ( str1 , str2 ) ) ; } }"],"bleu":0.8138040465210508,"rouge_l":0.8864906698770314}
{"id":789,"predictions":["class GFG { static int minOperations ( String s , String t , int n ) { int ct0 = 0 , ct1 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == t . charAt ( i ) ) continue ; if ( s . charAt ( i ) == '0' ) ct0 ++ ; else ct1 ++ ; } return Math . max ( ct0 , ct1 ) ; } public static void main ( String [ ] args ) { String s = \"010\" ; String t = \"101\" ; int n = s . length ( ) ; System . out . println ( minOperations ( s , t , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static int minOperations ( String s , String t , int n ) { int ct0 = 0 , ct1 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == t . charAt ( i ) ) continue ; if ( s . charAt ( i ) == '0' ) ct0 ++ ; else ct1 ++ ; } return Math . max ( ct0 , ct1 ) ; } public static void main ( String args [ ] ) { String s = \"010\" , t = \"101\" ; int n = s . length ( ) ; System . out . println ( minOperations ( s , t , n ) ) ; } }"],"bleu":0.9092138409015611,"rouge_l":0.9534585326023561}
{"id":790,"predictions":["class GFG { static int toggleLastMBits ( int n , int m ) { int num = ( 1 << m ) - 1 ; return ( n ^ num ) ; } public static void main ( String [ ] args ) { int n = 107 ; int m = 4 ; System . out . println ( toggleLastMBits ( n , m ) ) ; } }"],"references":["import java . util . * ; import java . lang . * ; public class GfG { public static int toggleLastMBits ( int n , int m ) { int num = ( 1 << m ) - 1 ; return ( n ^ num ) ; } public static void main ( String argc [ ] ) { int n = 107 ; int m = 4 ; n = toggleLastMBits ( n , m ) ; System . out . println ( n ) ; } }"],"bleu":0.6393475570931487,"rouge_l":0.7701402805611223}
{"id":791,"predictions":["class GFG { static void printmaxSubseq ( int arr [ ] , int n ) { for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( arr [ i ] < arr [ i + 1 ] ) System . out . print ( arr [ i ] + \" ▁ \" ) ; else System . out . println ( arr [ i ] ) ; } System . out . print ( arr [ n - 1 ] ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 9 , 8 , 11 , 13 , 10 , 15 , 14 , 20 } ; int n = arr . length ; printmaxSubseq ( arr , n ) ; } }"],"references":["import java . util . * ; class GFG { static void printmaxSubseq ( int arr [ ] , int n ) { int i ; for ( i = 0 ; i < n ; i ++ ) { if ( i + 1 < n && arr [ i ] < arr [ i + 1 ] ) System . out . print ( arr [ i ] + \" ▁ \" ) ; else System . out . print ( arr [ i ] + \" \\n \" ) ; } } public static void main ( String [ ] args ) { int arr [ ] = { 9 , 8 , 11 , 13 , 10 , 15 , 14 , 16 , 20 , 5 } ; int n = arr . length ; printmaxSubseq ( arr , n ) ; } }"],"bleu":0.7733660892816326,"rouge_l":0.8485528382319947}
{"id":792,"predictions":["import java . io . * ; class GFG { static void printFibonacciNumbers ( int n ) { int f1 = 0 ; int f2 = 1 ; if ( n < 1 ) return ; for ( int x = 0 ; x < n ; x ++ ) { System . out . print ( f2 + \" ▁ \" ) ; int next = f1 + f2 ; f1 = next ; f2 = next ; f2 = next ; } } public static void main ( String [ ] args ) { printFibonacciNumbers ( 7 ) ; } }"],"references":["class Test { static void printFibonacciNumbers ( int n ) { int f1 = 0 , f2 = 1 , i ; if ( n < 1 ) return ; for ( i = 1 ; i <= n ; i ++ ) { System . out . print ( f2 + \" ▁ \" ) ; int next = f1 + f2 ; f1 = f2 ; f2 = next ; } } public static void main ( String [ ] args ) { printFibonacciNumbers ( 7 ) ; } }"],"bleu":0.7058046577370362,"rouge_l":0.8600305758450822}
{"id":793,"predictions":["class GFG { static int cal_size ( int dist , int time ) { System . out . println ( \" ▁ Point ▁ : ▁ \" + dist ) ; System . out . println ( \" ▁ Time ▁ : ▁ \" + cost ) ; return dist \/ time ; } static int cal_bound ( int dist , int time ) { System . out . println ( \" ▁ Time ▁ \" + dist ) ; System . out . println ( \" ▁ Time ▁ : ▁ \" + dist ) ; return dist * time ; } static int cal_time ( int dist , int dist ) { System . out . println ( \" ▁ \" + dist ) ; System . out . println ( \" ▁ Frequency ▁ \/ ▁ hr ) ▁ : ▁ \" + dist ) ; return dist * dist ; } public static void main ( String [ ] args ) { int dist_size = 0.9 , 2.0 = 0.5 ; System . out . println ( \" The ▁ Output ▁ calculated ▁ IST ▁ : ▁ \" + dist_sum ( 45.0 , 2.5 ) ) ; System . out . println ( \" ▁ The ▁ calculated ▁ IST ▁ : ▁ \" + cal_size ( 43.0 , 4.5 ) ) ; System . out . println ( \" \" ▁ The ▁ calculate ▁ Time ▁ : ▁ \" + cal_size ( 43.0 , 4.5 ) ) ; System . out . println ( \" ▁ The ▁ calculated ▁ Time ▁ : ▁ \" + cal_size ( ) ) ; } }"],"references":["class GFG { static double cal_speed ( double dist , double time ) { System . out . print ( \" \\n ▁ Distance ( km ) ▁ : ▁ \" + dist ) ; System . out . print ( \" \\n ▁ Time ( hr ) ▁ : ▁ \" + time ) ; return dist \/ time ; } static double cal_dis ( double speed , double time ) { System . out . print ( \" \\n ▁ Time ( hr ) ▁ : ▁ \" + time ) ; System . out . print ( \" \\n ▁ Speed ( km ▁ \/ ▁ hr ) ▁ : ▁ \" + speed ) ; return speed * time ; } static double cal_time ( double dist , double speed ) { System . out . print ( \" \\n ▁ Distance ( km ) ▁ : ▁ \" + dist ) ; System . out . print ( \" \\n ▁ Speed ( km ▁ \/ ▁ hr ) ▁ : ▁ \" + speed ) ; return speed * dist ; } public static void main ( String [ ] args ) { System . out . println ( \" \\n ▁ The ▁ calculated ▁ Speed ( km ▁ \/ ▁ hr ) ▁ is ▁ : ▁ \" + cal_speed ( 45.9 , 2.0 ) ) ; System . out . println ( \" \\n ▁ The ▁ calculated ▁ Distance ( km ) ▁ : ▁ \" + cal_dis ( 62.9 , 2.5 ) ) ; System . out . println ( \" \\n ▁ The ▁ calculated ▁ Time ( hr ) ▁ : ▁ \" + cal_time ( 48.0 , 4.5 ) ) ; } }"],"bleu":0.49468620974241734,"rouge_l":0.7171602984399728}
{"id":794,"predictions":["import java . util . * ; class GFG { static int __gcd ( int a ) { if ( a <= 0 ) return b ; if ( ( n & 1 ) == 0 ) return new int [ ] { return new int [ n ] ; } if ( ( n & 1 ) == 0 ) return new int [ ] { return new int [ ] { n \/ 2 , a } ; } int a = ( int ) Math . ceil ( Math . sqrt ( n ) ) ; if ( a * a == n ) return __gcd ( a , b ) ; while ( true ) { int b1 = a * a - n ; int b = ( int ) Math . sqrt ( b1 - b ) ; if ( b * b == b1 ) break ; else a ++ ; } return new String ( a - b , a + b ) ; } public static void main ( String [ ] args ) { System . out . println ( MermatFactors ( 6504 ) ) ; } }"],"references":["class GFG { static void FermatFactors ( int n ) { if ( n <= 0 ) { System . out . print ( \" [ \" + n + \" ] \" ) ; return ; } if ( ( n & 1 ) == 0 ) { System . out . print ( \" [ \" + n \/ 2.0 + \" , \" + 2 + \" ] \" ) ; return ; } int a = ( int ) Math . ceil ( Math . sqrt ( n ) ) ; if ( a * a == n ) { System . out . print ( \" [ \" + a + \" , \" + a + \" ] \" ) ; return ; } int b ; while ( true ) { int b1 = a * a - n ; b = ( int ) ( Math . sqrt ( b1 ) ) ; if ( b * b == b1 ) break ; else a += 1 ; } System . out . print ( \" [ \" + ( a - b ) + \" , \" + ( a + b ) + \" ] \" ) ; return ; } public static void main ( String [ ] args ) { FermatFactors ( 6557 ) ; } }"],"bleu":0.47949279651941673,"rouge_l":0.6195240260724572}
{"id":795,"predictions":["public class GFG { static void perfectCube ( int N ) { int cube = 0 ; for ( int i = 0 ; i <= N ; i ++ ) { cube = i * i * i ; if ( cube == N ) { System . out . println ( \" Yes \" ) ; return ; } else if ( cube > N ) { System . out . println ( \" NO \" ) ; return ; } } } public static void main ( String [ ] args ) { int N = 240 ; perfectCube ( N ) ; } }"],"references":["class GFG { static void perfectCube ( int N ) { int cube ; for ( int i = 0 ; i <= N ; i ++ ) { cube = i * i * i ; if ( cube == N ) { System . out . println ( \" Yes \" ) ; return ; } else if ( cube > N ) { System . out . println ( \" NO \" ) ; return ; } } } public static void main ( String [ ] args ) { int N = 216 ; perfectCube ( N ) ; } }"],"bleu":0.9344132766918243,"rouge_l":0.9790123456790123}
{"id":796,"predictions":["class GFG { static String removeDuplicate ( String [ ] str , int n ) { int index = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j <= i ; j ++ ) { if ( str . charAt ( i ) == str . charAt ( j ) ) break ; } if ( j == i ) { str [ index ] = str [ i ] ; index ++ ; } } return String . valueOf ( str ) ; } public static void main ( String [ ] args ) { String str = \" geeksforgeeks \" ; int n = str . length ( ) ; System . out . println ( removeDuplicates ( str , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static String removeDuplicate ( char str [ ] , int n ) { int index = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int j ; for ( j = 0 ; j < i ; j ++ ) { if ( str [ i ] == str [ j ] ) { break ; } } if ( j == i ) { str [ index ++ ] = str [ i ] ; } } return String . valueOf ( Arrays . copyOf ( str , index ) ) ; } public static void main ( String [ ] args ) { char str [ ] = \" geeksforgeeks \" . toCharArray ( ) ; int n = str . length ; System . out . println ( removeDuplicate ( str , n ) ) ; } }"],"bleu":0.6430304632654996,"rouge_l":0.8146367521367521}
{"id":797,"predictions":["class GFG { static String printSmallestSequence ( String s ) { char m = s . substring ( 0 , s . length ( ) - 1 ) ; for ( int i = 0 ; i < s . length ( ) - 1 ; i ++ ) { if ( m > s . charAt ( i ) ) { m = s . substring ( i , i ) + s . substring ( m ) ; } } return m ; } public static void main ( String [ ] args ) { String st = \" DACBCAA \" ; System . out . println ( printSmallestSequence ( st ) ) ; } }"],"references":["import java . util . * ; import java . lang . * ; import java . io . * ; class LexoSmallest { static boolean compareSeq ( char [ ] S , int x , int y , int n ) { for ( int i = 0 ; i < n ; i ++ ) { if ( S [ x ] < S [ y ] ) return false ; else if ( S [ x ] > S [ y ] ) return true ; x = ( x + 1 ) % n ; y = ( y + 1 ) % n ; } return true ; } static int smallestSequence ( char [ ] S , int n ) { int index = 0 ; for ( int i = 1 ; i < n ; i ++ ) if ( compareSeq ( S , index , i , n ) ) index = i ; return index ; } static void printSmallestSequence ( String str , int n ) { char [ ] S = str . toCharArray ( ) ; int starting_index = smallestSequence ( S , n ) ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( S [ ( starting_index + i ) % n ] ) ; } public static void main ( String [ ] args ) { String S = \" DCACBCAA \" ; int n = 8 ; printSmallestSequence ( S , n ) ; } }"],"bleu":0.11471128449530903,"rouge_l":0.3183716075156577}
{"id":798,"predictions":["import java . util . Arrays ; class GFG { static void partSort ( int arr [ ] , int N , int a , int b ) { int l = Math . min ( a , b ) ; int r = Math . max ( a , b ) ; int temp [ ] = new int [ r ] ; Arrays . sort ( a , b ) ; int j = 0 ; for ( int i = l ; i <= r ; i ++ ) temp [ i ] = arr [ i ] ; Arrays . sort ( temp , Collections . reverseOrder ( ) ) ; for ( int i = l ; i <= r ; i ++ ) System . out . print ( arr [ i ] + \" ▁ \" ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 7 , 8 , 4 , 5 , 2 } ; int a = 1 , b = 4 ; int N = arr . length ; partSort ( arr , N , a , b ) ; } }"],"references":["import java . io . * ; import java . util . * ; import java . lang . * ; class GFG { static void partSort ( int [ ] arr , int N , int a , int b ) { int l = Math . min ( a , b ) ; int r = Math . max ( a , b ) ; int [ ] temp = new int [ r - l + 1 ] ; int j = 0 ; for ( int i = l ; i <= r ; i ++ ) { temp [ j ] = arr [ i ] ; j ++ ; } Arrays . sort ( temp ) ; j = 0 ; for ( int i = l ; i <= r ; i ++ ) { arr [ i ] = temp [ j ] ; j ++ ; } for ( int i = 0 ; i < N ; i ++ ) { System . out . print ( arr [ i ] + \" ▁ \" ) ; } } public static void main ( String args [ ] ) { int [ ] arr = { 7 , 8 , 4 , 5 , 2 } ; int a = 1 , b = 4 ; int N = arr . length ; partSort ( arr , N , a , b ) ; } }"],"bleu":0.645747264435587,"rouge_l":0.7969277151676118}
{"id":799,"predictions":["class GFG { static boolean checkYear ( int year ) { if ( ( year % 4 ) == 0 ) { if ( ( year % 100 ) == 0 ) { if ( year % 100 ) == 0 ) return true ; } else return false ; } else return true ; } public static void main ( String [ ] args ) { int year = 2000 ; if ( checkYear ( 2000 ) ) System . out . println ( \" Leap ▁ Year \" ) ; else System . out . println ( \" Not ▁ a ▁ Leap ▁ Year \" ) ; } }"],"references":["class Test { static boolean checkYear ( int year ) { if ( year % 400 == 0 ) return true ; if ( year % 100 == 0 ) return false ; if ( year % 4 == 0 ) return true ; return false ; } public static void main ( String [ ] args ) { int year = 2000 ; System . out . println ( checkYear ( 2000 ) ? \" Leap ▁ Year \" : \" Not ▁ a ▁ Leap ▁ Year \" ) ; } }"],"bleu":0.6082768773745496,"rouge_l":0.7792690815006468}
{"id":800,"predictions":["import java . util . * ; class GFG { static int countPairs ( int arr [ ] , int n ) { int count = 0 ; int right = 0 ; int left = 0 ; int left = 0 ; for ( int i = 0 ; i < n ; i ++ ) { while ( right < n && visited [ arr [ right ] ) { count += ( right - left ) ; visited [ arr [ right ] ] = true ; right ++ ; } while ( left < right && ( right != n && visited [ arr [ arr [ right ] ] ) ) { visited [ arr [ left ] = false ; left ++ ; } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 4 , 2 , 4 , 3 , 2 } ; int n = arr . length ; System . out . println ( countPairs ( arr , n ) ) ; } }"],"references":["class GFG { static int countPairs ( int arr [ ] , int n ) { int count = 0 ; int right = 0 , left = 0 ; boolean visited [ ] = new boolean [ n ] ; for ( int i = 0 ; i < n ; i ++ ) visited [ i ] = false ; while ( right < n ) { while ( right < n && ! visited [ arr [ right ] ] ) { count += ( right - left ) ; visited [ arr [ right ] ] = true ; right ++ ; } while ( left < right && ( right != n && visited [ arr [ right ] ] ) ) { visited [ arr [ left ] ] = false ; left ++ ; } } return count ; } public static void main ( String args [ ] ) { int arr [ ] = { 1 , 4 , 2 , 4 , 3 , 2 } ; int n = arr . length ; System . out . println ( countPairs ( arr , n ) ) ; } }"],"bleu":0.8140386876203034,"rouge_l":0.8868067226890756}
{"id":801,"predictions":["class BinarySearch { int binarySearch ( int arr [ ] , int l , int r , int x ) { int mid ; while ( l <= r ) { int mid = l + ( r - l ) \/ 2 ; if ( arr [ mid ] == x ) return mid ; if ( arr [ mid ] < x ) l = mid + 1 ; else r = mid - 1 ; } return - 1 ; } public static void main ( String args [ ] ) { int arr [ ] = { 2 , 3 , 4 , 10 , 40 } ; int x = 10 ; int result = 10 ; if ( result == - 1 ) System . out . println ( \" Element ▁ not ▁ present ▁ at ▁ index ▁ \" + result ) ; } }"],"references":["class BinarySearch { int binarySearch ( int arr [ ] , int x ) { int l = 0 , r = arr . length - 1 ; while ( l <= r ) { int m = l + ( r - l ) \/ 2 ; if ( arr [ m ] == x ) return m ; if ( arr [ m ] < x ) l = m + 1 ; else r = m - 1 ; } return - 1 ; } public static void main ( String args [ ] ) { BinarySearch ob = new BinarySearch ( ) ; int arr [ ] = { 2 , 3 , 4 , 10 , 40 } ; int n = arr . length ; int x = 10 ; int result = ob . binarySearch ( arr , x ) ; if ( result == - 1 ) System . out . println ( \" Element ▁ not ▁ present \" ) ; else System . out . println ( \" Element ▁ found ▁ at ▁ \" + \" index ▁ \" + result ) ; } }"],"bleu":0.6038640529928272,"rouge_l":0.779248230861134}
{"id":802,"predictions":["class GFG { static boolean isComposite ( int n ) { if ( n <= 1 ) return false ; if ( n <= 3 ) return false ; if ( n % 2 == 0 || n % 3 == 0 ) return true ; for ( int i = 5 ; i * i <= n ; i = i + 6 ) { if ( n % i == 0 || n % ( i + 2 ) == 0 ) return true ; } return false ; } public static void main ( String args [ ] ) { if ( isComposite ( 11 ) ) System . out . println ( \" true \" ) ; else System . out . println ( \" false \" ) ; if ( isComposite ( 15 ) ) System . out . println ( \" ▁ true \" ) ; else System . out . println ( \" false \" ) ; } }"],"references":["import java . io . * ; class Composite { static boolean isComposite ( int n ) { if ( n <= 1 ) System . out . println ( \" False \" ) ; if ( n <= 3 ) System . out . println ( \" False \" ) ; if ( n % 2 == 0 || n % 3 == 0 ) return true ; for ( int i = 5 ; i * i <= n ; i = i + 6 ) if ( n % i == 0 || n % ( i + 2 ) == 0 ) return true ; return false ; } public static void main ( String args [ ] ) { System . out . println ( isComposite ( 11 ) ? \" true \" : \" false \" ) ; System . out . println ( isComposite ( 15 ) ? \" true \" : \" false \" ) ; } }"],"bleu":0.7842937995635545,"rouge_l":0.7650602409638554}
{"id":803,"predictions":["class gfg { public void decToBinary ( int n ) { int [ ] binaryNum = new int [ n ] ; int i = 0 ; while ( n > 0 ) { binaryNum [ i ] = n % 2 ; n \/= 2 ; i ++ ; } for ( int j = i - 1 ; j >= 0 ; j -- ) System . out . print ( binaryNum [ j ] + \" ▁ \" ) ; } public static void main ( String [ ] args ) { int n = 17 ; decToBinary ( n ) ; } }"],"references":["import java . io . * ; class GFG { static void decToBinary ( int n ) { int [ ] binaryNum = new int [ 32 ] ; int i = 0 ; while ( n > 0 ) { binaryNum [ i ] = n % 2 ; n = n \/ 2 ; i ++ ; } for ( int j = i - 1 ; j >= 0 ; j -- ) System . out . print ( binaryNum [ j ] ) ; } public static void main ( String [ ] args ) { int n = 17 ; decToBinary ( n ) ; } }"],"bleu":0.8297127005715748,"rouge_l":0.9004025644848666}
{"id":804,"predictions":["class GFG { static int findSum ( int n ) { return ( n * ( int ) Math . pow ( n , 2 ) + 3 * n + 5 ) \/ 3 ; } public static void main ( String [ ] args ) { int n = 25 ; System . out . println ( findSum ( n ) ) ; } }"],"references":["import java . util . * ; class GFG { static int calculateSum ( int n ) { return ( n * ( ( int ) Math . pow ( n , 2 ) + 3 * n + 5 ) ) \/ 3 ; } public static void main ( String arr [ ] ) { int n = 25 ; System . out . println ( calculateSum ( n ) ) ; } }"],"bleu":0.7341102146167929,"rouge_l":0.8850600770800272}
{"id":805,"predictions":["class GFG { static boolean isPerfectSquare ( int n ) { for ( int i = 1 ; i * i <= n ; i ++ ) { if ( ( n % i == 0 ) && ( n \/ i == i ) ) return true ; } return false ; } public static void main ( String args [ ] ) { int n = 36 ; if ( isPerfectSquare ( n ) ) System . out . println ( \" Yes , ▁ it ▁ is ▁ a ▁ perfect ▁ square ▁ square ▁ square . \" ) ; else System . out . println ( \" No ▁ it ▁ is ▁ not ▁ a ▁ perfect ▁ square \" ) ; } }"],"references":["public class GfG { static boolean isPerfectSquare ( int n ) { for ( int i = 1 ; i * i <= n ; i ++ ) { if ( ( n % i == 0 ) && ( n \/ i == i ) ) { return true ; } } return false ; } public static void main ( String [ ] args ) { int n = 36 ; if ( isPerfectSquare ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.7001312977842947,"rouge_l":0.8677098150782362}
{"id":806,"predictions":["class GFG { static final int N = 101 ; static int mod = ( int ) 1e9 + 7 ; static int [ ] [ ] exactSum = new int [ N ] [ N ] ; static int [ ] [ ] exactSum = new int [ N ] [ N ] ; static int getSum ( int x , int y , int z ) { int ans = 0 ; int i , j ; for ( i = 0 ; i < x + 1 ; i ++ ) { for ( j = 0 ; j <= y ; j ++ ) { for ( int k = 0 ; k < z + 1 ; k ++ ) { if ( i > 0 ) { exactSum [ i ] [ k ] += ( exactSum [ i - 1 ] [ j ] * 10 + 4 * exactnum [ i - 1 ] [ k ] ) % mod ; exactnum [ i ] [ j ] += exactnum [ i - 1 ] [ k ] ; } if ( j > 0 ) { exactsum [ i ] [ j ] += ( exactSum [ i ] [ j - 1 ] * 10 + 5 * exactnum [ i ] [ k ] ) % mod ; exactnum [ i ] [ j ] += exactnum [ i - 1 ] [ k ] ; } if ( k > 0 ) { exactsum [ i ] [ j ] += ( exactsum [ i ] [ j - 1 ] * 10 + 5 * exactnum [ i ] [ k - 1 ] ) % mod ; exactnum [ i ] [ j ] += exactnum [ i ] [ j - 1 ] ; ans %= mod ; } } } return ans ; } public static void main ( String [ ] args ) { int x = 101 ; int y = 1 ; System . out . println ( checkSum ( x , y , z ) ) ; } }"],"references":["class GFG { static int N = 101 ; static int mod = ( int ) 1e9 + 7 ; static int exactsum [ ] [ ] [ ] = new int [ N ] [ N ] [ N ] ; static int exactnum [ ] [ ] [ ] = new int [ N ] [ N ] [ N ] ; static int getSum ( int x , int y , int z ) { int ans = 0 ; exactnum [ 0 ] [ 0 ] [ 0 ] = 1 ; for ( int i = 0 ; i <= x ; ++ i ) { for ( int j = 0 ; j <= y ; ++ j ) { for ( int k = 0 ; k <= z ; ++ k ) { if ( i > 0 ) { exactsum [ i ] [ j ] [ k ] += ( exactsum [ i - 1 ] [ j ] [ k ] * 10 + 4 * exactnum [ i - 1 ] [ j ] [ k ] ) % mod ; exactnum [ i ] [ j ] [ k ] += exactnum [ i - 1 ] [ j ] [ k ] % mod ; } if ( j > 0 ) { exactsum [ i ] [ j ] [ k ] += ( exactsum [ i ] [ j - 1 ] [ k ] * 10 + 5 * exactnum [ i ] [ j - 1 ] [ k ] ) % mod ; exactnum [ i ] [ j ] [ k ] += exactnum [ i ] [ j - 1 ] [ k ] % mod ; } if ( k > 0 ) { exactsum [ i ] [ j ] [ k ] += ( exactsum [ i ] [ j ] [ k - 1 ] * 10 + 6 * exactnum [ i ] [ j ] [ k - 1 ] ) % mod ; exactnum [ i ] [ j ] [ k ] += exactnum [ i ] [ j ] [ k - 1 ] % mod ; } ans += exactsum [ i ] [ j ] [ k ] % mod ; ans %= mod ; } } } return ans ; } public static void main ( String [ ] args ) { int x = 1 , y = 1 , z = 1 ; System . out . println ( getSum ( x , y , z ) % mod ) ; } }"],"bleu":0.6327727842925197,"rouge_l":0.8140461299446281}
{"id":807,"predictions":["import java . util . * ; class GFG { static int countPairs ( String s ) { Set < Character > st = new HashSet < > ( ) ; st . add ( ' a ' ) ; st . add ( ' e ' ) ; st . add ( ' i ' ) ; st . add ( ' o ' ) ; int count = 0 ; int n = s . length ( ) ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( st . contains ( s . charAt ( i ) ) == st . charAt ( i + 1 ) ) count ++ ; } return count ; } public static void main ( String [ ] args ) { String s = \" geeksforgeeks \" ; System . out . println ( countPairs ( s ) ) ; } }"],"references":["import java . util . * ; class Sol { static int countPairs ( String s ) { Set < Character > st = new HashSet < Character > ( ) ; st . add ( ' a ' ) ; st . add ( ' e ' ) ; st . add ( ' i ' ) ; st . add ( ' o ' ) ; st . add ( ' u ' ) ; int count = 0 ; int n = s . length ( ) ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( st . contains ( s . charAt ( i ) ) && ! st . contains ( s . charAt ( i + 1 ) ) ) count ++ ; } return count ; } public static void main ( String args [ ] ) { String s = \" geeksforgeeks \" ; System . out . println ( countPairs ( s ) ) ; } }"],"bleu":0.8437210350879224,"rouge_l":0.926998172549774}
{"id":808,"predictions":["class GFG { static final int MOD = 1000000007 ; static int MOD = ( int ) 1e9 + 7 ; static int MOD = ( int ) 1e9 + 7 ; static int modulo_13 ( String s , int n ) { int [ ] [ ] dp = new int [ n + 1 ] [ 13 ] ; for ( int i = 0 ; i < n ; ++ i ) { for ( int j = 0 ; j < 10 ; j ++ ) { int nxt = s . charAt ( i ) - '0' ; if ( s . charAt ( i ) == ' ? ' ) nxt = j ; for ( int k = 0 ; k < 13 ; k ++ ) { int rem = ( 10 * k + nXT ) % 13 ; dp [ i + 1 ] [ rem ] += dp [ i ] [ k ] ; dp [ i + 1 ] [ rem ] %= MOD ; } if ( s . charAt ( i ) != ' ? ' ) break ; } return dp [ n ] [ 5 ] ; } public static void main ( String [ ] args ) { String s = \" ? 44\" ; int n = s . length ( ) ; System . out . print ( modulo_13 ( s , n ) ) ; } }"],"references":["class GFG { static int MOD = ( int ) ( 1e9 + 7 ) ; static int modulo_13 ( String s , int n ) { long [ ] [ ] dp = new long [ n + 1 ] [ 13 ] ; dp [ 0 ] [ 0 ] = 1 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 10 ; j ++ ) { int nxt = s . charAt ( i ) - '0' ; if ( s . charAt ( i ) == ' ? ' ) nxt = j ; for ( int k = 0 ; k < 13 ; k ++ ) { int rem = ( 10 * k + nxt ) % 13 ; dp [ i + 1 ] [ rem ] += dp [ i ] [ k ] ; dp [ i + 1 ] [ rem ] %= MOD ; } if ( s . charAt ( i ) != ' ? ' ) break ; } } return ( int ) dp [ n ] [ 5 ] ; } public static void main ( String [ ] args ) { String s = \" ? 44\" ; int n = s . length ( ) ; System . out . println ( modulo_13 ( s , n ) ) ; } }"],"bleu":0.8545611401699602,"rouge_l":0.9156482465462275}
{"id":809,"predictions":["class GFG { static void max_emp ( int a [ ] , int b [ ] , int n , int k ) { int i , j , profit = 1 , l = 0 , r , diff ; b [ 0 ] = 1 ; a [ 1 ] = diff ; b [ 1 ] = diff ; for ( i = 1 ; i < n ; i ++ ) { l = 0 , r = diff ; int sum = 0 ; for ( j = n - 1 ; j > i - 1 ; j -- ) profit = ( a [ r ] - a [ l ] ) - penny ; if ( profit > 0 ) { sum += profit ; } l ++ ; r ++ ; } if ( b [ 0 ] < sum ) { b [ 0 ] = sum ; b [ 1 ] = diff ; } } return 0 ; } public static void main ( String [ ] args ) { int arr [ ] = { 6 , 1 , 7 , 2 , 8 , 4 } ; int n = arr . length ; int b [ ] = new int [ 2 ] ; max_increasing ( arr , b , n , 10 ) ; System . out . println ( b [ 0 ] + \" , ▁ \" + b [ 1 ] ) ; } }"],"references":["import java . util . * ; class solution { static int max_profit ( int a [ ] , int b [ ] , int n , int fee ) { int i , j , profit ; int l , r , diff_day = 1 , sum = 0 ; b [ 0 ] = 0 ; b [ 1 ] = diff_day ; for ( i = 1 ; i < n ; i ++ ) { l = 0 ; r = diff_day ; sum = 0 ; for ( j = n - 1 ; j >= i ; j -- ) { profit = ( a [ r ] - a [ l ] ) - fee ; if ( profit > 0 ) { sum = sum + profit ; } l ++ ; r ++ ; } if ( b [ 0 ] < sum ) { b [ 0 ] = sum ; b [ 1 ] = diff_day ; } diff_day ++ ; } return 0 ; } public static void main ( String args [ ] ) { int arr [ ] = { 6 , 1 , 7 , 2 , 8 , 4 } ; int n = arr . length ; int [ ] b = new int [ 2 ] ; int tranFee = 2 ; max_profit ( arr , b , n , tranFee ) ; System . out . println ( b [ 0 ] + \" , ▁ \" + b [ 1 ] ) ; } }"],"bleu":0.7239465848444576,"rouge_l":0.85607300188798}
{"id":810,"predictions":["class GFG { static int MAX = 25 ; static int getMinSum ( int arr [ ] , int n ) { int [ ] bits_count = new int [ MAX ] ; int max_bit = 0 , sum = 0 , ans = 0 ; for ( int d = 0 ; d < n ; d ++ ) { int fe = arr [ d ] , f = 0 ; while ( e > 0 ) { int rem = e % 2 ; e = e \/ 2 ; if ( rem == 1 ) { bits_count [ f ] += rem ; } f ++ ; } max_bit = Math . max ( max_bit , f ) ; } for ( int d = 0 ; d < max_bit ; d ++ ) { int temp = ( int ) Math . pow ( 2 , d ) ; if ( bits_count [ d ] > n \/ 2 ) ans += temp ; } for ( int d = 0 ; d < n ; d ++ ) { arr [ d ] = arr [ d ] ^ ans ; sum = sum + arr [ d ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 5 , 7 , 11 , 15 } ; int n = arr . length ; System . out . print ( getMinSum ( arr , n ) ) ; } }"],"references":["class GFG { static int MAX = 25 ; static int getMinSum ( int arr [ ] , int n ) { int bits_count [ ] = new int [ MAX ] , max_bit = 0 , sum = 0 , ans = 0 ; for ( int d = 0 ; d < n ; d ++ ) { int e = arr [ d ] , f = 0 ; while ( e > 0 ) { int rem = e % 2 ; e = e \/ 2 ; if ( rem == 1 ) { bits_count [ f ] += rem ; } f ++ ; } max_bit = Math . max ( max_bit , f ) ; } for ( int d = 0 ; d < max_bit ; d ++ ) { int temp = ( int ) Math . pow ( 2 , d ) ; if ( bits_count [ d ] > n \/ 2 ) ans = ans + temp ; } for ( int d = 0 ; d < n ; d ++ ) { arr [ d ] = arr [ d ] ^ ans ; sum = sum + arr [ d ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 5 , 7 , 11 , 15 } ; int n = arr . length ; System . out . println ( getMinSum ( arr , n ) ) ; } }"],"bleu":0.9404879754020917,"rouge_l":0.9749032338619054}
{"id":811,"predictions":["class GFG { static void findNums ( int arr [ ] , int n ) { int S = 0 , X = 0 ; for ( int i = 0 ; i < n ; i ++ ) { S += arr [ i ] ; X ^= arr [ i ] ; } System . out . println ( X + \" ▁ \" + S ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 7 } ; int n = arr . length ; findNums ( arr , n ) ; } }"],"references":["class GFG { static void findNums ( int arr [ ] , int n ) { int S = 0 , X = 0 ; for ( int i = 0 ; i < n ; i ++ ) { S += arr [ i ] ; X ^= arr [ i ] ; } System . out . println ( X + \" ▁ \" + ( X + S ) ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 7 } ; int n = arr . length ; findNums ( arr , n ) ; } }"],"bleu":0.950378224548022,"rouge_l":0.9788017076402179}
{"id":812,"predictions":["class GFG { static void bin ( int n ) { if ( n > 1 ) bin ( n >> 1 ) ; System . out . print ( n & 1 ) ; } public static void main ( String [ ] args ) { bin ( ) ; } }"],"references":["class GFG { static void bin ( Integer n ) { if ( n > 1 ) bin ( n >> 1 ) ; System . out . printf ( \" % d \" , n & 1 ) ; } public static void main ( String [ ] args ) { bin ( 131 ) ; System . out . printf ( \" \\n \" ) ; bin ( 3 ) ; } }"],"bleu":0.5660106430675331,"rouge_l":0.7729192546583851}
{"id":813,"predictions":["class GFG { static int Square ( int row , int column , int moves ) { int a = 0 , b = 0 , c = 0 ; int total = 0 , total = 0 ; a = row + moves ; b = row ; c = column ; d = column + moves ; if ( a < 1 ) { a = 1 ; } if ( b < 1 ) { b = 1 ; } if ( b > 8 ) { b = 8 ; } if ( d > 8 ) { d = 8 ; } int total = ( b - a + 1 ) * ( d - c + 1 ) - 1 ; return total ; } public static void main ( String [ ] args ) { int R = 4 , C = 5 , M = 2 ; System . out . println ( Square ( R , C ) ) ; } }"],"references":["class GFG { static int Square ( int row , int column , int moves ) { int a = 0 , b = 0 , c = 0 , d = 0 , total = 0 ; a = row - moves ; b = row + moves ; c = column - moves ; d = column + moves ; if ( a < 1 ) a = 1 ; if ( c < 1 ) c = 1 ; if ( b > 8 ) b = 8 ; if ( d > 8 ) d = 8 ; total = ( b - a + 1 ) * ( d - c + 1 ) - 1 ; return total ; } public static void main ( String [ ] args ) { int R = 4 , C = 5 , M = 2 ; System . out . println ( Square ( R , C , M ) ) ; } }"],"bleu":0.7977534800681758,"rouge_l":0.925492848859683}
{"id":814,"predictions":["import java . util . * ; import java . lang . * ; public class GfG { public static int firstkdigits ( int n , int k ) { int product = 1 ; for ( int i = 0 ; i < n ; i ++ ) product *= n ; while ( ( product \/ Math . pow ( 10 , k ) ) != 0 ) product = product \/ 10 ; return product ; } public static void main ( String [ ] args ) { int n = 15 , k = 4 ; System . out . println ( firstkdigits ( n , k ) ) ; } }"],"references":["public class Digits { static long firstkdigits ( int n , int k ) { long product = 1 ; for ( int i = 0 ; i < n ; i ++ ) product *= n ; while ( ( int ) ( product \/ Math . pow ( 10 , k ) ) != 0 ) product = product \/ 10 ; return product ; } public static void main ( String [ ] args ) { int n = 15 ; int k = 4 ; System . out . println ( firstkdigits ( n , k ) ) ; } }"],"bleu":0.7836371218383521,"rouge_l":0.8857784431137724}
{"id":815,"predictions":["class GFG { static int solve ( int [ ] X , String Y , int N , int K ) { int count [ ] = new int [ N + 1 ] ; int sol = 0 ; count [ 0 ] = 0 ; int i ; count [ 0 ] = 0 ; for ( i = 1 ; i <= N ; i ++ ) { count [ i ] = ( count [ i - 1 ] + Math . abs ( X . charAt ( i - 1 ) - Y . charAt ( i - 1 ) ) ; } int j = 0 ; for ( i = 1 ; i <= N ; i ++ ) { while ( ( count [ i ] - count [ j ] ) > K ) j ++ ; sol = Math . max ( sol , i - j ) ; } return sol ; } public static void main ( String [ ] args ) { int N = 4 ; String X = \" abcd \" ; int Y = 3 ; System . out . println ( solve ( X , Y , N , K ) ) ; } }"],"references":["class GFG { static int solve ( String X , String Y , int N , int K ) { int [ ] count = new int [ N + 1 ] ; int sol = 0 ; count [ 0 ] = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { count [ i ] = count [ i - 1 ] + Math . abs ( X . charAt ( i - 1 ) - Y . charAt ( i - 1 ) ) ; } int j = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { while ( ( count [ i ] - count [ j ] ) > K ) { j ++ ; } sol = Math . max ( sol , i - j ) ; } return sol ; } public static void main ( String [ ] args ) { int N = 4 ; String X = \" abcd \" , Y = \" bcde \" ; int K = 3 ; System . out . print ( solve ( X , Y , N , K ) + \" \\n \" ) ; } }"],"bleu":0.8437562581171743,"rouge_l":0.9172578655151139}
{"id":816,"predictions":["class GFG { static int MAX = 1000 ; static int f [ ] = new int [ MAX ] ; static int fib ( int n ) { if ( n == 0 ) return 0 ; if ( n == 1 || n == 2 ) { return ( f [ n ] = 1 ) ; } if ( f [ n ] != 0 ) { return f [ n ] ; } int k = ( n + 1 ) \/ 2 ; if ( ( n & 1 ) != 0 ) { f [ n ] = ( fib ( k ) * fib ( k ) + fib ( k - 1 ) * fib ( k - 1 ) ; } else f [ n ] = ( 2 * fib ( k - 1 ) + fib ( k ) ) * fib ( k ) ; return f [ n ] ; } static int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } static int findLCMFibonacci ( int a , int b ) { return ( fib ( a ) * fib ( b ) \/ fib ( b ) ; } public static void main ( String [ ] args ) { int a = 3 , b = 12 ; System . out . println ( findLCibonacci ( a , b ) ) ; } }"],"references":["import java . util . * ; class GFG { static int MAX = 1000 ; static int [ ] f = new int [ MAX ] ; static int fib ( int n ) { if ( n == 0 ) return 0 ; if ( n == 1 || n == 2 ) return ( f [ n ] = 1 ) ; if ( f [ n ] != 0 ) return f [ n ] ; int k = 0 ; if ( ( n & 1 ) != 0 ) k = ( n + 1 ) \/ 2 ; else k = n \/ 2 ; if ( ( n & 1 ) != 0 ) f [ n ] = ( fib ( k ) * fib ( k ) + fib ( k - 1 ) * fib ( k - 1 ) ) ; else f [ n ] = ( 2 * fib ( k - 1 ) + fib ( k ) ) * fib ( k ) ; return f [ n ] ; } static int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } static int findLCMFibonacci ( int a , int b ) { return ( fib ( a ) * fib ( b ) ) \/ fib ( gcd ( a , b ) ) ; } public static void main ( String args [ ] ) { int a = 3 , b = 12 ; System . out . println ( findLCMFibonacci ( a , b ) ) ; } }"],"bleu":0.7959120394108439,"rouge_l":0.9057619498343586}
{"id":817,"predictions":["class GFG { static int find_digit ( String s , int n ) { int first_digit = - 1 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( s . charAt ( i ) < '0' || s . charAt ( i ) > '9' ) { first_digit = i ; break ; } } first_digit ++ ; int s_len = first_digit ; int num = 0 ; int i = n - 1 ; while ( i >= 0 ) { if ( s . charAt ( i ) >= '0' && s . charAt ( i ) <= '9' ) { int digit = s . charAt ( i ) - '0' ; num = num + ( p * digit ) ; if ( num >= s_len ) return - 1 ; pw = pw * 10 ; } i -- ; } num = num * 10 ; int q = s_len - num ; if ( q > 9 || q < 0 ) return - 1 ; return req ; } public static void main ( String [ ] args ) { String s = \" abcd0\" ; int n = s . length ( ) ; System . out . println ( find_digit ( s , n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int find_digit ( String s , int n ) { int first_digit = - 1 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( s . charAt ( i ) < '0' || s . charAt ( i ) > '9' ) { first_digit = i ; break ; } } first_digit ++ ; int s_len = first_digit ; int num = 0 , pw = 1 ; int i = n - 1 ; while ( i >= 0 ) { if ( s . charAt ( i ) >= '0' && s . charAt ( i ) <= '9' ) { int digit = s . charAt ( i ) - '0' ; num = num + ( pw * digit ) ; if ( num >= s_len ) return - 1 ; pw = pw * 10 ; } i -- ; } num = num * 10 ; int req = s_len - num ; if ( req > 9 || req < 0 ) return - 1 ; return req ; } public static void main ( String [ ] args ) { String s = \" abcd0\" ; int n = s . length ( ) ; System . out . print ( find_digit ( s , n ) ) ; } }"],"bleu":0.8945660807776542,"rouge_l":0.951407181477887}
{"id":818,"predictions":["class GFG { static int findNthNumber ( int A , int B , int N ) { int sum = 0 ; for ( int i = 2 ; i < N ; i ++ ) { sum = A + B ; A = B ; B = sum ; } return sum ; } public static void main ( String [ ] args ) { int A = 5 , B = 7 ; int N = 10 ; System . out . print ( findNthNumber ( A , B , N ) ) ; } }"],"references":["import java . util . * ; class GFG { static int findNthNumber ( int A , int B , int N ) { int sum = 0 ; for ( int i = 2 ; i < N ; i ++ ) { sum = A + B ; A = B ; B = sum ; } return sum ; } public static void main ( String [ ] args ) { int A = 5 , B = 7 , N = 10 ; System . out . println ( findNthNumber ( A , B , N ) ) ; } }"],"bleu":0.8856056316735288,"rouge_l":0.93621103117506}
{"id":819,"predictions":["class GFG { static int calculateSum ( int n ) { return ( int ) ( Math . pow ( 10 , n + 1 ) * ( 9 * n - 1 ) + 10 ) \/ ( int ) ( Math . pow ( 9 , 3 ) - n * ( n + 1 ) \/ 18 ) ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( calculateSum ( n ) ) ; } }"],"references":["import java . util . * ; class solution { static int calculateSum ( int n ) { return ( ( int ) Math . pow ( 10 , n + 1 ) * ( 9 * n - 1 ) + 10 ) \/ ( int ) Math . pow ( 9 , 3 ) - n * ( n + 1 ) \/ 18 ; } public static void main ( String ar [ ] ) { int n = 3 ; System . out . println ( \" Sum = ▁ \" + calculateSum ( n ) ) ; } }"],"bleu":0.7394697471087883,"rouge_l":0.8844949744603725}
{"id":820,"predictions":["import java . io . * ; class GFG { static int summation ( int n ) { return ( n * ( n + 1 ) * ( 2 * n + 1 ) \/ 6 ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( summation ( n ) ) ; } }"],"references":["import java . util . * ; import java . lang . * ; class GFG { public static int summation ( int n ) { return ( n * ( n + 1 ) * ( 2 * n + 1 ) ) \/ 6 ; } public static void main ( String args [ ] ) { int n = 10 ; System . out . println ( summation ( n ) ) ; } }"],"bleu":0.7677806135669468,"rouge_l":0.901610412530333}
{"id":821,"predictions":["class GFG { static float mean ( float arr [ ] , int n ) { float sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum = sum + arr [ i ] ; return sum \/ n ; } static floatSD ( float arr [ ] , int n ) { float sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum = sum + ( arr [ i ] - mean ( arr [ i ] - mean ( arr , n ) ) ) * ( arr [ i ] - mean ( arr , n ) ) ; return ( ( double ) Math . sqrt ( sum \/ ( n - 1 ) ) ) ; } static float sampleError ( int arr [ ] , int n ) { return SD ( arr , n ) \/ ( Math . sqrt ( n ) ) ; } public static void main ( String args [ ] ) { float arr [ ] = { 78.53 , 81 , 80.25 , 81.5 , 83.6f , 83.0 } ; int n = arr . length ; System . out . println ( sampleError ( arr , n ) ) ; } }"],"references":["class GFG { static float mean ( float arr [ ] , int n ) { float sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum = sum + arr [ i ] ; return sum \/ n ; } static float SSD ( float arr [ ] , int n ) { float sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum = sum + ( arr [ i ] - mean ( arr , n ) ) * ( arr [ i ] - mean ( arr , n ) ) ; return ( float ) Math . sqrt ( sum \/ ( n - 1 ) ) ; } static float sampleError ( float arr [ ] , int n ) { return SSD ( arr , n ) \/ ( float ) Math . sqrt ( n ) ; } public static void main ( String [ ] args ) { float arr [ ] = { 78.53f , 79.62f , 80.25f , 81.05f , 83.21f , 83.46f } ; int n = arr . length ; System . out . println ( sampleError ( arr , n ) ) ; } }"],"bleu":0.8274353062816869,"rouge_l":0.921559871995237}
{"id":822,"predictions":["class GFG { static final int INF = 99999 ; static int sqrtByLongestDivision ( int n ) { int i = 0 ; int udigit = 0 , curdigit ; int cur_divisor = 0 ; int cur_digit = 0 , cur_digit ; while ( n > 0 ) { a [ i ] = n % 100 ; n = n \/ 100 ; i += 1 ; } i -- ; for ( int j = i ; j >= 0 ; j -- ) { cur_rem = n % 100 ; n = cur_d * 100 + a [ j ] ; for ( int k = 0 ; k < 10 ; k ++ ) { cur_rem_divisor = cur_d ; cur_digit = cur_d * 100 + a [ j ] ; for ( int u = 0 ; u < 10 ; u ++ ) { if ( cur_rem [ i ] >= cur_d ) && cur_digit - ( ( cur_divisor * 10 + udigit ) * udigit ) >= 0 ) { cur_remending_digit = cur_d - ( ( curDivisor * 10 + udigit ) * udigit ) >= 0 ) { cur_remending_digit * 10 + ( cur_divisor * 10 + udigit ) * udigit ) >= 0 ) { cur_remor *= 2 ; cur_digit = cur_remor * 2 ; cur_digit = cur_rement ; } } } } return cur_squotient ; } public static void main ( String [ ] args ) { int x = 1225 ; System . out . println ( sqrtByLongNumber ( x ) ) ; } }"],"references":["import java . util . * ; class GFG { static final int INFINITY_ = 9999999 ; static int sqrtByLongDivision ( int n ) { int i = 0 , udigit , j ; int cur_divisor = 0 ; int quotient_units_digit = 0 ; int cur_quotient = 0 ; int cur_dividend = 0 ; int cur_remainder = 0 ; int a [ ] = new int [ 10 ] ; while ( n > 0 ) { a [ i ] = n % 100 ; n = n \/ 100 ; i ++ ; } i -- ; for ( j = i ; j >= 0 ; j -- ) { cur_remainder = INFINITY_ ; cur_dividend = cur_dividend * 100 + a [ j ] ; for ( udigit = 0 ; udigit <= 9 ; udigit ++ ) { if ( cur_remainder >= cur_dividend - ( ( cur_divisor * 10 + udigit ) * udigit ) && cur_dividend - ( ( cur_divisor * 10 + udigit ) * udigit ) >= 0 ) { cur_remainder = cur_dividend - ( ( cur_divisor * 10 + udigit ) * udigit ) ; quotient_units_digit = udigit ; } } cur_quotient = cur_quotient * 10 + quotient_units_digit ; cur_divisor = cur_quotient * 2 ; cur_dividend = cur_remainder ; } return cur_quotient ; } public static void main ( String [ ] args ) { int x = 1225 ; System . out . print ( sqrtByLongDivision ( x ) + \" \\n \" ) ; } }"],"bleu":0.5409217618089359,"rouge_l":0.6661826904867116}
{"id":823,"predictions":["class GFG { static int CountAllPairs ( int N , int K ) { int count = 0 ; if ( N > K ) { count = N - K ; for ( int i = K + 1 ; i <= N ; i ++ ) count += ( ( N - K ) \/ i ) ; } return count ; } public static void main ( String [ ] args ) { int N = 11 ; int K = 5 ; System . out . println ( CountAllPairs ( N , K ) ) ; } }"],"references":["import java . io . * ; class GFG { static int CountAllPairs ( int N , int K ) { int count = 0 ; if ( N > K ) { count = N - K ; for ( int i = K + 1 ; i <= N ; i ++ ) count = count + ( ( N - K ) \/ i ) ; } return count ; } public static void main ( String [ ] args ) { int N = 11 , K = 5 ; System . out . println ( CountAllPairs ( N , K ) ) ; } }"],"bleu":0.8715926989073248,"rouge_l":0.9276497695852537}
{"id":824,"predictions":["class GFG { static String checkNumber ( int N ) { int temp = N ; while ( temp > 0 ) { if ( temp % 1000 == 144 ) temp \/= 1000 ; else if ( temp % 10 == 14 ) temp \/= 10 ; else if ( temp % 10 == 1 ) temp \/= 10 ; else return \" YES \" ; } return \" NO \" ; } public static void main ( String [ ] args ) { int N = 1414 ; System . out . println ( checkNumber ( N ) ) ; } }"],"references":["import java . io . * ; class GFG { static String checkNumber ( int N ) { int temp = N ; while ( temp > 0 ) { if ( temp % 1000 == 144 ) temp \/= 1000 ; else if ( temp % 100 == 14 ) temp \/= 100 ; else if ( temp % 10 == 1 ) temp \/= 10 ; else { return \" NO \" ; } } return \" YES \" ; } public static void main ( String [ ] args ) { int N = 1414 ; System . out . println ( checkNumber ( N ) ) ; } }"],"bleu":0.8492245708445697,"rouge_l":0.9148170365926814}
{"id":825,"predictions":["public class GFG { static void printNumbers ( int N ) { int flag = 1 ; int x = N ; if ( N > 0 ) { while ( x > 0 && flag == 1 ) { int digit = x % 10 ; if ( digit != 1 && digit != 3 ) flag = 0 ; x = x \/ 10 ; } if ( flag == 1 ) System . out . print ( N + \" ▁ \" ) ; printNumbers ( N - 1 ) ; } } public static void main ( String [ ] args ) { int N = 20 ; printNumbers ( N ) ; } }"],"references":["class GFG { static void printNumbers ( int N ) { int flag = 1 ; int x = N ; if ( N > 0 ) { while ( x > 0 && flag == 1 ) { int digit = x % 10 ; if ( digit != 1 && digit != 3 ) { flag = 0 ; } x = x \/ 10 ; } if ( flag == 1 ) { System . out . print ( N + \" ▁ \" ) ; } printNumbers ( N - 1 ) ; } } public static void main ( String [ ] args ) { int N = 20 ; printNumbers ( N ) ; } }"],"bleu":0.9163898979361483,"rouge_l":0.9770598615447266}
{"id":826,"predictions":["class GFG { static int getPosition ( int a [ ] , int n , int m ) { for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = ( a [ i ] \/ m + ( a [ i ] % m != 0 ) ) ; } int ans = - 1 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( maxx < a [ i ] ) { maxx = a [ i ] ; ans = i ; } } return ans + 1 ; } public static void main ( String [ ] args ) { int a [ ] = { 2 , 5 , 4 } ; int n = a . length ; int m = 2 ; System . out . println ( getPosition ( a , n , m ) ) ; } }"],"references":["import java . util . * ; class solution { static int getPosition ( int a [ ] , int n , int m ) { for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = ( a [ i ] \/ m + ( a [ i ] % m ) ) ; } int ans = - 1 , max = - 1 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( max < a [ i ] ) { max = a [ i ] ; ans = i ; } } return ans + 1 ; } public static void main ( String args [ ] ) { int a [ ] = { 2 , 5 , 4 } ; int n = a . length ; int m = 2 ; System . out . println ( getPosition ( a , n , m ) ) ; } }"],"bleu":0.8623984474787096,"rouge_l":0.9307648292962044}
{"id":827,"predictions":["import java . util . * ; class GFG { static void printArr ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + \" ▁ \" ) ; } static void sortArr ( int arr [ ] , int n , int k ) { int prev = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % k == 0 ) { if ( prev != - 1 ) { int temp = arr [ prev + 1 ] ; arr [ i ] = arr [ i ] ; arr [ i ] = temp ; } prev = i ; } prev = i ; } } printArr ( arr , n ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 1 , 13 , 3 , 7 , 8 , 21 , 12 } ; int n = arr . length ; int k = 2 ; sortArr ( arr , n , k ) ; } }"],"references":["import java . util . Arrays ; class GFG { static void printArr ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + \" ▁ \" ) ; } static void sortArr ( int arr [ ] , int n , int k ) { int prev = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % k == 0 ) { if ( prev != - 1 ) Arrays . sort ( arr , prev + 1 , i ) ; prev = i ; } } printArr ( arr , n ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 1 , 13 , 3 , 7 , 8 , 21 , 13 , 12 } ; int n = arr . length ; int k = 2 ; sortArr ( arr , n , k ) ; } }"],"bleu":0.829332860061998,"rouge_l":0.912718204488778}
{"id":828,"predictions":["import java . util . * ; import java . lang . * ; import java . io . * ; class GFG { static int countOfBinaryNumber ( int N ) { Queue < Integer > q = new LinkedList < Integer > ( ) ; q . add ( 1 ) ; int cnt = 0 ; while ( ! q . isEmpty ( ) ) { q . remove ( ) ; if ( t <= N ) { cnt ++ ; q . add ( t * 10 ) ; q . add ( t * 10 ) ; } } return cnt ; } static public void main ( String args [ ] ) { int N = 200 ; System . out . println ( countOfBinaryNumber ( N ) ) ; } }"],"references":["import java . util . LinkedList ; import java . util . Queue ; public class GFG { static int countOfBinaryNumberLessThanN ( int N ) { Queue < Integer > q = new LinkedList < > ( ) ; q . add ( 1 ) ; int cnt = 0 ; int t ; while ( q . size ( ) > 0 ) { t = q . peek ( ) ; q . remove ( ) ; if ( t <= N ) { cnt ++ ; q . add ( t * 10 ) ; q . add ( t * 10 + 1 ) ; } } return cnt ; } static public void main ( String [ ] args ) { int N = 200 ; System . out . println ( countOfBinaryNumberLessThanN ( N ) ) ; } }"],"bleu":0.7038540100991314,"rouge_l":0.8583621683967705}
{"id":829,"predictions":["import java . util . * ; class GFG { static int mod = ( int ) ( 1e9 + 7 ) ; static int power ( int p ) { int res = 1 ; for ( int i = 1 ; i <= p ; i ++ ) { res *= 2 ; res %= mod ; } return res % mod ; } static int subsetSum ( int [ ] A ) { int n = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { ans += A [ i ] * i % mod ; ans %= mod ; } return ans * power ( n - 1 ) % mod ; } public static void main ( String [ ] args ) { int A [ ] = { 3 , 7 } ; System . out . println ( subsetSum ( A ) ) ; } }"],"references":["class GFG { static final int mod = ( int ) ( 1e9 + 7 ) ; static long power ( int p ) { long res = 1 ; for ( int i = 1 ; i <= p ; ++ i ) { res *= 2 ; res %= mod ; } return res % mod ; } static long subset_square_sum ( int A [ ] ) { int n = A . length ; long ans = 0 ; for ( int i : A ) { ans += ( 1 * i * i ) % mod ; ans %= mod ; } return ( 1 * ans * power ( n - 1 ) ) % mod ; } public static void main ( String [ ] args ) { int A [ ] = { 3 , 7 } ; System . out . println ( subset_square_sum ( A ) ) ; } }"],"bleu":0.7096868331490962,"rouge_l":0.8353602452733775}
{"id":830,"predictions":["class GFG { static void performQueries ( int [ ] [ ] A , int [ ] [ ] q ) { int n = A . length ; int [ ] pref_xor = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { pref_xor [ i ] = pref_xor [ i - 1 ] ^ A [ i - 1 ] ; } for ( int i = 1 ; i < n ; i ++ ) { int L = i , R = i ; if ( L > R ) { L = L ; R = R ; } if ( L != R && pref_xor [ R ] == pref_xor [ L - 1 ] ) { System . out . println ( \" Yes \" ) ; } else System . out . println ( \" No \" ) ; } public static void main ( String [ ] args ) { int Arr [ ] = { 1 , 1 , 2 , 1 } ; int [ ] [ ] q = { 1 , 5 } , { 1 , 4 } } ; performQueries ( Arr , q ) ; } }"],"references":["import java . util . * ; class GFG { static class pair { int first , second ; public pair ( int first , int second ) { this . first = first ; this . second = second ; } } static void performQueries ( int [ ] A , pair [ ] q ) { int n = A . length ; int [ ] pref_xor = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; ++ i ) { pref_xor [ i ] = pref_xor [ i - 1 ] ^ A [ i - 1 ] ; } for ( pair i : q ) { int L = i . first , R = i . second ; if ( L > R ) { int temp = L ; L = R ; R = temp ; } if ( L != R && pref_xor [ R ] == pref_xor [ L - 1 ] ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } } static public void main ( String [ ] arg ) { int [ ] Arr = { 1 , 1 , 2 , 2 , 1 } ; pair [ ] q = { new pair ( 1 , 5 ) , new pair ( 1 , 4 ) , new pair ( 3 , 4 ) } ; performQueries ( Arr , q ) ; } }"],"bleu":0.5913608364879969,"rouge_l":0.7616853632478632}
{"id":831,"predictions":["class GFG { static String convertToWords ( int n ) { String [ ] one = { \" \" , \" one ▁ \" , \" two \" , \" three \" , \" three \" , \" four \" , \" five \" , \" seven \" , \" nine \" , \" nine \" , \" eight \" , \" nine \" , \" eight \" , \" fourteen \" , \" nine \" , \" eighteen \" , \" eighteen \" , \" eighteen \" , \" eighteen \" , \" nineteen \" , \" eighteen \" , \" nineteen \" , \" twenty ▁ \" , \" twenty ▁ \" , \" twenty ▁ seven \" , \" twenty ▁ \" , \" twenty ▁ \" , \" twenty ▁ \" , \" twenty ▁ \" , \" twenty ▁ \" , \" twenty ▁ \" , \" twenty ▁ \" , \" eighty ▁ \" , \" twenty ▁ \" , \" twenty ▁ \" , \" twenty ▁ Hundred ▁ \" , \" twenty ▁ \" , \" twenty ▁ \" + numToWords ( ( n \/ 100 ) % 100 ) ; if ( n > 100 && n % 10000000 ) str += \" thousand ▁ \" ; return str ; } static String convertToWords ( int n ) { String out = \" \" ; String out += num . toString ( ( ( n \/ 100 ) + \" ▁ \" ) ; out . print ( n > 100 ) ; } public static void main ( String [ ] args ) { int n = 438 ; System . out . println ( convertToWords ( n ) ) ; } }"],"references":["class GFG { static String one [ ] = { \" \" , \" one ▁ \" , \" two ▁ \" , \" three ▁ \" , \" four ▁ \" , \" five ▁ \" , \" six ▁ \" , \" seven ▁ \" , \" eight ▁ \" , \" nine ▁ \" , \" ten ▁ \" , \" eleven ▁ \" , \" twelve ▁ \" , \" thirteen ▁ \" , \" fourteen ▁ \" , \" fifteen ▁ \" , \" sixteen ▁ \" , \" seventeen ▁ \" , \" eighteen ▁ \" , \" nineteen ▁ \" } ; static String ten [ ] = { \" \" , \" \" , \" twenty ▁ \" , \" thirty ▁ \" , \" forty ▁ \" , \" fifty ▁ \" , \" sixty ▁ \" , \" seventy ▁ \" , \" eighty ▁ \" , \" ninety ▁ \" } ; static String numToWords ( int n , String s ) { String str = \" \" ; if ( n > 19 ) { str += ten [ n \/ 10 ] + one [ n % 10 ] ; } else { str += one [ n ] ; } if ( n != 0 ) { str += s ; } return str ; } static String convertToWords ( long n ) { String out = \" \" ; out += numToWords ( ( int ) ( n \/ 10000000 ) , \" crore ▁ \" ) ; out += numToWords ( ( int ) ( ( n \/ 100000 ) % 100 ) , \" lakh ▁ \" ) ; out += numToWords ( ( int ) ( ( n \/ 1000 ) % 100 ) , \" thousand ▁ \" ) ; out += numToWords ( ( int ) ( ( n \/ 100 ) % 10 ) , \" hundred ▁ \" ) ; if ( n > 100 && n % 100 > 0 ) { out += \" and ▁ \" ; } out += numToWords ( ( int ) ( n % 100 ) , \" \" ) ; return out ; } public static void main ( String [ ] args ) { long n = 438237764 ; System . out . printf ( convertToWords ( n ) ) ; } }"],"bleu":0.35596005767035294,"rouge_l":0.5606566372490741}
{"id":832,"predictions":["class Test { static int factorial ( int n ) { int res = 1 ; for ( int i = 2 ; i <= n ; i ++ ) res *= i ; return res ; } public static void main ( String [ ] args ) { int num = 5 ; System . out . println ( \" Factorial ▁ of ▁ \" + num + \" ▁ is ▁ \" + factorial ( 5 ) ) ; } }"],"references":["class Test { static int factorial ( int n ) { int res = 1 , i ; for ( i = 2 ; i <= n ; i ++ ) res *= i ; return res ; } public static void main ( String [ ] args ) { int num = 5 ; System . out . println ( \" Factorial ▁ of ▁ \" + num + \" ▁ is ▁ \" + factorial ( 5 ) ) ; } }"],"bleu":0.9393471131335945,"rouge_l":0.9809766620906061}
{"id":833,"predictions":["import java . io . * ; class GFG { static int getMinCost ( int n , int m ) { int cost = ( n - 1 ) * m + ( m - 1 ) * n ; return cost ; } public static void main ( String [ ] args ) { int n = 4 ; int m = 5 ; System . out . println ( getMinCost ( n , m ) ) ; } }"],"references":["class gfg { static int getMinCost ( int n , int m ) { int cost = ( n - 1 ) * m + ( m - 1 ) * n ; return cost ; } public static void main ( String [ ] args ) { int n = 4 , m = 5 ; System . out . println ( getMinCost ( n , m ) ) ; } }"],"bleu":0.8473024247500941,"rouge_l":0.9307973350526543}
{"id":834,"predictions":["class GFG { static int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } public static void main ( String [ ] args ) { int a = 2 , b = 4 ; System . out . println ( gcd ( a , b ) ) ; } }"],"references":["import java . util . * ; import java . lang . * ; class GFG { public static int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } public static void main ( String [ ] args ) { int a = 2 ; int b = 4 ; System . out . println ( gcd ( a , b ) ) ; } }"],"bleu":0.7489878190527338,"rouge_l":0.868551382583574}
{"id":835,"predictions":["import java . util . * ; class solution { static int calculateSum ( int n ) { return n * ( n + 1 ) \/ 2 + ( int ) Math . pow ( ( n * ( n + 1 ) \/ 2 ) ) ; } public static void main ( String arr [ ] ) { int n = 3 ; System . out . print ( \" Sum ▁ = ▁ \" + calculateSum ( n ) ) ; } }"],"references":["public class GFG { static int calculateSum ( int n ) { return n * ( n + 1 ) \/ 2 + ( int ) Math . pow ( ( n * ( n + 1 ) \/ 2 ) , 2 ) ; } public static void main ( String args [ ] ) { int n = 3 ; System . out . println ( \" Sum ▁ = ▁ \" + calculateSum ( n ) ) ; } }"],"bleu":0.8218927549351454,"rouge_l":0.9097423978307185}
{"id":836,"predictions":["class GFG { static int findLength ( String str ) { int n = str . length ( ) ; int maxlen = 0 ; int sum [ ] [ ] = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) sum [ i ] [ i ] = ( int ) ( str . charAt ( i ) ) - '0' ) ; for ( int len = 2 ; len <= n ; len ++ ) { for ( int i = 0 ; i <= n - len ; i ++ ) { int j = i + len - 1 ; int k = len \/ 2 ; sum [ i ] [ j ] = sum [ i ] [ j - k + 1 ] ; sum [ i ] [ j ] = sum [ i ] [ j - k + 1 ] ; if ( len % 2 == 0 && sum [ i ] [ j - k + 1 ] == sum [ ( j - k + 1 ) ] [ j ] maxlen = length ; } } return maxlen ; } public static void main ( String [ ] args ) { String str = \"153231\" ; System . out . println ( \" Length ▁ of ▁ the ▁ substring ▁ is ▁ \" + findLength ( str ) ) ; } }"],"references":["import java . io . * ; class GFG { static int findLength ( String str ) { int n = str . length ( ) ; int maxlen = 0 ; int sum [ ] [ ] = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) sum [ i ] [ i ] = str . charAt ( i ) - '0' ; for ( int len = 2 ; len <= n ; len ++ ) { for ( int i = 0 ; i < n - len + 1 ; i ++ ) { int j = i + len - 1 ; int k = len \/ 2 ; sum [ i ] [ j ] = sum [ i ] [ j - k ] + sum [ j - k + 1 ] [ j ] ; if ( len % 2 == 0 && sum [ i ] [ j - k ] == sum [ ( j - k + 1 ) ] [ j ] && len > maxlen ) maxlen = len ; } } return maxlen ; } public static void main ( String [ ] args ) { String str = \"153803\" ; System . out . println ( \" Length ▁ of ▁ the ▁ substring ▁ is ▁ \" + findLength ( str ) ) ; } }"],"bleu":0.850549872677779,"rouge_l":0.9093117940635672}
{"id":837,"predictions":["class GFG { static int solve ( int [ ] a , int [ ] b , int n ) { int s = 0 ; for ( int i = 0 ; i < n ; i ++ ) s += a [ i ] + b [ i ] ; if ( n == 1 ) return a [ 0 ] + b [ 0 ] ; if ( s % n != 0 ) return - 1 ; int x = s \/ n ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] > x ) return - 1 ; if ( i > 0 ) { a [ i ] += b [ i - 1 ] ; b [ i - 1 ] = 0 ; } if ( a [ i ] == x ) continue ; int y = a [ i ] + b [ i ] ; if ( y == x ) { a [ i ] = y ; b [ i ] = 0 ; if ( i + 1 < n && a [ i + 1 ] == x ) { a [ i ] += b [ i + 1 ] ; b [ i + 1 ] = 0 ; continue ; } if ( a [ i ] + b [ i ] == x ) { a [ i ] += b [ i + 1 ] ; b [ i + 1 ] = 0 ; continue ; } if ( i + 1 < n && a [ i ] + b [ i + 1 ] == x ) { a [ i ] += b [ i + 1 ] ; b [ i + 1 ] = 0 ; continue ; } } return - 1 ; } public static void main ( String [ ] args ) { int [ ] a = { 6 , 14 , 21 , 10 } ; int [ ] b = { 15 , 7 , 10 , 10 } ; int n = a . length ; System . out . println ( solve ( a , b , n ) ) ; } }"],"references":["class GFG { static int solve ( int a [ ] , int b [ ] , int n ) { int i ; int s = 0 ; for ( i = 0 ; i < n ; i ++ ) s += ( a [ i ] + b [ i ] ) ; if ( n == 1 ) return a [ 0 ] + b [ 0 ] ; if ( s % n != 0 ) return - 1 ; int x = s \/ n ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] > x ) return - 1 ; if ( i > 0 ) { a [ i ] += b [ i - 1 ] ; b [ i - 1 ] = 0 ; } if ( a [ i ] == x ) continue ; int y = a [ i ] + b [ i ] ; if ( i + 1 < n ) y += b [ i + 1 ] ; if ( y == x ) { a [ i ] = y ; b [ i ] = 0 ; continue ; } if ( a [ i ] + b [ i ] == x ) { a [ i ] += b [ i ] ; b [ i ] = 0 ; continue ; } if ( i + 1 < n && a [ i ] + b [ i + 1 ] == x ) { a [ i ] += b [ i + 1 ] ; b [ i + 1 ] = 0 ; continue ; } return - 1 ; } for ( i = 0 ; i < n ; i ++ ) if ( b [ i ] != 0 ) return - 1 ; return x ; } public static void main ( String [ ] args ) { int a [ ] = { 6 , 14 , 21 , 1 } ; int b [ ] = { 15 , 7 , 10 , 10 } ; int n = a . length ; System . out . println ( solve ( a , b , n ) ) ; } }"],"bleu":0.8494389464164654,"rouge_l":0.8817378988586186}
{"id":838,"predictions":["class GFG { static float sumOfSeries ( int n ) { float res = 0.0f , sum = 1 ; int prod = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { sum = sum + i ; prod = prod * i ; res = res + ( sum \/ prod ) ; } return res ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["class GFG { static double sumOfSeries ( int n ) { double res = 0.0 ; int sum = 0 , prod = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { sum += i ; prod *= i ; res += ( ( double ) sum \/ prod ) ; } return res ; } public static void main ( String arg [ ] ) { int n = 4 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"bleu":0.6839006659357871,"rouge_l":0.8400757445343432}
{"id":839,"predictions":["class GFG { static int number_of_digits ( int n ) { int i = 4 ; int res = 0 ; while ( true ) { i *= 4 ; res ++ ; if ( sum >= n ) break ; } return res ; } public static void main ( String [ ] args ) { int n = 21 ; System . out . println ( number_of_digits ( n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int number_of_digits ( int n ) { int i ; int res ; int sum = 0 ; for ( i = 4 , res = 1 ; ; i *= 4 , res ++ ) { sum += i ; if ( sum >= n ) break ; } return res ; } public static void main ( String [ ] args ) { int n = 21 ; System . out . println ( number_of_digits ( n ) ) ; } }"],"bleu":0.6436783548038583,"rouge_l":0.7911654135338348}
{"id":840,"predictions":["import java . io . * ; class GFG { static double nonsquare ( int n ) { return n + ( int ) ( 0.5 + ( int ) Math . sqrt ( n ) ) ; } static void printNonSquare ( int n ) { for ( int i = 1 ; i <= n ; i ++ ) System . out . print ( nonsquare ( i ) + \" ▁ \" ) ; } static public void main ( String [ ] args ) { int n = 10 ; printNonSquare ( n ) ; } }"],"references":["import java . io . * ; import java . math . * ; class GFG { static int nonsquare ( int n ) { return n + ( int ) ( 0.5 + ( Math . sqrt ( n ) ) ) ; } static void printNonSquare ( int n ) { for ( int i = 1 ; i <= n ; i ++ ) System . out . print ( nonsquare ( i ) + \" ▁ \" ) ; } public static void main ( String args [ ] ) { int n = 10 ; printNonSquare ( n ) ; } }"],"bleu":0.8237502999977903,"rouge_l":0.9183001411321937}
{"id":841,"predictions":["import java . io . * ; class GFG { static double distance ( double x1 , double y1 , double x2 , double y2 ) { double return Math . sqrt ( Math . pow ( x2 - x1 , 2 ) + Math . pow ( y2 - y1 , 2 ) * 1.0 ) ; } public static void main ( String [ ] args ) { double distance ( 3 , 4 , 4 , 3 ) ; System . out . println ( distance ( 3 , 4 , 4 , 3 ) ) ; } }"],"references":["class GFG { static double distance ( int x1 , int y1 , int x2 , int y2 ) { return Math . sqrt ( Math . pow ( x2 - x1 , 2 ) + Math . pow ( y2 - y1 , 2 ) * 1.0 ) ; } public static void main ( String [ ] args ) { System . out . println ( Math . round ( distance ( 3 , 4 , 4 , 3 ) * 100000.0 ) \/ 100000.0 ) ; } }"],"bleu":0.6626578496156157,"rouge_l":0.8166838311019566}
{"id":842,"predictions":["import java . util . * ; class GFG { static void evenOddInsertion ( int arr [ ] , int n ) { for ( int i = 2 ; i < n ; i ++ ) { int j = i - 2 ; int temp = arr [ i ] ; if ( ( ( i + 1 ) & 1 == 1 ) ) { while ( temp >= arr [ j ] && j >= 0 ) arr [ j + 2 ] = arr [ j ] ; arr [ j + 2 ] = temp ; } else { while ( temp <= arr [ j ] && j >= 0 ) arr [ j + 2 ] = arr [ j ] ; arr [ j + 2 ] = temp ; } } } static void printArray ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + \" ▁ \" ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 12 , 11 , 13 , 5 , 6 } ; int n = arr . length ; evenOddInsertion ( arr , n ) ; printArray ( arr , n ) ; } }"],"references":["class GFG { static void evenOddInsertionSort ( int arr [ ] , int n ) { for ( int i = 2 ; i < n ; i ++ ) { int j = i - 2 ; int temp = arr [ i ] ; if ( ( ( i + 1 ) & 1 ) == 1 ) { while ( j >= 0 && temp >= arr [ j ] ) { arr [ j + 2 ] = arr [ j ] ; j -= 2 ; } arr [ j + 2 ] = temp ; } else { while ( j >= 0 && temp <= arr [ j ] ) { arr [ j + 2 ] = arr [ j ] ; j -= 2 ; } arr [ j + 2 ] = temp ; } } } static void printArray ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { System . out . printf ( \" % d ▁ \" , arr [ i ] ) ; } System . out . printf ( \" \\n \" ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 12 , 11 , 13 , 5 , 6 } ; int n = arr . length ; evenOddInsertionSort ( arr , n ) ; printArray ( arr , n ) ; } }"],"bleu":0.76792071470732,"rouge_l":0.868155762008302}
{"id":843,"predictions":["class GFG { static int search ( int arr [ ] , int l , int h , int key ) { if ( l > h ) return - 1 ; int mid = ( l + h ) \/ 2 ; if ( arr [ mid ] == key ) return mid ; if ( ( arr [ l ] == arr [ mid ] ) && ( arr [ h ] == arr [ mid ] ) ) { l ++ ; h -- ; } if ( arr [ l ] <= arr [ mid ] ) { if ( key >= arr [ l ] && key <= arr [ mid ] ) return search ( arr , l , mid - 1 , key ) ; return search ( arr , mid + 1 , h , key ) ; } if ( key >= arr [ mid ] && key <= arr [ h ] ) return search ( arr , mid + 1 , h , key ) ; return search ( arr , l , mid - 1 , key ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 3 , 1 , 2 , 3 , 3 , 3 } ; int n = arr . length ; int key = 3 ; System . out . println ( search ( arr , 0 , n - 1 , key ) ) ; } }"],"references":["class GFG { static int search ( int arr [ ] , int l , int h , int key ) { if ( l > h ) return - 1 ; int mid = ( l + h ) \/ 2 ; if ( arr [ mid ] == key ) return mid ; if ( ( arr [ l ] == arr [ mid ] ) && ( arr [ h ] == arr [ mid ] ) ) { ++ l ; -- h ; } if ( arr [ l ] <= arr [ mid ] ) { if ( key >= arr [ l ] && key <= arr [ mid ] ) return search ( arr , l , mid - 1 , key ) ; return search ( arr , mid + 1 , h , key ) ; } if ( key >= arr [ mid ] && key <= arr [ h ] ) return search ( arr , mid + 1 , h , key ) ; return search ( arr , l , mid - 1 , key ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 3 , 1 , 2 , 3 , 3 } ; int n = arr . length ; int key = 3 ; System . out . println ( search ( arr , 0 , n - 1 , key ) ) ; } }"],"bleu":0.9717215635754773,"rouge_l":0.9890208093961446}
{"id":844,"predictions":["class GFG { static boolean is_name ( char [ ] arr1 , char [ ] arr2 ) { for ( int i = 0 ; i < arr1 . length ; i ++ ) { if ( arr1 [ i ] & arr [ i ] ) return true ; } return false ; } static boolean overlapping ( char [ ] arr1 , char [ ] arr2 ) { for ( int i = 0 ; i < arr1 . length ; i ++ ) { if ( arr1 [ i ] == arr [ i ] ) return true ; } return false ; } static public void main ( String [ ] args ) { String s1 = \" geeksforgeeks \" , s2 = \" geeks \" ; String str1 = \" geeks \" ; String str2 = \" geeks \" ; if ( is_or_no ) { System . out . println ( \" Yes \" ) ; } else { System . out . println ( \" No \" ) ; } } }"],"references":["import java . util . * ; class GFG { static boolean check ( String s1 , String s2 ) { Map < Character , Integer > mp = new HashMap < > ( ) ; for ( int i = 0 ; i < s1 . length ( ) ; i ++ ) { mp . put ( s1 . charAt ( i ) , mp . get ( s1 . charAt ( i ) ) == null ? 1 : mp . get ( s1 . charAt ( i ) ) + 1 ) ; } for ( int i = 0 ; i < s2 . length ( ) ; i ++ ) { if ( mp . get ( s2 . charAt ( i ) ) > 0 ) { return true ; } } return false ; } public static void main ( String [ ] args ) { String s1 = \" geeksforgeeks \" , s2 = \" geeks \" ; boolean yes_or_no = check ( s1 , s2 ) ; if ( yes_or_no == true ) { System . out . println ( \" Yes \" ) ; } else { System . out . println ( \" No \" ) ; } } }"],"bleu":0.4260656510401275,"rouge_l":0.5856646250620758}
{"id":845,"predictions":["import java . util . * ; class solution { static int nthTerm ( int n ) { return 2 * ( int ) Math . pow ( n , 2 ) + 3 * n - 5 ; } public static void main ( String arr [ ] ) { int N = 4 ; System . out . println ( nthTerm ( N ) ) ; } }"],"references":["public class GFG { static int nthTerm ( int n ) { return 2 * ( int ) Math . pow ( n , 2 ) + 3 * n - 5 ; } public static void main ( String args [ ] ) { int N = 4 ; System . out . println ( nthTerm ( N ) ) ; } }"],"bleu":0.8374168852405066,"rouge_l":0.917858904785397}
{"id":846,"predictions":["class GFG { static int [ ] arr = new int [ 32 ] ; static void balTernary ( int den ) { int carry = 0 , base = 0 , i = 31 ; while ( den > 0 ) { int rem = ( den % base ) + carry ; if ( rem == 0 ) { arr [ i ] = 0 ; carry = 0 ; i -- ; } else if ( rem == 1 ) { arr [ i ] = 1 ; carry = i - 1 ; } else if ( rem == 3 ) { arr [ i ] = - 1 ; carry = i - 1 ; } else if ( rem == 1 ) arr [ i ] = 0 ; } if ( carry == 1 ) arr [ i ] = 1 ; } static void dennary ( int number ) { int ans = 0 , rem = 1 ; int base = 1 , base = 1 ; while ( number > 0 ) { int rem = number % 3 ; ans = ans + rem * base ; number \/= 3 ; base = base * 10 ; } return ans ; } static voidhenary ( int number ) { int ans = 0 , rem = 1 , base = 1 ; while ( number != 0 ) { int rem = number % 3 ; ans = ans + rem * base ; number \/= 10 ; } return ; } public static void main ( String [ ] args ) { int number = 3056 ;onal ( number ) ; } }"],"references":["import java . util . * ; class GFG { static int [ ] arr = new int [ 33 ] ; static void balTernary ( int ter ) { int carry = 0 , base = 10 ; int i = 32 ; while ( ter > 0 ) { int rem = ter % base ; rem = rem + carry ; if ( rem == 0 ) { arr [ i -- ] = 0 ; carry = 0 ; } else if ( rem == 1 ) { arr [ i -- ] = 1 ; carry = 0 ; } else if ( rem == 2 ) { arr [ i -- ] = - 1 ; carry = 1 ; } else if ( rem == 3 ) { arr [ i -- ] = 0 ; carry = 1 ; } ter = ( int ) ( ter \/ base ) ; } if ( carry == 1 ) arr [ i ] = 1 ; } static int ternary ( int number ) { int ans = 0 , rem = 1 , base = 1 ; while ( number > 0 ) { rem = number % 3 ; ans = ans + rem * base ; number = ( int ) ( number \/ 3 ) ; base = base * 10 ; } return ans ; } public static void main ( String args [ ] ) { int number = 3056 ; int ter = ternary ( number ) ; Arrays . fill ( arr , 0 ) ; balTernary ( ter ) ; int i = 0 ; while ( arr [ i ] == 0 ) { i ++ ; } for ( int j = i ; j <= 32 ; j ++ ) { if ( arr [ j ] == - 1 ) System . out . print ( ' Z ' ) ; else System . out . print ( arr [ j ] ) ; } } }"],"bleu":0.533023921667463,"rouge_l":0.6623336901666921}
{"id":847,"predictions":["import java . util . * ; class GFG { static class Node { int data ; Node left , right ; } ; static Node newNode ( int data ) { Node temp = new Node ( ) ; temp . data = data ; temp . left = temp . right = null ; return temp ; } static void newNode ( int root ) { Queue < Node > q = new LinkedList < > ( ) ; q . add ( root ) ; sz . add ( root ) ; int sz = 0 ; while ( q . size ( ) > 0 ) { Vector < Integer > v = new Vector < > ( ) ; int sz = q . size ( ) ; for ( int i = 0 ; i < sz ; i ++ ) { Integer temp = q . peek ( ) ; q . remove ( ) ; vz . add ( temp . data ) ; if ( temp . left != null ) q . add ( temp . left ) ; if ( temp . right != null ) q . add ( temp . right ) ; } s . add ( v ) ; } while ( ! s . isEmpty ( ) ) { v . add ( s . peek ( ) ) ; s . pop ( ) ; } System . out . println ( \" Specific ▁ Level ▁ Traversal ▁ \" + v . data ) ; } public static void main ( String [ ] args ) { Node root = new Node ( 1 ) ; root . left = new Node ( 2 ) ; root . right = new Node ( 3 ) ; root . left . left = new Node ( 3 ) ; root . left . right = new Node ( 3 ) ; root . right . left . right = new Node ( 4 ) ; System . out . println ( \" Specific ▁ Level ▁ Traversal ▁ \" + \" of ▁ binary ▁ is ▁ \" ) ; } }"],"references":["import java . util . * ; class GFG { static class Node { int data ; Node left ; Node right ; Node ( int value ) { data = value ; left = null ; right = null ; } } ; static void specific_level_order_traversal ( Node root ) { Queue < Node > q = new LinkedList < > ( ) ; Stack < Vector < Integer > > s = new Stack < Vector < Integer > > ( ) ; q . add ( root ) ; int sz ; while ( q . size ( ) > 0 ) { Vector < Integer > v = new Vector < Integer > ( ) ; sz = q . size ( ) ; for ( int i = 0 ; i < sz ; ++ i ) { Node temp = q . peek ( ) ; q . remove ( ) ; v . add ( temp . data ) ; if ( temp . left != null ) q . add ( temp . left ) ; if ( temp . right != null ) q . add ( temp . right ) ; } s . push ( v ) ; } while ( s . size ( ) > 0 ) { Vector < Integer > v = s . peek ( ) ; s . pop ( ) ; for ( int i = 0 , j = v . size ( ) - 1 ; i < j ; ++ i ) { System . out . print ( v . get ( i ) + \" ▁ \" + v . get ( j ) + \" ▁ \" ) ; j -- ; } } System . out . println ( root . data ) ; } public static void main ( String args [ ] ) { Node root = new Node ( 1 ) ; root . left = new Node ( 2 ) ; root . right = new Node ( 3 ) ; System . out . println ( \" Specific ▁ Level ▁ Order ▁ traversal \" + \" ▁ of ▁ binary ▁ tree ▁ is \" ) ; specific_level_order_traversal ( root ) ; } }"],"bleu":0.6445209643424439,"rouge_l":0.7319471518301928}
{"id":848,"predictions":["class GFG { static int sum ( int h ) { int return ( int ) ( Math . pow ( 2 , h - 1 ) ; } public static void main ( String [ ] args ) { int L = 3 ; System . out . println ( sum ( L ) ) ; } }"],"references":["class GFG { static int sum ( int h ) { return ( int ) Math . pow ( 2 , h - 1 ) ; } public static void main ( String [ ] args ) { int L = 3 ; System . out . println ( sum ( L ) ) ; } }"],"bleu":0.9128953582819583,"rouge_l":0.9858236461582082}
{"id":849,"predictions":["class GFG { static int countDivisors ( int N , int a , int b ) { int count1 = N \/ a ; int count2 = N \/ b ; int count3 = ( N \/ ( a * b ) ) ; return count1 + count2 - count3 ; } public static void main ( String [ ] args ) { int N = 1000 , a = 3 , b = 4 ; System . out . println ( countDivisors ( N , a , b ) ) ; } }"],"references":["import java . io . * ; class GFG { public static int countDivisors ( int N , int a , int b ) { int count1 = N \/ a ; int count2 = N \/ b ; int count3 = ( N \/ ( a * b ) ) ; return count1 + count2 - count3 ; } public static void main ( String [ ] args ) { int N = 1000 , a = 3 , b = 4 ; System . out . println ( countDivisors ( N , a , b ) ) ; } }"],"bleu":0.9034782396485156,"rouge_l":0.9521753570242445}
{"id":850,"predictions":["import java . io . * ; class GFG { static int number_cake ( int n ) { return ( n * n * n + 5 * n + 6 ) \/ 6 ; } public static void main ( String [ ] args ) { int n = 2 ; System . out . println ( number_cake ( n ) ) ; n = 8 ; System . out . println ( number_cake ( n ) ) ; n = 25 ; System . out . println ( number_cake ( n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int number_cake ( int n ) { return ( n * n * n + 5 * n + 6 ) \/ 6 ; } public static void main ( String [ ] args ) { int n = 2 ; System . out . println ( number_cake ( n ) ) ; n = 8 ; System . out . println ( number_cake ( n ) ) ; n = 25 ; System . out . println ( number_cake ( n ) ) ; } }"],"bleu":1.0,"rouge_l":1.0}
{"id":851,"predictions":["class GFG { static int MAX = 1000001 ; static boolean [ ] prime = new boolean [ MAX + 1 ] ; static void SieveOfEratosthenes ( ) { for ( int i = 0 ; i < MAX + 1 ; i ++ ) prime [ i ] = true ; prime [ 1 ] = false ; prime [ 1 ] = false ; for ( int p = 2 ; p * p <= MAX ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i <= MAX ; i += p ) prime [ i ] = false ; } } } static void find_Prime ( int sum ) { boolean [ ] prime = new boolean [ MAX + 1 ] ; for ( int i = 0 ; i < MAX + 1 ; i ++ ) prime [ i ] = SieveOfEratosthenes ( ) ; for ( int i = sum \/ 2 ; i > 1 ; i -- ) { if ( prime [ i ] && prime [ sum - i ] ) { System . out . print ( i + \" ▁ \" + ( sum - i ) ) ; return ; } } System . out . println ( \" Cannot ▁ be ▁ formed ▁ \" + \" of ▁ two ▁ primes \" ) ; } public static void main ( String [ ] args ) { int sum = 1002 ; find_Prime ( sum ) ; } }"],"references":["class GFG { static final int MAX = 100000000 ; static boolean prime [ ] = new boolean [ MAX + 1 ] ; static void SieveOfEratosthenes ( ) { for ( int i = 0 ; i < prime . length ; i ++ ) { prime [ i ] = true ; } prime [ 1 ] = false ; for ( int p = 2 ; p * p <= MAX ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i <= MAX ; i += p ) { prime [ i ] = false ; } } } } static void find_Prime ( int sum ) { for ( int i = sum \/ 2 ; i > 1 ; i -- ) { if ( prime [ i ] && prime [ sum - i ] ) { System . out . println ( i + \" ▁ \" + ( sum - i ) ) ; return ; } } System . out . println ( \" Cannot ▁ be ▁ represented ▁ as ▁ sum ▁ of ▁ two ▁ primes \" ) ; } public static void main ( String [ ] args ) { SieveOfEratosthenes ( ) ; int sum = 1002 ; find_Prime ( sum ) ; } }"],"bleu":0.7367261162391768,"rouge_l":0.8617070433691992}
{"id":852,"predictions":["class GFG { static void generateNumbers ( int factor [ ] , int n , int k ) { int next [ ] = new int [ k ] ; int output [ ] = new int [ 0 ] ; for ( int i = 0 ; i < n ; i ++ ) { int to [ ] = 0 ; for ( int j = 0 ; j < k ; j ++ ) { if ( next [ j ] < next [ to [ to ] ) toincrement = j ; } if ( output [ to [ to ] < nextIncrement ) { output [ to [ to ] ; System . out . print ( next [ toIncrement ] + \" ▁ \" ) ; i ++ ; } next [ to [ tore ] += factor [ toIncrement ] ; } } public static void main ( String [ ] args ) { int factor [ ] = { 3 , 5 , 7 } ; int n = 10 , k = factor . length ; generateNumbers ( factor , n , k ) ; } }"],"references":["import java . io . * ; class GFG { static void generateNumbers ( int factor [ ] , int n , int k ) { int next [ ] = new int [ k ] ; int output = 0 ; for ( int i = 0 ; i < n ; ) { int toincrement = 0 ; for ( int j = 0 ; j < k ; j ++ ) if ( next [ j ] < next [ toincrement ] ) toincrement = j ; if ( output != next [ toincrement ] ) { output = next [ toincrement ] ; System . out . print ( next [ toincrement ] + \" ▁ \" ) ; i ++ ; } next [ toincrement ] += factor [ toincrement ] ; } } public static void main ( String [ ] args ) { int factor [ ] = { 3 , 5 , 7 } ; int n = 10 ; int k = factor . length ; generateNumbers ( factor , n , k ) ; } }"],"bleu":0.7317205173806931,"rouge_l":0.8732321490169024}
{"id":853,"predictions":["import java . util . * ; class GFG { static int lengthOfSmallestSubsequence ( int K , int [ ] v ) { Queue < Integer > pq = new LinkedList < Integer > ( ) ; for ( int i = 0 ; i < v . length ; i ++ ) pq . add ( p [ i ] ) ; Arrays . sort ( pq ) ; int sum = 0 ; while ( pq . size ( ) > 0 && sum < K ) { sum += pq . peek ( ) ; pq . remove ( ) ; count ++ ; } if ( sum < K ) return - 1 ; return count ; } public static void main ( String [ ] args ) { int [ ] v = { 2 , 3 , 1 , 5 , 6 , 3 , 7 , 9 , 14 , 10 , 2 , 5 } ; int K = 35 ; System . out . println ( lengthOfSmallestSubsequence ( K , v ) ) ; } }"],"references":["import java . util . * ; class GFG { static int lengthOfSmallestSubsequence ( int K , int [ ] v ) { Queue < Integer > pq = new PriorityQueue < Integer > ( Collections . reverseOrder ( ) ) ; for ( int i = 0 ; i < v . length ; i ++ ) { pq . add ( v [ i ] ) ; } int sum = 0 , count = 0 ; while ( ! pq . isEmpty ( ) && sum < K ) { sum += pq . peek ( ) ; pq . remove ( ) ; count ++ ; } if ( sum < K ) { return - 1 ; } return count ; } public static void main ( String [ ] args ) { int [ ] v = { 2 , 3 , 1 , 5 , 6 , 3 , 7 , 9 , 14 , 10 , 2 , 5 } ; int K = 35 ; System . out . print ( lengthOfSmallestSubsequence ( K , v ) ) ; } }"],"bleu":0.8220766709529458,"rouge_l":0.9151330135194069}
{"id":854,"predictions":["class GFG { static int search ( int arr [ ] , int x ) { int i = 0 ; while ( i < arr [ i ] ) { if ( arr [ i ] == x ) return i ; i = i + Math . abs ( arr [ i ] - x ) ; } return - 1 ; } public static void main ( String args [ ] ) { int arr [ ] = { 8 , 7 , 6 , 7 , 6 , 5 , 4 , 3 } ; int n = arr . length ; System . out . print ( \" Element ▁ is ▁ not ▁ present ▁ at ▁ index ▁ \" + search ( arr , n , 3 ) ) ; } }"],"references":["import java . io . * ; class GFG { static int search ( int arr [ ] , int n , int x ) { int i = 0 ; while ( i < n ) { if ( arr [ i ] == x ) return i ; i = i + Math . abs ( arr [ i ] - x ) ; } System . out . println ( \" number ▁ is ▁ not \" + \" ▁ present ! \" ) ; return - 1 ; } public static void main ( String [ ] args ) { int arr [ ] = { 8 , 7 , 6 , 7 , 6 , 5 , 4 , 3 , 2 , 3 , 4 , 3 } ; int n = arr . length ; int x = 3 ; System . out . println ( \" Element ▁ \" + x + \" ▁ is ▁ present ▁ at ▁ index ▁ \" + search ( arr , n , 3 ) ) ; } }"],"bleu":0.6365418226109543,"rouge_l":0.7912664620259432}
{"id":855,"predictions":["class GFG { static boolean CheckArray ( int arr [ ] , int n ) { int prod = 1 ; for ( int i = 0 ; i < n ; i ++ ) prod *= arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == prod \/ arr [ i ] ) return true ; } return false ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 12 , 3 , 2 } ; int n = arr . length ; if ( CheckArray ( arr , n ) ) { System . out . println ( \" YES \" ) ; } else { System . out . println ( \" NO \" ) ; } } }"],"references":["import java . io . * ; class GFG { static boolean CheckArray ( int arr [ ] , int n ) { int prod = 1 ; for ( int i = 0 ; i < n ; ++ i ) prod *= arr [ i ] ; for ( int i = 0 ; i < n ; ++ i ) if ( arr [ i ] == prod \/ arr [ i ] ) return true ; return false ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 12 , 3 , 2 } ; int n = arr . length ; if ( CheckArray ( arr , n ) ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ; } }"],"bleu":0.8735313067922318,"rouge_l":0.9437043403523852}
{"id":856,"predictions":["import java . util . * ; class GFG { static int minRemove ( int arr [ ] , int n ) { int [ ] LIS = new int [ n ] ; int len = 0 ; for ( int i = 0 ; i < n ; i ++ ) LIS [ i ] = 1 ; for ( int i = 1 ; i < n ; i ++ ) { for ( int j = 0 ; j < i ; j ++ ) { if ( arr [ i ] > arr [ j ] && ( i - j ) <= ( arr [ i ] - arr [ j ] ) ) LIS [ i ] = Math . max ( LIS [ i ] , LIS [ j ] + 1 ) ; len = Math . max ( len , LIS [ i ] ) ; } } return ( n - len ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 6 , 5 , 4 } ; int n = arr . length ; System . out . println ( minRemove ( arr , n ) ) ; } }"],"references":["public class Main { static int minRemove ( int arr [ ] , int n ) { int LIS [ ] = new int [ n ] ; int len = 0 ; for ( int i = 0 ; i < n ; i ++ ) LIS [ i ] = 1 ; for ( int i = 1 ; i < n ; i ++ ) { for ( int j = 0 ; j < i ; j ++ ) { if ( arr [ i ] > arr [ j ] && ( i - j ) <= ( arr [ i ] - arr [ j ] ) ) LIS [ i ] = Math . max ( LIS [ i ] , LIS [ j ] + 1 ) ; } len = Math . max ( len , LIS [ i ] ) ; } return n - len ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 6 , 5 , 4 } ; int n = arr . length ; System . out . println ( minRemove ( arr , n ) ) ; } }"],"bleu":0.9080854603432552,"rouge_l":0.9657116379643216}
{"id":857,"predictions":["class GFG { static int char char [ ] [ ] char_val ( char [ ] s , int i ) { if ( s [ i ] == '0' ) { return 0 ; } else if ( s [ i ] == '1' ) { return 1 ; } else { return 2 ; } } static int countMinimalReplacements ( String s , int i , int prev , int dp [ ] [ ] [ ] , int n ) { if ( i == n ) { return 0 ; } if ( dp [ i ] [ prev ] != - 1 ) { return dp [ i ] [ prev ] ; } int val = charVal ( s , i ) ; int ans = Integer . MAX_VALUE ; if ( val == prev ) { val = 0 ; for ( int curr = 0 ; curr < 3 ; curr ++ ) { if ( curr == prev ) continue ; val = 1 + countMinReplacements ( s , i + 1 , curr , dp , n ) ; ans = Math . min ( ans , val ) ; } } else { ans = countMinReplacements ( s , i + 1 , val , dp , n ) ; } return dp [ i ] [ val ] = ans ; } public static void main ( String [ ] args ) { String s = \"201211\" ; int n = s . length ( ) ; int [ ] [ ] dp = new int [ n ] [ 3 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { for ( int l = 0 ; l < 3 ; l ++ ) { dp [ i ] [ j ] = - 1 ; } } } System . out . println ( countMinimalReplacements ( s , 1 , val , dp , n ) ) ; } }"],"references":["class GFG { static int charVal ( String s , int i ) { if ( s . charAt ( i ) == '0' ) { return 0 ; } else if ( s . charAt ( i ) == '1' ) { return 1 ; } else { return 2 ; } } static int countMinimalReplacements ( String s , int i , int prev , int dp [ ] [ ] , int n ) { if ( i == n ) { return 0 ; } if ( dp [ i ] [ prev ] != - 1 ) { return dp [ i ] [ prev ] ; } int val = charVal ( s , i ) ; int ans = Integer . MAX_VALUE ; if ( val == prev ) { val = 0 ; for ( int cur = 0 ; cur <= 2 ; cur ++ ) { if ( cur == prev ) { continue ; } val = 1 + countMinimalReplacements ( s , i + 1 , cur , dp , n ) ; ans = Math . min ( ans , val ) ; } } else { ans = countMinimalReplacements ( s , i + 1 , val , dp , n ) ; } return dp [ i ] [ val ] = ans ; } public static void main ( String [ ] args ) { String s = \"201220211\" ; int n = s . length ( ) ; int dp [ ] [ ] = new int [ n ] [ 3 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { dp [ i ] [ j ] = - 1 ; } } int val = charVal ( s , 0 ) ; System . out . println ( countMinimalReplacements ( s , 1 , val , dp , n ) ) ; } }"],"bleu":0.808110758854255,"rouge_l":0.8911781232440533}
{"id":858,"predictions":["class GFG { static int discountPercentment ( int S , int M ) { int discount = M - S ; int disPercent = ( discount \/ M ) * 100 ; return disPercent ; } public static void main ( String [ ] args ) { int M = 120 , S = 100 ; System . out . println ( discountPercent ; S = 1000 ; S = 1000 ; S = 500 ; System . out . println ( discountPercent ; } }"],"references":["import java . util . * ; import java . lang . * ; import java . io . * ; class GFG { static float discountPercentage ( float S , float M ) { float discount = M - S ; float disPercent = ( discount \/ M ) * 100 ; return disPercent ; } public static void main ( String args [ ] ) { int M , S ; M = 120 ; S = 100 ; System . out . printf ( \" % .2f \" , discountPercentage ( S , M ) ) ; System . out . println ( \" % \" ) ; M = 1000 ; S = 500 ; System . out . printf ( \" % .2f \" , discountPercentage ( S , M ) ) ; System . out . println ( \" % \" ) ; } }"],"bleu":0.30535377563774224,"rouge_l":0.5789612443975746}
{"id":859,"predictions":["class GFG { static double sumOfSeries ( int n ) { return ( 0.6f * ( Math . pow ( 10 , n ) - 1 ) - 0.55 * n ; } public static void main ( String [ ] args ) { int n = 2 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["class GFG { static int sumOfSeries ( int n ) { return ( int ) ( 0.6172 * ( Math . pow ( 10 , n ) - 1 ) - 0.55 * n ) ; } public static void main ( String [ ] args ) { int n = 2 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"bleu":0.8383224508127946,"rouge_l":0.9332831703034863}
{"id":860,"predictions":["class GFG { static boolean move ( int a , int x , int b ) { if ( ( ( b - a ) % x == 0 ) || ( ( b - a ) % x == 0 ) && a + 1 != b ) && b >= a ) return true ; return false ; } public static void main ( String [ ] args ) { int a = 3 , x = 2 , b = 7 ; if ( Move ( a , x , b ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . io . * ; class GFG { static boolean Move ( int a , int x , int b ) { if ( ( ( ( b - a ) % x == 0 ) || ( ( b - a - 1 ) % x == 0 ) && a + 1 != b ) && b >= a ) return true ; return false ; } public static void main ( String [ ] args ) { int a = 3 , x = 2 , b = 7 ; if ( Move ( a , x , b ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.8897855572264697,"rouge_l":0.9456142617232917}
{"id":861,"predictions":["class GFG { static int No_of_Pairs ( int N ) { int i = 1 ; while ( ( i * i ) + ( 2 * i ) + ( 2 * i ) + i <= N ) i += 1 ; return ( i - 1 ) ; } static void print_pairs ( int pairs ) { int i = 1 , mul = 0 ; for ( i = 1 ; i <= pairs ; i ++ ) { mul = i * ( i + 1 ) ; System . out . print ( \" Pair ▁ no . ▁ ( \" + i + \" , ▁ \" + mul * ( i + 1 ) + \" ) \" ) ; } } public static void main ( String [ ] args ) { int N = 500 ; int i = 1 ; int pairs = No_Of_Pairs ( N ) ; System . out . println ( \" No . ▁ of ▁ pairs ▁ = ▁ \" + pairs ) ; print_pairs ( pairs ) ; } }"],"references":["import java . io . * ; class GFG { static int No_Of_Pairs ( int N ) { int i = 1 ; while ( ( i * i * i ) + ( 2 * i * i ) + i <= N ) i ++ ; return ( i - 1 ) ; } static void print_pairs ( int pairs ) { int i = 1 , mul ; for ( i = 1 ; i <= pairs ; i ++ ) { mul = i * ( i + 1 ) ; System . out . println ( \" Pair ▁ no . ▁ \" + i + \" ▁ - - > ▁ ( \" + ( mul * i ) + \" , ▁ \" + mul * ( i + 1 ) + \" ) \" ) ; } } public static void main ( String [ ] args ) { int N = 500 , pairs , mul , i = 1 ; pairs = No_Of_Pairs ( N ) ; System . out . println ( \" No . ▁ of ▁ pairs ▁ = ▁ \" + pairs ) ; print_pairs ( pairs ) ; } }"],"bleu":0.7978957165086047,"rouge_l":0.8804645375362921}
{"id":862,"predictions":["class GFG { static int power ( long x , int a ) { int res = 1 ; while ( a != 0 ) { if ( ( a & 1 ) == 0 ) res = res * x ; x = x * x ; a >>= 1 ; } return res ; } static int breakInteger ( int N ) { if ( N == 2 ) return 1 ; if ( N == 3 ) return 2 ; long maxProduct = 0 ; if ( N % 3 == 0 ) { maxProduct = power ( 3 , N \/ 3 ) ; return maxProduct ; } else if ( N % 3 == 1 ) { maxProduct = 2 * power ( 3 , N \/ 3 ) ; return maxProduct ; } else if ( N % 3 == 2 ) { maxProduct = 2 * power ( 3 , N \/ 3 ) ; return maxProduct ; } return maxProduct ; } public static void main ( String [ ] args ) { int maxProduct = 10 ; System . out . println ( maxProduct ) ; System . out . println ( maxProduct ) ; } }"],"references":["class GFG { static int power ( int x , int a ) { int res = 1 ; while ( a > 0 ) { if ( ( a & 1 ) > 0 ) res = res * x ; x = x * x ; a >>= 1 ; } return res ; } static int breakInteger ( int N ) { if ( N == 2 ) return 1 ; if ( N == 3 ) return 2 ; int maxProduct = - 1 ; switch ( N % 3 ) { case 0 : maxProduct = power ( 3 , N \/ 3 ) ; break ; case 1 : maxProduct = 2 * 2 * power ( 3 , ( N \/ 3 ) - 1 ) ; break ; case 2 : maxProduct = 2 * power ( 3 , N \/ 3 ) ; break ; } return maxProduct ; } public static void main ( String [ ] args ) { int maxProduct = breakInteger ( 10 ) ; System . out . println ( maxProduct ) ; } }"],"bleu":0.6865473588258676,"rouge_l":0.8368746862974736}
{"id":863,"predictions":["import java . io . * ; class GFG { static void printTrib ( int n ) { int [ ] dp = new int [ n ] ; dp [ 0 ] = dp [ 1 ] = 0 ; dp [ 2 ] = 1 ; for ( int i = 3 ; i < n ; i ++ ) dp [ i ] = dp [ i - 1 ] + dp [ i - 2 ] ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( dp [ i ] + \" ▁ \" ) ; } public static void main ( String args [ ] ) { int n = 10 ; printTrib ( n ) ; } }"],"references":["import java . io . * ; class GFG { static void printTrib ( int n ) { int dp [ ] = new int [ n ] ; dp [ 0 ] = dp [ 1 ] = 0 ; dp [ 2 ] = 1 ; for ( int i = 3 ; i < n ; i ++ ) dp [ i ] = dp [ i - 1 ] + dp [ i - 2 ] + dp [ i - 3 ] ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( dp [ i ] + \" ▁ \" ) ; } public static void main ( String args [ ] ) { int n = 10 ; printTrib ( n ) ; } }"],"bleu":0.9190347931475252,"rouge_l":0.9631200659832686}
{"id":864,"predictions":["import java . io . * ; class GFG { static int findCount ( int d ) { int count = 1 * ( int ) ( Math . pow ( 10 , d - 1 ) ) - ( int ) ( Math . pow ( 9 , d ) - 1 ) - ( int ) ( Math . pow ( 9 , d - 1 ) ) ) ; return 0 ; } public static void main ( String [ ] args ) { int d = 1 ; System . out . println ( findCount ( d ) ) ; d = 2 ; System . out . println ( findCount ( d ) ) ; d = 4 ; System . out . println ( findCount ( d ) ) ; } }"],"references":["import java . io . * ; class GFG { static int findCount ( int d ) { return 9 * ( ( int ) ( Math . pow ( 10 , d - 1 ) ) - ( int ) ( Math . pow ( 9 , d - 1 ) ) ) ; } public static void main ( String args [ ] ) { int d = 1 ; System . out . println ( findCount ( d ) ) ; d = 2 ; System . out . println ( findCount ( d ) ) ; d = 4 ; System . out . println ( findCount ( d ) ) ; } }"],"bleu":0.7912374100596352,"rouge_l":0.9033515198752923}
{"id":865,"predictions":["class GFG { static double Convert ( double n ) { return ( n - 32.0 ) * 5.0 \/ 9.0 ; } public static void main ( String [ ] args ) { double n = 40 ; System . out . println ( Convert ( n ) ) ; } }"],"references":["class GFG { static float Conversion ( float n ) { return ( n - 32.0f ) * 5.0f \/ 9.0f ; } public static void main ( String [ ] args ) { float n = 40 ; System . out . println ( Conversion ( n ) ) ; } }"],"bleu":0.6678870232631291,"rouge_l":0.8490566037735852}
{"id":866,"predictions":["import java . util . * ; class GFG { static boolean isPalindrome ( String str ) { int len = str . length ( ) \/ 2 ; for ( int i = 0 ; i < len ; i ++ ) { if ( str . charAt ( i ) != str . charAt ( str . length ( ) - i - 1 ) ) { return false ; } } return true ; } static void palindromic ( String str [ ] , int a [ ] [ ] , int i , int j , int m , int n ) { if ( j < m - 1 || i < n - 1 ) { if ( i < n - 1 ) { if ( i < n - 1 ) { palindromicPath ( str + a [ i ] [ j ] , a , a , i + 1 , j , m , m , n ) ; } if ( j < m - 1 ) { palindromicPath ( str + a [ i ] [ j ] , a , i , j + 1 , m , n ) ; } } else { str = str + a [ n - 1 ] [ m - 1 ] ; if ( isPalin ( str ) ) { System . out . print ( str ) ; } } } public static void main ( String [ ] args ) { char arr [ ] [ ] = { { ' a ' , ' a ' , ' b ' } , { ' b ' , ' a ' } , { ' b ' , ' a ' } } ; palindromicPath ( str , 0 , 0 , 4 , 3 ) ; } }"],"references":["public class PalinPath { public static boolean isPalin ( String str ) { int len = str . length ( ) \/ 2 ; for ( int i = 0 ; i < len ; i ++ ) { if ( str . charAt ( i ) != str . charAt ( str . length ( ) - i - 1 ) ) return false ; } return true ; } public static void palindromicPath ( String str , char a [ ] [ ] , int i , int j , int m , int n ) { if ( j < m - 1 || i < n - 1 ) { if ( i < n - 1 ) palindromicPath ( str + a [ i ] [ j ] , a , i + 1 , j , m , n ) ; if ( j < m - 1 ) palindromicPath ( str + a [ i ] [ j ] , a , i , j + 1 , m , n ) ; } else { str = str + a [ n - 1 ] [ m - 1 ] ; if ( isPalin ( str ) ) System . out . println ( str ) ; } } public static void main ( String args [ ] ) { char arr [ ] [ ] = { { ' a ' , ' a ' , ' a ' , ' b ' } , { ' b ' , ' a ' , ' a ' , ' a ' } , { ' a ' , ' b ' , ' b ' , ' a ' } } ; String str = \" \" ; palindromicPath ( str , arr , 0 , 0 , 4 , 3 ) ; } }"],"bleu":0.8083851660587289,"rouge_l":0.883318521616394}
{"id":867,"predictions":["import java . util . * ; class GFG { static boolean checkDivisors ( int a [ ] , int n ) { int X = Arrays . stream ( a ) . max ( ) . getAsInt ( ) ; Vector < Integer > b = new Vector < Integer > ( ) ; for ( int i = 1 ; i * i <= X ; i ++ ) { if ( X % i == 0 ) { b . add ( i ) ; if ( X \/ i != i ) b . add ( X \/ i ) ; } } if ( b . size ( ) != n ) return false ; Arrays . sort ( b ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( b . get ( i ) != a [ i ] ) return false ; } return true ; } public static void main ( String [ ] args ) { int arr [ ] = { 8 , 1 , 2 , 12 , 48 , 4 , 24 , 3 } ; int N = arr . length ; if ( checkDivisors ( arr , N ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; class GFG { static int max_element ( int a [ ] ) { int m = a [ 0 ] ; for ( int i = 0 ; i < a . length ; i ++ ) m = Math . max ( a [ i ] , m ) ; return m ; } static boolean checkDivisors ( int a [ ] , int n ) { int X = max_element ( a ) ; Vector < Integer > b = new Vector < Integer > ( ) ; for ( int i = 1 ; i * i <= X ; i ++ ) { if ( X % i == 0 ) { b . add ( i ) ; if ( X \/ i != i ) b . add ( X \/ i ) ; } } if ( b . size ( ) != n ) return false ; Arrays . sort ( a ) ; Collections . sort ( b ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( b . get ( i ) != a [ i ] ) return false ; } return true ; } public static void main ( String args [ ] ) { int arr [ ] = { 8 , 1 , 2 , 12 , 48 , 6 , 4 , 24 , 16 , 3 } ; int N = arr . length ; if ( checkDivisors ( arr , N ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.7457171111886948,"rouge_l":0.8398738399951478}
{"id":868,"predictions":["import java . util . * ; class GFG { static void findAllTriplets ( int arr [ ] , int n ) { Set < Integer > s = new HashSet < > ( ) ; for ( int i = 0 ; i < n - 1 ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { int diff = arr [ j ] - arr [ i ] ; if ( arr [ i ] - diff < n ) { System . out . print ( \" ▁ \" + arr [ i ] + \" ▁ \" ) ; } } s . add ( arr [ i ] ) ; } s . add ( arr [ i ] ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 6 , 9 , 12 , 17 , 22 , 31 , 32 , 35 , 42 } ; int n = arr . length ; findAllTriplets ( arr , n ) ; } }"],"references":["import java . io . * ; import java . util . * ; class GFG { static void printAllAPTriplets ( int [ ] arr , int n ) { ArrayList < Integer > s = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < n - 1 ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { int diff = arr [ j ] - arr [ i ] ; boolean exists = s . contains ( arr [ i ] - diff ) ; if ( exists ) System . out . println ( arr [ i ] - diff + \" ▁ \" + arr [ i ] + \" ▁ \" + arr [ j ] ) ; } s . add ( arr [ i ] ) ; } } public static void main ( String args [ ] ) { int [ ] arr = { 2 , 6 , 9 , 12 , 17 , 22 , 31 , 32 , 35 , 42 } ; int n = arr . length ; printAllAPTriplets ( arr , n ) ; } }"],"bleu":0.7306322517266824,"rouge_l":0.8496234512916025}
{"id":869,"predictions":["import java . io . * ; class GFG { static boolean isPowerOfTwo ( int x ) { if ( x == 0 ) return false ; if ( ( x & ( x - 1 ) ) == 0 ) return true ; else return false ; } static int countNum ( int a [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( isPowerOfTwo ( a [ i ] ) || isPowerOfTwo ( a [ i ] + 1 ) ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 5 , 6 , 9 , 3 , 1 } ; int n = arr . length ; System . out . println ( countNum ( arr , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static boolean isPowerOfTwo ( int x ) { if ( x == 0 ) return false ; if ( ( x & ( x - 1 ) ) == 0 ) return true ; else return false ; } static int countNum ( int a [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( isPowerOfTwo ( a [ i ] ) || isPowerOfTwo ( a [ i ] + 1 ) ) count ++ ; } return count ; } public static void main ( String args [ ] ) { int arr [ ] = { 5 , 6 , 9 , 3 , 1 } ; int n = arr . length ; System . out . println ( countNum ( arr , n ) ) ; } }"],"bleu":0.9622337449991097,"rouge_l":0.9875776397515529}
{"id":870,"predictions":["class GFG { static float pi = ( float ) ( 4 \/ 3 ) * pi * pi ; return vol ; } static float surfacearea ( float r ) { float vol = ( float ) ( 4 * pi * r * r * r ) ; return vol ; } public static void main ( String [ ] args ) { float radius = 12 ; System . out . println ( \" Volume ▁ Of ▁ sphere ▁ : ▁ \" + volume ( radius ) ) ; System . out . println ( \" Surface ▁ Area ▁ of ▁ sphere ▁ : ▁ \" + surfacearea ( radius ) ) ; } }"],"references":["class GFG { static float pi = 3.14159f ; static float volume ( float r ) { float vol ; vol = ( ( float ) 4 \/ ( float ) 3 ) * ( pi * r * r * r ) ; return vol ; } static float surface_area ( float r ) { float sur_ar ; sur_ar = 4 * pi * r * r ; return sur_ar ; } public static void main ( String [ ] args ) { float radius = 12 ; float vol , sur_area ; vol = volume ( radius ) ; sur_area = surface_area ( radius ) ; System . out . println ( \" Volume ▁ Of ▁ Sphere ▁ : \" + vol ) ; System . out . println ( \" Surface ▁ Area ▁ Of ▁ Sphere ▁ : \" + sur_area ) ; } }"],"bleu":0.5327383463337589,"rouge_l":0.6971428571428572}
{"id":871,"predictions":["class GFG { static boolean isPower ( int x , int y ) { if ( x == 1 ) return ( y == 1 ) ; int pow = 1 ; while ( pow < y ) pow = pow * x ; return ( pow == y ) ; } public static void main ( String args [ ] ) { if ( isPower ( 10 , 1 ) ) System . out . println ( \" True \" ) ; else System . out . println ( \" False \" ) ; if ( isPower ( 2 , 20 ) ) System . out . println ( \" True \" ) ; else System . out . println ( \" False \" ) ; if ( isPower ( 2 , 30 ) ) System . out . println ( \" True \" ) ; else System . out . println ( \" False \" ) ; } }"],"references":["public class Test { public static void main ( String [ ] args ) { System . out . println ( isPower ( 10 , 1 ) ? \" True \" : \" False \" ) ; System . out . println ( isPower ( 1 , 20 ) ? \" True \" : \" False \" ) ; System . out . println ( isPower ( 2 , 128 ) ? \" True \" : \" False \" ) ; System . out . println ( isPower ( 2 , 30 ) ? \" True \" : \" False \" ) ; } public static boolean isPower ( int x , int y ) { if ( x == 1 ) return ( y == 1 ) ; int pow = 1 ; while ( pow < y ) pow = pow * x ; return ( pow == y ) ; } }"],"bleu":0.6630215889822222,"rouge_l":0.4509109838625716}
{"id":872,"predictions":["import java . io . * ; class GFG { static int getSum ( int BIT [ ] , int index ) { int sum = 0 ; while ( index > 0 ) { sum += BIT [ index ] ; index -= index & ( - index ) ; } return sum ; } static void updateBit ( int BIT [ ] , int n , int index , int val ) { while ( index <= n ) { BIT [ index ] += val ; index += index & ( - index ) ; } } static int getInvCount ( int [ ] arr , int n ) { int i , maxElement = 0 ; int maxElement = Arrays . stream ( arr ) . max ( ) . getAsInt ( ) ; for ( i = 1 ; i <= maxElement ; i ++ ) { invcount += getSum ( BIT , arr [ i ] - 1 ) ; updateBit ( BIT , maxElement , arr [ i ] , 1 ) ; } return invcount ; } static public void main ( String [ ] args ) { int arr [ ] = { 8 , 4 , 2 , 1 } ; int n = 4 ; System . out . println ( \" Inversions ▁ Count ▁ : ▁ \" + getInvCount ( arr , n ) ) ; } }"],"references":["class GFG { static int getSum ( int [ ] BITree , int index ) { int sum = 0 ; while ( index > 0 ) { sum += BITree [ index ] ; index -= index & ( - index ) ; } return sum ; } static void updateBIT ( int [ ] BITree , int n , int index , int val ) { while ( index <= n ) { BITree [ index ] += val ; index += index & ( - index ) ; } } static int getInvCount ( int [ ] arr , int n ) { int invcount = 0 ; int maxElement = 0 ; for ( int i = 0 ; i < n ; i ++ ) if ( maxElement < arr [ i ] ) maxElement = arr [ i ] ; int [ ] BIT = new int [ maxElement + 1 ] ; for ( int i = 1 ; i <= maxElement ; i ++ ) BIT [ i ] = 0 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { invcount += getSum ( BIT , arr [ i ] - 1 ) ; updateBIT ( BIT , maxElement , arr [ i ] , 1 ) ; } return invcount ; } public static void main ( String [ ] args ) { int [ ] arr = { 8 , 4 , 2 , 1 } ; int n = arr . length ; System . out . println ( \" Number ▁ of ▁ inversions ▁ are ▁ : ▁ \" + getInvCount ( arr , n ) ) ; } }"],"bleu":0.6197071149277718,"rouge_l":0.7746265949083873}
{"id":873,"predictions":["import java . io . * ; class GFG { static int calSum ( int n ) { int a = 3 , b = 0 ; int c = 2 ; if ( n == 0 ) return 3 ; if ( n == 1 ) return 3 ; if ( n == 2 ) return 5 ; int sum = 5 ; while ( n > 2 ) { int d = a + b ; sum = sum + d ; a = b ; b = c ; n = n - 1 ; } return sum ; } public static void main ( String args [ ] ) { int n = 9 ; System . out . println ( calSum ( n ) ) ; } }"],"references":["import java . lang . * ; class GFG { static int calSum ( int n ) { int a = 3 , b = 0 , c = 2 ; if ( n == 0 ) return 3 ; if ( n == 1 ) return 3 ; if ( n == 2 ) return 5 ; int sum = 5 ; while ( n > 2 ) { int d = a + b ; sum += d ; a = b ; b = c ; c = d ; n -- ; } return sum ; } public static void main ( String [ ] args ) { int n = 9 ; System . out . print ( calSum ( n ) ) ; } }"],"bleu":0.8305334781878543,"rouge_l":0.9255067777639597}
{"id":874,"predictions":["class GFG { static int steps ( int cur , int x , int n ) { int x = 0 ; if ( x == 0 ) return Integer . MAX_VALUE ; else if ( x > 0 ) return Math . abs ( ( n - cur ) \/ x ) ; else return Math . min ( ( cur - 1 ) \/ x ) ; } static int countSteps ( int curx , int cury , int n , int m , int moves ) { int count = 0 ; int k ; for ( int i = 0 ; i < k ; i ++ ) { x = moves [ i ] [ 0 ] ; int y = moves [ i ] [ 1 ] ; int stepct = Math . min ( steps , x , n ) ; count += step ; curx += step ; cury *= y ; } return count ; } public static void main ( String [ ] args ) { int n = 4 , m = 5 , x = 1 , y = 1 ; System . out . println ( countSteps ( x , y , n , m , moves ) ) ; } }"],"references":["class GFG { static int steps ( int cur , int x , int n ) { if ( x == 0 ) return Integer . MAX_VALUE ; if ( x > 0 ) return Math . abs ( ( n - cur ) \/ x ) ; else return Math . abs ( ( cur - 1 ) \/ x ) ; } static int countSteps ( int curx , int cury , int n , int m , int [ ] [ ] moves ) { int count = 0 ; int k = moves . length ; for ( int i = 0 ; i < k ; i ++ ) { int x = moves [ i ] [ 0 ] ; int y = moves [ i ] [ 1 ] ; int stepct = Math . min ( steps ( curx , x , n ) , steps ( cury , y , m ) ) ; count += stepct ; curx += stepct * x ; cury += stepct * y ; } return count ; } public static void main ( String [ ] args ) { int n = 4 , m = 5 , x = 1 , y = 1 ; int [ ] [ ] moves = { { 1 , 1 } , { 1 , 1 } , { 0 , - 2 } } ; System . out . print ( countSteps ( x , y , n , m , moves ) ) ; } }"],"bleu":0.7076900661060175,"rouge_l":0.8404133180252583}
{"id":875,"predictions":["class GFG { static int SUM ( int n , int m ) { if ( m == 1 ) return ( n * ( n + 1 ) \/ 2 ) ; int sum = SUM ( n , m - 1 ) ; return sum * ( sum + 1 ) \/ 2 ; } public static void main ( String [ ] args ) { int n = 5 , m = 3 ; System . out . println ( \" Sum ( \" Sum ▁ ( \" + n + \" , ▁ \" + m + \" ) ▁ : ▁ \" + SUM ( n , m ) ) ; } }"],"references":["class GFG { static int SUM ( int n , int m ) { if ( m == 1 ) return ( n * ( n + 1 ) \/ 2 ) ; int sum = SUM ( n , m - 1 ) ; return ( sum * ( sum + 1 ) \/ 2 ) ; } public static void main ( String [ ] args ) { int n = 5 ; int m = 3 ; System . out . println ( \" SUM ( \" + n + \" , ▁ \" + m + \" ) : ▁ \" + SUM ( n , m ) ) ; } }"],"bleu":0.8767178233062182,"rouge_l":0.9501824305360652}
{"id":876,"predictions":["class GFG { static String printInitials ( String str ) { int len = str . length ( ) ; str = str . length ( ) ; String t = \" \" ; for ( int i = 0 ; i < len ; i ++ ) { char ch = str . charAt ( i ) ; if ( ch != ' ▁ ' ) t += ch ; else { System . out . print ( t . charAt ( 0 ) ) ; t = \" \" ; } } String temp = \" \" ; for ( int j = 0 ; j < str . length ( ) ; j ++ ) { if ( j == 0 ) temp += str . charAt ( 0 ) ; else temp += t . charAt ( 0 ) ; } System . out . println ( temp ) ; } public static void main ( String [ ] args ) { String str = \" ishit ▁ bhum \" ; printInitials ( str ) ; } }"],"references":["import java . util . * ; class Initials { public static void printInitials ( String str ) { int len = str . length ( ) ; str = str . trim ( ) ; String t = \" \" ; for ( int i = 0 ; i < len ; i ++ ) { char ch = str . charAt ( i ) ; if ( ch != ' ▁ ' ) { t = t + ch ; } else { System . out . print ( Character . toUpperCase ( t . charAt ( 0 ) ) + \" . ▁ \" ) ; t = \" \" ; } } String temp = \" \" ; for ( int j = 0 ; j < t . length ( ) ; j ++ ) { if ( j == 0 ) temp = temp + Character . toUpperCase ( t . charAt ( 0 ) ) ; else temp = temp + Character . toLowerCase ( t . charAt ( j ) ) ; } System . out . println ( temp ) ; } public static void main ( String [ ] args ) { String str = \" ishita ▁ bhuiya \" ; printInitials ( str ) ; } }"],"bleu":0.6902201786966138,"rouge_l":0.8413453782868204}
{"id":877,"predictions":["class IsDivisible { static boolean check ( String str ) { int n = str . length ( ) ; if ( n == 0 ) return false ; if ( n == 1 ) return ( ( ( str . charAt ( 0 ) - '0' ) % 8 == 0 ) ; if ( n == 2 ) return ( ( ( str . charAt ( n - 2 ) - '0' ) * 10 + ( str . charAt ( n - 1 ) - '0' ) ) ) ; int last = str . charAt ( n - 1 ) - '0' ; int second_last = str . charAt ( n - 2 ) - '0' ; return ( ( third_last * 100 + second_last * 10 + last ) % 8 == 0 ) ; } public static void main ( String [ ] args ) { String str = \"76952\" ; if ( check ( str ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class IsDivisible { static boolean check ( String str ) { int n = str . length ( ) ; if ( n == 0 ) return false ; if ( n == 1 ) return ( ( str . charAt ( 0 ) - '0' ) % 8 == 0 ) ; if ( n == 2 ) return ( ( ( str . charAt ( n - 2 ) - '0' ) * 10 + ( str . charAt ( n - 1 ) - '0' ) ) % 8 == 0 ) ; int last = str . charAt ( n - 1 ) - '0' ; int second_last = str . charAt ( n - 2 ) - '0' ; int third_last = str . charAt ( n - 3 ) - '0' ; return ( ( third_last * 100 + second_last * 10 + last ) % 8 == 0 ) ; } public static void main ( String [ ] args ) { String str = \"76952\" ; if ( check ( str ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.9017628525700263,"rouge_l":0.9445679927518326}
{"id":878,"predictions":["class GFG { static boolean check ( int n ) { int d = ( int ) Math . sqrt ( n ) ; if ( d * d == n ) return true ; return false ; } static int largestNonPerfectSquareNumber ( int [ ] a , int n ) { int maxi = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( check ( a [ i ] ) == false ) maxi = Math . max ( a [ i ] , maxi ) ; } return maxi ; } public static void main ( String [ ] args ) { int [ ] a = { 16 , 20 , 25 , 2 , 3 , 10 } ; int n = a . length ; System . out . print ( largestNonPerfectSquareNumber ( a , n ) ) ; } }"],"references":["import java . io . * ; class GfG { static Boolean check ( int n ) { int d = ( int ) Math . sqrt ( n ) ; if ( d * d == n ) return true ; return false ; } static int largestNonPerfectSquareNumber ( int a [ ] , int n ) { int maxi = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( ! check ( a [ i ] ) ) maxi = Math . max ( a [ i ] , maxi ) ; } return maxi ; } public static void main ( String [ ] args ) { int a [ ] = { 16 , 20 , 25 , 2 , 3 , 10 } ; int n = a . length ; System . out . println ( largestNonPerfectSquareNumber ( a , n ) ) ; } }"],"bleu":0.846473281995509,"rouge_l":0.9343408557132646}
{"id":879,"predictions":["class GFG { static int findValueAtX ( int n ) { return ( n * n * n ) + n ; } public static void main ( String [ ] args ) { System . out . println ( findValueAtX ( 10 ) ) ; System . out . println ( findValue ( 2 ) ) ; System . out . println ( findValueAtX ( 2 ) ) ; } }"],"references":["import java . io . * ; class GFG { static int findValueAtX ( int n ) { return ( n * n * n ) + n ; } public static void main ( String [ ] args ) { System . out . println ( findValueAtX ( 10 ) ) ; System . out . println ( findValueAtX ( 2 ) ) ; } }"],"bleu":0.8421702021849035,"rouge_l":0.8689458689458689}
{"id":880,"predictions":["class GFG { static boolean isPrime ( int n ) { if ( n <= 1 ) return false ; if ( n <= 3 ) return true ; if ( n % 2 == 0 || n % 3 == 0 ) return false ; for ( int i = 5 ; i * i <= n ; i = i + 6 ) { if ( n % i == 0 || n % ( i + 2 ) == 0 ) return false ; } return true ; } static boolean isThreeFactors ( int n ) { int sq = ( int ) Math . sqrt ( n ) ; if ( 1 * sqrt * sqrt != n ) return false ; if ( isPrime ( sq ) ) return true ; else return false ; } public static void main ( String [ ] args ) { int num = 939 ; if ( isThreeSegFactors ( num ) == true ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; num = 1539 ; if ( isThreePartFactors ( num ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["public class GFG { static boolean isPrime ( int n ) { if ( n <= 1 ) return false ; if ( n <= 3 ) return true ; if ( n % 2 == 0 || n % 3 == 0 ) return false ; for ( int i = 5 ; i * i <= n ; i = i + 6 ) if ( n % i == 0 || n % ( i + 2 ) == 0 ) return false ; return true ; } static boolean isThreeDisctFactors ( long n ) { int sq = ( int ) Math . sqrt ( n ) ; if ( 1L * sq * sq != n ) return false ; return isPrime ( sq ) ? true : false ; } public static void main ( String [ ] args ) { long num = 9 ; if ( isThreeDisctFactors ( num ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; num = 15 ; if ( isThreeDisctFactors ( num ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; num = 12397923568441L ; if ( isThreeDisctFactors ( num ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.7294485940619466,"rouge_l":0.8467034088589507}
{"id":881,"predictions":["class GFG { static int maxPartitions ( int arr [ ] , int n ) { int ans = 0 , max_so_far = 0 ; for ( int i = 0 ; i < n ; i ++ ) { max_so_far = Math . max ( max_so_far , arr [ i ] ) ; if ( max_so_far == i ) ans ++ ; } return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 0 , 2 , 3 , 4 } ; int n = arr . length ; System . out . println ( maxPartitions ( arr , n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int maxPartitions ( int arr [ ] , int n ) { int ans = 0 , max_so_far = 0 ; for ( int i = 0 ; i < n ; ++ i ) { max_so_far = Math . max ( max_so_far , arr [ i ] ) ; if ( max_so_far == i ) ans ++ ; } return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 0 , 2 , 3 , 4 } ; int n = arr . length ; System . out . println ( maxPartitions ( arr , n ) ) ; } }"],"bleu":0.9187445459933186,"rouge_l":0.9583277859139929}
{"id":882,"predictions":["public class GFG { static void greaterK ( int n , int k ) { int index = 0 ; int p [ ] = new int [ n + 2 ] ; int x = n ; while ( x > 0 ) { p [ index ] = x % k ; x \/= k ; index ++ ; } int idx = 0 ; for ( int i = 0 ; i < p . length ; i ++ ) { if ( p [ i ] >= 2 ) { p [ i ] = 0 ; p [ i + 1 ] ++ ; for ( int j = idx ; j < i ; j ++ ) p [ j ] = 0 ; } if ( p [ i ] == k ) { p [ i ] = 0 ; p [ i + 1 ] ++ ; } } int j = p . length - 1 ; if ( p [ j ] >= 2 ) { p [ i ] = 1 ; index ++ ; } int ans = 0 ; for ( int i = p . length - 1 ; i >= 0 ; i -- ) { ans = ans * k + p [ i ] ; } System . out . println ( ans ) ; } public static void main ( String [ ] args ) { int n = 29 ; int k = 7 ; greaterK ( n , k ) ; } }"],"references":["class GFG { static void greaterK ( int n , int k ) { int [ ] p = new int [ String . valueOf ( n ) . length ( ) + 2 ] ; int index = 0 ; int x = n ; while ( x > 0 ) { p [ index ] = ( int ) ( x % k ) ; x \/= k ; index ++ ; } int idx = 0 ; for ( int i = 0 ; i < p . length - 1 ; ++ i ) { if ( p [ i ] >= 2 ) { p [ i ] = 0 ; p [ i + 1 ] ++ ; for ( int j = idx ; j < i ; ++ j ) { p [ j ] = 0 ; } idx = i + 1 ; } if ( p [ i ] == k ) { p [ i ] = 0 ; p [ i + 1 ] ++ ; } } int j = p . length - 1 ; if ( p [ j ] >= 2 ) { p [ index ] = 1 ; index ++ ; } int ans = 0 ; for ( int i = p . length - 1 ; i >= 0 ; -- i ) { ans = ans * k + p [ i ] ; } System . out . print ( ans + \" \\n \" ) ; } public static void main ( String [ ] args ) { int n = 29 , k = 7 ; greaterK ( n , k ) ; } }"],"bleu":0.7984370373708919,"rouge_l":0.8949530516431923}
{"id":883,"predictions":["class GfG { static int longestPrefixSuffix ( String s ) { int n = s . length ( ) ; int lps [ ] = new int [ n ] ; lps [ 0 ] = 0 ; int i = 1 ; while ( i < n ) { if ( s . charAt ( i ) == s . charAt ( l ) ) { lps [ i ] = lps [ lps [ i ] ; i ++ ; } else { lps [ i ] = 0 ; i ++ ; } } int res = lps [ n - 1 ] ; if ( res > n \/ 2 ) return n \/ 2 ; else return res ; } public static void main ( String [ ] args ) { String s = \" abcab \" ; System . out . println ( longestPrefixSuffix ( s ) ) ; } }"],"references":["class GFG { static int longestPrefixSuffix ( String s ) { int n = s . length ( ) ; int lps [ ] = new int [ n ] ; lps [ 0 ] = 0 ; int len = 0 ; int i = 1 ; while ( i < n ) { if ( s . charAt ( i ) == s . charAt ( len ) ) { len ++ ; lps [ i ] = len ; i ++ ; } else { if ( len != 0 ) { len = lps [ len - 1 ] ; } else { lps [ i ] = 0 ; i ++ ; } } } int res = lps [ n - 1 ] ; return ( res > n \/ 2 ) ? n \/ 2 : res ; } public static void main ( String [ ] args ) { String s = \" abcab \" ; System . out . println ( longestPrefixSuffix ( s ) ) ; } }"],"bleu":0.7604660897971829,"rouge_l":0.8500919384496274}
{"id":884,"predictions":["import java . util . * ; class GFG { static void printBracketNumber ( String exp , int n ) { int left_bnum = 1 , right_bnum = 1 ; Vector < Integer > right_bnum = new Vector < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( exp . charAt ( i ) == ' ( ' ) { System . out . print ( left_bnum + \" ▁ \" ) ; right_bnum ++ ; left_bnum ++ ; } else if ( exp . charAt ( i ) == ' ) { System . out . print ( right_bnum . substring ( - 1 ) + ( d \/ e ) ; right_bnum ++ ; } } } public static void main ( String [ ] args ) { String exp = \" a + ( a + ( b * c ) ) + ( d \/ e ) ; int n = exp . length ; printBracketNumber ( exp , n ) ; } }"],"references":["import java . io . * ; import java . util . * ; class GFG { static void printBracketNumber ( String exp , int n ) { int left_bnum = 1 ; Stack < Integer > right_bnum = new Stack < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( exp . charAt ( i ) == ' ( ' ) { System . out . print ( left_bnum + \" ▁ \" ) ; right_bnum . push ( left_bnum ) ; left_bnum ++ ; } else if ( exp . charAt ( i ) == ' ) ' ) { System . out . print ( right_bnum . peek ( ) + \" ▁ \" ) ; right_bnum . pop ( ) ; } } } public static void main ( String args [ ] ) { String exp = \" ( a + ( b * c ) ) + ( d \/ e ) \" ; int n = exp . length ( ) ; printBracketNumber ( exp , n ) ; } }"],"bleu":0.7519781112009182,"rouge_l":0.8686708860759493}
{"id":885,"predictions":["import java . util . * ; class GFG { static int N = 1000001 ; static boolean [ ] fourDivisors ( ) { boolean [ ] primeAll = new boolean [ N + 1 ] ; for ( int i = 0 ; i < N + 1 ; i ++ ) primeAll [ i ] = true ; for ( int p = 2 ; p * p <= N ; p ++ ) { if ( primeAll [ p ] == false ) { for ( int i = p * 2 ; i <= N ; i += p ) prime [ i ] = false ; } } ArrayList < Integer > prime = new ArrayList < Integer > ( ) ; for ( int p = 2 ; p * p <= N ; p ++ ) { if ( primeAll [ p ] ) { prime . add ( p ) ; } } for ( int i = 0 ; i < prime . size ( ) ; i ++ ) { int p = prime . get ( i ) ; if ( 1 * p * p * p <= N ) { prime . add ( p ) ; } for ( int j = i + 1 ; j < prime . size ( ) ; j ++ ) { int q = prime . get ( j ) ; if ( 1 * p * q > N ) break ; } } } return false ; } public static void main ( String [ ] args ) { 4 ; int num = 10 ; if ( fourDivisors ( num ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; num = 12 ; if ( fourDiv [ num ] ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; num = 12 ; if ( numDiv [ num ] ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; num = 12 ; } }"],"references":["import java . util . * ; class GFG { static int N = ( int ) 1E6 ; static boolean [ ] fourDiv = new boolean [ N + 1 ] ; static void fourDistinctFactors ( ) { boolean [ ] primeAll = new boolean [ N + 1 ] ; for ( int p = 2 ; p * p <= N ; p ++ ) { if ( primeAll [ p ] == false ) { for ( int i = p * 2 ; i <= N ; i += p ) primeAll [ i ] = true ; } } ArrayList < Integer > prime = new ArrayList < Integer > ( ) ; for ( int p = 2 ; p <= N ; p ++ ) if ( ! primeAll [ p ] ) prime . add ( p ) ; for ( int i = 0 ; i < prime . size ( ) ; ++ i ) { int p = prime . get ( i ) ; if ( 1L * p * p * p <= N ) fourDiv [ p * p * p ] = true ; for ( int j = i + 1 ; j < prime . size ( ) ; ++ j ) { int q = prime . get ( j ) ; if ( 1L * p * q > N ) break ; fourDiv [ p * q ] = true ; } } } public static void main ( String [ ] args ) { fourDistinctFactors ( ) ; int num = 10 ; if ( fourDiv [ num ] ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; num = 12 ; if ( fourDiv [ num ] ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.7260435666883295,"rouge_l":0.8235321037938766}
{"id":886,"predictions":["class GFG { static final int N = 3 ; static void sinarProduct ( int mat [ ] [ ] , int k ) { for ( int i = 0 ; i < N ; i ++ ) for ( int j = 0 ; j < N ; j ++ ) mat [ i ] [ j ] = mat [ i ] [ j ] * k ; } static void suffixarProduct ( int k ) { for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < N ; j ++ ) System . out . print ( mat [ i ] [ j ] + \" ▁ \" ) ; System . out . println ( \" \\n Product ▁ Product ▁ matrix ▁ is ▁ : ▁ \" ) ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < N ; j ++ ) System . out . print ( mat [ i ] [ j ] + \" ▁ \" ) ; System . out . println ( ) ; } } } public static void main ( String [ ] args ) { int mat [ ] [ ] = { { 1 , 2 , 3 } , { 4 , 5 , 6 } , { 7 , 8 , 9 } } ; int k = 4 ; printArrProduct ( mat , k ) ; } }"],"references":["import java . io . * ; class GFG { static final int N = 3 ; static void scalarProductMat ( int mat [ ] [ ] , int k ) { for ( int i = 0 ; i < N ; i ++ ) for ( int j = 0 ; j < N ; j ++ ) mat [ i ] [ j ] = mat [ i ] [ j ] * k ; } public static void main ( String [ ] args ) { int mat [ ] [ ] = { { 1 , 2 , 3 } , { 4 , 5 , 6 } , { 7 , 8 , 9 } } ; int k = 4 ; scalarProductMat ( mat , k ) ; System . out . println ( \" Scalar ▁ Product ▁ Matrix ▁ is ▁ : ▁ \" ) ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < N ; j ++ ) System . out . print ( mat [ i ] [ j ] + \" ▁ \" ) ; System . out . println ( ) ; } } }"],"bleu":0.7386058516828978,"rouge_l":0.6926988992615299}
{"id":887,"predictions":["import java . util . * ; class GFG { public static String reverse ( String a ) { char [ ] arr = aforgeeks \" . toCharArray ( ) ; Arrays . sort ( arr ) ; return String . valueOf ( arr ) ; } public static void main ( String [ ] args ) { String s = \" geeksforgeeks \" ; System . out . println ( s ) ; } }"],"references":["class GFG { public static void main ( String [ ] args ) { StringBuilder str = new StringBuilder ( \" geeksforgeeks \" ) ; str . reverse ( ) ; System . out . println ( str ) ; } }"],"bleu":0.3283872382104956,"rouge_l":0.518464243845252}
{"id":888,"predictions":["import java . util . * ; class GFG { static int countDistinct ( int arr [ ] , int n ) { Set < Integer > s = new HashSet < > ( ) ; int res = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . contains ( arr [ i ] ) ) { s . add ( arr [ i ] ) ; res ++ ; } } return res ; } public static void main ( String [ ] args ) { int arr [ ] = { 6 , 10 , 5 , 4 , 9 , 120 , 4 , 6 , 10 } ; int n = arr . length ; System . out . println ( countDistinct ( arr , n ) ) ; } }"],"references":["import java . util . * ; class GFG { public static int countDistinct ( int arr [ ] , int n ) { HashSet < Integer > hs = new HashSet < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { hs . add ( arr [ i ] ) ; } return hs . size ( ) ; } public static void main ( String [ ] args ) { int arr [ ] = new int [ ] { 6 , 10 , 5 , 4 , 9 , 120 , 4 , 6 , 10 } ; System . out . println ( countDistinct ( arr , arr . length ) ) ; } }"],"bleu":0.6811444731829912,"rouge_l":0.825014961101137}
{"id":889,"predictions":["class GFG { static int x = 32 ; static void toggleCase ( char a [ ] ) { for ( int i = 0 ; i < a . length ; i ++ ) { a [ i ] = ( char ) ( ( int ) ( a [ i ] ^ 32 ) ; } } public static void main ( String [ ] args ) { char str [ ] = \" CherY \" ; System . out . println ( \" Draw ▁ case \" + \" : ▁ \" ) ; str = toggleCase ( str ) ; System . out . println ( \" Original ▁ string : ▁ \" + toggleCase ( str ) ) ; } }"],"references":["public class Test { static int x = 32 ; static String toggleCase ( char [ ] a ) { for ( int i = 0 ; i < a . length ; i ++ ) { a [ i ] ^= 32 ; } return new String ( a ) ; } public static void main ( String [ ] args ) { String str = \" CheRrY \" ; System . out . print ( \" Toggle ▁ case : ▁ \" ) ; str = toggleCase ( str . toCharArray ( ) ) ; System . out . println ( str ) ; System . out . print ( \" Original ▁ string : ▁ \" ) ; str = toggleCase ( str . toCharArray ( ) ) ; System . out . println ( str ) ; } }"],"bleu":0.5618437947035831,"rouge_l":0.7277657266811279}
{"id":890,"predictions":["import java . util . * ; class GFG { static int MAX = 100000 ; static ArrayList < Integer > arr = new ArrayList < Integer > ( ) ; static boolean [ ] prime = new boolean [ MAX ] ; static void SieveOfEratosthenes ( ) { for ( int i = 0 ; i < MAX ; i ++ ) prime [ i ] = true ; for ( int p = 2 ; p * p < MAX ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i < MAX ; i += p ) prime [ i ] = false ; } } for ( int p = 2 ; p < MAX ; p ++ ) if ( prime [ p ] ) arr [ p ] = false ; } static boolean isPrimorialPrime ( int n ) { if ( ! prime [ n ] ) return false ; int product = 1 , i = 0 ; while ( product < n ) { product *= arr [ i ] ; if ( product + 1 == n || product - 1 == n ) return true ; i ++ ; } return false ; } public static void main ( String [ ] args ) { SieveOfEratosthenes ( ) ; int n = 31 ; if ( isPrimorialPrime ( n ) ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ; } }"],"references":["import java . util . * ; class GFG { static final int MAX = 1000000 ; static Vector < Integer > arr = new Vector < Integer > ( ) ; static boolean [ ] prime = new boolean [ MAX ] ; static void SieveOfEratosthenes ( ) { for ( int i = 0 ; i < MAX ; i ++ ) prime [ i ] = true ; for ( int p = 2 ; p * p < MAX ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i < MAX ; i += p ) prime [ i ] = false ; } } for ( int p = 2 ; p < MAX ; p ++ ) if ( prime [ p ] ) arr . add ( p ) ; } static boolean isPrimorialPrime ( int n ) { if ( ! prime [ n ] ) return false ; long product = 1 ; int i = 0 ; while ( product < n ) { product = product * arr . get ( i ) ; if ( product + 1 == n || product - 1 == n ) return true ; i ++ ; } return false ; } public static void main ( String [ ] args ) { SieveOfEratosthenes ( ) ; int n = 31 ; if ( isPrimorialPrime ( n ) ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ; } }"],"bleu":0.8858265525334242,"rouge_l":0.9433928464799667}
{"id":891,"predictions":["class GFG { static int countNumbers ( int X , int Y , int N ) { int count = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { if ( ( i % X == 0 ) && ( i % Y != 0 ) ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int X = 2 , Y = 3 , N = 10 ; System . out . println ( countNumbers ( X , Y , N ) ) ; } }"],"references":["class GFG { static int countNumbers ( int X , int Y , int N ) { int count = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { if ( ( i % X == 0 ) && ( i % Y != 0 ) ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int X = 2 , Y = 3 , N = 10 ; System . out . println ( countNumbers ( X , Y , N ) ) ; } }"],"bleu":1.0,"rouge_l":1.0}
{"id":892,"predictions":["import java . util . * ; class GFG { static int countSubseq ( int arr [ ] , int n ) { HashMap < Integer , Integer > um = new HashMap < Integer , Integer > ( ) ; int count = 1 ; for ( int i = 0 ; i < n ; i ++ ) { um . put ( arr [ i ] , um . get ( arr [ i ] ) == null ? 1 : um . get ( arr [ i ] ) + 1 ) ; } for ( Map . Entry < Integer , Integer > entry : um . entrySet ( ) ) { if ( values > 0 ) count *= values . getValue ( ) ; } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 4 , 7 , 6 , 7 } ; int n = arr . length ; System . out . println ( \" Count ▁ = ▁ \" + countSubseq ( arr , n ) ) ; } }"],"references":["import java . util . HashMap ; class geeks { public static long countSubseq ( int [ ] arr , int n ) { HashMap < Integer , Integer > um = new HashMap < > ( ) ; long count = 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( um . get ( arr [ i ] ) != null ) { int a = um . get ( arr [ i ] ) ; um . put ( arr [ i ] , ++ a ) ; } else um . put ( arr [ i ] , 1 ) ; } for ( HashMap . Entry < Integer , Integer > entry : um . entrySet ( ) ) { count *= entry . getValue ( ) ; } return count ; } public static void main ( String [ ] args ) { int [ ] arr = { 4 , 7 , 6 , 7 } ; int n = arr . length ; System . out . println ( \" Count ▁ = ▁ \" + countSubseq ( arr , n ) ) ; } }"],"bleu":0.7295256964101446,"rouge_l":0.8363065741658408}
{"id":893,"predictions":["class GFG { static boolean check ( int a , int b ) { int c = 0 ; while ( a != 0 ) { c = c + a % 10 ; a \/= 10 ; } return ( c == b ) ; } static boolean root ( int n ) { boolean found = false ; for ( int i = 0 ; i < 81 ; i ++ ) { int s = i * i + 4 * n ; int sq = ( int ) ( Math . sqrt ( s ) ) ; if ( sq * sq == s && check ( ( ( sq - i ) \/ 2 ) , i ) ) { found = true ; mx = Math . min ( mx , ( sq - i ) \/ 2 ) ; } } if ( found ) return mx ; else return - 1 ; } public static void main ( String [ ] args ) { int n = 110 ; System . out . println ( root ( n ) ) ; } }"],"references":["class GFG { static boolean check ( long a , long b ) { long c = 0 ; while ( a != 0 ) { c = c + a % 10 ; a = a \/ 10 ; } return ( c == b ) ; } static long root ( long n ) { boolean found = false ; long mx = ( long ) 1E18 ; for ( long i = 0 ; i <= 90 ; i ++ ) { long s = i * i + 4 * n ; long sq = ( long ) Math . sqrt ( s ) ; if ( sq * sq == s && check ( ( sq - i ) \/ 2 , i ) ) { found = true ; mx = Math . min ( mx , ( sq - i ) \/ 2 ) ; } } if ( found ) return mx ; else return - 1 ; } public static void main ( String [ ] args ) { long n = 110 ; System . out . println ( root ( n ) ) ; } }"],"bleu":0.7704263073329891,"rouge_l":0.894413078284318}
{"id":894,"predictions":["class GFG { static double maxFraction ( int first , int second ) { double a = first . second ; double c = first . second ; double d = first . second ; if ( first . second == 0 ) { first = first . second ; second = sec . second ; } else { first = first * d - b * c ; } } return ( first ) ; } public static void main ( String [ ] args ) { int first = 3 , second = 4 ; System . out . println ( maxFraction ( first , second ) + \" \/ \" + second ) ; } }"],"references":["import java . io . * ; import java . util . * ; class Fraction { int num , den ; Fraction ( int n , int d ) { num = n ; den = d ; } static Fraction maxFraction ( Fraction first , Fraction sec ) { int a = first . num ; int b = first . den ; int c = sec . num ; int d = sec . den ; int Y = a * d - b * c ; return ( Y > 0 ) ? first : sec ; } public static void main ( String [ ] args ) { Fraction first = new Fraction ( 3 , 2 ) ; Fraction sec = new Fraction ( 3 , 4 ) ; Fraction res = maxFraction ( first , sec ) ; System . out . println ( res . num + \" \/ \" + res . den ) ; } }"],"bleu":0.25858963826690445,"rouge_l":0.49067143335940117}
{"id":895,"predictions":["class GFG { static void Permutation ( int n , int k ) { int [ ] p = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) p [ i ] = i ; for ( int i = 1 ; i <= n - k ; i ++ ) p [ i + 1 ] = i ; p [ 1 ] = n - k ; for ( int i = 1 ; i < n ; i ++ ) System . out . print ( p [ i ] + \" ▁ \" ) ; } public static void main ( String [ ] args ) { int n = 5 , k = 2 ; Permutation ( n , k ) ; } }"],"references":["class GFG { static void Permutation ( int n , int k ) { int [ ] p = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) p [ i ] = i ; for ( int i = 1 ; i < n - k ; i ++ ) p [ i + 1 ] = i ; p [ 1 ] = n - k ; for ( int i = 1 ; i <= n ; i ++ ) System . out . print ( p [ i ] + \" ▁ \" ) ; } public static void main ( String [ ] args ) { int n = 5 , k = 2 ; Permutation ( n , k ) ; } }"],"bleu":0.989239934616874,"rouge_l":0.9859154929577465}
{"id":896,"predictions":["class GFG { static int reverse ( int x ) { int rev = 0 ; while ( x > 0 ) { rev = rev * 10 + x % 10 ; x \/= 10 ; } return rev ; } static void printEmirp ( int n ) { boolean [ ] prime = new boolean [ n + 1 ] ; for ( int p = 0 ; p <= n ; p ++ ) prime [ p ] = true ; for ( int p = 2 ; p * p <= n ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i <= n ; i += p ) prime [ i ] = false ; } } for ( int p = 2 ; p <= n ; p ++ ) { if ( prime [ p ] == true ) { int rev = reverse ( p ) ; if ( p != rev && rev <= n && prime [ rev ] == true ) { System . out . print ( p + \" ▁ \" + rev + \" ▁ \" ) ; prime [ rev ] = 0 ; } } } public static void main ( String [ ] args ) { int n = 100 ; printEmirp ( n ) ; } }"],"references":["import java . util . Arrays ; class GFG { static int reverse ( int x ) { int rev = 0 ; while ( x > 0 ) { rev = ( rev * 10 ) + x % 10 ; x = x \/ 10 ; } return rev ; } static void printEmirp ( int n ) { boolean prime [ ] = new boolean [ n + 1 ] ; Arrays . fill ( prime , true ) ; for ( int p = 2 ; p * p <= n ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i <= n ; i += p ) prime [ i ] = false ; } } for ( int p = 2 ; p <= n ; p ++ ) { if ( prime [ p ] ) { int rev = reverse ( p ) ; if ( p != rev && rev <= n && prime [ rev ] ) { System . out . print ( p + \" ▁ \" + rev + \" ▁ \" ) ; prime [ rev ] = false ; } } } } public static void main ( String [ ] args ) { int n = 100 ; printEmirp ( n ) ; } }"],"bleu":0.8404913220972586,"rouge_l":0.9089403973509935}
{"id":897,"predictions":["class GFG { static int largest ( int [ ] arr , int n ) { int max = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] > max ) max = arr [ i ] ; } return max ; } static int largest ( int arr [ ] , int n ) { return arr [ 0 ] ; } public static void main ( String [ ] args ) { int arr [ ] = { 10 , 324 , 45 , 90 , 9808 } ; int n = arr . length ; System . out . println ( largest ( arr , n ) ) ; } }"],"references":["import java . io . * ; import java . util . * ; class GFG { static int largest ( int [ ] arr , int n ) { Arrays . sort ( arr ) ; return arr [ n - 1 ] ; } static public void main ( String [ ] args ) { int [ ] arr = { 10 , 324 , 45 , 90 , 9808 } ; int n = arr . length ; System . out . println ( largest ( arr , n ) ) ; } }"],"bleu":0.49775295154033794,"rouge_l":0.6850894044628344}
{"id":898,"predictions":["import java . util . * ; class GFG { static class Node { int data ; Node left , right ; } static Node newNode ( int key ) { Node temp = new Node ( ) ; temp . data = key ; temp . left = temp . right = null ; return temp ; } static int maxLevelProduct ( Node root ) { if ( root == null ) return 0 ; int result = root . data ; Queue < Node > q = new LinkedList < > ( ) ; q . add ( root ) ; while ( ! q . isEmpty ( ) ) { int count = q . size ( ) ; int product = 1 ; while ( count > 0 ) { count -- ; int product = q . peek ( ) ; q . remove ( ) ; if ( temp . left != null ) q . add ( temp . left ) ; if ( temp . right != null ) q . add ( temp . right ) ; } result = Math . max ( product , result ) ; } return result ; } public static void main ( String args [ ] ) { Node root = newNode ( 1 ) ; root . left = newNode ( 2 ) ; root . right = newNode ( 3 ) ; root . left . left = newNode ( 4 ) ; root . left . right = newNode ( 5 ) ; root . right . left = newNode ( 6 ) ; root . left . right . left = newNode ( 7 ) ; root . right . right = newNode ( 7 ) ; System . out . println ( \" Maximum ▁ level ▁ product ▁ is ▁ \" + maxLevelProduct ( root ) ) ; } }"],"references":["import java . util . * ; class GFG { static class Node { int data ; Node left , right ; } ; static int maxLevelProduct ( Node root ) { if ( root == null ) return 0 ; int result = root . data ; Queue < Node > q = new LinkedList < > ( ) ; q . add ( root ) ; while ( q . size ( ) > 0 ) { int count = q . size ( ) ; int product = 1 ; while ( count -- > 0 ) { Node temp = q . peek ( ) ; q . remove ( ) ; product = product * temp . data ; if ( temp . left != null ) q . add ( temp . left ) ; if ( temp . right != null ) q . add ( temp . right ) ; } result = Math . max ( product , result ) ; } return result ; } static Node newNode ( int data ) { Node node = new Node ( ) ; node . data = data ; node . left = node . right = null ; return ( node ) ; } public static void main ( String args [ ] ) { Node root = newNode ( 1 ) ; root . left = newNode ( 2 ) ; root . right = newNode ( 3 ) ; root . left . left = newNode ( 4 ) ; root . left . right = newNode ( 5 ) ; root . right . right = newNode ( 8 ) ; root . right . right . left = newNode ( 6 ) ; root . right . right . right = newNode ( 7 ) ; System . out . print ( \" Maximum ▁ level ▁ product ▁ is ▁ \" + maxLevelProduct ( root ) ) ; } }"],"bleu":0.8427010843881334,"rouge_l":0.835658065158912}
{"id":899,"predictions":["import java . util . * ; class GFG { static int fact ( int n ) { int fact = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { fact *= i ; } return fact ; } static int countStrings ( String str , int n ) { int [ ] distinct_char = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { distinct_char [ i ] = str . charAt ( i ) ; } return fact ( distinct_char ) ; } static public void main ( String [ ] args ) { String str = \" geeksforgeeks \" ; int n = str . length ( ) ; System . out . println ( countStrings ( str , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static int fact ( int n ) { int fact = 1 ; for ( int i = 1 ; i <= n ; i ++ ) fact *= i ; return fact ; } static int countStrings ( String str , int n ) { Set < Character > distinct_char = new HashSet < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { distinct_char . add ( str . charAt ( i ) ) ; } return fact ( distinct_char . size ( ) ) ; } public static void main ( String [ ] args ) { String str = \" geeksforgeeks \" ; int n = str . length ( ) ; System . out . println ( countStrings ( str , n ) ) ; } }"],"bleu":0.799151047664794,"rouge_l":0.890462078805839}
{"id":900,"predictions":["import java . util . * ; class GFG { static void printMaxValPair ( int [ ] v , int n ) { Arrays . sort ( v ) ; int N = v [ n - 1 ] ; if ( N % 2 == 1 ) { int first_max = N \/ 2 ; int second_max = first_max + 1 ; int ans1 = 3 * ( Integer . MIN_VALUE ) ; int ans2 = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( v [ i ] > first_max ) { ans1 = i ; break ; } else { int diff = first_max - v [ i ] ; if ( diff < ans1 ) { ans1 = diff ; } else { int diff = first_max - second_left ; if ( diff < ans1 ) { ans1 = diff ; from_left = v [ i ] ; } } } else { max_right = ( int ) N \/ 2 ; int diff1 = first_max - second_max ; int diff2 = - 1 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { int diff = Math . abs ( v [ i ] - max_left ) ; if ( diff < diff2 ) System . out . print ( N + \" ▁ \" + ( int ) ( N + \" ▁ \" ) ; else System . out . print ( N + \" ▁ \" + ( N + \" ▁ \" + R ) ; } System . out . println ( N + \" ▁ \" + R ) ; } } public static void main ( String [ ] args ) { int [ ] v = { 1 , 1 , 2 , 3 , 6 , 1 } ; int n = v . length ; printMaxValPair ( v , n ) ; } }"],"references":["import java . util . * ; class GFG { static void printMaxValPair ( Vector < Long > v , int n ) { Collections . sort ( v ) ; long N = v . get ( ( int ) n - 1 ) ; if ( N % 2 == 1 ) { long first_maxima = N \/ 2 ; long second_maxima = first_maxima + 1 ; long ans1 = ( long ) 3e18 , ans2 = ( long ) 3e18 ; long from_left = - 1 , from_right = - 1 ; long from = - 1 ; for ( long i = 0 ; i < n ; ++ i ) { if ( v . get ( ( int ) i ) > first_maxima ) { from = i ; break ; } else { long diff = first_maxima - v . get ( ( int ) i ) ; if ( diff < ans1 ) { ans1 = diff ; from_left = v . get ( ( int ) i ) ; } } } from_right = v . get ( ( int ) from ) ; long diff1 = first_maxima - from_left ; long diff2 = from_right - second_maxima ; if ( diff1 < diff2 ) System . out . println ( N + \" ▁ \" + from_left ) ; else System . out . println ( N + \" ▁ \" + from_right ) ; } else { long maxima = N \/ 2 ; long ans1 = ( int ) 3e18 ; long R = - 1 ; for ( long i = 0 ; i < n - 1 ; ++ i ) { long diff = Math . abs ( v . get ( ( int ) i ) - maxima ) ; if ( diff < ans1 ) { ans1 = diff ; R = v . get ( ( int ) i ) ; } } System . out . println ( N + \" ▁ \" + R ) ; } } public static void main ( String args [ ] ) { long arr [ ] = { 1 , 1 , 2 , 3 , 6 , 1 } ; Vector < Long > v = new Vector < Long > ( ) ; for ( int i = 0 ; i < arr . length ; i ++ ) v . add ( arr [ i ] ) ; int n = v . size ( ) ; printMaxValPair ( v , n ) ; } }"],"bleu":0.4557525551740921,"rouge_l":0.576856076316881}
{"id":901,"predictions":["import java . util . * ; class GFG { static void triangle ( int n ) { int k = 2 * n - 2 ; int ch = 1 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < k ; j ++ ) { System . out . print ( \" ▁ \" ) ; } k = k - 1 ; for ( int j = 0 ; j < i + 1 ; j ++ ) { System . out . print ( ch + \" ▁ \" ) ; } System . out . println ( ) ; } } static int maxHeight ( int n ) { int ans = ( int ) Math . sqrt ( 1 + 8.0 * n ) \/ 2 ; return ans ; } public static void main ( String [ ] args ) { int N = 9 ; triangle ( N ) ; } }"],"references":["import java . util . * ; class GFG { static void triangle ( int n ) { int k = 2 * n - 2 ; int ch = 1 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < k ; j ++ ) System . out . print ( \" ▁ \" ) ; k = k - 1 ; for ( int j = 0 ; j <= i ; j ++ ) { System . out . print ( ch ++ + \" ▁ \" ) ; } System . out . println ( ) ; } } static int maxHeight ( int n ) { return ( ( ( int ) Math . sqrt ( 1 + 8.0 * n ) ) - 1 ) \/ 2 ; } public static void main ( String [ ] args ) { int N = 9 ; triangle ( maxHeight ( N ) ) ; } }"],"bleu":0.8681812260943593,"rouge_l":0.9339930912146391}
{"id":902,"predictions":["class GFG { static int longestInteger ( String s , int len ) { int count = 0 , maximum = 0 , pos = - 1 ; int l = 0 ; for ( int i = 0 ; i < len ; i ++ ) { int pre_pos = pos ; int count = 0 ; if ( s . charAt ( i ) == null ) pos = i ; while ( s . charAt ( i ) == '0' ) { count ++ ; i ++ ; l ++ ; } if ( count > maximum ) { maximum = count ; } else { pos = pre_pos ; l = pre_len ; } } return ( s . substring ( pos , pos + l ) ; } public static void main ( String [ ] args ) { String s = \" geeks100for1234\" ; int len = s . length ( ) ; System . out . println ( longestInteger ( s , len ) ) ; } }"],"references":["import java . io . * ; import java . util . * ; import java . lang . * ; class GFG { static String longestInteger ( String str , int l ) { int count = 0 , max = 0 , pos = - 1 , pre_pos , pre_len , len = 0 ; for ( int i = 0 ; i < l ; i ++ ) { pre_pos = pos ; pre_len = len ; count = 0 ; len = 0 ; if ( Character . isDigit ( str . charAt ( i ) ) ) pos = i ; while ( Character . isDigit ( str . charAt ( i ) ) ) { count ++ ; i ++ ; len ++ ; } if ( count > max ) { max = count ; } else { pos = pre_pos ; len = pre_len ; } } return ( str . substring ( pos , pos + len ) ) ; } public static void main ( String [ ] args ) { String str = \" geeks100for1234geeks \" ; int l = str . length ( ) ; System . out . print ( longestInteger ( str , l ) ) ; } }"],"bleu":0.516892169734974,"rouge_l":0.7395167317113677}
{"id":903,"predictions":["import java . io . * ; class GFG { static int findSum ( int n , int a , int b ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( i % a == 0 || i % b == 0 ) { sum += i ; } } return sum ; } public static void main ( String [ ] args ) { int n = 10 , a = 3 , b = 5 ; System . out . println ( findSum ( n , a , b ) ) ; } }"],"references":["import java . io . * ; class GFG { static int findSum ( int n , int a , int b ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) if ( i % a == 0 || i % b == 0 ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 10 , a = 3 , b = 5 ; System . out . println ( findSum ( n , a , b ) ) ; } }"],"bleu":0.9222359249847374,"rouge_l":0.9849102157839142}
{"id":904,"predictions":["import java . io . * ; class GFG { static int seriesSum ( int n ) { return ( n * ( n + 1 ) * ( n + 2 ) ) \/ 6 ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( seriesSum ( n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int seriesSum ( int n ) { return ( n * ( n + 1 ) * ( n + 2 ) ) \/ 6 ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( seriesSum ( n ) ) ; } }"],"bleu":1.0,"rouge_l":1.0}
{"id":905,"predictions":["import java . util . * ; class GFG { static int find_count ( Vector < Integer > ele ) { int count = 0 ; int i ; for ( i = 0 ; i < ele . size ( ) ; i ++ ) { Vector < Integer > p = new Vector < > ( ) ; int c = 0 , j = 0 ; while ( j >= ( ele . size ( ) - i ) && j >= 0 ) { p . add ( ele ) ; j -- ; } j -- ; int k = 0 ; while ( j >= 0 ) { if ( ele . get ( j ) == p . get ( k ) ) break ; j -- ; k ++ ; if ( k == p . size ( ) { c += 1 ; k = 0 ; } } count = Math . max ( count , c ) ; } return count ; } static void solve ( int n ) { int count = 1 ; Vector < Integer > ele = new Vector < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( count + \" ▁ \" ) ; ele . add ( count ) ; } } public static void main ( String [ ] args ) { int n = 10 ; solve ( n ) ; } }"],"references":["import java . util . * ; class GFG { static int find_count ( Vector < Integer > ele ) { int count = 0 ; for ( int i = 0 ; i < ele . size ( ) ; i ++ ) { Vector < Integer > p = new Vector < Integer > ( ) ; int c = 0 ; for ( int j = ele . size ( ) - 1 ; j >= ( ele . size ( ) - 1 - i ) && j >= 0 ; j -- ) { p . add ( ele . get ( j ) ) ; } int j = ele . size ( ) - 1 , k = 0 ; while ( j >= 0 ) { if ( ele . get ( j ) != p . get ( k ) ) { break ; } j -- ; k ++ ; if ( k == p . size ( ) ) { c ++ ; k = 0 ; } } count = Math . max ( count , c ) ; } return count ; } static void solve ( int n ) { int count = 1 ; Vector < Integer > ele = new Vector < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( count + \" , ▁ \" ) ; ele . add ( count ) ; count = find_count ( ele ) ; } } public static void main ( String [ ] args ) { int n = 10 ; solve ( n ) ; } }"],"bleu":0.773914333928421,"rouge_l":0.8767672007540057}
{"id":906,"predictions":["class GFG { static int getMinimumOps ( int ar [ ] , int k ) { int n = ar . length ; int [ ] [ ] dp = new int [ n ] [ k + 1 ] ; dp [ 0 ] [ 1 ] = 0 ; for ( int i = 1 ; i < n ; i ++ ) { int maxGroups = Math . min ( k , i + 1 ) ; for ( int j = 1 ; j < maxGroups ; j ++ ) { dp [ i ] [ j ] = Math . min ( ( k , i + 1 ) ) ; if ( j == 1 ) { int freq1 = Integer . MAX_VALUE ; int freq = 0 ; for ( int it = 0 ; it <= i ; it ++ ) { if ( freq1 . containsKey ( ar [ it ] ) ) { freq1 . put ( ar [ it ] , freq ) ; } int newElement = ( ar [ it ] ) ; int newElement = freq1 [ it ] ; if ( newElement > freq ) { freq1 . put ( ar [ it ] , 1 ) ; } } } else { for ( int i = i ; i < i ; i ++ ) { freq1 . put ( ar [ i ] , freq ) ; } int newElement = 0 ; for ( int it = i ; it >= 0 ; it -- ) { if ( ( ar [ it ] < freq . elementAt ( ) ) { freq . put ( ar [ it ] , freq ) ; } } } else { freq . clear ( ) ; int [ ] freq = new int [ 26 + 1 ] ; for ( int i = i ; it >= 0 ; -- ) { freq . put ( ar [ it ] , freq . elementAt ( ) ) ; int newElement = freq . poll ( ) ; if ( newElement > freq ) { freqOfChanges = new Integer . MAX_VALUE ; } } return dp [ n - 1 ] ; } } public static void main ( String [ ] args ) { int k = 3 ; int ar . length ; System . out . print ( getMinimumOps ( ar , k ) ) ; } }"],"references":["class GFG { static int getMinimumOps ( int ar [ ] , int k ) { int n = ar . length ; int dp [ ] [ ] = new int [ n ] [ k + 1 ] ; dp [ 0 ] [ 1 ] = 0 ; for ( int i = 1 ; i < n ; i ++ ) { int maxGroups = Math . min ( k , i + 1 ) ; for ( int j = 1 ; j <= maxGroups ; j ++ ) { dp [ i ] [ j ] = Integer . MAX_VALUE ; if ( j == 1 ) { int freq [ ] = new int [ 100000 ] ; int freqOfMode = 0 ; for ( int it = 0 ; it <= i ; it ++ ) { freq [ ar [ it ] ] ++ ; int newElementFreq = freq [ ar [ it ] ] ; if ( newElementFreq > freqOfMode ) freqOfMode = newElementFreq ; } dp [ i ] [ 1 ] = ( i + 1 ) - freqOfMode ; } else { int freq [ ] = new int [ 100000 ] ; int freqOfMode = 0 ; for ( int it = i ; it >= j - 1 ; it -- ) { freq [ ar [ it ] ] ++ ; int newElementFreq = freq [ ar [ it ] ] ; if ( newElementFreq > freqOfMode ) freqOfMode = newElementFreq ; int elementsToChange = i - it + 1 ; elementsToChange -= freqOfMode ; dp [ i ] [ j ] = Math . min ( dp [ it - 1 ] [ j - 1 ] + elementsToChange , dp [ i ] [ j ] ) ; } } } } return dp [ n - 1 ] [ k ] ; } public static void main ( String args [ ] ) { int k = 3 ; int ar [ ] = { 3 , 1 , 3 , 3 , 2 , 1 , 8 , 5 } ; System . out . println ( getMinimumOps ( ar , k ) ) ; } }"],"bleu":0.5232680858166957,"rouge_l":0.6417848380255333}
{"id":907,"predictions":["import java . io . * ; class GFG { static int findCount ( int N ) { ArrayList < Integer > list = new ArrayList < Integer > ( ) ; int sum = 0 ; for ( int i = 0 ; i < 20 ; i ++ ) { sum += ( int ) Math . pow ( 2 , i ) ; list . add ( sum ) ; } for ( int value : list ) { if ( value > N ) return ( list . indexOf ( value ) + 1 ) ; } return list . indexOf ( N ) ; } public static void main ( String [ ] args ) { int N = 10 ; System . out . println ( findCount ( N ) ) ; } }"],"references":["import java . util . * ; class GFG { static int findCount ( int N ) { Vector list = new Vector ( ) ; int sum = 0 ; int i ; for ( i = 0 ; i < 20 ; i ++ ) { sum += Math . pow ( 2 , i ) ; list . add ( sum ) ; } for ( i = 0 ; i < 20 ; i ++ ) { if ( ( int ) list . get ( i ) > N ) return ( list . indexOf ( list . get ( i ) ) + 1 ) ; } return 0 ; } public static void main ( String [ ] args ) { int N = 10 ; System . out . println ( findCount ( N ) ) ; } }"],"bleu":0.7011379177150976,"rouge_l":0.7978844404003639}
{"id":908,"predictions":["import java . util . * ; class GFG { static void farey ( int n ) { int x1 = 0 , y1 = 1 ; int x2 = 1 , y2 = n ; System . out . print ( x1 + \" \/ \" ) ; System . out . print ( y1 + \" ▁ \/ \" ) ; System . out . print ( x1 + \" \/ \" ) ; System . out . print ( y1 + \" ▁ \" ) ; int x = 0 , y = 0 ; while ( y != 1.0 ) { x = ( int ) Math . floor ( ( y1 + n ) \/ y2 ) * x2 - x1 ; y = ( int ) Math . floor ( ( y1 + n ) \/ y2 ) * y2 - y1 ; System . out . print ( y + \" \/ \" ) ; x1 = x2 ; y1 = y2 ; y2 = y2 ; } } public static void main ( String [ ] args ) { int n = 7 ; System . out . println ( \" Farey ▁ of ▁ number ▁ \" + n + \" ▁ is ▁ \" ) ; profity ( n ) ; } }"],"references":["class GFG { static void farey ( int n ) { double x1 = 0 , y1 = 1 , x2 = 1 , y2 = n ; System . out . printf ( \" % .0f \/ % . 0f ▁ % .0f \/ % . 0f \" , x1 , y1 , x2 , y2 ) ; double x , y = 0 ; while ( y != 1.0 ) { x = Math . floor ( ( y1 + n ) \/ y2 ) * x2 - x1 ; y = Math . floor ( ( y1 + n ) \/ y2 ) * y2 - y1 ; System . out . printf ( \" ▁ % .0f \/ % . 0f \" , x , y ) ; x1 = x2 ; x2 = x ; y1 = y2 ; y2 = y ; } } public static void main ( String [ ] args ) { int n = 7 ; System . out . print ( \" Farey ▁ Sequence ▁ of ▁ order ▁ \" + n + \" ▁ is \\n \" ) ; farey ( n ) ; } }"],"bleu":0.5831365932128217,"rouge_l":0.7565742993955571}
{"id":909,"predictions":["class GFG { static float focal_length ( float a_ distance , float x_lift ) { return ( float ) 1 \/ ( ( 1 \/ a_Distance ) + ( 1 \/ value_lift ) ) ; } public static void main ( String [ ] args ) { float image_lift = 2 ; float result =pez_length ( ) ; System . out . printf ( \" Fraction ▁ of ▁ a ▁ lens ▁ is ▁ \" + result + \" ▁ units . \" ) ; } }"],"references":["import java . io . * ; class GFG { static float focal_length ( float image_distance , float object_distance ) { return 1 \/ ( ( 1 \/ image_distance ) + ( 1 \/ object_distance ) ) ; } public static void main ( String [ ] args ) { float image_distance = 2 ; float object_distance = 50 ; System . out . println ( \" Focal ▁ length ▁ of ▁ a ▁ lens ▁ is ▁ \" + focal_length ( image_distance , object_distance ) + \" ▁ units . \" ) ; } }"],"bleu":0.5796676020412636,"rouge_l":0.7716092761770907}
{"id":910,"predictions":["class GFG { static long power ( long x , long y , long p ) { long res = 1 ; x = x % p ; while ( y > 0 ) { if ( ( y & 1 ) == 1 ) res = ( res * x ) % p ; y = y >> 1 ; x = ( x * x ) % p ; } return res ; } static long findModuloByM ( long X , long N , int M ) { if ( N < 6 ) { long temp = ( char ) ( 48 + X ) * N ; res = temp >> 1 ; } if ( N % 2 == 0 ) { long half = findModuloByM ( X , N \/ 2 , M ) % M ; res = ( half * power ( 10 , N \/ 2 , M ) + half ) % M ; return res ; } else { long half = findModuloByM ( X , N \/ 2 , M ) % M ) % M ; res = ( half * power ( 10 , N \/ 2 + 1 , M ) + half * 10 + half * 10 + X ) % M ; return res ; } } public static void main ( String [ ] args ) { long X = 6 , N = 14 , M = 9 ; System . out . print ( findModuloByM ( X , N , M ) ) ; } }"],"references":["class GFG { static int power ( int x , int y , int p ) { int res = 1 ; x = x % p ; while ( y > 0 ) { if ( y % 2 == 1 ) res = ( res * x ) % p ; y = y >> 1 ; x = ( x * x ) % p ; } return res ; } static int findModuloByM ( int X , int N , int M ) { if ( N < 6 ) { String temp = \" \" ; for ( int i = 0 ; i < N ; i ++ ) temp = temp + ( char ) ( X + 48 ) ; int res = Integer . parseInt ( temp ) % M ; return res ; } if ( N % 2 == 0 ) { int half = findModuloByM ( X , N \/ 2 , M ) % M ; int res = ( half * power ( 10 , N \/ 2 , M ) + half ) % M ; return res ; } else { int half = findModuloByM ( X , N \/ 2 , M ) % M ; int res = ( half * power ( 10 , N \/ 2 + 1 , M ) + half * 10 + X ) % M ; return res ; } } public static void main ( String [ ] args ) { int X = 6 , N = 14 , M = 9 ; System . out . println ( findModuloByM ( X , N , M ) ) ; } }"],"bleu":0.7222799112780868,"rouge_l":0.848266150325647}
{"id":911,"predictions":["import java . io . * ; class GFG { static int getTotalXorOfSubarrayXors ( int arr [ ] , int N ) { int res = 0 ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = i ; j < N ; j ++ ) { for ( int k = i ; k < j ; k ++ ) res = res ^ arr [ k ] ; } } return res ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 5 , 2 , 4 , 6 } ; int N = arr . length ; System . out . println ( getTotalXorOfSubarrayXors ( arr , N ) ) ; } }"],"references":["public class GFG { static int getTotalXorOfSubarrayXors ( int arr [ ] , int N ) { int res = 0 ; for ( int i = 0 ; i < N ; i ++ ) for ( int j = i ; j < N ; j ++ ) for ( int k = i ; k <= j ; k ++ ) res = res ^ arr [ k ] ; return res ; } public static void main ( String args [ ] ) { int arr [ ] = { 3 , 5 , 2 , 4 , 6 } ; int N = arr . length ; System . out . println ( getTotalXorOfSubarrayXors ( arr , N ) ) ; } }"],"bleu":0.8417445284089919,"rouge_l":0.94626458178208}
{"id":912,"predictions":["class GFG { static double circleCirclearea ( double radius ) { if ( radius < 0 ) return - 1 ; double r = radius \/ 2 ; double Area = ( 3.14f * Math . pow ( r , 2 ) ) ; return Area ; } public static void main ( String [ ] args ) { double radius = 4 ; System . out . println ( \" Area ▁ of ▁ circle ▁ c ▁ = ▁ \" + surfaceCirclearea ( radius ) ) ; } }"],"references":["class GFG { static double innerCirclearea ( double radius ) { if ( radius < 0 ) { return - 1 ; } double r = radius \/ 2 ; double Area = ( 3.14 * Math . pow ( r , 2 ) ) ; return Area ; } public static void main ( String arr [ ] ) { double radius = 4 ; System . out . println ( \" Area ▁ of ▁ circle ▁ c2 ▁ = ▁ \" + innerCirclearea ( radius ) ) ; } }"],"bleu":0.7902924403541713,"rouge_l":0.9329539391783745}
{"id":913,"predictions":["class GFG { public static void main ( String [ ] args ) { int P = 1 , R = 1 ; int T = 1 ; int i = 1 , index = 1 ; SI = ( P * R * T ) \/ 100 ; System . out . println ( \" strange ▁ is ▁ \" + S ) ; } }"],"references":["import java . io . * ; class GFG { public static void main ( String args [ ] ) { float P = 1 , R = 1 , T = 1 ; float SI = ( P * T * R ) \/ 100 ; System . out . println ( \" Simple ▁ interest ▁ = ▁ \" + SI ) ; } }"],"bleu":0.541217037742855,"rouge_l":0.7313432835820897}
{"id":914,"predictions":["class GFG { static void findSubArr ( int arr [ ] , int n ) { for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( Math . abs ( arr [ i ] - arr [ i + 1 ] ) >= 2 ) { System . out . print ( arr [ i ] + \" ▁ \" + arr [ i + 1 ] ) ; return ; } } System . out . println ( - 1 ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 4 , 6 , 7 } ; int n = arr . length ; findSubArr ( arr , n ) ; } }"],"references":["class GFG { static void findSubArr ( int arr [ ] , int n ) { for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( Math . abs ( arr [ i ] - arr [ i + 1 ] ) >= 2 ) { System . out . print ( arr [ i ] + \" ▁ \" + arr [ i + 1 ] ) ; return ; } } System . out . print ( - 1 ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 4 , 6 , 7 } ; int n = arr . length ; findSubArr ( arr , n ) ; } }"],"bleu":0.9815812081525179,"rouge_l":0.9927007299270074}
{"id":915,"predictions":["import java . util . * ; import java . lang . * ; class GFG { public static int Min_window ( int n , int k , int a [ ] ) { Arrays . sort ( a ) ; return ( int ) Math . ceil ( a [ 0 ] ) ; } public static void main ( String [ ] args ) { int n = 4 , k = 3 ; System . out . println ( Min_window ( n , k , a ) ) ; } }"],"references":["import java . util . * ; class GFG { public static double Min_glass ( int n , int k , int [ ] a ) { int sum = 0 ; for ( int i = 0 ; i < k ; i ++ ) sum += a [ i ] ; double ans = Math . ceil ( ( double ) sum \/ ( double ) 100 ) ; return ans ; } public static void main ( String [ ] args ) { int n = 4 ; int k = 3 ; int [ ] a = { 200 , 150 , 140 , 300 } ; Arrays . sort ( a ) ; System . out . println ( Min_glass ( n , k , a ) ) ; } }"],"bleu":0.4313566798201933,"rouge_l":0.5977090808722054}
{"id":916,"predictions":["import java . util . * ; class GFG { static void findModulo ( String s ) { int l = s . length ( ) ; int mod = 0 ; int modulus = 0 ; if ( s . contains ( \" + \" ) ) { int i = s . indexOf ( ' + ' ) ; } else { i = s . indexOf ( ' - ' ) ; } String real = s . substring ( 0 , i ) ; int x = Integer . MIN_VALUE ; String y = Integer . valueOf ( real ) ; System . out . println ( Math . sqrt ( x * x + y * y ) ) ; } public static void main ( String [ ] args ) { String s = \"3 + 4i \" ; findModulo ( s ) ; } }"],"references":["import java . util . * ; class GFG { static void findModulo ( String s ) { int l = s . length ( ) ; int i , modulus = 0 ; if ( s . contains ( \" + \" ) ) { i = s . indexOf ( \" + \" ) ; } else { i = s . indexOf ( \" - \" ) ; } String real = s . substring ( 0 , i ) ; String imaginary = s . substring ( i + 1 , l - 1 ) ; int x = Integer . parseInt ( real ) ; int y = Integer . parseInt ( imaginary ) ; System . out . print ( Math . sqrt ( x * x + y * y ) + \" \\n \" ) ; } public static void main ( String [ ] args ) { String s = \"3 + 4i \" ; findModulo ( s ) ; } }"],"bleu":0.7210222672179073,"rouge_l":0.8393933306548815}
{"id":917,"predictions":["class FindDuplicate { void printRepeating ( int arr [ ] , int size ) { int i ; System . out . println ( \" The ▁ repeating ▁ elements ▁ are ▁ : ▁ \" ) ; for ( i = 0 ; i < size ; i ++ ) { if ( arr [ Math . abs ( arr [ i ] ) ] > 0 ) arr [ Math . abs ( - 1 ) ] ) arr [ Math . abs ( arr [ i ] ) ] = ( - 1 ) * arr [ Math . abs ( arr [ i ] ) ] ; else System . out . print ( Math . abs ( arr [ i ] ) + \" ▁ \" ) ; } } public static void main ( String [ ] args ) { FindDuplicate duplicate = new FindDuplicate ( ) ; int arr [ ] = { 4 , 2 , 4 , 5 , 2 , 3 , 1 } ; int arr_size = arr . length ; duplicate . printRepeating ( arr , arr_size ) ; } }"],"references":["class RepeatElement { void printRepeating ( int arr [ ] , int size ) { int i ; System . out . println ( \" The ▁ repeating ▁ elements ▁ are ▁ : ▁ \" ) ; for ( i = 0 ; i < size ; i ++ ) { if ( arr [ Math . abs ( arr [ i ] ) ] > 0 ) arr [ Math . abs ( arr [ i ] ) ] = - arr [ Math . abs ( arr [ i ] ) ] ; else System . out . print ( Math . abs ( arr [ i ] ) + \" ▁ \" ) ; } } public static void main ( String [ ] args ) { RepeatElement repeat = new RepeatElement ( ) ; int arr [ ] = { 4 , 2 , 4 , 5 , 2 , 3 , 1 } ; int arr_size = arr . length ; repeat . printRepeating ( arr , arr_size ) ; } }"],"bleu":0.8578987726593001,"rouge_l":0.9394640790527908}
{"id":918,"predictions":["class GFG { static int countZeros ( int x ) { int n = 32 ; int y = x >> 16 ; if ( y != 0 ) { n = n - 16 ; x = y ; } y = x >> 8 ; if ( y != 0 ) { n = n - 4 ; x = y ; } y = x >> 2 ; if ( y != 0 ) { n = n - 2 ; x = y ; } y = x >> 1 ; if ( y != 0 ) return n - 2 ; return n - x ; } public static void main ( String [ ] args ) { int x = 101 ; System . out . println ( countZeros ( x ) ) ; } }"],"references":["import java . io . * ; class GFG { static int countZeros ( int x ) { int y ; int n = 32 ; y = x >> 16 ; if ( y != 0 ) { n = n - 16 ; x = y ; } y = x >> 8 ; if ( y != 0 ) { n = n - 8 ; x = y ; } y = x >> 4 ; if ( y != 0 ) { n = n - 4 ; x = y ; } y = x >> 2 ; if ( y != 0 ) { n = n - 2 ; x = y ; } y = x >> 1 ; if ( y != 0 ) return n - 2 ; return n - x ; } public static void main ( String [ ] args ) { int x = 101 ; System . out . println ( countZeros ( x ) ) ; } }"],"bleu":0.7783805286539787,"rouge_l":0.8731979695431472}
{"id":919,"predictions":["import java . io . * ; class pair { static int pairORSum ( int arr [ ] , int n ) { int ans = 0 ; for ( int i = 0 ; i < 32 ; i ++ ) { int k1 = 0 , k0 ; int k0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( ( arr [ j ] & ( 1 << i ) ) == 0 ) k1 ++ ; else k0 ++ ; } } ans += ( 1 << i ) * ( k1 - 1 ) + ( 1 << i ) * ( k1 * k0 ) ; } return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 4 } ; int n = arr . length ; System . out . print ( pairORSum ( arr , n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int pairORSum ( int arr [ ] , int n ) { int ans = 0 ; for ( int i = 0 ; i < 32 ; i ++ ) { int k1 = 0 ; int k0 = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( ( arr [ j ] & ( 1 << i ) ) != 0 ) k1 ++ ; else k0 ++ ; } ans = ans + ( 1 << i ) * ( k1 * ( k1 - 1 ) \/ 2 ) + ( 1 << i ) * ( k1 * k0 ) ; } return ans ; } public static void main ( String args [ ] ) { int arr [ ] = { 1 , 2 , 3 , 4 } ; int n = arr . length ; System . out . println ( pairORSum ( arr , n ) ) ; } }"],"bleu":0.8433903326600168,"rouge_l":0.931897662433278}
{"id":920,"predictions":["import java . io . * ; class GFG { static int binaryToDecimal ( String n ) { String num = n ; int dec_value = 0 ; int base1 = 1 ; int len1 = num . length ( ) ; for ( int i = len - 1 ; i >= 0 ; i -- ) { if ( num . charAt ( i ) == '1' ) dec_value += base1 ; base1 = base1 * 2 ; } return dec_value ; } public static void main ( String [ ] args ) { String num = \"10101001\" ; System . out . println ( binaryToDecimal ( num ) ) ; } }"],"references":["import java . io . * ; class GFG { static int binaryToDecimal ( String n ) { String num = n ; int dec_value = 0 ; int base = 1 ; int len = num . length ( ) ; for ( int i = len - 1 ; i >= 0 ; i -- ) { if ( num . charAt ( i ) == '1' ) dec_value += base ; base = base * 2 ; } return dec_value ; } public static void main ( String [ ] args ) { String num = new String ( \"10101001\" ) ; System . out . println ( binaryToDecimal ( num ) ) ; } }"],"bleu":0.8522688800742348,"rouge_l":0.9372817432602318}
{"id":921,"predictions":["class GFG { static int countStrings ( int n , int k ) { int [ ] [ ] dp = new int [ n + 1 ] [ k + 1 ] ; dp [ 1 ] [ 0 ] = 1 ; dp [ 1 ] [ 0 ] = 1 ; dp [ 1 ] [ 0 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) { for ( int j = 0 ; j <= k ; j ++ ) { dp [ i ] [ j ] = ( dp [ i - 1 ] [ j ] + dp [ i - 1 ] [ j ] ) ; dp [ i ] [ j ] = dp [ i - 1 ] [ j ] ; if ( j >= 1 ) dp [ i ] [ 1 ] += dp [ i - 1 ] [ j ] ; } } return dp [ n ] [ k ] + dp [ n ] [ k ] ; } public static void main ( String [ ] args ) { int n = 5 ; int k = 2 ; System . out . println ( countStrings ( n , k ) ) ; } }"],"references":["class GFG { static int countStrings ( int n , int k ) { int dp [ ] [ ] [ ] = new int [ n + 1 ] [ k + 1 ] [ 2 ] ; dp [ 1 ] [ 0 ] [ 0 ] = 1 ; dp [ 1 ] [ 0 ] [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) { for ( int j = 0 ; j < i && j < k + 1 ; j ++ ) { dp [ i ] [ j ] [ 0 ] = dp [ i - 1 ] [ j ] [ 0 ] + dp [ i - 1 ] [ j ] [ 1 ] ; dp [ i ] [ j ] [ 1 ] = dp [ i - 1 ] [ j ] [ 0 ] ; if ( j - 1 >= 0 ) { dp [ i ] [ j ] [ 1 ] += dp [ i - 1 ] [ j - 1 ] [ 1 ] ; } } } return dp [ n ] [ k ] [ 0 ] + dp [ n ] [ k ] [ 1 ] ; } public static void main ( String [ ] args ) { int n = 5 , k = 2 ; System . out . println ( countStrings ( n , k ) ) ; } }"],"bleu":0.7280186626689366,"rouge_l":0.8536324070974222}
{"id":922,"predictions":["class GFG { static void print2largest ( int arr [ ] , int arr_size ) { if ( arr_size < 2 ) { System . out . println ( \" Invalid ▁ Invalid ▁ Input ▁ \" ) ; return ; } int first = Integer . MIN_VALUE , second = Integer . MIN_VALUE ; for ( int i = 0 ; i < arr_size ; i ++ ) { if ( arr [ i ] > first ) { second = first ; first = arr [ i ] ; } else if ( arr [ i ] > second && arr [ i ] != first ) second = arr [ i ] ; } if ( second == Integer . MIN_VALUE ) System . out . println ( \" There ▁ is ▁ no ▁ largest ▁ element \" ) ; else System . out . println ( \" The ▁ second ▁ element ▁ is ▁ \" + second ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 12 , 35 , 1 , 10 , 34 , 1 } ; int n = arr . length ; print2largest ( arr , n ) ; } }"],"references":["class GFG { public static void print2largest ( int arr [ ] , int arr_size ) { int i , first , second ; if ( arr_size < 2 ) { System . out . print ( \" ▁ Invalid ▁ Input ▁ \" ) ; return ; } first = second = Integer . MIN_VALUE ; for ( i = 0 ; i < arr_size ; i ++ ) { if ( arr [ i ] > first ) { second = first ; first = arr [ i ] ; } else if ( arr [ i ] > second && arr [ i ] != first ) second = arr [ i ] ; } if ( second == Integer . MIN_VALUE ) System . out . print ( \" There ▁ is ▁ no ▁ second ▁ largest \" + \" ▁ element \\n \" ) ; else System . out . print ( \" The ▁ second ▁ largest ▁ element \" + \" ▁ is ▁ \" + second ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 12 , 35 , 1 , 10 , 34 , 1 } ; int n = arr . length ; print2largest ( arr , n ) ; } }"],"bleu":0.8284875871866125,"rouge_l":0.9220293325351692}
{"id":923,"predictions":["class GFG { static int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } static void print_gcd ( int a , int b ) { int max_gcd = 0 ; for ( int i = 0 ; i < n ; i ++ ) max_gcd = __gcd ( max_gcd , arr [ i ] ) ; for ( int i = 0 ; i < m ; i ++ ) { query [ i ] [ 0 ] -- ; } for ( int i = 0 ; i < m ; i ++ ) { query [ i ] [ 0 ] -- ; arr [ query [ i ] [ 1 ] \/= query [ i ] [ 1 ] ; max_gcd = gcd ( arr [ query [ i ] [ 0 ] , max_gcd ) ; } System . out . println ( max_gcd ) ; } public static void main ( String [ ] args ) { int n = 3 , m = 3 ; int [ ] [ ] query = { { 1 , 3 } , { 3 , 12 } , { 2 , 4 } } ; print_gcd ( n , m , query ) ; } }"],"references":["class GFG { static int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } static void print_gcd_online ( int n , int m , int [ ] [ ] query , int [ ] arr ) { int max_gcd = 0 ; int i = 0 ; for ( i = 0 ; i < n ; i ++ ) max_gcd = gcd ( max_gcd , arr [ i ] ) ; for ( i = 0 ; i < m ; i ++ ) { query [ i ] [ 0 ] -- ; arr [ query [ i ] [ 0 ] ] \/= query [ i ] [ 1 ] ; max_gcd = gcd ( arr [ query [ i ] [ 0 ] ] , max_gcd ) ; System . out . println ( max_gcd ) ; } } public static void main ( String [ ] args ) { int n = 3 ; int m = 3 ; int [ ] [ ] query = new int [ m ] [ 2 ] ; int [ ] arr = new int [ ] { 36 , 24 , 72 } ; query [ 0 ] [ 0 ] = 1 ; query [ 0 ] [ 1 ] = 3 ; query [ 1 ] [ 0 ] = 3 ; query [ 1 ] [ 1 ] = 12 ; query [ 2 ] [ 0 ] = 2 ; query [ 2 ] [ 1 ] = 4 ; print_gcd_online ( n , m , query , arr ) ; } }"],"bleu":0.5643374856834704,"rouge_l":0.6867924528301887}
{"id":924,"predictions":["import java . util . * ; class GFG { static int countSubstr ( String str , int n , int x , int y ) { int tot_count = 0 ; int count_count = 0 ; char [ ] str = str . toCharArray ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( str . charAt ( i ) == x ) count_x ++ ; if ( str . charAt ( i ) == y ) tot_count += count_x ; } return tot_count ; } public static void main ( String [ ] args ) { String str = \" abcadcak \" ; char x = ' a ' ; char y = ' c ' ; System . out . println ( \" Count ▁ = ▁ \" + countSubstr ( str , n , x , y ) ) ; } }"],"references":["import java . util . * ; import java . lang . * ; import java . io . * ; class GFG { static int countSubstr ( String str , int n , char x , char y ) { int tot_count = 0 ; int count_x = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( str . charAt ( i ) == x ) count_x ++ ; if ( str . charAt ( i ) == y ) tot_count += count_x ; } return tot_count ; } public static void main ( String args [ ] ) { String str = \" abbcaceghcak \" ; int n = str . length ( ) ; char x = ' a ' , y = ' c ' ; System . out . print ( \" Count ▁ = ▁ \" + countSubstr ( str , n , x , y ) ) ; } }"],"bleu":0.7636137733704179,"rouge_l":0.8431194511702986}
{"id":925,"predictions":["import java . io . * ; class GFG { static int centered_cube ( int n ) { return ( 2 * n + 1 ) * ( n * n + n + 1 ) ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . print ( n + \" th ▁ \" + \" th ▁ number ▁ : ▁ \" ) ; System . out . println ( centered_cube ( n ) ) ; n = 10 ; System . out . print ( n + \" th ▁ centered ▁ number ▁ : ▁ \" + centered_cube ( n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int centered_cube ( int n ) { return ( 2 * n + 1 ) * ( n * n + n + 1 ) ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . print ( n + \" th ▁ Centered \" + \" ▁ cube ▁ number : ▁ \" ) ; System . out . println ( centered_cube ( n ) ) ; n = 10 ; System . out . print ( n + \" th ▁ Centered \" + \" ▁ cube ▁ number : ▁ \" ) ; System . out . println ( centered_cube ( n ) ) ; } }"],"bleu":0.8077919923479595,"rouge_l":0.9049277605779155}
{"id":926,"predictions":["import java . util . * ; class GFG { static int MAX = 10000 ; static ArrayList < Integer > primes = new ArrayList < Integer > ( ) ; static void sieveSundaram ( ) { boolean marked [ ] = new boolean [ MAX \/ 2 ] ; for ( int i = 1 ; i * i <= MAX \/ 2 ; i ++ ) for ( int j = ( i * ( i + 1 ) ) << 1 ; j <= MAX \/ 2 ; j += 2 * i ) marked [ j ] = true ; primes . add ( 2 ) ; for ( int i = 1 ; i <= MAX \/ 2 ; i ++ ) if ( marked [ i ] == false ) primes . add ( 2 * i + 1 ) ; } static void findPrimes ( int n ) { if ( n <= 2 || n % 2 != 0 ) { System . out . print ( \" Invalid ▁ Input \" ) ; return ; } int i = 0 ; while ( primes . size ( ) <= n \/ 2 ) { int diff = n - primes . get ( i ) ; if ( primes . get ( i ) <= n \/ 2 ) { System . out . print ( primes . get ( i ) + \" ▁ + diff + \" ▁ = ▁ \" + n ) ; return ; } i ++ ; } public static void main ( String [ ] args ) { sieveSundaram ( ) ; findPrimes ( 4 ) ; findPrimes ( 40 ) ; findPrimes ( 100 ) ; } }"],"references":["import java . util . * ; class GFG { static int MAX = 10000 ; static ArrayList < Integer > primes = new ArrayList < Integer > ( ) ; static void sieveSundaram ( ) { boolean [ ] marked = new boolean [ MAX \/ 2 + 100 ] ; for ( int i = 1 ; i <= ( Math . sqrt ( MAX ) - 1 ) \/ 2 ; i ++ ) for ( int j = ( i * ( i + 1 ) ) << 1 ; j <= MAX \/ 2 ; j = j + 2 * i + 1 ) marked [ j ] = true ; primes . add ( 2 ) ; for ( int i = 1 ; i <= MAX \/ 2 ; i ++ ) if ( marked [ i ] == false ) primes . add ( 2 * i + 1 ) ; } static void findPrimes ( int n ) { if ( n <= 2 || n % 2 != 0 ) { System . out . println ( \" Invalid ▁ Input ▁ \" ) ; return ; } for ( int i = 0 ; primes . get ( i ) <= n \/ 2 ; i ++ ) { int diff = n - primes . get ( i ) ; if ( primes . contains ( diff ) ) { System . out . println ( primes . get ( i ) + \" ▁ + ▁ \" + diff + \" ▁ = ▁ \" + n ) ; return ; } } } public static void main ( String [ ] args ) { sieveSundaram ( ) ; findPrimes ( 4 ) ; findPrimes ( 38 ) ; findPrimes ( 100 ) ; } }"],"bleu":0.8143399170321604,"rouge_l":0.908335581332614}
{"id":927,"predictions":["class GFG { static int N = 100005 ; static int [ ] d = new int [ N ] ; static void Positive_Divisors ( ) { for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 1 ; j * j <= i ; j ++ ) { if ( i % j == 0 ) { if ( j * j == i ) d [ i ] ++ ; else d [ i ] += 2 ; } } } } static int ans = 0 ; for ( int i = 2 ; i < N ; ++ i ) { if ( d [ i ] == d [ i - 1 ] ) { ans ++ ; } pre [ i ] = ans ; } } public static void main ( String [ ] args ) { Positive_Divisors ( ) ; int n = 15 ; System . out . println ( pre [ n ] ) ; } }"],"references":["class GFG { static int N = 100005 ; static int d [ ] = new int [ N ] , pre [ ] = new int [ N ] ; static void Positive_Divisors ( ) { for ( int i = 1 ; i < N ; i ++ ) { for ( int j = 1 ; j * j <= i ; j ++ ) { if ( i % j == 0 ) { if ( j * j == i ) d [ i ] ++ ; else d [ i ] += 2 ; } } } int ans = 0 ; for ( int i = 2 ; i < N ; i ++ ) { if ( d [ i ] == d [ i - 1 ] ) ans ++ ; pre [ i ] = ans ; } } public static void main ( String [ ] args ) { Positive_Divisors ( ) ; int n = 15 ; System . out . println ( pre [ n ] ) ; } }"],"bleu":0.8705828301495582,"rouge_l":0.9416144556433306}
{"id":928,"predictions":["class GFG { static void leibonacciTriangle ( int n ) { int [ ] [ ] C = new int [ n + 1 ] [ n + 1 ] ; for ( int i = 0 ; i <= n ; i ++ ) { for ( int j = 0 ; j <= Math . min ( i , n ) ; j ++ ) { if ( j == 0 || j == i ) C [ i ] [ j ] = 1 ; else C [ i ] [ j ] = C [ i - 1 ] [ j - 1 ] + C [ i - 1 ] [ j ] ; } } for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= i ; j ++ ) { System . out . print ( 1 \/ \" ) ; System . out . print ( i * C [ i - 1 ] [ j - 1 ] + \" ▁ \" ) ; } } } public static void main ( String [ ] args ) { leibonacciTriangle ( 4 ) ; } }"],"references":["import java . io . * ; import java . math . * ; class GFG { static void LeibnizHarmonicTriangle ( int n ) { int C [ ] [ ] = new int [ n + 1 ] [ n + 1 ] ; for ( int i = 0 ; i <= n ; i ++ ) { for ( int j = 0 ; j <= Math . min ( i , n ) ; j ++ ) { if ( j == 0 || j == i ) C [ i ] [ j ] = 1 ; else C [ i ] [ j ] = C [ i - 1 ] [ j - 1 ] + C [ i - 1 ] [ j ] ; } } for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= i ; j ++ ) System . out . print ( \"1 \/ \" + i * C [ i - 1 ] [ j - 1 ] + \" ▁ \" ) ; System . out . println ( ) ; } } public static void main ( String args [ ] ) { int n = 4 ; LeibnizHarmonicTriangle ( n ) ; } }"],"bleu":0.8077867455017037,"rouge_l":0.8782243551289743}
{"id":929,"predictions":["class GFG { static int N = 100 ; static void ansQueries ( int [ ] pre , int [ ] pref , int l , int r ) { if ( ( r - l + 1 ) % 2 == 0 ) { System . out . print ( \"0\" ) ; } else { if ( l % 2 == 0 ) { System . out . print ( pref [ r ] ^ pref [ l - 1 ] ) ; } else { System . out . print ( pref [ r ] ^ pref [ l - 1 ] ) ; } } } static int wrapper ( int arr [ ] , int n , int l , int r [ ] , int q ) { int [ ] pref = new int [ N ] ; int [ ] pref = new int [ N ] ; int [ ] pref = new int [ N ] ; for ( int i = 1 ; i <= n ; i ++ ) { if ( ( i ) % 2 == 0 ) { pref [ i ] = arr [ i - 1 ] ^ pref [ i - 1 ] ; prefodd [ i ] = prefodd [ i - 1 ] ; } else { pref [ i ] = pref [ i - 1 ] ^ arr [ i - 1 ] ; prefodd [ i ] = prefodd [ i - 1 ] ^ arr [ i - 1 ] ; } } int i = 0 ; while ( i != q ) { ansQueries ( pref , prefodd , l [ i ] , r [ i ] ) ; i ++ ; } } public static void main ( String args [ ] ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 } ; int n = arr . length ; int l [ ] = { 1 , 1 , 2 } ; wrapper ( arr , n , l , r , q ) ; } }"],"references":["import java . util . * ; class GFG { static void ansQueries ( int prefeven [ ] , int prefodd [ ] , int l , int r ) { if ( ( r - l + 1 ) % 2 == 0 ) System . out . println ( \"0\" ) ; else { if ( l % 2 == 0 ) System . out . println ( prefeven [ r ] ^ prefeven [ l - 1 ] ) ; else System . out . println ( prefodd [ r ] ^ prefodd [ l - 1 ] ) ; } } static void wrapper ( int arr [ ] , int n , int l [ ] , int r [ ] , int q ) { int prefodd [ ] = new int [ 100 ] ; int prefeven [ ] = new int [ 100 ] ; for ( int i = 1 ; i <= n ; i ++ ) { if ( ( i ) % 2 == 0 ) { prefeven [ i ] = arr [ i - 1 ] ^ prefeven [ i - 1 ] ; prefodd [ i ] = prefodd [ i - 1 ] ; } else { prefeven [ i ] = prefeven [ i - 1 ] ; prefodd [ i ] = prefodd [ i - 1 ] ^ arr [ i - 1 ] ; } } int i = 0 ; while ( i != q ) { ansQueries ( prefeven , prefodd , l [ i ] , r [ i ] ) ; i ++ ; } } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 } ; int n = arr . length ; int l [ ] = { 1 , 1 , 2 } ; int r [ ] = { 2 , 3 , 4 } ; int q = l . length ; wrapper ( arr , n , l , r , q ) ; } }"],"bleu":0.7436782388381992,"rouge_l":0.8640382533381452}
{"id":930,"predictions":["import java . io . * ; import java . util . * ; public class GFG { public static int squaresum ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += ( i * i ) ; return sum ; } public static void main ( String args [ ] ) { int n = 4 ; System . out . println ( squaresum ( n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int squaresum ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += ( i * i ) ; return sum ; } public static void main ( String args [ ] ) throws IOException { int n = 4 ; System . out . println ( squaresum ( n ) ) ; } }"],"bleu":0.8442355801009324,"rouge_l":0.9419468334636434}
{"id":931,"predictions":["class GFG { static int MAX = 10 ; static boolean isFactorion ( int n ) { int [ ] fact = new int [ MAX ] ; fact [ 0 ] = 1 ; for ( int i = 1 ; i < MAX ; i ++ ) fact [ i ] = i * fact [ i - 1 ] ; int org = n ; while ( n > 0 ) { int d = n % 10 ; sum += fact [ d ] ; n = n \/ 10 ; } if ( sum == org ) return true ; return false ; } public static void main ( String [ ] args ) { int n = 40585 ; if ( isFactor ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static int MAX = 10 ; static boolean isFactorion ( int n ) { int fact [ ] = new int [ MAX ] ; fact [ 0 ] = 1 ; for ( int i = 1 ; i < MAX ; i ++ ) fact [ i ] = i * fact [ i - 1 ] ; int org = n ; int sum = 0 ; while ( n > 0 ) { int d = n % 10 ; sum += fact [ d ] ; n \/= 10 ; } if ( sum == org ) return true ; return false ; } public static void main ( String [ ] args ) { int n = 40585 ; if ( isFactorion ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.9111685090043289,"rouge_l":0.9573567372225091}
{"id":932,"predictions":["import java . util . * ; class GFG { static int minInsertions ( int H [ ] , int n , int K ) { int ins = 0 ; for ( int i = 1 ; i < n ; i ++ ) { int diff = Math . abs ( H [ i ] - H [ i - 1 ] ) ; if ( diff <= K ) continue ; else inser += ( int ) ( diff \/ K ) - 1 ; } return inser ; } public static void main ( String [ ] args ) { int H [ ] = { 2 , 4 , 8 , 16 } , K = 3 ; int n = H . length ; System . out . println ( minInsertions ( H , n , K ) ) ; } }"],"references":["class GFG { static int minInsertions ( int [ ] H , int n , int K ) { int inser = 0 ; for ( int i = 1 ; i < n ; ++ i ) { float diff = Math . abs ( H [ i ] - H [ i - 1 ] ) ; if ( diff <= K ) continue ; else inser += Math . ceil ( diff \/ K ) - 1 ; } return inser ; } public static void main ( String [ ] args ) { int [ ] H = new int [ ] { 2 , 4 , 8 , 16 } ; int K = 3 ; int n = H . length ; System . out . println ( minInsertions ( H , n , K ) ) ; } }"],"bleu":0.8017480040656217,"rouge_l":0.8990620812862885}
{"id":933,"predictions":["class GFG { static void ReplaceElements ( int arr [ ] , int n ) { int X = 0 ; for ( int i = 0 ; i < n ; ++ i ) X ^= arr [ i ] ; for ( int i = 0 ; i < n ; ++ i ) { arr [ i ] = X ^ arr [ i ] ; } } } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 3 , 3 , 5 , 5 } ; int n = arr . length ; ReplaceElements ( arr , n ) ; for ( int i = 0 ; i < n ; ++ i ) { System . out . print ( arr [ i ] + \" ▁ \" ) ; } System . out . println ( \" \" ) ; } }"],"references":["import java . io . * ; class GFG { static void ReplaceElements ( int arr [ ] , int n ) { int X = 0 ; for ( int i = 0 ; i < n ; ++ i ) { X ^= arr [ i ] ; } for ( int i = 0 ; i < n ; ++ i ) { arr [ i ] = X ^ arr [ i ] ; } } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 3 , 3 , 5 , 5 } ; int n = arr . length ; ReplaceElements ( arr , n ) ; for ( int i = 0 ; i < n ; ++ i ) { System . out . print ( arr [ i ] + \" ▁ \" ) ; } } }"],"bleu":0.9168986918535514,"rouge_l":0.9373823959857829}
{"id":934,"predictions":["class GFG { static char makePalindrome ( String str ) { int i = 0 , j = str . length ( ) - 1 , ' * ' ; while ( i <= j ) { if ( str . charAt ( i ) == ' * ' && str . charAt ( j ) == ' * ' ) { str = str . charAt ( i ) ; str . charAt ( j ) ; } else if ( str . charAt ( j ) == ' * ' ) { str = str . substring ( i ) ; i ++ ; } else if ( str . charAt ( i ) == str . charAt ( j ) ) { str = str . substring ( i ) ; } else if ( str . charAt ( i ) != str . charAt ( j ) ) { str = str . substring ( i ) ; return str . substring ( i ) ; } } str = str + 1 ; return str ; } public static void main ( String [ ] args ) { String str = \"ya * an \" ; System . out . println ( makePalindrome ( str ) ) ; } }"],"references":["class GFG { static String makePalindrome ( char [ ] str ) { int i = 0 , j = str . length - 1 ; while ( i <= j ) { if ( str [ i ] == ' * ' && str [ j ] == ' * ' ) { str [ i ] = ' a ' ; str [ j ] = ' a ' ; } else if ( str [ j ] == ' * ' ) str [ j ] = str [ i ] ; else if ( str [ i ] == ' * ' ) str [ i ] = str [ j ] ; else if ( str [ i ] != str [ j ] ) return \" - 1\" ; i ++ ; j -- ; } return String . valueOf ( str ) ; } public static void main ( String [ ] args ) { char [ ] str = \" na * an \" . toCharArray ( ) ; System . out . println ( makePalindrome ( str ) ) ; } }"],"bleu":0.40880508919589587,"rouge_l":0.6323565423230757}
{"id":935,"predictions":["class GFG { static int countSubstr ( String s ) { int n = s . length ( ) ; int [ ] auxArr = new int [ n ] ; if ( s . charAt ( 0 ) == '1' ) auxArr [ 0 ] = 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == '1' ) auxArr [ i ] = auxArr [ i - 1 ] + 1 ; else auxArr [ i ] = auxArr [ i - 1 ] ; } int count = 0 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( s . charAt ( i ) == '1' ) count += auxArr [ i ] ; } return count ; } public static void main ( String [ ] args ) { String s = \"1101\" ; System . out . println ( countSubstr ( s ) ) ; } }"],"references":["import java . io . * ; import java . util . * ; class GFG { static int countSubstr ( String s ) { int n = s . length ( ) ; int [ ] auxArr = new int [ n ] ; if ( s . charAt ( 0 ) == '1' ) auxArr [ 0 ] = 1 ; for ( int i = 1 ; i < n ; i ++ ) { if ( s . charAt ( i ) == '1' ) auxArr [ i ] = auxArr [ i - 1 ] + 1 ; else auxArr [ i ] = auxArr [ i - 1 ] ; } int count = 0 ; for ( int i = n - 1 ; i >= 0 ; i -- ) if ( s . charAt ( i ) == '1' ) count += auxArr [ i ] ; return count ; } public static void main ( String [ ] args ) { String s = \"1101\" ; System . out . println ( countSubstr ( s ) ) ; } }"],"bleu":0.8950154650209794,"rouge_l":0.9455270150575731}
{"id":936,"predictions":["import java . util . * ; class Graph { private LinkedList < Integer > Graph ( ) { V = new LinkedList < Integer > ( ) ; } void addEdge ( int v , int w ) { V . add ( v ) ; adj . add ( w ) ; } void addEdge ( int v ) { Queue < Integer > queue = new LinkedList < > ( ) ; queue . add ( v ) ; } void addEdge ( int v , int s ) { queue . add ( v ) ; queue . add ( s ) ; } void addEdge ( int s ) { Queue < Integer > queue = new LinkedList < > ( ) ; queue . add ( s ) ; while ( ! queue . isEmpty ( ) ) { s = queue . poll ( ) ; System . out . print ( s + \" ▁ \" ) ; for ( int i = 0 ; i < graph . size ( ) ; ++ i ) { if ( ! queue . isEmpty ( ) ) { queue . add ( i ) ; visited . add ( i ) ; } } } } public static void main ( String args [ ] ) { Graph g = new Graph ( 4 ) ; g . addEdge ( 0 , 1 ) ; g . addEdge ( 0 , 2 ) ; g . addEdge ( 1 , 0 ) ; g . addEdge ( 2 , 3 ) ; g . addEdge ( 2 , 3 ) ; g . addEdge ( 2 , 3 ) ; g . addEdge ( 3 , 3 ) ; System . out . println ( \" Following ▁ is ▁ Depth ▁ First ▁ Traversal ▁ \" + \" from ▁ vertex ▁ ( ) ) ; } }"],"references":["import java . io . * ; import java . util . * ; class Graph { private int V ; private LinkedList < Integer > adj [ ] ; Graph ( int v ) { V = v ; adj = new LinkedList [ v ] ; for ( int i = 0 ; i < v ; ++ i ) adj [ i ] = new LinkedList ( ) ; } void addEdge ( int v , int w ) { adj [ v ] . add ( w ) ; } void BFS ( int s ) { boolean visited [ ] = new boolean [ V ] ; LinkedList < Integer > queue = new LinkedList < Integer > ( ) ; visited [ s ] = true ; queue . add ( s ) ; while ( queue . size ( ) != 0 ) { s = queue . poll ( ) ; System . out . print ( s + \" ▁ \" ) ; Iterator < Integer > i = adj [ s ] . listIterator ( ) ; while ( i . hasNext ( ) ) { int n = i . next ( ) ; if ( ! visited [ n ] ) { visited [ n ] = true ; queue . add ( n ) ; } } } } public static void main ( String args [ ] ) { Graph g = new Graph ( 4 ) ; g . addEdge ( 0 , 1 ) ; g . addEdge ( 0 , 2 ) ; g . addEdge ( 1 , 2 ) ; g . addEdge ( 2 , 0 ) ; g . addEdge ( 2 , 3 ) ; g . addEdge ( 3 , 3 ) ; System . out . println ( \" Following ▁ is ▁ Breadth ▁ First ▁ Traversal ▁ \" + \" ( starting ▁ from ▁ vertex ▁ 2 ) \" ) ; g . BFS ( 2 ) ; } }"],"bleu":0.6256007114734995,"rouge_l":0.6944579013661467}
{"id":937,"predictions":["import java . util . * ; class GFG { static int sumVowel ( String str ) { int n = str . length ( ) ; int sum = 0 ; String str [ ] = new String [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { str = str . charAt ( i ) ; if ( str . charAt ( i ) == ' a ' || s . charAt ( i ) == ' e ' || str . charAt ( i + 1 ) == ' i ' || s . charAt ( i + 1 ) == ' u ' ) sum += ( ( n - i ) * ( i + 1 ) ) ; } return sum ; } static public void main ( String [ ] args ) { String str = \" abhay \" ; System . out . print ( vovowel ( str ) ) ; } }"],"references":["import java . io . * ; import java . util . * ; public class Gfg { static int vowel_calc ( String s ) { int n = s . length ( ) ; int arr [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( i == 0 ) arr [ i ] = n ; else arr [ i ] = ( n - i ) + arr [ i - 1 ] - i ; } int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { char ch = s . charAt ( i ) ; if ( ch == ' a ' || ch == ' e ' || ch == ' i ' || ch == ' o ' || ch == ' u ' ) sum += arr [ i ] ; } return sum ; } public static void main ( String args [ ] ) { String s = \" daceh \" ; System . out . println ( vowel_calc ( s ) ) ; } }"],"bleu":0.4210350081443465,"rouge_l":0.5929526123936817}
{"id":938,"predictions":["class GFG { static int findOddPair ( int [ ] A , int N ) { int count = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( A [ i ] % 2 == 0 ) { count ++ ; } } return count * ( N - count ) ; } public static void main ( String [ ] args ) { int a [ ] = { 5 , 4 , 7 , 2 , 1 } ; int n = a . length ; System . out . println ( findOddPair ( a , n ) ) ; } }"],"references":["class GFG { static int findOddPair ( int A [ ] , int N ) { int i , count = 0 ; for ( i = 0 ; i < N ; i ++ ) { if ( A [ i ] % 2 == 0 ) count ++ ; } return count * ( N - count ) ; } public static void main ( String [ ] arg ) { int a [ ] = { 5 , 4 , 7 , 2 , 1 } ; int n = a . length ; System . out . println ( findOddPair ( a , n ) ) ; } }"],"bleu":0.873304824562904,"rouge_l":0.9611159294593812}
{"id":939,"predictions":["class GFG { static int smallestDivisor ( int n ) { if ( n % 2 == 0 ) return 2 ; for ( int i = 3 ; i * i <= n ; i += 2 ) { if ( n % i == 0 ) return i ; } return n ; } public static void main ( String [ ] args ) { int n = 31 ; System . out . println ( smallestDivisor ( n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int smallestDivisor ( int n ) { if ( n % 2 == 0 ) return 2 ; for ( int i = 3 ; i * i <= n ; i += 2 ) { if ( n % i == 0 ) return i ; } return n ; } public static void main ( String [ ] args ) { int n = 31 ; System . out . println ( smallestDivisor ( n ) ) ; } }"],"bleu":0.9218291753012781,"rouge_l":0.9541651509639869}
{"id":940,"predictions":["class GFG { static float areaOfKite ( int d1 , int d2 ) { float area = ( d1 * d2 ) \/ 2 ; return area ; } public static void main ( String [ ] args ) { int d1 = 4 ; int d2 = 6 ; System . out . println ( \" Area ▁ of ▁ Kite ▁ = ▁ \" + areaOfKite ( d1 , d2 ) ) ; } }"],"references":["class GFG { static float areaOfKite ( int d1 , int d2 ) { float area = ( d1 * d2 ) \/ 2 ; return area ; } public static void main ( String [ ] args ) { int d1 = 4 , d2 = 6 ; System . out . println ( \" Area ▁ of ▁ Kite ▁ = ▁ \" + areaOfKite ( d1 , d2 ) ) ; } }"],"bleu":0.9539023445731578,"rouge_l":0.9815490238146318}
{"id":941,"predictions":["import java . util . * ; class GFG { static boolean isPossible ( Vector < String > v , String str ) { char [ ] char_list = v . toCharArray ( ) ; Arrays . sort ( v ) ; for ( int i = 0 ; i < v . length - 1 ; i ++ ) { for ( int j = 0 ; j < v . size ( ) ; j ++ ) { String temp = v . get ( i ) + v . get ( j ) ; temp_list = Collections . reverse ( temp ) ; if ( temp_list . equals ( charAt ( i ) ) ) return true ; } } return false ; } public static void main ( String [ ] args ) { String str = \" amazon \" ; String [ ] v = { \" fds \" , \" oxq \" , \" zoa \" , \" epw \" } ; if ( isPossible ( v , str ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; class GFG { static boolean isPossible ( Vector < String > v , String str ) { str = sortString ( str ) ; for ( int i = 0 ; i < v . size ( ) - 1 ; i ++ ) { for ( int j = i + 1 ; j < v . size ( ) ; j ++ ) { String temp = v . get ( i ) + v . get ( j ) ; temp = sortString ( temp ) ; if ( temp . compareTo ( str ) == 0 ) { return true ; } } } return false ; } public static String sortString ( String inputString ) { char tempArray [ ] = inputString . toCharArray ( ) ; Arrays . sort ( tempArray ) ; return new String ( tempArray ) ; } public static void main ( String [ ] args ) { String str = \" amazon \" ; String [ ] arr = { \" fds \" , \" oxq \" , \" zoa \" , \" epw \" , \" amn \" } ; Vector < String > v = new Vector < String > ( Arrays . asList ( arr ) ) ; if ( isPossible ( v , str ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.6495501740894594,"rouge_l":0.7539906766492444}
{"id":942,"predictions":["class GFG { static float seriesSum ( int n ) { int i = 1 , res = 0.0 ; float sign = 0.0 ; while ( n > 0 ) { n -- ; if ( sign == 0 ) { sign = false ; res = res + ( i + 1 ) \/ ( i + 2 ) ; i = i + 2 ; } else { sign = true ; res = res - ( i + 1 ) \/ ( i + 2 ) ; i = i + 2 ; } } return res ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( seriesSum ( n ) ) ; } }"],"references":["import java . io . * ; class GFG { static double seriesSum ( int n ) { int i = 1 ; double res = 0.0 ; boolean sign = true ; while ( n > 0 ) { n -- ; if ( sign ) { sign = ! sign ; res = res + ( double ) ++ i \/ ++ i ; } else { sign = ! sign ; res = res - ( double ) ++ i \/ ++ i ; } } return res ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . print ( seriesSum ( n ) ) ; } }"],"bleu":0.5984892818818276,"rouge_l":0.771056365277957}
{"id":943,"predictions":["class GFG { static int MAX = 1000000 ; static int [ ] sieve_prime = new int [ MAX + 4 ] ; static void sieve_prime_count [ ] = new int [ MAX + 4 ] ; static void sieve_count ( ) { sieve_Prime [ 1 ] = 1 ; for ( int i = 2 ; i <= MAX ; i ++ ) { if ( sieve_Prime [ i ] == 0 ) { for ( int j = i * 2 ; j <= MAX ; j += i ) { if ( sieve_Prime [ j ] == 0 ) { sieve_Prime [ j ] = 1 ; sieve_count [ i ] ++ ; } } } } } public static void main ( String [ ] args ) { int n = 2 ; System . out . println ( \" Count ▁ = ▁ \" + sieve_count [ n ] + 1 ) ; n = 3 ; System . out . println ( \" Count ▁ = ▁ \" + sieve_count [ n ] + 1 ) ; n = 3 ; System . out . println ( \" Count ▁ = ▁ \" + sieve_count [ n ] + 1 ) ; } }"],"references":["import java . io . * ; class GFG { static int MAX = 1000000 ; static int sieve_Prime [ ] = new int [ MAX + 4 ] ; static int sieve_count [ ] = new int [ MAX + 4 ] ; static void form_sieve ( ) { sieve_Prime [ 1 ] = 1 ; for ( int i = 2 ; i <= MAX ; i ++ ) { if ( sieve_Prime [ i ] == 0 ) { for ( int j = i * 2 ; j <= MAX ; j += i ) { if ( sieve_Prime [ j ] == 0 ) { sieve_Prime [ j ] = 1 ; sieve_count [ i ] ++ ; } } } } } public static void main ( String [ ] args ) { form_sieve ( ) ; int n = 2 ; System . out . println ( \" Count ▁ = ▁ \" + ( sieve_count [ n ] + 1 ) ) ; n = 3 ; System . out . println ( \" Count ▁ = ▁ \" + ( sieve_count [ n ] + 1 ) ) ; } }"],"bleu":0.8139723673871709,"rouge_l":0.8917269076305221}
{"id":944,"predictions":["import java . io . * ; class GFG { static int N = 4 ; static int MaximumDecimalValue ( int [ ] [ ] mat , int n ) { int [ ] [ ] dp = new int [ n ] [ n ] ; if ( mat [ 0 ] [ 0 ] == 1 ) dp [ 0 ] [ 0 ] = 1 ; for ( int i = 1 ; i < n ; i ++ ) { if ( mat [ 0 ] [ i ] == 1 ) dp [ 0 ] [ i ] = dp [ 0 ] [ i - 1 ] + ( int ) Math . pow ( 2 , i - 1 ) ; else dp [ 0 ] [ i ] = dp [ 0 ] [ i - 1 ] ; } for ( int i = 1 ; i < n ; i ++ ) { if ( mat [ i ] [ 0 ] == 1 ) dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ] + ( Math . pow ( 2 , i - 1 ) ) ; else dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { for ( int j = 1 ; j < n ; j ++ ) { if ( mat [ i ] [ j ] == 1 ) dp [ i ] [ j ] = Math . max ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] ) + ( Math . pow ( 2 , i + j ) ) ; else dp [ i ] [ j ] = Math . max ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] ) ; } } return dp [ n - 1 ] [ n - 1 ] ; } public static void main ( String [ ] args ) { int mat [ ] [ ] = { { 1 , 1 , 1 , 0 } , { 1 , 0 , 1 } , { 1 , 0 , 1 , 1 } } ; System . out . println ( MaximumDecimalValue ( mat ) ) ; } }"],"references":["public class GFG { final static int N = 4 ; static int MaximumDecimalValue ( int mat [ ] [ ] , int n ) { int dp [ ] [ ] = new int [ n ] [ n ] ; if ( mat [ 0 ] [ 0 ] == 1 ) { dp [ 0 ] [ 0 ] = 1 ; } for ( int i = 1 ; i < n ; i ++ ) { if ( mat [ 0 ] [ i ] == 1 ) { dp [ 0 ] [ i ] = ( int ) ( dp [ 0 ] [ i - 1 ] + Math . pow ( 2 , i ) ) ; } else { dp [ 0 ] [ i ] = dp [ 0 ] [ i - 1 ] ; } } for ( int i = 1 ; i < n ; i ++ ) { if ( mat [ i ] [ 0 ] == 1 ) { dp [ i ] [ 0 ] = ( int ) ( dp [ i - 1 ] [ 0 ] + Math . pow ( 2 , i ) ) ; } else { dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ] ; } } for ( int i = 1 ; i < n ; i ++ ) { for ( int j = 1 ; j < n ; j ++ ) { if ( mat [ i ] [ j ] == 1 ) { dp [ i ] [ j ] = ( int ) ( Math . max ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] ) + Math . pow ( 2 , i + j ) ) ; } else { dp [ i ] [ j ] = Math . max ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] ) ; } } } return dp [ n - 1 ] [ n - 1 ] ; } public static void main ( String [ ] args ) { int mat [ ] [ ] = { { 1 , 1 , 0 , 1 } , { 0 , 1 , 1 , 0 } , { 1 , 0 , 0 , 1 } , { 1 , 0 , 1 , 1 } , } ; System . out . println ( MaximumDecimalValue ( mat , 4 ) ) ; } }"],"bleu":0.8153701807713892,"rouge_l":0.9205754755459972}
{"id":945,"predictions":["class GFG { static boolean checkBinary ( int [ ] [ ] m , int n ) { for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < i ; j ++ ) { if ( m [ i ] [ j ] != m [ j ] ) return false ; } } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n - i ; j ++ ) { if ( m [ i ] [ j ] != m [ n - j - 1 ] ) return false ; } } return true ; } public static void main ( String [ ] args ) { int n = 3 ; int m = [ ] . { 1 , 2 , 3 } , { 2 , 5 , 2 } , { 3 , 2 , 1 } } ; if ( checkBinary ( m , n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . io . * ; class GFG { static int MAX = 100 ; static boolean checkBisymmetric ( int m [ ] [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < i ; j ++ ) if ( m [ i ] [ j ] != m [ j ] [ i ] ) return false ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n - i ; j ++ ) if ( m [ i ] [ j ] != m [ n - j - 1 ] [ n - i - 1 ] ) return false ; return true ; } public static void main ( String [ ] args ) { int n = 3 ; int m [ ] [ ] = { { 1 , 2 , 3 } , { 2 , 5 , 2 } , { 3 , 2 , 1 } } ; if ( checkBisymmetric ( m , n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.7893616021521723,"rouge_l":0.8965206958608277}
{"id":946,"predictions":["import java . io . * ; class GFG { static int Divisible ( int a [ ] , int n ) { int maxi = Integer . MIN_VALUE ; int mini = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { maxi = Math . max ( i , arr [ i ] ) ; mini = Math . min ( i , mini ) ; } return maxi \/ mini ; } public static void main ( String [ ] args ) { int a [ ] = { 3 , 7 , 9 , 3 , 11 } ; int n = a . length ; System . out . println ( Divisible ( a , n ) ) ; } }"],"references":["import java . util . * ; import java . lang . * ; import java . io . * ; class GFG { static int Divison ( int a [ ] , int n ) { int maxi = Integer . MIN_VALUE , mini = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { maxi = Math . max ( a [ i ] , maxi ) ; mini = Math . min ( a [ i ] , mini ) ; } return maxi \/ mini ; } public static void main ( String [ ] args ) throws java . lang . Exception { int a [ ] = { 3 , 7 , 9 , 3 , 11 } ; int n = a . length ; System . out . print ( Divison ( a , n ) ) ; } }"],"bleu":0.7235580164342038,"rouge_l":0.8582031682729588}
{"id":947,"predictions":["class GFG { static int MAX = 10 ; static int [ ] [ ] [ ] F = new int [ MAX ] [ MAX ] ; static int noOfAssignments ( String S , int n , int i , int c_x ) { if ( F [ i ] [ c_x ] [ c_y ] != - 1 ) { return F [ i ] [ c_x ] ; } if ( i == n ) { F [ i ] [ c_x ] = ( c_x ) ; return F [ i ] [ c_x ] ; } int c_y = C [ i ] - c_x ; if ( s . charAt ( i ) == ' ) { F [ i ] [ c_y ] = noOfAssignments ( S , n , i + 1 , c_x + 1 ) + noOfAssignments ( S , n , i + 1 , c_x ) ; return F [ i ] [ c_y ] ; } F [ i ] [ c_x ] [ c_y ] = 0 ; if ( c_x != 0 ) F [ i ] [ c_x ] += noOfAssignments ( S , n , i + 1 , c_x - 1 ) ; if ( c_y != 0 ) F [ i ] [ c_x ] [ c_x ] += noOfAssignments ( S , n , i + 1 , c_x - 1 ) ; return F [ i ] [ c_x ] ; } F [ i ] [ c_x ] = 0 ; if ( c_y != 0 ) F [ i ] [ c_x ] += noOfAssignments ( S , n , i + 1 , c_x - 1 ) ; return F [ i ] [ c_x ] ; } public static void main ( String [ ] args ) { String S = \" ( ) \" ; int n = S . length ( ) ; int C [ ] [ 0 ] = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < MAX ; j ++ ) { for ( int k = 0 ; k < n ; k ++ ) { C [ i ] [ j ] [ k ] = - 1 ; } } }"],"references":["public class GFG { static int MAX = 10 ; static int F [ ] [ ] = new int [ MAX ] [ MAX ] ; static int C [ ] = new int [ MAX ] ; static int noOfAssignments ( String S , int n , int i , int c_x ) { if ( F [ i ] [ c_x ] != - 1 ) { return F [ i ] [ c_x ] ; } if ( i == n ) { if ( c_x == 1 ) { F [ i ] [ c_x ] = 0 ; } else { F [ i ] [ c_x ] = 1 ; } return F [ i ] [ c_x ] ; } int c_y = C [ i ] - c_x ; if ( S . charAt ( i ) == ' ( ' ) { F [ i ] [ c_x ] = noOfAssignments ( S , n , i + 1 , c_x + 1 ) + noOfAssignments ( S , n , i + 1 , c_x ) ; return F [ i ] [ c_x ] ; } F [ i ] [ c_x ] = 0 ; if ( c_x == 1 ) { F [ i ] [ c_x ] += noOfAssignments ( S , n , i + 1 , c_x - 1 ) ; } if ( c_y == 1 ) { F [ i ] [ c_x ] += noOfAssignments ( S , n , i + 1 , c_x ) ; } return F [ i ] [ c_x ] ; } public static void main ( String [ ] args ) { String S = \" ( ) \" ; int n = S . length ( ) ; for ( int i = 0 ; i < MAX ; i ++ ) { for ( int j = 0 ; j < MAX ; j ++ ) { F [ i ] [ j ] = - 1 ; } } C [ 0 ] = 0 ; for ( int i = 0 ; i < n ; ++ i ) { if ( S . charAt ( i ) == ' ( ' ) { C [ i + 1 ] = C [ i ] + 1 ; } else { C [ i + 1 ] = C [ i ] - 1 ; } } System . out . println ( noOfAssignments ( S , n , 0 , 0 ) ) ; } }"],"bleu":0.7246186205271169,"rouge_l":0.7466108916259974}
{"id":948,"predictions":["import java . io . * ; class GFG { static int nextPowerOf2 ( int n ) { int count = 0 ; if ( n != 0 && ( n & ( n - 1 ) ) == 0 ) return n ; while ( n != 0 ) { n >>= 1 ; count += 1 ; } return 1 << count ; } public static void main ( String [ ] args ) { int n = 0 ; System . out . println ( nextPowerOf2 ( n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int nextPowerOf2 ( int n ) { int count = 0 ; if ( n > 0 && ( n & ( n - 1 ) ) == 0 ) return n ; while ( n != 0 ) { n >>= 1 ; count += 1 ; } return 1 << count ; } public static void main ( String args [ ] ) { int n = 0 ; System . out . println ( nextPowerOf2 ( n ) ) ; } }"],"bleu":0.9360610717005085,"rouge_l":0.9791666666666666}
{"id":949,"predictions":["class GFG { static int nthElement ( int a , int b ) { int lcm = ( a * b ) \/ ( __gcd ( a , b ) ) ; int l = 1 , r = Math . min ( a , b ) * n ; while ( l <= r ) { int mid = ( l + r ) >> 1 ; int val = ( mid \/ a ) >> 1 ; if ( val == n ) return Math . max ( Math . max ( mid \/ a ) * a , mid \/ b ) ; if ( val < n ) l = mid + 1 ; else r = mid - 1 ; } return r ; } public static void main ( String [ ] args ) { int a = 5 , b = 3 ; int n = 5 ; System . out . println ( nthElement ( a , b , n ) ) ; } }"],"references":["import java . io . * ; public class GFG { static int __gcd ( int a , int b ) { if ( a == 0 || b == 0 ) return 0 ; if ( a == b ) return a ; if ( a > b ) return __gcd ( a - b , b ) ; return __gcd ( a , b - a ) ; } static int nthElement ( int a , int b , int n ) { int lcm = ( a * b ) \/ __gcd ( a , b ) ; int l = 1 , r = Math . min ( a , b ) * n ; while ( l <= r ) { int mid = ( l + r ) >> 1 ; int val = mid \/ a + mid \/ b - mid \/ lcm ; if ( val == n ) return Math . max ( ( mid \/ a ) * a , ( mid \/ b ) * b ) ; if ( val < n ) l = mid + 1 ; else r = mid - 1 ; } return 0 ; } static public void main ( String [ ] args ) { int a = 5 , b = 3 , n = 5 ; System . out . println ( nthElement ( a , b , n ) ) ; } }"],"bleu":0.5617384915823901,"rouge_l":0.7404597526743039}
{"id":950,"predictions":["import java . util . * ; class GFG { static int MAX = 10000 ; static ArrayList < Integer > arr = new ArrayList < Integer > ( ) ; static boolean [ ] arr = new boolean [ MAX ] ; static void SieveOfEratosthenes ( ) { for ( int i = 0 ; i < MAX ; i ++ ) prime [ i ] = true ; for ( int p = 2 ; p * p < MAX ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i < MAX ; i += p ) prime [ i ] = false ; } } for ( int p = 2 ; p < MAX ; p ++ ) { if ( prime [ p ] ) arr . add ( p ) ; } } static boolean isEuclid ( int n ) { int product = 1 ; int i = 0 ; while ( product < n ) { product = product * arr [ i ] ; if ( product + 1 == n ) return true ; i ++ ; } return false ; } public static void main ( String [ ] args ) { SieveOfEratosthenes ( ) ; int n = 31 ; if ( isEuclid ( n ) ) System . out . print ( \" Yes \" ) ; else System . out . print ( \" No \" ) ; n = 42 ; if ( isEuclid ( n ) ) System . out . print ( \" Yes \" ) ; else System . out . print ( \" No \" ) ; } }"],"references":["import java . util . * ; class GFG { static final int MAX = 10000 ; static Vector < Integer > arr = new Vector < Integer > ( ) ; static void SieveOfEratosthenes ( ) { boolean [ ] prime = new boolean [ MAX ] ; for ( int i = 0 ; i < MAX ; i ++ ) prime [ i ] = true ; for ( int p = 2 ; p * p < MAX ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i < MAX ; i += p ) prime [ i ] = false ; } } for ( int p = 2 ; p < MAX ; p ++ ) if ( prime [ p ] ) arr . add ( p ) ; } static boolean isEuclid ( long n ) { long product = 1 ; int i = 0 ; while ( product < n ) { product = product * arr . get ( i ) ; if ( product + 1 == n ) return true ; i ++ ; } return false ; } public static void main ( String [ ] args ) { SieveOfEratosthenes ( ) ; long n = 31 ; if ( isEuclid ( n ) ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ; n = 42 ; if ( isEuclid ( n ) ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ; } }"],"bleu":0.8315100449921766,"rouge_l":0.9180887372013652}
{"id":951,"predictions":["import java . util . * ; class GFG { static int minElements ( int arr [ ] , int n ) { int halfSum = 0 ; for ( int i = 0 ; i < n ; i ++ ) halfSum += arr [ i ] ; halfSum = halfSum \/ 2 ; int result = 0 ; for ( int i = 0 ; i < n ; i ++ ) { curr_sum += arr [ i ] ; res ++ ; } return result ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 1 , 7 , 1 } ; int n = arr . length ; System . out . println ( minElements ( arr , n ) ) ; } }"],"references":["import java . io . * ; import java . util . * ; class GFG { static int minElements ( int arr [ ] , int n ) { int halfSum = 0 ; for ( int i = 0 ; i < n ; i ++ ) halfSum = halfSum + arr [ i ] ; halfSum = halfSum \/ 2 ; Arrays . sort ( arr ) ; int res = 0 , curr_sum = 0 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { curr_sum += arr [ i ] ; res ++ ; if ( curr_sum > halfSum ) return res ; } return res ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 1 , 7 , 1 } ; int n = arr . length ; System . out . println ( minElements ( arr , n ) ) ; } }"],"bleu":0.7085891791722233,"rouge_l":0.839187076602397}
{"id":952,"predictions":["class Test { static int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } static int lcm ( int a , int b ) { return ( a * b ) \/ gcd ( a , b ) ; } public static void main ( String [ ] args ) { int a = 15 , b = 20 ; System . out . println ( \" LCM ▁ of ▁ \" + a + \" ▁ and ▁ \" + b + \" ▁ is ▁ \" + lcm ( a , b ) ) ; } }"],"references":["class Test { static int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } static int lcm ( int a , int b ) { return ( a * b ) \/ gcd ( a , b ) ; } public static void main ( String [ ] args ) { int a = 15 , b = 20 ; System . out . println ( \" LCM ▁ of ▁ \" + a + \" ▁ and ▁ \" + b + \" ▁ is ▁ \" + lcm ( a , b ) ) ; } }"],"bleu":1.0,"rouge_l":1.0}
{"id":953,"predictions":["class GFG { static int MAX = 1000005 ; static void SieveOfEratosthenes ( boolean [ ] prime ) { prime [ 1 ] = false ; prime [ 0 ] = false ; for ( int p = 2 ; p * p < MAX ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i < MAX ; i += p ) prime [ i ] = false ; } } } static void prime_xor ( int arr [ ] , int n , int k ) { boolean [ ] prime = new boolean [ MAX ] ; for ( int i = 0 ; i < MAX ; i ++ ) prime [ i ] = true ; SieveOfEratosthenes ( prime ) ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( prime [ arr [ i ] ] ) { if ( ( i + 1 ) % k == 0 ) ans ^= arr [ i ] ; } } System . out . println ( ans ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 3 , 5 , 7 , 11 , 8 } ; int n = arr . length ; int K = 2 ; prime_xor ( arr , n , K ) ; } }"],"references":["class GFG { static int MAX = 1000005 ; static boolean prime [ ] = new boolean [ MAX ] ; static void SieveOfEratosthenes ( boolean [ ] prime ) { prime [ 1 ] = false ; prime [ 0 ] = false ; for ( int p = 2 ; p * p < MAX ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i < MAX ; i += p ) prime [ i ] = false ; } } } static void prime_xor ( int arr [ ] , int n , int k ) { for ( int i = 0 ; i < MAX ; i ++ ) prime [ i ] = true ; SieveOfEratosthenes ( prime ) ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( prime [ arr [ i ] ] ) { if ( ( i + 1 ) % k == 0 ) { ans ^= arr [ i ] ; } } } System . out . println ( ans ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 3 , 5 , 7 , 11 , 8 } ; int n = arr . length ; int K = 2 ; prime_xor ( arr , n , K ) ; } }"],"bleu":0.9578744324021806,"rouge_l":0.9502649556279128}
{"id":954,"predictions":["import java . util . * ; class GFG { static void computeTotient ( int n ) { int phi [ ] = new int [ n + 1 ] ; Arrays . fill ( phi , 0 ) ; for ( int i = 1 ; i <= n ; i ++ ) phi [ i ] = i ; for ( int p = 2 ; p <= n ; p ++ ) { if ( phi [ p ] == p ) { phi [ p ] = p - 1 ; for ( int i = 2 * p ; i <= n ; i += p ) phi [ i ] = ( phi [ i ] \/ p ) * ( p - 1 ) ; } } for ( int i = 1 ; i <= n ; i ++ ) System . out . println ( \" Totient ▁ of ▁ \" + i + \" ▁ is ▁ \" + phi [ i ] ) ; } public static void main ( String [ ] args ) { int n = 12 ; computeTotient ( n ) ; } }"],"references":["import java . util . * ; class GFG { static void computeTotient ( int n ) { long phi [ ] = new long [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) phi [ i ] = i ; for ( int p = 2 ; p <= n ; p ++ ) { if ( phi [ p ] == p ) { phi [ p ] = p - 1 ; for ( int i = 2 * p ; i <= n ; i += p ) { phi [ i ] = ( phi [ i ] \/ p ) * ( p - 1 ) ; } } } for ( int i = 1 ; i <= n ; i ++ ) System . out . println ( \" Totient ▁ of ▁ \" + i + \" ▁ is ▁ \" + phi [ i ] ) ; } public static void main ( String [ ] args ) { int n = 12 ; computeTotient ( n ) ; } }"],"bleu":0.9164530045392304,"rouge_l":0.9647514091023806}
{"id":955,"predictions":["class GFG { static int countDigit ( int n ) { int temp = n , count = 0 ; while ( temp != 0 ) { int d = temp % 10 ; temp \/= 10 ; if ( d == 2 || d == 3 || d == 5 || d == 7 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int n = 12345678 ; System . out . println ( countDigit ( n ) ) ; } }"],"references":["class GFG { static int countDigit ( int n ) { int temp = n , count = 0 ; while ( temp != 0 ) { int d = temp % 10 ; temp \/= 10 ; if ( d == 2 || d == 3 || d == 5 || d == 7 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int n = 1234567890 ; System . out . println ( countDigit ( n ) ) ; } }"],"bleu":0.9730376770503931,"rouge_l":0.9893617021276596}
{"id":956,"predictions":["class GFG { static char getChar ( String str ) { int sum = 0 ; for ( int i = 0 ; i < str . length ( ) ; ++ i ) { sum += ( str . charAt ( i ) - ' a ' + 1 ) ; } if ( sum % 26 == 0 ) return ' z ' ; else { sum = sum % 26 ; return ( ( char ) ( sum - 1 ) ) ; } } public static void main ( String [ ] args ) { String str = \" gfg \" ; System . out . println ( getChar ( str ) ) ; } }"],"references":["class GFG { static char getChar ( String str ) { int sum = 0 ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { sum += ( str . charAt ( i ) - ' a ' + 1 ) ; } if ( sum % 26 == 0 ) return ' z ' ; else { sum = sum % 26 ; return ( char ) ( ' a ' + sum - 1 ) ; } } public static void main ( String [ ] args ) { String str = \" gfg \" ; System . out . println ( getChar ( str ) ) ; } }"],"bleu":0.9165175275572525,"rouge_l":0.9655032467532467}
{"id":957,"predictions":["class GFG { static int countWays ( int n , int arr [ ] ) { int count [ ] = new int [ n + 1 ] ; count [ 0 ] = 1 ; if ( n == 0 ) return 1 ; for ( int i = 1 ; i <= n ; i ++ ) { int no_ways = 0 ; for ( int j = 0 ; j < arr . length ; j ++ ) { if ( i - arr [ j ] >= 0 ) no_ways += count [ i - j ] ; count [ i ] = no_ways ; } } return count [ n ] ; } public static void main ( String args [ ] ) { int arr [ ] = { 1 , 3 , 5 } ; int len = arr . length ; System . out . println ( countWays ( len , arr ) ) ; } }"],"references":["class GFG { static int countWays ( int n , int arr [ ] , int len ) { int count [ ] = new int [ n + 1 ] ; count [ 0 ] = 1 ; if ( n == 0 ) return 1 ; for ( int i = 1 ; i <= n ; i ++ ) { int no_ways = 0 ; for ( int j = 0 ; j < len ; j ++ ) { if ( i - arr [ j ] >= 0 ) { no_ways += count [ i - arr [ j ] ] ; } count [ i ] = no_ways ; } } return count [ n ] ; } public static void main ( String args [ ] ) { int arr [ ] = { 1 , 3 , 5 } ; int len = arr . length ; int n = 5 ; System . out . print ( countWays ( n , arr , len ) ) ; } }"],"bleu":0.8249022236601832,"rouge_l":0.9266116016329632}
{"id":958,"predictions":["import java . util . * ; class GFG { static void primeOccurence ( int [ ] arr , int k ) { HashMap < Integer , Integer > map = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < k ; i ++ ) { int freq = arr [ i ] ; if ( map . containsKey ( arr [ i ] ) ) { map . put ( arr [ i ] , freq . get ( arr [ i ] ) + 1 ) ; freq = freq ; } else { freq = map . get ( arr [ i ] ) ; } } for ( Map . Entry < Integer , Integer > it : map . entrySet ( ) ) { int value = it . getKey ( ) ; if ( isPrime ( value ) && value >= k ) { System . out . println ( entry ) ; } } } boolean isPrime ( int n ) { if ( n > 2 && n % 2 == 1 ) { return false ; } for ( int i = 3 ; i <= n ; i += 2 ) { if ( n % i == 0 ) return false ; } return true ; } return true ; } public static void main ( String [ ] args ) { int [ ] arr = { 11 , 11 , 11 , 23 , 11 , 37 , 51 , 51 , 51 , 51 , 51 , 51 } ; int k = 2 ; primeOccurence ( arr , k ) ; } }"],"references":["import java . util . * ; public class PrimeNumber { static void primeOccurences ( int [ ] arr , int k ) { Map < Integer , Integer > map = new HashMap < > ( ) ; for ( int i = 0 ; i < arr . length ; i ++ ) { int val = arr [ i ] ; int freq ; if ( map . containsKey ( val ) ) { freq = map . get ( val ) ; freq ++ ; } else freq = 1 ; map . put ( val , freq ) ; } for ( Map . Entry < Integer , Integer > entry : map . entrySet ( ) ) { int value = entry . getValue ( ) ; if ( isPrime ( value ) && value >= k ) System . out . println ( entry . getKey ( ) ) ; } } private static boolean isPrime ( int n ) { if ( ( n > 2 && n % 2 == 0 ) || n == 1 ) return false ; for ( int i = 3 ; i <= ( int ) Math . sqrt ( n ) ; i += 2 ) { if ( n % i == 0 ) return false ; } return true ; } public static void main ( String [ ] args ) { int [ ] arr = { 11 , 11 , 11 , 23 , 11 , 37 , 37 , 51 , 51 , 51 , 51 , 51 } ; int k = 2 ; primeOccurences ( arr , k ) ; } }"],"bleu":0.7128693323368293,"rouge_l":0.8315005727376862}
{"id":959,"predictions":["import java . util . * ; class solution { static int Nth_Term ( int n ) { return ( 3 * ( int ) Math . pow ( n , 2 ) - n + 2 ) \/ ( 2 ) ; } public static void main ( String arr [ ] ) { int N = 5 ; System . out . println ( Nth_Term ( N ) ) ; } }"],"references":["import java . io . * ; class GFG { static int Nth_Term ( int n ) { return ( int ) ( 3 * Math . pow ( n , 2 ) - n + 2 ) \/ ( 2 ) ; } public static void main ( String [ ] args ) { int N = 5 ; System . out . println ( Nth_Term ( N ) ) ; } }"],"bleu":0.8223100410207718,"rouge_l":0.9189189189189189}
{"id":960,"predictions":["import java . io . * ; class GFG { static int sum ( int n ) { int root = ( int ) Math . sqrt ( n ) ; int ans = 0 ; for ( int i = 1 ; i <= root ; i ++ ) ans += n \/ i ; ans = 2 * ans - ( root * root ) ; return ans ; } public static void main ( String [ ] args ) { int n = 35 ; System . out . println ( sum ( n ) ) ; } }"],"references":["import java . util . * ; class GFG { static long sum ( long n ) { long root = ( long ) Math . sqrt ( n ) ; long ans = 0 ; for ( int i = 1 ; i <= root ; i ++ ) ans += n \/ i ; ans = 2 * ans - ( root * root ) ; return ans ; } public static void main ( String [ ] args ) { long n = 35 ; System . out . println ( sum ( n ) ) ; } }"],"bleu":0.8257564896504914,"rouge_l":0.9313725490196079}
{"id":961,"predictions":["class GFG { static boolean isByte ( int num ) { String aStr = String . valueOf ( num ) ; int index = Integer . valueOf ( num ) ; for ( int i = 0 ; i < a . length ( ) ; i ++ ) { index = Integer . parseInt ( String . valueOf ( i ) ) ; int cnt = 0 ; for ( int j = 0 ; j < b . length ( ) ; j ++ ) { int number = aStr . charAt ( j ) ; if ( number == i ) cnt ++ ; } if ( cnt != index ) return false ; } return true ; } static void findToken ( int n ) { int low = ( int ) Math . pow ( 10 , n - 1 ) ; int high = ( int ) Math . pow ( 10 , n ) - 1 ; boolean flag = false ; for ( int i = low ; i <= high ; i ++ ) { if ( isOkByte ( i ) ) { flag = 1 ; System . out . print ( i + \" , ▁ \" + n + \" ▁ digits ▁ \" ) ; } } if ( flag == 0 ) { System . out . println ( \" There ▁ is ▁ no ▁ ^ \" + n + \" ▁ digits \" ) ; } } public static void main ( String [ ] args ) { int N = 0 ; findTokenizer ( N ) ; N = 4 ; findToken ( N ) ; } }"],"references":["import java . util . * ; import java . lang . Math ; public class autobio { public static boolean isAutoBio ( int num ) { String autoStr ; int index , number , i , j , cnt ; autoStr = Integer . toString ( num ) ; for ( i = 0 ; i < autoStr . length ( ) ; i ++ ) { index = Integer . parseInt ( autoStr . charAt ( i ) + \" \" ) ; cnt = 0 ; for ( j = 0 ; j < autoStr . length ( ) ; j ++ ) { number = Integer . parseInt ( autoStr . charAt ( j ) + \" \" ) ; if ( number == i ) cnt ++ ; } if ( cnt != index ) return false ; } return true ; } public static void findAutoBios ( double n ) { double high , low ; int i , flag = 0 ; low = Math . pow ( 10.0 , n - 1 ) ; high = Math . pow ( 10.0 , n ) - 1.0 ; for ( i = ( int ) low ; i <= ( int ) high ; i ++ ) if ( isAutoBio ( i ) ) { flag = 1 ; System . out . print ( i + \" , ▁ \" ) ; } if ( flag == 0 ) System . out . println ( \" There ▁ is ▁ no ▁ Autobiographical ▁ Number \" + \" with ▁ \" + ( int ) n + \" ▁ digits \" ) ; } public static void main ( String [ ] args ) { double N = 0 ; findAutoBios ( N ) ; N = 4 ; findAutoBios ( N ) ; } }"],"bleu":0.5687513883916233,"rouge_l":0.7613001248032991}
{"id":962,"predictions":["class GFG { static boolean isLucky ( int n ) { int ar [ ] = new int [ 10 ] ; while ( n > 0 ) { int digit = ( int ) Math . floor ( n % 10 ) ; if ( ar [ digit ] == 1 ) return false ; ar [ digit ] = 1 ; n \/= 10 ; } return true ; } public static void main ( String [ ] args ) { int arr [ ] = { 1291 , 897 , 4566 , 1232 , 80 , 70 , 70 } ; int n = arr . length ; for ( int i = 0 ; i < n ; i ++ ) { int k = arr [ i ] ; if ( isLucky ( k ) ) System . out . print ( k + \" ▁ is ▁ \" ) ; else System . out . print ( k + \" ▁ is ▁ not ▁ worst ▁ \" ) ; } }"],"references":["class GFG { static boolean isLucky ( int n ) { boolean arr [ ] = new boolean [ 10 ] ; for ( int i = 0 ; i < 10 ; i ++ ) arr [ i ] = false ; while ( n > 0 ) { int digit = n % 10 ; if ( arr [ digit ] ) return false ; arr [ digit ] = true ; n = n \/ 10 ; } return true ; } public static void main ( String [ ] args ) { int arr [ ] = { 1291 , 897 , 4566 , 1232 , 80 , 700 } ; int n = arr . length ; for ( int i = 0 ; i < n ; i ++ ) if ( isLucky ( arr [ i ] ) ) System . out . print ( arr [ i ] + \" ▁ is ▁ Lucky ▁ \\n \" ) ; else System . out . print ( arr [ i ] + \" ▁ is ▁ not ▁ Lucky ▁ \\n \" ) ; } }"],"bleu":0.6273722209966236,"rouge_l":0.7760133356729252}
{"id":963,"predictions":["class GFG { static void printSeriesSum ( int N ) { int sum = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { if ( ( i & 1 ) > 0 ) sum += i \/ ( i + 1 ) ; else sum -= i \/ ( i + 1 ) ; } System . out . println ( sum ) ; } public static void main ( String [ ] args ) { int N = 10 ; printSeriesSum ( N ) ; } }"],"references":["class GFG { static void printSeriesSum ( int N ) { double sum = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { if ( i % 2 == 1 ) { sum += ( double ) i \/ ( i + 1 ) ; } else { sum -= ( double ) i \/ ( i + 1 ) ; } } System . out . print ( sum + \" \\n \" ) ; } public static void main ( String [ ] args ) { int N = 10 ; printSeriesSum ( N ) ; } }"],"bleu":0.695034634891684,"rouge_l":0.8633905852417304}
{"id":964,"predictions":["class GFG { static int __gcd ( int a , int b ) { if ( b == 0 ) return a ; else return __gcd ( b , a % b ) ; } static int power ( int x , int y , int m ) { if ( y == 0 ) return 1 ; int p = power ( x , y \/ 2 , m ) % m ; p = ( p * p ) % m ; return ( y % 2 == 0 ) ; } static void modInverse ( int a , int m ) { if ( __gcd ( a , m ) != 1 ) System . out . println ( \" Inverse ▁ doesn ' t ▁ exist \" ) ; else System . out . println ( \" Modular ▁ multiplicative ▁ inverse ▁ is ▁ \" + power ( a , m - 2 , m ) ) ; } public static void main ( String args [ ] ) { int a = 3 , m = 11 ; modInverse ( a , m ) ; } }"],"references":["class GFG { static int __gcd ( int a , int b ) { if ( b == 0 ) { return a ; } else { return __gcd ( b , a % b ) ; } } static int power ( int x , int y , int m ) { if ( y == 0 ) return 1 ; int p = power ( x , y \/ 2 , m ) % m ; p = ( p * p ) % m ; return ( y % 2 == 0 ) ? p : ( x * p ) % m ; } static void modInverse ( int a , int m ) { if ( __gcd ( a , m ) != 1 ) System . out . print ( \" Inverse ▁ doesn ' t ▁ exist \" ) ; else { System . out . print ( \" Modular ▁ multiplicative ▁ inverse ▁ is ▁ \" + power ( a , m - 2 , m ) ) ; } } public static void main ( String [ ] args ) { int a = 3 , m = 11 ; modInverse ( a , m ) ; } }"],"bleu":0.8384170095436964,"rouge_l":0.9385375334035144}
{"id":965,"predictions":["class GFG { static int countPrimeFactors ( int x ) { int res = 0 ; if ( x % 2 == 0 ) { res ++ ; while ( x % 2 == 0 ) x \/= 2 ; } for ( int i = 3 ; i <= Math . sqrt ( x ) ; i += 2 ) { if ( x % i == 0 ) { res ++ ; while ( x % i == 0 ) { x \/= i ; } } } if ( x > 2 ) res ++ ; return res ; } static int countCommonFactors ( int a , int b ) { int gcd = __gcd ( a , b ) ; return countPrimeFactors ( gcd ) ; } static int countCommonPrimeFactors ( int a , int b ) { int gcd = __gcd ( a , b ) ; return countPrimeFactors ( gcd ) ; } public static void main ( String [ ] args ) { int a = 6 , b = 12 ; System . out . println ( countCommonPrimeFactors ( a , b ) ) ; } }"],"references":["import java . io . * ; class GFG { static int __gcd ( int a , int b ) { if ( a == 0 ) return b ; if ( b == 0 ) return a ; if ( a == b ) return a ; if ( a > b ) return __gcd ( a - b , b ) ; return __gcd ( a , b - a ) ; } static int countPrimeFactors ( int x ) { int res = 0 ; if ( x % 2 == 0 ) { res ++ ; while ( x % 2 == 0 ) x = x \/ 2 ; } for ( int i = 3 ; i <= Math . sqrt ( x ) ; i = i + 2 ) { if ( x % i == 0 ) { res ++ ; while ( x % i == 0 ) x = x \/ i ; } } if ( x > 2 ) res ++ ; return res ; } static int countCommonPrimeFactors ( int a , int b ) { int gcd = __gcd ( a , b ) ; return countPrimeFactors ( gcd ) ; } public static void main ( String [ ] args ) { int a = 6 , b = 12 ; System . out . println ( countCommonPrimeFactors ( a , b ) ) ; } }"],"bleu":0.6922479411202176,"rouge_l":0.725390883065404}
{"id":966,"predictions":["class Test { static int factorial ( int n ) { return ( n == 1 || n == 0 ) ? 1 : n * factorial ( n - 1 ) ; } public static void main ( String [ ] args ) { int num = 5 ; System . out . println ( \" Factorial ▁ of ▁ \" + num + \" ▁ is ▁ \" + factorial ( num ) ) ; } }"],"references":["class Factorial { int factorial ( int n ) { return ( n == 1 || n == 0 ) ? 1 : n * factorial ( n - 1 ) ; } public static void main ( String args [ ] ) { Factorial obj = new Factorial ( ) ; int num = 5 ; System . out . println ( \" Factorial ▁ of ▁ \" + num + \" ▁ is ▁ \" + obj . factorial ( num ) ) ; } }"],"bleu":0.781380036637677,"rouge_l":0.9014194050165271}
{"id":967,"predictions":["class GFG { static int getFirstDigit ( int x ) { while ( x >= 10 ) x \/= 10 ; return x ; } static int getCountWithSameDigit ( int x ) { if ( x < 10 ) return x ; int t = x \/ 10 ; int res = ( firstDigit ( x ) ) ; int firstDigit = ( firstDigit + 9 ) ; int lastDigit = x % 10 ; if ( lastDigit < firstDigit ) res = res - 1 ; return res ; } static int getCountWithSameSameStart ( int start , int end ) { return ( getCountWith1 ( end ) - getCountStartWith1 ( start - 1 ) ) ; } public static void main ( String [ ] args ) { int start = 5 , end = 40 ; System . out . println ( getCountSameStart ( start , end ) ) ; } }"],"references":["import java . util . * ; class Digits { public static int getFirstDigit ( int x ) { while ( x >= 10 ) x \/= 10 ; return x ; } public static int getCountWithSameStartAndEndFrom1 ( int x ) { if ( x < 10 ) return x ; int tens = x \/ 10 ; int res = tens + 9 ; int firstDigit = getFirstDigit ( x ) ; int lastDigit = x % 10 ; if ( lastDigit < firstDigit ) res -- ; return res ; } public static int getCountWithSameStartAndEnd ( int start , int end ) { return getCountWithSameStartAndEndFrom1 ( end ) - getCountWithSameStartAndEndFrom1 ( start - 1 ) ; } public static void main ( String [ ] args ) { int start = 5 , end = 40 ; System . out . print ( getCountWithSameStartAndEnd ( start , end ) ) ; } }"],"bleu":0.720706635587828,"rouge_l":0.8474019088016966}
{"id":968,"predictions":["class GFG { static String find_number ( int N , int K ) { String r = \" \" ; if ( N % 100 == 0 ) { N ++ ; r = Integer . toString ( N ) ; } else r = N ; for ( int i = 1 ; i <= K ; i ++ ) r += \"00\" ; return r ; } public static void main ( String [ ] args ) { int N = 1000 , K = 2 ; int ans = find_number ( N , K ) ; System . out . println ( ans ) ; } }"],"references":["import java . util . * ; class GFG { static String find_number ( int N , int K ) { String r ; if ( N % 100 == 0 ) { N += 1 ; r = String . valueOf ( N ) ; } else { r = String . valueOf ( N ) ; } for ( int i = 1 ; i <= K ; i ++ ) r += \"00\" ; return r ; } public static void main ( String [ ] args ) { int N = 1000 , K = 2 ; String ans = find_number ( N , K ) ; System . out . println ( ans ) ; } }"],"bleu":0.7460575108028277,"rouge_l":0.8797255670680482}
{"id":969,"predictions":["import java . util . * ; class GFG { static int digitSum ( int n ) { int sum = 0 ; while ( n > 0 ) { sum += n % 10 ; n = n \/ 10 ; } return sum ; } static int totalPairs ( int [ ] arr1 , int [ ] arr2 , int n , int m ) { HashSet < Integer > s = new HashSet < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( digitSum ( arr1 [ i ] ) == digitSum ( arr2 [ j ] ) ) { if ( arr1 [ i ] < arr2 [ j ] ) s . add ( new pair ( arr1 [ i ] , arr2 [ j ] ) ) ; else s . add ( new pair ( arr1 [ i ] , arr1 [ j ] ) ) ; } } } return s . size ( ) ; } public static void main ( String [ ] args ) { int arr1 [ ] = { 100 , 3 , 7 , 50 } ; int arr2 [ ] = { 5 , 1 , 10 , 4 } ; int n = arr1 . length ; int m = arr2 . length ; int m = arr2 . length ; System . out . println ( totalPairs ( arr1 , arr2 , n , m ) ) ; } }"],"references":["import java . util . * ; class GFG { static class pair { int first , second ; public pair ( int first , int second ) { this . first = first ; this . second = second ; } } static int digitSum ( int n ) { int sum = 0 ; while ( n > 0 ) { sum += n % 10 ; n = n \/ 10 ; } return sum ; } static int totalPairs ( int arr1 [ ] , int arr2 [ ] , int n , int m ) { Set < pair > s = new HashSet < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( digitSum ( arr1 [ i ] ) == digitSum ( arr2 [ j ] ) ) { if ( arr1 [ i ] < arr2 [ j ] ) s . add ( new pair ( arr1 [ i ] , arr2 [ j ] ) ) ; else s . add ( new pair ( arr2 [ j ] , arr1 [ i ] ) ) ; } } } return s . size ( ) ; } public static void main ( String [ ] args ) { int arr1 [ ] = { 100 , 3 , 7 , 50 } ; int arr2 [ ] = { 5 , 1 , 10 , 4 } ; int n = arr1 . length ; int m = arr2 . length ; System . out . println ( totalPairs ( arr1 , arr2 , n , m ) ) ; } }"],"bleu":0.8369806403714645,"rouge_l":0.8985835694050991}
{"id":970,"predictions":["class GFG { static final int N = 5 ; static int func ( int idx , int cur , int a [ ] , int dp [ ] [ ] ) { if ( idx == n ) return 0 ; if ( dp [ idx ] [ cur ] != - 1 ) return dp [ idx ] [ curr ] ; ans = 0 ; if ( cur == 0 ) ans = Math . max ( ans , a [ idx ] + func ( idx + 1 , 0 , a , dp , n , x ) ; ans = Math . max ( ans , x * a [ idx ] + func ( idx + 1 , 1 , a , n , x ) ) ; else if ( cur == 1 ) ans = Math . max ( ans , a [ idx ] + func ( idx + 1 , 1 , a , dp , n , x ) ; else if ( cur == 1 ) ans = Math . max ( ans , x * a [ idx ] + func ( idx + 1 , 2 , a , dp , n , x ) ) ; else ans = Math . max ( ans , a [ idx ] + func ( idx + 1 , 2 , a , dp , n , x ) ) ; return ans ; } static int getMaximumSum ( int a [ ] , int n , int x ) { int dp [ ] [ ] = new int [ n ] [ 3 ] ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < 3 ; j ++ ) dp [ i ] [ j ] = - 1 ; return dp [ idx ] [ j ] ; } public static void main ( String [ ] args ) { int a [ ] = { - 3 , 8 , - 2 , 1 , - 6 } ; int n = a . length ; int x = - 1 ; System . out . println ( getMaximumSum ( a , n , x ) ) ; } }"],"references":["class GFG { static int N = 5 ; static int func ( int idx , int cur , int a [ ] , int dp [ ] [ ] , int n , int x ) { if ( idx == n ) { return 0 ; } if ( dp [ idx ] [ cur ] != - 1 ) { return dp [ idx ] [ cur ] ; } int ans = 0 ; if ( cur == 0 ) { ans = Math . max ( ans , a [ idx ] + func ( idx + 1 , 0 , a , dp , n , x ) ) ; ans = Math . max ( ans , x * a [ idx ] + func ( idx + 1 , 1 , a , dp , n , x ) ) ; } else if ( cur == 1 ) { ans = Math . max ( ans , x * a [ idx ] + func ( idx + 1 , 1 , a , dp , n , x ) ) ; ans = Math . max ( ans , a [ idx ] + func ( idx + 1 , 2 , a , dp , n , x ) ) ; } else { ans = Math . max ( ans , a [ idx ] + func ( idx + 1 , 2 , a , dp , n , x ) ) ; } return dp [ idx ] [ cur ] = ans ; } static int getMaximumSum ( int a [ ] , int n , int x ) { int dp [ ] [ ] = new int [ n ] [ 3 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { dp [ i ] [ j ] = - 1 ; } } int maxi = 0 ; for ( int i = 0 ; i < n ; i ++ ) { maxi = Math . max ( maxi , func ( i , 0 , a , dp , n , x ) ) ; } return maxi ; } public static void main ( String [ ] args ) { int a [ ] = { - 3 , 8 , - 2 , 1 , - 6 } ; int n = a . length ; int x = - 1 ; System . out . println ( getMaximumSum ( a , n , x ) ) ; } }"],"bleu":0.7646616095281628,"rouge_l":0.8699292678264194}
{"id":971,"predictions":["import java . util . * ; class GFG { static int exponent ( int A , int B ) { if ( A == 0 ) return 0 ; if ( B == 0 ) return 1 ; if ( B % 2 == 0 ) { int y = exponent ( A , B \/ 2 ) ; y = ( y * y ) ; } else { y = A ; y = ( y * exponent ( A , B - 1 ) ) ; } return y ; } static int sum ( int k , int n ) { int sum = exponent ( k , n + 1 ) - exponent ( k - 1 ) ; return sum ; } public static void main ( String [ ] args ) { int n = 3 ; int K = 3 ; System . out . println ( sum ( K , n ) ) ; } }"],"references":["import java . lang . Math ; class GFG { static int exponent ( int A , int B ) { if ( A == 0 ) return 0 ; if ( B == 0 ) return 1 ; int y ; if ( B % 2 == 0 ) { y = exponent ( A , B \/ 2 ) ; y = ( y * y ) ; } else { y = A ; y = ( y * exponent ( A , B - 1 ) ) ; } return y ; } static int sum ( int k , int n ) { int sum = exponent ( k , n + 1 ) - exponent ( k - 1 , n + 1 ) ; return sum ; } public static void main ( String [ ] args ) { int n = 3 ; int K = 3 ; System . out . println ( sum ( K , n ) ) ; } }"],"bleu":0.9187507689871396,"rouge_l":0.9614194546509381}
{"id":972,"predictions":["import java . util . * ; class GFG { static int MAX = 1000000 ; static ArrayList < Integer > primes = new ArrayList < Integer > ( ) ; static void sieve ( ) { int n = MAX ; int nNew = n \/ 2 ; boolean marked [ ] = new boolean [ MAX + 100 ] ; for ( int i = 1 ; i <= ( tmp - 1 ) \/ 2 ; i ++ ) for ( int j = ( i * ( i + 1 ) ) << 1 ; j <= nNew ; j += 2 * i + 1 ) marked [ j ] = true ; primes . add ( 2 ) ; for ( int i = 1 ; i <= nNew ; i ++ ) if ( marked [ i ] == false ) primes . add ( 2 * i + 1 ) ; } static void primeLcm ( int arr [ ] , int n ) { int factors [ ] = new int [ MAX ] ; for ( int i = 0 ; i < nNew ; i ++ ) { int copy = arr [ i ] ; int sqr = ( int ) Math . sqrt ( copy ) ; for ( int j = 0 ; primes . get ( j ) <= sqr ; j ++ ) { if ( copy % primes . get ( j ) == 0 ) { while ( copy % primes . get ( j ) == 0 ) copy \/= primes . get ( j ) ; } } } if ( copy > 1 ) factors [ copy ] = 1 ; for ( int i = 1 ; i < MAX ; i ++ ) { if ( copy % primes . get ( i ) == 0 ) { while ( copy % primes . get ( j ) == 0 ) copy \/= primes . get ( j ) ; i ++ ; } if ( copy > 1 ) factors [ copy ] = 1 ; } if ( factors [ 2 ] == 1 ) factors [ copy ] = 1 ; } public static void main ( String [ ] args ) { int arr [ ] = new int [ MAX ] ; for ( int i = 0 ; i < MAX ; i ++ ) if ( factors [ i ] == 1 ) System . out . print ( i + \" ▁ \" ) ; } }"],"references":["import java . util . * ; class GFG { static int MAX = 1000000 ; static ArrayList < Integer > primes = new ArrayList < Integer > ( ) ; static void sieve ( ) { int n = MAX ; int nNew = ( n ) \/ 2 ; boolean [ ] marked = new boolean [ nNew + 100 ] ; int tmp = ( int ) Math . sqrt ( n ) ; for ( int i = 1 ; i <= ( tmp - 1 ) \/ 2 ; i ++ ) for ( int j = ( i * ( i + 1 ) ) << 1 ; j <= nNew ; j = j + 2 * i + 1 ) marked [ j ] = true ; primes . add ( 2 ) ; for ( int i = 1 ; i <= nNew ; i ++ ) if ( marked [ i ] == false ) primes . add ( 2 * i + 1 ) ; } static void primeLcm ( int [ ] arr , int n ) { int [ ] factors = new int [ MAX ] ; for ( int i = 0 ; i < n ; i ++ ) { int copy = arr [ i ] ; int sqr = ( int ) Math . sqrt ( copy ) ; for ( int j = 0 ; primes . get ( j ) <= sqr ; j ++ ) { if ( copy % primes . get ( j ) == 0 ) { while ( copy % primes . get ( j ) == 0 ) copy = copy \/ primes . get ( j ) ; factors [ primes . get ( j ) ] = 1 ; } } if ( copy > 1 ) factors [ copy ] = 1 ; } if ( factors [ 2 ] == 1 ) System . out . print ( \"2 ▁ \" ) ; for ( int i = 3 ; i <= MAX ; i = i + 2 ) if ( factors [ i ] == 1 ) System . out . print ( i + \" ▁ \" ) ; } public static void main ( String [ ] args ) { sieve ( ) ; int [ ] arr = { 20 , 10 , 15 , 60 } ; int n = arr . length ; primeLcm ( arr , n ) ; } }"],"bleu":0.7631592507959368,"rouge_l":0.7857846480260665}
{"id":973,"predictions":["class GFG { static int N = n ; static void sol ( int n ) { int ans = n ; int ans = 0 ; ans = ( int ) ( ( _ n * _ n ) \/ 12 ) - ( int ) ( ( _ n + 2 ) * Math . floor ( ( _ n + 2 ) \/ 4 ) ) ; return ans ; } static void solve ( int n ) { for ( int i = 1 ; i <= n ; i ++ ) System . out . print ( Alico ( i ) + \" , ▁ \" ) ; } public static void main ( String [ ] args ) { int n = 15 ; solve ( n ) ; } }"],"references":["import java . util . * ; class GFG { static int Alcuin ( int n ) { double _n = n , ans ; ans = Math . round ( ( _n * _n ) \/ 12 ) - Math . floor ( _n \/ 4 ) * Math . floor ( ( _n + 2 ) \/ 4 ) ; return ( int ) ans ; } static void solve ( int n ) { int i = 0 ; for ( i = 1 ; i <= n ; i ++ ) { System . out . print ( Alcuin ( i ) + \" , ▁ \" ) ; } } public static void main ( String [ ] args ) { int n = 15 ; solve ( n ) ; } }"],"bleu":0.6198279911806299,"rouge_l":0.7558679852257834}
{"id":974,"predictions":["class fibonacci { static int getMSB ( int n ) { n |= n >> 1 ; n |= 2 ; n |= n >> 4 ; n |= 4 ; n |= n >> 8 ; n |= n >> 16 ; return ( n + 1 ) >> 2 ; } static void multiply ( int F [ ] [ ] , int M [ ] [ ] ) { int x = F [ 0 ] [ 0 ] * M [ 0 ] [ 0 ] + F [ 1 ] [ 0 ] * M [ 1 ] [ 0 ] ; int y = F [ 0 ] [ 0 ] * M [ 0 ] [ 1 ] + F [ 0 ] [ 1 ] * M [ 1 ] [ 1 ] ; int z = F [ 1 ] [ 0 ] * M [ 0 ] [ 0 ] + F [ 1 ] [ 1 ] * M [ 1 ] [ 0 ] ; int w = F [ 1 ] [ 0 ] * M [ 0 ] [ 0 ] + F [ 1 ] [ 1 ] * M [ 1 ] [ 1 ] ; F [ 0 ] [ 0 ] = x ; F [ 1 ] [ 0 ] = y ; F [ 1 ] [ 1 ] = z ; } static void power ( int F [ ] [ ] , int n ) { if ( n == 0 || n == 1 ) return 0 ; int M [ ] [ ] = { { 1 , 1 } , { 1 , 0 } } ; if ( n == 0 ) return ; power ( F , n - 1 ) ; return F [ 0 ] [ 0 ] ; } static int fib ( int n ) { int F [ ] [ ] = { { 1 , 1 } , { 1 , 0 } } ; if ( n == 0 ) return 0 ; power ( F , n - 1 ) ; return F [ 0 ] [ 0 ] ; } public static void main ( String [ ] args ) { int n = 6 ; System . out . println ( fib ( n ) ) ; } }"],"references":["class GFG { static int getMSB ( int n ) { n |= n >> 1 ; n |= n >> 2 ; n |= n >> 4 ; n |= n >> 8 ; n |= n >> 16 ; return ( ( n + 1 ) >> 2 ) ; } static void multiply ( int F [ ] [ ] , int M [ ] [ ] ) { int x = F [ 0 ] [ 0 ] * M [ 0 ] [ 0 ] + F [ 0 ] [ 1 ] * M [ 1 ] [ 0 ] ; int y = F [ 0 ] [ 0 ] * M [ 0 ] [ 1 ] + F [ 0 ] [ 1 ] * M [ 1 ] [ 1 ] ; int z = F [ 1 ] [ 0 ] * M [ 0 ] [ 0 ] + F [ 1 ] [ 1 ] * M [ 1 ] [ 0 ] ; int w = F [ 1 ] [ 0 ] * M [ 0 ] [ 1 ] + F [ 1 ] [ 1 ] * M [ 1 ] [ 1 ] ; F [ 0 ] [ 0 ] = x ; F [ 0 ] [ 1 ] = y ; F [ 1 ] [ 0 ] = z ; F [ 1 ] [ 1 ] = w ; } static void power ( int F [ ] [ ] , int n ) { if ( n == 0 || n == 1 ) return ; int [ ] [ ] M = { { 1 , 1 } , { 1 , 0 } } ; for ( int m = getMSB ( n ) ; m > 0 ; m = m >> 1 ) { multiply ( F , F ) ; if ( ( n & m ) > 0 ) { multiply ( F , M ) ; } } } static int fib ( int n ) { int [ ] [ ] F = { { 1 , 1 } , { 1 , 0 } } ; if ( n == 0 ) return 0 ; power ( F , n - 1 ) ; return F [ 0 ] [ 0 ] ; } public static void main ( String [ ] args ) { int n = 6 ; System . out . println ( fib ( n ) ) ; } }"],"bleu":0.8302827300731042,"rouge_l":0.8908894212193804}
{"id":975,"predictions":["class GFG { static void printMinIndexChar ( String str , String patt ) { int minIndex = Integer . MAX_VALUE ; int m = str . length ( ) ; int n = patt . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( patt . charAt ( i ) == str . charAt ( j ) && j < minIndex ) { minIndex = j ; break ; } } } if ( minIndex != Integer . MAX_VALUE ) { System . out . println ( \" Minimum ▁ Index ▁ Character ▁ = ▁ \" + str . charAt ( minIndex ) ) ; } else System . out . println ( \" No ▁ character ▁ = ▁ \" + str . charAt ( minIndex ) ) ; } public static void main ( String [ ] args ) { String str = \" geeksforgeeks \" ; char patt [ ] = \" set \" set \" ; printMinIndexChar ( str , patt ) ; } }"],"references":["public class GFG { static void printMinIndexChar ( String str , String patt ) { int minIndex = Integer . MAX_VALUE ; int m = str . length ( ) ; int n = patt . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( patt . charAt ( i ) == str . charAt ( j ) && j < minIndex ) { minIndex = j ; break ; } } } if ( minIndex != Integer . MAX_VALUE ) System . out . println ( \" Minimum ▁ Index ▁ Character ▁ = ▁ \" + str . charAt ( minIndex ) ) ; else System . out . println ( \" No ▁ character ▁ present \" ) ; } public static void main ( String [ ] args ) { String str = \" geeksforgeeks \" ; String patt = \" set \" ; printMinIndexChar ( str , patt ) ; } }"],"bleu":0.8798427318227331,"rouge_l":0.9560135076630012}
{"id":976,"predictions":["class GFG { static double squares ( int l , int b , int a ) { return Math . ceil ( l \/ a ) * Math . ceil ( b \/ a ) ; } public static void main ( String [ ] args ) { int l = 11 , b = 23 ; System . out . println ( squares ( l , b , a ) ) ; } }"],"references":["class GFG { static int squares ( int l , int b , int a ) { return ( int ) ( Math . ceil ( l \/ ( double ) a ) * Math . ceil ( b \/ ( double ) a ) ) ; } public static void main ( String [ ] args ) { int l = 11 , b = 23 , a = 14 ; System . out . println ( squares ( l , b , a ) ) ; } }"],"bleu":0.717950239338658,"rouge_l":0.8825024437927663}
{"id":977,"predictions":["public void push ( int new_data ) { Node new_node = new Node ( new data ) ; new_node . next = null ; if ( head == null ) { new_node . prev = null ; head = new_node ; } while ( last . next != null ) last = last ; last . next = last ; return ; }"],"references":["void append ( int new_data ) { Node new_node = new Node ( new_data ) ; Node last = head ; new_node . next = null ; if ( head == null ) { new_node . prev = null ; head = new_node ; return ; } while ( last . next != null ) last = last . next ; last . next = new_node ; new_node . prev = last ; }"],"bleu":0.6932042968034441,"rouge_l":0.8202406227883935}
{"id":978,"predictions":["import java . util . * ; class GFG { static void maxProductSum ( String str , int m ) { int n = str . length ( ) ; int maxProd = ( - Integer . MIN_VALUE , maxSum ) - 1 ; for ( int i = 0 ; i < n - m ; i ++ ) { int product = 1 , sum = 0 ; for ( int j = i ; j < m + i ; j ++ ) { product = product * ( str . charAt ( j ) - '0' ) ; sum += ( str . charAt ( j ) - '0' ) ; } maxProd = Math . max ( maxProd , product ) ; } System . out . println ( \" Maximum ▁ Product ▁ = ▁ \" + maxProd ) ; } public static void main ( String [ ] args ) { String str = \"3675356291\" ; int m = 5 ; maxProductSum ( str . toCharArray ( ) , m ) ; } }"],"references":["import java . io . * ; class GFG { static void maxProductSum ( String str , int m ) { int n = str . length ( ) ; int maxProd = Integer . MIN_VALUE , maxSum = Integer . MIN_VALUE ; for ( int i = 0 ; i < n - m ; i ++ ) { int product = 1 , sum = 0 ; for ( int j = i ; j < m + i ; j ++ ) { product = product * ( str . charAt ( j ) - '0' ) ; sum = sum + ( str . charAt ( j ) - '0' ) ; } maxProd = Math . max ( maxProd , product ) ; maxSum = Math . max ( maxSum , sum ) ; } System . out . println ( \" Maximum ▁ Product ▁ = ▁ \" + maxProd ) ; System . out . print ( \" \\n Maximum ▁ Sum ▁ = ▁ \" + maxSum ) ; } public static void main ( String [ ] args ) { String str = \"3675356291\" ; int m = 5 ; maxProductSum ( str , m ) ; } }"],"bleu":0.7766861707290305,"rouge_l":0.8632314992091901}
{"id":979,"predictions":["class GFG { static void findPrimaryNumber ( int n ) { int temp = n ; int sum = 0 ; while ( temp != 0 ) { sum += temp % 10 ; temp = temp \/ 10 ; } if ( sum < 10 ) { System . out . print ( n + \"0\" + \" \\n \" ) ; } else { n = Integer . toString ( n ) ; sum = Integer . toString ( sum ) ; n += sum ; System . out . println ( n ) ; } } public static void main ( String [ ] args ) { int n = 987 ; findTitleNumber ( n ) ; } }"],"references":["class GFG { static void findPhoneNumber ( int n ) { int temp = n ; int sum = 0 ; while ( temp != 0 ) { sum += temp % 10 ; temp = temp \/ 10 ; } if ( sum < 10 ) System . out . print ( n + \"0\" + sum ) ; else System . out . print ( n + \" \" + sum ) ; } public static void main ( String [ ] args ) { int n = 98765432 ; findPhoneNumber ( n ) ; } }"],"bleu":0.6354123542042721,"rouge_l":0.8208345932869671}
{"id":980,"predictions":["import java . util . * ; class GFG { static int countOfSubarrays ( int arr [ ] , int n ) { int count = 0 ; int [ ] v = new int [ n + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) v [ i ] = i ; for ( int i = 0 ; i < n ; i ++ ) v [ arr [ i ] = i ; int maximum = Integer . MIN_VALUE ; for ( int i = 1 ; i <= n ; i ++ ) { maximum = Math . max ( maximum , v [ i ] ) ; min = Math . min ( min , v [ i ] ) ; if ( maximum - minimum < i ) count += 1 ; } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 4 , 1 , 3 , 2 , 5 , 6 } ; int n = arr . length ; System . out . println ( countOfSubarrays ( arr , n ) ) ; } }"],"references":["class GFG { static int countOfSubarrays ( int [ ] arr , int n ) { int count = 0 ; int [ ] v = new int [ n + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) v [ arr [ i ] ] = i ; int maximum = Integer . MIN_VALUE ; int minimum = Integer . MAX_VALUE ; for ( int i = 1 ; i <= n ; i ++ ) { maximum = Math . max ( maximum , v [ i ] ) ; minimum = Math . min ( minimum , v [ i ] ) ; if ( maximum - minimum < i ) count = count + 1 ; } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 4 , 1 , 3 , 2 , 5 , 6 } ; int n = arr . length ; System . out . print ( countOfSubarrays ( arr , n ) + \" \\n \" ) ; } }"],"bleu":0.7873601476422685,"rouge_l":0.8742604782934755}
{"id":981,"predictions":["import java . io . * ; class GFG { static int maxSum ( int p0 , int p1 , int a [ ] , int pos , int n ) { if ( pos == n ) { if ( p0 == p1 ) return p0 ; else return 0 ; } int ans = maxSum ( p0 , p1 , a , pos + 1 , n ) ; ans = Math . max ( ans , maxSum ( p0 + a [ pos ] , a , pos + 1 , n ) ) ; ans = Math . max ( ans , maxSum ( p0 , p1 + a [ pos ] , a , pos + 1 , n ) ) ; return ans ; } public static void main ( String [ ] args ) { int n = 4 ; int a [ ] = { 1 , 2 , 3 , 6 } ; System . out . println ( maxSum ( 0 , a , 0 , n ) ) ; } }"],"references":["class GFG { static int maxSum ( int p0 , int p1 , int a [ ] , int pos , int n ) { if ( pos == n ) { if ( p0 == p1 ) return p0 ; else return 0 ; } int ans = maxSum ( p0 , p1 , a , pos + 1 , n ) ; ans = Math . max ( ans , maxSum ( p0 + a [ pos ] , p1 , a , pos + 1 , n ) ) ; ans = Math . max ( ans , maxSum ( p0 , p1 + a [ pos ] , a , pos + 1 , n ) ) ; return ans ; } public static void main ( String [ ] args ) { int n = 4 ; int a [ ] = { 1 , 2 , 3 , 6 } ; System . out . println ( maxSum ( 0 , 0 , a , 0 , n ) ) ; } }"],"bleu":0.9558572660322447,"rouge_l":0.9709841731853738}
{"id":982,"predictions":["class GFG { static int MAXN = 10000000 ; static int minimumSteps ( int n , int m , int a , int b ) { if ( n > m ) { return MAXN ; } if ( n == m ) { return 0 ; } return Math . min ( 1 + minimumSteps ( n * a , m , a , b ) , 1 + minimumSteps ( n * b , m , a , b ) ; } public static void main ( String [ ] args ) { int n = 120 , m = 51840 ; int a = 2 , b = 3 ; System . out . println ( minimumSteps ( n , m , a , b ) ) ; } }"],"references":["class GFG { static int MAXN = 10000000 ; static int minimumSteps ( int n , int m , int a , int b ) { if ( n > m ) return MAXN ; if ( n == m ) return 0 ; return Math . min ( 1 + minimumSteps ( n * a , m , a , b ) , 1 + minimumSteps ( n * b , m , a , b ) ) ; } public static void main ( String [ ] args ) { int n = 120 , m = 51840 ; int a = 2 , b = 3 ; System . out . println ( minimumSteps ( n , m , a , b ) ) ; } }"],"bleu":0.917633533912342,"rouge_l":0.9830106183635228}
{"id":983,"predictions":["class GFG { static String printLargestString ( String s , int l , int r ) { int [ ] freq = new int [ 26 ] ; l -- ; r -- ; for ( int i = Math . min ( l , r ) ; i <= Math . max ( l , r ) ; i ++ ) { freq [ s . charAt ( i ) - ' a ' ] ++ ; } String ans = \" \" ; for ( int i = 25 ; i >= 0 ; i -- ) { while ( freq [ i ] != 0 ) { ans += ( char ) ( i + ' a ' ) ; freq [ i ] -- ; } } return ans ; } public static void main ( String [ ] args ) { String s = \" striver \" ; int l = 3 , r = 5 ; System . out . print ( printLargestString ( s , l , r ) ) ; } }"],"references":["class GFG { static String printLargestString ( String s , int l , int r ) { int freq [ ] = new int [ 26 ] ; l -- ; r -- ; for ( int i = Math . min ( l , r ) ; i <= Math . max ( l , r ) ; i ++ ) { freq [ s . charAt ( i ) - ' a ' ] ++ ; } String ans = \" \" ; for ( int i = 25 ; i >= 0 ; i -- ) { while ( freq [ i ] > 0 ) { ans += ( char ) ( ' a ' + i ) ; freq [ i ] -- ; } } return ans ; } public static void main ( String [ ] args ) { String s = \" striver \" ; int l = 3 , r = 5 ; System . out . println ( printLargestString ( s , l , r ) ) ; } }"],"bleu":0.9263792288650533,"rouge_l":0.9722222222222222}
{"id":984,"predictions":["class GFG { static void findSymPairs ( int arr [ ] , int row ) { HashMap < Integer , Integer > hM = new HashMap < > ( ) ; for ( int i = 0 ; i < row ; ++ i ) { int first = arr [ i ] [ 0 ] ; int sec = arr [ i ] [ 1 ] ; if ( hM . containsKey ( sec ) && hM . get ( sec ) == first ) { System . out . println ( \" ( \" + sec + \" , ▁ \" + first + \" ) \" ) ; } else { hM . put ( first , second ) ; } } } static void findSymPairs ( int arr [ ] [ ] ) { int i , 0 ; for ( i = 0 ; i < arr . length ; i ++ ) { int first = arr [ i ] [ 0 ] ; int sec = arr [ i ] [ 0 ] ; int first = arr [ i ] [ 0 ] ; if ( hM . containsKey ( first ) && hM . get ( second ) == first ) { System . out . println ( \" ( \" + sec + \" ) \" ) ; } else { hM . put ( first , second ) ; } } public static void main ( String [ ] args ) { int arr [ ] [ ] = new int [ 5 ] [ ] ; int arr [ ] [ ] = new int [ 5 ] [ 0 ] ; for ( int i = 0 ; i < 5 ; i ++ ) { arr [ i ] [ 0 ] = 11 , 20 } ; findSymPairs ( arr , 5 ) ; } }"],"references":["import java . util . HashMap ; class SymmetricPairs { static void findSymPairs ( int arr [ ] [ ] ) { HashMap < Integer , Integer > hM = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < arr . length ; i ++ ) { int first = arr [ i ] [ 0 ] ; int sec = arr [ i ] [ 1 ] ; Integer val = hM . get ( sec ) ; if ( val != null && val == first ) System . out . println ( \" ( \" + sec + \" , ▁ \" + first + \" ) \" ) ; else hM . put ( first , sec ) ; } } public static void main ( String arg [ ] ) { int arr [ ] [ ] = new int [ 5 ] [ 2 ] ; arr [ 0 ] [ 0 ] = 11 ; arr [ 0 ] [ 1 ] = 20 ; arr [ 1 ] [ 0 ] = 30 ; arr [ 1 ] [ 1 ] = 40 ; arr [ 2 ] [ 0 ] = 5 ; arr [ 2 ] [ 1 ] = 10 ; arr [ 3 ] [ 0 ] = 40 ; arr [ 3 ] [ 1 ] = 30 ; arr [ 4 ] [ 0 ] = 10 ; arr [ 4 ] [ 1 ] = 5 ; findSymPairs ( arr ) ; } }"],"bleu":0.4755171461267684,"rouge_l":0.6165791405500028}
{"id":985,"predictions":["import java . util . * ; class GFG { static int fact ( int n ) { int res = 1 ; for ( int i = 2 ; i <= n ; i ++ ) res = res * i ; return res ; } static int nCr ( int n , int r ) { return fact ( n ) \/ ( fact ( r ) * fact ( n - r ) ) ; } static int number_of_subsequences ( int arr [ ] , int k , int n ) { int s = 0 ; Map < Integer > m = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( m . containsKey ( arr [ i ] ) ) { m . put ( arr [ i ] , m . get ( arr [ i ] ) + 1 ) ; } else { m . put ( arr [ i ] , m . get ( arr [ i ] ) + 1 ) ; } } return s ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 1 , 2 , 2 , 2 } ; int k = 2 ; int n = arr . length ; System . out . print ( number_of_subsequences ( arr , k , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static long fact ( int n ) { long res = 1 ; for ( int i = 2 ; i <= n ; i ++ ) res = res * i ; return res ; } static long nCr ( int n , int r ) { return fact ( n ) \/ ( 1 * fact ( r ) * fact ( n - r ) ) ; } static long number_of_subsequences ( int arr [ ] , int k , int n ) { long s = 0 ; HashMap < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( mp . containsKey ( arr [ i ] ) ) { mp . put ( arr [ i ] , mp . get ( arr [ i ] ) + 1 ) ; } else { mp . put ( arr [ i ] , 1 ) ; } } for ( Map . Entry < Integer , Integer > j : mp . entrySet ( ) ) { s = s + 1 * nCr ( j . getValue ( ) , k ) ; } return s ; } static public void main ( String [ ] arg ) { int arr [ ] = { 1 , 1 , 1 , 1 , 2 , 2 , 2 } ; int k = 2 ; int n = arr . length ; System . out . println ( number_of_subsequences ( arr , k , n ) ) ; } }"],"bleu":0.7108103512460112,"rouge_l":0.8536021345982805}
{"id":986,"predictions":["class GFG { static final int MAX = 26 ; static void SieveOfEratosthenes ( boolean prime [ ] , int p_size ) { prime [ 0 ] = false ; prime [ 1 ] = false ; for ( int p = 2 ; p * p < p_size ; p ++ ) { if ( prime [ p ] ) { for ( int i = p * 2 ; i < p_size ; i += p ) prime [ i ] = false ; } } } static void printChar ( char str [ ] , int n ) { boolean [ ] prime = new boolean [ n + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) prime [ i ] = true ; SieveOfEratosthenes ( prime , str . length ) ; int freq [ ] = new int [ SIZE ] ; for ( int i = 0 ; i < n ; i ++ ) { freq [ str . charAt ( i ) - ' a ' ] ++ ; } for ( int i = 0 ; i < n ; i ++ ) { if ( prime [ freq [ str . charAt ( i ) - ' a ' ] ) { System . out . print ( str [ i ] ) ; } } } public static void main ( String [ ] args ) { String str = \" geeksforgeeks \" ; int n = str . length ( ) ; printChar ( str , n ) ; } }"],"references":["class GFG { static int SIZE = 26 ; static void SieveOfEratosthenes ( boolean [ ] prime , int p_size ) { prime [ 0 ] = false ; prime [ 1 ] = false ; for ( int p = 2 ; p * p <= p_size ; p ++ ) { if ( prime [ p ] ) { for ( int i = p * 2 ; i < p_size ; i += p ) prime [ i ] = false ; } } } static void printChar ( String str , int n ) { boolean [ ] prime = new boolean [ n + 1 ] ; for ( int i = 0 ; i < n + 1 ; i ++ ) prime [ i ] = true ; SieveOfEratosthenes ( prime , str . length ( ) + 1 ) ; int [ ] freq = new int [ SIZE ] ; for ( int i = 0 ; i < SIZE ; i ++ ) freq [ i ] = 0 ; for ( int i = 0 ; i < n ; i ++ ) freq [ str . charAt ( i ) - ' a ' ] ++ ; for ( int i = 0 ; i < n ; i ++ ) { if ( prime [ freq [ str . charAt ( i ) - ' a ' ] ] ) { System . out . print ( str . charAt ( i ) ) ; } } } public static void main ( String [ ] args ) { String str = \" geeksforgeeks \" ; int n = str . length ( ) ; printChar ( str , n ) ; } }"],"bleu":0.809986449102484,"rouge_l":0.9067002058083695}
{"id":987,"predictions":["class GFG { static int calculateSum ( int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum = sum + ( 1 << i ) ; } return sum ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( \" Sum ▁ of ▁ series ▁ \" + calculateSum ( n ) ) ; } }"],"references":["class GFG { static int claculate sum ( int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum = sum + ( 1 << i ) ; } return sum ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( \" Sum ▁ of ▁ the ▁ series ▁ : ▁ \" + calculateSum ( n ) ) ; } } ;"],"bleu":0.8867916053004983,"rouge_l":0.9487132012590261}
{"id":988,"predictions":["class GFG { static int N = 1000005 ; static boolean isPrime ( int n ) { if ( n <= 1 ) return false ; if ( n <= 3 ) return true ; if ( n % 2 == 0 || n % 3 == 0 ) return false ; for ( int i = 5 ; i * i <= n ; i = i + 6 ) if ( n % i == 0 || n % ( i + 2 ) == 0 ) return false ; return true ; } static int SumOfPrimeDivisors ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( n % i == 0 ) { if ( isPrime ( i ) ) sum += i ; } } return sum ; } public static void main ( String [ ] args ) { int n = 60 ; System . out . print ( \" Sum ▁ of ▁ prime ▁ \" + \" divisors ▁ of ▁ 60 ▁ is ▁ \" + SumOfPrimeDivisors ( n ) ) ; } }"],"references":["import java . io . * ; import java . util . * ; class GFG { static boolean isPrime ( int n ) { if ( n <= 1 ) return false ; if ( n <= 3 ) return true ; if ( n % 2 == 0 || n % 3 == 0 ) return false ; for ( int i = 5 ; i * i <= n ; i = i + 6 ) if ( n % i == 0 || n % ( i + 2 ) == 0 ) return false ; return true ; } static int SumOfPrimeDivisors ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( n % i == 0 ) { if ( isPrime ( i ) ) sum += i ; } } return sum ; } public static void main ( String args [ ] ) { int n = 60 ; System . out . print ( \" Sum ▁ of ▁ prime ▁ divisors ▁ of ▁ 60 ▁ is ▁ \" + SumOfPrimeDivisors ( n ) + \" \\n \" ) ; } }"],"bleu":0.8833294832345906,"rouge_l":0.9254231874800384}
{"id":989,"predictions":["import java . util . * ; class GFG { static int elementCount ( int arr1 [ ] , int arr2 [ ] ) { int count = 0 ; HashSet < Integer > hash = new HashSet < > ( ) ; for ( int i = 0 ; i < arr1 . length ; i ++ ) { for ( int j = 1 ; j * j <= arr1 ; j ++ ) { if ( hash . contains ( arr2 ) && hash . contains ( arr [ j ] ) && hash . contains ( arr3 ) ) { count ++ ; } } } return count ; } public static void main ( String [ ] args ) { int arr1 [ ] = { 10 , 2 , 13 , 4 , 15 } ; int arr2 [ ] = { 2 , 4 , 5 , 6 } ; System . out . println ( elementCount ( arr1 , arr2 ) ) ; } }"],"references":["import java . util . * ; class GFG { static int elementCount ( int arr1 [ ] , int n1 , int arr2 [ ] , int n2 ) { int count = 0 ; HashSet < Integer > hash = new HashSet < > ( ) ; for ( int i = 0 ; i < n2 ; i ++ ) { hash . add ( arr2 [ i ] ) ; } for ( int i = 0 ; i < n1 ; i ++ ) { for ( int j = 1 ; j * j <= arr1 [ i ] ; j ++ ) { if ( arr1 [ i ] % j == 0 ) { if ( ( hash . contains ( j ) && j != ( int ) hash . toArray ( ) [ hash . size ( ) - 1 ] ) || ( hash . contains ( arr1 [ i ] \/ j ) && ( arr1 [ i ] \/ j ) != ( int ) hash . toArray ( ) [ hash . size ( ) - 1 ] ) ) { count ++ ; break ; } } } } return count ; } public static void main ( String [ ] args ) { int arr1 [ ] = { 10 , 2 , 13 , 4 , 15 } ; int arr2 [ ] = { 2 , 4 , 5 , 6 } ; int n1 = arr1 . length ; int n2 = arr2 . length ; System . out . println ( elementCount ( arr1 , n1 , arr2 , n2 ) ) ; } }"],"bleu":0.45248979783285637,"rouge_l":0.6942749400068564}
{"id":990,"predictions":["import java . io . * ; class GFG { static int countSubarray ( int arr [ ] , int n , int k ) { int s = 0 ; int i = 0 ; while ( i < n ) { if ( arr [ i ] > k ) { i ++ ; continue ; } int count = 0 ; while ( i < n && arr [ i ] <= k ) { i = i + 1 ; count ++ ; } s = s + ( count * ( count + 1 ) ) \/ 2 ) ; return ( n * ( n + 1 ) \/ 2 - s ) ; } return ( n * ( n + 1 ) \/ 2 - s ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 } ; int k = 2 ; int n = arr . length ; System . out . println ( countSubarray ( arr , n , k ) ) ; } }"],"references":["import java . util . * ; class GFG { static int countSubarray ( int arr [ ] , int n , int k ) { int s = 0 ; int i = 0 ; while ( i < n ) { if ( arr [ i ] > k ) { i ++ ; continue ; } int count = 0 ; while ( i < n && arr [ i ] <= k ) { i ++ ; count ++ ; } s += ( ( count * ( count + 1 ) ) \/ 2 ) ; } return ( n * ( n + 1 ) \/ 2 - s ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 } ; int k = 2 ; int n = arr . length ; System . out . print ( countSubarray ( arr , n , k ) ) ; } }"],"bleu":0.8418917344479335,"rouge_l":0.9288775417160573}
{"id":991,"predictions":["import java . util . Arrays ; class GFG { static int countNum ( int arr [ ] , int n ) { Arrays . sort ( arr ) ; int count = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( arr [ i ] != arr [ i + 1 ] && arr [ i ] != arr [ i + 1 ] - 1 ) count += arr [ i + 1 ] - arr [ i ] ; } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 5 , 8 , 6 } ; int n = arr . length ; System . out . println ( countNum ( arr , n ) ) ; } }"],"references":["import java . io . * ; import java . util . * ; public class GFG { static int countNum ( int [ ] arr , int n ) { int count = 0 ; Arrays . sort ( arr ) ; for ( int i = 0 ; i < n - 1 ; i ++ ) if ( arr [ i ] != arr [ i + 1 ] && arr [ i ] != arr [ i + 1 ] - 1 ) count += arr [ i + 1 ] - arr [ i ] - 1 ; return count ; } static public void main ( String [ ] args ) { int [ ] arr = { 3 , 5 , 8 , 6 } ; int n = arr . length ; System . out . println ( countNum ( arr , n ) ) ; } }"],"bleu":0.7959268038956735,"rouge_l":0.8970588235294118}
{"id":992,"predictions":["import java . util . * ; class GFG { static void max_element ( int a [ ] , int n ) { int pre [ ] = new int [ n ] ; pre [ 0 ] = a [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) pre [ i ] = Math . max ( pre [ i - 1 ] , a [ i ] ) ; Vector < Integer > suf [ n - 1 ] = a [ n - 1 ] ; for ( int i = n - 2 ; i >= 0 ; i -- ) { suf [ i ] = Math . max ( suf [ i - 1 ] , a [ i ] ) ; } for ( int i = 0 ; i < n ; i ++ ) { if ( i == 0 ) System . out . print ( suf [ i + 1 ] + \" ▁ \" ) ; else if ( i == n - 1 ) System . out . print ( pre [ i - 1 ] + \" ▁ \" ) ; else System . out . print ( Math . max ( pre [ i - 1 ] , suf [ i + 1 ] ) + \" ▁ \" ) ; } } public static void main ( String [ ] args ) { int a [ ] = { 2 , 5 , 6 , 1 , 3 } ; int n = a . length ; max_element ( a , n ) ; } }"],"references":["class GFG { static void max_element ( int a [ ] , int n ) { int [ ] pre = new int [ n ] ; pre [ 0 ] = a [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) pre [ i ] = Math . max ( pre [ i - 1 ] , a [ i ] ) ; int [ ] suf = new int [ n ] ; suf [ n - 1 ] = a [ n - 1 ] ; for ( int i = n - 2 ; i >= 0 ; i -- ) suf [ i ] = Math . max ( suf [ i + 1 ] , a [ i ] ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( i == 0 ) System . out . print ( suf [ i + 1 ] + \" ▁ \" ) ; else if ( i == n - 1 ) System . out . print ( pre [ i - 1 ] + \" ▁ \" ) ; else System . out . print ( Math . max ( pre [ i - 1 ] , suf [ i + 1 ] ) + \" ▁ \" ) ; } } public static void main ( String [ ] args ) { int a [ ] = { 2 , 5 , 6 , 1 , 3 } ; int n = a . length ; max_element ( a , n ) ; } }"],"bleu":0.9166559460076492,"rouge_l":0.9506122209854122}
{"id":993,"predictions":["class GFG { static boolean isRotated ( String str1 , String str2 ) { if ( str1 . length ( ) != str2 . length ( ) ) return false ; int [ ] clock_rot = new String [ str2 . length ( ) ; int l = str2 . length ( ) ; int t_rot = new int [ l ] ; for ( int i = 0 ; i < str2 . length ( ) ; i ++ ) { t_rot = str2 . substring ( 0 , l - 2 ) + str2 . substring ( 0 , l - 2 ) ; t_rot = t_rot + str2 . substring ( 0 , 2 ) + str2 . substring ( 0 , 2 ) ; return ( str1 == t_rot || str1 . substring ( 0 , 2 ) ; } return true ; } public static void main ( String [ ] args ) { String str1 = \" geeks \" ; String str2 = \" eks \" ; if ( isRotated ( str1 , str2 ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class Test { static boolean isRotated ( String str1 , String str2 ) { if ( str1 . length ( ) != str2 . length ( ) ) return false ; String clock_rot = \" \" ; String anticlock_rot = \" \" ; int len = str2 . length ( ) ; anticlock_rot = anticlock_rot + str2 . substring ( len - 2 , len ) + str2 . substring ( 0 , len - 2 ) ; clock_rot = clock_rot + str2 . substring ( 2 ) + str2 . substring ( 0 , 2 ) ; return ( str1 . equals ( clock_rot ) || str1 . equals ( anticlock_rot ) ) ; } public static void main ( String [ ] args ) { String str1 = \" geeks \" ; String str2 = \" eksge \" ; System . out . println ( isRotated ( str1 , str2 ) ? \" Yes \" : \" No \" ) ; } }"],"bleu":0.5234933349283333,"rouge_l":0.7189383715699507}
{"id":994,"predictions":["class GFG { static int findMax ( int num ) { int num_copy = num ; int j = 4 * 8 - 1 ; int i = 0 ; while ( i < j ) { int m = ( num_copy >> i ) & 1 ; int n = ( num_copy >> j ) & 1 ; if ( m > n ) { int x = ( 1 << i | j ) ; num = num ^ x ; } i ++ ; j -- ; } return num ; } public static void main ( String [ ] args ) { int num = 4 ; System . out . println ( findMax ( num ) ) ; } }"],"references":["class GFG { static int findMax ( int num ) { byte size_of_int = 4 ; int num_copy = num ; int j = size_of_int * 8 - 1 ; int i = 0 ; while ( i < j ) { int m = ( num_copy >> i ) & 1 ; int n = ( num_copy >> j ) & 1 ; if ( m > n ) { int x = ( 1 << i | 1 << j ) ; num = num ^ x ; } i ++ ; j -- ; } return num ; } static public void main ( String [ ] args ) { int num = 4 ; System . out . println ( findMax ( num ) ) ; } }"],"bleu":0.8833495592884305,"rouge_l":0.9525199949219245}
{"id":995,"predictions":["import java . util . * ; class GFG { static boolean check ( String s , int l ) { Stack < Character > pos = new Stack < > ( ) ; for ( int i = 0 ; i < l ; i ++ ) { if ( s . charAt ( i ) == '1' ) pos . add ( i ) ; } int t = pos . length ( ) ; for ( int i = 1 ; i < t ; i ++ ) { if ( ( pos . charAt ( i ) - pos . charAt ( i - 1 ) ) != ( pos . charAt ( i - 1 ) ) ) return false ; } return true ; } public static void main ( String [ ] args ) { String s = \"100010001000\" ; int l = s . length ( ) ; if ( check ( s , l ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; class GFG { static boolean check ( String s , int l ) { Vector < Integer > pos = new Vector < Integer > ( ) ; for ( int i = 0 ; i < l ; i ++ ) { if ( s . charAt ( i ) == '1' ) pos . add ( i ) ; } int t = pos . size ( ) ; for ( int i = 1 ; i < t ; i ++ ) { if ( ( pos . get ( i ) - pos . get ( i - 1 ) ) != ( pos . get ( 1 ) - pos . get ( 0 ) ) ) return false ; } return true ; } public static void main ( String args [ ] ) { String s = \"100010001000\" ; int l = s . length ( ) ; if ( check ( s , l ) ) System . out . print ( \" Yes \" ) ; else System . out . print ( \" No \" ) ; } }"],"bleu":0.8174877976959725,"rouge_l":0.9197018465187193}
{"id":996,"predictions":["class GFG { static int maximum_one ( String s , int n ) { int cnt_one = 0 , cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == '1' ) { cnt_one ++ ; cnt ++ ; } else { max_cnt = Math . max ( max_cnt , cnt ) ; cnt = 0 ; } } max_cnt = Math . max ( max_cnt , cnt ) ; int [ ] left = new int [ n ] ; int [ ] right = new int [ n ] ; if ( s . charAt ( 0 ) == '1' ) left [ 0 ] = 1 ; else left [ 0 ] = 0 ; for ( int i = 1 ; i < n ; i ++ ) { if ( s . charAt ( i ) == '1' ) left [ i ] = 1 ; else left [ i ] = 0 ; } for ( int i = n - 2 ; i >= 0 ; i -- ) { if ( s . charAt ( i ) == '1' ) left [ i ] = left [ i - 1 ] + 1 ; else left [ i ] = 0 ; } for ( int i = n - 2 ; i >= 0 ; i -- ) { if ( s . charAt ( i ) == '1' ) left [ i ] = left [ i - 1 ] + right [ i + 1 ] ; else right [ i ] = 0 ; } for ( int i = n - 2 ; i >= 0 ; i -- ) { if ( s . charAt ( i ) == '0' ) right [ i ] = right [ i + 1 ] + right [ i + 1 ] ; } for ( int i = 1 ; i < n ; i ++ ) { if ( s . charAt ( i ) == '0' ) right [ i ] = right [ i + 1 ] + 1 ; } else right [ i ] = 0 ; } for ( int i = 1 ; i < n ; i ++ ) { if ( s . charAt ( i ) == '0' ) max_cnt = Math . max ( max_cnt , sum + 1 ) ; } return max_cnt ; } public static void main ( String [ ] args ) { String s = \""],"references":["import java . io . * ; class GFG { static int maximum_one ( String s , int n ) { int cnt_one = 0 ; int max_cnt = 0 , temp = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == '1' ) { cnt_one ++ ; temp ++ ; } else { max_cnt = Math . max ( max_cnt , temp ) ; temp = 0 ; } } max_cnt = Math . max ( max_cnt , temp ) ; int [ ] left = new int [ n ] ; int right [ ] = new int [ n ] ; if ( s . charAt ( 0 ) == '1' ) left [ 0 ] = 1 ; else left [ 0 ] = 0 ; if ( s . charAt ( n - 1 ) == '1' ) right [ n - 1 ] = 1 ; else right [ n - 1 ] = 0 ; for ( int i = 1 ; i < n ; i ++ ) { if ( s . charAt ( i ) == '1' ) left [ i ] = left [ i - 1 ] + 1 ; else left [ i ] = 0 ; } for ( int i = n - 2 ; i >= 0 ; i -- ) { if ( s . charAt ( i ) == '1' ) right [ i ] = right [ i + 1 ] + 1 ; else right [ i ] = 0 ; } for ( int i = 1 ; i < n - 1 ; i ++ ) { if ( s . charAt ( i ) == '0' ) { int sum = left [ i - 1 ] + right [ i + 1 ] ; if ( sum < cnt_one ) max_cnt = Math . max ( max_cnt , sum + 1 ) ; else max_cnt = Math . max ( max_cnt , sum ) ; } } return max_cnt ; } public static void main ( String [ ] args ) { String s = \"111011101\" ; System . out . println ( maximum_one ( s , s . length ( ) ) ) ; } }"],"bleu":0.7095111357641888,"rouge_l":0.7627105273537648}
{"id":997,"predictions":["class GFG { static void nDigitPerfectCubes ( int n ) { int largest = ( int ) ( Math . pow ( 10 , ( n - 1 ) ) , 3 ) ; System . out . print ( Math . pow ( ( 10 , ( n - 1 ) ) , 3 ) + \" ▁ \" ) ; int largest = ( int ) ( Math . pow ( 10 , ( n ) ) ) ; System . out . print ( Math . pow ( ( int ) ( Math . pow ( 10 , ( n ) ) ) - 1 , 3 ) - 1 ) ; } public static void main ( String [ ] args ) { int n = 3 ; nDigitPerfectCubes ( n ) ; } }"],"references":["class GFG { static void nDigitPerfectCubes ( int n ) { int smallest = ( int ) Math . pow ( Math . ceil ( Math . cbrt ( Math . pow ( 10 , ( n - 1 ) ) ) ) , 3 ) ; System . out . print ( smallest + \" ▁ \" ) ; int largest = ( int ) Math . pow ( Math . ceil ( Math . cbrt ( Math . pow ( 10 , ( n ) ) ) ) - 1 , 3 ) ; System . out . print ( largest ) ; } public static void main ( String args [ ] ) { int n = 3 ; nDigitPerfectCubes ( n ) ; } }"],"bleu":0.700536847895255,"rouge_l":0.7588372952334032}
{"id":998,"predictions":["class GFG { static boolean isMultipleof5 ( int n ) { if ( ( n & 1 ) == 1 ) n <<= 1 ; int x = n ; x = ( ( int ) ( x * 0.1 ) ) * 10 ; if ( x == n ) return 1 ; return 0 ; } public static void main ( String [ ] args ) { int i = 19 ; if ( isMultipleof5 ( i ) == true ) return true ; else System . out . println ( i + \" ▁ is ▁ multiple ▁ of ▁ 5\" ) ; } }"],"references":["class GFG { static boolean isMultipleof5 ( int n ) { if ( ( n & 1 ) == 1 ) n <<= 1 ; float x = n ; x = ( ( int ) ( x * 0.1 ) ) * 10 ; if ( ( int ) x == n ) return true ; return false ; } public static void main ( String [ ] args ) { int i = 19 ; if ( isMultipleof5 ( i ) == true ) System . out . println ( i + \" is ▁ multiple ▁ of ▁ 5\" ) ; else System . out . println ( i + \" ▁ is ▁ not ▁ a ▁ \" + \" multiple ▁ of ▁ 5\" ) ; } }"],"bleu":0.7121510823936285,"rouge_l":0.8390758547008548}
{"id":999,"predictions":["class CFG { static int minsteps ( int n , int m ) { if ( m > n ) { return - 1 ; } else { return ( ( n + 1 ) \/ 2 + m - 1 ) \/ m * m * m ; } } public static void main ( String [ ] args ) { int n = 17 ; int m = 4 ; System . out . println ( minsteps ( n , m ) ) ; } }"],"references":["class GFG { static int minsteps ( int n , int m ) { if ( m > n ) { return - 1 ; } else { return ( ( n + 1 ) \/ 2 + m - 1 ) \/ m * m ; } } public static void main ( String [ ] args ) { int n = 17 , m = 4 ; int ans = minsteps ( n , m ) ; System . out . println ( ans ) ; } }"],"bleu":0.8601503836393815,"rouge_l":0.8634191176470587}
{"id":1000,"predictions":["class GFG { static void gridStr ( String str ) { int l = str . length ( ) ; int k = 0 ; int row = 0 ; int row = ( int ) Math . ceil ( Math . sqrt ( l ) ) ; if ( row * column < l ) { row = column ; } int column = ( int ) Math . ceil ( ( int ) Math . ceil ( Math . sqrt ( l ) ) ) ; for ( int i = 0 ; i < row ; i ++ ) { for ( int j = 0 ; j < column ; j ++ ) { if ( k >= l ) { s [ i ] [ j ] = ' ▁ ' ; k ++ ; } else { s [ i ] [ j ] = str [ k ] [ j ] ; k ++ ; } } } for ( int i = 0 ; i < row ; i ++ ) { for ( int j = 0 ; j < column ; j ++ ) { if ( s [ i ] [ j ] == ' ▁ ' ) { break ; } } System . out . print ( s [ i ] [ j ] + \" \\n \" ) ; } } public static void main ( String [ ] args ) { String str = \" GEEKSFORGEEKS \" ; gridStr ( str ) ; } }"],"references":["class GFG { static void gridStr ( String str ) { int l = str . length ( ) ; int k = 0 , row , column ; row = ( int ) Math . floor ( Math . sqrt ( l ) ) ; column = ( int ) Math . ceil ( Math . sqrt ( l ) ) ; if ( row * column < l ) { row = column ; } char s [ ] [ ] = new char [ row ] [ column ] ; for ( int i = 0 ; i < row ; i ++ ) { for ( int j = 0 ; j < column ; j ++ ) { if ( k < str . length ( ) ) s [ i ] [ j ] = str . charAt ( k ) ; k ++ ; } } for ( int i = 0 ; i < row ; i ++ ) { for ( int j = 0 ; j < column ; j ++ ) { if ( s [ i ] [ j ] == 0 ) { break ; } System . out . print ( s [ i ] [ j ] ) ; } System . out . println ( \" \" ) ; } } public static void main ( String [ ] args ) { String str = \" GEEKSFORGEEKS \" ; gridStr ( str ) ; } }"],"bleu":0.773614590581148,"rouge_l":0.7795402003596198}
{"id":1001,"predictions":["class GFG { static int maxProfit ( int price [ ] , int start , int end ) { if ( end <= start ) return 0 ; int profit = 0 ; for ( int i = start ; i < end ; i ++ ) { for ( int j = i + 1 ; j < end ; j ++ ) { if ( price [ j ] > price [ i ] ) { int curr_buy = price [ j ] - price [ i ] + maxProfit ( price , start , i - 1 ) + maxProfit ( price , j + 1 , end ) ; } profit = Math . max ( profit , curr_price ) ; } } return profit ; } public static void main ( String [ ] args ) { int price [ ] = { 100 , 180 , 260 , 40 , 535 , 695 } ; int n = price . length ; System . out . println ( maxProfit ( price , 0 , n - 1 ) ) ; } }"],"references":["import java . util . * ; class GFG { static int maxProfit ( int price [ ] , int start , int end ) { if ( end <= start ) return 0 ; int profit = 0 ; for ( int i = start ; i < end ; i ++ ) { for ( int j = i + 1 ; j <= end ; j ++ ) { if ( price [ j ] > price [ i ] ) { int curr_profit = price [ j ] - price [ i ] + maxProfit ( price , start , i - 1 ) + maxProfit ( price , j + 1 , end ) ; profit = Math . max ( profit , curr_profit ) ; } } } return profit ; } public static void main ( String [ ] args ) { int price [ ] = { 100 , 180 , 260 , 310 , 40 , 535 , 695 } ; int n = price . length ; System . out . print ( maxProfit ( price , 0 , n - 1 ) ) ; } }"],"bleu":0.8849314236568339,"rouge_l":0.9466587516960652}
{"id":1002,"predictions":["class GFG { static int maximum_middle_value ( int n , int k , int arr [ ] ) { int ans = - 1 ; int low = ( n + 1 - k ) \/ 2 + k ; int high = ( n + 1 - k ) \/ 2 + k ; for ( int i = low ; i <= high ; i ++ ) { ans = Math . max ( ans , arr [ i - 1 ] ) ; } return ans ; } public static void main ( String [ ] args ) { int n = 5 , k = 2 ; System . out . println ( maximum_middle ( n , k , arr ) ) ; n = 9 , k = 3 ; int arr [ ] = { 2 , 4 , 3 , 5 , 8 , 7 , 6 , 10 } ; System . out . println ( maximum_middle_value ( n , k , arr1 ) ) ; } }"],"references":["import java . util . * ; class GFG { static int maximum_middle_value ( int n , int k , int arr [ ] ) { int ans = - 1 ; int low = ( n + 1 - k ) \/ 2 ; int high = ( n + 1 - k ) \/ 2 + k ; for ( int i = low ; i <= high ; i ++ ) { ans = Math . max ( ans , arr [ i - 1 ] ) ; } return ans ; } public static void main ( String args [ ] ) { int n = 5 , k = 2 ; int arr [ ] = { 9 , 5 , 3 , 7 , 10 } ; System . out . println ( maximum_middle_value ( n , k , arr ) ) ; n = 9 ; k = 3 ; int arr1 [ ] = { 2 , 4 , 3 , 9 , 5 , 8 , 7 , 6 , 10 } ; System . out . println ( maximum_middle_value ( n , k , arr1 ) ) ; } }"],"bleu":0.8054029829673301,"rouge_l":0.8939655172413794}
{"id":1003,"predictions":["import java . io . * ; class GFG { static int countRec ( int n , int sum ) { if ( n == 0 ) return ( sum == 0 ) ; if ( sum == 0 ) return 1 ; int ans = 0 ; for ( int i = 0 ; i < 10 ; ++ i ) if ( sum - i >= 0 ) ans += countRec ( n - 1 , sum - i ) ; return ans ; } static int finalCount ( int n , int sum ) { int ans = 0 ; for ( int i = 1 ; i < 10 ; i ++ ) { if ( sum - i >= 0 ) ans += countRec ( n - 1 , sum - i ) ; } return ans ; } public static void main ( String [ ] args ) { int n = 2 , sum = 5 ; System . out . println ( finalCount ( n , sum ) ) ; } }"],"references":["class sum_dig { static int countRec ( int n , int sum ) { if ( n == 0 ) return sum == 0 ? 1 : 0 ; if ( sum == 0 ) return 1 ; int ans = 0 ; for ( int i = 0 ; i <= 9 ; i ++ ) if ( sum - i >= 0 ) ans += countRec ( n - 1 , sum - i ) ; return ans ; } static int finalCount ( int n , int sum ) { int ans = 0 ; for ( int i = 1 ; i <= 9 ; i ++ ) if ( sum - i >= 0 ) ans += countRec ( n - 1 , sum - i ) ; return ans ; } public static void main ( String args [ ] ) { int n = 2 , sum = 5 ; System . out . println ( finalCount ( n , sum ) ) ; } }"],"bleu":0.822067502469273,"rouge_l":0.9211409395973156}
{"id":1004,"predictions":["class GFG { static long calculateSum ( int n , int k ) { long res = 1 ; long MOD = 1000000007 ; while ( k > 0 ) { if ( ( k & 1 ) == 1 ) res = ( res * n ) % MOD ; k = k \/ 2 ; n = ( n * n ) % MOD ; } return res ; } public static void main ( String [ ] args ) { int n = 4 ; int k = 3 ; System . out . print ( calculateSum ( n , k ) ) ; } }"],"references":["class GFG { static long calculateSum ( int n , int k ) { int res = 1 ; int MOD = 1000000007 ; while ( k > 0 ) { if ( ( k & 1 ) == 1 ) res = ( res * n ) % MOD ; k = k \/ 2 ; n = ( n * n ) % MOD ; } return res ; } public static void main ( String [ ] args ) { int n = 4 , k = 3 ; System . out . print ( calculateSum ( n , k ) ) ; } } ;"],"bleu":0.927357200268739,"rouge_l":0.963302752293578}
{"id":1005,"predictions":["class GFG { static int countPairs ( int s , int K ) { if ( K > s || ( s - K ) % 2 == 1 ) return 0 ; int setBits = ( int ) ( Math . pow ( 2 , setBits ) ) ; int pairsCount = ( int ) Math . pow ( 2 , setBits ) ; if ( s == K ) { pairsCount -= 2 ; } return pairsCount ; } public static void main ( String [ ] args ) { int s = 9 , K = 5 ; System . out . println ( countPairs ( s , K ) ) ; } }"],"references":["class GFG { static int countPairs ( int s , int K ) { if ( K > s || ( s - K ) % 2 == 1 ) { return 0 ; } if ( ( s - K ) \/ 2 == 1 & K == 1 ) { return 0 ; } int setBits = __builtin_popcount ( K ) ; int pairsCount = ( int ) Math . pow ( 2 , setBits ) ; if ( s == K ) { pairsCount -= 2 ; } return pairsCount ; } static int __builtin_popcount ( int n ) { int count = 0 ; while ( n > 0 ) { count += n & 1 ; n >>= 1 ; } return count ; } public static void main ( String [ ] args ) { int s = 9 , K = 5 ; System . out . println ( countPairs ( s , K ) ) ; } }"],"bleu":0.5730812964011156,"rouge_l":0.7264352319964049}
{"id":1006,"predictions":["class GFG { static void splitString ( String str ) { String alpha = \" \" ; String num = \" \" ; int i ; for ( i = 0 ; i < str . length ( ) ; i ++ ) { if ( Character . isDigit ( str . charAt ( i ) ) ) num = num + str . charAt ( i ) ; else if ( ( str . charAt ( i ) >= ' A ' && str . charAt ( i ) >= ' a ' && ( str . charAt ( i ) >= ' a ' && str . charAt ( i ) <= ' z ' ) ) ; else special += str . charAt ( i ) ; } System . out . println ( alpha ) ; } public static void main ( String [ ] args ) { String str = \" geeks01\" ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { System . out . print ( str . substring ( i ) + \" ▁ \" ) ; } } }"],"references":["class Test { static void splitString ( String str ) { StringBuffer alpha = new StringBuffer ( ) , num = new StringBuffer ( ) , special = new StringBuffer ( ) ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { if ( Character . isDigit ( str . charAt ( i ) ) ) num . append ( str . charAt ( i ) ) ; else if ( Character . isAlphabetic ( str . charAt ( i ) ) ) alpha . append ( str . charAt ( i ) ) ; else special . append ( str . charAt ( i ) ) ; } System . out . println ( alpha ) ; System . out . println ( num ) ; System . out . println ( special ) ; } public static void main ( String args [ ] ) { String str = \" geeks01 $ $ for02geeks03 ! @ ! ! \" ; splitString ( str ) ; } }"],"bleu":0.5181293662209728,"rouge_l":0.6263823064770931}
{"id":1007,"predictions":["import java . util . * ; class GFG { static int atMostK ( int arr [ ] , int n , int k ) { int count = 0 ; int left = 0 ; int right = 0 ; HashMap < Integer , Integer > map = new HashMap < Integer , Integer > ( ) ; while ( right < n ) { if ( map . containsKey ( arr [ right ] ) ) map . put ( arr [ right ] , 0 ) ; map . put ( arr [ right ] , map . get ( arr [ right ] ) + 1 ) ; while ( map . get ( arr [ left ] ) > k ) { if ( map . containsKey ( arr [ left ] ) ) map . put ( arr [ left ] , 1 ) ; map . put ( arr [ left ] , 1 ) ; if ( map . get ( arr [ left ] ) == 0 ) map . put ( arr [ left ] , map . get ( arr [ left ] ) - 1 ) ; else map . put ( arr [ left ] , map . get ( arr [ left ] ) - 1 ) ; } int count += right - left + 1 ; right ++ ; return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 1 , 2 , 1 , 6 } ; int n = arr . length ; int k = 2 ; System . out . println ( atK ( arr , n , k ) ) ; } }"],"references":["import java . util . * ; public class GfG { private static int atMostK ( int arr [ ] , int n , int k ) { int count = 0 ; int left = 0 ; int right = 0 ; HashMap < Integer , Integer > map = new HashMap < > ( ) ; while ( right < n ) { map . put ( arr [ right ] , map . getOrDefault ( arr [ right ] , 0 ) + 1 ) ; while ( map . size ( ) > k ) { map . put ( arr [ left ] , map . get ( arr [ left ] ) - 1 ) ; if ( map . get ( arr [ left ] ) == 0 ) map . remove ( arr [ left ] ) ; left ++ ; } count += right - left + 1 ; right ++ ; } return count ; } private static int exactlyK ( int arr [ ] , int n , int k ) { return ( atMostK ( arr , n , k ) - atMostK ( arr , n , k - 1 ) ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 1 , 2 , 1 , 6 } ; int n = arr . length ; int k = 2 ; System . out . print ( exactlyK ( arr , n , k ) ) ; } }"],"bleu":0.6696166450838965,"rouge_l":0.7550839964633069}
{"id":1008,"predictions":["import java . util . Scanner ; class Pattern { void display ( int n ) { int sp = n \/ 2 , st = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= sp ; j ++ ) System . out . print ( \" ▁ \" ) ; } int count = 1 ; for ( int k = 1 ; k <= st ; k ++ ) { if ( k % 2 == 0 ) System . out . print ( \" * \" ) ; else System . out . print ( \" \\n \" ) ; count ++ ; } System . out . println ( ) ; if ( i <= n \/ 2 ) { sp = sp - 1 , st = st + 2 ; } else { sp = sp + 1 , st = st - 2 ; } } } public static void main ( String [ ] args ) { int n = 5 ; display ( n ) ; } }"],"references":["import java . util . Scanner ; class Pattern { void display ( int n ) { int sp = n \/ 2 , st = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= sp ; j ++ ) { System . out . print ( \" ▁ \" ) ; } int count = 1 ; for ( int k = 1 ; k <= st ; k ++ ) { if ( k % 2 == 0 ) System . out . print ( \" * \" ) ; else System . out . print ( count ++ ) ; } System . out . println ( ) ; if ( i <= n \/ 2 ) { sp = sp - 1 ; st = st + 2 ; } else { sp = sp + 1 ; st = st - 2 ; } } } public static void main ( String [ ] args ) { int n = 5 ; Pattern p = new Pattern ( ) ; p . display ( n ) ; } }"],"bleu":0.8888464465718796,"rouge_l":0.9438192950521264}
{"id":1009,"predictions":["class GFG { static final int R = 3 ; static int C = 5 ; static int maxArea ( int mat [ ] [ ] ) { int [ ] [ ] hist = new int [ R + 1 ] [ C + 1 ] ; for ( int i = 0 ; i < R ; i ++ ) { hist [ 0 ] [ i ] = mat [ 0 ] [ i ] ; for ( int j = 1 ; j < R ; j ++ ) { hist [ 0 ] [ i ] = mat [ j - 1 ] [ i ] ; } } for ( int i = 0 ; i < R ; i ++ ) { hist [ 0 ] [ i ] = mat [ j - 1 ] [ i ] + 1 ; } } for ( int i = 0 ; i < R ; i ++ ) { int count [ ] [ ] ++ ; for ( int j = 0 ; j < C ; j ++ ) count [ hist [ i ] [ j ] ++ ; } int max_area = 0 ; for ( int i = 0 ; i < R ; i ++ ) { for ( int j = 0 ; j < C ; j ++ ) { if ( count [ j ] [ i ] > 0 ) { for ( int k = 0 ; k < count [ j ] ; k ++ ) { hist [ i ] [ j ] = j ; col_no ++ ; } } } int max_area = 0 ; for ( int i = 0 ; i < R ; i ++ ) { for ( int j = 0 ; j < C ; j ++ ) { int curr_area = ( j + 1 ) * hist [ i ] [ j ] ; if ( curr_area > max_area ) max_area = curr_area ; } } return max_area ; } public static void main ( String [ ] args ) { int mat [ ] [ ] = { 0 , 1 , 0 , 1 } , { 0 , 1 , 0 , 1 } , { 1 , 1 , 0 , 1 } } ; System . out . println ( maxArea ( mat ) ) ; } }"],"references":["class GFG { static final int R = 3 ; static final int C = 5 ; static int maxArea ( int mat [ ] [ ] ) { int hist [ ] [ ] = new int [ R + 1 ] [ C + 1 ] ; for ( int i = 0 ; i < C ; i ++ ) { hist [ 0 ] [ i ] = mat [ 0 ] [ i ] ; for ( int j = 1 ; j < R ; j ++ ) { hist [ j ] [ i ] = ( mat [ j ] [ i ] == 0 ) ? 0 : hist [ j - 1 ] [ i ] + 1 ; } } for ( int i = 0 ; i < R ; i ++ ) { int count [ ] = new int [ R + 1 ] ; for ( int j = 0 ; j < C ; j ++ ) { count [ hist [ i ] [ j ] ] ++ ; } int col_no = 0 ; for ( int j = R ; j >= 0 ; j -- ) { if ( count [ j ] > 0 ) { for ( int k = 0 ; k < count [ j ] ; k ++ ) { hist [ i ] [ col_no ] = j ; col_no ++ ; } } } } int curr_area , max_area = 0 ; for ( int i = 0 ; i < R ; i ++ ) { for ( int j = 0 ; j < C ; j ++ ) { curr_area = ( j + 1 ) * hist [ i ] [ j ] ; if ( curr_area > max_area ) { max_area = curr_area ; } } } return max_area ; } public static void main ( String [ ] args ) { int mat [ ] [ ] = { { 0 , 1 , 0 , 1 , 0 } , { 0 , 1 , 0 , 1 , 1 } , { 1 , 1 , 0 , 1 , 0 } } ; System . out . println ( \" Area ▁ of ▁ the ▁ largest ▁ rectangle ▁ is ▁ \" + maxArea ( mat ) ) ; } }"],"bleu":0.7961505731405706,"rouge_l":0.875504737536481}
{"id":1010,"predictions":["class GFG { static int lcs ( int [ ] [ ] dp , int [ ] [ ] a , int m , int n ) { for ( int i = 0 ; i < 100 ; i ++ ) { for ( int j = 0 ; j < 100 ; j ++ ) dp [ i ] [ j ] = - 1 ; } if ( m < 0 || n < 0 ) { return 0 ; } if ( dp [ m ] [ n ] != - 1 ) { return dp [ m ] [ n ] ; } int ans = 0 ; if ( a [ m ] == b [ n ] ) { ans = ( int ) ( a [ m ] - 48 ) + lcs ( dp , a , b , m - 1 , n - 1 ) ; else ans = Math . max ( lcs ( dp , a , b , m - 1 , n ) , lcs ( dp , a , b , m , n - 1 ) ) ; } return ans ; } static int costOfString ( String s ) { int cost = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) cost += ( s . charAt ( i ) - ' a ' ) ; return cost ; } static int costOfString ( String s ) { int cost = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) cost += ( s . charAt ( i ) - ' ) ; return cost ; } public static void main ( String [ ] args ) { String a = \"9142\" ; String b = \"1429\" ; System . out . print ( costOfString ( a ) + \" ▁ \" + costOfString ( b ) - 2 * lcs ( a , b , b , n - 1 ) ) ; } }"],"references":["import java . io . * ; class GFG { static int lcs ( int dp [ ] [ ] , String a , String b , int m , int n ) { for ( int i = 0 ; i < 100 ; i ++ ) for ( int j = 0 ; j < 100 ; j ++ ) dp [ i ] [ j ] = - 1 ; if ( m < 0 || n < 0 ) { return 0 ; } if ( dp [ m ] [ n ] != - 1 ) return dp [ m ] [ n ] ; int ans = 0 ; if ( a . charAt ( m ) == b . charAt ( n ) ) { ans = ( a . charAt ( m ) - 48 ) + lcs ( dp , a , b , m - 1 , n - 1 ) ; } else ans = Math . max ( lcs ( dp , a , b , m - 1 , n ) , lcs ( dp , a , b , m , n - 1 ) ) ; dp [ m ] [ n ] = ans ; return ans ; } static int costOfString ( String str ) { int cost = 0 ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) cost += ( str . charAt ( i ) - 48 ) ; return cost ; } public static void main ( String [ ] args ) { String a , b ; a = \"9142\" ; b = \"1429\" ; int dp [ ] [ ] = new int [ 101 ] [ 101 ] ; System . out . print ( ( costOfString ( a ) + costOfString ( b ) - 2 * lcs ( dp , a , b , a . length ( ) - 1 , b . length ( ) - 1 ) ) ) ; } }"],"bleu":0.7163933093809585,"rouge_l":0.7836835026204723}
{"id":1011,"predictions":["import java . util . * ; class GFG { static int maxUniqueNum ( int a [ ] , int N , int M ) { int maxUnique = 0 ; for ( int i = 0 ; i < N - M ; i ++ ) { Set < Integer > s = new HashSet < > ( ) ; for ( int j = 0 ; j < M ; j ++ ) { s . add ( a [ i + j ) ; } if ( s . size ( ) > maxUnique ) { maxUnique = s . size ( ) ; } } return maxUnique ; } public static void main ( String [ ] args ) { int arr [ ] = { 5 , 3 , 5 , 2 , 3 , 2 } ; int M = 3 ; int N = arr . length ; System . out . println ( maxUniqueNum ( arr , N , M ) ) ; } }"],"references":["import java . util . * ; class GFG { public static int maxUniqueNum ( int arr [ ] , int N , int M ) { int maxUnique = 0 ; for ( int i = 0 ; i < N - M ; i ++ ) { int currentUnique = 0 ; HashMap < Integer , Integer > map = new HashMap < Integer , Integer > ( ) ; for ( int k = i ; k < i + M ; k ++ ) { if ( ! map . containsKey ( arr [ k ] ) ) { map . put ( arr [ i ] , 1 ) ; currentUnique ++ ; continue ; } } if ( currentUnique > maxUnique ) maxUnique = currentUnique ; } return maxUnique ; } public static void main ( String [ ] args ) { int [ ] arr = { 5 , 3 , 5 , 2 , 3 , 2 } ; int N = 6 ; int M = 3 ; System . out . println ( maxUniqueNum ( arr , N , M ) ) ; } }"],"bleu":0.6037339868206744,"rouge_l":0.7581313353900397}
{"id":1012,"predictions":["import java . util . * ; class GFG { static String complement ( String s ) { String comps = \" \" ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == '0' ) comps += '1' ; else comps += '0' ; } return comps ; } static String nthTerm ( int n ) { String s = \"0\" ; for ( int i = 1 ; i < n ; ++ i ) s += complement ( s ) ; return s ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( nthTerm ( n ) ) ; } }"],"references":["class GFG { static String complement ( String s ) { String comps = \" \" ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == '0' ) comps += '1' ; else comps += '0' ; } return comps ; } static String nthTerm ( int n ) { String s = \"0\" ; for ( int i = 1 ; i < n ; i ++ ) s += complement ( s ) ; return s ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . print ( nthTerm ( n ) ) ; } }"],"bleu":0.9072880330872036,"rouge_l":0.963078070611636}
{"id":1013,"predictions":["class GFG { static int evenFibSum ( int limit ) { if ( limit < 2 ) return 0 ; int ef1 = 0 , ef2 = 2 ; int sum = ef1 + ef2 ; while ( ef2 <= limit ) { ef3 = 4 * ef2 + ef1 ; if ( ef3 > limit ) break ; ef1 = ef2 ; ef2 = ef3 ; sum += ef2 ; } return sum ; } public static void main ( String [ ] args ) { int limit = 400 ; System . out . print ( evenFibSum ( limit ) ) ; } }"],"references":["import java . io . * ; class GFG { static int evenFibSum ( int limit ) { if ( limit < 2 ) return 0 ; long ef1 = 0 , ef2 = 2 ; long sum = ef1 + ef2 ; while ( ef2 <= limit ) { long ef3 = 4 * ef2 + ef1 ; if ( ef3 > limit ) break ; ef1 = ef2 ; ef2 = ef3 ; sum += ef2 ; } return ( int ) sum ; } public static void main ( String [ ] args ) { int limit = 400 ; System . out . println ( evenFibSum ( limit ) ) ; } }"],"bleu":0.8116691652177946,"rouge_l":0.9156222675604782}
{"id":1014,"predictions":["import java . io . * ; class GFG { static int factorial ( int N ) { int fact = 1 ; for ( int i = 1 ; i <= N ; i ++ ) fact = fact * i ; return fact ; } static int nthTerm ( int N ) { return ( factorial ( N ) * ( N + 2 ) \/ 2 ) ; } public static void main ( String [ ] args ) { int N = 6 ; System . out . println ( nthTerm ( N ) ) ; } }"],"references":["import java . util . * ; import java . lang . * ; import java . io . * ; class GFG { static int factorial ( int N ) { int fact = 1 ; for ( int i = 1 ; i <= N ; i ++ ) fact = fact * i ; return fact ; } static int nthTerm ( int N ) { return ( factorial ( N ) * ( N + 2 ) \/ 2 ) ; } public static void main ( String args [ ] ) { int N = 6 ; System . out . println ( nthTerm ( N ) ) ; } }"],"bleu":0.8412384943042129,"rouge_l":0.9159976211715731}
{"id":1015,"predictions":["import java . io . * ; class GFG { static double answer ( int X , int K ) { double MAX = Math . pow ( 10 , K ) - 1 ; return ( MAX - ( MAX % X ) ) ; } public static void main ( String [ ] args ) { int X = 30 ; int K = 3 ; System . out . println ( int ) answer ( X , K ) ) ; } }"],"references":["import java . io . * ; import java . lang . * ; class GFG { public static double answer ( double X , double K ) { double i = 10 ; double MAX = Math . pow ( i , K ) - 1 ; return ( MAX - ( MAX % X ) ) ; } public static void main ( String [ ] args ) { double X = 30 ; double K = 3 ; System . out . println ( ( int ) answer ( X , K ) ) ; } }"],"bleu":0.6944640050181856,"rouge_l":0.859304347826087}
{"id":1016,"predictions":["class GFG { static int maxLength ( int a [ ] , int n ) { int maximum = 1 ; int [ ] left = new int [ n ] ; int right [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { left [ i ] = 1 ; right [ i ] = 1 ; } for ( int i = n - 2 ; i >= 0 ; i -- ) { if ( a [ i ] > a [ i + 1 ] ) right [ i ] = right [ i + 1 ] + 1 ; maximum = Math . max ( maximum , right [ i ] ) ; } for ( int i = 1 ; i < n ; i ++ ) { if ( a [ i ] < a [ i - 1 ] ) left [ i ] = left [ i - 1 ] + 1 ; } if ( n > 2 ) { for ( int i = 1 ; i < n - 1 ; i ++ ) { if ( a [ i - 1 ] > a [ i + 1 ] ) maximum = Math . max ( maximum , left [ i - 1 ] + right [ i + 1 ] ) ; } } return maximum ; } public static void main ( String [ ] args ) { int arr [ ] = { 8 , 7 , 3 , 5 , 2 , 9 } ; int n = arr . length ; System . out . println ( maxLength ( arr , n ) ) ; } }"],"references":["class GFG { static int maxLength ( int [ ] a , int n ) { int maximum = 1 ; int left [ ] = new int [ n ] ; int right [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { left [ i ] = 1 ; right [ i ] = 1 ; } for ( int i = n - 2 ; i >= 0 ; i -- ) { if ( a [ i ] > a [ i + 1 ] ) { right [ i ] = right [ i + 1 ] + 1 ; } maximum = Math . max ( maximum , right [ i ] ) ; } for ( int i = 1 ; i < n ; i ++ ) { if ( a [ i ] < a [ i - 1 ] ) { left [ i ] = left [ i - 1 ] + 1 ; } } if ( n > 2 ) { for ( int i = 1 ; i < n - 1 ; i ++ ) { if ( a [ i - 1 ] > a [ i + 1 ] ) { maximum = Math . max ( maximum , left [ i - 1 ] + right [ i + 1 ] ) ; } } } return maximum ; } public static void main ( String [ ] args ) { int arr [ ] = { 8 , 7 , 3 , 5 , 2 , 9 } ; int n = arr . length ; System . out . println ( maxLength ( arr , n ) ) ; } }"],"bleu":0.9350913368257866,"rouge_l":0.9816851801679762}
{"id":1017,"predictions":["import java . io . * ; class GFG { public static void main ( String [ ] args ) { int n = 3 ; int a [ ] = { 1 , 2 , 3 } ; int i = 0 , sum = 0 ; for ( i = 0 ; i < n ; i ++ ) sum += a [ i ] ; int x = sum \/ n ; if ( x * n == sum ) System . out . println ( x ) ; else System . out . println ( \" - 1\" ) ; } }"],"references":["public class GFG { public static void main ( String args [ ] ) { int n = 3 ; int a [ ] = { 1 , 2 , 3 } ; int i = 0 ; long sum = 0 ; for ( i = 0 ; i < n ; i ++ ) { sum += a [ i ] ; } long x = sum \/ n ; if ( x * n == sum ) System . out . println ( x ) ; else System . out . println ( \" - 1\" ) ; } }"],"bleu":0.8386259649097139,"rouge_l":0.9210443535703053}
{"id":1018,"predictions":["import java . util . * ; class GFG { static int getPerfectSquares ( int n ) { Vector < Integer > perfectSquares = new Vector < > ( ) ; int current = 1 ; int i = 1 ; while ( current <= n ) { perfectSquares . add ( current ) ; i += 1 ; current = ( int ) Math . pow ( i , 2 ) ; } return perfectSquares ; } static int countTriplets ( int n ) { int [ ] perfectSquares = getPerfectSquares ( n * 2 ) ; int count = 0 ; for ( int a = 1 ; a < n ; a ++ ) { int aSquare = a * a ; for ( int i = 0 ; i < perfectSquares . size ( ) ; i ++ ) { int bSquare = perfectSquares [ i ] ; for ( int i = 0 ; i < perfectSquares . size ( ) ; i ++ ) { int cSquare = perfectSquares [ i ] ; int bSquare = Math . sqrt ( cSquare - aSquare ) ; b = ( int ) Math . sqrt ( bSquare ) ; int c = ( int ) Math . sqrt ( bSquare ) ; c = ( int ) Math . sqrt ( cSquare ) ; c = ( int ) Math . sqrt ( cSquare ) ; int c = ( int ) Math . sqrt ( bSquare ) ; int c = ( int ) Math . sqrt ( cSquare ) ; if ( c < a || ( bSquare + bSquare ) ) { count ++ ; } } } return count ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( countTriplets ( n ) ) ; } }"],"references":["import java . util . * ; public class GFG { public static ArrayList < Integer > getPerfectSquares ( int n ) { ArrayList < Integer > perfectSquares = new ArrayList < > ( ) ; int current = 1 , i = 1 ; while ( current <= n ) { perfectSquares . add ( current ) ; current = ( int ) Math . pow ( ++ i , 2 ) ; } return perfectSquares ; } public static int countTriplets ( int n ) { ArrayList < Integer > perfectSquares = getPerfectSquares ( ( int ) Math . pow ( n , 2 ) ) ; int count = 0 ; for ( int a = 1 ; a <= n ; a ++ ) { int aSquare = ( int ) Math . pow ( a , 2 ) ; for ( int i = 0 ; i < perfectSquares . size ( ) ; i ++ ) { int cSquare = perfectSquares . get ( i ) ; int bSquare = cSquare - aSquare ; int b = ( int ) Math . sqrt ( bSquare ) ; int c = ( int ) Math . sqrt ( cSquare ) ; if ( c < a || ! perfectSquares . contains ( bSquare ) ) continue ; if ( ( b >= a ) && ( b <= c ) && ( aSquare + bSquare == cSquare ) ) count ++ ; } } return count ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( countTriplets ( n ) ) ; } }"],"bleu":0.6251416499232837,"rouge_l":0.759015581126466}
{"id":1019,"predictions":["import java . io . * ; class GFG { static int centered_octagonal_Num ( int n ) { return ( 5 * n * n - 5 * n + 2 ) \/ 2 ; } public static void main ( String [ ] args ) { int n = 7 ; System . out . print ( centered_octagonal_num ( n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int centered_pentagonal_Num ( int n ) { return ( 5 * n * n - 5 * n + 2 ) \/ 2 ; } public static void main ( String [ ] args ) { int n = 7 ; System . out . print ( n + \" th ▁ Centered ▁ \" + \" pentagonal ▁ number : ▁ \" ) ; System . out . println ( centered_pentagonal_Num ( n ) ) ; } }"],"bleu":0.6411844596403928,"rouge_l":0.7983640081799593}
{"id":1020,"predictions":["import java . util . * ; class GFG { static void PossibleValues ( int b , int x , int n ) { int leastdivisible = b \/ x + 1 ; int flag = 1 ; while ( leastdivisible <= n ) { if ( leastdivisible - b >= 1 ) { System . out . print ( leastdivisible - b + \" ▁ \" ) ; leastdivisible += x ; flag = 0 ; } else { break ; } } if ( flag != 0 ) System . out . print ( - 1 ) ; } public static void main ( String [ ] args ) { int b = 10 , x = 6 , n = 40 ; PossibleValues ( b , x , n ) ; } }"],"references":["import java . io . * ; class GFG { static void PossibleValues ( int b , int x , int n ) { int leastdivisible = ( b \/ x + 1 ) * x ; int flag = 1 ; while ( leastdivisible <= n ) { if ( leastdivisible - b >= 1 ) { System . out . print ( leastdivisible - b + \" ▁ \" ) ; leastdivisible += x ; flag = 0 ; } else break ; } if ( flag > 0 ) System . out . println ( - 1 ) ; } public static void main ( String [ ] args ) { int b = 10 , x = 6 , n = 40 ; PossibleValues ( b , x , n ) ; } }"],"bleu":0.8759168517779703,"rouge_l":0.9549474187380496}
{"id":1021,"predictions":["class GFG { static int findLongestSubSeq ( String str ) { int n = str . length ( ) ; int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { if ( str . charAt ( i - 1 ) == str . charAt ( j - 1 ) && i != j ) dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ] ; else dp [ i ] [ j ] = Math . max ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] ) ; } } return dp [ n ] [ n ] ; } public static void main ( String [ ] args ) { String str = \" findLongestRepeatingSubSeq ( str ) ; System . out . println ( findLongestRepeatingSubSeq ( str ) ) ; } }"],"references":["static int findLongestRepeatingSubSeq ( String str ) { int n = str . length ( ) ; int dp [ ] [ ] = new int [ n + 1 ] [ n + 1 ] ; for ( int i = 0 ; i <= n ; i ++ ) for ( int j = 0 ; j <= n ; j ++ ) dp [ i ] [ j ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { if ( str . charAt ( i - 1 ) == str . charAt ( j - 1 ) && i != j ) dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ] ; else dp [ i ] [ j ] = Math . max ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] ) ; } } return dp [ n ] [ n ] ; }"],"bleu":0.7889533076518525,"rouge_l":0.7986157438292194}
{"id":1022,"predictions":["import java . io . * ; class GFG { static int countIntegralSolutions ( int n ) { return ( ( n + 1 ) * ( n + 2 ) \/ 2 ) ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( countIntegralSolutions ( n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int countIntegralSolutions ( int n ) { return ( ( n + 1 ) * ( n + 2 ) ) \/ 2 ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( countIntegralSolutions ( n ) ) ; } }"],"bleu":0.9529610145464993,"rouge_l":0.9848484848484846}
{"id":1023,"predictions":["class GFG { static String check ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( ( arr [ i ] & 1 ) > 0 ) count ++ ; } if ( ( count & 1 ) == 1 ) return \" Odd \" ; else return \" Even \" ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 9 , 12 , 13 , 15 } ; int n = arr . length ; System . out . println ( check ( arr , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static String check ( int [ ] arr , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( ( arr [ i ] & 1 ) != 0 ) count ++ ; } if ( ( count & 1 ) != 0 ) return \" Odd \" ; else return \" Even \" ; } public static void main ( String args [ ] ) { int [ ] arr = { 3 , 9 , 12 , 13 , 15 } ; int n = arr . length ; System . out . println ( check ( arr , n ) ) ; } }"],"bleu":0.8181034129042296,"rouge_l":0.9221466364323506}
{"id":1024,"predictions":["class GFG { static int [ ] dfs ( int [ ] [ ] graph , int [ ] [ ] dist , int c ) { if ( vis [ node ] == 0 ) return ; vis [ node ] = c ; for ( int i = 0 ; i < graph . length ; i ++ ) { if ( ! vis [ node ] [ i ] ) return dfs ( graph , graph [ node ] [ i ] , c + 1 ) ; } } static int countOfNodes ( int [ ] [ ] graph , int n ) { boolean [ ] [ ] vis = new boolean [ n + 1 ] [ n + 1 ] ; int dist [ ] = new int [ n + 1 ] ; Arrays . fill ( vis , false ) ; dfs ( graph , 1 , dist , vis , 0 ) ; int even = 0 , odd = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { if ( dist [ i ] % 2 == 0 ) even ++ ; else odd ++ ; } int ans = ( ( even * ( even - 1 ) ) + ( odd * ( odd - 1 ) ) ) \/ 2 ; return ans ; } public static void main ( String [ ] args ) { int n = 5 ; int [ ] [ ] graph = { { 1 , 2 } , { 1 , 3 } } ; int ans = countOfNodes ( graph , n ) ; System . out . println ( ans ) ; } }"],"references":["import java . util . * ; class GFG { static void dfs ( Vector < Integer > graph [ ] , int node , int dist [ ] , boolean vis [ ] , int c ) { if ( vis [ node ] ) { return ; } vis [ node ] = true ; dist [ node ] = c ; for ( int i = 0 ; i < graph [ node ] . size ( ) ; i ++ ) { if ( ! vis [ graph [ node ] . get ( i ) ] ) { dfs ( graph , graph [ node ] . get ( i ) , dist , vis , c + 1 ) ; } } } static int countOfNodes ( Vector < Integer > graph [ ] , int n ) { boolean [ ] vis = new boolean [ n + 1 ] ; int [ ] dist = new int [ n + 1 ] ; dfs ( graph , 1 , dist , vis , 0 ) ; int even = 0 , odd = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( dist [ i ] % 2 == 0 ) { even ++ ; } else { odd ++ ; } } int ans = ( ( even * ( even - 1 ) ) + ( odd * ( odd - 1 ) ) ) \/ 2 ; return ans ; } public static void main ( String [ ] args ) { int n = 5 ; Vector < Integer > [ ] graph = new Vector [ n + 1 ] ; for ( int i = 0 ; i < n + 1 ; i ++ ) { graph [ i ] = new Vector < Integer > ( ) ; } graph [ 0 ] = new Vector < Integer > ( ) ; graph [ 1 ] = new Vector ( Arrays . asList ( 2 ) ) ; graph [ 2 ] = new Vector < Integer > ( 1 , 3 ) ; graph [ 3 ] = new Vector < Integer > ( 2 ) ; int ans = countOfNodes ( graph , n ) ; System . out . println ( ans ) ; } }"],"bleu":0.5183309694321913,"rouge_l":0.6918241858346618}
{"id":1025,"predictions":["class GFG { static int flipsPossible ( int a [ ] , int n ) { int count_odd = 0 , count_even = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( ( a [ i ] & 1 ) == 1 ) { count_odd ++ ; } else count_even ++ ; } if ( count_odd % 2 == 0 && count_even % 2 == 1 ) return false ; else return true ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 0 , 1 , 1 , 0 , 1 } ; int n = a . length ; if ( flipsPossible ( a , n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["public class GFG { static boolean flipsPossible ( int [ ] a , int n ) { int count_odd = 0 , count_even = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( ( a [ i ] & 1 ) == 1 ) count_odd ++ ; else count_even ++ ; } if ( count_odd % 2 == 1 && count_even % 2 == 1 ) return false ; else return true ; } public static void main ( String [ ] args ) { int [ ] a = { 1 , 0 , 1 , 1 , 0 , 1 } ; int n = a . length ; if ( flipsPossible ( a , n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.8883443057474057,"rouge_l":0.9651898734177216}
{"id":1026,"predictions":["import java . io . * ; class GFG { static void findSeries ( int num , int first , int sec ) { System . out . print ( first + \" ▁ \" + first + \" ▁ \" ) ; int counter = 0 ; while ( counter < num - 2 ) { int sum = first + sec ; System . out . print ( sum + \" ▁ \" ) ; first = sec ; sec = sum ; counter ++ ; } } public static void main ( String [ ] args ) { int n = 5 , first = 2 ; int sec = 4 ; findSeries ( n , first , sec ) ; } }"],"references":["import java . io . * ; class GFG { static void findSeries ( int num , int first , int sec ) { System . out . print ( first + \" ▁ \" + sec + \" ▁ \" ) ; int counter = 0 , sum ; while ( counter < num - 2 ) { sum = first + sec ; System . out . print ( sum + \" ▁ \" ) ; first = sec ; sec = sum ; counter ++ ; } } public static void main ( String [ ] args ) { int n = 5 , first = 2 , sec = 4 ; findSeries ( n , first , sec ) ; } }"],"bleu":0.9192758231432033,"rouge_l":0.9682539682539683}
{"id":1027,"predictions":["class GFG { static int countOdd ( int n ) { int coun = 0 ; int i = n - 2 ; while ( i >= 1 ) { if ( ( i & 1 ) == 0 ) { int m = ( n - i ) \/ 2 ; int j = ( i * ( i + 1 ) ) \/ 2 ; coun += j * m ; } else { int m = ( ( n - 1 ) - i ) \/ 2 ; int j = ( i * ( i + 1 ) ) \/ 2 ; coun += j * m ; } } return coun ; } static int countEven ( int n ) { int coun = 0 ; int i = n - 2 ; while ( i >= 1 ) { if ( i & 1 ) == 0 ) { int m = ( n - 1 ) \/ 2 ; j = ( i * ( i + 1 ) ) \/ 2 ; coun += j * m ; } else { int m = ( n - i ) \/ 2 ; j = ( i * ( i + 1 ) ) \/ 2 ; coun += j * m ; } } return coun ; } public static void main ( String [ ] args ) { int n = 5 ; if ( n == 1 ) System . out . println ( countOdd ( n ) ) ; else System . out . println ( countEven ( n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int countOdd ( int n ) { int coun = 0 , m , j , i ; for ( i = n - 2 ; i >= 1 ; i -- ) { if ( i >= 1 ) { m = ( n - i ) \/ 2 ; j = ( i * ( i + 1 ) ) \/ 2 ; coun += j * m ; } else { m = ( ( n - 1 ) - i ) \/ 2 ; j = ( i * ( i + 1 ) ) \/ 2 ; coun += j * m ; } } return coun ; } static int countEven ( int n ) { int coun = 0 , m , j , i ; for ( i = n - 2 ; i >= 1 ; i -- ) { if ( i >= 1 ) { m = ( ( n - 1 ) - i ) \/ 2 ; j = ( i * ( i + 1 ) ) \/ 2 ; coun += j * m ; } else { m = ( n - i ) \/ 2 ; j = ( i * ( i + 1 ) ) \/ 2 ; coun += j * m ; } } return coun ; } public static void main ( String [ ] args ) { int n = 5 ; if ( n >= 1 ) System . out . println ( countOdd ( n ) ) ; else System . out . println ( countEven ( n ) ) ; } }"],"bleu":0.7959625812114995,"rouge_l":0.8931651137218589}
{"id":1028,"predictions":["class GFG { static int mod = ( int ) 1e9 + 7 ; static int factorial ( int n , int p ) { int res = 1 ; for ( int i = 2 ; i <= n ; i ++ ) res = ( res * i ) % p ; return res ; } static int power ( int x , int y , int p ) { int res = 1 ; x = x % p ; while ( y > 0 ) { if ( ( y & 1 ) % p ) res = ( res * x ) % p ; y = y >> 1 ; x = ( x * x ) % p ; } return res ; } static int modInverse ( int n , int p ) { return power ( n , p - 2 , p ) ; } static int nCrModP ( int n , int r , int p ) { if ( r == 0 ) return 1 ; int [ ] fac = new int [ n + 1 ] ; fac [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) fac [ i ] = fac [ i - 1 ] * i % p ; return ( fac [ n ] * modInverse ( fac [ r ] , p ) % p * modInverse ( fac [ ( int ) n - r ] , p ) % p * modInverse ( fac [ ( int ) n - r ] , p ) % p * p ) % p ; } static int countArrangement ( int n , int k , int p ) { return ( factorial ( n , p ) * nCrModP ( fac [ r ] , p ) ) % p ; } public static void main ( String [ ] args ) { int N = 5 , K = 8 ; System . out . println ( countArrangement ( N , K , mod ) ) % p ; } }"],"references":["class GFG { static long mod = ( long ) ( 1e9 + 7 ) ; static long factorial ( long n , long p ) { long res = 1 ; for ( int i = 2 ; i <= n ; i ++ ) res = ( res * i ) % p ; return res ; } static long power ( long x , long y , long p ) { long res = 1 ; x = x % p ; while ( y > 0 ) { if ( ( y & 1 ) == 1 ) res = ( res * x ) % p ; y = y >> 1 ; x = ( x * x ) % p ; } return res ; } static long modInverse ( long n , long p ) { return power ( n , p - 2 , p ) ; } static long nCrModP ( long n , long r , long p ) { if ( r == 0 ) return 1 ; long fac [ ] = new long [ ( int ) n + 1 ] ; fac [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) fac [ i ] = fac [ i - 1 ] * i % p ; return ( fac [ ( int ) n ] * modInverse ( fac [ ( int ) r ] , p ) % p * modInverse ( fac [ ( int ) n - ( int ) r ] , p ) % p ) % p ; } static long countArrangements ( long n , long k , long p ) { return ( factorial ( n , p ) * nCrModP ( k , n , p ) ) % p ; } public static void main ( String [ ] args ) { long N = 5 , K = 8 ; System . out . println ( countArrangements ( N , K , mod ) ) ; } }"],"bleu":0.7288024880649798,"rouge_l":0.8684066435480926}
{"id":1029,"predictions":["class GFG { void subString ( String str , int n ) { for ( int len = 1 ; len <= n ; len ++ ) { for ( int i = 0 ; i <= n - len ; i ++ ) { int j = i + len - 1 ; for ( int k = i ; k <= j ; k ++ ) System . out . print ( str . charAt ( k ) ) ; System . out . println ( \" \" ) ; } } } public static void main ( String [ ] args ) { String str = \" abc \" ; SubString ( str , str . length ( ) ) ; } }"],"references":["class GFG { static void subString ( char str [ ] , int n ) { for ( int len = 1 ; len <= n ; len ++ ) { for ( int i = 0 ; i <= n - len ; i ++ ) { int j = i + len - 1 ; for ( int k = i ; k <= j ; k ++ ) { System . out . print ( str [ k ] ) ; } System . out . println ( ) ; } } } public static void main ( String [ ] args ) { char str [ ] = { ' a ' , ' b ' , ' c ' } ; subString ( str , str . length ) ; } }"],"bleu":0.6978187148438139,"rouge_l":0.8453353130413264}
{"id":1030,"predictions":["import java . io . * ; class GFG { static int sumofseries ( int n ) { int res = 0 ; for ( int i = 1 ; i <= n ; i ++ ) res += ( i ) * ( i + 1 ) * ( i + 2 ) ; return res ; } public static void main ( String [ ] args ) { System . out . println ( sumofseries ( 3 ) ) ; } }"],"references":["import java . io . * ; import java . math . * ; class GFG { static int sumofseries ( int n ) { int res = 0 ; for ( int i = 1 ; i <= n ; i ++ ) res += ( i ) * ( i + 1 ) * ( i + 2 ) ; return res ; } public static void main ( String [ ] args ) { System . out . println ( sumofseries ( 3 ) ) ; } }"],"bleu":0.9200444146293233,"rouge_l":0.9531250000000002}
{"id":1031,"predictions":["class GFG { static void countWaysToJump ( int arr [ ] , int n ) { int count_prev [ ] = new int [ n ] ; for ( int i = n - 2 ; i >= 0 ; i -- ) { if ( arr [ i ] >= n - i - 1 ) count_prev [ i ] ++ ; int j = i + 1 ; while ( j < n - 1 && j <= arr [ i ] + i ) { if ( count_prev [ j ] != - 1 ) count_prev [ i ] += count_umps [ j ] ; j ++ ; } if ( count_prev [ i ] == 0 ) count_prev [ i ] = - 1 ; } for ( int i = 0 ; i < n ; i ++ ) System . out . print ( count_prev [ i ] + \" ▁ \" ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 3 , 5 , 8 , 9 , 1 , 0 , 7 } ; int n = arr . length ; countWaysToJump ( arr , n ) ; } }"],"references":["import java . util . Arrays ; class GFG { static void countWaysToJump ( int arr [ ] , int n ) { int count_jump [ ] = new int [ n ] ; Arrays . fill ( count_jump , 0 ) ; for ( int i = n - 2 ; i >= 0 ; i -- ) { if ( arr [ i ] >= n - i - 1 ) count_jump [ i ] ++ ; for ( int j = i + 1 ; j < n - 1 && j <= arr [ i ] + i ; j ++ ) if ( count_jump [ j ] != - 1 ) count_jump [ i ] += count_jump [ j ] ; if ( count_jump [ i ] == 0 ) count_jump [ i ] = - 1 ; } for ( int i = 0 ; i < n ; i ++ ) System . out . print ( count_jump [ i ] + \" ▁ \" ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 3 , 5 , 8 , 9 , 1 , 0 , 7 , 6 , 8 , 9 } ; int n = arr . length ; countWaysToJump ( arr , n ) ; } }"],"bleu":0.7599755891978066,"rouge_l":0.8796998013391215}
{"id":1032,"predictions":["class GFG { static double calculateSum ( double n ) { double a = ( double ) n ; return ( 2 * ( Math . pow ( n , 6 ) + 15 * Math . pow ( n , 4 ) + 15 * Math . pow ( n , 2 ) + 1 ) ; } public static void main ( String [ ] args ) { double n = 1.4142 ; System . out . println ( calculateSum ( n ) ) ; } }"],"references":["import java . util . * ; class gfg { public static double calculateSum ( double n ) { return 2 * ( Math . pow ( n , 6 ) + 15 * Math . pow ( n , 4 ) + 15 * Math . pow ( n , 2 ) + 1 ) ; } public static void main ( String [ ] args ) { double n = 1.4142 ; System . out . println ( ( int ) Math . ceil ( calculateSum ( n ) ) ) ; } }"],"bleu":0.7784467081733766,"rouge_l":0.848266150325647}
{"id":1033,"predictions":["import java . util . * ; class GFG { static boolean isMajority ( int a [ ] ) { Map < Integer , Integer > mp = new HashMap < > ( ) ; for ( int i = 0 ; i < a . length ; i ++ ) { mp . put ( a [ i ] , mp . containsKey ( a [ i ] ) ) { mp . put ( a [ i ] , mp . get ( a [ i ] ) + 1 ) ; } else { mp . put ( a [ i ] , 1 ) ; } } for ( Map . Entry < Integer , Integer > a : mp . entrySet ( ) ) { if ( mp . containsKey ( a [ i ] ) ) return true ; } return false ; } public static void main ( String [ ] args ) { int a [ ] = { 2 , 3 , 9 , 2 , 2 , 2 } ; int n = a . length ; if ( isMajority ( a , n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; import java . lang . * ; import java . io . * ; class Gfg { static boolean isMajority ( int a [ ] , int n ) { HashMap < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) if ( mp . containsKey ( a [ i ] ) ) mp . put ( a [ i ] , mp . get ( a [ i ] ) + 1 ) ; else mp . put ( a [ i ] , 1 ) ; for ( Map . Entry < Integer , Integer > x : mp . entrySet ( ) ) if ( x . getValue ( ) >= n \/ 2 ) return true ; return false ; } public static void main ( String [ ] args ) { int a [ ] = { 2 , 3 , 9 , 2 , 2 } ; int n = a . length ; if ( isMajority ( a , n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.7656159288363654,"rouge_l":0.8619516164829475}
{"id":1034,"predictions":["import java . util . * ; class GFG { static int returnMaxSum ( int [ ] A , int [ ] B , int n ) { HashSet < Integer > mp = new HashSet < Integer > ( ) ; int result = 0 , curr_sum = 0 ; for ( int i = 0 ; i < n ; ++ i ) { while ( mp . containsKey ( A [ i ] ) ) { mp . remove ( A [ i ] ) ; curr_sum -= B [ curr_sum ] ; curr_sum += B [ i ] ; curr_sum += B [ i ] ; } mp . add ( result , curr_sum ) ; } return result ; } public static void main ( String [ ] args ) { int A [ ] = { 0 , 1 , 2 , 3 , 0 , 1 , 4 } ; int B [ ] = { 9 , 8 , 1 , 2 , 3 , 4 } ; int n = A . length ; System . out . print ( return maxMaxSum ( A , B , n ) ) ; } }"],"references":["import java . util . HashSet ; import java . util . Set ; public class MaxPossibleSuminWindow { static int returnMaxSum ( int A [ ] , int B [ ] , int n ) { Set < Integer > mp = new HashSet < Integer > ( ) ; int result = 0 ; int curr_sum = 0 , curr_begin = 0 ; for ( int i = 0 ; i < n ; ++ i ) { while ( mp . contains ( A [ i ] ) ) { mp . remove ( A [ curr_begin ] ) ; curr_sum -= B [ curr_begin ] ; curr_begin ++ ; } mp . add ( A [ i ] ) ; curr_sum += B [ i ] ; result = Integer . max ( result , curr_sum ) ; } return result ; } public static void main ( String [ ] args ) { int A [ ] = { 0 , 1 , 2 , 3 , 0 , 1 , 4 } ; int B [ ] = { 9 , 8 , 1 , 2 , 3 , 4 , 5 } ; int n = A . length ; System . out . println ( returnMaxSum ( A , B , n ) ) ; } }"],"bleu":0.7332546296529089,"rouge_l":0.8558792130547507}
{"id":1035,"predictions":["import java . util . * ; class GFG { static class Node { int data ; Node left , right ; } ; static Node getNode ( int data ) { Node newNode = new Node ( ) ; newNode . data = data ; newNode . left = null ; newNode . right = null ; return newNode ; } static boolean hasPath ( Node root , int arr [ ] , int x ) { if ( root == null ) return false ; if ( root . data == x ) return true ; if ( hasPath ( root . left , arr , x ) || hasPath ( root . right , arr , x ) ) return true ; arr . remove ( - 1 ) ; return false ; } static void printPath ( Node root , int x ) { ArrayList < Integer > arr = new ArrayList < > ( ) ; if ( hasPath ( root , arr , x ) ) { for ( int i = 0 ; i < arr . size ( ) - 1 ; i ++ ) System . out . print ( arr . get ( i ) + \" - > \" ) ; System . out . println ( arr . get ( arr . size ( ) ) ) ; } else System . out . println ( \" No ▁ Path \" ) ; } public static void main ( String args [ ] ) { Node root = newNode ( 1 ) ; root . left = getNode ( 2 ) ; root . left . right = getNode ( 3 ) ; root . left . left . left = getNode ( 4 ) ; root . left . right = getNode ( 5 ) ; root . right . right = getNode ( 7 ) ; x = 5 ; printPath ( root , x ) ; } }"],"references":["import java . util . ArrayList ; public class PrintPath { public static boolean hasPath ( Node root , ArrayList < Integer > arr , int x ) { if ( root == null ) return false ; arr . add ( root . data ) ; if ( root . data == x ) return true ; if ( hasPath ( root . left , arr , x ) || hasPath ( root . right , arr , x ) ) return true ; arr . remove ( arr . size ( ) - 1 ) ; return false ; } public static void printPath ( Node root , int x ) { ArrayList < Integer > arr = new ArrayList < > ( ) ; if ( hasPath ( root , arr , x ) ) { for ( int i = 0 ; i < arr . size ( ) - 1 ; i ++ ) System . out . print ( arr . get ( i ) + \" - > \" ) ; System . out . print ( arr . get ( arr . size ( ) - 1 ) ) ; } else System . out . print ( \" No ▁ Path \" ) ; } public static void main ( String args [ ] ) { Node root = new Node ( 1 ) ; root . left = new Node ( 2 ) ; root . right = new Node ( 3 ) ; root . left . left = new Node ( 4 ) ; root . left . right = new Node ( 5 ) ; root . right . left = new Node ( 6 ) ; root . right . right = new Node ( 7 ) ; int x = 5 ; printPath ( root , x ) ; } } class Node { int data ; Node left , right ; Node ( int data ) { this . data = data ; left = right = null ; } } ;"],"bleu":0.7580280968010785,"rouge_l":0.7722629837433462}
{"id":1036,"predictions":["import java . util . * ; class GFG { static void SieveOfEratosthenes ( boolean prime [ ] , int p_size ) { prime [ 0 ] = false ; prime [ 1 ] = false ; for ( int p = 2 ; p * p <= p_size ; p ++ ) { if ( prime [ p ] ) { for ( int i = p * 2 ; i <= p_size ; i += p ) prime [ i ] = false ; } } return prime ; } static int xorPrimeFreq ( int arr [ ] , int n ) { boolean [ ] prime = new boolean [ n + 1 ] ; Arrays . fill ( prime , true ) ; prime [ 0 ] = SieveOfEratosthenes ( prime , n + 1 ) ; HashMap < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { mp . put ( arr [ i ] , mp . get ( arr [ i ] ) == null ? 1 : mp . get ( arr [ i ] ) + 1 ) ; } int xorVal = 0 ; for ( Map . Entry < Integer , Integer > it : mp . entrySet ( ) ) { if ( prime [ it . getValue ( ) ] ) { xorVal ^= it . getValue ( ) ; } } return xorVal ; } public static void main ( String [ ] args ) { int arr [ ] = { 5 , 4 , 6 , 5 , 4 , 6 } ; int n = arr . length ; System . out . print ( xorPrimeFreq ( arr , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static void SieveOfEratosthenes ( boolean prime [ ] , int p_size ) { prime [ 0 ] = false ; prime [ 1 ] = false ; for ( int p = 2 ; p * p <= p_size ; p ++ ) { if ( prime [ p ] ) { for ( int i = p * 2 ; i <= p_size ; i += p ) prime [ i ] = false ; } } } static int xorOfElements ( int arr [ ] , int n ) { boolean prime [ ] = new boolean [ n + 1 ] ; Arrays . fill ( prime , true ) ; SieveOfEratosthenes ( prime , n + 1 ) ; int i , j ; HashMap < Integer , Integer > m = new HashMap < > ( ) ; for ( i = 0 ; i < n ; i ++ ) { if ( m . containsKey ( arr [ i ] ) ) m . put ( arr [ i ] , m . get ( arr [ i ] ) + 1 ) ; else m . put ( arr [ i ] , 1 ) ; } int xor = 0 ; for ( Map . Entry < Integer , Integer > entry : m . entrySet ( ) ) { int key = entry . getKey ( ) ; int value = entry . getValue ( ) ; if ( prime [ value ] ) { xor ^= ( key ) ; } } return xor ; } public static void main ( String args [ ] ) { int arr [ ] = { 5 , 4 , 6 , 5 , 4 , 6 } ; int n = arr . length ; System . out . println ( xorOfElements ( arr , n ) ) ; } }"],"bleu":0.7434814254801974,"rouge_l":0.847136340598074}
{"id":1037,"predictions":["class GFG { static void minimumFlip ( String s , int x , int y ) { s = s + s ; boolean isOpposite = false ; if ( x > y ) { for ( int i = s ; i < y ; i ++ ) { s = s . charAt ( i ) ; y = x ; x = y ; isOpposite = true ; } int valInteger [ ] = new int [ x ] ; for ( int i = x ; i <= y ; i ++ ) { if ( s . charAt ( i ) != cur ) { cur = s . charAt ( i ) ; } } int valotation = 0 ; cur = s . charAt ( y ) ; x += s . length ( ) - 1 ; for ( int i = y ; i <= x ; i ++ ) { if ( s . charAt ( i ) != cur ) { cur = s . charAt ( i ) ; val += 1 ; } } if ( val != valicable ) { if ( isOpposite == false ) { System . out . println ( \" Clock - 1\" ) ; } else { System . out . println ( \" Doesn ' + valoi ) ; } } else { if ( isOpposite == false ) { System . out . println ( \" Ai - 1\" ) ; } else { System . out . println ( \" Ai - 1\" ) ; } } } public static void main ( String [ ] args ) { int x = 0 ; int y = 8 ; minimumFlipwise ( s , x , y ) ; } }"],"references":["class GFG { static void minimumFlip ( String s , int x , int y ) { s = s + s ; boolean isOpposite = false ; if ( x > y ) { swap ( x , y ) ; isOpposite = true ; } int valClockwise = 0 ; char cur = s . charAt ( x ) ; for ( int i = x ; i <= y ; i ++ ) { if ( s . charAt ( i ) != cur ) { cur = s . charAt ( i ) ; valClockwise ++ ; } } int valAnticlockwise = 0 ; cur = s . charAt ( y ) ; x += s . length ( ) ; for ( int i = y ; i < x ; i ++ ) { if ( s . charAt ( i ) != cur ) { cur = s . charAt ( i ) ; valAnticlockwise ++ ; } } if ( valClockwise <= valAnticlockwise ) { if ( ! isOpposite ) { System . out . println ( \" Clockwise ▁ \" + valClockwise ) ; } else { System . out . println ( \" Anti - clockwise ▁ \" + valAnticlockwise ) ; } } else if ( ! isOpposite ) { System . out . println ( \" Anti - clockwise ▁ \" + valAnticlockwise ) ; } else { System . out . println ( \" Clockwise ▁ \" + valClockwise ) ; } } static void swap ( int a , int b ) { int c = a ; a = b ; b = c ; } public static void main ( String [ ] args ) { int x = 0 , y = 8 ; String s = \"000110\" ; minimumFlip ( s , x , y ) ; } }"],"bleu":0.6712457461304897,"rouge_l":0.7656365362303554}
{"id":1038,"predictions":["class GFG { static int MAX = 26 ; static int maxSubStr ( String str1 , String str2 , int len2 ) { if ( len1 > len2 ) return 0 ; int freq1 [ ] = new int [ MAX ] ; for ( int i = 0 ; i < len ; i ++ ) freq1 [ str1 . charAt ( i ) - ' a ' ] ++ ; int [ ] freq2 = new int [ MAX ] ; for ( int i = 0 ; i < len2 ; i ++ ) freq2 [ str2 . charAt ( i ) - ' a ' ] ++ ; int minPoss = Integer . MAX_VALUE ; for ( int i = 0 ; i < MAX ; i ++ ) { if ( freq1 [ i ] == 0 ) continue ; if ( freq1 [ i ] > freq2 [ i ] ) return 0 ; minPoss = Math . min ( minPoss , freq2 [ i ] \/ freq1 [ i ] ) ; } return minPoss ; } public static void main ( String [ ] args ) { String str1 = \" geeks \" , str2 = \" gs \" ; int len1 = str1 . length ( ) ; System . out . println ( maxSubStr ( str1 , str2 , len2 ) ) ; } }"],"references":["class GFG { final static int MAX = 26 ; static int maxSubStr ( char [ ] str1 , int len1 , char [ ] str2 , int len2 ) { if ( len1 > len2 ) return 0 ; int freq1 [ ] = new int [ MAX ] ; for ( int i = 0 ; i < len1 ; i ++ ) freq1 [ i ] = 0 ; for ( int i = 0 ; i < len1 ; i ++ ) freq1 [ str1 [ i ] - ' a ' ] ++ ; int freq2 [ ] = new int [ MAX ] ; for ( int i = 0 ; i < len2 ; i ++ ) freq2 [ i ] = 0 ; for ( int i = 0 ; i < len2 ; i ++ ) freq2 [ str2 [ i ] - ' a ' ] ++ ; int minPoss = Integer . MAX_VALUE ; for ( int i = 0 ; i < MAX ; i ++ ) { if ( freq1 [ i ] == 0 ) continue ; if ( freq1 [ i ] > freq2 [ i ] ) return 0 ; minPoss = Math . min ( minPoss , freq2 [ i ] \/ freq1 [ i ] ) ; } return minPoss ; } public static void main ( String [ ] args ) { String str1 = \" geeks \" , str2 = \" gskefrgoekees \" ; int len1 = str1 . length ( ) ; int len2 = str2 . length ( ) ; System . out . println ( maxSubStr ( str1 . toCharArray ( ) , len1 , str2 . toCharArray ( ) , len2 ) ) ; } }"],"bleu":0.6658810798211708,"rouge_l":0.8194302848575713}
{"id":1039,"predictions":["class GFG { static boolean isValidString ( String str , int n ) { int id = str . length ( ) ; if ( id == 0 ) return false ; while ( idx != - 1 ) { if ( str . charAt ( id - 1 ) != ' a ' ) return false ; if ( idx + 1 < n && str . charAt ( id + 1 ) != ' b ' ) return false ; if ( idx + 2 < n && str . charAt ( idx + 2 ) == ' b ' ) return false ; if ( idx == n - 1 ) return false ; idx = str . find ( \" b \" , idx + 2 ) ; } return true ; } public static void main ( String [ ] args ) { String str = \" abbaabbabba \" ; int n = str . length ( ) ; System . out . println ( isValidString ( str , n ) ) ; } }"],"references":["class GFG { private static boolean isValidString ( String str , int n ) { int index = str . indexOf ( \" b \" ) ; if ( index == 0 ) return false ; while ( index != - 1 ) { if ( str . charAt ( index - 1 ) != ' a ' ) return false ; if ( index + 1 < n && str . charAt ( index + 1 ) != ' b ' ) return false ; if ( index + 2 < n && str . charAt ( index + 2 ) == ' b ' ) return false ; if ( index == n - 1 ) return false ; index = str . indexOf ( \" b \" , index + 2 ) ; } return true ; } public static void main ( String [ ] args ) { String str = \" abbaaabbabba \" ; int n = str . length ( ) ; System . out . println ( isValidString ( str , n ) ) ; } }"],"bleu":0.7686729834101915,"rouge_l":0.9102840704782452}
{"id":1040,"predictions":["class GFG { static int gcd ( int a , int b ) { if ( ( a % b ) == 0 ) return b ; return gcd ( b , a % b ) ; } static int firstFactorialDivisibleNumber ( int x ) { int i = 1 ; int new_x = x ; for ( i = 1 ; i < x ; i ++ ) { new_x \/= gcd ( i , new_x ) ; if ( new_x == 1 ) break ; } return i ; } public static void main ( String [ ] args ) { int x = 16 ; System . out . println ( firstFactorialDivisibleNumber ( x ) ) ; } }"],"references":["class GFG { static int gcd ( int a , int b ) { if ( ( a % b ) == 0 ) return b ; return gcd ( b , a % b ) ; } static int firstFactorialDivisibleNumber ( int x ) { int i = 1 ; int new_x = x ; for ( i = 1 ; i < x ; i ++ ) { new_x \/= gcd ( i , new_x ) ; if ( new_x == 1 ) break ; } return i ; } public static void main ( String [ ] args ) { int x = 16 ; System . out . print ( firstFactorialDivisibleNumber ( x ) ) ; } }"],"bleu":0.9792923878387346,"rouge_l":0.9918032786885246}
{"id":1041,"predictions":["class GFG { static int xorLessK ( int arr [ ] , int n , int k ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int tempXor = 0 ; for ( int j = i ; j < n ; j ++ ) { tempXor ^= arr [ j ] ; if ( tempXor < k ) count ++ ; } } return count ; } public static void main ( String [ ] args ) { int k = 3 ; int arr [ ] = { 8 , 9 , 10 , 11 , 12 } ; int n = arr . length ; System . out . println ( xorLessK ( arr , n , k ) ) ; } }"],"references":["import java . io . * ; class GFG { static int xorLessK ( int arr [ ] , int n , int k ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int tempXor = 0 ; for ( int j = i ; j < n ; j ++ ) { tempXor ^= arr [ j ] ; if ( tempXor < k ) count ++ ; } } return count ; } public static void main ( String [ ] args ) { int k = 3 ; int arr [ ] = new int [ ] { 8 , 9 , 10 , 11 , 12 } ; int n = arr . length ; System . out . println ( xorLessK ( arr , n , k ) ) ; } }"],"bleu":0.9138153664872165,"rouge_l":0.9553802816901407}
{"id":1042,"predictions":["class GFG { static void findNumbers ( int arr [ ] , int n ) { int [ ] num = new int [ n ] ; int b_suba = arr [ n - 1 ] - arr [ 1 ] ; num [ 0 ] = ( arr [ 0 ] + b_minus_a ) \/ 2 ; num [ 0 ] = arr [ 0 ] - num [ 1 ] ; for ( int i = 1 ; i < n - 2 ; i ++ ) num [ i + 1 ] = arr [ i ] - num [ 0 ] ; System . out . print ( \" Number ▁ are : ▁ \" ) ; for ( int i = 0 ; i < n - 2 ; i ++ ) System . out . print ( num [ i ] + \" , ▁ \" ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 13 , 10 , 14 , 9 , 17 , 21 , 16 , 13 , 17 } ; int n = 5 ; findNumbers ( arr , n ) ; } }"],"references":["class GFG { static void findNumbers ( int arr [ ] , int n ) { int num [ ] = new int [ n ] ; int b_minus_a = arr [ n - 1 ] - arr [ 1 ] ; num [ 1 ] = ( arr [ 0 ] + b_minus_a ) \/ 2 ; num [ 0 ] = arr [ 0 ] - num [ 1 ] ; for ( int i = 1 ; i <= ( n - 2 ) ; i ++ ) num [ i + 1 ] = arr [ i ] - num [ 0 ] ; System . out . print ( \" Numbers ▁ are : ▁ \" ) ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( num [ i ] + \" ▁ \" ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 13 , 10 , 14 , 9 , 17 , 21 , 16 , 18 , 13 , 17 } ; int n = 5 ; findNumbers ( arr , n ) ; } }"],"bleu":0.8885135683831806,"rouge_l":0.9582170480822901}
{"id":1043,"predictions":["import java . util . * ; class GFG { static Vector < Integer > pr = new Vector < Integer > ( ) ; static ArrayList < Integer > prime = new ArrayList < Integer > ( ) ; static void sieve ( int n ) { for ( int p = 2 ; p * p ; p <= n ; p ++ ) { if ( prime . get ( p ) == true ) { for ( int i = 2 * p ; i < n ; i += p ) prime . set ( i , false ) ; } } for ( int p = 2 ; p <= n ; p ++ ) if ( prime . get ( p ) == true ) { for ( int i = p * 2 ; i < n ; i += p ) prime . add ( i , p ) ; } } static long SemiPrimeSum ( int N ) { long ans = 0 ; for ( int i = 0 ; i < pr . size ( ) ; i ++ ) { for ( int j = i ; j < pr . size ( ) ; j ++ ) { if ( pr . get ( i ) * pr . get ( j ) > N ) break ; ans += pr . get ( i ) * pr . get ( j ) ; } } return ans ; } public static void main ( String [ ] args ) { int N = 6 ; sieve ( N ) ; System . out . println ( SemiPrimeSum ( N ) ) ; } }"],"references":["import java . util . * ; class GFG { static Vector < Long > pr = new Vector < > ( ) ; static boolean prime [ ] = new boolean [ 10000000 + 1 ] ; static void sieve ( long n ) { for ( int i = 2 ; i <= n ; i += 1 ) { prime [ i ] = true ; } for ( int p = 2 ; ( int ) p * ( int ) p <= n ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = ( int ) p * ( int ) p ; i <= n ; i += p ) prime [ i ] = false ; } } for ( int p = 2 ; p <= n ; p ++ ) if ( prime [ p ] ) pr . add ( ( long ) p ) ; } static long SemiPrimeSum ( long N ) { long ans = 0 ; for ( int i = 0 ; i < pr . size ( ) ; i += 1 ) { for ( int j = i ; j < pr . size ( ) ; j += 1 ) { if ( ( long ) pr . get ( i ) * ( long ) pr . get ( j ) > N ) break ; ans += ( long ) pr . get ( i ) * ( long ) pr . get ( j ) ; } } return ans ; } public static void main ( String [ ] args ) { long N = 6 ; sieve ( N ) ; System . out . println ( SemiPrimeSum ( N ) ) ; } }"],"bleu":0.6605620746383131,"rouge_l":0.7712681890021253}
{"id":1044,"predictions":["class GFG { static String largestPalinSub ( String s ) { String res = \" \" ; int mx = s . length ( ) ; for ( int i = 1 ; i < s . length ( ) ; i ++ ) { mx = Math . max ( mx , s . charAt ( i ) ) ; } for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == mx ) { res += s . charAt ( i ) ; } } return res ; } public static void main ( String [ ] args ) { String s = \" geeksforgeeks \" ; System . out . println ( largestPalinSub ( s ) ) ; } }"],"references":["class GFG { static String largestPalinSub ( String s ) { String res = \" \" ; char mx = s . charAt ( 0 ) ; for ( int i = 1 ; i < s . length ( ) ; i ++ ) mx = ( char ) Math . max ( ( int ) mx , ( int ) s . charAt ( i ) ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) if ( s . charAt ( i ) == mx ) res += s . charAt ( i ) ; return res ; } public static void main ( String [ ] args ) { String s = \" geeksforgeeks \" ; System . out . println ( largestPalinSub ( s ) ) ; } }"],"bleu":0.8071093610477621,"rouge_l":0.9272224781206817}
{"id":1045,"predictions":["import java . util . * ; class GFG { static boolean isPalindrome ( String str , int low , int high ) { while ( low < high ) { if ( str . charAt ( low ) != str . charAt ( high ) ) { return false ; low ++ ; high -- ; } low ++ ; high -- ; } return true ; } static void allPalindromeUtil ( String allPartition , Vector < String > curr , int start , int n , String str ) { if ( start >= n ) { x = curr . substring ( start , i + 1 ) ; allPart . add ( x ) ; return ; } for ( int i = start ; i < n ; i ++ ) { if ( isPalindrome ( str , start , i ) ) { currPartition . add ( str . substring ( i ) , i + 1 ) ) ; allPalindromeUtil ( allPartition , i + 1 , n , str . substring ( 0 , n , str . length ( ) - 1 , str . substring ( ) - i + 1 , n , str . substring ( ) ; } } } static void allPalinditions ( String str ) { int n = str . length ( ) ; Vector < String > allPrefix = new Vector < String > ( ) ; allPalindrome ( allPartition , 0 , currPartition ( allPartition , 0 , n , str ) ; for ( int i = 0 ; i < allPartitions ; i ++ ) { for ( int j = 0 ; j < allPartition . size ( ) ; j ++ ) { System . out . print ( allPartition . get ( i ) + \" ▁ \" ) ; } System . out . println ( ) ; } } public static void main ( String [ ] args ) { String str = \" Bitsin \" ; allPalinditions ( str . toCharArray ( ) ; } }"],"references":["import java . util . ArrayList ; import java . util . Deque ; import java . util . LinkedList ; public class PrintAllPalindrome { public static void main ( String [ ] args ) { String input = \" nitin \" ; System . out . println ( \" All ▁ possible ▁ palindrome \" + \" partions ▁ for ▁ \" + input + \" ▁ are ▁ : \" ) ; allPalPartitions ( input ) ; } private static void allPalPartitions ( String input ) { int n = input . length ( ) ; ArrayList < ArrayList < String > > allPart = new ArrayList < > ( ) ; Deque < String > currPart = new LinkedList < String > ( ) ; allPalPartitonsUtil ( allPart , currPart , 0 , n , input ) ; for ( int i = 0 ; i < allPart . size ( ) ; i ++ ) { for ( int j = 0 ; j < allPart . get ( i ) . size ( ) ; j ++ ) { System . out . print ( allPart . get ( i ) . get ( j ) + \" ▁ \" ) ; } System . out . println ( ) ; } } private static void allPalPartitonsUtil ( ArrayList < ArrayList < String > > allPart , Deque < String > currPart , int start , int n , String input ) { if ( start >= n ) { allPart . add ( new ArrayList < > ( currPart ) ) ; return ; } for ( int i = start ; i < n ; i ++ ) { if ( isPalindrome ( input , start , i ) ) { currPart . addLast ( input . substring ( start , i + 1 ) ) ; allPalPartitonsUtil ( allPart , currPart , i + 1 , n , input ) ; currPart . removeLast ( ) ; } } } private static boolean isPalindrome ( String input , int start , int i ) { while ( start < i ) { if ( input . charAt ( start ++ ) != input . charAt ( i -- ) ) return false ; } return true ; } }"],"bleu":0.47389753567527054,"rouge_l":0.39446595108217497}
{"id":1046,"predictions":["class GFG { static int findLength ( String str , int n ) { int current_sum = 0 , max_sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { current_sum += ( str . charAt ( i ) == '0' ? 1 : - 1 ) ; if ( current_sum < 0 ) current_sum = 0 ; max_sum = Math . max ( current_sum , max_sum ) ; } return max_sum ; } public static void main ( String [ ] args ) { String s = \"11000010001\" ; int n = 11 ; System . out . println ( findLength ( s , n ) ) ; } }"],"references":["import java . util . * ; import java . lang . * ; import java . io . * ; class GFG { public static int findLength ( String str , int n ) { int current_sum = 0 ; int max_sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { current_sum += ( str . charAt ( i ) == '0' ? 1 : - 1 ) ; if ( current_sum < 0 ) current_sum = 0 ; max_sum = Math . max ( current_sum , max_sum ) ; } return max_sum == 0 ? - 1 : max_sum ; } public static void main ( String [ ] args ) { String str = \"11000010001\" ; int n = str . length ( ) ; System . out . println ( findLength ( str , n ) ) ; } }"],"bleu":0.6721351784005426,"rouge_l":0.8269480136744077}
{"id":1047,"predictions":["import java . io . * ; class GFG { static int ArrayList ( int Arr [ ] , int N , int K ) { int count = 0 ; for ( int i = 0 ; i < N ; i ++ ) if ( Arr [ i ] == 1 ) count ++ ; if ( K >= ( N - count ) ) return 1 ; return 0 ; } public static void main ( String [ ] args ) { int Arr [ ] = { 5 , 1 , 2 } ; int N = Arr . length ; int K = 2 ; int result = ArrayList ( Arr , N , K ) ; if ( result == 1 ) System . out . println ( \" Possible \" ) ; else System . out . println ( \" Not ▁ Possible \" ) ; } }"],"references":["import java . io . * ; class GFG { static int Series ( int Arr [ ] , int N , int K ) { int count = 0 ; for ( int i = 0 ; i < N ; i ++ ) if ( Arr [ i ] == 1 ) count ++ ; if ( K >= ( N - count ) ) return 1 ; else return 0 ; } public static void main ( String [ ] args ) { int Arr [ ] = { 5 , 1 , 2 } ; int N = Arr . length ; int K = 2 ; int result = Series ( Arr , N , K ) ; if ( result == 1 ) System . out . println ( \" Possible \" ) ; else System . out . println ( \" Not ▁ Possible \" ) ; } }"],"bleu":0.9513586759269348,"rouge_l":0.9833526498788325}
{"id":1048,"predictions":["class Test { static int countDigit ( int n ) { boolean prime [ ] = new boolean [ 10 ] ; Arrays . fill ( prime , true ) ; prime [ 0 ] = true ; prime [ 1 ] = true ; prime [ 0 ] = true ; int count = n ; while ( temp != 0 ) { int d = temp % 10 ; temp \/= 10 ; if ( d > 0 && n % d == 0 && prime [ d ] ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int n = 1032 ; System . out . println ( countDigit ( n ) ) ; } }"],"references":["class GFG { static int countDigit ( int n ) { boolean prime [ ] = new boolean [ 10 ] ; for ( int i = 0 ; i < 10 ; i ++ ) prime [ i ] = false ; prime [ 2 ] = prime [ 3 ] = true ; prime [ 5 ] = prime [ 7 ] = true ; int temp = n , count = 0 ; while ( temp != 0 ) { int d = temp % 10 ; temp \/= 10 ; if ( d > 0 && n % d == 0 && prime [ d ] == true ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int n = 1032 ; System . out . println ( countDigit ( n ) ) ; } }"],"bleu":0.6864799847752416,"rouge_l":0.8216670504259729}
{"id":1049,"predictions":["import java . lang . * ; import java . io . * ; class GFG { static float polyapotot ( float n , float a ) { if ( a < 0 && n < 0 ) return - 1 ; return a \/ ( 2 * Math . tan ( ( 180 \/ n ) * 3.14159 \/ 180 ) ) ; } public static void main ( String [ ] args ) { float a = 9 ; float n = 6 ; System . out . println ( polyapot ( n , a ) ) ; } }"],"references":["import java . util . * ; class GFG { double polyapothem ( double n , double a ) { if ( a < 0 && n < 0 ) return - 1 ; return ( a \/ ( 2 * java . lang . Math . tan ( ( 180 \/ n ) * 3.14159 \/ 180 ) ) ) ; } public static void main ( String args [ ] ) { double a = 9 , n = 6 ; GFG g = new GFG ( ) ; System . out . println ( g . polyapothem ( n , a ) ) ; } }"],"bleu":0.634681009138243,"rouge_l":0.7914735866543096}
{"id":1050,"predictions":["import java . io . * ; class GFG { static long evenPowerSum ( int n ) { return ( 8 * ( n + 1 ) * ( 2 * n + 1 ) * ( 3 * n + 3 * n - 1 ) ) \/ 15 ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( evenPowerSum ( n ) ) ; } }"],"references":["import java . io . * ; class GFG { static long evenPowerSum ( int n ) { return ( 8 * n * ( n + 1 ) * ( 2 * n + 1 ) * ( 3 * n * n + 3 * n - 1 ) ) \/ 15 ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( evenPowerSum ( n ) ) ; } }"],"bleu":0.9404080322790821,"rouge_l":0.9720171006607073}
{"id":1051,"predictions":["import java . util . * ; class GFG { static void printModulus ( int X , int Y ) { int n = Math . max ( X , Y ) ; for ( int i = 1 ; i <= n ; i ++ ) { if ( X % i == Y % i ) System . out . print ( i + \" ▁ \" ) ; } } public static void main ( String [ ] args ) { int X = 10 , Y = 20 ; printModulus ( X , Y ) ; } }"],"references":["class GFG { static void printModulus ( int X , int Y ) { int n = Math . max ( X , Y ) ; for ( int i = 1 ; i <= n ; i ++ ) { if ( X % i == Y % i ) System . out . print ( i + \" ▁ \" ) ; } } public static void main ( String [ ] args ) { int X , Y ; X = 10 ; Y = 20 ; printModulus ( X , Y ) ; } }"],"bleu":0.9056818091574068,"rouge_l":0.9378475629702322}
{"id":1052,"predictions":["import java . io . * ; class GFG { static int __gcd ( int a , int b ) { if ( b == 0 ) return a ; return __gcd ( b , a % b ) ; } static int minValidNumber ( int p , int q ) { if ( q % p == 0 ) return __gcd ( p , q ) ; else return - 1 ; } static int minValidNumber ( int p , int q ) { if ( q % p == 0 ) return __gcd ( p , q ) ; else return - 1 ; } public static void main ( String args [ ] ) { int p = 2 , q = 6 ; System . out . println ( minValidNumber ( p , q ) ) ; } }"],"references":["import java . io . * ; class GFG { static int __gcd ( int a , int b ) { if ( a == 0 || b == 0 ) return 0 ; if ( a == b ) return a ; if ( a > b ) return __gcd ( a - b , b ) ; return __gcd ( a , b - a ) ; } static int minValidNumber ( int p , int q ) { if ( q % p == 0 ) return __gcd ( p , q ) ; else return - 1 ; } public static void main ( String [ ] args ) { int p = 2 , q = 6 ; System . out . print ( minValidNumber ( p , q ) ) ; } }"],"bleu":0.7118511119192673,"rouge_l":0.8105839841473366}
{"id":1053,"predictions":["import java . util . * ; class GFG { static int maxSum ( int arr [ ] , int n , int k ) { if ( n > k ) { System . out . println ( \" Invalid \" ) ; return - 1 ; } int max_sum = Integer . MIN_VALUE ; int window_sum = sum ( arr [ 0 ] ) ; for ( int i = 0 ; i < n - k ; i ++ ) { window_sum -= arr [ i ] + arr [ i + k ] ; max_sum = Math . max ( window_sum , max_sum ) ; } return max_sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 4 , 2 , 10 , 2 , 3 , 1 , 0 , 20 } ; int k = 4 ; int n = arr . length ; System . out . println ( maxSum ( arr , n , k ) ) ; } }"],"references":["class GFG { static int maxSum ( int arr [ ] , int n , int k ) { if ( n < k ) { System . out . println ( \" Invalid \" ) ; return - 1 ; } int max_sum = 0 ; for ( int i = 0 ; i < k ; i ++ ) max_sum += arr [ i ] ; int window_sum = max_sum ; for ( int i = k ; i < n ; i ++ ) { window_sum += arr [ i ] - arr [ i - k ] ; max_sum = Math . max ( max_sum , window_sum ) ; } return max_sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 4 , 2 , 10 , 2 , 3 , 1 , 0 , 20 } ; int k = 4 ; int n = arr . length ; System . out . println ( maxSum ( arr , n , k ) ) ; } }"],"bleu":0.7904708646898538,"rouge_l":0.8554476806903991}
{"id":1054,"predictions":["import java . util . Arrays ; class GFG { static String lexSmallest ( char a [ ] , int n ) { Arrays . sort ( a ) ; String answer = \" \" ; for ( int i = 0 ; i < n ; i ++ ) { answer += a [ i ] ; } String answer = \" \" ; for ( int i = 0 ; i < n ; i ++ ) { answer += a [ i ] ; } return answer ; } public static void main ( String [ ] args ) { String a [ ] = { \" c \" , \" cb \" } ; int n = a . length ; System . out . println ( lexSmallest ( a , n ) ) ; } }"],"references":["class GFG { static void sort ( String a [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { if ( ( a [ i ] + a [ j ] ) . compareTo ( a [ j ] + a [ i ] ) > 0 ) { String s = a [ i ] ; a [ i ] = a [ j ] ; a [ j ] = s ; } } } } static String lexsmallest ( String a [ ] , int n ) { sort ( a , n ) ; String answer = \" \" ; for ( int i = 0 ; i < n ; i ++ ) answer += a [ i ] ; return answer ; } public static void main ( String args [ ] ) { String a [ ] = { \" c \" , \" cb \" , \" cba \" } ; int n = 3 ; System . out . println ( \" lexiographically ▁ smallest ▁ string ▁ = ▁ \" + lexsmallest ( a , n ) ) ; } }"],"bleu":0.39610330631587143,"rouge_l":0.580952380952381}
{"id":1055,"predictions":["import java . util . * ; class GFG { static void printAnagrams ( String [ ] words ) { Map < String , Integer > map = new HashMap < > ( ) ; for ( String word : words ) { map . put ( word , ( word ) -> get ( word . length ( ) + 1 ) . get ( word ) ; } for ( String word : map . keySet ( ) ) { map . put ( word , \" \" ) ; map . put ( word , \" _ \" ) ; } for ( String word : map . keySet ( ) ) { System . out . print ( word + \" ▁ \" ) ; } } public static void main ( String [ ] args ) { String [ ] arr = { \" cat \" . \" , \" dog \" , \" pet \" , \" cent \" , \" watered \" , \" cent \" } ; printAnagrams ( arr ) ; } }"],"references":["import java . util . * ; public class FindAnagrams { private static void printAnagrams ( String arr [ ] ) { HashMap < String , List < String > > map = new HashMap < > ( ) ; for ( int i = 0 ; i < arr . length ; i ++ ) { String word = arr [ i ] ; char [ ] letters = word . toCharArray ( ) ; Arrays . sort ( letters ) ; String newWord = new String ( letters ) ; if ( map . containsKey ( newWord ) ) { map . get ( newWord ) . add ( word ) ; } else { List < String > words = new ArrayList < > ( ) ; words . add ( word ) ; map . put ( newWord , words ) ; } } for ( String s : map . keySet ( ) ) { List < String > values = map . get ( s ) ; if ( values . size ( ) > 1 ) { System . out . print ( values ) ; } } } public static void main ( String [ ] args ) { String arr [ ] = { \" cat \" , \" dog \" , \" tac \" , \" god \" , \" act \" } ; printAnagrams ( arr ) ; } }"],"bleu":0.3729043538993983,"rouge_l":0.5995765915620748}
{"id":1056,"predictions":["import java . util . * ; class GFG { static String commonPrefixUtil ( String str1 , String str2 ) { int n1 = str1 . length ( ) ; int n2 = str2 . length ( ) ; String result = \" \" ; for ( int j = 0 ; j <= n1 - 1 && j <= n2 - 1 ; j ++ ) { if ( str1 . charAt ( i ) != str2 . charAt ( j ) ) { break ; } result += ( str1 . charAt ( i ) ) ; } return ( result ) ; } static String commonPrefix ( String arr [ ] , int n ) { Arrays . sort ( arr ) ; System . out . print ( commonPrefixUtil ( arr [ 0 ] , arr [ n - 1 ] ) ) ; } static String commonPrefix ( String arr [ ] , int n ) { Arrays . sort ( arr ) ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ 0 ] + \" ▁ \" ) ; } public static void main ( String [ ] args ) { String arr [ ] = { \" geeksforgeeks \" , \" geeks \" , \" geezer \" } ; int n = arr . length ; commonPrefix ( arr , n ) ; } }"],"references":["import java . util . Arrays ; class GFG { static String commonPrefixUtil ( String str1 , String str2 ) { String result = \" \" ; int n1 = str1 . length ( ) , n2 = str2 . length ( ) ; for ( int i = 0 , j = 0 ; i <= n1 - 1 && j <= n2 - 1 ; i ++ , j ++ ) { if ( str1 . charAt ( i ) != str2 . charAt ( j ) ) { break ; } result += str1 . charAt ( i ) ; } return ( result ) ; } static void commonPrefix ( String arr [ ] , int n ) { Arrays . sort ( arr ) ; System . out . println ( commonPrefixUtil ( arr [ 0 ] , arr [ n - 1 ] ) ) ; } public static void main ( String [ ] args ) { String arr [ ] = { \" geeksforgeeks \" , \" geeks \" , \" geek \" , \" geezer \" } ; int n = arr . length ; commonPrefix ( arr , n ) ; } }"],"bleu":0.7181532669835021,"rouge_l":0.82040422053797}
{"id":1057,"predictions":["import java . util . * ; class GFG { static int changeOfArray ( int arr [ ] , int n ) { int minEle = Collections . max ( ) ; int maxEle = Arrays . stream ( arr ) . max ( ) . getAsInt ( ) ; int minEle = Integer . MAX_VALUE ; for ( int num = minEle ; num <= maxEle ; ++ num ) { int operations = 0 ; for ( int i = 0 ; i < n ; ++ i ) { if ( arr [ i ] != num ) operations += ( Math . abs ( num - arr [ i ] ) - 1 ) ; } minOperations = Math . min ( minOperations , operations ) ; } return minOperations ; } public static void main ( String [ ] args ) { int arr [ ] = { 10 , 1 , 4 } ; int n = arr . length ; System . out . println ( changeOfArray ( arr , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static int changeTheArray ( int arr [ ] , int n ) { int minEle = Arrays . stream ( arr ) . min ( ) . getAsInt ( ) ; int maxEle = Arrays . stream ( arr ) . max ( ) . getAsInt ( ) ; int minOperations = Integer . MAX_VALUE ; for ( int num = minEle ; num <= maxEle ; num ++ ) { int operations = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] != num ) { operations += ( Math . abs ( num - arr [ i ] ) - 1 ) ; } } minOperations = Math . min ( minOperations , operations ) ; } return minOperations ; } public static void main ( String args [ ] ) { int arr [ ] = { 10 , 1 , 4 } ; int n = arr . length ; System . out . println ( changeTheArray ( arr , n ) ) ; } }"],"bleu":0.8187385716620597,"rouge_l":0.923522796089627}
{"id":1058,"predictions":["import java . util . * ; import java . io . * ; class GFG { static void findElements ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { int count = 0 ; for ( int j = 0 ; j < n ; j ++ ) if ( arr [ j ] > arr [ i ] ) count ++ ; if ( count >= 2 ) System . out . print ( arr [ i ] + \" ▁ \" ) ; } } public static void main ( String args [ ] ) { int arr [ ] = { 2 , - 6 , 3 , 5 , 1 } ; int n = arr . length ; findElements ( arr , n ) ; } }"],"references":["import java . util . * ; import java . io . * ; class GFG { static void findElements ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { int count = 0 ; for ( int j = 0 ; j < n ; j ++ ) if ( arr [ j ] > arr [ i ] ) count ++ ; if ( count >= 2 ) System . out . print ( arr [ i ] + \" ▁ \" ) ; } } public static void main ( String args [ ] ) { int arr [ ] = { 2 , - 6 , 3 , 5 , 1 } ; int n = arr . length ; findElements ( arr , n ) ; } }"],"bleu":1.0,"rouge_l":1.0}
{"id":1059,"predictions":["import java . util . * ; class GFG { static int cntSubArrays ( int arr [ ] , int n , int k ) { int res = 0 ; int i = 0 ; while ( i < n ) { int j = i + 1 ; while ( j < n && arr [ j ] >= arr [ j - 1 ] ) j ++ ; res += Math . max ( j - i - k + 1 , 0 ) ; i = j ; } return res ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 2 , 5 } ; int n = arr . length ; int k = 2 ; System . out . println ( cntSubArrays ( arr , n , k ) ) ; } }"],"references":["class GFG { static int cntSubArrays ( int [ ] arr , int n , int k ) { int res = 0 ; int i = 0 ; while ( i < n ) { int j = i + 1 ; while ( j < n && arr [ j ] >= arr [ j - 1 ] ) j ++ ; res += Math . max ( j - i - k + 1 , 0 ) ; i = j ; } return res ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 2 , 5 } ; int n = arr . length ; int k = 2 ; System . out . println ( cntSubArrays ( arr , n , k ) ) ; } }"],"bleu":0.9318061030769234,"rouge_l":0.9743561881995001}
{"id":1060,"predictions":["import java . util . * ; class GFG { static boolean match_strings ( String [ ] sentence , int [ ] sentence , int n , int m ) { Map < String , Integer > mp = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { mp . put ( string [ i ] , ( sc . next ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { if ( mp . containsKey ( String ) ) { mp . put ( string [ i ] , mp . get ( string [ i ] ) + 1 ) ; } else { mp . put ( string [ i ] , 1 ) ; } } for ( int i = 0 ; i < m ; i ++ ) { if ( mp . containsKey ( sentence [ i ] ) ) { mp . put ( sentence [ i ] , mp . get ( sentence [ i ] ) - 1 ) ; } else return false ; } return true ; } public static void main ( String [ ] args ) { String [ ] sentence = { \" find \" find \" , \" a \" , \" geeks \" , \" geeks \" , \" answer \" , \" answer \" ; int m = sentence . length ; if ( match_strings ( sentence , sentence , n , m ) ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ; } }"],"references":["import java . util . * ; class GFG { static boolean match_words ( String dictionary [ ] , String sentence [ ] , int n , int m ) { Map < String , Integer > mp = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( mp . containsKey ( dictionary [ i ] ) ) { mp . put ( dictionary [ i ] , mp . get ( dictionary [ i ] ) + 1 ) ; } else { mp . put ( dictionary [ i ] , 1 ) ; } } for ( int i = 0 ; i < m ; i ++ ) { if ( mp . containsKey ( sentence [ i ] ) ) mp . put ( sentence [ i ] , mp . get ( sentence [ i ] ) - 1 ) ; else return false ; } return true ; } public static void main ( String [ ] args ) { String dictionary [ ] = { \" find \" , \" a \" , \" geeks \" , \" all \" , \" for \" , \" on \" , \" geeks \" , \" answers \" , \" inter \" } ; int n = dictionary . length ; String sentence [ ] = { \" find \" , \" all \" , \" answers \" , \" on \" , \" geeks \" , \" for \" , \" geeks \" } ; int m = sentence . length ; if ( match_words ( dictionary , sentence , n , m ) ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ; } }"],"bleu":0.711640520704964,"rouge_l":0.7943480845085644}
{"id":1061,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int sumofproduct ( int n ) { int ans = 0 ; for ( int x = 1 ; x <= n ; x ++ ) { int y = n \/ x ; ans += ( y * x ) ; } return ans ; } static public void main ( String [ ] args ) { int n = 10 ; System . out . println ( sumofproduct ( n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int sumofproduct ( int n ) { int ans = 0 ; for ( int x = 1 ; x <= n ; x ++ ) { int y = n \/ x ; ans += ( y * x ) ; } return ans ; } static public void main ( String [ ] args ) { int n = 10 ; System . out . println ( sumofproduct ( n ) ) ; } }"],"bleu":0.9259151401487726,"rouge_l":0.9684286487461662}
{"id":1062,"predictions":["class GFG { static boolean isUnique ( int a [ ] , int n , int k ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += a [ i ] ; } sum += n - 1 ; return ( sum == k ) ; } public static void main ( String [ ] args ) { int a [ ] = { 3 , 3 , 3 } ; int n = a . length ; int k = 12 ; if ( isUnique ( a , n , k ) == true ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . io . * ; class GFG { static boolean isUnique ( int [ ] a , int n , int k ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += a [ i ] ; sum += n - 1 ; return ( sum == k ) ; } static public void main ( String [ ] args ) { int [ ] a = { 3 , 3 , 3 } ; int n = a . length ; int k = 12 ; if ( isUnique ( a , n , k ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.8399035813173276,"rouge_l":0.9358743857125736}
{"id":1063,"predictions":["class GFG { public static void main ( String [ ] args ) { for ( int first = 1 ; first <= 6 ; first ++ ) { for ( int second = 1 ; second <= 6 ; second ++ ) { System . out . println ( first + second - 5 ) ; } } } }"],"references":["class GFG { public static void main ( String [ ] args ) { int first , second ; for ( first = 1 ; first <= 5 ; ++ first ) for ( second = 1 ; second <= 5 ; ++ second ) System . out . printf ( \" % d ▁ \\n \" , 5 * first + second - 5 ) ; } }"],"bleu":0.5140342507667316,"rouge_l":0.7607882264903966}
{"id":1064,"predictions":["class GFG { static int calculate_ ( String s ) { if ( s . length ( ) == 1 ) return 0 ; int count_ = 0 ; for ( int i = s . length ( ) - 1 ; i > 0 ; i -- ) { if ( s . charAt ( i ) == '0' ) count_ += 1 ; else { count_ ++ ; while ( s . charAt ( i ) == '1' && i > 0 ) count_ += 1 ; } if ( i == 0 ) count_ ++ ; } return count_ ; } public static void main ( String [ ] args ) { String s = \"10000100000\" ; System . out . print ( calculate_ ( s ) ) ; } }"],"references":["public class ACX { static int calculate_ ( String s ) { if ( s . length ( ) == 1 ) return 0 ; int count_ = 0 ; char [ ] s1 = s . toCharArray ( ) ; for ( int i = s . length ( ) - 1 ; i > 0 😉 { if ( s1 [ i ] == '0' ) { count_ ++ ; i -- ; } else { count_ ++ ; while ( s1 [ i ] == '1' && i > 0 ) { count_ ++ ; i -- ; } if ( i == 0 ) count_ ++ ; s1 [ i ] = '1' ; } } return count_ ; } public static void main ( String [ ] args ) { String s ; s = \"10000100000\" ; System . out . println ( calculate_ ( s ) ) ; } }"],"bleu":0.631106774211032,"rouge_l":0.7755966986393039}
{"id":1065,"predictions":["class GfG { static String getWinner ( String str , int len ) { int total = 0 ; for ( int i = 0 ; i < len ; i ++ ) { if ( str . charAt ( i ) == ' S ' ) total ++ ; } if ( ( total % 2 == 1 ) return \" First \" ; return \" Second \" ; } public static void main ( String [ ] args ) { String str = \" GSSS \" ; int len = str . length ( ) ; System . out . println ( getWinner ( str , len ) ) ; } }"],"references":["import java . util . * ; class GFG { static String getWinner ( String str , int len ) { int total = 0 ; for ( int i = 0 ; i < len ; i ++ ) { if ( str . charAt ( i ) == ' S ' ) { total ++ ; } } if ( ( total % 2 ) == 1 ) return \" First \" ; return \" Second \" ; } public static void main ( String [ ] args ) { String str = \" GSSS \" ; int len = str . length ( ) ; System . out . println ( getWinner ( str , len ) ) ; } }"],"bleu":0.8709236755139144,"rouge_l":0.9424391577796007}
{"id":1066,"predictions":["class GFG { static void countPermutations ( int N , int B ) { double x = Math . pow ( B , N - 1 ) ; double y = Math . pow ( x , N - 1 ) ; System . out . println ( x - y ) ; } public static void main ( String [ ] args ) { int N = 6 , B = 4 ; countPermutations ( N , B ) ; } }"],"references":["class GFG { static void countPermutations ( int N , int B ) { int x = ( int ) Math . pow ( B , N ) ; int y = ( int ) Math . pow ( B , N - 1 ) ; System . out . println ( x - y ) ; } public static void main ( String [ ] args ) { int N = 6 ; int B = 4 ; countPermutations ( N , B ) ; } }"],"bleu":0.759760482546889,"rouge_l":0.8958611481975968}
{"id":1067,"predictions":["class GFG { static String check ( int k , int d1 , int d1 ) { int s = ( ( 2 * ( d1 + d1 ) % 10 + ( 4 * ( d0 + d1 ) ) % 10 + ( 8 * ( d0 + d1 ) ) % 10 + ( 6 * ( d0 + d1 ) ) % 10 + ( 6 * ( d0 + d1 ) ) % 10 ) % 10 ; int a = ( k - 3 ) % 4 ; if ( a == 2 ) x = ( ( 2 * ( d0 + d1 ) ) % 10 + ( 4 * ( d0 + d1 ) ) % 10 + ( 4 * ( d0 + d1 ) ) % 10 ; else if ( a == 3 ) x = ( ( 2 * ( d0 + d1 ) ) % 10 + ( 4 * ( d0 + d0 ) ) % 10 + ( 8 * ( d0 + d1 ) ) % 10 ) ; int sum = d0 + d1 + ( ( k - 3 ) \/ 4 ) * s + x0 ; if ( sum % 3 == 0 ) return \" YES \" ; else return \" NO \" ; } public static void main ( String [ ] args ) { int k = 13 ; int d0 = 1 ; int d0 = 1 ; System . out . println ( check ( k , d0 , d1 ) ) ; k = 5 ; d0 = 4 ; System . out . println ( check ( k , d0 , d1 ) ) ; } }"],"references":["import java . util . * ; import java . io . * ; class GFG { static String check ( int k , int d0 , int d1 ) { int s = ( 2 * ( d0 + d1 ) ) % 10 + ( 4 * ( d0 + d1 ) ) % 10 + ( 8 * ( d0 + d1 ) ) % 10 + ( 6 * ( d0 + d1 ) ) % 10 ; int a = ( k - 3 ) % 4 ; int x = 0 ; switch ( a ) { case 0 : x = 0 ; break ; case 1 : x = ( 2 * ( d0 + d1 ) ) % 10 ; break ; case 2 : x = ( 2 * ( d0 + d1 ) ) % 10 + ( 4 * ( d0 + d1 ) ) % 10 ; break ; case 3 : x = ( 2 * ( d0 + d1 ) ) % 10 + ( 4 * ( d0 + d1 ) ) % 10 + ( 8 * ( d0 + d1 ) ) % 10 ; break ; } int sum = d0 + d1 + ( ( ( k - 3 ) \/ 4 ) * s + x ) ; if ( sum % 3 == 0 ) return \" YES \" ; return \" NO \" ; } public static void main ( String [ ] args ) { int k , d0 , d1 ; k = 13 ; d0 = 8 ; d1 = 1 ; System . out . println ( check ( k , d0 , d1 ) ) ; k = 5 ; d0 = 3 ; d1 = 4 ; System . out . println ( check ( k , d0 , d1 ) ) ; } }"],"bleu":0.7289895108641004,"rouge_l":0.8202111455433583}
{"id":1068,"predictions":["class GFG { public static void main ( String [ ] args ) { int n = 5 ; int num = 1 , gap = n - 1 ; for ( int j = 1 ; j <= n ; j ++ ) { num = j ; for ( int i = 1 ; i <= gap ; i ++ ) { System . out . print ( \" ▁ \" ) ; } gap = gap - 1 ; for ( int i = 1 ; i <= j ; i ++ ) { System . out . print ( num ) ; num = num - 1 ; } num = num - 2 ; for ( int i = 1 ; i < j ; i ++ ) { System . out . print ( num ) ; num -- ; } System . out . println ( ) ; } } }"],"references":["import java . io . * ; class GFG { public static void main ( String args [ ] ) { int n = 5 , i , j , num = 1 , gap ; gap = n - 1 ; for ( j = 1 ; j <= n ; j ++ ) { num = j ; for ( i = 1 ; i <= gap ; i ++ ) System . out . print ( \" ▁ \" ) ; gap -- ; for ( i = 1 ; i <= j ; i ++ ) { System . out . print ( num ) ; num ++ ; } num -- ; num -- ; for ( i = 1 ; i < j ; i ++ ) { System . out . print ( num ) ; num -- ; } System . out . println ( ) ; } } }"],"bleu":0.7539359972095148,"rouge_l":0.8734177215189874}
{"id":1069,"predictions":["class GFG { static boolean isKthBitSet ( int x , int k ) { if ( ( x & ( 1 ) ) != 0 ) return true ; else return false ; } static boolean isPalindrome ( int x ) { int l = 1 ; int r = 2 * 8 ; while ( l < r ) { if ( isKthBitSet ( x , l ) != isKthBitSet ( x , r ) ) return false ; l ++ ; r -- ; } return true ; } public static void main ( String [ ] args ) { int x = 1 << 15 + 1 ; System . out . println ( isPalindrome ( x ) ) ; x = 1 << 31 ; System . out . println ( isPalindrome ( x ) ) ; } }"],"references":["class GFG { static int isKthBitSet ( long x , long k ) { int rslt = ( ( x & ( 1 << ( k - 1 ) ) ) != 0 ) ? 1 : 0 ; return rslt ; } static int isPalindrome ( long x ) { long l = 1 ; long r = ( Integer . SIZE \/ 8 ) * 8 ; while ( l < r ) { if ( isKthBitSet ( x , l ) != isKthBitSet ( x , r ) ) { return 0 ; } l ++ ; r -- ; } return 1 ; } public static void main ( String [ ] args ) { long x = 1 << 15 + 1 << 16 ; System . out . println ( isPalindrome ( x ) ) ; x = ( 1 << 31 ) + 1 ; System . out . println ( isPalindrome ( x ) ) ; } }"],"bleu":0.5972714375832828,"rouge_l":0.8111192545283215}
{"id":1070,"predictions":["import java . util . * ; class GFG { static void getSum ( int a [ ] , int n ) { int P [ ] = new int [ n ] ; P [ 0 ] = a [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) P [ i ] = a [ i ] + P [ i - 1 ] ; int S [ ] = new int [ n ] ; for ( int i = 1 ; i < n ; i ++ ) { hash [ i ] = a [ i ] + P [ i - 1 ] ; } S [ n - 1 ] = P [ n - 1 ] ; HashSet < Integer > res = new HashSet < Integer > ( ) ; for ( int i = 1 ; i < n ; i ++ ) { if ( S % i == 0 ) { res = true ; int div1 = i ; int div2 = S \/ i ; for ( int j = div1 ; j <= S ; j += div1 ) { if ( hash . contains ( j ) ) { res . add ( div1 ) ; break ; } } } if ( res && div1 != S ) { res . add ( div1 ) ; } res . add ( div2 ) ; for ( int j = S \/ i ; j <= S \/ i ; j ++ ) { if ( hash . contains ( j ) ) { res . add ( div2 ) ; break ; } } if ( res . size ( ) == 0 ) { res . add ( div2 ) ; } } for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( res . get ( i ) ) ; } } public static void main ( String args [ ] ) { int a [ ] = { 1 , 2 , 1 , 1 , 1 , 2 , 1 , 3 } ; int n = a . length ; getSum ( a , n ) ; } }"],"references":["import java . util . HashMap ; import java . util . HashSet ; class GFG { public static void getSum ( int [ ] a , int n ) { int [ ] P = new int [ n ] ; P [ 0 ] = a [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) P [ i ] = a [ i ] + P [ i - 1 ] ; int S = P [ n - 1 ] ; HashMap < Integer , Integer > hash = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) hash . put ( P [ i ] , 1 ) ; HashSet < Integer > res = new HashSet < > ( ) ; for ( int i = 1 ; i * i <= S ; i ++ ) { if ( S % i == 0 ) { boolean pres = true ; int div1 = i , div2 = S \/ i ; for ( int j = div1 ; j <= S ; j += div1 ) { if ( hash . get ( j ) == null || hash . get ( j ) != 1 ) { pres = false ; break ; } } if ( pres && div1 != S ) res . add ( div1 ) ; pres = true ; for ( int j = S \/ i ; j <= S ; j += S \/ i ) { if ( hash . get ( j ) == null || hash . get ( j ) != 1 ) { pres = false ; break ; } } if ( pres && div2 != S ) res . add ( div2 ) ; } } if ( res . size ( ) == 0 ) { System . out . println ( \" - 1\" ) ; return ; } for ( int i : res ) System . out . print ( i + \" ▁ \" ) ; } public static void main ( String [ ] args ) { int [ ] a = { 1 , 2 , 1 , 1 , 1 , 2 , 1 , 3 } ; int n = a . length ; getSum ( a , n ) ; } }"],"bleu":0.6481908104959695,"rouge_l":0.7560145808019441}
{"id":1071,"predictions":["class GFG { final static int MAX_CHAR = 26 ; static String removeChars ( String arr [ ] , int k ) { int hash [ ] = new int [ MAX_CHAR ] ; int n = arr . length ( ) ; for ( int i = 0 ; i < n ; ++ i ) { hash [ arr [ i ] - 1 ] ++ ; } String ans = \" \" ; int index = 0 ; for ( int i = 0 ; i < n ; ++ i ) { if ( hash [ arr [ i ] - ' a ' ] != k ) { ans += arr [ i ] ; } } return ans ; } static public void main ( String [ ] args ) { String str = \" geeksforgeeks \" ; int k = 2 ; System . out . println ( removeChars ( str , k ) ) ; } }"],"references":["import java . util . * ; class GFG { static int MAX_CHAR = 26 ; static String removeChars ( char arr [ ] , int k ) { int [ ] hash = new int [ MAX_CHAR ] ; int n = arr . length ; for ( int i = 0 ; i < n ; ++ i ) hash [ arr [ i ] - ' a ' ] ++ ; String ans = \" \" ; for ( int i = 0 ; i < n ; ++ i ) { if ( hash [ arr [ i ] - ' a ' ] != k ) { ans += arr [ i ] ; } } return ans ; } public static void main ( String [ ] args ) { char str [ ] = \" geeksforgeeks \" . toCharArray ( ) ; int k = 2 ; System . out . print ( removeChars ( str , k ) ) ; } }"],"bleu":0.7657175530936586,"rouge_l":0.8871644704734016}
{"id":1072,"predictions":["import java . util . * ; class GFG { static int firstEven ( int arr [ ] , int n ) { HashMap < Integer , Integer > map = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( map . containsKey ( arr [ i ] ) ) map . put ( arr [ i ] , map . get ( arr [ i ] ) + 1 ) ; else map . put ( arr [ i ] , map . get ( arr [ i ] ) ) ; } for ( int i = 0 ; i < n ; i ++ ) if ( map . containsKey ( arr [ i ] ) ) break ; return arr [ j ] ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 4 , 6 , 8 , 1 , 6 } ; System . out . println ( firstEven ( arr , 6 ) ) ; } }"],"references":["import java . util . * ; class GFG { public static int firstEven ( int arr [ ] , int n ) { HashMap < Integer , Boolean > map = new HashMap < Integer , Boolean > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( map . get ( arr [ i ] ) == null ) map . put ( arr [ i ] , false ) ; else { boolean val = map . get ( arr [ i ] ) ; if ( val == true ) map . put ( arr [ i ] , false ) ; else map . put ( arr [ i ] , true ) ; } } int j = 0 ; for ( j = 0 ; j < n ; j ++ ) { if ( map . get ( arr [ j ] ) == true ) break ; } return arr [ j ] ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 4 , 6 , 8 , 1 , 6 } ; int n = arr . length ; System . out . println ( firstEven ( arr , n ) ) ; } }"],"bleu":0.6426247084321695,"rouge_l":0.826110509209101}
{"id":1073,"predictions":["class GFG { static String new_generation ( String s , int m ) { while ( m != 0 ) { int temp = m % 2 ; s += temp ; m = m \/ 2 ; } return s ; } static String find_char ( int n , int m , int i ) { String s = \" \" ; String s1 = \" \" ; for ( int x = 0 ; x < n ; x ++ ) { for ( int j = 0 ; j < s . length ( ) ; j ++ ) { if ( s . charAt ( j ) == '1' ) { s1 += \"10\" ; } else s1 += \"1\" ; } s = s1 ; char r = '0' ; return e - r ; } public static void main ( String [ ] args ) { int m = 5 , n = 2 ; System . out . println ( find_char ( n , m , i ) ) ; } }"],"references":["import java . io . * ; import java . util . Arrays ; class GFG { static String s = \" \" ; static String ReverseString ( String s ) { char [ ] arr = s . toCharArray ( ) ; for ( int i = 0 ; i < arr . length \/ 2 ; i ++ ) { char temp = arr [ i ] ; arr [ i ] = arr [ arr . length - i - 1 ] ; arr [ arr . length - i - 1 ] = temp ; } return new String ( arr ) ; } static void binary_conversion ( int m ) { while ( m != 0 ) { int tmp = m % 2 ; s += Integer . toString ( tmp ) ; m = ( int ) ( m \/ 2 ) ; } s = ReverseString ( s ) ; } static int find_character ( int n , int m , int i ) { binary_conversion ( m ) ; String s1 = \" \" ; for ( int x = 0 ; x < n ; x ++ ) { for ( int y = 0 ; y < s . length ( ) ; y ++ ) { if ( s . charAt ( y ) == '1' ) s1 += \"10\" ; else s1 += \"01\" ; } s = s1 ; s1 = \" \" ; } return s . charAt ( i ) - '0' ; } public static void main ( String args [ ] ) { int m = 5 , n = 2 , i = 8 ; System . out . print ( find_character ( n , m , i ) ) ; } }"],"bleu":0.3445509776744542,"rouge_l":0.6041571642666319}
{"id":1074,"predictions":["class GFG { static int cntSquares ( int n ) { return n * ( n + 1 ) * ( 2 * n + 1 ) \/ 6 ; } public static void main ( String args [ ] ) { int n = 4 ; System . out . print ( cntSquares ( 4 ) ) ; } }"],"references":["class GFG { static int cntSquares ( int n ) { return n * ( n + 1 ) * ( 2 * n + 1 ) \/ 6 ; } public static void main ( String args [ ] ) { System . out . println ( cntSquares ( 4 ) ) ; } }"],"bleu":0.849575037006868,"rouge_l":0.9474724654052528}
{"id":1075,"predictions":["class GFG { static int multiplyWith3Point5 ( int x ) { return ( x << 1 ) + x + ( x >> 1 ) ; } public static void main ( String [ ] args ) { int x = 4 ; System . out . print ( multiplyWith35 ( x ) ) ; } }"],"references":["class GFG { static int multiplyWith3Point5 ( int x ) { return ( x << 1 ) + x + ( x >> 1 ) ; } public static void main ( String [ ] args ) { int x = 2 ; System . out . println ( multiplyWith3Point5 ( x ) ) ; } }"],"bleu":0.8782805451069394,"rouge_l":0.9473684210526315}
{"id":1076,"predictions":["class GFG { static int countSubSeq ( String str , int len ) { int ans = 0 ; int mul = 1 ; for ( int i = 0 ; i < len ; i ++ ) { if ( str . charAt ( i ) == '0' ) ans += mul ; mul *= 2 ; } return ans ; } public static void main ( String [ ] args ) { String str = \"10010\" ; int len = str . length ( ) ; System . out . println ( countSubSeq ( str , len ) ) ; } }"],"references":["class GFG { static int countSubSeq ( String str , int len ) { int ans = 0 ; int mul = 1 ; for ( int i = 0 ; i < len ; i ++ ) { if ( str . charAt ( i ) == '0' ) ans += mul ; mul *= 2 ; } return ans ; } public static void main ( String [ ] args ) { String str = \"10010\" ; int len = str . length ( ) ; System . out . print ( countSubSeq ( str , len ) ) ; } }"],"bleu":0.9756631177112198,"rouge_l":0.9903846153846154}
{"id":1077,"predictions":["class GFG { static int a , b , c ; static void swapThree ( ) { a = a + b + c ; b = a - ( b + c ) ; c = a - ( b + c ) ; a = a - ( b + c ) ; System . out . println ( \" After ▁ swapping ▁ a ▁ = ▁ \" + a + \" , ▁ b ▁ = ▁ \" + b + \" , ▁ c ▁ = ▁ \" + c ) ; } public static void main ( String [ ] args ) { int a = 10 , b = 20 , c = 30 ; System . out . println ( \" Before ▁ swapping ▁ a ▁ = ▁ \" + a + \" , ▁ b ▁ = ▁ \" + b + \" , ▁ c ▁ = ▁ \" + c ) ; swapThree ( a , b , c ) ; } }"],"references":["class GFG { static int a , b , c ; static void swapThree ( ) { a = a + b + c ; b = a - ( b + c ) ; c = a - ( b + c ) ; a = a - ( b + c ) ; } public static void main ( String [ ] args ) { a = 10 ; b = 20 ; c = 30 ; System . out . println ( \" Before ▁ swapping ▁ a ▁ = ▁ \" + a + \" , ▁ b ▁ = ▁ \" + b + \" , ▁ c ▁ = ▁ \" + c ) ; swapThree ( ) ; System . out . println ( \" After ▁ swapping ▁ a ▁ = ▁ \" + a + \" , ▁ b ▁ = ▁ \" + b + \" , ▁ c ▁ = ▁ \" + c ) ; } }"],"bleu":0.9192313640402624,"rouge_l":0.8281862510756286}
{"id":1078,"predictions":["import java . util . * ; class GFG { static int countSubarrays ( int a [ ] , int n ) { int count = 0 ; int pre [ ] = new int [ n + 1 ] ; Arrays . fill ( pre , 0 ) ; for ( int i = 1 ; i <= n ; i ++ ) pre [ i ] = pre [ i - 1 ] + a [ i - 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = i ; j <= n ; j ++ ) { int sum1 = pre [ j ] - pre [ i - 1 ] ; int count1 = j - i + 1 ; int sum2 = pre [ n ] - sum1 ; if ( n - count1 == 0 ) count2 = 1 ; else count2 = n - count1 ; } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 6 , 3 , 5 } ; int n = arr . length ; System . out . println ( countSubarrays ( arr , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static int countSubarrays ( int a [ ] , int n ) { int count = 0 ; int [ ] pre = new int [ n + 1 ] ; Arrays . fill ( pre , 0 ) ; for ( int i = 1 ; i < n + 1 ; i ++ ) { pre [ i ] = pre [ i - 1 ] + a [ i - 1 ] ; } for ( int i = 1 ; i < n + 1 ; i ++ ) { for ( int j = i ; j < n + 1 ; j ++ ) { int sum1 = pre [ j ] - pre [ i - 1 ] , count1 = j - i + 1 ; int sum2 = pre [ n ] - sum1 , count2 = ( ( n - count1 ) == 0 ) ? 1 : ( n - count1 ) ; int includ = sum1 \/ count1 ; int exclud = sum2 \/ count2 ; if ( includ > exclud ) count ++ ; } } return count ; } public static void main ( String args [ ] ) { int arr [ ] = { 6 , 3 , 5 } ; int n = arr . length ; System . out . println ( countSubarrays ( arr , n ) ) ; } }"],"bleu":0.7278868911528571,"rouge_l":0.8596891191709845}
{"id":1079,"predictions":["class GFG { static void swap ( int arr [ ] , int n , int k , int m ) { for ( int i = 0 ; i < n ; i ++ ) { int left = i ; int right = Math . min ( i + k - 1 , n - 1 ) ; while ( left < right ) { arr [ i ++ ] = swap ( arr , left , right ) ; left ++ ; right -- ; } } } static void swap ( int arr [ ] , int i , int j ) { int temp = arr [ i ] ; arr [ i ] = arr [ j ] ; arr [ j ] = temp ; return arr ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 13 , 14 , 14 } ; int k = 3 ; int n = arr . length ; int arr [ ] = swap ( arr , n , k , m ) ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + \" ▁ \" ) ; } }"],"references":["class GFG { static void reverse ( int [ ] arr , int n , int k , int m ) { for ( int i = 0 ; i < n ; i += k + m ) { int left = i ; int right = Math . min ( i + k - 1 , n - 1 ) ; while ( left < right ) swap ( arr , left ++ , right -- ) ; } } static int [ ] swap ( int [ ] arr , int i , int j ) { int temp = arr [ i ] ; arr [ i ] = arr [ j ] ; arr [ j ] = temp ; return arr ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 } ; int k = 3 ; int m = 2 ; int n = arr . length ; reverse ( arr , n , k , m ) ; for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( arr [ i ] + \" ▁ \" ) ; } } }"],"bleu":0.8270235662567731,"rouge_l":0.894095788604459}
{"id":1080,"predictions":["class GFG { static int count ( int n ) { return ( int ) ( Math . pow ( 2 , n - 1 ) ; } public static void main ( String args [ ] ) { int n = 4 ; System . out . println ( count ( n ) ) ; } }"],"references":["class GFG { static int count ( int n ) { return ( int ) Math . pow ( 2 , n - 1 ) ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( count ( n ) ) ; } }"],"bleu":0.8924393716314627,"rouge_l":0.9754426042261565}
{"id":1081,"predictions":["class GFG { static boolean isSubsetSum ( int set [ ] , int n , int sum ) { int subset [ ] [ ] = new int [ n + 1 ] [ sum + 1 ] ; for ( int i = 0 ; i <= n ; i ++ ) { subset [ i ] [ 0 ] = true ; } for ( int i = 1 ; i <= sum ; i ++ ) { for ( int j = 1 ; j <= sum ; j ++ ) { if ( j < set [ i - 1 ] ) subset [ i ] [ j ] = subset [ i - 1 ] [ j ] ; if ( j >= set [ i - 1 ] ) subset [ i ] [ j ] = ( subset [ i - 1 ] [ j ] || subset [ i - 1 ] [ j - set [ i - 1 ] ] ) ; } } return subset [ n ] [ sum ] ; } public static void main ( String [ ] args ) { int set [ ] = { 3 , 34 , 4 , 12 , 5 , 2 } ; int sum = 9 ; int n = set . length ; if ( isSubsetSum ( set , n , sum ) == true ) System . out . println ( \" Found ▁ a ▁ subset ▁ with ▁ given ▁ sum \" ) ; else System . out . println ( \" No ▁ subset ▁ with ▁ given ▁ sum \" ) ; } }"],"references":["class GFG { static boolean isSubsetSum ( int set [ ] , int n , int sum ) { boolean subset [ ] [ ] = new boolean [ sum + 1 ] [ n + 1 ] ; for ( int i = 0 ; i <= n ; i ++ ) subset [ 0 ] [ i ] = true ; for ( int i = 1 ; i <= sum ; i ++ ) subset [ i ] [ 0 ] = false ; for ( int i = 1 ; i <= sum ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { subset [ i ] [ j ] = subset [ i ] [ j - 1 ] ; if ( i >= set [ j - 1 ] ) subset [ i ] [ j ] = subset [ i ] [ j ] || subset [ i - set [ j - 1 ] ] [ j - 1 ] ; } } return subset [ sum ] [ n ] ; } public static void main ( String args [ ] ) { int set [ ] = { 3 , 34 , 4 , 12 , 5 , 2 } ; int sum = 9 ; int n = set . length ; if ( isSubsetSum ( set , n , sum ) == true ) System . out . println ( \" Found ▁ a ▁ subset \" + \" ▁ with ▁ given ▁ sum \" ) ; else System . out . println ( \" No ▁ subset ▁ with \" + \" ▁ given ▁ sum \" ) ; } }"],"bleu":0.7755490143566058,"rouge_l":0.8526881720430108}
{"id":1082,"predictions":["class GFG { static void printVisible ( int [ ] height , int [ ] colour , int K ) { int [ ] arr = new int [ K + 1 ] ; int max = height [ K - 1 ] ; arr [ K - 1 ] = 1 ; int i = K - 2 ; while ( i >= 0 ) { if ( height [ i ] > max ) { max = height [ i ] ; arr [ i ] = 1 ; } i -- ; } for ( i = 1 ; i < K ; i ++ ) { if ( arr [ i ] == 1 ) { vis ++ ; } } return vis ; } public static void main ( String [ ] args ) { int height [ ] = { 3 , 5 , 1 , 2 , 3 } ; int [ ] color = { 1 , 2 , 3 , 4 , 3 } ; int K = pattern . length ; System . out . print ( colourVisible ( height , colour , K ) ) ; } }"],"references":["import java . io . * ; class GFG { static int colourVisible ( int height [ ] , int colour [ ] , int K ) { int arr [ ] = new int [ K + 1 ] ; int visible = 0 ; int max = height [ K - 1 ] ; arr [ colour [ K - 1 ] ] = 1 ; for ( int i = K - 2 ; i >= 0 ; i -- ) { if ( height [ i ] > max ) { max = height [ i ] ; arr [ colour [ i ] ] = 1 ; } } for ( int i = 1 ; i <= K ; i ++ ) { if ( arr [ i ] == 1 ) visible ++ ; } return visible ; } public static void main ( String [ ] args ) { int height [ ] = { 3 , 5 , 1 , 2 , 3 } ; int colour [ ] = { 1 , 2 , 3 , 4 , 3 } ; int K = colour . length ; System . out . println ( colourVisible ( height , colour , K ) ) ; } }"],"bleu":0.6943405910156837,"rouge_l":0.8658928711473609}
{"id":1083,"predictions":["import java . util . Arrays ; class GFG { static int MAX = 100 ; static void sort ( int mat [ ] [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) Arrays . sort ( mat [ i ] ) ; } static void findAndPrintCommonElements ( int mat [ ] [ ] , int n ) { sortRows ( mat , n ) ; int [ ] curr_index = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) curr_index [ i ] = 0 ; int f = 0 ; while ( curr_index [ 0 ] < n ) { int value = mat [ 0 ] [ curr_index [ 0 ] ; boolean present = true ; for ( int i = 1 ; i < n ; i ++ ) { while ( curr_index [ i ] < n && mat [ i ] [ curr_index [ i ] ) curr_index [ i ] <= value ) curr_index [ i ] ++ ; if ( mat [ i ] [ curr_index [ i ] - 1 ] != value ) present = false ; if ( curr_index [ i ] == n ) { f = 1 ; break ; } } if ( present ) { System . out . print ( value + \" ▁ \" ) ; break ; } } if ( present == 1 ) break ; } public static void main ( String [ ] args ) { int mat [ ] = { 12 , 1 , 14 , 3 , 16 } ; int n = 5 ; findAndPrintCommonElements ( mat , n ) ; } }"],"references":["import java . util . * ; class GFG { public static void sortRows ( int mat [ ] [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) Arrays . sort ( mat [ i ] ) ; } public static void findAndPrintCommonElements ( int mat [ ] [ ] , int n ) { sortRows ( mat , n ) ; int curr_index [ ] = new int [ n ] ; int f = 0 ; for ( ; curr_index [ 0 ] < n ; curr_index [ 0 ] ++ ) { int value = mat [ 0 ] [ curr_index [ 0 ] ] ; boolean present = true ; for ( int i = 1 ; i < n ; i ++ ) { while ( curr_index [ i ] < n && mat [ i ] [ curr_index [ i ] ] <= value ) curr_index [ i ] ++ ; if ( mat [ i ] [ curr_index [ i ] - 1 ] != value ) present = false ; if ( curr_index [ i ] == n ) { f = 1 ; break ; } } if ( present ) System . out . print ( value + \" ▁ \" ) ; if ( f == 1 ) break ; } } public static void main ( String [ ] args ) { int mat [ ] [ ] = { { 12 , 1 , 14 , 3 , 16 } , { 14 , 2 , 1 , 3 , 35 } , { 14 , 1 , 14 , 3 , 11 } , { 14 , 25 , 3 , 2 , 1 } , { 1 , 18 , 3 , 21 , 14 } } ; int n = 5 ; findAndPrintCommonElements ( mat , n ) ; } }"],"bleu":0.7407959240295348,"rouge_l":0.8240692997834383}
{"id":1084,"predictions":["import java . io . * ; class GFG { static int MaximumProduct ( int a [ ] , int n ) { int cntNeg = 0 ; int cnt [ ] = new int [ n ] ; int pos = - 1 , pos = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == 0 ) { pos ++ ; cntzero ++ ; } if ( a [ i ] < 0 ) { cntNeg ++ ; if ( pos == - 1 || Math . abs ( a [ i ] ) > Math . abs ( a [ i ] ) ) pos = i ; } } if ( cntNeg % 2 == 1 ) { for ( int i = 0 ; i < n - 1 ; i += 2 ) { System . out . print ( 1 + \" ▁ \" + ( i + 1 ) ) ; } if ( cntzero == n || ( cntzero == 1 - 1 ) ) { for ( int i = 0 ; i < n - 1 ; i ++ ) { System . out . print ( 1 + \" ▁ \" + i + \" ▁ \" + ( i + 1 ) ) ; } return ; } int lst = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( i != 0 ) { if ( lst != - 1 ) System . out . print ( 1 + \" ▁ \" + lst + \" ▁ \" + lst + 1 ) ; lst = i ; } } } if ( lst != - 1 ) System . out . print ( 2 + \" ▁ \" + lst + 1 ) ; lst = - 1 ; } } public static void main ( String [ ] args ) { int a [ ] = { 5 , 5 , - 1 } ; int n = a . length ; MaximumProduct ( a , n ) ; } }"],"references":["class GFG { static void MaximumProduct ( int a [ ] , int n ) { int cntneg = 0 ; int cntzero = 0 ; int used [ ] = new int [ n ] ; int pos = - 1 ; for ( int i = 0 ; i < n ; ++ i ) { if ( a [ i ] == 0 ) { used [ i ] = 1 ; cntzero ++ ; } if ( a [ i ] < 0 ) { cntneg ++ ; if ( pos == - 1 || Math . abs ( a [ pos ] ) > Math . abs ( a [ i ] ) ) { pos = i ; } } } if ( cntneg % 2 == 1 ) { used [ pos ] = 1 ; } if ( cntzero == n || ( cntzero == n - 1 && cntneg == 1 ) ) { for ( int i = 0 ; i < n - 1 ; ++ i ) { System . out . println ( 1 + \" ▁ \" + ( i + 1 ) + \" ▁ \" + ( i + 2 ) ) ; } return ; } int lst = - 1 ; for ( int i = 0 ; i < n ; ++ i ) { if ( used [ i ] == 1 ) { if ( lst != - 1 ) { System . out . println ( 1 + \" ▁ \" + ( lst + 1 ) + \" ▁ \" + ( i + 1 ) ) ; } lst = i ; } } if ( lst != - 1 ) { System . out . println ( 2 + \" ▁ \" + ( lst + 1 ) ) ; } lst = - 1 ; for ( int i = 0 ; i < n ; ++ i ) { if ( used [ i ] != 1 ) { if ( lst != - 1 ) { System . out . println ( 1 + \" ▁ \" + ( lst + 1 ) + \" ▁ \" + ( i + 1 ) ) ; } lst = i ; } } } public static void main ( String [ ] args ) { int a [ ] = { 5 , - 2 , 0 , 1 , - 3 } ; int n = a . length ; MaximumProduct ( a , n ) ; } }"],"bleu":0.6566202301306474,"rouge_l":0.7425070838488246}
{"id":1085,"predictions":["import java . io . * ; class GFG { static int getSum ( int n ) { int sum ; while ( n != 0 ) { sum = sum + n % 10 ; n \/= 10 ; } return sum ; } public static void main ( String [ ] args ) { int n = 687 ; System . out . println ( getSum ( n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int getSum ( int n ) { int sum = 0 ; while ( n != 0 ) { sum = sum + n % 10 ; n = n \/ 10 ; } return sum ; } public static void main ( String [ ] args ) { int n = 687 ; System . out . println ( getSum ( n ) ) ; } }"],"bleu":0.8962454528738826,"rouge_l":0.9565585929222292}
{"id":1086,"predictions":["class GFG { static int countSetBits ( int n ) { int count = 0 ; while ( n > 0 ) { count ++ ; n &= ( n - 1 ) ; } return count ; } static int FlippingCount ( int a , int b ) { return countSetBits ( a ^ b ) ; } public static void main ( String [ ] args ) { int a = 10 , b = 20 ; System . out . println ( CountSetBits ( a , b ) ) ; } }"],"references":["import java . util . * ; class Count { public static int countSetBits ( int n ) { int count = 0 ; while ( n != 0 ) { count ++ ; n &= ( n - 1 ) ; } return count ; } public static int FlippedCount ( int a , int b ) { return countSetBits ( a ^ b ) ; } public static void main ( String [ ] args ) { int a = 10 ; int b = 20 ; System . out . print ( FlippedCount ( a , b ) ) ; } }"],"bleu":0.7492126286528391,"rouge_l":0.882047116165719}
{"id":1087,"predictions":["import java . util . * ; class GFG { public static int findSum ( int arr [ ] , int N ) { HashMap < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { if ( mp . containsKey ( arr [ i ] ) ) { mp . put ( arr [ i ] , mp . get ( arr [ i ] ) + 1 ) ; } else { mp . put ( arr [ i ] , 1 ) ; } } int maxFreq = 0 ; for ( Map . Entry < Integer , Integer > itr : mp . entrySet ( ) ) { if ( itr . getValue ( ) > maxFreq ) { maxFreq = itr . getValue ( ) ; } } int sum = 0 ; for ( Map . Entry < Integer , Integer > itr : mp . entrySet ( ) ) { if ( itr . getValue ( ) == maxFreq ) { sum += itr . getValue ( ) ; } } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 2 , 2 , 2 , 3 , 3 , 3 , 3 } ; int N = arr . length ; System . out . println ( findSum ( arr , N ) ) ; } }"],"references":["import java . util . * ; class GFG { static int findSum ( int arr [ ] , int N ) { Map < Integer , Integer > mp = new HashMap < > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { if ( mp . containsKey ( arr [ i ] ) ) { mp . put ( arr [ i ] , mp . get ( arr [ i ] ) + 1 ) ; } else { mp . put ( arr [ i ] , 1 ) ; } } int maxFreq = 0 ; for ( Map . Entry < Integer , Integer > entry : mp . entrySet ( ) ) { if ( entry . getValue ( ) > maxFreq ) { maxFreq = entry . getValue ( ) ; } } int sum = 0 ; for ( Map . Entry < Integer , Integer > entry : mp . entrySet ( ) ) { if ( entry . getValue ( ) == maxFreq ) { sum += entry . getKey ( ) * entry . getValue ( ) ; } } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 2 , 2 , 2 , 2 , 3 , 3 , 3 , 3 } ; int N = arr . length ; System . out . println ( findSum ( arr , N ) ) ; } }"],"bleu":0.8924749552772355,"rouge_l":0.9494604985737319}
{"id":1088,"predictions":["class GFG { static int MDAs_Factorial ( int N ) { if ( N <= 2 ) return N ; if ( N <= 4 ) return N + 3 ; if ( ( N - 4 ) % 4 == 0 ) return N + 1 ; else if ( ( N - 4 ) % 4 <= 2 ) return N + 2 ; else return N - 1 ; } public static void main ( String [ ] args ) { int N = 4 ; System . out . println ( mdAs_Factorial ( N ) ) ; N = 10 ; System . out . println ( MD_Factorial ( N ) ) ; } }"],"references":["import java . util . * ; class Count { public static int MDAS_Factorial ( int N ) { if ( N <= 2 ) return N ; if ( N <= 4 ) return ( N + 3 ) ; if ( ( N - 4 ) % 4 == 0 ) return ( N + 1 ) ; else if ( ( N - 4 ) % 4 <= 2 ) return ( N + 2 ) ; else return ( N - 1 ) ; } public static void main ( String [ ] args ) { int N = 4 ; System . out . println ( MDAS_Factorial ( N ) ) ; N = 10 ; System . out . println ( MDAS_Factorial ( N ) ) ; } }"],"bleu":0.706545908697689,"rouge_l":0.895341416719847}
{"id":1089,"predictions":["class GFG { static int maxAND ( int arr [ ] , int n ) { int res = 0 ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = i + 1 ; j < n ; j ++ ) res = Math . max ( res , arr [ i ] & arr [ j ] ) ; return res ; } public static void main ( String [ ] args ) { int arr [ ] = { 4 , 8 , 6 , 2 } ; int n = arr . length ; System . out . println ( \" Maximum ▁ AND ▁ Value ▁ = ▁ \" + maxAND ( arr , n ) ) ; } }"],"references":["import java . util . * ; import java . lang . * ; public class GfG { static int maxAND ( int arr [ ] , int n ) { int res = 0 ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = i + 1 ; j < n ; j ++ ) res = res > ( arr [ i ] & arr [ j ] ) ? res : ( arr [ i ] & arr [ j ] ) ; return res ; } public static void main ( String argc [ ] ) { int arr [ ] = { 4 , 8 , 6 , 2 } ; int n = arr . length ; System . out . println ( \" Maximum ▁ AND ▁ Value ▁ = ▁ \" + maxAND ( arr , n ) ) ; } }"],"bleu":0.747289068579062,"rouge_l":0.8570801317233808}
{"id":1090,"predictions":["class GFG { static boolean check ( int a [ ] , int y ) { int sum = 0 ; for ( int i = 0 ; i < a . length ; i ++ ) { double x = Math . sqrt ( a [ i ] ) ; if ( Math . floor ( x ) == Math . ceil ( x ) ) sum += a [ i ] ; } if ( sum % y == 0 ) return true ; else return false ; } public static void main ( String [ ] args ) { int a [ ] = { 2 , 3 , 4 , 9 , 10 } ; int x = 13 ; if ( check ( a , x ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["public class GFG { static boolean check ( int arr [ ] , int x , int n ) { long sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { double y = Math . sqrt ( arr [ i ] ) ; if ( Math . floor ( y ) == Math . ceil ( y ) ) { sum += arr [ i ] ; } } if ( sum % x == 0 ) return true ; else return false ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 3 , 4 , 9 , 10 } ; int n = arr . length ; int x = 13 ; if ( check ( arr , x , n ) ) { System . out . println ( \" Yes \" ) ; } else { System . out . println ( \" No \" ) ; } } }"],"bleu":0.6834839251724223,"rouge_l":0.8569756097560975}
{"id":1091,"predictions":["class GFG { static int MAX_SIZE = 1000000000 ; static void sieve ( ) { int MAX_SIZE = 1e6 ; for ( int p = 2 ; p * p < MAX_SIZE ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * p ; i < MAX_SIZE ; i += p ) prime [ i ] = false ; } } } static int kthPrimeGreater ( int n , int k ) { int res = - 1 ; for ( int i = n + 1 ; i < MAX_SIZE ; i ++ ) { if ( prime [ i ] == true ) { for ( int i = n + 1 ; i < MAX_SIZE ; i += p ) prime [ i ] = false ; } } return res ; } public static void main ( String [ ] args ) { int n = 2 , k = 15 ; sieve ( ) ; System . out . println ( kthPrimeAndN ( n , k ) ) ; } }"],"references":["import java . util . * ; class GFG { static int MAX_SIZE = ( int ) 1e6 ; static boolean [ ] prime = new boolean [ MAX_SIZE + 1 ] ; static void sieve ( ) { Arrays . fill ( prime , true ) ; for ( int p = 2 ; p * p <= MAX_SIZE ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * p ; i <= MAX_SIZE ; i += p ) prime [ i ] = false ; } } } static int kthPrimeGreaterThanN ( int n , int k ) { int res = - 1 ; for ( int i = n + 1 ; i < MAX_SIZE ; i ++ ) { if ( prime [ i ] == true ) k -- ; if ( k == 0 ) { res = i ; break ; } } return res ; } public static void main ( String [ ] args ) { sieve ( ) ; int n = 2 , k = 15 ; System . out . println ( kthPrimeGreaterThanN ( n , k ) ) ; } }"],"bleu":0.6949583465998271,"rouge_l":0.778061224489796}
{"id":1092,"predictions":["import java . util . Arrays ; class GFG { static int minimumSets ( int arr [ ] , int n , int key ) { Arrays . sort ( arr ) ; int j = n - 1 ; for ( int i = 0 ; i < j ; i ++ ) { if ( arr [ i ] + arr [ j ] <= key ) j -- ; } return i + 1 ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 5 , 3 , 4 } ; int n = arr . length ; int key = 5 ; System . out . println ( minimumSets ( arr , n , key ) ) ; } }"],"references":["import java . util . Arrays ; class GFG { static int minimumSets ( int arr [ ] , int n , int key ) { int i , j ; Arrays . sort ( arr ) ; for ( i = 0 , j = n - 1 ; i <= j ; ++ i ) if ( arr [ i ] + arr [ j ] <= key ) j -- ; return i ; } public static void main ( String [ ] args ) { int [ ] arr = { 3 , 5 , 3 , 4 } ; int n = arr . length ; int key = 5 ; System . out . println ( minimumSets ( arr , n , key ) ) ; } }"],"bleu":0.813551453736478,"rouge_l":0.8927918038785218}
{"id":1093,"predictions":["class GFG { static boolean isPalindrome ( String str ) { int len = str . length ( ) ; if ( len == 1 ) return true ; int ptr1 = 0 ; int ptr2 = len - 1 ; while ( ptr2 > ptr1 ) { if ( str . charAt ( ptr1 ) != str . charAt ( ptr2 ) ) { return false ; } ptr1 ++ ; ptr2 -- ; } return true ; } static int noOfPandions ( String s ) { if ( isPalindrome ( s ) ) { return 0 ; } return 1 + s . substring ( 0 , len - 1 ) ; } public static void main ( String [ ] args ) { String s = \" abce \" ; System . out . println ( noOfSpins ( s ) ) ; } }"],"references":["class GFG { static boolean isPalindrome ( char [ ] str ) { int len = str . length ; if ( len == 1 ) return true ; char ptr1 = str [ 0 ] ; char ptr2 = str [ len - 1 ] ; while ( ptr2 > ptr1 ) { if ( ptr1 != ptr2 ) return false ; ptr1 ++ ; ptr2 -- ; } return true ; } static int noOfAppends ( String s ) { if ( isPalindrome ( s . toCharArray ( ) ) ) return 0 ; s = s . substring ( 1 ) ; return 1 + noOfAppends ( s ) ; } public static void main ( String arr [ ] ) { String s = \" abede \" ; System . out . printf ( \" % d \\n \" , noOfAppends ( s ) ) ; } }"],"bleu":0.5742777566585058,"rouge_l":0.7735869684049416}
{"id":1094,"predictions":["import java . util . * ; class GFG { static void add_factors ( int n , Map < Integer , Integer > mp ) { for ( int i = 1 ; i <= Math . sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { if ( n \/ i == i ) { mp . put ( i , mp . get ( i ) + 1 ) ; } else { mp . put ( i , 1 ) ; } } } } static void count_divisors ( int a [ ] , int n ) { Map < Integer , Integer > mp = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; ++ i ) { System . out . print ( mp . get ( a [ i ] ) + \" ▁ \" ) ; } } public static void main ( String [ ] args ) { int arr [ ] = { 8 , 1 , 28 , 4 , 2 , 6 , 7 } ; int n = arr . length ; count_divisors ( arr , n ) ; } }"],"references":["import java . util . * ; class GFG { static void add_factors ( int n , HashMap < Integer , Integer > mp ) { for ( int i = 1 ; i <= ( Math . sqrt ( n ) ) ; i ++ ) { if ( n % i == 0 ) { if ( n \/ i == i ) { if ( mp . containsKey ( i ) ) mp . put ( i , mp . get ( i ) + 1 ) ; else mp . put ( i , 1 ) ; } else { if ( mp . containsKey ( i ) ) mp . put ( i , mp . get ( i ) + 1 ) ; else mp . put ( i , 1 ) ; if ( mp . containsKey ( n \/ i ) ) mp . put ( n \/ i , mp . get ( n \/ i ) + 1 ) ; else mp . put ( n \/ i , 1 ) ; } } } } static void count_divisors ( int a [ ] , int n ) { HashMap < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( mp . get ( a [ i ] ) == null ? 0 + \" ▁ \" : mp . get ( a [ i ] ) + \" ▁ \" ) ; add_factors ( a [ i ] , mp ) ; } } public static void main ( String [ ] args ) { int arr [ ] = { 8 , 1 , 28 , 4 , 2 , 6 , 7 } ; int n = arr . length ; count_divisors ( arr , n ) ; } }"],"bleu":0.5216586460571513,"rouge_l":0.7355819643481301}
{"id":1095,"predictions":["import java . util . * ; class GFG { static boolean isPossible ( int arr [ ] , int n , int C [ ] ) { int min = 1 ; int currPosition = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] - currPosition >= mid ) { min ++ ; currPosition = arr [ i ] ; if ( Integer . MAX_VALUE ) return true ; } } return false ; } static int binarySearch ( int n , int C [ ] , int arr [ ] ) { Arrays . sort ( arr ) ; int lo = 0 , hi = arr [ n - 1 ] ; int ans = 0 ; while ( lo <= hi ) { int mid = ( lo + hi ) \/ 2 ; if ( isPossible ( arr , n , C , mid ) == false ) hi = mid - 1 ; else { ans = Math . max ( ans , mid ) ; lo = mid + 1 ; } } return ans ; } public static void main ( String [ ] args ) { int C = 4 ; int arr [ ] = { 1 , 2 , 5 , 8 , 10 , 18 } ; int n = arr . length ; System . out . println ( binarySearch ( n , C , arr ) ) ; } }"],"references":["import java . util . * ; class GFG { static boolean isPossible ( int [ ] arr , int n , int C , int mid ) { int magnet = 1 , currPosition = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] - currPosition >= mid ) { magnet ++ ; currPosition = arr [ i ] ; if ( magnet == C ) return true ; } } return false ; } static int binarySearch ( int n , int C , int [ ] arr ) { int lo , hi , mid , ans ; Arrays . sort ( arr ) ; lo = 0 ; hi = arr [ n - 1 ] ; ans = 0 ; while ( lo <= hi ) { mid = ( lo + hi ) \/ 2 ; if ( ! isPossible ( arr , n , C , mid ) ) hi = mid - 1 ; else { ans = Math . max ( ans , mid ) ; lo = mid + 1 ; } } return ans ; } public static void main ( String args [ ] ) { int C = 4 ; int [ ] arr = { 1 , 2 , 5 , 8 , 10 , 18 } ; int n = arr . length ; System . out . println ( binarySearch ( n , C , arr ) ) ; } }"],"bleu":0.808562030184343,"rouge_l":0.9133445629795993}
{"id":1096,"predictions":["class GFG { static int makePalindrome ( int n , int odd ) { int res = n ; if ( odd != 0 ) n \/= 10 ; while ( n > 0 ) { res = 10 * res + n % 10 ; n \/= 10 ; } return res ; } static boolean isPalindrome ( int n , int base ) { int reverse = 0 ; int temp = n ; while ( temp > 0 ) { reverse *= base + temp % base ; temp = temp \/ base ; } return reverse == n ; } static void sumPalindrome ( int n , int k ) { int sum = 0 ; int i = 1 ; while ( temp > 0 ) { if ( isPalindrome ( p , k ) ) sum += p ; i ++ ; } for ( int i = 1 ; p < n ; i ++ ) { if ( isPalindrome ( p , k ) ) sum += p ; p = makePalindrome ( i , true ) ; } i = 1 ; p = makePalindrome ( i , false ) ; while ( p < n ) { if ( isPalindrome ( p , k ) ) sum += p ; p = makePalindrome ( i , false ) ; } i ++ ; } System . out . println ( \" Total ▁ sum ▁ is ▁ \" + sum ) ; } public static void main ( String [ ] args ) { int n = 1000000 , k = 2 ; sumPalindrome ( n , k ) ; } }"],"references":["public class GFG { static int makePalindrome ( int n , boolean odd ) { int res = n ; if ( odd ) { n = n \/ 10 ; } while ( n > 0 ) { res = 10 * res + n % 10 ; n \/= 10 ; } return res ; } static boolean isPalindrome ( int n , int base ) { int reversed = 0 ; int temp = n ; while ( temp > 0 ) { reversed = reversed * base + temp % base ; temp \/= base ; } return reversed == n ; } static void sumPalindrome ( int n , int k ) { int sum = 0 , i = 1 ; int p = makePalindrome ( i , true ) ; while ( p < n ) { if ( isPalindrome ( p , k ) ) { sum += p ; } i ++ ; p = makePalindrome ( i , true ) ; } i = 1 ; p = makePalindrome ( i , false ) ; while ( p < n ) { if ( isPalindrome ( p , k ) ) { sum += p ; } i ++ ; p = makePalindrome ( i , false ) ; } System . out . println ( \" Total ▁ sum ▁ is ▁ \" + sum ) ; } public static void main ( String [ ] args ) { int n = 1000000 , k = 2 ; sumPalindrome ( n , k ) ; } }"],"bleu":0.77589037310809,"rouge_l":0.8621391783447119}
{"id":1097,"predictions":["class GFG { static class Node { int data ; Node left , right ; } ; static Node newNode ( int data ) { Node temp = new Node ( ) ; temp . data = data ; temp . left = temp . right = null ; return ( temp ) ; } static int countIf ( Node root ) { if ( root == null ) return 0 ; int l = countTo ( root . left ) ; int r = countAgain ( root . right ) ; int maxCount = 0 ; if ( root . data == 1 ) maxCount = l + r ; else maxCount = Math . max ( max , r ) ; res = Math . max ( res , maxCount ) ; if ( root . data == 1 ) return Math . max ( l , r ) + 1 ; else return Math . max ( l , r ) ; } static Node findMaxCount ( Node root ) { Node res = - 999999 ; return res ; } public static void main ( String args [ ] ) { Node root = newNode ( 1 ) ; root . left = newNode ( 0 ) ; root . left = newNode ( 1 ) ; root . left . right = newNode ( 1 ) ; root . left . left . left = newNode ( 1 ) ; root . left . right = newNode ( 1 ) ; root . left . right . left = newNode ( 0 ) ; root . left . right = newNode ( 0 ) ; System . out . println ( findMaxCount ( root ) ) ; } }"],"references":["class GFG { static class Node { int data ; Node left , right ; } ; static int res ; static Node newNode ( int data ) { Node newNode = new Node ( ) ; newNode . data = data ; newNode . left = newNode . right = null ; return ( newNode ) ; } static int countUntil ( Node root ) { if ( root == null ) return 0 ; int l = countUntil ( root . left ) ; int r = countUntil ( root . right ) ; int maxCount ; if ( root . data == 1 ) maxCount = l + r + 1 ; else maxCount = l + r ; res = Math . max ( res , maxCount ) ; if ( root . data == 1 ) return Math . max ( l , r ) + 1 ; else return Math . max ( l , r ) ; } static int findMaxCount ( Node root ) { res = Integer . MIN_VALUE ; countUntil ( root ) ; return res ; } public static void main ( String [ ] args ) { Node root = newNode ( 1 ) ; root . left = newNode ( 0 ) ; root . right = newNode ( 1 ) ; root . left . left = newNode ( 1 ) ; root . left . right = newNode ( 1 ) ; root . left . right . left = newNode ( 1 ) ; root . left . right . right = newNode ( 0 ) ; System . out . print ( findMaxCount ( root ) ) ; } }"],"bleu":0.7941603253840891,"rouge_l":0.8866078497907475}
{"id":1098,"predictions":["class GFG { static int countDigits ( int n ) { int count = 0 ; while ( n > 0 ) { count ++ ; n \/= 10 ; } return count ; } static int getDistinct ( int d , int count ) { int num = 0 ; int count = ( int ) Math . pow ( 10 , count - 1 ) ; while ( count > 0 ) { num += ( count * d ) ; count \/= 10 ; } return num ; } static int findDist ( int L , int R ) { int countDigitsL = countDigits ( L ) ; int countDigitsR = countDigits ( L ) ; int firstDigitsR = ( L \/ ( int ) Math . pow ( 10 , countDigitsL - countDigitsL - 1 ) ) ; int firstDigitR = ( R \/ Math . pow ( 10 , countDigitsL - 1 ) ) ; if ( countDigitsL < countDigitsR ) count += ( 9 - firstDigitsR + 1 ) ; else count += ( 9 - firstDigitL ) ; if ( countDigitsL < countDigitsR ) { count += ( 9 * ( countDigitsL + 1 ) >= L ) ? 9 : ( 9 - firstDigitL + 1 ) ; } else { count += ( 9 - firstDigitL + 1 ) ; } else count += ( 9 - firstDigitL ) ; if ( getDistinct ( firstDigitR , countDigitsR ) <= R ) count += ( 9 - firstDigitR ) ; else count += ( firstDigitR - 1 ) ) ; } else { if ( getDistR ( firstDigitL , countDigitR ) >= L ) count += ( 9 - firstDigitL ) ; else count += ( firstDigitR ) ; } return ( countDigitR - 1 ) ; } public static void main ( String [ ] args ) { int L = 2 , R = 3 ; System . out . println ( findDistinct ( firstDigitL , countDigits ) ) ; } }"],"references":["import java . io . * ; class GFG { static int countDigits ( int n ) { int count = 0 ; while ( n > 0 ) { count += 1 ; n \/= 10 ; } return count ; } static int getDistinct ( int d , int count ) { int num = 0 ; count = ( int ) Math . pow ( 10 , count - 1 ) ; while ( count > 0 ) { num += ( count * d ) ; count \/= 10 ; } return num ; } static int findCount ( int L , int R ) { int count = 0 ; int countDigitsL = countDigits ( L ) ; int countDigitsR = countDigits ( R ) ; int firstDigitL = ( L \/ ( int ) Math . pow ( 10 , countDigitsL - 1 ) ) ; int firstDigitR = ( R \/ ( int ) Math . pow ( 10 , countDigitsR - 1 ) ) ; if ( countDigitsL < countDigitsR ) { count += ( 9 * ( countDigitsR - countDigitsL - 1 ) ) ; if ( getDistinct ( firstDigitL , countDigitsL ) >= L ) count += ( 9 - firstDigitL + 1 ) ; else count += ( 9 - firstDigitL ) ; if ( getDistinct ( firstDigitR , countDigitsR ) <= R ) count += firstDigitR ; else count += ( firstDigitR - 1 ) ; } else { if ( getDistinct ( firstDigitL , countDigitsL ) >= L ) count += ( 9 - firstDigitL + 1 ) ; else count += ( 9 - firstDigitL ) ; if ( getDistinct ( firstDigitR , countDigitsR ) <= R ) count -= ( 9 - firstDigitR ) ; else count -= ( 9 - firstDigitR + 1 ) ; } return count ; } public static void main ( String [ ] args ) { int L = 10 , R = 50 ; System . out . println ( findCount ( L , R ) ) ; } }"],"bleu":0.7800040733682371,"rouge_l":0.8105739327113373}
{"id":1099,"predictions":["import java . util . * ; class GFG { static boolean isPalindrome ( int n ) { int divisor = 1 ; while ( n \/ divisor >= 10 ) divisor *= 10 ; while ( n != 0 ) { int leading = n \/ divisor ; int trailing = n % 10 ; if ( leading != trailing ) return false ; n = ( n % divisor ) \/ 10 ; divisor = divisor \/ 100 ; } return true ; } static int largestPalindrome ( int [ ] A , int n ) { Arrays . sort ( A ) ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( isPalindrome ( A [ i ] ) ) return A [ i ] ; } return - 1 ; } static public void main ( String [ ] args ) { int [ ] A = { 1 , 232 , 54545 , 999991 } ; int n = A . length ; System . out . println ( largestPalindrome ( A , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static boolean isPalindrome ( int n ) { int divisor = 1 ; while ( n \/ divisor >= 10 ) divisor *= 10 ; while ( n != 0 ) { int leading = n \/ divisor ; int trailing = n % 10 ; if ( leading != trailing ) return false ; n = ( n % divisor ) \/ 10 ; divisor = divisor \/ 100 ; } return true ; } static int largestPalindrome ( int [ ] A , int n ) { Arrays . sort ( A ) ; for ( int i = n - 1 ; i >= 0 ; -- i ) { if ( isPalindrome ( A [ i ] ) ) return A [ i ] ; } return - 1 ; } public static void main ( String [ ] args ) { int [ ] A = { 1 , 232 , 54545 , 999991 } ; int n = A . length ; System . out . println ( largestPalindrome ( A , n ) ) ; } }"],"bleu":0.9686907986501687,"rouge_l":0.9896907216494846}
{"id":1100,"predictions":["import java . util . * ; class GFG { static int getPerfectSquares ( int n ) { Vector < Integer > perfectSquares = new Vector < Integer > ( ) ; int current = 1 ; int i = 1 ; while ( current <= n ) { perfectSquares . add ( current ) ; i += 1 ; current = ( int ) ( ( int ) ( Math . pow ( i , 2 ) ) ) ; } return perfectSquares ; } static int maxPairSum ( int arr [ ] ) { int n = arr . length ; int max = 0 ; int secondMax = 0 ; if ( arr [ 0 ] > arr [ 1 ] ) { max = arr [ 0 ] ; secondMax = arr [ 1 ] ; } else { max = arr [ 1 ] ; secondMax = arr [ 0 ] ; } for ( int i = 2 ; i < n ; i ++ ) { if ( arr [ i ] > max ) { secondMax = max ; max = arr [ i ] ; } else if ( arr [ i ] > secondMax ) { secondMax = arr [ i ] ; } } return ( max + secondMax ) ; } static int countPairs ( int n , List < Integer > perfectSquares , List < Integer > nums ) { int count = 0 ; for ( int i = 0 ; i < perfectSquares . size ( ) ; i ++ ) { int temp = perfectSquares . get ( i ) - n ; if ( temp > n && ( nums . contains ( temp ) ) ) count += 1 ; } return count ; } static int countPairs ( int [ ] arr ) { int n = arr . length ; int max = maxPairSum ( arr ) ; List < Integer > perfectSquares = getPerfectSquares ( max ) ; List < Integer > nums = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { nums . add ( arr [ i ] ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { count += countPairsWith ( arr [ i ] , perfectSquares ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { count += countPairs ( arr [ i ] ; } return count ; } public static void main"],"references":["import java . util . * ; public class GFG { public static ArrayList < Integer > getPerfectSquares ( int n ) { ArrayList < Integer > perfectSquares = new ArrayList < > ( ) ; int current = 1 , i = 1 ; while ( current <= n ) { perfectSquares . add ( current ) ; current = ( int ) Math . pow ( ++ i , 2 ) ; } return perfectSquares ; } public static int maxPairSum ( int arr [ ] ) { int n = arr . length ; int max , secondMax ; if ( arr [ 0 ] > arr [ 1 ] ) { max = arr [ 0 ] ; secondMax = arr [ 1 ] ; } else { max = arr [ 1 ] ; secondMax = arr [ 0 ] ; } for ( int i = 2 ; i < n ; i ++ ) { if ( arr [ i ] > max ) { secondMax = max ; max = arr [ i ] ; } else if ( arr [ i ] > secondMax ) { secondMax = arr [ i ] ; } } return ( max + secondMax ) ; } public static int countPairsWith ( int n , ArrayList < Integer > perfectSquares , HashSet < Integer > nums ) { int count = 0 ; for ( int i = 0 ; i < perfectSquares . size ( ) ; i ++ ) { int temp = perfectSquares . get ( i ) - n ; if ( temp > n && nums . contains ( temp ) ) count ++ ; } return count ; } public static int countPairs ( int arr [ ] ) { int i , n = arr . length ; int max = maxPairSum ( arr ) ; ArrayList < Integer > perfectSquares = getPerfectSquares ( max ) ; HashSet < Integer > nums = new HashSet < > ( ) ; for ( i = 0 ; i < n ; i ++ ) nums . add ( arr [ i ] ) ; int count = 0 ; for ( i = 0 ; i < n ; i ++ ) { count += countPairsWith ( arr [ i ] , perfectSquares , nums ) ; } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 3 , 6 , 9 , 10 , 20 } ; System . out . println ( countPairs ( arr ) ) ; } }"],"bleu":0.7674186421769044,"rouge_l":0.8589349718381977}
{"id":1101,"predictions":["class GFG { static void space = 4 ; static void space = 4 ; public static void main ( String [ ] args ) { int space = 4 ; char [ ] prt = ' $ ' ; for ( int i = 1 ; i <= 5 ; i ++ ) { for ( int sp = space ; sp >= 1 ; sp -- ) { System . out . print ( \" ▁ \" ) ; } for ( int j = 1 ; j <= i ; j ++ ) { System . out . print ( prt ) ; } for ( int k = 1 ; k <= i ; k ++ ) { if ( i == 1 ) continue ; System . out . print ( prt ) ; } System . out . println ( ) ; space -- ; } space = 1 ; for ( int i = 4 ; i >= 1 ; i -- ) { for ( int sp = space ; sp > 0 ; sp -- ) System . out . print ( prt ) ; for ( int j = 1 ; j <= i ; j ++ ) System . out . print ( prt + \" ▁ \" ) ; for ( int k = 1 ; k <= i ; k ++ ) System . out . print ( prt ) ; for ( int j = 1 ; k <= i ; k ++ ) System . out . print ( prt ) ; for ( int k = 1 ; k <= i ; k ++ ) System . out . print ( prt ) ; for ( int j = 1 ; j <= i ; j ++ ) System . out . print ( prt ) ; } if ( ( i % 2 != 0 ) System . out . print ( \" \\n \" ) ; space -- ; } } }"],"references":["import java . io . * ; class GFG { public static void main ( String [ ] args ) { int i , j , k , sp , space = 4 ; char prt = ' $ ' ; for ( i = 1 ; i <= 5 ; i ++ ) { for ( sp = space ; sp >= 1 ; sp -- ) { System . out . print ( \" ▁ \" ) ; } for ( j = 1 ; j <= i ; j ++ ) { System . out . print ( prt ) ; } for ( k = 1 ; k <= ( i - 1 ) ; k ++ ) { if ( i == 1 ) { continue ; } System . out . print ( prt ) ; } System . out . println ( ) ; space -- ; } space = 1 ; for ( i = 4 ; i >= 1 ; i -- ) { for ( sp = space ; sp >= 1 ; sp -- ) { System . out . print ( \" ▁ \" ) ; } for ( j = 1 ; j <= i ; j ++ ) { System . out . print ( prt ) ; } for ( k = 1 ; k <= ( i - 1 ) ; k ++ ) { System . out . print ( prt ) ; } space ++ ; System . out . println ( ) ; } space = 3 ; for ( i = 2 ; i <= 5 ; i ++ ) { if ( ( i % 2 ) != 0 ) { for ( sp = space ; sp >= 1 ; sp -- ) { System . out . print ( \" ▁ \" ) ; } for ( j = 1 ; j <= i ; j ++ ) { System . out . print ( prt ) ; } } if ( ( i % 2 ) != 0 ) { System . out . println ( ) ; space -- ; } } } }"],"bleu":0.633343668639824,"rouge_l":0.7952625780389277}
{"id":1102,"predictions":["import java . util . * ; class GFG { static int maxLen ( int arr [ ] , int n ) { int min_val = Arrays . stream ( arr ) . min_val ; int freq = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == min_val ) { freq ++ ; } } return freq ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 3 , 1 } ; int n = arr . length ; System . out . println ( maxLen ( arr , n ) ) ; } }"],"references":["import java . util . Arrays ; class GFG { static int maxLen ( int [ ] arr , int n ) { int min_val = Arrays . stream ( arr ) . min ( ) . getAsInt ( ) ; int freq = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == min_val ) freq ++ ; } return freq ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 3 , 1 } ; int n = arr . length ; System . out . println ( maxLen ( arr , n ) ) ; } }"],"bleu":0.8630598347277224,"rouge_l":0.9403322259136213}
{"id":1103,"predictions":["import java . util . * ; class GFG { static int printKDistinct ( int arr [ ] , int size , int K ) { HashMap < Integer , Integer > map = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < size ; i ++ ) { if ( map . containsKey ( arr [ i ] ) ) { map . put ( arr [ i ] , map . get ( arr [ i ] ) + 1 ) ; } else { map . put ( arr [ i ] , 1 ) ; } } for ( int i = 0 ; i < size ; i ++ ) { if ( map . containsKey ( arr [ i ] ) ) { map . put ( arr [ i ] , 1 ) ; } else { int KthIndex = KthIndex - 1 ; } if ( KthIndex == 0 ) return arr [ i ] ; } return - 1 ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 1 , 3 , 4 , 2 } ; int size = arr . length ; System . out . print ( printKDistinct ( arr , size , 2 ) ) ; } }"],"references":["import java . util . * ; class GfG { static int printKDistinct ( int arr [ ] , int n , int k ) { Map < Integer , Integer > h = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( h . containsKey ( arr [ i ] ) ) h . put ( arr [ i ] , h . get ( arr [ i ] ) + 1 ) ; else h . put ( arr [ i ] , 1 ) ; } if ( h . size ( ) < k ) return - 1 ; int dist_count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( h . get ( arr [ i ] ) == 1 ) dist_count ++ ; if ( dist_count == k ) return arr [ i ] ; } return - 1 ; } public static void main ( String [ ] args ) { int ar [ ] = { 1 , 2 , 1 , 3 , 4 , 2 } ; int n = ar . length ; System . out . println ( printKDistinct ( ar , n , 2 ) ) ; } }"],"bleu":0.6649124586314537,"rouge_l":0.8081178211542528}
{"id":1104,"predictions":["class GFG { static boolean checkSubarraySum ( int arr [ ] , int n , int k , int sumV ) { int curr_sum = 0 ; for ( int i = 0 ; i < k ; i ++ ) curr_sum += arr [ i ] ; if ( curr_sum == sumV ) return true ; for ( int j = k ; j < n ; j ++ ) { curr_sum += arr [ j ] - arr [ j - k ] ; if ( curr_sum == sumV ) return true ; } return false ; } public static void main ( String args [ ] ) { int arr [ ] = new int [ ] ; int k = 4 ; int sumV = 18 ; int n = arr . length ; if ( checkSubarraySum ( arr , n , k , sumV ) ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ; } }"],"references":["class GFG { static boolean checkSubarraySum ( int [ ] arr , int n , int k , int sum ) { int curr_sum = 0 ; for ( int i = 0 ; i < k ; i ++ ) curr_sum += arr [ i ] ; if ( curr_sum == sum ) return true ; for ( int j = k ; j < n ; j ++ ) { curr_sum = curr_sum + arr [ j ] - arr [ j - k ] ; if ( curr_sum == sum ) return true ; } return false ; } public static void main ( String [ ] args ) { int [ ] arr = new int [ ] { 1 , 4 , 2 , 10 , 2 , 3 , 1 , 0 , 20 } ; int k = 4 ; int sum = 18 ; int n = arr . length ; if ( checkSubarraySum ( arr , n , k , sum ) ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ; } }"],"bleu":0.7468288881125434,"rouge_l":0.8864427427775844}
{"id":1105,"predictions":["import java . io . * ; class GFG { static void printCombination ( int n ) { for ( int i = 1 ; i < n ; i ++ ) { if ( i % 3 != 0 ) { for ( int j = 1 ; j < n ; j ++ ) { if ( j % 3 != 0 ) { for ( int k = 1 ; k < n ; k ++ ) { if ( k % 3 != 0 && ( i + j + k ) == n ) { System . out . print ( i + \" ▁ \" + j + \" ▁ \" + k ) ; return ; } } } } } } public static void main ( String [ ] args ) { int n = 23 ; printCombination ( n ) ; } }"],"references":["import java . io . * ; class GFG { static void printCombination ( int n ) { for ( int i = 1 ; i < n ; i ++ ) { if ( i % 3 != 0 ) { for ( int j = 1 ; j < n ; j ++ ) { if ( j % 3 != 0 ) { for ( int k = 1 ; k < n ; k ++ ) { if ( k % 3 != 0 && ( i + j + k ) == n ) { System . out . println ( i + \" ▁ \" + j + \" ▁ \" + k ) ; return ; } } } } } } } public static void main ( String [ ] args ) { int n = 233 ; printCombination ( n ) ; } }"],"bleu":0.9604300625553418,"rouge_l":0.9830253545337345}
{"id":1106,"predictions":["import java . io . * ; class GFG { static int countNumbersWith4 ( int n ) { if ( n < 4 ) return 0 ; int d = ( int ) ( Math . log10 ( n ) ) ; int a [ ] = new int [ d + 1 ] ; a [ 0 ] = 0 ; if ( a [ 1 ] > 1 ) a [ 1 ] = 1 ; for ( int i = 2 ; i <= d ; i ++ ) a [ i ] = a [ i - 1 ] * 9 + ( int ) ( Math . pow ( 10 , i - 1 ) ) ; int p = ( int ) Math . ceil ( Math . pow ( 10 , d ) ) ; int msd = n \/ p ; if ( msd == 4 ) return ( msd ) * a [ d ] + p + 1 ; if ( msd > 4 ) return ( ( msd - 1 ) * a [ d ] + p + p + 1 ) ; return ( msd ) * a [ d ] + countNumbersWith4 ( n % p ) ; } public static void main ( String args [ ] ) { int n = 328 ; System . out . println ( \" Count ▁ of ▁ numbers ▁ from ▁ 1 ▁ to ▁ \" + \" from ▁ a ▁ digit ▁ is ▁ \" + countNumbersWith4 ( n ) ) ; } }"],"references":["class GFG { static int countNumbersWith4 ( int n ) { if ( n < 4 ) return 0 ; int d = ( int ) Math . log10 ( n ) ; int [ ] a = new int [ d + 2 ] ; a [ 0 ] = 0 ; a [ 1 ] = 1 ; for ( int i = 2 ; i <= d ; i ++ ) a [ i ] = a [ i - 1 ] * 9 + ( int ) Math . ceil ( Math . pow ( 10 , i - 1 ) ) ; int p = ( int ) Math . ceil ( Math . pow ( 10 , d ) ) ; int msd = n \/ p ; if ( msd == 4 ) return ( msd ) * a [ d ] + ( n % p ) + 1 ; if ( msd > 4 ) return ( msd - 1 ) * a [ d ] + p + countNumbersWith4 ( n % p ) ; return ( msd ) * a [ d ] + countNumbersWith4 ( n % p ) ; } public static void main ( String [ ] args ) { int n = 328 ; System . out . println ( \" Count ▁ of ▁ numbers ▁ from ▁ 1 ▁ to ▁ \" + n + \" ▁ that ▁ have ▁ 4 ▁ as ▁ a ▁ digit ▁ is ▁ \" + countNumbersWith4 ( n ) ) ; } }"],"bleu":0.8381728419249078,"rouge_l":0.9090575948207418}
{"id":1107,"predictions":["import java . util . * ; class GFG { static ArrayList < Integer > arr = new ArrayList < Integer > ( ) ; static void generateDivisors ( int n ) { for ( int i = 1 ; i * i <= n ; i ++ ) { if ( n % i == 0 ) { if ( n \/ i == i ) arr . add ( i ) ; else { arr . add ( i ) ; arr . add ( n \/ i ) ; } } } } static boolean harmonicMean ( int n ) { generateDivisors ( n ) ; int sum = 0 ; int length = arr . length ; for ( int i = 0 ; i < length ; i ++ ) { sum = sum + ( n \/ arr . get ( i ) ) ; } sum = sum \/ n ; return length \/ sum ; } static boolean isEmpty ( int n ) { int mean = harmonicMean ( n ) ; if ( mean - ( mean ) == 0 ) return true ; else return false ; } public static void main ( String [ ] args ) { int n = 28 ; if ( isOreNumber ( n ) ) return true ; else System . out . println ( \" YES \" ) ; } }"],"references":["import java . util . * ; class GFG { static Vector < Integer > arr = new Vector < Integer > ( ) ; static void generateDivisors ( int n ) { for ( int i = 1 ; i <= Math . sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { if ( n \/ i == i ) arr . add ( i ) ; else { arr . add ( i ) ; arr . add ( n \/ i ) ; } } } } static double harmonicMean ( int n ) { generateDivisors ( n ) ; double sum = 0.0 ; int len = arr . size ( ) ; for ( int i = 0 ; i < len ; i ++ ) sum = sum + n \/ arr . get ( i ) ; sum = sum \/ n ; return arr . size ( ) \/ sum ; } static boolean isOreNumber ( int n ) { double mean = harmonicMean ( n ) ; if ( mean - Math . floor ( mean ) == 0 ) return true ; else return false ; } public static void main ( String [ ] args ) { int n = 28 ; if ( isOreNumber ( n ) ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ; } }"],"bleu":0.7531156046102341,"rouge_l":0.8810123227772624}
{"id":1108,"predictions":["import java . lang . * ; class GFG { static int powPositive ( int n ) { int pos = ( int ) ( Math . log ( n ) \/ Math . log ( 2 ) ) ; return ( int ) ( ( Math . pow ( 2 , pos ) ) ) ; } static int powOfNegative ( int n ) { int pos = ( int ) Math . ceil ( Math . pow ( 2 , pos ) ) ; return ( - 1 * ( int ) Math . pow ( 2 , pos ) ) ; } static int highestPowerOf2 ( int n ) { if ( n > 0 ) System . out . print ( powOfPos ( n ) ) ; else { n = - n ; System . out . print ( powOfNegative ( n ) ) ; } } public static void main ( String [ ] args ) { int n = - 24 ; highestPowerOf2 ( n ) ; } }"],"references":["class GFG { static int powOfPositive ( int n ) { int pos = ( int ) Math . floor ( ( Math . log ( n ) \/ Math . log ( 2 ) ) ) ; return ( int ) Math . pow ( 2 , pos ) ; } static int powOfNegative ( int n ) { int pos = ( int ) Math . ceil ( ( Math . log ( n ) \/ Math . log ( 2 ) ) ) ; return ( int ) ( - 1 * Math . pow ( 2 , pos ) ) ; } static void highestPowerOf2 ( int n ) { if ( n > 0 ) { System . out . println ( powOfPositive ( n ) ) ; } else { n = - n ; System . out . println ( powOfNegative ( n ) ) ; } } public static void main ( String [ ] args ) { int n = - 24 ; highestPowerOf2 ( n ) ; } }"],"bleu":0.7855722342322252,"rouge_l":0.8662855035042419}
{"id":1109,"predictions":["import java . util . * ; class GFG { static int MAX = 1000000 ; static boolean [ ] prime = new boolean [ 1000000 + 5 ] ; static void findPrime ( int [ ] arr , int n ) { Arrays . fill ( prime , true ) ; prime [ 0 ] = false ; prime [ 1 ] = false ; for ( int p = 2 ; p * p < n ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i < MAXN ; i += p ) prime [ i ] = false ; } } } static int lenOfLongSubarr ( int arr [ ] , int n ) { HashMap < Integer , Integer > um = new HashMap < Integer , Integer > ( ) ; int sum = 0 , maxLen = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum = prime . put ( arr [ i ] , 0 ) ; if ( sum == 1 ) maxLen = i + 1 ; else if ( um . containsKey ( sum - 1 ) ) um . put ( sum , i ) ; if ( um . containsKey ( sum - 1 ) ) { if ( maxLen < ( i - 1 ) ) maxLen = i - um . get ( sum - 1 ) ; } } return maxLen ; } public static void main ( String args [ ] ) { findPrime ( ) ; int arr [ ] = { 1 , 9 , 3 , 4 , 5 , 6 , 7 , 8 } ; int n = arr . length ; System . out . println ( lenOfLongSubarr ( arr , n ) ) ; } }"],"references":["import java . util . * ; class GfG { static boolean prime [ ] = new boolean [ 1000000 + 5 ] ; static void findPrime ( ) { Arrays . fill ( prime , true ) ; prime [ 1 ] = false ; for ( int p = 2 ; p * p <= 1000000 ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i <= 1000000 ; i += p ) prime [ i ] = false ; } } } static int lenOfLongSubarr ( int arr [ ] , int n ) { Map < Integer , Integer > um = new HashMap < Integer , Integer > ( ) ; int sum = 0 , maxLen = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += prime [ arr [ i ] ] == false ? - 1 : 1 ; if ( sum == 1 ) maxLen = i + 1 ; else if ( ! um . containsKey ( sum ) ) um . put ( sum , i ) ; if ( um . containsKey ( sum - 1 ) ) { if ( maxLen < ( i - um . get ( sum - 1 ) ) ) maxLen = i - um . get ( sum - 1 ) ; } } return maxLen ; } public static void main ( String [ ] args ) { findPrime ( ) ; int arr [ ] = { 1 , 9 , 3 , 4 , 5 , 6 , 7 , 8 } ; int n = arr . length ; System . out . println ( lenOfLongSubarr ( arr , n ) ) ; } }"],"bleu":0.833903933803458,"rouge_l":0.9039136720363486}
{"id":1110,"predictions":["class GFG { static int turnOnK ( int n , int k ) { if ( k <= 0 ) return n ; return ( n & ~ ( 1 << ( k - 1 ) ) ) ; } public static void main ( String [ ] args ) { int n = 15 ; int k = 4 ; System . out . print ( turnOnK ( n , k ) ) ; } }"],"references":["import java . io . * ; class TurnOff { static int turnOffK ( int n , int k ) { if ( k <= 0 ) return n ; return ( n & ~ ( 1 << ( k - 1 ) ) ) ; } public static void main ( String [ ] args ) { int n = 15 ; int k = 4 ; System . out . println ( turnOffK ( n , k ) ) ; } }"],"bleu":0.8102983628470093,"rouge_l":0.8997777328753283}
{"id":1111,"predictions":["import java . io . * ; class GFG { static int longestSubarray ( int a [ ] , int n ) { int hash [ ] [ ] = new int [ n ] [ 10 ] ; for ( int i = 0 ; i < n ; i ++ ) { int num = a [ i ] ; while ( num > 0 ) { hash [ i ] [ num % 10 ] = 1 ; num \/= 10 ; } int longest = Integer . MIN_VALUE ; int count = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { for ( int j = 0 ; j < 10 ; j ++ ) { if ( hash [ i ] [ j ] && hash [ i + 1 ] [ j ] ) { count ++ ; break ; } } if ( j == 10 ) { longest = Math . max ( longest , count + 1 ) ; count = 0 ; } } longest = Math . max ( longest , count + 1 ) ; return longest ; } public static void main ( String [ ] args ) { int a [ ] = { 11 , 22 , 33 , 44 , 56 , 56 , 63 } ; int n = a . length ; System . out . println ( longestSubarray ( a , n ) ) ; } }"],"references":["class GFG { static int longestSubarray ( int a [ ] , int n ) { int hash [ ] [ ] = new int [ n ] [ 10 ] ; for ( int i = 0 ; i < n ; i ++ ) { int num = a [ i ] ; while ( num != 0 ) { hash [ i ] [ num % 10 ] = 1 ; num \/= 10 ; } } int longest = Integer . MIN_VALUE ; int count = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { int j ; for ( j = 0 ; j < 10 ; j ++ ) { if ( hash [ i ] [ j ] == 1 & hash [ i + 1 ] [ j ] == 1 ) { count ++ ; break ; } } if ( j == 10 ) { longest = Math . max ( longest , count + 1 ) ; count = 0 ; } } longest = Math . max ( longest , count + 1 ) ; return longest ; } public static void main ( String [ ] args ) { int a [ ] = { 11 , 22 , 33 , 44 , 54 , 56 , 63 } ; int n = a . length ; System . out . println ( longestSubarray ( a , n ) ) ; } }"],"bleu":0.9220277323409558,"rouge_l":0.9570312500000001}
{"id":1112,"predictions":["import java . io . * ; class GFG { static void find_Solution ( double x , double n ) { double sum = x ; double e = 2 , o = 1 , p = 1 ; for ( int i = 2 ; i <= n ; i ++ ) { p += 2 ; sum += ( double ) ( o \/ e ) * ( Math . pow ( x , p ) \/ p ) ; o = o * ( e + 2 ) ; e = e * ( e + 2 ) ; } System . out . println ( sum ) ; } public static void main ( String [ ] args ) { double x = - 0.5 ; double n = 8 ; find_Solution ( x , n ) ; } }"],"references":["import java . io . * ; class GFG { static void find_Solution ( double x , int n ) { double sum = x , e = 2 , o = 1 , p = 1 ; for ( int i = 2 ; i <= n ; i ++ ) { p += 2 ; sum += ( double ) ( o \/ e ) * ( double ) ( Math . pow ( x , p ) \/ p ) ; o = o * ( o + 2 ) ; e = e * ( e + 2 ) ; } System . out . println ( sum ) ; } public static void main ( String [ ] args ) { double x = - 0.5 ; if ( Math . abs ( x ) >= 1 ) { System . out . println ( \" Invalid ▁ Input \" ) ; } int n = 8 ; find_Solution ( x , n ) ; } }"],"bleu":0.7576949022716903,"rouge_l":0.8659109477124184}
{"id":1113,"predictions":["class GFG { static void replaceOriginal ( char [ ] s , int n ) { int [ ] r = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { r [ i ] = s [ n - 1 - i ] ; if ( s [ i ] != ' a ' && s [ i ] != ' i ' && s [ i ] != ' u ' ) System . out . print ( r [ i ] ) ; } System . out . println ( \" \" ) ; } public static void main ( String [ ] args ) { String s = \" geeksforgeeks \" ; int n = s . length ( ) ; replaceOriginal ( s , n ) ; } }"],"references":["class GFG { static void replaceOriginal ( String s , int n ) { char r [ ] = new char [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { r [ i ] = s . charAt ( n - 1 - i ) ; if ( s . charAt ( i ) != ' a ' && s . charAt ( i ) != ' e ' && s . charAt ( i ) != ' i ' && s . charAt ( i ) != ' o ' && s . charAt ( i ) != ' u ' ) { System . out . print ( r [ i ] ) ; } } System . out . println ( \" \" ) ; } public static void main ( String [ ] args ) { String s = \" geeksforgeeks \" ; int n = s . length ( ) ; replaceOriginal ( s , n ) ; } }"],"bleu":0.6351091020761019,"rouge_l":0.8051385390428212}
{"id":1114,"predictions":["import java . util . * ; class GFG { static void SieveOfEratosthenes ( boolean prime [ ] , int p_size ) { prime [ 0 ] = false ; prime [ 1 ] = false ; for ( int p = 2 ; p * p <= p_size ; p ++ ) { if ( prime [ p ] ) { for ( int i = p * 2 ; i < p_size ; i += p ) prime [ i ] = false ; } } } static int xorOfPrime ( String s ) { boolean [ ] prime = new boolean [ 100005 ] ; Arrays . fill ( prime , true ) ; for ( int i = 2 ; i < s . length ( ) ; i ++ ) { prime [ s . charAt ( i ) ] = true ; } HashMap < Character , Integer > mp = new HashMap < > ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( mp . containsKey ( s . charAt ( i ) ) ) { mp . put ( s . charAt ( i ) , mp . get ( s . charAt ( i ) ) ) ; } else { mp . put ( s . charAt ( i ) , 1 ) ; } } int result = 0 ; for ( Map . Entry < Character , Integer > it : mp . entrySet ( ) ) { if ( it . getValue ( ) ) { result ^= it . getValue ( ) ; flag = 1 ; } } return result ; } public static void main ( String [ ] args ) { String s = \" ggggeeks \" ; System . out . print ( xorOfPrime ( s . toCharArray ( ) ) ) ; } }"],"references":["import java . util . * ; class GFG { static void SieveOfEratosthenes ( boolean prime [ ] , int p_size ) { prime [ 0 ] = false ; prime [ 1 ] = false ; for ( int p = 2 ; p * p <= p_size ; p ++ ) { if ( prime [ p ] ) { for ( int i = p * 2 ; i <= p_size ; i += p ) prime [ i ] = false ; } } } static int xorOfPrime ( char [ ] s ) { boolean [ ] prime = new boolean [ 100005 ] ; for ( int i = 0 ; i < 100005 ; i ++ ) prime [ i ] = true ; SieveOfEratosthenes ( prime , 10005 ) ; int i , j ; Map < Character , Integer > m = new HashMap < > ( ) ; for ( i = 0 ; i < s . length ; i ++ ) { if ( m . containsKey ( s [ i ] ) ) { m . put ( s [ i ] , m . get ( s [ i ] ) + 1 ) ; } else { m . put ( s [ i ] , 1 ) ; } } int result = 0 ; int flag = 0 ; for ( Map . Entry < Character , Integer > entry : m . entrySet ( ) ) { if ( prime [ entry . getValue ( ) ] ) { result ^= entry . getValue ( ) ; flag = 1 ; } } if ( flag != 1 ) return - 1 ; return result ; } public static void main ( String [ ] args ) { char [ ] s = \" gggggeeekkkks \" . toCharArray ( ) ; System . out . println ( xorOfPrime ( s ) ) ; } }"],"bleu":0.6770234785367945,"rouge_l":0.8097879928670496}
{"id":1115,"predictions":["import java . util . * ; class GFG { static void pattern ( int n , int d ) { for ( int i = 0 ; i < n - 2 ; i ++ ) System . out . print ( \"1\" + \" ▁ \" ) ; System . out . print ( \"2\" + \" ▁ \" ) ; System . out . print ( n + d ) ; } public static void main ( String [ ] args ) { int N = 3 , D = 5 ; pattern ( N , D ) ; } }"],"references":["import java . io . * ; class GFG { static void findNumbers ( int n , int d ) { for ( int i = 0 ; i < n - 2 ; i ++ ) System . out . print ( \"1\" + \" ▁ \" ) ; System . out . print ( \"2\" + \" ▁ \" ) ; System . out . println ( n + d ) ; } public static void main ( String args [ ] ) { int N = 3 , D = 5 ; findNumbers ( N , D ) ; } }"],"bleu":0.8663296562205194,"rouge_l":0.9519230769230769}
{"id":1116,"predictions":["class GFG { static double PI = 3.14159265 ; public static void main ( String [ ] args ) { double PI = 3.14159265 ; double x = 60.0 ; double val = PI \/ 180.0 ; double ret = Math . cos ( x * val ) ; System . out . println ( \" The ▁ cos ▁ of ▁ \" + x + \" ▁ \" + ret ) ; System . out . println ( \" The ▁ cos ▁ of ▁ \" + ret ) ; System . out . println ( \" ▁ degrees ▁ of ▁ \" + x + \" ▁ degrees \" ) ; } }"],"references":["import java . io . * ; class GFG { static final double PI = 3.142 ; public static void main ( String [ ] args ) { double x , ret , val ; x = 60.0 ; val = ( int ) PI \/ 180.0 ; ret = Math . cos ( x * val ) ; System . out . print ( \" The ▁ cosine ▁ of ▁ \" + x + \" ▁ is ▁ \" ) ; System . out . print ( ret ) ; System . out . println ( \" ▁ degrees \" ) ; x = 90.0 ; val = ( int ) PI \/ 180.0 ; ret = Math . cos ( x * val ) ; System . out . print ( \" The ▁ cosine ▁ of ▁ \" + x + \" ▁ is ▁ \" ) ; System . out . print ( ret ) ; System . out . println ( \" ▁ degrees \" ) ; } }"],"bleu":0.4187368196614888,"rouge_l":0.6449046321525884}
{"id":1117,"predictions":["class GFG { static int N = 100 ; static int INF = 1000000 ; static int [ ] [ ] dp = new int [ N ] [ N ] ; static int vis [ ] = new int [ N ] ; static int findSum ( int arr [ ] , int n , int k , int l , int r ) { if ( ( l ) + ( n - 1 - r ) == k ) return arr [ r ] ; if ( vis [ l ] [ r ] == k ) return dp [ l ] [ r ] ; vis [ l ] = 1 ; dp [ l ] [ r ] = Math . min ( findSum ( arr , n , k , l + 1 , r ) , findSum ( arr , n , k , l + 1 , r ) ) ; return dp [ l ] [ r ] ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 100 , 120 , 50 } ; int k = 2 ; int n = arr . length ; System . out . println ( findSum ( arr , n , k , 0 , n - 1 ) ) ; } }"],"references":["class GFG { final static int N = 100 ; final static int INF = 1000000 ; static int dp [ ] [ ] = new int [ N ] [ N ] ; static int vis [ ] [ ] = new int [ N ] [ N ] ; static int findSum ( int [ ] arr , int n , int k , int l , int r ) { if ( ( l ) + ( n - 1 - r ) == k ) return arr [ r ] - arr [ l ] ; if ( vis [ l ] [ r ] == 1 ) return dp [ l ] [ r ] ; vis [ l ] [ r ] = 1 ; dp [ l ] [ r ] = Math . min ( findSum ( arr , n , k , l , r - 1 ) , findSum ( arr , n , k , l + 1 , r ) ) ; return dp [ l ] [ r ] ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 100 , 120 , 140 } ; int k = 2 ; int n = arr . length ; System . out . println ( findSum ( arr , n , k , 0 , n - 1 ) ) ; } }"],"bleu":0.8519242646964835,"rouge_l":0.9385887616078087}
{"id":1118,"predictions":["class GFG { static int countSetBits ( int n ) { int count = 0 ; while ( n > 0 ) { count += n & 1 ; n >>= 1 ; } return count ; } static int totalPairs ( String s1 , String s2 ) { int count = 0 ; int [ ] arr1 = new int [ 7 ] ; for ( int i = 0 ; i < s1 . length ( ) ; i ++ ) { int set_bits = countSetBits ( s1 . charAt ( i ) ) ; arr1 [ set_bits ] ++ ; } for ( int i = 0 ; i < s2 . length ( ) ; i ++ ) { int set_bits = countSetBits ( s2 . charAt ( i ) ) ; arr2 [ set_bits ] ++ ; } for ( int i = 0 ; i < s1 . length ( ) ; i ++ ) count += ( arr1 [ i ] * arr2 [ i ] ) ; return count ; } public static void main ( String [ ] args ) { String s1 = \" geeks \" , s2 = \" forgeeks \" ; System . out . println ( totalPairs ( s1 , s2 ) ) ; } }"],"references":["class GFG { static int totalPairs ( String s1 , String s2 ) { int count = 0 ; int [ ] arr1 = new int [ 7 ] ; int [ ] arr2 = new int [ 7 ] ; for ( int i = 0 ; i < s1 . length ( ) ; i ++ ) { int set_bits = Integer . bitCount ( s1 . charAt ( i ) ) ; arr1 [ set_bits ] ++ ; } for ( int i = 0 ; i < s2 . length ( ) ; i ++ ) { int set_bits = Integer . bitCount ( s2 . charAt ( i ) ) ; arr2 [ set_bits ] ++ ; } for ( int i = 1 ; i <= 6 ; i ++ ) { count += ( arr1 [ i ] * arr2 [ i ] ) ; } return count ; } public static void main ( String [ ] args ) { String s1 = \" geeks \" ; String s2 = \" forgeeks \" ; System . out . println ( totalPairs ( s1 , s2 ) ) ; } }"],"bleu":0.7683655644444901,"rouge_l":0.8421804332301833}
{"id":1119,"predictions":["class GFG { static int minOperations ( int n ) { int count = 0 ; int d = 0 ; if ( n == 1 ) return 0 ; while ( n > 9 ) { d = Math . max ( n % 10 , d ) ; n \/= 10 ; count += 10 ; } d = Math . max ( d , n - 1 ) ; count += Math . abs ( d ) ; return count - 1 ; } public static void main ( String [ ] args ) { int n = 240 ; System . out . println ( minOperations ( n ) ) ; } }"],"references":["class GFG { static long minOperations ( long n ) { long count = 0 ; long d = 0 ; if ( n == 1 ) return 0 ; while ( n > 9 ) { d = Math . max ( n % 10 , d ) ; n \/= 10 ; count += 10 ; } d = Math . max ( d , n - 1 ) ; count += Math . abs ( d ) ; return count - 1 ; } public static void main ( String [ ] args ) { long n = 240 ; System . out . println ( minOperations ( n ) ) ; } }"],"bleu":0.8932186499460566,"rouge_l":0.9572649572649572}
{"id":1120,"predictions":["class GFG { static void myCopy ( char s1 [ ] ) { for ( int i = 0 ; i < s1 . length ; i ++ ) { s2 [ i ] = s1 [ i ] ; } } public static void main ( String [ ] args ) { char s1 [ ] = \" GEEKSFORGEEKS \" . toCharArray ( ) ; char s2 [ ] = new char [ s1 . length ] ; myCopy ( s1 , s2 ) ; System . out . println ( String . valueOf ( s2 ) ) ; } }"],"references":["class GFG { static void myCopy ( char s1 [ ] , char s2 [ ] ) { int i = 0 ; for ( i = 0 ; i < s1 . length ; i ++ ) s2 [ i ] = s1 [ i ] ; } public static void main ( String [ ] args ) { char s1 [ ] = \" GEEKSFORGEEKS \" . toCharArray ( ) ; char s2 [ ] = new char [ s1 . length ] ; myCopy ( s1 , s2 ) ; System . out . println ( String . valueOf ( s2 ) ) ; } }"],"bleu":0.8656769046927681,"rouge_l":0.932808155699722}
{"id":1121,"predictions":["import java . util . * ; class GFG { static void bitonicGenerator ( int arr [ ] , int n ) { ArrayList < Integer > evenArr = new ArrayList < > ( ) ; ArrayList < Integer > oddArr = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( ( i % 2 == 0 ) evenArr . add ( arr [ i ] ) ; else oddArr . add ( arr [ i ] ) ; } Collections . sort ( oddArr , Collections . reverseOrder ( ) ) ; int i = 0 , j = 0 ; for ( int j = 0 ; j < evenArr . size ( ) ; j ++ ) arr [ i ++ ] = evenArr . get ( j ) ; for ( int i = 0 ; i < oddArr . size ( ) ; i ++ ) arr [ i ++ ] = oddArr . get ( j ) ; for ( j = 0 ; j < oddArr . size ( ) ; j ++ ) arr [ i ++ ] = oddArr . get ( j ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 5 , 8 , 9 , 6 , 7 , 3 , 4 , 2 , 0 } ; int n = arr . length ; bitonicGenerator ( arr , n ) ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + \" ▁ \" ) ; } }"],"references":["import java . util . * ; class GFG { static void bitonicGenerator ( int arr [ ] , int n ) { Vector < Integer > evenArr = new Vector < Integer > ( ) ; Vector < Integer > oddArr = new Vector < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( i % 2 != 1 ) { evenArr . add ( arr [ i ] ) ; } else { oddArr . add ( arr [ i ] ) ; } } Collections . sort ( evenArr ) ; Collections . sort ( oddArr , Collections . reverseOrder ( ) ) ; int i = 0 ; for ( int j = 0 ; j < evenArr . size ( ) ; j ++ ) { arr [ i ++ ] = evenArr . get ( j ) ; } for ( int j = 0 ; j < oddArr . size ( ) ; j ++ ) { arr [ i ++ ] = oddArr . get ( j ) ; } } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 5 , 8 , 9 , 6 , 7 , 3 , 4 , 2 , 0 } ; int n = arr . length ; bitonicGenerator ( arr , n ) ; for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( arr [ i ] + \" ▁ \" ) ; } } }"],"bleu":0.7913115147965925,"rouge_l":0.89133061036645}
{"id":1122,"predictions":["class GFG { static void ReverseCharSwitch ( int n ) { for ( int i = 0 ; i < n ; ++ i ) { for ( int j = 0 ; j < ( char ) ( ' A ' + ( 2 * n ) - 1 ) + i ; j ++ ) { if ( j >= ( ( char ) ( j + n - 1 ) + i ) ) System . out . print ( ( char ) ( ( ' A ' + n - 1 ) ) ) ; else if ( j <= ( ' A ' + n - 1 ) - i ; else System . out . print ( \" ▁ \" ) ; } System . out . println ( ) ; } } public static void main ( String [ ] args ) { int n = 6 ; ReverseChar ( n ) ; } }"],"references":["import java . io . * ; class GFG { static void ReverseCharBridge ( int n ) { for ( int i = 0 ; i < n ; i ++ ) { for ( int j = ' A ' ; j < ' A ' + ( 2 * n ) - 1 ; j ++ ) { if ( j >= ( ' A ' + n - 1 ) + i ) System . out . print ( ( char ) ( ( ' A ' + n - 1 ) - ( j % ( ' A ' + n - 1 ) ) ) ) ; else if ( j <= ( ' A ' + n - 1 ) - i ) System . out . print ( ( char ) j ) ; else System . out . print ( \" ▁ \" ) ; } System . out . println ( ) ; } } public static void main ( String args [ ] ) { int n = 6 ; ReverseCharBridge ( n ) ; } }"],"bleu":0.7052095518156004,"rouge_l":0.8146911519198664}
{"id":1123,"predictions":["class GFG { static final int n = 4 ; static double m = 4 ; static double calcProbability ( int [ ] [ ] M , int k ) { int [ ] [ ] dp = new int [ n ] [ m ] ; int sum [ ] [ ] = new int [ n ] [ n ] ; for ( int j = 0 ; j < n ; j ++ ) { dp [ 0 ] [ j ] = M [ 0 ] [ j ] ; sum [ 0 ] += dp [ 0 ] [ j ] ; } for ( int i = 1 ; i < m ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { dp [ i ] [ j ] += ( dp [ i - 1 ] [ j ] \/ sum [ i - 1 ] + M [ i ] [ j ] ) ; sum [ i ] += dp [ i ] [ j ] ; } } return dp [ n - 1 ] [ k - 1 ] \/ sum [ n - 1 ] ; } public static void main ( String [ ] args ) { int M [ ] [ ] = { 1 , 1 , 0 , 3 } , { 2 , 3 , 2 , 3 } , { 2 , 3 , 2 } } ; int k = 3 ; System . out . println ( calcProbability ( M , k ) ) ; } }"],"references":["class GFG { final static int n = 4 ; final static int m = 4 ; static float calcProbability ( int M [ ] [ ] , int k ) { float dp [ ] [ ] = new float [ m ] [ n ] ; float sum [ ] = new float [ n ] ; for ( int j = 0 ; j < n ; j ++ ) { dp [ 0 ] [ j ] = M [ 0 ] [ j ] ; sum [ 0 ] = sum [ 0 ] + dp [ 0 ] [ j ] ; } for ( int i = 1 ; i < m ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { dp [ i ] [ j ] += dp [ i - 1 ] [ j ] \/ sum [ i - 1 ] + M [ i ] [ j ] ; sum [ i ] += dp [ i ] [ j ] ; } } return dp [ n - 1 ] [ k - 1 ] \/ sum [ n - 1 ] ; } public static void main ( String [ ] args ) { int M [ ] [ ] = { { 1 , 1 , 0 , 3 } , { 2 , 3 , 2 , 3 } , { 9 , 3 , 0 , 2 } , { 2 , 3 , 2 , 2 } } ; int k = 3 ; System . out . println ( calcProbability ( M , k ) ) ; } }"],"bleu":0.8248645992706811,"rouge_l":0.9081885856079406}
{"id":1124,"predictions":["import java . util . * ; class GFG { static int largestSubset ( int a [ ] , int n ) { Arrays . sort ( a ) ; int dp [ ] = new int [ n ] ; dp [ n - 1 ] = 1 ; for ( int i = n - 2 ; i >= 0 ; i -- ) { int mxm = 0 ; for ( int j = i + 1 ; j < n ; j ++ ) { if ( a [ j ] % a [ i ] == 0 ) mxm = Math . max ( mxm , dp [ j ] ) ; } dp [ i ] = 1 + mxm ; } return Integer . MIN_VALUE ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 3 , 6 , 13 , 17 , 18 } ; int n = a . length ; System . out . println ( largestSubset ( a , n ) ) ; } }"],"references":["import java . util . Arrays ; class GFG { static int largestSubset ( int [ ] a , int n ) { Arrays . sort ( a ) ; int [ ] dp = new int [ n ] ; dp [ n - 1 ] = 1 ; for ( int i = n - 2 ; i >= 0 ; i -- ) { int mxm = 0 ; for ( int j = i + 1 ; j < n ; j ++ ) { if ( a [ j ] % a [ i ] == 0 ) { mxm = Math . max ( mxm , dp [ j ] ) ; } } dp [ i ] = 1 + mxm ; } return Arrays . stream ( dp ) . max ( ) . getAsInt ( ) ; } public static void main ( String [ ] args ) { int [ ] a = { 1 , 3 , 6 , 13 , 17 , 18 } ; int n = a . length ; System . out . println ( largestSubset ( a , n ) ) ; } }"],"bleu":0.8330483820733338,"rouge_l":0.9297684210526317}
{"id":1125,"predictions":["class GFG { static String findLargest ( int N ) { String largest = String . split ( \" ▁ \" ) ; return largest ; } static String findSmallest ( int N ) { String largest = String . valueOf ( N ) ; for ( int i = 0 ; i < N ; i ++ ) { String temp += c ; } return smallest ; } static String findSmallest ( int N ) { String temp = \"1\" ; for ( int i = 0 ; i < N ; i ++ ) temp += c ; return temp ; } static void printLargest ( int N ) { System . out . print ( \" Largest : ▁ \" + findLargest ( N ) ) ; System . out . print ( \" Smallest : ▁ \" + findLargest ( N ) ) ; } public static void main ( String [ ] args ) { int N = 4 ; printLargest ( N ) ; } }"],"references":["class GFG { static String findLargest ( int N ) { String largest = strings ( N , '7' ) ; return largest ; } static String findSmallest ( int N ) { String smallest = \"1\" + strings ( ( N - 1 ) , '0' ) ; return smallest ; } private static String strings ( int N , char c ) { String temp = \" \" ; for ( int i = 0 ; i < N ; i ++ ) { temp += c ; } return temp ; } static void printLargestSmallest ( int N ) { System . out . print ( \" Largest : ▁ \" + findLargest ( N ) + \" \\n \" ) ; System . out . print ( \" Smallest : ▁ \" + findSmallest ( N ) + \" \\n \" ) ; } public static void main ( String [ ] args ) { int N = 4 ; printLargestSmallest ( N ) ; } }"],"bleu":0.681356313032317,"rouge_l":0.8031676366758896}
{"id":1126,"predictions":["class GFG { static void findMaxNum ( int arr [ ] , int n ) { int hash [ ] = new int [ 10 ] ; for ( int i = 0 ; i < n ; i ++ ) { hash [ arr [ i ] ] ++ ; } for ( int i = 9 ; i >= 0 ; i -- ) { for ( int j = 0 ; j < hash [ i ] ; j ++ ) { System . out . print ( i ) ; } } } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 , 0 } ; int n = arr . length ; findMaxNum ( arr , n ) ; } }"],"references":["class GFG { static void findMaxNum ( int arr [ ] , int n ) { int [ ] hash = new int [ 10 ] ; for ( int i = 0 ; i < n ; i ++ ) { hash [ arr [ i ] ] ++ ; } for ( int i = 9 ; i >= 0 ; i -- ) { for ( int j = 0 ; j < hash [ i ] ; j ++ ) System . out . print ( i ) ; } } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 , 0 } ; int n = arr . length ; findMaxNum ( arr , n ) ; } }"],"bleu":0.9485518361412681,"rouge_l":0.9871691133972952}
{"id":1127,"predictions":["import java . io . * ; class GFG { static int countDigits ( int n ) { int c = 0 ; while ( n != 0 ) { c ++ ; n = n \/ 10 ; } return c ; } static boolean isDeque ( int x ) { int temp = x ; int p = countDigits ( x ) ; int sum = 0 ; while ( x != 0 ) { int digit = x % 10 ; sum += ( int ) Math . pow ( digit , p ) ; p -- ; x \/= 10 ; } return ( sum == temp ) ; } public static void main ( String [ ] args ) { int x = 105 ; if ( isDener ( x ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . Scanner ; class Deserium { static int countDigits ( int n ) { int c = 0 ; do { c ++ ; n = n \/ 10 ; } while ( n != 0 ) ; return c ; } static boolean isDeserium ( int x ) { int temp = x ; int p = countDigits ( x ) ; int sum = 0 ; while ( x != 0 ) { int digit = x % 10 ; sum += Math . pow ( digit , p ) ; p -- ; x = x \/ 10 ; } return ( sum == temp ) ; } public static void main ( String [ ] args ) { int x = 135 ; if ( isDeserium ( x ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.8335196370519091,"rouge_l":0.8979632990522283}
{"id":1128,"predictions":["class GFG { static float polyarea ( float n , float r ) { if ( r < 0 && n < 0 ) return - 1 ; float A = ( ( r * r * n ) * ( ( 360 \/ n ) * 3.14159 \/ 180 ) ) \/ 2 ; return A ; } public static void main ( String [ ] args ) { float r = 9 , n = 6 ; System . out . println ( polyarea ( n , r ) ) ; } }"],"references":["import java . util . * ; class GFG { static double polyarea ( double n , double r ) { if ( r < 0 && n < 0 ) return - 1 ; double A = ( ( r * r * n ) * Math . sin ( ( 360 \/ n ) * 3.14159 \/ 180 ) ) \/ 2 ; return A ; } public static void main ( String [ ] args ) { float r = 9 , n = 6 ; System . out . println ( polyarea ( n , r ) ) ; } }"],"bleu":0.7932879286220343,"rouge_l":0.9018683996750608}
{"id":1129,"predictions":["class GFG { static int smallestSumSubarr ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = - arr [ i ] ; int sum_here = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { sum_here = Math . max ( sum_here + arr [ i ] , arr [ i ] ) ; max_sum = Math . max ( max_sum , sum_here ) ; } return ( - 1 ) * max_sum ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , - 4 , 2 , - 3 , - 1 , 7 , - 5 } ; int n = arr . length ; System . out . println ( \" Smallest ▁ sum : ▁ \" + smallestSumSubarr ( arr , n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int smallestSumSubarr ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = - arr [ i ] ; int sum_here = arr [ 0 ] , max_sum = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { sum_here = Math . max ( sum_here + arr [ i ] , arr [ i ] ) ; max_sum = Math . max ( max_sum , sum_here ) ; } return ( - 1 ) * max_sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , - 4 , 2 , - 3 , - 1 , 7 , - 5 } ; int n = arr . length ; System . out . print ( \" Smallest ▁ sum : ▁ \" + smallestSumSubarr ( arr , n ) ) ; } }"],"bleu":0.9000084963575087,"rouge_l":0.9461678832116788}
{"id":1130,"predictions":["import java . util . * ; class GFG { static int countSub ( int arr [ ] , int n , int x ) { int st = 0 ; int end = 0 ; int cnt = 0 ; while ( end < n ) { sum += arr [ end ] ; while ( st <= end && sum > x ) { sum -= arr [ st ] ; st ++ ; } cnt += ( end - st + 1 ) ; } return cnt ; } static int findSubSumLtoR ( int arr [ ] , int n , int L , int R ) { int Rcnt = countSub ( arr , n , L - 1 ) ; int Lcnt = countSub ( arr , n , L - 1 ) ; return Rcnt - Lcnt ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 4 , 6 } ; int n = arr . length ; int L = 3 ; int R = 8 ; System . out . println ( findSubSumLtoR ( arr , n , L , R ) ) ; } }"],"references":["import java . io . * ; class GFG { static int countSub ( int arr [ ] , int n , int x ) { int st = 0 ; int end = 0 ; int sum = 0 ; int cnt = 0 ; while ( end < n ) { sum += arr [ end ] ; while ( st <= end && sum > x ) { sum -= arr [ st ] ; st ++ ; } cnt += ( end - st + 1 ) ; end ++ ; } return cnt ; } static int findSubSumLtoR ( int arr [ ] , int n , int L , int R ) { int Rcnt = countSub ( arr , n , R ) ; int Lcnt = countSub ( arr , n , L - 1 ) ; return Rcnt - Lcnt ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 4 , 6 } ; int n = arr . length ; int L = 3 ; int R = 8 ; System . out . println ( findSubSumLtoR ( arr , n , L , R ) ) ; } }"],"bleu":0.9344715439241609,"rouge_l":0.964011891722735}
{"id":1131,"predictions":["class GFG { static int R = 3 ; static int C = 3 ; static int minCost ( int cost [ ] [ ] , int m , int n ) { int [ ] [ ] tc = new int [ R ] [ C ] ; tc [ 0 ] [ 0 ] = cost [ 0 ] [ 0 ] ; for ( int i = 1 ; i <= m ; i ++ ) { tc [ i ] [ 0 ] = tc [ i - 1 ] [ 0 ] + cost [ i ] [ 0 ] ; for ( int j = 1 ; j <= n ; j ++ ) tc [ 0 ] [ j ] = tc [ 0 ] [ j - 1 ] + cost [ 0 ] [ j ] ; for ( int i = 1 ; i <= m ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) tc [ i ] [ j ] = Math . min ( tc [ i - 1 ] [ j - 1 ] , tc [ i - 1 ] [ j ] ) + cost [ i ] [ j ] ; } } return tc [ m ] [ n ] ; } public static void main ( String [ ] args ) { int cost [ ] [ ] = { { 1 , 2 , 3 } , { 4 , 8 , 2 } , { 1 , 5 , 3 } } ; System . out . print ( minCost ( cost , 2 , 2 ) ) ; } }"],"references":["import java . util . * ; class MinimumCostPath { private static int min ( int x , int y , int z ) { if ( x < y ) return ( x < z ) ? x : z ; else return ( y < z ) ? y : z ; } private static int minCost ( int cost [ ] [ ] , int m , int n ) { int i , j ; int tc [ ] [ ] = new int [ m + 1 ] [ n + 1 ] ; tc [ 0 ] [ 0 ] = cost [ 0 ] [ 0 ] ; for ( i = 1 ; i <= m ; i ++ ) tc [ i ] [ 0 ] = tc [ i - 1 ] [ 0 ] + cost [ i ] [ 0 ] ; for ( j = 1 ; j <= n ; j ++ ) tc [ 0 ] [ j ] = tc [ 0 ] [ j - 1 ] + cost [ 0 ] [ j ] ; for ( i = 1 ; i <= m ; i ++ ) for ( j = 1 ; j <= n ; j ++ ) tc [ i ] [ j ] = min ( tc [ i - 1 ] [ j - 1 ] , tc [ i - 1 ] [ j ] , tc [ i ] [ j - 1 ] ) + cost [ i ] [ j ] ; return tc [ m ] [ n ] ; } public static void main ( String args [ ] ) { int cost [ ] [ ] = { { 1 , 2 , 3 } , { 4 , 8 , 2 } , { 1 , 5 , 3 } } ; System . out . println ( minCost ( cost , 2 , 2 ) ) ; } }"],"bleu":0.7021111545897553,"rouge_l":0.8335712828880277}
{"id":1132,"predictions":["class GFG { static int msbPos = - 1 ; static int msbPos ( int n ) { int msb_p = - 1 ; while ( n != 0 ) { n = n >> 1 ; msb_p ++ ; } return msb_p ; } static int andOperator ( int x ) { int res = 0 ; while ( x > 0 && y > 0 ) { int msb1 = msbPos ( x ) ; int msb_p2 = msbPos ( y ) ; if ( msb1 != msb ) break ; msb_val = ( 1 << msb_p1 ) ; res = res + msb_val ; x = x - msb_val ; y = y - msb_val ; } return res ; } public static void main ( String [ ] args ) { int x = 10 , y = 15 ; System . out . println ( andOperator ( x , y ) ) ; } }"],"references":["class GFG { static int msbPos ( long n ) { int msb_p = - 1 ; while ( n > 0 ) { n = n >> 1 ; msb_p ++ ; } return msb_p ; } static long andOperator ( long x , long y ) { long res = 0 ; while ( x > 0 && y > 0 ) { int msb_p1 = msbPos ( x ) ; int msb_p2 = msbPos ( y ) ; if ( msb_p1 != msb_p2 ) break ; long msb_val = ( 1 << msb_p1 ) ; res = res + msb_val ; x = x - msb_val ; y = y - msb_val ; } return res ; } public static void main ( String [ ] args ) { long x = 10 , y = 15 ; System . out . print ( andOperator ( x , y ) ) ; } }"],"bleu":0.789377031639859,"rouge_l":0.903750518027352}
{"id":1133,"predictions":["import java . util . * ; class GFG { static class pair { int first , second ; public pair ( int first , int second ) { this . first = first ; this . second = second ; } } static void dfs ( Vector < String > [ ] adj , int n ) { count_col [ 0 ] ++ ; for ( int i = 0 ; i < adj . . size ( ) ; i ++ ) { if ( adj [ node . get ( i ) . first ) != parent ) dfs ( adj , adj , new boolean [ n - 1 ] . second ) ; } } static int findMaxEdges ( Vector < pair > [ ] , int n ) { int count_col [ 0 ] = 0 ; for ( int i = 0 ; i < n ; i ++ ) adj [ node ] . add ( 2 ) ; return ( count_col [ 0 ] * count_col [ 1 ] - ( n - 1 ) ) ; } public static void main ( String [ ] args ) { Vector < pair > arr = new Vector < > ( ) ; arr . add ( new Vector < > ( ) ) ; arr [ 1 ] . add ( 2 ) ; arr [ 0 ] . add ( 3 ) ; arr [ 1 ] . add ( 4 ) ; arr [ 2 ] . add ( 4 ) ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] . add ( 3 ) ; System . out . print ( findMaxEdges ( adj , arr . size ( ) ) ) ; } }"],"references":["import java . util . * ; class GFG { static long [ ] count_color = new long [ 2 ] ; static void dfs ( Vector < Integer > adj [ ] , int node , int parent , boolean color ) { count_color [ color == false ? 0 : 1 ] ++ ; for ( int i = 0 ; i < adj [ node ] . size ( ) ; i ++ ) { if ( adj [ node ] . get ( i ) != parent ) dfs ( adj , adj [ node ] . get ( i ) , node , ! color ) ; } } static int findMaxEdges ( Vector < Integer > adj [ ] , int n ) { dfs ( adj , 1 , 0 , false ) ; return ( int ) ( count_color [ 0 ] * count_color [ 1 ] - ( n - 1 ) ) ; } public static void main ( String [ ] args ) { int n = 5 ; Vector < Integer > [ ] adj = new Vector [ n + 1 ] ; for ( int i = 0 ; i < n + 1 ; i ++ ) adj [ i ] = new Vector < Integer > ( ) ; adj [ 1 ] . add ( 2 ) ; adj [ 1 ] . add ( 3 ) ; adj [ 2 ] . add ( 4 ) ; adj [ 3 ] . add ( 5 ) ; System . out . println ( findMaxEdges ( adj , n ) ) ; } }"],"bleu":0.5278130395459337,"rouge_l":0.6308807824180765}
{"id":1134,"predictions":["class GFG { static void steps ( String str , int n ) { boolean flag = false ; int x = 0 ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { if ( x == 0 ) flag = true ; if ( x == n - 1 ) flag = false ; for ( int j = 0 ; j < x ; j ++ ) { System . out . print ( \" * \" ) ; } System . out . println ( \" Max ▁ Length ▁ of ▁ \" + str . substring ( i ) ) ; if ( flag == true ) { x ++ ; } else { x -- ; } } } } public static void main ( String [ ] args ) { int n = 4 ; String str = \" GeeksForGeeks \" ; System . out . println ( \" String : ▁ \" + str . toCharArray ( ) , n ) ; } }"],"references":["import java . util . * ; class solution { static void steps ( String str , int n ) { boolean flag = false ; int x = 0 ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { if ( x == 0 ) flag = true ; if ( x == n - 1 ) flag = false ; for ( int j = 0 ; j < x ; j ++ ) System . out . print ( \" * \" ) ; System . out . print ( str . charAt ( i ) + \" \\n \" ) ; if ( flag == true ) x ++ ; else x -- ; } } public static void main ( String args [ ] ) { int n = 4 ; String str = \" GeeksForGeeks \" ; System . out . println ( \" String : ▁ \" + str ) ; System . out . println ( \" Max ▁ Length ▁ of ▁ Steps : ▁ \" + n ) ; steps ( str , n ) ; } }"],"bleu":0.7554114516837122,"rouge_l":0.8375525615721272}
{"id":1135,"predictions":["import java . util . * ; class GFG { static int max_xor ( int arr [ ] , int n ) { int maxx = 0 ; HashSet < Integer > se = new HashSet < Integer > ( ) ; for ( int i = 30 ; i >= 0 ; i -- ) { mask |= ( 1 << i ) ; int newMaxxor = max ( 1 << i ) ; for ( int i = 0 ; i < n ; i ++ ) { se . add ( 1 << i ) ; } for ( int i = 0 ; i < n ; i ++ ) { se . add ( arr [ i ] & mask ) ; } for ( int i = 0 ; i < n ; i ++ ) { se . add ( arr [ i ] & 1 ) ; } se . clear ( ) ; } return maxx ; } public static void main ( String [ ] args ) { int arr [ ] = { 25 , 10 , 2 , 8 , 5 , 3 } ; int n = arr . length ; System . out . print ( max_xor ( arr , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static int max_xor ( int arr [ ] , int n ) { int maxx = 0 , mask = 0 ; HashSet < Integer > se = new HashSet < Integer > ( ) ; for ( int i = 30 ; i >= 0 ; i -- ) { mask |= ( 1 << i ) ; for ( int j = 0 ; j < n ; ++ j ) { se . add ( arr [ j ] & mask ) ; } int newMaxx = maxx | ( 1 << i ) ; for ( int prefix : se ) { if ( se . contains ( newMaxx ^ prefix ) ) { maxx = newMaxx ; break ; } } se . clear ( ) ; } return maxx ; } public static void main ( String [ ] args ) { int arr [ ] = { 25 , 10 , 2 , 8 , 5 , 3 } ; int n = arr . length ; System . out . println ( max_xor ( arr , n ) ) ; } }"],"bleu":0.6982675297812998,"rouge_l":0.7877165354330709}
{"id":1136,"predictions":["import java . util . * ; import java . lang . * ; import java . io . * ; class exp_sq { static long N = 1000000007L ; static long exponentiation ( long base , long exp ) { long t = 1 ; while ( exp > 0 ) { if ( exp % 2 != 0 ) t = ( t * base ) % N ; base = ( base * base ) % N ; exp = ( base * base ) % N ; } return t % N ; } public static void main ( String [ ] args ) { long base = 5 , exp = 100000 ; long modulo = exponentiation ( base , exp ) ; System . out . println ( modulo ) ; } }"],"references":["import java . util . * ; import java . lang . * ; import java . io . * ; class exp_sq { static long N = 1000000007L ; public static void main ( String [ ] args ) { long base = 5 ; long exp = 100000 ; long modulo = exponentiation ( base , exp ) ; System . out . println ( modulo ) ; } static long exponentiation ( long base , long exp ) { long t = 1L ; while ( exp > 0 ) { if ( exp % 2 != 0 ) t = ( t * base ) % N ; base = ( base * base ) % N ; exp \/= 2 ; } return t % N ; } }"],"bleu":0.8703759526239999,"rouge_l":0.6615254849981926}
{"id":1137,"predictions":["class GFG { static int countMaxIntersect ( int n ) { return n * ( n - 1 ) \/ 2 ; } public static void main ( String [ ] args ) { int n = 8 ; System . out . println ( countMaxIntersect ( n ) ) ; } }"],"references":["public class GFG { static long countMaxIntersect ( long n ) { return ( n ) * ( n - 1 ) \/ 2 ; } public static void main ( String args [ ] ) { long n = 8 ; System . out . println ( countMaxIntersect ( n ) ) ; } }"],"bleu":0.7029408907136824,"rouge_l":0.8946423226578869}
{"id":1138,"predictions":["class GFG { static void printArr ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + \" ▁ \" ) ; } static void findArray ( int n , int k , int s ) { int [ ] vis = new int [ n ] ; int cnt = 0 ; int i = 0 ; while ( i < n && cnt < k ) { arr [ i ] = s ; vis [ i ] = 1 ; cnt ++ ; i += 2 ; } int val = s ; if ( s % 2 == 0 ) val += 1 ; else val = val + 2 ; for ( int i = 0 ; i < n ; i ++ ) { if ( vis [ i ] == 0 ) { arr [ i ] = val ; } } printArr ( arr , n ) ; } public static void main ( String [ ] args ) { int n = 8 , k = 3 , s = 12 ; findArray ( n , k , s ) ; } }"],"references":["class GFG { static void printArr ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + \" ▁ \" ) ; } static void findArray ( int n , int k , int s ) { int vis [ ] = new int [ n ] ; int cnt = 0 ; int arr [ ] = new int [ n ] ; for ( int i = 0 ; i < n && cnt < k ; i += 2 ) { arr [ i ] = s ; vis [ i ] = 1 ; cnt ++ ; } int val = s ; if ( s % 2 == 0 ) val ++ ; else val = val + 2 ; for ( int i = 0 ; i < n ; i ++ ) { if ( vis [ i ] == 0 ) { arr [ i ] = val ; } } printArr ( arr , n ) ; } public static void main ( String [ ] args ) { int n = 8 , k = 3 , s = 12 ; findArray ( n , k , s ) ; } }"],"bleu":0.8894592849182849,"rouge_l":0.9328457446808511}
{"id":1139,"predictions":["class GFG { static int modInverse ( int a , int m ) { int a = a % m ; for ( int x = 1 ; x < m ; x ++ ) if ( ( a * x ) % m == 1 ) return x ; return 1 ; } public static void main ( String [ ] args ) { int a = 3 , m = 11 ; System . out . print ( modInverse ( a , m ) ) ; } }"],"references":["import java . io . * ; class GFG { static int modInverse ( int a , int m ) { a = a % m ; for ( int x = 1 ; x < m ; x ++ ) if ( ( a * x ) % m == 1 ) return x ; return 1 ; } public static void main ( String args [ ] ) { int a = 3 , m = 11 ; System . out . println ( modInverse ( a , m ) ) ; } }"],"bleu":0.8447077811362573,"rouge_l":0.9300736067297583}
{"id":1140,"predictions":["import java . util . * ; class GFG { static int countDistinctCode ( String str ) { Set < String > codes = new LinkedHashSet < > ( ) ; for ( int i = 0 ; i < str . length ( ) - 1 ; i ++ ) { codes . add ( str . substring ( i , i + 1 ) ) ; } return codes . size ( ) ; } public static void main ( String [ ] args ) { String str = \" U690P \" ; System . out . println ( countDistinct ( str ) ) ; } }"],"references":["import java . util . * ; class GFG { static int countDistinctCode ( String str ) { Set < String > codes = new HashSet < > ( ) ; for ( int i = 0 ; i < str . length ( ) - 1 ; i ++ ) codes . add ( str . substring ( i , i + 2 ) ) ; return codes . size ( ) ; } public static void main ( String [ ] args ) { String str = \" UPUP \" ; System . out . println ( countDistinctCode ( str ) ) ; } }"],"bleu":0.8587657985575319,"rouge_l":0.9552987684354568}
{"id":1141,"predictions":["class GFG { static int OR ( int a [ ] , int n ) { int ans = a [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) ans |= a [ i ] ; return ans ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 4 , 6 } ; int n = a . length ; System . out . println ( OR ( a , n ) ) ; } }"],"references":["class GFG { static int OR ( int a [ ] , int n ) { int ans = a [ 0 ] ; int i ; for ( i = 1 ; i < n ; i ++ ) { ans |= a [ i ] ; } return ans ; } public static void main ( String args [ ] ) { int a [ ] = { 1 , 4 , 6 } ; int n = a . length ; System . out . println ( OR ( a , n ) ) ; } }"],"bleu":0.8626630809987434,"rouge_l":0.9556666666666667}
{"id":1142,"predictions":["import java . util . Arrays ; import java . util . Arrays ; public class GFG { static int kthSmallest ( int arr [ ] , int n , int k ) { Arrays . sort ( arr ) ; return arr [ k - 1 ] ; } public static void main ( String [ ] args ) { int arr [ ] = { 12 , 3 , 5 , 7 , 19 } ; int n = arr . length ; int k = 2 ; System . out . print ( \" K ' th ▁ element ▁ is ▁ \" + kthSmallest ( arr , n , k ) ) ; } }"],"references":["import java . util . Arrays ; import java . util . Collections ; class GFG { public static int kthSmallest ( Integer [ ] arr , int k ) { Arrays . sort ( arr ) ; return arr [ k - 1 ] ; } public static void main ( String [ ] args ) { Integer arr [ ] = new Integer [ ] { 12 , 3 , 5 , 7 , 19 } ; int k = 2 ; System . out . print ( \" K ' th ▁ smallest ▁ element ▁ is ▁ \" + kthSmallest ( arr , k ) ) ; } }"],"bleu":0.7608105059049761,"rouge_l":0.8834303563822234}
{"id":1143,"predictions":["class GFG { static int findOddPair ( int A [ ] , int N ) { int oddPair = 0 ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = i + 1 ; j < N ; j ++ ) { if ( ( A [ i ] ^ A [ j ] ) % 2 != 0 ) oddPair ++ ; } } return oddPair ; } public static void main ( String [ ] args ) { int A [ ] = { 5 , 4 , 7 , 2 , 1 } ; int N = A . length ; System . out . println ( findOddPair ( A , N ) ) ; } }"],"references":["class GFG { static int findOddPair ( int A [ ] , int N ) { int i , j ; int oddPair = 0 ; for ( i = 0 ; i < N ; i ++ ) { for ( j = i + 1 ; j < N ; j ++ ) { if ( ( A [ i ] ^ A [ j ] ) % 2 != 0 ) oddPair ++ ; } } return oddPair ; } public static void main ( String args [ ] ) { int A [ ] = { 5 , 4 , 7 , 2 , 1 } ; int N = A . length ; System . out . println ( findOddPair ( A , N ) ) ; } }"],"bleu":0.9104271330741506,"rouge_l":0.9640696382269415}
{"id":1144,"predictions":["import java . util . * ; class GFG { static void ReplaceElements ( int arr [ ] , int n ) { HashMap < Integer , Integer > mp = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; ++ i ) { if ( mp . containsKey ( arr [ i ] ) ) { mp . put ( arr [ i ] , mp . get ( arr [ i ] ) + 1 ) ; } else { mp . put ( arr [ i ] , 1 ) ; } } for ( int i = 0 ; i < n ; ++ i ) arr [ i ] = n - mp . get ( arr [ i ] ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 5 , 2 , 5 , 4 } ; int n = arr . length ; ReplaceElements ( arr , n ) ; for ( int i = 0 ; i < n ; ++ i ) { System . out . print ( arr [ i ] + \" ▁ \" ) ; } } }"],"references":["import java . util . * ; class GFG { static void ReplaceElements ( int arr [ ] , int n ) { HashMap < Integer , Integer > mp = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( ! mp . containsKey ( arr [ i ] ) ) { mp . put ( arr [ i ] , 1 ) ; } else { mp . put ( arr [ i ] , mp . get ( arr [ i ] ) + 1 ) ; } } for ( int i = 0 ; i < n ; ++ i ) { arr [ i ] = n - mp . get ( arr [ i ] ) ; } } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 5 , 2 , 2 , 5 , 4 } ; int n = arr . length ; ReplaceElements ( arr , n ) ; for ( int i = 0 ; i < n ; ++ i ) { System . out . print ( arr [ i ] + \" ▁ \" ) ; } } }"],"bleu":0.9482280806357197,"rouge_l":0.9359909740503948}
{"id":1145,"predictions":["import java . io . * ; class Combination { static void combinationUtil ( int arr [ ] , int n , int r , int data [ ] , int i ) { int data [ ] = new int [ r ] ; combinationUtil ( arr , n , r , 0 , data , 0 ) ; } static void combinationUtil ( int arr [ ] , int n , int index , int data [ ] , int i ) { if ( index == r ) { for ( int j = 0 ; j < r ; j ++ ) System . out . print ( data [ j ] + \" ▁ \" ) ; System . out . println ( ) ; return ; } if ( i >= n ) return ; data [ index ] = arr [ i ] ; combinationUtil ( arr , n , r , index + 1 , data , i + 1 ) ; combinationUtil ( arr , n , r , index , data , i + 1 ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 } ; int r = 3 ; int n = arr . length ; printCombination ( arr , n , r ) ; } }"],"references":["import java . io . * ; class Combination { static void combinationUtil ( int arr [ ] , int n , int r , int index , int data [ ] , int i ) { if ( index == r ) { for ( int j = 0 ; j < r ; j ++ ) System . out . print ( data [ j ] + \" ▁ \" ) ; System . out . println ( \" \" ) ; return ; } if ( i >= n ) return ; data [ index ] = arr [ i ] ; combinationUtil ( arr , n , r , index + 1 , data , i + 1 ) ; combinationUtil ( arr , n , r , index , data , i + 1 ) ; } static void printCombination ( int arr [ ] , int n , int r ) { int data [ ] = new int [ r ] ; combinationUtil ( arr , n , r , 0 , data , 0 ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 } ; int r = 3 ; int n = arr . length ; printCombination ( arr , n , r ) ; } }"],"bleu":0.950529367056802,"rouge_l":0.8051274963720544}
{"id":1146,"predictions":["import java . util . Arrays ; class GFG { static void sieve ( int maxm , int prime [ ] ) { prime [ 0 ] = prime [ 1 ] = 1 ; for ( int i = 2 ; i * i <= maxm ; i ++ ) { if ( prime [ i ] == 0 ) for ( int j = 2 * i ; j <= maxm ; j += i ) prime [ j ] = 1 ; } } static int countPair ( int a [ ] , int n ) { int maxm = Arrays . stream ( a ) . max ( ) . getAsInt ( ) ; boolean prime [ ] = new boolean [ maxm + 1 ] ; Arrays . fill ( prime , true ) ; sieve ( maxm , prime ) ; int countPrimes = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( prime [ a [ i ] ] == false ) countPrimes ++ ; } int nonPrimes = n - countPrimes * countPrimes ; int pairsWith2Primes = ( countPrimes * ( countPrimes - 1 ) \/ 2 ; return pairWith2Prime + pairsWith2Primes ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 3 , 5 , 4 , 7 } ; int n = arr . length ; System . out . println ( countPair ( arr , n ) ) ; } }"],"references":["class GFG { static void sieve ( int maxm , int [ ] prime ) { prime [ 0 ] = prime [ 1 ] = 1 ; for ( int i = 2 ; i * i <= maxm ; i ++ ) if ( prime [ i ] == 0 ) for ( int j = 2 * i ; j <= maxm ; j += i ) prime [ j ] = 1 ; } static long countPair ( int [ ] a , int n ) { int maxm = a [ 0 ] ; int i ; for ( i = 1 ; i < n ; i ++ ) if ( a [ i ] > maxm ) maxm = a [ i ] ; int [ ] prime = new int [ maxm + 1 ] ; for ( i = 0 ; i < maxm + 1 ; i ++ ) prime [ i ] = 0 ; sieve ( maxm , prime ) ; int countPrimes = 0 ; for ( i = 0 ; i < n ; i ++ ) if ( prime [ a [ i ] ] == 0 ) countPrimes ++ ; int nonPrimes = n - countPrimes ; long pairswith1Prime = nonPrimes * countPrimes ; long pairsWith2Primes = ( countPrimes * ( countPrimes - 1 ) ) \/ 2 ; return pairswith1Prime + pairsWith2Primes ; } public static void main ( String [ ] args ) { int [ ] arr = { 2 , 3 , 5 , 4 , 7 } ; int n = arr . length ; System . out . println ( countPair ( arr , n ) ) ; } }"],"bleu":0.6581304488066406,"rouge_l":0.8068121964066248}
{"id":1147,"predictions":["class GFG { static int nextPerfectCube ( int N ) { int nextN = ( int ) Math . floor ( Math . cbrt ( N ) ) + 1 ; return nextN * 3 ; } public static void main ( String [ ] args ) { int n = 35 ; System . out . println ( nextPerfectCube ( n ) ) ; } }"],"references":["import java . util . * ; import java . lang . * ; import java . io . * ; class GFG { static int nextPerfectCube ( int N ) { int nextN = ( int ) Math . floor ( Math . cbrt ( N ) ) + 1 ; return nextN * nextN * nextN ; } public static void main ( String args [ ] ) { int n = 35 ; System . out . print ( nextPerfectCube ( n ) ) ; } }"],"bleu":0.6159714674103,"rouge_l":0.7943031536113937}
{"id":1148,"predictions":["class GFG { static void reverse ( int arr [ ] , int n , int k ) { for ( int i = 0 ; i < n ; i ++ ) { int left = i , right = Math . min ( i + k - 1 , n - 1 ) ; while ( left < right ) { int temp = arr [ left ] ; arr [ left ] = arr [ right ] ; arr [ right ] = temp ; right -- ; } } for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + \" ▁ \" ) ; } public static void main ( String args [ ] ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 } ; int k = 3 ; reverse ( arr , arr . length , k ) ; for ( int i = 0 ; i < k ; i ++ ) System . out . print ( arr [ i ] + \" ▁ \" ) ; } }"],"references":["class GFG { static void reverse ( int arr [ ] , int n , int k ) { for ( int i = 0 ; i < n ; i += k ) { int left = i ; int right = Math . min ( i + k - 1 , n - 1 ) ; int temp ; while ( left < right ) { temp = arr [ left ] ; arr [ left ] = arr [ right ] ; arr [ right ] = temp ; left += 1 ; right -= 1 ; } } } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 } ; int k = 3 ; int n = arr . length ; reverse ( arr , n , k ) ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + \" ▁ \" ) ; } }"],"bleu":0.7626512167912838,"rouge_l":0.849624687239366}
{"id":1149,"predictions":["import java . util . * ; class GFG { static void printChar ( String str , int n ) { int freq [ ] = new int [ 26 ] ; for ( int i = 0 ; i < n ; i ++ ) { freq [ str . charAt ( i ) - ' a ' ] ++ ; } for ( int i = 0 ; i < n ; i ++ ) { if ( freq [ str . charAt ( i ) - ' a ' ] % 2 == 1 ) { System . out . print ( str . charAt ( i ) ) ; } } } public static void main ( String [ ] args ) { String str = \" geeksforgeeks \" ; int n = str . length ( ) ; printChar ( str , n ) ; } }"],"references":["class GFG { public static void printChar ( String str , int n ) { int [ ] freq = new int [ 26 ] ; for ( int i = 0 ; i < n ; i ++ ) freq [ str . charAt ( i ) - ' a ' ] ++ ; for ( int i = 0 ; i < n ; i ++ ) { if ( freq [ str . charAt ( i ) - ' a ' ] % 2 == 1 ) { System . out . print ( str . charAt ( i ) ) ; } } } public static void main ( String [ ] args ) { String str = \" geeksforgeeks \" ; int n = str . length ( ) ; printChar ( str , n ) ; } }"],"bleu":0.8867075752859289,"rouge_l":0.9641585040071238}
{"id":1150,"predictions":["class GFG { static int R = 4 ; static int C = 3 ; static boolean isSafe ( int x , int y ) { return ( x < R && y < C ) ; } static int minJump ( int height [ ] [ ] , int x , int y ) { if ( x == R - 1 && y == C - 1 ) { return 0 ; } int diag = Integer . MAX_VALUE ; if ( isSafe ( x + 1 , y + 1 ) ) { diag = minJump ( minJump ( height , x + 1 , y + 1 ) + Math . abs ( height [ x ] [ y ] - height [ x + 1 ] [ y + 1 ] ) ; } int down = Integer . MAX_VALUE ; if ( isSafe ( x + 1 , y ) ) { down = minJump ( height , x + 1 , y ) + Math . abs ( height [ x ] [ y ] - height [ x + 1 ] [ y ] ) ; } int right = Integer . MAX_VALUE ; if ( isSafe ( x , y + 1 ) ) { right = minJump ( height , x , y + 1 ) + Math . abs ( height [ x ] [ y ] - height [ x ] [ y ] ) ; } int right = Integer . MAX_VALUE ; if ( isSafe ( x , y + 1 ) ) right = ( minJump ( height , x , y + 1 ) + Math . abs ( height [ x ] [ y ] - height [ x ] [ y + 1 ] ) ; return Math . min ( Math . min ( down , right ) ) ; } public static void main ( String [ ] args ) { int height [ ] [ ] = { { 5 , 4 , 2 } , { 1 , 5 , 9 } , { 1 , 3 , 11 } } ; System . out . println ( minJump ( height , 0 , 0 ) ) ; } }"],"references":["class GFG { static boolean isSafe ( int x , int y ) { return ( x < 4 && y < 3 ) ; } static int minJump ( int height [ ] [ ] , int x , int y ) { if ( x == 4 - 1 && y == 3 - 1 ) return 0 ; int diag = Integer . MAX_VALUE ; if ( isSafe ( x + 1 , y + 1 ) ) diag = minJump ( height , x + 1 , y + 1 ) + Math . abs ( height [ x ] [ y ] - height [ x + 1 ] [ y + 1 ] ) ; int down = Integer . MAX_VALUE ; if ( isSafe ( x + 1 , y ) ) down = minJump ( height , x + 1 , y ) + Math . abs ( height [ x ] [ y ] - height [ x + 1 ] [ y ] ) ; int right = Integer . MAX_VALUE ; if ( isSafe ( x , y + 1 ) ) right = minJump ( height , x , y + 1 ) + Math . abs ( height [ x ] [ y ] - height [ x ] [ y + 1 ] ) ; return Math . min ( down , Math . min ( right , diag ) ) ; } public static void main ( String [ ] args ) { int height [ ] [ ] = { { 5 , 4 , 2 } , { 9 , 2 , 1 } , { 2 , 5 , 9 } , { 1 , 3 , 11 } } ; System . out . println ( minJump ( height , 0 , 0 ) ) ; } }"],"bleu":0.7373033293393935,"rouge_l":0.8759183284037783}
{"id":1151,"predictions":["class GFG { static int segregate ( int arr [ ] , int size ) { int j = 0 , temp ; for ( int i = 0 ; i < size ; i ++ ) { if ( arr [ i ] <= 0 ) { temp = arr [ i ] ; arr [ i ] = arr [ j ] ; arr [ j ] = temp ; } } return j ; } static int findMissingPositive ( int arr [ ] , int size ) { int i ; for ( i = 0 ; i < size ; i ++ ) { if ( Math . abs ( arr [ i ] ) - 1 < size && arr [ Math . abs ( arr [ i ] ) - 1 ] > 0 ) { arr [ Math . abs ( arr [ i ] ) ; } } for ( i = 0 ; i < size ; i ++ ) { if ( arr [ i ] > 0 ) return i + 1 ; } return size + 1 ; } static int findMissing ( int arr [ ] , int size ) { int shift = segregate ( arr , size ) ; return findMissingPositive ( arr , size ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 0 , 10 , 2 , - 10 , - 20 } ; int arr_size = arr . length ; int missing = findMissing ( arr , arr_size ) ; System . out . print ( \" The ▁ smallest ▁ positive ▁ missing ▁ number ▁ is ▁ \" + missing ) ; } }"],"references":["import java . util . * ; class Main { static int segregate ( int arr [ ] , int size ) { int j = 0 , i ; for ( i = 0 ; i < size ; i ++ ) { if ( arr [ i ] <= 0 ) { int temp ; temp = arr [ i ] ; arr [ i ] = arr [ j ] ; arr [ j ] = temp ; j ++ ; } } return j ; } static int findMissingPositive ( int arr [ ] , int size ) { int i ; for ( i = 0 ; i < size ; i ++ ) { int x = Math . abs ( arr [ i ] ) ; if ( x - 1 < size && arr [ x - 1 ] > 0 ) arr [ x - 1 ] = - arr [ x - 1 ] ; } for ( i = 0 ; i < size ; i ++ ) if ( arr [ i ] > 0 ) return i + 1 ; return size + 1 ; } static int findMissing ( int arr [ ] , int size ) { int shift = segregate ( arr , size ) ; int arr2 [ ] = new int [ size - shift ] ; int j = 0 ; for ( int i = shift ; i < size ; i ++ ) { arr2 [ j ] = arr [ i ] ; j ++ ; } return findMissingPositive ( arr2 , j ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 0 , 10 , 2 , - 10 , - 20 } ; int arr_size = arr . length ; int missing = findMissing ( arr , arr_size ) ; System . out . println ( \" The ▁ smallest ▁ positive ▁ missing ▁ number ▁ is ▁ \" + missing ) ; } }"],"bleu":0.713919979598218,"rouge_l":0.8189758434817328}
{"id":1152,"predictions":["import java . util . * ; class GFG { static int __gcd ( int a , int b ) { if ( b == 0 ) return a ; return __gcd ( b , a % b ) ; } static int minSteps ( int k , int d1 , int x ) { int gcd = __gcd ( k1 , d2 ) ; if ( ( k - x ) % gcd != 0 ) return - 1 ; Queue < Integer > visited = new LinkedList < > ( ) ; visited . add ( k , 0 ) ; visited . add ( 1 ) ; while ( ! visited . isEmpty ( ) ) { Stack < Integer > visited = new Stack < > ( ) ; int s = sc . nextInt ( ) ; if ( s == x ) return st . peek ( ) ; if ( visited . isEmpty ( ) ) { visited . add ( ( s + d1 ) , st + 1 ) ; visited . add ( ( s + d1 ) ) ; visited . add ( ( ( s + d1 ) ) ; } if ( visited != visited . isEmpty ( ) ) { Queue < Integer > visited = new LinkedList < > ( ) ; visited . add ( ( s + d1 ) ; visited . add ( ( s + d1 ) ) ; } if ( visited . isEmpty ( ) ) { q . add ( ( ( s + d2 ) , st + 1 ) ; visited . add ( ( s - d2 ) ) ; } if ( visited . isEmpty ( ) ) { q . add ( ( s - d2 ) ; visited . add ( ( s - d2 ) ; } } } return Integer . MIN_VALUE ; } public static void main ( String [ ] args ) { int k = 10 , d1 = 4 , d2 = 6 ; int x = 8 ; System . out . println ( minSteps ( k , d1 , d2 , x ) ) ; } }"],"references":["import java . util . * ; class GFG { static class pair { int first , second ; public pair ( int first , int second ) { this . first = first ; this . second = second ; } } static int __gcd ( int a , int b ) { if ( b == 0 ) return a ; return __gcd ( b , a % b ) ; } static int minStepsNeeded ( int k , int d1 , int d2 , int x ) { int gcd = __gcd ( d1 , d2 ) ; if ( ( k - x ) % gcd != 0 ) return - 1 ; Queue < pair > q = new LinkedList < > ( ) ; HashSet < Integer > visited = new HashSet < > ( ) ; q . add ( new pair ( k , 0 ) ) ; visited . add ( k ) ; while ( ! q . isEmpty ( ) ) { int s = q . peek ( ) . first ; int stp = q . peek ( ) . second ; if ( s == x ) return stp ; q . remove ( ) ; if ( ! visited . contains ( s + d1 ) ) { q . add ( new pair ( s + d1 , stp + 1 ) ) ; visited . add ( s + d1 ) ; } if ( visited . contains ( s + d2 ) ) { q . add ( new pair ( s + d2 , stp + 1 ) ) ; visited . add ( s + d2 ) ; } if ( ! visited . contains ( s - d1 ) ) { q . add ( new pair ( s - d1 , stp + 1 ) ) ; visited . add ( s - d1 ) ; } if ( ! visited . contains ( s - d2 ) ) { q . add ( new pair ( s - d2 , stp + 1 ) ) ; visited . add ( s - d2 ) ; } } return Integer . MIN_VALUE ; } public static void main ( String [ ] args ) { int k = 10 , d1 = 4 , d2 = 6 , x = 8 ; System . out . println ( minStepsNeeded ( k , d1 , d2 , x ) ) ; } }"],"bleu":0.6053488990302757,"rouge_l":0.7442352271340843}
{"id":1153,"predictions":["class GFG { static void minAbsSumPair ( int arr [ ] , int arr_size ) { int inv_count = 0 ; if ( arr_size < 2 ) { System . out . println ( \" Invalid ▁ Input \" ) ; return ; } int min_l = 0 , min_r = arr [ 0 ] + arr [ 1 ] ; for ( int l = 0 ; l < arr_size - 1 ; l ++ ) { for ( int r = l + 1 ; r < arr_size ; r ++ ) { int sum = arr [ l ] + arr [ r ] ; if ( Math . abs ( min_sum ) > Math . abs ( sum ) ) { min_sum = sum ; min_l = l ; min_r = r ; } } } System . out . println ( \" The ▁ two ▁ elements ▁ with ▁ sum ▁ is ▁ minimum ▁ and ▁ \" + arr [ min_r ] ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 60 , - 10 , 70 , - 80 } ; minAbsSumPair ( arr , 6 ) ; } }"],"references":["import java . util . * ; import java . lang . * ; class Main { static void minAbsSumPair ( int arr [ ] , int arr_size ) { int inv_count = 0 ; int l , r , min_sum , sum , min_l , min_r ; if ( arr_size < 2 ) { System . out . println ( \" Invalid ▁ Input \" ) ; return ; } min_l = 0 ; min_r = 1 ; min_sum = arr [ 0 ] + arr [ 1 ] ; for ( l = 0 ; l < arr_size - 1 ; l ++ ) { for ( r = l + 1 ; r < arr_size ; r ++ ) { sum = arr [ l ] + arr [ r ] ; if ( Math . abs ( min_sum ) > Math . abs ( sum ) ) { min_sum = sum ; min_l = l ; min_r = r ; } } } System . out . println ( \" ▁ The ▁ two ▁ elements ▁ whose ▁ \" + \" sum ▁ is ▁ minimum ▁ are ▁ \" + arr [ min_l ] + \" ▁ and ▁ \" + arr [ min_r ] ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 60 , - 10 , 70 , - 80 , 85 } ; minAbsSumPair ( arr , 6 ) ; } }"],"bleu":0.7269653753213808,"rouge_l":0.8608785887236251}
{"id":1154,"predictions":["class GFG { static int findSubsequence ( int arr [ ] , int n ) { int length = 1 ; int [ ] dp = new int [ 10 ] ; tmp = arr [ 0 ] ; while ( tmp > 0 ) { dp [ tmp % 10 ] = 1 ; tmp \/= 10 ; } for ( int i = 1 ; i < n ; i ++ ) { tmp = arr [ i ] ; int locMax = 1 ; int [ ] cnt = new int [ 10 ] ; while ( tmp > 0 ) { cnt [ tmp % 10 ] = 1 ; tmp \/= 10 ; } for ( int d = 0 ; d < 10 ; d ++ ) { if ( cnt [ d ] > 0 ) { dp [ d ] ++ ; locMax = Math . max ( locMax , dp [ d ] ) ; } } for ( int d = 0 ; d < 10 ; d ++ ) { if ( cnt [ d ] > 0 ) { dp [ d ] = locMax ; } } } return len ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 12 , 44 , 29 , 33 , 96 , 89 } ; int n = arr . length ; System . out . println ( findSubsequence ( arr , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static int findSubsequence ( int arr [ ] , int n ) { int len = 1 ; int tmp ; int i , j , d ; int dp [ ] = new int [ 10 ] ; int cnt [ ] = new int [ 10 ] ; int locMax ; tmp = arr [ 0 ] ; while ( tmp > 0 ) { dp [ tmp % 10 ] = 1 ; tmp \/= 10 ; } for ( i = 1 ; i < n ; i ++ ) { tmp = arr [ i ] ; locMax = 1 ; Arrays . fill ( cnt , 0 ) ; while ( tmp > 0 ) { cnt [ tmp % 10 ] = 1 ; tmp \/= 10 ; } for ( d = 0 ; d <= 9 ; d ++ ) { if ( cnt [ d ] == 1 ) { dp [ d ] ++ ; locMax = Math . max ( locMax , dp [ d ] ) ; } } for ( d = 0 ; d <= 9 ; d ++ ) { if ( cnt [ d ] == 1 ) { dp [ d ] = locMax ; } } len = Math . max ( len , locMax ) ; } return len ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 12 , 44 , 29 , 33 , 96 , 89 } ; int n = arr . length ; System . out . print ( findSubsequence ( arr , n ) ) ; } }"],"bleu":0.7440182958775997,"rouge_l":0.8391233387736069}
{"id":1155,"predictions":["import java . util . Arrays ; import java . io . * ; class GFG { static int dp [ ] [ ] [ ] [ ] ; static int countWaysUtil ( int n , int [ ] [ ] [ ] ways , int nextPart ) { if ( ways == 0 && n == 0 ) return 1 ; if ( n <= 0 || partitions <= 0 ) return 0 ; if ( dp [ n ] [ nextPart ] [ ways ] [ ways ] != - 1 ) return dp [ n ] [ nextPart ] [ terms ] ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) ans += countWaysUtil ( n - i , partition - 1 , i ) ; return ( ans ) ; } static int countWays ( int n , int [ ] partition , int [ ] bits ) { for ( int i = 0 ; i < 2 ; i ++ ) for ( int j = nextPartitionsUtil ( n , 4 , 1 ) ; j ++ ) return countWaysUtil ( n , nextPart ) ; } static int countWays ( int n ) { return countWaysUtil ( n , 4 , 1 ) ; } public static void main ( String [ ] args ) { int n = 8 ; System . out . println ( countWays ( n ) ) ; } }"],"references":["class GFG { static int dp [ ] [ ] [ ] = new int [ 5001 ] [ 5001 ] [ 5 ] ; static int countWaysUtil ( int n , int parts , int nextPart ) { if ( parts == 0 && n == 0 ) return 1 ; if ( n <= 0 || parts <= 0 ) return 0 ; if ( dp [ n ] [ nextPart ] [ parts ] != - 1 ) return dp [ n ] [ nextPart ] [ parts ] ; int ans = 0 ; for ( int i = nextPart ; i <= n ; i ++ ) ans += countWaysUtil ( n - i , parts - 1 , i ) ; return ( dp [ n ] [ nextPart ] [ parts ] = ans ) ; } static int countWays ( int n ) { for ( int i = 0 ; i < 5001 ; i ++ ) { for ( int j = 0 ; j < 5001 ; j ++ ) { for ( int l = 0 ; l < 5 ; l ++ ) dp [ i ] [ j ] [ l ] = - 1 ; } } return countWaysUtil ( n , 4 , 1 ) ; } public static void main ( String [ ] args ) { int n = 8 ; System . out . println ( countWays ( n ) ) ; } }"],"bleu":0.6769196338001664,"rouge_l":0.75098814229249}
{"id":1156,"predictions":["class GFG { static double nthRoot ( int A , int N ) { double xPre = ( int ) Math . random ( ) % 10 ; double eps = ( double ) 1e-3 ; double delX = Integer . MAX_VALUE ; while ( delX > eps ) { double xK = ( ( N - 1.0 ) * xPre + ( double ) A \/ Math . pow ( xPre , N - 1 ) ) \/ N ; delX = Math . abs ( xK - xPre ) ; xPre = xK ; } return xK ; } static double countPowers ( int a , int b , int k ) { return ( int ) ( Math . floor ( b , k ) - Math . pow ( nthRoot ( a , k ) ) + 1 ) ; } public static void main ( String [ ] args ) { int a = 7 , b = 28 , k = 2 ; System . out . print ( \" Count ▁ of ▁ powers ▁ is ▁ \" + countPowers ( a , b , k ) ) ; } }"],"references":["class GFG { static double nthRoot ( int A , int N ) { double xPre = Math . random ( ) * 10 % 10 ; double eps = 1e-3 ; double delX = Integer . MAX_VALUE ; double xK = 0 ; while ( delX > eps ) { xK = ( ( N - 1.0 ) * xPre + ( double ) A \/ Math . pow ( xPre , N - 1 ) ) \/ ( double ) N ; delX = Math . abs ( xK - xPre ) ; xPre = xK ; } return xK ; } static int countPowers ( int a , int b , int k ) { return ( int ) ( Math . floor ( nthRoot ( b , k ) ) - Math . ceil ( nthRoot ( a , k ) ) + 1 ) ; } public static void main ( String [ ] args ) { int a = 7 , b = 28 , k = 2 ; System . out . print ( \" Count ▁ of ▁ Powers ▁ is ▁ \" + countPowers ( a , b , k ) ) ; } }"],"bleu":0.8626797232017278,"rouge_l":0.9328127541890353}
{"id":1157,"predictions":["class GfG { static void minSwaps ( String str1 , String str2 ) { int count = 0 ; for ( int i = 0 ; i < str1 . length ( ) ; i ++ ) { if ( str1 . charAt ( i ) != str2 . charAt ( i ) ) { count ++ ; } } if ( count % 2 == 0 ) { System . out . println ( count \/ 2 ) ; } else { System . out . println ( \" Not ▁ Possible \" ) ; } } public static void main ( String [ ] args ) { String binaryString1 = \"111\" ; minSwaps ( binaryString1 , binaryString2 ) ; } }"],"references":["public class GFG { static void minSwaps ( String str1 , String str2 ) { int count = 0 ; for ( int i = 0 ; i < str1 . length ( ) ; i ++ ) { if ( str1 . charAt ( i ) != str2 . charAt ( i ) ) count ++ ; } if ( count % 2 == 0 ) System . out . println ( count \/ 2 ) ; else System . out . println ( \" Not ▁ Possible \" ) ; } public static void main ( String args [ ] ) { String binaryString1 = \"1110000\" ; String binaryString2 = \"0001101\" ; minSwaps ( binaryString1 , binaryString2 ) ; } }"],"bleu":0.8286352410041996,"rouge_l":0.9268292682926829}
{"id":1158,"predictions":["import java . util . * ; class GfG { static int countOrderedPairs ( int A [ ] , int n ) { int [ ] sortedPairs = new int [ n + 1 ] ; HashMap < Integer , Integer > m = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; ++ i ) { if ( m . containsKey ( A [ i ] ) ) { m . put ( A [ i ] , m . get ( A [ i ] ) + 1 ) ; } else { m . put ( A [ i ] , m . get ( A [ i ] ) + 1 ) ; } } for ( int i = 1 ; i <= n ; i ++ ) { if ( m . get ( i ) >= X ) { sortedPairs ++ ; } } return sortedPairs ; } public static void main ( String [ ] args ) { int A [ ] = { 1 , 1 , 2 , 3 } ; int n = A . length ; System . out . println ( countOrderedPairs ( A , n ) ) ; } }"],"references":["import java . util . HashMap ; import java . util . Map ; class GFG { public static int countOrderedPairs ( int [ ] A , int n ) { int orderedPairs = 0 ; HashMap < Integer , Integer > m = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( m . get ( A [ i ] ) == null ) m . put ( A [ i ] , 1 ) ; else { int a = m . get ( A [ i ] ) ; m . put ( A [ i ] , ++ a ) ; } } for ( int entry : m . keySet ( ) ) { int X = entry ; int Y = m . get ( entry ) ; for ( int j = 1 ; j <= Y ; j ++ ) { if ( m . get ( j ) >= X ) orderedPairs ++ ; } } return orderedPairs ; } public static void main ( String [ ] args ) { int [ ] A = { 1 , 1 , 2 , 2 , 3 } ; int n = A . length ; System . out . print ( countOrderedPairs ( A , n ) ) ; } }"],"bleu":0.6106127804517413,"rouge_l":0.756998556998557}
{"id":1159,"predictions":["class GFG { static void makeAP ( int arr [ ] , int n ) { int minimum_term = 0 , two_difference = 0 ; if ( n == 3 ) { common_difference = arr [ 2 ] - arr [ 1 ] ; minimum_term = arr [ 1 ] - common_diff ; } else if ( arr [ 1 ] - arr [ 0 ] == arr [ 2 ] - arr [ 1 ] ) { minimum_term ; common_difference = arr [ 1 ] - arr [ 0 ] ; } else if ( ( arr [ 2 ] - arr [ 1 ] ) == ( arr [ 3 ] - arr [ 2 ] ) ) { common_difference = arr [ 2 ] - arr [ 1 ] ; decimal_term = arr [ 1 ] - common_diff ; } else { common_difference = ( arr [ 3 ] - arr [ 0 ] ) \/ 3 ; } for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( original_term + ( i * common_difference ) + \" ▁ \" ) ; } System . out . println ( ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 3 , 7 } ; int n = arr . length ; makeAP ( arr , n ) ; } }"],"references":["import java . util . Arrays ; class AP { static void makeAP ( int arr [ ] , int n ) { int initial_term , common_difference ; if ( n == 3 ) { common_difference = arr [ 2 ] - arr [ 1 ] ; initial_term = arr [ 1 ] - common_difference ; } else if ( ( arr [ 1 ] - arr [ 0 ] ) == arr [ 2 ] - arr [ 1 ] ) { initial_term = arr [ 0 ] ; common_difference = arr [ 1 ] - arr [ 0 ] ; } else if ( ( arr [ 2 ] - arr [ 1 ] ) == ( arr [ 3 ] - arr [ 2 ] ) ) { common_difference = arr [ 2 ] - arr [ 1 ] ; initial_term = arr [ 1 ] - common_difference ; } else { common_difference = ( arr [ 3 ] - arr [ 0 ] ) \/ 3 ; initial_term = arr [ 0 ] ; } for ( int i = 0 ; i < n ; i ++ ) System . out . print ( initial_term + ( i * common_difference ) + \" ▁ \" ) ; System . out . println ( ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 3 , 7 } ; int n = arr . length ; makeAP ( arr , n ) ; } }"],"bleu":0.8159561087824101,"rouge_l":0.9064067927441142}
{"id":1160,"predictions":["class GFG { public static int countIncreasing ( int arr [ ] , int n ) { int cnt = 0 ; int len = 1 ; for ( int i = 0 ; i < n - 1 ; ++ i ) { if ( arr [ i + 1 ] > arr [ i ] ) len ++ ; else { cnt += ( ( len - 1 ) * len ) \/ 2 ) ; len = 1 ; } } if ( len > 1 ) cnt += ( ( ( len - 1 ) * len ) \/ 2 ) ; return cnt ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 2 , 4 } ; int n = arr . length ; System . out . println ( \" Count ▁ of ▁ increasing ▁ subarrays ▁ is ▁ \" + countIncreasing ( arr , n ) ) ; } }"],"references":["class Test { static int arr [ ] = new int [ ] { 1 , 2 , 2 , 4 } ; static int countIncreasing ( int n ) { int cnt = 0 ; int len = 1 ; for ( int i = 0 ; i < n - 1 ; ++ i ) { if ( arr [ i + 1 ] > arr [ i ] ) len ++ ; else { cnt += ( ( ( len - 1 ) * len ) \/ 2 ) ; len = 1 ; } } if ( len > 1 ) cnt += ( ( ( len - 1 ) * len ) \/ 2 ) ; return cnt ; } public static void main ( String [ ] args ) { System . out . println ( \" Count ▁ of ▁ strictly ▁ increasing ▁ subarrays ▁ is ▁ \" + countIncreasing ( arr . length ) ) ; } }"],"bleu":0.8639145352925388,"rouge_l":0.8459076803723818}
{"id":1161,"predictions":["class GFG { static float harmonicMean ( int arr [ ] , int n ) { float sum = 0.5 ; for ( int i = 0 ; i < n ; i ++ ) sum = sum + ( 1 ) \/ arr [ i ] ; return n \/ sum ; } public static void main ( String [ ] args ) { float arr [ ] = { 13.5 , 14.5 , 14.1 , 15.1 } ; int n = arr . length ; System . out . println ( harmonicMean ( arr , n ) ) ; } }"],"references":["import java . io . * ; class GFG { static float harmonicMean ( float arr [ ] , int n ) { float sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum = sum + ( float ) 1 \/ arr [ i ] ; return ( float ) n \/ sum ; } public static void main ( String args [ ] ) { float arr [ ] = { 13.5f , 14.5f , 14.8f , 15.2f , 16.1f } ; int n = arr . length ; System . out . println ( harmonicMean ( arr , n ) ) ; } }"],"bleu":0.697075978683892,"rouge_l":0.8583913494297143}
{"id":1162,"predictions":["import java . io . * ; class GFG { static boolean asPowerSum ( int w , int m ) { while ( m > 0 ) { if ( ( m - 1 ) % w == 0 ) m = ( m - 1 ) \/ w ; else if ( ( m + 1 ) % w == 0 ) m = ( m + 1 ) \/ w ; else if ( m % w == 0 ) m = m \/ w ; else break ; } return ( m == 0 ) ; } public static void main ( String [ ] args ) { int w = 3 , m = 7 ; if ( asPowerSum ( w , m ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static boolean asPowerSum ( int w , int m ) { while ( m > 0 ) { if ( ( m - 1 ) % w == 0 ) m = ( m - 1 ) \/ w ; else if ( ( m + 1 ) % w == 0 ) m = ( m + 1 ) \/ w ; else if ( m % w == 0 ) m = m \/ w ; else break ; } return ( m == 0 ) ; } public static void main ( String [ ] args ) { int w = 3 , m = 7 ; if ( asPowerSum ( w , m ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.9543949168538204,"rouge_l":0.9808575803981624}
{"id":1163,"predictions":["import java . io . * ; class GFG { static void result ( int n , int k , int t ) { if ( t <= k ) System . out . println ( t ) ; else if ( t <= n ) System . out . println ( k ) ; else { int temp = t - n ; temp = k - temp ; System . out . println ( temp ) ; } } public static void main ( String [ ] args ) { int n = 10 , k = 5 , t = 12 ; result ( n , k , t ) ; } }"],"references":["class GFG { static void result ( long n , long k , long t ) { if ( t <= k ) System . out . println ( t ) ; else if ( t <= n ) System . out . println ( k ) ; else { long temp = t - n ; temp = k - temp ; System . out . println ( temp ) ; } } public static void main ( String args [ ] ) { long n , k , t ; n = 10 ; k = 5 ; t = 12 ; result ( n , k , t ) ; } }"],"bleu":0.768605796164418,"rouge_l":0.8751420454545454}
{"id":1164,"predictions":["class GFG { static int height = int [ ] [ ] ; static void preprocess ( int n ) { int height = ( int ) ( Math . ceil ( n ) \/ Math . log10 ( 2 ) ) ; for ( int i = 0 ; i < n ; i ++ ) { table [ i ] [ i ] = - 1 ; } } static int calculateSparse ( int u , int v ) { int i = 0 ; while ( i < ( i ) ) { table [ v ] [ i ] = - 1 ; i ++ ; } } static int calculateSparse ( int v , int k ) { table [ v [ ] [ i ] = v ; for ( int i = 1 ; i <= height ; i ++ ) { if ( ( k & ( 1 << i ) ) != 0 ) { V = table [ V ] [ i ] ; if ( table [ v ] [ i ] == - 1 ) break ; } i ++ ; } return V ; } static int kthanor ( int V , int k ) { for ( int i = 0 ; i <= height ; i ++ ) { if ( ( k & ( 1 << i ) ) != 0 ) { int V = table [ V ] [ i ] ; if ( v == - 1 ) break ; } return V ; } } public static void main ( String [ ] args ) { int n = 6 ; int arr [ ] = new int [ n ] [ 2 ] ; preprocess ( 1 , 2 ) ; int k = 2 ; System . out . println ( kthScanner ( 1 , 2 ) ) ; int k = 2 ; for ( int i = 0 ; i < n ; i ++ ) { if ( ( k & ( 1 << i ) ) != 0 ) { V = table [ V ] [ i ] ; if ( V == - 1 ) break ; } } return V ; } }"],"references":["import java . util . Arrays ; class GfG { private static int table [ ] [ ] ; private static int height ; private GfG ( int n ) { height = ( int ) Math . ceil ( Math . log10 ( n ) \/ Math . log10 ( 2 ) ) ; table = new int [ n + 1 ] [ height + 1 ] ; } private static void preprocessing ( ) { for ( int i = 0 ; i < table . length ; i ++ ) { Arrays . fill ( table [ i ] , - 1 ) ; } } private static void calculateSparse ( int u , int v ) { table [ v ] [ 0 ] = u ; for ( int i = 1 ; i <= height ; i ++ ) { table [ v ] [ i ] = table [ table [ v ] [ i - 1 ] ] [ i - 1 ] ; if ( table [ v ] [ i ] == - 1 ) break ; } } private static int kthancestor ( int V , int k ) { for ( int i = 0 ; i <= height ; i ++ ) { if ( ( k & ( 1 << i ) ) != 0 ) { V = table [ V ] [ i ] ; if ( V == - 1 ) break ; } } return V ; } public static void main ( String args [ ] ) { int n = 6 ; GfG obj = new GfG ( n ) ; preprocessing ( ) ; calculateSparse ( 1 , 2 ) ; calculateSparse ( 1 , 3 ) ; calculateSparse ( 2 , 4 ) ; calculateSparse ( 2 , 5 ) ; calculateSparse ( 3 , 6 ) ; int K = 2 , V = 5 ; System . out . print ( kthancestor ( V , K ) ) ; } }"],"bleu":0.5244414580534491,"rouge_l":0.6375533945287648}
{"id":1165,"predictions":["class GfG { static void factors ( int n , int i ) { if ( i <= n ) { if ( n % i == 0 ) { System . out . print ( i + \" ▁ \" ) ; } else { factors ( n , i + 1 ) ; } factors ( n , i + 1 ) ; } } public static void main ( String [ ] args ) { int N = 16 ; factors ( N , 1 ) ; } }"],"references":["class GFG { static void factors ( int n , int i ) { if ( i <= n ) { if ( n % i == 0 ) { System . out . print ( i + \" ▁ \" ) ; } factors ( n , i + 1 ) ; } } public static void main ( String args [ ] ) { int N = 16 ; factors ( N , 1 ) ; } }"],"bleu":0.8105070135810205,"rouge_l":0.9185328185328184}
{"id":1166,"predictions":["import java . util . * ; class GFG { static int sumKRepeating ( int arr [ ] , int n , int k ) { int sum = 0 ; HashMap < Integer , Integer > mp = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( mp . containsKey ( arr [ i ] ) ) { mp . put ( arr [ i ] , mp . get ( arr [ i ] ) + 1 ) ; } else { mp . put ( arr [ i ] , 1 ) ; } } for ( Map . Entry < Integer , Integer > x : mp . entrySet ( ) ) { if ( x . getValue ( ) == k ) { sum += x ; } } return sum ; } public static void main ( String args [ ] ) { int arr [ ] = { 9 , 9 , 10 , 11 , 8 , 8 , 9 , 8 } ; int n = arr . length ; int k = 3 ; System . out . println ( sumKRepeating ( arr , n , k ) ) ; } }"],"references":["import java . util . HashMap ; import java . util . Map ; class GfG { static int sumKRepeating ( int arr [ ] , int n , int k ) { int sum = 0 ; HashMap < Integer , Integer > mp = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( ! mp . containsKey ( arr [ i ] ) ) mp . put ( arr [ i ] , 0 ) ; mp . put ( arr [ i ] , mp . get ( arr [ i ] ) + 1 ) ; } for ( Integer x : mp . keySet ( ) ) if ( mp . get ( x ) == k ) sum += x ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 9 , 9 , 10 , 11 , 8 , 8 , 9 , 8 } ; int n = arr . length ; int k = 3 ; System . out . println ( sumKRepeating ( arr , n , k ) ) ; } }"],"bleu":0.7934948877716266,"rouge_l":0.8784751636503658}
{"id":1167,"predictions":["import java . io . * ; class GFG { static int power ( int num , int n ) { if ( n == 0 ) return 1 ; else if ( n % 2 == 0 ) return power ( num , n \/ 2 ) * power ( num , n \/ 2 ) ; else return num * power ( num , n \/ 2 ) * power ( num , n \/ 2 ) ; } static int checkRecursive ( int x , int n , int curr_num ) { int result = 0 ; int p = power ( curr_num , n ) ; while ( p + curr_sum ) { result += checkRecursive ( x , n , curr_num + 1 , p + curr_sum ) ; curr_num = curr_num + 1 ; p = power ( curr_num , n ) ; } if ( p + curr_sum == x ) result ++ ; return result ; } public static void main ( String [ ] args ) { int x = 10 ; n = 2 ; System . out . println ( checkRecursive ( x , n ) ) ; } }"],"references":["class GFG { static int power ( int num , int n ) { if ( n == 0 ) return 1 ; else if ( n % 2 == 0 ) return power ( num , n \/ 2 ) * power ( num , n \/ 2 ) ; else return num * power ( num , n \/ 2 ) * power ( num , n \/ 2 ) ; } static int checkRecursive ( int x , int n , int curr_num , int curr_sum ) { int results = 0 ; int p = power ( curr_num , n ) ; while ( p + curr_sum < x ) { results += checkRecursive ( x , n , curr_num + 1 , p + curr_sum ) ; curr_num ++ ; p = power ( curr_num , n ) ; } if ( p + curr_sum == x ) results ++ ; return results ; } public static void main ( String [ ] args ) { int x = 10 , n = 2 ; System . out . println ( checkRecursive ( x , n , 1 , 0 ) ) ; } }"],"bleu":0.8560519568867189,"rouge_l":0.9231083844580779}
{"id":1168,"predictions":["import java . util . * ; class GFG { static int nCr ( int n , int r ) { Vector < Integer > fac = new Vector < Integer > ( ) ; fac . add ( 1 ) ; for ( int i = 1 ; i <= n ; i ++ ) fac . add ( fac . get ( i - 1 ) * i ) ; int ans = fac [ n ] \/ ( fac [ n - 1 ] * fac [ r ] ) ; ans = ( n ) \/ ( fac [ n - 1 ] * fac [ r ] ) ; return ans ; } public static void main ( String [ ] args ) { int n = 3 , k = 3 ; int ans = nCr ( n , k ) + nCr ( k - 1 , n - 1 ) ; System . out . println ( ans ) ; } }"],"references":["import java . io . * ; class GFG { static int nCr ( int n , int r ) { int fac [ ] = new int [ 100 ] ; for ( int i = 0 ; i < n ; i ++ ) fac [ i ] = 1 ; for ( int i = 1 ; i < n + 1 ; i ++ ) { fac [ i ] = fac [ i - 1 ] * i ; } int ans = fac [ n ] \/ ( fac [ n - r ] * fac [ r ] ) ; return ans ; } public static void main ( String [ ] args ) { int n = 3 ; int k = 3 ; int ans = nCr ( n + k - 1 , k ) + nCr ( k - 1 , n - 1 ) ; System . out . println ( ans ) ; } }"],"bleu":0.6438764112702057,"rouge_l":0.7463585162167411}
{"id":1169,"predictions":["class pairSum { public static int pairORSum ( int arr [ ] , int n ) { int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = i + 1 ; j < n ; j ++ ) ans += ( arr [ i ] ^ arr [ j ] ) ; return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 5 , 9 , 7 , 6 } ; int n = arr . length ; System . out . print ( pairORSum ( arr , n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int pairORSum ( int arr [ ] , int n ) { int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = i + 1 ; j < n ; j ++ ) ans += arr [ i ] ^ arr [ j ] ; return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 5 , 9 , 7 , 6 } ; int n = arr . length ; System . out . println ( pairORSum ( arr , arr . length ) ) ; } }"],"bleu":0.841044381425356,"rouge_l":0.9221404682274247}
{"id":1170,"predictions":["class GFG { static void alphabetPattern ( int N ) { int top , bottom ; top = 1 , Diagonal = N - 1 ; for ( int index = 0 ; index < N ; index ++ ) { System . out . print ( top + \" ▁ \" ) ; top ++ ; } System . out . print ( \" \\n \" ) ; for ( int index = 1 ; index < N - 1 ; index ++ ) { for ( int side_index = 0 ; side_index < 2 * ( N - index - 1 ) ; System . out . print ( \" ▁ \" ) ; System . out . println ( ) ; } for ( int index = 0 ; index < N ; index ++ ) System . out . print ( bottom + \" ▁ \" ) ; } public static void main ( String [ ] args ) { int N = 5 ; alphabetPattern ( N ) ; } }"],"references":["class GFG { static void alphabetPattern ( int N ) { int index , side_index ; int Top = 1 , Bottom = 1 , Diagonal = N - 1 ; for ( index = 0 ; index < N ; index ++ ) System . out . print ( Top ++ + \" ▁ \" ) ; System . out . println ( ) ; for ( index = 1 ; index < N - 1 ; index ++ ) { for ( side_index = 0 ; side_index < 2 * ( N - index - 1 ) ; side_index ++ ) System . out . print ( \" ▁ \" ) ; System . out . print ( Diagonal -- ) ; System . out . println ( ) ; } for ( index = 0 ; index < N ; index ++ ) System . out . print ( Bottom ++ + \" ▁ \" ) ; } public static void main ( String args [ ] ) { int N = 5 ; alphabetPattern ( N ) ; } }"],"bleu":0.7527803279311978,"rouge_l":0.8687409288824384}
{"id":1171,"predictions":["import java . util . * ; class GFG { static boolean areElementsContiguous ( int arr [ ] , int n ) { Set < Integer > us = new HashSet < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) us . add ( arr [ i ] - 1 ) ; int count = 1 ; int curr_ele = arr [ 0 ] - 1 ; while ( curr_ele > 0 ) { count ++ ; curr_ele_ele -- ; } curr_ele ++ ; while ( ! us . contains ( count ) ) { count ++ ; curr_ele ++ ; } return ( count == us . size ( ) ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 5 , 2 , 3 , 6 , 4 , 4 , 6 } ; int n = arr . length ; if ( areElementsContiguous ( arr , n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . io . * ; import java . util . * ; class GFG { static Boolean areElementsContiguous ( int arr [ ] , int n ) { HashSet < Integer > us = new HashSet < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) us . add ( arr [ i ] ) ; int count = 1 ; int curr_ele = arr [ 0 ] - 1 ; while ( us . contains ( curr_ele ) == true ) { count ++ ; curr_ele -- ; } curr_ele = arr [ 0 ] + 1 ; while ( us . contains ( curr_ele ) == true ) { count ++ ; curr_ele ++ ; } return ( count == ( us . size ( ) ) ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 5 , 2 , 3 , 6 , 4 , 4 , 6 , 6 } ; int n = arr . length ; if ( areElementsContiguous ( arr , n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.7731815808797169,"rouge_l":0.8905457100476227}
{"id":1172,"predictions":["import java . util . * ; class GFG { static int pivot ; static int pivot ; static int pivot ( int arr [ ] , int n , int key ) { int pivot = findPivot ( arr , 0 , n - 1 ) ; if ( pivot == - 1 ) return binarySearch ( arr , 0 , n - 1 , key ) ; if ( arr [ 0 ] <= key ) return binarySearch ( arr , 0 , n - 1 , key ) ; if ( arr [ 0 ] <= key ) return binarySearch ( arr , 0 , n - 1 , key ) ; return binarySearch ( arr , pivot + 1 , n - 1 , key ) ; } static int findPivot ( int arr [ ] , int low , int high ) { if ( high < low ) return - 1 ; int mid = ( low + high ) \/ 2 ; if ( mid < high && arr [ mid ] > arr [ mid + 1 ] ) return mid ; if ( mid > low && arr [ mid ] < arr [ mid - 1 ] ) return findPivot ( arr , low , mid - 1 ) ; if ( arr [ low ] >= arr [ mid ] ) return findPivot ( arr , low , mid - 1 ) ; return findPivot ( arr , mid + 1 , high ) ; } static int binarySearch ( int arr [ ] , int low , int high , int key ) { if ( high < low ) return - 1 ; int mid = ( low + high ) \/ 2 ; if ( key == arr [ mid ] ) return binarySearch ( arr , ( mid + 1 ) , high , key ) ; if ( key > arr [ mid ] ) return binarySearch ( arr , ( mid + 1 ) , high , key ) ; return binarySearch ( arr , low , ( mid - 1 ) , key ) ; } public static void main ( String [ ] args ) { int arr1 [ ] = { 5 , 6 , 7 , 8 , 1 , 2 , 3 } ; int n = arr1 . length ; int key = 3 ; System . out . println ( \" \\n \" ) ; } }"],"references":["class Main { static int pivotedBinarySearch ( int arr [ ] , int n , int key ) { int pivot = findPivot ( arr , 0 , n - 1 ) ; if ( pivot == - 1 ) return binarySearch ( arr , 0 , n - 1 , key ) ; if ( arr [ pivot ] == key ) return pivot ; if ( arr [ 0 ] <= key ) return binarySearch ( arr , 0 , pivot - 1 , key ) ; return binarySearch ( arr , pivot + 1 , n - 1 , key ) ; } static int findPivot ( int arr [ ] , int low , int high ) { if ( high < low ) return - 1 ; if ( high == low ) return low ; int mid = ( low + high ) \/ 2 ; if ( mid < high && arr [ mid ] > arr [ mid + 1 ] ) return mid ; if ( mid > low && arr [ mid ] < arr [ mid - 1 ] ) return ( mid - 1 ) ; if ( arr [ low ] >= arr [ mid ] ) return findPivot ( arr , low , mid - 1 ) ; return findPivot ( arr , mid + 1 , high ) ; } static int binarySearch ( int arr [ ] , int low , int high , int key ) { if ( high < low ) return - 1 ; int mid = ( low + high ) \/ 2 ; if ( key == arr [ mid ] ) return mid ; if ( key > arr [ mid ] ) return binarySearch ( arr , ( mid + 1 ) , high , key ) ; return binarySearch ( arr , low , ( mid - 1 ) , key ) ; } public static void main ( String args [ ] ) { int arr1 [ ] = { 5 , 6 , 7 , 8 , 9 , 10 , 1 , 2 , 3 } ; int n = arr1 . length ; int key = 3 ; System . out . println ( \" Index ▁ of ▁ the ▁ element ▁ is ▁ : ▁ \" + pivotedBinarySearch ( arr1 , n , key ) ) ; } }"],"bleu":0.845168346036912,"rouge_l":0.8902115878979631}
{"id":1173,"predictions":["import java . util . * ; class GFG { static void findDandZeros ( int a [ ] , int b [ ] , int n ) { Map < Integer , Integer > mpp = new HashMap < > ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( b [ i ] != 0 && a [ i ] != 0 ) { double val = ( - 1.0 * b [ i ] ) \/ a [ i ] ; if ( mpp . containsKey ( val ) ) { mpp . put ( val , mpp . get ( val ) ) ; } else if ( b [ i ] == 0 && a [ i ] == 0 ) { count += 1 ; } } else if ( b [ i ] == 0 && a [ i ] == 0 ) { count += 1 ; } } int maxi = 0 ; for ( Map . Entry < Integer , Integer > a : mpp . entrySet ( ) ) { maxi = Math . max ( maxi , maxi ) ; } for ( Map . Entry < Integer , Integer > entry : mpp . entrySet ( ) ) { maxi = Math . max ( maxi , entry . getValue ( ) ) ; } System . out . println ( \" The ▁ number ▁ of ▁ zz ▁ in ▁ array ▁ C ▁ is : ▁ \" + count ) ; } public static void main ( String [ ] args ) { int a [ ] = { 13 , 37 , 39 } ; int b [ ] = { 1 , 2 , 3 } ; int n = a . length ; findDands ( a , b , n ) ; } }"],"references":["import java . util . * ; class geeks { public static void findDandZeroes ( int [ ] a , int [ ] b , int n ) { HashMap < Double , Integer > mpp = new HashMap < > ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( b [ i ] != 0 && a [ i ] != 0 ) { double val = ( double ) ( - 1.0 * b [ i ] ) \/ ( double ) ( a [ i ] ) ; if ( mpp . get ( val ) != null ) { int x = mpp . get ( val ) ; mpp . put ( val , ++ x ) ; } else mpp . put ( val , 1 ) ; } else if ( b [ i ] == 0 && a [ i ] == 0 ) count += 1 ; } int maxi = 0 ; for ( HashMap . Entry < Double , Integer > entry : mpp . entrySet ( ) ) { maxi = Math . max ( entry . getValue ( ) , maxi ) ; } for ( HashMap . Entry < Double , Integer > entry : mpp . entrySet ( ) ) { if ( entry . getValue ( ) == maxi ) { System . out . println ( \" Value ▁ of ▁ d ▁ is : ▁ \" + entry . getKey ( ) ) ; break ; } } System . out . println ( \" The ▁ number ▁ of ▁ zeros ▁ in ▁ array ▁ C ▁ is : ▁ \" + ( maxi + count ) ) ; } public static void main ( String [ ] args ) { int [ ] a = { 13 , 37 , 39 } ; int [ ] b = { 1 , 2 , 3 } ; int n = a . length ; findDandZeroes ( a , b , n ) ; } }"],"bleu":0.6446574077932202,"rouge_l":0.8038826696896698}
{"id":1174,"predictions":["class GFG { static int count_odd ; static int count_odd ; static int count_odd ; static int count_oddPair ( int n , int a [ ] ) { int odd = 0 , even = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % 2 == 0 ) even ++ ; else odd = odd + 1 ; } int ans = odd * even * 2 ; return ans ; } static int count_even_pair ( int odd_sum_pairs ( int odd_sum_pairs , int n ) { int total_pairs = ( n * ( n - 1 ) ) ; int ans = total_pairs - odd_sum_pairs ; return ans ; } public static void main ( String [ ] args ) { int n = 6 ; int a [ ] = { 2 , 4 , 5 , 9 , 1 , 8 } ; int odd_sum_pairs = count_oddPairs ( n , a ) ; System . out . println ( \" Even ▁ Sum ▁ = ▁ \" + even_sum_pairs ) ; System . out . println ( \" Odd ▁ Sum ▁ = ▁ \" + odd_sum_pairs ) ; } }"],"references":["class GFG { static int count_odd_pair ( int n , int a [ ] ) { int odd = 0 , even = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % 2 == 0 ) even ++ ; else odd ++ ; } int ans = odd * even * 2 ; return ans ; } static int count_even_pair ( int odd_sum_pairs , int n ) { int total_pairs = ( n * ( n - 1 ) ) ; int ans = total_pairs - odd_sum_pairs ; return ans ; } public static void main ( String [ ] args ) { int n = 6 ; int [ ] a = { 2 , 4 , 5 , 9 , 1 , 8 } ; int odd_sum_pairs = count_odd_pair ( n , a ) ; int even_sum_pairs = count_even_pair ( odd_sum_pairs , n ) ; System . out . println ( \" Even ▁ Sum ▁ Pairs ▁ = ▁ \" + even_sum_pairs ) ; System . out . println ( \" Odd ▁ Sum ▁ Pairs = ▁ \" + odd_sum_pairs ) ; } }"],"bleu":0.852685210824458,"rouge_l":0.9070994563479373}
{"id":1175,"predictions":["import java . util . * ; class GfG { static void printQueries ( int n , int a [ ] , int q , int [ ] q ) { HashMap < Integer , Integer > occCount = new HashMap < > ( ) ; int [ ] suffixCount = new int [ n + 1 ] ; for ( int i = n - 1 ; i >= 0 ; i -- ) { occ . put ( a [ i ] , 1 ) ; suffixCount [ i + 1 ] = 0 ; } for ( int i = 0 ; i < q ; i ++ ) { System . out . println ( suffixCount [ qry . get ( i ) ] ) ; } for ( int i = 0 ; i < q ; i ++ ) System . out . println ( suffixCount . get ( i ) ) ; } public static void main ( String [ ] args ) { int n = 5 , q = 3 ; int a [ ] = { 1 , 4 , 6 , 10 , 2 } ; printQueries ( n , a , q , q ) ; } }"],"references":["import java . util . * ; class GFG { static void printQueries ( int n , int a [ ] , int q , int qry [ ] ) { HashSet < Integer > occ = new HashSet < > ( ) ; int [ ] suffixCount = new int [ n + 1 ] ; for ( int i = n - 1 ; i >= 0 ; i -- ) { occ . add ( a [ i ] ) ; suffixCount [ i + 1 ] = occ . size ( ) ; } for ( int i = 0 ; i < q ; i ++ ) System . out . println ( suffixCount [ qry [ i ] ] ) ; } public static void main ( String args [ ] ) { int n = 5 , q = 3 ; int a [ ] = { 2 , 4 , 6 , 10 , 2 } ; int qry [ ] = { 1 , 3 , 2 } ; printQueries ( n , a , q , qry ) ; } }"],"bleu":0.6898205135142342,"rouge_l":0.8149430974764968}
{"id":1176,"predictions":["import java . io . * ; class GFG { static int countRotations ( String n ) { int len = n . length ( ) ; if ( len == 1 ) { int oneDigit = ( int ) ( n . charAt ( 0 ) ) - '0' ) ; if ( oneDigit % 4 == 0 ) return 1 ; return 0 ; } int count = 0 ; for ( int i = 0 ; i < len - 1 ; i ++ ) { int twoDigit = ( int ) ( n . charAt ( i ) - '0' ) * 10 + ( n . charAt ( i + 1 ) ) ; if ( twoDigit % 4 == 0 ) count ++ ; } int twoDigit = ( n . charAt ( l - 1 ) ) * 10 + ( n . charAt ( 0 ) - '0' ) ; if ( twoDigit % 4 == 0 ) count ++ ; return count ; } public static void main ( String [ ] args ) { String n = \"4834\" ; System . out . println ( \" Rotations : ▁ \" + countRotations ( n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int countRotations ( String n ) { int len = n . length ( ) ; if ( len == 1 ) { int oneDigit = n . charAt ( 0 ) - '0' ; if ( oneDigit % 4 == 0 ) return 1 ; return 0 ; } int twoDigit , count = 0 ; for ( int i = 0 ; i < ( len - 1 ) ; i ++ ) { twoDigit = ( n . charAt ( i ) - '0' ) * 10 + ( n . charAt ( i + 1 ) - '0' ) ; if ( twoDigit % 4 == 0 ) count ++ ; } twoDigit = ( n . charAt ( len - 1 ) - '0' ) * 10 + ( n . charAt ( 0 ) - '0' ) ; if ( twoDigit % 4 == 0 ) count ++ ; return count ; } public static void main ( String args [ ] ) { String n = \"4834\" ; System . out . println ( \" Rotations : ▁ \" + countRotations ( n ) ) ; } }"],"bleu":0.8577277836538542,"rouge_l":0.9458112491100387}
{"id":1177,"predictions":["class GFG { static int smallestX ( int n ) { int temp [ ] = new int [ 10 ] ; if ( n == 0 ) return - 1 ; int count = 0 ; int x = 1 ; while ( count < 10 ) { int y = x * n ; while ( y > 0 ) { if ( temp [ y % 10 ] == 0 ) { count ++ ; temp [ y % 10 ] = 1 ; } y = y \/ 10 ; } x ++ ; } return x - 1 ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( smallestX ( n ) ) ; } }"],"references":["import java . io . * ; import java . util . * ; class GFG { public static int smallestX ( int n ) { int [ ] temp = new int [ 10 ] ; for ( int i = 0 ; i < 10 ; i ++ ) temp [ i ] = 0 ; if ( n == 0 ) return - 1 ; int count = 0 , x = 0 ; for ( x = 1 ; count < 10 ; x ++ ) { int y = x * n ; while ( y > 0 ) { if ( temp [ y % 10 ] == 0 ) { count ++ ; temp [ y % 10 ] = 1 ; } y \/= 10 ; } } return x - 1 ; } public static void main ( String args [ ] ) { int n = 5 ; System . out . print ( smallestX ( n ) ) ; } }"],"bleu":0.6044639678572497,"rouge_l":0.7842583882094701}
{"id":1178,"predictions":["import java . util . * ; import java . lang . * ; class GFG { public static void main ( String args [ ] ) { int a [ ] = { 7 , 7 , 7 , 7 } ; int n = a . length ; HashMap < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( mp . containsKey ( a [ i ] ) ) { mp . put ( a [ i ] , mp . get ( a [ i ] ) + 1 ) ; else { mp . put ( a [ i ] , 1 ) ; } } } int mx = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( mx < m . get ( a [ i ] ) ) { mx = m . get ( a [ i ] ) ; } } if ( mx > ( n + 1 ) \/ 2 ) { System . out . println ( \" NO \" ) ; } else { System . out . println ( \" YES \" ) ; } } }"],"references":["import java . io . * ; import java . util . HashMap ; import java . util . Map ; class GFG { static void distinctAdjacentElement ( int a [ ] , int n ) { HashMap < Integer , Integer > m = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; ++ i ) { if ( m . containsKey ( a [ i ] ) ) { int x = m . get ( a [ i ] ) + 1 ; m . put ( a [ i ] , x ) ; } else { m . put ( a [ i ] , 1 ) ; } } int mx = 0 ; for ( int i = 0 ; i < n ; ++ i ) if ( mx < m . get ( a [ i ] ) ) mx = m . get ( a [ i ] ) ; if ( mx > ( n + 1 ) \/ 2 ) System . out . println ( \" NO \" ) ; else System . out . println ( \" YES \" ) ; } public static void main ( String [ ] args ) { int a [ ] = { 7 , 7 , 7 , 7 } ; int n = 4 ; distinctAdjacentElement ( a , n ) ; } }"],"bleu":0.6994036358571006,"rouge_l":0.7461004603861747}
{"id":1179,"predictions":["class GFG { static int fnMod ( int n ) { int rem = n % 4 ; if ( rem == 0 || rem == 3 ) return 0 ; else if ( rem == 1 || rem == 2 ) return 1 ; return 0 ; } public static void main ( String [ ] args ) { int n = 6 ; System . out . println ( fnMod ( n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int fnMod ( int n ) { int rem = n % 4 ; if ( rem == 0 || rem == 3 ) return 0 ; else if ( rem == 1 || rem == 2 ) return 1 ; return 0 ; } public static void main ( String [ ] args ) { int n = 6 ; System . out . print ( fnMod ( n ) ) ; } }"],"bleu":0.8857641398982706,"rouge_l":0.938276474068231}
{"id":1180,"predictions":["class GFG { static boolean isRectangle ( int a , int b , int c , int d ) { if ( a ^ b ^ c ^ d ) return false ; return true ; } public static void main ( String [ ] args ) { int a = 3 , b = 2 , c = 2 ; if ( isRectangle ( a , b , c ) == false ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static boolean isRectangle ( int a , int b , int c , int d ) { if ( ( a ^ b ^ c ^ d ) != 0 ) return false ; else return true ; } public static void main ( String [ ] args ) { int a , b , c , d ; a = 3 ; b = 2 ; c = 3 ; d = 2 ; if ( isRectangle ( a , b , c , d ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.7306701646877253,"rouge_l":0.8712975492407158}
{"id":1181,"predictions":["import java . util . * ; class GFG { static int merge ( int arr [ ] , int temp [ ] , int left , int mid , int right ) { int inv_count = 0 ; int i = left ; int j = mid ; int k = left ; while ( i <= mid - 1 ) && ( j <= right ) ) { if ( arr [ i ] <= arr [ j ] ) temp [ k ] = arr [ i ] ; else { temp [ k ++ ] = arr [ j ++ ] ; inv_count = inv_count + ( mid - i ) ; inv_count = inv_count + ( mid - i ) ; } } while ( i <= mid - 1 ) temp [ k ++ ] = arr [ i ] ; while ( j <= right ) temp [ k ++ ] = arr [ j ++ ] ; for ( i = left ; i <= right ; i ++ ) arr [ i ] = temp [ i ] ; return inv_count ; } static int _mergeSort ( int arr [ ] , int temp [ ] , int left , int mid ) { int mid , mid , mid ; if ( right > left ) mid = ( right + left ) \/ 2 ; inv_count = _mergeSort ( arr , temp , left , mid ) ; inv_count += _mergeSort ( arr , temp , left , mid ) ; inv_count += _mergeSort ( arr , temp , mid + 1 , right ) ; inv_count += merge ( arr , temp , left , mid + 1 , right ) ; return inv_count ; } static int minSwap ( int arr [ ] , int n ) { int temp [ ] = new int [ n ] ; arr [ 0 ] = - 1 ; return _mergeSort ( arr , temp , 0 , n ) ; } static public void main ( String [ ] args ) { int arr [ ] = { 1 , arr_size = arr_size ; System . out . print ( merge ( arr , arr_size ) ) ; } }"],"references":["class GFG { static int merge ( int arr [ ] , int temp [ ] , int left , int mid , int right ) { int inv_count = 0 ; int i = left ; int j = mid ; int k = left ; while ( ( i <= mid - 1 ) && ( j <= right ) ) { if ( arr [ i ] <= arr [ j ] ) { temp [ k ++ ] = arr [ i ++ ] ; } else { temp [ k ++ ] = arr [ j ++ ] ; inv_count = inv_count + ( mid - i ) ; } } while ( i <= mid - 1 ) { temp [ k ++ ] = arr [ i ++ ] ; } while ( j <= right ) { temp [ k ++ ] = arr [ j ++ ] ; } for ( i = left ; i <= right ; i ++ ) { arr [ i ] = temp [ i ] ; } return inv_count ; } static int _mergeSort ( int arr [ ] , int temp [ ] , int left , int right ) { int mid , inv_count = 0 ; if ( right > left ) { mid = ( right + left ) \/ 2 ; inv_count = _mergeSort ( arr , temp , left , mid ) ; inv_count += _mergeSort ( arr , temp , mid + 1 , right ) ; inv_count += merge ( arr , temp , left , mid + 1 , right ) ; } return inv_count ; } static int mergeSort ( int arr [ ] , int array_size ) { int [ ] temp = new int [ array_size ] ; return _mergeSort ( arr , temp , 0 , array_size - 1 ) ; } static int minSwapToReachArr ( int arr [ ] , int N ) { for ( int i = 0 ; i < N ; i ++ ) { if ( ( arr [ i ] - 1 ) - i > 2 ) { return - 1 ; } } int numOfInversion = mergeSort ( arr , N ) ; return numOfInversion ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 5 , 3 , 4 } ; int N = arr . length ; int res = minSwapToReachArr ( arr , N ) ; System . out . println ( res == - 1 ? \" Not ▁ Possible \\n \" : res ) ; } }"],"bleu":0.6456387252550795,"rouge_l":0.769046329955913}
{"id":1182,"predictions":["class GFG { static boolean Prime ( int n ) { if ( n < 2 ) return false ; for ( int i = 2 ; i * i <= n ; i ++ ) if ( n % i == 0 ) return false ; return true ; } static boolean primeCountDivisors ( int n ) { if ( n < 2 ) return false ; for ( int i = 2 ; i * i <= n ; i ++ ) { if ( n % i == 0 ) { int a = n , c = 0 ; while ( a % i == 0 ) { a \/= i ; c ++ ; } if ( a == 1 && Prime ( c + 1 ) ) return true ; else return false ; } } return true ; } public static void main ( String [ ] args ) { int n = 13 ; if ( primeCountDivisors ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static boolean Prime ( int n ) { if ( n < 2 ) return false ; for ( int i = 2 ; i <= ( int ) Math . sqrt ( n ) ; i ++ ) if ( n % i == 0 ) return false ; return true ; } static boolean primeCountDivisors ( int n ) { if ( n < 2 ) return false ; for ( int i = 2 ; i <= ( int ) Math . sqrt ( n ) ; i ++ ) if ( n % i == 0 ) { long a = n , c = 0 ; while ( a % i == 0 ) { a \/= i ; c ++ ; } if ( a == 1 && Prime ( ( int ) c + 1 ) == true ) return true ; else return false ; } return true ; } public static void main ( String [ ] args ) { int n = 13 ; if ( primeCountDivisors ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.8332084466315619,"rouge_l":0.9218522708905771}
{"id":1183,"predictions":["import java . util . * ; class GFG { static int countSubSeq ( int a [ ] , int n , int k ) { Arrays . sort ( a ) ; Vector < Integer > arr = new Vector < > ( ) ; int i = 0 ; while ( i < n ) { int count = 1 ; x = a [ i ] ; i ++ ; while ( i < n && a [ i ] == x ) { count ++ ; i ++ ; } arr [ i ++ ] = count ; } int m = arr . length ; int count = 1 ; dp [ m ] [ ] = new int [ n + 1 ] [ m + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) dp [ 0 ] [ i ] = 1 ; for ( int i = 1 ; i <= m ; i ++ ) { int j = m ; while ( j >= 0 ) { if ( j > m - i ) dp [ i ] [ j ] = 0 ; else dp [ i ] [ j ] = dp [ i ] [ j + 1 ] + arr [ j ] ; } count = count + dp [ i ] [ 0 ] ; } count = count + dp [ i ] [ 0 ] ; } return count ; } public static void main ( String [ ] args ) { int a [ ] = { 2 , 2 , 3 , 3 , 5 } ; int n = a . length ; int k = 3 ; System . out . println ( countSubSeq ( a , n , k ) ) ; } }"],"references":["import java . util . * ; class GFG { static int countSubSeq ( int a [ ] , int n , int k ) { Arrays . sort ( a ) ; List < Integer > arr = new LinkedList < > ( ) ; for ( int i = 0 ; i < n ; ) { int count = 1 , x = a [ i ] ; i ++ ; while ( i < n && a [ i ] == x ) { count ++ ; i ++ ; } arr . add ( count ) ; } int m = arr . size ( ) ; n = Math . min ( m , k ) ; int count = 1 ; int [ ] [ ] dp = new int [ n + 1 ] [ m + 1 ] ; for ( int i = 0 ; i <= m ; i ++ ) dp [ 0 ] [ i ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = m ; j >= 0 ; j -- ) { if ( j > m - i ) dp [ i ] [ j ] = 0 ; else { dp [ i ] [ j ] = dp [ i ] [ j + 1 ] + arr . get ( j ) * dp [ i - 1 ] [ j + 1 ] ; } } count = count + dp [ i ] [ 0 ] ; } return count ; } public static void main ( String [ ] args ) { int a [ ] = { 2 , 2 , 3 , 3 , 5 } ; int n = a . length ; int k = 3 ; System . out . println ( countSubSeq ( a , n , k ) ) ; } }"],"bleu":0.786098368168605,"rouge_l":0.8835722491384046}
{"id":1184,"predictions":["class GFG { static boolean isVowel ( char ch ) { switch ( ch ) { case ' i ' : case ' e ' : case ' i ' : case ' o ' : case ' u ' : return true ; default : return false ; } else return false ; } static boolean isSossible ( String str , int n ) { for ( int i = 1 ; i < n ; i ++ ) { if ( isVowel ( str . charAt ( i ) ) && isVowel ( str . charAt ( i - 1 ) ) ) { return false ; } } for ( int i = 1 ; i < n - 1 ; i ++ ) { if ( isVowel ( str . charAt ( i ) ) && ! isVowel ( str . charAt ( i - 1 ) ) ) { return false ; } } return true ; } public static void main ( String [ ] args ) { String str = \" acaba \" ; int n = str . length ( ) ; if ( isSossible ( str , n ) ) { System . out . println ( \" Yes \" ) ; } else { System . out . println ( \" No \" ) ; } } }"],"references":["class GFG { static boolean isVowel ( char ch ) { switch ( ch ) { case ' a ' : case ' e ' : case ' i ' : case ' o ' : case ' u ' : return true ; } return false ; } static boolean isSatisfied ( char [ ] str , int n ) { for ( int i = 1 ; i < n ; i ++ ) { if ( ! isVowel ( str [ i ] ) && ! isVowel ( str [ i - 1 ] ) ) { return false ; } } for ( int i = 1 ; i < n - 1 ; i ++ ) { if ( isVowel ( str [ i ] ) && ! isVowel ( str [ i - 1 ] ) && ! isVowel ( str [ i + 1 ] ) ) { return false ; } } return true ; } public static void main ( String [ ] args ) { String str = \" acaba \" ; int n = str . length ( ) ; if ( isSatisfied ( str . toCharArray ( ) , n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.7559411111974994,"rouge_l":0.8705536431440046}
{"id":1185,"predictions":["class GfG { static void equal_xor_sum ( int arr [ ] , int n ) { int sum = 0 , Xor = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum = sum + arr [ i ] ; Xor = Xor ^ arr [ i ] ; } if ( sum == Xor ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 6 , 3 , 7 , 10 } ; int n = arr . length ; equal_xor_sum ( arr , n ) ; } }"],"references":["class GFG { static void equal_xor_sum ( int arr [ ] , int n ) { int Sum = 0 ; int Xor = 0 ; for ( int i = 0 ; i < n ; i ++ ) { Sum = Sum + arr [ i ] ; Xor = Xor ^ arr [ i ] ; } if ( Sum == Xor ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 6 , 3 , 7 , 10 } ; int n = arr . length ; equal_xor_sum ( arr , n ) ; } }"],"bleu":0.8905205858173053,"rouge_l":0.9499190232963747}
{"id":1186,"predictions":["class GFG { static int getMinLength ( int arr [ ] , int n ) { int count = 0 ; int result = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 1 ) { count ++ ; } else { if ( count != 0 ) result = Math . min ( result , count ) ; count = 0 ; } } return result ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 0 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 } ; int n = arr . length ; System . out . println ( getMinLength ( arr , n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int getMinLength ( double arr [ ] , int n ) { int count = 0 ; int result = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 1 ) { count ++ ; } else { if ( count != 0 ) result = Math . min ( result , count ) ; count = 0 ; } } return result ; } public static void main ( String [ ] args ) { double arr [ ] = { 1 , 1 , 0 , 0 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 1 } ; int n = arr . length ; System . out . println ( getMinLength ( arr , n ) ) ; } }"],"bleu":0.904577231799652,"rouge_l":0.9526187187931583}
{"id":1187,"predictions":["class GFG { static boolean isPowerOfTwo ( int n ) { return ( n > 0 && ( ( n & ( n - 1 ) ) > 0 ) ) ; } static int findPosition ( int n ) { if ( isPowerOfTwo ( n ) == true ) return - 1 ; int i = 1 ; int pos = 1 ; while ( ( i & n ) == 0 ) { i = i << 1 ; pos ++ ; } return pos ; } public static void main ( String [ ] args ) { int n = 16 ; int pos = findPosition ( n ) ; if ( pos == - 1 ) System . out . println ( \" n ▁ = ▁ \" + n + \" , ▁ Invalid ▁ number ▁ \" ) ; else System . out . println ( \" n ▁ = ▁ \" + n + \" , ▁ Position ▁ \" + pos ) ; n = 12 ; pos = findPosition ( n ) ; if ( pos == - 1 ) System . out . println ( \" n ▁ = ▁ \" + n + \" , ▁ Invalid ▁ number ▁ \" ) ; else System . out . println ( \" n ▁ = ▁ \" + n + \" , ▁ Position ▁ \" + pos ) ; n = 128 ; pos = findPosition ( n ) ; if ( pos == - 1 ) System . out . println ( \" n ▁ = ▁ \" + n + \" , ▁ Invalid ▁ number ▁ \" ) ; else System . out . println ( \" n ▁ = ▁ \" + n + \" , ▁ Position ▁ \" + pos ) ; } }"],"references":["class GFG { static boolean isPowerOfTwo ( int n ) { return ( n > 0 && ( ( n & ( n - 1 ) ) == 0 ) ) ? true : false ; } static int findPosition ( int n ) { if ( ! isPowerOfTwo ( n ) ) return - 1 ; int i = 1 , pos = 1 ; while ( ( i & n ) == 0 ) { i = i << 1 ; ++ pos ; } return pos ; } public static void main ( String [ ] args ) { int n = 16 ; int pos = findPosition ( n ) ; if ( pos == - 1 ) System . out . println ( \" n ▁ = ▁ \" + n + \" , ▁ Invalid ▁ number \" ) ; else System . out . println ( \" n ▁ = ▁ \" + n + \" , ▁ Position ▁ \" + pos ) ; n = 12 ; pos = findPosition ( n ) ; if ( pos == - 1 ) System . out . println ( \" n ▁ = ▁ \" + n + \" , ▁ Invalid ▁ number \" ) ; else System . out . println ( \" n ▁ = ▁ \" + n + \" , ▁ Position ▁ \" + pos ) ; n = 128 ; pos = findPosition ( n ) ; if ( pos == - 1 ) System . out . println ( \" n ▁ = ▁ \" + n + \" , ▁ Invalid ▁ number \" ) ; else System . out . println ( \" n ▁ = ▁ \" + n + \" , ▁ Position ▁ \" + pos ) ; } }"],"bleu":0.9274552751362922,"rouge_l":0.9729073144969634}
{"id":1188,"predictions":["import java . io . * ; class GFG { static int totalNumber ( int n ) { return ( int ) ( 8 * ( int ) ( Math . pow ( 9 , n - 1 ) ) ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( totalNumber ( n ) ) ; } }"],"references":["import java . io . * ; public class GFG { static int totalNumber ( int n ) { return 8 * ( int ) Math . pow ( 9 , n - 1 ) ; } static public void main ( String [ ] args ) { int n = 3 ; System . out . println ( totalNumber ( n ) ) ; } }"],"bleu":0.7947166761546247,"rouge_l":0.9413580246913581}
{"id":1189,"predictions":["class GFG { static int rev_num = 0 ; static int base_pos = 1 ; static int reversDigits ( int num ) { if ( num > 0 ) { reversDigits ( num \/ 10 ) ; rev_num += ( num % 10 ) * base_pos ; base_pos *= 10 ; } return rev_num ; } public static void main ( String [ ] args ) { int num = 4562 ; System . out . println ( reversDigits ( num ) ) ; } }"],"references":["class GFG { static int rev_num = 0 ; static int base_pos = 1 ; static int reversDigits ( int num ) { if ( num > 0 ) { reversDigits ( num \/ 10 ) ; rev_num += ( num % 10 ) * base_pos ; base_pos *= 10 ; } return rev_num ; } public static void main ( String [ ] args ) { int num = 4562 ; System . out . println ( reversDigits ( num ) ) ; } }"],"bleu":1.0,"rouge_l":1.0}
{"id":1190,"predictions":["import java . util . * ; class GFG { static boolean check ( String s ) { int len = s . length ( ) ; Arrays . sort ( s ) ; for ( int i = 1 ; i < len ; i ++ ) { if ( s . charAt ( i ) - s . charAt ( i - 1 ) != 1 ) return false ; } return true ; } public static void main ( String [ ] args ) { String str = \" dcef \" ; if ( check ( str ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; str = \" xy \" ; if ( check ( str ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; class GfG { static boolean check ( char s [ ] ) { int l = s . length ; Arrays . sort ( s ) ; for ( int i = 1 ; i < l ; i ++ ) { if ( s [ i ] - s [ i - 1 ] != 1 ) return false ; } return true ; } public static void main ( String [ ] args ) { String str = \" dcef \" ; if ( check ( str . toCharArray ( ) ) == true ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; String str1 = \" xyza \" ; if ( check ( str1 . toCharArray ( ) ) == true ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.735179665890685,"rouge_l":0.8674393688516606}
{"id":1191,"predictions":["class GFG { static int maxDistions ( int n ) { int num = n * ( n + 1 ) \/ 2 + 1 ; System . out . println ( num ) ; } public static void main ( String [ ] args ) { int n = 10 ; maxDistions ( n ) ; } }"],"references":["class GFG { static void maxRegions ( int n ) { int num ; num = n * ( n + 1 ) \/ 2 + 1 ; System . out . println ( num ) ; ; } public static void main ( String [ ] args ) { int n = 10 ; maxRegions ( n ) ; } }"],"bleu":0.8247456714974253,"rouge_l":0.9214998651200432}
{"id":1192,"predictions":["class GFG { static void bestAdim ( int [ ] x [ ] , int y [ ] , int n ) { int sum_x = 0 , sum_y = 0 ; int sum_xy = 0 , sum_x2 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum_x += x [ i ] ; sum_y += y [ i ] * y [ i ] ; sum_x2 += ( int ) Math . pow ( x [ i ] , 2 ) ; } float m = ( float ) ( ( n * sum_x - sum_x * sum_x ) \/ ( sum_x , 2 ) ) ; float c = ( sum_y - m * sum_x ) \/ n ; System . out . print ( \" m ▁ = ▁ \" + m ) ; } public static void main ( String [ ] args ) { int x [ ] = { 1 , 2 , 3 , 4 , 5 } ; int y [ ] = { 14 , 27 , 40 , 55 , 55 } ; int n = x . length ; bestAdim ( x , y , n ) ; } }"],"references":["import java . io . * ; import static java . lang . Math . pow ; public class A { static void bestApproximate ( int x [ ] , int y [ ] ) { int n = x . length ; double m , c , sum_x = 0 , sum_y = 0 , sum_xy = 0 , sum_x2 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum_x += x [ i ] ; sum_y += y [ i ] ; sum_xy += x [ i ] * y [ i ] ; sum_x2 += pow ( x [ i ] , 2 ) ; } m = ( n * sum_xy - sum_x * sum_y ) \/ ( n * sum_x2 - pow ( sum_x , 2 ) ) ; c = ( sum_y - m * sum_x ) \/ n ; System . out . println ( \" m ▁ = ▁ \" + m ) ; System . out . println ( \" c ▁ = ▁ \" + c ) ; } public static void main ( String args [ ] ) { int x [ ] = { 1 , 2 , 3 , 4 , 5 } ; int y [ ] = { 14 , 27 , 40 , 55 , 68 } ; bestApproximate ( x , y ) ; } }"],"bleu":0.6383458536543786,"rouge_l":0.7645752757484601}
{"id":1193,"predictions":["import java . util . * ; class GFG { static void printPrevGreater ( int [ ] arr , int n ) { Set < Integer > s = new HashSet < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int it = arr [ i ] ; if ( it . isEmpty ( ) == false ) { System . out . print ( \" - 1\" ) ; } else { System . out . print ( it . size ( ) + \" ▁ \" ) ; } s . add ( arr [ i ] ) ; } } public static void main ( String [ ] args ) { int arr [ ] = { 10 , 5 , 11 , 10 , 20 , 12 } ; int n = arr . length ; printPrevGreater ( arr , n ) ; } }"],"references":["import java . util . TreeSet ; class GFG { static void printPrevGreater ( int [ ] arr , int n ) { TreeSet < Integer > ts = new TreeSet < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { Integer c = ts . ceiling ( arr [ i ] ) ; if ( c == null ) System . out . print ( - 1 + \" ▁ \" ) ; else System . out . print ( c + \" ▁ \" ) ; ts . add ( arr [ i ] ) ; } } public static void main ( String [ ] args ) { int [ ] arr = { 10 , 5 , 11 , 10 , 20 , 12 } ; int n = arr . length ; printPrevGreater ( arr , n ) ; } }"],"bleu":0.7010637137673634,"rouge_l":0.8563851913477537}
{"id":1194,"predictions":["class GFG { static int MAX = 1000005 ; static boolean [ ] prime = new boolean [ MAX ] ; static void sieve ( int N ) { for ( int i = 0 ; i < N ; i ++ ) prime [ i ] = true ; prime [ 0 ] = prime [ 1 ] = false ; for ( int i = 2 ; i * i <= N ; i ++ ) { if ( prime [ i ] ) { for ( int j = 2 ; j * j <= N ; j += i ) prime [ i * j ] = false ; } } } static int countLoged ( int N ) { int count = 0 ; seive ( N ) ; for ( int i = 1 ; i <= N ; i ++ ) { if ( prime [ i ] ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int N = 6 ; System . out . println ( countLoged ( N ) ) ; } }"],"references":["import java . util . * ; class GFG { static int MAX = 1000005 ; static Vector < Boolean > prime = new Vector < > ( MAX ) ; static void vecIni ( ) { for ( int i = 0 ; i < MAX ; i ++ ) { prime . add ( i , true ) ; } } static void seive ( int N ) { prime . add ( 0 , false ) ; prime . add ( 1 , false ) ; for ( int i = 2 ; i <= N ; i ++ ) { if ( prime . get ( i ) ) { for ( int j = 2 ; i * j <= N ; j ++ ) { prime . add ( i * j , false ) ; } } } } static int countLogNeeded ( int N ) { int count = 0 ; seive ( N ) ; for ( int i = 1 ; i <= N ; i ++ ) { if ( prime . get ( i ) ) { count ++ ; } } return count ; } public static void main ( String [ ] args ) { vecIni ( ) ; int N = 6 ; System . out . println ( countLogNeeded ( N ) ) ; } }"],"bleu":0.5476489206145511,"rouge_l":0.7439024390243903}
{"id":1195,"predictions":["import java . util . Arrays ; class GFG { static void findMinimumOperation ( int n , int d , int array [ ] [ ] ) { int cnt = 0 ; int first = Integer . MAX_VALUE ; int end = Integer . MIN_VALUE ; while ( n > 0 ) { Arrays . sort ( array ) ; arr [ cnt ] [ 0 ] = array [ n ] [ 1 ] ; n -- ; } if ( first > end ) System . out . print ( \" - 1\" ) ; else { if ( d >= e && d <= end ) System . out . print ( \"0\" ) ; else { if ( d >= first && d <= end ) System . out . print ( \"0\" ) ; else System . out . print ( Math . min ( first - d ) , Math . abs ( d - end ) ) ; } } } public static void main ( String [ ] args ) { int n = 3 ; int d = 3 ; int array [ ] [ ] = { { 0 , 7 } , { 2 , 14 } , { 4 , 6 } } ; findMinimumOperation ( n , d , array ) ; } }"],"references":["import java . util . * ; class GFG { static void findMinimumOperation ( int n , int d , int arrays [ ] [ ] ) { int cnt = 0 ; int first = Integer . MIN_VALUE , end = Integer . MAX_VALUE ; while ( n > 0 ) { int arr [ ] = { arrays [ cnt ] [ 0 ] , arrays [ cnt ] [ 1 ] } ; Arrays . sort ( arr ) ; first = Math . max ( first , arr [ 0 ] ) ; end = Math . min ( end , arr [ 1 ] ) ; cnt ++ ; n -- ; } if ( first > end ) System . out . print ( \" - 1\" ) ; else { if ( d >= first && d <= end ) { System . out . print ( \"0\" ) ; } else System . out . print ( Math . min ( Math . abs ( first - d ) , Math . abs ( d - end ) ) ) ; } } public static void main ( String [ ] args ) { int n = 3 , d = 3 ; int arrays [ ] [ ] = { { 0 , 7 } , { 2 , 14 } , { 4 , 6 } } ; findMinimumOperation ( n , d , arrays ) ; } }"],"bleu":0.6953645871866735,"rouge_l":0.7820512820512819}
{"id":1196,"predictions":["class GFG { static int MAX = 100 ; static int arr [ ] = new int [ MAX ] ; static int index [ ] = new int [ MAX ] ; static int index1 [ ] = new int [ MAX ] ; static void main ( String [ ] arr ) { int MAX = 90 ; arr [ 0 ] = 0 ; arr [ 1 ] = 1 ; for ( int i = 2 ; i < MAX ; i ++ ) arr [ i ] = arr [ i - 1 ] + arr [ i - 2 ] ; int c1 [ ] = new int [ MAX ] ; int index [ ] = new int [ MAX ] ; for ( int i = 0 ; i < MAX ; i ++ ) arr [ i ] = arr [ i - 1 ] + arr [ i - 2 ] ; int c1 = 0 , c2 = 0 ; for ( int i = 0 ; i < MAX ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { index1 [ c1 ++ ] = i ; c1 ++ ; } if ( arr [ i ] % 3 == 0 ) { index2 [ c2 ++ ] = i ; c2 ++ ; } if ( arr [ i ] % 5 == 0 ) index3 [ c4 ++ ] = i ; } System . out . println ( \" Index ▁ of ▁ Fibonacci ▁ number ▁ by ▁ 2 ▁ are : ▁ \" ) ; for ( int i = 0 ; i < c1 . length ; i ++ ) System . out . print ( index1 [ i ] + \" ▁ \" ) ; System . out . println ( ) ; } }"],"references":["class GFG { static int MAX = 90 ; public static void main ( String [ ] args ) { long [ ] arr = new long [ MAX ] ; long [ ] index1 = new long [ MAX ] ; long [ ] index2 = new long [ MAX ] ; long [ ] index3 = new long [ MAX ] ; long [ ] index4 = new long [ MAX ] ; arr [ 0 ] = 0 ; arr [ 1 ] = 1 ; for ( int i = 2 ; i < MAX ; i ++ ) arr [ i ] = arr [ i - 1 ] + arr [ i - 2 ] ; int c1 = 0 , c2 = 0 , c3 = 0 , c4 = 0 ; for ( int i = 0 ; i < MAX ; i ++ ) { if ( arr [ i ] % 2 == 0 ) index1 [ c1 ++ ] = i ; if ( arr [ i ] % 3 == 0 ) index2 [ c2 ++ ] = i ; if ( arr [ i ] % 5 == 0 ) index3 [ c3 ++ ] = i ; if ( arr [ i ] % 8 == 0 ) index4 [ c4 ++ ] = i ; } System . out . print ( \" Index ▁ of ▁ Fibonacci ▁ numbers ▁ divisible ▁ by \" + \" ▁ 2 ▁ are ▁ : \\n \" ) ; for ( int i = 0 ; i < c1 ; i ++ ) System . out . print ( index1 [ i ] + \" ▁ \" ) ; System . out . print ( \" \\n \" ) ; System . out . print ( \" Index ▁ of ▁ Fibonacci ▁ number ▁ divisible ▁ by \" + \" ▁ 3 ▁ are ▁ : \\n \" ) ; for ( int i = 0 ; i < c2 ; i ++ ) System . out . print ( index2 [ i ] + \" ▁ \" ) ; System . out . print ( \" \\n \" ) ; System . out . print ( \" Index ▁ of ▁ Fibonacci ▁ number ▁ divisible ▁ by \" + \" ▁ 5 ▁ are ▁ : \\n \" ) ; for ( int i = 0 ; i < c3 ; i ++ ) System . out . print ( index3 [ i ] + \" ▁ \" ) ; System . out . print ( \" \\n \" ) ; System . out . print ( \" Index ▁ of ▁ Fibonacci ▁ number ▁ divisible ▁ by \" + \" ▁ 8 ▁ are ▁ : \\n \" ) ; for ( int i = 0 ; i < c4 ; i ++ ) System . out . print ( index4 [ i ] + \" ▁ \" ) ; System . out . print ( \" \\n \" ) ; } }"],"bleu":0.3781993349601056,"rouge_l":0.5238788693476718}
{"id":1197,"predictions":["class GFG { static boolean check ( String s ) { int freq [ ] = new int [ 26 ] ; int n = s . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { freq [ s . charAt ( i ) - 97 ] ++ ; } for ( int i = 0 ; i < 26 ; i ++ ) { if ( freq [ s . charAt ( i ) % 2 == 1 ) return false ; } return true ; } public static void main ( String [ ] args ) { String s = \" abaccaba \" ; if ( check ( s ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static boolean check ( String s ) { int [ ] freq = new int [ 26 ] ; int n = s . length ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { freq [ ( s . charAt ( i ) ) - 97 ] += 1 ; } for ( int i = 0 ; i < freq . length ; i ++ ) { if ( freq [ i ] % 2 == 1 ) { return false ; } } return true ; } public static void main ( String [ ] args ) { String s = \" abaccaba \" ; if ( check ( s ) ) { System . out . println ( \" Yes \" ) ; } else { System . out . println ( \" No \" ) ; } } }"],"bleu":0.7628911225789282,"rouge_l":0.8997241086587436}
{"id":1198,"predictions":["class GFG { static class pair { int first , second ; public pair ( int first , int second ) { this . first = first ; this . second = second ; } } static pair getMinMax ( int low , int high , int arr [ ] ) { int arr_max = arr [ low ] ; int arr_min = arr [ low ] ; if ( low == high ) { if ( arr [ low ] > arr [ high ] ) { arr_max = arr [ low ] ; arr_min = arr [ low ] ; } else { arr [ high ] = arr [ low ] ; } } else if ( high == low + 1 ) { arr [ high ] = arr [ high ] ; arr [ high ] = arr [ low ] ; } else { arr [ high ] = arr [ high ] ; arr [ low ] = arr [ low ] ; } return ( Math . max ( arr [ high ] , arr_max ) , Math . min ( arr_max , arr_min ) ) ; } } public static void main ( String [ ] args ) { int arr [ ] = { 1000 , 11 , 445 , 445 , 1 , 330 , 3000 } ; int high = arr . length - 1 ; int arr_max = getMinMax ( low , high , arr ) ; System . out . printf ( \" \\n Minimum ▁ element ▁ is ▁ % d \" , arr_max . max ) ; } }"],"references":["public class GFG { static class Pair { int min ; int max ; } static Pair getMinMax ( int arr [ ] , int low , int high ) { Pair minmax = new Pair ( ) ; Pair mml = new Pair ( ) ; Pair mmr = new Pair ( ) ; int mid ; if ( low == high ) { minmax . max = arr [ low ] ; minmax . min = arr [ low ] ; return minmax ; } if ( high == low + 1 ) { if ( arr [ low ] > arr [ high ] ) { minmax . max = arr [ low ] ; minmax . min = arr [ high ] ; } else { minmax . max = arr [ high ] ; minmax . min = arr [ low ] ; } return minmax ; } mid = ( low + high ) \/ 2 ; mml = getMinMax ( arr , low , mid ) ; mmr = getMinMax ( arr , mid + 1 , high ) ; if ( mml . min < mmr . min ) { minmax . min = mml . min ; } else { minmax . min = mmr . min ; } if ( mml . max > mmr . max ) { minmax . max = mml . max ; } else { minmax . max = mmr . max ; } return minmax ; } public static void main ( String args [ ] ) { int arr [ ] = { 1000 , 11 , 445 , 1 , 330 , 3000 } ; int arr_size = 6 ; Pair minmax = getMinMax ( arr , 0 , arr_size - 1 ) ; System . out . printf ( \" \\n Minimum ▁ element ▁ is ▁ % d \" , minmax . min ) ; System . out . printf ( \" \\n Maximum ▁ element ▁ is ▁ % d \" , minmax . max ) ; } }"],"bleu":0.38541054478788317,"rouge_l":0.5262130937098844}
{"id":1199,"predictions":["import java . util . * ; class GFG { static int countUnvised ( int n , int m ) { int i = 0 ; int X = ( m * n ) - m - n ; Queue < Integer > queue = new LinkedList < > ( ) ; queue . add ( X ) ; int count = 0 ; while ( ! queue . isEmpty ( ) ) { int curr = queue . remove ( ) ; queue . remove ( ) ; count ++ ; if ( curr - m > 0 ) queue . add ( curr - m ) ; if ( curr - n > 0 ) queue . add ( curr - n ) ; } return count ; } public static void main ( String [ ] args ) { int n = 2 , m = 5 ; System . out . println ( countUnvised ( n , m ) ) ; } }"],"references":["import java . util . LinkedList ; import java . util . Queue ; class GFG { public static int countUnvisited ( int n , int m ) { int X = ( m * n ) - m - n ; Queue < Integer > queue = new LinkedList < > ( ) ; queue . add ( X ) ; int count = 0 ; while ( ! queue . isEmpty ( ) ) { int curr = queue . poll ( ) ; count ++ ; if ( curr - m > 0 ) queue . add ( curr - m ) ; if ( curr - n > 0 ) queue . add ( curr - n ) ; } return count ; } public static void main ( String args [ ] ) { int n = 2 , m = 5 ; System . out . print ( countUnvisited ( n , m ) ) ; } }"],"bleu":0.8310044827621762,"rouge_l":0.9078281575553131}
{"id":1200,"predictions":["class GFG { static void lowercase ( ) { for ( int c = 97 ; c <= 123 ; c ++ ) { System . out . print ( ( char ) ( ( char ) ( c ) + \" ▁ \" ) ; } System . out . println ( ) ; } static void lowerLowerCase ( ) { for ( int c = 65 ; c < 90 ; c ++ ) { System . out . print ( ( ( char ) ( c ) + \" ▁ \" ) ; } System . out . println ( \" \" ) ; } public static void main ( String [ ] args ) { int left ; lowerCaseabets ( ) ; System . out . println ( \" Lower ▁ Alphabets ▁ \" ) ; lowerCaseabets ( ) ; } }"],"references":["class Alpha { private int ch ; void uppercaseAlphabets ( ) { for ( int c = 65 ; c <= 90 ; ++ c ) System . out . print ( \" ▁ \" + c ) ; System . out . print ( \" \\n \" ) ; } void lowercaseAlphabets ( ) { for ( int c = 97 ; c <= 122 ; ++ c ) System . out . print ( \" ▁ \" + c ) ; System . out . print ( \" \\n \" ) ; } public static void main ( String [ ] args ) { int ch ; System . out . println ( \" Uppercase ▁ Alphabets \" ) ; Alpha ob = new Alpha ( ) ; ob . uppercaseAlphabets ( ) ; System . out . println ( \" Lowercase ▁ Alphabets ▁ \" ) ; ob . lowercaseAlphabets ( ) ; } }"],"bleu":0.5055167541724715,"rouge_l":0.6859070464767617}
{"id":1201,"predictions":["class GFG { static int __gcd ( int a , int b ) { if ( b == 0 ) return a ; return __gcd ( b , a % b ) ; } static int countNums ( int a , int b , int c , int d ) { int x = b \/ c - ( a - 1 ) \/ c ; int y = ( c * d ) \/ __gcd ( c , d ) ; int z = b \/ k - ( a - 1 ) \/ k ; return ( b - a + 1 - y + z ) ; } public static void main ( String [ ] args ) { int a = 10 , b = 50 , c = 4 , d = 6 ; System . out . println ( countNums ( a , b , c , d ) ) ; } }"],"references":["class GFG { static int countNums ( int a , int b , int c , int d ) { int x = b \/ c - ( a - 1 ) \/ c ; int y = b \/ d - ( a - 1 ) \/ d ; int k = ( c * d ) \/ __gcd ( c , d ) ; int z = b \/ k - ( a - 1 ) \/ k ; return b - a + 1 - x - y + z ; } static int __gcd ( int a , int b ) { if ( b == 0 ) return a ; return __gcd ( b , a % b ) ; } public static void main ( String [ ] args ) { int a = 10 , b = 50 , c = 4 , d = 6 ; System . out . println ( countNums ( a , b , c , d ) ) ; } }"],"bleu":0.8719269578879326,"rouge_l":0.7566168571149526}
{"id":1202,"predictions":["class GFG { static int countSubarray ( int arr [ ] , int n , int k ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int sum = 0 ; for ( int j = i ; j < n ; j ++ ) { if ( sum + arr [ j ] < k ) { sum = arr [ j ] + sum ; count ++ ; } else break ; } } return count ; } public static void main ( String [ ] args ) { int array [ ] = { 1 , 11 , 2 , 3 , 15 } ; int k = 10 ; int size = array . length ; int count = countSubarray ( array , size , k ) ; System . out . println ( count ) ; } }"],"references":["import java . io . * ; class GFG { static int countSubarray ( int arr [ ] , int n , int k ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int sum = 0 ; for ( int j = i ; j < n ; j ++ ) { if ( sum + arr [ j ] < k ) { sum = arr [ j ] + sum ; count ++ ; } else { break ; } } } return count ; } public static void main ( String [ ] args ) { int array [ ] = { 1 , 11 , 2 , 3 , 15 } ; int k = 10 ; int size = array . length ; int count = countSubarray ( array , size , k ) ; System . out . println ( count ) ; } }"],"bleu":0.933208942524173,"rouge_l":0.9670731707317074}
{"id":1203,"predictions":["class GFG { static void printPattern ( int n ) { if ( n == 0 || n < 0 ) { System . out . print ( n + \" , ▁ \" ) ; return ; } System . out . print ( n + \" , ▁ \" ) ; printPattern ( n - 5 ) ; System . out . print ( n + \" , ▁ \" ) ; } public static void main ( String [ ] args ) { int n = 16 ; printPattern ( n ) ; } }"],"references":["import java . io . * ; class GFG { static void printPattern ( int n ) { if ( n == 0 || n < 0 ) { System . out . print ( n + \" ▁ \" ) ; return ; } System . out . print ( n + \" ▁ \" ) ; printPattern ( n - 5 ) ; System . out . print ( n + \" ▁ \" ) ; } public static void main ( String [ ] args ) { int n = 16 ; printPattern ( n ) ; } }"],"bleu":0.8851214995544826,"rouge_l":0.9465860829794184}
{"id":1204,"predictions":["class GFG { static final int max = 100 ; static int countCommon ( int mat [ ] [ ] , int n ) { int res = 0 ; for ( int i = 0 ; i < n ; i ++ ) if ( mat [ i ] [ i ] == mat [ i ] [ n - i - 1 ] ) res ++ ; return res ; } public static void main ( String [ ] args ) { int mat [ ] [ ] = { { 1 , 2 , 3 } , { 4 , 5 , 6 } , { 7 , 8 , 9 } } ; System . out . println ( countCommon ( mat , 3 ) ) ; } }"],"references":["import java . io . * ; class GFG { int MAX = 100 ; static int countCommon ( int mat [ ] [ ] , int n ) { int res = 0 ; for ( int i = 0 ; i < n ; i ++ ) if ( mat [ i ] [ i ] == mat [ i ] [ n - i - 1 ] ) res ++ ; return res ; } public static void main ( String args [ ] ) throws IOException { int mat [ ] [ ] = { { 1 , 2 , 3 } , { 4 , 5 , 6 } , { 7 , 8 , 9 } } ; System . out . println ( countCommon ( mat , 3 ) ) ; } }"],"bleu":0.8799479853259826,"rouge_l":0.9407053197848175}
{"id":1205,"predictions":["class GFG { static int getMinimumOps ( int ar [ ] ) { int n = ar . length ; int small = Arrays . stream ( ar ) . max ( ) . getAsInt ( ) ; int max = Arrays . stream ( ar ) . max ( ) . getAsInt ( ) ; int [ ] [ ] dp = new int [ n ] [ maximum ] ; for ( int i = 0 ; i < n ; i ++ ) { dp [ 0 ] [ i ] = Math . abs ( ar [ 0 ] - j ) ; } for ( int i = 1 ; i < n ; i ++ ) { int minimum = Integer . MAX_VALUE ; for ( int j = 0 ; j <= largest ; j ++ ) { minimum = Math . min ( min , dp [ i - 1 ] [ j ] ) ; dp [ i ] [ j ] = minimum + Math . abs ( ar [ i ] - j ) ; } } int ans = Integer . MAX_VALUE ; for ( int j = smallest ; j <= largest ; j ++ ) ans = Math . min ( ans , dp [ n - 1 ] [ j ] ) ; return ans ; } public static void main ( String [ ] args ) { int ar [ ] = { 1 , 2 , 1 , 4 , 3 } ; System . out . print ( getMinimumOps ( ar ) ) ; } }"],"references":["import java . util . * ; class GFG { static int getMinimumOps ( Vector < Integer > ar ) { int n = ar . size ( ) ; int small = Collections . min ( ar ) ; int large = Collections . max ( ar ) ; int [ ] [ ] dp = new int [ n ] [ large + 1 ] ; for ( int j = small ; j <= large ; j ++ ) { dp [ 0 ] [ j ] = Math . abs ( ar . get ( 0 ) - j ) ; } for ( int i = 1 ; i < n ; i ++ ) { int minimum = Integer . MAX_VALUE ; for ( int j = small ; j <= large ; j ++ ) { minimum = Math . min ( minimum , dp [ i - 1 ] [ j ] ) ; dp [ i ] [ j ] = minimum + Math . abs ( ar . get ( i ) - j ) ; } } int ans = Integer . MAX_VALUE ; for ( int j = small ; j <= large ; j ++ ) { ans = Math . min ( ans , dp [ n - 1 ] [ j ] ) ; } return ans ; } public static void main ( String [ ] args ) { Integer [ ] arr = { 1 , 2 , 1 , 4 , 3 } ; Vector < Integer > ar = new Vector < > ( Arrays . asList ( arr ) ) ; System . out . println ( getMinimumOps ( ar ) ) ; } }"],"bleu":0.6586682014891325,"rouge_l":0.7995993131081855}
{"id":1206,"predictions":["class GFG { static boolean find ( String s1 , String s2 ) { int len = s1 . length ( ) ; int len_1 = s2 . length ( ) ; int len_1 = s2 . length ( ) ; if ( len != len_1 ) return false ; int [ ] d = new int [ len_1 ] ; for ( int i = 0 ; i < len ; i ++ ) { if ( s1 . charAt ( i ) > s2 . charAt ( i ) ) return false ; else d [ i ] = s2 . charAt ( i ) - s1 . charAt ( i ) ; } for ( int i = 0 ; i < len - 1 ; i ++ ) if ( d [ i ] < d [ i + 1 ] ) return false ; return true ; } public static void main ( String [ ] args ) { String s1 = \" abcd \" ; String s2 = \" bcdd \" ; if ( find ( s1 , s2 ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static boolean find ( String s1 , String s2 ) { int len = s1 . length ( ) , len_1 = s2 . length ( ) ; if ( len != len_1 ) { return false ; } int d [ ] = new int [ len ] ; d [ 0 ] = s2 . charAt ( 0 ) - s1 . charAt ( 0 ) ; for ( int i = 1 ; i < len ; i ++ ) { if ( s1 . charAt ( i ) > s2 . charAt ( i ) ) { return false ; } else { d [ i ] = s2 . charAt ( i ) - s1 . charAt ( i ) ; } } for ( int i = 0 ; i < len - 1 ; i ++ ) { if ( d [ i ] < d [ i + 1 ] ) { return false ; } } return true ; } public static void main ( String [ ] args ) { String s1 = \" abcd \" , s2 = \" bcdd \" ; if ( find ( s1 , s2 ) ) { System . out . println ( \" Yes \" ) ; } else { System . out . println ( \" No \" ) ; } } }"],"bleu":0.7369872051967272,"rouge_l":0.8711745846691926}
{"id":1207,"predictions":["import java . util . * ; class GFG { static int solveQuery ( int start , int end , int arr [ ] [ ] ) { HashMap < Integer , Integer > frequency = new HashMap < > ( ) ; for ( int i = start ; i <= end ; i ++ ) { if ( frequency . containsKey ( arr [ i ] ) ) frequency . put ( arr [ i ] , frequency . get ( arr [ i ] ) + 1 ) ; else frequency . put ( arr [ i ] , 1 ) ; } int count = 0 ; for ( int i = 0 ; i < arr . length ; i ++ ) if ( frequency . containsKey ( arr [ i ] ) ) count ++ ; return count ; } public static void main ( String [ ] args ) { int A [ ] [ ] = { 1 , 2 , 3 , 3 , 3 } ; int n = A . length ; int queries [ ] [ ] = { 0 , 1 } , { 0 , 2 } , { 1 , 3 } , { 0 , 5 } } ; int q = queries . length ; for ( int i = 0 ; i < q ; i ++ ) { int start = queries [ i ] [ 0 ] ; int end = queries [ i ] [ 1 ] ; System . out . println ( \" Answer ▁ for ▁ Query ▁ \" + ( i + 1 ) + \" ▁ = ▁ \" + solveQuery ( start , end , A ) ) ; } }"],"references":["import java . util . HashMap ; import java . util . Map ; class GFG { static int solveQuery ( int start , int end , int arr [ ] ) { Map < Integer , Integer > mp = new HashMap < > ( ) ; for ( int i = start ; i <= end ; i ++ ) mp . put ( arr [ i ] , mp . get ( arr [ i ] ) == null ? 1 : mp . get ( arr [ i ] ) + 1 ) ; int count = 0 ; for ( Map . Entry < Integer , Integer > entry : mp . entrySet ( ) ) if ( entry . getKey ( ) == entry . getValue ( ) ) count ++ ; return count ; } public static void main ( String [ ] args ) { int A [ ] = { 1 , 2 , 2 , 3 , 3 , 3 } ; int n = A . length ; int [ ] [ ] queries = { { 0 , 1 } , { 1 , 1 } , { 0 , 2 } , { 1 , 3 } , { 3 , 5 } , { 0 , 5 } } ; int q = queries . length ; for ( int i = 0 ; i < q ; i ++ ) { int start = queries [ i ] [ 0 ] ; int end = queries [ i ] [ 1 ] ; System . out . println ( \" Answer ▁ for ▁ Query ▁ \" + ( i + 1 ) + \" ▁ = ▁ \" + solveQuery ( start , end , A ) ) ; } } }"],"bleu":0.7535890894191204,"rouge_l":0.8226345884129894}
{"id":1208,"predictions":["import java . util . * ; class GFG { static int solve ( int N , int K ) { int [ ] combo = new int [ N + 1 ] ; int i ; for ( i = 1 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= N ; j ++ ) { if ( j >= i ) combo [ j ] += combo [ j - i ] ; } } return dup [ N ] ; } public static void main ( String [ ] args ) { int N = 29 , K = 5 ; System . out . println ( solve ( N , K ) ) ; } }"],"references":["class GFG { static int solve ( int N , int K ) { int [ ] combo ; combo = new int [ 50 ] ; combo [ 0 ] = 1 ; for ( int i = 1 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= N ; j ++ ) { if ( j >= i ) { combo [ j ] += combo [ j - i ] ; } } } return combo [ N ] ; } public static void main ( String args [ ] ) { int N = 29 ; int K = 5 ; System . out . println ( solve ( N , K ) ) ; solve ( N , K ) ; } }"],"bleu":0.7471808089968789,"rouge_l":0.8525193085693268}
{"id":1209,"predictions":["import java . util . * ; class GFG { static void findMin ( int V ) { Vector < Integer > den = new Vector < Integer > ( ) ; int [ ] den = { 1 , 2 , 5 , 10 , 20 , 50 , 100 , 1000 } ; int n = den . size ( ) ; Vector < Integer > ans = new Vector < Integer > ( ) ; for ( int i = n - 1 ; i >= 0 ; i -- ) { while ( V >= den [ i ] ) { V -= den [ i ] ; ans . add ( den [ i ] ) ; } } for ( int i = 0 ; i < ans . size ( ) ; i ++ ) System . out . print ( ans . get ( i ) + \" ▁ \" ) ; } public static void main ( String [ ] args ) { int n = 94 ; System . out . println ( \" Following ▁ is ▁ minimal ▁ number ▁ for ▁ \" + n + \" : ▁ \" + findMin ( n ) ) ; } }"],"references":["import java . util . Vector ; class GFG { static int deno [ ] = { 1 , 2 , 5 , 10 , 20 , 50 , 100 , 500 , 1000 } ; static int n = deno . length ; static void findMin ( int V ) { Vector < Integer > ans = new Vector < > ( ) ; for ( int i = n - 1 ; i >= 0 ; i -- ) { while ( V >= deno [ i ] ) { V -= deno [ i ] ; ans . add ( deno [ i ] ) ; } } for ( int i = 0 ; i < ans . size ( ) ; i ++ ) { System . out . print ( \" ▁ \" + ans . elementAt ( i ) ) ; } } public static void main ( String [ ] args ) { int n = 93 ; System . out . print ( \" Following ▁ is ▁ minimal ▁ number ▁ of ▁ change ▁ for ▁ \" + n + \" : ▁ \" ) ; findMin ( n ) ; } }"],"bleu":0.725003101567236,"rouge_l":0.8314446469609319}
{"id":1210,"predictions":["class GFG { static void checkPalindrome ( int num ) { String str = String . valueOf ( num ) ; int l = 0 , r = str . length ( ) - 1 ; while ( l < r ) { if ( str . charAt ( l ) != str . charAt ( r ) ) { System . out . println ( \" No \" ) ; return ; } l = l + 1 ; r = r - 1 ; } System . out . println ( \" Yes \" ) ; return ; } public static void main ( String [ ] args ) { int n = 19 ; int k = 3 ; checkPalindrome ( n + k ) ; } }"],"references":["import java . util . * ; class GFG { static void checkPalindrome ( int num ) { String str = Integer . toString ( num ) ; int l = 0 , r = str . length ( ) - 1 ; while ( l < r ) { if ( str . charAt ( l ) != str . charAt ( r ) ) { System . out . print ( \" No \" ) ; return ; } l ++ ; r -- ; } System . out . print ( \" Yes \" ) ; return ; } public static void main ( String args [ ] ) { int n = 19 , k = 3 ; checkPalindrome ( n + k ) ; } }"],"bleu":0.791051902577277,"rouge_l":0.8854961832061069}
{"id":1211,"predictions":["class GFG { static void updateArray ( int arr [ ] , int n ) { for ( int i = 0 ; i < n - 1 ; i ++ ) arr [ i ] = arr [ i + 1 ] ; arr [ n - 1 ] = - 1 ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + \" ▁ \" ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 5 , 1 , 3 , 2 , 4 } ; int N = arr . length ; updateArray ( arr , N ) ; } }"],"references":["class GFG { static void updateArray ( int arr [ ] , int n ) { for ( int i = 0 ; i <= n - 2 ; i ++ ) arr [ i ] = arr [ i + 1 ] ; arr [ n - 1 ] = - 1 ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + \" ▁ \" ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 5 , 1 , 3 , 2 , 4 } ; int N = arr . length ; updateArray ( arr , N ) ; } }"],"bleu":0.9627833619571593,"rouge_l":0.9844961240310077}
{"id":1212,"predictions":["class GFG { static int maxProduct ( int arr [ ] , int n ) { if ( n < 3 ) return - 1 ; int max_product = Integer . MIN_VALUE ; for ( int i = 0 ; i < n - 2 ; i ++ ) { for ( int j = i + 1 ; j < n - 1 ; j ++ ) { for ( int k = j + 1 ; k < n ; k ++ ) { max_product = Math . max ( max_product , arr [ i ] * arr [ j ] * arr [ k ] ) ; } } } return max_product ; } public static void main ( String [ ] args ) { int arr [ ] = { 10 , 3 , 5 , 6 , 20 } ; int n = arr . length ; int max = maxProduct ( arr , n ) ; if ( max == - 1 ) System . out . println ( \" No ▁ Triindrome \" ) ; else System . out . println ( \" Maximum ▁ product ▁ is ▁ \" + max ) ; } }"],"references":["class GFG { static int maxProduct ( int [ ] arr , int n ) { if ( n < 3 ) return - 1 ; int max_product = Integer . MIN_VALUE ; for ( int i = 0 ; i < n - 2 ; i ++ ) for ( int j = i + 1 ; j < n - 1 ; j ++ ) for ( int k = j + 1 ; k < n ; k ++ ) max_product = Math . max ( max_product , arr [ i ] * arr [ j ] * arr [ k ] ) ; return max_product ; } public static void main ( String [ ] args ) { int [ ] arr = { 10 , 3 , 5 , 6 , 20 } ; int n = arr . length ; ; int max = maxProduct ( arr , n ) ; if ( max == - 1 ) System . out . println ( \" No ▁ Triplet ▁ Exists \" ) ; else System . out . println ( \" Maximum ▁ product ▁ is ▁ \" + max ) ; } }"],"bleu":0.8881767057242546,"rouge_l":0.9640733197556008}
{"id":1213,"predictions":["class GFG { static int countSubStr ( String S , int X ) { int cnt = 0 ; int N = S . length ( ) ; for ( int i = 0 ; i < N ; i ++ ) { if ( S . charAt ( i ) != '0' ) { int j = 1 ; while ( ( j + i ) <= N ) { int num = S . charAt ( i ) ; if ( num > X ) cnt ++ ; j ++ ; } } } return cnt ; } static public void main ( String [ ] args ) { String S = \"222222\" ; int X = 97 ; System . out . println ( countSubStr ( S , X ) ) ; } }"],"references":["import java . util . * ; class GFG { static int count ( String S , int X ) { int count = 0 ; int N = S . length ( ) ; for ( int i = 0 ; i < N ; ++ i ) { if ( S . charAt ( i ) != '0' ) { for ( int len = 1 ; ( i + len ) <= N ; ++ len ) { int num = Integer . parseInt ( S . substring ( i , i + len ) ) ; if ( num > X ) count ++ ; } } } return count ; } public static void main ( String [ ] args ) { String S = \"2222\" ; int X = 97 ; System . out . println ( count ( S , X ) ) ; } }"],"bleu":0.6211477406733186,"rouge_l":0.8194335609537671}
{"id":1214,"predictions":["import java . io . * ; class GFG { static void printPattern ( int radius ) { for ( int i = 0 ; i <= ( 2 * radius ) ; i ++ ) { for ( int j = 0 ; j <= ( 2 * radius ) ; j ++ ) { double dist = Math . sqrt ( ( i - radius ) * ( i - radius ) + ( j - radius ) * ( j - radius ) ) ; if ( dist > radius - 0.5 ) System . out . print ( \" * \" ) ; else System . out . print ( \" ▁ \" ) ; } System . out . println ( ) ; } } public static void main ( String [ ] args ) { int radius = 6 ; printPattern ( radius ) ; } }"],"references":["class GFG { static void printPattern ( int radius ) { double dist ; for ( int i = 0 ; i <= 2 * radius ; i ++ ) { for ( int j = 0 ; j <= 2 * radius ; j ++ ) { dist = Math . sqrt ( ( i - radius ) * ( i - radius ) + ( j - radius ) * ( j - radius ) ) ; if ( dist > radius - 0.5 && dist < radius + 0.5 ) System . out . print ( \" * \" ) ; else System . out . print ( \" ▁ \" ) ; } System . out . print ( \" \\n \" ) ; } } public static void main ( String [ ] args ) { int radius = 6 ; printPattern ( radius ) ; } }"],"bleu":0.8448001855454855,"rouge_l":0.9150326797385621}
{"id":1215,"predictions":["import java . util . * ; class GFG { public static int findSum ( int arr [ ] , int N ) { HashMap < Integer , Integer > mp = new HashMap < > ( ) ; for ( int i = 0 ; i < N ; i ++ ) if ( mp . containsKey ( arr [ i ] ) ) { mp . put ( arr [ i ] , mp . get ( arr [ i ] ) + 1 ) ; } else { mp . put ( arr [ i ] , 1 ) ; } int sum = 0 ; for ( Map . Entry < Integer , Integer > it : mp . entrySet ( ) ) { if ( it . getValue ( ) % 2 != 0 ) sum += ( it . getValue ( ) ) ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 10 , 20 , 20 , 10 , 40 , 10 } ; int N = arr . length ; System . out . println ( findSum ( arr , N ) ) ; } }"],"references":["import java . util . * ; class GFG { static int findSum ( int arr [ ] , int N ) { Map < Integer , Integer > mp = new HashMap < > ( ) ; for ( int i = 0 ; i < N ; i ++ ) mp . put ( arr [ i ] , mp . get ( arr [ i ] ) == null ? 1 : mp . get ( arr [ i ] ) + 1 ) ; int sum = 0 ; for ( Map . Entry < Integer , Integer > entry : mp . entrySet ( ) ) { if ( entry . getValue ( ) % 2 != 0 ) sum += ( entry . getKey ( ) ) * ( entry . getValue ( ) ) ; } return sum ; } public static void main ( String args [ ] ) { int arr [ ] = { 10 , 20 , 20 , 10 , 40 , 40 , 10 } ; int N = arr . length ; System . out . println ( findSum ( arr , N ) ) ; } }"],"bleu":0.8001203784539467,"rouge_l":0.8803720333547146}
{"id":1216,"predictions":["class GFG { static void findFrequencyUtil ( int arr [ ] , int low , int high , int freq [ ] ) { if ( arr [ low ] == arr [ high ] ) { freq [ arr [ low ] ] += high - low + 1 ; } else { int mid = ( low + high ) \/ 2 ; findFrequencyUtil ( arr , low , mid , freq ) ; findFrequencyUtil ( arr , mid + 1 , high , freq ) ; findFrequencyUtil ( arr , mid + 1 , freq ) ; } } static void findFrequency ( int arr [ ] , int n ) { int [ ] freq = new int [ n - 1 + 1 ] ; findFrequencyUtil ( arr , 0 , n - 1 , freq ) ; for ( int i = 0 ; i < arr [ n - 1 ] ; i ++ ) { if ( freq [ i ] != 0 ) { System . out . println ( \" Element \" + i + \" ▁ \" + freq [ i ] + \" ▁ \" + freq [ i ] + \" ▁ times \" ) ; } } } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 1 , 2 , 3 , 5 , 8 , 9 , 10 } ; int n = arr . length ; findFrequency ( arr , n ) ; } }"],"references":["import java . util . * ; class GFG { static void findFrequencyUtil ( int arr [ ] , int low , int high , int [ ] freq ) { if ( arr [ low ] == arr [ high ] ) { freq [ arr [ low ] ] += high - low + 1 ; } else { int mid = ( low + high ) \/ 2 ; findFrequencyUtil ( arr , low , mid , freq ) ; findFrequencyUtil ( arr , mid + 1 , high , freq ) ; } } static void findFrequency ( int arr [ ] , int n ) { int [ ] freq = new int [ arr [ n - 1 ] + 1 ] ; findFrequencyUtil ( arr , 0 , n - 1 , freq ) ; for ( int i = 0 ; i <= arr [ n - 1 ] ; i ++ ) if ( freq [ i ] != 0 ) System . out . println ( \" Element ▁ \" + i + \" ▁ occurs ▁ \" + freq [ i ] + \" ▁ times \" ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 1 , 2 , 3 , 3 , 5 , 5 , 8 , 8 , 8 , 9 , 9 , 10 } ; int n = arr . length ; findFrequency ( arr , n ) ; } }"],"bleu":0.8636830262880909,"rouge_l":0.9073313417973614}
{"id":1217,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int num ) { int res = 0 , fact = 1 ; for ( int i = 1 ; i <= num ; i ++ ) { fact *= i ; res += ( i \/ fact ) ; } return res ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( \" Sum : ▁ \" + sumOfSeries ( n ) ) ; } }"],"references":["import java . io . * ; import java . lang . * ; class GFG { public static double sumOfSeries ( double num ) { double res = 0 , fact = 1 ; for ( int i = 1 ; i <= num ; i ++ ) { fact = fact * i ; res = res + ( i \/ fact ) ; } return ( res ) ; } public static void main ( String [ ] args ) { double n = 5 ; System . out . println ( \" Sum : ▁ \" + sumOfSeries ( n ) ) ; } }"],"bleu":0.6958119532979886,"rouge_l":0.8618828385458012}
{"id":1218,"predictions":["class GFG { static void calcSum ( int arr [ ] , int n , int k ) { int sum = 0 ; for ( int i = 0 ; i < k ; i ++ ) sum += arr [ i ] ; System . out . print ( sum + \" ▁ \" ) ; for ( int i = k ; i < n ; i ++ ) { sum = ( sum - arr [ i - k ] ) + arr [ i ] ; System . out . print ( sum + \" ▁ \" ) ; } } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 , 6 } ; int n = arr . length ; int k = 3 ; calcSum ( arr , n , k ) ; } }"],"references":["class GFG { static void calcSum ( int arr [ ] , int n , int k ) { int sum = 0 ; for ( int i = 0 ; i < k ; i ++ ) sum += arr [ i ] ; System . out . print ( sum + \" ▁ \" ) ; for ( int i = k ; i < n ; i ++ ) { sum = ( sum - arr [ i - k ] ) + arr [ i ] ; System . out . print ( sum + \" ▁ \" ) ; } } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 , 6 } ; int n = arr . length ; int k = 3 ; calcSum ( arr , n , k ) ; } }"],"bleu":1.0,"rouge_l":1.0}
{"id":1219,"predictions":["class GFG { static int minChanges ( int [ ] A , int n ) { int cnt = 0 ; for ( int i = 0 ; i < n - 2 ; i ++ ) { if ( ( i - 1 >= 0 ) && A [ i - 1 ] == 1 && A [ i + 1 ] == 0 ) { A [ i + 1 ] = 0 ; cnt ++ ; } } return cnt ; } public static void main ( String [ ] args ) { int A [ ] = { 1 , 1 , 0 , 1 , 1 , 0 , 1 , 0 , 1 , 0 } ; int n = A . length ; System . out . println ( minChanges ( A , n ) ) ; } }"],"references":["import java . lang . * ; import java . util . * ; class GFG { static int minChanges ( int [ ] A , int n ) { int cnt = 0 ; for ( int i = 0 ; i < n - 2 ; ++ i ) { if ( ( i - 1 >= 0 ) && A [ i - 1 ] == 1 && A [ i + 1 ] == 1 && A [ i ] == 0 ) { A [ i + 1 ] = 0 ; cnt ++ ; } } return cnt ; } public static void main ( String args [ ] ) { int [ ] A = { 1 , 1 , 0 , 1 , 1 , 0 , 1 , 0 , 1 , 0 } ; int n = A . length ; System . out . print ( minChanges ( A , n ) ) ; } }"],"bleu":0.7898565162357313,"rouge_l":0.8965017594700891}
{"id":1220,"predictions":["class GFG { static int calcNodes ( int N , int I ) { int result = 0 ; result = I * ( N - 1 ) + 1 ; return result ; } public static void main ( String [ ] args ) { int N = 5 , I = 2 ; System . out . println ( \" Leaf ▁ nodes ▁ = ▁ \" + calcNodes ( N , I ) ) ; } }"],"references":["class GfG { static int calcNodes ( int N , int I ) { int result = 0 ; result = I * ( N - 1 ) + 1 ; return result ; } public static void main ( String [ ] args ) { int N = 5 , I = 2 ; System . out . println ( \" Leaf ▁ nodes ▁ = ▁ \" + calcNodes ( N , I ) ) ; } }"],"bleu":0.9779081189643993,"rouge_l":0.9875000000000002}
{"id":1221,"predictions":["class GFG { static int countSum ( int arr [ ] , int n ) { int NumberOfOdd = 0 , NumberOfOdd = 0 ; for ( int i = 0 ; i < n ; ++ i ) { if ( ( arr [ i ] & 1 ) == 1 ) { NumberOfOdd += 1 ; } } NumberOfOddSubsequences = n - NumberOfOddSubsequences ; NumberOfOddSubsequences = ( 1 << NumberOfOddSubsequences ) * ( 1 << ( NumberOfOddSubsequences ) ) ; NumberOfOddSubsequences = ( 1 << n ) - 1 - NumberOfOddSubsequences ; return ( NumberOfEvenSubsequences , NumberOfOddSubsequences ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 2 , 3 } ; int n = arr . length ; System . out . print ( \" EvenSum ▁ = ▁ \" + ans . charAt ( 0 ) ) ; System . out . print ( \" OddSum ▁ = ▁ \" + ans . charAt ( 1 ) ) ; System . out . print ( \" OddSum ▁ = ▁ \" + ans . charAt ( 1 ) ) ; } }"],"references":["import java . util . * ; class GFG { static class pair { int first , second ; public pair ( int first , int second ) { this . first = first ; this . second = second ; } } static pair countSum ( int arr [ ] , int n ) { int NumberOfOdds = 0 , NumberOfEvens = 0 ; for ( int i = 0 ; i < n ; i ++ ) if ( arr [ i ] % 2 == 1 ) NumberOfOdds ++ ; NumberOfEvens = n - NumberOfOdds ; int NumberOfOddSubsequences = ( 1 << NumberOfEvens ) * ( 1 << ( NumberOfOdds - 1 ) ) ; int NumberOfEvenSubsequences = ( 1 << n ) - 1 - NumberOfOddSubsequences ; return new pair ( NumberOfEvenSubsequences , NumberOfOddSubsequences ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 2 , 3 } ; int n = arr . length ; pair ans = countSum ( arr , n ) ; System . out . print ( \" EvenSum ▁ = ▁ \" + ans . first ) ; System . out . print ( \" ▁ OddSum ▁ = ▁ \" + ans . second ) ; } }"],"bleu":0.5804152836517789,"rouge_l":0.7257445501995703}
{"id":1222,"predictions":["class GFG { static int findMinNumber ( int n ) { int count = 0 , ans = 1 ; while ( n % 2 == 0 ) { count ++ ; n \/= 2 ; } if ( count % 3 != 0 ) ans *= ( int ) Math . pow ( 2 , ( count % 3 ) ) ; for ( int i = 3 ; i <= Math . pow ( n , 1 \/ 2 ) ; i += 2 ) { count = 0 ; while ( n % i == 0 ) { count ++ ; n \/= i ; } if ( count % 3 != 0 ) ans *= Math . pow ( i , ( count % 3 ) ) ; } if ( n > 2 ) ans *= n ; return ans ; } public static void main ( String [ ] args ) { int n = 128 ; System . out . println ( findMinNumber ( n ) ) ; } }"],"references":["class GFG { static int findMinNumber ( int n ) { int count = 0 , ans = 1 ; while ( n % 2 == 0 ) { count ++ ; n \/= 2 ; } if ( count % 3 != 0 ) ans *= Math . pow ( 2 , ( count % 3 ) ) ; for ( int i = 3 ; i <= Math . sqrt ( n ) ; i += 2 ) { count = 0 ; while ( n % i == 0 ) { count ++ ; n \/= i ; } if ( count % 3 != 0 ) ans *= Math . pow ( i , ( count % 3 ) ) ; } if ( n > 2 ) ans *= n ; return ans ; } public static void main ( String [ ] args ) { int n = 128 ; System . out . print ( findMinNumber ( n ) + \" \\n \" ) ; } }"],"bleu":0.9072320642196381,"rouge_l":0.9587426326129665}
{"id":1223,"predictions":["class GFG { static boolean is_vowel ( char c ) { return ( ( c == ' a ' || c == ' e ' || ( c == ' e ' || c == ' i ' || c == ' o ' || c == ' u ' ) ) ; } static void removeVowels ( String str ) { System . out . print ( str . charAt ( 0 ) ) ; for ( int i = 1 ; i < str . length ( ) ; i ++ ) { if ( ( is_vowel ( str . charAt ( i - 1 ) ) ) || ( is_vowel ( str . charAt ( i ) ) ) ) System . out . print ( str . charAt ( i ) ) ; } } public static void main ( String [ ] args ) { String str = \" geeks ▁ for ▁ geeks \" ; removeVowels ( str ) ; } }"],"references":["import java . io . * ; import java . util . * ; import java . lang . * ; class GFG { static boolean is_vow ( char c ) { return ( c == ' a ' ) || ( c == ' e ' ) || ( c == ' i ' ) || ( c == ' o ' ) || ( c == ' u ' ) ; } static void removeVowels ( String str ) { System . out . print ( str . charAt ( 0 ) ) ; for ( int i = 1 ; i < str . length ( ) ; i ++ ) if ( ( ! is_vow ( str . charAt ( i - 1 ) ) ) || ( ! is_vow ( str . charAt ( i ) ) ) ) System . out . print ( str . charAt ( i ) ) ; } public static void main ( String [ ] args ) { String str = \" geeks ▁ for ▁ geeks \" ; removeVowels ( str ) ; } }"],"bleu":0.7302756646378399,"rouge_l":0.8620532458059811}
{"id":1224,"predictions":["import java . io . * ; class GFG { static double PI = 3.14159265 ; public static double areacumscribed ( double a ) { return ( a * a * ( PI \/ 2 ) ) ; } public static void main ( String [ ] args ) { double a = 6 ; System . out . println ( \" Area ▁ of ▁ \" + a + \" ▁ circle ▁ is ▁ : ▁ \" + areacircumscribed ( a ) ) ; } }"],"references":["import java . io . * ; class Gfg { static float areacircumscribed ( float a ) { float PI = 3.14159265f ; return ( a * a * ( PI \/ 2 ) ) ; } public static void main ( String arg [ ] ) { float a = 6 ; System . out . print ( \" Area ▁ of ▁ an ▁ circumscribed \" + \" circle ▁ is ▁ : \" ) ; System . out . println ( areacircumscribed ( a ) ) ; } }"],"bleu":0.5890190444401665,"rouge_l":0.7636066763425254}
{"id":1225,"predictions":["class GFG { static int breakEvenPoint ( int exp , int S , int M ) { int selling = S - M ; int res = ( int ) Math . ceil ( exp \/ answer ) ; return res ; } public static void main ( String [ ] args ) { int exp = 3550 , S = 90 ; System . out . println ( breakEvenPoint ( exp , S , M ) ) ; } }"],"references":["import java . io . * ; import java . lang . * ; class GFG { public static int breakEvenPoint ( int exp1 , int S , int M ) { double earn = S - M ; double exp = exp1 ; double res = Math . ceil ( exp \/ earn ) ; int res1 = ( int ) res ; return res1 ; } public static void main ( String [ ] args ) { int exp = 3550 , S = 90 , M = 65 ; System . out . println ( breakEvenPoint ( exp , S , M ) ) ; } }"],"bleu":0.5373215097835936,"rouge_l":0.7338345864661654}
{"id":1226,"predictions":["class GFG { static int MAX = 256 ; static int countPairs ( String s ) { int cnt [ ] = new int [ MAX ] ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { cnt [ ( int ) s . charAt ( i ) - 97 ] ++ ; } int ans = 0 ; for ( int i = 0 ; i < MAX ; i ++ ) { ans += cnt [ i ] * cnt [ i ] ; } return ans ; } public static void main ( String [ ] args ) { String s = \" geeksforgeeks \" ; System . out . println ( countPairs ( s ) ) ; } }"],"references":["import java . io . * ; class GFG { static int MAX = 256 ; static int countPairs ( String s ) { int cnt [ ] = new int [ MAX ] ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) cnt [ s . charAt ( i ) ] ++ ; int ans = 0 ; for ( int i = 0 ; i < MAX ; i ++ ) ans += cnt [ i ] * cnt [ i ] ; return ans ; } public static void main ( String [ ] args ) { String s = \" geeksforgeeks \" ; System . out . println ( countPairs ( s ) ) ; } }"],"bleu":0.8642226771679956,"rouge_l":0.9406790200223853}
{"id":1227,"predictions":["import java . io . * ; class GFG { static double sumOfSeries ( int n ) { return 0.0659 * ( Math . pow ( 10 , n ) - 1 - ( 9 * n ) ) ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"references":["import java . util . * ; class GFG { static double sumOfSeries ( int n ) { return 0.0246 * ( Math . pow ( 10 , n ) - 1 - ( 9 * n ) ) ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( sumOfSeries ( n ) ) ; } }"],"bleu":0.9279747705872716,"rouge_l":0.9718309859154928}
{"id":1228,"predictions":["import java . util . * ; class GFG { static int maxLengthSubsequence ( int arr [ ] , int n ) { HashMap < Integer , Integer > m = new HashMap < Integer , Integer > ( ) ; int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < i ; j ++ ) { if ( Math . abs ( arr [ i ] - arr [ j ] ) <= 1 && mls [ i ] < mls [ j ] + 1 ) { mls [ i ] = mls [ j ] + 1 ; } } } for ( int i = 0 ; i < n ; i ++ ) if ( max < mls [ i ] ) max = mls [ i ] ; return max ; } return max ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 5 , 6 , 3 , 7 , 6 , 5 , 8 } ; int n = arr . length ; System . out . println ( \" Maximum ▁ length ▁ subsequence ▁ = ▁ \" + maxLengthSub ( arr , n ) ) ; } }"],"references":["import java . util . * ; class GFG { public static int maxLenSub ( int arr [ ] , int n ) { int mls [ ] = new int [ n ] , max = 0 ; for ( int i = 0 ; i < n ; i ++ ) mls [ i ] = 1 ; for ( int i = 1 ; i < n ; i ++ ) for ( int j = 0 ; j < i ; j ++ ) if ( Math . abs ( arr [ i ] - arr [ j ] ) <= 1 && mls [ i ] < mls [ j ] + 1 ) mls [ i ] = mls [ j ] + 1 ; for ( int i = 0 ; i < n ; i ++ ) if ( max < mls [ i ] ) max = mls [ i ] ; return max ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 5 , 6 , 3 , 7 , 6 , 5 , 8 } ; int n = arr . length ; System . out . println ( \" Maximum ▁ length ▁ subsequence ▁ = ▁ \" + maxLenSub ( arr , n ) ) ; } }"],"bleu":0.8076782903457104,"rouge_l":0.8687734712676255}
{"id":1229,"predictions":["import java . util . * ; class GFG { static int mod = 1000000007 ; static int [ ] [ ] dp = new int [ 1000 ] [ 1000 ] ; static int calculate ( int pos , int prev , String s , Vector < String > s , int index ) { if ( pos == s . length ( ) ) { return 1 ; } if ( dp [ pos ] [ prev ] != - 1 ) { return dp [ pos ] [ prev ] ; } int c = s . charAt ( pos ) - ' a ' ; int answer = 0 ; for ( int i = 0 ; i < index ; i ++ ) { if ( index . charAt ( i ) > prev ) { answer = ( answer % mod + calculate ( pos + 1 , index , s , index ) % mod ) % mod ; } } return dp [ pos ] [ prev ] = 4 ; } static int countWays ( int [ ] a , int s ) { int n = a . length ; int index = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < a . length ( ) ; j ++ ) { index [ a [ i ] [ j ] = - calculate ( pos + 1 , index [ i ] , index ) % mod ; } } return calculate ( 0 , 0 , s , index [ 0 ] ) ; } public static void main ( String [ ] args ) { Vector < String > a = new Vector < String > ( ) ; a . add ( \" aac \" ) ; a . add ( \" aac \" ) ; for ( int i = 0 ; i < 26 ; i ++ ) { for ( int j = 0 ; j < 26 ; j ++ ) { for ( int l = 0 ; l < a . size ( ) ; l ++ ) { index . add ( l ) ; } } System . out . print ( countWays ( 0 , 0 ) ) ; } }"],"references":["import java . util . * ; class GFG { static int mod = 1000000007 ; static int [ ] [ ] dp = new int [ 1000 ] [ 1000 ] ; static int calculate ( int pos , int prev , String s , Vector < Integer > index ) { if ( pos == s . length ( ) ) return 1 ; if ( dp [ pos ] [ prev ] != - 1 ) return dp [ pos ] [ prev ] ; int answer = 0 ; for ( int i = 0 ; i < index . size ( ) ; i ++ ) { if ( index . get ( i ) . compareTo ( prev ) >= 0 ) { answer = ( answer % mod + calculate ( pos + 1 , index . get ( i ) , s , index ) % mod ) % mod ; } } return dp [ pos ] [ prev ] = answer ; } static int countWays ( Vector < String > a , String s ) { int n = a . size ( ) ; Vector < Integer > [ ] index = new Vector [ 26 ] ; for ( int i = 0 ; i < 26 ; i ++ ) index [ i ] = new Vector < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < a . get ( i ) . length ( ) ; j ++ ) { index [ a . get ( i ) . charAt ( j ) - ' a ' ] . add ( j + 1 ) ; } } for ( int i = 0 ; i < 1000 ; i ++ ) { for ( int j = 0 ; j < 1000 ; j ++ ) { dp [ i ] [ j ] = - 1 ; } } return calculate ( 0 , 0 , s , index [ 0 ] ) ; } public static void main ( String [ ] args ) { Vector < String > A = new Vector < String > ( ) ; A . add ( \" adc \" ) ; A . add ( \" aec \" ) ; A . add ( \" erg \" ) ; String S = \" ac \" ; System . out . print ( countWays ( A , S ) ) ; } }"],"bleu":0.687515526777483,"rouge_l":0.7000348931880742}
{"id":1230,"predictions":["import java . io . * ; class GFG { static String divisibleBy36 ( String num ) { int len = num . length ( ) ; if ( len == 0 ) return \" No \" ; if ( len == 1 && num . charAt ( 0 ) != '0' ) return \" No \" ; int two_digit_num = ( ( num . charAt ( len - 2 ) ) * 10 + ( num . charAt ( len - 1 ) ) ; if ( two_digit % 4 != 0 ) return \" No \" ; int sum = 0 ; for ( int i = 0 ; i < len ; i ++ ) sum += ( num . charAt ( i ) - '0' ) ; if ( sum % 9 != 0 ) return \" No \" ; return ( \" Yes \" ) ; } public static void main ( String [ ] args ) { String num = \"925678\" ; System . out . println ( \" Yes \" ) ; } }"],"references":["class IsDivisible { static boolean divisibleBy36 ( String num ) { int l = num . length ( ) ; if ( l == 0 ) return false ; if ( l == 1 && num . charAt ( 0 ) != '0' ) return false ; int two_digit_num = ( num . charAt ( l - 2 ) - '0' ) * 10 + ( num . charAt ( l - 1 ) - '0' ) ; if ( two_digit_num % 4 != 0 ) return false ; int sum = 0 ; for ( int i = 0 ; i < l ; i ++ ) sum += ( num . charAt ( i ) - '0' ) ; if ( sum % 9 != 0 ) return false ; return true ; } public static void main ( String [ ] args ) { String num = \"92567812197966231384\" ; if ( divisibleBy36 ( num ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.6637074498207033,"rouge_l":0.7988160373127635}
{"id":1231,"predictions":["class GFG { static int [ ] sum = new int [ 1000005 ] ; static void preSum ( int x ) { return ( int ) ( x ) ; } static void generateSum ( int x ) { sum [ 0 ] = 0 ; for ( int i = 0 ; i < s . length ; i ++ ) sum [ i + 1 ] = sum [ i ] + toInt ( s . charAt ( i ) ) ; } static void query ( int l , int r ) { if ( ( sum [ r + 1 ] - sum [ l ] ) % 3 == 0 ) { System . out . println ( \" Divisible ▁ by ▁ 3\" ) ; } else { System . out . println ( \" Not ▁ divisible ▁ by ▁ 3\" ) ; } } public static void main ( String [ ] args ) { int n = 12 , 1 ; query ( 1 , 2 ) ; query ( 3 , 6 ) ; query ( 0 , 10 ) ; } }"],"references":["class GFG { static int sum [ ] = new int [ 1000005 ] ; static int toInt ( char x ) { return x - '0' ; } static void prepareSum ( String s ) { sum [ 0 ] = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { sum [ i + 1 ] = sum [ i ] + toInt ( s . charAt ( i ) ) ; } } static void query ( int l , int r ) { if ( ( sum [ r + 1 ] - sum [ l ] ) % 3 == 0 ) { System . out . println ( \" Divisible ▁ by ▁ 3\" ) ; } else { System . out . println ( \" Not ▁ divisible ▁ by ▁ 3\" ) ; } } public static void main ( String [ ] args ) { String n = \"12468236544\" ; prepareSum ( n ) ; query ( 0 , 1 ) ; query ( 1 , 2 ) ; query ( 3 , 6 ) ; query ( 0 , 10 ) ; } }"],"bleu":0.7973705582936238,"rouge_l":0.8977923139820114}
{"id":1232,"predictions":["import java . util . Arrays ; import java . util . Collections ; class GFG { static longDistance ( long arr [ ] , int n ) { Arrays . sort ( arr ) ; long res = 0 ; long sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { res += ( arr [ i ] * i - sum ) ; sum += arr [ i ] ; } return res ; } static long totient ( long x [ ] , int y [ ] , int n ) { return distanceSum ( x , n ) + distanceSum ( y , n ) ; } public static void main ( String [ ] args ) { long x [ ] = { - 1 , 1 , 3 , 2 } ; long y [ ] = { 5 , 6 , 5 , 3 } ; int n = x . length ; System . out . println ( totientSum ( x , y , n ) ) ; } }"],"references":["import java . io . * ; import java . util . * ; class GFG { static int distancesum ( int arr [ ] , int n ) { Arrays . sort ( arr ) ; int res = 0 , sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { res += ( arr [ i ] * i - sum ) ; sum += arr [ i ] ; } return res ; } static int totaldistancesum ( int x [ ] , int y [ ] , int n ) { return distancesum ( x , n ) + distancesum ( y , n ) ; } public static void main ( String [ ] args ) { int x [ ] = { - 1 , 1 , 3 , 2 } ; int y [ ] = { 5 , 6 , 5 , 3 } ; int n = x . length ; System . out . println ( totaldistancesum ( x , y , n ) ) ; } }"],"bleu":0.8100109754914624,"rouge_l":0.9144385026737967}
{"id":1233,"predictions":["import java . io . * ; class GFG { static long squareSum ( int n ) { long sum = 0 ; for ( int i = 0 ; i <= n ; i ++ ) sum += ( 2 * i ) * ( 2 * i ) ; return sum ; } public static void main ( String args [ ] ) { System . out . println ( squareSum ( 8 ) ) ; } }"],"references":["import java . io . * ; class GFG { static int squareSum ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += ( 2 * i ) * ( 2 * i ) ; return sum ; } public static void main ( String args [ ] ) throws IOException { System . out . println ( squareSum ( 8 ) ) ; } }"],"bleu":0.8622539533312058,"rouge_l":0.9485056542810986}
{"id":1234,"predictions":["class GFG { static int findAndSum ( int arr [ ] , int n ) { int sum = 0 , mul = 1 ; for ( int i = 0 ; i < 30 ; i ++ ) { int count_on = 0 ; int l = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( ( arr [ j ] & ( 1 << i ) ) > 0 ) { if ( count_on ) l ++ ; else count_on = 1 ; } else if ( count_on > 0 ) { sum += ( ( mul * l * ( l + 1 ) ) \/ 2 ) ; count_on = 0 ; l = 0 ; } } if ( count_on > 0 ) sum += ( ( mul * l + 1 ) ) \/ 2 ; count_on = 0 ; l = 0 ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 7 , 1 , 1 , 5 } ; int n = arr . length ; System . out . println ( findAndSum ( arr , n ) ) ; } }"],"references":["class GFG { static int findAndSum ( int [ ] arr , int n ) { int sum = 0 ; int mul = 1 ; for ( int i = 0 ; i < 30 ; i ++ ) { boolean count_on = false ; int l = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( ( arr [ j ] & ( 1 << i ) ) > 0 ) if ( count_on ) l ++ ; else { count_on = true ; l ++ ; } else if ( count_on ) { sum += ( ( mul * l * ( l + 1 ) ) \/ 2 ) ; count_on = false ; l = 0 ; } } if ( count_on ) { sum += ( ( mul * l * ( l + 1 ) ) \/ 2 ) ; count_on = false ; l = 0 ; } mul *= 2 ; } return sum ; } public static void main ( String [ ] args ) { int [ ] arr = { 7 , 1 , 1 , 5 } ; int n = arr . length ; System . out . println ( findAndSum ( arr , n ) ) ; } }"],"bleu":0.7989422038429074,"rouge_l":0.9140450275831222}
{"id":1235,"predictions":["import java . util . * ; class GFG { static boolean isAlphabaticOrder ( String s ) { int n = s . length ( ) ; char [ ] c = s . toCharArray ( ) ; Arrays . sort ( c ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( c [ i ] != s [ i ] ) { return false ; } } return true ; } static public void main ( String [ ] args ) { String s = \" aabbbcc \" ; if ( isAlphabaticOrder ( s ) ) { System . out . println ( \" Yes \" ) ; } else { System . out . println ( \" No \" ) ; } } }"],"references":["import java . util . Arrays ; public class GFG { static boolean isAlphabaticOrder ( String s ) { int n = s . length ( ) ; char c [ ] = new char [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = s . charAt ( i ) ; } Arrays . sort ( c ) ; for ( int i = 0 ; i < n ; i ++ ) if ( c [ i ] != s . charAt ( i ) ) return false ; return true ; } public static void main ( String args [ ] ) { String s = \" aabbbcc \" ; if ( isAlphabaticOrder ( s ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.6231643531597297,"rouge_l":0.8156510302498905}
{"id":1236,"predictions":["class GfG { static class Node { int data ; Node next ; Node prev ; } ; static Node push ( Node head_ref , int new_data ) { Node new_node = new Node ( ) ; new_node . data = new_data ; new_node . prev = null ; new_node . prev = null ; if ( head != null ) . prev = new_node ; head = new_node ; } static Node insertAfter ( Node new_node ) { if ( prev == null ) { System . out . print ( \" The ▁ given ▁ node ▁ cannot ▁ be ▁ NULL \" ) ; return = new_node ; } Node new_node = head_node ; new_node . prev = null ; new_node . prev = null ; return new_node ; } static void printList ( Node node ) { while ( node != null ) { System . out . print ( node . next + \" ▁ \" ) ; node = node . next ; } Node new_node = head ; new_node . next = null ; new_node . prev = null ; new_node . prev = null ; if ( new_node . next != null ) new_node . prev = null ; } static void printList ( Node node ) { while ( node != null ) { System . out . print ( \" \\n \" ) ; node = node . next ; } node = head ; while ( node != null ) { System . out . print ( node . data + \" ▁ \" ) ; node . next = null ; } } public static void main ( String [ ] args ) { Node head = null ; head = push ( head , 4 ) ; head = push ( head , 6 ) ; head = push ( head , 7 ) ; head = push ( head , 4 ) ; head = push ( head , 1 ) ; head = push ( head , 5 ) ; head = push ( head , 7 ) ; printList ( head ) ; head = insert ( head , 2 ) ; System . out . print ( \" \\n Doubly ▁ \\n \" ) ; printList ( head ) ; } }"],"references":["public class DLL { Node head ; class Node { int data ; Node prev ; Node next ; Node ( int d ) { data = d ; } } public void push ( int new_data ) { Node new_Node = new Node ( new_data ) ; new_Node . next = head ; new_Node . prev = null ; if ( head != null ) head . prev = new_Node ; head = new_Node ; } public void InsertAfter ( Node prev_Node , int new_data ) { if ( prev_Node == null ) { System . out . println ( \" The ▁ given ▁ previous ▁ node ▁ cannot ▁ be ▁ NULL ▁ \" ) ; return ; } Node new_node = new Node ( new_data ) ; new_node . next = prev_Node . next ; prev_Node . next = new_node ; new_node . prev = prev_Node ; if ( new_node . next != null ) new_node . next . prev = new_node ; } void append ( int new_data ) { Node new_node = new Node ( new_data ) ; Node last = head ; new_node . next = null ; if ( head == null ) { new_node . prev = null ; head = new_node ; return ; } while ( last . next != null ) last = last . next ; last . next = new_node ; new_node . prev = last ; } public void printlist ( Node node ) { Node last = null ; System . out . println ( \" Traversal ▁ in ▁ forward ▁ Direction \" ) ; while ( node != null ) { System . out . print ( node . data + \" ▁ \" ) ; last = node ; node = node . next ; } System . out . println ( ) ; System . out . println ( \" Traversal ▁ in ▁ reverse ▁ direction \" ) ; while ( last != null ) { System . out . print ( last . data + \" ▁ \" ) ; last = last . prev ; } } public static void main ( String [ ] args ) { DLL dll = new DLL ( ) ; dll . append ( 6 ) ; dll . push ( 7 ) ; dll . push ( 1 ) ; dll . append ( 4 ) ; dll . InsertAfter ( dll . head . next , 8 ) ; System . out . println ( \" Created ▁ DLL ▁ is : ▁ \" ) ; dll . printlist ( dll . head ) ; } }"],"bleu":0.44175998830173663,"rouge_l":0.573357057208061}
{"id":1237,"predictions":["class GFG { static int size = 1000 ; static int prime [ ] = new int [ size ] ; static int freq [ ] = new int [ size ] ; static void sieve ( int a , int b ) { Arrays . fill ( prime , 1 ) ; for ( int i = 2 ; i * i <= size ; i ++ ) { if ( prime [ i ] == 0 ) { for ( int j = i * 2 ; j < size ; j += i ) { prime [ j ] = 1 ; } } } for ( int p = 1 ; p < size ; p ++ ) { for ( int i = 1 ; i < size ; i ++ ) { if ( prime [ p ] == 0 && prime [ j ] = 1 ; } } for ( int p = 1 ; p < size ; p ++ ) { for ( int q = 1 ; q < size ; q ++ ) { if ( prime [ p ] == 0 && prime [ q ] == 0 && a * q < size ) { freq [ a * p + b * q ] ++ ; } } } } static void main ( String [ ] args ) { int queries = 2 , a = 1 ; int b = 2 ; sieve ( a , b ) ; int arr [ ] = { 15 , 25 } ; for ( int i = 0 ; i < queries ; i ++ ) System . out . print ( freq [ arr [ i ] ] + \" ▁ \" ) ; } }"],"references":["public class GFG { final static int size = 10001 ; static int prime [ ] = new int [ size ] ; static int freq [ ] = new int [ size ] ; static void sieve ( int a , int b ) { prime [ 1 ] = 1 ; for ( int i = 2 ; i * i < size ; i ++ ) { if ( prime [ i ] == 0 ) { for ( int j = i * 2 ; j < size ; j += i ) prime [ j ] = 1 ; } } for ( int p = 1 ; p < size ; p ++ ) { for ( int q = 1 ; q < size ; q ++ ) { if ( prime [ p ] == 0 && prime [ q ] == 0 && a * p + b * q < size ) { freq [ a * p + b * q ] ++ ; } } } } public static void main ( String [ ] args ) { int queries = 2 , a = 1 , b = 2 ; sieve ( a , b ) ; int arr [ ] = { 15 , 25 } ; for ( int i = 0 ; i < queries ; i ++ ) { System . out . print ( freq [ arr [ i ] ] + \" ▁ \" ) ; } } }"],"bleu":0.7791411603571368,"rouge_l":0.8767074474403136}
{"id":1238,"predictions":["class GFG { static String replaceConsonants ( String str ) { String res = \" \" ; int i = 0 , count = 0 ; while ( i < str . length ( ) ) { if ( str . charAt ( i ) != ' a ' && str . charAt ( i ) != ' e ' && str . charAt ( i ) != ' e ' && str . charAt ( i ) != ' u ' ) { i ++ ; count ++ ; } else { if ( count > 0 ) res += str . charAt ( i ) ; res += str . charAt ( i ) ; i ++ ; count = 0 ; } } if ( count > 0 ) res += str . charAt ( i ) ; return res ; } public static void main ( String [ ] args ) { String str = \" abcde \" ; System . out . println ( replaceConsonants ( str ) ) ; } }"],"references":["import java . util . * ; import java . lang . * ; class GFG { static String replaceConsonants ( String str ) { String res = \" \" ; int i = 0 , count = 0 ; while ( i < str . length ( ) ) { if ( str . charAt ( i ) != ' a ' && str . charAt ( i ) != ' e ' && str . charAt ( i ) != ' i ' && str . charAt ( i ) != ' o ' && str . charAt ( i ) != ' u ' ) { i ++ ; count ++ ; } else { if ( count > 0 ) res += count ; res += str . charAt ( i ) ; i ++ ; count = 0 ; } } if ( count > 0 ) res += count ; return res ; } public static void main ( String [ ] args ) { String str = \" abcdeiop \" ; System . out . println ( replaceConsonants ( str ) ) ; } }"],"bleu":0.8398034009373953,"rouge_l":0.8770397812472436}
{"id":1239,"predictions":["import java . util . Arrays ; class CoinChange { static long countWays ( int S [ ] , int m , int n ) { long [ ] table = new long [ n + 1 ] ; table [ 0 ] = 1 ; for ( int i = 0 ; i < m ; i ++ ) for ( int j = S [ i ] ; j <= n ; j ++ ) table [ j ] += table [ j - S [ i ] ] ; return table [ n ] ; } public static void main ( String args [ ] ) { int arr [ ] = { 1 , 2 , 3 } ; int m = arr . length ; int n = 4 ; System . out . println ( countWays ( arr , m , n ) ; } }"],"references":["public static int count ( int S [ ] , int m , int n ) { int table [ ] = new int [ n + 1 ] ; table [ 0 ] = 1 ; for ( int i = 0 ; i < m ; i ++ ) for ( int j = S [ i ] ; j <= n ; j ++ ) table [ j ] += table [ j - S [ i ] ] ; return table [ n ] ; }"],"bleu":0.5348856229705494,"rouge_l":0.727840909090909}
{"id":1240,"predictions":["class GFG { static void minReplacement ( String str ) { if ( str . length ( ) > 26 ) { System . out . println ( \" IMPOSSIBLE \" ) ; } else { int [ ] hash = new int [ 26 ] ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { hash [ str . charAt ( i ) - ' a ' ] ++ ; } int count = 0 ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { if ( hash [ str . charAt ( i ) - ' a ' ] > 1 ) { for ( int j = 0 ; j < 26 ; j ++ ) { if ( hash [ str . charAt ( i ) - ' a ' ] > 1 ) { for ( int j = 0 ; j < 26 ; j ++ ) { if ( hash [ str . charAt ( i ) - ' a ' ) { hash [ str . charAt ( j ) - ' a ' ] -- ; str . charAt ( j ) ++ ; hash [ j ] ++ ; break ; } } } } } System . out . print ( str ) ; } public static void main ( String [ ] args ) { String str = \" xxxyyy \" ; } }"],"references":["class GFG { static void minReplacement ( String str ) { if ( str . length ( ) > 26 ) { System . out . println ( \" IMPOSSIBLE \" ) ; } else { int hash [ ] = new int [ 26 ] ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { hash [ str . charAt ( i ) - ' a ' ] ++ ; } int count = 0 ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { if ( hash [ str . charAt ( i ) - ' a ' ] > 1 ) { for ( int j = 0 ; j < 26 ; j ++ ) { if ( hash [ j ] == 0 ) { hash [ str . charAt ( i ) - ' a ' ] -- ; str = str . substring ( 0 , i ) + ( char ) ( j + ' a ' ) + str . substring ( i + 1 ) ; hash [ j ] ++ ; break ; } } } } System . out . println ( str ) ; } } public static void main ( String [ ] args ) { String str = \" xxxxyyyy \" ; minReplacement ( str ) ; } }"],"bleu":0.7862721511037379,"rouge_l":0.847668598524763}
{"id":1241,"predictions":["class GFG { static int N = 3 ; static int findStepsForDS ( int arr [ ] [ ] ) { int result = 0 ; for ( int i = 0 ; i < N ; i ++ ) { int sum = 0 ; for ( int j = 0 ; j < N ; j ++ ) sum += Math . abs ( arr [ i ] [ j ] ) ; sum -= Math . abs ( arr [ i ] [ i ] ) ; if ( Math . abs ( arr [ i ] [ i ] ) < Math . abs ( sum ) ) result += Math . abs ( Math . abs ( arr [ i ] [ i ] ) - Math . abs ( sum ) ) ; } return result ; } public static void main ( String [ ] args ) { int arr [ ] [ ] = { { 3 , - 2 , 1 } , { 1 , - 3 , 2 } , { - 1 , 4 } } ; System . out . println ( findSteps ( arr ) ) ; } }"],"references":["class GFG { final static int N = 3 ; static int findStepsForDDM ( int arr [ ] [ ] ) { int result = 0 ; for ( int i = 0 ; i < N ; i ++ ) { int sum = 0 ; for ( int j = 0 ; j < N ; j ++ ) sum += Math . abs ( arr [ i ] [ j ] ) ; sum -= Math . abs ( arr [ i ] [ i ] ) ; if ( Math . abs ( arr [ i ] [ i ] ) < Math . abs ( sum ) ) result += Math . abs ( Math . abs ( arr [ i ] [ i ] ) - Math . abs ( sum ) ) ; } return result ; } public static void main ( String [ ] args ) { int arr [ ] [ ] = { { 3 , - 2 , 1 } , { 1 , - 3 , 2 } , { - 1 , 2 , 4 } } ; System . out . println ( findStepsForDDM ( arr ) ) ; } }"],"bleu":0.9497217331655678,"rouge_l":0.9815867424545673}
{"id":1242,"predictions":["class GFG { static boolean isArmstrong ( int x , int n ) { int sum1 = 0 ; int temp = x ; while ( temp > 0 ) { int digit = temp % 10 ; sum1 += Math . pow ( digit , n ) ; temp \/= 10 ; } return sum1 == x ; } static void CalculateXORandOR ( int n ) { int CalculateXOR = 0 ; int E = ( int ) Math . pow ( 10 , n - 1 ) ; for ( int i = start ; i <= end ; i ++ ) { if ( isArmstrong ( i , n ) ) { CalculateXOR = CalculateXOR ^ i ; CalculateXOR = CalculateXOR ^ i ; } } System . out . println ( \" XOR ▁ = ▁ \" + CalculateXOR ) ; } public static void main ( String [ ] args ) { int n = 4 ; CalculateXOROR ( n ) ; } }"],"references":["class GFG { static boolean isArmstrong ( int x , int n ) { int sum1 = 0 ; int temp = x ; while ( temp > 0 ) { int digit = temp % 10 ; sum1 += Math . pow ( digit , n ) ; temp \/= 10 ; } return sum1 == x ; } static void CalculateXORandOR ( int n ) { int CalculateXOR = 0 ; int CalculateOR = 0 ; int start = ( int ) Math . pow ( 10 , n - 1 ) ; int end = ( int ) ( Math . pow ( 10 , n ) ) - 1 ; for ( int i = start ; i < end + 1 ; i ++ ) { if ( isArmstrong ( i , n ) ) { CalculateXOR = CalculateXOR ^ i ; CalculateOR = CalculateOR | i ; } } System . out . println ( \" XOR ▁ = ▁ \" + CalculateXOR ) ; System . out . println ( \" OR ▁ = ▁ \" + CalculateOR ) ; } public static void main ( String [ ] args ) { int n = 4 ; CalculateXORandOR ( n ) ; } }"],"bleu":0.7120315166324196,"rouge_l":0.8411301920311309}
{"id":1243,"predictions":["import java . io . * ; class GFG { static int decToOctal ( int n ) { int octal [ ] = new int [ 100 ] ; int i = 0 ; while ( n != 0 ) { octalNum [ i ] = n % 8 ; n = n \/ 8 ; i ++ ; } for ( int j = i - 1 ; j >= 0 ; j -- ) { System . out . print ( octal [ j ] ) ; } System . out . println ( ) ; } static void nDigitPerfectSquares ( int n ) { int decimal = ( int ) Math . pow ( ( int ) ( Math . sqrt ( Math . pow ( 8 , n ) ) - 1 , 2 ) ; decToOctal ( decimal ) ; } public static void main ( String [ ] args ) { int n = 2 ; nDigitPerfectSquares ( n ) ; } }"],"references":["import java . util . * ; import java . lang . * ; import java . io . * ; class GFG { static void decToOctal ( int n ) { int octalNum [ ] = new int [ 100 ] ; int i = 0 ; while ( n != 0 ) { octalNum [ i ] = n % 8 ; n = n \/ 8 ; i ++ ; } for ( int j = i - 1 ; j >= 0 ; j -- ) System . out . print ( octalNum [ j ] ) ; System . out . println ( \" \\n \" ) ; } static void nDigitPerfectSquares ( int n ) { int decimal = ( int ) Math . pow ( Math . ceil ( Math . sqrt ( Math . pow ( 8 , n ) ) ) - 1 , 2 ) ; decToOctal ( decimal ) ; } public static void main ( String [ ] args ) { int n = 2 ; nDigitPerfectSquares ( n ) ; } }"],"bleu":0.8081434456506026,"rouge_l":0.9022508038585207}
{"id":1244,"predictions":["class GFG { static int getFinalElement ( int n ) { int finalNum = 2 ; while ( finalNum * 2 <= n ) { finalNum *= 2 ; } return finalNum ; } public static void main ( String [ ] args ) { int N = 12 ; System . out . println ( getFinalElement ( N ) ) ; } }"],"references":["class OddPosition { public static long getFinalElement ( long n ) { long finalNum ; for ( finalNum = 2 ; finalNum * 2 <= n ; finalNum *= 2 ) ; return finalNum ; } public static void main ( String [ ] args ) { int N = 12 ; System . out . println ( getFinalElement ( N ) ) ; } }"],"bleu":0.6747383221191343,"rouge_l":0.8438128772635815}
{"id":1245,"predictions":["import java . util . * ; class GFG { static int maxSum ( int arr [ ] , int n ) { if ( n < 2 ) return - 1 ; int ans = arr [ 0 ] + arr [ 1 ] ; for ( int i = 1 ; i < n - 1 ; i ++ ) ans = Math . min ( ans , ( arr [ i ] + arr [ i + 1 ] ) ) ; return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 12 , 2 , 2 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int maxSum ( int arr [ ] , int n ) { if ( n < 2 ) return - 1 ; int ans = arr [ 0 ] + arr [ 1 ] ; for ( int i = 1 ; i + 1 < n ; i ++ ) ans = Math . min ( ans , ( arr [ i ] + arr [ i + 1 ] ) ) ; return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 12 , 2 , 2 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }"],"bleu":0.948561032772208,"rouge_l":0.9782608695652174}
{"id":1246,"predictions":["class GFG { static int findCount ( String str ) { int result = 0 ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { if ( ( i == str . charAt ( i ) - ' a ' ) || ( i == str . charAt ( i ) - ' A ' ) ) result ++ ; } return result ; } static public void main ( String [ ] args ) { String str = \" abgdeF \" ; System . out . println ( findCount ( str ) ) ; } }"],"references":["class GFG { static int findCount ( String str ) { int result = 0 ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { if ( i == ( str . charAt ( i ) - ' a ' ) || i == ( str . charAt ( i ) - ' A ' ) ) { result ++ ; } } return result ; } public static void main ( String [ ] args ) { String str = \" AbgdeF \" ; System . out . print ( findCount ( str ) ) ; } }"],"bleu":0.8203519954731976,"rouge_l":0.9428701318381573}
{"id":1247,"predictions":["class GFG { static int power ( int x , int y ) { if ( y == 0 ) return 1 ; else if ( y % 2 == 0 ) return ( power ( x , y \/ 2 ) * power ( x , y \/ 2 ) ; else return ( x * power ( x , y \/ 2 ) * power ( x , y \/ 2 ) ) ; } static boolean sieveOfEratosthenes ( int n , boolean isPrime [ ] ) { isPrime [ 0 ] = isPrime [ 1 ] = false ; for ( int i = 2 ; i <= n ; i ++ ) isPrime [ i ] = true ; for ( int p = 2 ; p * p <= n ; p ++ ) { if ( isPrime [ p ] == true ) { for ( int i = p * 2 ; i <= n ; i += p ) isPrime [ i ] = false ; } p = p + 1 ; } } static int leftTester ( int n ) { int temp = n ; int cnt = 0 ; while ( temp != 0 ) { cnt ++ ; temp1 = temp % 10 ; if ( isPrime [ n % mod ] ) return false ; temp = temp \/ 10 ; } return true ; } static void leftTester ( int n ) { int temp = n ; int cnt [ ] = new int [ n + 1 ] ; sieveOfEratosthenes ( n ) ; for ( int i = cnt ; i >= 1 ; i -- ) { int mod = power ( 10 , i ) ; if ( isPrime [ n % mod ] ) return false ; } return true ; } public static void main ( String [ ] args ) { int n = 121 ; if ( leftTittPrime ( n ) ) System . out . println ( n + \" ▁ is ▁ left \" ) ; } }"],"references":["import java . io . * ; class GFG { static int power ( int x , int y ) { if ( y == 0 ) return 1 ; else if ( y % 2 == 0 ) return power ( x , y \/ 2 ) * power ( x , y \/ 2 ) ; else return x * power ( x , y \/ 2 ) * power ( x , y \/ 2 ) ; } static void sieveOfEratosthenes ( int n , boolean isPrime [ ] ) { isPrime [ 0 ] = isPrime [ 1 ] = false ; for ( int i = 2 ; i <= n ; i ++ ) isPrime [ i ] = true ; for ( int p = 2 ; p * p <= n ; p ++ ) { if ( isPrime [ p ] == true ) { for ( int i = p * 2 ; i <= n ; i += p ) isPrime [ i ] = false ; } } } static boolean leftTruPrime ( int n ) { int temp = n , cnt = 0 , temp1 ; while ( temp != 0 ) { cnt ++ ; temp1 = temp % 10 ; if ( temp1 == 0 ) return false ; temp = temp \/ 10 ; } boolean isPrime [ ] = new boolean [ n + 1 ] ; sieveOfEratosthenes ( n , isPrime ) ; for ( int i = cnt ; i > 0 ; i -- ) { int mod = power ( 10 , i ) ; if ( ! isPrime [ n % mod ] ) return false ; } return true ; } public static void main ( String args [ ] ) { int n = 113 ; if ( leftTruPrime ( n ) ) System . out . println ( n + \" ▁ is ▁ left ▁ truncatable ▁ prime \" ) ; else System . out . println ( n + \" ▁ is ▁ not ▁ left ▁ truncatable ▁ prime \" ) ; } }"],"bleu":0.7850540568900175,"rouge_l":0.8599781001916232}
{"id":1248,"predictions":["import java . util . * ; class GFG { static int findExtraCharacter ( String strA , String strB ) { HashMap < Character , Integer > m1 = new HashMap < > ( ) ; for ( int i = 0 ; i < strB . length ( ) ; i ++ ) { if ( m1 . containsKey ( strB ) ) { m1 . put ( strB . charAt ( i ) , m1 . get ( str2 . charAt ( i ) ) + 1 ) ; } else { m1 . put ( str1 . charAt ( i ) , 1 ) ; } } for ( Map . Entry < String , Integer > it : m1 . entrySet ( ) ) { if ( m1 . getValue ( ) == 1 ) { return h1 ; } } } static public void main ( String [ ] args ) { String strA = \" abcd \" ; String strB = \" cbdad \" ; System . out . println ( findExtraCharacter ( strA , strB ) ) ; } }"],"references":["class GFG { static char findExtraCharcter ( char [ ] strA , char [ ] strB ) { int [ ] m1 = new int [ 256 ] ; for ( int i = 0 ; i < strB . length ; i ++ ) m1 [ strB [ i ] ] ++ ; for ( int i = 0 ; i < strA . length ; i ++ ) m1 [ strA [ i ] ] -- ; for ( int i = 0 ; i < m1 . length ; i ++ ) { if ( m1 [ i ] == 1 ) return ( char ) i ; } return Character . MIN_VALUE ; } public static void main ( String [ ] args ) { String strA = \" abcd \" ; String strB = \" cbdad \" ; System . out . println ( findExtraCharcter ( strA . toCharArray ( ) , strB . toCharArray ( ) ) ) ; } }"],"bleu":0.35798576446922364,"rouge_l":0.547955459904557}
{"id":1249,"predictions":["import java . io . * ; public class GFG { static float AvgofSquareN ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += ( i * i ) ; return sum \/ n ; } static public void main ( String [ ] args ) { int n = 2 ; System . out . println ( AvgofSquareN ( n ) ) ; } }"],"references":["import java . io . * ; public class GFG { static float AvgofSquareN ( int n ) { float sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += ( i * i ) ; return sum \/ n ; } static public void main ( String [ ] args ) { int n = 2 ; System . out . println ( AvgofSquareN ( n ) ) ; } }"],"bleu":0.9690278768043126,"rouge_l":0.9878048780487805}
{"id":1250,"predictions":["class GFG { static int lcm_fun ( int a , int b ) { if ( b == 0 ) return a ; return lcm_fun ( b , a % b ) ; } static int digitLCM ( int n ) { int lcm = 1 ; while ( n > 0 ) { lcm = ( n % 10 * lcm ) \/ lcm_fun ( n % 10 , lcm ) ) ; if ( lcm == 0 ) return 0 ; n \/= 10 ; } return lcm ; } public static void main ( String [ ] args ) { int n = 397 ; System . out . print ( digitLCM ( n ) ) ; } }"],"references":["class GFG { static int lcm_fun ( int a , int b ) { if ( b == 0 ) return a ; return lcm_fun ( b , a % b ) ; } static int digitLCM ( int n ) { int lcm = 1 ; while ( n > 0 ) { lcm = ( n % 10 * lcm ) \/ lcm_fun ( n % 10 , lcm ) ; if ( lcm == 0 ) return 0 ; n = n \/ 10 ; } return lcm ; } public static void main ( String [ ] args ) { int n = 397 ; System . out . println ( digitLCM ( n ) ) ; } }"],"bleu":0.9361605412316444,"rouge_l":0.9707140946777214}
{"id":1251,"predictions":["class GFG { static int fact ( int n ) { if ( n <= 1 ) return 1 ; return n * fact ( n - 1 ) ; } static int nPr ( int n , int r ) { return ( int ) Math . floor ( fact ( n ) \/ fact ( n - r ) ) ; } public static void main ( String [ ] args ) { int n = 5 , r = 2 ; System . out . println ( n + \" ▁ P ▁ \" + r + \" ▁ = ▁ \" + nPr ( n , r ) ) ; } }"],"references":["import java . util . * ; public class GFG { static int fact ( int n ) { if ( n <= 1 ) return 1 ; return n * fact ( n - 1 ) ; } static int nPr ( int n , int r ) { return fact ( n ) \/ fact ( n - r ) ; } public static void main ( String args [ ] ) { int n = 5 ; int r = 2 ; System . out . println ( n + \" P \" + r + \" ▁ = ▁ \" + nPr ( n , r ) ) ; } }"],"bleu":0.8235991725818154,"rouge_l":0.9011363636363637}
{"id":1252,"predictions":["class GFG { static boolean isPossible ( int a [ ] , int n ) { int cur = a [ 0 ] ; cur -- ; for ( int i = 1 ; i < n ; i ++ ) { int nxt = a [ i ] ; if ( nxt > cur ) { nxt -- ; } else if ( nxt < cur ) { return false ; } cur = nxt ; } return true ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 1 , 2 , 3 } ; int n = a . length ; if ( isPossible ( a , n ) ) { System . out . println ( \" Yes \" ) ; } else { System . out . println ( \" No \" ) ; } } }"],"references":["class GFG { static boolean isPossible ( int a [ ] , int n ) { int cur = a [ 0 ] ; cur -- ; for ( int i = 1 ; i < n ; i ++ ) { int nxt = a [ i ] ; if ( nxt > cur ) nxt -- ; else if ( nxt < cur ) return false ; cur = nxt ; } return true ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 1 , 2 , 3 } ; int n = a . length ; if ( isPossible ( a , n ) ) System . out . printf ( \" Yes \" ) ; else System . out . printf ( \" No \" ) ; } }"],"bleu":0.8501141814501646,"rouge_l":0.9648740045816514}
{"id":1253,"predictions":["class GFG { static int fact ( int n ) { int num = 1 ; for ( int i = 1 ; i <= n ; i ++ ) num = num * i ; return num ; } static int Special_Factorial_Number ( int k ) { for ( int i = 1 ; i <= k ; i ++ ) { if ( fact ( i ) % k == 0 ) return i ; } return 0 ; } public static void main ( String [ ] args ) { int k = 16 ; System . out . print ( Special_Factorial_Number ( k ) ) ; } }"],"references":["public class GFG { static int fact ( int n ) { int num = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { num = num * i ; } return num ; } static int Special_Factorial_Number ( int k ) { for ( int i = 1 ; i <= k ; i ++ ) { if ( fact ( i ) % k == 0 ) { return i ; } } return 0 ; } public static void main ( String [ ] args ) { int k = 16 ; System . out . println ( Special_Factorial_Number ( k ) ) ; } }"],"bleu":0.8927443745446051,"rouge_l":0.9656303479749001}
{"id":1254,"predictions":["class GFG { static int mod = 1000000007 ; static int noOfBinaryStrings ( int N , int k ) { int [ ] dp = new int [ 100002 ] ; for ( int i = 1 ; i < K ; i ++ ) { dp [ i ] = 1 ; } dp [ k ] = 2 ; for ( int i = k + 1 ; i <= N ; i ++ ) { dp [ i ] = ( dp [ i - 1 ] + dp [ i - k ] ) % mod ; } return dp [ N ] ; } public static void main ( String [ ] args ) { int N = 4 ; int K = 2 ; System . out . println ( noOfBinaryStrings ( N , K ) ) ; } }"],"references":["import java . util . * ; class GFG { static int mod = 1000000007 ; static int noOfBinaryStrings ( int N , int k ) { int dp [ ] = new int [ 100002 ] ; for ( int i = 1 ; i <= k - 1 ; i ++ ) { dp [ i ] = 1 ; } dp [ k ] = 2 ; for ( int i = k + 1 ; i <= N ; i ++ ) { dp [ i ] = ( dp [ i - 1 ] + dp [ i - k ] ) % mod ; } return dp [ N ] ; } public static void main ( String [ ] args ) { int N = 4 ; int K = 2 ; System . out . println ( noOfBinaryStrings ( N , K ) ) ; } }"],"bleu":0.894540273571257,"rouge_l":0.9450704225352112}
{"id":1255,"predictions":["class GFG { static void reverse ( int arr [ ] , int n , int k ) { for ( int i = 0 ; i < n ; i ++ ) { int left = i ; int right = Math . min ( i + k - 1 , n - 1 ) ; while ( left < right ) { int temp = arr [ left ] ; arr [ left ] = arr [ right ] ; arr [ right ] = temp ; left ++ ; right -- ; } } } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 13 , 14 } ; int k = 3 ; reverse ( arr , n , k ) ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + \" ▁ \" ) ; } }"],"references":["class GFG { static void reverse ( int arr [ ] , int n , int k ) { for ( int i = 0 ; i < n ; i += 2 * k ) { int left = i ; int right = Math . min ( i + k - 1 , n - 1 ) ; while ( left < right ) { swap ( arr , left ++ , right -- ) ; } } } static int [ ] swap ( int [ ] array , int i , int j ) { int temp = array [ i ] ; array [ i ] = array [ j ] ; array [ j ] = temp ; return array ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 } ; int k = 3 ; int n = arr . length ; reverse ( arr , n , k ) ; for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( arr [ i ] + \" ▁ \" ) ; } } }"],"bleu":0.6785908090373094,"rouge_l":0.804250038777726}
{"id":1256,"predictions":["class GFG { static int MAX = 100 ; static void fillRemaining ( int i , int j , int n ) { int x = 2 ; for ( int k = i + 1 ; k < n ; k ++ ) { mat [ k ++ ] [ j ] = x ; } for ( int k = 0 ; k < i ; k ++ ) { mat [ k ] [ j ] = x ; } for ( int k = 0 ; k < i ; k ++ ) mat [ k ] [ j ] = x ; } static void constructMatrix ( int n ) { int right = n - 1 , left = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( i % 2 == 0 ) { mat [ i ] [ right ] = 1 ; fillRemaining ( i , right , n ) ; right -- ; } else { mat [ i ] [ left ] = 1 ; fillRemaining ( i , left , n ) ; } } } public static void main ( String [ ] args ) { int n = 5 ; constructMatrix ( n ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { System . out . print ( mat [ i ] [ j ] + \" ▁ \" ) ; } System . out . println ( \" \" ) ; } }"],"references":["class GFG { static final int MAX = 100 ; static int [ ] [ ] mat = new int [ MAX ] [ MAX ] ; static void fillRemaining ( int i , int j , int n ) { int x = 2 ; for ( int k = i + 1 ; k < n ; k ++ ) mat [ k ] [ j ] = x ++ ; for ( int k = 0 ; k < i ; k ++ ) mat [ k ] [ j ] = x ++ ; } static void constructMatrix ( int n ) { int right = n - 1 , left = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( i % 2 == 0 ) { mat [ i ] [ right ] = 1 ; fillRemaining ( i , right , n ) ; right -- ; } else { mat [ i ] [ left ] = 1 ; fillRemaining ( i , left , n ) ; left ++ ; } } } public static void main ( String args [ ] ) { int n = 5 ; constructMatrix ( n ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) System . out . print ( mat [ i ] [ j ] + \" ▁ \" ) ; System . out . println ( ) ; } } }"],"bleu":0.8365018602970768,"rouge_l":0.8995659154427067}
{"id":1257,"predictions":["import java . util . * ; class GFG { static void printMaxOfMin ( int arr [ ] , int n ) { for ( int k = 1 ; k <= n ; k ++ ) { int maxOfMin = Integer . MIN_VALUE ; for ( int i = 0 ; i < n - k ; i ++ ) { int min = arr [ i ] ; for ( int j = 0 ; j < k ; j ++ ) { if ( arr [ i + j ] < min ) min = arr [ i + j ] ; } if ( min > maxOfMin ) maxOfMin = min ; } System . out . print ( max + \" ▁ \" ) ; } } public static void main ( String [ ] args ) { int arr [ ] = { 10 , 20 , 30 , 50 , 10 , 70 , 30 } ; int n = arr . length ; printMaxOfMin ( arr , n ) ; } }"],"references":["class Test { static int arr [ ] = { 10 , 20 , 30 , 50 , 10 , 70 , 30 } ; static void printMaxOfMin ( int n ) { for ( int k = 1 ; k <= n ; k ++ ) { int maxOfMin = Integer . MIN_VALUE ; for ( int i = 0 ; i <= n - k ; i ++ ) { int min = arr [ i ] ; for ( int j = 1 ; j < k ; j ++ ) { if ( arr [ i + j ] < min ) min = arr [ i + j ] ; } if ( min > maxOfMin ) maxOfMin = min ; } System . out . print ( maxOfMin + \" ▁ \" ) ; } } public static void main ( String [ ] args ) { printMaxOfMin ( arr . length ) ; } }"],"bleu":0.8044163534129796,"rouge_l":0.8029423151374371}
{"id":1258,"predictions":["import java . util . * ; class GfG { static int countSubArrays ( int arr [ ] , int n , int k ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i ; j < n ; j ++ ) { int bitwise_or = 0 ; for ( int k = i ; k <= j ; k ++ ) { bitwise_or_or = bitwise_or | arr [ k ] ; } if ( bitwise_or >= K ) count ++ ; } } return count ; } public static void main ( String args [ ] ) { int arr [ ] = { 3 , 4 , 5 } ; int n = arr . length ; int k = 6 ; System . out . println ( countSubArrays ( arr , n , k ) ) ; } }"],"references":["import java . util . * ; class solution { static int countSubArrays ( int arr [ ] , int n , int K ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i ; j < n ; j ++ ) { int bitwise_or = 0 ; for ( int k = i ; k <= j ; k ++ ) { bitwise_or = bitwise_or | arr [ k ] ; } if ( bitwise_or >= K ) count ++ ; } } return count ; } public static void main ( String args [ ] ) { int arr [ ] = { 3 , 4 , 5 } ; int n = arr . length ; int k = 6 ; System . out . println ( countSubArrays ( arr , n , k ) ) ; } }"],"bleu":0.9525887827821876,"rouge_l":0.9812500000000002}
{"id":1259,"predictions":["class GFG { static String CHwerty = \" \" ; static int MAX = 26 ; static String getString ( char [ ] str , int n ) { String [ ] umap = new String [ MAX ] ; for ( int i = 0 ; i < MAX ; i ++ ) { umap [ i ] = CH [ ( i + 1 ) % MAX ] ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int i = 0 ; i < n ; i ++ ) { str [ i ] = uMap [ ( int ) ( i + 1 ) % MAX ] ; } return String . valueOf ( str ) ; } public static void main ( String [ ] args ) { String str = \" geeks \" ; int n = str . length ( ) ; System . out . println ( getString ( str . toCharArray ( ) , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static String CHARS = \" qwertyuiopasdfghjklzxcvbnm \" ; static int MAX = 26 ; static String getString ( char [ ] str , int n ) { Map < Character , Character > uMap = new HashMap < > ( ) ; for ( int i = 0 ; i < MAX ; i ++ ) { uMap . put ( CHARS . charAt ( i ) , CHARS . charAt ( ( i + 1 ) % MAX ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { str [ i ] = uMap . get ( str [ i ] ) ; } return String . valueOf ( str ) ; } public static void main ( String [ ] args ) { String str = \" geeks \" ; int n = str . length ( ) ; System . out . println ( getString ( str . toCharArray ( ) , n ) ) ; } }"],"bleu":0.7068229446740258,"rouge_l":0.7701738334858189}
{"id":1260,"predictions":["import java . util . * ; class GFG { static void printOrder ( int arr [ ] , int n , int k ) { Arrays . sort ( arr , Collections . reverseOrder ( ) ) ; Arrays . sort ( arr ) ; int i = 0 ; for ( i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + \" ▁ \" ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 5 , 4 , 6 , 2 , 1 , 3 , 8 , 9 , - 1 } ; int k = 4 ; int n = arr . length ; printOrder ( arr , n , k ) ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + \" ▁ \" ) ; } }"],"references":["import java . util . * ; public class SortExample { static void printOrder ( Integer [ ] arr , int k ) { int n = arr . length ; Arrays . sort ( arr , 0 , k ) ; Arrays . sort ( arr , k , n , Collections . reverseOrder ( ) ) ; } public static void main ( String [ ] args ) { Integer [ ] arr = { 5 , 4 , 6 , 2 , 1 , 3 , 8 , 9 , - 1 } ; int k = 4 ; printOrder ( arr , k ) ; System . out . printf ( \" % s \" , Arrays . toString ( arr ) ) ; } }"],"bleu":0.5156724706422036,"rouge_l":0.6607481853713009}
{"id":1261,"predictions":["class GFG { static int countSteps ( int n ) { int steps = 0 ; while ( n > 0 ) { largest = ( int ) Math . sqrt ( n ) ; n -= ( largest * largest ) ; steps ++ ; } return steps ; } public static void main ( String [ ] args ) { int n = 85 ; System . out . print ( countSteps ( n ) ) ; } }"],"references":["import java . lang . Math ; public class GfG { static int countSteps ( int n ) { int steps = 0 ; while ( n > 0 ) { int largest = ( int ) Math . sqrt ( n ) ; n -= ( largest * largest ) ; steps ++ ; } return steps ; } public static void main ( String [ ] args ) { int n = 85 ; System . out . println ( countSteps ( n ) ) ; } }"],"bleu":0.8299887198375461,"rouge_l":0.9152896486229821}
{"id":1262,"predictions":["class GFG { static float Area ( float a ) { if ( a < 0 ) return - 1 ; float h = 1.280f * a ; float A = 0.70477f * ( float ) Math . pow ( h , 2 ) ; return A ; } public static void main ( String [ ] args ) { float a = 5 ; System . out . println ( String . format ( \" % .5f \" ) ) ; } }"],"references":["import java . io . * ; class GFG { static float Area ( float a ) { if ( a < 0 ) return - 1 ; float h = ( float ) 1.268 * a ; float A = ( float ) ( 0.70477 * Math . pow ( h , 2 ) ) ; return A ; } public static void main ( String [ ] args ) { float a = 5 ; System . out . println ( Area ( a ) ) ; } }"],"bleu":0.728282810134741,"rouge_l":0.8396577380952382}
{"id":1263,"predictions":["class GFG { static final int SIZE = 26 ; static boolean isVowel ( char ch ) { if ( ch == ' a ' || ch == ' e ' || ch == ' i ' || ch == ' o ' || ch == ' u ' ) return true ; return false ; } static String createAltStr ( String str1 , String str2 , int start , int l ) { String finalStr = \" \" ; int i = 0 , j = start ; while ( j < l ) { finalStr += str1 . charAt ( i ) + str2 . charAt ( j ) ; i ++ ; j ++ ; } return finalStr ; } static String findAltStr ( String str ) { char [ ] char_freq = str . toCharArray ( ) ; int nv = str . length ( ) ; char [ ] str = \" \" , nc = \" ; for ( int i = 0 ; i < len ; i ++ ) { char ch = str . charAt ( i ) ; if ( isVowel ( ch ) ) nv ++ ; else nc ++ ; } if ( Math . abs ( nv - nc ) >= 2 ) return \" no ▁ such ▁ string \" ; for ( int i = 0 ; i < SIZE ; i ++ ) { char ch = str . charAt ( i + 97 ) ; for ( int j = 1 ; j < charAt ( i ) ; j ++ ) { if ( isVowel ( ch ) ) { if ( isVowel ( ch ) ) { vstr += ch ; } else { cstr += ch ; } } } if ( nv > nv ) return \" no ▁ such ▁ string \" ; } return String . valueOf ( str ) + \" ▁ such ▁ string \" ; } public static void main ( String [ ] args ) { String str = \" SIZE \" ; int n = str . length ( ) ; System . out . println ( findAltStr ( str , n ) ) ; } }"],"references":["import java . util . Arrays ; class GFG { static final int SIZE = 26 ; static boolean isVowel ( char ch ) { if ( ch == ' a ' || ch == ' e ' || ch == ' i ' || ch == ' o ' || ch == ' u ' ) { return true ; } return false ; } static String createAltStr ( String str1 , String str2 , int start , int l ) { String finalStr = \" \" ; for ( int i = 0 , j = start ; j < l ; i ++ , j ++ ) { finalStr = ( finalStr + str1 . charAt ( i ) ) + str2 . charAt ( j ) ; } return finalStr ; } static String findAltStr ( String str ) { int char_freq [ ] = new int [ SIZE ] ; Arrays . fill ( char_freq , 0 ) ; int nv = 0 , nc = 0 ; String vstr = \" \" , cstr = \" \" ; int l = str . length ( ) ; for ( int i = 0 ; i < l ; i ++ ) { char ch = str . charAt ( i ) ; if ( isVowel ( ch ) ) { nv ++ ; } else { nc ++ ; } char_freq [ ch - 97 ] ++ ; } if ( Math . abs ( nv - nc ) >= 2 ) { return \" no ▁ such ▁ String \" ; } for ( int i = 0 ; i < SIZE ; i ++ ) { char ch = ( char ) ( i + 97 ) ; for ( int j = 1 ; j <= char_freq [ i ] ; j ++ ) { if ( isVowel ( ch ) ) { vstr += ch ; } else { cstr += ch ; } } } if ( nv > nc ) { return ( vstr . charAt ( 0 ) + createAltStr ( cstr , vstr , 1 , nv ) ) ; } if ( nc > nv ) { return ( cstr . charAt ( 0 ) + createAltStr ( vstr , cstr , 1 , nc ) ) ; } if ( cstr . charAt ( 0 ) < vstr . charAt ( 0 ) ) { return createAltStr ( cstr , vstr , 0 , nv ) ; } return createAltStr ( vstr , cstr , 0 , nc ) ; } public static void main ( String [ ] args ) { String str = \" aeroplane \" ; System . out . println ( findAltStr ( str ) ) ; } }"],"bleu":0.5836044149931275,"rouge_l":0.71084199702959}
{"id":1264,"predictions":["class GFG { static int minOperation ( int arr [ ] [ ] ) { int ans = 0 ; for ( int i = N - 1 ; i >= 0 ; i -- ) { for ( int j = M - 1 ; j >= 0 ; j -- ) { if ( arr [ i ] [ j ] == 0 ) { ans ++ ; for ( int k = 0 ; k <= i ; k ++ ) { if ( arr [ k ] [ h ] == 1 ) ans ++ ; for ( int k = 0 ; k <= i ; k ++ ) { if ( arr [ k ] [ h ] == 1 ) arr [ k ] [ h ] = 0 ; else arr [ k ] [ h ] = 1 ; } } } } return ans ; } public static void main ( String [ ] args ) { int mat [ ] [ ] = { { 0 , 0 , 1 , 1 , 1 } , { 0 , 0 , 0 , 1 } , { 1 , 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ; int M = 5 , N = 5 ; System . out . print ( minOperation ( mat ) ) ; } }"],"references":["class GFG { static final int N = 5 ; static final int M = 5 ; static int minOperation ( boolean arr [ ] [ ] ) { int ans = 0 ; for ( int i = N - 1 ; i >= 0 ; i -- ) { for ( int j = M - 1 ; j >= 0 ; j -- ) { if ( arr [ i ] [ j ] == false ) { ans ++ ; for ( int k = 0 ; k <= i ; k ++ ) { for ( int h = 0 ; h <= j ; h ++ ) { if ( arr [ k ] [ h ] == true ) { arr [ k ] [ h ] = false ; } else { arr [ k ] [ h ] = true ; } } } } } } return ans ; } public static void main ( String [ ] args ) { boolean mat [ ] [ ] = { { false , false , true , true , true } , { false , false , false , true , true } , { false , false , false , true , true } , { true , true , true , true , true } , { true , true , true , true , true } } ; System . out . println ( minOperation ( mat ) ) ; } }"],"bleu":0.6147036737021132,"rouge_l":0.7600369173973234}
{"id":1265,"predictions":["import java . io . * ; class GFG { static void decToOctal ( int n ) { int octalNum [ ] = new int [ 100 ] ; int i = 0 ; while ( n != 0 ) { octalNum [ i ] = n % 8 ; n \/= 8 ; i ++ ; } for ( int j = i - 1 ; j >= 0 ; j -- ) System . out . print ( octalNum [ j ] ) ; } public static void main ( String [ ] args ) { int n = 33 ; decToOctal ( n ) ; } }"],"references":["import java . io . * ; class GFG { static void decToOctal ( int n ) { int [ ] octalNum = new int [ 100 ] ; int i = 0 ; while ( n != 0 ) { octalNum [ i ] = n % 8 ; n = n \/ 8 ; i ++ ; } for ( int j = i - 1 ; j >= 0 ; j -- ) System . out . print ( octalNum [ j ] ) ; } public static void main ( String [ ] args ) { int n = 33 ; decToOctal ( n ) ; } }"],"bleu":0.9273520060604691,"rouge_l":0.9713948687702743}
{"id":1266,"predictions":["class GFG { static boolean isPrime ( int n ) { if ( n <= 1 ) return false ; if ( n <= 3 ) return true ; if ( n % 2 == 0 || n % 3 == 0 ) return false ; for ( int i = 5 ; i * i <= n ; i = i + 6 ) { if ( n % i == 0 || n % ( i + 2 ) == 0 ) { return false ; } } return true ; } static boolean isFactorialPrime ( int n ) { if ( ! isPrime ( n ) ) return false ; int fact = 1 ; for ( int i = 1 ; fact <= n + 1 ; i ++ ) { fact = fact * i ; if ( n + 1 == fact || n - 1 == fact ) return true ; } return false ; } public static void main ( String [ ] args ) { int n = 23 ; if ( isFactorialPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static boolean isPrime ( long n ) { if ( n <= 1 ) return false ; if ( n <= 3 ) return true ; if ( n % 2 == 0 || n % 3 == 0 ) return false ; for ( int i = 5 ; i * i <= n ; i = i + 6 ) if ( n % i == 0 || n % ( i + 2 ) == 0 ) return false ; return true ; } static boolean isFactorialPrime ( long n ) { if ( ! isPrime ( n ) ) return false ; long fact = 1 ; int i = 1 ; while ( fact <= n + 1 ) { fact = fact * i ; if ( n + 1 == fact || n - 1 == fact ) return true ; i ++ ; } return false ; } public static void main ( String args [ ] ) { int n = 23 ; if ( isFactorialPrime ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.8649444844664521,"rouge_l":0.9490060501296457}
{"id":1267,"predictions":["class GFG { static int conver ( int m , int n ) { if ( m == n ) return 0 ; if ( m > n ) return m - n ; if ( m > 0 && n > 0 ) return - 1 ; if ( n % 2 == 1 ) return 1 + conver ( m , n \/ 2 ) ; else return 1 + conver ( m , n \/ 2 ) ; } public static void main ( String [ ] args ) { int m = 3 , n = 11 ; System . out . println ( \" Minimum ▁ number ▁ of ▁ operations ▁ : ▁ \" + conver ( m , n ) ) ; } }"],"references":["class ConvertNum { static int convert ( int m , int n ) { if ( m == n ) return 0 ; if ( m > n ) return m - n ; if ( m <= 0 && n > 0 ) return - 1 ; if ( n % 2 == 1 ) return 1 + convert ( m , n + 1 ) ; else return 1 + convert ( m , n \/ 2 ) ; } public static void main ( String [ ] args ) { int m = 3 , n = 11 ; System . out . println ( \" Minimum ▁ number ▁ of ▁ \" + \" operations ▁ : ▁ \" + convert ( m , n ) ) ; } }"],"bleu":0.8303178548347881,"rouge_l":0.9264106679837016}
{"id":1268,"predictions":["class GFG { static int MAX = 100000 ; static void sieve ( ) { for ( int i = 0 ; i < MAX ; i ++ ) { prime [ i ] = true ; } for ( int p = 2 ; p * p < MAX ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i < MAX ; i += p ) prime [ i ] = false ; } } } static void printPrimeQuad ( int n ) { for ( int i = 0 ; i < n - 7 ; i ++ ) { if ( prime [ i ] && prime [ i + 2 ] && prime [ i + 6 ] && prime [ i + 8 ] ) { System . out . print ( i + \" ▁ \" + ( i + 2 ) ) ; } } } public static void main ( String [ ] args ) { sieve ( ) ; int n = 20 ; printPrimeQuad ( 20 ) ; } }"],"references":["import java . util . Arrays ; import java . util . Collections ; class GFG { static final int MAX = 1000000 ; static boolean [ ] prime = new boolean [ MAX ] ; public static void sieve ( ) { Arrays . fill ( prime , true ) ; for ( int p = 2 ; p * p < MAX ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i < MAX ; i += p ) prime [ i ] = false ; } } } static void printPrimeQuad ( int n ) { for ( int i = 0 ; i < n - 7 ; i ++ ) { if ( prime [ i ] && prime [ i + 2 ] && prime [ i + 6 ] && prime [ i + 8 ] ) { System . out . println ( i + \" ▁ \" + ( i + 2 ) + \" ▁ \" + ( i + 6 ) + \" ▁ \" + ( i + 8 ) ) ; } } } public static void main ( String [ ] args ) { int n = 20 ; sieve ( ) ; printPrimeQuad ( n ) ; } }"],"bleu":0.6845496775219215,"rouge_l":0.7858068450339203}
{"id":1269,"predictions":["class GFG { static void Sum ( int [ ] [ ] mat , int r , int c ) { int i = 0 , j = 0 ; int upper_sum = 0 , lower_sum = 0 ; for ( i = 0 ; i < r ; i ++ ) { for ( j = 0 ; j < c ; j ++ ) { if ( i <= j ) upper_sum += mat [ i ] [ j ] ; } } System . out . println ( \" Upper ▁ sum ▁ is ▁ \" + upper_sum ) ; for ( i = 0 ; i < r ; i ++ ) { for ( int j = 0 ; j < c ; j ++ ) { if ( j <= i ) lower_sum += mat [ i ] [ j ] ; } } System . out . println ( \" Lower ▁ sum ▁ is ▁ \" + lower_sum ) ; } public static void main ( String [ ] args ) { int r = 3 , c = 3 ; int [ ] [ ] mat = { 6 , 5 , 4 } , { 1 , 9 , 7 } } ; Sum ( mat , r , c ) ; } }"],"references":["class GFG { static void sum ( int mat [ ] [ ] , int r , int c ) { int i , j ; int upper_sum = 0 ; int lower_sum = 0 ; for ( i = 0 ; i < r ; i ++ ) for ( j = 0 ; j < c ; j ++ ) { if ( i <= j ) { upper_sum += mat [ i ] [ j ] ; } } System . out . println ( \" Upper ▁ sum ▁ is ▁ \" + upper_sum ) ; for ( i = 0 ; i < r ; i ++ ) for ( j = 0 ; j < c ; j ++ ) { if ( j <= i ) { lower_sum += mat [ i ] [ j ] ; } } System . out . print ( \" Lower ▁ sum ▁ is ▁ \" + lower_sum ) ; } public static void main ( String [ ] args ) { int r = 3 ; int c = 3 ; int mat [ ] [ ] = { { 6 , 5 , 4 } , { 1 , 2 , 5 } , { 7 , 9 , 7 } } ; sum ( mat , r , c ) ; } }"],"bleu":0.8147520917935706,"rouge_l":0.9229106628242075}
{"id":1270,"predictions":["class GFG { static void printArray ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( arr [ i ] + \" ▁ \" ) ; } } static void removeMin ( int arr [ ] , int n ) { int minVal = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) minVal = Math . min ( minVal , arr [ i ] ) ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = arr [ i ] - minVal ; } static void removeFromMax ( int arr [ ] , int n ) { int maxVal = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) maxVal = Math . max ( maxVal , arr [ i ] ) ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = maxVal - arr [ i ] ; } static void modifyArray ( int arr [ ] , int n , int k ) { if ( k % 2 == 0 ) removeMin ( arr , n ) ; else removeFromMax ( arr , n ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 4 , 8 , 12 , 16 } ; int n = arr . length ; int k = 2 ; modifyArray ( arr , n , k ) ; } }"],"references":["class GFG { static void printArray ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + \" ▁ \" ) ; } static void removeMin ( int arr [ ] , int n ) { int i , minVal = arr [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) minVal = Math . min ( minVal , arr [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) arr [ i ] = arr [ i ] - minVal ; } static void removeFromMax ( int arr [ ] , int n ) { int i , maxVal = arr [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) maxVal = Math . max ( maxVal , arr [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) arr [ i ] = maxVal - arr [ i ] ; } static void modifyArray ( int arr [ ] , int n , int k ) { if ( k % 2 == 0 ) removeMin ( arr , n ) ; else removeFromMax ( arr , n ) ; printArray ( arr , n ) ; } public static void main ( String args [ ] ) { int arr [ ] = { 4 , 8 , 12 , 16 } ; int n = arr . length ; int k = 2 ; modifyArray ( arr , n , k ) ; } }"],"bleu":0.9132178414894607,"rouge_l":0.9660324566312253}
{"id":1271,"predictions":["import java . io . * ; class GFG { static int LongestSubarray ( int [ ] a , int n , int k ) { int pre [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] > k ) pre [ i ] = 1 ; else pre [ i ] = - 1 ; } for ( int i = 1 ; i < n ; i ++ ) pre [ i ] = pre [ i - 1 ] + pre [ i ] ; int len = 0 , lo = n ; while ( lo <= hi ) { int mid = ( lo + hi ) \/ 2 ; boolean ok = false ; for ( int i = mid - 1 ; i < n ; i ++ ) { int x = pre [ i ] ; if ( i - mid >= 0 ) { ok = true ; break ; } if ( x > 0 ) { ok = true ; break ; } } if ( ok == true ) { len = mid ; lo = mid + 1 ; } else hi = mid - 1 ; } return len ; } public static void main ( String [ ] args ) { int [ ] a = { 2 , 3 , 4 , 5 , 3 , 7 } ; int k = 3 ; int n = a . length ; System . out . println ( LongestSubarray ( a , n , k ) ) ; } }"],"references":["class GFG { static int LongestSubarray ( int a [ ] , int n , int k ) { int [ ] pre = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] > k ) pre [ i ] = 1 ; else pre [ i ] = - 1 ; } for ( int i = 1 ; i < n ; i ++ ) pre [ i ] = pre [ i - 1 ] + pre [ i ] ; int len = 0 ; int lo = 1 , hi = n ; while ( lo <= hi ) { int mid = ( lo + hi ) \/ 2 ; boolean ok = false ; for ( int i = mid - 1 ; i < n ; i ++ ) { int x = pre [ i ] ; if ( i - mid >= 0 ) x -= pre [ i - mid ] ; if ( x > 0 ) { ok = true ; break ; } } if ( ok == true ) { len = mid ; lo = mid + 1 ; } else hi = mid - 1 ; } return len ; } public static void main ( String [ ] args ) { int a [ ] = { 2 , 3 , 4 , 5 , 3 , 7 } ; int k = 3 ; int n = a . length ; System . out . println ( LongestSubarray ( a , n , k ) ) ; } }"],"bleu":0.9049171005253733,"rouge_l":0.9392135538893022}
{"id":1272,"predictions":["import java . io . * ; class GFG { static int findSum ( int N ) { int ans = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { for ( int j = 1 ; j <= N ; j ++ ) ans += i \/ j ; } return ans ; } static public void main ( String [ ] args ) { int N = 2 ; System . out . println ( findSum ( N ) ) ; } }"],"references":["import java . io . * ; class GFG { static int findSum ( int n ) { int ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= n ; j ++ ) ans += ( i \/ j ) ; return ans ; } public static void main ( String [ ] args ) { int N = 2 ; System . out . println ( findSum ( N ) ) ; } }"],"bleu":0.8010019608868744,"rouge_l":0.9354838709677419}
{"id":1273,"predictions":["import java . util . * ; class GFG { static boolean permutation ( int arr [ ] , int n ) { Set < Integer > s = new HashSet < > ( ) ; int maxEle = 0 ; for ( int i = 0 ; i < n ; ++ i ) { s . add ( arr [ i ] ) ; maxEle = Math . max ( maxEle , arr [ i ] ) ; } if ( maxEle != n ) return true ; if ( s . size ( ) == n ) return true ; return false ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 5 , 3 , 2 } ; int n = arr . length ; if ( permutation ( arr , n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; class GFG { static boolean permutation ( int [ ] arr , int n ) { Set < Integer > hash = new HashSet < Integer > ( ) ; int maxEle = 0 ; for ( int i = 0 ; i < n ; i ++ ) { hash . add ( arr [ i ] ) ; maxEle = Math . max ( maxEle , arr [ i ] ) ; } if ( maxEle != n ) return false ; if ( hash . size ( ) == n ) return true ; return false ; } public static void main ( String args [ ] ) { int arr [ ] = { 1 , 2 , 5 , 3 , 2 } ; int n = arr . length ; if ( permutation ( arr , n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.8710095990119149,"rouge_l":0.9570181953212032}
{"id":1274,"predictions":["import java . io . * ; class GFG { static int N = 5 ; static void printHosoya ( int n ) { int [ ] [ ] dp = new int [ N ] [ N ] ; dp [ 0 ] [ 0 ] = dp [ 1 ] [ 0 ] ; dp [ 0 ] [ 1 ] = dp [ 1 ] [ 0 ] ; for ( int i = 2 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( i > j ) dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + dp [ i - 2 ] [ j ] ; else dp [ i ] [ j ] = ( dp [ i - 1 ] [ j - 2 ] + dp [ i - 2 ] [ j - 2 ] ) ; } } for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j <= i ; j ++ ) System . out . print ( dp [ i ] [ j ] + \" ▁ \" ) ; System . out . println ( ) ; } public static void main ( String [ ] args ) { int n = 5 ; printHosoya ( n ) ; } }"],"references":["import java . util . * ; class GFG { static int N = 5 ; static void printHosoya ( int n ) { int dp [ ] [ ] = new int [ N ] [ N ] ; dp [ 0 ] [ 0 ] = dp [ 1 ] [ 0 ] = 1 ; dp [ 1 ] [ 1 ] = 1 ; for ( int i = 2 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( i > j ) dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + dp [ i - 2 ] [ j ] ; else dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ] + dp [ i - 2 ] [ j - 2 ] ; } } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j <= i ; j ++ ) System . out . print ( dp [ i ] [ j ] + \" ▁ \" ) ; System . out . println ( \" \" ) ; } } public static void main ( String [ ] args ) { int n = 5 ; printHosoya ( n ) ; } }"],"bleu":0.8939878141625683,"rouge_l":0.9568627450980393}
{"id":1275,"predictions":["import java . util . * ; class GFG { static int pairs_count ( int arr [ ] , int n , int sum ) { int ans = 0 ; Arrays . sort ( arr ) ; int i , j ; for ( i = 0 ; i < j ; i ++ ) { if ( arr [ i ] + arr [ j ] < sum ) { i += 1 ; } else if ( arr [ i ] + arr [ j ] > sum ) j -- ; else { int x = arr [ i ] ; int y = j ; while ( i < j && arr [ i ] == x ) i ++ ; y = j ; while ( j >= i && arr [ j ] == y ) j -- ; if ( x == y ) { int temp = i - xx + y - 1 ; ans += ( temp * ( temp + 1 ) ) \/ 2 ; } else ans += ( i - xx ) * ( y + 1 ) ; } } return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 5 , 7 , 5 , - 1 } ; int sum = 6 ; int n = arr . length ; int sum = 6 ; System . out . print ( pairs_count ( arr , n , sum ) ) ; } }"],"references":["import java . util . Arrays ; import java . io . * ; class GFG { static int pairs_count ( int arr [ ] , int n , int sum ) { int ans = 0 ; Arrays . sort ( arr ) ; int i = 0 , j = n - 1 ; while ( i < j ) { if ( arr [ i ] + arr [ j ] < sum ) i ++ ; else if ( arr [ i ] + arr [ j ] > sum ) j -- ; else { int x = arr [ i ] , xx = i ; while ( ( i < j ) && ( arr [ i ] == x ) ) i ++ ; int y = arr [ j ] , yy = j ; while ( ( j >= i ) && ( arr [ j ] == y ) ) j -- ; if ( x == y ) { int temp = i - xx + yy - j - 1 ; ans += ( temp * ( temp + 1 ) ) \/ 2 ; } else ans += ( i - xx ) * ( yy - j ) ; } } return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 5 , 7 , 5 , - 1 } ; int n = arr . length ; int sum = 6 ; System . out . println ( pairs_count ( arr , n , sum ) ) ; } }"],"bleu":0.7747705761183815,"rouge_l":0.8722662821437154}
{"id":1276,"predictions":["import java . util . * ; class GFG { static int MAX = 100005 ; static TreeSet < Integer > fibonacci = new TreeSet < > ( ) ; static void createHash ( ) { int prev = 0 , curr = 1 ; fib . add ( prev ) ; fibonacci . add ( curr ) ; fibonacci . add ( curr ) ; while ( curr <= MAX ) { int temp = curr + prev ; if ( temp <= MAX ) { fibonacci . add ( temp ) ; } prev = curr ; curr = temp ; } } static boolean checkArray ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( fibonacci . contains ( arr [ i ] ) ) { sum += arr [ i ] ; } } if ( fibonacci ( sum ) != 0 ) { return true ; } return false ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 4 , 8 , 2 } ; int n = arr . length ; createHash ( arr , n ) ; if ( checkArray ( arr , n ) ) { System . out . println ( \" Yes \" ) ; } else { System . out . println ( \" No \" ) ; } } }"],"references":["import java . util . * ; class GFG { static final int MAX = 100005 ; static HashSet < Integer > fibonacci = new HashSet < Integer > ( ) ; static void createHash ( ) { int prev = 0 , curr = 1 ; fibonacci . add ( prev ) ; fibonacci . add ( curr ) ; while ( curr <= MAX ) { int temp = curr + prev ; fibonacci . add ( temp ) ; prev = curr ; curr = temp ; } } static boolean checkArray ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) if ( fibonacci . contains ( arr [ i ] ) ) sum += arr [ i ] ; if ( fibonacci . contains ( sum ) ) return true ; return false ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 4 , 8 , 2 } ; int n = arr . length ; createHash ( ) ; if ( checkArray ( arr , n ) ) System . out . print ( \" Yes \" ) ; else System . out . print ( \" No \" ) ; } }"],"bleu":0.7616087302401595,"rouge_l":0.9189974327793542}
{"id":1277,"predictions":["class GFG { static void makearrayequal ( int arr [ ] , int n ) { int x = 0 ; for ( int i = 0 ; i < n ; i ++ ) x += arr [ i ] & 1 ; System . out . println ( Math . min ( x , n - x ) ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 4 , 3 , 2 , 1 } ; int n = arr . length ; makearray ( arr , n ) ; } }"],"references":["class GFG { static void makearrayequal ( int arr [ ] , int n ) { int x = 0 ; for ( int i = 0 ; i < n ; i ++ ) { x += ( arr [ i ] & 1 ) ; } System . out . println ( Math . min ( x , n - x ) ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 4 , 3 , 2 , 1 } ; int n = arr . length ; makearrayequal ( arr , n ) ; } }"],"bleu":0.892098338269131,"rouge_l":0.9686975110703923}
{"id":1278,"predictions":["import java . util . * ; class GFG { static int countRotations ( int arr [ ] , int n ) { int min = arr [ 0 ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( min > arr [ i ] ) { min = arr [ i ] ; min_index = i ; } } return min_index ; } public static void main ( String [ ] args ) { int arr [ ] = { 15 , 18 , 2 , 3 , 6 , 12 } ; int n = arr . length ; System . out . println ( countRotations ( arr , n ) ) ; } }"],"references":["import java . util . * ; import java . lang . * ; import java . io . * ; class LinearSearch { static int countRotations ( int arr [ ] , int n ) { int min = arr [ 0 ] , min_index = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( min > arr [ i ] ) { min = arr [ i ] ; min_index = i ; } } return min_index ; } public static void main ( String [ ] args ) { int arr [ ] = { 15 , 18 , 2 , 3 , 6 , 12 } ; int n = arr . length ; System . out . println ( countRotations ( arr , n ) ) ; } }"],"bleu":0.8323296190319768,"rouge_l":0.9109916367980884}
{"id":1279,"predictions":["class GFG { static boolean check ( int s ) { int freq [ ] = new int [ 10 ] ; while ( s != 0 ) { int r = s % 10 ; s = s \/ 10 ; freq [ r ] ++ ; } int xor = 0 ; for ( int i = 0 ; i < 10 ; i ++ ) { xor = xor ^ freq [ i ] ; } if ( xor == 0 ) return true ; else return false ; } public static void main ( String [ ] args ) { int s = 122233 ; if ( check ( s ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static boolean check ( int s ) { int [ ] freq = new int [ 10 ] ; int r , i ; for ( i = 0 ; i < 10 ; i ++ ) { freq [ i ] = 0 ; } while ( s != 0 ) { r = s % 10 ; s = ( int ) ( s \/ 10 ) ; freq [ r ] += 1 ; } int xor__ = 0 ; for ( i = 0 ; i < 10 ; i ++ ) { xor__ = xor__ ^ freq [ i ] ; if ( xor__ == 0 ) return true ; else return false ; } return true ; } public static void main ( String [ ] args ) { int s = 122233 ; if ( check ( s ) ) System . out . println ( \" Yes \\n \" ) ; else System . out . println ( \" No \\n \" ) ; } }"],"bleu":0.6125908274805075,"rouge_l":0.8135798726886935}
{"id":1280,"predictions":["class GFG { static int count ( int n ) { int count = 0 ; int p = 1 ; while ( p <= n ) { count ++ ; p *= 2 ; } return count ; } public static void main ( String args [ ] ) { int n = 7 ; System . out . print ( count ( n ) ) ; } }"],"references":["class GFG { static int count ( int n ) { int cnt = 0 ; int p = 1 ; while ( p <= n ) { cnt ++ ; p *= 2 ; } return cnt ; } public static void main ( String args [ ] ) { int n = 7 ; System . out . print ( count ( n ) ) ; } }"],"bleu":0.8898738464694418,"rouge_l":0.9571428571428572}
{"id":1281,"predictions":["class GFG { static void powerSet ( String str , int index , String curr ) { int n = str . length ( ) ; if ( index == n ) { return ; } System . out . println ( curr ) ; for ( int i = index + 1 ; i < n ; i ++ ) { curr += str . charAt ( i ) ; powerSet . add ( str . charAt ( i ) - 1 ) ; curr = curr . replace ( str . length ( ) - 1 , \" \" ) ; } return ; } public static void main ( String [ ] args ) { String str = \" abc \" ; powerSet ( str , - 1 , \" \" \" ) ; powerSet ( str , - 1 , \" \" ) ; } }"],"references":["import java . util . * ; class GFG { static void powerSet ( String str , int index , String curr ) { int n = str . length ( ) ; if ( index == n ) { return ; } System . out . println ( curr ) ; for ( int i = index + 1 ; i < n ; i ++ ) { curr += str . charAt ( i ) ; powerSet ( str , i , curr ) ; curr = curr . substring ( 0 , curr . length ( ) - 1 ) ; } } public static void main ( String [ ] args ) { String str = \" abc \" ; int index = - 1 ; String curr = \" \" ; powerSet ( str , index , curr ) ; } }"],"bleu":0.7573550380879829,"rouge_l":0.8365405883654059}
{"id":1282,"predictions":["import java . util . * ; class GFG { static int findMinimumX ( int a [ ] , int n ) { Set < Integer > st = new HashSet < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { st . add ( a [ i ] ) ; } if ( st . size ( ) == 1 ) return 0 ; if ( st . size ( ) == 2 ) { st . clear ( ) ; int el1 = st . get ( 0 ) ; int el2 = st . get ( 1 ) ; if ( ( ( el - el1 ) % 2 == 0 ) return ( el2 - el1 ) \/ 2 ) ; else return ( el2 - el1 ) ; } if ( st . size ( ) == 3 ) { int [ ] st1 = new int [ 0 ] ; int el1 = st . get ( 0 ) ; int el1 = st . get ( 0 ) ; int el1 = st . get ( 1 ) ; int el2 = st . get ( 2 ) ; if ( ( ( sa2 - 1 ) == ( el2 - 1 ) ) return el2 - 1 ; else return - 1 ; } return - 1 ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 4 , 4 , 7 , 4 , 1 } ; int n = a . length ; System . out . print ( findMinimumX ( a , n ) ) ; } }"],"references":["import java . util . HashSet ; import java . util . Iterator ; import java . util . Set ; class GFG { static int findMinimumX ( int a [ ] , int n ) { Set < Integer > st = new HashSet < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) st . add ( a [ i ] ) ; if ( st . size ( ) == 1 ) return 0 ; if ( st . size ( ) == 2 ) { Iterator < Integer > it = st . iterator ( ) ; int el1 = it . next ( ) ; int el2 = it . next ( ) ; if ( ( el2 - el1 ) % 2 == 0 ) return ( el2 - el1 ) \/ 2 ; else return ( el2 - el1 ) ; } if ( st . size ( ) == 3 ) { Iterator < Integer > it = st . iterator ( ) ; int el1 = it . next ( ) ; int el2 = it . next ( ) ; int el3 = it . next ( ) ; if ( ( el2 - el1 ) == ( el3 - el2 ) ) return el2 - el1 ; else return - 1 ; } return - 1 ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 4 , 4 , 7 , 4 , 1 } ; int n = a . length ; System . out . println ( findMinimumX ( a , n ) ) ; } }"],"bleu":0.7158650444507973,"rouge_l":0.839670540449058}
{"id":1283,"predictions":["import java . util . * ; class GFG { static void printFirstNegativeInteger ( int arr [ ] , int n , int k ) { for ( int i = 0 ; i < ( n - k + 1 ) ; i ++ ) { boolean flag = false ; for ( int j = 0 ; j < k ; j ++ ) { if ( arr [ i + j ] < 0 ) { System . out . print ( arr [ i + j ] + \" ▁ \" ) ; flag = true ; break ; } } if ( ! flag ) System . out . print ( \"0\" ) ; } } public static void main ( String [ ] args ) { int arr [ ] = { 12 , - 1 , - 7 , 8 , - 15 , 16 , 28 } ; int n = arr . length ; int k = 3 ; printFirstNegativeInteger ( arr , n , k ) ; } }"],"references":["import java . util . * ; class solution { static void printFirstNegativeInteger ( int arr [ ] , int n , int k ) { boolean flag ; for ( int i = 0 ; i < ( n - k + 1 ) ; i ++ ) { flag = false ; for ( int j = 0 ; j < k ; j ++ ) { if ( arr [ i + j ] < 0 ) { System . out . print ( ( arr [ i + j ] ) + \" ▁ \" ) ; flag = true ; break ; } } if ( ! flag ) System . out . print ( \"0\" + \" ▁ \" ) ; } } public static void main ( String args [ ] ) { int arr [ ] = { 12 , - 1 , - 7 , 8 , - 15 , 30 , 16 , 28 } ; int n = arr . length ; int k = 3 ; printFirstNegativeInteger ( arr , n , k ) ; } }"],"bleu":0.8750261427421631,"rouge_l":0.9518574341696959}
{"id":1284,"predictions":["class GFG { static void printArray ( int arr [ ] , int size ) { for ( int i = 0 ; i < size ; i ++ ) { System . out . print ( arr [ i ] + \" ▁ \" ) ; } System . out . println ( ) ; return ; } static void printSequencesRecur ( int arr [ ] , int n , int k , int index ) { if ( k == 0 ) { printArray ( arr , index ) ; } if ( k > 0 ) { for ( int i = 1 ; i <= n ; i ++ ) { printSequencesRecur ( arr , i , n , k - 1 , index + 1 ) ; } } } static void printSequences ( int n , int k ) { int [ ] arr = new int [ n ] ; printSequencesRecur ( arr , n , k , 0 ) ; return ; } static void printSequences ( int n , int k ) { int [ ] arr = new int [ n ] ; printSequencesRecur ( arr , n , k , 0 ) ; } public static void main ( String [ ] args ) { int n = 3 , k = 2 ; printSequences ( n , k ) ; } }"],"references":["class GfG { static void printArray ( int arr [ ] , int size ) { for ( int i = 0 ; i < size ; i ++ ) System . out . print ( arr [ i ] + \" ▁ \" ) ; System . out . println ( ) ; return ; } static void printSequencesRecur ( int arr [ ] , int n , int k , int index ) { int i ; if ( k == 0 ) { printArray ( arr , index ) ; } if ( k > 0 ) { for ( i = 1 ; i <= n ; ++ i ) { arr [ index ] = i ; printSequencesRecur ( arr , n , k - 1 , index + 1 ) ; } } } static void printSequences ( int n , int k ) { int arr [ ] = new int [ k ] ; printSequencesRecur ( arr , n , k , 0 ) ; return ; } public static void main ( String [ ] args ) { int n = 3 ; int k = 2 ; printSequences ( n , k ) ; } }"],"bleu":0.7590072040221163,"rouge_l":0.873661993064978}
{"id":1285,"predictions":["class GFG { static int no_of_chars = 256 ; static String findSubString ( String str , String pat ) { int len1 = str . length ( ) ; int len2 = pat . length ( ) ; if ( len1 < len2 ) { System . out . println ( \" No ▁ such ▁ window ▁ exists \" ) ; return \" \" ; } int [ ] hash_sub = new int [ no_of_CHARS ] ; int [ ] hash = new int [ no_of_CHARS ] ; for ( int i = 0 ; i < len ; i ++ ) { hash_pat [ pat . charAt ( i ) ] ++ ; } int start = 0 , start_index = - 1 ; int count = 0 ; for ( int j = 0 ; j < len1 ; j ++ ) { hash_str [ str . charAt ( j ) ] ++ ; if ( hash_pat [ str . charAt ( j ) ] != 0 && hash_str [ str . charAt ( j ) ] <= hash_arr [ str . charAt ( j ) ] ) count ++ ; if ( count == len2 ) { while ( hash_str [ str . charAt ( j ) ] > hash_sub [ str . charAt ( int ) str . charAt ( j ) ] ) { if ( hash_str [ str . charAt ( start ) ] > hash_ref [ str . charAt ( start ) ] ) count_str [ str . charAt ( start ) ] ) count ++ ; start_len ++ ; } } int len_window = j - start + 1 ; if ( start_len > len_window ) { while ( hash_str . charAt ( start ) > hash_str . charAt ( start ) ) { hash_str [ str . charAt ( start ) ] -- ; hash_str [ str . charAt ( start_index ) ] -- ; start_index = start ; } } if ( start_len == - 1 ) { System . out . println ( \" No ▁ such ▁ window ▁ exists \" ) ; } return \" \" ; } public static void main ( String [ ] args ) { String str = \" no_of_chars ( str . length , str . length ) ; } }"],"references":["public class GFG { static final int no_of_chars = 256 ; static String findSubString ( String str , String pat ) { int len1 = str . length ( ) ; int len2 = pat . length ( ) ; if ( len1 < len2 ) { System . out . println ( \" No ▁ such ▁ window ▁ exists \" ) ; return \" \" ; } int hash_pat [ ] = new int [ no_of_chars ] ; int hash_str [ ] = new int [ no_of_chars ] ; for ( int i = 0 ; i < len2 ; i ++ ) hash_pat [ pat . charAt ( i ) ] ++ ; int start = 0 , start_index = - 1 , min_len = Integer . MAX_VALUE ; int count = 0 ; for ( int j = 0 ; j < len1 ; j ++ ) { hash_str [ str . charAt ( j ) ] ++ ; if ( hash_pat [ str . charAt ( j ) ] != 0 && hash_str [ str . charAt ( j ) ] <= hash_pat [ str . charAt ( j ) ] ) count ++ ; if ( count == len2 ) { while ( hash_str [ str . charAt ( start ) ] > hash_pat [ str . charAt ( start ) ] || hash_pat [ str . charAt ( start ) ] == 0 ) { if ( hash_str [ str . charAt ( start ) ] > hash_pat [ str . charAt ( start ) ] ) hash_str [ str . charAt ( start ) ] -- ; start ++ ; } int len_window = j - start + 1 ; if ( min_len > len_window ) { min_len = len_window ; start_index = start ; } } } if ( start_index == - 1 ) { System . out . println ( \" No ▁ such ▁ window ▁ exists \" ) ; return \" \" ; } return str . substring ( start_index , start_index + min_len ) ; } public static void main ( String [ ] args ) { String str = \" this ▁ is ▁ a ▁ test ▁ string \" ; String pat = \" tist \" ; System . out . print ( \" Smallest ▁ window ▁ is ▁ : \\n ▁ \" + findSubString ( str , pat ) ) ; } }"],"bleu":0.7230161173612175,"rouge_l":0.8063647490820074}
{"id":1286,"predictions":["class ProductArray { void productArray ( int arr [ ] , int n ) { if ( n == 1 ) { System . out . println ( 0 ) ; return ; } int i = 1 , temp = 1 ; int prod [ ] = new int [ n ] ; for ( i = 0 ; i < n ; i ++ ) prod *= arr [ i ] ; for ( i = n - 1 ; i >= 0 ; i -- ) prod [ i ] *= temp ; for ( i = 0 ; i < n ; i ++ ) System . out . print ( prod [ i ] + \" ▁ \" ) ; return ; } public static void main ( String [ ] args ) { ProductArray pa = new ProductArray ( ) ; int arr [ ] = { 10 , 3 , 5 , 6 , 2 } ; int n = arr . length ; System . out . println ( \" The ▁ product ▁ array ▁ is : ▁ n \" ) ; productArray ( arr , n ) ; } }"],"references":["class ProductArray { void productArray ( int arr [ ] , int n ) { if ( n == 1 ) { System . out . print ( \"0\" ) ; return ; } int i , temp = 1 ; int prod [ ] = new int [ n ] ; for ( int j = 0 ; j < n ; j ++ ) prod [ j ] = 1 ; for ( i = 0 ; i < n ; i ++ ) { prod [ i ] = temp ; temp *= arr [ i ] ; } temp = 1 ; for ( i = n - 1 ; i >= 0 ; i -- ) { prod [ i ] *= temp ; temp *= arr [ i ] ; } for ( i = 0 ; i < n ; i ++ ) System . out . print ( prod [ i ] + \" ▁ \" ) ; return ; } public static void main ( String [ ] args ) { ProductArray pa = new ProductArray ( ) ; int arr [ ] = { 10 , 3 , 5 , 6 , 2 } ; int n = arr . length ; System . out . println ( \" The ▁ product ▁ array ▁ is ▁ : ▁ \" ) ; pa . productArray ( arr , n ) ; } }"],"bleu":0.7381074524165048,"rouge_l":0.8652167588012802}
{"id":1287,"predictions":["import java . util . * ; class GFG { static int NoofTriplets ( int N , int K ) { int [ ] cnt = new int [ K ] ; Arrays . fill ( cnt , 0 ) ; for ( int i = 1 ; i <= N ; ++ i ) { cnt [ i % K ] ++ ; } if ( ( K & 1 ) == 1 ) { int rslt [ ] * cnt [ 0 ] * cnt [ 0 ] ; return rslt ; } else { rsnt [ 0 ] * cnt [ 0 ] + cnt [ K \/ 2 ] * cnt [ K \/ 2 ] ; return rslt ; } } public static void main ( String [ ] args ) { int N = 3 , K = 2 ; System . out . println ( NoofTriplets ( N , K ) ) ; } }"],"references":["import java . util . Arrays ; class GFG { static int NoofTriplets ( int N , int K ) { int [ ] cnt = new int [ K ] ; Arrays . fill ( cnt , 0 , cnt . length , 0 ) ; for ( int i = 1 ; i <= N ; i += 1 ) { cnt [ i % K ] += 1 ; } if ( ( K & 1 ) != 0 ) { return cnt [ 0 ] * cnt [ 0 ] * cnt [ 0 ] ; } else { return ( cnt [ 0 ] * cnt [ 0 ] * cnt [ 0 ] + cnt [ K \/ 2 ] * cnt [ K \/ 2 ] * cnt [ K \/ 2 ] ) ; } } public static void main ( String [ ] args ) { int N = 3 , K = 2 ; System . out . println ( NoofTriplets ( N , K ) ) ; } }"],"bleu":0.7521456900896096,"rouge_l":0.8573599240265907}
{"id":1288,"predictions":["class GFG { static void process ( int brr , int a , int b ) { arr [ a ] ^= 1 ; arr [ b + 1 ] ^= 1 ; } static void process ( int arr [ ] , int n ) { int k ; for ( int k = 1 ; k <= n ; k ++ ) arr [ k ] ^= 1 ; } static void process ( int arr [ ] , int n ) { for ( int k = 1 ; k <= n ; k ++ ) System . out . print ( arr [ k - 1 ] + \" ▁ \" ) ; } static void result ( int arr [ ] , int n ) { for ( int k = 1 ; k <= n ; k ++ ) System . out . print ( arr [ k ] + \" ▁ \" ) ; } public static void main ( String [ ] args ) { int n = 5 , m = 3 ; int arr [ ] = new int [ n + 2 ] ; pattern ( arr , 1 , 5 ) ; pattern ( arr , 2 , 5 ) ; process ( arr , n ) ; } }"],"references":["class GFG { static void command ( boolean arr [ ] , int a , int b ) { arr [ a ] ^= true ; arr [ b + 1 ] ^= true ; } static void process ( boolean arr [ ] , int n ) { for ( int k = 1 ; k <= n ; k ++ ) { arr [ k ] ^= arr [ k - 1 ] ; } } static void result ( boolean arr [ ] , int n ) { for ( int k = 1 ; k <= n ; k ++ ) { if ( arr [ k ] == true ) System . out . print ( \"1\" + \" ▁ \" ) ; else System . out . print ( \"0\" + \" ▁ \" ) ; } } public static void main ( String args [ ] ) { int n = 5 , m = 3 ; boolean arr [ ] = new boolean [ n + 2 ] ; command ( arr , 1 , 5 ) ; command ( arr , 2 , 5 ) ; command ( arr , 3 , 5 ) ; process ( arr , n ) ; result ( arr , n ) ; } }"],"bleu":0.6888873992302471,"rouge_l":0.7608017817371938}
{"id":1289,"predictions":["class GFG { static int countSetBits ( int n ) { int count = 0 ; while ( n > 0 ) { n &= ( n - 1 ) ; count ++ ; } return count ; } static int countSetBitsInGivenRange ( int n , int l , int r ) { int num = ( ( 1 << r ) - 1 ) ^ ( ( 1 << ( l - 1 ) ) - 1 ) ; return countSetBits ( n & num ) ; } public static void main ( String [ ] args ) { int n = 42 ; int l = 2 , r = 5 ; int ans = countSetBitsInGivenRange ( n , l , r ) ; System . out . println ( ans ) ; } }"],"references":["class GFG { static int countSetBits ( int n ) { int count = 0 ; while ( n > 0 ) { n &= ( n - 1 ) ; count ++ ; } return count ; } static int countSetBitsInGivenRange ( int n , int l , int r ) { int num = ( ( 1 << r ) - 1 ) ^ ( ( 1 << ( l - 1 ) ) - 1 ) ; return countSetBits ( n & num ) ; } public static void main ( String [ ] args ) { int n = 42 ; int l = 2 , r = 5 ; System . out . print ( countSetBitsInGivenRange ( n , l , r ) ) ; } }"],"bleu":0.9225260222477262,"rouge_l":0.9399535281888223}
{"id":1290,"predictions":["import java . util . * ; class GFG { static int dig ( int a ) { int count = 0 ; while ( a > 0 ) { a \/= 10 ; count ++ ; } return count ; } static void required_number ( int num , int n , int d ) { int flag = 0 ; int power = 0 , a = 0 ; for ( int i = num ; i >= 1 ; i -- ) { power = ( int ) Math . pow ( 10 , i ) ; a = n % power ; if ( d > a ) { flag = 1 ; break ; } } if ( flag ) { int t = 0 ; for ( int j = 0 ; j < i ; j ++ ) { t += 9 * ( int ) Math . pow ( 10 , j ) ; } if ( n % power == t ) System . out . print ( n - 1 ) ; else System . out . print ( n - ( n % power ) - 1 ) ; } else { System . out . print ( n - ( n % power ) - 1 ) ; } } public static void main ( String [ ] args ) { int n = 1029 ; int d = check ( n , d ) ; } }"],"references":["import java . io . * ; class GFG { static long dig ( long a ) { long count = 0 ; while ( a > 0 ) { a \/= 10 ; count ++ ; } return count ; } static void required_number ( long num , long n , long d ) { long i , j , power = 1 , a , flag = 0 ; for ( i = num ; i >= 1 ; i -- ) { power = ( long ) Math . pow ( 10 , i ) ; a = n % power ; if ( d > a ) { flag = 1 ; break ; } } if ( flag > 0 ) { long t = 0 ; for ( j = 0 ; j < i ; j ++ ) { t += 9 * Math . pow ( 10 , j ) ; } if ( n % power == t ) System . out . print ( n ) ; else { System . out . print ( n - ( n % power ) - 1 ) ; } } else System . out . print ( n ) ; } public static void main ( String [ ] args ) { long n = 1029 , d = 102 ; long num = dig ( n ) ; required_number ( num , n , d ) ; } }"],"bleu":0.7297365926366417,"rouge_l":0.8534283640203261}
{"id":1291,"predictions":["class GfG { static int CountZeroBit ( int n ) { int count = 0 ; while ( n != 0 ) { if ( ( n & 1 ) == 0 ) count ++ ; n >>= 1 ; } return count ; } static int CountORANDEqual ( int N ) { int count = CountZeroBit ( N ) ; return ( 1 << count ) ; } public static void main ( String [ ] args ) { int N = 10 ; System . out . println ( CountORandSum ( N ) ) ; } }"],"references":["class GFG { static int CountZeroBit ( int n ) { int count = 0 ; while ( n > 0 ) { if ( ( n & 1 ) != 0 ) count ++ ; n >>= 1 ; } return count ; } static int CountORandSumEqual ( int N ) { int count = CountZeroBit ( N ) ; return ( 1 << count ) ; } public static void main ( String [ ] args ) { int N = 10 ; System . out . print ( CountORandSumEqual ( N ) ) ; } }"],"bleu":0.868031574013388,"rouge_l":0.9393939393939396}
{"id":1292,"predictions":["class GFG { static boolean checkConurrent ( int a1 , int b1 , int c1 , int a2 , int b2 , int c3 , int a3 , int b3 , int c3 , int c3 ) { return ( a3 * ( b1 * c2 * c1 ) + b3 * ( c1 * a2 - c1 ) + c3 * ( a1 * b2 - a1 ) == 0 ) ; } public static void main ( String [ ] args ) { int a1 = 2 ; int b1 = - 3 ; int c1 = 5 ; int a2 = 4 ; int b2 = 5 ; int c3 = 8 ; if ( checkConurrent ( a1 , b1 , c1 , a2 , b2 , c3 ) == 0 ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . io . * ; class GFG { static boolean checkConcurrent ( int a1 , int b1 , int c1 , int a2 , int b2 , int c2 , int a3 , int b3 , int c3 ) { return ( a3 * ( b1 * c2 - b2 * c1 ) + b3 * ( c1 * a2 - c2 * a1 ) + c3 * ( a1 * b2 - a2 * b1 ) == 0 ) ; } public static void main ( String [ ] args ) { int a1 = 2 , b1 = - 3 , c1 = 5 ; int a2 = 3 , b2 = 4 , c2 = - 7 ; int a3 = 9 , b3 = - 5 , c3 = 8 ; if ( checkConcurrent ( a1 , b1 , c1 , a2 , b2 , c2 , a3 , b3 , c3 ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.6657215887131448,"rouge_l":0.8182926829268293}
{"id":1293,"predictions":["import java . util . * ; class GFG { static String winner ( int moves [ ] , int n ) { Map < String , Integer > map = new HashMap < > ( ) ; map . put ( ' R ' , 0 ) ; map . put ( ' E ' ) ; if ( map . get ( 0 ) == moves . get ( 1 ) ) return \" ; if ( ( map . get ( moves . get ( 0 ) ) == moves . get ( 1 ) - ( 2 ) ) % 3 ) % 3\" ; return \" B \" ; } static void performQueries ( String arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) System . out . println ( winner ( arr [ i ] ) ) ; } public static void main ( String [ ] args ) { String arr [ ] = { \" RS \" , \" RS \" , \" SP \" } ; int n = arr . length ; performQueries ( arr , n ) ; } }"],"references":["import java . util . * ; class GFG { static String winner ( String moves ) { HashMap < Character , Integer > data = new HashMap < Character , Integer > ( ) ; data . put ( ' R ' , 0 ) ; data . put ( ' P ' , 1 ) ; data . put ( ' S ' , 2 ) ; if ( moves . charAt ( 0 ) == moves . charAt ( 1 ) ) { return \" Draw \" ; } if ( ( ( data . get ( moves . charAt ( 0 ) ) | 1 << ( 2 ) ) - ( data . get ( moves . charAt ( 1 ) ) | 0 << ( 2 ) ) ) % 3 != 0 ) { return \" A \" ; } return \" B \" ; } static void performQueries ( String arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) System . out . print ( winner ( arr [ i ] ) + \" \\n \" ) ; } public static void main ( String [ ] args ) { String arr [ ] = { \" RS \" , \" SR \" , \" SP \" , \" PP \" } ; int n = arr . length ; performQueries ( arr , n ) ; } }"],"bleu":0.5661726175755253,"rouge_l":0.7787234042553192}
{"id":1294,"predictions":["import java . util . * ; class GFG { static int MAX = 100000 ; static int catalan [ ] = new int [ MAX ] ; static void catalanDP ( int n ) { catalan [ 0 ] = catalan [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) { catalan [ i ] = 0 ; for ( int j = 0 ; j < i ; j ++ ) { catalan [ i ] += catalan [ j ] * catalan [ i - j - 1 ] ; } } } static int canSequence ( int arr [ ] , int n ) { catalan [ 0 ] = catalan [ 1 ] ; Set < Integer > s = new HashSet < Integer > ( ) ; int a = 1 , b = 1 ; s . add ( a ) ; if ( n >= 2 ) s . add ( b ) ; for ( int i = 2 ; i < n ; i ++ ) s . add ( catalan [ i ] ) ; Set < Integer > s = s - temp ; for ( int i = 2 ; i < n ; i ++ ) s . add ( catalan [ i ] ) ; s . add ( s ) ; return s . size ( ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 2 , 5 , 41 } ; int n = arr . length ; System . out . print ( vanSequence ( arr , n ) ) ; } }"],"references":["import java . util . HashSet ; class GFG1 { static int MAX = 100000 ; static long catalan [ ] = new long [ MAX ] ; static void catalanDP ( long n ) { catalan [ 0 ] = catalan [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) { catalan [ i ] = 0 ; for ( int j = 0 ; j < i ; j ++ ) { catalan [ i ] += catalan [ j ] * catalan [ i - j - 1 ] ; } } } static int CatalanSequence ( int arr [ ] , int n ) { catalanDP ( n ) ; HashSet < Integer > s = new HashSet < Integer > ( ) ; int a = 1 , b = 1 ; int c ; s . add ( a ) ; if ( n >= 2 ) { s . add ( b ) ; } for ( int i = 2 ; i < n ; i ++ ) { s . add ( ( int ) catalan [ i ] ) ; } for ( int i = 0 ; i < n ; i ++ ) { if ( s . contains ( arr [ i ] ) ) { s . remove ( arr [ i ] ) ; } } return s . size ( ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 2 , 5 , 41 } ; int n = arr . length ; System . out . print ( CatalanSequence ( arr , n ) ) ; } }"],"bleu":0.7801711000215109,"rouge_l":0.8818794151470346}
{"id":1295,"predictions":["import java . util . * ; class GFG { static void removeAnagrams ( String arr [ ] , int N ) { HashSet < String > ans = new HashSet < String > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { String word = arr [ i ] ; String word = \" \" ; for ( int i = 0 ; i < N ; i ++ ) { word += word . charAt ( i ) ; if ( ! found . contains ( word ) ) { ans . add ( arr [ i ] ) ; found . add ( word ) ; } } Collections . sort ( ans ) ; for ( int i = 0 ; i < ans . size ( ) ; i ++ ) System . out . print ( ans . get ( i ) + \" ▁ \" ) ; } } public static void main ( String [ ] args ) { String arr [ ] = { \" geeks \" , \" skeegs \" , \" coces \" } ; int N = 4 ; removeAnagram ( arr , N ) ; } }"],"references":["import java . util . * ; class GFG { static void removeAnagrams ( String arr [ ] , int N ) { Vector < String > ans = new Vector < String > ( ) ; HashSet < String > found = new HashSet < String > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { String word = arr [ i ] ; word = sort ( word ) ; if ( ! found . contains ( word ) ) { ans . add ( arr [ i ] ) ; found . add ( word ) ; } } Collections . sort ( ans ) ; for ( int i = 0 ; i < ans . size ( ) ; ++ i ) { System . out . print ( ans . get ( i ) + \" ▁ \" ) ; } } static String sort ( String inputString ) { char tempArray [ ] = inputString . toCharArray ( ) ; Arrays . sort ( tempArray ) ; return new String ( tempArray ) ; } public static void main ( String [ ] args ) { String arr [ ] = { \" geeks \" , \" keegs \" , \" code \" , \" doce \" } ; int N = 4 ; removeAnagrams ( arr , N ) ; } }"],"bleu":0.7032656321170268,"rouge_l":0.7939836575312748}
{"id":1296,"predictions":["class GFG { static int findMaximumNum ( int arr [ ] , int n ) { int i = n ; while ( i >= 1 ) { int count = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( i <= arr [ j ] ) count ++ ; } if ( count >= i ) return i ; i -- ; } return 1 ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 8 , 10 } ; int n = arr . length ; System . out . println ( findMaximumNum ( arr , n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int findMaximumNum ( int arr [ ] , int n ) { for ( int i = n ; i >= 1 ; i -- ) { int count = 0 ; for ( int j = 0 ; j < n ; j ++ ) if ( i <= arr [ j ] ) count ++ ; if ( count >= i ) return i ; } return 1 ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 8 , 10 } ; int n = arr . length ; System . out . println ( findMaximumNum ( arr , n ) ) ; } }"],"bleu":0.8583371577396526,"rouge_l":0.9245869052056156}
{"id":1297,"predictions":["class GfG { static void printSubArrays ( int arr [ ] , int start , int end ) { if ( end == arr . length ) return ; else if ( start > end ) return ; else if ( start > end ) return ; else return printSubArrays ( arr , start + 1 , end ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 } ; printSubArrays ( arr , 0 , 0 ) ; } }"],"references":["class solution { static void printSubArrays ( int [ ] arr , int start , int end ) { if ( end == arr . length ) return ; else if ( start > end ) printSubArrays ( arr , 0 , end + 1 ) ; else { System . out . print ( \" [ \" ) ; for ( int i = start ; i < end ; i ++ ) { System . out . print ( arr [ i ] + \" , ▁ \" ) ; } System . out . println ( arr [ end ] + \" ] \" ) ; printSubArrays ( arr , start + 1 , end ) ; } return ; } public static void main ( String args [ ] ) { int [ ] arr = { 1 , 2 , 3 } ; printSubArrays ( arr , 0 , 0 ) ; } }"],"bleu":0.382252341969722,"rouge_l":0.6457410142786805}
{"id":1298,"predictions":["class GFG { static int setBit ( int xorValue ) { int count = 0 ; while ( xorValue > 0 ) { if ( xorValue % 2 == 0 ) count ++ ; xorValue = xorValue \/ 2 ; } return count ; } static int minFlip ( int n , int k ) { int size = ( int ) ( Math . log ( n ) \/ ( 2 ) ) ; int max = Math . pow ( 2 , k ) - 1 ; max = max << ( size - k ) ; return ( setBit ( xor ) ) ; } public static void main ( String [ ] args ) { int n = 27 , k = 3 ; System . out . println ( \" Min ▁ Flips ▁ = ▁ \" + minFlip ( n , k ) ) ; } }"],"references":["import java . util . * ; class GFG { static int setBit ( int xorValue ) { int count = 0 ; while ( xorValue >= 1 ) { if ( xorValue % 2 == 1 ) count ++ ; xorValue \/= 2 ; } return count ; } static int minFlip ( int n , int k ) { int size = ( int ) ( Math . log ( n ) \/ Math . log ( 2 ) ) + 1 ; int max = ( int ) Math . pow ( 2 , k ) - 1 ; max = max << ( size - k ) ; int xorValue = ( n ^ max ) ; return ( setBit ( xorValue ) ) ; } public static void main ( String [ ] args ) { int n = 27 , k = 3 ; System . out . println ( \" Min ▁ Flips ▁ = ▁ \" + minFlip ( n , k ) ) ; } }"],"bleu":0.7702452725097408,"rouge_l":0.8796049382716049}
{"id":1299,"predictions":["class GFG { static boolean isVowel ( char x ) { if ( x == ' a ' || x == ' e ' || x == ' i ' || x == ' o ' || x == ' u ' ) return true ; else return false ; } static String updateDiamondZowel ( String a ) { int n = a . length ( ) ; StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( i == 0 || i == n - 1 ) { modifiedString . append ( a . charAt ( i ) ) ; continue ; } if ( isVowel ( a . charAt ( i - 1 ) ) && isVowel ( a . charAt ( i - 1 ) ) == false && isVowel ( a . charAt ( i + 1 ) ) == false ) continue ; else modifiedString += a . charAt ( i ) ; } return modifiedString ; } public static void main ( String [ ] args ) { String str = \" geeksforgeeks \" ; updateString ( str ) ; } }"],"references":["import java . io . * ; import java . util . * ; import java . lang . * ; class GFG { static boolean isVowel ( char x ) { if ( x == ' a ' || x == ' e ' || x == ' i ' || x == ' o ' || x == ' u ' ) return true ; else return false ; } static String updateSandwichedVowels ( String a ) { int n = a . length ( ) ; String updatedString = \" \" ; for ( int i = 0 ; i < n ; i ++ ) { if ( i == 0 || i == n - 1 ) { updatedString += a . charAt ( i ) ; continue ; } if ( isVowel ( a . charAt ( i ) ) == true && isVowel ( a . charAt ( i - 1 ) ) == false && isVowel ( a . charAt ( i + 1 ) ) == false ) { continue ; } updatedString += a . charAt ( i ) ; } return updatedString ; } public static void main ( String [ ] args ) { String str = \" geeksforgeeks \" ; String updatedString = updateSandwichedVowels ( str ) ; System . out . print ( updatedString ) ; } }"],"bleu":0.7311172852130947,"rouge_l":0.8404706933790125}
{"id":1300,"predictions":["class GFG { static int totalWays ( int N , int M , int X ) { int [ ] [ ] dp = new int [ N + 1 ] [ 2 ] ; if ( X == 1 ) { dp [ 0 ] [ 0 ] = 1 ; } else { dp [ 0 ] [ 1 ] = 0 ; } if ( X == 1 ) { dp [ 1 ] [ 0 ] = 1 ; dp [ 1 ] [ 1 ] = M - 1 ; } else { dp [ 1 ] [ 0 ] = 1 ; dp [ 1 ] [ 1 ] = ( M - 2 ) ; } for ( int i = 2 ; i < N ; i ++ ) { dp [ i ] [ 0 ] = dp [ i - 1 ] [ 1 ] * ( M - 1 ) + dp [ i - 1 ] [ 1 ] * ( M - 2 ) ; } return dp [ N - 1 ] [ 0 ] ; } public static void main ( String [ ] args ) { int N = 4 , M = 3 , X = 2 ; System . out . println ( totalWays ( N , M , X ) ) ; } }"],"references":["import java . io . * ; class GFG { static int totalWays ( int N , int M , int X ) { int dp [ ] [ ] = new int [ N + 1 ] [ 2 ] ; if ( X == 1 ) { dp [ 0 ] [ 0 ] = 1 ; } else { dp [ 0 ] [ 1 ] = 0 ; } if ( X == 1 ) { dp [ 1 ] [ 0 ] = 0 ; dp [ 1 ] [ 1 ] = M - 1 ; } else { dp [ 1 ] [ 0 ] = 1 ; dp [ 1 ] [ 1 ] = ( M - 2 ) ; } for ( int i = 2 ; i < N ; i ++ ) { dp [ i ] [ 0 ] = dp [ i - 1 ] [ 1 ] ; dp [ i ] [ 1 ] = dp [ i - 1 ] [ 0 ] * ( M - 1 ) + dp [ i - 1 ] [ 1 ] * ( M - 2 ) ; } return dp [ N - 1 ] [ 0 ] ; } public static void main ( String [ ] args ) { int N = 4 , M = 3 , X = 2 ; System . out . println ( totalWays ( N , M , X ) ) ; } }"],"bleu":0.8718905269205413,"rouge_l":0.9323761000463179}
{"id":1301,"predictions":["import java . util . * ; class GFG { static int findMinimal ( int a [ ] , int n ) { Arrays . sort ( a ) ; int sum = 0 ; for ( int i = 0 ; i < n \/ 2 ; i ++ ) { sum += ( a [ i ] + a [ n - i - 1 ] ) * ( a [ i ] + a [ n - i - 1 ] ) ; } return sum ; } public static void main ( String [ ] args ) { int a [ ] = { 8 , 5 , 2 , 3 } ; int n = a . length ; System . out . println ( findMinimal ( a , n ) ) ; } }"],"references":["import java . util . Arrays ; class GFG { static int findMinimal ( int [ ] a , int n ) { Arrays . sort ( a ) ; int sum = 0 ; for ( int i = 0 ; i < n \/ 2 ; i ++ ) sum += ( a [ i ] + a [ n - i - 1 ] ) * ( a [ i ] + a [ n - i - 1 ] ) ; return sum ; } public static void main ( String str [ ] ) { int [ ] a = { 8 , 5 , 2 , 3 } ; int n = a . length ; System . out . println ( findMinimal ( a , n ) ) ; } }"],"bleu":0.8657206667530759,"rouge_l":0.9652810581010864}
{"id":1302,"predictions":["class GFG { static int minOperations ( String str , int n ) { int count = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( str . charAt ( i ) != str . charAt ( i + 1 ) ) { count ++ ; } } return ( count + 1 ) \/ 2 ; } public static void main ( String [ ] args ) { String str = \"000111\" ; int n = str . length ( ) ; System . out . println ( minOperations ( str , n ) ) ; } }"],"references":["class GFG { static int minOperations ( String str , int n ) { int count = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( str . charAt ( i ) != str . charAt ( i + 1 ) ) count ++ ; } return ( count + 1 ) \/ 2 ; } public static void main ( String [ ] args ) { String str = \"000111\" ; int n = str . length ( ) ; System . out . println ( minOperations ( str , n ) ) ; } }"],"bleu":0.961194842264797,"rouge_l":0.9925361994327513}
{"id":1303,"predictions":["import java . io . * ; class GFG { static int toDecimal ( String binary , int i ) { int n = binary . length ( ) ; if ( i == n - 1 ) { return binary . toCharArray ( ) ; } return ( ( ( binary . charAt ( i ) - 0 ) << ( n - i - 1 ) ) + toDecimal ( binary , i + 1 ) ) ; } public static void main ( String [ ] args ) { String binary = \"101\" ; System . out . println ( toDecimal ( binary . toCharArray ( ) ) ) ; } }"],"references":["class GFG { static int toDecimal ( String binary , int i ) { int n = binary . length ( ) ; if ( i == n - 1 ) return binary . charAt ( i ) - '0' ; return ( ( binary . charAt ( i ) - '0' ) << ( n - i - 1 ) ) + toDecimal ( binary , i + 1 ) ; } public static void main ( String [ ] args ) { String binary = \"1010\" ; int i = 0 ; System . out . println ( toDecimal ( binary , i ) ) ; } }"],"bleu":0.7487280671541937,"rouge_l":0.8656912948061446}
{"id":1304,"predictions":["class GFG { static int countPairs ( int n ) { int num = ( ( n \/ 2 ) + 1 ) ; int max = n % num ; int count = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { int val = ( n % i ) % j ; if ( val == max ) count ++ ; } } return count ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( countPairs ( n ) ) ; } }"],"references":["class GFG { public static int countPairs ( int n ) { int num = ( ( n \/ 2 ) + 1 ) ; int max = n % num ; int count = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { int val = ( ( n % i ) % j ) % n ; if ( val == max ) count ++ ; } } return count ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( countPairs ( n ) ) ; } }"],"bleu":0.9296805573693647,"rouge_l":0.9763841511414326}
{"id":1305,"predictions":["import java . util . * ; class GFG { static void createHash ( HashSet < Integer > hash , int maxElement ) { int prev = 0 , curr = 1 ; hash . add ( prev ) ; hash . add ( curr ) ; hash . add ( curr ) ; while ( curr <= maxElement ) { int temp = curr + prev ; hash . add ( temp ) ; prev = curr ; curr = temp ; } } static void fibonacci ( int [ ] arr , int n ) { int max_val = 0 ; HashSet < Integer > hash = new HashSet < Integer > ( ) ; createHash ( hash , max_val ) ; int min = Integer . MAX_VALUE ; int max = Integer . MIN_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( hash . contains ( arr [ i ] ) ) { min = Math . min ( min , arr [ i ] ) ; max = Math . max ( maximum , arr [ i ] ) ; } } System . out . print ( minimum + \" , ▁ \" ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 } ; int n = arr . length ; fibonacci ( arr , n ) ; } }"],"references":["import java . util . * ; class GFG { static void createHash ( HashSet < Integer > hash , int maxElement ) { int prev = 0 , curr = 1 ; hash . add ( prev ) ; hash . add ( curr ) ; while ( curr <= maxElement ) { int temp = curr + prev ; hash . add ( temp ) ; prev = curr ; curr = temp ; } } static void fibonacci ( int arr [ ] , int n ) { int max_val = Arrays . stream ( arr ) . max ( ) . getAsInt ( ) ; HashSet < Integer > hash = new HashSet < Integer > ( ) ; createHash ( hash , max_val ) ; int minimum = Integer . MAX_VALUE ; int maximum = Integer . MIN_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( hash . contains ( arr [ i ] ) ) { minimum = Math . min ( minimum , arr [ i ] ) ; maximum = Math . max ( maximum , arr [ i ] ) ; } } System . out . print ( minimum + \" , ▁ \" + maximum + \" \\n \" ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 } ; int n = arr . length ; fibonacci ( arr , n ) ; } }"],"bleu":0.8612019805860284,"rouge_l":0.9207688990203932}
{"id":1306,"predictions":["class Main { static void printInSortedOrder ( int arr [ ] , int n ) { int index [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) index [ i ] = i ; for ( int i = 0 ; i < n - 1 ; i ++ ) { int min = i ; for ( int j = i + 1 ; j < n ; j ++ ) { if ( arr [ index [ j ] > arr [ index [ j ] ) min = j ; } if ( min != i ) { swap ( arr , min , index [ i ] ) ; index [ i ] = index [ min ] ; } } for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ index [ i ] ] + \" ▁ \" ) ; } public static void main ( String [ ] args ) { int arr [ ] = { \" geeks \" , \" quiz \" , \" geeks \" , \" for \" } ; int n = 4 ; printInSorted ( arr , n ) ; } }"],"references":["class GFG { static void printInSortedOrder ( String arr [ ] , int n ) { int index [ ] = new int [ n ] ; int i , j , min ; for ( i = 0 ; i < n ; i ++ ) { index [ i ] = i ; } for ( i = 0 ; i < n - 1 ; i ++ ) { min = i ; for ( j = i + 1 ; j < n ; j ++ ) { if ( arr [ index [ min ] ] . compareTo ( arr [ index [ j ] ] ) > 0 ) { min = j ; } } if ( min != i ) { int temp = index [ min ] ; index [ min ] = index [ i ] ; index [ i ] = temp ; } } for ( i = 0 ; i < n ; i ++ ) { System . out . print ( arr [ index [ i ] ] + \" ▁ \" ) ; } } static public void main ( String [ ] args ) { String arr [ ] = { \" geeks \" , \" quiz \" , \" geeks \" , \" for \" } ; int n = 4 ; printInSortedOrder ( arr , n ) ; } }"],"bleu":0.7284485405041826,"rouge_l":0.859154929577465}
{"id":1307,"predictions":["class GFG { static int binomialCoeff ( int n , int k ) { int res = 1 ; if ( k > n - k ) k = n - k ; for ( int i = 0 ; i < k ; ++ i ) { res *= ( n - i ) ; res \/= ( i + 1 ) ; } return res ; } static int countPaths ( int x1 , int y1 , int x2 , int y2 ) { int m = Math . abs ( x1 - x2 ) ; int n = Math . abs ( y1 - y2 ) ; return ( binomialCoeff ( m + n , n ) ) ; } public static void main ( String [ ] args ) { int x1 = 2 , y1 = 3 , x2 = 4 , y2 = 5 ; System . out . println ( countPaths ( x1 , y1 , x2 , y2 ) ) ; } }"],"references":["class GfG { static long binomialCoeff ( int n , int k ) { long res = 1 ; if ( k > n - k ) k = n - k ; for ( int i = 0 ; i < k ; ++ i ) { res *= ( n - i ) ; res \/= ( i + 1 ) ; } return res ; } static long countPaths ( int x1 , int y1 , int x2 , int y2 ) { int m = Math . abs ( x1 - x2 ) ; int n = Math . abs ( y1 - y2 ) ; return ( binomialCoeff ( m + n , n ) ) ; } public static void main ( String [ ] args ) { int x1 = 2 , y1 = 3 , x2 = 4 , y2 = 5 ; System . out . println ( countPaths ( x1 , y1 , x2 , y2 ) ) ; } }"],"bleu":0.9468683637380759,"rouge_l":0.9766081871345029}
{"id":1308,"predictions":["class GFG { static int findN ( int k ) { if ( k == 0 ) return 3 ; if ( k == 1 ) return 1 ; else if ( k % 4 == 3 ) ans = k ; else if ( k % 4 == 3 ) ans = k - 1 ; else return - 1 ; } public static void main ( String [ ] args ) { int k = 7 ; int res = findN ( k ) ; if ( res == - 1 ) System . out . println ( \" Not ▁ possible \" ) ; else System . out . println ( res ) ; } }"],"references":["import java . io . * ; class GFG { static int findN ( int k ) { int ans ; if ( k == 0 ) ans = 3 ; if ( k == 1 ) ans = 1 ; else if ( k % 4 == 0 ) ans = k ; else if ( k % 4 == 3 ) ans = k - 1 ; else ans = - 1 ; return ans ; } public static void main ( String [ ] args ) { int k = 7 ; int res = findN ( k ) ; if ( res == - 1 ) System . out . println ( \" Not ▁ possible \" ) ; else System . out . println ( res ) ; } }"],"bleu":0.7835743239501349,"rouge_l":0.895341416719847}
{"id":1309,"predictions":["import java . util . * ; class GFG { static void print_asterisk ( int asterisk ) { if ( asterisk == 0 ) return ; System . out . print ( \" * ▁ \" ) ; print_asterisk ( asterisk - 1 ) ; } static void print_space ( int space ) { if ( space == 0 ) return ; System . out . print ( \" ▁ \" ) ; System . out . print ( \" ▁ \" ) ; print_space ( space - 1 ) ; } static void pattern ( int n , int num ) { if ( n == 0 ) return ; print_asterisk ( num - n + 1 ) ; print_asterisk ( num - n + 1 ) ; print_asterisk ( num - n + 1 ) ; System . out . println ( ) ; pattern ( n - 1 , num ) ; } public static void main ( String [ ] args ) { int n = 5 ; pattern ( n , n ) ; } }"],"references":["class GFG { static void print_asterisk ( int asterisk ) { if ( asterisk == 0 ) return ; System . out . print ( \" * ▁ \" ) ; print_asterisk ( asterisk - 1 ) ; } static void print_space ( int space ) { if ( space == 0 ) return ; System . out . print ( \" ▁ \" ) ; System . out . print ( \" ▁ \" ) ; print_space ( space - 1 ) ; } static void pattern ( int n , int num ) { if ( n == 0 ) return ; print_asterisk ( num - n + 1 ) ; print_space ( 2 * n - 1 ) ; print_asterisk ( num - n + 1 ) ; System . out . println ( ) ; pattern ( n - 1 , num ) ; } public static void main ( String [ ] args ) { int n = 5 ; pattern ( n , n ) ; } }"],"bleu":0.9249955767593514,"rouge_l":0.9611641486699417}
{"id":1310,"predictions":["class GFG { static boolean isMultipleOf3 ( int n ) { int odd_count = 0 , even_count = 0 ; if ( n < 0 ) return true ; if ( n == 0 ) return true ; while ( n != 0 ) { if ( ( n & 1 ) == 1 ) odd_count ++ ; n = n >> 2 ; } return isMultipleOf3 ( Math . abs ( odd_count - even_count ) ) ; } public static void main ( String [ ] args ) { int num = 24 ; if ( isMultipleOf3 ( num ) ) System . out . println ( num + \" ▁ is ▁ multiple ▁ of ▁ 3\" ) ; else System . out . println ( num + \" ▁ is ▁ not ▁ a ▁ \" + \" multiple ▁ of ▁ 3\" ) ; } }"],"references":["import java . lang . * ; import java . util . * ; class GFG { static int isMultipleOf3 ( int n ) { int odd_count = 0 ; int even_count = 0 ; if ( n < 0 ) n = - n ; if ( n == 0 ) return 1 ; if ( n == 1 ) return 0 ; while ( n != 0 ) { if ( ( n & 1 ) != 0 ) odd_count ++ ; if ( ( n & 2 ) != 0 ) even_count ++ ; n = n >> 2 ; } return isMultipleOf3 ( Math . abs ( odd_count - even_count ) ) ; } public static void main ( String [ ] args ) { int num = 24 ; if ( isMultipleOf3 ( num ) != 0 ) System . out . println ( num + \" ▁ is ▁ multiple ▁ of ▁ 3\" ) ; else System . out . println ( num + \" ▁ is ▁ not ▁ a ▁ multiple ▁ of ▁ 3\" ) ; } }"],"bleu":0.6753550744836928,"rouge_l":0.8119414337326488}
{"id":1311,"predictions":["import java . util . * ; class GFG { static int findNumber ( int N , int S ) { int i = ( ( ( N ) * ( N + 1 ) ) \/ 4 ) - ( ( S + 1 ) \/ 2 ) ; return i ; } static void check ( int N , int S ) { int i = findNumber ( N , S ) ; int integerI = i ; if ( i - integerI == 0 ) System . out . println ( \" Yes : \" No \" ) ; else System . out . println ( \" No \" ) ; } public static void main ( String [ ] args ) { int N = 4 , S = 3 ; check ( N , S ) ; N = 5 ; S = 3 ; check ( N , S ) ; } }"],"references":["class GFG { static float findNumber ( int N , int S ) { float i = ( ( ( float ) ( N ) * ( float ) ( N + 1 ) ) \/ 4 ) - ( ( float ) ( S + 1 ) \/ 2 ) ; return i ; } static void check ( int N , int S ) { float i = findNumber ( N , S ) ; int integerI = ( int ) i ; if ( i - integerI == 0 ) System . out . println ( \" Yes : ▁ \" + integerI + \" , ▁ \" + ( integerI + 1 ) ) ; else System . out . println ( \" No \" ) ; } public static void main ( String [ ] args ) { int N = 4 , S = 3 ; check ( N , S ) ; N = 5 ; S = 3 ; check ( N , S ) ; } }"],"bleu":0.7717824359890474,"rouge_l":0.8755697798467657}
{"id":1312,"predictions":["class GFG { static void thirdLargest ( int arr [ ] , int arr_size ) { if ( arr_size < 3 ) { System . out . printf ( \" ▁ Invalid ▁ Input ▁ \" ) ; return ; } int first = arr [ 0 ] , second = Integer . MIN_VALUE ; for ( int i = 1 ; i < arr_size ; i ++ ) { if ( arr [ i ] > first ) { third = second ; second = first ; first = arr [ i ] ; } else if ( arr [ i ] > second ) { third = second ; second = arr [ i ] ; } else if ( arr [ i ] > third ) third = arr [ i ] ; } System . out . printf ( \" The ▁ third ▁ \" + \" element ▁ is ▁ % d ▁ is ▁ % d \\n \" , third ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 12 , 13 , 1 , 10 , 34 , 16 } ; int n = arr . length ; thirdLargest ( arr , n ) ; } }"],"references":["class GFG { static void thirdLargest ( int arr [ ] , int arr_size ) { if ( arr_size < 3 ) { System . out . printf ( \" ▁ Invalid ▁ Input ▁ \" ) ; return ; } int first = arr [ 0 ] , second = Integer . MIN_VALUE , third = Integer . MIN_VALUE ; for ( int i = 1 ; i < arr_size ; i ++ ) { if ( arr [ i ] > first ) { third = second ; second = first ; first = arr [ i ] ; } else if ( arr [ i ] > second ) { third = second ; second = arr [ i ] ; } else if ( arr [ i ] > third ) { third = arr [ i ] ; } } System . out . printf ( \" The ▁ third ▁ Largest ▁ element ▁ is ▁ % d \\n \" , third ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 12 , 13 , 1 , 10 , 34 , 16 } ; int n = arr . length ; thirdLargest ( arr , n ) ; } }"],"bleu":0.9374093091326144,"rouge_l":0.9575339349359218}
{"id":1313,"predictions":["import java . io . * ; class GFG { static int gcd ( int a , int b ) { if ( a == 0 || b == 0 ) return 0 ; if ( a == b ) return a ; if ( a > b ) return gcd ( a - b , b ) ; return gcd ( a , b - a ) ; } static int squarearea ( int l , int b ) { if ( l < 0 || b < 0 ) return - 1 ; int n = ( l * b ) \/ gcd ( l , b ) ; return n * n ; } public static void main ( String [ ] args ) { int l = 6 , b = 4 ; System . out . println ( squarearea ( l , b ) ) ; } }"],"references":["class GFG { static int gcd ( int a , int b ) { if ( a == 0 || b == 0 ) return 0 ; if ( a == b ) return a ; if ( a > b ) return gcd ( a - b , b ) ; return gcd ( a , b - a ) ; } static int squarearea ( int l , int b ) { if ( l < 0 || b < 0 ) return - 1 ; int n = ( l * b ) \/ gcd ( l , b ) ; return n * n ; } public static void main ( String [ ] args ) { int l = 6 , b = 4 ; System . out . println ( squarearea ( l , b ) ) ; } }"],"bleu":0.954095833910868,"rouge_l":0.9807289946041186}
{"id":1314,"predictions":["class GFG { static int countUnsetBits ( int n ) { int x = n ; n |= n >> 1 ; n |= n >> 2 ; n |= n >> 4 ; n |= n >> 4 ; n |= n >> 16 ; int t = ( int ) Math . log ( x ^ n , 2 ) ; return ( int ) Math . floor ( t ) ; } public static void main ( String [ ] args ) { int n = 17 ; System . out . println ( countUnsetBits ( n ) ) ; } }"],"references":["class GFG { static int countUnsetBits ( int n ) { int x = n ; n |= n >> 1 ; n |= n >> 2 ; n |= n >> 4 ; n |= n >> 8 ; n |= n >> 16 ; return Integer . bitCount ( x ^ n ) ; } public static void main ( String [ ] args ) { int n = 17 ; System . out . println ( countUnsetBits ( n ) ) ; } }"],"bleu":0.7423619418658527,"rouge_l":0.8794511030050375}
{"id":1315,"predictions":["class GFG { static final int N = 1000001 ; static int [ ] visited = new int [ N ] ; static int [ ] dfs ( int i ) { if ( visited [ i ] == 1 ) return 0 ; visited [ i ] = 1 ; int x = dfs ( drains [ i ] ) ; return ( x + 1 ) ; } static int noOfTransitions ( int [ ] P , int n ) { for ( int i = 1 ; i <= n ; i ++ ) { visited [ i ] = 0 ; } for ( int i = 0 ; i < n ; i ++ ) { visited [ i ] = 0 ; } for ( int i = 0 ; i < n ; i ++ ) { visited [ i ] = dfs ( i ) ; } int transpos = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( visited [ i ] == 0 ) { int ans = dfs ( i ) ; transpospospositions += ans - 1 ; } } return transpositions ; } public static void main ( String [ ] args ) { int [ ] permutation = { 5 , 1 , 4 , 3 , 2 } ; int n = permutation ( permutation , n ) ; System . out . print ( noOfTransitions ( permutation , n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int N = 1000001 ; static int visited [ ] = new int [ N ] ; static int goesTo [ ] = new int [ N ] ; static int dfs ( int i ) { if ( visited [ i ] == 1 ) return 0 ; visited [ i ] = 1 ; int x = dfs ( goesTo [ i ] ) ; return ( x + 1 ) ; } static int noOfTranspositions ( int P [ ] , int n ) { for ( int i = 1 ; i <= n ; i ++ ) visited [ i ] = 0 ; for ( int i = 0 ; i < n ; i ++ ) goesTo [ P [ i ] ] = i + 1 ; int transpositions = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( visited [ i ] == 0 ) { int ans = dfs ( i ) ; transpositions += ans - 1 ; } } return transpositions ; } public static void main ( String [ ] args ) { int permutation [ ] = { 5 , 1 , 4 , 3 , 2 } ; int n = permutation . length ; System . out . println ( noOfTranspositions ( permutation , n ) ) ; } }"],"bleu":0.7141576679655032,"rouge_l":0.8494826576430012}
{"id":1316,"predictions":["class GfG { static String getCount ( int N ) { if ( N % 2 == 1 ) return \"0\" ; String result = \"9\" ; for ( int i = 1 ; i < N \/ 2 ; i ++ ) result = result + \"0\" ; return result ; } public static void main ( String [ ] args ) { int N = 4 ; System . out . println ( getCount ( N ) ) ; } }"],"references":["class GFG { static String getCount ( int N ) { if ( N % 2 == 1 ) return \"0\" ; String result = \"9\" ; for ( int i = 1 ; i <= N \/ 2 - 1 ; i ++ ) result += \"0\" ; return result ; } public static void main ( String [ ] args ) { int N = 4 ; System . out . println ( getCount ( N ) ) ; } }"],"bleu":0.8738987823446205,"rouge_l":0.9397590361445783}
{"id":1317,"predictions":["class GFG { static boolean isDivisible ( int n ) { while ( n \/ 100 ) { int d = n % 10 ; n \/= 10 ; n += d * 2 ; } return ( n % 19 == 0 ) ; } public static void main ( String [ ] args ) { int n = 101156 ; if ( isDivisible ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . io . * ; class GFG { static boolean isDivisible ( long n ) { while ( n \/ 100 > 0 ) { long d = n % 10 ; n \/= 10 ; n += d * 2 ; } return ( n % 19 == 0 ) ; } public static void main ( String [ ] args ) { long n = 101156 ; if ( isDivisible ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.8221327304002051,"rouge_l":0.9163090128755366}
{"id":1318,"predictions":["class GFG { static void printArr ( int arr [ ] , int k ) { for ( int i = 0 ; i < k ; i ++ ) { System . out . print ( arr [ i ] + \" ▁ \" ) ; } System . out . println ( ) ; } static void printSeqUtil ( int n , int k , int len1 , int arr [ ] ) { if ( len == k ) { printArr ( arr , k ) ; return ; } int i = ( len == 0 ) ? 1 : ( arr [ len - 1 ] + 1 ) ; len1 ++ ; while ( i <= n ) { arr [ len - 1 - 1 ] = i ; printSeqUtil ( n , k , len , len1 , arr ) ; i ++ ; } len -- ; } static void printSeq ( int n , int k ) { int [ ] arr = new int [ k ] ; int len = 0 ; printSeqUtil ( n , k , len , len , arr ) ; } public static void main ( String [ ] args ) { int k = 3 , n = 7 ; printSeq ( n , k ) ; } }"],"references":["class GFG { static void printArr ( int [ ] arr , int k ) { for ( int i = 0 ; i < k ; i ++ ) System . out . print ( arr [ i ] + \" ▁ \" ) ; System . out . print ( \" \\n \" ) ; } static void printSeqUtil ( int n , int k , int len , int [ ] arr ) { if ( len == k ) { printArr ( arr , k ) ; return ; } int i = ( len == 0 ) ? 1 : arr [ len - 1 ] + 1 ; len ++ ; while ( i <= n ) { arr [ len - 1 ] = i ; printSeqUtil ( n , k , len , arr ) ; i ++ ; } len -- ; } static void printSeq ( int n , int k ) { int [ ] arr = new int [ k ] ; int len = 0 ; printSeqUtil ( n , k , len , arr ) ; } static public void main ( String [ ] args ) { int k = 3 , n = 7 ; printSeq ( n , k ) ; } }"],"bleu":0.8492950401182712,"rouge_l":0.9467451268848842}
{"id":1319,"predictions":["import java . util . * ; class GFG { static int MAXN = 1000001 ; static int spf [ ] = new int [ MAXN ] ; static int hash [ ] = new int [ MAXN ] ; static void sieve ( ) { for ( int i = 4 ; i < MAXN ; i += 2 ) spf [ i ] = 2 ; for ( int i = 3 ; i < MAXN ; i += 2 ) { if ( spf [ i ] == i ) { for ( int j = i * i ; j < MAXN ; j += i ) { if ( spf [ j ] == j ) { for ( int j = i * i ; j < MAXN ; j += i ) { if ( spf [ j ] == j ) spf [ j ] = i ; } } } } } static boolean checkFactorization ( int x ) { while ( x != 1 ) { int temp = spf [ x ] ; if ( x % temp == 0 ) { for ( int i = x ; i < temp ; i += i ) { int temp = spf [ x ] ; if ( x % temp == 0 ) { hash1 [ j ] ++ ; x = x \/ spf [ x ] ; } while ( x % temp != 0 ) x = x \/ temp ; } } } return true ; } static boolean check ( int x ) { while ( x != 1 ) { int temp = spf [ x ] ; if ( x % temp == 0 && hash1 [ x ] > 1 ) return false ; while ( x % temp == 0 ) x = x \/ temp ; } return true ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 8 , 2 } ; int n = arr . length ; System . out . println ( checkValidNum ( arr , n ) ) ; } }"],"references":["class GFG { static int MAXN = 1000001 ; static int [ ] spf = new int [ MAXN ] ; static int [ ] hash1 = new int [ MAXN ] ; static void sieve ( ) { spf [ 1 ] = 1 ; for ( int i = 2 ; i < MAXN ; i ++ ) spf [ i ] = i ; for ( int i = 4 ; i < MAXN ; i += 2 ) spf [ i ] = 2 ; for ( int i = 3 ; i * i < MAXN ; i ++ ) { if ( spf [ i ] == i ) { for ( int j = i * i ; j < MAXN ; j += i ) if ( spf [ j ] == j ) spf [ j ] = i ; } } } static void getFactorization ( int x ) { int temp ; while ( x != 1 ) { temp = spf [ x ] ; if ( x % temp == 0 ) { hash1 [ spf [ x ] ] ++ ; x = x \/ spf [ x ] ; } while ( x % temp == 0 ) x = x \/ temp ; } } static boolean check ( int x ) { int temp ; while ( x != 1 ) { temp = spf [ x ] ; if ( x % temp == 0 && hash1 [ temp ] > 1 ) return false ; while ( x % temp == 0 ) x = x \/ temp ; } return true ; } static boolean hasValidNum ( int [ ] arr , int n ) { sieve ( ) ; for ( int i = 0 ; i < n ; i ++ ) getFactorization ( arr [ i ] ) ; for ( int i = 0 ; i < n ; i ++ ) if ( check ( arr [ i ] ) ) return true ; return false ; } public static void main ( String [ ] args ) { int [ ] arr = { 2 , 8 , 4 , 10 , 6 , 7 } ; int n = arr . length ; if ( hasValidNum ( arr , n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.6482717219202163,"rouge_l":0.7191400832177531}
{"id":1320,"predictions":["class GFG { static static intRatio ( int a , int b , int c , int d ) { if ( b * c > a * d ) { swap ( c , d ) ; swap ( a , b ) ; } int lcm = ( a * c ) \/ __gcd ( a , b ) ; int x = lcm \/ c ; int y = lcm \/ k ; int k = lcm \/ k ; int d = d * y ; System . out . println ( b + \" : ▁ \" + d ) ; } static int printRatio ( int a , int b , int c , int d ) { int temp = a * c ; a = b * x ; b = c * k ; d = b \/ k ; return d \/ k ; } public static void main ( String [ ] args ) { int a = 4 ; int b = 3 ; int c = 2 ; printRatio ( a , b , c , d ) ; } }"],"references":["import java . io . * ; class GFG { static int __gcd ( int a , int b ) { if ( a == 0 ) return b ; if ( b == 0 ) return a ; if ( a == b ) return a ; if ( a > b ) return __gcd ( a - b , b ) ; return __gcd ( a , b - a ) ; } static void printRatio ( int a , int b , int c , int d ) { if ( b * c > a * d ) { int temp = c ; c = d ; d = c ; temp = a ; a = b ; b = temp ; } int lcm = ( a * c ) \/ __gcd ( a , c ) ; int x = lcm \/ a ; b *= x ; int y = lcm \/ c ; d *= y ; int k = __gcd ( b , d ) ; b \/= k ; d \/= k ; System . out . print ( b + \" : \" + d ) ; } public static void main ( String [ ] args ) { int a = 4 , b = 3 , c = 2 , d = 2 ; printRatio ( a , b , c , d ) ; } }"],"bleu":0.5157897471555813,"rouge_l":0.5442412623506857}
{"id":1321,"predictions":["class GFG { static void SieveOfAtInt ( int limit > 2 ) { if ( limit > 2 ) System . out . print ( 2 + \" ▁ \" ) ; if ( limit > 3 ) System . out . print ( 3 + \" ▁ \" ) ; boolean [ ] sieve = new boolean [ limit ] ; for ( int i = 0 ; i < limit ; i ++ ) sieve [ i ] = true ; int x = 1 ; while ( x * x < limit ) { int y = 1 ; while ( y * y < limit ) { int n = ( 4 * x * y ) + ( y * y ) ; if ( n <= limit && ( n % 12 == 5 ) ) sieve [ n ] ^= true ; n = ( 3 * x ) + ( y * y ) ; if ( n <= limit && n % 12 == 7 ) sieve [ n ] ^= true ; n = ( 3 * x ) - ( y * y ) ; if ( x > y && n % 12 == 7 && n % 12 == 11 ) sieve [ n ] ^= true ; x ++ ; } x ++ ; } int r = 5 while ( r * r < limit ) { if ( sieve [ r ] ) { for ( int i = r * r ; i < limit ; i ++ ) { sieve [ i ] = true ; } } } for ( int a = 5 ; r * r < limit ; a ++ ) { if ( sieve [ a ] ) { System . out . print ( a + \" ▁ \" ) ; } } } public static void main ( String [ ] args ) { int limit = 20 ; SieveOfAtK ( limit ) ; } }"],"references":["class GFG { static int SieveOfAtkin ( int limit ) { if ( limit > 2 ) System . out . print ( 2 + \" ▁ \" ) ; if ( limit > 3 ) System . out . print ( 3 + \" ▁ \" ) ; boolean sieve [ ] = new boolean [ limit ] ; for ( int i = 0 ; i < limit ; i ++ ) sieve [ i ] = false ; for ( int x = 1 ; x * x < limit ; x ++ ) { for ( int y = 1 ; y * y < limit ; y ++ ) { int n = ( 4 * x * x ) + ( y * y ) ; if ( n <= limit && ( n % 12 == 1 || n % 12 == 5 ) ) sieve [ n ] ^= true ; n = ( 3 * x * x ) + ( y * y ) ; if ( n <= limit && n % 12 == 7 ) sieve [ n ] ^= true ; n = ( 3 * x * x ) - ( y * y ) ; if ( x > y && n <= limit && n % 12 == 11 ) sieve [ n ] ^= true ; } } for ( int r = 5 ; r * r < limit ; r ++ ) { if ( sieve [ r ] ) { for ( int i = r * r ; i < limit ; i += r * r ) sieve [ i ] = false ; } } for ( int a = 5 ; a < limit ; a ++ ) if ( sieve [ a ] ) System . out . print ( a + \" ▁ \" ) ; return 0 ; } public static void main ( String [ ] args ) { int limit = 20 ; SieveOfAtkin ( limit ) ; } }"],"bleu":0.8033821952486281,"rouge_l":0.8851059794205508}
{"id":1322,"predictions":["class GFG { static float calculateSide ( int n , float r ) { float theta = 360 \/ n ; float theta_in_Radians = theta * 3.14 \/ 180 ; return 2 * r * Math . sin ( theta_in_Radians \/ 2 ) ; } public static void main ( String [ ] args ) { int n = 3 ; int r = 5 ; System . out . println ( calculateSide ( n , r ) ) ; } }"],"references":["import java . lang . Math ; import java . io . * ; class GFG { static double calculateSide ( double n , double r ) { double theta , theta_in_radians ; theta = 360 \/ n ; theta_in_radians = theta * 3.14 \/ 180 ; return 2 * r * Math . sin ( theta_in_radians \/ 2 ) ; } public static void main ( String [ ] args ) { double n = 3 ; double r = 5 ; System . out . println ( calculateSide ( n , r ) ) ; } }"],"bleu":0.6011445267195368,"rouge_l":0.7931955824723905}
{"id":1323,"predictions":["import java . io . * ; class GFG { static int findSum ( int n ) { int arr [ ] [ ] = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) arr [ i ] [ j ] = Math . abs ( i - j ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) sum += arr [ i ] [ j ] ; return sum ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( findSum ( n ) ) ; } }"],"references":["import java . io . * ; public class GFG { static int findSum ( int n ) { int [ ] [ ] arr = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) arr [ i ] [ j ] = Math . abs ( i - j ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) sum += arr [ i ] [ j ] ; return sum ; } static public void main ( String [ ] args ) { int n = 3 ; System . out . println ( findSum ( n ) ) ; } }"],"bleu":0.9399671948781971,"rouge_l":0.9834589614740368}
{"id":1324,"predictions":["import java . util . * ; class GFG { static int solve ( int [ ] array , int N , int K ) { int [ ] count_Arr = new int [ N + 2 ] ; int factor = 1 ; int size = N ; while ( size > 0 ) { int start = 1 ; int end = size ; count_Arr [ 1 ] += factor * N ; count_Arr [ end + 1 ] -= factor * N ; size = N ; } for ( int i = 2 ; i < N ; i ++ ) { count_Arr [ i ] += count_Arr [ i - 1 ] ; } Vector < Integer > element = new Vector < > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { element = element + element_Arr [ i - 1 ] ; } Arrays . sort ( element ) ; int start = 1 ; for ( int i = 0 ; i < N ; i ++ ) { int end = start + element [ i ] - 1 ; if ( K >= start && K <= end ) return element [ i ] ; start += element [ i ] . second ; } return - 1 ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 4 , 5 , 1 } ; int N = arr . length ; int K = 13 ; System . out . println ( solve ( arr , N , K ) ) ; } }"],"references":["import java . util . Vector ; class GFG { static class Pair { private int first ; private int second ; Pair ( int first , int second ) { this . first = first ; this . second = second ; } public int getFirst ( ) { return first ; } public int getSecond ( ) { return second ; } } static int solve ( int [ ] Array , int N , int K ) { int [ ] count_Arr = new int [ N + 2 ] ; int factor = 1 ; int size = N ; while ( size > 0 ) { int start = 1 ; int end = size ; count_Arr [ 1 ] += factor * N ; count_Arr [ end + 1 ] -= factor * N ; factor ++ ; size \/= 2 ; } for ( int i = 2 ; i <= N ; i ++ ) count_Arr [ i ] += count_Arr [ i - 1 ] ; Vector < Pair > element = new Vector < > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { Pair x = new Pair ( Array [ i ] , count_Arr [ i + 1 ] ) ; element . add ( x ) ; } int start = 1 ; for ( int i = 0 ; i < N ; i ++ ) { int end = start + element . elementAt ( 0 ) . getSecond ( ) - 1 ; if ( K >= start && K <= end ) return element . elementAt ( i ) . getFirst ( ) ; start += element . elementAt ( i ) . getSecond ( ) ; } return - 1 ; } public static void main ( String [ ] args ) { int [ ] arr = { 2 , 4 , 5 , 1 } ; int N = arr . length ; int K = 13 ; System . out . println ( solve ( arr , N , K ) ) ; } }"],"bleu":0.618267362831604,"rouge_l":0.7796200345423143}
{"id":1325,"predictions":["import java . util . Scanner ; class Pattern { void display ( int n ) { for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j <= n \/ 2 ; j ++ ) { if ( ( j == 0 || j == n \/ 2 ) && i != 0 || i == 0 || i == n \/ 2 || i == n \/ 2 || i == n \/ 2 || i == n \/ 2 || i == n \/ 2 || i == n \/ 2 || i == n \/ 2 ) System . out . print ( \" * \" ) ; else System . out . print ( \" ▁ \" ) ; } } } public static void main ( String [ ] args ) { Pattern p = new Pattern ( ) ; p . display ( 7 ) ; } }"],"references":["import java . util . Scanner ; class PatternA { void display ( int n ) { for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j <= n \/ 2 ; j ++ ) { if ( ( j == 0 || j == n \/ 2 ) && i != 0 || i == 0 && j != 0 && j != n \/ 2 || i == n \/ 2 ) System . out . print ( \" * \" ) ; else System . out . print ( \" ▁ \" ) ; } System . out . println ( ) ; } } public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; PatternA a = new PatternA ( ) ; a . display ( 7 ) ; } }"],"bleu":0.7209993609508923,"rouge_l":0.7920483140412683}
{"id":1326,"predictions":["class GFG { static int maxSum ( int arr1 [ ] , int arr2 [ ] , int n ) { int originalParity = 0 , sum = 0 ; int minPositive = Integer . MAX_VALUE ; int maxPositive = Integer . MIN_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { minimumParity += arr2 [ i ] ; if ( arr1 [ i ] >= 0 ) { finalParity += arr1 [ i ] ; sum += arr1 [ i ] ; minPositive = Math . min ( minPositive , arr1 [ i ] ) ; } else { maxNegative = Math . max ( maxNegative , arr1 [ i ] ) ; } } if ( minimumParity % 2 == 0 ) return sum ; else { if ( minPos + maxNeg >= 0 ) return sum + maxNeg ; } else return sum - minPos ; } public static void main ( String [ ] args ) { int arr1 [ ] = { 2 , - 4 , 5 , 3 } ; int arr2 [ ] = { 0 , 1 , 0 , 1 } ; int n = arr1 . length ; System . out . println ( maxSum ( arr1 , arr2 , n ) ) ; } }"],"references":["class GFG { static int maxSum ( int arr1 [ ] , int arr2 [ ] , int n ) { int initialParity = 0 , finalParity = 0 ; int sum = 0 , minPositive = Integer . MAX_VALUE , maxNegative = Integer . MIN_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { initialParity += arr2 [ i ] ; if ( arr1 [ i ] >= 0 ) { finalParity += 1 ; sum += arr1 [ i ] ; minPositive = Math . min ( minPositive , arr1 [ i ] ) ; } else { maxNegative = Math . max ( maxNegative , arr1 [ i ] ) ; } } if ( initialParity % 2 == finalParity % 2 ) { return sum ; } else { if ( minPositive + maxNegative >= 0 ) { return sum + maxNegative ; } else { return sum - minPositive ; } } } public static void main ( String [ ] args ) { int arr1 [ ] = { 2 , - 4 , 5 , 3 } ; int arr2 [ ] = { 0 , 1 , 0 , 1 } ; int n = arr1 . length ; System . out . println ( maxSum ( arr1 , arr2 , n ) ) ; } }"],"bleu":0.796850988970396,"rouge_l":0.9094036697247706}
{"id":1327,"predictions":["import java . io . * ; class GFG { static void printLexabab2 ( int N ) { int i , count = 0 ; while ( count < N ) { int j_count = 0 ; for ( int j = 1 ; j <= Math . pow ( i , 1 ) ; j ++ ) { for ( int k = j + 1 ; k * j <= Math . pow ( i , 1 ) ; k ++ ) { if ( j * j * j * k + k * k == i ) count ++ ; } } if ( count_count == 2 ) count ++ ; System . out . println ( count + \" ▁ \" + i ) ; } } public static void main ( String [ ] args ) { int N = 5 ; printLexab2 ( N ) ; } }"],"references":["import java . util . * ; class GFG { public static void printTaxicab2 ( int N ) { int i = 1 , count = 0 ; while ( count < N ) { int int_count = 0 ; for ( int j = 1 ; j <= Math . pow ( i , 1.0 \/ 3 ) ; j ++ ) for ( int k = j + 1 ; k <= Math . pow ( i , 1.0 \/ 3 ) ; k ++ ) if ( j * j * j + k * k * k == i ) int_count ++ ; if ( int_count == 2 ) { count ++ ; System . out . println ( count + \" ▁ \" + i ) ; } i ++ ; } } public static void main ( String [ ] args ) { int N = 5 ; printTaxicab2 ( N ) ; } }"],"bleu":0.7225323901698231,"rouge_l":0.8767449074552786}
{"id":1328,"predictions":["import java . util . * ; class GFG { static void findIndex ( int a [ ] , int n , int key ) { int start = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == key ) { start = i ; break ; } } if ( start == - 1 ) { System . out . println ( \" K ▁ not ▁ present ▁ in ▁ array ▁ in ▁ array ▁ : ▁ \" + start ) ; return ; } int end = start ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( a [ i ] == key ) { end = i ; break ; } } if ( start == end ) { System . out . println ( \" The ▁ one ▁ key ▁ is ▁ present ▁ at ▁ index ▁ : ▁ \" + start ) ; } else { System . out . println ( \" Starting ▁ index : ▁ \" + end ) ; } } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 7 , 8 , 9 , 8 , 0 , 0 , 0 , 8 } ; int n = a . length ; int key = 8 ; findIndex ( a , n , key ) ; } }"],"references":["class Test { static void findIndex ( int a [ ] , int n , int key ) { int start = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == key ) { start = i ; break ; } } if ( start == - 1 ) { System . out . println ( \" Key ▁ not ▁ present ▁ in ▁ array \" ) ; return ; } int end = start ; for ( int i = n - 1 ; i >= start ; i -- ) { if ( a [ i ] == key ) { end = i ; break ; } } if ( start == end ) System . out . println ( \" Only ▁ one ▁ key ▁ is ▁ present ▁ at ▁ index ▁ : ▁ \" + start ) ; else { System . out . println ( \" Start ▁ index : ▁ \" + start ) ; System . out . println ( \" Last ▁ index : ▁ \" + end ) ; } } public static void main ( String args [ ] ) { int a [ ] = { 1 , 2 , 7 , 8 , 8 , 9 , 8 , 0 , 0 , 0 , 8 } ; int key = 8 ; findIndex ( a , a . length , key ) ; } }"],"bleu":0.8401017201003552,"rouge_l":0.8858441722439703}
{"id":1329,"predictions":["import java . util . * ; class GFG { static int ans = 0 ; static Vector < Integer > [ ] gr = new Vector [ 100005 ] ; static Vector < Integer > [ ] gr = new Vector < Integer > ( ) ; static void add_Edge ( int u , int v ) { gr [ u ] . add ( v ) ; gr [ v ] . add ( u ) ; } static void dfs ( int parent [ ] , int par , int x ) { if ( color [ parent ] != color [ par ] ) ans ++ ; for ( Integer it : gr [ child ] ) { if ( it == par ) continue ; } for ( Integer it : gr [ child ] ) { if ( it == par ) continue ; dfs ( it , child , col ) ; } } public static void main ( String [ ] args ) { int i , 1 , 2 ) { 0 , 1 , 3 , 2 , 2 , 3 } ; Vector < Integer > [ ] gr = new Vector < Integer > ( ) ; for ( int i = 0 ; i < 100005 ; i ++ ) gr [ i ] = new Vector < Integer > ( ) ; add_edge ( 1 , 2 ) ; add_edge ( 1 , 3 ) ; Add_edge ( 2 , 4 ) ; Add_Edge ( 2 , 5 ) ; Add_edge ( 3 , 6 ) ; System . out . println ( ans ) ; } }"],"references":["import java . util . * ; class GFG { static int ans = 0 ; static Vector < Vector < Integer > > gr = new Vector < Vector < Integer > > ( ) ; static void Add_Edge ( int u , int v ) { gr . get ( u ) . add ( v ) ; gr . get ( v ) . add ( u ) ; } static void dfs ( int child , int par , int color [ ] ) { if ( color [ child ] != color [ par ] ) ans ++ ; for ( int i = 0 ; i < gr . get ( child ) . size ( ) ; i ++ ) { if ( gr . get ( child ) . get ( i ) == par ) continue ; dfs ( gr . get ( child ) . get ( i ) , child , color ) ; } } public static void main ( String args [ ] ) { for ( int i = 0 ; i <= 10 ; i ++ ) gr . add ( new Vector < Integer > ( ) ) ; int color [ ] = { 0 , 1 , 2 , 3 , 2 , 2 , 3 } ; Add_Edge ( 1 , 2 ) ; Add_Edge ( 1 , 3 ) ; Add_Edge ( 2 , 4 ) ; Add_Edge ( 2 , 5 ) ; Add_Edge ( 3 , 6 ) ; dfs ( 1 , 0 , color ) ; System . out . println ( ans ) ; } }"],"bleu":0.5895328843190782,"rouge_l":0.6609577070954212}
{"id":1330,"predictions":["import java . io . * ; class GFG { static int longestFibonSubarray ( int n , int a [ ] ) { if ( n <= 2 ) return n ; int len = 2 ; int mx = Integer . MIN_VALUE ; for ( int i = 2 ; i < n ; i ++ ) { if ( a [ i ] == a [ i - 1 ] + a [ i - 2 ] ) len ++ ; else { len = 2 ; } mx = Math . max ( mx , len ) ; } return mx ; } public static void main ( String [ ] args ) { int n = 5 ; int a [ ] = { 2 , 4 , 6 , 10 , 2 } ; System . out . println ( longestFibonacciSubarray ( n , a ) ) ; } }"],"references":["class GFG { static int longestFibonacciSubarray ( int n , int a [ ] ) { if ( n <= 2 ) return n ; int len = 2 ; int mx = Integer . MIN_VALUE ; for ( int i = 2 ; i < n ; i ++ ) { if ( a [ i ] == a [ i - 1 ] + a [ i - 2 ] ) len ++ ; else len = 2 ; mx = Math . max ( mx , len ) ; } return mx ; } public static void main ( String [ ] args ) { int n = 5 ; int a [ ] = { 2 , 4 , 6 , 10 , 2 } ; System . out . println ( longestFibonacciSubarray ( n , a ) ) ; } }"],"bleu":0.905709992382335,"rouge_l":0.9686781294491292}
{"id":1331,"predictions":["import java . util . * ; class GFG { static class Node { int data ; Node left , right ; } ; static Node newNode ( int data ) { Node newNode = new Node ( ) ; newNode . data = data ; newNode . left = null ; newNode . right = null ; return newNode ; } static void insertMatrix ( Node root , Vector < Integer > anc ) { if ( root == null ) return 0 ; int data = root . data ; for ( int i = 0 ; i < anc . size ( ) ; i ++ ) { Vector < Integer > mat [ ] . add ( data ) ; } Vector < Integer > l = new Vector < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { mat [ an . get ( i ) ] . add ( 1 ) ; } ans = l ; } return ( l + r ) ; } static void constructMatrix ( Node root ) { Vector < Integer > um = new Vector < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { for ( int k = 0 ; k < n ; k ++ ) System . out . print ( mat [ i ] . get ( j ) + \" ▁ \" ) ; System . out . println ( ) ; } } public static void main ( String [ ] args ) { Node root = newNode ( 5 ) ; root . left . left = newNode ( 1 ) ; root . left . left = newNode ( 2 ) ; root . right . left = newNode ( 3 ) ; root . right . left = newNode ( 4 ) ; root . right . left = newNode ( 3 ) ; root . right . right . left = newNode ( 3 ) ; } }"],"references":["import java . util . * ; class GFG { public static void ancestorMatrix ( Node root , int matrix [ ] [ ] , int size ) { if ( root == null ) return ; ancestorMatrix ( root . left , matrix , size ) ; ancestorMatrix ( root . right , matrix , size ) ; if ( root . left != null ) { matrix [ root . data ] [ root . left . data ] = 1 ; for ( int i = 0 ; i < size ; i ++ ) { if ( matrix [ root . left . data ] [ i ] == 1 ) matrix [ root . data ] [ i ] = 1 ; } } if ( root . right != null ) { matrix [ root . data ] [ root . right . data ] = 1 ; for ( int i = 0 ; i < size ; i ++ ) { if ( matrix [ root . right . data ] [ i ] == 1 ) matrix [ root . data ] [ i ] = 1 ; } } } public static void main ( String [ ] args ) { Node tree_root = new Node ( 5 ) ; tree_root . left = new Node ( 1 ) ; tree_root . right = new Node ( 2 ) ; tree_root . left . left = new Node ( 0 ) ; tree_root . left . right = new Node ( 4 ) ; tree_root . right . left = new Node ( 3 ) ; int size = 6 ; int matrix [ ] [ ] = new int [ size ] [ size ] ; ancestorMatrix ( tree_root , matrix , size ) ; for ( int i = 0 ; i < size ; i ++ ) { for ( int j = 0 ; j < size ; j ++ ) { System . out . print ( matrix [ i ] [ j ] + \" ▁ \" ) ; } System . out . println ( ) ; } } static class Node { public int data ; public Node left , right ; public Node ( int data ) { this . data = data ; this . left = this . right = null ; } } }"],"bleu":0.4106578078967899,"rouge_l":0.43578625702015195}
{"id":1332,"predictions":["class GFG { static int OddDivCount ( int a , int b ) { int res = 0 ; for ( int i = a ; i <= b ; i ++ ) { int divCount = 0 ; for ( int j = 1 ; j <= i ; j ++ ) { if ( i % j == 0 ) { divCount ++ ; } } if ( divCount % 2 == 1 ) { res ++ ; } } return res ; } public static void main ( String [ ] args ) { int a = 1 , b = 10 ; System . out . println ( OddDivCount ( a , b ) ) ; } }"],"references":["import java . io . * ; class GFG { static int OddDivCount ( int a , int b ) { int res = 0 ; for ( int i = a ; i <= b ; ++ i ) { int divCount = 0 ; for ( int j = 1 ; j <= i ; ++ j ) { if ( i % j == 0 ) { ++ divCount ; } } if ( ( divCount % 2 ) != 0 ) { ++ res ; } } return res ; } public static void main ( String [ ] args ) { int a = 1 , b = 10 ; System . out . println ( OddDivCount ( a , b ) ) ; } }"],"bleu":0.8030234786099385,"rouge_l":0.9111511717744012}
{"id":1333,"predictions":["class GFG { static void findNDigitUtil ( int n , int sum , int [ ] out , int index ) { if ( index > n || sum < 0 ) return ; String f = \" \" ; if ( index == n ) { if ( sum == 0 ) return ; for ( int i = 0 ; i < out . print ( f + i ) ; i ++ ) { f = f + i ; } System . out . print ( f + \" ▁ \" ) ; } return ; } static void findNDigit ( int n , int sum [ ] , int sum ) { int [ ] out = new int [ n + 1 ] ; for ( int i = 0 ; i < 10 ; i ++ ) { out [ index ] = ( char ) ( i + '0' ) ; findNDigitUtil ( n , sum - i , out , 1 ) ; } static void findNDigitNums ( int n , int sum ) { int out [ ] = new int [ n + 1 ] ; for ( int i = 1 ; i < 10 ; i ++ ) { out [ 0 ] = ( char ) ( i + '0' ) ; findNDigitSumUtil ( n , sum - i , 1 ) ; } } public static void main ( String args [ ] ) { int n = 2 ; int sum = 3 ; findNDigitNums ( n , sum ) ; } }"],"references":["import java . io . * ; class GFG { static void findNDigitNumsUtil ( int n , int sum , char out [ ] , int index ) { if ( index > n || sum < 0 ) return ; if ( index == n ) { if ( sum == 0 ) { out [ index ] = '';  System . out . print ( out ) ; System . out . print ( \" ▁ \" ) ; } return ; } for ( int i = 0 ; i <= 9 ; i ++ ) { out [ index ] = ( char ) ( i + '0' ) ; findNDigitNumsUtil ( n , sum - i , out , index + 1 ) ; } } static void findNDigitNums ( int n , int sum ) { char [ ] out = new char [ n + 1 ] ; for ( int i = 1 ; i <= 9 ; i ++ ) { out [ 0 ] = ( char ) ( i + '0' ) ; findNDigitNumsUtil ( n , sum - i , out , 1 ) ; } } public static void main ( String [ ] args ) { int n = 2 , sum = 3 ; findNDigitNums ( n , sum ) ; } }"],"bleu":0.6267595770474896,"rouge_l":0.7864920836395217}
{"id":1334,"predictions":["import java . util . * ; class GFG { static int minimumIncrease ( int a , int b , int c ) { int arr [ ] = { a , b = a , c } ; Arrays . sort ( arr ) ; if ( arr [ 0 ] + arr [ 1 ] >= arr [ 2 ] ) return 0 ; else return arr [ 2 ] - ( arr [ 0 ] + arr [ 1 ] ) ; } public static void main ( String [ ] args ) { int a = 3 , b = 5 , c = 10 ; System . out . println ( minimumIncrease ( a , b , c ) ) ; } }"],"references":["import java . util . * ; class GFG { static int minimumIncrease ( int a , int b , int c ) { int arr [ ] = { a , b , c } ; Arrays . sort ( arr ) ; if ( arr [ 0 ] + arr [ 1 ] >= arr [ 2 ] ) return 0 ; else return arr [ 2 ] - ( arr [ 0 ] + arr [ 1 ] ) ; } public static void main ( String [ ] args ) { int a = 3 , b = 5 , c = 10 ; System . out . println ( minimumIncrease ( a , b , c ) ) ; } }"],"bleu":0.9724282508667406,"rouge_l":0.9935367114788004}
{"id":1335,"predictions":["class GFG { public static int breakSum ( int n ) { if ( n == 0 || n == 1 ) return n ; return Math . max ( ( breakSum ( n \/ 2 ) + breakSum ( n \/ 3 ) + breakSum ( n \/ 4 ) ) , n ) ; } public static void main ( String [ ] args ) { int n = 12 ; System . out . println ( breakSum ( n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int breakSum ( int n ) { if ( n == 0 || n == 1 ) return n ; return Math . max ( ( breakSum ( n \/ 2 ) + breakSum ( n \/ 3 ) + breakSum ( n \/ 4 ) ) , n ) ; } public static void main ( String [ ] args ) { int n = 12 ; System . out . println ( breakSum ( n ) ) ; } }"],"bleu":0.9061376034292485,"rouge_l":0.9498460981350716}
{"id":1336,"predictions":["class GFG { static int maxLengthSquare ( int row , int column [ ] [ ] , int k ) { int [ ] [ ] sum = new int [ row + 1 ] [ column + 1 ] ; int cur_max = 1 ; int max = 0 ; for ( int i = 1 ; i <= row ; i ++ ) { for ( int j = 1 ; j <= column ; j ++ ) { sum [ i ] [ j ] = sum [ i - 1 ] [ j - 1 ] + sum [ i - 1 ] [ j - 1 ] ; } if ( i >= cur_max && j >= cur_max && sum [ i - cur_max ] [ j ] - sum [ i - cur_max ] [ j - cur_max ] > k ) { max = cur_max ; cur_max ++ ; } } return max ; } public static void main ( String [ ] args ) { int row = 4 , column = 4 ; int matrix [ ] [ ] = { { 1 , 1 , 1 , 1 } , { 1 , 0 , 0 , 0 } , { 1 , 0 , 0 , 0 } } ; int k = 6 ; int ans = maxLengthSquare ( row , column , matrix , k ) ; System . out . println ( ans ) ; } }"],"references":["import java . util . * ; class GFG { public static int maxLengthSquare ( int row , int column , int [ ] [ ] arr , int k ) { int sum [ ] [ ] = new int [ row + 1 ] [ column + 1 ] ; int cur_max = 1 ; int max = 0 ; for ( int i = 1 ; i <= row ; i ++ ) { for ( int j = 1 ; j <= column ; j ++ ) { sum [ i ] [ j ] = sum [ i - 1 ] [ j ] + sum [ i ] [ j - 1 ] + arr [ i - 1 ] [ j - 1 ] - sum [ i - 1 ] [ j - 1 ] ; if ( i >= cur_max && j >= cur_max && sum [ i ] [ j ] - sum [ i - cur_max ] [ j ] - sum [ i ] [ j - cur_max ] + sum [ i - cur_max ] [ j - cur_max ] <= k ) { max = cur_max ++ ; } } } return max ; } public static void main ( String args [ ] ) { int row = 4 , column = 4 ; int matrix [ ] [ ] = { { 1 , 1 , 1 , 1 } , { 1 , 0 , 0 , 0 } , { 1 , 0 , 0 , 0 } , { 1 , 0 , 0 , 0 } } ; int k = 6 ; int ans = maxLengthSquare ( row , column , matrix , k ) ; System . out . println ( ans ) ; } }"],"bleu":0.7367294356022747,"rouge_l":0.8607383516673388}
{"id":1337,"predictions":["class GFG { static int minimumChanges ( int arr [ ] , int n ) { int differences = 0 ; int i = 0 ; while ( i < n ) { if ( arr [ i ] == 1 ) { for ( int j = i + 1 ; j < n ; j ++ ) { if ( arr [ j ] == 0 ) break ; i ++ ; } i = j - 1 ; } } return differences ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 0 , 0 , 0 , 1 , 0 , 1 } ; int n = arr . length ; System . out . println ( \" Minimum ▁ operations : ▁ \" + minimumChanges ( arr , n ) ) ; } }"],"references":["class GFG { static int minimumChanges ( int arr [ ] , int n ) { int i ; int changes = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 1 ) { int j ; for ( j = i + 1 ; j < n ; j ++ ) { if ( arr [ j ] == 0 ) break ; } i = j - 1 ; changes ++ ; } } return changes ; } public static void main ( String args [ ] ) { int arr [ ] = { 1 , 1 , 0 , 0 , 0 , 1 , 0 , 1 , 1 } ; int n = arr . length ; System . out . println ( \" Minimum ▁ operations : ▁ \" + minimumChanges ( arr , n ) ) ; } }"],"bleu":0.8077252542646471,"rouge_l":0.9026677782409339}
{"id":1338,"predictions":["import java . util . * ; class GFG { static int MAX = 100005 ; static int addPrimes ( ) { int n = MAX + 1 ; Vector < Integer > prime = new Vector < > ( ) ; for ( int i = 0 ; i < n + 1 ; i ++ ) prime . add ( 0 ) ; for ( int p = 2 ; p * p <= n ; p ++ ) { if ( prime . get ( p ) == true ) { for ( int i = p * 2 ; i < n ; i += p ) prime . add ( i ) ; } } ArrayList < Integer > ans = new ArrayList < Integer > ( ) ; for ( int p = 2 ; p <= n ; p ++ ) { if ( prime . get ( p ) == true ) ans . add ( p ) ; } return ans ; } static boolean is_prime ( int n ) { int sum = 0 ; for ( int i = 0 ; i < v . size ( ) ; i ++ ) { int flag = 1 ; int a = v . get ( i ) ; while ( a != 0 ) { int d = a % 10 ; a = a \/ 10 ; if ( isPrime ( d ) ) { flag = 0 ; break ; } } if ( flag == 1 ) { n -- sum ; sum = sum + v . get ( i ) ; } if ( n == 0 ) break ; } return sum ; } public static void main ( String [ ] args ) { int n = 7 ; System . out . println ( find_Sum ( n ) ) ; } }"],"references":["import java . util . * ; class GFG { static int MAX = 100005 ; static Vector < Integer > addPrimes ( ) { int n = MAX ; boolean [ ] prime = new boolean [ n + 1 ] ; Arrays . fill ( prime , true ) ; for ( int p = 2 ; p * p <= n ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * p ; i <= n ; i += p ) prime [ i ] = false ; } } Vector < Integer > ans = new Vector < Integer > ( ) ; for ( int p = 2 ; p <= n ; p ++ ) if ( prime [ p ] ) ans . add ( p ) ; return ans ; } static boolean is_prime ( int n ) { return ( n == 3 || n == 5 || n == 7 ) ; } static int find_Sum ( int n ) { int sum = 0 ; Vector < Integer > v = addPrimes ( ) ; for ( int i = 0 ; i < v . size ( ) && n > 0 ; i ++ ) { int flag = 1 ; int a = v . get ( i ) ; while ( a != 0 ) { int d = a % 10 ; a = a \/ 10 ; if ( is_prime ( d ) ) { flag = 0 ; break ; } } if ( flag == 1 ) { n -- ; sum = sum + v . get ( i ) ; } } return sum ; } public static void main ( String [ ] args ) { int n = 7 ; System . out . println ( find_Sum ( n ) ) ; } }"],"bleu":0.7429478901049426,"rouge_l":0.8074387236398409}
{"id":1339,"predictions":["class GFG { static void Nicuo_sum ( int n ) { int sum = 0 ; for ( int k = 1 ; k <= n ; k ++ ) sum += k * k * k ; int triNo = n * ( n + 1 ) \/ 2 ; if ( sum == triNo * triNo ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } public static void main ( String [ ] args ) { int n = 5 ; KomachUum ( n ) ; } }"],"references":["import java . io . * ; class GFG { static void NicomachuTheorum_sum ( int n ) { int sum = 0 ; for ( int k = 1 ; k <= n ; k ++ ) sum += k * k * k ; int triNo = n * ( n + 1 ) \/ 2 ; if ( sum == triNo * triNo ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } public static void main ( String [ ] args ) { int n = 5 ; NicomachuTheorum_sum ( n ) ; } }"],"bleu":0.8912839378395859,"rouge_l":0.9443286692467997}
{"id":1340,"predictions":["class GFG { static int MAX = 1000 ; static int sequence [ ] = new int [ MAX + 1 ] ; static void vanEckSequence ( ) { for ( int i = 0 ; i < MAX ; i ++ ) { sequence [ i ] = 0 ; } for ( int i = 0 ; i < MAX ; i ++ ) { for ( int j = i - 1 ; j >= 0 ; j -- ) { if ( sequence [ j ] == sequence [ i ] ) { sequence [ i + 1 ] = i - j ; break ; } } } } static int getNthTerm ( int n ) { return sequence [ n ] ; } public static void main ( String [ ] args ) { vanEckSequence ( ) ; int n = 6 ; System . out . println ( getNthTerm ( n ) ) ; n = 100 ; System . out . println ( getNthTerm ( n ) ) ; n = 100 ; System . out . println ( getNthTerm ( n ) ) ; } }"],"references":["class GFG { static int MAX = 1000 ; static int sequence [ ] = new int [ MAX ] ; static void vanEckSequence ( ) { for ( int i = 0 ; i < MAX - 1 ; i ++ ) { sequence [ i ] = 0 ; } for ( int i = 0 ; i < MAX - 1 ; i ++ ) { for ( int j = i - 1 ; j >= 0 ; j -- ) { if ( sequence [ j ] == sequence [ i ] ) { sequence [ i + 1 ] = i - j ; break ; } } } } static int getNthTerm ( int n ) { return sequence [ n ] ; } public static void main ( String [ ] args ) { vanEckSequence ( ) ; int n = 6 ; System . out . println ( getNthTerm ( n ) ) ; n = 100 ; System . out . println ( getNthTerm ( n ) ) ; } }"],"bleu":0.8852733524638479,"rouge_l":0.9478535686067949}
{"id":1341,"predictions":["class GFG { static int maximumPoints ( int a [ ] , int n ) { int pos [ ] = new int [ n ] ; int count = 0 ; int swaps = 0 ; for ( int i = 0 ; i < n ; i ++ ) { pos [ a [ i ] = i ; } for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == i ) { count ++ ; } else if ( swapping == 0 && pos [ i ] == a [ i ] ) { count += 2 ; swap = 1 ; } } if ( swaps == 0 && count < n - 1 ) { count += 1 ; } return count ; } public static void main ( String [ ] args ) { int a [ ] = { 0 , 1 , 3 , 4 , 2 } ; int n = a . length ; System . out . print ( maximumPoints ( a , n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int maximumFixedPoints ( int a [ ] , int n ) { int i , count = 0 , swapped = 0 ; int pos [ ] = new int [ n ] ; for ( i = 0 ; i < n ; i ++ ) pos [ a [ i ] ] = i ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] == i ) count ++ ; else if ( swapped == 0 && pos [ i ] == a [ i ] ) { count += 2 ; swapped = 1 ; } } if ( swapped == 0 && count < n - 1 ) count ++ ; return count ; } public static void main ( String [ ] args ) { int [ ] a = { 0 , 1 , 3 , 4 , 2 } ; int n = a . length ; System . out . println ( maximumFixedPoints ( a , n ) ) ; } }"],"bleu":0.7440732408031561,"rouge_l":0.859375}
{"id":1342,"predictions":["import java . util . * ; class GFG { public static void countCefficients ( int amount ) { int [ ] jumps = { 2000 , 500 , 200 , 100 , 50 , 20 , 1 } ; int n = 8 ; countCount = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( i >= i ) { int j = amount \/ i ; amount = amount - j * i ; System . out . println ( i + \" ▁ : ▁ \" + i + \" ▁ : ▁ \" + j ) ; } } return ; } public static void main ( String [ ] args ) { int sum = 868 ; countCefficients ( amount ) ; } }"],"references":["import java . util . * ; import java . lang . * ; public class GfG { public static void countCurrency ( int amount ) { int [ ] notes = new int [ ] { 2000 , 500 , 200 , 100 , 50 , 20 , 10 , 5 , 1 } ; int [ ] noteCounter = new int [ 9 ] ; for ( int i = 0 ; i < 9 ; i ++ ) { if ( amount >= notes [ i ] ) { noteCounter [ i ] = amount \/ notes [ i ] ; amount = amount - noteCounter [ i ] * notes [ i ] ; } } System . out . println ( \" Currency ▁ Count ▁ - > \" ) ; for ( int i = 0 ; i < 9 ; i ++ ) { if ( noteCounter [ i ] != 0 ) { System . out . println ( notes [ i ] + \" ▁ : ▁ \" + noteCounter [ i ] ) ; } } } public static void main ( String argc [ ] ) { int amount = 868 ; countCurrency ( amount ) ; } }"],"bleu":0.33911517445430234,"rouge_l":0.6357045763479838}
{"id":1343,"predictions":["class GFG { static int MAX_CHAR = 256 ; static boolean isPalindrome ( String str , int l , int h ) { while ( h > l ) { if ( str . charAt ( l ) != str . charAt ( h ) ) { l ++ ; h -- ; } } return true ; } static boolean check ( String str ) { int n = str . length ( ) ; int [ ] freq = new int [ MAX_CHAR ] ; for ( int i = 0 ; i < n ; i ++ ) { freq [ str . charAt ( i ) ] ++ ; if ( freq [ str . charAt ( i ) ] > 2 ) { return true ; } } int k = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( freq [ str . charAt ( i ) ] > 1 ) { str [ k ++ ] = str . charAt ( i ) ; } } str = 0 ; if ( isPalindrome ( str , 0 , k - 1 ) ) { if ( ( k & 1 ) == str . charAt ( k \/ 2 - 1 ) ) { return str . charAt ( k \/ 2 ) ; } return false ; } return true ; } public static void main ( String [ ] args ) { String S = \" ABCABD \" ; if ( check ( str ) ) { System . out . println ( \" Repeated ▁ Subsequence ▁ Exists \" ) ; } else { System . out . println ( \"Repeated ▁ Subsequence ▁ Exists \" ) ; } } }"],"references":["class GFG { static int MAX_CHAR = 256 ; public static boolean isPalindrome ( String str , int l , int h ) { while ( h > l ) if ( str . charAt ( l ++ ) != str . charAt ( h -- ) ) return false ; return true ; } public static boolean check ( String str ) { int n = str . length ( ) ; int [ ] freq = new int [ MAX_CHAR ] ; for ( int i = 0 ; i < n ; i ++ ) { freq [ str . charAt ( i ) ] ++ ; if ( freq [ str . charAt ( i ) ] > 2 ) return true ; } int k = 0 ; for ( int i = 0 ; i < n ; i ++ ) if ( freq [ str . charAt ( i ) ] > 1 ) str . replace ( str . charAt ( k ++ ) , str . charAt ( i ) ) ; str . replace ( str . charAt ( k ) , ' \\0' ) ; if ( isPalindrome ( str , 0 , k - 1 ) ) { if ( ( k & 1 ) == 1 ) { if ( k \/ 2 >= 1 ) return ( str . charAt ( k \/ 2 ) == str . charAt ( k \/ 2 - 1 ) ) ; } return false ; } return true ; } public static void main ( String [ ] args ) { String str = \" ABCABD \" ; if ( check ( str ) ) System . out . println ( \" Repeated ▁ Subsequence ▁ Exists \" ) ; else System . out . println ( \" Repeated ▁ Subsequence \" + \" ▁ Doesn ' t ▁ Exists \" ) ; } }"],"bleu":0.7490131576175318,"rouge_l":0.8550957894190332}
{"id":1344,"predictions":["class GFG { static int N = 100005 ; static int mod = 1000000007 ; static int [ ] cnt = new int [ N ] ; static void Divisors ( ) { for ( int i = 1 ; i < N ; i ++ ) { for ( int j = 1 ; j < N \/ i ; j ++ ) { cnt [ i * j ] ++ ; } } } static void Sumofdivisors ( int A , int B , int C ) { int sum = 0 ; Divisors ( ) ; for ( int i = 1 ; i <= A ; i ++ ) { for ( int j = 1 ; j <= B ; j ++ ) { for ( int k = 1 ; k <= C ; k ++ ) { int x = i * j * k ; sum += cnt [ x ] ; if ( sum >= mod ) { sum -= mod ; } } } } return sum ; } public static void main ( String [ ] args ) { int A = 5 , B = 6 , C = 7 ; System . out . println ( Sumofdivisors ( A , B , C ) ) ; } }"],"references":["class GFG { static int N = 100005 ; static int mod = 1000000007 ; static int cnt [ ] = new int [ N ] ; static void Divisors ( ) { for ( int i = 1 ; i < N ; i ++ ) { for ( int j = 1 ; j * i < N ; j ++ ) { cnt [ i * j ] ++ ; } } } static int Sumofdivisors ( int A , int B , int C ) { int sum = 0 ; Divisors ( ) ; for ( int i = 1 ; i <= A ; i ++ ) { for ( int j = 1 ; j <= B ; j ++ ) { for ( int k = 1 ; k <= C ; k ++ ) { int x = i * j * k ; sum += cnt [ x ] ; if ( sum >= mod ) { sum -= mod ; } } } } return sum ; } public static void main ( String [ ] args ) { int A = 5 , B = 6 , C = 7 ; System . out . println ( Sumofdivisors ( A , B , C ) ) ; } }"],"bleu":0.9518998797169181,"rouge_l":0.9819004524886877}
{"id":1345,"predictions":["import java . io . * ; class GFG { static int factorial ( int N ) { int fact = 1 ; for ( int i = 1 ; i <= N ; i ++ ) fact = fact * i ; return fact ; } static int nthTerm ( int N ) { return ( factorial ( N + 1 ) \/ 2 ) ; } public static void main ( String [ ] args ) { int N = 6 ; System . out . println ( nthTerm ( N ) ) ; } }"],"references":["import java . util . * ; import java . lang . * ; import java . io . * ; class GFG { static int factorial ( int N ) { int fact = 1 ; for ( int i = 1 ; i <= N ; i ++ ) fact = fact * i ; return fact ; } static int nthTerm ( int N ) { return ( factorial ( N + 1 ) \/ 2 ) ; } public static void main ( String args [ ] ) { int N = 6 ; System . out . println ( nthTerm ( N ) ) ; } }"],"bleu":0.8352743708395624,"rouge_l":0.9128355445850046}
{"id":1346,"predictions":["import java . util . * ; class GFG { static void prefix ( char [ ] str ) { int k = 1 ; int n = str . length ; Vector < String > g = new Vector < String > ( ) ; int flag = 0 ; for ( int i = 1 ; i < n ; i ++ ) { if ( str . charAt ( i ) == str . charAt ( 0 ) ) { g . add ( i ) ; flag = 1 ; } } if ( flag == 0 ) { System . out . print ( str ) ; } else { int len = g . length ( ) ; while ( k < g . size ( ) ) { int cnt = 0 ; for ( int j = 0 ; j < len ; j ++ ) { if ( str [ g . get ( j ) + k ) { cnt ++ ; } } if ( cnt == len ) { k ++ ; } else { break ; } } for ( int i = 0 ; i <= k ; i ++ ) { System . out . print ( str . charAt ( i ) ) ; } System . out . println ( \" \" ) ; } } public static void main ( String [ ] args ) { String str = \" abcab \" ; prefix ( str ) ; } }"],"references":["import java . util . * ; class GFG { static void prefix ( char [ ] str ) { int k = 1 , j ; int n = str . length ; Vector < Integer > g = new Vector < > ( ) ; int flag = 0 ; for ( int i = 1 ; i < n ; i ++ ) { if ( str [ i ] == str [ 0 ] ) { g . add ( i ) ; flag = 1 ; } } if ( flag == 0 ) { System . out . println ( String . valueOf ( str ) ) ; } else { int len = g . size ( ) ; while ( k < g . get ( 0 ) ) { int cnt = 0 ; for ( j = 0 ; j < len ; j ++ ) { if ( ( g . get ( j ) + k ) < n && str [ g . get ( j ) + k ] == str [ k ] ) { cnt ++ ; } } if ( cnt == len ) { k ++ ; } else { break ; } } for ( int i = 0 ; i < k ; i ++ ) { System . out . print ( str [ i ] ) ; } System . out . println ( ) ; } } public static void main ( String args [ ] ) { String str = \" abcab \" ; prefix ( str . toCharArray ( ) ) ; } }"],"bleu":0.7697225181424967,"rouge_l":0.8728022311143447}
{"id":1347,"predictions":["import java . io . * ; class GFG { static int findTerm ( int n ) { int term = 1 ; if ( n == 1 ) return n ; else { int term = 7 * 2 + ( i - 1 ) ; for ( int i = 2 ; i <= n ; i ++ ) term = term * 2 + ( i - 1 ) ; } return term ; } public static void main ( String [ ] args ) { System . out . println ( findTerm ( 5 ) ) ; } }"],"references":["import java . lang . * ; class GFG { static int findTerm ( int n ) { if ( n == 1 ) return n ; else { int term = 7 ; for ( int i = 2 ; i <= n ; i ++ ) term = term * 2 + ( i - 1 ) ; return term ; } } public static void main ( String [ ] args ) { int n = 5 ; System . out . print ( findTerm ( n ) ) ; } }"],"bleu":0.7331088666142983,"rouge_l":0.8750625521267723}
{"id":1348,"predictions":["class GFG { static int INT_SIZE = 32 ; static int Right_most_setbit ( int num ) { int pos = 1 ; for ( int i = 0 ; i < INT_SIZE ; i ++ ) { if ( ( num & ( 1 << i ) ) == 0 ) pos ++ ; else break ; } return pos ; } public static void main ( String [ ] args ) { int num = 18 ; int pos = Right_most_setbit ( num ) ; System . out . println ( pos ) ; } }"],"references":["public class GFG { static int INT_SIZE = 32 ; static int Right_most_setbit ( int num ) { int pos = 1 ; for ( int i = 0 ; i < INT_SIZE ; i ++ ) { if ( ( num & ( 1 << i ) ) == 0 ) pos ++ ; else break ; } return pos ; } public static void main ( String [ ] args ) { int num = 18 ; int pos = Right_most_setbit ( num ) ; System . out . println ( pos ) ; } }"],"bleu":0.9897436801154439,"rouge_l":0.9939526289265915}
{"id":1349,"predictions":["class GFG { static int subarrayXor ( int arr [ ] , int n , int m ) { int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int xorSum = 0 ; for ( int j = i ; j < n ; j ++ ) { xorSum = xorSum ^ arr [ j ] ; if ( xorSum == m ) ans ++ ; } } return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 4 , 2 , 2 , 6 , 4 } ; int n = arr . length ; int m = 6 ; System . out . print ( \" Number ▁ of ▁ subarray ▁ having ▁ given ▁ XOR ▁ is ▁ \" + subarrayXor ( arr , n , m ) ) ; } }"],"references":["public class GFG { static long subarrayXor ( int arr [ ] , int n , int m ) { long ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int xorSum = 0 ; for ( int j = i ; j < n ; j ++ ) { xorSum = xorSum ^ arr [ j ] ; if ( xorSum == m ) ans ++ ; } } return ans ; } public static void main ( String args [ ] ) { int [ ] arr = { 4 , 2 , 2 , 6 , 4 } ; int n = arr . length ; int m = 6 ; System . out . println ( \" Number ▁ of ▁ subarrays \" + \" ▁ having ▁ given ▁ XOR ▁ is ▁ \" + subarrayXor ( arr , n , m ) ) ; } }"],"bleu":0.8675511095887587,"rouge_l":0.9478634226129624}
{"id":1350,"predictions":["class GFG { static int TrialDivision ( int N ) { int i = 2 ; int k = ( int ) Math . sqrt ( N ) ; while ( i <= k ) { if ( N % i == 0 ) return 0 ; i ++ ; } return 1 ; } public static void main ( String [ ] args ) { int N = 49 ; int p =RepeatDivision ( N ) ; if ( p ) System . out . println ( \" Prime \" ) ; else System . out . println ( \" Composite \" ) ; } }"],"references":["import java . util . * ; class GFG { static int TrialDivision ( int N ) { int i = 2 ; int k = ( int ) Math . ceil ( Math . sqrt ( N ) ) ; while ( i <= k ) { if ( N % i == 0 ) return 0 ; i += 1 ; } return 1 ; } public static void main ( String [ ] args ) { int N = 49 ; int p = TrialDivision ( N ) ; if ( p != 0 ) System . out . print ( \" Prime \" ) ; else System . out . print ( \" Composite \" ) ; } }"],"bleu":0.7574043927823855,"rouge_l":0.8845558214838799}
{"id":1351,"predictions":["class GFG { static int count ( int arr [ ] , int N , int K ) { int count = 0 ; int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( arr [ i ] == K ) { count ++ ; } else { ans += ( count * ( count + 1 ) ) \/ 2 ; count = 0 ; } } ans = ans + ( count * ( count + 1 ) ) \/ 2 ; return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 0 , 0 , 1 , 1 , 0 , 0 } ; int N = arr . length ; int K = 0 ; System . out . println ( count ( arr , N , K ) ) ; } }"],"references":["class GFG { static int count ( int arr [ ] , int N , int K ) { int count = 0 , ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( arr [ i ] == K ) { count = count + 1 ; } else { ans += ( count * ( count + 1 ) ) \/ 2 ; count = 0 ; } } ans = ans + ( count * ( count + 1 ) ) \/ 2 ; return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 0 , 0 , 1 , 1 , 0 , 0 } ; int N = arr . length ; int K = 0 ; System . out . print ( count ( arr , N , K ) ) ; } }"],"bleu":0.9353668979928713,"rouge_l":0.9682539682539684}
{"id":1352,"predictions":["import java . io . * ; class GFG { static int centered_heagonal_num ( int n ) { return ( 7 * n * n - 1 * n + 2 ) \/ 2 ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( centered_he ▁ number ▁ : ▁ \" + centered_heagonal_num ( n ) ) ; } }"],"references":["import java . io . * ; class GFG { static long centered_heptagonal_num ( long n ) { return ( 7 * n * n - 7 * n + 2 ) \/ 2 ; } public static void main ( String [ ] args ) { long n = 5 ; System . out . println ( n + \" th ▁ Centered ▁ \" + \" heptagonal ▁ number ▁ : ▁ \" + centered_heptagonal_num ( n ) ) ; } }"],"bleu":0.6873435330130395,"rouge_l":0.8385309807139927}
{"id":1353,"predictions":["import java . util . * ; class GFG { static double PI = 3.14159265 ; static double findsolution ( int d , int h , int m , int n ) { double k = ( 4 * m ) \/ ( pie * d * d ) ; if ( n > k ) return - 1 ; double ans = ( h \/ ( k - n ) ) ; return ans ; } public static void main ( String args [ ] ) { int d = 1 , h = 1 , m = 1 ; int n = 1 ; System . out . print ( findsolution ( d , h , m , n ) ) ; } }"],"references":["class GFG { static double pie = 3.1415926535897 ; static double findsolution ( double d , double h , double m , double n ) { double k = ( 4 * m ) \/ ( pie * d * d ) ; if ( n > k ) return - 1 ; double ans = ( h \/ ( k - n ) ) ; return ans ; } public static void main ( String [ ] args ) { double d = 1 , h = 1 , m = 1 , n = 1 ; System . out . printf ( \" % .5f \" , findsolution ( d , h , m , n ) ) ; } }"],"bleu":0.7312249353083288,"rouge_l":0.8693586698337291}
{"id":1354,"predictions":["class GfG { static int countNum ( int N , int arr [ ] ) { int sum = 0 ; int count = 0 ; for ( int i = 0 ; i < N ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < N ; i ++ ) if ( ( sum - arr [ i ] ) % arr [ i ] == 0 ) count ++ ; return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 10 , 4 , 6 , 7 } ; int n = arr . length ; System . out . println ( countNum ( n , arr ) ) ; } }"],"references":["class GFG { static int countNum ( int N , int arr [ ] ) { int sum = 0 , count = 0 ; for ( int i = 0 ; i < N ; i ++ ) { sum += arr [ i ] ; } for ( int i = 0 ; i < N ; i ++ ) { if ( ( sum - arr [ i ] ) % arr [ i ] == 0 ) { count ++ ; } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 10 , 4 , 6 , 7 } ; int n = arr . length ; System . out . println ( countNum ( n , arr ) ) ; } }"],"bleu":0.8722300574164115,"rouge_l":0.9574792081527468}
{"id":1355,"predictions":["class GFG { static int CountTrailingZeros ( int n ) { byte [ ] bit = new byte [ n ] ; bit [ 0 ] = bit [ n - 1 ] ; int zero = 0 ; for ( int i = 0 ; i < bit . length ; i ++ ) { if ( bit [ i ] == '0' ) zero ++ ; else break ; } return zero ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( CountTrailingZeros ( n ) ) ; } }"],"references":["import java . util . * ; import java . lang . * ; import java . io . * ; class GFG { static int CountTrailingZeros ( int n ) { String bit = Integer . toBinaryString ( n ) ; StringBuilder bit1 = new StringBuilder ( ) ; bit1 . append ( bit ) ; bit1 = bit1 . reverse ( ) ; int zero = 0 ; for ( int i = 0 ; i < 64 ; i ++ ) { if ( bit1 . charAt ( i ) == '0' ) zero ++ ; else break ; } return zero ; } public static void main ( String [ ] args ) { int n = 4 ; int ans = CountTrailingZeros ( n ) ; System . out . println ( ans ) ; } }"],"bleu":0.47534196492153635,"rouge_l":0.6287039422829169}
{"id":1356,"predictions":["class GFG { static void printConsecutive ( int last , int first ) { System . out . print ( first ) ; first ++ ; for ( int x = first ; x <= last ; x ++ ) System . out . print ( \" ▁ + x ) ; for ( int i = 1 ; i <= last ; i ++ ) { for ( int first = 0 ; first <= last ; first ++ ) { if ( 2 * N == ( last - first + 1 ) * ( last + 1 ) ) { System . out . print ( N + \" ▁ = ▁ \" ) ; printConsecutive ( last , first + 1 ) ; return ; } } } System . out . print ( \" - 1\" ) ; } public static void main ( String [ ] args ) { int n = 12 ; findConsecutive ( n ) ; } }"],"references":["class GfG { static void printConsecutive ( int last , int first ) { System . out . print ( first ++ ) ; for ( int x = first ; x <= last ; x ++ ) System . out . print ( \" ▁ + ▁ \" + x ) ; } static void findConsecutive ( int N ) { for ( int last = 1 ; last < N ; last ++ ) { for ( int first = 0 ; first < last ; first ++ ) { if ( 2 * N == ( last - first ) * ( last + first + 1 ) ) { System . out . printf ( N + \" ▁ = ▁ \" ) ; printConsecutive ( last , first + 1 ) ; return ; } } } System . out . print ( \" - 1\" ) ; } public static void main ( String [ ] args ) { int n = 12 ; findConsecutive ( n ) ; } }"],"bleu":0.8016447808546373,"rouge_l":0.8964634493220823}
{"id":1357,"predictions":["class GFG { static int LCSubStr ( String X , String Y , int m , int n ) { int LCSuffix [ ] [ ] = new int [ m + 1 ] [ n + 1 ] ; int result = 0 ; for ( int i = 0 ; i <= m ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( i == 0 || j == 0 ) LCS [ i ] [ j ] = 0 ; else if ( X . charAt ( i - 1 ) == Y . charAt ( j - 1 ) ) { LCSuff [ i ] [ j ] = LCSuffix [ i - 1 ] [ j - 1 ] + 1 ; result = Math . max ( result , LCS . [ i ] [ j ] ) ; } else { LCSuff [ i ] [ j ] = 0 ; } } } return result ; } public static void main ( String [ ] args ) { String X = \" OddSetGeeksforGeeks . toCharArray ( ) ; String Y = \" new String ( ) ; int m = Y . length ( ) ; System . out . println ( \" Length ▁ of ▁ Longest ▁ Substring ▁ is ▁ \" + LCSubStr ( X , Y , m , n ) ) ; } }"],"references":["public class LongestCommonSubSequence { static int LCSubStr ( char X [ ] , char Y [ ] , int m , int n ) { int LCStuff [ ] [ ] = new int [ m + 1 ] [ n + 1 ] ; int result = 0 ; for ( int i = 0 ; i <= m ; i ++ ) { for ( int j = 0 ; j <= n ; j ++ ) { if ( i == 0 || j == 0 ) LCStuff [ i ] [ j ] = 0 ; else if ( X [ i - 1 ] == Y [ j - 1 ] ) { LCStuff [ i ] [ j ] = LCStuff [ i - 1 ] [ j - 1 ] + 1 ; result = Integer . max ( result , LCStuff [ i ] [ j ] ) ; } else LCStuff [ i ] [ j ] = 0 ; } } return result ; } public static void main ( String [ ] args ) { String X = \" OldSite : GeeksforGeeks . org \" ; String Y = \" NewSite : GeeksQuiz . com \" ; int m = X . length ( ) ; int n = Y . length ( ) ; System . out . println ( \" Length ▁ of ▁ Longest ▁ Common ▁ Substring ▁ is ▁ \" + LCSubStr ( X . toCharArray ( ) , Y . toCharArray ( ) , m , n ) ) ; } }"],"bleu":0.7150867458976585,"rouge_l":0.8435476774152996}
{"id":1358,"predictions":["class GfG { static int getPassingCars ( int [ ] A , int n ) { int result = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( A [ i ] == 0 ) { for ( int j = i + 1 ; j < n ; j ++ ) { if ( A [ j ] != 0 ) result ++ ; } } } return result ; } public static void main ( String [ ] args ) { int A [ ] = { 0 , 1 , 0 , 1 , 1 } ; int n = A . length ; System . out . println ( getPassingCars ( A , n ) ) ; } }"],"references":["class GFG { static int getPassingCars ( int [ ] A , int n ) { int result = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( A [ i ] == 0 ) { for ( int j = i + 1 ; j < n ; j ++ ) if ( A [ j ] == 1 ) result ++ ; } } return result ; } public static void main ( String [ ] args ) { int [ ] A = { 0 , 1 , 0 , 1 , 1 } ; int n = A . length ; System . out . println ( getPassingCars ( A , n ) ) ; } }"],"bleu":0.9058972042140687,"rouge_l":0.9639838294744579}
{"id":1359,"predictions":["class Solution { public static void mainNode ans ; }"],"references":["public class DLL { Node head ; class Node { int data ; Node prev ; Node next ; Node ( int d ) { data = d ; } } }"],"bleu":0.021860805282114964,"rouge_l":0.17403708987161198}
{"id":1360,"predictions":["class GFG { static int search ( int arr [ ] , int n , int x ) { int i ; for ( i = 0 ; i < n ; i ++ ) if ( arr [ i ] == x ) return i ; return - 1 ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 10 , 30 , 15 } ; int x = 30 ; System . out . print ( x + \" ▁ is ▁ present ▁ at ▁ index ▁ \" + search ( arr , x ) ) ; } }"],"references":["public class GFG { static int search ( int arr [ ] , int n , int x ) { int i ; for ( i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == x ) { return i ; } } return - 1 ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 10 , 30 , 15 } ; int x = 30 ; int n = arr . length ; System . out . printf ( \" % d ▁ is ▁ present ▁ at ▁ index ▁ % d \" , x , search ( arr , n , x ) ) ; } }"],"bleu":0.7354884053480814,"rouge_l":0.8817133006232596}
{"id":1361,"predictions":["class GFG { static int findKHCF ( int x , int y , int k ) { int small = Math . min ( x , y ) ; int count = 1 ; for ( int i = 2 ; i <= small ; i ++ ) { if ( x % i == 0 && y % i == 0 ) count ++ ; if ( count == k ) return i ; } return - 1 ; } public static void main ( String [ ] args ) { int x = 4 , y = 24 , k = 3 ; System . out . println ( findKHCF ( x , y , k ) ) ; } }"],"references":["import java . lang . * ; class GFG { static int findKHCF ( int x , int y , int k ) { int small = Math . min ( x , y ) ; int count = 1 ; for ( int i = 2 ; i <= small ; i ++ ) { if ( x % i == 0 && y % i == 0 ) count ++ ; if ( count == k ) return i ; } return - 1 ; } public static void main ( String [ ] args ) { int x = 4 , y = 24 , k = 3 ; System . out . print ( findKHCF ( x , y , k ) ) ; } }"],"bleu":0.9252772425395089,"rouge_l":0.959638942617666}
{"id":1362,"predictions":["import java . util . * ; import java . lang . * ; class GFG { public static int distance ( int [ ] x , int [ ] y , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) sum += Math . abs ( x [ i ] - x [ j ] ) ; } } return sum ; } public static void main ( String [ ] args ) { int [ ] x = { - 1 , 1 , 3 , 2 } ; int y [ ] = { 5 , 6 , 5 , 3 } ; int n = x . length ; System . out . println ( distanceum ( x , y , n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int distancesum ( int x [ ] , int y [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = i + 1 ; j < n ; j ++ ) sum += ( Math . abs ( x [ i ] - x [ j ] ) + Math . abs ( y [ i ] - y [ j ] ) ) ; return sum ; } public static void main ( String [ ] args ) { int x [ ] = { - 1 , 1 , 3 , 2 } ; int y [ ] = { 5 , 6 , 5 , 3 } ; int n = x . length ; System . out . println ( distancesum ( x , y , n ) ) ; } }"],"bleu":0.7521808757626284,"rouge_l":0.8759160229748466}
{"id":1363,"predictions":["class GFG { static int daysOfYear ( int [ ] date ) { int year = 0 ; int month = date . length ; while ( month < 4 && month % 4 == 0 && month % 400 == 0 ) { day ++ ; } month -- ; } if ( month > 2 && month % 400 == 0 || ( year % 400 == 0 || year % 400 == 0 ) ) { day ++ ; } month -- ; while ( month > 0 ) { day = day + days ; month -- ; } return day ; } public static void main ( String [ ] args ) { String d = \"2019-01-09\" ; System . out . print ( dayOfYear ( d ) ) ; } }"],"references":["class GFG { static int days [ ] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ; static int dayOfYear ( String date ) { int year = Integer . parseInt ( date . substring ( 0 , 4 ) ) ; int month = Integer . parseInt ( date . substring ( 5 , 7 ) ) ; int day = Integer . parseInt ( date . substring ( 8 ) ) ; if ( month > 2 && year % 4 == 0 && ( year % 100 != 0 || year % 400 == 0 ) ) { ++ day ; } while ( -- month > 0 ) { day = day + days [ month - 1 ] ; } return day ; } public static void main ( String [ ] args ) { String date = \"2019-01-09\" ; System . out . println ( dayOfYear ( date ) ) ; } }"],"bleu":0.37577625721624386,"rouge_l":0.5915076043686843}
{"id":1364,"predictions":["class GFG { static boolean isUnary ( int n ) { if ( n == 1 || n == 7 ) return true ; else if ( n \/ 10 ) return false ; int sum = 0 ; while ( n != 0 ) { int x = n % 10 ; sum += x * x ; n \/= 10 ; } return isUnary ( sum ) ; } static int countUnary ( int a , int b ) { int count = 0 ; for ( int i = a ; i <= b ; i ++ ) { if ( isUnary ( i ) == true ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int a = 1000 , b = 1099 ; System . out . println ( countUnary ( a , b ) ) ; } }"],"references":["import java . io . * ; class GFG { static boolean isUnary ( int n ) { if ( n == 1 || n == 7 ) return true ; else if ( n \/ 10 == 0 ) return false ; int x , sum = 0 ; while ( n != 0 ) { x = n % 10 ; sum = sum + x * x ; n = n \/ 10 ; } return isUnary ( sum ) ; } static int countUnary ( int a , int b ) { int count = 0 ; for ( int i = a ; i <= b ; i ++ ) { if ( isUnary ( i ) == true ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int a = 1000 , b = 1099 ; System . out . println ( countUnary ( a , b ) ) ; } }"],"bleu":0.8520847573477344,"rouge_l":0.9310171703986342}
{"id":1365,"predictions":["class GFG { static int countSetBits ( int n ) { int count = 0 ; while ( n & 1 ) > 0 ) { count += n & 1 ; n >>= 1 ; } return count ; } static int count_count ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int x = countSetBits ( arr [ i ] ) ; if ( i % x == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 , 6 } ; int n = arr . length ; System . out . println ( count_count ( arr , n ) ) ; } }"],"references":["class GFG { static int find_count ( int [ ] arr ) { int ans = 0 ; for ( int i : arr ) { int x = Integer . bitCount ( i ) ; if ( i % x == 0 ) ans += 1 ; } return ans ; } public static void main ( String [ ] args ) { int [ ] arr = { 1 , 2 , 3 , 4 , 5 , 6 } ; System . out . print ( find_count ( arr ) ) ; } }"],"bleu":0.4011801897743862,"rouge_l":0.6812857532007628}
{"id":1366,"predictions":["class GFG { static final int MOD = 1000000007 ; static int product ( int ar [ ] , int n ) { int result = 1 ; for ( int i = 0 ; i < n ; i ++ ) result = ( result * ar [ i ] ) % MOD ; return result ; } public static void main ( String [ ] args ) { int ar [ ] = { 1 , 2 , 3 , 4 , 5 } ; int n = ar . length ; System . out . printf ( \" % d \" , product ( ar , n ) ) ; } }"],"references":["class GFG { static final int MOD = 1000000007 ; static int product ( int ar [ ] , int n ) { int result = 1 ; for ( int i = 0 ; i < n ; i ++ ) result = ( result * ar [ i ] ) % MOD ; return result ; } public static void main ( String [ ] args ) { int ar [ ] = { 1 , 2 , 3 , 4 , 5 } ; int n = ar . length ; System . out . printf ( \" % d \" , product ( ar , n ) ) ; } }"],"bleu":1.0,"rouge_l":1.0}
{"id":1367,"predictions":["import java . util . * ; class GFG { static final int MOD = 1000000007 ; static void SieveOfEratosthenes ( boolean prime [ ] , int p_size ) { prime [ 0 ] = false ; prime [ 1 ] = false ; for ( int p = 2 ; p < p_size ; p ++ ) { if ( prime [ p ] ) { for ( int i = p * 2 ; i < p_size ; i += p ) prime [ i ] = false ; } } } static int productPrimeFreq ( int arr [ ] , int n ) { boolean [ ] prime = new boolean [ n + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) prime [ i ] = true ; SieveOfEratosthenes ( prime , n + 1 ) ; int i = 0 , j = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( prime [ i ] ) { prime [ i ] = true ; product %= 2 ; } } int product = 1 ; for ( Map . Entry < Integer , Integer > entry : mp . entrySet ( ) ) { if ( prime [ entry . getValue ( ) ] ) { product *= it . getValue ( ) ; product %= MOD ; } } return product ; } public static void main ( String [ ] args ) { int arr [ ] = { 5 , 4 , 6 , 5 , 4 , 6 } ; int n = arr . length ; System . out . print ( productPrimeFreq ( arr , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static int MOD = 1000000007 ; static void SieveOfEratosthenes ( boolean prime [ ] , int p_size ) { prime [ 0 ] = false ; prime [ 1 ] = false ; for ( int p = 2 ; p * p <= p_size ; p ++ ) { if ( prime [ p ] ) { for ( int i = p * 2 ; i <= p_size ; i += p ) prime [ i ] = false ; } } } static int productPrimeFreq ( int arr [ ] , int n ) { boolean [ ] prime = new boolean [ n + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) prime [ i ] = true ; SieveOfEratosthenes ( prime , n + 1 ) ; int i , j ; HashMap < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; for ( i = 0 ; i < n ; i ++ ) { if ( mp . containsKey ( arr [ i ] ) ) { mp . put ( arr [ i ] , mp . get ( arr [ i ] ) + 1 ) ; } else { mp . put ( arr [ i ] , 1 ) ; } } long product = 1 ; for ( Map . Entry < Integer , Integer > it : mp . entrySet ( ) ) { if ( prime [ it . getValue ( ) ] ) { product *= ( it . getKey ( ) % MOD ) ; product %= MOD ; } } return ( int ) ( product ) ; } static public void main ( String [ ] arg ) { int arr [ ] = { 5 , 4 , 6 , 5 , 4 , 6 } ; int n = arr . length ; System . out . println ( productPrimeFreq ( arr , n ) ) ; } }"],"bleu":0.7000324812578986,"rouge_l":0.8426822673418219}
{"id":1368,"predictions":["public class GFG { static int maxval ( int a [ ] , int n ) { if ( n < 2 ) { System . out . println ( \" Invalid ▁ Input \" ) ; } int max1 = 0 , max2 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int x = a [ i ] + i ; if ( x > max1 ) { max2 = max1 ; max1 = x ; } else if ( x > max2 && x != max1 ) { max2 = x ; } } return ( max1 * max2 ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 4 , 5 , 3 , 1 , 10 } ; int len = arr . length ; System . out . println ( maxval ( arr , len ) ) ; } }"],"references":["class GFG { static int maxval ( int [ ] a , int n ) { if ( n < 2 ) { System . out . print ( \" Invalid ▁ Input \" ) ; return - 9999 ; } int max1 = 0 , max2 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int x = a [ i ] + i ; if ( x > max1 ) { max2 = max1 ; max1 = x ; } else if ( x > max2 & x != max1 ) { max2 = x ; } } return ( max1 * max2 ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 4 , 5 , 3 , 1 , 10 } ; int len = arr . length ; System . out . println ( maxval ( arr , len ) ) ; } }"],"bleu":0.9200302999673607,"rouge_l":0.9653986041482356}
{"id":1369,"predictions":["class GFG { static class Node { int data ; Node left , right ; } ; static Node newNode ( int data ) { Node temp = new Node ( ) ; temp . data = data ; temp . left = temp . right = null ; return temp ; } static Node minPathUtil ( Node root ) { if ( root == null ) return 0 ; if ( root . left == null && root . right == null ) return root . data ; int ls = minPathSumUtil ( root . left ) ; ls = minPathUtil ( root . right ) ; if ( root . left != null && root . right != null ) { return Math . min ( ans , ls + root . data ) ; } if ( root . left != null && root . right != null ) { return Math . min ( ans , LS + root . data ) ; } else return ls + root . data ; } static Node minPathSum ( Node root ) { int result = 9999999 ; return result + root . data ; } static int minPathSum ( Node root ) { int result = 9999999 ; minPathSumUtil ( root ) ; return result ; } public static void main ( String [ ] args ) { Node root = newNode ( 4 ) ; root . left = newNode ( 5 ) ; root . left . right = newNode ( - 6 ) ; root . left . left = newNode ( - 3 ) ; root . left . right = newNode ( 8 ) ; root . right . left . left = newNode ( 1 ) ; root . right . right . left = newNode ( 8 ) ; System . out . println ( minPathSum ( root ) ) ; } }"],"references":["class GFG { static class Node { int data ; Node left ; Node right ; } ; static Node newNode ( int data ) { Node node = new Node ( ) ; node . data = data ; node . left = node . right = null ; return ( node ) ; } static int result ; static int minPathSumUtil ( Node root ) { if ( root == null ) return 0 ; if ( root . left == null && root . right == null ) return root . data ; int ls = minPathSumUtil ( root . left ) ; int rs = minPathSumUtil ( root . right ) ; if ( root . left != null && root . right != null ) { result = Math . min ( result , ls + rs + root . data ) ; return Math . min ( ls + root . data , rs + root . data ) ; } if ( root . left == null ) return rs + root . data ; else return ls + root . data ; } static int minPathSum ( Node root ) { result = Integer . MAX_VALUE ; minPathSumUtil ( root ) ; return result ; } public static void main ( String args [ ] ) { Node root = newNode ( 4 ) ; root . left = newNode ( 5 ) ; root . right = newNode ( - 6 ) ; root . left . left = newNode ( 2 ) ; root . left . right = newNode ( - 3 ) ; root . right . left = newNode ( 1 ) ; root . right . right = newNode ( 8 ) ; System . out . print ( minPathSum ( root ) ) ; } }"],"bleu":0.7477096649161994,"rouge_l":0.8324944216698666}
{"id":1370,"predictions":["class GFG { static int andOperator ( int a , int b ) { while ( a < b ) b -= ( b & - b ) ; return b ; } public static void main ( String [ ] args ) { int a = 10 , b = 15 ; System . out . println ( andOperator ( a , b ) ) ; } }"],"references":["import java . io . * ; class GFG { static long andOperator ( long a , long b ) { while ( a < b ) { b -= ( b & - b ) ; } return b ; } public static void main ( String [ ] args ) { long a , b ; a = 10 ; b = 15 ; System . out . println ( andOperator ( a , b ) ) ; } }"],"bleu":0.6444701495731675,"rouge_l":0.8347231131066923}
{"id":1371,"predictions":["import java . io . * ; class GFG { static int __gcd ( int a , int b ) { if ( b == 0 ) return a ; if ( b == 0 ) return a ; return __gcd ( b , a % b ) ; } static int countPrimitiveRoots ( int p ) { int result = 1 ; for ( int i = 2 ; i < p ; ++ i ) { if ( __gcd ( i , p ) == 1 ) result ++ ; } return result ; } public static void main ( String [ ] args ) { int p = 5 ; System . out . println ( countPrimitiveRoots ( p - 1 ) ) ; } }"],"references":["import java . io . * ; class GFG { static int __gcd ( int a , int b ) { if ( a == 0 ) return b ; if ( b == 0 ) return a ; if ( a == b ) return a ; if ( a > b ) return __gcd ( a - b , b ) ; return __gcd ( a , b - a ) ; } static int countPrimitiveRoots ( int p ) { int result = 1 ; for ( int i = 2 ; i < p ; i ++ ) if ( __gcd ( i , p ) == 1 ) result ++ ; return result ; } public static void main ( String [ ] args ) { int p = 5 ; System . out . println ( countPrimitiveRoots ( p - 1 ) ) ; } }"],"bleu":0.7348240429447985,"rouge_l":0.8627112797516385}
{"id":1372,"predictions":["class GFG { static void printPattern ( int n ) { int i ; for ( i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= 2 * n ; j ++ ) { if ( j == ( n - i + 1 ) || j == ( n + i - 1 ) ) System . out . print ( \" * ▁ \" ) ; else if ( ( i >= 4 && i <= n - 4 || j == n + i - 4 ) System . out . print ( \" * ▁ \" ) ; else if ( i == n || ( i == n - 4 && j >= n - 2 ) ) System . out . print ( \" * ▁ \" ) ; else System . out . print ( \" ▁ \" ) ; } System . out . println ( ) ; } } public static void main ( String [ ] args ) { int N = 9 ; printPattern ( N ) ; } }"],"references":["import java . util . * ; class GFG { static void printPattern ( int n ) { int i , j ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j < 2 * n ; j ++ ) { if ( j == ( n - i + 1 ) || j == ( n + i - 1 ) ) { System . out . print ( \" * ▁ \" ) ; } else if ( ( i >= 4 && i <= n - 4 ) && ( j == n - i + 4 || j == n + i - 4 ) ) { System . out . print ( \" * ▁ \" ) ; } else if ( i == n || ( i == n - 4 && j >= n - ( n - 2 * 4 ) && j <= n + n - 2 * 4 ) ) { System . out . print ( \" * ▁ \" ) ; } else { System . out . print ( \" ▁ \" + \" ▁ \" ) ; } } System . out . print ( \" \\n \" ) ; } } public static void main ( String [ ] args ) { int N = 9 ; printPattern ( N ) ; } }"],"bleu":0.6791050235352093,"rouge_l":0.8532415630550622}
{"id":1373,"predictions":["import java . util . * ; class GFG { static void printOrder ( int arr [ ] , int n , int k ) { int len1 = k ; int len2 = n - k ; int arr2 [ ] = new int [ n - k ] ; for ( int i = 0 ; i < k ; i ++ ) arr1 [ i ] = arr [ i ] ; for ( int i = k ; i < n ; i ++ ) arr2 [ i - k ] = arr [ i - k ] ; Arrays . sort ( arr1 ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( i < k ) arr1 [ i ] = arr1 [ i ] ; else { arr [ i ] = arr2 [ len - 1 ] ; len2 -- ; } } for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + \" ▁ \" ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 5 , 4 , 6 , 2 , 1 , 3 , 8 , 9 , - 1 } ; int k = 4 ; int n = arr . length ; printOrder ( arr , n , k ) ; } }"],"references":["import java . util . * ; class GFG { static void printOrder ( int [ ] arr , int n , int k ) { int len1 = k , len2 = n - k ; int [ ] arr1 = new int [ k ] ; int [ ] arr2 = new int [ n - k ] ; for ( int i = 0 ; i < k ; i ++ ) arr1 [ i ] = arr [ i ] ; for ( int i = k ; i < n ; i ++ ) arr2 [ i - k ] = arr [ i ] ; Arrays . sort ( arr1 , 0 , k ) ; Arrays . sort ( arr2 , k , n - k ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( i < k ) arr [ i ] = arr1 [ i ] ; else { arr [ i ] = arr2 [ len2 - 1 ] ; len2 -- ; } } for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( arr [ i ] + \" ▁ \" ) ; } } public static void main ( String [ ] args ) { int arr [ ] = { 5 , 4 , 6 , 2 , 1 , 3 , 8 , 9 , - 1 } ; int k = 4 ; int n = arr . length ; printOrder ( arr , n , k ) ; } }"],"bleu":0.8236525237785629,"rouge_l":0.9103359331818462}
{"id":1374,"predictions":["import java . util . * ; class GFG { static boolean isPlusPossible ( int arr [ ] , int n ) { Map < Integer , Integer > mp = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( mp . containsKey ( arr [ i ] ) ) { mp . put ( arr [ i ] , mp . get ( arr [ i ] ) + 1 ) ; } else { mp . put ( arr [ i ] , 1 ) ; } } boolean foundModOne = false ; for ( Map . Entry < Integer , Integer > i : mp . entrySet ( ) ) { int element = i ; int frequency = i . getValue ( ) ; if ( frequency % 4 == 1 ) { if ( foundModone ) return false ; foundModOne = true ; } else return false ; } return true ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 1 , 1 , 2 , 2 , 3 , 2 } ; int n = arr . length ; if ( isPlusPossible ( arr , n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; class GFG { static boolean isPlusPossible ( int arr [ ] , int n ) { HashMap < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( mp . containsKey ( arr [ i ] ) ) { mp . put ( arr [ i ] , mp . get ( arr [ i ] ) + 1 ) ; } else { mp . put ( arr [ i ] , 1 ) ; } } boolean foundModOne = false ; for ( Map . Entry < Integer , Integer > x : mp . entrySet ( ) ) { int element = x . getKey ( ) ; int frequency = x . getValue ( ) ; if ( frequency % 4 == 0 ) continue ; if ( frequency % 4 == 1 ) { if ( foundModOne ) return false ; foundModOne = true ; } else return false ; } return true ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 1 , 1 , 2 , 2 , 2 , 3 , 2 } ; int n = arr . length ; if ( isPlusPossible ( arr , n ) ) System . out . print ( \" Yes \" ) ; else System . out . print ( \" No \" ) ; } }"],"bleu":0.8543210516871964,"rouge_l":0.9297369086769541}
{"id":1375,"predictions":["class GFG { static float sumOfAP ( float a , float d , float n ) { float sum = ( n \/ 2 ) * ( 2 * a + ( n - 1 ) * d ) ; return sum ; } public static void main ( String args [ ] ) { int n = 20 ; float a = 1.5f ; System . out . println ( sumOfAP ( a , d , n ) ) ; } }"],"references":["class GFG { static float sumOfAP ( float a , float d , float n ) { float sum = ( n \/ 2 ) * ( 2 * a + ( n - 1 ) * d ) ; return sum ; } public static void main ( String [ ] args ) { float n = 20 ; float a = 2.5f , d = 1.5f ; System . out . print ( sumOfAP ( a , d , n ) ) ; } }"],"bleu":0.8462008126691006,"rouge_l":0.9371999231803341}
{"id":1376,"predictions":["class GFG { static boolean isPerfectSquare ( int num ) { int n = ( int ) Math . sqrt ( num ) ; return ( n * n == num ) ; } static void checkFib ( int array [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( isPerfectSquare ( 5 * array [ i ] * array [ i ] + 4 ) || isPerfectSquare ( 5 * array [ i ] * array [ i ] - 4 ) ) { System . out . print ( array [ i ] + \" ▁ \" ) ; count ++ ; } } if ( count == 0 ) System . out . print ( \" null ; } public static void main ( String [ ] args ) { int array [ ] = { 4 , 2 , 8 , 5 , 20 , 1 , 40 , 23 } ; int n = array . length ; checkFib ( array , n ) ; } }"],"references":["import java . io . * ; import java . math . * ; class GFG { static boolean isPerfectSquare ( int num ) { int n = ( int ) ( Math . sqrt ( num ) ) ; return ( n * n == num ) ; } static void checkFib ( int array [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( isPerfectSquare ( 5 * array [ i ] * array [ i ] + 4 ) || isPerfectSquare ( 5 * array [ i ] * array [ i ] - 4 ) ) { System . out . print ( array [ i ] + \" ▁ \" ) ; count ++ ; } } if ( count == 0 ) System . out . println ( \" None ▁ Present \" ) ; } public static void main ( String [ ] args ) { int array [ ] = { 4 , 2 , 8 , 5 , 20 , 1 , 40 , 13 , 23 } ; int n = array . length ; checkFib ( array , n ) ; } }"],"bleu":0.8545418298254075,"rouge_l":0.9265450454070563}
{"id":1377,"predictions":["class GFG { static double largestCube ( double r ) { if ( r < 0 ) return - 1 ; double a = ( 2 * r ) \/ Math . sqrt ( 3 ) ; return a ; } public static void main ( String [ ] args ) { double r = 5 ; System . out . println ( largestCube ( r ) ) ; } }"],"references":["import java . util . * ; class Solution { static float largestCube ( float r ) { if ( r < 0 ) return - 1 ; float a = ( 2 * r ) \/ ( float ) Math . sqrt ( 3 ) ; return a ; } public static void main ( String args [ ] ) { float r = 5 ; System . out . println ( largestCube ( r ) ) ; } }"],"bleu":0.6637993643283953,"rouge_l":0.8452355574504371}
{"id":1378,"predictions":["class GFG { static int countTransination ( String a , String b ) { int n = a . length ( ) ; int m = b . length ( ) ; if ( m == 0 ) return 1 ; int dp [ ] [ ] [ ] = new int [ n ] [ n ] ; for ( int i = 0 ; i < m ; i ++ ) { for ( int j = i ; j < n ; j ++ ) { if ( i == 0 ) { if ( a . charAt ( j ) == b . charAt ( i ) ) { if ( a . charAt ( j ) == b . charAt ( i ) ) dp [ i ] [ j ] = 1 ; else dp [ i ] [ j ] = 0 ; } else if ( a . charAt ( j ) == b . charAt ( i ) ) dp [ i ] [ j ] = dp [ i ] [ j - 1 ] + 1 ; else dp [ i ] [ j ] = dp [ i ] [ j - 1 ] ; } else { if ( a . charAt ( j ) == b . charAt ( i ) ) dp [ i ] [ j ] = dp [ i ] [ j - 1 ] + dp [ i - 1 ] [ j - 1 ] ; else dp [ i ] [ j ] = dp [ i ] [ j - 1 ] ; } } return dp [ m - 1 ] [ n - 1 ] ; } public static void main ( String [ ] args ) { String a = \" abcccdf \" ; String b = \" abccdf \" ; System . out . println ( countTrans ( a , b ) ) ; } }"],"references":["class GFG { static int countTransformation ( String a , String b ) { int n = a . length ( ) , m = b . length ( ) ; if ( m == 0 ) { return 1 ; } int dp [ ] [ ] = new int [ m ] [ n ] ; for ( int i = 0 ; i < m ; i ++ ) { for ( int j = i ; j < n ; j ++ ) { if ( i == 0 ) { if ( j == 0 ) { dp [ i ] [ j ] = ( a . charAt ( j ) == b . charAt ( i ) ) ? 1 : 0 ; } else if ( a . charAt ( j ) == b . charAt ( i ) ) { dp [ i ] [ j ] = dp [ i ] [ j - 1 ] + 1 ; } else { dp [ i ] [ j ] = dp [ i ] [ j - 1 ] ; } } else if ( a . charAt ( j ) == b . charAt ( i ) ) { dp [ i ] [ j ] = dp [ i ] [ j - 1 ] + dp [ i - 1 ] [ j - 1 ] ; } else { dp [ i ] [ j ] = dp [ i ] [ j - 1 ] ; } } } return dp [ m - 1 ] [ n - 1 ] ; } public static void main ( String [ ] args ) { String a = \" abcccdf \" , b = \" abccdf \" ; System . out . println ( countTransformation ( a , b ) ) ; } }"],"bleu":0.8227586805484742,"rouge_l":0.9019647559246506}
{"id":1379,"predictions":["import java . util . HashMap ; class GFG { static void findFourElements ( int arr [ ] , int n , int X ) { HashMap < Integer , Integer > mp = new HashMap < > ( ) ; for ( int i = 0 ; i < n - 1 ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { mp . put ( arr [ i ] + arr [ j ] , new Pair < Integer , Integer > ( arr [ i ] + arr [ j ] ) ) ; } for ( int i = 0 ; i < n - 1 ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { int sum = arr [ i ] + arr [ j ] ; if ( mp . containsKey ( X - sum ) ) { int p = mp . get ( X - sum ) ; if ( p . get ( 0 ) != i && p . get ( 0 ) != j && p . get ( 1 ) != i && p . get ( 1 ) != j ) { System . out . println ( arr [ i ] + \" , ▁ \" + arr [ p . get ( 1 ) + \" , ▁ \" + arr [ p . get ( 0 ) ] ) ; return ; } } } } } public static void main ( String args [ ] ) { int arr [ ] = { 10 , 20 , 30 , 40 , 1 , 2 } ; int n = arr . length ; int X = 91 ; findFourElements ( arr , n , X ) ; } }"],"references":["import java . util . HashMap ; class GFG { static class pair { int first , second ; public pair ( int first , int second ) { this . first = first ; this . second = second ; } } static void findFourElements ( int arr [ ] , int n , int X ) { HashMap < Integer , pair > mp = new HashMap < Integer , pair > ( ) ; for ( int i = 0 ; i < n - 1 ; i ++ ) for ( int j = i + 1 ; j < n ; j ++ ) mp . put ( arr [ i ] + arr [ j ] , new pair ( i , j ) ) ; for ( int i = 0 ; i < n - 1 ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { int sum = arr [ i ] + arr [ j ] ; if ( mp . containsKey ( X - sum ) ) { pair p = mp . get ( X - sum ) ; if ( p . first != i && p . first != j && p . second != i && p . second != j ) { System . out . print ( arr [ i ] + \" , ▁ \" + arr [ j ] + \" , ▁ \" + arr [ p . first ] + \" , ▁ \" + arr [ p . second ] ) ; return ; } } } } } public static void main ( String [ ] args ) { int arr [ ] = { 10 , 20 , 30 , 40 , 1 , 2 } ; int n = arr . length ; int X = 91 ; findFourElements ( arr , n , X ) ; } }"],"bleu":0.7623474842167773,"rouge_l":0.8397693951592863}
{"id":1380,"predictions":["import java . io . * ; class GFG { static int countWays ( int n ) { int counter = 0 ; for ( int i = 1 ; i < n ; i ++ ) { for ( int j = i ; j < n ; j ++ ) { for ( int k = j ; k < n ; k ++ ) for ( int l = k ; l < n ; l ++ ) if ( i + j + k + l == n ) counter ++ ; } } return counter ; } public static void main ( String [ ] args ) { int n = 8 ; System . out . println ( countWays ( n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int countWays ( int n ) { int counter = 0 ; for ( int i = 1 ; i < n ; i ++ ) for ( int j = i ; j < n ; j ++ ) for ( int k = j ; k < n ; k ++ ) for ( int l = k ; l < n ; l ++ ) if ( i + j + k + l == n ) counter ++ ; return counter ; } public static void main ( String [ ] args ) { int n = 8 ; System . out . println ( countWays ( n ) ) ; } }"],"bleu":0.9347762804200995,"rouge_l":0.9873545776428932}
{"id":1381,"predictions":["class GFG { static int maxConsecutiveOnes ( int n ) { int count = 0 ; while ( x != 0 ) { x = ( x & ( x << 1 ) ) ; count ++ ; } return count ; } public static void main ( String [ ] args ) { System . out . println ( maxConsecutiveOnes ( 14 ) ) ; } }"],"references":["class MaxConsecutiveOnes { private static int maxConsecutiveOnes ( int x ) { int count = 0 ; while ( x != 0 ) { x = ( x & ( x << 1 ) ) ; count ++ ; } return count ; } public static void main ( String strings [ ] ) { System . out . println ( maxConsecutiveOnes ( 14 ) ) ; System . out . println ( maxConsecutiveOnes ( 222 ) ) ; } }"],"bleu":0.7165866268347666,"rouge_l":0.8589688041594454}
{"id":1382,"predictions":["import java . util . * ; class GFG { static boolean isFang ( int num ) { int [ ] freq = new int [ 10 ] ; String val = String . valueOf ( num ) ; for ( int i = 0 ; i < val . length ( ) ; i ++ ) { int digit = Integer . valueOf ( val . charAt ( i ) ) ; if ( freq [ digit ] > 0 ) return false ; else freq [ digit ] ++ ; } for ( int i = 1 ; i < 10 ; i ++ ) if ( freq [ i ] == 0 ) return false ; return true ; } public static void main ( String [ ] args ) { int num = 204 ; if ( isFang ( num ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . io . * ; import java . util . * ; public class GFG { public static boolean isFascinating ( int num ) { int [ ] freq = new int [ 10 ] ; String val = \" \" + num + num * 2 + num * 3 ; for ( int i = 0 ; i < val . length ( ) ; i ++ ) { int digit = val . charAt ( i ) - '0' ; if ( freq [ digit ] > 0 ) return false ; else freq [ digit ] ++ ; } for ( int i = 1 ; i < freq . length ; i ++ ) { if ( freq [ i ] == 0 ) return false ; } return true ; } public static void main ( String args [ ] ) { int num = 192 ; if ( num < 100 ) System . out . println ( \" No \" ) ; else { boolean ans = isFascinating ( num ) ; if ( ans ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } } }"],"bleu":0.6301361648467322,"rouge_l":0.799193751574704}
{"id":1383,"predictions":["import java . io . * ; class GFG { static void printDistinct ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { int d = 0 ; for ( int j = 0 ; j < i ; j ++ ) { if ( arr [ i ] == arr [ j ] ) { d = 1 ; break ; } } if ( d == 0 ) System . out . println ( arr [ i ] ) ; } } static public void main ( String [ ] args ) { int arr [ ] = { 6 , 10 , 5 , 4 , 9 , 10 , 6 , 10 } ; int n = arr . length ; printDistinct ( arr , n ) ; } }"],"references":["import java . io . * ; class GFG { static void printDistinct ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { int j ; for ( j = 0 ; j < i ; j ++ ) if ( arr [ i ] == arr [ j ] ) break ; if ( i == j ) System . out . print ( arr [ i ] + \" ▁ \" ) ; } } public static void main ( String [ ] args ) { int arr [ ] = { 6 , 10 , 5 , 4 , 9 , 120 , 4 , 6 , 10 } ; int n = arr . length ; printDistinct ( arr , n ) ; } }"],"bleu":0.7764527317593504,"rouge_l":0.9038051408687845}
{"id":1384,"predictions":["class GFG { static int closestMultiple ( int n , int x ) { if ( x > n ) return x ; int z = x \/ 2 ; n = n + z ; n = n - ( n % x ) ; return n ; } public static void main ( String [ ] args ) { int n = 56257 ; int x = 27 ; System . out . println ( closestMultiple ( n , x ) ) ; } }"],"references":["import java . io . * ; class Solution { static int closestMultiple ( int n , int x ) { if ( x > n ) return x ; n = n + x \/ 2 ; n = n - ( n % x ) ; return n ; } public static void main ( String [ ] args ) { int n = 56287 , x = 27 ; System . out . println ( closestMultiple ( n , x ) ) ; } }"],"bleu":0.8354094515493254,"rouge_l":0.8562605277933745}
{"id":1385,"predictions":["class GFG { static int MAX = 1000 ; static int maxSubsequenceSubstring ( char x [ ] , char y [ ] , int n , int m ) { int [ ] [ ] dp = new int [ m ] [ MAX ] ; for ( int i = 1 ; i <= m ; i ++ ) for ( int j = 1 ; j <= n ; j ++ ) { for ( int x = 1 ; j <= n ; j ++ ) { if ( x [ j - 1 ] == y [ i - 1 ] ) dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ] ; else dp [ i ] [ j ] = dp [ i ] [ j - 1 ] ; } } int ans = 0 ; for ( int i = 1 ; i <= m ; i ++ ) ans = Math . max ( ans , dp [ i ] [ n ] ) ; return ans ; } public static void main ( String [ ] args ) { String x = \" ABCD \" ; String y = \" BACD \" ; int n = x . length ( ) ; int m = y . length ( ) ; System . out . println ( maxSubsequenceSubstring ( x , y , n , m ) ) ; } }"],"references":["public class GFG { static final int MAX = 1000 ; static int maxSubsequenceSubstring ( char x [ ] , char y [ ] , int n , int m ) { int dp [ ] [ ] = new int [ MAX ] [ MAX ] ; for ( int i = 0 ; i <= m ; i ++ ) for ( int j = 0 ; j <= n ; j ++ ) dp [ i ] [ j ] = 0 ; for ( int i = 1 ; i <= m ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { if ( x [ j - 1 ] == y [ i - 1 ] ) dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ] ; else dp [ i ] [ j ] = dp [ i ] [ j - 1 ] ; } } int ans = 0 ; for ( int i = 1 ; i <= m ; i ++ ) ans = Math . max ( ans , dp [ i ] [ n ] ) ; return ans ; } public static void main ( String [ ] args ) { char x [ ] = \" ABCD \" . toCharArray ( ) ; char y [ ] = \" BACDBDCD \" . toCharArray ( ) ; int n = x . length , m = y . length ; System . out . println ( maxSubsequenceSubstring ( x , y , n , m ) ) ; } }"],"bleu":0.7783563713664489,"rouge_l":0.8766908212560388}
{"id":1386,"predictions":["class GFG { static int findMaxGCD ( int arr [ ] , int n , int k ) { int high = Arrays . stream ( arr ) . max ( ) . getAsInt ( ) ; int [ ] divisors = new int [ high + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 1 ; j <= Math . sqrt ( arr [ i ] ) ; j ++ ) { if ( arr [ i ] % j == 0 ) { divisors [ j ] ++ ; if ( j != arr [ i ] \/ j ) divisors [ arr [ i ] \/ j ] ++ ; } } } for ( int i = high ; i >= 1 ; i -- ) if ( divisors [ i ] >= k ) return i ; return 0 ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 4 , 8 , 12 } ; int k = 3 ; int n = arr . length ; System . out . println ( findMaxGCD ( arr , n , k ) ) ; } }"],"references":["import java . io . * ; import java . util . * ; class GFG { static int findMaxGCD ( int [ ] arr , int n , int k ) { Arrays . sort ( arr ) ; int high = arr [ n - 1 ] ; int [ ] divisors = new int [ high + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 1 ; j <= Math . sqrt ( arr [ i ] ) ; j ++ ) { if ( arr [ i ] % j == 0 ) { divisors [ j ] ++ ; if ( j != arr [ i ] \/ j ) divisors [ arr [ i ] \/ j ] ++ ; } } } for ( int i = high ; i >= 1 ; i -- ) if ( divisors [ i ] >= k ) return i ; return 0 ; } static public void main ( String [ ] args ) { int [ ] arr = { 1 , 2 , 4 , 8 , 8 , 12 } ; int k = 3 ; int n = arr . length ; System . out . println ( findMaxGCD ( arr , n , k ) ) ; } }"],"bleu":0.831713604508017,"rouge_l":0.8953162097992661}
{"id":1387,"predictions":["import java . io . * ; class GFG { static int Max_Sum ( int n ) { return ( n * ( n - 1 ) ) \/ 2 ; } public static void main ( String [ ] args ) { int n = 8 ; System . out . println ( Max_Sum ( n ) ) ; } }"],"references":["class GFG { static int Max_Sum ( int n ) { return ( n * ( n - 1 ) ) \/ 2 ; } public static void main ( String [ ] args ) { int n = 8 ; System . out . println ( Max_Sum ( n ) ) ; } }"],"bleu":0.8861388053767366,"rouge_l":0.9504249291784703}
{"id":1388,"predictions":["import java . io . * ; class GFG { static int countRec ( int digits [ ] [ ] , int sum , int osum , int isOdd , int n ) { if ( digits == n ) return ( sum - osum == 1 ) ? 1 : 0 ; if ( lookup [ digits ] [ 0 ] != - 1 ) return lookup [ digits ] [ osum ] ; int ans = 0 ; if ( isOdd ) { for ( int i = 0 ; i < 10 ; i ++ ) ans += countRec ( digits + 1 , esum , isOdd + i , false , n ) ; } else { for ( int i = 0 ; i < 10 ; i ++ ) ans += countRec ( digits + 1 , esum + i , ! isOdd , isOdd , ans ) ; } return ans ; } static int finalCount ( int n ) { int count = 0 ; int [ ] [ ] lookup = new int [ 500 ] [ 500 ] ; for ( int i = 0 ; i < 10 ; i ++ ) { for ( int j = 0 ; j < 100 ; j ++ ) ans += countRec ( digits + 1 , esum + i , osum , true , n ) ; } return ans ; } static public void main ( String [ ] args ) { int n = 3 ; System . out . println ( \" Count ▁ of ▁ \" + n + \" ▁ digits ▁ is ▁ \" + finalCount ( n ) ) ; } }"],"references":["class GFG { static int [ ] [ ] [ ] [ ] lookup = new int [ 50 ] [ 1000 ] [ 1000 ] [ 2 ] ; static int countRec ( int digits , int esum , int osum , int isOdd , int n ) { if ( digits == n ) return ( esum - osum == 1 ) ? 1 : 0 ; if ( lookup [ digits ] [ esum ] [ osum ] [ isOdd ] != - 1 ) return lookup [ digits ] [ esum ] [ osum ] [ isOdd ] ; int ans = 0 ; if ( isOdd == 1 ) for ( int i = 0 ; i <= 9 ; i ++ ) ans += countRec ( digits + 1 , esum , osum + i , 0 , n ) ; else for ( int i = 0 ; i <= 9 ; i ++ ) ans += countRec ( digits + 1 , esum + i , osum , 1 , n ) ; return lookup [ digits ] [ esum ] [ osum ] [ isOdd ] = ans ; } static int finalCount ( int n ) { int digits = 0 ; for ( int i = 0 ; i < 50 ; i ++ ) for ( int j = 0 ; j < 1000 ; j ++ ) for ( int k = 0 ; k < 1000 ; k ++ ) for ( int l = 0 ; l < 2 ; l ++ ) lookup [ i ] [ j ] [ k ] [ l ] = - 1 ; int ans = 0 ; int esum = 0 , osum = 0 ; for ( int i = 1 ; i <= 9 ; i ++ ) ans += countRec ( digits + 1 , esum + i , osum , 1 , n ) ; return ans ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( \" Coutn ▁ of ▁ \" + n + \" ▁ digit ▁ numbers ▁ is ▁ \" + finalCount ( n ) ) ; } }"],"bleu":0.5236036916035678,"rouge_l":0.6856533080388902}
{"id":1389,"predictions":["class GFG { static int lcsOf3 ( char X [ ] [ ] , char Y [ ] [ ] , int m , int n , int o ) { int L [ ] [ ] [ ] = new int [ m + 1 ] [ n + 1 ] ; for ( int i = 0 ; i <= m ; i ++ ) { for ( int j = 0 ; j <= n ; j ++ ) { for ( int k = 0 ; k <= o ; k ++ ) { if ( i == 0 || j == 0 || k == 0 ) { L [ i ] [ j ] = 0 ; } else if ( X [ i - 1 ] == Y [ j - 1 ] && X [ i - 1 ] [ k - 1 ] == Z [ k - 1 ] ) L [ i ] [ j ] = L [ i - 1 ] [ j - 1 ] + 1 ; else L [ i ] [ j ] = Math . max ( L [ i - 1 ] [ j ] , L [ i ] [ j - 1 ] ) ; } } return L [ m ] [ n ] ; } public static void main ( String [ ] args ) { String X = \" AGGT \" ; String Y = \"12XB \" ; int m = Y . length ( ) ; int n = Z . length ( ) ; int total = Z . length ( ) ; System . out . println ( \" Length ▁ of ▁ LCS ▁ is ▁ \" + lcsOf3 ( X , Y , m , n , o ) ) ; } }"],"references":["public class LCS_3Strings { static int lcsOf3 ( String X , String Y , String Z , int m , int n , int o ) { int [ ] [ ] [ ] L = new int [ m + 1 ] [ n + 1 ] [ o + 1 ] ; for ( int i = 0 ; i <= m ; i ++ ) { for ( int j = 0 ; j <= n ; j ++ ) { for ( int k = 0 ; k <= o ; k ++ ) { if ( i == 0 || j == 0 || k == 0 ) L [ i ] [ j ] [ k ] = 0 ; else if ( X . charAt ( i - 1 ) == Y . charAt ( j - 1 ) && X . charAt ( i - 1 ) == Z . charAt ( k - 1 ) ) L [ i ] [ j ] [ k ] = L [ i - 1 ] [ j - 1 ] [ k - 1 ] + 1 ; else L [ i ] [ j ] [ k ] = Math . max ( Math . max ( L [ i - 1 ] [ j ] [ k ] , L [ i ] [ j - 1 ] [ k ] ) , L [ i ] [ j ] [ k - 1 ] ) ; } } } return L [ m ] [ n ] [ o ] ; } public static void main ( String args [ ] ) { String X = \" AGGT12\" ; String Y = \"12TXAYB \" ; String Z = \"12XBA \" ; int m = X . length ( ) ; int n = Y . length ( ) ; int o = Z . length ( ) ; System . out . println ( \" Length ▁ of ▁ LCS ▁ is ▁ \" + lcsOf3 ( X , Y , Z , m , n , o ) ) ; } }"],"bleu":0.6932628633984467,"rouge_l":0.8126317807168872}
{"id":1390,"predictions":["class GFG { static void printGreater ( int x , int y ) { double X = y * double ( double ) ( Math . log ( x ) ) ; double Y = x * double ( Math . log ( y ) ) ; if ( Math . abs ( X - Y ) < 1e-9 ) System . out . println ( \" Equal \" ) ; else if ( X > Y ) System . out . println ( x + \" ^ \" + y ) ; else System . out . println ( y + \" ^ \" + x ) ; } public static void main ( String [ ] args ) { int x = 5 , y = 8 ; printGreater ( x , y ) ; } }"],"references":["import java . io . * ; class GFG { static void printGreater ( int x , int y ) { double X = y * Math . log ( x ) ; double Y = x * Math . log ( y ) ; if ( Math . abs ( X - Y ) < 1e-9 ) { System . out . println ( \" Equal \" ) ; } else if ( X > Y ) { System . out . println ( x + \" ^ \" + y ) ; } else { System . out . println ( y + \" ^ \" + x ) ; } } public static void main ( String [ ] args ) { int x = 5 , y = 8 ; printGreater ( x , y ) ; } }"],"bleu":0.8209934901608168,"rouge_l":0.9196335382117592}
{"id":1391,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int getElement ( int a [ ] , int n , int S ) { Arrays . sort ( a ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( sum + ( a [ i ] * ( n - i ) ) == S ) return a [ i ] ; sum += a [ i ] ; } return - 1 ; } public static void main ( String [ ] args ) { int S [ ] = { 1 , 3 , 2 , 5 , 8 } ; int n = a . length ; System . out . println ( getElement ( a , n , S ) ) ; } }"],"references":["import java . util . Arrays ; class GFG { static int getElement ( int a [ ] , int n , int S ) { Arrays . sort ( a ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( sum + ( a [ i ] * ( n - i ) ) == S ) return a [ i ] ; sum += a [ i ] ; } return - 1 ; } public static void main ( String [ ] args ) { int S = 5 ; int a [ ] = { 1 , 3 , 2 , 5 , 8 } ; int n = a . length ; System . out . println ( getElement ( a , n , S ) ) ; } }"],"bleu":0.9282724830421951,"rouge_l":0.9544807965860596}
{"id":1392,"predictions":["class GFG { static boolean canMakeEqual ( int a [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { while ( a [ i ] % 5 == 0 ) { a [ i ] \/= 5 ; } while ( a [ i ] % 3 == 0 ) { a [ i ] \/= 3 ; } } int last = a [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( a [ i ] != last ) return false ; } return true ; } public static void main ( String [ ] args ) { int arr [ ] = { 18 , 30 , 54 , 90 , 162 } ; int n = arr . length ; if ( canMakeEqual ( arr , n ) ) System . out . print ( \" YES \" ) ; else System . out . print ( \" NO \" ) ; } }"],"references":["class GFG { static boolean canMakeEqual ( int a [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { while ( a [ i ] % 5 == 0 ) { a [ i ] \/= 5 ; } while ( a [ i ] % 3 == 0 ) { a [ i ] \/= 3 ; } } int last = a [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( a [ i ] != last ) { return false ; } } return true ; } public static void main ( String [ ] args ) { int arr [ ] = { 18 , 30 , 54 , 90 , 162 } ; int n = arr . length ; if ( canMakeEqual ( arr , n ) ) { System . out . print ( \" YES \" + \" \\n \" ) ; } else { System . out . print ( \" NO \" + \" \\n \" ) ; } } }"],"bleu":0.8863588430096138,"rouge_l":0.9563447379818105}
{"id":1393,"predictions":["import java . * ; class Geeks { public static void main ( String a [ ] ) { int x = 10 ; int y = 5 ; x = x ^ y ; y = x ^ y ; x = x ^ y ; System . out . println ( \" After ▁ swaping : \" + \" ▁ x ▁ = ▁ \" + x + \" , ▁ y ▁ = ▁ \" + y ) ; } }"],"references":["import java . * ; public class GFG { public static void main ( String a [ ] ) { int x = 10 ; int y = 5 ; x = x ^ y ; y = x ^ y ; x = x ^ y ; System . out . println ( \" After ▁ swap : ▁ x ▁ = ▁ \" + x + \" , ▁ y ▁ = ▁ \" + y ) ; } }"],"bleu":0.8849845120438707,"rouge_l":0.9538796516231194}
{"id":1394,"predictions":["import java . util . * ; class GFG { static int minimumOperations ( int a [ ] , int n ) { Map < Integer , Integer > mp = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( mp . containsKey ( a [ i ] ) ) { mp . put ( a [ i ] , mp . get ( a [ i ] ) + 1 ) ; } else { mp . put ( a [ i ] , 1 ) ; } } int count = 0 ; for ( Map . Entry < Integer , Integer > entry : mp . entrySet ( ) ) { if ( entry . getValue ( ) > 1 ) { count += entry . getValue ( ) ; } } return count ; } public static void main ( String [ ] args ) { int a [ ] = { 2 , 1 , 2 , 3 , 3 , 4 , 3 } ; int n = a . length ; System . out . println ( minimumOperations ( a , n ) ) ; } }"],"references":["import java . util . * ; class geeks { public static int minimumOperations ( int [ ] a , int n ) { HashMap < Integer , Integer > mp = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( mp . get ( a [ i ] ) != null ) { int x = mp . get ( a [ i ] ) ; mp . put ( a [ i ] , ++ x ) ; } else mp . put ( a [ i ] , 1 ) ; } int count = 0 ; for ( HashMap . Entry < Integer , Integer > entry : mp . entrySet ( ) ) { if ( entry . getValue ( ) > 1 ) { count += ( entry . getValue ( ) - 1 ) ; } } return count ; } public static void main ( String [ ] args ) { int [ ] a = { 2 , 1 , 2 , 3 , 3 , 4 , 3 } ; int n = a . length ; System . out . println ( minimumOperations ( a , n ) ) ; } }"],"bleu":0.8110972905419345,"rouge_l":0.9098906142430964}
{"id":1395,"predictions":["class GFG { static int xorRange ( int pre [ ] , int l , int r ) { int cntOnes = pre [ r ] ; if ( l - 1 >= 0 ) { cntOnes -= pre [ l - 1 ] ; } if ( cntOnes % 2 == 0 ) return 0 ; else return 1 ; } static void performQueries ( int queries [ ] [ ] , int q , int n ) { int pre [ ] = new int [ n ] ; pre [ 0 ] = a [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) pre [ i ] = pre [ i - 1 ] + a [ i ] ; for ( int i = 0 ; i < q ; i ++ ) System . out . println ( xorRange ( pre , queries [ i ] [ 0 ] , queries [ i ] [ 1 ] ) ) ; } public static void main ( String [ ] args ) { int a [ ] [ ] = { 1 , 0 , 1 , 0 , 1 , 0 , 1 } ; int n = a . length ; int queries [ ] [ ] = { 0 , 3 } ; int q = queries . length ; performQueries ( queries , q , a , n ) ; } }"],"references":["import java . util . * ; class GFG { static int xorRange ( int pre [ ] , int l , int r ) { int cntOnes = pre [ r ] ; if ( l - 1 >= 0 ) cntOnes -= pre [ l - 1 ] ; if ( cntOnes % 2 == 0 ) return 0 ; else return 1 ; } static void performQueries ( int queries [ ] [ ] , int q , int a [ ] , int n ) { int [ ] pre = new int [ n ] ; pre [ 0 ] = a [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) pre [ i ] = pre [ i - 1 ] + a [ i ] ; for ( int i = 0 ; i < q ; i ++ ) System . out . println ( xorRange ( pre , queries [ i ] [ 0 ] , queries [ i ] [ 1 ] ) ) ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 0 , 1 , 1 , 0 , 1 , 1 } ; int n = a . length ; int queries [ ] [ ] = { { 0 , 3 } , { 0 , 2 } } ; int q = queries . length ; performQueries ( queries , q , a , n ) ; } }"],"bleu":0.8868279450680442,"rouge_l":0.9363780526482716}
{"id":1396,"predictions":["class GFG { static int countNums ( int n , int x , int y ) { boolean arr [ ] = new boolean [ n + 2 ] ; if ( x <= n ) arr [ x ] = true ; if ( y <= n ) arr [ y ] = true ; int result = 0 ; for ( int i = Math . min ( x , y ) ; i <= n ; i ++ ) { if ( arr [ i ] ) { if ( i + x <= n ) arr [ i + x ] = true ; if ( i + y <= n ) arr [ i + y ] = true ; result ++ ; } } return result ; } public static void main ( String [ ] args ) { int n = 15 , x = 5 ; int y = 7 ; System . out . println ( countNums ( n , x , y ) ) ; } }"],"references":["class gfg { static int countNums ( int n , int x , int y ) { boolean [ ] arr = new boolean [ n + 1 ] ; if ( x <= n ) arr [ x ] = true ; if ( y <= n ) arr [ y ] = true ; int result = 0 ; for ( int i = Math . min ( x , y ) ; i <= n ; i ++ ) { if ( arr [ i ] ) { if ( i + x <= n ) arr [ i + x ] = true ; if ( i + y <= n ) arr [ i + y ] = true ; result ++ ; } } return result ; } public static void main ( String [ ] args ) { int n = 15 , x = 5 , y = 7 ; System . out . println ( countNums ( n , x , y ) ) ; } }"],"bleu":0.9356716241263621,"rouge_l":0.9750023232041632}
{"id":1397,"predictions":["class GFG { static int get_max_substr ( String num ) { int count = 0 ; int current_sum = 0 ; for ( int i = 0 ; i < num . length ( ) ; i ++ ) { current_num = num . charAt ( i ) ; current_sum += current_num ; if ( current_num % 3 == 0 || ( running_sum != 0 && row_sum % 3 == 0 ) { count ++ ; running_sum = 0 ; } } return count ; } public static void main ( String [ ] args ) { print_max_splits ( \"12345\" ) ; } }"],"references":["class GFG { static int get_max_splits ( String num_String ) { int count = 0 , current_num ; int running_sum = 0 ; for ( int i = 0 ; i < num_String . length ( ) ; i ++ ) { current_num = num_String . charAt ( i ) - '0' ; running_sum += current_num ; if ( current_num % 3 == 0 || ( running_sum != 0 && running_sum % 3 == 0 ) ) { count += 1 ; running_sum = 0 ; } } return count ; } public static void main ( String [ ] args ) { System . out . print ( get_max_splits ( \"12345\" ) + \" \\n \" ) ; } }"],"bleu":0.6281806819575338,"rouge_l":0.8330937320299022}
{"id":1398,"predictions":["import java . io . * ; class GFG { static int term ( int n ) { return n * ( n + 1 ) \/ 2 ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( term ( n ) ) ; } }"],"references":["import java . io . * ; class Series { static int term ( int n ) { return n * ( n + 1 ) \/ 2 ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( term ( n ) ) ; } }"],"bleu":0.9574144657807024,"rouge_l":0.9833333333333334}
{"id":1399,"predictions":["import java . io . * ; class GFG { static void anglequichord ( int z ) { System . out . println ( \" The ▁ angle ▁ is ▁ \" + z + \" ▁ degrees \" ) ; } public static void main ( String [ ] args ) { int z = 48 ; anglequichord ( z ) ; } }"],"references":["import java . io . * ; class GFG { static void anglequichord ( int z ) { System . out . println ( \" The ▁ angle ▁ is ▁ \" + z + \" ▁ degrees \" ) ; } public static void main ( String [ ] args ) { int z = 48 ; anglequichord ( z ) ; } }"],"bleu":1.0,"rouge_l":1.0}
{"id":1400,"predictions":["class GFG { static int findLength ( String str ) { int n = str . length ( ) ; int maxlen = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j += 2 ) { int length = j - i + 1 ; int leftSum = 0 ; int rightsum = 0 ; for ( int k = 0 ; k < len \/ 2 ; k ++ ) leftsum += ( str . charAt ( i + k ) - '0' ) ; leftSum += ( str . charAt ( i + k + len \/ 2 ) ) - '0' ; } if ( leftsum == rightum && maxlen < length ) maxlen = length ; } return maxlen ; } public static void main ( String args [ ] ) { String str = \"1532323\" ; System . out . println ( \" Length ▁ of ▁ the ▁ substring ▁ is ▁ \" + findLength ( str ) ) ; } }"],"references":["import java . io . * ; class GFG { static int findLength ( String str ) { int n = str . length ( ) ; int maxlen = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j += 2 ) { int length = j - i + 1 ; int leftsum = 0 , rightsum = 0 ; for ( int k = 0 ; k < length \/ 2 ; k ++ ) { leftsum += ( str . charAt ( i + k ) - '0' ) ; rightsum += ( str . charAt ( i + k + length \/ 2 ) - '0' ) ; } if ( leftsum == rightsum && maxlen < length ) maxlen = length ; } } return maxlen ; } public static void main ( String [ ] args ) { String str = \"1538023\" ; System . out . println ( \" Length ▁ of ▁ the ▁ substring ▁ is ▁ \" + findLength ( str ) ) ; } }"],"bleu":0.819795116595171,"rouge_l":0.9243980468092272}
{"id":1401,"predictions":["class GFG { static int MOD = 2019 ; static int min_modulo ( int l , int r ) { if ( r - l >= MOD ) return 0 ; else { int ans = MOD - 1 ; for ( int i = l ; i <= r ; i ++ ) { for ( int j = i + 1 ; j <= r ; j ++ ) ans = Math . min ( ans , ( i * j ) % MOD ) ; } } return ans ; } public static void main ( String [ ] args ) { int l = 2020 , r = 20 ; System . out . println ( min_modulo ( l , r ) ) ; } }"],"references":["class GFG { static int MOD = 2019 ; static int min_modulo ( int l , int r ) { if ( r - l >= MOD ) return 0 ; else { int ans = MOD - 1 ; for ( int i = l ; i <= r ; i ++ ) { for ( int j = i + 1 ; j <= r ; j ++ ) { ans = Math . min ( ans , ( i * j ) % MOD ) ; } } return ans ; } } public static void main ( String [ ] args ) { int l = 2020 , r = 2040 ; System . out . println ( min_modulo ( l , r ) ) ; } }"],"bleu":0.9481231505510161,"rouge_l":0.9833791552111972}
{"id":1402,"predictions":["class GFG { static int countPairsWithProdK ( int arr [ ] , int n , int k ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = i + 1 ; j < n ; j ++ ) if ( arr [ i ] * arr [ j ] == k ) count ++ ; return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 5 , 3 , 4 , 2 } ; int N = arr . length ; int K = 3 ; System . out . print ( countPairsWithProdK ( arr , N , K ) ) ; } }"],"references":["class GFG { static int countPairsWithProdK ( int arr [ ] , int n , int k ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) if ( arr [ i ] * arr [ j ] == k ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 5 , 3 , 4 , 2 } ; int N = arr . length ; int K = 3 ; System . out . println ( countPairsWithProdK ( arr , N , K ) ) ; } }"],"bleu":0.9436327886354743,"rouge_l":0.9837507635919365}
{"id":1403,"predictions":["class GFG { static int Xor_Sum ( int arr [ ] , int n ) { int sum = 0 ; int index = 0 , left_xor = 0 ; for ( int i = 0 ; i < n ; i ++ ) { left_xor = left_xor ^ arr [ i ] ; right_xor = 0 ; for ( int j = i + 1 ; j < n ; j ++ ) right_xor = right_xor ^ arr [ j ] ; if ( left_xor + right_xor > sum ) { sum = left_xor + right_xor ; index = i ; } } return index + 1 ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 4 , 6 , 3 , 8 , 13 , 2 , 21 , 10 } ; int n = arr . length ; System . out . print ( Xor_Sum ( arr , n ) ) ; } }"],"references":["class GFG { public static int Xor_Sum ( int [ ] arr , int n ) { int sum = 0 , index = - 1 ; int left_xor = 0 , right_xor = 0 ; for ( int i = 0 ; i < n ; i ++ ) { left_xor = left_xor ^ arr [ i ] ; right_xor = 0 ; for ( int j = i + 1 ; j < n ; j ++ ) { right_xor = right_xor ^ arr [ j ] ; } if ( left_xor + right_xor > sum ) { sum = left_xor + right_xor ; index = i ; } } return index + 1 ; } public static void main ( String [ ] args ) { int [ ] arr = { 1 , 4 , 6 , 3 , 8 , 13 , 34 , 2 , 21 , 10 } ; int n = arr . length ; System . out . println ( Xor_Sum ( arr , n ) ) ; } }"],"bleu":0.8280507862621521,"rouge_l":0.9376698847127192}
{"id":1404,"predictions":["import java . util . * ; class GFG { static void print ( char a [ ] , int n , int ind ) { for ( int i = ind ; i < n + ind ; i ++ ) System . out . print ( a [ ( i % n ) ] + \" ▁ \" ) ; } public static void main ( String [ ] args ) { char [ ] a = { ' A ' , ' B ' , ' C ' , ' F ' , ' F ' } ; int n = 6 ; print ( a , n , 3 ) ; } }"],"references":["import java . util . * ; import java . lang . * ; public class GfG { public static void print ( char a [ ] , int n , int ind ) { for ( int i = ind ; i < n + ind ; i ++ ) System . out . print ( a [ ( i % n ) ] + \" ▁ \" ) ; } public static void main ( String argc [ ] ) { char [ ] a = new char [ ] { ' A ' , ' B ' , ' C ' , ' D ' , ' E ' , ' F ' } ; int n = 6 ; print ( a , n , 3 ) ; } }"],"bleu":0.7758182910795508,"rouge_l":0.8974061169183122}
{"id":1405,"predictions":["class GFG { static void printPattern ( int i , int j , int n ) { if ( j >= n ) return ; if ( i >= n ) return ; if ( j == i || j == n - 1 - i ) { if ( i == n - 1 - j ) System . out . print ( \" \/ \" ) ; else System . out . print ( \" \\\\ \" ) ; } else { System . out . print ( \" * \" ) ; } if ( printPattern ( i , j + 1 , n ) == 1 ) return ; System . out . print ( \" \\n \" ) ; return ; } public static void main ( String [ ] args ) { int N = 9 ; printPattern ( 0 , 0 , N ) ; } }"],"references":["class GFG { static int printPattern ( int i , int j , int n ) { if ( j >= n ) { return 0 ; } if ( i >= n ) { return 1 ; } if ( j == i || j == n - 1 - i ) { if ( i == n - 1 - j ) { System . out . print ( \" \/ \" ) ; } else { System . out . print ( \" \\ \\\" ) ; } } else { System . out . print ( \" * \" ) ; } if ( printPattern ( i , j + 1 , n ) == 1 ) { return 1 ; } System . out . println ( ) ; return printPattern ( i + 1 , 0 , n ) ; } public static void main ( String [ ] args ) { int N = 9 ; printPattern ( 0 , 0 , N ) ; } }"],"bleu":0.7239000104954888,"rouge_l":0.8865928416056952}
{"id":1406,"predictions":["class GFG { static int findMaxValue ( int arr [ ] , int n ) { int min1 [ ] = new int [ n + 1 ] ; int table2 [ ] = new int [ n + 1 ] ; int table3 [ ] = new int [ n + 1 ] ; for ( int i = n - 1 ; i >= 0 ; i -- ) table1 [ i ] = Math . max ( table1 [ i + 1 ] , arr [ i ] ) ; for ( int i = n - 2 ; i >= 0 ; i -- ) table1 [ i ] = Math . max ( table1 [ i + 1 ] , arr [ i ] - arr [ i ] ) ; for ( int i = n - 2 ; i >= 0 ; i -- ) table2 [ i ] = Math . max ( table2 [ i + 1 ] , table1 [ i + 1 ] - arr [ i ] ) ; for ( int i = n - 4 ; i >= 0 ; i -- ) table3 [ i ] = Math . max ( table3 [ i + 1 ] , table3 [ i + 1 ] - arr [ i ] ) ; return table4 [ 0 ] ; } public static void main ( String [ ] args ) { int arr [ ] = { 4 , 8 , 9 , 2 , 20 } ; int n = arr . length ; int min = - 100000000 ; System . out . println ( findMaxValue ( arr , n ) ) ; } }"],"references":["import java . util . Arrays ; class GFG { static int findMaxValue ( int [ ] arr , int n ) { if ( n < 4 ) { System . out . println ( \" The ▁ array ▁ should ▁ have \" + \" ▁ atleast ▁ 4 ▁ elements \" ) ; } int table1 [ ] = new int [ n + 1 ] ; int table2 [ ] = new int [ n ] ; int table3 [ ] = new int [ n - 1 ] ; int table4 [ ] = new int [ n - 2 ] ; Arrays . fill ( table1 , Integer . MIN_VALUE ) ; Arrays . fill ( table2 , Integer . MIN_VALUE ) ; Arrays . fill ( table3 , Integer . MIN_VALUE ) ; Arrays . fill ( table4 , Integer . MIN_VALUE ) ; for ( int i = n - 1 ; i >= 0 ; i -- ) { table1 [ i ] = Math . max ( table1 [ i + 1 ] , arr [ i ] ) ; } for ( int i = n - 2 ; i >= 0 ; i -- ) { table2 [ i ] = Math . max ( table2 [ i + 1 ] , table1 [ i + 1 ] - arr [ i ] ) ; } for ( int i = n - 3 ; i >= 0 ; i -- ) table3 [ i ] = Math . max ( table3 [ i + 1 ] , table2 [ i + 1 ] + arr [ i ] ) ; for ( int i = n - 4 ; i >= 0 ; i -- ) table4 [ i ] = Math . max ( table4 [ i + 1 ] , table3 [ i + 1 ] - arr [ i ] ) ; return table4 [ 0 ] ; } public static void main ( String [ ] args ) { int arr [ ] = { 4 , 8 , 9 , 2 , 20 } ; int n = arr . length ; System . out . println ( findMaxValue ( arr , n ) ) ; } }"],"bleu":0.6321073579608785,"rouge_l":0.7759860020807718}
{"id":1407,"predictions":["import java . util . * ; class GfG { static void printElements ( int [ ] a , int n ) { Arrays . sort ( a ) ; int cnt = 1 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] != a [ i + 1 ] ) { System . out . println ( a [ i ] + \" ▁ \" ) ; cnt = 1 ; } else { cnt ++ ; } } System . out . println ( ) ; for ( int i = 0 ; i < n - 1 ; i ++ ) { System . out . println ( a [ i ] + \" ▁ \" + cnt + \" ) ; } } public static void main ( String args [ ] ) { int a [ ] = { 1 , 1 , 1 , 2 , 3 , 4 , 9 , 10 } ; int n = a . length ; printElements ( a , n ) ; } }"],"references":["import java . util . * ; class GFG { static void printElements ( int a [ ] , int n ) { Arrays . sort ( a ) ; a = reverse ( a ) ; int cnt = 1 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] != a [ i + 1 ] ) { System . out . print ( a [ i ] + \" ▁ occurs ▁ \" + cnt + \" ▁ times \\n \" ) ; cnt = 1 ; } else cnt += 1 ; } System . out . print ( a [ n - 1 ] + \" ▁ occurs ▁ \" + cnt + \" ▁ times \\n \" ) ; } static int [ ] reverse ( int a [ ] ) { int i , n = a . length , t ; for ( i = 0 ; i < n \/ 2 ; i ++ ) { t = a [ i ] ; a [ i ] = a [ n - i - 1 ] ; a [ n - i - 1 ] = t ; } return a ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 1 , 1 , 2 , 3 , 4 , 9 , 9 , 10 } ; int n = a . length ; printElements ( a , n ) ; } }"],"bleu":0.5464943870118154,"rouge_l":0.700858250276855}
{"id":1408,"predictions":["class GFG { static int findMin ( int arr [ ] , int n ) { int m = 0 ; for ( int i = 0 ; i < n ; i ++ ) m = Math . max ( m , arr [ i ] ) ; int freq [ ] = new int [ m + 2 ] ; for ( int i = 0 ; i < n ; i ++ ) freq [ arr [ i ] ++ ; for ( int i = 1 ; i <= m ; i ++ ) { int j = i ; int cnt = 0 ; while ( j <= m ) { cnt += freq [ j ] ; j += i ; } if ( cnt == 0 ) return i ; } return m + 1 ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 12 , 6 } ; int n = arr . length ; System . out . println ( findMin ( arr , n ) ) ; } }"],"references":["class GFG { static int findMin ( int arr [ ] , int n ) { int m = 0 ; for ( int i = 0 ; i < n ; i ++ ) m = Math . max ( m , arr [ i ] ) ; int freq [ ] = new int [ m + 2 ] ; for ( int i = 0 ; i < n ; i ++ ) freq [ arr [ i ] ] ++ ; for ( int i = 1 ; i <= m + 1 ; i ++ ) { int j = i ; int cnt = 0 ; while ( j <= m ) { cnt += freq [ j ] ; j += i ; } if ( cnt == 0 ) return i ; } return m + 1 ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 12 , 6 } ; int n = arr . length ; System . out . println ( findMin ( arr , n ) ) ; } }"],"bleu":0.9726793261264413,"rouge_l":0.9908155455395867}
{"id":1409,"predictions":["class GFG { static void swapOperations ( char [ ] a , char [ ] b , char c ) { int l = a . length ; int i = 0 , total_swaps = 0 ; for ( i = 0 ; i < l ; i ++ ) { if ( a [ i ] == b [ i ] ) { continue ; } if ( a [ i ] == c [ i ] ) { swap ( c , c [ i ] ) ; c = c [ i ] ; total_swaps ++ ; continue ; } if ( b [ i ] == c [ i ] ) { swap ( c [ i ] , c [ i ] ) ; total_swaps ++ ; continue ; } break ; } i ++ ; } i ++ ; if ( i == l ) { System . out . println ( total_swaps ) ; } else { System . out . println ( - 1 ) ; } } public static void main ( String [ ] args ) { char [ ] a = \" xyz \" . toCharArray ( ) ; char b = \" yyz \" . toCharArray ( ) ; } }"],"references":["class GFG { static void swapOperations ( char [ ] a , char [ ] b , char [ ] c ) { int l = a . length ; int i = 0 ; int total_swaps = 0 ; char temp ; for ( i = 0 ; i < l ; i ++ ) { if ( a [ i ] == b [ i ] ) continue ; if ( a [ i ] == c [ i ] ) { temp = b [ i ] ; b [ i ] = c [ i ] ; c [ i ] = temp ; total_swaps ++ ; continue ; } if ( b [ i ] == c [ i ] ) { temp = a [ i ] ; a [ i ] = c [ i ] ; c [ i ] = temp ; total_swaps ++ ; continue ; } break ; } if ( i == l ) System . out . println ( total_swaps ) ; else System . out . println ( - 1 ) ; } public static void main ( String [ ] args ) { String a = \" xyz \" ; String b = \" yzx \" ; String c = \" yzx \" ; swapOperations ( a . toCharArray ( ) , b . toCharArray ( ) , c . toCharArray ( ) ) ; } }"],"bleu":0.6498934302308434,"rouge_l":0.7778727648357912}
{"id":1410,"predictions":["class GFG { static int findMinimumZ ( int n , int a , int b ) { if ( a > b ) { int temp = a ; a = b ; b = temp ; } int distCorn = b - a + ( n - b + 1 ) ; int minDist = Math . min ( a - b + 1 ) ; if ( minDist == 1 ) return 3 ; return minDist ; } public static void main ( String [ ] args ) { int n = 4 , a = 1 , b = 2 ; System . out . println ( findMinimumZ ( n , a , b ) ) ; } }"],"references":["class GFG { static int findMinimumZ ( int n , int a , int b ) { if ( a > b ) { swap ( a , b ) ; } int distClock = b - a ; int distAntiClock = ( a - 1 ) + ( n - b + 1 ) ; int minDist = Math . min ( distClock , distAntiClock ) ; if ( minDist == 1 ) { return 3 ; } return minDist ; } private static void swap ( int x , int y ) { int temp = x ; x = y ; y = temp ; } public static void main ( String [ ] args ) { int n = 4 , a = 1 , b = 2 ; System . out . println ( findMinimumZ ( n , a , b ) ) ; } }"],"bleu":0.6574188748950001,"rouge_l":0.7619608767381569}
{"id":1411,"predictions":["class GFG { static int solve ( int ang , int n ) { if ( ( ang * n ) > ( 180 * ( n - 2 ) ) ) return 0 ; else if ( ( ang * n ) % 180 != 0 ) return 0 ; int ans = 1 ; int freq = ( ang * n ) \/ 180 ; ans = ans * n ; return ans ; } public static void main ( String [ ] args ) { int ang = 90 , n = 4 ; System . out . println ( solve ( ang , n ) ) ; } }"],"references":["class GFG { static int solve ( int ang , int n ) { if ( ( ang * n ) > ( 180 * ( n - 2 ) ) ) { return 0 ; } else if ( ( ang * n ) % 180 != 0 ) { return 0 ; } int ans = 1 ; int freq = ( ang * n ) \/ 180 ; ans = ans * ( n - 1 - freq ) ; ans = ans * n ; return ans ; } public static void main ( String [ ] args ) { int ang = 90 , n = 4 ; System . out . println ( solve ( ang , n ) ) ; } }"],"bleu":0.8205893434838453,"rouge_l":0.9228812424688713}
{"id":1412,"predictions":["class GFG { static boolean bitsAreInAltPatrn ( int n , int l , int r ) { int num = n >> ( l - 1 ) ; int prev = num & 1 ; num = num >> 1 ; num = num >> 1 ; for ( int i = 1 ; i < ( r - l ) ; i ++ ) { int curr = num & 1 ; if ( curr == prev ) return false ; prev = curr ; num = num >> 1 ; } return true ; } public static void main ( String [ ] args ) { int n = 18 ; int l = 1 , r = 3 ; if ( bitsAreInAltPatrnInGivenRange ( n , l , r ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static boolean bitsAreInAltPatrnInGivenTRange ( int n , int l , int r ) { int num , prev , curr ; num = n >> ( l - 1 ) ; prev = num & 1 ; num = num >> 1 ; for ( int i = 1 ; i <= ( r - l ) ; i ++ ) { curr = num & 1 ; if ( curr == prev ) return false ; prev = curr ; num = num >> 1 ; } return true ; } public static void main ( String [ ] args ) { int n = 18 ; int l = 1 , r = 3 ; if ( bitsAreInAltPatrnInGivenTRange ( n , l , r ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.8826213491945742,"rouge_l":0.9373823959857829}
{"id":1413,"predictions":["import java . io . * ; class GFG { static int countFibs ( int low , int high ) { int f1 = 0 , f2 = 1 ; int f2 = 0 ; while ( f1 <= high ) { if ( f1 >= low ) result ++ ; f1 = f2 ; f2 = f3 + f2 ; f3 = f1 + f2 ; } return result ; } public static void main ( String [ ] args ) { int low = 10 , high = 100 ; System . out . println ( \" Count ▁ of ▁ Fibonacci ▁ Numbers ▁ is ▁ \" + countFibs ( low , high ) ) ; } }"],"references":["public class GFG { static int countFibs ( int low , int high ) { int f1 = 0 , f2 = 1 , f3 = 1 ; int result = 0 ; while ( f1 <= high ) { if ( f1 >= low ) result ++ ; f1 = f2 ; f2 = f3 ; f3 = f1 + f2 ; } return result ; } public static void main ( String args [ ] ) { int low = 10 , high = 100 ; System . out . println ( \" Count ▁ of ▁ Fibonacci ▁ Numbers ▁ is ▁ \" + countFibs ( low , high ) ) ; } }"],"bleu":0.8596284326745628,"rouge_l":0.9271797706231866}
{"id":1414,"predictions":["import java . io . * ; class GFG { static int Sum_upto_nth_nth_n ( int N ) { return n * ( n + 1 ) * ( 2 * n + 7 ) \/ 3 ; } public static void main ( String [ ] args ) { int N = 5 ; System . out . println ( Sum_upto_nth_nth_nth_n \" ) ; } }"],"references":["import java . io . * ; class GFG { static void Sum_upto_nth_Term ( int n ) { int r = n * ( n + 1 ) * ( 2 * n + 7 ) \/ 3 ; System . out . println ( r ) ; } public static void main ( String [ ] args ) { int N = 5 ; Sum_upto_nth_Term ( N ) ; } }"],"bleu":0.7354560190969195,"rouge_l":0.7909005186232908}
{"id":1415,"predictions":["class GFG { static class Node { int data ; Node next ; } ; static Node newNode ( int data ) { Node temp = new Node ( ) ; temp . data = data ; temp . next = null ; return temp ; } static void printList ( Node node ) { while ( node != null ) { System . out . print ( node . data + \" ▁ \" ) ; node = node . next ; } } static int pushToFront ( Node head , int p , int m ) { if ( head == null ) return head ; p = head ; head = head . next ; m = m + 1 ; if ( length == m ) { p . next = null ; last . next = head ; } else { move = head ; } } static Node push ( Node head_ref , int new_data ) { Node new_node = new Node ( ) ; new_node . data = new_data ; new_node . next = ( head_ref ) ; if ( length == 0 ) last = head_ref ; else { head = head_ref ; } len ++ ; return head_ref ; } static void push ( Node head_ref , int new_data ) { Node start = new_node ; new_node . data = new_data ; new_node . next = ( head_ref ) ; new_node . next = new_node ; return head_ref ; } public static void main ( String args [ ] ) { Node start = null ; start = push ( start , 5 ) ; start = push ( start , 4 ) ; start = push ( start , 3 ) ; start = push ( start , 2 ) ; start = push ( start , 1 ) ; start = push ( start , 2 ) ; start = start . next ; System . out . println ( \" \\n Initial ▁ Linked ▁ List ▁ \" ) ; printList ( start ) ; } }"],"references":["class GFG { static class Node { int data ; Node next ; } static Node first , last ; static int length = 0 ; static void printList ( Node node ) { while ( node != null ) { System . out . printf ( \" % d ▁ \" , node . data ) ; node = node . next ; } } static void moveToFront ( Node head , Node p , int m ) { if ( head == null ) return ; p = head ; head = head . next ; m ++ ; if ( length == m ) { p . next = null ; last . next = first ; first = head ; } else moveToFront ( head , p , m ) ; } static Node push ( Node head_ref , int new_data ) { Node new_node = new Node ( ) ; new_node . data = new_data ; new_node . next = head_ref ; head_ref = new_node ; if ( length == 0 ) last = head_ref ; else first = head_ref ; length ++ ; return head_ref ; } public static void main ( String [ ] args ) { Node start = null ; start = push ( start , 5 ) ; start = push ( start , 4 ) ; start = push ( start , 3 ) ; start = push ( start , 2 ) ; start = push ( start , 1 ) ; start = push ( start , 0 ) ; System . out . printf ( \" \\n ▁ Initial ▁ Linked ▁ list \\n \" ) ; printList ( start ) ; int m = 4 ; Node temp = new Node ( ) ; moveToFront ( start , temp , m ) ; System . out . printf ( \" \\n ▁ Final ▁ Linked ▁ list \\n \" ) ; start = first ; printList ( start ) ; } }"],"bleu":0.6672143403352865,"rouge_l":0.7311693915711752}
{"id":1416,"predictions":["import java . util . * ; class GFG { static void printRepeating ( int arr [ ] , int size ) { HashSet < Integer > set = new HashSet < > ( ) ; for ( int i = 0 ; i < size ; i ++ ) { if ( set . contains ( arr [ i ] ) ) { set . add ( arr [ i ] ) ; } } for ( int i = 0 ; i < size ; i ++ ) System . out . print ( arr [ i ] + \" ▁ \" ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 3 , 2 , 2 , 1 } ; int size = arr . length ; repeat . printRepeating ( arr , size ) ; } }"],"references":["import java . io . * ; import java . util . * ; public class GFG { static void printRepeating ( Integer [ ] arr , int size ) { SortedSet < Integer > s = new TreeSet < > ( ) ; Collections . addAll ( s , arr ) ; System . out . print ( s ) ; } public static void main ( String args [ ] ) { Integer [ ] arr = { 1 , 3 , 2 , 2 , 1 } ; int n = arr . length ; printRepeating ( arr , n ) ; } }"],"bleu":0.37475626386985794,"rouge_l":0.6674482219617037}
{"id":1417,"predictions":["class GFG { static int maxsum_SIS ( int arr [ ] , int n ) { int max_sum = 0 ; int current_sum = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i - 1 ] < arr [ i ] ) current_sum = current_sum + arr [ i ] ; else { max_sum = Math . max ( max_sum , current_sum ) ; current_sum = arr [ i ] ; } } return max_sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 2 , 4 } ; int n = arr . length ; System . out . println ( \" Maximum ▁ sum ▁ : ▁ \" + maxsum_SIS ( arr , n ) ) ; } }"],"references":["public class GFG { static int maxsum_SIS ( int arr [ ] , int n ) { int max_sum = 0 ; int current_sum = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i - 1 ] < arr [ i ] ) { current_sum = current_sum + arr [ i ] ; } else { max_sum = Math . max ( max_sum , current_sum ) ; current_sum = arr [ i ] ; } } return Math . max ( max_sum , current_sum ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 2 , 4 } ; int n = arr . length ; System . out . println ( \" Maximum ▁ sum ▁ : ▁ \" + maxsum_SIS ( arr , n ) ) ; } }"],"bleu":0.9028013513156774,"rouge_l":0.9623863755093511}
{"id":1418,"predictions":["import java . util . * ; class GFG { static int sumoflength ( int arr [ ] , int n ) { Set < Integer > s = new HashSet < Integer > ( ) ; int j = 0 ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { while ( j < n && s . contains ( arr [ j ] ) ) { s . add ( arr [ j ] ) ; j ++ ; } ans += ( ( j - i + 1 ) * ( j - i + 1 ) ) \/ 2 ; s . remove ( arr [ i ] ) ; } return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 4 } ; int n = arr . length ; System . out . println ( sumoflength ( arr , n ) ) ; } }"],"references":["import java . util . * ; class geeks { public static int sumoflength ( int [ ] arr , int n ) { Set < Integer > s = new HashSet < > ( ) ; int j = 0 , ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { while ( j < n && ! s . contains ( arr [ j ] ) ) { s . add ( arr [ i ] ) ; j ++ ; } ans += ( ( j - i ) * ( j - i + 1 ) ) \/ 2 ; s . remove ( arr [ i ] ) ; } return ans ; } public static void main ( String [ ] args ) { int [ ] arr = { 1 , 2 , 3 , 4 } ; int n = arr . length ; System . out . println ( sumoflength ( arr , n ) ) ; } }"],"bleu":0.8640726016714828,"rouge_l":0.956024707292339}
{"id":1419,"predictions":["import java . util . * ; class GFG { static class Node { int data ; Node left , right ; } static Node newNode ( int data ) { Node temp = new Node ( ) ; temp . data = data ; temp . left = temp . right = null ; return temp ; } static void printKPathUtil ( Node root , Vector < Integer > path , int k ) { if ( root == null ) return ; path . add ( root . data ) ; printKPathUtil ( root . left , path , k ) ; printKPathUtil ( root . right , path , k ) ; int f = 0 ; for ( int j = path . size ( ) - 1 ; j >= 0 ; j -- ) { f += path . data ; if ( f == k ) printMatrix ( path , path , j ) ; } path . remove ( - 1 ) ; } static void printKPath ( Node root , int k ) { Vector < Integer > path = new Vector < > ( ) ; printKPathUtil ( root , path , path , k ) ; printKPathUtil ( root , path , k ) ; } static void printKPath ( Node root , int k ) { Vector < Integer > path = new Vector < Integer > ( ) ; path . left . right = new Vector < > ( ) ; path . left . left = new Vector < > ( ) ; path . right = new Vector < > ( ) ; for ( int i = path . size ( ) - 1 ; i >= 0 ; i -- ) { path . add ( path . get ( i ) ; if ( f == k ) printMatrix ( path , j ) ; } } public static void main ( String [ ] args ) { Node root = newNode ( 1 ) ; root . left = newNode ( 3 ) ; root . left . left = newNode ( 1 ) ; root . left . right = newNode ( 2 ) ; root . right . left = newNode ( 1 ) ; root . right . left = newNode ( 1 ) ; root . right . right . left = newNode ( 2 ) ; int k = 5 ; printKPath ( root , k ) ; } }"],"references":["import java . util . * ; class GFG { static void printVector ( Vector < Integer > v , int i ) { for ( int j = i ; j < v . size ( ) ; j ++ ) System . out . print ( v . get ( j ) + \" ▁ \" ) ; System . out . println ( ) ; } static class Node { int data ; Node left , right ; Node ( int x ) { data = x ; left = right = null ; } } ; static Vector < Integer > path = new Vector < Integer > ( ) ; static void printKPathUtil ( Node root , int k ) { if ( root == null ) return ; path . add ( root . data ) ; printKPathUtil ( root . left , k ) ; printKPathUtil ( root . right , k ) ; int f = 0 ; for ( int j = path . size ( ) - 1 ; j >= 0 ; j -- ) { f += path . get ( j ) ; if ( f == k ) printVector ( path , j ) ; } path . remove ( path . size ( ) - 1 ) ; } static void printKPath ( Node root , int k ) { path = new Vector < Integer > ( ) ; printKPathUtil ( root , k ) ; } public static void main ( String args [ ] ) { Node root = new Node ( 1 ) ; root . left = new Node ( 3 ) ; root . left . left = new Node ( 2 ) ; root . left . right = new Node ( 1 ) ; root . left . right . left = new Node ( 1 ) ; root . right = new Node ( - 1 ) ; root . right . left = new Node ( 4 ) ; root . right . left . left = new Node ( 1 ) ; root . right . left . right = new Node ( 2 ) ; root . right . right = new Node ( 5 ) ; root . right . right . right = new Node ( 2 ) ; int k = 5 ; printKPath ( root , k ) ; } }"],"bleu":0.6475748413498892,"rouge_l":0.646973327571984}
{"id":1420,"predictions":["class GFG { static void reverseArray ( int arr [ ] , int n ) { for ( int i = 0 ; i < n \/ 2 ; i ++ ) swap ( arr , i , ( n + ~ i + 1 ) + ~ 1 + ~ 1 ) ; int tmp = arr [ ( n + ~ i + 1 ) + ~ 1 ] ; arr [ i ] = tmp ; return ; } public static void main ( String [ ] args ) { int arr [ ] = { 5 , 3 , 7 , 2 , 1 , 6 } ; int n = arr . length ; reverseArray ( arr , n ) ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + \" ▁ \" ) ; } }"],"references":["import java . util . Arrays ; class GFG { static void reverseArray ( int arr [ ] , int n ) { for ( int i = 0 ; i < n \/ 2 ; i ++ ) { swap ( arr , i , ( n + ~ i + 1 ) + ~ 1 + 1 ) ; } } static int [ ] swap ( int [ ] arr , int i , int j ) { int temp = arr [ i ] ; arr [ i ] = arr [ j ] ; arr [ j ] = temp ; return arr ; } public static void main ( String args [ ] ) { int arr [ ] = { 5 , 3 , 7 , 2 , 1 , 6 } ; int n = arr . length ; reverseArray ( arr , n ) ; for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( arr [ i ] + \" ▁ \" ) ; } } }"],"bleu":0.680990285652416,"rouge_l":0.8195558872924052}
{"id":1421,"predictions":["class GFG { static class Node { int data ; Node next ; } ; static Node getNode ( int data ) { Node newNode = new Node ( ) ; newNode . data = data ; new_node . prev = null ; return new_node ; } static Node reverse ( Node head_ref ) { new_node . prev = new_node ; new_node . prev = null ; if ( ( head_ref ) != null ) ( head_ref ) . prev = new_node ; ( head_ref ) . prev = new_node ; return head_ref ; } static Node reverseList ( Node head_ref ) { if ( head_ref == null || ( head_ref ) . prev == null ) return null ; Node new_node = null ; Node curr = head_ref ; while ( curr != null ) { next = curr . next ; new_head = push ( new_node ) ; curr = next ; } head_ref ; return head_ref ; } static void printList ( Node head ) { while ( head != null ) { System . out . print ( head . data + \" ▁ \" ) ; head = head . next ; } } public static void main ( String [ ] args ) { Node head = null ; head = push ( head , 2 ) ; head = push ( head , 4 ) ; head = push ( head , 8 ) ; head = push ( head , 10 ) ; head = push ( head , 10 ) ; head = reverseList ( head ) ; head = reverseList ( head ) ; System . out . print ( \" Original ▁ List : ▁ \" ) ; printList ( head ) ; head = reverse ( head ) ; } }"],"references":["class GFG { static class Node { int data ; Node next , prev ; } ; static Node getNode ( int data ) { Node new_node = new Node ( ) ; new_node . data = data ; new_node . next = new_node . prev = null ; return new_node ; } static Node push ( Node head_ref , Node new_node ) { new_node . prev = null ; new_node . next = ( head_ref ) ; if ( ( head_ref ) != null ) ( head_ref ) . prev = new_node ; ( head_ref ) = new_node ; return head_ref ; } static Node reverseList ( Node head_ref ) { if ( ( head_ref ) == null || ( ( head_ref ) . next ) == null ) return null ; Node new_head = null ; Node curr = head_ref , next ; while ( curr != null ) { next = curr . next ; new_head = push ( new_head , curr ) ; curr = next ; } head_ref = new_head ; return head_ref ; } static void printList ( Node head ) { while ( head != null ) { System . out . print ( head . data + \" ▁ \" ) ; head = head . next ; } } public static void main ( String args [ ] ) { Node head = null ; head = push ( head , getNode ( 2 ) ) ; head = push ( head , getNode ( 4 ) ) ; head = push ( head , getNode ( 8 ) ) ; head = push ( head , getNode ( 10 ) ) ; System . out . print ( \" Original ▁ list : ▁ \" ) ; printList ( head ) ; head = reverseList ( head ) ; System . out . print ( \" \\n Reversed ▁ list : ▁ \" ) ; printList ( head ) ; } }"],"bleu":0.7188512842246453,"rouge_l":0.8528191734521432}
{"id":1422,"predictions":["class GfG { static double decdiagonal ( double a ) { if ( a < 0 ) return - 1 ; double d = 1.9f * a ; return d ; } static public void main ( String [ ] args ) { double a = 9 ; System . out . println ( decdiagonal ( a ) ) ; } }"],"references":["import java . util . * ; import java . lang . * ; import java . io . * ; public class GFG { static double decdiagonal ( double a ) { if ( a < 0 ) return - 1 ; double d = 1.902 * a ; return d ; } public static void main ( String [ ] args ) { int a = 9 ; System . out . println ( decdiagonal ( a ) ) ; } }"],"bleu":0.5868824244840235,"rouge_l":0.7735024048972452}
{"id":1423,"predictions":["public class GFG { static int findSum ( int N , int k ) { int sum = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { sum += ( int ) Math . pow ( i , k ) ; } return sum ; } static public void main ( String [ ] args ) { int N = 8 , k = 4 ; System . out . println ( findSum ( N , k ) ) ; } }"],"references":["class GFG { static int findSum ( int N , int k ) { int sum = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { sum += ( int ) Math . pow ( i , k ) ; } return sum ; } public static void main ( String [ ] args ) { int N = 8 , k = 4 ; System . out . println ( findSum ( N , k ) ) ; } }"],"bleu":0.9548153222052201,"rouge_l":0.9842317565089841}
{"id":1424,"predictions":["import java . util . * ; class GFG { static void reverse ( String [ ] k ) { Set < String > s = new HashSet < > ( ) ; for ( int i = 0 ; i < k ; i ++ ) { s . add ( String . valueOf ( i ) ) ; } while ( ! s . isEmpty ( ) ) { System . out . print ( s . peek ( ) + \" ▁ \" ) ; } } public static void main ( String [ ] args ) { String k = \" geeks ▁ for ▁ geeks \" ; reverse ( k ) ; } }"],"references":["import java . util . Arrays ; import java . util . Stack ; class GFG { static void reverse ( String k ) { Stack < String > s = new Stack < > ( ) ; String [ ] token = k . split ( \" ▁ \" ) ; for ( int i = 0 ; i < token . length ; i ++ ) { s . push ( token [ i ] ) ; } while ( ! s . empty ( ) ) { System . out . print ( s . peek ( ) + \" ▁ \" ) ; s . pop ( ) ; } } public static void main ( String [ ] args ) { String k = \" geeks ▁ for ▁ geeks \" ; reverse ( k ) ; } }"],"bleu":0.6473886126053404,"rouge_l":0.7924990807697022}
{"id":1425,"predictions":["import java . util . * ; class GFG { static boolean subArray ( int arr [ ] , int n , int m ) { int i = 0 ; HashMap < Integer , Integer > mp = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { mp . put ( arr [ i ] , i + 1 ) ; } int sumcur = 0 ; int p = Integer . MAX_VALUE ; for ( int i = 1 ; i <= m ; i ++ ) { sumcur += mp . get ( arr [ i ] ) ; p = Math . min ( p , mp . get ( i ) ) ; val = p * i - i + ( i * ( i + 1 ) ) \/ 2 ; if ( i == m ) return true ; else return false ; } } return false ; } public static void main ( String [ ] args ) { int arr [ ] = { 4 , 5 , 1 , 3 , 2 , 6 } ; int n = arr . length ; int m = 3 ; if ( subArray ( arr , n , m ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; class GFG { static boolean subArray ( int [ ] arr , int n , int m ) { int i ; HashMap < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; for ( i = 0 ; i < n ; i ++ ) { mp . put ( arr [ i ] , i + 1 ) ; } int sumcur = 0 ; int p = Integer . MAX_VALUE ; Vector < Integer > ans = new Vector < Integer > ( ) ; for ( i = 1 ; i <= m ; i ++ ) { sumcur += mp . get ( i ) ; p = Math . min ( p , mp . get ( i ) ) ; int val = p * i - i + ( i * ( i + 1 ) ) \/ 2 ; if ( i == m ) { if ( val == sumcur ) { return true ; } else return false ; } } return false ; } public static void main ( String [ ] args ) { int arr [ ] = { 4 , 5 , 1 , 3 , 2 , 6 } ; int n = arr . length ; int m = 3 ; if ( subArray ( arr , n , m ) ) System . out . print ( \" Yes \" ) ; else System . out . print ( \" No \" ) ; } }"],"bleu":0.8140327202217078,"rouge_l":0.9160777385159012}
{"id":1426,"predictions":["import java . util . * ; class Graph { static class Graph { int V ; LinkedList < Integer > [ ] adj ; Graph ( int V ) { this . adj = new LinkedList [ V ] ; for ( int i = 0 ; i < adj . length ; i ++ ) adj [ i ] = new LinkedList < > ( ) ; } void addEdge ( int v , int w ) { adj [ v ] . add ( w ) ; } void addEdge ( int s , Vector < Integer > w ) { adj [ s ] . add ( w ) ; Stack < Integer > stack = new Stack < > ( ) ; stack . push ( s ) ; while ( ! stack . empty ( ) ) { stack . push ( s ) ; stack . pop ( ) ; stack . pop ( ) ; } while ( ! visited . empty ( ) ) { s = stack . pop ( ) ; stack . push ( s ) ; } } void DFS ( ) { Vector < Boolean > visited = new Vector < > ( ) ; for ( int i = 0 ; i < adj . size ( ) ; ++ i ) visited . add ( new Vector < Integer > ( ) ) ; for ( int i = 0 ; i < adj . size ( ) ; i ++ ) if ( ! visited . get ( i ) ) stack . push ( i ) ; } public static void main ( String args [ ] ) { Graph g = new Graph ( 5 ) ; g . addEdge ( 1 , 0 ) ; g . addEdge ( 0 , 2 ) ; g . addEdge ( 0 , 1 ) ; g . addEdge ( 1 , 2 ) ; g . addEdge ( 0 , 3 ) ; g . addEdge ( 0 , 4 ) ; g . addEdge ( 1 , 3 ) ; System . out . println ( \" Following ▁ is ▁ Depth ▁ First ▁ Traversal \" ) ; g . DFS ( 0 ) ; } }"],"references":["import java . util . * ; public class GFG { static class Graph { int V ; LinkedList < Integer > [ ] adj ; Graph ( int V ) { this . V = V ; adj = new LinkedList [ V ] ; for ( int i = 0 ; i < adj . length ; i ++ ) adj [ i ] = new LinkedList < Integer > ( ) ; } void addEdge ( int v , int w ) { adj [ v ] . add ( w ) ; } void DFS ( int s ) { Vector < Boolean > visited = new Vector < Boolean > ( V ) ; for ( int i = 0 ; i < V ; i ++ ) visited . add ( false ) ; Stack < Integer > stack = new Stack < > ( ) ; stack . push ( s ) ; while ( stack . empty ( ) == false ) { s = stack . peek ( ) ; stack . pop ( ) ; if ( visited . get ( s ) == false ) { System . out . print ( s + \" ▁ \" ) ; visited . set ( s , true ) ; } Iterator < Integer > itr = adj [ s ] . iterator ( ) ; while ( itr . hasNext ( ) ) { int v = itr . next ( ) ; if ( ! visited . get ( v ) ) stack . push ( v ) ; } } } } public static void main ( String [ ] args ) { Graph g = new Graph ( 5 ) ; g . addEdge ( 1 , 0 ) ; g . addEdge ( 0 , 2 ) ; g . addEdge ( 2 , 1 ) ; g . addEdge ( 0 , 3 ) ; g . addEdge ( 1 , 4 ) ; System . out . println ( \" Following ▁ is ▁ the ▁ Depth ▁ First ▁ Traversal \" ) ; g . DFS ( 0 ) ; } }"],"bleu":0.6945642722616567,"rouge_l":0.7572193910884619}
{"id":1427,"predictions":["import java . util . * ; class GFG { static class Node { int val ; Node left , right ; } ; static Node newNode ( int data ) { Node temp = new Node ( ) ; temp . data = data ; temp . left = temp . right = null ; return temp ; } static void diagonal ( Node root ) { if ( root == null ) return ; Queue < Node > q = new LinkedList < Node > ( ) ; q . add ( root ) ; while ( ! q . isEmpty ( ) ) { Node temp = q . peek ( ) ; q . poll ( ) ; if ( temp . left == null ) return ; System . out . print ( \" ▁ \" ) ; q . add ( null ) ; } else { while ( temp != null ) { System . out . print ( temp . left + \" ▁ \" ) ; if ( temp . left != null ) q . add ( temp . left ) ; temp = temp . right ; } } } public static void main ( String args [ ] ) { Node root = newNode ( 8 ) ; root . left = newNode ( 3 ) ; root . left . left = newNode ( 10 ) ; root . left . right = newNode ( 1 ) ; root . left . right = newNode ( 6 ) ; root . left . left . left = newNode ( 14 ) ; root . right . left . right = newNode ( 13 ) ; root . right . right . left = newNode ( 4 ) ; diagonal ( root ) ; } }"],"references":["import java . util . * ; class solution { static class Node { int data ; Node left , right ; } ; static Node newNode ( int data ) { Node node = new Node ( ) ; node . data = data ; node . left = node . right = null ; return ( node ) ; } static void diagonalPrint ( Node root ) { if ( root == null ) return ; Queue < Node > q = new LinkedList < Node > ( ) ; q . add ( root ) ; q . add ( null ) ; while ( q . size ( ) > 0 ) { Node temp = q . peek ( ) ; q . remove ( ) ; if ( temp == null ) { if ( q . size ( ) == 0 ) return ; System . out . println ( ) ; q . add ( null ) ; } else { while ( temp != null ) { System . out . print ( temp . data + \" ▁ \" ) ; if ( temp . left != null ) q . add ( temp . left ) ; temp = temp . right ; } } } } public static void main ( String args [ ] ) { Node root = newNode ( 8 ) ; root . left = newNode ( 3 ) ; root . right = newNode ( 10 ) ; root . left . left = newNode ( 1 ) ; root . left . right = newNode ( 6 ) ; root . right . right = newNode ( 14 ) ; root . right . right . left = newNode ( 13 ) ; root . left . right . left = newNode ( 4 ) ; root . left . right . right = newNode ( 7 ) ; diagonalPrint ( root ) ; } }"],"bleu":0.7728675560938891,"rouge_l":0.8597647535996757}
{"id":1428,"predictions":["import java . util . * ; class GFG { static int getWinner ( int [ ] arr , int n ) { int gcd = gcd ( arr , 0 ) ; int maxEle = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { gcd = __gcd ( gcd , arr [ i ] ) ; maxEle = Math . max ( maxEle , arr [ i ] ) ; } int totalMoves = ( maxEle \/ gcd ) - n ; if ( totalMoves % 2 == 1 ) return ' A ' ; return ' B ' ; } static public void main ( String [ ] args ) { int arr [ ] = { 5 , 6 , 7 } ; int n = arr . length ; System . out . println ( getWinner ( arr , n ) ) ; } }"],"references":["class GFG { static int __gcd ( int a , int b ) { if ( b == 0 ) return a ; return __gcd ( b , a % b ) ; } static char getWinner ( int [ ] arr , int n ) { int gcd = arr [ 0 ] ; int maxEle = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { gcd = __gcd ( gcd , arr [ i ] ) ; maxEle = Math . max ( maxEle , arr [ i ] ) ; } int totalMoves = ( maxEle \/ gcd ) - n ; if ( totalMoves % 2 == 1 ) return ' A ' ; return ' B ' ; } public static void main ( String args [ ] ) { int [ ] arr = { 5 , 6 , 7 } ; int n = arr . length ; System . out . print ( getWinner ( arr , n ) ) ; } }"],"bleu":0.7273446666442082,"rouge_l":0.8382297194844579}
{"id":1429,"predictions":["class GFG { static void CountingEvenOdd ( int arr [ ] , int arr_size ) { int even_count = 0 , odd_count = 0 ; for ( int i = 0 ; i < arr_size ; i ++ ) { if ( ( arr [ i ] & 1 ) == 1 ) odd_count ++ ; else even_count ++ ; } System . out . println ( \" Number ▁ of ▁ even ▁ elements ▁ = ▁ \" + even_count ) ; System . out . println ( \" Number ▁ of ▁ odd ▁ elements ▁ = ▁ \" + odd_count ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 3 , 4 , 5 , 6 } ; int n = arr . length ; CountingEvenOdd ( arr , n ) ; } }"],"references":["import java . io . * ; class GFG { static void CountingEvenOdd ( int arr [ ] , int arr_size ) { int even_count = 0 ; int odd_count = 0 ; for ( int i = 0 ; i < arr_size ; i ++ ) { if ( ( arr [ i ] & 1 ) == 1 ) odd_count ++ ; else even_count ++ ; } System . out . println ( \" Number ▁ of ▁ even \" + \" ▁ elements ▁ = ▁ \" + even_count + \" ▁ Number ▁ of ▁ odd ▁ elements ▁ = ▁ \" + odd_count ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 3 , 4 , 5 , 6 } ; int n = arr . length ; CountingEvenOdd ( arr , n ) ; } }"],"bleu":0.8790770657621251,"rouge_l":0.9218649517684887}
{"id":1430,"predictions":["class GFG { static String findSum ( String str ) { String temp = \" \" ; int sum = 0 , i ; for ( char ch : str . toCharArray ( ) ) { if ( Character . isDigit ( ch ) ) { temp += ( char ) ( ch ) ; } else { sum += temp ; } } return sum + temp ; } public static void main ( String [ ] args ) { String str = \"12abc20\" ; System . out . println ( findSum ( str ) ) ; } }"],"references":["class GFG { static int findSum ( String str ) { String temp = \" \" ; int sum = 0 ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { char ch = str . charAt ( i ) ; if ( Character . isDigit ( ch ) ) temp += ch ; else { sum += Integer . parseInt ( temp ) ; temp = \"0\" ; } } return sum + Integer . parseInt ( temp ) ; } public static void main ( String [ ] args ) { String str = \"12abc20yz68\" ; System . out . println ( findSum ( str ) ) ; } }"],"bleu":0.5377357596551672,"rouge_l":0.7523215322112594}
{"id":1431,"predictions":["class fibonacci { static int fib ( int n ) { int fibArray [ ] = new int [ n + 1 ] ; fibArray [ 0 ] = 1 ; while ( n <= 1 ) { fibArray [ n - 1 ] = 0 ; fibArray [ n - 1 ] = fib ( n - 1 ) ; if ( fibArray [ n - 1 ] == 0 ) fibArray [ n - 2 ] = fib ( n - 2 ) ; } fibArray [ n ] = fibArray [ n - 2 ] + fibArray [ n - 1 ] ; return fibArray [ n ] ; } public static void main ( String args [ ] ) { int n = 9 ; System . out . println ( fib ( n ) ) ; } }"],"references":["class fibonacci { static int fib ( int n ) { int f [ ] = new int [ n + 2 ] ; int i ; f [ 0 ] = 0 ; f [ 1 ] = 1 ; for ( i = 2 ; i <= n ; i ++ ) { f [ i ] = f [ i - 1 ] + f [ i - 2 ] ; } return f [ n ] ; } public static void main ( String args [ ] ) { int n = 9 ; System . out . println ( fib ( n ) ) ; } }"],"bleu":0.47197133605714403,"rouge_l":0.6816090443013014}
{"id":1432,"predictions":["class GFG { static int oddNumSum ( int n ) { int j = 0 , sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { j = ( 2 * i - 1 ) ; sum += ( j * j * j * j ) ; } return sum ; } public static void main ( String [ ] args ) { int n = 6 ; System . out . println ( oddNumSum ( n ) ) ; } }"],"references":["import java . io . * ; class GFG { static long oddNumSum ( int n ) { int j = 0 ; long sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { j = ( 2 * i - 1 ) ; sum = sum + ( j * j * j * j ) ; } return sum ; } public static void main ( String args [ ] ) { int n = 6 ; System . out . println ( oddNumSum ( n ) ) ; } }"],"bleu":0.7864866668118631,"rouge_l":0.8988613529805762}
{"id":1433,"predictions":["class GFG { static void findAandB ( int N ) { double val = N * N - 4.0 * N ; if ( val < 0 ) { System . out . println ( \" NO \" ) ; return ; } double a = ( N + ( Math . sqrt ( val ) ) \/ 2.0f * N ) \/ 2.0f ; double b = ( N - sqrt ( val ) ) \/ 2.0f ; System . out . print ( \" a ▁ = ▁ \" + b ) ; System . out . print ( \" b ▁ = ▁ \" + b ) ; } public static void main ( String [ ] args ) { int N = 69 ; findAandB ( N ) ; } }"],"references":["class GFG { static void findAandB ( double N ) { double val = N * N - 4.0 * N ; if ( val < 0 ) { System . out . println ( \" NO \" ) ; return ; } double a = ( N + Math . sqrt ( val ) ) \/ 2.0 ; double b = ( N - Math . sqrt ( val ) ) \/ 2.0 ; System . out . println ( \" a ▁ = ▁ \" + a ) ; System . out . println ( \" b ▁ = ▁ \" + b ) ; } public static void main ( String [ ] args ) { double N = 69.0 ; findAandB ( N ) ; } }"],"bleu":0.7812212547754982,"rouge_l":0.9122481769867753}
{"id":1434,"predictions":["class GFG { static String reverseSings ( String str ) { int index = str . length ( ) ; for ( int i = str . length ( ) - 1 ; i >= 0 ; i -- ) { if ( Character . isLowerCase ( str . charAt ( i ) ) ) { String temp = str . substring ( i ) ; while ( Character . isLetter ( str . charAt ( index ) ) ) { index = str . charAt ( index ) ; str . charAt ( index ) = temp ; break ; } } } return str ; } static String reverse ( String str ) { char [ ] str = str . toCharArray ( ) ; Arrays . sort ( str ) ; str = str . reverse ( ) ; return str ; } public static void main ( String [ ] args ) { String str = \" a ! str . toCharArray ( ) ; str = reverseSings ( str ) ; System . out . println ( \" Original ▁ string : ▁ \" + str . toCharArray ( ) ) ; } }"],"references":["class GFG { public static void reverse ( char str [ ] ) { int r = str . length - 1 , l = 0 ; while ( l < r ) { if ( ! Character . isAlphabetic ( str [ l ] ) ) l ++ ; else if ( ! Character . isAlphabetic ( str [ r ] ) ) r -- ; else { char tmp = str [ l ] ; str [ l ] = str [ r ] ; str [ r ] = tmp ; l ++ ; r -- ; } } } public static void main ( String [ ] args ) { String str = \" a ! ! ! b . c . d , e ' f , ghi \" ; char [ ] charArray = str . toCharArray ( ) ; System . out . println ( \" Input ▁ string : ▁ \" + str ) ; reverse ( charArray ) ; String revStr = new String ( charArray ) ; System . out . println ( \" Output ▁ string : ▁ \" + revStr ) ; } }"],"bleu":0.31191791004438973,"rouge_l":0.4867425816640345}
{"id":1435,"predictions":["import java . io . * ; class GFG { static int geometricMean ( int n ) { return ( int ) Math . sqrt ( n ) ; } public static void main ( String [ ] args ) { int n = 16 ; System . out . println ( geometricMean ( n ) ) ; } }"],"references":["class GFG { static int geometricMean ( int n ) { return ( int ) Math . sqrt ( n ) ; } public static void main ( String [ ] args ) { int n = 16 ; System . out . println ( geometricMean ( n ) ) ; } }"],"bleu":0.8823086045824727,"rouge_l":0.9486502347417838}
{"id":1436,"predictions":["import java . io . * ; import java . util . * ; class GFG { static int kPresentProbability ( int [ ] a , int n , int k ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] ) count ++ ; } return count \/ n ; } public static void main ( String args [ ] ) { int [ ] A = { 4 , 7 , 2 , 0 , 7 , 5 } ; int K = 2 ; int N = A . length ; System . out . print ( kPresentProbability ( A , N , K ) ) ; } }"],"references":["class GFG { static float kPresentProbability ( int a [ ] , int n , int k ) { float count = 0 ; for ( int i = 0 ; i < n ; i ++ ) if ( a [ i ] == k ) count ++ ; return count \/ n ; } public static void main ( String [ ] args ) { int A [ ] = { 4 , 7 , 2 , 0 , 8 , 7 , 5 } ; int K = 2 ; int N = A . length ; double n = kPresentProbability ( A , N , K ) ; double p = ( double ) Math . round ( n * 100 ) \/ 100 ; System . out . println ( p ) ; } }"],"bleu":0.6165773980859712,"rouge_l":0.7579010856453559}
{"id":1437,"predictions":["class GFG { static void checkEvenOdd ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { System . out . print ( \" Even \" ) ; return ; } } System . out . println ( \" Odd \" ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 12 , 20 , 36 , 38 , 38 } ; int n = arr . length ; checkEvenOdd ( arr , n ) ; } }"],"references":["import java . io . * ; class GFG { static void checkEvenOdd ( int [ ] arr , int n ) { for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { System . out . print ( \" Even \" ) ; return ; } } System . out . println ( \" Odd \" ) ; } public static void main ( String [ ] args ) { int [ ] arr = { 2 , 12 , 20 , 36 , 38 } ; int n = arr . length ; checkEvenOdd ( arr , n ) ; } }"],"bleu":0.879766211568335,"rouge_l":0.9415656008820288}
{"id":1438,"predictions":["class GFG { static int toggleLastMBits ( int n , int m ) { if ( m == 0 ) return n ; int num = ( 1 << m ) - 1 ; return ( n ^ num ) ; } static int largestNumWithNSetBits ( int n , int m ) { int num = ( 1 << ( n + m ) ) - 1 ; return toggleLastMBits ( num , m ) ; } public static void main ( String [ ] args ) { int n = 2 , m = 2 ; System . out . println ( largestNumWithNSetBits ( n , m ) ) ; } }"],"references":["import java . io . * ; class GFG { static int toggleLastMBits ( int n , int m ) { if ( m == 0 ) return n ; int num = ( 1 << m ) - 1 ; return ( n ^ num ) ; } static int largeNumWithNSetAndMUnsetBits ( int n , int m ) { int num = ( 1 << ( n + m ) ) - 1 ; return toggleLastMBits ( num , m ) ; } public static void main ( String [ ] args ) { int n = 2 , m = 2 ; System . out . println ( largeNumWithNSetAndMUnsetBits ( n , m ) ) ; } }"],"bleu":0.8977649182682143,"rouge_l":0.9476557032890133}
{"id":1439,"predictions":["import java . io . * ; class GFG { static void series ( int A , int X , int n ) { int term = ( int ) Math . pow ( A , n ) ; System . out . print ( term + \" ▁ \" ) ; for ( int i = 1 ; i <= n ; i ++ ) { term = term * X * ( n - i + 1 ) \/ ( i * A ) ; System . out . print ( term + \" ▁ \" ) ; } } public static void main ( String [ ] args ) { int A = 3 , X = 4 , n = 5 ; series ( A , X , n ) ; } }"],"references":["import java . io . * ; class GFG { static void series ( int A , int X , int n ) { int term = ( int ) Math . pow ( A , n ) ; System . out . print ( term + \" ▁ \" ) ; for ( int i = 1 ; i <= n ; i ++ ) { term = term * X * ( n - i + 1 ) \/ ( i * A ) ; System . out . print ( term + \" ▁ \" ) ; } } public static void main ( String [ ] args ) { int A = 3 , X = 4 , n = 5 ; series ( A , X , n ) ; } }"],"bleu":1.0,"rouge_l":1.0}
{"id":1440,"predictions":["import java . util . Arrays ; import java . util . Collections ; public class GFG { static void mergeSort ( int [ ] a , int l , int mid ) { if ( a . length > 1 ) { int mid = a [ mid ] ; if ( l . length > 0 && R [ 0 ] < 0 ) { a [ mid ] = L [ mid ] ; L [ mid ] = mid - 1 ; } else { a [ mid ] = a [ mid ] ; } } Arrays . sort ( a ) ; while ( L . length > 0 && R . size ( ) < 0 && R [ 0 ] < 0 ) { a [ a [ 0 ] = a [ 0 ] ; L [ 1 ] = a [ mid ] ; } for ( int i = 0 ; i < l ; i ++ ) a [ i ] = a [ i ] ; Arrays . sort ( a ) ; for ( int i = 0 ; i < R ; i ++ ) a [ i ] = a [ i ] ; } public static void main ( String [ ] args ) { System . out . println ( \" Given ▁ array ▁ is ▁ \" ) ; mergeSort ( a ) ; System . out . println ( \" Arrays ▁ array ▁ is ▁ : ▁ \" ) ; System . out . println ( Arrays . toString ( a ) ) ; } }"],"references":["class MergeSort { void merge ( int arr [ ] , int l , int m , int r ) { int n1 = m - l + 1 ; int n2 = r - m ; int L [ ] = new int [ n1 ] ; int R [ ] = new int [ n2 ] ; for ( int i = 0 ; i < n1 ; ++ i ) L [ i ] = arr [ l + i ] ; for ( int j = 0 ; j < n2 ; ++ j ) R [ j ] = arr [ m + 1 + j ] ; int i = 0 , j = 0 ; int k = l ; while ( i < n1 && j < n2 ) { if ( L [ i ] <= R [ j ] ) { arr [ k ] = L [ i ] ; i ++ ; } else { arr [ k ] = R [ j ] ; j ++ ; } k ++ ; } while ( i < n1 ) { arr [ k ] = L [ i ] ; i ++ ; k ++ ; } while ( j < n2 ) { arr [ k ] = R [ j ] ; j ++ ; k ++ ; } } void sort ( int arr [ ] , int l , int r ) { if ( l < r ) { int m = ( l + r ) \/ 2 ; sort ( arr , l , m ) ; sort ( arr , m + 1 , r ) ; merge ( arr , l , m , r ) ; } } static void printArray ( int arr [ ] ) { int n = arr . length ; for ( int i = 0 ; i < n ; ++ i ) System . out . print ( arr [ i ] + \" ▁ \" ) ; System . out . println ( ) ; } public static void main ( String args [ ] ) { int arr [ ] = { 12 , 11 , 13 , 5 , 6 , 7 } ; System . out . println ( \" Given ▁ Array \" ) ; printArray ( arr ) ; MergeSort ob = new MergeSort ( ) ; ob . sort ( arr , 0 , arr . length - 1 ) ; System . out . println ( \" \\n Sorted ▁ array \" ) ; printArray ( arr ) ; } }"],"bleu":0.18849511445606315,"rouge_l":0.36780462412701176}
{"id":1441,"predictions":["import java . util . * ; class GFG { static int answer ( int [ ] arr , int [ ] [ ] ranges , int [ ] arr , int index ) { int i = reverse - 1 ; while ( i >= 0 ) { int left = ranges [ i ] [ 0 ] ; int right = ranges [ i ] [ 1 ] ; if ( left <= index && right >= index ) index = right + left - index ; i -- ; } return arr [ index ] ; } public static void main ( String [ ] args ) { int [ ] arr = { 10 , 20 , 30 , 40 , 50 } ; int [ ] [ ] ranges = { 1 , 4 } ; int index = 1 ; System . out . println ( answer ( arr , ranges , index ) ) ; } }"],"references":["import java . util . Arrays ; class GFG { static int answer ( int [ ] arr , int [ ] [ ] ranges , int reversals , int index ) { for ( int i = reversals - 1 ; i >= 0 ; i -- ) { int left = ranges [ i ] [ 0 ] , right = ranges [ i ] [ 1 ] ; if ( left <= index && right >= index ) index = right + left - index ; } return arr [ index ] ; } public static void main ( String [ ] args ) { int [ ] arr = { 10 , 20 , 30 , 40 , 50 } ; int reversals = 2 ; int [ ] [ ] ranges = { { 1 , 4 } , { 0 , 2 } } ; int index = 1 ; System . out . println ( answer ( arr , ranges , reversals , index ) ) ; } }"],"bleu":0.7928681516186253,"rouge_l":0.8884630126485245}
{"id":1442,"predictions":["import java . io . * ; class GFG { static boolean isDivisibleBy25 ( String str ) { int n = str . length ( ) ; if ( n == 1 ) return false ; return ( ( str . charAt ( n - 1 ) - '0' ) == false ) || ( ( str . charAt ( n - 2 ) - '0' ) * 10 + ( str . charAt ( n - 2 ) - '0' ) % 25 == 0 ) ) ; } public static void main ( String [ ] args ) { String str = \"76955\" ; if ( isDivisibleBy25 ( str ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class IsDivisible { static boolean isDivisibleBy25 ( String str ) { int n = str . length ( ) ; if ( n == 1 ) return false ; return ( ( str . charAt ( n - 1 ) - '0' == 0 && str . charAt ( n - 2 ) - '0' == 0 ) || ( ( str . charAt ( n - 2 ) - '0' ) * 10 + ( str . charAt ( n - 1 ) - '0' ) ) % 25 == 0 ) ; } public static void main ( String [ ] args ) { String str = \"76955\" ; if ( isDivisibleBy25 ( str ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.8618496073918315,"rouge_l":0.9010234938357757}
{"id":1443,"predictions":["import java . io . * ; class GFG { static int square ( int n ) { return n * n ; } static int sum ( int n ) { if ( n == 0 ) return 0 ; if ( n % 2 == 1 ) return ( square ( ( n + 1 ) \/ 2 ) + sum ( n \/ 2 ) ) ; else return square ( n \/ 2 ) + sum ( n \/ 2 ) ; } static int oddDivSum ( int a , int b ) { return sum ( b ) - sum ( ( n \/ 2 ) ) ; } public static void main ( String [ ] args ) { int a = 3 , b = 9 ; System . out . println ( oddDivSum ( a , b ) ) ; } }"],"references":["class gfg { static int square ( int n ) { return n * n ; } static int sum ( int n ) { if ( n == 0 ) return 0 ; if ( n % 2 == 1 ) { return square ( ( n + 1 ) \/ 2 ) + sum ( n \/ 2 ) ; } else { return square ( n \/ 2 ) + sum ( n \/ 2 ) ; } } static int oddDivSum ( int a , int b ) { return sum ( b ) - sum ( a - 1 ) ; } public static void main ( String [ ] args ) { int a = 3 , b = 9 ; System . out . println ( oddDivSum ( a , b ) ) ; } }"],"bleu":0.8449867263826536,"rouge_l":0.9254888739042484}
{"id":1444,"predictions":["import java . util . * ; class GFG { static String removeOddFrequency ( String s ) { HashMap < String , Integer > m = new HashMap < > ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( m . containsKey ( s . charAt ( i ) ) ) { m . put ( s . charAt ( i ) , m . get ( s . charAt ( i ) ) + 1 ) ; } else { m . put ( s . charAt ( i ) , 1 ) ; } } return new String ( s ) ; } public static void main ( String [ ] args ) { String str = \" geeksforgeeks \" ; str = removeOddLength ( str ) ; System . out . println ( str ) ; } }"],"references":["import java . util . * ; class GFG { static String removeOddFrequencyCharacters ( String s ) { HashMap < Character , Integer > m = new HashMap < Character , Integer > ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { char p = s . charAt ( i ) ; Integer count = m . get ( p ) ; if ( count == null ) { count = 0 ; m . put ( p , 1 ) ; } else m . put ( p , count + 1 ) ; } String new_string = \" \" ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( ( m . get ( s . charAt ( i ) ) & 1 ) == 1 ) continue ; new_string += s . charAt ( i ) ; } return new_string ; } public static void main ( String [ ] args ) { String str = \" geeksforgeeks \" ; str = removeOddFrequencyCharacters ( str ) ; System . out . print ( str ) ; } }"],"bleu":0.5339511849276526,"rouge_l":0.6846058677978083}
{"id":1445,"predictions":["class GFG { static int countNonDecreasing ( int n ) { int [ ] [ ] dp = new int [ 10 ] [ n + 1 ] ; for ( int i = 0 ; i < 10 ; i ++ ) dp [ i ] [ 1 ] = 1 ; for ( int digit = 0 ; digit < 10 ; digit ++ ) for ( int len = 2 ; len <= n ; i ++ ) for ( int len = 2 ; for ( int i = 0 ; i < 10 ; i ++ ) for ( int len = 0 ; i < n ; i ++ ) count += dp [ i ] [ len ] ; return count ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( countNonDecreasing ( n ) ) ; } }"],"references":["class NDN { static int countNonDecreasing ( int n ) { int dp [ ] [ ] = new int [ 10 ] [ n + 1 ] ; for ( int i = 0 ; i < 10 ; i ++ ) dp [ i ] [ 1 ] = 1 ; for ( int digit = 0 ; digit <= 9 ; digit ++ ) { for ( int len = 2 ; len <= n ; len ++ ) { for ( int x = 0 ; x <= digit ; x ++ ) dp [ digit ] [ len ] += dp [ x ] [ len - 1 ] ; } } int count = 0 ; for ( int i = 0 ; i < 10 ; i ++ ) count += dp [ i ] [ n ] ; return count ; } public static void main ( String args [ ] ) { int n = 3 ; System . out . println ( countNonDecreasing ( n ) ) ; } }"],"bleu":0.6911402391305954,"rouge_l":0.8090648854961832}
{"id":1446,"predictions":["import java . util . * ; class GFG { static int maxCount ( int a [ ] , int n ) { HashMap < Integer , Integer > freq = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( freq . containsKey ( a [ i ] ) ) { freq . put ( a [ i ] , freq . get ( a [ i ] ) + 1 ) ; } else { freq . put ( a [ i ] , 1 ) ; } } int ans = 0 ; for ( Map . Entry < Integer , Integer > it : freq . entrySet ( ) ) { if ( freq . containsKey ( it ) ) ans = it . getValue ( ) + freq . getValue ( ) ; } return ans ; } public static void main ( String [ ] args ) { int n = 5 ; int arr [ ] = { 2 , 2 , 3 , 4 , 5 } ; System . out . println ( maxCount ( arr , arr . length ) ) ; } }"],"references":["import java . util . HashMap ; import java . util . Map ; import java . lang . Math ; class GfG { static int maxCount ( int n , int a [ ] ) { HashMap < Integer , Integer > freq = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; ++ i ) { if ( freq . containsKey ( a [ i ] ) ) freq . put ( a [ i ] , freq . get ( a [ i ] ) + 1 ) ; else freq . put ( a [ i ] , 1 ) ; } int ans = 0 ; for ( Integer key : freq . keySet ( ) ) { if ( freq . containsKey ( key + 1 ) ) ans = Math . max ( ans , freq . get ( key ) + freq . get ( key + 1 ) ) ; } return ans ; } public static void main ( String [ ] args ) { int n = 5 ; int arr [ ] = { 2 , 2 , 3 , 4 , 5 } ; System . out . println ( maxCount ( n , arr ) ) ; } }"],"bleu":0.702926997401583,"rouge_l":0.8368131453983568}
{"id":1447,"predictions":["import java . io . * ; class GFG { static void dist ( int x1 , int y1 , int x2 , int y2 , int r ) { System . out . print ( \" The ▁ shortest ▁ distance ▁ between ▁ the ▁ point ▁ and ▁ the ▁ circle ▁ is ▁ \" + ( ( x2 - x1 ) * ( y2 - y1 ) ) ) - r ) ; } public static void main ( String [ ] args ) { int x1 = 4 , y1 = 6 , x2 = 35 ; int r2 = 35 ; dist ( x1 , y1 , x2 , y2 , r ) ; } }"],"references":["class GFG { static void dist ( double x1 , double y1 , double x2 , double y2 , double r ) { System . out . println ( \" The ▁ shortest ▁ distance ▁ \" + \" between ▁ a ▁ point ▁ and ▁ a ▁ circle ▁ is ▁ \" + ( Math . sqrt ( ( Math . pow ( ( x2 - x1 ) , 2 ) ) + ( Math . pow ( ( y2 - y1 ) , 2 ) ) ) - r ) ) ; } public static void main ( String [ ] args ) { double x1 = 4 , y1 = 6 , x2 = 35 , y2 = 42 , r = 5 ; dist ( x1 , y1 , x2 , y2 , r ) ; } }"],"bleu":0.5517357034518844,"rouge_l":0.7515247621371065}
{"id":1448,"predictions":["import java . util . * ; class GFG { static int dfs ( int x , int [ ] , int [ ] adj ) { int sz = 1 ; vis [ x ] = 1 ; for ( int i = 0 ; i < adj . length ; i ++ ) { if ( vis [ ch ] == 0 ) { sz += dfs ( ch , adj , vis ) ; } } return sz ; } static int maxValue ( int n , int [ ] adj ) { int val = 0 ; int [ ] vis = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; ++ i ) { if ( ! vis [ i ] ) { vis += dfs ( i , adj , vis ) - 1 ; } } return val ; } public static void main ( String [ ] args ) { int n = 3 ; int [ ] adj = { 1 , 2 , 2 , 3 } ; System . out . print ( maxValue ( n , adj ) ) ; } }"],"references":["import java . util . * ; class GFG { static int vis [ ] ; static int dfs ( int x , Vector < Vector < Integer > > adj ) { int sz = 1 ; vis [ x ] = 1 ; for ( int i = 0 ; i < adj . get ( x ) . size ( ) ; i ++ ) if ( vis [ adj . get ( x ) . get ( i ) ] == 0 ) sz += dfs ( adj . get ( x ) . get ( i ) , adj ) ; return sz ; } static int maxValue ( int n , Vector < Vector < Integer > > adj ) { int val = 0 ; vis = new int [ n + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) vis [ i ] = 0 ; for ( int i = 0 ; i < n ; i ++ ) if ( vis [ i ] == 0 ) val += dfs ( i , adj ) - 1 ; return val ; } public static void main ( String args [ ] ) { int n = 3 ; Vector < Vector < Integer > > adj = new Vector < Vector < Integer > > ( ) ; Vector < Integer > v = new Vector < Integer > ( ) ; v . add ( 0 ) ; v . add ( 1 ) ; Vector < Integer > v1 = new Vector < Integer > ( ) ; v1 . add ( 1 ) ; v1 . add ( 2 ) ; adj . add ( v ) ; adj . add ( v1 ) ; adj . add ( new Vector < Integer > ( ) ) ; System . out . println ( maxValue ( n , adj ) ) ; } }"],"bleu":0.31809413549465965,"rouge_l":0.5675738543847405}
{"id":1449,"predictions":["class GFG { static double area_of_random_square ( int n , int len ) { double P = ( len * n ) ; double A = len \/ ( 2 * n ) ; double area = ( P * A ) \/ 2.14159 \/ 180 ; return area ; } static double area_of_triangle ( int n , int len ) { double area = area \/ n ; double triangle = area \/ n ; return max_tri ; } public static void main ( String [ ] args ) { int n = 6 ; int len = 10 ; System . out . println ( area_of_triangle ( n , len ) ) ; } }"],"references":["import java . util . * ; class GFG { static double area_of_regular_polygon ( double n , double len ) { double P = ( len * n ) ; double A = len \/ ( 2 * Math . tan ( ( 180 \/ n ) * 3.14159 \/ 180 ) ) ; double area = ( P * A ) \/ 2 ; return area ; } static double area_of_triangle_inscribed ( double n , double len ) { double area = area_of_regular_polygon ( n , len ) ; double triangle = area \/ n ; double ins_tri = ( triangle * 3 ) ; return ins_tri ; } static public void main ( String [ ] arg ) { double n = 6 , len = 10 ; System . out . printf ( \" % .3f \" , area_of_triangle_inscribed ( n , len ) ) ; } }"],"bleu":0.4770013967513842,"rouge_l":0.7149862456643942}
{"id":1450,"predictions":["import java . io . * ; class GFG { static int centeredHexagonalNumber ( int n ) { return 3 * n * ( n - 1 ) + 1 ; } public static void main ( String args [ ] ) { int n = 10 ; System . out . print ( centeredHexagonalNumber ( n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int centeredHexagonalNumber ( int n ) { return 3 * n * ( n - 1 ) + 1 ; } public static void main ( String args [ ] ) { int n = 10 ; System . out . print ( n + \" th ▁ centered ▁ \" + \" hexagonal ▁ number : ▁ \" ) ; System . out . println ( centeredHexagonalNumber ( n ) ) ; } }"],"bleu":0.6705181631926259,"rouge_l":0.8140335772707705}
{"id":1451,"predictions":["import java . io . * ; class GFG { static boolean isOrthogonal ( int a [ ] [ ] , int m , int n ) { if ( m != n ) return false ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { int sum = 0 ; for ( int k = 0 ; k < n ; k ++ ) sum = sum + ( a [ i ] [ k ] * a [ j ] [ k ] ) ; } if ( i == j && sum != 0 ) return false ; if ( i != j && sum != 0 ) return false ; } return true ; } public static void main ( String [ ] args ) { int a [ ] [ ] = { { 1 , 0 , 0 } , { 0 , 1 , 0 } } ; if ( isOrthogonal ( a , 3 ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["using System ; class GFG { static bool isOrthogonal ( int [ , ] a , int m , int n ) { if ( m != n ) return false ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { int sum = 0 ; for ( int k = 0 ; k < n ; k ++ ) { sum = sum + ( a [ i , k ] * a [ j , k ] ) ; } if ( i == j && sum != 1 ) return false ; if ( i != j && sum != 0 ) return false ; } } return true ; } public static void Main ( ) { int [ , ] a = { { 1 , 0 , 0 } , { 0 , 1 , 0 } , { 0 , 0 , 1 } } ; if ( isOrthogonal ( a , 3 , 3 ) ) Console . WriteLine ( \" Yes \" ) ; else Console . WriteLine ( \" No \" ) ; } }"],"bleu":0.746939412682643,"rouge_l":0.8620716879835781}
{"id":1452,"predictions":["class GfG { static int getAvg ( int prev_arr , int x , int n ) { return ( ( prev_av * n + x ) \/ ( n + 1 ) ) ; } static void streamAvg ( int arr [ ] , int n ) { int avg = 0 ; for ( int i = 0 ; i < n ; i ++ ) avg = getAvg ( avg , arr [ i ] , i ) ; System . out . println ( \" Avg ▁ of ▁ \" + i + \" ▁ numbers ▁ is ▁ \" + avg ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 10 , 20 , 30 , 40 , 50 , 60 } ; int n = arr . length ; streamAvg ( arr , n ) ; } }"],"references":["class GFG { static float getAvg ( float prev_avg , float x , int n ) { return ( prev_avg * n + x ) \/ ( n + 1 ) ; } static void streamAvg ( float arr [ ] , int n ) { float avg = 0 ; for ( int i = 0 ; i < n ; i ++ ) { avg = getAvg ( avg , arr [ i ] , i ) ; System . out . printf ( \" Average ▁ of ▁ % d ▁ numbers ▁ is ▁ % f ▁ \\n \" , i + 1 , avg ) ; } return ; } public static void main ( String [ ] args ) { float arr [ ] = { 10 , 20 , 30 , 40 , 50 , 60 } ; int n = arr . length ; streamAvg ( arr , n ) ; } }"],"bleu":0.7174160426179301,"rouge_l":0.8600456147625959}
{"id":1453,"predictions":["class GFG { static int costOfOperation ( int n , int h [ ] , int cost [ ] ) { int c = 0 ; for ( int i = 0 ; i < n ; i ++ ) c += Math . abs ( h [ i ] - xx_h ) ; return c ; } static int Bsearch ( int n , int h [ ] , int cost [ ] ) { int max_h = h [ 0 ] ; for ( int i = 0 ; i < h . length ; i ++ ) { if ( h [ i ] > max_h ) max_h = h [ i ] ; } int ans = Integer . MAX_VALUE ; int high = 1 + max_h ; int low = 0 ; while ( high > low ) { int mid = ( low + high ) >> 1 ; if ( mid > 0 ) bm = costOfOperation ( n , h , mid - 1 ) ; else bm = Integer . MAX_VALUE ; int mid = costOfOperation ( n , h , cost , mid + 1 ) ; if ( ans == m ) break ; ans = Math . min ( ans , m ) ; if ( ans == m ) break ; else return m ; } return ans ; } public static void main ( String [ ] args ) { int h [ ] = { 1 , 2 , 3 } ; int cost [ ] = { 10 , 100 , 1000 } ; int n = h . length ; System . out . print ( Bsearch ( n , h , cost ) ) ; } }"],"references":["import java . util . Arrays ; public class MinCostOp_Mintowerheight { static long costOfOperation ( int n , int h [ ] , int cost [ ] , int eq_h ) { long c = 0 ; for ( int i = 0 ; i < n ; i ++ ) c += Math . abs ( h [ i ] - eq_h ) * cost [ i ] ; return c ; } static long Bsearch ( int n , int h [ ] , int cost [ ] ) { int max_h = Arrays . stream ( h ) . max ( ) . getAsInt ( ) ; long ans = Long . MAX_VALUE ; long high = 1 + max_h ; long low = 0 ; while ( high > low ) { int mid = ( int ) ( ( low + high ) >> 1 ) ; long bm = ( mid > 0 ) ? costOfOperation ( n , h , cost , mid - 1 ) : Long . MAX_VALUE ; long m = costOfOperation ( n , h , cost , mid ) ; long am = costOfOperation ( n , h , cost , mid + 1 ) ; if ( ans == m ) break ; ans = Long . min ( ans , m ) ; if ( bm <= m ) high = mid ; else if ( am <= m ) low = mid + 1 ; else return m ; } return ans ; } public static void main ( String args [ ] ) { int h [ ] = { 1 , 2 , 3 } ; int cost [ ] = { 10 , 100 , 1000 } ; int n = h . length ; System . out . println ( Bsearch ( n , h , cost ) ) ; } }"],"bleu":0.6511197042069509,"rouge_l":0.7701125138661454}
{"id":1454,"predictions":["class GFG { static boolean check ( int a [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] ) return true ; } return false ; } public static void main ( String [ ] args ) { int a [ ] = { 0 , 1 , 0 , 1 } ; int n = a . length ; if ( check ( a , n ) ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ; } }"],"references":["class GFG { static boolean check ( int a [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) if ( a [ i ] == 1 ) return true ; return false ; } public static void main ( String [ ] args ) { int a [ ] = { 0 , 1 , 0 , 1 } ; int n = a . length ; if ( check ( a , n ) == true ) System . out . println ( \" YES \\n \" ) ; else System . out . println ( \" NO \\n \" ) ; } }"],"bleu":0.8682891363832931,"rouge_l":0.9621998010515843}
{"id":1455,"predictions":["class Main { static int findIndex ( int n ) { if ( n <= 1 ) return n ; int a = 0 , b = 1 , c = 1 , res = 1 ; while ( c < n ) { c = a + b ; res ++ ; a = b ; b = c ; } return res ; } public static void main ( String [ ] args ) { int result = findIndex ( 21 ) ; System . out . println ( result ) ; } }"],"references":["import java . io . * ; class GFG { static int findIndex ( int n ) { if ( n <= 1 ) return n ; int a = 0 , b = 1 , c = 1 ; int res = 1 ; while ( c < n ) { c = a + b ; res ++ ; a = b ; b = c ; } return res ; } public static void main ( String [ ] args ) { int result = findIndex ( 21 ) ; System . out . println ( result ) ; } }"],"bleu":0.8788086848211933,"rouge_l":0.9332682291666666}
{"id":1456,"predictions":["import java . util . * ; class GFG { static int sumNth ( int A [ ] , int B [ ] , int m , int n ) { int res = 0 ; if ( n == 1 ) { for ( int i = 0 ; i < m ; i ++ ) res += A [ i ] ; } else if ( n == 2 ) { for ( int i = 0 ; i < m ; i ++ ) res += B [ i ] * m ; } else { int f [ ] = new int [ n ] ; f [ 0 ] = 0 ; f [ 1 ] = 1 ; for ( int i = 2 ; i < n ; i ++ ) f [ i ] = f [ i - 1 ] + f [ i - 2 ] ; for ( int i = 0 ; i < m ; i ++ ) res = ( res + ( m * ( B [ i ] * f [ n - 1 ] ) ) + ( m * ( A [ i ] * f [ n - 2 ] ) ) ) ; } return res ; } public static void main ( String [ ] args ) { int A [ ] = { 1 , 2 , 3 } , B [ ] = { 4 , 5 , 6 } ; int n = 3 , m = A . length ; System . out . print ( sumNth ( A , B , m , n ) ) ; } }"],"references":["public class GFG { static int sumNth ( int A [ ] , int B [ ] , int m , int n ) { int res = 0 ; if ( n == 1 ) { for ( int i = 0 ; i < m ; i ++ ) res = res + A [ i ] ; } else if ( n == 2 ) { for ( int i = 0 ; i < m ; i ++ ) res = res + B [ i ] * m ; } else { int f [ ] = new int [ n ] ; f [ 0 ] = 0 ; f [ 1 ] = 1 ; for ( int i = 2 ; i < n ; i ++ ) f [ i ] = f [ i - 1 ] + f [ i - 2 ] ; for ( int i = 0 ; i < m ; i ++ ) { res = res + ( m * ( B [ i ] * f [ n - 1 ] ) ) + ( m * ( A [ i ] * f [ n - 2 ] ) ) ; } } return res ; } public static void main ( String args [ ] ) { int A [ ] = { 1 , 2 , 3 } ; int B [ ] = { 4 , 5 , 6 } ; int n = 3 ; int m = A . length ; System . out . println ( sumNth ( A , B , m , n ) ) ; } }"],"bleu":0.9006261701716881,"rouge_l":0.9473684210526315}
{"id":1457,"predictions":["class GFG { static boolean isVowel ( char c ) { if ( c == ' a ' || c == ' E ' || c == ' E ' || c == ' I ' || c == ' I ' || c == ' I ' || c == ' U ' || c == ' || c == ' U ' || c == ' u ' || c == ' U ' || c == ' U ' ) return true ; return false ; } static String reverse ( String str ) { int j = 0 ; int vowel [ ] = new int [ str . length ( ) ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { if ( isVowel ( str . charAt ( i ) ) ) { vowel [ j ++ ] = str . charAt ( i ) ; } } for ( int i = 0 ; i < str . length ( ) ; i ++ ) { if ( isVowel ( str . charAt ( i ) ) ) { j -- ; str [ i ] = vowel [ j ] ; } } return str ; } public static void main ( String [ ] args ) { String str = \" hello ▁world \" ; System . out . print ( reverseerVowel ( str ) ) ; } }"],"references":["class GFG { static boolean isVowel ( char c ) { return ( c == ' a ' || c == ' A ' || c == ' e ' || c == ' E ' || c == ' i ' || c == ' I ' || c == ' o ' || c == ' O ' || c == ' u ' || c == ' U ' ) ; } static String reverseVowel ( String str1 ) { int j = 0 ; char [ ] str = str1 . toCharArray ( ) ; String vowel = \" \" ; for ( int i = 0 ; i < str . length ; i ++ ) { if ( isVowel ( str [ i ] ) ) { j ++ ; vowel += str [ i ] ; } } for ( int i = 0 ; i < str . length ; i ++ ) { if ( isVowel ( str [ i ] ) ) { str [ i ] = vowel . charAt ( -- j ) ; } } return String . valueOf ( str ) ; } public static void main ( String [ ] args ) { String str = \" hello ▁ world \" ; System . out . println ( reverseVowel ( str ) ) ; } }"],"bleu":0.6251426437150231,"rouge_l":0.7942270597960871}
{"id":1458,"predictions":["class GFG { static int minimumCost ( int cost [ ] , int n ) { int dp1 = 0 , dp2 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { dp0 = cost [ i ] + Math . min ( dp1 , dp2 ) ; dp2 = dp1 ; dp1 = dp1 ; dp1 = dp0 ; } return Math . min ( dp1 , dp2 ) ; } public static void main ( String [ ] args ) { int a [ ] = { 2 , 5 , 3 , 1 , 7 , 3 , 4 } ; int n = a . length ; System . out . println ( minimumCost ( a , n ) ) ; } }"],"references":["import java . io . * ; import java . util . * ; class GFG { static int minimumCost ( int cost [ ] , int n ) { int dp1 = 0 , dp2 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int dp0 = cost [ i ] + Math . min ( dp1 , dp2 ) ; dp2 = dp1 ; dp1 = dp0 ; } return Math . min ( dp1 , dp2 ) ; } public static void main ( String args [ ] ) { int a [ ] = { 2 , 5 , 3 , 1 , 7 , 3 , 4 } ; int n = a . length ; System . out . print ( minimumCost ( a , n ) ) ; } }"],"bleu":0.8436971033184221,"rouge_l":0.9117135905457073}
{"id":1459,"predictions":["class GFG { static final int N = 2 ; static boolean isVowel ( char ch ) { return ( ch == ' a ' || ch == ' e ' || ch == ' i ' || ch == ' i ' || ch == ' o ' || ch == ' u ' ) ; } static int countVowels ( String str , int l , int r ) { int cnt = 0 ; for ( int i = l ; i <= r ; i ++ ) { if ( isVowel ( str . charAt ( i ) ) ) { cnt ++ ; } } return cnt ; } static void performQueries ( String str , int queries [ ] [ ] , int q ) { for ( int i = 0 ; i < q ; i ++ ) { System . out . print ( countVowels ( str , queries [ i ] [ 0 ] , queries [ i ] [ 1 ] ) ) ; } } public static void main ( String [ ] args ) { String str = \" geeksforgeeks \" ; int queries [ ] [ ] = { { 1 , 3 } , { 2 , 4 } , { 1 , 9 } } ; int q = queries . length ; performQueries ( str , queries , q ) ; } }"],"references":["class GFG { static int N = 2 ; static boolean isVowel ( char ch ) { return ( ch == ' a ' || ch == ' e ' || ch == ' i ' || ch == ' o ' || ch == ' u ' ) ; } static int countVowels ( String str , int l , int r ) { int cnt = 0 ; for ( int i = l ; i <= r ; i ++ ) { if ( isVowel ( str . charAt ( i ) ) ) cnt ++ ; } return cnt ; } static void performQueries ( String str , int queries [ ] [ ] , int q ) { for ( int i = 0 ; i < q ; i ++ ) { System . out . println ( countVowels ( str , queries [ i ] [ 0 ] , queries [ i ] [ 1 ] ) ) ; } } public static void main ( String [ ] args ) { String str = \" geeksforgeeks \" ; int queries [ ] [ ] = { { 1 , 3 } , { 2 , 4 } , { 1 , 9 } } ; int q = queries . length ; performQueries ( str , queries , q ) ; } }"],"bleu":0.9360775955098473,"rouge_l":0.9800223526124615}
{"id":1460,"predictions":["public class GFG { static int removeAlternate ( int n ) { if ( n == 1 ) return 1 ; if ( n % 2 == 0 ) return 2 * removeAlternate ( n \/ 2 ) - 1 ; else return 2 * removeAlternate ( ( n - 1 ) \/ 2 ) + 1 ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( removeAlternate ( n ) ) ; n = 10 ; System . out . println ( removeAlternate ( n ) ) ; } }"],"references":["import java . util . * ; class Circular { public static int removeAlternate ( int n ) { if ( n == 1 ) return 1 ; if ( n % 2 == 0 ) return 2 * removeAlternate ( n \/ 2 ) - 1 ; else return 2 * removeAlternate ( ( ( n - 1 ) \/ 2 ) ) + 1 ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . print ( removeAlternate ( n ) ) ; n = 10 ; System . out . print ( \" \\n \" + removeAlternate ( n ) ) ; } }"],"bleu":0.7975219765746527,"rouge_l":0.8964062272661139}
{"id":1461,"predictions":["import java . util . * ; class GFG { static void lowerWth ( int n ) { double phi = ( 1 + Math . sqrt ( 5 ) ) \/ 2 ; for ( int i = 1 ; i <= n ; i ++ ) { double ans = ( int ) Math . floor ( i * phi ) ; System . out . print ( ans + \" , ▁ \" ) ; if ( i != n ) System . out . print ( \" , ▁ \" ) ; } } public static void main ( String [ ] args ) { int n = 5 ; lowerWth ^ ( n ) ; } }"],"references":["class GFG { static void lowerWythoff ( int n ) { double phi = ( 1 + Math . sqrt ( 5 ) ) \/ 2.0 ; for ( int i = 1 ; i <= n ; i ++ ) { double ans = Math . floor ( i * phi ) ; System . out . print ( ( int ) ans ) ; if ( i != n ) System . out . print ( \" ▁ , ▁ \" ) ; } } public static void main ( String [ ] args ) { int n = 5 ; lowerWythoff ( n ) ; } }"],"bleu":0.7737820638658471,"rouge_l":0.8962910128388017}
{"id":1462,"predictions":["import java . util . * ; class GFG { static int countPairs ( String str ) { int result = 0 ; int n = str . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { if ( Math . abs ( str . charAt ( i ) - str . charAt ( j ) ) == Math . abs ( i - j ) ) result ++ ; } } return result ; } static public void main ( String [ ] args ) { String str = \" geeksforgeeks \" ; System . out . println ( countPairs ( str ) ) ; } }"],"references":["class Test { static int countPairs ( String str ) { int result = 0 ; int n = str . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = i + 1 ; j < n ; j ++ ) if ( Math . abs ( str . charAt ( i ) - str . charAt ( j ) ) == Math . abs ( i - j ) ) result ++ ; return result ; } public static void main ( String args [ ] ) { String str = \" geeksforgeeks \" ; System . out . println ( countPairs ( str ) ) ; } }"],"bleu":0.8208129872790605,"rouge_l":0.9415741803801506}
{"id":1463,"predictions":["class GFG { static boolean checkPowerof8 ( int n ) { int i = ( int ) ( Math . log ( n ) \/ Math . log ( i ) ) ; return ( i - trunc ( i ) < 0.000001 ) ; } public static void main ( String [ ] args ) { int n = 65 ; if ( checkPowerof8 ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static boolean checkPowerof8 ( int n ) { double i = Math . log ( n ) \/ Math . log ( 8 ) ; return ( i - Math . floor ( i ) < 0.000001 ) ; } public static void main ( String args [ ] ) { int n = 65 ; if ( checkPowerof8 ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.8116295528373558,"rouge_l":0.9216139353003909}
{"id":1464,"predictions":["import java . io . * ; class GFG { static void digitsNum ( int N ) { if ( N == 0 ) System . out . print ( \"0\" ) ; if ( N % 9 != 0 ) System . out . print ( N % 9 ) ; for ( int i = 1 ; i <= N \/ 9 ; i ++ ) System . out . print ( \"9\" ) ; for ( int i = 1 ; i <= N ; i ++ ) System . out . print ( \"0\" ) ; System . out . println ( ) ; } public static void main ( String args [ ] ) { int N = 5 ; digitsNum ( N ) ; } }"],"references":["import java . io . * ; class GFG { static void digitsNum ( int N ) { if ( N == 0 ) System . out . println ( \"0\" ) ; if ( N % 9 != 0 ) System . out . print ( ( N % 9 ) ) ; for ( int i = 1 ; i <= ( N \/ 9 ) ; ++ i ) System . out . print ( \"9\" ) ; for ( int i = 1 ; i <= N ; ++ i ) System . out . print ( \"0\" ) ; System . out . print ( \" \" ) ; } public static void main ( String [ ] args ) { int N = 5 ; System . out . print ( \" The ▁ number ▁ is ▁ : ▁ \" ) ; digitsNum ( N ) ; } }"],"bleu":0.7280186476557993,"rouge_l":0.8688873934499776}
{"id":1465,"predictions":["import java . util . * ; class GFG { static void printFirstNegativeInteger ( int arr [ ] , int n , int k ) { Deque < Integer > Di = new LinkedList < Integer > ( ) ; for ( int i = 0 ; i < k ; ++ i ) { if ( arr [ i ] < 0 ) Di . add ( i ) ; } for ( int i = k ; i < n ; i ++ ) { if ( ! Di . isEmpty ( ) ) System . out . print ( 0 ) ; else System . out . print ( arr [ Di . peek ( ) ] + \" ▁ \" ) ; while ( Di . isEmpty ( ) && Di . peek ( ) <= ( i - k ) ) Di . remove ( ) ; if ( Arrays . isEmpty ( ) ) Di . add ( i ) ; } if ( Di . get ( 0 ) < 0 ) System . out . print ( 0 ) ; else System . out . print ( arr [ Di . get ( 0 ) ] + \" ▁ \" ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 12 , - 1 , - 7 , 8 , - 15 , 30 , 16 , 28 } ; int n = arr . length ; int k = 3 ; printFirstNegativeInteger ( arr , n , k ) ; } }"],"references":["import java . util . * ; class GFG { static void printFirstNegativeInteger ( int arr [ ] , int n , int k ) { LinkedList < Integer > Di = new LinkedList < > ( ) ; int i ; for ( i = 0 ; i < k ; i ++ ) if ( arr [ i ] < 0 ) Di . add ( i ) ; for ( ; i < n ; i ++ ) { if ( ! Di . isEmpty ( ) ) System . out . print ( arr [ Di . peek ( ) ] + \" ▁ \" ) ; else System . out . print ( \"0\" + \" ▁ \" ) ; while ( ( ! Di . isEmpty ( ) ) && Di . peek ( ) < ( i - k + 1 ) ) Di . remove ( ) ; if ( arr [ i ] < 0 ) Di . add ( i ) ; } if ( ! Di . isEmpty ( ) ) System . out . print ( arr [ Di . peek ( ) ] + \" ▁ \" ) ; else System . out . print ( \"0\" + \" ▁ \" ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 12 , - 1 , - 7 , 8 , - 15 , 30 , 16 , 28 } ; int n = arr . length ; int k = 3 ; printFirstNegativeInteger ( arr , n , k ) ; } }"],"bleu":0.8133510196852944,"rouge_l":0.8450468740669972}
{"id":1466,"predictions":["import java . io . * ; class GFG { static void findFirstAndLast ( int arr [ ] , int n , int x ) { int first = - 1 , last = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( x != arr [ i ] ) continue ; if ( first == - 1 ) first = i ; last = i ; } if ( first != - 1 ) System . out . println ( \" First ▁ Occurrence ▁ = ▁ \" + first + \" ▁ \" + last ) ; else System . out . println ( \" Not ▁ Found \" ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 2 , 2 , 3 , 4 , 7 , 8 , 8 } ; int n = arr . length ; int x = 8 ; findFirstAndLastLast ( arr , n , x ) ; } }"],"references":["import java . io . * ; class GFG { public static void findFirstAndLast ( int arr [ ] , int x ) { int n = arr . length ; int first = - 1 , last = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( x != arr [ i ] ) continue ; if ( first == - 1 ) first = i ; last = i ; } if ( first != - 1 ) { System . out . println ( \" First ▁ Occurrence ▁ = ▁ \" + first ) ; System . out . println ( \" Last ▁ Occurrence ▁ = ▁ \" + last ) ; } else System . out . println ( \" Not ▁ Found \" ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 2 , 2 , 2 , 3 , 4 , 7 , 8 , 8 } ; int x = 8 ; findFirstAndLast ( arr , x ) ; } }"],"bleu":0.8445662362056275,"rouge_l":0.8896705559368565}
{"id":1467,"predictions":["public class GFG { static final int NO_OF_CHARS = 256 ; static boolean areAnagram ( String str1 , String str2 ) { int count [ ] = new int [ NO_OF_CHARS ] ; for ( int i = 0 ; i < str1 . length ( ) && i < str2 . length ( ) ; i ++ ) { count [ str1 . charAt ( i ) ] ++ ; count [ str2 . charAt ( i ) ] -- ; } if ( str1 . length ( ) != str2 . length ( ) ) return false ; for ( int i = 0 ; i < NO_OF_CHARS ; i ++ ) if ( count [ i ] != str2 . length ( ) ) return false ; return true ; } static void findAllAnagrams ( String arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) for ( int j = i + 1 ; j < n ; j ++ ) if ( count [ i ] > str [ j ] ) return false ; return true ; } static void findAllAnagrams ( String arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) for ( int j = i + 1 ; j < n ; j ++ ) { if ( areAnagram ( arr [ i ] , arr [ j ] ) ) System . out . println ( arr [ i ] + \" ▁ \" + \" ▁ is ▁ a ▁ \" + arr [ j ] ) ; } } public static void main ( String [ ] args ) { String arr [ ] = { \" geeksforgeeks \" , \" geeksforgeeks \" , \" zzyeks \" } ; int n = arr . length ; findAllAnagrams ( arr , n ) ; } }"],"references":["public class GFG { static final int NO_OF_CHARS = 256 ; static boolean areAnagram ( String str1 , String str2 ) { int [ ] count = new int [ NO_OF_CHARS ] ; int i ; for ( i = 0 ; i < str1 . length ( ) && i < str2 . length ( ) ; i ++ ) { count [ str1 . charAt ( i ) ] ++ ; count [ str2 . charAt ( i ) ] -- ; } if ( str1 . length ( ) != str2 . length ( ) ) return false ; for ( i = 0 ; i < NO_OF_CHARS ; i ++ ) if ( count [ i ] != 0 ) return false ; return true ; } static void findAllAnagrams ( String arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) for ( int j = i + 1 ; j < n ; j ++ ) if ( areAnagram ( arr [ i ] , arr [ j ] ) ) System . out . println ( arr [ i ] + \" ▁ is ▁ anagram ▁ of ▁ \" + arr [ j ] ) ; } public static void main ( String args [ ] ) { String arr [ ] = { \" geeksquiz \" , \" geeksforgeeks \" , \" abcd \" , \" forgeeksgeeks \" , \" zuiqkeegs \" } ; int n = arr . length ; findAllAnagrams ( arr , n ) ; } }"],"bleu":0.7168513955274086,"rouge_l":0.8547297297297297}
{"id":1468,"predictions":["class GFG { public static void main ( String [ ] args ) { int MAX = 100 ; int arr [ ] = new int [ MAX ] ; int i ; arr [ 0 ] = 0 ; arr [ 1 ] = 1 ; for ( i = 2 ; i < MAX ; i ++ ) arr [ i ] = arr [ i - 1 ] + arr [ i - 2 ] ; System . out . println ( \" Fibonacci ▁ numbers ▁ of ▁ \" + arr [ i ] ) ; for ( i = 1 ; i < MAX ; i ++ ) { if ( arr [ i ] % i == 0 ) { System . out . print ( i + \" ▁ \" ) ; } } } }"],"references":["class GFG { static int MAX = 100 ; public static void main ( String [ ] args ) { long [ ] arr = new long [ MAX ] ; arr [ 0 ] = 0 ; arr [ 1 ] = 1 ; for ( int i = 2 ; i < MAX ; i ++ ) arr [ i ] = arr [ i - 1 ] + arr [ i - 2 ] ; System . out . print ( \" Fibonacci ▁ numbers ▁ divisible ▁ by ▁ \" + \" their ▁ indexes ▁ are ▁ : \\n \" ) ; for ( int i = 1 ; i < MAX ; i ++ ) if ( arr [ i ] % i == 0 ) System . out . print ( i + \" ▁ \" ) ; } }"],"bleu":0.7377523002737476,"rouge_l":0.8392917559490244}
{"id":1469,"predictions":["class GFG { static boolean isPossible ( int Sx , int sy , int Dx , int dy ) { if ( Math . abs ( Sx - D ) % x == 0 && Math . abs ( S - dy ) % y == 0 && ( Math . abs ( S - Dx ) % 2 == ( Math . abs ( S - Den ) \/ 2 ) % 2 ) ; return true ; } return false ; } public static void main ( String [ ] args ) { int Sx = 0 , Syx = 0 , Dx = 0 ; int x = 3 , y = 4 ; if ( isPossible ( Sx , Syx , Dx , x , y ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . io . * ; class GFG { static boolean isPossible ( int Sx , int Sy , int Dx , int Dy , int x , int y ) { if ( Math . abs ( Sx - Dx ) % x == 0 && Math . abs ( Sy - Dy ) % y == 0 && ( Math . abs ( Sx - Dx ) \/ x ) % 2 == ( Math . abs ( Sy - Dy ) \/ y ) % 2 ) return true ; return false ; } public static void main ( String [ ] args ) { int Sx = 0 , Sy = 0 , Dx = 0 , Dy = 0 ; int x = 3 , y = 4 ; if ( isPossible ( Sx , Sy , Dx , Dy , x , y ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.6976428323468815,"rouge_l":0.8530639992230749}
{"id":1470,"predictions":["import java . io . * ; class GFG { static boolean isPerfectSquareString ( String str ) { int sum = 0 ; int l = str . length ( ) ; for ( int i = 0 ; i < l ; i ++ ) { sum = sum + ( int ) str . charAt ( i ) ; } int squareRoot = ( float ) Math . sqrt ( sum ) ; return ( ( squareRoot - Math . floor ( squareRoot ) ) == 0 ) ; } public static void main ( String args [ ] ) { String str = \" d \" ; if ( isPerfectSquareString ( str ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . io . * ; class GFG { static boolean isPerfectSquareString ( String str ) { int sum = 0 ; int len = str . length ( ) ; for ( int i = 0 ; i < len ; i ++ ) sum += ( int ) str . charAt ( i ) ; long squareRoot = ( long ) Math . sqrt ( sum ) ; return ( ( squareRoot - Math . floor ( squareRoot ) ) == 0 ) ; } public static void main ( String [ ] args ) { String str = \" d \" ; if ( isPerfectSquareString ( str ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.8508634339005117,"rouge_l":0.9452923221413477}
{"id":1471,"predictions":["import java . util . * ; class GFG { static boolean arePermutation ( String str1 , String str2 ) { int n1 = str1 . length ( ) ; int n2 = str2 . length ( ) ; if ( n1 != n2 ) return false ; return true ; } static boolean arePermutation ( String str1 , String str2 ) { Arrays . sort ( str1 ) ; char [ ] str2 = str2 . toCharArray ( ) ; Arrays . sort ( str2 ) ; str2 = new String ( str2 ) ; for ( int i = 0 ; i < n1 . length ( ) ; i ++ ) { if ( str1 . charAt ( i ) != str2 . charAt ( i ) ) return false ; } return true ; } public static void main ( String [ ] args ) { String str1 = \" test \" ; String str2 = \" tt \" ; if ( arePermutation ( str1 , str2 ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; class GfG { static boolean arePermutation ( String str1 , String str2 ) { int n1 = str1 . length ( ) ; int n2 = str2 . length ( ) ; if ( n1 != n2 ) return false ; char ch1 [ ] = str1 . toCharArray ( ) ; char ch2 [ ] = str2 . toCharArray ( ) ; Arrays . sort ( ch1 ) ; Arrays . sort ( ch2 ) ; for ( int i = 0 ; i < n1 ; i ++ ) if ( ch1 [ i ] != ch2 [ i ] ) return false ; return true ; } public static void main ( String [ ] args ) { String str1 = \" test \" ; String str2 = \" ttew \" ; if ( arePermutation ( str1 , str2 ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.7010534283585974,"rouge_l":0.8431685273790536}
{"id":1472,"predictions":["class GFG { static int catalan ( int n ) { if ( n == 0 || n == 1 ) return 1 ; int [ ] catalan = new int [ n + 1 ] ; catalan [ 0 ] = 1 ; catalan [ 1 ] = 1 ; for ( int i = 2 ; i < n ; i ++ ) { catalan [ i ] = 0 ; for ( int j = 0 ; j < i ; j ++ ) { catalan [ i ] = catalan [ i ] + catalan [ j ] * catalan [ i - j - 1 ] ; } } return catalan [ n ] ; } public static void main ( String [ ] args ) { for ( int i = 0 ; i < 10 ; i ++ ) System . out . print ( catalan ( i ) + \" ▁ \" ) ; } }"],"references":["class GFG { static int catalanDP ( int n ) { int catalan [ ] = new int [ n + 2 ] ; catalan [ 0 ] = 1 ; catalan [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) { catalan [ i ] = 0 ; for ( int j = 0 ; j < i ; j ++ ) { catalan [ i ] += catalan [ j ] * catalan [ i - j - 1 ] ; } } return catalan [ n ] ; } public static void main ( String [ ] args ) { for ( int i = 0 ; i < 10 ; i ++ ) { System . out . print ( catalanDP ( i ) + \" ▁ \" ) ; } } }"],"bleu":0.7801118112846346,"rouge_l":0.9058124734832416}
{"id":1473,"predictions":["class GFG { static void findGonalTriplets ( int arr [ ] , int n ) { for ( int j = 1 ; j < n - 1 ; j ++ ) { int i = j - 1 , k = j + 1 ; while ( i >= 0 && k <= n - 1 ) { while ( arr [ j ] % arr [ i ] == 0 && arr [ j ] % arr [ j ] == 0 && arr [ j ] \/ arr [ i ] == arr [ j ] ) { System . out . print ( arr [ i ] + \" ▁ \" + arr [ j ] + \" ▁ \" + arr [ k ] ) ; k ++ ; i -- ; } if ( arr [ j ] % arr [ i ] == 0 && arr [ k ] % arr [ j ] == 0 ) { if ( arr [ j ] \/ arr [ k ] < arr [ k ] \/ arr [ j ] ) i -- ; else k ++ ; } else if ( arr [ j ] % arr [ i ] == 0 ) k ++ ; else i -- ; } } } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 4 , 16 } ; int n = arr . length ; findGonalTriplets ( arr , n ) ; } }"],"references":["import java . util . * ; class GFG { static void findGeometricTriplets ( int arr [ ] , int n ) { for ( int j = 1 ; j < n - 1 ; j ++ ) { int i = j - 1 , k = j + 1 ; while ( i >= 0 && k <= n - 1 ) { while ( i >= 0 && arr [ j ] % arr [ i ] == 0 && arr [ k ] % arr [ j ] == 0 && arr [ j ] \/ arr [ i ] == arr [ k ] \/ arr [ j ] ) { System . out . println ( arr [ i ] + \" ▁ \" + arr [ j ] + \" ▁ \" + arr [ k ] ) ; k ++ ; i -- ; } if ( i >= 0 && arr [ j ] % arr [ i ] == 0 && arr [ k ] % arr [ j ] == 0 ) { if ( i >= 0 && arr [ j ] \/ arr [ i ] < arr [ k ] \/ arr [ j ] ) i -- ; else k ++ ; } else if ( i >= 0 && arr [ j ] % arr [ i ] == 0 ) k ++ ; else i -- ; } } } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 4 , 16 } ; int n = arr . length ; findGeometricTriplets ( arr , n ) ; } }"],"bleu":0.8393454677331766,"rouge_l":0.9227192466156562}
{"id":1474,"predictions":["class fibonacci { static int fib ( int n ) { int F [ ] [ ] = new int [ ] [ ] { { 1 , 1 } } ; if ( n == 0 ) return 0 ; power ( F , n - 1 ) ; return F [ 0 ] [ 0 ] ; } static void multiply ( int F [ ] [ ] , int M [ ] [ ] ) { int x = F [ 0 ] [ 0 ] * M [ 0 ] [ 0 ] + F [ 0 ] [ 1 ] * M [ 1 ] [ 0 ] ; int y = F [ 0 ] [ 0 ] * M [ 1 ] [ 0 ] + F [ 0 ] [ 1 ] * M [ 1 ] [ 1 ] ; int z = F [ 1 ] [ 0 ] * M [ 0 ] [ 0 ] + F [ 1 ] [ 1 ] * M [ 1 ] [ 0 ] ; int w = F [ 1 ] [ 0 ] * M [ 0 ] [ 0 ] + F [ 1 ] [ 1 ] * M [ 1 ] [ 1 ] ; F [ 0 ] [ 0 ] = x ; F [ 0 ] [ 1 ] = y ; F [ 1 ] [ 1 ] = z ; } static void power ( int F [ ] [ ] , int n ) { int i ; int M [ ] [ ] = new int [ ] [ ] [ ] ; for ( i = 2 ; i <= n ; i ++ ) multiply ( F , M ) ; } public static void main ( String [ ] args ) { int n = 9 ; System . out . println ( fib ( n ) ) ; } }"],"references":["class fibonacci { static int fib ( int n ) { int F [ ] [ ] = new int [ ] [ ] { { 1 , 1 } , { 1 , 0 } } ; if ( n == 0 ) return 0 ; power ( F , n - 1 ) ; return F [ 0 ] [ 0 ] ; } static void multiply ( int F [ ] [ ] , int M [ ] [ ] ) { int x = F [ 0 ] [ 0 ] * M [ 0 ] [ 0 ] + F [ 0 ] [ 1 ] * M [ 1 ] [ 0 ] ; int y = F [ 0 ] [ 0 ] * M [ 0 ] [ 1 ] + F [ 0 ] [ 1 ] * M [ 1 ] [ 1 ] ; int z = F [ 1 ] [ 0 ] * M [ 0 ] [ 0 ] + F [ 1 ] [ 1 ] * M [ 1 ] [ 0 ] ; int w = F [ 1 ] [ 0 ] * M [ 0 ] [ 1 ] + F [ 1 ] [ 1 ] * M [ 1 ] [ 1 ] ; F [ 0 ] [ 0 ] = x ; F [ 0 ] [ 1 ] = y ; F [ 1 ] [ 0 ] = z ; F [ 1 ] [ 1 ] = w ; } static void power ( int F [ ] [ ] , int n ) { int i ; int M [ ] [ ] = new int [ ] [ ] { { 1 , 1 } , { 1 , 0 } } ; for ( i = 2 ; i <= n ; i ++ ) multiply ( F , M ) ; } public static void main ( String args [ ] ) { int n = 9 ; System . out . println ( fib ( n ) ) ; } }"],"bleu":0.8917724676192926,"rouge_l":0.9346475451954968}
{"id":1475,"predictions":["class GFG { static String largest_alphal ( char [ ] a , int n ) { String max = \" \" ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] > max ) max = a [ i ] ; } return max ; } static String smallest_alph = \" \" ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] < min ) { min = a [ i ] ; } } return min ; } public static void main ( String [ ] args ) { String a = \" GeorsforGeeks \" ; int size = a . length ( ) ; System . out . println ( \" Largest ▁ and ▁ smallest ▁ alphabet ▁ is ▁ : ▁ \" + smallest_alphabount ( a , size ) ) ; System . out . println ( largest_alphagram ( a , size ) ) ; } }"],"references":["public class GFG { static char largest_alphabet ( String a , int n ) { char max = ' A ' ; for ( int i = 0 ; i < n ; i ++ ) if ( a . charAt ( i ) > max ) max = a . charAt ( i ) ; return max ; } static char smallest_alphabet ( String a , int n ) { char min = ' z ' ; for ( int i = 0 ; i < n - 1 ; i ++ ) if ( a . charAt ( i ) < min ) min = a . charAt ( i ) ; return min ; } public static void main ( String args [ ] ) { String a = \" GeEksforGeeks \" ; int size = a . length ( ) ; System . out . print ( \" Largest ▁ and ▁ smallest ▁ alphabet ▁ is ▁ : ▁ \" ) ; System . out . print ( largest_alphabet ( a , size ) + \" ▁ and ▁ \" ) ; System . out . println ( smallest_alphabet ( a , size ) ) ; } }"],"bleu":0.5443952771467666,"rouge_l":0.7590556549901984}
{"id":1476,"predictions":["class GFG { static boolean Check_is_possible ( int l , int r , int k ) { int count = 0 ; for ( int i = l ; i <= r ; i ++ ) { if ( i % k == 0 ) { count ++ ; } } return ( count > 1 ) ; } public static void main ( String [ ] args ) { int l = 4 ; int r = 12 , k = 5 ; if ( Check_is_possible ( l , r , k ) ) { System . out . println ( \" YES \" ) ; } else { System . out . println ( \" NO \" ) ; } } }"],"references":["class GFG { public boolean Check_is_possible ( int l , int r , int k ) { int count = 0 ; for ( int i = l ; i <= r ; i ++ ) { if ( i % k == 0 ) { count ++ ; } } return ( count > 1 ) ; } public static void main ( String [ ] args ) { GFG g = new GFG ( ) ; int l = 4 , r = 12 ; int k = 5 ; if ( g . Check_is_possible ( l , r , k ) ) { System . out . println ( \" YES \" ) ; } else { System . out . println ( \" NO \" ) ; } } }"],"bleu":0.8420985909111735,"rouge_l":0.9237758707723372}
{"id":1477,"predictions":["class GFG { static void pushZerosToEnd ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] != 0 ) { arr [ count ] = arr [ i ] ; count ++ ; } } while ( count < n ) { arr [ count ] = 0 ; count ++ ; } } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 9 , 8 , 4 , 0 , 0 , 2 , 7 , 0 , 6 } ; int n = arr . length ; pushZerosToEnd ( arr , n ) ; System . out . println ( \" Array ▁ after ▁ all ▁ all ▁ zeros ▁ to ▁ end ▁ of ▁ array : \" ) ; } }"],"references":["import java . io . * ; class PushZero { static void pushZerosToEnd ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) if ( arr [ i ] != 0 ) arr [ count ++ ] = arr [ i ] ; while ( count < n ) arr [ count ++ ] = 0 ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 9 , 8 , 4 , 0 , 0 , 2 , 7 , 0 , 6 , 0 , 9 } ; int n = arr . length ; pushZerosToEnd ( arr , n ) ; System . out . println ( \" Array ▁ after ▁ pushing ▁ zeros ▁ to ▁ the ▁ back : ▁ \" ) ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + \" ▁ \" ) ; } }"],"bleu":0.6539298061230209,"rouge_l":0.7954086317722682}
{"id":1478,"predictions":["class GFG { static boolean check ( String s , int k ) { for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) != s . charAt ( i % k ) ) { return false ; } } return true ; } static int countCommonDivisors ( String a , String b ) { int ct = 0 ; int n = a . length ( ) ; int m = b . length ( ) ; for ( int i = 1 ; i < n ; i ++ ) { if ( n % i == 0 && m % i == 0 ) { if ( a . substring ( 0 , i ) == b . length ( ) ) { if ( check ( a , i ) && check ( b , i ) ) ct ++ ; } } } return ct ; } public static void main ( String [ ] args ) { String a = \" xaxa \" , b = \" xaxa \" ; System . out . println ( countCommonDivisors ( a , b ) ) ; } }"],"references":["class GFG { static boolean check ( String s , int k ) { for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) != s . charAt ( i % k ) ) { return false ; } } return true ; } static int countCommonDivisors ( String a , String b ) { int ct = 0 ; int n = a . length ( ) , m = b . length ( ) ; for ( int i = 1 ; i <= Math . min ( n , m ) ; i ++ ) { if ( n % i == 0 && m % i == 0 ) { if ( a . substring ( 0 , i ) . equals ( b . substring ( 0 , i ) ) ) { if ( check ( a , i ) && check ( b , i ) ) { ct ++ ; } } } } return ct ; } public static void main ( String [ ] args ) { String a = \" xaxa \" , b = \" xaxaxaxa \" ; System . out . println ( countCommonDivisors ( a , b ) ) ; } }"],"bleu":0.86265582122875,"rouge_l":0.9343544857768052}
{"id":1479,"predictions":["class GFG { static int reversDigits ( int num ) { int rev_num = 0 ; while ( num > 0 ) { rev_num = rev_num * 10 + num % 10 ; num = num \/ 10 ; } return rev_num ; } public static void main ( String [ ] args ) { int num = 4562 ; System . out . println ( \" Reverse ▁ of ▁ no . ▁ is ▁ \" + reversDigits ( num ) ) ; } }"],"references":["class GFG { static int reversDigits ( int num ) { int rev_num = 0 ; while ( num > 0 ) { rev_num = rev_num * 10 + num % 10 ; num = num \/ 10 ; } return rev_num ; } public static void main ( String [ ] args ) { int num = 4562 ; System . out . println ( \" Reverse ▁ of ▁ no . ▁ is ▁ \" + reversDigits ( num ) ) ; } }"],"bleu":1.0,"rouge_l":1.0}
{"id":1480,"predictions":["import java . io . * ; class GFG { static int center_noncagon_num ( int n ) { return ( 19 * n * n - 19 * n + 2 ) \/ 2 ; } public static void main ( String [ ] args ) { int n = 2 ; System . out . print ( n + \" th ▁ centered ▁ \" + \" deccagonal ▁ number ▁ : ▁ \" ) ; System . out . println ( center_noncagon_num ( n ) ) ; n = 7 ; System . out . print ( n + \" th ▁ centered ▁ \" + \" octadecagon_num ( n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int center_nonadecagon_num ( int n ) { return ( 19 * n * n - 19 * n + 2 ) \/ 2 ; } public static void main ( String [ ] args ) { int n = 2 ; System . out . print ( n + \" th ▁ centered ▁ \" + \" nonadecagonal ▁ number ▁ : ▁ \" ) ; System . out . println ( center_nonadecagon_num ( n ) ) ; n = 7 ; System . out . print ( n + \" th ▁ centered ▁ \" + \" nonadecagonal ▁ number ▁ : ▁ \" ) ; System . out . println ( center_nonadecagon_num ( n ) ) ; } }"],"bleu":0.8030919384216589,"rouge_l":0.8978767747818158}
{"id":1481,"predictions":["import java . util . Arrays ; class GFG { static int countkDist ( String str1 , int k ) { int n = str1 . length ( ) ; int res = 0 ; int cnt [ ] = new int [ 27 ] ; Arrays . fill ( cnt , 0 ) ; for ( int i = 0 ; i < n ; i ++ ) { int dist_count = 0 ; int cnt [ ] = new int [ 27 ] ; for ( int j = i ; j < n ; j ++ ) { if ( cnt [ str1 . charAt ( j ) - 97 ] == 0 ) dist_count ++ ; cnt [ str1 . charAt ( j ) - 97 ] ++ ; if ( dist_count == k ) res ++ ; if ( dist_count > k ) break ; } } return res ; } public static void main ( String [ ] args ) { String str1 = \" abcbaa \" ; int k = 3 ; System . out . print ( \" Total ▁ substrings ▁ with ▁ \" + k + \" ▁ distinct ▁ characters ▁ : ▁ \" ) ; System . out . print ( countkDist ( str1 , k ) ) ; } }"],"references":["import java . util . Arrays ; public class CountKSubStr { int countkDist ( String str , int k ) { int res = 0 ; int n = str . length ( ) ; int cnt [ ] = new int [ 26 ] ; for ( int i = 0 ; i < n ; i ++ ) { int dist_count = 0 ; Arrays . fill ( cnt , 0 ) ; for ( int j = i ; j < n ; j ++ ) { if ( cnt [ str . charAt ( j ) - ' a ' ] == 0 ) dist_count ++ ; cnt [ str . charAt ( j ) - ' a ' ] ++ ; if ( dist_count == k ) res ++ ; } } return res ; } public static void main ( String [ ] args ) { CountKSubStr ob = new CountKSubStr ( ) ; String ch = \" abcbaa \" ; int k = 3 ; System . out . println ( \" Total ▁ substrings ▁ with ▁ exactly ▁ \" + k + \" ▁ distinct ▁ characters ▁ : ▁ \" + ob . countkDist ( ch , k ) ) ; } }"],"bleu":0.7192667495644574,"rouge_l":0.7968738201313902}
{"id":1482,"predictions":["class GFG { static int percent ( int n , int x ) { int p = ( int ) n ) * x ; p \/= 100 ; return p ; } static int getLoss ( int price [ ] , int X [ ] , int n ) { int loss = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int originalPrice = price [ i ] ; int sellingPrice = originalPrice + percent ( originalPrice , X [ i ] ) ; int afterPrice [ ] = sellingPrice - percent ( sellingPrice , X [ i ] ) ; loss += ( ( originalPrice - afterSecond ) * inverse [ i ] ) ; } return ( loss ) ; } public static void main ( String [ ] args ) { int price [ ] = { 20 , 48 , 200 } ; int precision [ ] = { 20 , 48 , 1 , 1 } ; int n = X . length ; System . out . print ( getLoss ( price , precision , X , n ) ) ; } }"],"references":["class GFG { static float percent ( int n , int x ) { float p = n * x ; p \/= 100 ; return p ; } static float getLoss ( int price [ ] , int quantity [ ] , int X [ ] , int n ) { float loss = 0 ; for ( int i = 0 ; i < n ; i ++ ) { float originalPrice = price [ i ] ; float sellingPrice = originalPrice + percent ( ( int ) originalPrice , X [ i ] ) ; float afterDiscount = sellingPrice - percent ( ( int ) sellingPrice , X [ i ] ) ; loss += ( ( originalPrice - afterDiscount ) * quantity [ i ] ) ; } return loss ; } public static void main ( String args [ ] ) { int price [ ] = { 20 , 48 , 200 , 100 } ; int quantity [ ] = { 20 , 48 , 1 , 1 } ; int X [ ] = { 0 , 48 , 200 , 5 } ; int n = X . length ; System . out . print ( getLoss ( price , quantity , X , n ) ) ; } }"],"bleu":0.6936095252438156,"rouge_l":0.8443891437903415}
{"id":1483,"predictions":["class GfG { static int minCost ( String s ) { boolean [ ] alphabets = new boolean [ 26 ] ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) alphabets [ ( s . charAt ( i ) - 97 ] = true ; int count = 0 ; for ( int i = 0 ; i < 26 ; i ++ ) if ( alphabets [ i ] ) count ++ ; return count ; } public static void main ( String [ ] args ) { String s = \" geeksforgeeks \" ; System . out . println ( \" Total ▁ cost ▁ to ▁ construct \" + s + \" ▁ is ▁ \" + minCost ( s ) ) ; } }"],"references":["class GFG { static int minCost ( char [ ] s ) { boolean alphabets [ ] = new boolean [ 26 ] ; for ( int i = 0 ; i < s . length ; i ++ ) { alphabets [ ( int ) s [ i ] - 97 ] = true ; } int count = 0 ; for ( int i = 0 ; i < 26 ; i ++ ) { if ( alphabets [ i ] ) { count ++ ; } } return count ; } public static void main ( String [ ] args ) { String s = \" geeksforgeeks \" ; System . out . println ( \" Total ▁ cost ▁ to ▁ construct ▁ \" + s + \" ▁ is ▁ \" + minCost ( s . toCharArray ( ) ) ) ; } }"],"bleu":0.7333131405839778,"rouge_l":0.8927842069434989}
{"id":1484,"predictions":["import java . io . * ; class GFG { static int nextPowerOfFour ( int n ) { int x = ( int ) Math . floor ( Math . cbrt ( n ) ) ; if ( ( int ) Math . pow ( x , n ) == n ) return n ; else { x ++ ; return ( x * Math . pow ( x , 4 ) ) ; } } public static void main ( String [ ] args ) { int n = 122 ; System . out . println ( nextPowerOfFour ( n ) ) ; } }"],"references":["import java . util . * ; import java . lang . Math ; import java . io . * ; class GFG { static int nextPowerOfFour ( int n ) { int x = ( int ) Math . floor ( Math . sqrt ( Math . sqrt ( n ) ) ) ; if ( Math . pow ( x , 4 ) == n ) return n ; else { x = x + 1 ; return ( int ) Math . pow ( x , 4 ) ; } } public static void main ( String [ ] args ) throws java . lang . Exception { int n = 122 ; System . out . println ( nextPowerOfFour ( n ) ) ; } }"],"bleu":0.6797944801310847,"rouge_l":0.807230559345157}
{"id":1485,"predictions":["import java . util . * ; class GFG { static int findCost ( String s1 , String s2 , int a , int b , int c , int d , int n ) { int cost = 0 ; for ( int i = 0 ; i < n ; ++ i ) { if ( s1 . charAt ( i ) == s2 . charAt ( i ) ) continue ; else if ( ( s1 . charAt ( i ) == '1' && s2 . charAt ( i ) == '2' ) || ( s2 . charAt ( i ) == '1' && s1 . charAt ( i ) == '2' ) ) cost += Math . min ( d , Math . min ( a , b + c ) ) ; else if ( ( s1 . charAt ( i ) == '2' && s2 . charAt ( i ) == '3' ) || ( s2 . charAt ( i ) == '3' && s1 . charAt ( i ) == '3' ) ) cost += Math . min ( d , Math . min ( b , a + c ) ) ; else if ( ( s1 . charAt ( i ) == '1' && s2 . charAt ( i ) == '1' ) || ( s2 . charAt ( i + b ) == '3' ) ) cost += Math . min ( d , Math . min ( c , a + b ) ) ; } return cost ; } public static void main ( String [ ] args ) { String s1 = \"121\" ; String s2 = \"121\" ; int a = 2 , b = 3 , c = 4 ; int n = s1 . length ( ) ; System . out . println ( findCost ( s1 , s2 , a , b , c , d , n ) ) ; } }"],"references":["class GFG { static int findCost ( String s1 , String s2 , int a , int b , int c , int d , int n ) { int cost = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s1 . charAt ( i ) == s2 . charAt ( i ) ) continue ; else { if ( ( s1 . charAt ( i ) == '1' && s2 . charAt ( i ) == '2' ) || ( s2 . charAt ( i ) == '1' && s1 . charAt ( i ) == '2' ) ) cost += Math . min ( d , Math . min ( a , b + c ) ) ; else if ( ( s1 . charAt ( i ) == '2' && s2 . charAt ( i ) == '3' ) || ( s2 . charAt ( i ) == '2' && s1 . charAt ( i ) == '3' ) ) cost += Math . min ( d , Math . min ( b , a + c ) ) ; else if ( ( s1 . charAt ( i ) == '1' && s2 . charAt ( i ) == '3' ) || ( s2 . charAt ( i ) == '1' && s1 . charAt ( i ) == '3' ) ) cost += Math . min ( d , Math . min ( c , a + b ) ) ; } } return cost ; } public static void main ( String [ ] args ) { String s1 = \"121\" ; String s2 = \"223\" ; int a = 2 , b = 3 , c = 4 , d = 10 ; int n = s1 . length ( ) ; System . out . println ( findCost ( s1 , s2 , a , b , c , d , n ) ) ; } }"],"bleu":0.9151074165208409,"rouge_l":0.9504079425931385}
{"id":1486,"predictions":["class GfG { static void TwentyoneMatch ( int arr [ ] , int N ) { for ( int i = 0 ; i < N ; i ++ ) { System . out . print ( 5 - arr [ i ] + \" ▁ \" ) ; } } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 4 , 2 , 2 } ; int N = arr . length ; TwentyoneMatch ( arr , N ) ; } }"],"references":["class GFG { static void TwentyoneMatchstick ( int arr [ ] , int N ) { for ( int i = 0 ; i < N ; i += 1 ) { System . out . print ( 5 - arr [ i ] + \" ▁ \" ) ; } System . out . println ( ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 4 , 2 , 2 } ; int N = arr . length ; TwentyoneMatchstick ( arr , N ) ; } }"],"bleu":0.8002149262494201,"rouge_l":0.905285976321494}
{"id":1487,"predictions":["import java . util . * ; class GFG { static double Perimeter ( double s , double n ) { double perimeter = 1 ; perimeter = n * s ; return perimeter ; } public static void main ( String [ ] args ) { double n = 5 ; double s = 2.5 ; double peri = Perimeter ( s , n ) ; System . out . println ( \" Perimeter ▁ of ▁ Regular ▁ Triangle ▁ with ▁ length ▁ \" + n + \" = ▁ \" + s + \" ▁ = ▁ \" + peri ) ; } }"],"references":["class GFG { static double Perimeter ( double s , int n ) { double perimeter = 1 ; perimeter = n * s ; return perimeter ; } public static void main ( String [ ] args ) { int n = 5 ; double s = 2.5 , peri ; peri = Perimeter ( s , n ) ; System . out . println ( \" Perimeter ▁ of ▁ Regular ▁ Polygon \" + \" ▁ with ▁ \" + n + \" ▁ sides ▁ of ▁ length ▁ \" + s + \" ▁ = ▁ \" + peri ) ; } }"],"bleu":0.8013855513109123,"rouge_l":0.8703703703703703}
{"id":1488,"predictions":["class GFG { static boolean checkPalindrome ( String str ) { int n = str . length ( ) ; int count = 0 ; for ( int i = 0 ; i < n \/ 2 ; i ++ ) { if ( str . charAt ( i ) != str . charAt ( n - i - 1 ) ) count ++ ; } if ( count <= 1 ) return true ; else return false ; } public static void main ( String args [ ] ) { String str = \" abccaa \" ; if ( checkPalindrome ( str ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . io . * ; class GFG { static boolean checkPalindrome ( String str ) { int n = str . length ( ) ; int count = 0 ; for ( int i = 0 ; i < n \/ 2 ; ++ i ) if ( str . charAt ( i ) != str . charAt ( n - i - 1 ) ) ++ count ; return ( count <= 1 ) ; } public static void main ( String [ ] args ) { String str = \" abccaa \" ; if ( checkPalindrome ( str ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.8345921372902808,"rouge_l":0.91183177096529}
{"id":1489,"predictions":["import java . io . * ; class GFG { static int getSum ( int n ) { int sum = 0 ; while ( n != 0 ) { sum = sum + n % 10 ; n = n \/ 10 ; } return sum ; } static int largestDigitSumdivisior ( int n ) { int res = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { if ( n % i == 0 ) res = Math . max ( res , getSum ( i ) ) ; } return res ; } public static void main ( String [ ] args ) { int n = 14 ; System . out . println ( largestDigitSumdivisior ( n ) ) ; } }"],"references":["import java . util . * ; import java . lang . * ; class GfG { public static int getSum ( int n ) { int sum = 0 ; while ( n != 0 ) { sum = sum + n % 10 ; n = n \/ 10 ; } return sum ; } public static int largestDigitSumdivisior ( int n ) { int res = 0 ; for ( int i = 1 ; i <= n ; i ++ ) if ( n % i == 0 ) res = Math . max ( res , getSum ( i ) ) ; return res ; } public static void main ( String argc [ ] ) { int n = 14 ; System . out . println ( largestDigitSumdivisior ( n ) ) ; } }"],"bleu":0.8163206024403004,"rouge_l":0.9266555898409684}
{"id":1490,"predictions":["class GFG { static int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } static int lcm ( int n , int m ) { return ( n * m ) \/ gcd ( n , m ) ; } public static void main ( String [ ] args ) { int n = 2 , m = 3 , k = 5 ; System . out . print ( k \/ lcm ( n , m ) ) ; } }"],"references":["import java . util . * ; import java . lang . * ; import java . io . * ; class GFG { static int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } static int lcm ( int n , int m ) { return ( n * m ) \/ gcd ( n , m ) ; } public static void main ( String [ ] args ) { int n = 2 , m = 3 , k = 5 ; System . out . print ( k \/ lcm ( n , m ) ) ; } }"],"bleu":0.8139288269830023,"rouge_l":0.8916595012897679}
{"id":1491,"predictions":["class GFG { static boolean checkPrime ( String number ) { int num = Integer . parseInt ( number ) ; for ( int i = 2 ; i < Math . sqrt ( num ) ; i ++ ) if ( ( num % i ) == 0 ) return false ; return true ; } static int splitIntoPrimes ( String number ) { if ( number == 0 ) return 0 ; if ( number . length ( ) <= 6 && checkPrime ( number ) ) return 1 ; else { int numLen = number . length ( ) ; int ans = 1000000 ; for ( int i = 1 ; i <= Math . min ( 6 , numLen ) ; i ++ ) { if ( checkPrime ( number . substring ( i , i ) ) ) { int val = splitInt ( number . substring ( i , i ) ; if ( val != - 1 ) ans = Math . min ( ans , 1 + val ) ; } } } if ( ans == 1000000 ) return - 1 ; return ans ; } public static void main ( String [ ] args ) { System . out . print ( splitIntoPrimes ( \"13499315\" ) + \" \\n \" ) ; } }"],"references":["import java . util . * ; class GFG { static boolean checkPrime ( String number ) { int num = Integer . valueOf ( number ) ; for ( int i = 2 ; i * i <= num ; i ++ ) if ( ( num % i ) == 0 ) return false ; return true ; } static int splitIntoPrimes ( String number ) { if ( number . length ( ) == 0 ) return 0 ; if ( number . length ( ) <= 6 && checkPrime ( number ) ) return 1 ; else { int numLen = number . length ( ) ; int ans = 1000000 ; for ( int i = 1 ; i <= 6 && i <= numLen ; i ++ ) { if ( checkPrime ( number . substring ( 0 , i ) ) ) { int val = splitIntoPrimes ( number . substring ( i ) ) ; if ( val != - 1 ) { ans = Math . min ( ans , 1 + val ) ; } } } if ( ans == 1000000 ) return - 1 ; return ans ; } } public static void main ( String [ ] args ) { System . out . print ( splitIntoPrimes ( \"13499315\" ) + \" \\n \" ) ; System . out . print ( splitIntoPrimes ( \"43\" ) + \" \\n \" ) ; } }"],"bleu":0.7854284200449713,"rouge_l":0.874009781635324}
{"id":1492,"predictions":["import java . util . * ; class GFG { static int findKthChar ( String s , int k ) { int len = s . length ( ) ; int i = 0 , total_len = 0 , i = 0 ; while ( i < len ) { if ( s . charAt ( i ) == ' ) { total_len ++ ; if ( total_len == k ) return s . charAt ( i ) ; i ++ ; } else { int n = 0 ; while ( i < len ) { n = n * 10 + ( s . charAt ( i ) - '0' ) ; i ++ ; } int next_total_len = total_len * n ; if ( k <= next_extra_len ) { int pos = k % total_len ; if ( pos == 0 ) pos = total_len ; return find_len ; } else { total_len = next_len * n ; } } } return - 1 ; } public static void main ( String [ ] args ) { String s = \" ab2c3\" ; int k = 5 ; System . out . println ( findKthChar ( s , k ) ) ; } }"],"references":["import java . util . * ; class GfG { static Character findKthChar ( String s , int k ) { int len = s . length ( ) ; int i = 0 ; int total_len = 0 ; while ( i < len ) { if ( Character . isLetter ( s . charAt ( i ) ) ) { total_len ++ ; if ( total_len == k ) return s . charAt ( i ) ; i ++ ; } else { int n = 0 ; while ( i < len && ! Character . isLetter ( s . charAt ( i ) ) ) { n = n * 10 + ( s . charAt ( i ) - '0' ) ; i ++ ; } int next_total_len = total_len * n ; if ( k <= next_total_len ) { int pos = k % total_len ; if ( pos == 0 ) { pos = total_len ; } return findKthChar ( s , pos ) ; } else { total_len = next_total_len ; } } } return ' ▁ ' ; } public static void main ( String [ ] args ) { String s = \" ab2c3\" ; int k = 5 ; System . out . println ( findKthChar ( s , k ) ) ; } }"],"bleu":0.771627875966672,"rouge_l":0.8752911126136277}
{"id":1493,"predictions":["import java . util . * ; class solution { static int Nth_Term ( int n ) { return ( 2 * ( int ) Math . pow ( n , 3 ) - 3 * ( int ) + n + 6 ) \/ 6 ; } public static void main ( String arr [ ] ) { int N = 8 ; System . out . println ( Nth_Term ( N ) ) ; } }"],"references":["import java . util . * ; import java . lang . * ; class GFG { static double Nth_Term ( int n ) { return ( 2 * Math . pow ( n , 3 ) - 3 * Math . pow ( n , 2 ) + n + 6 ) \/ 6 ; } static public void main ( String args [ ] ) { int N = 8 ; System . out . println ( Nth_Term ( N ) ) ; } }"],"bleu":0.6771787700216628,"rouge_l":0.8402203856749313}
{"id":1494,"predictions":["class GFG { static int solve ( int [ ] A , int [ ] B , int [ ] C [ ] ) { int i = A . length - 1 ; int j = B . length - 1 ; int k = C . length - 1 ; int min_diff = Math . abs ( A [ i ] , B [ j ] ) - Math . min ( A [ i ] , B [ j ] ) ; while ( i != - 1 && j != - 1 && k != - 1 ) { int current_diff = Math . abs ( A [ i ] ) - Math . min ( A [ i ] , B [ j ] ) - Math . min ( A [ i ] , C [ k ] ) ) ; if ( current_diff < min_diff ) min_diff = current_diff ; else if ( B [ i ] == max_term ) i -- ; else if ( B [ j ] == max_term ) j -- ; else k -- ; } return min_diff ; } public static void main ( String [ ] args ) { int A [ ] = { 5 , 8 , 10 , 15 , 78 , 89 } ; int B [ ] = { 2 , 3 , 6 , 8 , 8 , 10 } ; int C [ ] = { 2 , 3 , 6 , 8 , 10 } ; System . out . println ( solve ( A , B , C ) ) ; } }"],"references":["import java . io . * ; class GFG { static int solve ( int [ ] A , int [ ] B , int [ ] C ) { int i , j , k ; i = A . length - 1 ; j = B . length - 1 ; k = C . length - 1 ; int min_diff , current_diff , max_term ; min_diff = Math . abs ( Math . max ( A [ i ] , Math . max ( B [ j ] , C [ k ] ) ) - Math . min ( A [ i ] , Math . min ( B [ j ] , C [ k ] ) ) ) ; while ( i != - 1 && j != - 1 && k != - 1 ) { current_diff = Math . abs ( Math . max ( A [ i ] , Math . max ( B [ j ] , C [ k ] ) ) - Math . min ( A [ i ] , Math . min ( B [ j ] , C [ k ] ) ) ) ; if ( current_diff < min_diff ) min_diff = current_diff ; max_term = Math . max ( A [ i ] , Math . max ( B [ j ] , C [ k ] ) ) ; if ( A [ i ] == max_term ) i -= 1 ; else if ( B [ j ] == max_term ) j -= 1 ; else k -= 1 ; } return min_diff ; } public static void main ( String [ ] args ) { int [ ] D = { 5 , 8 , 10 , 15 } ; int [ ] E = { 6 , 9 , 15 , 78 , 89 } ; int [ ] F = { 2 , 3 , 6 , 6 , 8 , 8 , 10 } ; System . out . println ( solve ( D , E , F ) ) ; } }"],"bleu":0.5763262033882058,"rouge_l":0.7487319943193345}
{"id":1495,"predictions":["import java . util . * ; class GfG { static class Node { int data ; Node left = null ; } static Node newNode ( int data ) { Node temp = new Node ( ) ; temp . data = data ; temp . left = temp . right = null ; return temp ; } static boolean CheckPerfectTree ( Node root ) { Queue < Node > q = new LinkedList < Node > ( ) ; q . add ( root ) ; int flag = 0 ; while ( ! q . isEmpty ( ) ) { Node temp = q . peek ( ) ; q . remove ( ) ; if ( temp . left != null && temp . right != null ) { if ( flag == 1 ) return false ; else { q . add ( temp . left ) ; q . add ( temp . right ) ; } } else if ( temp . left == null && temp . right == null ) flag = 1 ; else if ( temp . left == null || temp . right == null ) return false ; } return true ; } public static void main ( String [ ] args ) { Node root = newNode ( 7 ) ; root . left . left = newNode ( 5 ) ; root . left . left = newNode ( 1 ) ; root . left . left = newNode ( 6 ) ; root . right . left = newNode ( 1 ) ; root . right . left = newNode ( 9 ) ; root . right . left = newNode ( 10 ) ; root . right . right . left = newNode ( 13 ) ; if ( CheckPerfectTree ( root ) ) System . out . print ( \" Yes \" ) ; else System . out . print ( \" No \" ) ; } }"],"references":["import java . util . * ; class GFG { static class Node { int data ; Node left , right ; } ; static Node newNode ( int data ) { Node node = new Node ( ) ; node . data = data ; node . left = node . right = null ; return ( node ) ; } static boolean CheckPerfectTree ( Node root ) { Queue < Node > q = new LinkedList < Node > ( ) ; q . add ( root ) ; int flag = 0 ; while ( q . size ( ) > 0 ) { Node temp = q . peek ( ) ; q . remove ( ) ; if ( temp . left != null && temp . right != null ) { if ( flag == 1 ) return false ; else { q . add ( temp . left ) ; q . add ( temp . right ) ; } } else if ( temp . left == null && temp . right == null ) { flag = 1 ; } else if ( temp . left == null || temp . right == null ) return false ; } return true ; } public static void main ( String args [ ] ) { Node root = newNode ( 7 ) ; root . left = newNode ( 5 ) ; root . right = newNode ( 6 ) ; root . left . left = newNode ( 8 ) ; root . left . right = newNode ( 1 ) ; root . right . left = newNode ( 3 ) ; root . right . right = newNode ( 9 ) ; root . right . right . right = newNode ( 13 ) ; root . right . right . left = newNode ( 10 ) ; if ( CheckPerfectTree ( root ) ) System . out . printf ( \" Yes \" ) ; else System . out . printf ( \" No \" ) ; } }"],"bleu":0.8120610817823254,"rouge_l":0.9076345312797108}
{"id":1496,"predictions":["import java . util . * ; class GfG { static Set < Integer > s = new HashSet < > ( ) ; static void generateNumber ( int count , int a [ ] , int n , int k ) { if ( k == count ) { s . add ( num ) ; return ; } for ( int i = 0 ; i < n ; i ++ ) { generateNumber ( count + 1 , a , n , i , num + a [ i ] , k ) ; } } static void printDistinctIntegers ( int k , int a [ ] , int n ) { generateNumber ( 0 , a , n , 0 , k ) ; System . out . println ( \" The ▁ \" + s + \" ▁ distinct ▁ integers ▁ are : \" ) ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( a [ i ] + \" ▁ \" ) ; } public static void main ( String [ ] args ) { int a [ ] = { 3 , 8 , 17 , 5 } ; int n = a . length ; int k = 2 ; printDistinctIntegers ( k , a , n ) ; } }"],"references":["import java . util . * ; import java . lang . * ; class GFG { static TreeSet < Integer > set = new TreeSet < Integer > ( ) ; public static void generateNumber ( int count , int a [ ] , int n , int num , int k ) { if ( count == k ) { set . add ( num ) ; return ; } for ( int i = 0 ; i < n ; i ++ ) generateNumber ( count + 1 , a , n , num + a [ i ] , k ) ; } public static void printDistinctIntegers ( int k , int a [ ] , int n ) { generateNumber ( 0 , a , n , 0 , k ) ; System . out . print ( \" The \" + \" ▁ \" + set . size ( ) + \" ▁ \" + \" distinct ▁ integers ▁ are : ▁ \" ) ; System . out . println ( ) ; Iterator < Integer > i = set . iterator ( ) ; while ( set . isEmpty ( ) == false ) { while ( i . hasNext ( ) ) { System . out . print ( i . next ( ) + \" ▁ \" ) ; } } } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 8 , 17 , 5 } ; int n = arr . length ; int k = 2 ; printDistinctIntegers ( k , arr , n ) ; } }"],"bleu":0.6008095562924979,"rouge_l":0.7856873586328222}
{"id":1497,"predictions":["class GFG { static int findMin ( int a [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += ( int ) Math . log ( a [ i ] ) ; } int x = ( int ) exp \/ n ; return x + 1 ; } public static void main ( String [ ] args ) { int a [ ] = { 3 , 2 , 1 , 4 } ; int n = a . length ; System . out . println ( findMin ( a , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static int findMin ( int a [ ] , int n ) { double sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += Math . log ( a [ i ] ) ; int x = ( int ) Math . exp ( sum \/ n ) ; return x + 1 ; } public static void main ( String [ ] args ) { int a [ ] = { 3 , 2 , 1 , 4 } ; int n = a . length ; System . out . println ( findMin ( a , n ) ) ; } }"],"bleu":0.8306631496063076,"rouge_l":0.9163621599675192}
{"id":1498,"predictions":["class GFG { static void printPaths ( char inputchar [ ] [ ] , int R , int C , int C ) { for ( int i = 0 ; i < C ; i ++ ) { dfs ( inputChar , 0 , i , R , C , C ) ; System . out . println ( ) ; } } static void dfs ( char inputChar [ ] [ ] , int i , int j , int C ) { if ( i == R ) { System . out . print ( res + \" ▁ \" + inputchar [ i ] [ j ] ) ; return ; } res = res + inputchar [ i ] [ j ] ; for ( int k = 0 ; k < C ; k ++ ) { dfs ( inputChar , res , i + 1 , k , R , C ) ; if ( i + 1 == R ) break ; } } public static void main ( String [ ] args ) { char [ ] [ ] inputChar = { ' a ' , ' b ' } ; int R = input . length ; int C = input . length ; printPaths ( input , R , C , C ) ; } }"],"references":["public class GFG { private static void printPaths ( char [ ] [ ] input , int R , int C ) { for ( int i = 0 ; i < C ; i ++ ) { dfs ( input , \" \" , 0 , i , R , C ) ; System . out . println ( ) ; } } private static void dfs ( char [ ] [ ] input , String res , int i , int j , int R , int C ) { if ( i == R ) { System . out . print ( res + \" ▁ \" ) ; return ; } res = res + input [ i ] [ j ] ; for ( int k = 0 ; k < C ; k ++ ) { dfs ( input , res , i + 1 , k , R , C ) ; if ( i + 1 == R ) { break ; } } } public static void main ( String [ ] args ) { char [ ] [ ] input = { { ' a ' , ' b ' } , { ' d ' , ' e ' } } ; int R = input . length ; int C = input [ 0 ] . length ; printPaths ( input , R , C ) ; } }"],"bleu":0.7653416081739045,"rouge_l":0.8756184238032192}
{"id":1499,"predictions":["class GFG { static int mod = ( int ) 1e9 + 7 ; static int power ( int a , int m1 ) { if ( m1 == 0 ) return 1 ; else if ( m1 == 2 ) return ( a * a ) % mod ; else if ( m1 == 2 ) return ( a * power ( power ( a , m1 \/ 2 ) , 2 ) % mod ; else return power ( power ( a , m1 \/ 2 ) , 2 ) % mod ; } static int factorial ( int x ) { int ans = 1 ; for ( int i = 1 ; i <= x ; i ++ ) ans = ( ans * i ) % mod ; return ans ; } static int binomial ( int x ) { int ans = power ( x , mod - 2 ) ; ans = ( ans * inverse ( factorial ( factorial ( r ) ) ) % mod ; ans = ( ans * inverse ( factorial ( r ) ) ) % mod ; ans = ( ans * inverse ( factorial ( factorial ( n - r ) ) % mod ; return ans ; } static int number_of_sets ( int n , int a , int b ) { int ans = power ( 2 , n ) ; ans = ans - binomial ( factorial ( r ) ) ; ans = ( ans - binomial ( factorial ( n - r ) ) % mod ; ans = ans - binomial ( factorial ( n - r ) ) % mod ; return ans ; } public static void main ( String [ ] args ) { int N = 4 , A = 1 ; int B = 3 ; System . out . println ( number_of_sets ( N , A , B ) ) ; } }"],"references":["import java . util . * ; class GFG { static final int mod = ( int ) ( 1e9 + 7 ) ; static int power ( int a , int m1 ) { if ( m1 == 0 ) return 1 ; else if ( m1 == 1 ) return a ; else if ( m1 == 2 ) return ( int ) ( ( 1L * a * a ) % mod ) ; else if ( m1 % 2 == 1 ) return ( int ) ( ( 1L * a * power ( power ( a , m1 \/ 2 ) , 2 ) ) % mod ) ; else return power ( power ( a , m1 \/ 2 ) , 2 ) % mod ; } static int factorial ( int x ) { int ans = 1 ; for ( int i = 1 ; i <= x ; i ++ ) ans = ( int ) ( ( 1L * ans * i ) % mod ) ; return ans ; } static int inverse ( int x ) { return power ( x , mod - 2 ) ; } static int binomial ( int n , int r ) { if ( r > n ) return 0 ; int ans = factorial ( n ) ; ans = ( int ) ( ( 1L * ans * inverse ( factorial ( r ) ) ) % mod ) ; ans = ( int ) ( ( 1L * ans * inverse ( factorial ( n - r ) ) ) % mod ) ; return ans ; } static int number_of_sets ( int n , int a , int b ) { int ans = power ( 2 , n ) ; ans = ans - binomial ( n , a ) ; if ( ans < 0 ) ans += mod ; ans = ans - binomial ( n , b ) ; ans -- ; if ( ans < 0 ) ans += mod ; return ans ; } public static void main ( String [ ] args ) { int N = 4 , A = 1 , B = 3 ; System . out . print ( number_of_sets ( N , A , B ) ) ; } }"],"bleu":0.6401501948033111,"rouge_l":0.7791277258566979}
{"id":1500,"predictions":["import java . io . * ; class GFG { static int sumOfSeries ( int a , int num ) { int res = 0 ; int prev = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { prev *= ( a \/ i ) ; res += prev ; } return res ; } public static void main ( String [ ] args ) { int n = 5 ; int a = 2 ; System . out . println ( sumOfSeries ( a , n ) ) ; } }"],"references":["import java . io . * ; class GFG { public static void main ( String [ ] args ) { double n = 5 , a = 2 ; System . out . println ( sumOfSeries ( a , n ) ) ; } static double sumOfSeries ( double a , double n ) { double res = 0 , prev = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { prev *= ( a \/ i ) ; res = res + prev ; } return ( res ) ; } }"],"bleu":0.7100693139858718,"rouge_l":0.5633506156837329}
{"id":1501,"predictions":["import java . util . * ; class GFG { static int countNum ( int arr [ ] , int n ) { HashSet < Integer > s = new HashSet < Integer > ( ) ; int count = 0 , minm = Integer . MAX_VALUE , minm = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { s . add ( arr [ i ] ) ; if ( arr [ i ] < minm ) maxm = arr [ i ] ; if ( arr [ i ] > maxm ) maxm = arr [ i ] ; } for ( int i = minm ; i <= maxm ; i ++ ) if ( ! s . contains ( i ) ) count ++ ; return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 5 , 8 , 6 } ; int n = arr . length ; System . out . println ( countNum ( arr , n ) ) ; } }"],"references":["import java . util . HashSet ; class GFG { static int countNum ( int arr [ ] , int n ) { HashSet < Integer > s = new HashSet < > ( ) ; int count = 0 , maxm = Integer . MIN_VALUE , minm = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { s . add ( arr [ i ] ) ; if ( arr [ i ] < minm ) minm = arr [ i ] ; if ( arr [ i ] > maxm ) maxm = arr [ i ] ; } for ( int i = minm ; i <= maxm ; i ++ ) if ( ! s . contains ( i ) ) count ++ ; return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 5 , 8 , 6 } ; int n = arr . length ; System . out . println ( countNum ( arr , n ) ) ; } }"],"bleu":0.9391217022423745,"rouge_l":0.9769612881123673}
{"id":1502,"predictions":["import java . util . * ; class GFG { static int MAX_CHAR = 256 ; static boolean isPresent ( String s , String q ) { int freq [ ] = new int [ MAX_CHAR ] ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { freq [ s . charAt ( i ) ] ++ ; } for ( int i = 0 ; i < q . length ( ) ; i ++ ) { freq [ s . charAt ( i ) ] ++ ; } for ( int i = 0 ; i < q . length ( ) ; i ++ ) { freq [ q . charAt ( i ) ] -- ; if ( freq [ q . charAt ( i ) < 0 ) return false ; } return true ; } public static void main ( String [ ] args ) { String s = \" abcd \" ; String q = \" cat \" ; if ( isPresent ( s , q ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . io . * ; public class GFG { static int MAX_CHAR = 256 ; static boolean isPresent ( String s , String q ) { int [ ] freq = new int [ MAX_CHAR ] ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) freq [ s . charAt ( i ) ] ++ ; for ( int i = 0 ; i < q . length ( ) ; i ++ ) { freq [ q . charAt ( i ) ] -- ; if ( freq [ q . charAt ( i ) ] < 0 ) return false ; } return true ; } static public void main ( String [ ] args ) { String s = \" abctd \" ; String q = \" cat \" ; if ( isPresent ( s , q ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.7616380221902108,"rouge_l":0.9024285958611254}
{"id":1503,"predictions":["import java . io . * ; class GFG { static float area_of_circle ( float m , float n ) { float square_of_radius = ( m * n ) \/ 4 ; float area = ( 3.142 * square_of_radius ) ; return area ; } public static void main ( String [ ] args ) { float n = 10 , m = 30 ; System . out . println ( area_of_circle ( m , n ) ) ; } }"],"references":["class GFG { static double area_of_circle ( int m , int n ) { int square_of_radius = ( m * n ) \/ 4 ; double area = ( 3.141 * square_of_radius ) ; return area ; } public static void main ( String [ ] args ) { int n = 10 ; int m = 30 ; System . out . println ( area_of_circle ( m , n ) ) ; } }"],"bleu":0.6631191680890272,"rouge_l":0.8520634920634921}
{"id":1504,"predictions":["class GFG { static void printTwoSetBitNums ( int n ) { int x = 1 ; while ( n > 0 ) { int y = 0 ; while ( y < x ) { System . out . print ( ( 1 << x ) + ( 1 << y ) + \" ▁ \" ) ; n -- ; if ( n == 0 ) return ; y ++ ; } x ++ ; } } public static void main ( String [ ] args ) { printTwoSetBitNums ( 4 ) ; } }"],"references":["import java . io . * ; class GFG { static void printTwoSetBitNums ( int n ) { int x = 1 ; while ( n > 0 ) { int y = 0 ; while ( y < x ) { System . out . print ( ( ( 1 << x ) + ( 1 << y ) ) + \" ▁ \" ) ; n -- ; if ( n == 0 ) return ; y ++ ; } x ++ ; } } public static void main ( String [ ] args ) { int n = 4 ; printTwoSetBitNums ( n ) ; } }"],"bleu":0.8226359511710148,"rouge_l":0.9111635220125787}
{"id":1505,"predictions":["class GFG { static int binomialCoeff ( int n , int k ) { int [ ] [ ] C = new int [ n + 1 ] [ k + 1 ] ; for ( int i = 0 ; i <= n ; i ++ ) { for ( int j = 0 ; j <= Math . min ( i , k ) ; j ++ ) { if ( j == 0 || j == i ) C [ i ] [ j ] = 1 ; else C [ i ] [ j ] = C [ i - 1 ] [ j - 1 ] + C [ i - 1 ] [ j ] ; } } return C [ n ] [ k ] ; } static int findMax ( int n ) { return binomialCoeff ( n , n \/ 2 ) ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( findMax ( n ) ) ; } }"],"references":["class GFG { static int binomialCoeff ( int n , int k ) { int [ ] [ ] C = new int [ n + 1 ] [ k + 1 ] ; int i , j ; for ( i = 0 ; i <= n ; i ++ ) { for ( j = 0 ; j <= Math . min ( i , k ) ; j ++ ) { if ( j == 0 || j == i ) C [ i ] [ j ] = 1 ; else C [ i ] [ j ] = C [ i - 1 ] [ j - 1 ] + C [ i - 1 ] [ j ] ; } } return C [ n ] [ k ] ; } static int findMax ( int n ) { return binomialCoeff ( n , n \/ 2 ) ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( findMax ( n ) ) ; } }"],"bleu":0.9551358318786929,"rouge_l":0.9795936474137167}
{"id":1506,"predictions":["import java . util . * ; class GFG { static int calculateSum ( int arr [ ] , int n ) { if ( n == 0 ) return 0 ; int s = arr [ 0 ] ; int value = s ; int sum = value ; for ( int i = 2 ; i < n ; i += 2 ) { s = arr [ i ] . charAt ( i ) ; value = arr [ i - 1 ] [ 0 ] ; if ( op == ' + ' ) sum += value ; else sum -= value ; } return sum ; } public static void main ( String [ ] args ) { String arr [ ] = { \"3\" , \" + \"4\" , \"4\" , \"7\" , \"7\" } ; int n = arr . length ; System . out . println ( calculateSum ( arr , n ) ) ; } }"],"references":["import java . io . * ; class GFG { public static int calculateSum ( String arr [ ] , int n ) { if ( n == 0 ) return 0 ; String s = arr [ 0 ] ; int value = Integer . parseInt ( s ) ; int sum = value ; for ( int i = 2 ; i < n ; i = i + 2 ) { s = arr [ i ] ; value = Integer . parseInt ( s ) ; char operation = arr [ i - 1 ] . charAt ( 0 ) ; if ( operation == ' + ' ) sum += value ; else sum -= value ; } return sum ; } public static void main ( String [ ] args ) { String arr [ ] = { \"3\" , \" + \" , \"4\" , \" - \" , \"7\" , \" + \" , \"13\" } ; int n = arr . length ; System . out . println ( calculateSum ( arr , n ) ) ; } }"],"bleu":0.7039444894486278,"rouge_l":0.8567887634260535}
{"id":1507,"predictions":["import java . io . * ; class GFG { static boolean checkPerfect ( int x ) { int temp = x ; int n = 0 ; while ( x != 0 ) { x = x \/ 10 ; n ++ ; } x = temp ; while ( x != 0 ) { sum = sum + ( int ) Math . pow ( x % 10 , n ) ; x = x \/ 10 ; } return ( sum == temp ) ; } public static void main ( String [ ] args ) { int x = 9474 ; if ( checkplusperfect ( x ) == true ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . io . * ; class GFG { static boolean checkplusperfect ( int x ) { int temp = x ; int n = 0 ; while ( x != 0 ) { x \/= 10 ; n ++ ; } x = temp ; int sum = 0 ; while ( x != 0 ) { sum += Math . pow ( x % 10 , n ) ; x \/= 10 ; } return ( sum == temp ) ; } public static void main ( String [ ] args ) { int x = 9474 ; if ( checkplusperfect ( x ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.8370743070105777,"rouge_l":0.9154060268667554}
{"id":1508,"predictions":["class GFG { static boolean isPossible ( int arr [ ] , int p , int n , int m ) { int sum = 0 ; for ( int i = 0 ; i < p ; i ++ ) { sum += arr [ i ] ; } if ( sum == ( n * m ) ) return true ; return false ; } public static void main ( String [ ] args ) { int n = 3 ; int arr [ ] = { 6 , 3 , 2 , 1 } ; int p = arr . length ; if ( isPossible ( arr , p , n , m ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; class GFG { static boolean isPossible ( int arr [ ] , int p , int n , int m ) { int sum = 0 ; for ( int i = 0 ; i < p ; i ++ ) sum += arr [ i ] ; if ( sum == ( n * m ) ) return true ; return false ; } public static void main ( String [ ] args ) { int n = 3 , m = 4 ; int arr [ ] = { 6 , 3 , 2 , 1 } ; int p = arr . length ; if ( isPossible ( arr , p , n , m ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.8957136231643713,"rouge_l":0.9507018901293247}
{"id":1509,"predictions":["class GFG { static int reverse ( int n ) { int d = 0 , s = 0 ; while ( n > 0 ) { d = n % 10 ; s = s * 10 + d ; n = n \/ 10 ; } return s ; } static boolean isPalin ( int n ) { return n == reverse ( n ) ; } static int isPalin ( int n ) { return n == reverse ( n ) ; } static int sumOfArray ( int arr [ ] , int n ) { int s = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( ( arr [ i ] > 10 ) && isPalin ( arr [ i ] ) ) { s += arr [ i ] ; } } return s ; } public static void main ( String [ ] args ) { int n = 6 ; int arr [ ] = { 12 , 111 , 11 , 44 , 9 , 1 } ; System . out . println ( sumOfArray ( arr , n ) ) ; } }"],"references":["class GFG { static int reverse ( int n ) { int d = 0 , s = 0 ; while ( n > 0 ) { d = n % 10 ; s = s * 10 + d ; n = n \/ 10 ; } return s ; } static boolean isPalin ( int n ) { return n == reverse ( n ) ; } static int sumOfArray ( int [ ] arr , int n ) { int s = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( ( arr [ i ] > 10 ) && isPalin ( arr [ i ] ) ) { s += arr [ i ] ; } } return s ; } public static void main ( String [ ] args ) { int n = 6 ; int [ ] arr = { 12 , 313 , 11 , 44 , 9 , 1 } ; System . out . println ( sumOfArray ( arr , n ) ) ; } }"],"bleu":0.8685088750470092,"rouge_l":0.9483476340158015}
{"id":1510,"predictions":["class GfG { static int minCost ( int arr [ ] , int n ) { int count_even = 0 ; int count_odd = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) count_even ++ ; else count_odd ++ ; } return Math . min ( count_even , count_odd ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 4 , 3 , 1 , 5 } ; int n = arr . length ; System . out . println ( minCost ( arr , n ) ) ; } }"],"references":["class GFG { static int minCost ( int arr [ ] , int n ) { int count_even = 0 ; int count_odd = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) count_even ++ ; else count_odd ++ ; } return Math . min ( count_even , count_odd ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 4 , 3 , 1 , 5 } ; int n = arr . length ; System . out . println ( minCost ( arr , n ) ) ; } }"],"bleu":0.9855635239687668,"rouge_l":0.9918032786885246}
{"id":1511,"predictions":["class GFG { static int gcd ( int a , int b ) { if ( a == 0 || b == 0 ) return 0 ; if ( a == b ) return a ; if ( a > b ) return gcd ( a - b , b ) ; return gcd ( a , b - a ) ; } static int coprime ( int a , int b ) { return ( gcd ( a , b ) == 1 ) ; } static int numOfPairs ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) for ( int j = i + 1 ; j < n ; j ++ ) if ( coprime ( arr [ i ] , arr [ j ] ) ) count ++ ; return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 5 , 4 , 8 , 3 , 9 } ; int n = arr . length ; System . out . println ( numOfPairs ( arr , n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int gcd ( int a , int b ) { if ( a == 0 || b == 0 ) return 0 ; if ( a == b ) return a ; if ( a > b ) return gcd ( a - b , b ) ; return gcd ( a , b - a ) ; } static boolean coprime ( int a , int b ) { return ( gcd ( a , b ) == 1 ) ; } static int numOfPairs ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) for ( int j = i + 1 ; j < n ; j ++ ) if ( coprime ( arr [ i ] , arr [ j ] ) ) count ++ ; return count ; } public static void main ( String args [ ] ) throws IOException { int arr [ ] = { 1 , 2 , 5 , 4 , 8 , 3 , 9 } ; int n = arr . length ; System . out . println ( numOfPairs ( arr , n ) ) ; } }"],"bleu":0.9282590406722157,"rouge_l":0.9666616833607417}
{"id":1512,"predictions":["import java . util . * ; class GFG { static int countSubarrays ( int a [ ] , int n , int m ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int odd = 0 ; for ( int j = i ; j < n ; j ++ ) { if ( a [ j ] % 2 == 1 ) odd ++ ; if ( odd == m ) count ++ ; } } return count ; } public static void main ( String [ ] args ) { int a [ ] = { 2 , 2 , 5 , 6 , 9 , 2 , 11 } ; int n = a . length ; int m = 2 ; System . out . println ( countSubarrays ( a , n , m ) ) ; } }"],"references":["import java . util . * ; class GFG { static int countSubarrays ( int a [ ] , int n , int m ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int odd = 0 ; for ( int j = i ; j < n ; j ++ ) { if ( a [ j ] % 2 == 0 ) odd ++ ; if ( odd == m ) count ++ ; } } return count ; } public static void main ( String [ ] args ) { int a [ ] = { 2 , 2 , 5 , 6 , 9 , 2 , 11 } ; int n = a . length ; int m = 2 ; System . out . println ( countSubarrays ( a , n , m ) ) ; } }"],"bleu":0.983946925861381,"rouge_l":0.9936305732484076}
{"id":1513,"predictions":["class GFG { static void divide ( int n , int m ) { System . out . println ( \" ▁ = ▁ \" + ( ( n ) & ( m - 1 ) ) ; System . out . println ( \"Quotient ▁ = ▁ \" + ( n & ( m - 1 ) ) ) ; } public static void main ( String [ ] args ) { int n = 43 , m = 8 ; divide ( n , m ) ; } }"],"references":["import java . io . * ; public class GFG { static void divide ( int n , int m ) { System . out . println ( \" Remainder ▁ = ▁ \" + ( ( n ) & ( m - 1 ) ) ) ; System . out . println ( \" Quotient ▁ = ▁ \" + ( n >> ( int ) ( Math . log ( m ) \/ Math . log ( 2 ) ) ) ) ; } static public void main ( String [ ] args ) { int n = 43 , m = 8 ; divide ( n , m ) ; } }"],"bleu":0.6572925796557522,"rouge_l":0.8177708495713172}
{"id":1514,"predictions":["import java . util . * ; class GFG { static int maxlen = 100 ; static void generateSubStrings ( String s , int mp [ ] [ ] ) { int len = s . length ( ) ; for ( int i = 0 ; i < len ; i ++ ) { String temp = \" \" ; for ( int j = i ; j < len ; j ++ ) { temp += s . charAt ( j ) ; mpp [ temp ] [ i ] ++ ; } } } static void generateSubStrings ( String C [ ] ) { for ( int i = 0 ; i < 100 ; i ++ ) { for ( int j = 0 ; j < 100 ; j ++ ) { if ( j == 0 || j == i ) { C [ i ] [ j ] = 1 ; } else { C [ i ] [ j ] = C [ i - 1 ] [ j - 1 ] + C [ i - 1 ] [ j ] ; } } } } static int answerQuery ( String s ) { int ans = 0 ; for ( int i = 0 ; i < maxlen ; i ++ ) { for ( int j = 0 ; j < maxlen ; j ++ ) { if ( mpp . get ( j ) >= k ) { ans += C [ i ] [ j ] ; } } } return ans ; } public static void main ( String [ ] args ) { String s = \" aabaab \" ; int C [ ] [ ] = { 2 , 3 , 4 } ; generate ( s ) ; int mpp [ ] = { 2 , 3 , 4 } ; int q = queries . length ; for ( int i = 0 ; i < q ; i ++ ) { System . out . print ( answerQuery ( mpp , C , queries [ i ] [ 1 ] ) ) ; } }"],"references":["import java . util . HashMap ; class GFG { static int maxlen = 100 ; public static void generateSubStrings ( String s , HashMap < String , Integer > mpp ) { int l = s . length ( ) ; for ( int i = 0 ; i < l ; i ++ ) { String temp = \" \" ; for ( int j = i ; j < l ; j ++ ) { temp += s . charAt ( j ) ; if ( mpp . containsKey ( temp ) ) { int x = mpp . get ( temp ) ; mpp . put ( temp , ++ x ) ; } else mpp . put ( temp , 1 ) ; } } } public static void binomialCoeff ( int [ ] [ ] C ) { int i , j ; for ( i = 1 ; i < 100 ; i ++ ) { for ( j = 0 ; j < 100 ; j ++ ) { if ( j == 0 || j == i ) C [ i ] [ j ] = 1 ; else C [ i ] [ j ] = C [ i - 1 ] [ j - 1 ] + C [ i - 1 ] [ j ] ; } } } public static int answerQuery ( HashMap < String , Integer > mpp , int [ ] [ ] C , int k ) { int ans = 0 ; for ( HashMap . Entry < String , Integer > entry : mpp . entrySet ( ) ) { if ( entry . getValue ( ) >= k ) ans += C [ entry . getValue ( ) ] [ k ] ; } return ans ; } public static void main ( String [ ] args ) { String s = \" aabaab \" ; HashMap < String , Integer > mpp = new HashMap < > ( ) ; generateSubStrings ( s , mpp ) ; int [ ] [ ] C = new int [ maxlen ] [ maxlen ] ; binomialCoeff ( C ) ; int [ ] queries = { 2 , 3 , 4 } ; int q = queries . length ; for ( int i = 0 ; i < q ; i ++ ) System . out . println ( answerQuery ( mpp , C , queries [ i ] ) ) ; } }"],"bleu":0.5800250927425273,"rouge_l":0.7260712526678706}
{"id":1515,"predictions":["import java . util . * ; class GFG { static int findProduct ( int arr [ ] , int n ) { Arrays . sort ( arr ) ; int prod = 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i - 1 ] != arr [ i ] ) prod = prod * arr [ i ] ; } return prod ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 1 , 4 , 5 , 6 } ; int n = arr . length ; System . out . println ( findProduct ( arr , n ) ) ; } }"],"references":["import java . util . Arrays ; class GFG { static int findProduct ( int arr [ ] , int n ) { Arrays . sort ( arr ) ; int prod = 1 * arr [ 0 ] ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( arr [ i ] != arr [ i + 1 ] ) { prod = prod * arr [ i + 1 ] ; } } return prod ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 1 , 1 , 4 , 5 , 6 } ; int n = arr . length ; System . out . println ( findProduct ( arr , n ) ) ; } }"],"bleu":0.8233742506777472,"rouge_l":0.9241347162335393}
{"id":1516,"predictions":["class GFG { static void SieveOfSundaram ( int n ) { int nNew = ( n - 2 ) \/ 2 ; int [ ] marked = new int [ nNew + 1 ] ; for ( int i = 1 ; i <= nNew ; i ++ ) for ( int j = i ; ( i + j + 2 * i * j ) <= nNew ; j ++ ) marked [ i + j + 2 * i * j ] = 1 ; if ( n > 2 ) System . out . print ( 2 + \" ▁ \" ) ; for ( int i = 1 ; i <= nNew ; i ++ ) if ( marked [ i ] == 0 ) System . out . print ( ( 2 * i + 1 ) + \" ▁ \" ) ; } public static void main ( String [ ] args ) { int n = 20 ; SieveOfSundaram ( n ) ; } }"],"references":["import java . util . Arrays ; class GFG { static int SieveOfSundaram ( int n ) { int nNew = ( n - 2 ) \/ 2 ; boolean marked [ ] = new boolean [ nNew + 1 ] ; Arrays . fill ( marked , false ) ; for ( int i = 1 ; i <= nNew ; i ++ ) for ( int j = i ; ( i + j + 2 * i * j ) <= nNew ; j ++ ) marked [ i + j + 2 * i * j ] = true ; if ( n > 2 ) System . out . print ( 2 + \" ▁ \" ) ; for ( int i = 1 ; i <= nNew ; i ++ ) if ( marked [ i ] == false ) System . out . print ( 2 * i + 1 + \" ▁ \" ) ; return - 1 ; } public static void main ( String [ ] args ) { int n = 20 ; SieveOfSundaram ( n ) ; } }"],"bleu":0.8006279138513073,"rouge_l":0.8985804838853675}
{"id":1517,"predictions":["class GFG { static void solve ( int n ) { if ( n == 1 ) { System . out . println ( - 1 ) ; } else { int num = 2 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { num = ( num * 10 ) + 3 ; } System . out . println ( num ) ; } } public static void main ( String [ ] args ) { int n = 4 ; solve ( n ) ; } }"],"references":["class GFG { long ll ; static void solve ( long n ) { if ( n == 1 ) { System . out . println ( - 1 ) ; } else { int num = 2 ; for ( long i = 0 ; i < n - 1 ; i ++ ) { num = ( num * 10 ) + 3 ; } System . out . println ( num ) ; } } public static void main ( String [ ] args ) { long n = 4 ; solve ( n ) ; } }"],"bleu":0.8786243508032684,"rouge_l":0.9521853434111073}
{"id":1518,"predictions":["class GFG { static int minimumOperations ( int arr [ ] , int n ) { int brr [ ] = { 0 , 0 , 0 , 0 } ; for ( int i = 0 ; i < n ; i ++ ) { brr [ arr [ i ] % 4 ] ++ ; } if ( ( brr [ 1 ] + 2 * brr [ 2 ] + 3 * brr [ 3 ] ) % 4 == 0 ) { int min_op = Math . min ( brr [ 3 ] , brr [ 1 ] ) ; brr [ 3 ] -= min_opr [ 1 ] -= min_opr [ 2 ] ; min_op += brr [ 2 ] % 2 ; if ( brr [ 2 ] > 0 ) min_opr += 2 ; if ( brr [ 1 ] > 0 ) min_opr += 2 ; } if ( brr [ 1 ] > 0 ) min_opr += ( brr [ 1 ] \/ 4 ) * 3 ; return min_opr ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 1 , 2 , 3 , 8 } ; int n = arr . length ; System . out . print ( minimumOperations ( arr , n ) ) ; } }"],"references":["class GFG { static int minimumOperations ( int arr [ ] , int n ) { int brr [ ] = { 0 , 0 , 0 , 0 } ; for ( int i = 0 ; i < n ; i ++ ) brr [ arr [ i ] % 4 ] ++ ; if ( ( brr [ 1 ] + 2 * brr [ 2 ] + 3 * brr [ 3 ] ) % 4 == 0 ) { int min_opr = Math . min ( brr [ 3 ] , brr [ 1 ] ) ; brr [ 3 ] -= min_opr ; brr [ 1 ] -= min_opr ; min_opr += brr [ 2 ] \/ 2 ; brr [ 2 ] %= 2 ; if ( brr [ 2 ] == 1 ) { min_opr += 2 ; brr [ 2 ] = 0 ; if ( brr [ 3 ] == 1 ) brr [ 3 ] -= 2 ; if ( brr [ 1 ] == 1 ) brr [ 1 ] -= 2 ; } if ( brr [ 1 ] == 1 ) min_opr += ( brr [ 1 ] \/ 4 ) * 3 ; if ( brr [ 3 ] == 1 ) min_opr += ( brr [ 3 ] \/ 4 ) * 3 ; return min_opr ; } return - 1 ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 1 , 2 , 3 , 8 } ; int n = arr . length ; System . out . println ( minimumOperations ( arr , n ) ) ; } }"],"bleu":0.6776144735039258,"rouge_l":0.8178233438485804}
{"id":1519,"predictions":["class GFG { static int minFn ( int arr [ ] [ ] ) { int minimum = Integer . MIN_VALUE ; for ( int i = 0 ; i < 4 ; i ++ ) { if ( minimum > arr [ i ] [ i ] ) minimum = arr [ i ] ; } return minimum ; } static void minimizeGraph ( int arr [ ] [ ] ) { for ( int i = 0 ; i < 4 ; i ++ ) { for ( int j = 0 ; j < 4 ; j ++ ) { if ( arr [ i ] [ j ] == 0 ) arr [ i ] [ j ] = Integer . MAX_VALUE ; } } for ( int i = 0 ; i < 4 ; i ++ ) { minimum = minFn ( arr [ i ] [ i ] ) ; for ( int j = 0 ; j < 4 ; j ++ ) { if ( ( ! ( arr [ i ] [ j ] ) ) || ( arr [ i ] [ j ] == Integer . MAX_VALUE ) ) { arr [ i ] [ j ] = 0 ; } else minimum = 0 ; } } for ( int i = 0 ; i < 4 ; i ++ ) { for ( int j = 0 ; j < 4 ; j ++ ) { System . out . print ( arr [ i ] [ j ] + \" ▁ \" ) ; } System . out . println ( ) ; } } public static void main ( String args [ ] ) { int arr [ ] [ ] = { { 1 , 2 , 4 , 0 } , { 0 , 0 , 0 , 3 } , { 0 , 0 , 0 , 0 } } ; minimizeGraph ( arr ) ; } }"],"references":["import java . io . * ; import java . util . * ; import java . lang . * ; class GFG { static int minFn ( int arr [ ] ) { int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < arr . length ; i ++ ) if ( min > arr [ i ] ) min = arr [ i ] ; return min ; } static void minimizeGraph ( int arr [ ] [ ] ) { int min ; for ( int i = 0 ; i < arr . length ; i ++ ) for ( int j = 0 ; j < arr . length ; j ++ ) if ( arr [ i ] [ j ] == 0 ) arr [ i ] [ j ] = Integer . MAX_VALUE ; for ( int i = 0 ; i < arr . length ; i ++ ) { min = minFn ( arr [ i ] ) ; for ( int j = 0 ; j < arr . length ; j ++ ) { if ( ( arr [ i ] [ j ] != min ) || ( arr [ i ] [ j ] == Integer . MAX_VALUE ) ) arr [ i ] [ j ] = 0 ; else min = 0 ; } } for ( int i = 0 ; i < arr . length ; i ++ ) { for ( int j = 0 ; j < arr . length ; j ++ ) System . out . print ( arr [ i ] [ j ] + \" ▁ \" ) ; System . out . print ( \" \\n \" ) ; } } public static void main ( String [ ] args ) { int arr [ ] [ ] = { { 1 , 2 , 4 , 0 } , { 0 , 0 , 0 , 5 } , { 0 , 2 , 0 , 3 } , { 0 , 0 , 0 , 0 } } ; minimizeGraph ( arr ) ; } }"],"bleu":0.694632491894573,"rouge_l":0.8429683541388364}
{"id":1520,"predictions":["import java . util . Arrays ; class GFG { static int getNumToAdd ( int arr [ ] , int n ) { Arrays . sort ( arr ) ; int d = arr [ 1 ] - arr [ 0 ] ; int numToAdd = - 1 ; boolean numToRemove = false ; for ( int i = 2 ; i < n ; i ++ ) { int diff = arr [ i ] - arr [ i - 1 ] ; if ( diff != d ) { if ( numAdded ) return - 1 ; if ( diff == 2 * d ) { numToAdd = arr [ i ] - d ; numAdded = true ; } else return - 1 ; } } if ( numToAdd == - 1 ) return ( arr [ n - 1 ] + d ) ; return numToAdd ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 3 , 5 , 7 , 11 , 13 , 15 } ; int n = arr . length ; System . out . println ( getNumToAdd ( arr , n ) ) ; } }"],"references":["import java . util . * ; public class GFG { static int getNumToAdd ( int arr [ ] , int n ) { Arrays . sort ( arr ) ; int d = arr [ 1 ] - arr [ 0 ] ; int numToAdd = - 1 ; boolean numAdded = false ; for ( int i = 2 ; i < n ; i ++ ) { int diff = arr [ i ] - arr [ i - 1 ] ; if ( diff != d ) { if ( numAdded ) return - 1 ; if ( diff == 2 * d ) { numToAdd = arr [ i ] - d ; numAdded = true ; } else return - 1 ; } } if ( numToAdd == - 1 ) return ( arr [ n - 1 ] + d ) ; return numToAdd ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 3 , 5 , 7 , 11 , 13 , 15 } ; int n = arr . length ; System . out . println ( getNumToAdd ( arr , n ) ) ; } }"],"bleu":0.9673200796462407,"rouge_l":0.9875227039406144}
{"id":1521,"predictions":["import java . lang . * ; class GFG { static double PI = 3.14159265 ; static double findAngles ( int a , int b , int c ) { double A = acos . acos ( ( b * b + c * a ) \/ ( 2 * b * c ) ) ; return ( A * 180 \/ PI ) ; } static double findAngles ( int a , int b , int c ) { double B = acos ( a * b + c * c - b * c ) \/ ( 2 * a * c ) ; return B * 180 \/ PI ; } static void printAngles ( int a , int b , int c ) { double x = a ; double y = b , z = c ; double A = findAngles ( x , y , z ) ; B = findAnglesB ( x , y , z ) ; System . out . println ( \" Angles ▁ are ▁ A ▁ = ▁ \" + A + \" , ▁ B ▁ = ▁ \" + B + \" , ▁ C ▁ = ▁ \" + c ) ; } static void printAngles ( int n ) { if ( ( n == 1 ) { if ( n == 1 ) System . out . print ( \" - 1\" ) ; else { b = ( n * n \/ 4 - 1 ) \/ 2 ; c = ( n * n + 1 ) \/ 2 ; System . out . print ( \" side ▁ are ▁ = ▁ \" + b + \" , ▁ C ▁ = ▁ \" + c ) ; } } else { if ( n == 2 ) System . out . print ( \" - 1\" ) ; else { b = n * n \/ 4 - 1 ; c = n * n \/ 4 + 1 ; System . out . print ( \" side ▁ = ▁ \" + b + \" ▁ side ▁ = ▁ \" + c ) ; } } public static void main ( String [ ] args ) { int n = 2 ; int b = 3 ; printAngles ( n , b , c ) ; } }"],"references":["import java . io . * ; class GFG { static double PI = 3.1415926535 ; static double findAnglesA ( double a , double b , double c ) { double A = Math . acos ( ( b * b + c * c - a * a ) \/ ( 2 * b * c ) ) ; return A * 180 \/ PI ; } static double findAnglesB ( double a , double b , double c ) { double B = Math . acos ( ( a * a + c * c - b * b ) \/ ( 2 * a * c ) ) ; return B * 180 \/ PI ; } static void printAngles ( int a , int b , int c ) { double x = ( double ) a ; double y = ( double ) b ; double z = ( double ) c ; double A = findAnglesA ( x , y , z ) ; double B = findAnglesB ( x , y , z ) ; System . out . println ( \" Angles ▁ are ▁ A ▁ = ▁ \" + A + \" , ▁ B ▁ = ▁ \" + B + \" , ▁ C ▁ = ▁ \" + 90 ) ; } static void printOtherSides ( int n ) { int b = 0 , c = 0 ; if ( ( n & 1 ) > 0 ) { if ( n == 1 ) System . out . println ( - 1 ) ; else { b = ( n * n - 1 ) \/ 2 ; c = ( n * n + 1 ) \/ 2 ; System . out . println ( \" Side ▁ b ▁ = ▁ \" + b + \" , ▁ Side ▁ c ▁ = ▁ \" + c ) ; } } else { if ( n == 2 ) System . out . println ( - 1 ) ; else { b = n * n \/ 4 - 1 ; c = n * n \/ 4 + 1 ; System . out . println ( \" Side ▁ b ▁ = ▁ \" + b + \" , ▁ Side ▁ c ▁ = ▁ \" + c ) ; } } printAngles ( n , b , c ) ; } public static void main ( String [ ] args ) { int a = 12 ; printOtherSides ( a ) ; } }"],"bleu":0.6903683800525099,"rouge_l":0.8395259074427853}
{"id":1522,"predictions":["import java . util . * ; class Geeks { static int MaximumHeight ( int a [ ] , int n ) { return ( int ) ( - 1 + ( int ) ( Math . sqrt ( 1 + ( 8 * n ) ) ) \/ 2 ; } static public void main ( String [ ] args ) { int arr [ ] = { 40 , 100 , 20 , 30 } ; int n = arr . length ; System . out . println ( MaximumHeight ( arr , n ) ) ; } }"],"references":["import java . lang . * ; class GFG { static int MaximumHeight ( int a [ ] , int n ) { return ( int ) Math . floor ( ( - 1 + Math . sqrt ( 1 + ( 8 * n ) ) ) \/ 2 ) ; } public static void main ( String [ ] args ) { int arr [ ] = new int [ ] { 40 , 100 , 20 , 30 } ; int n = arr . length ; System . out . println ( MaximumHeight ( arr , n ) ) ; } }"],"bleu":0.7847525533709082,"rouge_l":0.9042737738527048}
{"id":1523,"predictions":["import java . util . * ; class GFG { static int firstElement ( int arr [ ] , int n , int k ) { HashMap < Integer , Integer > count_map = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( count_map . containsKey ( arr [ i ] ) ) count_map . put ( arr [ i ] , count_map . get ( arr [ i ] ) + 1 ) ; else count_map . put ( arr [ i ] , 1 ) ; } for ( int i = 0 ; i < n ; i ++ ) if ( count_map . containsKey ( arr [ i ] ) ) return arr [ i ] ; return - 1 ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 7 , 4 , 3 , 4 , 8 , 7 } ; int n = arr . length ; int k = 2 ; System . out . print ( firstElement ( arr , n , k ) ) ; } }"],"references":["import java . util . HashMap ; class GFG { static int firstElement ( int arr [ ] , int n , int k ) { HashMap < Integer , Integer > count_map = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int a = 0 ; if ( count_map . get ( arr [ i ] ) != null ) { a = count_map . get ( arr [ i ] ) ; } count_map . put ( arr [ i ] , a + 1 ) ; } for ( int i = 0 ; i < n ; i ++ ) { if ( count_map . get ( arr [ i ] ) == k ) { return arr [ i ] ; } } return - 1 ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 7 , 4 , 3 , 4 , 8 , 7 } ; int n = arr . length ; int k = 2 ; System . out . println ( firstElement ( arr , n , k ) ) ; } }"],"bleu":0.8101250745339387,"rouge_l":0.9005476625128979}
{"id":1524,"predictions":["import java . util . * ; class GFG { static int calculate ( int a [ ] , int n ) { int ans = 0 ; int i = 0 ; while ( i < n ) { int r = i + 1 ; for ( int j = r ; j < n ; j ++ ) { if ( a [ i ] == a [ j ] ) r ++ ; else break ; } int d = r - i ; ans = ans + ( d * ( d + 1 ) \/ 2 ) ; i = r - 1 ; i ++ ; } return ans ; } public static void main ( String [ ] args ) { int a [ ] = { 2 , 4 , 5 , 3 , 3 } ; int n = a . length ; System . out . print ( calculate ( a , n ) ) ; } }"],"references":["class Subarray { static int calculate ( int a [ ] , int n ) { int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int r = i + 1 ; for ( int j = r ; j < n ; j ++ ) { if ( a [ i ] == a [ j ] ) r += 1 ; else break ; } int d = r - i ; ans += ( d * ( d + 1 ) \/ 2 ) ; i = r - 1 ; } return ans ; } public static void main ( String [ ] args ) { int a [ ] = { 2 , 4 , 5 , 3 , 3 , 3 } ; System . out . println ( calculate ( a , a . length ) ) ; } }"],"bleu":0.7852952716010843,"rouge_l":0.8799556138404118}
{"id":1525,"predictions":["import java . util . * ; import java . lang . * ; class GFG { public static int nth_group ( int n ) { return n * ( 2 * ( int ) Math . pow ( n , 2 ) + 1 ) ; } public static void main ( String [ ] args ) { int N = 5 ; System . out . print ( nth_group ( N ) ) ; } }"],"references":["import java . util . * ; class GFG { static int nth_group ( int n ) { return n * ( 2 * ( int ) Math . pow ( n , 2 ) + 1 ) ; } public static void main ( String arr [ ] ) { int N = 5 ; System . out . println ( nth_group ( N ) ) ; } }"],"bleu":0.7939706318207351,"rouge_l":0.9279642058165548}
{"id":1526,"predictions":["class GFG { static class pair { int str , index ; int index ; } static void createDup ( String str [ ] , int size ) { ArrayList list = new ArrayList < > ( ) ; for ( int i = 0 ; i < size ; i ++ ) { int tmpArray [ i ] = new ArrayList ( ) ; for ( int i = 0 ; i < size ; i ++ ) { countArray . add ( str [ i ] ) ; } } return list ; } static void printAnagrams ( String wordArr , int size ) { ArrayList < String > dup = new ArrayList < > ( ) ; for ( int i = 0 ; i < size ; i ++ ) { dup . add ( new String ( str [ i ] ) ; } for ( int i = 0 ; i < size ; i ++ ) { dupArray . add ( new String ( word [ i ] ) ) ; } for ( int i = 0 ; i < size ; i ++ ) { dupArray . add ( new String ( i ) ) ; } for ( int i = 0 ; i < size ; i ++ ) System . out . print ( dupArr . get ( i ) + \" ▁ \" ) ; } public static void main ( String [ ] args ) { String wordArr [ ] = { \" cat \" , \" dog \" , \" Tak \" } ; int size = wordArr . length ; printArr ( wordArr , size ) ; } }"],"references":["import java . util . Arrays ; import java . util . Comparator ; public class GFG { static class Word { String str ; int index ; Word ( String str , int index ) { this . str = str ; this . index = index ; } } static class DupArray { Word [ ] array ; int size ; public DupArray ( String str [ ] , int size ) { this . size = size ; array = new Word [ size ] ; int i ; for ( i = 0 ; i < size ; ++ i ) { array [ i ] = new Word ( str [ i ] , i ) ; } } } static class compStr implements Comparator < Word > { public int compare ( Word a , Word b ) { return a . str . compareTo ( b . str ) ; } } static void printAnagramsTogether ( String wordArr [ ] , int size ) { DupArray dupArray = new DupArray ( wordArr , size ) ; int i ; for ( i = 0 ; i < size ; ++ i ) { char [ ] char_arr = dupArray . array [ i ] . str . toCharArray ( ) ; Arrays . sort ( char_arr ) ; dupArray . array [ i ] . str = new String ( char_arr ) ; } Arrays . sort ( dupArray . array , new compStr ( ) ) ; for ( i = 0 ; i < size ; ++ i ) System . out . print ( wordArr [ dupArray . array [ i ] . index ] + \" ▁ \" ) ; } public static void main ( String args [ ] ) { String wordArr [ ] = { \" cat \" , \" dog \" , \" tac \" , \" god \" , \" act \" } ; int size = wordArr . length ; printAnagramsTogether ( wordArr , size ) ; } }"],"bleu":0.36108057066941557,"rouge_l":0.5638629283489097}
{"id":1527,"predictions":["import java . util . * ; class GFG { static int partition ( int arr [ ] , int si , int ei ) { int i = arr [ ei ] ; int i = ( si - 1 ) \/ 2 ; for ( int j = si ; j < ei ; j ++ ) { if ( arr [ j ] <= x ) { int temp = arr [ i ] ; arr [ i ] = arr [ j ] ; arr [ i ] = arr [ ei ] ; arr [ j ] = temp ; } } swap ( i + 1 , ei ) ; return ( i + 1 ) ; } static void quickSort ( int arr [ ] , int n ) { int pi = 0 ; if ( si < ei ) { int pi = partition ( arr , si , ei ) ; quickSort ( arr , pi , pi - 1 ) ; quickSort ( arr , pi + 1 , ei ) ; } static void quickSort ( int [ ] arr , int n ) { int pi = 0 , min_sum = Integer . MAX_VALUE ; int l = 0 , min_l = n - 1 , min_r = n - 1 ; if ( n < 2 ) { System . out . print ( \" Invalid ▁ Input \" ) ; return ; } swap ( arr , l , r ) ; while ( l < r ) { int sum = arr [ l ] + arr [ r ] ; if ( Math . abs ( sum ) < Math . abs ( min_sum ) ) { min_sum = sum ; min_l = l ; min_l = l ; } if ( sum < 0 ) l ++ ; else r -- ; } System . out . println ( \" The ▁ two ▁ elements ▁ are ▁ : ▁ \" + arr [ min_l ] ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 60 , - 10 , - 10 } ; int arr [ ] = { 1 , 60 , - 10 , 2 } ; int n = arr . length ; System . out . println ( \" The ▁ two ▁ elements ▁ of ▁ \" + arr , n ) ) ; } }"],"references":["import java . util . * ; import java . lang . * ; class Main { static void minAbsSumPair ( int arr [ ] , int n ) { int sum , min_sum = 999999 ; int l = 0 , r = n - 1 ; int min_l = l , min_r = n - 1 ; if ( n < 2 ) { System . out . println ( \" Invalid ▁ Input \" ) ; return ; } sort ( arr , l , r ) ; while ( l < r ) { sum = arr [ l ] + arr [ r ] ; if ( Math . abs ( sum ) < Math . abs ( min_sum ) ) { min_sum = sum ; min_l = l ; min_r = r ; } if ( sum < 0 ) l ++ ; else r -- ; } System . out . println ( \" ▁ The ▁ two ▁ elements ▁ whose ▁ \" + \" sum ▁ is ▁ minimum ▁ are ▁ \" + arr [ min_l ] + \" ▁ and ▁ \" + arr [ min_r ] ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 60 , - 10 , 70 , - 80 , 85 } ; int n = arr . length ; minAbsSumPair ( arr , n ) ; } static int partition ( int arr [ ] , int low , int high ) { int pivot = arr [ high ] ; int i = ( low - 1 ) ; for ( int j = low ; j < high ; j ++ ) { if ( arr [ j ] <= pivot ) { i ++ ; int temp = arr [ i ] ; arr [ i ] = arr [ j ] ; arr [ j ] = temp ; } } int temp = arr [ i + 1 ] ; arr [ i + 1 ] = arr [ high ] ; arr [ high ] = temp ; return i + 1 ; } static void sort ( int arr [ ] , int low , int high ) { if ( low < high ) { int pi = partition ( arr , low , high ) ; sort ( arr , low , pi - 1 ) ; sort ( arr , pi + 1 , high ) ; } } }"],"bleu":0.6562065649262372,"rouge_l":0.4792840443064658}
{"id":1528,"predictions":["import java . util . * ; class GFG { static void countFreq ( int arr [ ] , int n ) { HashMap < Integer , Integer > mp = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( mp . containsKey ( arr [ i ] ) ) { mp . put ( arr [ i ] , mp . get ( arr [ i ] ) + 1 ) ; } else { mp . put ( arr [ i ] , 1 ) ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( mp . get ( arr [ i ] ) != - 1 ) { System . out . println ( arr [ i ] + \" ▁ \" + mp . get ( arr [ i ] ) ) ; } else { mp . put ( arr [ i ] , - 1 ) ; } } } public static void main ( String args [ ] ) { int arr [ ] = { 10 , 20 , 20 , 10 , 20 } ; int n = arr . length ; countFreq ( arr , n ) ; } }"],"references":["import java . util . * ; class GFG { static void countFreq ( int arr [ ] , int n ) { Map < Integer , Integer > mp = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { mp . put ( arr [ i ] , mp . get ( arr [ i ] ) == null ? 1 : mp . get ( arr [ i ] ) + 1 ) ; } for ( int i = 0 ; i < n ; i ++ ) { if ( mp . get ( arr [ i ] ) != - 1 ) { System . out . println ( arr [ i ] + \" ▁ \" + mp . get ( arr [ i ] ) ) ; mp . put ( arr [ i ] , - 1 ) ; } } } public static void main ( String [ ] args ) { int arr [ ] = { 10 , 20 , 20 , 10 , 10 , 20 , 5 , 20 } ; int n = arr . length ; countFreq ( arr , n ) ; } }"],"bleu":0.8430214514043717,"rouge_l":0.908598510494245}
{"id":1529,"predictions":["import java . util . * ; class GFG { static boolean isPerfectSquare ( int x ) { double sr = Math . sqrt ( x ) ; return ( ( sr - floor ( sr ) ) == 0 ) ; } static boolean isFibonacci ( int n ) { return ( isPerfectSquare ( 5 * n * n + 4 ) == 0 ; } static int isFibonacci ( int n ) { return ( isPerfectSquare ( 5 * n * n + 4 ) || isPerfectSquare ( 5 * n * n - 4 ) ) ; } static int totalPairs ( int a [ ] , int b [ ] , int n , int m ) { HashSet < Integer > s = new HashSet < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( isFibonacci ( a [ i ] + b [ j ] ) ) { if ( a [ i ] < b [ j ] ) s . add ( new Pair ( a [ i ] , b [ j ] ) ) ; } else s . add ( new Pair ( b [ j ] , a [ i ] ) ) ; } } return s . size ( ) ; } public static void main ( String [ ] args ) { int a [ ] = { 99 , 1 , 33 , 2 } ; int b [ ] = { 1 , 11 , 2 } ; int n = a . length ; int m = b . length ; System . out . print ( totalPairs ( a , b , n , m ) ) ; } }"],"references":["import java . util . * ; class GFG { static class pair { int first , second ; public pair ( int first , int second ) { this . first = first ; this . second = second ; } } static boolean isPerfectSquare ( double x ) { double sr = Math . sqrt ( x ) ; return ( ( sr - Math . floor ( sr ) ) == 0 ) ; } static boolean isFibonacci ( int n ) { return isPerfectSquare ( 5 * n * n + 4 ) || isPerfectSquare ( 5 * n * n - 4 ) ; } static int totalPairs ( int a [ ] , int b [ ] , int n , int m ) { List < pair > s = new LinkedList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( isFibonacci ( a [ i ] + b [ j ] ) == true ) { if ( a [ i ] < b [ j ] ) { if ( checkDuplicate ( s , new pair ( a [ i ] , b [ j ] ) ) ) s . add ( new pair ( a [ i ] , b [ j ] ) ) ; } else { if ( checkDuplicate ( s , new pair ( b [ j ] , a [ i ] ) ) ) s . add ( new pair ( b [ j ] , a [ i ] ) ) ; } } } } return s . size ( ) ; } static boolean checkDuplicate ( List < pair > pairList , pair newPair ) { for ( pair p : pairList ) { if ( p . first == newPair . first && p . second == newPair . second ) return false ; } return true ; } public static void main ( String [ ] args ) { int a [ ] = { 99 , 1 , 33 , 2 } ; int b [ ] = { 1 , 11 , 2 } ; int n = a . length ; int m = b . length ; System . out . println ( totalPairs ( a , b , n , m ) ) ; } }"],"bleu":0.6119526504578011,"rouge_l":0.7479311988215415}
{"id":1530,"predictions":["import java . io . * ; class GFG { static int countSolutions ( int n ) { int res = 0 ; for ( int x = 0 ; x * x < n ; x ++ ) { int y = 0 ; while ( x * x + y * y < n ) res ++ ; y ++ ; } return res ; } public static void main ( String args [ ] ) { System . out . println ( \" Total ▁ Number ▁ of ▁ distinct ▁ Non - Negative ▁ pairs ▁ is ▁ \" + countSolutions ( 6 ) ) ; } }"],"references":["import java . io . * ; class GFG { static int countSolutions ( int n ) { int res = 0 ; for ( int x = 0 ; x * x < n ; x ++ ) for ( int y = 0 ; x * x + y * y < n ; y ++ ) res ++ ; return res ; } public static void main ( String args [ ] ) { System . out . println ( \" Total ▁ Number ▁ of ▁ distinct ▁ Non - Negative ▁ pairs ▁ is ▁ \" + countSolutions ( 6 ) ) ; } }"],"bleu":0.8969282988439087,"rouge_l":0.9474852071005917}
{"id":1531,"predictions":["class GFG { static int findLength ( String str , int n ) { int total [ ] = new int [ n + 1 ] ; total [ 0 ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) total [ i ] = ( total [ i - 1 ] + str . charAt ( i - 1 ) - '0' ) ; int ans = 0 ; int l = 2 ; while ( l <= n ) { for ( int i = 0 ; i <= n - l + 1 ; i ++ ) { int j = i + l - 1 ; if ( total [ i + l \/ 2 ] == total [ i + l ] - total [ i + l ] ) ans = Math . max ( ans , l ) ; } l ++ ; } return ans ; } public static void main ( String [ ] args ) { String str = \"123123123\" ; System . out . println ( \" Length ▁ of ▁ the ▁ substring ▁ is ▁ \" + findLength ( str , str . length ( ) ) ; } }"],"references":["class GFG { static int findLength ( String str , int n ) { int ans = 0 ; for ( int i = 0 ; i <= n - 2 ; i ++ ) { int l = i , r = i + 1 ; int lsum = 0 , rsum = 0 ; while ( r < n && l >= 0 ) { lsum += str . charAt ( l ) - '0' ; rsum += str . charAt ( r ) - '0' ; if ( lsum == rsum ) { ans = Math . max ( ans , r - l + 1 ) ; } l -- ; r ++ ; } } return ans ; } static public void main ( String [ ] args ) { String str = \"123123\" ; System . out . println ( \" Length ▁ of ▁ the ▁ substring ▁ is ▁ \" + findLength ( str , str . length ( ) ) ) ; } }"],"bleu":0.5076555756764115,"rouge_l":0.6522646266191429}
{"id":1532,"predictions":["class GFG { static int min ( int x , int y ) { return ( x < y ) ? x : y ; } static int max ( int x , int y ) { return ( x > y ) ? x : y ; } static int findLength ( int [ ] arr , int n ) { int max_len = 1 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { int mn = arr [ i ] ; int mx = arr [ i ] ; for ( int j = i + 1 ; j < n ; j ++ ) { mn = Math . min ( mn , arr [ j ] ) ; mx = Math . max ( mx , arr [ j ] ) ; if ( ( mx - mn ) == j - i ) max_len = Math . max ( max_len , mx - mn + 1 ) ; } } return max_len ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 56 , 58 , 57 , 90 , 92 , 9 } ; int n = arr . length ; System . out . println ( \" Length ▁ of ▁ the ▁ longest ▁ subarray ▁ is ▁ \" + findLength ( arr , n ) ) ; } }"],"references":["class LargestSubArray2 { int min ( int x , int y ) { return ( x < y ) ? x : y ; } int max ( int x , int y ) { return ( x > y ) ? x : y ; } int findLength ( int arr [ ] , int n ) { int max_len = 1 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { int mn = arr [ i ] , mx = arr [ i ] ; for ( int j = i + 1 ; j < n ; j ++ ) { mn = min ( mn , arr [ j ] ) ; mx = max ( mx , arr [ j ] ) ; if ( ( mx - mn ) == j - i ) max_len = max ( max_len , mx - mn + 1 ) ; } } return max_len ; } public static void main ( String [ ] args ) { LargestSubArray2 large = new LargestSubArray2 ( ) ; int arr [ ] = { 1 , 56 , 58 , 57 , 90 , 92 , 94 , 93 , 91 , 45 } ; int n = arr . length ; System . out . println ( \" Length ▁ of ▁ the ▁ longest ▁ contiguous ▁ subarray ▁ is ▁ \" + large . findLength ( arr , n ) ) ; } }"],"bleu":0.8437621412259683,"rouge_l":0.9259211209133369}
{"id":1533,"predictions":["import java . io . * ; class GFG { static void findCombinationsUtil ( int arr [ ] , int index , int reduceNum ) { if ( reduceNum < 0 ) return ; if ( reducedNum == 0 ) { for ( int i = 0 ; i < index ; i ++ ) System . out . print ( arr [ i ] + \" ▁ \" ) ; System . out . println ( \" \" ) ; return ; } int prev = ( index == 0 ) ? 1 : arr [ index - 1 ] ; for ( int k = prev ; k <= num ; k ++ ) { arr [ index ] = k ; findCombinationsUtil ( arr , index + 1 , num , reduceNum - k ) ; } } static void findCombinations ( int n ) { int arr [ ] = new int [ n ] ; findCombinationsUtil ( arr , 0 , n , n ) ; } public static void main ( String [ ] args ) { int n = 5 ; findCombinations ( n ) ; } }"],"references":["import java . io . * ; class GFG { static void findCombinationsUtil ( int arr [ ] , int index , int num , int reducedNum ) { if ( reducedNum < 0 ) return ; if ( reducedNum == 0 ) { for ( int i = 0 ; i < index ; i ++ ) System . out . print ( arr [ i ] + \" ▁ \" ) ; System . out . println ( ) ; return ; } int prev = ( index == 0 ) ? 1 : arr [ index - 1 ] ; for ( int k = prev ; k <= num ; k ++ ) { arr [ index ] = k ; findCombinationsUtil ( arr , index + 1 , num , reducedNum - k ) ; } } static void findCombinations ( int n ) { int arr [ ] = new int [ n ] ; findCombinationsUtil ( arr , 0 , n , n ) ; } public static void main ( String [ ] args ) { int n = 5 ; findCombinations ( n ) ; } }"],"bleu":0.938198657000411,"rouge_l":0.9714189925404408}
{"id":1534,"predictions":["class GFG { static int fib ( int n ) { double phi = ( 1 + Math . sqrt ( 5 ) ) \/ 2 ; return ( int ) Math . round ( Math . pow ( phi , n ) \/ Math . sqrt ( 5 ) ) ; } static int calculateSum ( int l , int r ) { int sum = fib ( r + 2 ) - fib ( l + 1 ) ; return sum ; } public static void main ( String [ ] args ) { int l = 4 ; int r = 8 ; System . out . println ( calculateSum ( l , r ) ) ; } }"],"references":["class GFG { static int fib ( int n ) { double phi = ( 1 + Math . sqrt ( 5 ) ) \/ 2 ; return ( int ) Math . round ( Math . pow ( phi , n ) \/ Math . sqrt ( 5 ) ) ; } static int calculateSum ( int l , int r ) { int sum = fib ( r + 2 ) - fib ( l + 1 ) ; return sum ; } public static void main ( String [ ] args ) { int l = 4 , r = 8 ; System . out . println ( calculateSum ( l , r ) ) ; } }"],"bleu":0.9710601203910714,"rouge_l":0.9883877936807994}
{"id":1535,"predictions":["class GFG { static void MinimumValue ( int x , int y ) { if ( x > y ) return ; x = y ; y = x - 1 ; int c = y - b ; System . out . println ( a + \" ▁ \" + b + \" ▁ \" + c ) ; } public static void main ( String [ ] args ) { int x = 123 , y = 13 ; MinimumValue ( x , y ) ; } }"],"references":["import java . io . * ; class GFG { static void MinimumValue ( int x , int y ) { if ( x > y ) { int temp = x ; x = y ; y = temp ; } int a = 1 ; int b = x - 1 ; int c = y - b ; System . out . print ( a + \" ▁ \" + b + \" ▁ \" + c ) ; } public static void main ( String [ ] args ) { int x = 123 , y = 13 ; MinimumValue ( x , y ) ; } }"],"bleu":0.7319799912707902,"rouge_l":0.8545049347341611}
{"id":1536,"predictions":["import java . io . * ; public class GFG { static int maximumChars ( String str ) { int n = str . length ( ) ; int res = - 1 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { if ( str . charAt ( i ) == str . charAt ( j ) ) res = Math . max ( res , Math . abs ( j - i - 1 ) ) ; } } return res ; } static public void main ( String [ ] args ) { String str = \" abba \" ; System . out . println ( maximumChars ( str ) ) ; } }"],"references":["class GFG { static int maximumChars ( String str ) { int n = str . length ( ) ; int res = - 1 ; for ( int i = 0 ; i < n - 1 ; i ++ ) for ( int j = i + 1 ; j < n ; j ++ ) if ( str . charAt ( i ) == str . charAt ( j ) ) res = Math . max ( res , Math . abs ( j - i - 1 ) ) ; return res ; } public static void main ( String [ ] args ) { String str = \" abba \" ; System . out . println ( maximumChars ( str ) ) ; } }"],"bleu":0.8610796306155172,"rouge_l":0.9561360874848116}
{"id":1537,"predictions":["class GFG { static int printTribRec ( int n ) { if ( n == 0 || n == 1 || n == 2 ) return 0 ; else return ( n == 3 ) ; } static void printTrib ( int n ) { for ( int i = 1 ; i < n ; i ++ ) System . out . print ( printTribRec ( n - 1 ) + printTribRec ( n - 2 ) ; } public static void main ( String args [ ] ) { int n = 10 ; printTrib ( n ) ; } }"],"references":["import java . io . * ; class GFG { static int printTribRec ( int n ) { if ( n == 0 || n == 1 || n == 2 ) return 0 ; if ( n == 3 ) return 1 ; else return printTribRec ( n - 1 ) + printTribRec ( n - 2 ) + printTribRec ( n - 3 ) ; } static void printTrib ( int n ) { for ( int i = 1 ; i < n ; i ++ ) System . out . print ( printTribRec ( i ) + \" ▁ \" ) ; } public static void main ( String args [ ] ) { int n = 10 ; printTrib ( n ) ; } }"],"bleu":0.7423686809147065,"rouge_l":0.7903514817367333}
{"id":1538,"predictions":["class GFG { static int steps ( int N , int M ) { if ( N == 1 ) return 0 ; else if ( N == 2 ) return M ; return 2 * M + ( N - 3 ) ; } public static void main ( String [ ] args ) { int N = 4 , M = 4 ; System . out . println ( steps ( N , M ) ) ; } }"],"references":["import java . io . * ; class GFG { static int steps ( int N , int M ) { if ( N == 1 ) return 0 ; else if ( N == 2 ) return M ; return 2 * M + ( N - 3 ) ; } public static void main ( String [ ] args ) { int N = 4 , M = 4 ; System . out . print ( steps ( N , M ) ) ; } }"],"bleu":0.8884447296126,"rouge_l":0.9397265549778547}
{"id":1539,"predictions":["class GFG { static int waysToKAdjacentSetBits ( int n , int k , int currentIndex , int nextBit ) { if ( currentIndex == n ) { if ( currentSetBits == k ) return 1 ; return 0 ; } int noOfWays = 0 ; if ( lastBit == 1 ) { noOfWays += waysToKAdjacentSetBits ( n , k + 1 , 1 ) ; noOfWays += waysToKAdBits ( n , k , currentIndex + 1 , 0 ) ; } else if ( lastBit != 1 ) noOfWays += waysToKAdjacentSetBitsSetBits += waysToKAdjacentSetBits ( n , k , currentIndex + 1 , anteriorSetBits , 0 ) ; else if ( lastBit != 1 ) { noOfWays += waysToKAdjacentSetBits ( n , k , currentIndex + 1 , currentSetBits , 0 ) ; noOfWays += waysToKAdjacentSetBits ; noOfWays ( n , k , 1 , 0 ) ; } return noOfWays ; } public static void main ( String [ ] args ) { int n = 5 , k = 2 ; int totalWays = waysToKAdjacentSetBits ( n , k , 1 , 0 , 0 ) ; System . out . println ( \" Number ▁ of ▁ ways ▁ = ▁ \" + totalWays ) ; } }"],"references":["import java . util . * ; class solution { static int waysToKAdjacentSetBits ( int n , int k , int currentIndex , int adjacentSetBits , int lastBit ) { if ( currentIndex == n ) { if ( adjacentSetBits == k ) return 1 ; return 0 ; } int noOfWays = 0 ; if ( lastBit == 1 ) { noOfWays += waysToKAdjacentSetBits ( n , k , currentIndex + 1 , adjacentSetBits + 1 , 1 ) ; noOfWays += waysToKAdjacentSetBits ( n , k , currentIndex + 1 , adjacentSetBits , 0 ) ; } else if ( lastBit == 0 ) { noOfWays += waysToKAdjacentSetBits ( n , k , currentIndex + 1 , adjacentSetBits , 1 ) ; noOfWays += waysToKAdjacentSetBits ( n , k , currentIndex + 1 , adjacentSetBits , 0 ) ; } return noOfWays ; } public static void main ( String args [ ] ) { int n = 5 , k = 2 ; int totalWays = waysToKAdjacentSetBits ( n , k , 1 , 0 , 1 ) + waysToKAdjacentSetBits ( n , k , 1 , 0 , 0 ) ; System . out . println ( \" Number ▁ of ▁ ways ▁ = ▁ \" + totalWays ) ; } }"],"bleu":0.7775146722365539,"rouge_l":0.821926198131986}
{"id":1540,"predictions":["import java . util . * ; class GFG { static boolean canPlace ( int a [ ] , int n , int p , int val ) { int current_cells = 1 ; int last_cell = a [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { current_Cell = a [ i ] ; if ( current_Cell - last_pot >= p ) { beg_lets ++ ; last_prisoner = current_cells ; } } return false ; } static int maxDistance ( int [ ] cell , int n , int p ) { int i , start = 0 , end = - 1 ; int ans = 0 ; while ( start <= end ) { int mid = start + ( ( end - start ) \/ 2 ) ; if ( canPlace ( cell , n , p , mid ) ) { ans = mid ; start = mid + 1 ; } else { end = mid - 1 ; } } return ans ; } public static void main ( String [ ] args ) { int [ ] cell = { 1 , 2 , 8 , 4 , 9 } ; int n = cell . length ; int p = 3 ; System . out . print ( maxDistance ( cell , n , p ) ) ; } }"],"references":["import java . util . * ; class GFG { static boolean canPlace ( int a [ ] , int n , int p , int sep ) { int prisoners_placed = 1 ; int last_prisoner_placed = a [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { int current_cell = a [ i ] ; if ( current_cell - last_prisoner_placed >= sep ) { prisoners_placed ++ ; last_prisoner_placed = current_cell ; if ( prisoners_placed == p ) { return true ; } } } return false ; } static int maxDistance ( int cell [ ] , int n , int p ) { Arrays . sort ( cell ) ; int start = 0 ; int end = cell [ n - 1 ] - cell [ 0 ] ; int ans = 0 ; while ( start <= end ) { int mid = start + ( ( end - start ) \/ 2 ) ; if ( canPlace ( cell , n , p , mid ) ) { ans = mid ; start = mid + 1 ; } else { end = mid - 1 ; } } return ans ; } public static void main ( String [ ] args ) { int cell [ ] = { 1 , 2 , 8 , 4 , 9 } ; int n = cell . length ; int p = 3 ; System . out . println ( maxDistance ( cell , n , p ) ) ; } }"],"bleu":0.7387186704887558,"rouge_l":0.8742414460942546}
{"id":1541,"predictions":["class GFG { static boolean containsElement ( int arr [ ] , int n ) { int xorArr = 0 ; for ( int i = 0 ; i < n ; i ++ ) xorArr ^= arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) { x = xorArr ^ arr [ i ] ; if ( arr [ i ] == x ) return true ; } return false ; } public static void main ( String [ ] args ) { int arr [ ] = { 8 , 2 , 4 , 15 , 1 } ; int n = arr . length ; if ( containsElement ( arr , n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static boolean containsElement ( int [ ] arr , int n ) { int xorArr = 0 ; for ( int i = 0 ; i < n ; ++ i ) xorArr ^= arr [ i ] ; for ( int i = 0 ; i < n ; ++ i ) { int x = xorArr ^ arr [ i ] ; if ( arr [ i ] == x ) return true ; } return false ; } public static void main ( String [ ] args ) { int [ ] arr = { 8 , 2 , 4 , 15 , 1 } ; int n = arr . length ; if ( containsElement ( arr , n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.897592078469686,"rouge_l":0.969918349806618}
{"id":1542,"predictions":["import java . util . * ; class GFG { static void solve ( String s ) { Map < String , Integer > m = new HashMap < String , Integer > ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( m . containsKey ( s . charAt ( i ) ) ) { m . put ( s . charAt ( i ) , m . get ( s . charAt ( i ) ) + 1 ) ; } else { m . put ( s . charAt ( i ) , m . get ( s . charAt ( i ) ) ; } } String new String ( s ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( m . get ( s . charAt ( i ) ) % 2 == 0 ) { continue ; } new_string = new_string ( s . charAt ( i ) ) ; } System . out . println ( new_string ) ; } public static void main ( String [ ] args ) { String s = \" aabbbddee \" ; solve ( s ) ; } }"],"references":["import java . util . * ; class GFG { static void solve ( String s ) { HashMap < Character , Integer > m = new HashMap < > ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( m . containsKey ( s . charAt ( i ) ) ) m . put ( s . charAt ( i ) , m . get ( s . charAt ( i ) ) + 1 ) ; else m . put ( s . charAt ( i ) , 1 ) ; } String new_string = \" \" ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( m . get ( s . charAt ( i ) ) % 2 == 0 ) continue ; new_string = new_string + s . charAt ( i ) ; } System . out . println ( new_string ) ; } public static void main ( String [ ] args ) { String s = \" aabbbddeeecc \" ; solve ( s ) ; } }"],"bleu":0.7868969206231161,"rouge_l":0.9174015748031498}
{"id":1543,"predictions":["import java . io . * ; class GFG { static int getTotalXorOfSubarrayXors ( int arr [ ] , int N ) { int res = 0 ; for ( int i = 0 ; i < N ; i ++ ) { int freq = ( i + 1 ) * ( N - i ) ; if ( freq % 2 == 1 ) res = res ^ arr [ i ] ; } return res ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 5 , 2 , 4 , 6 } ; int N = arr . length ; System . out . println ( getTotalXorOfSubarrayXors ( arr , N ) ) ; } }"],"references":["import java . io . * ; public class GFG { static int getTotalXorOfSubarrayXors ( int arr [ ] , int N ) { int res = 0 ; for ( int i = 0 ; i < N ; i ++ ) { int freq = ( i + 1 ) * ( N - i ) ; if ( freq % 2 == 1 ) res = res ^ arr [ i ] ; } return res ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 5 , 2 , 4 , 6 } ; int N = arr . length ; System . out . println ( getTotalXorOfSubarrayXors ( arr , N ) ) ; } }"],"bleu":0.980877228133961,"rouge_l":0.9955151364146007}
{"id":1544,"predictions":["public class GFG { static int sum ( int N ) { int S1 , S2 , S3 ; S1 = ( ( N \/ 3 ) ) * ( 2 * 3 + ( N \/ 3 - 1 ) * 3 ) \/ 2 ; S2 = ( ( N \/ 4 ) ) * ( 2 * 4 + ( N \/ 12 - 1 ) * 4 ) \/ 2 ; S3 = ( ( N \/ 12 ) ) * ( 2 * 12 + ( N \/ 12 - 1 ) * 12 ) \/ 2 ; return S1 + S2 - S3 ; } public static void main ( String [ ] args ) { int N = 12 ; System . out . println ( sum ( N ) ) ; } }"],"references":["class GFG { static int sum ( int N ) { int S1 , S2 , S3 ; S1 = ( ( N \/ 3 ) ) * ( 2 * 3 + ( N \/ 3 - 1 ) * 3 ) \/ 2 ; S2 = ( ( N \/ 4 ) ) * ( 2 * 4 + ( N \/ 4 - 1 ) * 4 ) \/ 2 ; S3 = ( ( N \/ 12 ) ) * ( 2 * 12 + ( N \/ 12 - 1 ) * 12 ) \/ 2 ; return S1 + S2 - S3 ; } public static void main ( String [ ] args ) { int N = 20 ; System . out . print ( sum ( 12 ) ) ; } }"],"bleu":0.9225535175037269,"rouge_l":0.9685931115002918}
{"id":1545,"predictions":["import java . util . Arrays ; class CoinChange { static long countWays ( int S [ ] , int m , int n ) { long [ ] table = new long [ n + 1 ] ; table [ 0 ] = 1 ; for ( int i = 0 ; i < m ; i ++ ) for ( int j = S [ i ] ; j <= n ; j ++ ) table [ j ] += table [ j - S [ i ] ] ; return table [ n ] ; } public static void main ( String args [ ] ) { int arr [ ] = { 1 , 2 , 3 } ; int m = arr . length ; int n = 4 ; System . out . println ( countWays ( arr , m , n ) ) ; } }"],"references":["public static int count ( int S [ ] , int m , int n ) { int table [ ] = new int [ n + 1 ] ; table [ 0 ] = 1 ; for ( int i = 0 ; i < m ; i ++ ) for ( int j = S [ i ] ; j <= n ; j ++ ) table [ j ] += table [ j - S [ i ] ] ; return table [ n ] ; }"],"bleu":0.531377987101885,"rouge_l":0.7252653927813162}
{"id":1546,"predictions":["class GFG { static int countSolutions ( int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { count += n & 1 ; } return count ; } static public void main ( String [ ] args ) { int a = 3 ; System . out . println ( countSolutions ( a ) ) ; } }"],"references":["import java . io . * ; class GFG { static int countSolutions ( int a ) { int count = Integer . bitCount ( a ) ; count = ( int ) Math . pow ( 2 , count ) ; return count ; } public static void main ( String [ ] args ) { int a = 3 ; System . out . println ( countSolutions ( a ) ) ; } }"],"bleu":0.5557114453260333,"rouge_l":0.6992945326278659}
{"id":1547,"predictions":["class GFG { static int countNumbers ( int n ) { if ( n % 2 == 1 ) return 0 ; return ( 9 * ( int ) Math . pow ( 10 , n \/ 2 - 1 ) ) ; } public static void main ( String [ ] args ) { int n = 2 ; System . out . println ( countNumbers ( n ) ) ; } }"],"references":["class GFG { static int countNumbers ( int n ) { if ( n % 2 == 1 ) return 0 ; return ( 9 * ( int ) Math . pow ( 10 , n \/ 2 - 1 ) ) ; } public static void main ( String args [ ] ) { int n = 2 ; System . out . print ( countNumbers ( n ) ) ; } }"],"bleu":0.9164512738880026,"rouge_l":0.972972972972973}
{"id":1548,"predictions":["import java . util . Arrays ; import java . io . * ; class GFG { static int getMinDiff ( int arr [ ] , int n , int k ) { Arrays . sort ( arr ) ; int ans = arr [ n - 1 ] - arr [ 0 ] ; int small = arr [ n - 1 ] - k ; int big = arr [ n - 1 ] - k ; if ( small > big ) { small = big ; } int small = arr [ 0 ] - arr [ 0 ] ; for ( int i = 1 ; i < n - 1 ; i ++ ) { int subtract = arr [ i ] - k ; int sum = arr [ i ] + k ; if ( subtract >= small ) { bigger = subtract ; } if ( bigger - subtract <= add - small ) { small = subtract ; } else big = sum ; } return Math . min ( ans , big - small ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 4 , 6 } ; int n = arr . length ; int k = 10 ; System . out . println ( \" Maximum ▁ difference ▁ is ▁ \" + getMinDiff ( arr , n , k ) ) ; } }"],"references":["import java . util . * ; class GFG { static int getMinDiff ( int arr [ ] , int n , int k ) { if ( n == 1 ) return 0 ; Arrays . sort ( arr ) ; int ans = arr [ n - 1 ] - arr [ 0 ] ; int small = arr [ 0 ] + k ; int big = arr [ n - 1 ] - k ; int temp = 0 ; if ( small > big ) { temp = small ; small = big ; big = temp ; } for ( int i = 1 ; i < n - 1 ; i ++ ) { int subtract = arr [ i ] - k ; int add = arr [ i ] + k ; if ( subtract >= small || add <= big ) continue ; if ( big - subtract <= add - small ) small = subtract ; else big = add ; } return Math . min ( ans , big - small ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 4 , 6 } ; int n = arr . length ; int k = 10 ; System . out . println ( \" Maximum ▁ difference ▁ is ▁ \" + getMinDiff ( arr , n , k ) ) ; } }"],"bleu":0.8007820178219518,"rouge_l":0.871601508235761}
{"id":1549,"predictions":["import java . util . * ; class GFG { static int minimumChanges ( int n , int a [ ] ) { int [ ] sf = new int [ n + 1 ] ; sf [ n ] = 0 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { sf [ i ] = sf [ i + 1 ] ; if ( a [ i ] <= 0 ) sf [ i ] ++ ; } int pos = 0 , mn = n ; for ( int i = 0 ; i < n - 1 ; ++ i ) { if ( a [ i ] >= 0 ) pos ++ ; mn = Math . min ( mn , pos + sf [ i + 1 ] ) ; } return mn ; } public static void main ( String args [ ] ) { int a [ ] = { - 1 , - 2 , - 3 , 3 , - 5 , 3 , 4 } ; int n = a . length ; System . out . println ( minimumChanges ( n , a ) ) ; } }"],"references":["import java . io . * ; class GFG { static int minimumChanges ( int n , int a [ ] ) { int i ; int [ ] sf = new int [ n + 1 ] ; sf [ n ] = 0 ; for ( i = n - 1 ; i >= 0 ; i -- ) { sf [ i ] = sf [ i + 1 ] ; if ( a [ i ] <= 0 ) sf [ i ] ++ ; } int pos = 0 ; int mn = n ; for ( i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] >= 0 ) pos ++ ; mn = Math . min ( mn , pos + sf [ i + 1 ] ) ; } return mn ; } public static void main ( String [ ] args ) { int [ ] a = { - 1 , - 2 , - 3 , 3 , - 5 , 3 , 4 } ; int n = a . length ; System . out . println ( minimumChanges ( n , a ) ) ; } }"],"bleu":0.8965228392160621,"rouge_l":0.9608934169278995}
{"id":1550,"predictions":["import java . util . * ; class RepeatElement { void printFirstRepeating ( int arr [ ] , int n ) { int Min = - 1 ; HashSet < Integer > set = new HashSet < > ( ) ; for ( int i = n - 1 ; i >= 0 ; i -- ) { set . add ( arr [ i ] ) ; } else { set . add ( arr [ i ] ) ; } } if ( Min != - 1 ) { System . out . println ( \" The ▁ first ▁ element ▁ element ▁ is ▁ \" + arr [ Min ] ) ; } else { System . out . println ( \" There ▁ are ▁ no ▁ repeating ▁ elements \" ) ; } } public static void main ( String [ ] args ) { int arr [ ] = { 10 , 5 , 3 , 4 , 3 , 5 , 6 } ; int n = arr . length ; printFirstRepeating ( arr , n ) ; } }"],"references":["import java . util . * ; class Main { static void printFirstRepeating ( int arr [ ] ) { int min = - 1 ; HashSet < Integer > set = new HashSet < > ( ) ; for ( int i = arr . length - 1 ; i >= 0 ; i -- ) { if ( set . contains ( arr [ i ] ) ) min = i ; else set . add ( arr [ i ] ) ; } if ( min != - 1 ) System . out . println ( \" The ▁ first ▁ repeating ▁ element ▁ is ▁ \" + arr [ min ] ) ; else System . out . println ( \" There ▁ are ▁ no ▁ repeating ▁ elements \" ) ; } public static void main ( String [ ] args ) throws java . lang . Exception { int arr [ ] = { 10 , 5 , 3 , 4 , 3 , 5 , 6 } ; printFirstRepeating ( arr ) ; } }"],"bleu":0.7272195810190976,"rouge_l":0.8726598375132463}
{"id":1551,"predictions":["class GFG { static int solveEven ( int n , int arr [ ] , int b [ ] ) { int left = n - 1 ; for ( int i = 0 ; i < ( n \/ 2 ) ; i ++ ) { b [ i ] = arr [ left ] ; left = left - 2 ; if ( left < 0 ) break ; } int right = 0 ; for ( int i = n \/ 2 ; i > n \/ 2 ; i -- ) { b [ i ] = arr [ right ] ; right += 2 ; if ( right > n - 2 ) break ; } } static void solveOdd ( int n , int arr [ ] , int b [ ] ) { int left = n - 1 ; for ( int i = 0 ; i < n \/ 2 ; i ++ ) { b [ i ] = arr [ left ] ; left = left - 2 ; if ( left < 0 ) break ; } right = 1 ; for ( int i = n \/ 2 + 1 ; i < n ; i ++ ) { b [ i ] = arr [ right ] ; right = right + 2 ; if ( right > n - 2 ) break ; } } static void solve ( int n , int arr [ ] ) { int b [ ] = new int [ n ] ; if ( n % 2 == 0 ) solveEven ( n , arr , b ) ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( b [ i ] + \" ▁ \" ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 4 } ; int n = arr . length ; solve ( arr , arr ) ; } }"],"references":["import java . io . * ; class GFG { static void solveEven ( int n , int arr [ ] , int b [ ] ) { int left = n - 1 ; for ( int i = 0 ; i < ( n \/ 2 ) ; ++ i ) { b [ i ] = arr [ left ] ; left = left - 2 ; if ( left < 0 ) break ; } int right = 0 ; for ( int i = n \/ 2 ; i <= n - 1 ; ++ i ) { b [ i ] = arr [ right ] ; right = right + 2 ; if ( right > n - 2 ) break ; } } static void solveOdd ( int n , int arr [ ] , int b [ ] ) { int left = n - 1 ; for ( int i = 0 ; i < ( n \/ 2 ) + 1 ; ++ i ) { b [ i ] = arr [ left ] ; left = left - 2 ; if ( left < 0 ) break ; } int right = 1 ; for ( int i = ( n \/ 2 ) + 1 ; i <= n - 1 ; ++ i ) { b [ i ] = arr [ right ] ; right = right + 2 ; if ( right > n - 2 ) break ; } } static void solve ( int n , int arr [ ] ) { int b [ ] = new int [ n ] ; if ( n % 2 == 0 ) solveEven ( n , arr , b ) ; else solveOdd ( n , arr , b ) ; for ( int i = 0 ; i <= n - 1 ; ++ i ) { System . out . print ( b [ i ] + \" ▁ \" ) ; } } public static void main ( String [ ] args ) { int [ ] arr = { 1 , 2 , 3 , 4 } ; int n = arr . length ; solve ( n , arr ) ; } }"],"bleu":0.7993428749583738,"rouge_l":0.9118086696562033}
{"id":1552,"predictions":["class GFG { static void findpair ( int l , int r ) { int c = 0 ; for ( int i = l ; i <= r ; i ++ ) { for ( int j = i + 1 ; j <= r ; j ++ ) { if ( j % i == 0 && j != i ) { System . out . print ( i + \" , ▁ \" + j ) ; c = 1 ; break ; } } if ( c == 1 ) break ; } } public static void main ( String args [ ] ) { int l = 1 , r = 10 ; findpair ( l , r ) ; } }"],"references":["class GFG { static void findpair ( int l , int r ) { int c = 0 ; for ( int i = l ; i <= r ; i ++ ) { for ( int j = i + 1 ; j <= r ; j ++ ) { if ( j % i == 0 && j != i ) { System . out . println ( i + \" , ▁ \" + j ) ; c = 1 ; break ; } } if ( c == 1 ) break ; } } public static void main ( String args [ ] ) { int l = 1 , r = 10 ; findpair ( l , r ) ; } }"],"bleu":0.9801160289133815,"rouge_l":0.9921259842519684}
{"id":1553,"predictions":["class GFG { static int nthEven ( int n ) { return ( 2 * n ) ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( nthEven ( n ) ) ; } }"],"references":["class GFG { static int nthEven ( int n ) { return ( 2 * n ) ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( nthEven ( n ) ) ; } }"],"bleu":1.0,"rouge_l":1.0}
{"id":1554,"predictions":["class GFG { static boolean checkUtil ( int num , int dig , int base ) { if ( dig == 1 && num < base ) return true ; if ( dig > 1 && num >= base ) return checkUtil ( num \/ base , - dig , base ) ; return false ; } static boolean check ( int num , int dig ) { for ( int base = 2 ; base < 33 ; base ++ ) { if ( checkUtil ( num , dig , base ) ) return true ; } return false ; } public static void main ( String [ ] args ) { int num = 8 , dig = 3 ; if ( check ( num , dig ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static boolean checkUtil ( int num , int dig , int base ) { if ( dig == 1 && num < base ) return true ; if ( dig > 1 && num >= base ) return checkUtil ( num \/ base , -- dig , base ) ; return false ; } static boolean check ( int num , int dig ) { for ( int base = 2 ; base <= 32 ; base ++ ) if ( checkUtil ( num , dig , base ) ) return true ; return false ; } public static void main ( String [ ] args ) { int num = 8 ; int dig = 3 ; if ( check ( num , dig ) ) System . out . print ( \" Yes \" ) ; else System . out . print ( \" No \" ) ; } }"],"bleu":0.879169455691215,"rouge_l":0.9523206751054853}
{"id":1555,"predictions":["class GFG { static int smallestSubWithSum ( int arr [ ] , int n , int x ) { int min_len = n + 1 ; for ( int start = 0 ; start < n ; start ++ ) { int curr_sum = arr [ start ] ; if ( curr_sum > x ) return 1 ; for ( int end = start + 1 ; end < n ; end ++ ) { curr_sum += arr [ end ] ; if ( curr_sum > x && ( end - start + 1 ) < min_len ) min_len = ( end - start + 1 ) ; } return min_len ; } public static void main ( String [ ] args ) { int arr1 [ ] = { 1 , 4 , 45 , 6 , 10 , 19 } ; int x = 51 ; int n1 = arr1 . length ; int res1 = smallestSubWithSum ( arr1 , n1 , x ) ; if ( res1 == n1 + 1 ) System . out . println ( \" Not ▁ Possible \" ) ; else System . out . println ( res1 ) ; int arr2 [ ] = { 1 , 10 , 5 , 2 , 7 } ; int n2 = arr2 . length ; x = 9 ; int res2 = smallestSubWithSum ( arr2 , n2 , x ) ; if ( res2 == n2 + 1 ) System . out . println ( \" Not ▁ Possible \" ) ; else System . out . println ( res2 ) ; } }"],"references":["class SmallestSubArraySum { static int smallestSubWithSum ( int arr [ ] , int n , int x ) { int min_len = n + 1 ; for ( int start = 0 ; start < n ; start ++ ) { int curr_sum = arr [ start ] ; if ( curr_sum > x ) return 1 ; for ( int end = start + 1 ; end < n ; end ++ ) { curr_sum += arr [ end ] ; if ( curr_sum > x && ( end - start + 1 ) < min_len ) min_len = ( end - start + 1 ) ; } } return min_len ; } public static void main ( String [ ] args ) { int arr1 [ ] = { 1 , 4 , 45 , 6 , 10 , 19 } ; int x = 51 ; int n1 = arr1 . length ; int res1 = smallestSubWithSum ( arr1 , n1 , x ) ; if ( res1 == n1 + 1 ) System . out . println ( \" Not ▁ Possible \" ) ; else System . out . println ( res1 ) ; int arr2 [ ] = { 1 , 10 , 5 , 2 , 7 } ; int n2 = arr2 . length ; x = 9 ; int res2 = smallestSubWithSum ( arr2 , n2 , x ) ; if ( res2 == n2 + 1 ) System . out . println ( \" Not ▁ Possible \" ) ; else System . out . println ( res2 ) ; int arr3 [ ] = { 1 , 11 , 100 , 1 , 0 , 200 , 3 , 2 , 1 , 250 } ; int n3 = arr3 . length ; x = 280 ; int res3 = smallestSubWithSum ( arr3 , n3 , x ) ; if ( res3 == n3 + 1 ) System . out . println ( \" Not ▁ Possible \" ) ; else System . out . println ( res3 ) ; } }"],"bleu":0.7313672204834114,"rouge_l":0.8453523584663551}
{"id":1556,"predictions":["class GFG { public static int getSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { double sqrtCurrent = Math . sqrt ( arr [ i ] ) ; for ( int j = 0 ; j < n ; j ++ ) { int x = arr [ j ] ; if ( x == sqrtCurrent ) { sum += ( sqrtCurrent * sqrtCurrent ) ; break ; } } } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 4 , 5 , 6 , 7 , 8 , 9 , 3 } ; int n = arr . length ; System . out . println ( getSum ( arr , n ) ) ; } }"],"references":["public class GFG { public static int getSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { double sqrtCurrent = Math . sqrt ( arr [ i ] ) ; for ( int j = 0 ; j < n ; j ++ ) { double x = arr [ j ] ; if ( x == sqrtCurrent ) { sum += ( sqrtCurrent * sqrtCurrent ) ; break ; } } } return sum ; } public static void main ( String args [ ] ) { int arr [ ] = { 2 , 4 , 5 , 6 , 7 , 8 , 9 , 3 } ; int n = arr . length ; System . out . println ( getSum ( arr , n ) ) ; } }"],"bleu":0.95427573414649,"rouge_l":0.9832449628844114}
{"id":1557,"predictions":["class GfG { static int findCountOfPairs ( int a , int b , int n ) { int ans = 0 ; ans += n * ( a \/ n ) * ( b \/ n ) ; ans += ( a % n ) * ( b % n ) ; ans += ( ( a % n ) + ( b % n ) ) \/ n ; return ans ; } public static void main ( String [ ] args ) { int a = 5 , b = 13 , n = 3 ; System . out . println ( findCountOfPairs ( a , b , n ) ) \/ n ; } }"],"references":["import java . io . * ; class GFG { static int findCountOfPairs ( int a , int b , int n ) { int ans = 0 ; ans += n * ( a \/ n ) * ( b \/ n ) ; ans += ( a \/ n ) * ( b % n ) ; ans += ( a % n ) * ( b \/ n ) ; ans += ( ( a % n ) + ( b % n ) ) \/ n ; return ans ; } public static void main ( String [ ] args ) { int a = 5 , b = 13 , n = 3 ; System . out . println ( findCountOfPairs ( a , b , n ) ) ; } }"],"bleu":0.8183462684207116,"rouge_l":0.8822633849276833}
{"id":1558,"predictions":["class GFG { static int bsearch ( int prefixSum [ ] , int n , int k ) { int ans = - 1 , left = 1 , right = n ; while ( left <= right ) { int mid = ( left + right ) \/ 2 ; for ( int i = mid ; i <= n ; i ++ ) { if ( prefixSum [ i ] - prefixSum [ i - mid ] > k ) { i = i - 1 ; break ; } } i ++ ; if ( i == n + 1 ) { left = mid + 1 ; ans = mid ; } else right = mid - 1 ; } return ans ; } static int maxSize ( int arr [ ] , int n , int k ) { int [ ] prefixSum = new int [ n + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) prefixSum [ i + 1 ] = prefixSum [ i ] + arr [ i ] ; return bsearch ( prefixSum , n , k ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 10 , 4 } ; int n = arr . length ; int k = 14 ; System . out . println ( maxSize ( arr , n , k ) ) ; } }"],"references":["import java . util . Arrays ; class GFG { static int bsearch ( int prefixsum [ ] , int n , int k ) { int ans = - 1 ; int left = 1 , right = n ; while ( left <= right ) { int mid = ( left + right ) \/ 2 ; int i ; for ( i = mid ; i <= n ; i ++ ) { if ( prefixsum [ i ] - prefixsum [ i - mid ] > k ) break ; } if ( i == n + 1 ) { left = mid + 1 ; ans = mid ; } else right = mid - 1 ; } return ans ; } static int maxSize ( int arr [ ] , int n , int k ) { int prefixsum [ ] = new int [ n + 1 ] ; Arrays . fill ( prefixsum , 0 ) ; for ( int i = 0 ; i < n ; i ++ ) prefixsum [ i + 1 ] = prefixsum [ i ] + arr [ i ] ; return bsearch ( prefixsum , n , k ) ; } public static void main ( String arg [ ] ) { int arr [ ] = { 1 , 2 , 10 , 4 } ; int n = arr . length ; int k = 14 ; System . out . println ( maxSize ( arr , n , k ) ) ; } }"],"bleu":0.8096168484009844,"rouge_l":0.9009657261882219}
{"id":1559,"predictions":["class GFG { static boolean isprime ( int x ) { int i = 2 ; while ( i * i <= x ) if ( x % i == 0 ) return false ; return true ; } static int isSumOfKprimes ( int N , int K ) { if ( N < 2 * K ) return 0 ; if ( K == 1 ) return isprime ( N ) ; if ( K == 2 ) return 1 ; return isprime ( N - 2 ) ; } public static void main ( String [ ] args ) { int n = 10 ; int k = 2 ; if ( isSumOfKprimes ( n , k ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["public class Prime { static boolean isprime ( int x ) { for ( int i = 2 ; i * i <= x ; i ++ ) if ( x % i == 0 ) return false ; return true ; } static boolean isSumOfKprimes ( int N , int K ) { if ( N < 2 * K ) return false ; if ( K == 1 ) return isprime ( N ) ; if ( K == 2 ) { if ( N % 2 == 0 ) return true ; return isprime ( N - 2 ) ; } return true ; } public static void main ( String [ ] args ) { int n = 10 , k = 2 ; if ( isSumOfKprimes ( n , k ) ) System . out . print ( \" Yes \" ) ; else System . out . print ( \" No \" ) ; } }"],"bleu":0.742357931655471,"rouge_l":0.8749209027631301}
{"id":1560,"predictions":["class GFG { static int CountCharacters ( String str , int k ) { int cnt = 0 ; int len = str . length ( ) ; for ( int i = 0 ; i < len ; i ++ ) { if ( str . charAt ( i ) < k ) { cnt += 1 ; } } return cnt ; } public static void main ( String [ ] args ) { String str = \" GeeksForGeeks \" ; int k = 90 ; int count = CountCharacters ( str , k ) ; System . out . print ( \" Character ▁ with ▁ ASCII ▁ values ▁ than ▁ \" + count ) ; System . out . print ( \" Character ▁ with ▁ ASCII ▁ values ▁ than ▁ or ▁ equal ▁ are ▁ \" + count ) ; } }"],"references":["import java . util . * ; class GFG { static int CountCharacters ( String str , int k ) { int cnt = 0 ; int len = str . length ( ) ; for ( int i = 0 ; i < len ; i ++ ) { if ( ( ( int ) str . charAt ( i ) ) < k ) cnt ++ ; } return cnt ; } public static void main ( String args [ ] ) { String str = \" GeeksForGeeks \" ; int k = 90 ; int count = CountCharacters ( str , k ) ; System . out . println ( \" Characters ▁ with ▁ ASCII ▁ values ▁ less ▁ than ▁ K ▁ are ▁ \" + count ) ; System . out . println ( \" Characters ▁ with ▁ ASCII ▁ values ▁ greater ▁ than ▁ or ▁ equal ▁ to ▁ K ▁ are ▁ \" + ( str . length ( ) - count ) ) ; } }"],"bleu":0.6725264164136869,"rouge_l":0.8437316068275454}
{"id":1561,"predictions":["class Test { static void printUncommon ( int arr1 [ ] , int arr2 [ ] , int n1 [ ] ) { int i = 0 , j = 0 , k = 0 ; while ( i < n1 && j < n2 ) { if ( arr1 [ i ] < arr2 [ j ] ) { System . out . print ( arr1 [ i ] + \" ▁ \" ) ; i ++ ; k ++ ; } else if ( arr2 [ j ] < arr1 [ i ] ) { System . out . print ( arr2 [ j ] + \" ▁ \" ) ; k ++ ; j ++ ; } else { i ++ ; j = j + 1 ; } } while ( i < n1 ) { System . out . print ( arr1 [ i ] + \" ▁ \" ) ; i ++ ; k = k + 1 ; } } public static void main ( String [ ] args ) { int arr1 [ ] = { 10 , 20 , 30 } ; int arr2 [ ] = { 20 , 25 , 30 , 40 , 50 } ; int n1 = arr1 . length ; int n2 = arr2 . length ; printUncommon ( arr1 , arr2 , n1 ) ; } }"],"references":["import java . io . * ; class GFG { static void printUncommon ( int arr1 [ ] , int arr2 [ ] , int n1 , int n2 ) { int i = 0 , j = 0 , k = 0 ; while ( i < n1 && j < n2 ) { if ( arr1 [ i ] < arr2 [ j ] ) { System . out . print ( arr1 [ i ] + \" ▁ \" ) ; i ++ ; k ++ ; } else if ( arr2 [ j ] < arr1 [ i ] ) { System . out . print ( arr2 [ j ] + \" ▁ \" ) ; k ++ ; j ++ ; } else { i ++ ; j ++ ; } } while ( i < n1 ) { System . out . print ( arr1 [ i ] + \" ▁ \" ) ; i ++ ; k ++ ; } while ( j < n2 ) { System . out . print ( arr2 [ j ] + \" ▁ \" ) ; j ++ ; k ++ ; } } public static void main ( String [ ] args ) { int arr1 [ ] = { 10 , 20 , 30 } ; int arr2 [ ] = { 20 , 25 , 30 , 40 , 50 } ; int n1 = arr1 . length ; int n2 = arr2 . length ; printUncommon ( arr1 , arr2 , n1 , n2 ) ; } }"],"bleu":0.8023868771630217,"rouge_l":0.8811945326164411}
{"id":1562,"predictions":["class GFG { static String findExtraCharacter ( String s1 , String s2 ) { String smallStr = \" \" ; int smallStr = \" \" , largestStr = \" \" ; if ( s1 . length ( ) > s2 . length ( ) ) { smallStr = s2 ; largestStr = s1 ; } else { smallStr = s1 ; largestStr = s2 ; } } char smallStr = '0' , smallStr = 0 , i = 0 ; for ( int i = 0 ; i < smallStr . length ( ) ; i ++ ) { smallStr += ( smallStr . charAt ( i ) ) ; largestStr += ( charStr . charAt ( i ) ) ; i += 1 ; } largestStr = 0 ; int i = 0 ; while ( i < smallStr . length ( ) ) { smallStr += ( smallStr . charAt ( i ) ) ; largestStr += ( largestStr . charAt ( i ) ) ; i += 1 ; } largestStr = largestStr - smallStr ; return ( int ) ( int ) ( smallStr ) ; } public static void main ( String [ ] args ) { String s1 = \" abcd \" ; String s2 = \" cbd \" ; int extraChar = findExtraChar ( s1 , s2 ) ; System . out . println ( \" Maximum ▁ Character : ▁ \" + extraChar ) ; } }"],"references":["public class Test { private static char findExtraCharacter ( String s1 , String s2 ) { String smallStr ; String largeStr ; if ( s1 . length ( ) > s2 . length ( ) ) { smallStr = s2 ; largeStr = s1 ; } else { smallStr = s1 ; largeStr = s2 ; } int smallStrCodeTotal = 0 ; int largeStrCodeTotal = 0 ; int i = 0 ; for ( ; i < smallStr . length ( ) ; i ++ ) { smallStrCodeTotal += smallStr . charAt ( i ) ; largeStrCodeTotal += largeStr . charAt ( i ) ; } largeStrCodeTotal += largeStr . charAt ( i ) ; int intChar = largeStrCodeTotal - smallStrCodeTotal ; return ( char ) intChar ; } public static void main ( String [ ] args ) { String s1 = \" abcd \" ; String s2 = \" cbdae \" ; char extraChar = findExtraCharacter ( s1 , s2 ) ; System . out . println ( \" Extra ▁ character : ▁ \" + extraChar ) ; } }"],"bleu":0.49929210809601854,"rouge_l":0.7245339416345474}
{"id":1563,"predictions":["class GFG { static void sortMat ( int [ ] [ ] mat , int row , int col ) { int size = row * col ; for ( int i = 0 ; i < size ; i ++ ) { for ( int j = 0 ; j < size - 1 ; j ++ ) { if ( data [ j \/ col ] > 0 && data % col ] [ ( j + 1 ) % col ] [ ( j + 1 ) % col ] [ ( j + 1 ) % col ] [ ( j + 1 ) % col ] [ ( j + 1 ) % col ] ; data [ ( j + 1 ) \/ col ] [ ( j + 1 ) % col ] ; } } } static void printMat ( int mat [ ] [ ] , int row , int col ) { for ( int i = 0 ; i < row ; i ++ ) { for ( int j = 0 ; j < col ; j ++ ) System . out . print ( mat [ i ] [ j ] + \" ▁ \" ) ; System . out . println ( ) ; } } public static void main ( String [ ] args ) { int mat [ ] [ ] = { { 5 , 4 , 7 } , { 1 , 3 , 8 } } ; int row = mat . length ; int col = mat [ 0 ] . length ; sortMat ( mat , row , col ) ; printMat ( mat , row , col ) ; } }"],"references":["class GFG { static void sortMat ( int [ ] [ ] data , int row , int col ) { int size = row * col ; for ( int i = 0 ; i < size ; i ++ ) { for ( int j = 0 ; j < size - 1 ; j ++ ) { if ( data [ j \/ col ] [ j % col ] > data [ ( j + 1 ) \/ col ] [ ( j + 1 ) % col ] ) { int temp = data [ j \/ col ] [ j % col ] ; data [ j \/ col ] [ j % col ] = data [ ( j + 1 ) \/ col ] [ ( j + 1 ) % col ] ; data [ ( j + 1 ) \/ col ] [ ( j + 1 ) % col ] = temp ; } } } } static void printMat ( int [ ] [ ] mat , int row , int col ) { for ( int i = 0 ; i < row ; i ++ ) { for ( int j = 0 ; j < col ; j ++ ) { System . out . print ( mat [ i ] [ j ] + \" ▁ \" ) ; } System . out . println ( ) ; } } public static void main ( String [ ] args ) { int [ ] [ ] mat = { { 5 , 4 , 7 } , { 1 , 3 , 8 } , { 2 , 9 , 6 } } ; int row = mat . length ; int col = mat [ 0 ] . length ; sortMat ( mat , row , col ) ; printMat ( mat , row , col ) ; } }"],"bleu":0.8001342460446205,"rouge_l":0.8943813164371366}
{"id":1564,"predictions":["class GFG { static int distinctDigitSum ( int n ) { boolean [ ] used = new boolean [ 10 ] ; int sum = 0 ; while ( n > 0 ) { int digit = n % 10 ; if ( ! used [ digit ] ) { used [ digit ] = true ; sum += digit ; } n = n \/ 10 ; } return sum ; } static String checkSum ( int m , int n ) { int sumM = distinctDigitSum ( m ) ; int sumN = distinctDigitSum ( n ) ; if ( sumM == sumN ) return \" YES \" ; return \" NO \" ; } public static void main ( String [ ] args ) { int m = 2452 ; int n = 9222 ; System . out . print ( checkSum ( m , n ) ) ; } }"],"references":["public class HelloWorld { static int distinctDigitSum ( int n ) { boolean used [ ] = new boolean [ 10 ] ; int sum = 0 ; while ( n > 0 ) { int digit = n % 10 ; if ( ! used [ digit ] ) { used [ digit ] = true ; sum += digit ; } n = n \/ 10 ; } return sum ; } static String checkSum ( int m , int n ) { int sumM = distinctDigitSum ( m ) ; int sumN = distinctDigitSum ( n ) ; if ( sumM == sumN ) return \" YES \" ; return \" NO \" ; } public static void main ( String [ ] args ) { int m = 2452 , n = 9222 ; System . out . println ( checkSum ( m , n ) ) ; } }"],"bleu":0.925923576607835,"rouge_l":0.9675324675324675}
{"id":1565,"predictions":["class GFG { static int initializeDiffArray ( int [ ] A ) { int n = A [ 0 ] ; int [ ] D = new int [ n + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) D [ i ] = A [ i ] ; return D ; } static void update ( int D [ ] , int l , int r , int x ) { D [ l ] += x ; D [ r + 1 ] -= x ; } static void printArray ( int D [ ] , int l , int r , int x ) { D [ l ] += x ; D [ r + 1 ] -= x ; } static void printArray ( int A [ ] , int D [ ] ) { for ( int i = 0 ; i < A . length ; i ++ ) { if ( i == 0 ) A [ i ] = D [ i ] ; else A [ i ] = D [ i ] + A [ i - 1 ] ; System . out . print ( A [ i ] + \" ▁ \" ) ; } System . out . print ( \" \\n \" ) ; } public static void main ( String [ ] args ) { int A [ ] = { 10 , 5 , 20 , 40 } ; int D [ ] = initializeDiffArray ( A , 0 , 1 , 10 } ; initialize ( A , D ) ; printArray ( D , D ) ; } }"],"references":["class GFG { static void initializeDiffArray ( int A [ ] , int D [ ] ) { int n = A . length ; D [ 0 ] = A [ 0 ] ; D [ n ] = 0 ; for ( int i = 1 ; i < n ; i ++ ) D [ i ] = A [ i ] - A [ i - 1 ] ; } static void update ( int D [ ] , int l , int r , int x ) { D [ l ] += x ; D [ r + 1 ] -= x ; } static int printArray ( int A [ ] , int D [ ] ) { for ( int i = 0 ; i < A . length ; i ++ ) { if ( i == 0 ) A [ i ] = D [ i ] ; else A [ i ] = D [ i ] + A [ i - 1 ] ; System . out . print ( A [ i ] + \" ▁ \" ) ; } System . out . println ( ) ; return 0 ; } public static void main ( String [ ] args ) { int A [ ] = { 10 , 5 , 20 , 40 } ; int n = A . length ; int D [ ] = new int [ n + 1 ] ; initializeDiffArray ( A , D ) ; update ( D , 0 , 1 , 10 ) ; printArray ( A , D ) ; update ( D , 1 , 3 , 20 ) ; update ( D , 2 , 2 , 30 ) ; printArray ( A , D ) ; } }"],"bleu":0.7326010006595168,"rouge_l":0.7764305700334669}
{"id":1566,"predictions":["class GFG { static final int MAX = 100 ; static void printPrincipalDiagonal ( int mat [ ] [ ] , int n ) { System . out . print ( \" Principal ▁ Diagonal : ▁ \" ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( i == j ) System . out . print ( mat [ i ] [ j ] + \" , ▁ \" ) ; } System . out . println ( ) ; } } static void printSecondaryDiagonal ( int mat [ ] [ ] , int n ) { System . out . print ( \" Secondary ▁ Diagonal : ▁ \" ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( ( i + j ) == ( n - 1 ) ) System . out . print ( mat [ i ] [ j ] + \" , ▁ \" ) ; } } System . out . println ( ) ; } public static void main ( String [ ] args ) { int n = 4 ; int a [ ] [ ] = { { 1 , 2 , 3 , 4 } , { 1 , 2 , 3 , 4 } , { 5 , 6 , 7 , 8 } } ; printPrincipalDiagonal ( a , n ) ; printSecondaryDiagonal ( a , n ) ; } }"],"references":["class GFG { static int MAX = 100 ; static void printPrincipalDiagonal ( int mat [ ] [ ] , int n ) { System . out . print ( \" Principal ▁ Diagonal : ▁ \" ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( i == j ) { System . out . print ( mat [ i ] [ j ] + \" , ▁ \" ) ; } } } System . out . println ( \" \" ) ; } static void printSecondaryDiagonal ( int mat [ ] [ ] , int n ) { System . out . print ( \" Secondary ▁ Diagonal : ▁ \" ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( ( i + j ) == ( n - 1 ) ) { System . out . print ( mat [ i ] [ j ] + \" , ▁ \" ) ; } } } System . out . println ( \" \" ) ; } public static void main ( String args [ ] ) { int n = 4 ; int a [ ] [ ] = { { 1 , 2 , 3 , 4 } , { 5 , 6 , 7 , 8 } , { 1 , 2 , 3 , 4 } , { 5 , 6 , 7 , 8 } } ; printPrincipalDiagonal ( a , n ) ; printSecondaryDiagonal ( a , n ) ; } }"],"bleu":0.8951385243729498,"rouge_l":0.9555244755244756}
{"id":1567,"predictions":["class GFG { static int FindMinNumber ( int arr [ ] , int n , int k ) { int i = 0 ; int min_num = Integer . MAX_VALUE ; boolean found = false ; boolean sum = false ; while ( i < n ) { sum = sum + arr [ i ] ; if ( sum == k ) { min_num = Math . min ( min_num , ( ( n - ( i + 1 ) ) + j ) ) ; found = true ; } else if ( sum > k ) { while ( sum > k ) { sum = sum - arr [ j ] ; j ++ ; } if ( sum > k ) { min_num = Math . min ( min_num , ( ( n - ( i + 1 ) ) + j ) ; found = true ; } i ++ ; } if ( found ) return min_num ; return - 1 ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 3 , 2 , 5 , 6 } ; int n = arr . length ; int k = 5 ; System . out . println ( FindMinNumber ( arr , n , k ) ) ; } }"],"references":["class GFG { static int FindMinNumber ( int arr [ ] , int n , int k ) { int i = 0 ; int j = 0 ; int min_num = Integer . MAX_VALUE ; boolean found = false ; int sum = 0 ; while ( i < n ) { sum = sum + arr [ i ] ; if ( sum == k ) { min_num = Math . min ( min_num , ( ( n - ( i + 1 ) ) + j ) ) ; found = true ; } else if ( sum > k ) { while ( sum > k ) { sum = sum - arr [ j ] ; j ++ ; } if ( sum == k ) { min_num = Math . min ( min_num , ( ( n - ( i + 1 ) ) + j ) ) ; found = true ; } } i ++ ; } if ( found ) return min_num ; return - 1 ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 3 , 2 , 5 , 6 } ; int n = arr . length ; int k = 5 ; System . out . println ( FindMinNumber ( arr , n , k ) ) ; } }"],"bleu":0.9321582466885838,"rouge_l":0.9692796610169491}
{"id":1568,"predictions":["import java . util . * ; class GFG { static int minProduct ( int arr [ ] , int n , int k ) { PriorityQueue < Integer > arr = new PriorityQueue < Integer > ( ) ; int count = 1 ; int ans = 1 ; while ( arr . length > 0 && count < k ) { PriorityQueue < Integer > pq = Collections . reverse ( arr ) ; for ( int i = 1 ; i < k ; i ++ ) { pq . add ( arr [ i ] ) ; ans = ans * x ; count ++ ; } ans ++ ; } return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 207 , 76 , 544 , 12345 } ; int k = 2 ; int n = arr . length ; System . out . println ( \" Minimum ▁ product ▁ is ▁ \" + minProduct ( arr , n , k ) ) ; } }"],"references":["import java . util . PriorityQueue ; class GFG { public static int minProduct ( int [ ] arr , int n , int k ) { PriorityQueue < Integer > pq = new PriorityQueue < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) pq . add ( arr [ i ] ) ; int count = 0 , ans = 1 ; while ( pq . isEmpty ( ) == false && count < k ) { ans = ans * pq . element ( ) ; pq . remove ( ) ; count ++ ; } return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 198 , 76 , 544 , 123 , 154 , 675 } ; int k = 2 ; int n = arr . length ; System . out . print ( \" Minimum ▁ product ▁ is ▁ \" + minProduct ( arr , n , k ) ) ; } }"],"bleu":0.6832426534772371,"rouge_l":0.7298488664987406}
{"id":1569,"predictions":["class GFG { static int [ ] B = new int [ 256 ] ; static void initializeSetBits ( ) ; static void initializeSetBits ( ) { SetSetBitsSetBits = new String [ 256 ] ; for ( int i = 0 ; i < 256 ; i ++ ) BitsSetBinarySetBits [ i ] = ( i & 1 ) + BitsSetBinarySetBinarySetBinarySetBits ( n >> 8 ) ; } static int countSetBits ( int n ) { return ( BitsSetBitsSetBits ( n & 0 ) ; } public static void main ( String [ ] args ) { initializeSetBits ( ) ; int n = 9 ; System . out . println ( countSetBits ( n ) ) ; } }"],"references":["class GFG { static int [ ] BitsSetTable256 = new int [ 256 ] ; public static void initialize ( ) { BitsSetTable256 [ 0 ] = 0 ; for ( int i = 0 ; i < 256 ; i ++ ) { BitsSetTable256 [ i ] = ( i & 1 ) + BitsSetTable256 [ i \/ 2 ] ; } } public static int countSetBits ( int n ) { return ( BitsSetTable256 [ n & 0xff ] + BitsSetTable256 [ ( n >> 8 ) & 0xff ] + BitsSetTable256 [ ( n >> 16 ) & 0xff ] + BitsSetTable256 [ n >> 24 ] ) ; } public static void main ( String [ ] args ) { initialize ( ) ; int n = 9 ; System . out . print ( countSetBits ( n ) ) ; } }"],"bleu":0.5395338416514301,"rouge_l":0.7062228654124456}
{"id":1570,"predictions":["class GFG { static int numberOfBST ( int n ) { int [ ] dp = new int [ n + 1 ] ; dp [ 0 ] = 0 ; dp [ 0 ] = dp [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= i ; j ++ ) dp [ i ] = dp [ i ] + ( dp [ i - j ] * dp [ j - 1 ] ) ; } return dp [ n ] ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . print ( \" Number ▁ of ▁ Circular ▁ BST ▁ with ▁ \" + n + \" ▁ keys ▁ are ▁ : ▁ \" + numberOfBST ( n ) ) ; } }"],"references":["import java . io . * ; import java . util . Arrays ; class GFG { static int numberOfBST ( int n ) { int dp [ ] = new int [ n + 1 ] ; Arrays . fill ( dp , 0 ) ; dp [ 0 ] = 1 ; dp [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= i ; j ++ ) { dp [ i ] = dp [ i ] + ( dp [ i - j ] * dp [ j - 1 ] ) ; } } return dp [ n ] ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( \" Number ▁ of ▁ structurally ▁ \" + \" Unique ▁ BST ▁ with ▁ \" + n + \" ▁ keys ▁ are ▁ : ▁ \" + numberOfBST ( n ) ) ; } }"],"bleu":0.7567068787737917,"rouge_l":0.8762242328141032}
{"id":1571,"predictions":["class GFG { static int countdig ( int m ) { if ( m == 0 ) { return 0 ; } else { return 1 + countdig ( m \/ 10 ) ; } } static int countSteps ( int x ) { int c = 0 ; int last = x ; while ( last > 0 ) { int digits = countdig ( last ) ; int digits -- ; int divisor = ( int ) Math . pow ( 10 , digits ) ; int firstnumber = first * divisor ; lastnumber = first * divisor ; int skipped = last * divisor ; last = last - ( first - lastnumber ) ; } return c ; } public static void main ( String [ ] args ) { int n = 14 ; System . out . println ( countSteps ( n ) ) ; } }"],"references":["class GFG { static int countdig ( int m ) { if ( m == 0 ) return 0 ; else return 1 + countdig ( m \/ 10 ) ; } static int countSteps ( int x ) { int c = 0 ; int last = x ; while ( last > 0 ) { int digits = countdig ( last ) ; digits -= 1 ; int divisor = ( int ) Math . pow ( 10 , digits ) ; int first = last \/ divisor ; int lastnumber = first * divisor ; int skipped = ( last - lastnumber ) \/ first ; skipped += 1 ; c += skipped ; last = last - ( first * skipped ) ; } return c ; } public static void main ( String [ ] args ) { int n = 14 ; System . out . println ( countSteps ( n ) ) ; } }"],"bleu":0.7889697566280603,"rouge_l":0.8843326084705395}
{"id":1572,"predictions":["public class GFG { static int Add ( int x , int y ) { while ( y != 0 ) { int carry = x & y ; x = x ^ y ; y = carry << 1 ; } return x ; } public static void main ( String args [ ] ) { System . out . println ( Add ( 15 , 32 ) ) ; } }"],"references":["import java . io . * ; class GFG { static int Add ( int x , int y ) { while ( y != 0 ) { int carry = x & y ; x = x ^ y ; y = carry << 1 ; } return x ; } public static void main ( String arg [ ] ) { System . out . println ( Add ( 15 , 32 ) ) ; } }"],"bleu":0.8762722388727299,"rouge_l":0.927607624759049}
{"id":1573,"predictions":["class GFG { static boolean isOverflow ( int a , int b ) { if ( a == 0 || b == 0 ) { return false ; } int result = a * b ; if ( result >= 922 ) { result = 0 ; } else { result = 1 ; } if ( a == ( result \/ b ) ) { result = 0 ; } else { return true ; } } return true ; } public static void main ( String [ ] args ) { int a = 10000000 ; int b = - 10000000 ; if ( isOverflow ( a , b ) ) { System . out . println ( \" Yes \" ) ; } else { System . out . println ( \" No \" ) ; } } }"],"references":["import java . util . * ; import java . lang . * ; public class GfG { static Boolean isOverflow ( long a , long b ) { if ( a == 0 || b == 0 ) return false ; long result = a * b ; if ( a == result \/ b ) return false ; else return true ; } public static void main ( String argc [ ] ) { long a = Long . parseLong ( \"10000000000\" ) ; long b = Long . parseLong ( \" - 10000000000\" ) ; if ( isOverflow ( a , b ) ) System . out . print ( \" Yes \" ) ; else System . out . print ( \" No \" ) ; } }"],"bleu":0.4440306176554864,"rouge_l":0.675981691158757}
{"id":1574,"predictions":["import java . util . * ; class GFG { static void pairWithEqualSum ( int [ ] A , int n ) { HashMap < Integer , Integer > mp = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { int mp = ( A [ i ] + A [ j ] ) ; if ( mp . containsKey ( A [ i ] + A [ j ] ) ) { mp . put ( A [ i ] , new Pair ( A [ i ] + A [ j ] ) ) ; } else { mp . put ( A [ i ] + A [ j ] , new pair ( A [ i ] ) , new pair ( A [ i ] + A [ j ] ) ) ; } } } for ( Map . Entry < Integer , Integer > itr : mp . entrySet ( ) ) { if ( itr . size ( ) > 1 ) { System . out . print ( \" Pairs ▁ : ▁ \" ) ; for ( int i = 0 ; i < itr . size ( ) ; i ++ ) { System . out . print ( itr . getKey ( ) . getValue ( ) + \" , ▁ \" ) ; } System . out . print ( \" has ▁ sum ▁ : ▁ \" + itr . get ( ) . getValue ( ) [ i ] ) ; } } } public static void main ( String [ ] args ) { int A [ ] = { 6 , 4 , 12 , 10 , 22 , 42 , 11 , 8 , 2 } ; int n = A . length ; pairWithEqualSum ( A , n ) ; } }"],"references":["import java . util . * ; class GFG { static class pair { int first , second ; public pair ( int first , int second ) { this . first = first ; this . second = second ; } } static void pairWithEqualSum ( int A [ ] , int n ) { Map < Integer , Vector < pair > > mp = new HashMap < > ( ) ; for ( int i = 0 ; i < n - 1 ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { pair p = new pair ( A [ i ] , A [ j ] ) ; Vector < pair > pp = new Vector < pair > ( ) ; if ( mp . containsKey ( A [ i ] + A [ j ] ) ) pp . addAll ( mp . get ( A [ i ] + A [ j ] ) ) ; pp . add ( p ) ; mp . put ( A [ i ] + A [ j ] , pp ) ; } } for ( Map . Entry < Integer , Vector < pair > > itr : mp . entrySet ( ) ) { if ( itr . getValue ( ) . size ( ) > 1 ) { System . out . print ( \" Pairs ▁ : ▁ \" ) ; for ( int i = 0 ; i < itr . getValue ( ) . size ( ) ; i ++ ) { System . out . print ( \" ( ▁ \" + itr . getValue ( ) . get ( i ) . first + \" , ▁ \" + itr . getValue ( ) . get ( i ) . second + \" ) ▁ \" ) ; } System . out . print ( \" ▁ have ▁ sum ▁ : ▁ \" + itr . getKey ( ) + \" \\n \" ) ; } } } public static void main ( String [ ] args ) { int A [ ] = { 6 , 4 , 12 , 10 , 22 , 54 , 32 , 42 , 21 , 11 , 8 , 2 } ; int n = A . length ; pairWithEqualSum ( A , n ) ; } }"],"bleu":0.6406862208152074,"rouge_l":0.7483862693968283}
{"id":1575,"predictions":["import java . io . * ; class GFG { static int findValues ( int m , int n , int mth , int nth ) { double d = ( Math . abs ( mth - nth ) ) \/ Math . abs ( ( m - 1 ) ) ; double a = mth - ( ( m - 1 ) * d ) ; return a ; } static int findSum ( int m , int n , int mth , int nth , int p ) { int a = ( m - nth ) \/ Math . abs ( ( m - 1 ) * d ) ; int sum = ( p * ( 2 * a + ( p - 1 ) * d ) ) \/ 2 ; return sum ; } public static void main ( String [ ] args ) { int m = 6 , n = 10 ; int mth = 12 , n = 20 ; int p = 5 ; System . out . println ( findSum ( m , n , mth , n , p ) ) ; } }"],"references":["import java . util . * ; class GFG { static ArrayList < Integer > findingValues ( int m , int n , int mth , int nth ) { int d = ( Math . abs ( mth - nth ) ) \/ Math . abs ( ( m - 1 ) - ( n - 1 ) ) ; int a = mth - ( ( m - 1 ) * d ) ; ArrayList < Integer > res = new ArrayList < Integer > ( ) ; res . add ( a ) ; res . add ( d ) ; return res ; } static int findSum ( int m , int n , int mth , int nth , int p ) { ArrayList < Integer > ad = findingValues ( m , n , mth , nth ) ; int a = ad . get ( 0 ) ; int d = ad . get ( 1 ) ; int sum = ( p * ( 2 * a + ( p - 1 ) * d ) ) \/ 2 ; return sum ; } public static void main ( String [ ] args ) { int m = 6 , n = 10 , mTerm = 12 , nTerm = 20 , p = 5 ; System . out . println ( findSum ( m , n , mTerm , nTerm , p ) ) ; } }"],"bleu":0.6199763683802422,"rouge_l":0.7582872928176796}
{"id":1576,"predictions":["import java . util . * ; class GFG { static int sameOccurrence ( int arr [ ] , int n , int x [ ] ) { int [ ] countX = new int [ n ] ; int [ ] countY [ ] = new int [ n ] ; HashMap < Integer , Integer > m = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == x ) { if ( i != 0 ) { if ( i != 0 ) countX [ i ] = countX [ i - 1 ] + 1 ; else countX [ i ] = 1 ; } else { if ( i != 0 ) countX [ i ] = countX [ i - 1 ] + 1 ; else countX [ i ] = 0 ; } if ( arr [ i ] == y ) { if ( i != 0 ) countY [ i ] = countX [ i - 1 ] + 1 ; else countY [ i ] = 0 ; } else { if ( i != 0 ) countY [ i ] = countY [ i - 1 ] ; } else { countY [ i ] = 0 ; } } m . put ( countX [ i ] - countY [ i ] ) ; } int result = m . get ( countX [ i ] - countY [ i ] ) ; for ( int i : m ) result += ( m . get ( i ) * ( m . get ( i ) - 1 ) ) \/ 2 ; return result ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 2 , 3 , 4 , 1 } ; int n = arr . length ; int x = 2 ; System . out . println ( sameOccurrence ( arr , n , x , y ) ) ; } }"],"references":["import java . util . * ; class GFG { static int sameOccurrence ( int arr [ ] , int n , int x , int y ) { int [ ] countX = new int [ n ] ; int [ ] countY = new int [ n ] ; Map < Integer , Integer > m = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == x ) { if ( i != 0 ) countX [ i ] = countX [ i - 1 ] + 1 ; else countX [ i ] = 1 ; } else { if ( i != 0 ) countX [ i ] = countX [ i - 1 ] ; else countX [ i ] = 0 ; } if ( arr [ i ] == y ) { if ( i != 0 ) countY [ i ] = countY [ i - 1 ] + 1 ; else countY [ i ] = 1 ; } else { if ( i != 0 ) countY [ i ] = countY [ i - 1 ] ; else countY [ i ] = 0 ; } if ( m . containsKey ( countX [ i ] - countY [ i ] ) ) { m . put ( countX [ i ] - countY [ i ] , m . get ( countX [ i ] - countY [ i ] ) + 1 ) ; } else { m . put ( countX [ i ] - countY [ i ] , 1 ) ; } } int result = m . get ( 0 ) ; for ( Map . Entry < Integer , Integer > it : m . entrySet ( ) ) result = result + ( ( it . getValue ( ) ) * ( ( it . getValue ( ) ) - 1 ) ) \/ 2 ; return ( result ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 2 , 3 , 4 , 1 } ; int n = arr . length ; int x = 2 , y = 3 ; System . out . println ( sameOccurrence ( arr , n , x , y ) ) ; } }"],"bleu":0.748675609998944,"rouge_l":0.8349211632067229}
{"id":1577,"predictions":["public class GFG { static void findNonPalinString ( String s ) { int freq [ ] = new int [ 26 ] ; int flag = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) != s . charAt ( 0 ) ) flag = 1 ; freq [ s . charAt ( i ) - ' a ' ] ++ ; } if ( flag == 0 ) System . out . print ( \" - 1\" ) ; else { for ( int i = 0 ; i < 26 ; i ++ ) { for ( int j = 0 ; j < freq [ i ] ; j ++ ) System . out . print ( ( char ) ( ' a ' + i ) ) ; } } } public static void main ( String args [ ] ) { String s = \" abba \" ; findNonPalinString ( s ) ; } }"],"references":["class GfG { static void findNonPalinString ( char s [ ] ) { int freq [ ] = new int [ 26 ] ; int flag = 0 ; for ( int i = 0 ; i < s . length ; i ++ ) { if ( s [ i ] != s [ 0 ] ) flag = 1 ; freq [ s [ i ] - ' a ' ] ++ ; } if ( flag == 0 ) System . out . println ( \" - 1\" ) ; else { for ( int i = 0 ; i < 26 ; i ++ ) for ( int j = 0 ; j < freq [ i ] ; j ++ ) System . out . print ( ( char ) ( ' a ' + i ) ) ; } } public static void main ( String [ ] args ) { String s = \" abba \" ; findNonPalinString ( s . toCharArray ( ) ) ; } }"],"bleu":0.7924292740296116,"rouge_l":0.8980555555555555}
{"id":1578,"predictions":["class GFG { static boolean isFrequencyEqual ( int len ) { if ( len % 2 == 1 ) return false ; int freq [ ] = new int [ 26 ] ; for ( int i = 0 ; i < len ; i ++ ) { freq [ str . charAt ( i ) - ' a ' ] ++ ; } for ( int i = 0 ; i < 26 ; i ++ ) { if ( freq [ i ] == len \/ 2 ) return true ; } return false ; } public static void main ( String [ ] args ) { String str = \" geeksforgeeks \" ; int len = str . length ( ) ; if ( isFrequencyEqual ( str , len ) ) System . out . print ( \" Yes \" ) ; else System . out . print ( \" No \" ) ; } }"],"references":["class GFG { static boolean isFrequencyEqual ( String str , int len ) { if ( len % 2 == 1 ) { return false ; } int i , freq [ ] = new int [ 26 ] ; for ( i = 0 ; i < len ; i ++ ) { freq [ str . charAt ( i ) - ' a ' ] ++ ; } for ( i = 0 ; i < 26 ; i ++ ) { if ( freq [ i ] == len \/ 2 ) { return true ; } } return false ; } public static void main ( String [ ] args ) { String str = \" geeksforgeeks \" ; int len = str . length ( ) ; if ( isFrequencyEqual ( str , len ) ) { System . out . println ( \" Yes \" ) ; } else { System . out . println ( \" No \" ) ; } } }"],"bleu":0.8054013349152809,"rouge_l":0.9366022783556216}
{"id":1579,"predictions":["class GFG { static int summ ( int n ) { if ( n == 0 ) return 0 ; if ( n % 9 == 0 ) return 9 ; else return ( n % 9 ) ; } static void printDigitalRoot ( int n ) { int maxi = 1 , dig = 1 ; for ( int i = 1 ; i * i <= Math . pow ( n , 1 ) ; i ++ ) { if ( n % i == 0 ) { int d1 = sum ( n \/ i ) ; int d2 = sum ( i ) ; if ( d1 > maxi ) { dig = n \/ i ; maxi = d1 ; } if ( d2 > maxi ) { dig = i ; maxi = d2 ; } if ( d1 > maxi ) { if ( dig < ( n \/ i ) ) { dig = n \/ i ; maxi = d ; } } if ( d1 == maxi ) { if ( dig < ( n \/ i ) ) { dig = i ; maxi = d2 ; } } } System . out . println ( dig + \" ▁ \" + maxi ) ; } } public static void main ( String [ ] args ) { int n = 10 ; printDigitalRoot ( n ) ; } }"],"references":["class GFG { static int summ ( int n ) { if ( n == 0 ) return 0 ; return ( n % 9 == 0 ) ? 9 : ( n % 9 ) ; } static void printDigitalRoot ( int n ) { int maxi = 1 ; int dig = 1 ; for ( int i = 1 ; i <= Math . sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { int d1 = summ ( n \/ i ) ; int d2 = summ ( i ) ; if ( d1 > maxi ) { dig = n \/ i ; maxi = d1 ; } if ( d2 > maxi ) { dig = i ; maxi = d2 ; } if ( d1 == maxi ) { if ( dig < ( n \/ i ) ) { dig = n \/ i ; maxi = d1 ; } } if ( d2 == maxi ) { if ( dig < i ) { dig = i ; maxi = d2 ; } } } } System . out . println ( dig + \" ▁ \" + maxi ) ; } public static void main ( String [ ] args ) { int n = 10 ; printDigitalRoot ( n ) ; } }"],"bleu":0.8458129478960674,"rouge_l":0.9334353481254782}
{"id":1580,"predictions":["import java . util . * ; class GFG { static int countSubarrays ( int arr [ ] , int n ) { int difference = 0 ; int ans = 0 ; int [ ] hash_positive = new int [ n + 1 ] ; int [ ] hash = new int [ n + 1 ] ; hash_neg [ 0 ] = 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( ( arr [ i ] & 1 ) == 1 ) difference ++ ; else difference -- ; } if ( difference < 0 ) { ans += hash_ negative [ - difference ] ; hash_neg [ - difference ] ++ ; } else { ans += hash_positive [ difference ] ; hash_missing [ difference ] ++ ; } } return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 4 , 6 , 8 , 1 , 10 , 5 , 7 } ; int n = arr . length ; System . out . print ( \" Total ▁ Number ▁ of ▁ Even - Odd ▁ subarrays ▁ are ▁ \" + countSubarrays ( arr , n ) ) ; } }"],"references":["class GFG { static int countSubarrays ( int [ ] arr , int n ) { int difference = 0 ; int ans = 0 ; int [ ] hash_positive = new int [ n + 1 ] ; int [ ] hash_negative = new int [ n + 1 ] ; hash_positive [ 0 ] = 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( ( arr [ i ] & 1 ) == 1 ) { difference ++ ; } else { difference -- ; } if ( difference < 0 ) { ans += hash_negative [ - difference ] ; hash_negative [ - difference ] ++ ; } else { ans += hash_positive [ difference ] ; hash_positive [ difference ] ++ ; } } return ans ; } public static void main ( String [ ] args ) { int [ ] arr = new int [ ] { 3 , 4 , 6 , 8 , 1 , 10 , 5 , 7 } ; int n = arr . length ; System . out . println ( \" Total ▁ Number ▁ of ▁ Even - Odd \" + \" ▁ subarrays ▁ are ▁ \" + countSubarrays ( arr , n ) ) ; } }"],"bleu":0.8259620341929179,"rouge_l":0.9226739467276617}
{"id":1581,"predictions":["import java . util . * ; class GFG { static int MAX = 1000000 ; static int [ ] prime = new int [ MAX + 1 ] ; static void sieve ( int [ ] ) { Arrays . fill ( prime , 0 ) ; prime [ 0 ] = prime [ 1 ] = false ; for ( int p = 2 ; p * p <= MAX ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i <= MAX ; i += p ) prime [ i ] = false ; } } } static int distinctSum ( int [ ] arr1 , int arr2 [ ] , int m , int n ) { sieve ( ) ; HashSet < Integer > sum = new HashSet < Integer > ( ) ; for ( int i = 0 ; i < m ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( prime . get ( arr1 [ i ] ) && prime . get ( arr2 [ j ] ) ) sumSet . add ( arr1 [ i ] + arr2 [ j ] ) ; } } return sumSet . size ( ) ; } public static void main ( String [ ] args ) { int arr1 [ ] = { 2 , 3 } ; int arr2 [ ] = { 2 , 2 , 4 , 7 } ; int m = arr1 . length ; int n = arr2 . length ; System . out . print ( distinctSum ( arr1 , arr2 , m , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static int MAX = 1000000 ; static boolean [ ] prime = new boolean [ MAX + 1 ] ; static void sieve ( ) { Arrays . fill ( prime , true ) ; prime [ 0 ] = prime [ 1 ] = false ; for ( int p = 2 ; p * p <= MAX ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * p ; i <= MAX ; i += p ) prime [ i ] = false ; } } } static int distinctSum ( int arr1 [ ] , int arr2 [ ] , int m , int n ) { sieve ( ) ; Set < Integer > sumSet = new HashSet < Integer > ( ) ; for ( int i = 0 ; i < m ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) if ( prime [ arr1 [ i ] ] && prime [ arr2 [ j ] ] ) sumSet . add ( arr1 [ i ] + arr2 [ j ] ) ; return sumSet . size ( ) ; } public static void main ( String [ ] args ) { int arr1 [ ] = { 2 , 3 } ; int arr2 [ ] = { 2 , 2 , 4 , 7 } ; int m = arr1 . length ; int n = arr2 . length ; System . out . println ( distinctSum ( arr1 , arr2 , m , n ) ) ; } }"],"bleu":0.8408221854371976,"rouge_l":0.943946562760924}
{"id":1582,"predictions":["import java . util . Arrays ; public class GFG { static void shufleArrayArrayArrayArray ( int a [ ] , int n ) { int n = n \/ 2 , start = n + 1 ; int j = n + 1 ; for ( int i = 0 ; i < n - 2 * n - 2 ; i ++ ) { if ( start == j ) { start -- ; j -- ; } int i = j > n ? 2 * i - 1 : 2 * i - 1 ; Arrays . sort ( ( j ) ; } } public static void main ( String [ ] args ) { int a [ ] = { - 1 , 1 , 3 , 5 , 7 , 2 , 4 , 6 , 8 } ; shufleArray ( a , a . length ) ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( a [ i ] + \" ▁ \" ) ; } }"],"references":["import java . io . * ; public class GFG { static void shufleArray ( int [ ] a , int n ) { int temp ; n = n \/ 2 ; for ( int start = n + 1 , j = n + 1 , done = 0 , i ; done < 2 * n - 2 ; done ++ ) { if ( start == j ) { start -- ; j -- ; } i = j > n ? j - n : j ; j = j > n ? 2 * i : 2 * i - 1 ; temp = a [ start ] ; a [ start ] = a [ j ] ; a [ j ] = temp ; } } static public void main ( String [ ] args ) { int [ ] a = { - 1 , 1 , 3 , 5 , 7 , 2 , 4 , 6 , 8 } ; int n = a . length ; shufleArray ( a , n ) ; for ( int i = 1 ; i < n ; i ++ ) System . out . print ( a [ i ] + \" ▁ \" ) ; } }"],"bleu":0.5894331088775944,"rouge_l":0.7587064676616916}
{"id":1583,"predictions":["import java . util . * ; class GFG { static int MAX = 100005 ; static int Min_Replace ( int arr [ ] , int n , int k ) { Arrays . sort ( arr ) ; int freq [ ] = new int [ MAX ] ; int p = 0 ; freq [ p ] = 1 ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] == arr [ i - 1 ] ) { freq [ p ] ++ ; } else { p ++ ; freq [ p ] ++ ; } } int ans = 0 ; for ( int i = k ; i <= p ; i ++ ) { ans += freq [ i ] ; } return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 7 , 8 , 2 , 3 , 2 , 3 } ; int n = arr . length ; int k = 2 ; System . out . println ( Min_Replace ( arr , n , k ) ) ; } }"],"references":["import java . util . * ; class GFG { static int MAX = 100005 ; static int Min_Replace ( int [ ] arr , int n , int k ) { Arrays . sort ( arr ) ; Integer [ ] freq = new Integer [ MAX ] ; Arrays . fill ( freq , 0 ) ; int p = 0 ; freq [ p ] = 1 ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] == arr [ i - 1 ] ) ++ freq [ p ] ; else ++ freq [ ++ p ] ; } Arrays . sort ( freq , Collections . reverseOrder ( ) ) ; int ans = 0 ; for ( int i = k ; i <= p ; i ++ ) ans += freq [ i ] ; return ans ; } public static void main ( String [ ] args ) { int [ ] arr = { 1 , 2 , 7 , 8 , 2 , 3 , 2 , 3 } ; int n = arr . length ; int k = 2 ; System . out . println ( Min_Replace ( arr , n , k ) ) ; } }"],"bleu":0.7740024472961294,"rouge_l":0.8924348089751364}
{"id":1584,"predictions":["class GFG { static int MAX = 500 ; static void factorial ( int prevFact [ ] , int prevFact , int n ) { for ( int x = ( prev + 1 ) ; x <= n ; x = multiply ( x , prevFact , size ) ; for ( int i = ( size - 1 ) ; i >= 0 ; i -- ) System . out . print ( prevFact [ i ] + \" ▁ \" ) ; System . out . print ( \" \\n \" ) ; } static void print ( int limit ) { if ( limit < 1 ) return ; int a = 1 ; int b = 1 , c = 2 ; System . out . print ( a + \" ▁ \" ) ; int prevFact [ ] = new int [ MAX ] ; prevFact [ 0 ] = 1 ; while ( c < limit ) { factorial ( prevFact [ i ] * x + carry ) ; a = b ; b = c ; c = d \/ 10 ; } } static void multiply ( int x , int prevFact [ ] , int size ) { int carry = 0 ; for ( int i = 0 ; i < size ; i ++ ) { int prod = prevFact [ i ] * x + carry ; prevFact [ i ] = prod % 10 ; carry = carry \/ 10 ; } } static void multiply ( int x , int prevFact [ ] , int size ) { int carry = 0 ; for ( int i = 0 ; i < size ; i ++ ) { int prod = prevFact [ i ] * x + carry ; prevFactorial ( size ) ; carry = carry \/ 10 ; size ++ ; } return size ; } public static void main ( String [ ] args ) { int limit = 20 ; printibibonacci ( limit ) ; } }"],"references":["import java . io . * ; class GFG { static int MAX = 500 ; static int size = 1 ; static void factorial ( int [ ] prevFact , int prev , int n ) { for ( int x = prev + 1 ; x <= n ; x ++ ) size = multiply ( x , prevFact , size ) ; for ( int i = size - 1 ; i >= 0 ; i -- ) System . out . print ( prevFact [ i ] ) ; System . out . print ( \" ▁ \" ) ; } static void printfibFactorials ( int limit ) { if ( limit < 1 ) return ; int a = 1 , b = 1 , c = 2 ; System . out . print ( a + \" ▁ \" + b + \" ▁ \" ) ; int [ ] prevFact = new int [ MAX ] ; prevFact [ 0 ] = 1 ; while ( c < limit ) { factorial ( prevFact , b , c ) ; a = b ; b = c ; c = a + b ; } } static int multiply ( int x , int [ ] prevFact , int size ) { int carry = 0 ; for ( int i = 0 ; i < size ; i ++ ) { int prod = prevFact [ i ] * x + carry ; prevFact [ i ] = prod % 10 ; carry = prod \/ 10 ; } while ( carry != 0 ) { prevFact [ size ] = carry % 10 ; carry = carry \/ 10 ; size ++ ; } return size ; } public static void main ( String args [ ] ) { int limit = 20 ; printfibFactorials ( limit ) ; } }"],"bleu":0.6919802047219901,"rouge_l":0.8266073194856577}
{"id":1585,"predictions":["import java . util . * ; class GFG { static int MAX = 3000 ; static int fastNumber ( int n ) { int [ ] primes = new int [ MAX ] ; ArrayList < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 2 ; i < MAX ; i ++ ) { if ( primes . get ( i ) == 0 ) { primes . set ( i ) ; int j = i * 2 ; while ( j < MAX ) { primes . remove ( j ) ; if ( ( primes . get ( j ) + 3 ) == 0 ) result . add ( j ) ; j = j + i ; } } } Collections . sort ( result ) ; return result . get ( n - 1 ) ; } public static void main ( String [ ] args ) { int n = 50 ; System . out . println ( fastNumber ( n ) ) ; } }"],"references":["import java . util . * ; import java . lang . * ; class GFG { static int MAX = 3000 ; public static int smartNumber ( int n ) { Integer [ ] primes = new Integer [ MAX ] ; Arrays . fill ( primes , new Integer ( 0 ) ) ; Vector < Integer > result = new Vector < > ( ) ; for ( int i = 2 ; i < MAX ; i ++ ) { if ( primes [ i ] == 0 ) { primes [ i ] = 1 ; for ( int j = i * 2 ; j < MAX ; j = j + i ) { primes [ j ] -= 1 ; if ( ( primes [ j ] + 3 ) == 0 ) result . add ( j ) ; } } } Collections . sort ( result ) ; return result . get ( n - 1 ) ; } public static void main ( String [ ] args ) { int n = 50 ; System . out . println ( smartNumber ( n ) ) ; } }"],"bleu":0.6646138850853778,"rouge_l":0.789845813101627}
{"id":1586,"predictions":["class GFG { static int countPairs ( int n ) { int count = 0 ; for ( int x = 1 ; x < n ; x ++ ) { for ( int y = x + 1 ; y <= n ; y ++ ) { if ( ( y + x ) % ( y ^ x ) == 0 ) count ++ ; } } return count ; } public static void main ( String [ ] args ) { int n = 6 ; System . out . println ( countPairs ( n ) ) ; } }"],"references":["class GFG { static int countPairs ( int n ) { int count = 0 ; for ( int x = 1 ; x < n ; x ++ ) { for ( int y = x + 1 ; y <= n ; y ++ ) { if ( ( y + x ) % ( y ^ x ) == 0 ) count ++ ; } } return count ; } public static void main ( String [ ] args ) { int n = 6 ; System . out . println ( countPairs ( n ) ) ; } }"],"bleu":1.0,"rouge_l":1.0}
{"id":1587,"predictions":["import java . util . * ; class GFG { static int AllIndexesRecursive ( int arr [ ] , int x , int start ) { if ( start == arr . length ) { ArrayList < Integer > ans = new ArrayList < Integer > ( ) ; ans . add ( start ) ; return ans ; } static int AllIndexes ( int input [ ] , int start , int start ) { int smallIndex = allIndex . size ( ) ; int smallIndex = new int [ start ] ; for ( int i = 0 ; i < smallIndex . length ; i ++ ) { myAns [ i + 1 ] = smallIndex . get ( i ) ; } if ( input [ start ] == x ) { int ans [ ] = new int [ smallIndex ] ; for ( int i = 0 ; i < smallIndex . size ( ) ; i ++ ) { myAns [ i + 1 ] = smallIndex . get ( i ) ; } return myIndex ; } else { return smallIndex ; } } static public void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 2 , 5 } ; int x = 2 ; int output = AllIndex ( arr , x ) ; for ( int i = 0 ; i < out . length ; i ++ ) { System . out . print ( i + \" ▁ \" ) ; } System . out . println ( \" \" ) ; } }"],"references":["public class GFG { public int [ ] AllIndexesRecursive ( int input [ ] , int x , int start ) { if ( start == input . length ) { int [ ] ans = new int [ 0 ] ; return ans ; } int [ ] smallIndex = AllIndexesRecursive ( input , x , start + 1 ) ; if ( input [ start ] == x ) { int [ ] myAns = new int [ smallIndex . length + 1 ] ; myAns [ 0 ] = start ; for ( int i = 0 ; i < smallIndex . length ; i ++ ) { myAns [ i + 1 ] = smallIndex [ i ] ; } return myAns ; } else { return smallIndex ; } } public int [ ] AllIndexes ( int input [ ] , int x ) { return AllIndexesRecursive ( input , x , 0 ) ; } public static void main ( String args [ ] ) { GFG g = new GFG ( ) ; int arr [ ] = { 1 , 2 , 3 , 2 , 2 , 5 } , x = 2 ; int output [ ] = g . AllIndexes ( arr , x ) ; for ( int i = 0 ; i < output . length ; i ++ ) { System . out . print ( output [ i ] + \" ▁ \" ) ; } } }"],"bleu":0.5277021190461808,"rouge_l":0.6495827624859882}
{"id":1588,"predictions":["class GFG { static int fib ( int n ) { double phi = ( 1 + Math . pow ( 5 , 1 ) ) \/ 2 ) ; return ( int ) Math . round ( ( Math . pow ( 5 , 1 ) ) \/ 2 ) ; } static int calculateSum ( int l , int r ) { int sum = 0 ; for ( int i = l ; i <= r ; i ++ ) sum += fib ( i ) ; return sum ; } public static void main ( String [ ] args ) { int l = 4 , r = 8 ; System . out . println ( calculateSum ( l , r ) ) ; } }"],"references":["import java . lang . Math ; class GFG { static int fib ( int n ) { double phi = ( 1 + Math . sqrt ( 5 ) ) \/ 2 ; return ( int ) Math . round ( Math . pow ( phi , n ) \/ Math . sqrt ( 5 ) ) ; } static int calculateSum ( int l , int r ) { int sum = 0 ; for ( int i = l ; i <= r ; i ++ ) sum += fib ( i ) ; return sum ; } public static void main ( String [ ] args ) { int l = 4 , r = 8 ; System . out . println ( calculateSum ( l , r ) ) ; } }"],"bleu":0.8264194774110807,"rouge_l":0.9021021755072111}
{"id":1589,"predictions":["class GfG { static int findSum ( int N ) { return ( N * ( N + 1 ) * ( 2 * N - 5 ) + 4 * N ) \/ 2 ; } public static void main ( String [ ] args ) { int N = 3 ; System . out . println ( findSum ( N ) ) ; } }"],"references":["import java . util . * ; class solution { static int findSum ( int N ) { return ( N * ( N + 1 ) * ( 2 * N - 5 ) + 4 * N ) \/ 2 ; } public static void main ( String arr [ ] ) { int N = 3 ; System . out . println ( findSum ( N ) ) ; } }"],"bleu":0.8251469920308402,"rouge_l":0.9138050241991243}
{"id":1590,"predictions":["class Sum { void sumOfPrevK ( int N , int K ) { arr [ 0 ] = 1 ; arr [ 0 ] = 1 ; for ( int i = 1 ; i < N ; i ++ ) { int j = i - 1 , count = 0 ; int sum = 0 ; while ( j >= 0 && count < K ) { sum = sum + arr [ j ] ; j -- ; count ++ ; } arr [ i ] = sum ; } for ( int i = 0 ; i < N ; i ++ ) System . out . print ( arr [ i ] ) ; } public static void main ( String [ ] args ) { int N = 10 , K = 4 ; sumOfPrevK ( N , K ) ; } }"],"references":["class Sum { void sumOfPrevK ( int N , int K ) { int arr [ ] = new int [ N ] ; arr [ 0 ] = 1 ; for ( int i = 1 ; i < N ; i ++ ) { int j = i - 1 , count = 0 , sum = 0 ; while ( j >= 0 && count < K ) { sum += arr [ j ] ; j -- ; count ++ ; } arr [ i ] = sum ; } for ( int i = 0 ; i < N ; i ++ ) { System . out . print ( arr [ i ] + \" ▁ \" ) ; } } public static void main ( String args [ ] ) { Sum s = new Sum ( ) ; int N = 10 , K = 4 ; s . sumOfPrevK ( N , K ) ; } }"],"bleu":0.7548387088406042,"rouge_l":0.8866096278734151}
{"id":1591,"predictions":["class GFG { static boolean productDivisible ( int n , int k ) { int product = 1 , position = 1 ; while ( n > 0 ) { if ( position % 2 == 0 ) product *= n % 10 ; n = n \/ 10 ; position ++ ; } if ( product % k == 0 ) return true ; return false ; } public static void main ( String [ ] args ) { int n = 321922 ; int k = 3 ; if ( productDivisible ( n , k ) ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ; } }"],"references":["class GFG { static boolean productDivisible ( int n , int k ) { int product = 1 , position = 1 ; while ( n > 0 ) { if ( position % 2 == 0 ) { product *= n % 10 ; } n = n \/ 10 ; position ++ ; } if ( product % k == 0 ) { return true ; } return false ; } public static void main ( String [ ] args ) { int n = 321922 ; int k = 3 ; if ( productDivisible ( n , k ) ) { System . out . println ( \" YES \" ) ; } else { System . out . println ( \" NO \" ) ; } } }"],"bleu":0.8613175318813829,"rouge_l":0.9633214467651553}
{"id":1592,"predictions":["import java . io . * ; class GFG { static int countPairs ( int N ) { int count = 0 ; for ( int i = 1 ; i <= ( int ) Math . pow ( N , i ) ; i ++ ) { int cb = i * i * i ; int diff = N - cb ; int cbrtDiff = ( int ) Math . pow ( diff , 1 \/ 3 ) ; if ( cbrtDiff * cbrtDiff == diff ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int i ; for ( i = 1 ; i <= 10 ; i ++ ) System . out . println ( \" For ▁ n ▁ = ▁ \" + i + \" , ▁ \" + countPairs ( i ) + \" ▁ pair ▁ exists \\n \" ) ; } }"],"references":["class Test { static int countPairs ( int N ) { int count = 0 ; for ( int i = 1 ; i <= Math . cbrt ( N ) ; i ++ ) { int cb = i * i * i ; int diff = N - cb ; int cbrtDiff = ( int ) Math . cbrt ( diff ) ; if ( cbrtDiff * cbrtDiff * cbrtDiff == diff ) count ++ ; } return count ; } public static void main ( String args [ ] ) { for ( int i = 1 ; i <= 10 ; i ++ ) System . out . println ( \" For ▁ n ▁ = ▁ \" + i + \" , ▁ \" + + countPairs ( i ) + \" ▁ pair ▁ exists \" ) ; } }"],"bleu":0.7622342842350031,"rouge_l":0.9045776918117345}
{"id":1593,"predictions":["import java . util . * ; class GFG { static Vector < Integer > prefix = new Vector < > ( ) ; static Vector < Integer > prefix = new Vector < > ( ) ; static void repeated_digit ( int n ) { Vector < Integer > prefix = new Vector < > ( ) ; while ( n != 0 ) { int d = n % 10 ; if ( s . contains ( d ) ) { return ; } a . add ( d ) ; n = n \/ 10 ; } return 1 ; } static void pre_calculation ( int MAX ) { Prefix . add ( repeated_digit ( 1 ) ) ; for ( int i = 2 ; i <= MAX ; i ++ ) { Prefix . add ( repeated_digit ( i ) ; } } static int calculate ( int L , int R ) { return ( Prefix . get ( R ) - Prefix ( ) ) ; } public static void main ( String [ ] args ) { int MAX = 1000 ; pre_calculculation ( MAX ) ; int L = 1 ; int R = 100 ; System . out . print ( calculate ( L , R ) ; } }"],"references":["import java . util . * ; class GFG { static int MAX = 100 ; static Vector < Integer > Prefix = new Vector < > ( ) ; static int repeated_digit ( int n ) { HashSet < Integer > a = new HashSet < > ( ) ; int d ; while ( n != 0 ) { d = n % 10 ; if ( a . contains ( d ) ) return 0 ; a . add ( d ) ; n \/= 10 ; } return 1 ; } static void pre_calculations ( ) { Prefix . add ( 0 ) ; Prefix . add ( repeated_digit ( 1 ) ) ; for ( int i = 2 ; i < MAX + 1 ; i ++ ) Prefix . add ( repeated_digit ( i ) + Prefix . elementAt ( i - 1 ) ) ; } static int calculate ( int L , int R ) { return Prefix . elementAt ( R ) - Prefix . elementAt ( L - 1 ) ; } public static void main ( String [ ] args ) { int L = 1 , R = 100 ; pre_calculations ( ) ; System . out . println ( calculate ( L , R ) ) ; } }"],"bleu":0.6408965797835591,"rouge_l":0.7891040804257836}
{"id":1594,"predictions":["import java . io . * ; class GFG { static boolean Competives ( int n ) { int i = 2 ; while ( true ) { if ( i > n ) return true ; if ( n % i == 0 ) return false ; n -= n \/ i ; i ++ ; } return false ; } public static void main ( String [ ] args ) { int n = 17 ; if ( Competives ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static boolean Survives ( int n ) { for ( int i = 2 ; ; i ++ ) { if ( i > n ) return true ; if ( n % i == 0 ) return false ; n -= n \/ i ; } } public static void main ( String [ ] args ) { int n = 17 ; if ( Survives ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.7746011555607528,"rouge_l":0.8888184985745962}
{"id":1595,"predictions":["import java . util . Arrays ; class GFG { static void maxPerimeter ( int arr [ ] , int n ) { int maxi = 0 ; for ( int i = 0 ; i < n - 2 ; i ++ ) { for ( int j = i + 1 ; j < n - 1 ; j ++ ) { for ( int k = j + 1 ; k < n ; k ++ ) { for ( int k = j + 1 ; k < n ; k ++ ) { int a = arr [ i ] ; int b = arr [ k ] ; int c = arr [ k ] ; if ( a < b + c && b < a + c && c < a + b ) { maxi = Math . max ( maxi , a + b + c ) ; } } } } } if ( maxi > 0 ) { System . out . println ( \" Triangle ▁ formation ▁ is ▁ not ▁ possible \" ) ; } else { System . out . println ( \" Maximum ▁ Perimeter ▁ is : ▁ \" + maxi ) ; } public static void main ( String [ ] args ) { int arr1 [ ] = { 6 , 1 , 6 , 5 , 8 , 4 } ; maxPerimeter ( arr1 , arr2 ) ; int arr2 [ ] = { 6 , 20 , 7 , 55 , 12 , 9 } ; maxPerimeter ( arr2 , 10 ) ; int arr3 [ ] = { 33 , 6 , 20 , 1 , 8 , 12 , 9 } ; maxPerimeter ( arr3 , arr3 ) ; } }"],"references":["import java . io . * ; class GFG { static void maxPerimeter ( int arr [ ] , int n ) { int maxi = 0 ; for ( int i = 0 ; i < n - 2 ; i ++ ) { for ( int j = i + 1 ; j < n - 1 ; j ++ ) { for ( int k = j + 1 ; k < n ; k ++ ) { int a = arr [ i ] ; int b = arr [ j ] ; int c = arr [ k ] ; if ( a < b + c && b < c + a && c < a + b ) { maxi = Math . max ( maxi , a + b + c ) ; } } } } if ( maxi > 0 ) System . out . println ( \" Maximum ▁ Perimeter ▁ is : ▁ \" + maxi ) ; else System . out . println ( \" Triangle ▁ formation ▁ \" + \" is ▁ not ▁ possible . \" ) ; } public static void main ( String [ ] args ) { int arr1 [ ] = { 6 , 1 , 6 , 5 , 8 , 4 } ; maxPerimeter ( arr1 , 6 ) ; int arr2 [ ] = { 2 , 20 , 7 , 55 , 1 , 33 , 12 , 4 } ; maxPerimeter ( arr2 , 8 ) ; int arr3 [ ] = { 33 , 6 , 20 , 1 , 8 , 12 , 5 , 55 , 4 , 9 } ; maxPerimeter ( arr3 , 10 ) ; } }"],"bleu":0.8342645125397581,"rouge_l":0.8774587260938266}
{"id":1596,"predictions":["import java . util . * ; class GFG { static boolean isPerfectSquare ( int x ) { double s = Math . sqrt ( x ) ; return ( s * s == x ) ; } static boolean isFibonacci ( int N ) { return isPerfectSquare ( 5 * N * N + 4 ) || isPerfectSquare ( 5 * N * N - 4 ) ; } static int nextNonFibonacci ( int N ) { if ( N <= 3 ) return 4 ; if ( isFibonacci ( N + 1 ) ) return N + 2 ; else return N ; } public static void main ( String [ ] args ) { int N = 3 ; System . out . println ( nextNonFibonacci ( N ) ) ; N = 4 ; System . out . println ( nextNonFibonacci ( N ) ) ; N = 7 ; System . out . println ( nextNonFibonacci ( N ) ) ; } }"],"references":["import java . util . * ; class GFG { static boolean isPerfectSquare ( int x ) { int s = ( int ) Math . sqrt ( x ) ; return ( s * s == x ) ; } static boolean isFibonacci ( int N ) { return isPerfectSquare ( 5 * N * N + 4 ) || isPerfectSquare ( 5 * N * N - 4 ) ; } static int nextNonFibonacci ( int N ) { if ( N <= 3 ) return 4 ; if ( isFibonacci ( N + 1 ) ) return N + 2 ; else return N + 1 ; } public static void main ( String [ ] args ) { int N = 3 ; System . out . print ( nextNonFibonacci ( N ) + \" \\n \" ) ; N = 5 ; System . out . print ( nextNonFibonacci ( N ) + \" \\n \" ) ; N = 7 ; System . out . print ( nextNonFibonacci ( N ) + \" \\n \" ) ; } }"],"bleu":0.7945985840139871,"rouge_l":0.915561694290976}
{"id":1597,"predictions":["class GFG { static boolean bit_check ( int n ) { if ( ( n & ( n - 1 ) ) == 0 ) return true ; return false ; } public static void main ( String [ ] args ) { int n = 14 ; if ( bit_check ( n ) == 0 ) System . out . println ( \"1\" ) ; else System . out . println ( \"0\" ) ; } }"],"references":["public class GFG { static boolean bit_check ( int n ) { if ( ( n & ( n - 1 ) ) == 0 ) return true ; return false ; } public static void main ( String args [ ] ) { int n = 14 ; if ( bit_check ( n ) ) System . out . println ( '1' ) ; else System . out . println ( '0' ) ; } }"],"bleu":0.8408193108696829,"rouge_l":0.9430326132994493}
{"id":1598,"predictions":["import java . io . * ; class GFG { static int center_ hexadecagonal_num ( int n ) { return 8 * n * n - 8 * n + 1 ; } public static void main ( String [ ] args ) { int n = 2 ; System . out . print ( n + \" th ▁ centered ▁ \" + \" hexadecagonal ▁ number ▁ : ▁ \" ) ; System . out . println ( center_exagonal_num ( n ) ) ; n = 12 ; System . out . print ( n + \" th ▁ centered ▁ \" + \" octadecagonal ▁ number ▁ : ▁ \" ) ; System . out . println ( center_exagonal_num ( n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int center_hexadecagonal_num ( int n ) { return 8 * n * n - 8 * n + 1 ; } public static void main ( String args [ ] ) { int n = 2 ; System . out . print ( n + \" th ▁ centered ▁ \" + \" hexadecagonal ▁ number : ▁ \" ) ; System . out . println ( center_hexadecagonal_num ( n ) ) ; n = 12 ; System . out . print ( n + \" th ▁ centered ▁ \" + \" hexadecagonal ▁ number : ▁ \" ) ; System . out . println ( center_hexadecagonal_num ( n ) ) ; } }"],"bleu":0.8468577548768209,"rouge_l":0.9510372374693984}
{"id":1599,"predictions":["import java . io . * ; class GFG { static void fib ( int n ) { int a = 0 , b = 1 ; if ( n >= 0 ) System . out . print ( a + \" ▁ \" ) ; if ( n >= 1 ) System . out . print ( b + \" ▁ \" ) ; for ( int i = 2 ; i <= n ; i ++ ) System . out . print ( a + b ) ; } public static void main ( String [ ] args ) { fib ( 9 ) ; } }"],"references":["import java . io . * ; class GFG { static void fib ( int n ) { int a = 0 , b = 1 ; if ( n >= 0 ) System . out . print ( a + \" ▁ \" ) ; if ( n >= 1 ) System . out . print ( b + \" ▁ \" ) ; for ( int i = 2 ; i <= n ; i ++ ) { System . out . print ( a + b + \" ▁ \" ) ; b = a + b ; a = b - a ; } } public static void main ( String [ ] args ) { fib ( 9 ) ; } }"],"bleu":0.8158830738281783,"rouge_l":0.9111963820748255}
{"id":1600,"predictions":["class GFG { static boolean prime ( int n ) { for ( int i = 2 ; i * i <= n ; i ++ ) if ( n % i == 0 ) return false ; return true ; } static void thirdNumber ( int a , int b ) { int sum = 0 , temp = a + b ; temp = 1 ; if ( ( sum & 1 ) != 0 ) temp = 2 ; while ( ( sum + temp ) != 0 ) temp += 2 ; System . out . println ( temp ) ; } public static void main ( String [ ] args ) { int a = 3 , b = 5 ; thirdNumber ( a , b ) ; } }"],"references":["import java . util . * ; class GFG { static boolean prime ( int n ) { for ( int i = 2 ; i * i <= n ; i ++ ) { if ( n % i == 0 ) return false ; } return true ; } static void thirdNumber ( int a , int b ) { int sum = 0 , temp = 0 ; sum = a + b ; temp = 1 ; if ( sum == 0 ) { temp = 2 ; } while ( ! prime ( sum + temp ) ) { temp += 2 ; } System . out . print ( temp ) ; } static public void main ( String [ ] arr ) { int a = 3 , b = 5 ; thirdNumber ( a , b ) ; } }"],"bleu":0.7100110389518635,"rouge_l":0.876134666207055}
{"id":1601,"predictions":["class GFG { static boolean isMinimum ( int a [ ] , int b [ ] , int c [ ] ) { return Math . min ( a , b ) <= c && c <= Math . max ( a , b ) ) ; } static boolean canFinish ( int [ ] x , int i , int j , int k ) { return ( x [ k ] == x [ i ] || x [ k ] == x [ j ] ) && isBoth ( y [ i ] , y [ k ] ) || ( y [ k ] == y [ j ] || y [ k ] == y [ j ] ) || ( y [ i ] == y [ i ] || y [ k ] == y [ j ] ) && isBoth ( x [ i ] , x [ j ] , x [ k ] ) ) ; } static int countSetSegments ( int x [ ] , int y [ ] ) { if ( ( x [ 0 ] == x [ 1 ] && x [ 1 ] == x [ 2 ] || y [ 1 ] == y [ 2 ] ) || ( y [ 0 ] == y [ 1 ] && y [ 1 ] == y [ 2 ] ) ) return 1 ; else return 3 ; } public static void main ( String [ ] args ) { int x [ ] = { - 1 , - 1 , 4 } ; int y [ ] = { - 1 , 3 , 3 } ; System . out . println ( countSplitSegments ( x , y ) ) ; } }"],"references":["import java . io . * ; class GFG { static boolean isBetween ( int a , int b , int c ) { return ( Math . min ( a , b ) <= c && c <= Math . max ( a , b ) ) ; } static boolean canJoin ( int x [ ] , int y [ ] , int i , int j , int k ) { return ( x [ k ] == x [ i ] || x [ k ] == x [ j ] ) && isBetween ( y [ i ] , y [ j ] , y [ k ] ) || ( y [ k ] == y [ i ] || y [ k ] == y [ j ] ) && isBetween ( x [ i ] , x [ j ] , x [ k ] ) ; } static int countLineSegments ( int x [ ] , int y [ ] ) { if ( ( x [ 0 ] == x [ 1 ] && x [ 1 ] == x [ 2 ] ) || ( y [ 0 ] == y [ 1 ] && y [ 1 ] == y [ 2 ] ) ) return 1 ; else if ( canJoin ( x , y , 0 , 1 , 2 ) || canJoin ( x , y , 0 , 2 , 1 ) || canJoin ( x , y , 1 , 2 , 0 ) ) return 2 ; else return 3 ; } public static void main ( String [ ] args ) { int x [ ] = new int [ 3 ] , y [ ] = new int [ 3 ] ; x [ 0 ] = - 1 ; y [ 0 ] = - 1 ; x [ 1 ] = - 1 ; y [ 1 ] = 3 ; x [ 2 ] = 4 ; y [ 2 ] = 3 ; System . out . println ( countLineSegments ( x , y ) ) ; } }"],"bleu":0.6368543271811948,"rouge_l":0.7337278106508875}
{"id":1602,"predictions":["class GFG { static void ReplaceElements ( int arr [ ] , int n ) { int min_ele = arr [ 0 ] ; arr [ 0 ] = - 1 ; for ( int i = 1 ; i < n ; ++ i ) { if ( min_ele < arr [ i ] ) { arr [ i ] = min_ele ; } else if ( min_ele >= arr [ i ] ) { int temp = arr [ i ] ; arr [ i ] = min_ele ; min_ele = temp ; } } } static public void main ( String [ ] args ) { int arr [ ] = { 4 , 5 , 2 , 1 , 7 , 6 } ; int n = arr . length ; ReplaceElements ( arr , n ) ; for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( arr [ i ] + \" ▁ \" ) ; } } }"],"references":["class GFG { static void ReplaceElements ( int arr [ ] , int n ) { int min_ele = arr [ 0 ] ; arr [ 0 ] = - 1 ; for ( int i = 1 ; i < n ; ++ i ) { if ( min_ele < arr [ i ] ) { arr [ i ] = min_ele ; } else if ( min_ele >= arr [ i ] ) { int temp = arr [ i ] ; arr [ i ] = min_ele ; min_ele = temp ; } } } public static void main ( String [ ] args ) { int arr [ ] = { 4 , 5 , 2 , 1 , 7 , 6 } ; int n = arr . length ; ReplaceElements ( arr , n ) ; for ( int i = 0 ; i < n ; ++ i ) { System . out . print ( arr [ i ] + \" ▁ \" ) ; } } }"],"bleu":0.9654445137227182,"rouge_l":0.9886363636363636}
{"id":1603,"predictions":["class GFG { static void printArray ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( arr [ i ] + \" ▁ \" ) ; } } static int getMin ( int arr [ ] , int i , int j ) { int minVal = arr [ i ] ; for ( int i = i + 1 ; i <= j ; i ++ ) { minVal = Math . min ( minVal , arr [ i ] ) ; } return minVal ; } static int getMax ( int arr [ ] , int i , int j ) { int maxVal = arr [ i ] ; for ( int i = 1 ; i <= j ; i ++ ) { maxVal = Math . max ( maxVal , arr [ i ] ) ; i ++ ; } return maxVal ; } static void generateArr ( int arr [ ] , int n ) { if ( n == 0 ) return ; if ( n == 1 ) { System . out . print ( arr [ 0 ] ) ; return ; } int tmpArr [ ] = new int [ n ] ; generateArr ( arr , 1 , n - 1 ) ; for ( int i = 1 ; i < n - 1 ; i ++ ) { tmpArr [ i ] = Math . abs ( getMax ( arr , i + 1 ) - getMin ( arr , 0 , n - 1 ) ) ; } tmpArr [ n - 1 ] = getMin ( arr , 0 , n - 2 ) ; printArray ( tmpArr , 0 , n ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 5 , 2 , 4 , 3 } ; int n = arr . length ; generateArr ( arr , n ) ; } }"],"references":["class GFG { static void printArray ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( arr [ i ] + \" ▁ \" ) ; } } static int getMin ( int arr [ ] , int i , int j ) { int minVal = arr [ i ++ ] ; while ( i <= j ) { minVal = Math . min ( minVal , arr [ i ] ) ; i ++ ; } return minVal ; } static int getMax ( int arr [ ] , int i , int j ) { int maxVal = arr [ i ++ ] ; while ( i <= j ) { maxVal = Math . max ( maxVal , arr [ i ] ) ; i ++ ; } return maxVal ; } static void generateArr ( int arr [ ] , int n ) { if ( n == 0 ) return ; if ( n == 1 ) { System . out . println ( arr [ 0 ] ) ; return ; } int tmpArr [ ] = new int [ n ] ; tmpArr [ 0 ] = getMax ( arr , 1 , n - 1 ) ; for ( int i = 1 ; i < n - 1 ; i ++ ) { tmpArr [ i ] = Math . abs ( getMax ( arr , i + 1 , n - 1 ) - getMin ( arr , 0 , i - 1 ) ) ; } tmpArr [ n - 1 ] = getMin ( arr , 0 , n - 2 ) ; printArray ( tmpArr , n ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 5 , 2 , 4 , 3 } ; int n = arr . length ; generateArr ( arr , n ) ; } }"],"bleu":0.8951369815525207,"rouge_l":0.9389430477167777}
{"id":1604,"predictions":["import java . util . * ; class GFG { public static int totEdge ( int n ) { int result = ( n * ( n - 1 ) ) \/ 2 ; return result ; } public static void main ( String [ ] args ) { int n = 6 ; System . out . println ( totEdge ( n ) ) ; } }"],"references":["class GFG { static int totEdge ( int n ) { int result = 0 ; result = ( n * ( n - 1 ) ) \/ 2 ; return result ; } public static void main ( String [ ] args ) { int n = 6 ; System . out . println ( totEdge ( n ) ) ; } }"],"bleu":0.8582896861263702,"rouge_l":0.914085914085914}
{"id":1605,"predictions":["class GFG { static int countNumbers ( int L , int R , int K ) { if ( K == 9 ) K = 0 ; int totaln = R - L + 1 ; int factor = totalnumbers % 9 ; int rem = total9 ; int ans = factor9 ; for ( int i = R ; i >= 0 ; i -- ) { rem1 = i % 9 ; if ( rem1 == K ) ans ++ ; } return ans ; } public static void main ( String [ ] args ) { int L = 10 , R = 22 ; int K = 3 ; System . out . println ( countNumbers ( L , R , K ) ) ; } }"],"references":["class GFG { static int countNumbers ( int L , int R , int K ) { if ( K == 9 ) { K = 0 ; } int totalnumbers = R - L + 1 ; int factor9 = totalnumbers \/ 9 ; int rem = totalnumbers % 9 ; int ans = factor9 ; for ( int i = R ; i > R - rem ; i -- ) { int rem1 = i % 9 ; if ( rem1 == K ) { ans ++ ; } } return ans ; } public static void main ( String [ ] args ) { int L = 10 ; int R = 22 ; int K = 3 ; System . out . println ( countNumbers ( L , R , K ) ) ; } }"],"bleu":0.7857539147128636,"rouge_l":0.9057597892467968}
{"id":1606,"predictions":["class GFG { static void SieveOfEratosthenes ( int n , boolean prime [ ] , boolean [ ] primes = new boolean [ n * n + 1 ] ; for ( int i = 2 ; i <= n ; i ++ ) prime [ i ] = true ; for ( int i = 2 ; i <= n ; i ++ ) primes [ i ] = false ; prime [ 1 ] = false ; for ( int p = 2 ; p * p <= n ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i <= n ; i += p ) prime [ i ] = false ; } p += 1 ; } } static int countDivisors ( int n , boolean prime [ ] ) { if ( n == 1 ) return 1 ; boolean [ ] prime = new boolean [ n + 2 ] ; for ( int p = 2 ; p * p <= n ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i <= n ; i += p * p ) prime [ i ] = false ; } } int j = 0 ; for ( int p = 2 ; p <= n ; p ++ ) if ( prime [ p ] == true ) { a [ j ] = false ; primes . add ( p ) ; } int ans = 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] * a [ i ] > n ) break ; int cnt = 1 ; while ( n % a [ i ] == 0 ) { n = n \/ a [ i ] ; cnt ++ ; } ans = ans * cnt ; i ++ ; } return ans ; } public static void main ( String [ ] args ) { int n = 2 ; System . out . println ( countDivisors ( n ) ) ; } }"],"references":["import java . io . * ; class GFG { static void SieveOfEratosthenes ( int n , boolean prime [ ] , boolean primesquare [ ] , int a [ ] ) { for ( int i = 2 ; i <= n ; i ++ ) prime [ i ] = true ; for ( int i = 0 ; i < ( ( n * n ) + 1 ) ; i ++ ) primesquare [ i ] = false ; prime [ 1 ] = false ; for ( int p = 2 ; p * p <= n ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i <= n ; i += p ) prime [ i ] = false ; } } int j = 0 ; for ( int p = 2 ; p <= n ; p ++ ) { if ( prime [ p ] ) { a [ j ] = p ; primesquare [ p * p ] = true ; j ++ ; } } } static int countDivisors ( int n ) { if ( n == 1 ) return 1 ; boolean prime [ ] = new boolean [ n + 1 ] ; boolean primesquare [ ] = new boolean [ ( n * n ) + 1 ] ; int a [ ] = new int [ n ] ; SieveOfEratosthenes ( n , prime , primesquare , a ) ; int ans = 1 ; for ( int i = 0 ; ; i ++ ) { if ( a [ i ] * a [ i ] * a [ i ] > n ) break ; int cnt = 1 ; while ( n % a [ i ] == 0 ) { n = n \/ a [ i ] ; cnt = cnt + 1 ; } ans = ans * cnt ; } if ( prime [ n ] ) ans = ans * 2 ; else if ( primesquare [ n ] ) ans = ans * 3 ; else if ( n != 1 ) ans = ans * 4 ; return ans ; } public static void main ( String args [ ] ) { System . out . println ( \" Total ▁ distinct ▁ divisors \" + \" ▁ of ▁ 100 ▁ are ▁ : ▁ \" + countDivisors ( 100 ) ) ; } }"],"bleu":0.6411429704400293,"rouge_l":0.6620609555849253}
{"id":1607,"predictions":["class GFG { static void subArray ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i ; j < n ; j ++ ) { for ( int k = i ; k < j ; k ++ ) System . out . print ( arr [ k ] + \" ▁ \" ) ; System . out . println ( \" \" ) ; } } } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 4 } ; int n = arr . length ; subArray ( arr , n ) ; } }"],"references":["class Test { static int arr [ ] = new int [ ] { 1 , 2 , 3 , 4 } ; static void subArray ( int n ) { for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i ; j < n ; j ++ ) { for ( int k = i ; k <= j ; k ++ ) System . out . print ( arr [ k ] + \" ▁ \" ) ; } } } public static void main ( String [ ] args ) { System . out . println ( \" All ▁ Non - empty ▁ Subarrays \" ) ; subArray ( arr . length ) ; } }"],"bleu":0.7992613554929328,"rouge_l":0.7175572519083969}
{"id":1608,"predictions":["class GFG { static int findCull ( int n ) { return ( 1 << n ) * n + 1 ; } public static void main ( String [ ] args ) { int n = 2 ; System . out . println ( findCull ( n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int findCullen ( int n ) { return ( 1 << n ) * n + 1 ; } public static void main ( String [ ] args ) { int n = 2 ; System . out . println ( findCullen ( n ) ) ; } }"],"bleu":0.7910173182482739,"rouge_l":0.8926829268292682}
{"id":1609,"predictions":["import java . io . * ; class GFG { static double printProbability ( int L , int n ) { double p = ( 1 << ( n - 1 ) ) ; return 1.0 - ( double ) n ; } public static void main ( String [ ] args ) { int n = 3 ; int L = 5 ; System . out . println ( printProbability ( L , n ) ) ; } }"],"references":["public class GFG { static double printProbability ( int L , int n ) { int p = ( 1 << ( n - 1 ) ) ; return 1.0 - ( ( double ) n ) \/ ( ( double ) p ) ; } public static void main ( String args [ ] ) { int n = 3 , L = 5 ; System . out . println ( printProbability ( L , n ) ) ; } }"],"bleu":0.744827030891479,"rouge_l":0.8499596122778676}
{"id":1610,"predictions":["class GFG { static String firstLetterWord ( String str ) { String result = \" \" ; boolean v = true ; for ( int i = 0 ; i < str . length ( ) ; ++ i ) { if ( str . charAt ( i ) == ' ▁ ' ) v = true ; else if ( str . charAt ( i ) != ' ▁ ' && v == true ) { result += ( str . charAt ( i ) ) ; v = false ; } } return result ; } public static void main ( String [ ] args ) { String str = \" geeks ▁ for ▁ geeks \" ; System . out . print ( firstLetter ( str ) ) ; } }"],"references":["class GFG { static String firstLetterWord ( String str ) { String result = \" \" ; boolean v = true ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { if ( str . charAt ( i ) == ' ▁ ' ) { v = true ; } else if ( str . charAt ( i ) != ' ▁ ' && v == true ) { result += ( str . charAt ( i ) ) ; v = false ; } } return result ; } public static void main ( String [ ] args ) { String str = \" geeks ▁ for ▁ geeks \" ; System . out . println ( firstLetterWord ( str ) ) ; } }"],"bleu":0.9082640885331088,"rouge_l":0.9690759155954403}
{"id":1611,"predictions":["import java . util . * ; class GFG { static String findprev ( char [ ] number , int n ) { char [ ] number = number . toCharArray ( ) ; int i = - 1 , j = - 1 ; for ( i = n - 1 ; i >= 1 ; i -- ) { if ( number [ i ] < number [ i - 1 ] ) break ; } if ( i == 0 ) { System . out . println ( \" Previous ▁ number ▁ is ▁ not ▁ possible \" ) ; return ; } int x = number [ i - 1 ] ; for ( int j = i ; j < n ; j ++ ) { if ( number [ j ] < x && number [ j ] > number [ j ] ) { maximum = j ; } } StringBuilder sb = new StringBuilder ( StringBuilder ( number ) ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( number [ j ] < x && number [ j ] > number [ i - 1 ] ) { max = j ; } } number += l ; return reverse ; } public static void main ( String [ ] args ) { char [ ] digits = { '26 ' ; int n = digits . length ( ) ; findprev ( digits , n ) ; } }"],"references":["import java . util . * ; class GFG { static void findPrevious ( char [ ] number , int n ) { int i , j ; for ( i = n - 1 ; i > 0 ; i -- ) { if ( number [ i ] < number [ i - 1 ] ) { break ; } } if ( i == 0 ) { System . out . print ( \" Previous ▁ number ▁ is ▁ not ▁ possible \" ) ; return ; } int x = number [ i - 1 ] , greatest = i ; for ( j = i ; j < n ; j ++ ) { if ( number [ j ] < x && number [ j ] > number [ greatest ] ) { greatest = j ; } } swap ( number , greatest , i - 1 ) ; Arrays . sort ( number , i , n ) ; reverse ( number , i , n - 1 ) ; System . out . print ( \" Greatest ▁ smaller ▁ number ▁ with \" + \" same ▁ set ▁ of ▁ digits ▁ is ▁ \" + String . valueOf ( number ) ) ; return ; } static String swap ( char [ ] ch , int i , int j ) { char temp = ch [ i ] ; ch [ i ] = ch [ j ] ; ch [ j ] = temp ; return String . valueOf ( ch ) ; } static void reverse ( char str [ ] , int start , int end ) { char temp ; while ( start <= end ) { temp = str [ start ] ; str [ start ] = str [ end ] ; str [ end ] = temp ; start ++ ; end -- ; } } public static void main ( String [ ] args ) { String digits = \"262345\" ; int n = digits . length ( ) ; findPrevious ( digits . toCharArray ( ) , n ) ; } }"],"bleu":0.42490463380115084,"rouge_l":0.5970940606678561}
{"id":1612,"predictions":["class GFG { static int countDecreasing ( int A [ ] , int n ) { int cnt = 0 , len = 1 ; for ( int i = 0 ; i < n - 1 ; ++ i ) { if ( A [ i + 1 ] < A [ i ] ) len ++ ; else { cnt += ( ( ( len - 1 ) * len ) \/ 2 ) ; len = 1 ; } } if ( len > 1 ) cnt += ( ( ( len - 1 ) * len ) \/ 2 ) ; return cnt ; } public static void main ( String [ ] args ) { int A [ ] = { 100 , 3 , 1 , 13 } ; int n = A . length ; System . out . println ( countDecreasing ( A , n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int countDecreasing ( int A [ ] , int n ) { int cnt = 0 ; int len = 1 ; for ( int i = 0 ; i < n - 1 ; ++ i ) { if ( A [ i + 1 ] < A [ i ] ) len ++ ; else { cnt += ( ( ( len - 1 ) * len ) \/ 2 ) ; len = 1 ; } } if ( len > 1 ) cnt += ( ( ( len - 1 ) * len ) \/ 2 ) ; return cnt ; } public static void main ( String [ ] args ) { int A [ ] = { 100 , 3 , 1 , 13 } ; int n = A . length ; System . out . println ( countDecreasing ( A , n ) ) ; } }"],"bleu":0.9354644524223245,"rouge_l":0.9648398146282489}
{"id":1613,"predictions":["import java . io . * ; class GFG { static int count ( int n ) { if ( n == 0 ) return 1 ; if ( n == 1 ) return 1 ; else return ( n * count ( n - 1 ) ) + ( ( n - 2 ) * count ( n - 2 ) ) ; } public static void main ( String [ ] args ) { int A [ ] = { 1 , 2 , 3 , 9 } ; System . out . println ( count ( A ) - 1 ) ; } }"],"references":["import java . util . * ; class GFG { static int count ( int n ) { if ( n == 0 ) return 1 ; if ( n == 1 ) return 1 ; else return ( n * count ( n - 1 ) ) + ( ( n - 1 ) * count ( n - 2 ) ) ; } public static void main ( String [ ] args ) { int A [ ] = { 1 , 2 , 3 , 9 } ; int n = 4 ; System . out . println ( count ( n - 1 ) ) ; } }"],"bleu":0.8651275595773359,"rouge_l":0.9367824660802146}
{"id":1614,"predictions":["import java . util . * ; import java . lang . * ; class GFG { public static void splitAndWithAdded ( int [ ] A , int length , int rotation ) { int tmp [ ] = new int [ length * 2 ] ; tmp [ 0 ] = A [ i ] ; for ( int i = 0 ; i < length ; i ++ ) { tmp [ i ] = A [ i ] ; tmp [ i + length ] = A [ i ] ; } for ( int i = rotation ; i < length ; i ++ ) { A [ i - rotation ] = tmp [ i ] ; } } public static void main ( String [ ] args ) { int [ ] arr = new int [ ] { 12 , 10 , 5 , 6 , 52 , 36 } ; int position = 2 ; int position = 2 ; splitAndAdded ( arr , position ) ; for ( int i = 0 ; i < n ; ++ i ) System . out . print ( arr [ i ] + \" ▁ \" ) ; } }"],"references":["import java . util . * ; import java . lang . * ; class GFG { public static void SplitAndAdd ( int [ ] A , int length , int rotation ) { int [ ] tmp = new int [ length * 2 ] ; System . arraycopy ( A , 0 , tmp , 0 , length ) ; System . arraycopy ( A , 0 , tmp , length , length ) ; for ( int i = rotation ; i < rotation + length ; i ++ ) A [ i - rotation ] = tmp [ i ] ; } public static void main ( String [ ] args ) { int arr [ ] = { 12 , 10 , 5 , 6 , 52 , 36 } ; int n = arr . length ; int position = 2 ; SplitAndAdd ( arr , n , position ) ; for ( int i = 0 ; i < n ; ++ i ) System . out . print ( arr [ i ] + \" ▁ \" ) ; } }"],"bleu":0.6516044906609351,"rouge_l":0.7892979380582688}
{"id":1615,"predictions":["class GFG { static int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } static void gDiv ( int a , int b ) { int n = gcd ( a , b ) ; a = a \/ n ; b = b \/ n ; System . out . println ( \" A ▁ = ▁ \" + a + \" , ▁ B ▁ = ▁ \" + b ) ; } public static void main ( String [ ] args ) { int a = 10 , b = 15 ; gDiv ( a , b ) ; } }"],"references":["class GFG { static int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } static void commDiv ( int a , int b ) { int n = gcd ( a , b ) ; a = a \/ n ; b = b \/ n ; System . out . println ( \" A ▁ = ▁ \" + a + \" , ▁ B ▁ = ▁ \" + b ) ; } public static void main ( String [ ] args ) { int a = 10 , b = 15 ; commDiv ( a , b ) ; } }"],"bleu":0.9591689414651289,"rouge_l":0.9838709677419355}
{"id":1616,"predictions":["import java . io . * ; class GFG { static int adjacentSet ( int n ) { return ( n & ( n >> 1 ) ) ; } public static void main ( String [ ] args ) { int n = 3 ; if ( adjacentSet ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["class GFG { static boolean adjacentSet ( int n ) { int x = ( n & ( n >> 1 ) ) ; if ( x == 1 ) return true ; else return false ; } public static void main ( String args [ ] ) { int n = 3 ; if ( adjacentSet ( n ) ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"bleu":0.7169719211419368,"rouge_l":0.8220372572334523}
{"id":1617,"predictions":["import java . io . * ; class GFG { static int MinimumMoves ( int a [ ] , int n , int x ) { int ans = 0 ; for ( int i = 1 ; i < n ; i ++ ) { if ( a [ i ] <= a [ i - 1 ] ) { int p = ( a [ i - 1 ] - a [ i ] ) \/ x + 1 ; ans += p * x ; } } return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 3 , 3 , 2 } ; int x = 2 ; int n = arr . length ; System . out . print ( MinimumMoves ( arr , n , x ) ) ; } }"],"references":["import java . util . * ; import java . lang . * ; import java . io . * ; class GFG { static int MinimumMoves ( int a [ ] , int n , int x ) { int ans = 0 ; for ( int i = 1 ; i < n ; i ++ ) { if ( a [ i ] <= a [ i - 1 ] ) { int p = ( a [ i - 1 ] - a [ i ] ) \/ x + 1 ; ans += p ; a [ i ] += p * x ; } } return ans ; } public static void main ( String args [ ] ) { int arr [ ] = { 1 , 3 , 3 , 2 } ; int x = 2 ; int n = arr . length ; System . out . println ( MinimumMoves ( arr , n , x ) ) ; } }"],"bleu":0.8325675123710726,"rouge_l":0.9113668483747224}
{"id":1618,"predictions":["import java . io . * ; class GFG { static double avg_of_even_num ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum = sum + 2 * i ; return sum \/ n ; } public static void main ( String [ ] args ) { int n = 9 ; System . out . println ( avg_of_even_num ( n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int avg_of_even_num ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += 2 * i ; return ( sum \/ n ) ; } public static void main ( String [ ] args ) { int n = 9 ; System . out . print ( avg_of_even_num ( n ) ) ; } }"],"bleu":0.8406682067946913,"rouge_l":0.9382716049382718}
{"id":1619,"predictions":["class GFG { static int findX ( int A , int B ) { int j = 0 ; int x = 0 ; while ( A | B ) { if ( ( A & 1 ) & 1 ) { x += ( 1 << 1 ) ; } A >>= 1 ; B >>= 1 ; j ++ ; } return x ; } public static void main ( String [ ] args ) { int A = 2 , B = 3 ; X = findX ( A , B ) ; System . out . println ( \" X ▁ = ▁ \" + X + \" , ▁ Sum ▁ = ▁ \" + ( A ^ X ) ) ; } }"],"references":["class GFG { static int findX ( int A , int B ) { int j = 0 , x = 0 ; while ( A != 0 || B != 0 ) { if ( ( A % 2 == 1 ) && ( B % 2 == 1 ) ) { x += ( 1 << j ) ; } A >>= 1 ; B >>= 1 ; j += 1 ; } return x ; } public static void main ( String [ ] args ) { int A = 2 , B = 3 ; int X = findX ( A , B ) ; System . out . println ( \" X ▁ = ▁ \" + X + \" , ▁ Sum ▁ = ▁ \" + ( ( A ^ X ) + ( B ^ X ) ) ) ; } }"],"bleu":0.7219471553013201,"rouge_l":0.862840579710145}
{"id":1620,"predictions":["class GFG { static int MAX = 1000001 ; static int factor [ ] ; static void cal_factor ( ) { factor [ 1 ] = 1 ; for ( int i = 2 ; i < MAX ; i += 2 ) factor [ i ] = i ; for ( int i = 4 ; i < MAX ; i += 2 ) factor [ i ] = 2 ; for ( int i = 3 ; i < MAX ; i += 2 ) { if ( factor [ i ] == i ) { for ( int j = i * i ; j < MAX ; j += i ) { if ( factor [ j ] == j ) factor [ j ] = i ; } } } } static int no_of_representations ( int a [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int temp = a [ i ] ; int flag = 0 ; while ( factor [ temp ] != 1 ) { flag = - 1 ; count ++ ; temp = temp \/ factor [ temp ] ; } count += flag ; } return count ; } public static void main ( String [ ] args ) { cal_factor ( ) ; int a [ ] = { 4 , 4 , 4 } ; int n = a . length ; System . out . println ( no_of_factor ( a , n ) ) ; } }"],"references":["class GFG { static final int MAX = 1000001 ; static int factor [ ] = new int [ MAX ] ; static void cal_factor ( ) { factor [ 1 ] = 1 ; for ( int i = 2 ; i < MAX ; i ++ ) factor [ i ] = i ; for ( int i = 4 ; i < MAX ; i += 2 ) factor [ i ] = 2 ; for ( int i = 3 ; i * i < MAX ; i ++ ) { if ( factor [ i ] == i ) { for ( int j = i * i ; j < MAX ; j += i ) { if ( factor [ j ] == j ) factor [ j ] = i ; } } } } static int no_of_representations ( int a [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int temp = a [ i ] ; int flag = 0 ; while ( factor [ temp ] != 1 ) { flag = - 1 ; count ++ ; temp = temp \/ factor [ temp ] ; } count += flag ; } return count ; } public static void main ( String [ ] args ) { cal_factor ( ) ; int a [ ] = { 4 , 4 , 4 } ; int n = a . length ; System . out . print ( no_of_representations ( a , n ) ) ; } }"],"bleu":0.9224939932339731,"rouge_l":0.9630426982418372}
{"id":1621,"predictions":["class GFG { static int maxSumPair ( int arr1 [ ] , int n1 [ ] arr2 , int arr2 [ ] ) { int max1 = Integer . MIN_VALUE ; int max2 = Integer . MIN_VALUE ; for ( int i = 0 ; i < n1 ; i ++ ) { if ( arr1 [ i ] > max1 ) max1 = arr1 [ i ] ; } for ( int i = 0 ; i < n2 ; i ++ ) { if ( arr2 [ i ] > max2 ) max2 = arr2 [ i ] ; } return max1 + max2 ; } public static void main ( String [ ] args ) { int arr1 [ ] = { 10 , 2 , 3 } ; int arr2 [ ] = { 3 , 4 , 7 } ; int n1 = arr1 . length ; int n2 = arr2 . length ; System . out . println ( maxSumPair ( arr1 , n1 , arr2 , n2 ) ) ; } }"],"references":["public class AAB { static int maxSumPair ( int arr1 [ ] , int n1 , int arr2 [ ] , int n2 ) { int max1 = Integer . MIN_VALUE ; int max2 = Integer . MIN_VALUE ; for ( int i = 0 ; i < n1 ; i ++ ) { if ( arr1 [ i ] > max1 ) max1 = arr1 [ i ] ; } for ( int i = 0 ; i < n2 ; i ++ ) { if ( arr2 [ i ] > max2 ) max2 = arr2 [ i ] ; } return max1 + max2 ; } public static void main ( String [ ] args ) { int arr1 [ ] = { 10 , 2 , 3 } ; int arr2 [ ] = { 3 , 4 , 7 } ; int n1 = arr1 . length ; int n2 = arr2 . length ; System . out . println ( maxSumPair ( arr1 , n1 , arr2 , n2 ) ) ; } }"],"bleu":0.9510493421476265,"rouge_l":0.9744408945686899}
{"id":1622,"predictions":["import java . io . * ; class GFG { static int remainder ( String str ) { int len = str . length ( ) , rem = 0 ; for ( int i = 0 ; i < len ; i ++ ) { int num = rem * 10 + ( str . charAt ( i ) - '0' ) ; rem = num % 11 ; } return rem ; } public static void main ( String [ ] args ) { StringBuilder str = new StringBuilder ( ) ; System . out . println ( remainder ( str ) ) ; } }"],"references":["import java . io . * ; class GFG { static int remainder ( String str ) { int len = str . length ( ) ; int num , rem = 0 ; for ( int i = 0 ; i < len ; i ++ ) { num = rem * 10 + ( str . charAt ( i ) - '0' ) ; rem = num % 11 ; } return rem ; } public static void main ( String args [ ] ) { String str = \"3435346456547566345436457867978\" ; System . out . println ( remainder ( str ) ) ; } }"],"bleu":0.8669291726994464,"rouge_l":0.9403235653235652}
{"id":1623,"predictions":["class GFG { static void printArr ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + \" ▁ \" ) ; } static void randomList ( int m ) { int [ ] arr = new int [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] % m ] ++ ; } printArr ( arr , m ) ; } public static void main ( String [ ] args ) { int m = 4 , n = 8 ; randomList ( ) ; } }"],"references":["class GFG { static void printArr ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + \" ▁ \" ) ; } static void randomList ( int m , int n ) { int arr [ ] = new int [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ ( int ) ( Math . random ( ) * m ) ] ++ ; } printArr ( arr , m ) ; } public static void main ( String args [ ] ) { int m = 4 , n = 8 ; randomList ( m , n ) ; } }"],"bleu":0.785189573136753,"rouge_l":0.9004797638085867}
{"id":1624,"predictions":["import java . util . * ; class GFG { static int N = 100005 ; static boolean [ ] prime = new boolean [ N + 1 ] ; static void SieveOfEratosthenes ( boolean prime [ ] , int p_size ) { prime [ 0 ] = false ; prime [ 1 ] = false ; for ( int p = 2 ; p * p <= p_size ; p ++ ) { if ( prime [ p ] ) { for ( int i = p * 2 ; i <= p_size ; i += p ) prime [ i ] = false ; } } } static int longestPrimeSubsequence ( int arr [ ] , int n ) { boolean [ ] prime = new boolean [ N + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) prime [ arr [ i ] ] = true ; int answer = 0 ; for ( int i = 0 ; i < n ; i ++ ) if ( prime [ arr [ i ] ] ) answer ++ ; return answer ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 4 , 11 , 2 , 9 , 21 } ; int n = arr . length ; System . out . print ( longestPrimeSubsequence ( arr , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static final int N = 100005 ; static void SieveOfEratosthenes ( boolean prime [ ] , int p_size ) { prime [ 0 ] = false ; prime [ 1 ] = false ; for ( int p = 2 ; p * p <= p_size ; p ++ ) { if ( prime [ p ] ) { for ( int i = p * 2 ; i <= p_size ; i += p ) prime [ i ] = false ; } } } static int longestPrimeSubsequence ( int arr [ ] , int n ) { boolean [ ] prime = new boolean [ N + 1 ] ; Arrays . fill ( prime , true ) ; SieveOfEratosthenes ( prime , N ) ; int answer = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( prime [ arr [ i ] ] ) { answer ++ ; } } return answer ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 4 , 11 , 2 , 9 , 21 } ; int n = arr . length ; System . out . print ( longestPrimeSubsequence ( arr , n ) + \" \\n \" ) ; } }"],"bleu":0.8200268283893485,"rouge_l":0.8904502046384721}
{"id":1625,"predictions":["class GFG { static int catalan ( int n ) { if ( n <= 1 ) return 1 ; int res = 0 ; for ( int i = 0 ; i < n ; i ++ ) res += catalan ( i ) * catalan ( n - i - 1 ) ; return res ; } public static void main ( String [ ] args ) { for ( int i = 0 ; i < 10 ; i ++ ) System . out . print ( catalan ( i ) + \" ▁ \" ) ; } }"],"references":["class CatalnNumber { int catalan ( int n ) { int res = 0 ; if ( n <= 1 ) { return 1 ; } for ( int i = 0 ; i < n ; i ++ ) { res += catalan ( i ) * catalan ( n - i - 1 ) ; } return res ; } public static void main ( String [ ] args ) { CatalnNumber cn = new CatalnNumber ( ) ; for ( int i = 0 ; i < 10 ; i ++ ) { System . out . print ( cn . catalan ( i ) + \" ▁ \" ) ; } } }"],"bleu":0.7184250211242366,"rouge_l":0.8569949719018042}
{"id":1626,"predictions":["class GFG { static int smallestIndex ( int a [ ] , int n ) { int right1 = 0 , right0 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == 1 ) right1 = i ; else right0 = i ; } return Math . min ( right1 , right0 ) ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 1 , 1 , 0 , 0 , 1 , 0 , 1 } ; int n = a . length ; System . out . println ( smallestIndex ( a , n ) ) ; } }"],"references":["class GFG { static int smallestIndex ( int [ ] a , int n ) { int right1 = 0 , right0 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == 1 ) right1 = i ; else right0 = i ; } return Math . min ( right1 , right0 ) ; } public static void main ( String [ ] args ) { int [ ] a = { 1 , 1 , 1 , 0 , 0 , 1 , 0 , 1 , 1 } ; int n = a . length ; System . out . println ( smallestIndex ( a , n ) ) ; } }"],"bleu":0.9268404781781815,"rouge_l":0.9751886430489833}
{"id":1627,"predictions":["import java . io . * ; class GFG { public static double polygonArea ( double [ ] X , double Y [ ] , double n ) { double area = 0.0 ; int j = n - 1 ; for ( int i = 0 ; i < n ; i ++ ) { area = area + ( X [ j ] + X [ i ] ) * ( Y [ j ] - Y [ i ] ) ; j = i ; } return Math . abs ( area \/ 2.0 ) ; } public static void main ( String [ ] args ) { double X [ ] = { 0 , 2 , 4 } ; double Y [ ] = { 1 , 3 , 7 } ; int n = 3 ; System . out . println ( polygonArea ( X , Y , n ) ) ; } }"],"references":["import java . io . * ; import java . math . * ; class GFG { static double polygonArea ( double X [ ] , double Y [ ] , int n ) { double area = 0.0 ; int j = n - 1 ; for ( int i = 0 ; i < n ; i ++ ) { area += ( X [ j ] + X [ i ] ) * ( Y [ j ] - Y [ i ] ) ; j = i ; } return Math . abs ( area \/ 2.0 ) ; } public static void main ( String [ ] args ) { double X [ ] = { 0 , 2 , 4 } ; double Y [ ] = { 1 , 3 , 7 } ; int n = X . length ; System . out . println ( polygonArea ( X , Y , n ) ) ; } }"],"bleu":0.8714940331077243,"rouge_l":0.9355453087409783}
{"id":1628,"predictions":["import java . io . * ; class GFG { static double PI = 3.14 ; static double areaOfInscribed ( int a ) { return ( PI \/ 4 ) * a * a ; } public static void main ( String [ ] args ) { int a = 8 ; System . out . println ( \" Area ▁ of ▁ \" + areaOfInscribed ( a ) ) ; } }"],"references":["import java . io . * ; class GFG { static double PI = 3.14 ; static double areaOfInscribedCircle ( float a ) { return ( PI \/ 4 ) * a * a ; } public static void main ( String [ ] args ) { float a = 8 ; System . out . println ( \" Area ▁ of ▁ an ▁ inscribed \" + \" ▁ circle : ▁ \" + areaOfInscribedCircle ( a ) ) ; } }"],"bleu":0.7487771504892216,"rouge_l":0.8745065447745687}
{"id":1629,"predictions":["import java . io . * ; class GFG { static int divisorSum ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j * j <= i ; j ++ ) { if ( i % j == 0 ) { if ( i \/ j == j ) sum += j ; else sum += j + i \/ j ; } } } return sum ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( divisorSum ( n ) ) ; n = 5 ; System . out . println ( divisorSum ( n ) ) ; } }"],"references":["import java . io . * ; class GFG { static int divisorSum ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; j * j <= i ; ++ j ) { if ( i % j == 0 ) { if ( i \/ j == j ) sum += j ; else sum += j + i \/ j ; } } } return sum ; } public static void main ( String args [ ] ) { int n = 4 ; System . out . println ( divisorSum ( n ) ) ; n = 5 ; System . out . println ( divisorSum ( n ) ) ; } }"],"bleu":0.9295302332483223,"rouge_l":0.9782608695652174}
{"id":1630,"predictions":["class GFG { static int MAX = 32 ; static int countSetBits ( int n ) { int count = 0 ; while ( n > 0 ) { n &= ( n - 1 ) ; count ++ ; } return count ; } static int pairs ( int arr [ ] , int n , int k ) { int count = 0 ; int f [ ] = new int [ MAX + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) { f [ countSetBits ( arr [ i ] ) ++ ; } for ( int i = 0 ; i < MAX + 1 ; i ++ ) { for ( int j = 1 ; j <= MAX ; j ++ ) { if ( i + j == k ) { if ( i == j ) count += ( f [ i ] * ( f [ i ] - 1 ) ) \/ 2 ) ; else count += ( f [ i ] * f [ j ] ) ; } } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 } ; int n = arr . length ; int k = 4 ; System . out . println ( pairs ( arr , n , k ) ) ; } }"],"references":["import java . util . * ; class GFG { static int MAX = 32 ; static int countSetBits ( int n ) { int count = 0 ; while ( n > 0 ) { n &= ( n - 1 ) ; count ++ ; } return count ; } static int pairs ( int arr [ ] , int n , int k ) { int count = 0 ; int [ ] f = new int [ MAX + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) f [ countSetBits ( arr [ i ] ) ] ++ ; for ( int i = 0 ; i <= MAX ; i ++ ) { for ( int j = i ; j <= MAX ; j ++ ) { if ( i + j == k ) { if ( i == j ) count += ( ( f [ i ] * ( f [ i ] - 1 ) ) \/ 2 ) ; else count += ( f [ i ] * f [ j ] ) ; } } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 } ; int n = arr . length ; int k = 4 ; System . out . println ( pairs ( arr , n , k ) ) ; } }"],"bleu":0.9091481159136409,"rouge_l":0.9612734464718643}
{"id":1631,"predictions":["class GFG { static int oneDigit ( int num ) { return ( ( num >= 0 ) && ( num < 10 ) ) ; } static boolean isPalindUtil ( int num , int dupNum ) { if ( oneDigit ( num ) > 0 ) return ( num == ( dupNum ) ) ; if ( isPalindil ( num \/ 10 ) == false ) return - 1 ; return ( num % 10 == ( dupNum ) % 10 ; } static boolean isPal ( int num ) { if ( num < 0 ) num = ( - num ) ; int dupNum = ( num ) ; return isPalindUtil ( num , dupNum ) ; } public static void main ( String [ ] args ) { int n = 12321 ; if ( isPal ( n ) == false ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; n = 12 ; if ( isPal ( n ) == true ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; n = 8 ; if ( isPal ( n ) == 0 ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; n = 8999 ; if ( isPal ( n ) == 0 ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . io . * ; import java . util . * ; public class CheckPallindromNumberRecursion { public static int oneDigit ( int num ) { if ( ( num >= 0 ) && ( num < 10 ) ) return 1 ; else return 0 ; } public static int isPalUtil ( int num , int dupNum ) throws Exception { if ( num == 0 ) { return dupNum ; } else { dupNum = isPalUtil ( num \/ 10 , dupNum ) ; } if ( num % 10 == dupNum % 10 ) { return dupNum \/ 10 ; } else { throw new Exception ( ) ; } } public static int isPal ( int num ) throws Exception { if ( num < 0 ) num = ( - num ) ; int dupNum = ( num ) ; return isPalUtil ( num , dupNum ) ; } public static void main ( String args [ ] ) { int n = 1242 ; try { isPal ( n ) ; System . out . println ( \" Yes \" ) ; } catch ( Exception e ) { System . out . println ( \" No \" ) ; } n = 1231 ; try { isPal ( n ) ; System . out . println ( \" Yes \" ) ; } catch ( Exception e ) { System . out . println ( \" No \" ) ; } n = 12 ; try { isPal ( n ) ; System . out . println ( \" Yes \" ) ; } catch ( Exception e ) { System . out . println ( \" No \" ) ; } n = 88 ; try { isPal ( n ) ; System . out . println ( \" Yes \" ) ; } catch ( Exception e ) { System . out . println ( \" No \" ) ; } n = 8999 ; try { isPal ( n ) ; System . out . println ( \" Yes \" ) ; } catch ( Exception e ) { System . out . println ( \" No \" ) ; } } }"],"bleu":0.45840748806350035,"rouge_l":0.6715103478643769}
{"id":1632,"predictions":["class GFG { static boolean isSumDivides ( int N ) { int temp = N ; int sum = 0 ; while ( temp != 0 ) { sum += temp % 10 ; temp \/= 10 ; } if ( N % sum == 0 ) return true ; else return false ; } public static void main ( String [ ] args ) { int N = 12 ; if ( isSumDivides ( N ) ) System . out . println ( \" YES \" ) ; else System . out . println ( \" NO \" ) ; } }"],"references":["import java . util . * ; import java . lang . * ; class GFG { static int isSumDivides ( int N ) { int temp = N ; int sum = 0 ; while ( temp > 0 ) { sum += temp % 10 ; temp \/= 10 ; } if ( N % sum == 0 ) return 1 ; else return 0 ; } public static void main ( String args [ ] ) { int N = 12 ; if ( isSumDivides ( N ) == 1 ) System . out . print ( \" YES \" ) ; else System . out . print ( \" NO \" ) ; } }"],"bleu":0.6827708853126315,"rouge_l":0.8537687709578655}
{"id":1633,"predictions":["class GFG { static int nextZero ( int i , int occurrences [ ] ) { while ( i < 26 ) { if ( occurrences [ i ] == 0 ) { return i ; i ++ ; } } return - 1 ; } static void getModString ( String str ) { int n = str . length ( ) ; if ( n > 26 ) return ; char ch = str . charAt ( 0 ) ; char [ ] ch = new char [ 26 ] ; for ( int i = 0 ; i < n ; i ++ ) { ch [ ch . charAt ( i ) - ' a ' ] ++ ; } int index = nextZero ( ch ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( occ [ ch - ' a ' ] > 1 ) { occurrences [ ch [ i ] -- ; ch [ i ] = ( char ) ( ch [ ch - ' a ' + index ) ; } } } System . out . println ( ch ) ; } public static void main ( String args [ ] ) { String str = \" geeksforgeeks \" ; getModmodified ( str ) ; } }"],"references":["class GFG { static int nextZero ( int i , int occurrences [ ] ) { while ( i < occurrences . length ) { if ( occurrences [ i ] == 0 ) return i ; i ++ ; } return - 1 ; } static String getModifiedString ( String str ) { int n = str . length ( ) ; if ( n > 26 ) return \" - 1\" ; char ch [ ] = str . toCharArray ( ) ; int i , occurrences [ ] = new int [ 26 ] ; for ( i = 0 ; i < n ; i ++ ) occurrences [ ch [ i ] - ' a ' ] ++ ; int index = nextZero ( 0 , occurrences ) ; for ( i = 0 ; i < n ; i ++ ) { if ( occurrences [ ch [ i ] - ' a ' ] > 1 ) { occurrences [ ch [ i ] - ' a ' ] -- ; ch [ i ] = ( char ) ( ' a ' + index ) ; occurrences [ index ] = 1 ; index = nextZero ( index + 1 , occurrences ) ; } } return String . valueOf ( ch ) ; } public static void main ( String arr [ ] ) { String str = \" geeksforgeeks \" ; System . out . print ( getModifiedString ( str ) ) ; } }"],"bleu":0.6339548066224895,"rouge_l":0.7979770734996628}
{"id":1634,"predictions":["class GFG { static int calculateCycatations ( int length ) { int cycle_operations = 0 ; while ( length > 0 ) { length \/= 3 ; cycle_Operations ++ ; } return cycle_operations - 1 ; } static int calculateCyerOperations ( int [ ] p , int n ) { int cycle_operations = 0 ; int ans = 0 ; for ( int i = 1 ; i < n ; ++ i ) { int ele = p [ i ] ; if ( ! visited [ ele ] ) { visited [ ele ] = 1 ; length = 1 ; ele = p [ ele ] ; while ( ! visited [ ele ] ) { visited [ ele ] = 1 ; ++ ele = p [ ele ] ; } int operations = ( int ) Math . pow ( 3 , operations ) ; int num = ( int ) Math . pow ( 3 , operations ) ; if ( num != length ) return - 1 ; ans = Math . max ( ans , operations ) ; } return ans ; } public static void main ( String [ ] args ) { int [ ] P = { - 1 , 4 , 6 , 5 , 3 , 2 , 7 , 8 , 9 , 1 } ; int n = P . length - 1 ; System . out . println ( minimumOperations ( P , n ) ) ; } }"],"references":["import java . util . * ; class GFG { static int calculateCycleOperations ( int len ) { int cycle_operations = 0 ; while ( len > 0 ) { len \/= 3 ; ++ cycle_operations ; } return -- cycle_operations ; } static int minimumOperations ( int p [ ] , int n ) { int [ ] visited = new int [ n + 1 ] ; Arrays . fill ( visited , 0 ) ; int ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { int ele = p [ i ] ; if ( visited [ ele ] == 0 ) { visited [ ele ] = 1 ; int len = 1 ; ele = p [ ele ] ; while ( visited [ ele ] == 0 ) { visited [ ele ] = 1 ; ++ len ; ele = p [ ele ] ; } int operations = calculateCycleOperations ( len ) ; int num = ( int ) Math . pow ( 3 , operations ) ; if ( num != len ) { return - 1 ; } ans = Math . max ( ans , operations ) ; } } return ans ; } public static void main ( String args [ ] ) { int P [ ] = { - 1 , 4 , 6 , 5 , 3 , 2 , 7 , 8 , 9 , 1 } ; int n = P . length - 1 ; System . out . println ( minimumOperations ( P , n ) ) ; } }"],"bleu":0.6729885902117018,"rouge_l":0.8470674218892748}
{"id":1635,"predictions":["import java . io . * ; class GFG { public static void main ( String [ ] args ) { double r = 3 ; double R = 3.14159 ; double Volume = 3.14159 ; System . out . println ( \" Volume : ▁ \" + Volume ) ; } }"],"references":["class Test { public static void main ( String args [ ] ) { double r = 3 ; double R = 7 ; float pi = ( float ) 3.14159 ; double Volume = 0 ; Volume = 2 * pi * pi * R * r * r ; System . out . printf ( \" Volume : ▁ % f \" , Volume ) ; double Surface = 4 * pi * pi * R * r ; System . out . printf ( \" \\n Surface : ▁ % f \" , Surface ) ; } }"],"bleu":0.2278770533590643,"rouge_l":0.5041322314049587}
{"id":1636,"predictions":["class GFG { static int numberOfPaths ( int p , int q ) { int [ ] dp = new int [ q ] ; for ( int i = 0 ; i < p - 1 ; i ++ ) for ( int j = 1 ; j < q ; j ++ ) dp [ j ] += dp [ j - 1 ] ; return dp [ q - 1 ] ; } public static void main ( String [ ] args ) { System . out . println ( numberOfPaths ( 3 , 3 ) ) ; } }"],"references":["class GFG { static int numberOfPaths ( int m , int n ) { int [ ] dp = new int [ n ] ; dp [ 0 ] = 1 ; for ( int i = 0 ; i < m ; i ++ ) { for ( int j = 1 ; j < n ; j ++ ) { dp [ j ] += dp [ j - 1 ] ; } } return dp [ n - 1 ] ; } public static void main ( String args [ ] ) { System . out . println ( numberOfPaths ( 3 , 3 ) ) ; } }"],"bleu":0.6837998304385736,"rouge_l":0.8678674133494778}
{"id":1637,"predictions":["import java . util . * ; class solution { static void alternate ( int a , int b , int x ) { x = a ^ b ^ x ; System . out . println ( \" After ▁ exchange \" ) ; System . out . println ( \" After ▁ exchange \" ) ; } public static void main ( String args [ ] ) { int a = - 10 , b = 15 ; int x = a ; System . out . println ( \" x ▁ is ▁ \" + x ) ; alternate ( a , b , x ) ; } }"],"references":["class GFG { static int alternate ( int a , int b , int x ) { return x = a ^ b ^ x ; } public static void main ( String [ ] args ) { int a = - 10 ; int b = 15 ; int x = a ; System . out . print ( \" x ▁ is ▁ : ▁ \" + x ) ; x = alternate ( a , b , x ) ; System . out . print ( \" \\n After ▁ exchange ▁ \" ) ; System . out . print ( \" \\n x ▁ is ▁ : ▁ \" + x ) ; } }"],"bleu":0.6137060361532224,"rouge_l":0.6372106154714849}
{"id":1638,"predictions":["import java . io . * ; class GFG { static int surface_area ( int side ) { return ( 2 * ( Math . sqrt ( 3 ) ) * ( side * side ) ) ; } public static void main ( String [ ] args ) { int side = 7 ; System . out . print ( \" Surface ▁ area ▁ of ▁ octa ▁ = ▁ \" + surface_area ( side ) ) ; } }"],"references":["import java . io . * ; import java . util . * ; class GFG { static double surface_area_octahedron ( double side ) { return ( 2 * ( Math . sqrt ( 3 ) ) * ( side * side ) ) ; } public static void main ( String [ ] args ) { double side = 7 ; System . out . println ( \" Surface ▁ area ▁ of ▁ octahedron ▁ = \" + surface_area_octahedron ( side ) ) ; } }"],"bleu":0.7278101682306451,"rouge_l":0.8650824070525105}
{"id":1639,"predictions":["import java . io . * ; class GFG { static int CenteredDodecahedral_num ( int n ) { return ( 2 * n + 1 ) * ( 5 * n * n + 1 ) ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . print ( n + \" th ▁ centered ▁ \" + \" th ▁ number : ▁ \" ) ; System . out . println ( CenteredDecahedral_num ( n ) ) ; n = 10 ; System . out . print ( n + \" th ▁ centered ▁ \" + \" octadechedral_num ( n ) ; } }"],"references":["import java . io . * ; class GFG { static int CenteredDodecahedral_num ( int n ) { return ( 2 * n + 1 ) * ( 5 * n * n + 5 * n + 1 ) ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . print ( n + \" th ▁ Centered ▁ \" + \" Dodecahedral ▁ number ▁ : ▁ \" ) ; System . out . println ( CenteredDodecahedral_num ( n ) ) ; n = 10 ; System . out . print ( n + \" th ▁ Centered ▁ \" + \" Dodecahedral ▁ number ▁ : ▁ \" ) ; System . out . println ( CenteredDodecahedral_num ( n ) ) ; } }"],"bleu":0.7293008637283465,"rouge_l":0.8655770936272648}
{"id":1640,"predictions":["class GFG { static int longestSubstring ( String s ) { int cnt = 1 ; int maxi = 1 ; int n = s . length ( ) ; for ( int i = 1 ; i < n ; i ++ ) { if ( s . charAt ( i ) != s . charAt ( i - 1 ) ) { cnt ++ ; } else { maxi = Math . max ( cnt , maxi ) ; cnt = 1 ; } } maxi = Math . max ( cnt , maxi ) ; return maxi ; } public static void main ( String [ ] args ) { String s = \" ccccdcd \" ; System . out . println ( longestSubstring ( s ) ) ; } }"],"references":["import java . lang . Math ; class GfG { static int longestSubstring ( String s ) { int cnt = 1 , maxi = 1 ; int n = s . length ( ) ; for ( int i = 1 ; i < n ; i ++ ) { if ( s . charAt ( i ) != s . charAt ( i - 1 ) ) cnt ++ ; else { maxi = Math . max ( cnt , maxi ) ; cnt = 1 ; } } maxi = Math . max ( cnt , maxi ) ; return maxi ; } public static void main ( String [ ] args ) { String s = \" ccccdeededff \" ; System . out . println ( longestSubstring ( s ) ) ; } }"],"bleu":0.878561523543013,"rouge_l":0.9386871844193316}
{"id":1641,"predictions":["class GFG { static int firstDigit ( int x ) { while ( x >= 10 ) x = x \/ 10 ; return x ; } public static void main ( String [ ] args ) { System . out . println ( firstDigit ( 12345 ) ) ; System . out . println ( firstDigit ( 5432 ) ) ; } }"],"references":["class Test { static int firstDigit ( int x ) { while ( x >= 10 ) x = x \/ 10 ; return x ; } public static void main ( String args [ ] ) { System . out . println ( firstDigit ( 12345 ) ) ; System . out . println ( firstDigit ( 5432 ) ) ; } }"],"bleu":0.9155815882674762,"rouge_l":0.96875}
{"id":1642,"predictions":["class GFG { static final int [ ] [ ] C = new int [ 1000 ] [ 1000 ] ; static void binomialCoeff ( int n ) { int i , j ; for ( i = 0 ; i <= n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( j == 0 || j == i ) C [ i ] [ j ] = 1 ; else C [ i ] [ j ] = C [ i - 1 ] [ j - 1 ] + C [ i - 1 ] [ j ] ; } } } static int numberOfWays ( int x , int y , int z ) { binomialCoeff ( Math . max ( x , Math . max ( y , z ) ) ; int sum = 0 ; for ( i = 1 ; i <= z ; i ++ ) { for ( int j = i + 1 ; j <= x ; j ++ ) sum = sum + C [ z ] [ i ] ; } int sum1 = 0 ; for ( int i = 1 ; i <= y ; i ++ ) { for ( int j = i + 1 ; j <= x ; j ++ ) { sum1 += ( sum1 + ( C [ y ] [ i ] * C [ x ] [ j ] ) ; } sum1 = ( sum * sum1 ) ; return sum1 ; } public static void main ( String [ ] args ) { int x = 3 , y = 2 , z = 1 ; System . out . println ( numberOfWays ( x , y , z ) ) ; } }"],"references":["class GFG { static int C [ ] [ ] = new int [ 1000 ] [ 1000 ] ; static void binomialCoeff ( int n ) { int i , j ; for ( i = 0 ; i <= n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( j == 0 || j == i ) C [ i ] [ j ] = 1 ; else C [ i ] [ j ] = C [ i - 1 ] [ j - 1 ] + C [ i - 1 ] [ j ] ; } } } static int numberOfWays ( int x , int y , int z ) { binomialCoeff ( Math . max ( x , Math . max ( y , z ) ) ) ; int sum = 0 ; for ( int i = 1 ; i <= z ; i ++ ) { sum = ( sum + C [ z ] [ i ] ) ; } int sum1 = 0 ; for ( int i = 1 ; i <= y ; i ++ ) { for ( int j = i + 1 ; j <= x ; j ++ ) { sum1 = ( sum1 + ( C [ y ] [ i ] * C [ x ] [ j ] ) ) ; } } sum1 = ( sum * sum1 ) ; return sum1 ; } public static void main ( String args [ ] ) { int x = 3 ; int y = 2 ; int z = 1 ; System . out . println ( numberOfWays ( x , y , z ) ) ; } }"],"bleu":0.877478278966599,"rouge_l":0.9454067678446935}
{"id":1643,"predictions":["class GFG { static boolean isDivisible ( int n ) { int d ; while ( n \/ 100 ) > 0 ) { d = n % 10 ; n \/= 10 ; n = Math . abs ( n - ( d * 14 ) ) ; } return ( n % 47 == 0 ) ; } public static void main ( String args [ ] ) { int n = 59173 ; if ( isDivisible ( n ) == 0 ) System . out . println ( \" Yes \" ) ; else System . out . println ( \" No \" ) ; } }"],"references":["import java . util . * ; class GFG { static boolean isDivisible ( int n ) { int d ; while ( ( n \/ 100 ) > 0 ) { d = n % 10 ; n \/= 10 ; n = Math . abs ( n - ( d * 14 ) ) ; } return ( n % 47 == 0 ) ; } public static void main ( String [ ] args ) { int N = 59173 ; if ( isDivisible ( N ) ) System . out . print ( \" Yes \" ) ; else System . out . print ( \" No \" ) ; } }"],"bleu":0.7962084576395614,"rouge_l":0.9071614207334681}
{"id":1644,"predictions":["public final class p006 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p006 ( ) . run ( ) ) ; } private static final int SIZE = 1001 ; private static final int SIZE = 1 ; public String run ( ) { int sum = 1 ; for ( int i = 3 ; i <= SIZE ; i += 2 ) sum += i * ( i - 1 ) ; return Long . toString ( sum ) ; } }"],"references":["public final class p028 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p028 ( ) . run ( ) ) ; } private static final int SIZE = 1001 ; public String run ( ) { long sum = 1 ; for ( int n = 3 ; n <= SIZE ; n += 2 ) sum += 4 * n * n - 6 * ( n - 1 ) ; return Long . toString ( sum ) ; } }"],"bleu":0.6961768753257198,"rouge_l":0.8453378956372967}
{"id":1645,"predictions":["import java . math . BigInteger ; public final class p187 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p187 ( ) . run ( ) ; } private static final int LIMIT = Library . pow ( 10 , 14 ) ; public String run ( ) { int m = n * 10 ; int s = digits ; int sum = 0 ; for ( int i = 0 ; i < 10 ; i ++ ) { if ( m >= LIMIT && Library . isPrime ( m ) ) sum += m ; if ( m % s == 0 ) { sum += m ; } if ( m % s == 0 ) { sum += m ; } if ( m % s == 0 ) { findHarmadPrimes ( m ) ; } m ++ ; } return Integer . toString ( sum ) ; } }"],"references":["import java . math . BigInteger ; public final class p387 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p387 ( ) . run ( ) ) ; } private static final long LIMIT = 100000000000000L ; private BigInteger sum = BigInteger . ZERO ; public String run ( ) { for ( int i = 1 ; i <= 9 ; i ++ ) findHarshadPrimes ( i , i , false ) ; return sum . toString ( ) ; } private void findHarshadPrimes ( long n , int digitSum , boolean isStrong ) { long m = n * 10 ; int s = digitSum ; for ( int i = 0 ; i < 10 && m < LIMIT ; i ++ , m ++ , s ++ ) { if ( isStrong && isPrime ( m ) ) sum = sum . add ( BigInteger . valueOf ( m ) ) ; if ( m % s == 0 ) findHarshadPrimes ( m , s , isPrime ( m \/ s ) ) ; } } private static boolean isPrime ( long x ) { if ( x < 0 ) throw new IllegalArgumentException ( \" Negative ▁ number \" ) ; if ( x == 0 || x == 1 ) return false ; for ( long i = 2 , end = Library . sqrt ( x ) ; i <= end ; i ++ ) { if ( x % i == 0 ) return false ; } return true ; } }"],"bleu":0.3108636451005396,"rouge_l":0.521813515825492}
{"id":1646,"predictions":["public final class p114 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p114 ( ) . run ( ) ) ; } private static final int LENGTH = 50 ; private static final int LENGTH = 50 ; public String run ( ) { long sum = 0 ; for ( int n = 1 ; n < LENGTH ; n ++ ) { sum += ways [ n - 1 ] ; } return Long . toString ( sum ) . toString ( sum ) ; } }"],"references":["public final class p117 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p117 ( ) . run ( ) ) ; } private static final int LENGTH = 50 ; public String run ( ) { long [ ] ways = new long [ LENGTH + 1 ] ; ways [ 0 ] = 1 ; for ( int n = 1 ; n <= LENGTH ; n ++ ) { for ( int k = 1 ; k <= 4 && k <= n ; k ++ ) ways [ n ] += ways [ n - k ] ; } return Long . toString ( ways [ LENGTH ] ) ; } }"],"bleu":0.5402329230073089,"rouge_l":0.69879854708019}
{"id":1647,"predictions":["import java . math . BigInteger ; public final class p017 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p017 ( ) . run ( ) ) ; } private static final int x = 177777 ; public String run ( ) { BigInteger y = BigInteger . ZERO ; BigInteger m = BigInteger . ONE ; for ( int i = 2 ; i <= 30 ; i ++ ) { if ( y == 1 ) return Integer . toString ( i ) ; else return Integer . toString ( m ) ; } } private static int toString ( int x , int y , int m ) { if ( y == 1 ) return x % m ; else { return Integer . toString ( x , y - 1 , totient ( m ) ) , m ) ; } } private static BigInteger totient ( int n ) { BigInteger p = BigInteger . ZERO ; int i = 2 . ZERO ; while ( i <= end ) { if ( n % i == 0 ) { p *= i - 1 ; n \/= i ; while ( n % i == 0 ) { p *= i - 1 ; n \/= i ; } end = Library . sqrt ( n ) ; } i ++ ; } if ( n != 1 ) p *= n - 1 ; return p ; } }"],"references":["public final class p188 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p188 ( ) . run ( ) ) ; } public String run ( ) { return Integer . toString ( tetrationMod ( 1777 , 1855 , Library . pow ( 10 , 8 ) ) ) ; } private static int tetrationMod ( int x , int y , int m ) { if ( y == 1 ) return x % m ; else return Library . powMod ( x , tetrationMod ( x , y - 1 , Library . totient ( m ) ) , m ) ; } }"],"bleu":0.31462263905838683,"rouge_l":0.537370178041543}
{"id":1648,"predictions":["public final class p218 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p218 ( ) . run ( ) ) ; } private static final int factorial ( int n ) { int sum = factorial ( Library . pow ( 10 , 12 ) - 1 ) ; return Integer . toString ( sum ) ; } private static int factorial ( int n ) { int twos = countFactors ( n ) - countFactors ( n ) ; if ( twos >= 250 ) twos = ( twos - 5 ) % 1000 + 5 ; return factorial ( n ) * ( Math . pow ( 2 , twos ) % 100000 ) % 100000 ; } private static int factorial ( int n ) { return even_factorial ( n ) * oddFactorial ( n ) * Math . pow ( 2 , twos ) % 100000 ; } private static int [ ] factorial ( int n ) { if ( n == 0 ) return 1 ; else return odd_factorial ( n ) * odd_factorial ( n ) % 100000 ) ; } private static int odd_factorial ( int n ) { n %= 100000 ; int product = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( i % 2 != 0 && i % 5 != 0 ) product = i * product % 100000000 ; } return product ; } private static int factorial ( int n ) { n %= 100000 ; int product = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( i % 2 != 0 && i % 5 != 0 ) product = i * product % 100000 ; } return product ; } }"],"references":["public final class p160 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p160 ( ) . run ( ) ) ; } public String run ( ) { return Long . toString ( factorialSuffix ( 1000000000000L ) ) ; } private static long factorialSuffix ( long n ) { long twos = countFactors ( n , 2 ) - countFactors ( n , 5 ) ; if ( twos >= 2505 ) twos = ( twos - 5 ) % 2500 + 5 ; return factorialish ( n ) * Library . powMod ( 2 , ( int ) twos , 100000 ) % 100000 ; } private static long factorialish ( long n ) { return evenFactorialish ( n ) * oddFactorialish ( n ) % 100000 ; } private static long evenFactorialish ( long n ) { if ( n == 0 ) return 1 ; else return factorialish ( n \/ 2 ) ; } private static long oddFactorialish ( long n ) { if ( n == 0 ) return 1 ; else return oddFactorialish ( n \/ 5 ) * factorialCoprime ( n ) % 100000 ; } private static long factorialCoprime ( long n ) { n %= 100000 ; long product = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( i % 2 != 0 && i % 5 != 0 ) product = i * product % 100000 ; } return product ; } private static long countFactors ( long end , long n ) { if ( end == 0 ) return 0 ; else return end \/ n + countFactors ( end \/ n , n ) ; } }"],"bleu":0.5194348502017121,"rouge_l":0.6744235021585764}
{"id":1649,"predictions":["public final class p068 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p068 ( ) . run ( ) ) ; } private static final int [ ] digits ; public String run ( ) { int count = 0 ; for ( int b = 0 ; b < 10 ; b ++ ) { for ( int c = 0 ; c < 10 ; c ++ ) { for ( int d = b + c - e - i ; d ++ ) { for ( int e = 0 ; e < digits . length ; e ++ ) { int m = b + c - e - i - e - i - i - ) ; if ( m < 0 || m > 9 ) continue ; for ( int k = a + b - k - i - k ; k > 9 ; j -- ) { int l = a + b + c - g ; if ( l < 0 || l > 9 ) continue ; for ( int a = a + b + c - k - i - k ; a > 9 && b > 9 ) { int h = a + b + b + c - g - k ; if ( h < 0 || h > 9 ) continue ; int l = a + b + c - l ; int h = a + b + c - e - k ; if ( h < 0 || h > 9 ) continue ; int m = a + b + c - f - l ; if ( h > 0 || h > 9 ) continue ; int p = a + b + c - f - l ; if ( h < 0 || h > 9 ) continue ; int n = a + b + c - l - f - l ; if ( h > 0 || n > 9 ) continue ; int p = a + b + c - l ; if ( n < 0 || n > 9 ) continue ; int x = a + b + c - l ; int y = a + c - l ; if ( x < 0 || n > 9 ) continue ; } } } } return Integer . toString ( x ) ; } }"],"references":["public final class p166 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p166 ( ) . run ( ) ) ; } public String run ( ) { int count = 0 ; int [ ] num = new int [ 8 ] ; do { int a = num [ 0 ] , b = num [ 1 ] , c = num [ 2 ] , d = num [ 3 ] ; int e = num [ 4 ] , g = num [ 5 ] , i = num [ 6 ] , k = num [ 7 ] ; int m = b + c + d - e - i ; if ( m < 0 || m > 9 ) continue ; int o = a + b + d - g - k ; if ( o < 0 || o > 9 ) continue ; int j = a + b + c - g - m ; if ( j < 0 || j > 9 ) continue ; int l = a + b + c + d - i - j - k ; if ( l < 0 || l > 9 ) continue ; int f = b + c + d * 2 - e - i - k ; if ( f < 0 || f > 9 ) continue ; int h = a + b + c + d - e - f - g ; if ( h < 0 || h > 9 ) continue ; int n = a + c + d - f - j ; if ( n < 0 || n > 9 ) continue ; int p = a + b + c - h - l ; if ( p < 0 || p > 9 ) continue ; count ++ ; } while ( increment ( num ) ) ; return Integer . toString ( count ) ; } private static boolean increment ( int [ ] num ) { int i = 0 ; while ( num [ i ] == 9 ) { num [ i ] = 0 ; i ++ ; if ( i == num . length ) return false ; } num [ i ] ++ ; return true ; } }"],"bleu":0.4922183533610857,"rouge_l":0.5747036193766194}
{"id":1650,"predictions":["import java . math . BigInteger ; public final class p016 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p016 ( ) . run ( ) ) ; } private static final BigInteger MODULUS = BigInteger . ZERO ; public String run ( ) { BigInteger temp = BigInteger . ZERO ; for ( int i = 0 ; i < temp . length ; i ++ ) temp = ( 25633 * Math . pow ( 2 , 78 ) + 1 ) % MODULUS ; return Integer . toString ( temp ) ; } }"],"references":["import java . math . BigInteger ; public final class p097 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p097 ( ) . run ( ) ) ; } public String run ( ) { BigInteger modulus = BigInteger . TEN . pow ( 10 ) ; BigInteger n = BigInteger . valueOf ( 2 ) . modPow ( BigInteger . valueOf ( 7830457 ) , modulus ) ; n = n . multiply ( BigInteger . valueOf ( 28433 ) ) . mod ( modulus ) ; n = n . add ( BigInteger . ONE ) . mod ( modulus ) ; return String . format ( \" % 010d \" , n ) ; } }"],"bleu":0.3890150047310095,"rouge_l":0.5529192215409224}
{"id":1651,"predictions":["public final class p171 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p171 ( ) . run ( ) ) ; } private static final int BASE = 500 ; private static final int end_N = 500 ; private static final int INDEX = 500 ; public String run ( ) { for ( int i = 1 ; i <= end_N ; i ++ ) { int [ ] isPrime = Library . listPrimality ( \" POSSIBLE \" ) ; int NUM_JUDGE \" . length = Library . listPrimality ( \" ) ; for ( int i = 0 ; i < end_N ; i ++ ) { for ( int j = i ; j < NUM_TEN . length ; j ++ ) { int pos = i ; int [ ] isPrime = Library . listPrimes ( i ) ; if ( isPrime [ pos ] == ' P ' ) { pos ++ ; } else if ( isPrime [ pos ] ) pos ++ ; for ( int k = 0 ; k < NUM_JUM ; k ++ ) { pos ++ ; } } if ( isPrime [ pos ] && isPrime [ pos ] == ' P ' ) pos ++ ; for ( int k = 0 ; k < NUM_JUM ; k ++ ) { pos -- ; } if ( isPrime [ pos ] == Integer . MAX_VALUE ) pos -- ; for ( int k = 0 ; k < NUM_JUM ; k ++ ) { pos -- ; } if ( isPrime [ pos ] && isPrime [ k ] == ' P ' ) pos ++ ; } return Integer . toString ( sum ) ; } }"],"references":["import java . math . BigInteger ; public final class p329 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p329 ( ) . run ( ) ) ; } private static final int START_NUM = 1 ; private static final int END_NUM = 500 ; private static final String CROAK_SEQ = \" PPPPNNPPPNPPNPN \" ; static { assert 0 <= START_NUM && START_NUM < END_NUM && END_NUM < Integer . MAX_VALUE ; assert 1 <= CROAK_SEQ . length ( ) && CROAK_SEQ . length ( ) <= 31 ; } private static final int NUM_JUMPS = CROAK_SEQ . length ( ) - 1 ; private static final int NUM_TRIALS = 1 << NUM_JUMPS ; public String run ( ) { long globalNumerator = 0 ; boolean [ ] isPrime = Library . listPrimality ( END_NUM ) ; for ( int i = START_NUM ; i <= END_NUM ; i ++ ) { for ( int j = 0 ; j < NUM_TRIALS ; j ++ ) { int pos = i ; int trialNumerator = 1 ; if ( isPrime [ pos ] == ( CROAK_SEQ . charAt ( 0 ) == ' P ' ) ) trialNumerator *= 2 ; for ( int k = 0 ; k < NUM_JUMPS ; k ++ ) { if ( pos <= START_NUM ) pos ++ ; else if ( pos >= END_NUM ) pos -- ; else if ( ( ( j >>> k ) & 1 ) == 0 ) pos ++ ; else pos -- ; if ( isPrime [ pos ] == ( CROAK_SEQ . charAt ( k + 1 ) == ' P ' ) ) trialNumerator *= 2 ; } globalNumerator += trialNumerator ; } } BigInteger globalDenominator = BigInteger . valueOf ( END_NUM + 1L - START_NUM ) . shiftLeft ( NUM_JUMPS ) . multiply ( BigInteger . valueOf ( 3 ) . pow ( CROAK_SEQ . length ( ) ) ) ; return new Fraction ( BigInteger . valueOf ( globalNumerator ) , globalDenominator ) . toString ( ) ; } }"],"bleu":0.3788710592911389,"rouge_l":0.5153427850067974}
{"id":1652,"predictions":["public final class p429 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p429 ( ) . run ( ) ) ; } private static final int LIMIT = Library . pow ( 10 , 8 ) ; private boolean [ ] isPrime = Library . listPrimality ( LIMIT - 1 ) ; public String run ( ) { int count = 0 ; for ( int x = 1 ; x <= LIMIT \/ 4 ; x ++ ) { for ( int y = 1 ; y <= LIMIT \/ 4 ; y ++ ) { int a = x * y * y - 1 ; if ( ! isPrime [ a ] ) continue ; for ( int z = y * z ; z >= LIMIT ; z -- ) { if ( Library . gcd ( y , z ) != 1 ) continue ; for ( int z = y * z * z - 1 ; z <= LIMIT ; z ++ ) { if ( Library . gcd ( y , z ) != 1 ) continue ; for ( int z = z + 1 ; z <= z ; z ++ ) { if ( z > 0 && isPrime [ c ] ) continue ; } } } } } return Integer . toString ( sum ) ; } }"],"references":["public final class p518 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p518 ( ) . run ( ) ) ; } private static final int LIMIT = Library . pow ( 10 , 8 ) ; public String run ( ) { long sum = 0 ; boolean [ ] isPrime = Library . listPrimality ( LIMIT - 1 ) ; for ( int x = 1 ; x < isPrime . length ; x ++ ) { for ( int y = 1 ; ; y ++ ) { long a = ( long ) x * y * y - 1 ; if ( a >= isPrime . length ) break ; if ( ! isPrime [ ( int ) a ] ) continue ; for ( int z = y + 1 ; ; z ++ ) { if ( Library . gcd ( y , z ) != 1 ) continue ; long b = ( long ) x * y * z - 1 ; long c = ( long ) x * z * z - 1 ; if ( c >= isPrime . length ) break ; if ( isPrime [ ( int ) b ] && isPrime [ ( int ) c ] ) { long addend = a + b + c ; if ( sum + addend < sum ) throw new ArithmeticException ( \" Overflow \" ) ; sum += addend ; } } } } return Long . toString ( sum ) ; } }"],"bleu":0.5614380568176435,"rouge_l":0.6578582240161452}
{"id":1653,"predictions":["public final class p171 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p171 ( ) . run ( ) ) ; } private static final int TAGEE = 10 ; private static final int DIGIT = 10 ; public String run ( ) { BigInteger ans = BigInteger . ZERO ; for ( int k = 1 ; k += 1 ) { for ( int n = 1 ; ; k += 1 ) { if ( n == 22 ) { throw new AssertionError ( ) ; } } for ( int k = 1 ; k <= din ; k ++ ) { for ( int i = 0 ; i ++ ) { if ( n == 22 - 1 ) { ans += term ; } } } return ans . toString ( ) ; } private static BigInteger generate ( int k , int n ) { int sum = Fraction ( 0 , 1 ) ; for ( int i = 0 ; i <= k ; i ++ ) { int product = Fraction ( 0 , i ) ; for ( int j = 1 ; j <= k ; j ++ ) { if ( j != i ) { product *= Fraction ( n - j , i - j ) ; } } sum += product ; } return sum ; } private static BigInteger generate ( int k ) { BigInteger sum = BigInteger . ZERO ; for ( int i = 0 ; i <= k . length ( ) ; i ++ ) { BigInteger sum = BigInteger . ZERO ; for ( int j = 1 ; j <= k ; j ++ ) { if ( j != i ) sum *= Fraction ( n - j , i - j ) ; } sum += product . add ( product ) ; } return sum ; } }"],"references":["import java . math . BigInteger ; public final class p101 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p101 ( ) . run ( ) ) ; } private static final int DEGREE = 10 ; public String run ( ) { Fraction sum = Fraction . ZERO ; for ( int k = 1 ; k <= DEGREE ; k ++ ) { for ( int n = k + 1 ; ; n ++ ) { if ( n == DEGREE + 2 ) throw new AssertionError ( ) ; Fraction reference = new Fraction ( generatingFunction ( n ) ) ; Fraction term = optimumPolynomial ( k , n ) ; if ( ! term . equals ( reference ) ) { sum = sum . add ( term ) ; break ; } } } if ( sum . denominator . equals ( BigInteger . ONE ) ) return sum . numerator . toString ( ) ; else return sum . toString ( ) ; } private static Fraction optimumPolynomial ( int k , int n ) { Fraction sum = Fraction . ZERO ; for ( int i = 1 ; i <= k ; i ++ ) { Fraction product = new Fraction ( generatingFunction ( i ) ) ; for ( int j = 1 ; j <= k ; j ++ ) { if ( j != i ) product = product . multiply ( new Fraction ( BigInteger . valueOf ( n - j ) , BigInteger . valueOf ( i - j ) ) ) ; } sum = sum . add ( product ) ; } return sum ; } private static BigInteger generatingFunction ( int n ) { BigInteger sum = BigInteger . ZERO ; BigInteger biN = BigInteger . valueOf ( - n ) ; for ( int i = 0 ; i <= DEGREE ; i ++ ) sum = sum . add ( biN . pow ( i ) ) ; return sum ; } }"],"bleu":0.5150959289172966,"rouge_l":0.6313808515643379}
{"id":1654,"predictions":["import java . math . BigInteger ; public final class p072 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p074 ( ) . run ( ) ) ; } private static final int MODULUS = Library . pow ( 10 , 16 ) ; public String run ( ) throws IOException { int [ ] subsets = new int [ 2525 ] ; for ( int i = 1 ; i <= 25250 ; i ++ ) subsets [ 0 ] = ( int ) ( ( i , i ) . length - 1 ) % MODULUS ; for ( int i = 1 ; i <= 2525 ; i ++ ) { int left = ( int ) Math . pow ( i , i ) ; int [ ] subsets = new int [ 2525 ] ; for ( int j = 0 ; j < subsets . length ; j ++ ) subsets [ j ] = ( int ) ( subsets [ ( j - offset ) % MODULUS ] ) % MODULUS ; return Integer . toString ( sum ) ; } } }"],"references":["public final class p250 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p250 ( ) . run ( ) ) ; } private static final long MODULUS = 10000000000000000L ; public String run ( ) { long [ ] numSubsets = new long [ 250 ] ; numSubsets [ 0 ] = 1 ; for ( int i = 1 ; i <= 250250 ; i ++ ) { int temp = Library . powMod ( i , i , 250 ) ; long [ ] newArray = new long [ numSubsets . length ] ; for ( int j = 0 ; j < 250 ; j ++ ) newArray [ ( j + temp ) % 250 ] = ( numSubsets [ j ] + numSubsets [ ( j + temp ) % 250 ] ) % MODULUS ; numSubsets = newArray ; } return Long . toString ( ( numSubsets [ 0 ] - 1 + MODULUS ) % MODULUS ) ; } }"],"bleu":0.4350932013597841,"rouge_l":0.6546083946343575}
{"id":1655,"predictions":["public final class p002 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p002 ( ) . run ( ) ) ; } private static final int LIMIT = Library . pow ( 10 , 6 ) ; public String run ( ) { int sum = 0 ; for ( int i = 0 ; i < LIMIT ; i += 2 ) { int totients = Library . listTotients ( LIMIT - 1 ) ; sum += i ; } return Integer . toString ( sum ) ; } }"],"references":["public final class p072 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p072 ( ) . run ( ) ) ; } private static final int LIMIT = Library . pow ( 10 , 6 ) ; public String run ( ) { long sum = 0 ; int [ ] totients = Library . listTotients ( LIMIT ) ; for ( int i = 2 ; i < totients . length ; i ++ ) sum += totients [ i ] ; return Long . toString ( sum ) ; } }"],"bleu":0.6954573349909311,"rouge_l":0.7796134663341647}
{"id":1656,"predictions":["public final class p001 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p002 ( ) . run ( ) ) ; } private static final int TOTAL = 200 ; public String run ( ) { int [ ] ways = new int [ BASE ] ; ways [ 1 ] = 1 ; for ( int i = 0 ; i < ways . length ; i ++ ) ways [ i ] += ways [ i ] ; for ( int i = 0 ; i < ways . length ; i ++ ) { ways [ i + coin ; } } return Integer . toString ( ways [ total ] - 1 ) ; } }"],"references":["public final class p031 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p031 ( ) . run ( ) ) ; } private static final int TOTAL = 200 ; private static int [ ] COINS = { 1 , 2 , 5 , 10 , 20 , 50 , 100 , 200 } ; public String run ( ) { int [ ] [ ] ways = new int [ COINS . length + 1 ] [ TOTAL + 1 ] ; ways [ 0 ] [ 0 ] = 1 ; for ( int i = 0 ; i < COINS . length ; i ++ ) { int coin = COINS [ i ] ; for ( int j = 0 ; j <= TOTAL ; j ++ ) ways [ i + 1 ] [ j ] = ways [ i ] [ j ] + ( j >= coin ? ways [ i + 1 ] [ j - coin ] : 0 ) ; } return Integer . toString ( ways [ COINS . length ] [ TOTAL ] ) ; } }"],"bleu":0.42860186015575086,"rouge_l":0.6331980749268661}
{"id":1657,"predictions":["public final class p100 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p100 ( ) . run ( ) ) ; } private static final int [ ] EulerSolution { System . out . println ( new p100 ( ) . run ( ) ) ; } private static final int [ ] EulerSolution { public String run ( ) { return Integer . toString ( ONE ) ; } private static double f ( int x ) { return Integer . MAX_VALUE ; } private static double sum ; private static double f ( int x ) { double x = - 1 ; double y = - 1 ; for ( int i = 0 ; i < MIN_VALUE ; i ++ ) { if ( i > 0 && x < y ) break ; x = f ( x ) ; y = f ( x ) ; } double remainder = x + f ( y ) \/ i ; for ( int i = 0 ; i < remain ) x = x + f ( x ) ; i ++ ) { x = f ( x ) ; } ans = x + f ( x ) ; } return f ; }"],"references":["public final class p197 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p197 ( ) . run ( ) ) ; } private static long ITERATIONS = 1000000000000L ; public String run ( ) { double x = - 1 ; double y = - 1 ; long i = 0 ; for ( ; i < ITERATIONS ; i ++ ) { if ( i > 0 && x == y ) break ; x = f ( x ) ; y = f ( f ( y ) ) ; } long remain = ( ITERATIONS - i ) % i ; for ( ; remain > 0 ; remain -- ) x = f ( x ) ; double answer = x + f ( x ) ; answer = Math . floor ( answer * 1e9 ) \/ 1e9 ; return String . format ( \" % .9f \" , answer ) ; } private static double f ( double x ) { return Math . floor ( Math . pow ( 2 , 30.403243784 - x * x ) ) \/ 1e9 ; } }"],"bleu":0.49813971648139344,"rouge_l":0.576541679578556}
{"id":1658,"predictions":["public final class p029 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p029 ( ) . run ( ) ) ; } public String run ( ) { int sum = 0 ; for ( int a = 0 ; a <= 100 ; a ++ ) { for ( int b = 0 ; b *= 10 ; } return Integer . toString ( sum ) ; } }"],"references":["import java . math . BigInteger ; public final class p056 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p056 ( ) . run ( ) ) ; } public String run ( ) { int max = 0 ; for ( int a = 1 ; a < 100 ; a ++ ) { for ( int b = 1 ; b < 100 ; b ++ ) { BigInteger pow = BigInteger . valueOf ( a ) . pow ( b ) ; max = Math . max ( digitSum ( pow ) , max ) ; } } return Integer . toString ( max ) ; } private static int digitSum ( BigInteger n ) { int sum = 0 ; String s = n . toString ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) sum += s . charAt ( i ) - '0' ; return sum ; } }"],"bleu":0.24670519106904829,"rouge_l":0.5347749853886615}
{"id":1659,"predictions":["import java . util . Arrays ; public final class p287 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p287 ( ) . run ( ) ) ; } private static final String run ( ) { int count = 0 ; for ( int i = 0 ; i <= Library . length ; i ++ ) { for ( int j = i ; j <= i + 1 ; j ++ ) { count *= ( String . valueOf ( i ) ) ; } } return Integer . toString ( count ) ; } private static int digitSum ( int [ ] s ) { int sum = 1 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { sum *= ( int ) i ; } return Integer . toString ( sum ) ; } private static int digitSum ( int [ ] s ) { int result = 1 ; for ( int i = 0 ; i < s . length ; i ++ ) { result = result * 10 + s [ i ] ; } return result ; } }"],"references":["public final class p008 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p008 ( ) . run ( ) ) ; } public String run ( ) { long maxProd = - 1 ; for ( int i = 0 ; i + ADJACENT <= NUMBER . length ( ) ; i ++ ) { long prod = 1 ; for ( int j = 0 ; j < ADJACENT ; j ++ ) prod *= NUMBER . charAt ( i + j ) - '0' ; maxProd = Math . max ( prod , maxProd ) ; } return Long . toString ( maxProd ) ; } private static final int ADJACENT = 13 ; private static final String NUMBER = \"7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450\" ; }"],"bleu":0.340685646364718,"rouge_l":0.5570776255707762}
{"id":1660,"predictions":["public final class p045 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p045 ( ) . run ( ) ) ; } private static final int BASE = 10 ; private static final int DIGITS = 20 ; public String run ( ) { BigInteger base = BigInteger . ONE ; BigInteger final int MAX_SUM = 9 ; int [ ] [ ] ways = new int [ MAXLen + 1 ] [ MAX_SUM + 1 ] ; for ( int i = 1 ; i < DIGITS + 1 ; i ++ ) ways [ i ] [ 0 ] = 1 ; for ( int digits = 0 ; i < MAX_SUM ; i ++ ) { long sum = 0 ; for ( int prefix = 0 ; prefix < MAX_SUM ; prefix ++ ) { sum += ways [ i ] [ prefix - 1 ] ; } sum += ways [ i ] [ 0 ] ; } ways [ 0 ] [ 0 ] = 0 ; } private static BigInteger digitSum ( int n ) { BigInteger sum = BigInteger . ZERO ; for ( int i = 0 ; i < BigInteger . ZERO ; i ++ ) { BigInteger sum = BigInteger . ZERO ; for ( int k = 0 ; k < BASE ; k ++ ) { sum = 0 ; if ( digitSum ( prefix ) <= MAX_SUM ) sum += ways [ n - 1 ] . multiply ( BigInteger . valueOf ( BASE ) ) * BASE + next digit ; } ways [ sum ] [ 0 ] - ways [ 0 ] [ 0 ] ; return sum ; } } }"],"references":["import java . math . BigInteger ; public final class p164 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p164 ( ) . run ( ) ) ; } private static final int BASE = 10 ; private static final int DIGITS = 20 ; private static final int CONSECUTIVE = 3 ; private static final int MAX_SUM = 9 ; public String run ( ) { BigInteger [ ] [ ] ways = new BigInteger [ DIGITS + CONSECUTIVE + 1 ] [ Library . pow ( BASE , CONSECUTIVE ) ] ; ways [ 0 ] [ 0 ] = BigInteger . ONE ; for ( int prefix = 1 ; prefix < ways [ 0 ] . length ; prefix ++ ) ways [ 0 ] [ prefix ] = BigInteger . ZERO ; for ( int digits = 1 ; digits < ways . length ; digits ++ ) { for ( int prefix = 0 ; prefix < ways [ digits ] . length ; prefix ++ ) { BigInteger sum = BigInteger . ZERO ; if ( digitSum ( prefix ) <= MAX_SUM ) { for ( int nextDigit = 0 ; nextDigit < BASE ; nextDigit ++ ) sum = sum . add ( ways [ digits - 1 ] [ prefix % Library . pow ( BASE , CONSECUTIVE - 1 ) * BASE + nextDigit ] ) ; } ways [ digits ] [ prefix ] = sum ; } } return ways [ DIGITS + CONSECUTIVE ] [ 0 ] . subtract ( ways [ DIGITS + CONSECUTIVE - 1 ] [ 0 ] ) . toString ( ) ; } private static int digitSum ( int n ) { int sum = 0 ; for ( ; n != 0 ; n \/= 10 ) sum += n % 10 ; return sum ; } }"],"bleu":0.5034242804349829,"rouge_l":0.5368502316006176}
{"id":1661,"predictions":["public final class p429 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p429 ( ) . run ( ) ) ; } private static final int LIMIT = Library . pow ( 10 , 15 ) ; private static final long LIMIT = Library . sqrt ( LIMIT + 1 ) ; private static final int LIMIT = Library . sqrt ( LIMIT + 1 ) ; public String run ( ) { int split = Library . sqrt ( LIMIT + 1 ) ; int split2 = ( int ) Library . sqrt ( LIMIT + 1 ) ; for ( int i = 1 ; i <= split ; i ++ ) { long sum = ( e * i ) * ( e * 2 + 1 ) - s * ( s + 1 ) * ( s * 2 + 1 ) ) \/ 6 ; sum = sum + ( sumSquares ( LIMIT \/ ( i + 1 ) , LIMIT \/ i ) ) ; } return Long . toString ( sum ) ; } }"],"references":["import java . math . BigInteger ; public final class p401 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p401 ( ) . run ( ) ) ; } private static final long LIMIT = 1000000000000000L ; private static final long MODULUS = Library . pow ( 10 , 9 ) ; public String run ( ) { int splitCount = ( int ) Library . sqrt ( LIMIT ) ; splitCount = Math . max ( splitCount \/ 3 , 1 ) ; int splitAt = ( int ) ( LIMIT \/ ( splitCount + 1 ) ) ; long sum = 0 ; for ( int i = 1 ; i <= splitAt ; i ++ ) { long count = LIMIT \/ i % MODULUS ; long term = ( long ) i * i % MODULUS ; term = term * count % MODULUS ; sum = ( sum + term ) % MODULUS ; } for ( int i = splitCount ; i >= 1 ; i -- ) { long start = LIMIT \/ ( i + 1 ) ; long end = LIMIT \/ i ; long sumSquares = sumSquaresMod ( end ) - sumSquaresMod ( start ) ; sumSquares = ( sumSquares + MODULUS ) % MODULUS ; sum = ( sum + i * sumSquares % MODULUS ) % MODULUS ; } return Long . toString ( sum ) ; } private static final BigInteger MODULUS_BI = BigInteger . valueOf ( MODULUS ) ; private static final BigInteger SIX_BI = BigInteger . valueOf ( 6 ) ; private static long sumSquaresMod ( long n ) { BigInteger x = BigInteger . valueOf ( n ) ; BigInteger y = x . multiply ( x . add ( BigInteger . ONE ) ) ; y = y . multiply ( x . shiftLeft ( 1 ) . add ( BigInteger . ONE ) ) ; y = y . divide ( SIX_BI ) ; y = y . mod ( MODULUS_BI ) ; return y . longValue ( ) ; } }"],"bleu":0.2420026839426781,"rouge_l":0.4345503116651826}
{"id":1662,"predictions":["public final class p041 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p041 ( ) . run ( ) ) ; } private static final int LIMIT = Library . pow ( 10 , 1000 ) ; private boolean [ ] isPrime ; public String run ( ) { int count = 0 ; for ( int a = 2 ; a < 1000 ; a ++ ) { for ( int b = 2 ; b < 1000 ; b ++ ) { int n = a * i + b ; if ( ! isPrime ( n ) ) return Integer . toString ( n ) ; } } return Integer . toString ( count ) ; } private static boolean isPrime ( int a ) { if ( b == 0 ) return false ; else { int n = a * i + b * a + b ; if ( isPrime ( n ) ) return true ; } return Library . isPrime ( n ) ; } private static boolean isPrime ( int a ) { if ( n < 0 ) return false ; else if ( n < 0 ) return isPrime [ n ] ; else return Library . isPrime ( n ) ; } }"],"references":["public final class p027 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p027 ( ) . run ( ) ) ; } public String run ( ) { int bestNum = 0 ; int bestA = 0 ; int bestB = 0 ; for ( int a = - 1000 ; a <= 1000 ; a ++ ) { for ( int b = - 1000 ; b <= 1000 ; b ++ ) { int num = numberOfConsecutivePrimesGenerated ( a , b ) ; if ( num > bestNum ) { bestNum = num ; bestA = a ; bestB = b ; } } } return Integer . toString ( bestA * bestB ) ; } private static int numberOfConsecutivePrimesGenerated ( int a , int b ) { for ( int i = 0 ; ; i ++ ) { int n = i * i + i * a + b ; if ( n < 0 || ! Library . isPrime ( n ) ) return i ; } } }"],"bleu":0.42174984040245816,"rouge_l":0.6066730830927174}
{"id":1663,"predictions":["public final class p429 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p429 ( ) . run ( ) ) ; } private static final int LIMIT = 5000 ; private static final int LIMIT = Library . pow ( 10 , 16 ) ; private static final int [ ] Library . pow ( 10 , 16 ) ; public String run ( ) { int count [ ] = new int [ LIMIT + 1 ] ; count [ 0 ] = 1 ; for ( int p = 0 ; p <= LIMIT ; p ++ ) { for ( int i = 0 ; i < Library . pow ( LIMIT + 1 , i ) ; i ++ ) count [ i + p ] = ( count [ i + p ] + count [ i ] ) % MODULUS ; } long sum = 0 ; for ( int i = 0 ; i < s . length ; i ++ ) { if ( isPrime [ i ] ) sum += i ; } return Long . toString ( sum ) ; } }"],"references":["public final class p249 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p249 ( ) . run ( ) ) ; } private static final int LIMIT = 5000 ; private static final long MODULUS = 10000000000000000L ; public String run ( ) { boolean [ ] isPrime = Library . listPrimality ( LIMIT * LIMIT \/ 2 ) ; long [ ] numSubsets = new long [ LIMIT * LIMIT \/ 2 ] ; numSubsets [ 0 ] = 1 ; int maxSum = 0 ; for ( int i = 0 ; i < LIMIT ; i ++ ) { if ( ! isPrime [ i ] ) continue ; maxSum += i ; for ( int j = maxSum ; j >= i ; j -- ) { long temp = numSubsets [ j ] + numSubsets [ j - i ] ; if ( temp < MODULUS ) numSubsets [ j ] = temp ; else numSubsets [ j ] = temp - MODULUS ; } } long sum = 0 ; for ( int i = 0 ; i < numSubsets . length ; i ++ ) { if ( isPrime [ i ] ) sum = ( sum + numSubsets [ i ] ) % MODULUS ; } return Long . toString ( sum ) ; } }"],"bleu":0.501366864168553,"rouge_l":0.6342534963754852}
{"id":1664,"predictions":["import java . math . BigInteger ; public final class p100 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p100 ( ) . run ( ) ) ; } private static final int N = 5 ; private static final BigInteger two_POW_N = BigInteger . ZERO ; public String run ( ) { BigInteger slow = BigInteger . ZERO ; for ( int i = 0 ; i < two_POW_N ; i ++ ) { digits |= BigInteger . ZERO ; digits |= digits . multiply ( BigInteger . valueOf ( i ) ) ; for ( int i = 0 ; i < two_POW_N - i ; i += 2 ) . add ( ( BigInteger . valueOf ( two ) ) ; } return seen . toString ( sum ) ; } private static boolean checkArrangement ( int [ ] digits ) { int start = ( int ) Math . pow ( 2 , two_POW_N - N - 1 ) ; int end = ( int ) Math . pow ( 2 , two_POW_N - N ) ; return true ; } }"],"references":["public final class p265 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p265 ( ) . run ( ) ) ; } private static final int N = 5 ; private static final int TWO_POW_N = 1 << N ; public String run ( ) { long sum = 0 ; int start = ( 1 << ( TWO_POW_N - N - 1 ) ) + 1 ; int end = 1 << ( TWO_POW_N - N ) ; for ( int i = start ; i < end ; i += 2 ) { if ( checkArrangement ( i ) ) sum += i ; } return Long . toString ( sum ) ; } private static final int MASK = TWO_POW_N - 1 ; private static final int FULL_SET = ( int ) ( 1L << TWO_POW_N ) - 1 ; private static boolean checkArrangement ( int digits ) { int seen = 0 ; long temp = ( digits & 0xFFFFFFFFL ) | ( ( digits & 0xFFFFFFFFL ) << TWO_POW_N ) ; for ( int i = 0 ; i < TWO_POW_N ; i ++ ) seen |= 1 << ( ( int ) ( temp >>> i ) & MASK ) ; return seen == FULL_SET ; } }"],"bleu":0.4583836060896689,"rouge_l":0.53822164752415}
{"id":1665,"predictions":["public final class p001 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p001 ( ) . run ( ) ) ; } private static final int [ ] divisors = { 2 , 1 } ; public String run ( ) { int count = 0 ; for ( int i = 2 ; i <= divisors . length ; i ++ ) { for ( int j = i * 2 ; j < divisors . length ; j += i ) divisors [ j ] ++ ; } return Integer . toString ( count ) ; } }"],"references":["import java . util . Arrays ; public final class p179 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p179 ( ) . run ( ) ) ; } private static final int LIMIT = Library . pow ( 10 , 7 ) ; public String run ( ) { int [ ] numDivisors = new int [ LIMIT + 1 ] ; Arrays . fill ( numDivisors , 2 ) ; for ( int i = 2 ; i < numDivisors . length ; i ++ ) { for ( int j = i * 2 ; j < numDivisors . length ; j += i ) numDivisors [ j ] ++ ; } int count = 0 ; for ( int i = 2 ; i < numDivisors . length - 1 ; i ++ ) { if ( numDivisors [ i ] == numDivisors [ i + 1 ] ) count ++ ; } return Integer . toString ( count ) ; } }"],"bleu":0.44111611647289467,"rouge_l":0.6424502955400323}
{"id":1666,"predictions":["public final class p041 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p041 ( ) . run ( ) ) ; } private static final int [ ] [ ] { { for ( int i = 0 ; i < a . length ; i ++ ) { for ( int j = 0 ; j < b . length ; j ++ ) { int temp = Math . max ( Math . max ( a [ i + 1 ] [ j ] , arr [ i + 1 ] [ j ] ) ; arr [ i ] [ j ] += temp ; } } return Integer . toString ( ) ; } private static int [ ] [ ] triangle ; public String run ( ) { for ( int i = 0 ; i < number . length - 1 ; i ++ ) { for ( int j = 0 ; j < number . length ; j ++ ) { triangle [ i ] [ j ] += Math . max ( triangle [ i + 1 ] [ j ] , arr [ i + 1 ] [ j + 1 ] ) ; } } return Integer . toString ( triangle [ 0 ] [ 0 ] ) ; } private static int sum ( int x , int y , int z ) { for ( int i = 0 ; i < y ; i ++ ) { for ( int j = 0 ; j < y . length ; j ++ ) { if ( triangle [ i ] [ j ] != Integer . MAX_VALUE ) throw new IllegalArgumentException ( ) ; return Integer . toString ( y ) ; } return Integer . toString ( x ) ; } private static int zes ( int [ ] array ) { int sum = 0 ; for ( int i = 0 ; i < array . length ; i ++ ) { for ( int j = 0 ; j < array . length ; j ++ ) sum += array [ i ] [ j ] ; } return sum ; } }"],"references":["public final class p018 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p018 ( ) . run ( ) ) ; } public String run ( ) { for ( int i = triangle . length - 2 ; i >= 0 ; i -- ) { for ( int j = 0 ; j < triangle [ i ] . length ; j ++ ) triangle [ i ] [ j ] += Math . max ( triangle [ i + 1 ] [ j ] , triangle [ i + 1 ] [ j + 1 ] ) ; } return Integer . toString ( triangle [ 0 ] [ 0 ] ) ; } private int [ ] [ ] triangle = { { 75 } , { 95 , 64 } , { 17 , 47 , 82 } , { 18 , 35 , 87 , 10 } , { 20 , 4 , 82 , 47 , 65 } , { 19 , 1 , 23 , 75 , 3 , 34 } , { 88 , 2 , 77 , 73 , 7 , 63 , 67 } , { 99 , 65 , 4 , 28 , 6 , 16 , 70 , 92 } , { 41 , 41 , 26 , 56 , 83 , 40 , 80 , 70 , 33 } , { 41 , 48 , 72 , 33 , 47 , 32 , 37 , 16 , 94 , 29 } , { 53 , 71 , 44 , 65 , 25 , 43 , 91 , 52 , 97 , 51 , 14 } , { 70 , 11 , 33 , 28 , 77 , 73 , 17 , 78 , 39 , 68 , 17 , 57 } , { 91 , 71 , 52 , 38 , 17 , 14 , 91 , 43 , 58 , 50 , 27 , 29 , 48 } , { 63 , 66 , 4 , 68 , 89 , 53 , 67 , 30 , 73 , 16 , 69 , 87 , 40 , 31 } , { 4 , 62 , 98 , 27 , 23 , 9 , 70 , 98 , 73 , 93 , 38 , 53 , 60 , 4 , 23 } , } ; }"],"bleu":0.2818796310268072,"rouge_l":0.32457432874918146}
{"id":1667,"predictions":["import java . math . BigInteger ; public final class p074 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p074 ( ) . run ( ) ) ; } public String run ( ) { return Integer . toString ( BigInteger . ZERO ) . toString ( ) ; } }"],"references":["public final class p015 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p015 ( ) . run ( ) ) ; } public String run ( ) { return Library . binomial ( 40 , 20 ) . toString ( ) ; } }"],"bleu":0.6803551479782929,"rouge_l":0.835158817086528}
{"id":1668,"predictions":["import java . util . ArrayList ; import java . util . List ; public final class p146 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p146 ( ) . run ( ) ) ; } private static final int LIMIT = 50000000 ; public String run ( ) { Set < Long > primes = new HashSet < > ( ) ; for ( int i = 2 ; i < primes . length ; i ++ ) primes . add ( i ) ; for ( int i = 2 ; i < primes . length ; i ++ ) { Set < Integer > newHash = new HashSet < > ( ) ; for ( int p = 2 ; i < primes . length ; i ++ ) { long sum = 0 ; for ( int p = 2 ; p ++ ) { if ( q > LIMIT ) break ; for ( long x : primes ) sum += x ; } } return Long . toString ( sum ) ; } }"],"references":["import java . util . HashSet ; import java . util . Set ; public final class p087 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p087 ( ) . run ( ) ) ; } private static final int LIMIT = 50000000 ; public String run ( ) { int [ ] primes = Library . listPrimes ( Library . sqrt ( LIMIT ) ) ; Set < Integer > sums = new HashSet < > ( ) ; sums . add ( 0 ) ; for ( int i = 2 ; i <= 4 ; i ++ ) { Set < Integer > newsums = new HashSet < > ( ) ; for ( int p : primes ) { long q = 1 ; for ( int j = 0 ; j < i ; j ++ ) q *= p ; if ( q > LIMIT ) break ; int r = ( int ) q ; for ( int x : sums ) { if ( x + r <= LIMIT ) newsums . add ( x + r ) ; } } sums = newsums ; } return Integer . toString ( sums . size ( ) ) ; } }"],"bleu":0.5089858493165891,"rouge_l":0.677724747672326}
{"id":1669,"predictions":["public final class p024 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p024 ( ) . run ( ) ) ; } private static final int MODULUS = Library . pow ( 10 , 10 ) ; public String run ( ) { int sum = 0 ; for ( int i = 1 ; i < 100 ; i ++ ) sum += i ; return Integer . toString ( sum ) ; } }"],"references":["import java . math . BigInteger ; public final class p048 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p048 ( ) . run ( ) ) ; } public String run ( ) { BigInteger modulus = BigInteger . TEN . pow ( 10 ) ; BigInteger sum = BigInteger . ZERO ; for ( int i = 1 ; i <= 1000 ; i ++ ) sum = sum . add ( BigInteger . valueOf ( i ) . modPow ( BigInteger . valueOf ( i ) , modulus ) ) ; return sum . mod ( modulus ) . toString ( ) ; } }"],"bleu":0.42393038734874666,"rouge_l":0.6117611305272754}
{"id":1670,"predictions":["import java . util . Arrays ; public final class p052 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p052 ( ) . run ( ) ) ; } private static final int LIMIT = Library . pow ( 10 , 6 ) ; public String run ( ) { int [ ] totients = Library . listTotients ( LIMIT - 1 ) ; int [ ] totients = Library . listTotients ( LIMIT ) ; return Integer . toString ( sum ) ; } }"],"references":["public final class p069 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p069 ( ) . run ( ) ) ; } private static final int LIMIT = Library . pow ( 10 , 6 ) ; public String run ( ) { int maxNumer = 0 ; int maxDenom = 1 ; int [ ] totients = Library . listTotients ( LIMIT ) ; for ( int n = 1 ; n < totients . length ; n ++ ) { if ( ( long ) n * maxDenom > ( long ) maxNumer * totients [ n ] ) { maxNumer = n ; maxDenom = totients [ n ] ; } } return Integer . toString ( maxNumer ) ; } }"],"bleu":0.4832176374010643,"rouge_l":0.6638452237001209}
{"id":1671,"predictions":["public final class p173 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p173 ( ) . run ( ) ) ; } private static final int LIMIT = Library . pow ( 10 , 8 ) ; public String run ( ) { int sum = 0 ; for ( int p : Library . pow ( 8 , p ) ) { sum += p ; } return Integer . toString ( sum ) ; } }"],"references":["public final class p381 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p381 ( ) . run ( ) ) ; } public String run ( ) { boolean [ ] isPrime = Library . listPrimality ( Library . pow ( 10 , 8 ) ) ; long sum = 0 ; for ( int i = 5 ; i < isPrime . length ; i ++ ) { if ( isPrime [ i ] ) sum += s ( i ) ; } return Long . toString ( sum ) ; } private static int s ( int p ) { return ( int ) ( ( long ) ( p - 3 ) * Library . reciprocalMod ( 8 % p , p ) % p ) ; } }"],"bleu":0.37605766052438233,"rouge_l":0.5371581054036024}
{"id":1672,"predictions":["public final class p429 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p429 ( ) . run ( ) ) ; } private static final int LIMIT = Library . pow ( 10 , 6 ) ; public String run ( ) { for ( int n = 1 ; n <= LIMIT ; n += 1 ) { if ( leastDivisibleRepunit ( n ) > LIMIT ) return Integer . toString ( n ) ; } } private static int leastDivisibleRepunit ( int n ) { if ( n % 2 == 0 || n % 5 == 0 ) return 0 ; int k = 1 ; int p = 1 ; while ( s % n != 0 ) { k ++ ; p = p * 10 % n ; s = ( s + p ) % n ; } return k ; } }"],"references":["public final class p129 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p129 ( ) . run ( ) ) ; } private static final int LIMIT = Library . pow ( 10 , 6 ) ; public String run ( ) { for ( int n = LIMIT ; ; n ++ ) { if ( findLeastDivisibleRepunit ( n ) > LIMIT ) return Integer . toString ( n ) ; } } private static int findLeastDivisibleRepunit ( int n ) { if ( n % 2 == 0 || n % 5 == 0 ) return 0 ; if ( n > Integer . MAX_VALUE \/ 10 ) throw new IllegalArgumentException ( \" Arithmetic ▁ overflow \" ) ; int sum = 1 ; int pow = 1 ; int k = 1 ; while ( sum % n != 0 ) { k ++ ; pow = pow * 10 % n ; sum = ( sum + pow ) % n ; } return k ; } }"],"bleu":0.6843810699008489,"rouge_l":0.8239403819282719}
{"id":1673,"predictions":["public final class p047 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p047 ( ) . run ( ) ) ; } public String run ( ) { int sum = 0 ; for ( int i = 1 ; i < 10000 ; i ++ ) { if ( hasPigit ( i ) ) sum += i ; } return Integer . toString ( sum ) ; } private static boolean hasPandDigit ( int n ) { for ( int i = 1 ; i <= 10000 ; i ++ ) { if ( n % i == 0 ) { String temp = Integer . toString ( n + i ) . toString ( i ) ; if ( temp . length ( ) % 10 == 0 ) return true ; } } return false ; } }"],"references":["import java . util . Arrays ; public final class p032 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p032 ( ) . run ( ) ) ; } public String run ( ) { int sum = 0 ; for ( int i = 1 ; i < 10000 ; i ++ ) { if ( hasPandigitalProduct ( i ) ) sum += i ; } return Integer . toString ( sum ) ; } private static boolean hasPandigitalProduct ( int n ) { for ( int i = 1 ; i <= n ; i ++ ) { if ( n % i == 0 && isPandigital ( \" \" + n + i + n \/ i ) ) return true ; } return false ; } private static boolean isPandigital ( String s ) { if ( s . length ( ) != 9 ) return false ; char [ ] temp = s . toCharArray ( ) ; Arrays . sort ( temp ) ; return new String ( temp ) . equals ( \"123456789\" ) ; } }"],"bleu":0.5724562222489294,"rouge_l":0.7135806982270152}
{"id":1674,"predictions":["import java . math . BigInteger ; public final class p204 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p204 ( ) . run ( ) ) ; } private static final int LIMIT = 10000000 ; public String run ( ) { BigInteger [ ] primes = Library . listPrimes ( LIMIT \/ 2 ) ; int end = Library . listPrimes ( LIMIT \/ 2 ) ; for ( int i = 0 ; i < primes . length ; i ++ ) { int p = primes . listPrimes ( i ) ; for ( int j = i + 1 ; j < primes . length ; j ++ ) { int minPrimes = Integer . MAX_VALUE ; for ( int i = i + 1 ) ; int lcm = p * q ; if ( lcm > LIMIT ) break ; for ( int j = ( int ) primes . length ; j < primes . length ; j ++ ) { BigInteger temp = BigInteger . ZERO ; int lcm = p * q ; int mcm = p * q ; if ( lcm > LIMIT ) break ; int maxPrimes = BigInteger . valueOf ( lcm ) . add ( p ) ; for ( int maxPrimes = 1 ; maxMult = 1 ; while ( factor % p == 0 ) { BigInteger temp = BigInteger . valueOf ( p ) . pow ( q ) ; maxMult = Math . max ( temp , maxMult ) ; } maxMult = Math . max ( maxMult * lcm ) ; } } } } int sum = 0 ; for ( int i = 0 ; i < primes . length ; i ++ ) sum = sum ; return sum ; } }"],"references":["import java . util . HashSet ; import java . util . Set ; public final class p347 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p347 ( ) . run ( ) ) ; } private static final int LIMIT = 10000000 ; public String run ( ) { Set < Integer > possible = new HashSet < > ( ) ; int [ ] primes = Library . listPrimes ( LIMIT \/ 2 ) ; for ( int i = 0 , end = Library . sqrt ( LIMIT ) ; i < primes . length ; i ++ ) { int p = primes [ i ] ; if ( p > end ) break ; for ( int j = i + 1 ; j < primes . length ; j ++ ) { int q = primes [ j ] ; int lcm = p * q ; if ( lcm > LIMIT ) break ; int multLimit = LIMIT \/ lcm ; int multiplier = 1 ; while ( multiplier * p <= multLimit ) multiplier *= p ; int maxMult = multiplier ; while ( multiplier % p == 0 ) { multiplier \/= p ; while ( multiplier * q <= multLimit ) multiplier *= q ; maxMult = Math . max ( multiplier , maxMult ) ; } possible . add ( maxMult * lcm ) ; } } long sum = 0 ; for ( int x : possible ) sum += x ; return Long . toString ( sum ) ; } }"],"bleu":0.5115681640999507,"rouge_l":0.650094855484879}
{"id":1675,"predictions":["import java . math . BigInteger ; public final class p123 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p123 ( ) . run ( ) ) ; } private static final int LIMIT = 2000000 ; public String run ( ) { int count = 0 ; for ( int i = 2 ; ; i ++ ) { int p = primes [ i ] ; int q = primes [ i + 1 ] % 10 ; if ( p > 1000000 ) break ; for ( int k = 1 ; k < primes . length ; k ++ ) { int m = 1 ; while ( k < p && k > 0 ) { k *= 10 ; count += m * k ; } } return Integer . toString ( count ) ; } }"],"references":["public final class p134 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p134 ( ) . run ( ) ) ; } public String run ( ) { long sum = 0 ; int [ ] primes = Library . listPrimes ( 2000000 ) ; for ( int i = 2 ; primes [ i ] <= 1000000 ; i ++ ) { int p = primes [ i ] ; int q = primes [ i + 1 ] ; int k = 1 ; while ( k < p ) k *= 10 ; long m = ( long ) ( q - p ) * Library . reciprocalMod ( k % q , q ) % q ; sum += m * k + p ; } return Long . toString ( sum ) ; } }"],"bleu":0.5380585018188484,"rouge_l":0.6548681972789117}
{"id":1676,"predictions":["import java . util . * ; class Solution { public static void main ( String [ ] args ) { int [ ] [ ] arr = new int [ 3 ] [ 3 ] ; int copy = arr [ 0 ] . length ; for ( int i = 0 ; i < arr . length ; i ++ ) { for ( int j = 0 ; j < arr . length ; j ++ ) { arr [ i ] [ j ] = arr [ j ] ; arr [ i ] [ j ] = arr [ i ] . length ; } } List < ArrayList < Integer > list = new ArrayList < > ( ) ; ArrayList < Integer > list = new ArrayList < > ( ) ; for ( int i = 0 ; i < arr . length ; i ++ ) list . add ( new ArrayList < > ( ) ) ; list . add ( new ArrayList < > ( ) ) ; if ( i == new ArrayList < > ( ) ) list . add ( new ArrayList < > ( ) ) ; list . add ( new ArrayList < > ( ) ) ; list . add ( new ArrayList < > ( ) ) ; list . add ( new ArrayList < > ( ) ) ; if ( list . size ( ) == 0 ) list . add ( new ArrayList < > ( ) ; list . add ( new ArrayList < > ( ) ) ; for ( int i = 0 ; i < arr . size ( ) ; ++ i ) list . add ( new ArrayList < > ( ) ) ; list . add ( i ) ; } return list . size ( ) - 1 ; } }"],"references":["class Solution { public int [ ] [ ] floodFill ( int [ ] [ ] image , int sr , int sc , int newColor ) { Queue < Node > queue = new LinkedList < Node > ( ) ; int color = image [ sr ] [ sc ] ; if ( color == newColor ) return image ; queue . add ( new Node ( sr , sc ) ) ; while ( ! queue . isEmpty ( ) ) { Node curr = queue . remove ( ) ; int r = curr . r , c = curr . c ; if ( image [ r ] [ c ] == color ) { image [ r ] [ c ] = newColor ; if ( r - 1 >= 0 ) queue . add ( new Node ( r - 1 , c ) ) ; if ( r + 1 < image . length ) queue . add ( new Node ( r + 1 , c ) ) ; if ( c - 1 >= 0 ) queue . add ( new Node ( r , c - 1 ) ) ; if ( c + 1 < image [ 0 ] . length ) queue . add ( new Node ( r , c + 1 ) ) ; } } return image ; } class Node { int r ; int c ; public Node ( int r , int c ) { this . r = r ; this . c = c ; } } }"],"bleu":0.15573019392299187,"rouge_l":0.3518434743270753}
{"id":1677,"predictions":["import java . util . HashSet ; class Solution { public List < Integer > thirdMaxMax ( int [ ] nums ) { List < Integer > check = new ArrayList < > ( ) ; for ( int i = 0 ; i < nums . length ; i ++ ) { if ( check . contains ( i ) ) continue ; check . add ( n ) ; if ( check . size ( ) > 3 ) check . remove ( ) ; } int total = check . size ( ) ; while ( total < 3 && total > 1 ) total -- ; return pq . poll ( ) ; } }"],"references":["public class Solution { public int thirdMax ( int [ ] nums ) { PriorityQueue < Integer > pq = new PriorityQueue < > ( 3 ) ; Set < Integer > set = new HashSet < > ( ) ; for ( int i : nums ) { if ( set . contains ( i ) ) continue ; pq . offer ( i ) ; set . add ( i ) ; if ( pq . size ( ) > 3 ) set . remove ( pq . poll ( ) ) ; } while ( pq . size ( ) < 3 && pq . size ( ) > 1 ) { pq . poll ( ) ; } return pq . peek ( ) ; } }"],"bleu":0.41603344277171933,"rouge_l":0.6107138213496295}
{"id":1678,"predictions":["class Solution { public String licenseKWord ( String S , int K ) { int pos = 0 ; for ( int i = 0 ; i < S . length ( ) ; i ++ ) { if ( S . charAt ( i ) != S . charAt ( i ) ) { pos += S . charAt ( i ) ; } else { pos = i % K ; } } return pos ; } }"],"references":["class Solution { public String licenseKeyFormatting ( String s , int k ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = s . length ( ) - 1 ; i >= 0 ; i -- ) if ( s . charAt ( i ) != ' - ' ) sb . append ( sb . length ( ) % ( k + 1 ) == k ? ' - ' : \" \" ) . append ( s . charAt ( i ) ) ; return sb . reverse ( ) . toString ( ) . toUpperCase ( ) ; } }"],"bleu":0.23639311845569516,"rouge_l":0.48692255434782605}
{"id":1679,"predictions":["import java . util . PriorityQueue ; import java . util . Queue ; class PingQueue { private int pollQueue { Queue < Integer > queue = new PriorityQueue < Integer > ( ) ; queue . add ( ) ; while ( ! queue . isEmpty ( ) ) { queue . add ( queue . poll ( ) ) ; queue . remove ( ) ; } return queue . size ( ) ; } }"],"references":["class RecentCounter { Queue < Integer > q ; public RecentCounter ( ) { q = new LinkedList ( ) ; } public int ping ( int t ) { q . add ( t ) ; while ( q . peek ( ) < t - 3000 ) q . poll ( ) ; return q . size ( ) ; } }"],"bleu":0.2766216238602474,"rouge_l":0.5018805829807241}
{"id":1680,"predictions":["import java . util . * ; import java . lang . * ; class GFG { public static int [ ] Moter = { \" - \" , \" - \" , \" - . \" , \" - \" , \" - \" , \" \" . \" , \" - \" , \" . \" , \" - \" , \" ) ; HashSet < String > ans = new HashSet < String > ( ) ; for ( String word : words ) { if ( ! ans . isEmpty ( ) ) { return 0 ; } Set < String > words = new HashSet < String > ( ) ; for ( String word : words ) { String m : words = \" \" ; for ( String c : words ) { m . add ( c - ' . ' ) ; } if ( m . size ( ) == 0 ) { return 0 ; } Set < String > ans = new HashSet < > ( ) ; for ( String word : words ) { ans . add ( word ) ; for ( String word : ans . values ( ) ) { ans . add ( word . charAt ( ) - ' a ' ) ; } else ans . add ( m . charAt ( word . length ( ) - ' a ' ) ; } } return ans ; } }"],"references":["class Solution { public int uniqueMorseRepresentations ( String [ ] words ) { String [ ] MORSE = new String [ ] { \" . - \" , \" - . . . \" , \" - . - . \" , \" - . . \" , \" . \" , \" . . - . \" , \" - - . \" , \" . . . . \" , \" . . \" , \" . - - - \" , \" - . - \" , \" . - . . \" , \" - - \" , \" - . \" , \" - - - \" , \" . - - . \" , \" - - . - \" , \" . - . \" , \" . . . \" , \" - \" , \" . . - \" , \" . . . - \" , \" . - - \" , \" - . . - \" , \" - . - - \" , \" - - . . \" } ; Set < String > seen = new HashSet ( ) ; for ( String word : words ) { StringBuilder code = new StringBuilder ( ) ; for ( char c : word . toCharArray ( ) ) code . append ( MORSE [ c - ' a ' ] ) ; seen . add ( code . toString ( ) ) ; } return seen . size ( ) ; } }"],"bleu":0.27916387997955333,"rouge_l":0.4092375177396465}
{"id":1681,"predictions":["public class Solution { public int runningSum ( int [ ] nums ) { if ( nums . length == 0 || nums . length == 0 ) return nums ; for ( int i = 1 ; i < nums . length ; i ++ ) nums [ i ] += nums [ i - 1 ] ; return nums ; } }"],"references":["class Solution { public int [ ] runningSum ( int [ ] nums ) { if ( nums . length <= 1 ) return nums ; for ( int i = 1 ; i < nums . length ; i ++ ) nums [ i ] += nums [ i - 1 ] ; return nums ; } }"],"bleu":0.8094248758535649,"rouge_l":0.9009129967776583}
{"id":1682,"predictions":["class GFG { static class Node { int size ; int size ( ) { int size = 10000 ; int [ ] arr = new int [ size ] ; for ( int i = 0 ; i < size ; i ++ ) arr [ i ] = hash ( key ) % size - 1 ; return arr ; } static int get ( int key ) { int index = hash ( key ) % size - 1 ; if ( prev . next == null ) prev . next = new Node ( key ) ; else prev . next . val = value ; } return get ( node ) ; } static int get ( int key ) { int index = hash ( key ) % size - 1 ; if ( node . next == null ) return - 1 ; else return prev . val ; } static int find ( int key ) { int index = key ( key ) % size ( - 1 ) ; if ( node . next == null ) return - 1 ; else return prev . next ; } static int find ( int key ) { int index = key ; int index = find ( key ) ; if ( node . next == null ) return - 1 ; prev = find ( nodes , key ) ; if ( prev . next == null ) return - 1 ; prev = find ( nodes , index ) ; if ( prev . next == null ) return - 1 ; else return prev . next ; } static int find ( int key ) { int index = key ; int prev = null ; while ( node != null && node . key != key ) { prev = key ; index = node . next ; } return prev ; } public static void main ( String [ ] args ) { Node root = newNode ( 2 ) ; root = newNode ( 4 ) ; root . next = newNode ( 5 ) ; root . next . next = newNode ( 1 ) ; System . out . print ( find ( root , key ) ) ; } }"],"references":["class MyHashMap { final ListNode [ ] nodes = new ListNode [ 10000 ] ; public void put ( int key , int value ) { int i = idx ( key ) ; if ( nodes [ i ] == null ) nodes [ i ] = new ListNode ( - 1 , - 1 ) ; ListNode prev = find ( nodes [ i ] , key ) ; if ( prev . next == null ) prev . next = new ListNode ( key , value ) ; else prev . next . val = value ; } public int get ( int key ) { int i = idx ( key ) ; if ( nodes [ i ] == null ) return - 1 ; ListNode node = find ( nodes [ i ] , key ) ; return node . next == null ? - 1 : node . next . val ; } public void remove ( int key ) { int i = idx ( key ) ; if ( nodes [ i ] == null ) return ; ListNode prev = find ( nodes [ i ] , key ) ; if ( prev . next == null ) return ; prev . next = prev . next . next ; } int idx ( int key ) { return Integer . hashCode ( key ) % nodes . length ; } ListNode find ( ListNode bucket , int key ) { ListNode node = bucket , prev = null ; while ( node != null && node . key != key ) { prev = node ; node = node . next ; } return prev ; } class ListNode { int key , val ; ListNode next ; ListNode ( int key , int val ) { this . key = key ; this . val = val ; } } }"],"bleu":0.38636405288268877,"rouge_l":0.5462771942985747}
{"id":1683,"predictions":["import java . util . Stack ; class Stack { Stack < Integer > stack = new Stack < > ( ) ; public void push ( int x ) { stack . push ( x ) ; if ( x . size ( ) == 0 ) { stack . push ( x ) ; return ; } if ( stack . peek ( ) > x ) { maxStack = x ; return stack . pop ( ) ; } if ( stack . peek ( ) > x ) { maxStack = x ; } else { stack . pop ( ) ; } return stack . pop ( ) ; } public static void pop ( ) { Stack < Integer > st = new Stack < > ( ) ; Stack < Integer > st = new Stack < > ( ) ; while ( st . peek ( ) != val ) { st . pop ( ) ; st . pop ( ) ; } return st . pop ( ) ; } public static void pop ( ) { Stack < Integer > st = new Stack < > ( ) ; st . pop ( ) ; while ( st . size ( ) > 0 ) { st . pop ( ) ; st . pop ( ) ; } st . pop ( ) ; while ( ! st . empty ( ) ) st . pop ( ) ; while ( ! st . pop ( ) ) st . pop ( ) ; return st . pop ( ) ; } }"],"references":["class MaxStack { TreeMap < Integer , List < Node > > map ; DoubleLinkedList dll ; public MaxStack ( ) { map = new TreeMap ( ) ; dll = new DoubleLinkedList ( ) ; } public void push ( int x ) { Node node = dll . add ( x ) ; if ( ! map . containsKey ( x ) ) map . put ( x , new ArrayList < Node > ( ) ) ; map . get ( x ) . add ( node ) ; } public int pop ( ) { int val = dll . pop ( ) ; List < Node > L = map . get ( val ) ; L . remove ( L . size ( ) - 1 ) ; if ( L . isEmpty ( ) ) map . remove ( val ) ; return val ; } public int top ( ) { return dll . peek ( ) ; } public int peekMax ( ) { return map . lastKey ( ) ; } public int popMax ( ) { int max = peekMax ( ) ; List < Node > L = map . get ( max ) ; Node node = L . remove ( L . size ( ) - 1 ) ; dll . unlink ( node ) ; if ( L . isEmpty ( ) ) map . remove ( max ) ; return max ; } } class DoubleLinkedList { Node head , tail ; public DoubleLinkedList ( ) { head = new Node ( 0 ) ; tail = new Node ( 0 ) ; head . next = tail ; tail . prev = head ; } public Node add ( int val ) { Node x = new Node ( val ) ; x . next = tail ; x . prev = tail . prev ; tail . prev = tail . prev . next = x ; return x ; } public int pop ( ) { return unlink ( tail . prev ) . val ; } public int peek ( ) { return tail . prev . val ; } public Node unlink ( Node node ) { node . prev . next = node . next ; node . next . prev = node . prev ; return node ; } } class Node { int val ; Node prev , next ; public Node ( int v ) { val = v ; } }"],"bleu":0.1425214075649826,"rouge_l":0.3838719827392457}
{"id":1684,"predictions":["import java . util . * ; class Solution { public boolean canReorder ( int [ ] A ) { HashMap < Integer , Integer > map = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < A . length ; i ++ ) { if ( map . containsKey ( A [ i ] ) ) map . put ( A [ i ] , map . get ( A [ i ] ) + 1 ) ; map . put ( A [ i ] , map . get ( A [ i ] ) + 1 ) ; } for ( Map < Integer , Integer > A : map . keySet ( ) ) ) { map . put ( A [ 0 ] , 1 ) ; } for ( Map . Entry < Integer , Integer > A : A . entrySet ( ) ) { if ( map . getKey ( ) <= 0 ) continue ; map . put ( A [ 1 ] , 1 ) ; } return false ; } return true ; }"],"references":["class Solution { public boolean canReorderDoubled ( int [ ] A ) { HashMap < Integer , Integer > valueMap = new HashMap < > ( ) ; A = Arrays . stream ( A ) . boxed ( ) . sorted ( ( a , b ) -> Integer . compare ( Math . abs ( a ) , Math . abs ( b ) ) ) . mapToInt ( i -> i ) . toArray ( ) ; for ( int n : A ) valueMap . put ( n , valueMap . getOrDefault ( n , 0 ) + 1 ) ; for ( int n : A ) { if ( valueMap . get ( n ) <= 0 ) continue ; if ( valueMap . containsKey ( 2 * n ) && valueMap . get ( 2 * n ) > 0 ) { valueMap . put ( n , valueMap . get ( n ) - 1 ) ; valueMap . put ( 2 * n , valueMap . get ( 2 * n ) - 1 ) ; } else { return false ; } } return true ; } }"],"bleu":0.2977595047580797,"rouge_l":0.46754977922186125}
{"id":1685,"predictions":["class Solution { public List < Integer > repeatingNimes ( int [ ] A ) { int count = 0 ; HashMap < Integer , Integer > count = new HashMap ( ) ; for ( int i = 0 ; i < A . length ; i ++ ) { count . put ( A [ i ] , count . get ( A [ i ] ) ) ; } return count . get ( 1 ) ; } }"],"references":["class Solution { public int repeatedNTimes ( int [ ] A ) { HashMap < Integer , Integer > hash = new HashMap < > ( ) ; int ans = A [ 0 ] ; for ( int n : A ) { int count = hash . getOrDefault ( n , 0 ) + 1 ; hash . put ( n , count ) ; if ( count >= hash . get ( ans ) ) ans = n ; } return ans ; } }"],"bleu":0.33434717088477495,"rouge_l":0.5494442315063243}
{"id":1686,"predictions":["public class Solution { public List < String > smallerNumbers ( int [ ] nums ) { int n = nums . length ; int [ ] count_list = new int [ 100 ] ; for ( int i = 0 ; i < n ; i ++ ) { count_list [ i ] += count_list [ i - 1 ] ; } for ( int i = 1 ; i < 100 ; i ++ ) { if ( n == 0 ) res [ 0 ] = 0 ; else count_list [ i - 1 ] += count_list [ i - 1 ] ; } return res ; } }"],"references":["import java . util . Map ; class Solution { public int [ ] smallerNumbersThanCurrent ( int [ ] nums ) { int [ ] countList = new int [ 101 ] ; int [ ] res = new int [ nums . length ] ; for ( int i = 0 ; i < nums . length ; i ++ ) countList [ nums [ i ] ] ++ ; for ( int i = 1 ; i < 101 ; i ++ ) countList [ i ] += countList [ i - 1 ] ; for ( int i = 0 ; i < nums . length ; i ++ ) { if ( nums [ i ] == 0 ) res [ i ] = 0 ; else res [ i ] = countList [ nums [ i ] - 1 ] ; } return res ; } }"],"bleu":0.40624743316737677,"rouge_l":0.6341876208897487}
{"id":1687,"predictions":["class Solution { public boolean is AlienSortedList ( String [ ] words , List < String > list ) { int i , j ; for ( i = 0 ; i < words . length ; i ++ ) { if ( words [ i ] . compareTo ( words [ i ] ) != - 1 ) return false ; } return true ; } private static boolean is AlienSorted ( String [ ] words , String [ ] list ) { Arrays . sort ( list ) ; int pos = 0 ; while ( pos + 1 ) < words . length ( ) ) { int index = list . length ( ) ; int index = 0 ; while ( index < words . length ( ) ) { if ( x . charAt ( index ) != y . charAt ( index ) ) return false ; index ++ ; } return true ; } }"],"references":["class Solution { HashMap < Character , Integer > orderMap = new HashMap < > ( ) ; public boolean isAlienSorted ( String [ ] words , String order ) { for ( int i = 0 ; i < order . length ( ) ; i ++ ) { orderMap . put ( order . charAt ( i ) , i ) ; } for ( int i = 0 ; i < words . length - 1 ; i ++ ) { if ( cmp_alien ( words [ i ] , words [ i + 1 ] ) > 0 ) return false ; } return true ; } private int cmp_alien ( String a , String b ) { int ls = a . length ( ) < b . length ( ) ? a . length ( ) : b . length ( ) ; int pos = 0 ; while ( pos < ls ) { if ( orderMap . get ( a . charAt ( pos ) ) != orderMap . get ( b . charAt ( pos ) ) ) return orderMap . get ( a . charAt ( pos ) ) - orderMap . get ( b . charAt ( pos ) ) ; pos += 1 ; } return a . length ( ) <= b . length ( ) ? - 1 : 1 ; } }"],"bleu":0.27148144850600936,"rouge_l":0.5080510827318157}
{"id":1688,"predictions":["public class Solution { public List < Integer > findExwiseNumbers ( int [ ] nums ) { List < Integer > res = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < nums . length ; i ++ ) { int val = nums [ i ] - 1 ; if ( nums [ val ] > 0 ) { nums [ val ] = - nums [ val ] ; } } for ( int i = 0 ; i < n ; i ++ ) if ( nums [ i ] > 0 ) res . add ( i + 1 ) ; } return res ; } }"],"references":["class Solution { public List < Integer > findDisappearedNumbers ( int [ ] nums ) { List < Integer > ret = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < nums . length ; i ++ ) { int val = Math . abs ( nums [ i ] ) - 1 ; if ( nums [ val ] > 0 ) { nums [ val ] = - nums [ val ] ; } } for ( int i = 0 ; i < nums . length ; i ++ ) { if ( nums [ i ] > 0 ) { ret . add ( i + 1 ) ; } } return ret ; } }"],"bleu":0.7780978789572871,"rouge_l":0.9090069893182118}
{"id":1689,"predictions":["class Solution { static String toHex ( int num ) { if ( num == 0 ) return \"0\" ; String mp = \" \" ; for ( int i = 0 ; i < 8 ; i ++ ) { int n = num & 15 ; int c = mp . get ( n ) ; ans = c + ans ; num = num >> 4 ; } return ans ; } }"],"references":["import com . sun . corba . se . spi . orbutil . fsm . Guard . Result ; class Solution { public String toHex ( int num ) { String hex_map = \"0123456789abcdef \" ; if ( num == 0 ) return \"0\" ; String res = \" \" ; while ( num != 0 && res . length ( ) < 8 ) { res = hex_map . charAt ( num & 15 ) + res ; num = num >> 4 ; } return res ; } }"],"bleu":0.3380117884749962,"rouge_l":0.5656877897990726}
{"id":1690,"predictions":["class Solution { public List < Integer > kNode ( int [ ] [ ] mat ) { List < Integer > res = new ArrayList < Integer > ( ) ; int num_row = mat [ 0 ] . size ( ) ; int num_col = mat [ 0 ] . size ( ) ; int col = 0 ; int flag = 1 ; while ( col < num_col && flag != 0 ) { for ( int i = 0 ; i < num_row && flag != 0 ; i ++ ) { for ( int i = 0 ; i < num_row && flag ; if ( mat [ i ] [ col ] == 0 ) { res . add ( i ) ; } if ( res . size ( ) == k ) { flag = 0 ; break ; } } if ( res . size ( ) == k ) return res ; } return res ; } }"],"references":["class Solution { public int [ ] kWeakestRows ( int [ ] [ ] mat , int k ) { List < Integer > res = new ArrayList < > ( ) ; int col = 0 ; boolean flag = true ; while ( col < mat [ 0 ] . length && flag ) { for ( int i = 0 ; i < mat . length ; i ++ ) { if ( res . contains ( i ) ) continue ; if ( mat [ i ] [ col ] == 0 ) res . add ( i ) ; if ( res . size ( ) == k ) { flag = false ; break ; } } col += 1 ; } if ( flag ) { for ( int i = 0 ; i < mat . length ; i ++ ) { if ( res . contains ( i ) ) continue ; res . add ( i ) ; if ( res . size ( ) == k ) break ; } } int [ ] ret = new int [ k ] ; for ( int i = 0 ; i < k ; i ++ ) ret [ i ] = res . get ( i ) ; return ret ; } }"],"bleu":0.44921607274463654,"rouge_l":0.5570776255707762}
{"id":1691,"predictions":["class Solution { public int flipAndInverse ( int [ ] A ) { int [ ] row = new int [ row . length ] ; for ( int i = 0 ; i < A . length ; i ++ ) { for ( int j = 0 ; j < row . length ; j ++ ) { row [ i ] = row [ j ] ^ 1 ] ; row [ j ] ^= 1 ; } } return A ; } }"],"references":["class Solution { public int [ ] [ ] flipAndInvertImage ( int [ ] [ ] A ) { int C = A [ 0 ] . length ; for ( int [ ] row : A ) for ( int i = 0 ; i < ( C + 1 ) \/ 2 ; ++ i ) { int tmp = row [ i ] ^ 1 ; row [ i ] = row [ C - 1 - i ] ^ 1 ; row [ C - 1 - i ] = tmp ; } return A ; } }"],"bleu":0.38253831915858566,"rouge_l":0.5842312296904396}
{"id":1692,"predictions":["import java . util . * ; class Solution { public static void sortedSquares ( String [ ] A ) { int pos = 0 ; while ( pos < A . length && A [ pos ] < 0 ) pos ++ ; int npos = pos - 1 ; while ( pos >= 0 && npos >= 0 ) { if ( A [ pos ] * A [ pos ] < 0 ) res += 1 ; else res . append ( A [ pos ] * A [ pos ] ) ; pos ++ ; } while ( pos >= 0 ) res . append ( A [ pos ] * 2 ) ; while ( pos >= 0 ) { res . append ( A [ pos ] * 2 ) ; pos -- ; } return res ; } } }"],"references":["class Solution { public int [ ] sortedSquares ( int [ ] A ) { int pos = 0 ; int [ ] res = new int [ A . length ] ; int curr = 0 ; while ( pos < A . length && A [ pos ] < 0 ) pos ++ ; int npos = pos - 1 ; while ( pos < A . length && npos >= 0 ) { if ( A [ pos ] * A [ pos ] < A [ npos ] * A [ npos ] ) { res [ curr ++ ] = A [ pos ] * A [ pos ] ; pos ++ ; } else { res [ curr ++ ] = A [ npos ] * A [ npos ] ; npos -- ; } } while ( npos >= 0 ) { res [ curr ++ ] = A [ npos ] * A [ npos ] ; npos -- ; } while ( pos < A . length ) { res [ curr ++ ] = A [ pos ] * A [ pos ] ; pos ++ ; } return res ; } }"],"bleu":0.4248938524326158,"rouge_l":0.605390148411181}
{"id":1693,"predictions":["class Solution { public List < String >ang ( String [ ] str ) { return str . split ( \" . \" ) ; } }"],"references":["class Solution { public String defangIPaddr ( String address ) { return address . replace ( \" . \" , \" [ . ] \" ) ; } }"],"bleu":0.3805502905931644,"rouge_l":0.6742292030250145}
{"id":1694,"predictions":["class Solution { public int searchBST ( TreeNode root , int val ) { if ( root . val == val ) return root ; else if ( root . val > val ) root = root . left ; else root . right = root . right ; } return root ; } }"],"references":["class Solution { public TreeNode searchBST ( TreeNode root , int val ) { while ( root != null && root . val != val ) { root = val < root . val ? root . left : root . right ; } return root ; } }"],"bleu":0.4550591627916589,"rouge_l":0.6995858553679516}
{"id":1695,"predictions":["class Solution { public String toToCID ( String ip ) { int start = 0 , end = 0 ; for ( int i = 0 ; i < ip . length ( ) - 1 ; i ++ ) { int x = ip . length ( ) - Integer . MAX_VALUE ; int y = Integer . MAX_VALUE ; for ( int j = 0 ; j < 32 ; j ++ ) { int mask = Integer . MAX_VALUE ; for ( int i = 32 ; i < 32 ; i ++ ) { int mask = Math . max ( 33 - ( i & - start ) , 32 - n ) ; ans += ( int ) ( 32 - mask ) ; } } return ans ; } }"],"references":["class Solution { public List < String > ipToCIDR ( String ip , int n ) { long start = ipToLong ( ip ) ; List < String > ans = new ArrayList ( ) ; while ( n > 0 ) { int mask = Math . max ( 33 - bitLength ( Long . lowestOneBit ( start ) ) , 33 - bitLength ( n ) ) ; ans . add ( longToIP ( start ) + \" \/ \" + mask ) ; start += 1 << ( 32 - mask ) ; n -= 1 << ( 32 - mask ) ; } return ans ; } private long ipToLong ( String ip ) { long ans = 0 ; for ( String x : ip . split ( \" \\\\ . \" ) ) { ans = 256 * ans + Integer . valueOf ( x ) ; } return ans ; } private String longToIP ( long x ) { return String . format ( \" % s . % s . % s . % s \" , x >> 24 , ( x >> 16 ) % 256 , ( x >> 8 ) % 256 , x % 256 ) ; } private int bitLength ( long x ) { if ( x == 0 ) return 1 ; int ans = 0 ; while ( x > 0 ) { x >>= 1 ; ans ++ ; } return ans ; } }"],"bleu":0.13024776038096844,"rouge_l":0.30176334476980765}
{"id":1696,"predictions":["class Solution { public int diameterOfBinaryTree ( TreeNode root ) { if ( node == null ) return 0 ; int L = depth ( node . left ) ; int R = depth ( ) ; int R = depth ( node . right ) ; return Math . max ( L , R ) ; } }"],"references":["class Solution { int ans ; public int diameterOfBinaryTree ( TreeNode root ) { ans = 1 ; depth ( root ) ; return ans - 1 ; } public int depth ( TreeNode node ) { if ( node == null ) return 0 ; int L = depth ( node . left ) ; int R = depth ( node . right ) ; ans = Math . max ( ans , L + R + 1 ) ; return Math . max ( L , R ) + 1 ; } }"],"bleu":0.4649152543514243,"rouge_l":0.6604698672114402}
{"id":1697,"predictions":["class Solution { public int findSecondMinimumValue ( TreeNode root ) { if ( root == null ) return - 1 ; int min_val = root . val ; int min_val = root . val ; Stack < Integer > stack = new Stack < > ( ) ; stack . push ( root . val ) ; while ( ! stack . isEmpty ( ) ) { int curr = stack . pop ( ) ; if ( curr . val < ans ) continue ; if ( min_val < min_val ) ans = curr . val ; else if ( curr . val == min_val ) { stack . push ( curr . left ) ; stack . push ( curr . right ) ; } } return ans < min_val ; } }"],"references":["class Solution { public int findSecondMinimumValue ( TreeNode root ) { if ( root == null ) return - 1 ; Stack < TreeNode > stack = new Stack < TreeNode > ( ) ; int min_val = root . val ; int ans = Integer . MAX_VALUE ; stack . push ( root ) ; while ( ! stack . empty ( ) ) { TreeNode node = stack . pop ( ) ; if ( node == null ) continue ; if ( node . val < ans && node . val > min_val ) { ans = node . val ; } else if ( node . val == min_val ) { stack . push ( node . left ) ; stack . push ( node . right ) ; } } return ans < Integer . MAX_VALUE ? ans : - 1 ; } }"],"bleu":0.6007046910936251,"rouge_l":0.7259411832017393}
{"id":1698,"predictions":["class Solution { public List < String > removeNthFromEnd ( Node head , int n ) { List < Integer > list = new ArrayList < > ( ) ; int slow = head , fast = head ; for ( int i = 0 ; i < n ; i ++ ) { fast = fast . next ; } if ( fast == null ) { list . add ( head . next ) ; return head ; } while ( fast . next != null ) { fast = fast . next ; slow = slow . next ; return head . next ; } } }"],"references":["class Solution { public ListNode removeNthFromEnd ( ListNode head , int n ) { ListNode slow , fast , curr ; slow = head ; fast = head ; for ( int i = 0 ; i < n ; i ++ ) fast = fast . next ; if ( fast == null ) { head = head . next ; return head ; } while ( fast . next != null ) { fast = fast . next ; slow = slow . next ; } curr = slow . next ; slow . next = curr . next ; return head ; } }"],"bleu":0.6286777379518572,"rouge_l":0.7484095728567101}
