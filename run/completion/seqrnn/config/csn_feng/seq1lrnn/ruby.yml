#registry
criterion: completion_cross_entropy
optimizer: torch_adam
lr_scheduler: fixed
tokenizer: ~ # default=None
bpe: ~ # default=None

##################### default args #####################
common:
  #  device: 0 # GPU device. if None, as CPU
  no_progress_bar: 0 # action='store_true', help='disable progress bar'
  log_interval: 500 # type=int, default=100, metavar='N', help='log progress every N batches (when progress bar is disabled)'
  log_format: simple # default=None, help='log format to use', choices=['json', 'none', 'simple', 'tqdm']
  tensorboard_logdir: '' # default='', help='path to save logs for tensorboard, should match --logdir of running tensorboard (default: no tensorboard logging)'
  #  seed: 42 # default=1, type=int, metavar='N', help='pseudo random number generator seed'
  #  cpu: 0 # action='store_true', help='use CPU instead of CUDA'
  #  fp16_fair: 1 # action='store_true', help='use FP16'
  memory_efficient_fp16: 0 # action='store_true', help='use a memory-efficient version of FP16 training; implies --fp16'
  fp16_no_flatten_grads: 0 # action='store_true', help='don\'t flatten FP16 grads tensor'
  fp16_init_scale: 128 # 2 ** 7 # default=2 ** 7, type=int, help='default FP16 loss scale'
  fp16_scale_window: ~ # type=int, help='number of updates before increasing loss scale'
  fp16_scale_tolerance: 0.0 # default=0.0, type=float, help='pct of updates that can overflow before decreasing the loss scale'
  min_loss_scale: 1e-4 # default=1e-4, type=float, metavar='D', help='minimum FP16 loss scale, after which training is stopped'
  threshold_loss_scale: ~ # type=float, help='threshold FP16 loss scale from below'
  #  user_dir: ~ # default=None, help='path to a python module containing custom extensions (tasks and/or architectures)'
  empty_cache_freq: 0 # type=int, help='how often to clear the PyTorch CUDA cache (0 to disable)'
  #  all_gather_list_size: 16384 # default=16384, type=int, help='number of bytes reserved for gathering stats from workers'
  task: completion # task

  seed: 666 # default=1, type=int, metavar='N', help='pseudo random number generator seed'
  cpu: 0 # action='store_true', help='use CPU instead of CUDA'
  fp16: 0 # action='store_true', help='use FP16'
  fp16_opt_level: '01' # type=str, default="O1", help="For fp16: Apex AMP optimization level selected in ['O0', 'O1', 'O2', and 'O3']. See details at https://nvidia.github.io/apex/amp.html",
  server_ip: '' # type=str, default="", help="For distant debugging."
  server_port: '' # type=str, default="", help="For distant debugging."

dataset:
  num_workers: 3 # default=1, type=int, metavar='N', help='how many subprocesses to use for data loading'
  skip_invalid_size_inputs_valid_test: 0 # action='store_true', help='ignore too long or too short lines in valid and test set'
  max_tokens: 1e5 # type=int, metavar='N', help='maximum number of tokens in a batch'
  max_sentences: 64 # '--batch-size', type=int, metavar='N', help='maximum number of sentences in a batch'
  required_batch_size_multiple: 8 # default=8, type=int, metavar='N', help='batch size will be a multiplier of this value'
  dataset_impl: mmap # choices=get_available_dataset_impl(), help='output dataset implementation'
  train_subset: train #test # default='train', metavar='SPLIT', help='data subset to use for training (e.g. train, valid, test)'
  valid_subset: valid # test # default='valid', metavar='SPLIT', help='comma separated list of data subsets to use for validation (e.g. train, valid, test)'
  validate_interval: 1 # type=int, default=1, metavar='N', help='validate every N epochs'
  fixed_validation_seed: ~ # default=None, type=int, metavar='N', help='specified random seed for validation'
  disable_validation: 0 # 1 # action='store_true',help='disable validation'
  max_tokens_valid: ~ # type=int, metavar='N', help='maximum number of tokens in a validation batch (defaults to --max-tokens)'
  max_sentences_valid: 64 # type=int, metavar='N', help='maximum number of sentences in a validation batch (defaults to --max-sentences)'
  curriculum: 5 # default=0, type=int, metavar='N', help='don\'t shuffle batches for first N epochs'
  n_ctx: 1000 # raw_py150 split ast with a max length
  gen_subset: test # default='test', metavar='SPLIT', help='data subset to generate (train, valid, test)'
  num_shards: 1 # default=1, type=int, metavar='N', help='shard generation over N shards'
  shard_id: 0 # default=0, type=int, metavar='ID', help='id of the shard to generate (id < num_shards)'

distributed_training:
  distributed_world_size: 4 # default=max(1, torch.cuda.device_count()
  distributed_rank: 0 # default=0, type=int, help='rank of the current worker'
  distributed_backend: nccl # default='nccl', type=str, help='distributed backend'
  distributed_init_method: ~ # default=None, type=str,help='typically tcp://hostname:port that will be used to establish initial connetion'
  distributed_port: -1 # default=-1, type=int, help='port number (not required if using --distributed-init-method)'
  device_id: 0 # '--local_rank', default=0, type=int, help='which GPU to use (usually configured automatically)'
  distributed_no_spawn: 0 # action='store_true', help='do not spawn multiple processes even if multiple GPUs are visible'
  ddp_backend: c10d # default='c10d', type=str, choices=['c10d', 'no_c10d'], help='DistributedDataParallel backend'
  bucket_cap_mb: 25 # default=25, type=int, metavar='MB', help='bucket size for reduction'
  fix_batches_to_gpus: ~ # action='store_true', help='don\'t shuffle batches between GPUs; this reduces overall randomness and may affect precision but avoids the cost of re-reading the data'
  find_unused_parameters: 0 # default=False, action='store_true', help='disable unused parameter detection (not applicable to no_c10d ddp-backend'
  fast_stat_sync: 0 # default=False, action='store_true', help='[deprecated] this is now defined per Criterion'
  broadcast_buffers: 0 # default=False, action='store_true', help='Copy non-trainable parameters between GPUs, such as batchnorm population statistics'
  global_sync_iter: 50 # default=50, type=int, help="Iteration for syncing global model",
  warmup_iterations: 500 # default=500, type=int, help="warmup iterations for model to broadcast",
  local_rank: -1 # type=int, default=-1, help="For distributed training: local_rank"

task:
  data: ~/ncc_data/codexglue/code_to_text/completion/data-mmap/ruby # default='', help='colon separated path to data directories list, will be iterated upon during epochs in round-robin manner'

  target_lang: code_tokens
  max_target_positions: 513 #', default=1024, type=int, metavar='N', help='max number of tokens in the target sequence'
  add_bos_token: 0 #', action='store_true', help='prepend beginning of sentence token (<s>)'

  # options for reporting BLEU during validation
  eval_bleu: 0 #action='store_true', help='evaluation with BLEU scores'
  eval_bleu_detok: space #', type=str, default="space", help='detokenizer before computing BLEU (e.g., "moses"); required if using --eval-bleu; use "space" to disable detokenization; see fairseq.data.encoders for other options'
  eval_bleu_detok_args: ~ #', type=str, metavar='JSON', help='args for building the tokenizer, if needed'
  eval_tokenized_bleu: 0 #', action='store_true', default=False, help='if setting, we compute tokenized BLEU instead of sacrebleu'
  eval_bleu_remove_bpe: ~ # ', nargs='?', const='@@ ', default=None, help='remove BPE before computing BLEU'
  eval_bleu_args: ~ #', type=str, metavar='JSON', help='generation args for BLUE scoring, e.g., \'{"beam": 4, "lenpen": 0.6}\''
  eval_bleu_print_samples: 0 #', action='store_true', help='print sample generations during validation'

  eval_accuracy: 1
  eval_mrr: 1


model:
  arch: completion_seqrnn
#  pooler_dropout: 0.0 # type=float, metavar='D', help='dropout probability in the masked_lm pooler layers'
#  activation_fn: gelu # choices=utils.get_available_activation_fns(), help='activation function to use'
  dropout: 0.1 # type=float, metavar='D', help='dropout probability'
#  attention_dropout: 0.1 # type=float, metavar='D', help='dropout probability for attention weights'
#  activation_dropout: 0.0 # '--relu-dropout', type=float, metavar='D', help='dropout probability after activation in FFN.'
#  encoder_embed_path: 0 # type=str, metavar='STR', help='path to pre-trained encoder embedding'
#  encoder_embed_dim: 768 # type=int, metavar='N', help='encoder embedding dimension'
#  encoder_ffn_embed_dim: 3072 # type=int, metavar='N', help='encoder embedding dimension for FFN'
#  encoder_layers: 12 # type=int, metavar='N', help='num encoder layers'
#  encoder_attention_heads: 12 # type=int, metavar='N', help='num encoder attention heads'
#  encoder_normalize_before: 0 # action='store_true', help='apply layernorm before each encoder block'
#  encoder_learned_pos: 0 # action='store_true', help='use learned positional embeddings in the encoder'

  decoder_embed_dim: 300 # ', type=int, metavar='N', help='decoder embedding dimension'
  decoder_embed_path: ~ #', type=str, metavar='STR', help='path to pre-trained decoder embedding'
  decoder_freeze_embed: ~ #', action='store_true', help='freeze decoder embeddings'
  decoder_hidden_size: 300 #', type=int, metavar='N', help='decoder hidden size'
  decoder_layers: 1 #', type=int, metavar='N', help='number of decoder layers'
  decoder_out_embed_dim: 300 #', type=int, metavar='N', help='decoder output embedding dimension'
  decoder_attention: 0 #', type=str, metavar='BOOL', help='decoder attention'
  adaptive_softmax_cutoff: ~ #', metavar='EXPR', help='comma separated list of adaptive softmax cutoff points. Must be used with adaptive_loss criterion'
  share_decoder_input_output_embed: 0 #', default=False, action='store_true', help='share decoder input and output embeddings'
  share_all_embeddings: 0 #', default=False, action='store_true', help='share encoder, decoder and output embeddings (requires shared dictionary and embed dim)'
  # Granular dropout settings (if not specified these default to --dropout)
  encoder_dropout_in: 0.1 #', type=float, metavar='D', help='dropout probability for encoder input embedding'
  encoder_dropout_out: 0.1 #', type=float, metavar='D', help='dropout probability for encoder output'
  decoder_dropout_in: 0.1 #' type=float, metavar='D', help='dropout probability for decoder input embedding'
  decoder_dropout_out: 0.1 #', type=float, metavar='D', help='dropout probability for decoder output'

  max_target_positions: 513

  shared_embedding: 1

optimization:
  max_epoch: 100 # '--me', default=0, type=int, metavar='N', help='force stop training at specified epoch'
  max_update: 0 # '--mu', default=0, type=int, metavar='N', help='force stop training at specified update'
  clip_norm: 25 # default=25, type=float, metavar='NORM', help='clip threshold of gradients'
  update_freq: # default='1', metavar='N1,N2,...,N_K', type=lambda uf: eval_str_list(uf, type=int), help='update parameters every N_i batches, when in epoch i'
    - 1
  lrs: # '--learning-rate', default='0.25', type=eval_str_list, metavar='LR_1,LR_2,...,LR_N', help='learning rate for the first N epochs; all epochs >N using LR_N (note: this may be interpreted differently depending on --lr-scheduler)'
    - 1e-3
  min_lr: -1 # default=-1, type=float, metavar='LR', help='stop training when the learning rate reaches this minimum'
  use_bmuf: 0 # default=False, action='store_true', help='specify global optimizer for syncing models on different GPUs/shards'
  #
  force_anneal: ~ # '--fa', type=int, metavar='N', help='force annealing at specified epoch'
  warmup_updates: 0 # 10000 # default=0, type=int, metavar='N', help='warmup the learning rate linearly for the first N updates'
  end_learning_rate: 0.0 # default=0.0, type=float
  power: 1.0 # default=1.0, type=float
  total_num_update: 125000 # default=1000000, type=int

  #  for cross entropy
  sentence_avg: ~ # action='store_true', help='normalize gradients by the number of sentences in a batch (default is to normalize by number of tokens)'

  adam:
    adam_betas: '(0.9, 0.999)' # default='(0.9, 0.999)', metavar='B', help='betas for Adam optimizer'
    adam_eps: 1e-8 # type=float, default=1e-8, metavar='D', help='epsilon for Adam optimizer'
    weight_decay: 0.0 # '--wd', default=0.0, type=float, metavar='WD', help='weight decay'
    use_old_adam: 0 # action='store_true', default=False, help="Use fairseq.optim.adam.Adam"

  #  binary_cross_entropy:
  #    infonce: 0 # action='store_true', help='if set, uses cross entropy instead of binary cross entropy (i.e. InfoNCE loss)'
  #    loss_weights: '' # type=str, default=None, help='weights for additional loss terms (not first one)'
  #    log_keys: '' # type=str, default=None, help='output keys to log'
#  learning_rate: 1e-4 # default=1e-4, type=float, help="The initial learning rate for Adam."
  weight_decay: 0.0 # default=0.0, type=float, help="Weight decay if we apply some."
  adam_epsilon: 1e-8 # default=1e-8, type=float, help="Epsilon for Adam optimizer."
  max_grad_norm: 1.0 # default=1.0, type=float, help="Max gradient norm."
  num_train_epochs: 5 # default=5, type=float, help="Total number of training epochs to perform."
  max_steps: -1 # default=-1, type=int, help="If > 0: set total number of training steps to perform. Override num_train_epochs.",
  warmup_steps: 0 # default=0, type=int, help="Linear warmup over warmup_steps."
  gradient_accumulation_steps: 1 # type=int, default=1, help="Number of updates steps to accumulate before performing a backward/update pass."

  label_smoothing: 0.1
  distill_temp: 0.6
  kd_loss_weight: 0.25

kd:
  gen_topk: 5 # generate top-k probabilities and indices for KD task
  distill_topk: 5 # only use distill_topk probabilities and indices for KD training


checkpoint:
  save_dir: ~/ncc_data/codexglue/code_to_text/completion/data-mmap/ruby/seq1lrnn/checkpoints # default='checkpoints', help='path to save checkpoints'
  restore_file: checkpoint_last.pt # default='checkpoint_last.pt', help='filename from which to load checkpoint (default: <save-dir>/checkpoint_last.pt'
  reset_dataloader: ~ # action='store_true', help='if set, does not reload dataloader state from the checkpoint'
  reset_lr_scheduler: ~ # action='store_true', help='if set, does not load lr scheduler state from the checkpoint'
  reset_meters: ~ # action='store_true', help='if set, does not load meters from the checkpoint'
  reset_optimizer: ~ # action='store_true', help='if set, does not load optimizer state from the checkpoint'
  optimizer_overrides: '{}' # default="{}", type=str, metavar='DICT', help='a dictionary used to override optimizer args when loading a checkpoint'
  save_interval: 1 # type=int, default=1, metavar='N', help='save a checkpoint every N epochs'
  save_interval_updates: 0 # type=int, default=0, metavar='N', help='save a checkpoint (and validate) every N updates'
  keep_interval_updates: 0 # type=int, default=-1, metavar='N', help='keep the last N checkpoints saved with --save-interval-updates'
  keep_last_epochs: -1 # type=int, default=-1, metavar='N', help='keep last N epoch checkpoints'
  keep_best_checkpoints: -1 # type=int, default=-1, metavar='N', help='keep best N checkpoints based on scores'
  no_save: 0 # action='store_true', help='don\'t save models or checkpoints'
  no_epoch_checkpoints: 1 # action='store_true', help='only store last and best checkpoints'
  no_last_checkpoints: 0 # action='store_true', help='don\'t store last checkpoints'
  no_save_optimizer_state: ~ # action='store_true', help='don\'t save optimizer-state as part of checkpoint'
  best_checkpoint_metric: mrr # type=str, default='loss', help='metric to use for saving "best" checkpoints'
  maximize_best_checkpoint_metric: 1 # action='store_true', help='select the largest metric value for saving "best" checkpoints'
  patience: 5 # type=int, default=-1, metavar='N', help=('early stop training if valid performance doesn\'t improve for N consecutive validation runs; note that this is influenced by --validate-interval')
  should_continue: 0 # action="store_true", help="Whether to continue from latest checkpoint in output_dir"
  model_name_or_path: ~ # default=None, type=str, help="The model checkpoint for weights initialization. Leave None if you want to train a model from scratch.",
  cache_dir: ~ # default=None, type=str, help="Optional directory to store the pre-trained models downloaded from s3 (instead of the default one)",
  logging_steps: 500 # type=int, default=500, help="Log every X updates steps."
  save_steps: 2000 # type=int, default=2000, help="Save checkpoint every X updates steps."
  save_total_limit: 2 # type=int, default=2, help="Limit the total amount of checkpoints, delete the older checkpoints in the output_dir, does not delete by default",
  overwrite_output_dir: 0 # action="store_true", help="Overwrite the content of the output directory"
  overwrite_cache: 0 # action="store_true", help="Overwrite the cached training and evaluation sets"

eval:
  path: ~/ncc_data/codexglue/code_to_text/completion/data-mmap/ruby/seq1lrnn/checkpoints/checkpoint_best.pt # , metavar='FILE', help='path(s) to model file(s), colon separated'
  model_overrides: '{}' # default="{}", type=str, metavar='DICT', help='a dictionary used to override model args at generation '
  checkpoint_suffix: '' # default='', help='Suffix to add to the checkpoint file name'
  predict_type: 'leaf_ids'
  max_sentences_eval: 64