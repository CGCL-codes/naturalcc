[{"nl_queries": "Stacked bar chart of the number of left office for with each Minister in each left office, could you sort by the Y in descending please?", "db_id": "party_people", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Left_office , COUNT(Left_office) FROM party GROUP BY Minister ORDER BY COUNT(Left_office) DESC", "binning": "BIN Left_office BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Left_office , COUNT(Left_office) FROM party GROUP BY Minister ORDER BY COUNT(Left_office) DESC BIN Left_office BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "Find all the payment dates for the payments with an amount larger than 10 and the payments handled by a staff person with the first name Elsa, and count them by a bar chart, order Y in desc order.", "db_id": "sakila_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT payment_date , COUNT(payment_date) FROM payment WHERE amount > 10 UNION SELECT T1.payment_date FROM payment AS T1 JOIN staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = 'Elsa' ORDER BY COUNT(payment_date) DESC", "binning": "BIN payment_date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT payment_date , COUNT(payment_date) FROM payment WHERE amount > 10 UNION SELECT T1.payment_date FROM payment AS T1 JOIN staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = 'Elsa' ORDER BY COUNT(payment_date) DESC BIN payment_date BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "Give me a histogram for how many registed students do each course have? List course name and the number of their registered students?, rank by the y axis from high to low.", "db_id": "student_assessment", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT course_name , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT course_name , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id ORDER BY count(*) DESC"}, "hardness": "Hard"}, {"nl_queries": "For the sum of monthly_rental,  date_address_to, visualize the trend.", "db_id": "behavior_monitoring", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC", "binning": ""}, "VQL": "Visualize LINE SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC"}, "hardness": "Medium"}, {"nl_queries": "Display a bar chart for what is the name of each aircraft and how many flights does each one complete?, and could you sort by the x axis in desc?", "db_id": "flight_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid ORDER BY name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT name , count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid ORDER BY name DESC"}, "hardness": "Hard"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, show me the trend about employee_id over hire_date with a line chart, and display by the X-axis in descending.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC"}, "hardness": "Hard"}, {"nl_queries": "Show me about the distribution of Time and ID in a bar chart, show bars from high to low order.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Time , ID FROM swimmer ORDER BY Time DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Time , ID FROM swimmer ORDER BY Time DESC"}, "hardness": "Easy"}, {"nl_queries": "what is the average age for each dorm and what are the names of each dorm?", "db_id": "dorm_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name", "binning": ""}, "VQL": "Visualize BAR SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name"}, "hardness": "Medium"}, {"nl_queries": "Visualize a bar chart about the distribution of  Start_from and the sum of Employee_ID bin start_from by weekday.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Start_from , SUM(Employee_ID) FROM hiring", "binning": "BIN Start_from BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Start_from , SUM(Employee_ID) FROM hiring BIN Start_from BY WEEKDAY"}, "hardness": "Easy"}, {"nl_queries": "Show all cities along with the number of drama workshop groups in each city with a bar chart, and display by the Y-axis from high to low.", "db_id": "cre_Drama_Workshop_Groups", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT City_Town , count(*) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID = T2.Address_ID GROUP BY T1.City_Town ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT City_Town , count(*) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID = T2.Address_ID GROUP BY T1.City_Town ORDER BY count(*) DESC"}, "hardness": "Hard"}, {"nl_queries": "Draw a bar chart about the distribution of  All_Home and the average of School_ID , and group by attribute All_Home.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Home , AVG(School_ID) FROM basketball_match GROUP BY All_Home", "binning": ""}, "VQL": "Visualize BAR SELECT All_Home , AVG(School_ID) FROM basketball_match GROUP BY All_Home"}, "hardness": "Easy"}, {"nl_queries": "Show details of all investors if they make any transaction with share count greater than 100, and count them by a bar chart", "db_id": "tracking_share_transactions", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.share_count > 100 GROUP BY Investor_details", "binning": ""}, "VQL": "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.share_count > 100 GROUP BY Investor_details"}, "hardness": "Hard"}, {"nl_queries": "Visualize a bar chart about the distribution of All_Neutral and Team_ID , I want to display by the Y-axis from high to low please.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Neutral , Team_ID FROM basketball_match ORDER BY Team_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Neutral , Team_ID FROM basketball_match ORDER BY Team_ID DESC"}, "hardness": "Easy"}, {"nl_queries": "Give me a histogram for what are the different first names and ages of the students who do have pets?, could you sort by the Y-axis in desc?", "db_id": "pets_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid ORDER BY Age DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid ORDER BY Age DESC"}, "hardness": "Medium"}, {"nl_queries": "Find the number of the name of rooms booked by some customers whose first name contains ROY, and show Y in asc order.", "db_id": "inn_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT roomName , COUNT(roomName) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId WHERE firstname LIKE '%ROY%' GROUP BY roomName ORDER BY COUNT(roomName) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT roomName , COUNT(roomName) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId WHERE firstname LIKE '%ROY%' GROUP BY roomName ORDER BY COUNT(roomName) ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "Ignore movies whose director is NULL For each director, what are the titles and ratings for all the movies they reviewed? Show the result by a bar chart, sort y-axis in desc order.", "db_id": "movie_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT title , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" ORDER BY stars DESC", "binning": ""}, "VQL": "Visualize BAR SELECT title , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" ORDER BY stars DESC"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, draw a bar chart about the distribution of name and the average of price , and group by attribute name, and I want to rank y-axis from high to low order.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Price DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Price DESC"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, draw a scatter chart about the correlation between  code and  revenue , and group by attribute name.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name", "binning": ""}, "VQL": "Visualize SCATTER SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name"}, "hardness": "Medium"}, {"nl_queries": "Group and count the city attribute of the location table to visualize a bar chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY", "binning": ""}, "VQL": "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY"}, "hardness": "Easy"}, {"nl_queries": "For those employees who did not have any job in the past, return a line chart about the change of  commission_pct over  hire_date .", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)"}, "hardness": "Easy"}, {"nl_queries": "Show id and location of railways that are associated with more than one train Visualize by bar chart, and show in descending by the total number.", "db_id": "railway", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Location , T1.Railway_ID FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID = T2.Railway_ID ORDER BY T1.Railway_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Location , T1.Railway_ID FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID = T2.Railway_ID ORDER BY T1.Railway_ID DESC"}, "hardness": "Medium"}, {"nl_queries": "A bar chart for what are the number of the category of music festivals with result \"Awarded\"?, and I want to order by the X-axis from high to low.", "db_id": "music_4", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, visualize a bar chart about the distribution of name and manufacturer , and group by attribute name, could you sort by the X-axis in desc?", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Name DESC"}, "hardness": "Hard"}, {"nl_queries": "Return a histogram on how many students are from each city, and which cities have more than one cities?, I want to order by the x axis in asc.", "db_id": "dorm_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT city_code , count(*) FROM student GROUP BY city_code ORDER BY city_code ASC", "binning": ""}, "VQL": "Visualize BAR SELECT city_code , count(*) FROM student GROUP BY city_code ORDER BY city_code ASC"}, "hardness": "Medium"}, {"nl_queries": "Show the number of start dates of all the apartment bookings for each year with a bar chart.", "db_id": "apartment_rentals", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id", "binning": "BIN booking_start_date BY YEAR"}, "VQL": "Visualize BAR SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id BIN booking_start_date BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "Return a scatter chart about the correlation between  Snatch and  Clean_Jerk .", "db_id": "body_builder", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Snatch , Clean_Jerk FROM body_builder", "binning": ""}, "VQL": "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder"}, "hardness": "Easy"}, {"nl_queries": "How many accounts for each customer? Show a bar chart that groups by customer's first name, list in desc by the y-axis please.", "db_id": "customers_and_invoices", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT customer_first_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT customer_first_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC"}, "hardness": "Hard"}, {"nl_queries": "Show me the proportion on what are the ids and names of the companies that operated more than one flight?", "db_id": "flight_company", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT T1.name , T1.id FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id", "binning": ""}, "VQL": "Visualize PIE SELECT T1.name , T1.id FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id"}, "hardness": "Easy"}, {"nl_queries": "Show each gender code and the corresponding count of guests sorted by the count in descending order. Show a pie chart.", "db_id": "apartment_rentals", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT gender_code , COUNT(*) FROM Guests GROUP BY gender_code ORDER BY COUNT(*) DESC", "binning": ""}, "VQL": "Visualize PIE SELECT gender_code , COUNT(*) FROM Guests GROUP BY gender_code ORDER BY COUNT(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "Draw a bar chart about the distribution of name and meter_100 , and display from high to low by the names.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , meter_100 FROM swimmer ORDER BY name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT name , meter_100 FROM swimmer ORDER BY name DESC"}, "hardness": "Easy"}, {"nl_queries": "For those employees who was hired before 2002-06-21, draw a bar chart about the distribution of hire_date and the average of employee_id bin hire_date by weekday, and rank Y-axis from low to high order please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(EMPLOYEE_ID) ASC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "Bar graph to show meter_100 from different meter 400", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_400 , meter_100 FROM swimmer", "binning": ""}, "VQL": "Visualize BAR SELECT meter_400 , meter_100 FROM swimmer"}, "hardness": "Easy"}, {"nl_queries": "Draw a bar chart of founder versus sum revenue", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Founder , sum(revenue) FROM manufacturers GROUP BY founder", "binning": ""}, "VQL": "Visualize BAR SELECT Founder , sum(revenue) FROM manufacturers GROUP BY founder"}, "hardness": "Easy"}, {"nl_queries": "Show the different headquarters and number of companies at each headquarter. ", "db_id": "company_employee", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Headquarters , COUNT(*) FROM company GROUP BY Headquarters", "binning": ""}, "VQL": "Visualize BAR SELECT Headquarters , COUNT(*) FROM company GROUP BY Headquarters"}, "hardness": "Easy"}, {"nl_queries": "I want to know the proportion of the total number for each color.", "db_id": "mountain_photos", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT color , COUNT(color) FROM photos GROUP BY color", "binning": ""}, "VQL": "Visualize PIE SELECT color , COUNT(color) FROM photos GROUP BY color"}, "hardness": "Easy"}, {"nl_queries": "How many locations? Draw a bar chart, and list by the X-axis in ascending.", "db_id": "train_station", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Location , COUNT(Location) FROM station GROUP BY Location ORDER BY Location ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location ORDER BY Location ASC"}, "hardness": "Medium"}, {"nl_queries": "Return a histogram on how many matches were played in each year.", "db_id": "wta_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT year , count(*) FROM matches", "binning": "BIN year BY YEAR"}, "VQL": "Visualize BAR SELECT year , count(*) FROM matches BIN year BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "Show the number of start dates of all the apartment bookings made by guests with gender code \"Female\" for each year with a bar chart, and show by the the number of booking start date in descending.", "db_id": "apartment_rentals", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id WHERE T2.gender_code = \"Female\"  ORDER BY COUNT(booking_start_date) DESC", "binning": "BIN booking_start_date BY YEAR"}, "VQL": "Visualize BAR SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id WHERE T2.gender_code = \"Female\"  ORDER BY COUNT(booking_start_date) DESC BIN booking_start_date BY YEAR"}, "hardness": "Extra Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, show me about the distribution of name and revenue , and group by attribute name in a bar chart, and I want to list by the bar in asc.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Name ASC"}, "hardness": "Hard"}, {"nl_queries": "A bar chart shows the number of year of the maximum price and score of wines, and bin the year into the weekday interval, could you rank by the y axis in desc?", "db_id": "wine_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Year , COUNT(Year) FROM WINE  ORDER BY COUNT(Year) DESC", "binning": "BIN Year BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Year , COUNT(Year) FROM WINE  ORDER BY COUNT(Year) DESC BIN Year BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "Show all calendar dates and day Numbers. Plot them as line chart.", "db_id": "cre_Doc_Tracking_DB", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Calendar_Date , Day_Number FROM Ref_calendar", "binning": ""}, "VQL": "Visualize LINE SELECT Calendar_Date , Day_Number FROM Ref_calendar"}, "hardness": "Easy"}, {"nl_queries": "For those products with a price between 60 and 120, return a bar chart about the distribution of name and manufacturer , and display by the Name in desc.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , Manufacturer FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , Manufacturer FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name DESC"}, "hardness": "Medium"}, {"nl_queries": "Visualize a bar chart for what are the different template type codes, and how many templates correspond to each?, and I want to show by the y axis in desc.", "db_id": "cre_Doc_Template_Mgt", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Template_Type_Code , count(*) FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "Show the number of courses for each office in a stacked bar chart The x-axis is office name and group by course description, list total number in desc order.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT PROF_OFFICE , COUNT(PROF_OFFICE) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num GROUP BY CRS_DESCRIPTION ,  PROF_OFFICE ORDER BY COUNT(PROF_OFFICE) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT PROF_OFFICE , COUNT(PROF_OFFICE) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num GROUP BY CRS_DESCRIPTION ,  PROF_OFFICE ORDER BY COUNT(PROF_OFFICE) DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "Return a bar chart about the distribution of Nationality and the sum of meter_100 , and group by attribute Nationality, sort by the X-axis from high to low.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC"}, "hardness": "Medium"}, {"nl_queries": "Show the number of documents created in each day and bin document date by weekday and group by document type description with a stacked bar chart, could you rank by the Y-axis in descending please?", "db_id": "cre_Docs_and_Epenses", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description ORDER BY COUNT(Document_Date) DESC", "binning": "BIN Document_Date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description ORDER BY COUNT(Document_Date) DESC BIN Document_Date BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "Visualize a bar chart about the distribution of meter_400 and meter_100 , rank from high to low by the Y please.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_400 , meter_100 FROM swimmer ORDER BY meter_100 DESC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_400 , meter_100 FROM swimmer ORDER BY meter_100 DESC"}, "hardness": "Easy"}, {"nl_queries": "Show all artist names and the number of exhibitions for each artist in a bar chart.", "db_id": "theme_gallery", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , count(*) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id GROUP BY T1.artist_id", "binning": ""}, "VQL": "Visualize BAR SELECT Name , count(*) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id GROUP BY T1.artist_id"}, "hardness": "Medium"}, {"nl_queries": "Show aircraft names and number of flights for each aircraft with a bar chart, and sort in ascending by the y-axis.", "db_id": "flight_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT name , count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid ORDER BY count(*) ASC"}, "hardness": "Hard"}, {"nl_queries": "What is the average price of the products for each category, and sort bars in descending order.", "db_id": "customer_complaints", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT product_category_code , avg(product_price) FROM products GROUP BY product_category_code ORDER BY product_category_code DESC", "binning": ""}, "VQL": "Visualize BAR SELECT product_category_code , avg(product_price) FROM products GROUP BY product_category_code ORDER BY product_category_code DESC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, show me about the distribution of last_name and salary in a bar chart, and could you order in descending by the bar please?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT LAST_NAME , SALARY FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY LAST_NAME DESC", "binning": ""}, "VQL": "Visualize BAR SELECT LAST_NAME , SALARY FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY LAST_NAME DESC"}, "hardness": "Medium"}, {"nl_queries": "what are the countries having at least one car maker? List name and id, could you rank total number from low to high order?", "db_id": "car_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT CountryName , CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country ORDER BY CountryId ASC", "binning": ""}, "VQL": "Visualize BAR SELECT CountryName , CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country ORDER BY CountryId ASC"}, "hardness": "Medium"}, {"nl_queries": "Return a bar chart about the distribution of Nationality and the amount of Nationality , and group by attribute Nationality, and order x-axis in ascending order.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nationality , COUNT(Nationality) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC"}, "hardness": "Medium"}, {"nl_queries": "Give me the comparison about meter_100 over the meter_300 by a bar chart, and show from low to high by the Y please.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_300 , meter_100 FROM swimmer ORDER BY meter_100 ASC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_300 , meter_100 FROM swimmer ORDER BY meter_100 ASC"}, "hardness": "Easy"}, {"nl_queries": "Show the transaction types and the total amount of transactions with a bar chart, rank by the y-axis in descending.", "db_id": "customers_and_invoices", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT transaction_type , sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT transaction_type , sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) DESC"}, "hardness": "Medium"}, {"nl_queries": "Show the id and details for the investors who have the top 3 number of transactions. Show bar chart.", "db_id": "tracking_share_transactions", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Investor_details , T1.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id ORDER BY COUNT(*) DESC LIMIT 3", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Investor_details , T1.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id ORDER BY COUNT(*) DESC LIMIT 3"}, "hardness": "Hard"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, return a bar chart about the distribution of hire_date and the sum of manager_id bin hire_date by time, and order by the total number in desc.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(MANAGER_ID) DESC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH"}, "hardness": "Extra Hard"}, {"nl_queries": "Return a bar chart about the distribution of meter_200 and the average of ID , and group by attribute meter_200, sort Y-axis in asc order please.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_200 , AVG(ID) FROM swimmer GROUP BY meter_200 ORDER BY AVG(ID) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_200 , AVG(ID) FROM swimmer GROUP BY meter_200 ORDER BY AVG(ID) ASC"}, "hardness": "Medium"}, {"nl_queries": "Show me the total number by country in a histogram, and order in asc by the bars.", "db_id": "flight_company", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Country , count(*) FROM airport GROUP BY country ORDER BY Country ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Country , count(*) FROM airport GROUP BY country ORDER BY Country ASC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, return a bar chart about the distribution of name and the sum of revenue , and group by attribute name, and sort in asc by the x-axis.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about the sum of code over the name , and group by attribute name by a bar chart, and list from low to high by the Y.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code ASC"}, "hardness": "Hard"}, {"nl_queries": "Show different teams of technicians and the number of technicians in each team, show by the total number in descending.", "db_id": "machine_repair", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Team , COUNT(*) FROM technician GROUP BY Team ORDER BY COUNT(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Team , COUNT(*) FROM technician GROUP BY Team ORDER BY COUNT(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "Show me a bar chart for how many total credits are offered by each department?, and order by the names from low to high.", "db_id": "college_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY dept_name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY dept_name ASC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, visualize a bar chart about the distribution of name and revenue , and group by attribute founder, and show from low to high by the bar.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder , T1.Name ORDER BY T1.Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder , T1.Name ORDER BY T1.Name ASC"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, find name and the sum of manufacturer , and group by attribute name, and visualize them by a bar chart, and show by the Y-axis from low to high.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Manufacturer ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Manufacturer ASC"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, what is the relationship between  code and  revenue , and group by attribute name?", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name", "binning": ""}, "VQL": "Visualize SCATTER SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name"}, "hardness": "Medium"}, {"nl_queries": "Draw a bar chart of nationality versus the total number, and list in descending by the bars.", "db_id": "poker_player", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY Nationality DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY Nationality DESC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who was hired before 2002-06-21, return a bar chart about the distribution of  hire_date and the sum of manager_id bin hire_date by weekday.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21'", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "A bar chart shows the distribution of  meter_200 and the sum of ID , and group by attribute meter_200.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_200 , SUM(ID) FROM swimmer GROUP BY meter_200", "binning": ""}, "VQL": "Visualize BAR SELECT meter_200 , SUM(ID) FROM swimmer GROUP BY meter_200"}, "hardness": "Easy"}, {"nl_queries": "Show me a scatter plot of body builder id and total for .", "db_id": "body_builder", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Body_Builder_ID , Total FROM body_builder", "binning": ""}, "VQL": "Visualize SCATTER SELECT Body_Builder_ID , Total FROM body_builder"}, "hardness": "Easy"}, {"nl_queries": "For those dates with a max temperature greater than or equal to 80, I would like a line chart to show the tendency, and order X-axis from low to high order.", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date , COUNT(date) FROM weather WHERE max_temperature_f >= 80 GROUP BY date ORDER BY date ASC", "binning": ""}, "VQL": "Visualize LINE SELECT date , COUNT(date) FROM weather WHERE max_temperature_f >= 80 GROUP BY date ORDER BY date ASC"}, "hardness": "Hard"}, {"nl_queries": "Count the number of employees for each city Plot them as bar chart, I want to sort x axis in desc order.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT City , count(*) FROM employee GROUP BY city ORDER BY City DESC", "binning": ""}, "VQL": "Visualize BAR SELECT City , count(*) FROM employee GROUP BY city ORDER BY City DESC"}, "hardness": "Medium"}, {"nl_queries": "Draw a bar chart about the distribution of All_Home and School_ID , and group by attribute ACC_Road, and sort bars in ascending order.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, a bar chart shows the distribution of name and the sum of revenue , and group by attribute name, I want to display X-axis in asc order.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC"}, "hardness": "Hard"}, {"nl_queries": "Show me about the distribution of meter_200 and the sum of meter_100 , and group by attribute meter_200 in a bar chart, show Y-axis in asc order please.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_200 , SUM(meter_100) FROM swimmer GROUP BY meter_200 ORDER BY SUM(meter_100) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_200 , SUM(meter_100) FROM swimmer GROUP BY meter_200 ORDER BY SUM(meter_100) ASC"}, "hardness": "Medium"}, {"nl_queries": "when is the hire date for those employees whose first name does not containing the letter M, and count them by a bar chart", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name NOT LIKE '%M%'", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name NOT LIKE '%M%' BIN HIRE_DATE BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, show me about the distribution of  hire_date and the average of salary bin hire_date by time in a bar chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "List the number of dogs each owner has in a bar chart that groups by owner's last name, display by the last_name in desc.", "db_id": "dog_kennels", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT last_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name ORDER BY last_name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT last_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name ORDER BY last_name DESC"}, "hardness": "Hard"}, {"nl_queries": "Bar graph to show the total number from different payment method code, I want to show by the payment_method_code in ascending.", "db_id": "department_store", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT payment_method_code , count(*) FROM customers GROUP BY payment_method_code ORDER BY payment_method_code ASC", "binning": ""}, "VQL": "Visualize BAR SELECT payment_method_code , count(*) FROM customers GROUP BY payment_method_code ORDER BY payment_method_code ASC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, draw a bar chart about the distribution of  founder and the average of manufacturer , and group by attribute founder.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Founder , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder", "binning": ""}, "VQL": "Visualize BAR SELECT Founder , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder"}, "hardness": "Medium"}, {"nl_queries": "How many hours do the students spend studying in each department Plot them as bar chart, and display from high to low by the X please.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT DEPT_CODE , sum(stu_hrs) FROM student GROUP BY dept_code ORDER BY DEPT_CODE DESC", "binning": ""}, "VQL": "Visualize BAR SELECT DEPT_CODE , sum(stu_hrs) FROM student GROUP BY dept_code ORDER BY DEPT_CODE DESC"}, "hardness": "Medium"}, {"nl_queries": "Show me a bar chart for what is the id and trade name of the medicines can interact with at least 3 enzymes?, and show X in asc order.", "db_id": "medicine_enzyme_interaction", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Trade_Name , id FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id ORDER BY Trade_Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Trade_Name , id FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id ORDER BY Trade_Name ASC"}, "hardness": "Medium"}, {"nl_queries": "Bar chart x axis lot details y axis the number of lot details, could you show x-axis in descending order?", "db_id": "tracking_share_transactions", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT lot_details , COUNT(lot_details) FROM LOTS GROUP BY lot_details ORDER BY lot_details DESC", "binning": ""}, "VQL": "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM LOTS GROUP BY lot_details ORDER BY lot_details DESC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, find  email and  commission_pct , and visualize them by a bar chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT EMAIL , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)", "binning": ""}, "VQL": "Visualize BAR SELECT EMAIL , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)"}, "hardness": "Extra Hard"}, {"nl_queries": "A scatter chart about what are the final tables made and best finishes for all poker players?", "db_id": "poker_player", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Final_Table_Made , Best_Finish FROM poker_player", "binning": ""}, "VQL": "Visualize SCATTER SELECT Final_Table_Made , Best_Finish FROM poker_player"}, "hardness": "Easy"}, {"nl_queries": "Show sum of budget in each year and bin creation time by year in a line chart, sort by the x-axis from high to low.", "db_id": "department_management", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Creation , SUM(Budget_in_Billions) FROM department  ORDER BY Creation DESC", "binning": "BIN Creation BY YEAR"}, "VQL": "Visualize LINE SELECT Creation , SUM(Budget_in_Billions) FROM department  ORDER BY Creation DESC BIN Creation BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "Group by services attribute in station table and compute the total number of services with a bar chart, display x-axis from high to low order please.", "db_id": "station_weather", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services DESC", "binning": ""}, "VQL": "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services DESC"}, "hardness": "Medium"}, {"nl_queries": "What are the names of the different categories, and how many films are in each? Show me the bar graph, and sort names from high to low order.", "db_id": "sakila_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id GROUP BY T1.category_id ORDER BY name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT name , count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id GROUP BY T1.category_id ORDER BY name DESC"}, "hardness": "Hard"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, return a bar chart about the distribution of hire_date and the amount of hire_date bin hire_date by weekday, could you show total number from low to high order?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY COUNT(HIRE_DATE) ASC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "Draw a bar chart for what is the average rating of songs for each language?, display by the X in ascending.", "db_id": "music_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY languages ASC", "binning": ""}, "VQL": "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY languages ASC"}, "hardness": "Medium"}, {"nl_queries": "Draw a bar chart for what are the ids and names of the battles that led to more than 10 people killed in total, and rank by the id in asc please.", "db_id": "battle_death", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.name , T1.id FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle JOIN death AS T3 ON T2.id = T3.caused_by_ship_id ORDER BY T1.id ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.name , T1.id FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle JOIN death AS T3 ON T2.id = T3.caused_by_ship_id ORDER BY T1.id ASC"}, "hardness": "Medium"}, {"nl_queries": "Give me a bar chart to show the number of event details of events that have more than one participant, and list from high to low by the total number.", "db_id": "local_govt_in_alabama", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Event_Details , COUNT(Event_Details) FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY Event_Details ORDER BY COUNT(Event_Details) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Event_Details , COUNT(Event_Details) FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY Event_Details ORDER BY COUNT(Event_Details) DESC"}, "hardness": "Hard"}, {"nl_queries": "For all employees who have the letters D or S in their first name, show me the trend about employee_id over hire_date with a line chart, and list in desc by the x axis please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY HIRE_DATE DESC", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY HIRE_DATE DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, a bar chart shows the distribution of hire_date and the average of manager_id bin hire_date by time, and rank from high to low by the total number.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY AVG(MANAGER_ID) DESC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY AVG(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "Find the number of classes in each department Visualize by bar chart, and I want to rank Y-axis in desc order.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT DEPT_CODE , count(*) FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code GROUP BY dept_code ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT DEPT_CODE , count(*) FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code GROUP BY dept_code ORDER BY count(*) DESC"}, "hardness": "Hard"}, {"nl_queries": "A line chart for what are the number of the dates with a maximum temperature higher than 85?", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date , COUNT(date) FROM weather WHERE max_temperature_f > 85 GROUP BY date", "binning": ""}, "VQL": "Visualize LINE SELECT date , COUNT(date) FROM weather WHERE max_temperature_f > 85 GROUP BY date"}, "hardness": "Medium"}, {"nl_queries": "For all employees who have the letters D or S in their first name, draw a bar chart about the distribution of job_id and the sum of department_id , and group by attribute job_id, rank by the total number from high to low.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones, and count them by a bar chart", "db_id": "tvshow", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option", "binning": ""}, "VQL": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option"}, "hardness": "Medium"}, {"nl_queries": "Show maximal lat from each city, and could you list by the total number in asc?", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT city , max(lat) FROM station GROUP BY city ORDER BY max(lat) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT city , max(lat) FROM station GROUP BY city ORDER BY max(lat) ASC"}, "hardness": "Easy"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, return a scatter chart about the correlation between  commission_pct and  manager_id .", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT COMMISSION_PCT , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)", "binning": ""}, "VQL": "Visualize SCATTER SELECT COMMISSION_PCT , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)"}, "hardness": "Extra Hard"}, {"nl_queries": "Show me a line chart for what is the average weight and year for each year?, and rank x-axis in desc order.", "db_id": "car_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Year , avg(Weight) FROM CARS_DATA GROUP BY YEAR ORDER BY Year DESC", "binning": ""}, "VQL": "Visualize LINE SELECT Year , avg(Weight) FROM CARS_DATA GROUP BY YEAR ORDER BY Year DESC"}, "hardness": "Medium"}, {"nl_queries": "What is the lowest price of product, grouped by product type? Show a bar chart.", "db_id": "department_store", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT product_type_code , min(product_price) FROM products GROUP BY product_type_code ORDER BY product_type_code", "binning": ""}, "VQL": "Visualize BAR SELECT product_type_code , min(product_price) FROM products GROUP BY product_type_code ORDER BY product_type_code"}, "hardness": "Easy"}, {"nl_queries": "Show the number of brand from each brand, order total number in ascending order.", "db_id": "mountain_photos", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT brand , COUNT(brand) FROM camera_lens GROUP BY brand ORDER BY COUNT(brand) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT brand , COUNT(brand) FROM camera_lens GROUP BY brand ORDER BY COUNT(brand) ASC"}, "hardness": "Medium"}, {"nl_queries": "Show me about the distribution of Is_full_time and the sum of Shop_ID , and group by attribute Is_full_time in a bar chart, and display from low to high by the names please.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who was hired before 2002-06-21, a bar chart shows the distribution of job_id and the sum of manager_id , and group by attribute job_id, and display from high to low by the y axis.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC"}, "hardness": "Hard"}, {"nl_queries": "A bar chart for what are the number of the names of races held between 2009 and 2011?, I want to order from high to low by the x axis.", "db_id": "formula_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , COUNT(name) FROM races WHERE YEAR BETWEEN 2009 AND 2011 GROUP BY name ORDER BY name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT name , COUNT(name) FROM races WHERE YEAR BETWEEN 2009 AND 2011 GROUP BY name ORDER BY name DESC"}, "hardness": "Hard"}, {"nl_queries": "Show me about the distribution of name and meter_100 in a bar chart, could you rank by the bar from low to high?", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , meter_100 FROM swimmer ORDER BY name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT name , meter_100 FROM swimmer ORDER BY name ASC"}, "hardness": "Easy"}, {"nl_queries": "A bar chart shows the distribution of ACC_Regular_Season and All_Games_Percent , order bars from high to low order.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY ACC_Regular_Season DESC", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY ACC_Regular_Season DESC"}, "hardness": "Easy"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, return a bar chart about the distribution of  email and  department_id .", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT EMAIL , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)", "binning": ""}, "VQL": "Visualize BAR SELECT EMAIL , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)"}, "hardness": "Extra Hard"}, {"nl_queries": "what is the state and enrollment of the colleges where have any students who got accepted in the tryout decision.", "db_id": "soccer_2", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT state , enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.decision = 'yes'", "binning": ""}, "VQL": "Visualize PIE SELECT state , enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.decision = 'yes'"}, "hardness": "Medium"}, {"nl_queries": "Return a bar chart about the distribution of Sex and the amount of Sex , and group by attribute Sex, could you order by the Y-axis in asc?", "db_id": "candidate_poll", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY COUNT(Sex) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY COUNT(Sex) ASC"}, "hardness": "Medium"}, {"nl_queries": "How many faculty members do we have for each rank? Visualize by pie chart.", "db_id": "activity_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank", "binning": ""}, "VQL": "Visualize PIE SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank"}, "hardness": "Easy"}, {"nl_queries": "Give me a bar chart, that just lists the participant ids as Y and their details as X-axis, rank in ascending by the y axis.", "db_id": "local_govt_in_alabama", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Participant_Details , Participant_ID FROM Participants ORDER BY Participant_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Participant_Details , Participant_ID FROM Participants ORDER BY Participant_ID ASC"}, "hardness": "Easy"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, find hire_date and the sum of manager_id bin hire_date by weekday, and visualize them by a bar chart, and sort from low to high by the Y-axis.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(MANAGER_ID) ASC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(MANAGER_ID) ASC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "How many order items correspond to each order id. Plot them as scatter chart.", "db_id": "customers_and_invoices", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT order_id , count(*) FROM Order_items GROUP BY order_id", "binning": ""}, "VQL": "Visualize SCATTER SELECT order_id , count(*) FROM Order_items GROUP BY order_id"}, "hardness": "Easy"}, {"nl_queries": "For those employees who did not have any job in the past, find hire_date and the average of salary bin hire_date by time, and visualize them by a bar chart, display total number in asc order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(SALARY) ASC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "Scatter chart. what are the white percentages of cities, and the corresponding crime rates of the counties they correspond to?", "db_id": "county_public_safety", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT White , Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID", "binning": ""}, "VQL": "Visualize SCATTER SELECT White , Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID"}, "hardness": "Easy"}, {"nl_queries": "Show the race class and number of races in each class, and could you display bar from low to high order please?", "db_id": "race_track", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY Class ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY Class ASC"}, "hardness": "Medium"}, {"nl_queries": "Group and count the name attribute for visualizing a bar chart, show y axis from high to low order please.", "db_id": "journal_committee", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM editor GROUP BY Name ORDER BY COUNT(Name) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM editor GROUP BY Name ORDER BY COUNT(Name) DESC"}, "hardness": "Medium"}, {"nl_queries": "What is the number of booking start dates of the apartments with type code \"Duplex\" in each year? Return a bar chart, list by the how many booking start date in desc.", "db_id": "apartment_rentals", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.apt_type_code = \"Duplex\"  ORDER BY COUNT(booking_start_date) DESC", "binning": "BIN booking_start_date BY YEAR"}, "VQL": "Visualize BAR SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.apt_type_code = \"Duplex\"  ORDER BY COUNT(booking_start_date) DESC BIN booking_start_date BY YEAR"}, "hardness": "Extra Hard"}, {"nl_queries": "Give me a bar chart that the X-axis is the date_moved_in and the Y-axis is Count them.", "db_id": "local_govt_and_lot", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_moved_in , COUNT(date_moved_in) FROM customer_events GROUP BY date_moved_in", "binning": ""}, "VQL": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM customer_events GROUP BY date_moved_in"}, "hardness": "Easy"}, {"nl_queries": "Show the type of school and the number of buses for each type in a bar chart, list x-axis in descending order.", "db_id": "school_bus", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Type , count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id GROUP BY T2.type ORDER BY Type DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Type , count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id GROUP BY T2.type ORDER BY Type DESC"}, "hardness": "Hard"}, {"nl_queries": "Bar chart x axis carrier y axis the number of carrier, and rank by the Y in ascending.", "db_id": "phone_market", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier ORDER BY COUNT(Carrier) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier ORDER BY COUNT(Carrier) ASC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, visualize a bar chart about the distribution of  name and  revenue , and group by attribute name.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name"}, "hardness": "Medium"}, {"nl_queries": "What is the number of each allergie type the girl named Lisa has? Show bar chart, I want to order X-axis in desc order.", "db_id": "allergy_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT AllergyType , COUNT(AllergyType) FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy = T2.Allergy JOIN Student AS T3 ON T3.StuID = T2.StuID WHERE T3.Fname = \"Lisa\" GROUP BY AllergyType ORDER BY AllergyType DESC", "binning": ""}, "VQL": "Visualize BAR SELECT AllergyType , COUNT(AllergyType) FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy = T2.Allergy JOIN Student AS T3 ON T3.StuID = T2.StuID WHERE T3.Fname = \"Lisa\" GROUP BY AllergyType ORDER BY AllergyType DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "Show each location and the number of cinemas there by a bar chart, sort from low to high by the y-axis.", "db_id": "cinema", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Location , count(*) FROM cinema GROUP BY LOCATION ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Location , count(*) FROM cinema GROUP BY LOCATION ORDER BY count(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "A scatter chart shows the correlation between  author_id and  author_tutor_ATB .", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT author_id , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name", "binning": ""}, "VQL": "Visualize SCATTER SELECT author_id , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name"}, "hardness": "Easy"}, {"nl_queries": "Return a pie chart about the proportion of  All_Neutral and  All_Games_Percent.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT All_Neutral , All_Games_Percent FROM basketball_match", "binning": ""}, "VQL": "Visualize PIE SELECT All_Neutral , All_Games_Percent FROM basketball_match"}, "hardness": "Easy"}, {"nl_queries": "For all employees who have the letters D or S in their first name, draw a bar chart about the distribution of hire_date and the sum of department_id bin hire_date by weekday, rank in descending by the y axis.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(DEPARTMENT_ID) DESC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(DEPARTMENT_ID) DESC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "Show the proportion of the total enrollment in each county with a pie chart.", "db_id": "school_finance", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT County , sum(enrollment) FROM school GROUP BY county", "binning": ""}, "VQL": "Visualize PIE SELECT County , sum(enrollment) FROM school GROUP BY county"}, "hardness": "Easy"}, {"nl_queries": "How many dogs each owner has? Return a bar chart that groups by owner's first name.", "db_id": "dog_kennels", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT first_name , COUNT(first_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY first_name", "binning": ""}, "VQL": "Visualize BAR SELECT first_name , COUNT(first_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY first_name"}, "hardness": "Medium"}, {"nl_queries": "For those employees who did not have any job in the past, draw a bar chart about the distribution of hire_date and the average of department_id bin hire_date by time, sort by the y-axis in ascending.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(DEPARTMENT_ID) ASC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(DEPARTMENT_ID) ASC BIN HIRE_DATE BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "Show all allergy types and the number of allergies in each type in a bar chart.", "db_id": "allergy_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype", "binning": ""}, "VQL": "Visualize BAR SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype"}, "hardness": "Easy"}, {"nl_queries": "Draw a bar chart for how many car makers are there in each continents? List the continent name and the count, and sort y axis in descending order.", "db_id": "car_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY count(*) DESC"}, "hardness": "Hard"}, {"nl_queries": "Give me the comparison about  author_id over the  middle_name  by a bar chart.", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT middle_name , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name", "binning": ""}, "VQL": "Visualize BAR SELECT middle_name , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name"}, "hardness": "Easy"}, {"nl_queries": "For those products with a price between 60 and 120, a bar chart shows the distribution of name and code , list Y-axis in ascending order please.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Code ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Code ASC"}, "hardness": "Medium"}, {"nl_queries": "Give me the comparison about ID over the meter_500 , and list by the meter_500 in descending.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_500 , ID FROM swimmer ORDER BY meter_500 DESC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_500 , ID FROM swimmer ORDER BY meter_500 DESC"}, "hardness": "Easy"}, {"nl_queries": "What are the number of the first names of all employees that are professors ordered by date of birth?", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM employee WHERE emp_jobcode = 'PROF' GROUP BY EMP_FNAME ORDER BY emp_dob", "binning": ""}, "VQL": "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM employee WHERE emp_jobcode = 'PROF' GROUP BY EMP_FNAME ORDER BY emp_dob"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about  code over the  name , and group by attribute name by a bar chart.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name"}, "hardness": "Medium"}, {"nl_queries": "Show the number of names of phones in a bar chart, list by the Name in ascending.", "db_id": "phone_market", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY Name ORDER BY Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY Name ORDER BY Name ASC"}, "hardness": "Hard"}, {"nl_queries": "Given a line chart about the maximum price of wines for each year, display Year from low to high order.", "db_id": "wine_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Year , max(Price) FROM WINE GROUP BY Year ORDER BY Year ASC", "binning": ""}, "VQL": "Visualize LINE SELECT Year , max(Price) FROM WINE GROUP BY Year ORDER BY Year ASC"}, "hardness": "Easy"}, {"nl_queries": "How many people are under 40 for each gender Plot them as bar chart, list in ascending by the y-axis.", "db_id": "network_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT gender , count(*) FROM Person WHERE age < 40 GROUP BY gender ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT gender , count(*) FROM Person WHERE age < 40 GROUP BY gender ORDER BY count(*) ASC"}, "hardness": "Hard"}, {"nl_queries": "What are the names and ids of the different categories? Show me the bar chart, and I want to show in descending by the names.", "db_id": "sakila_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.name , T1.category_id FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id ORDER BY T2.name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.name , T1.category_id FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id ORDER BY T2.name DESC"}, "hardness": "Medium"}, {"nl_queries": "Show the average transaction amount for different transaction types, show in ascending by the X-axis.", "db_id": "tracking_share_transactions", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY transaction_type_code ASC", "binning": ""}, "VQL": "Visualize BAR SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY transaction_type_code ASC"}, "hardness": "Medium"}, {"nl_queries": "Create a bar chart showing maximal revenue across headquarter", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Headquarter , max(revenue) FROM manufacturers GROUP BY Headquarter", "binning": ""}, "VQL": "Visualize BAR SELECT Headquarter , max(revenue) FROM manufacturers GROUP BY Headquarter"}, "hardness": "Easy"}, {"nl_queries": "Bar chart of the number of date from each date", "db_id": "battle_death", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date , COUNT(date) FROM battle GROUP BY date", "binning": ""}, "VQL": "Visualize BAR SELECT date , COUNT(date) FROM battle GROUP BY date"}, "hardness": "Easy"}, {"nl_queries": "Plot date to by the number of date to as a trend line, I want to show by the X in asc.", "db_id": "tracking_grants_for_research", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date_to , COUNT(date_to) FROM Project_Staff ORDER BY date_to ASC", "binning": "BIN date_to BY YEAR"}, "VQL": "Visualize LINE SELECT date_to , COUNT(date_to) FROM Project_Staff ORDER BY date_to ASC BIN date_to BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "For those employees who was hired before 2002-06-21, return a bar chart about the distribution of hire_date and the average of employee_id bin hire_date by time, could you show in descending by the Y-axis?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(EMPLOYEE_ID) DESC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "A bar chart showing the number of male and female faculty, display in descending by the Sex.", "db_id": "activity_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Sex , count(*) FROM Faculty GROUP BY Sex ORDER BY Sex DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Sex , count(*) FROM Faculty GROUP BY Sex ORDER BY Sex DESC"}, "hardness": "Medium"}, {"nl_queries": "Compute the total the number of location code across location code as a pie chart.", "db_id": "cre_Doc_Tracking_DB", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Location_Code , COUNT(Location_Code) FROM Document_locations GROUP BY Location_Code", "binning": ""}, "VQL": "Visualize PIE SELECT Location_Code , COUNT(Location_Code) FROM Document_locations GROUP BY Location_Code"}, "hardness": "Easy"}, {"nl_queries": "List the number of dogs departed in each day with a line chart that groups by departed date, display x axis from high to low order.", "db_id": "dog_kennels", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date_arrived , COUNT(date_arrived) FROM Dogs GROUP BY date_arrived ORDER BY date_arrived DESC", "binning": ""}, "VQL": "Visualize LINE SELECT date_arrived , COUNT(date_arrived) FROM Dogs GROUP BY date_arrived ORDER BY date_arrived DESC"}, "hardness": "Medium"}, {"nl_queries": "You can return a bar chart to show the employees' first name and the corresponding department's id, and rank by the FIRST_NAME in descending.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT FIRST_NAME , DEPARTMENT_ID FROM employees ORDER BY FIRST_NAME DESC", "binning": ""}, "VQL": "Visualize BAR SELECT FIRST_NAME , DEPARTMENT_ID FROM employees ORDER BY FIRST_NAME DESC"}, "hardness": "Easy"}, {"nl_queries": "Give me the comparison about the sum of meter_100 over the  Nationality , and group by attribute Nationality.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality", "binning": ""}, "VQL": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality"}, "hardness": "Easy"}, {"nl_queries": "Which tests have \"Pass\" results? Return the dates when the tests were taken, and count them by a line chart, and I want to display by the X-axis in asc.", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\"  ORDER BY date_test_taken ASC", "binning": "BIN date_test_taken BY DAY"}, "VQL": "Visualize LINE SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\"  ORDER BY date_test_taken ASC BIN date_test_taken BY DAY"}, "hardness": "Hard"}, {"nl_queries": "What is the name of each course and the corresponding number of student enrollment Show bar chart, rank Y in asc order.", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) ASC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who was hired before 2002-06-21, a bar chart shows the distribution of job_id and the amount of job_id , and group by attribute job_id, order from low to high by the total number.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , COUNT(JOB_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY COUNT(JOB_ID) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY COUNT(JOB_ID) ASC"}, "hardness": "Hard"}, {"nl_queries": "Show the total number from each allergy, show total number from low to high order.", "db_id": "allergy_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY count(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "What are the dates of birth of entrepreneurs with investor \"Simon Woodroffe\" or \"Peter Jones\", and count them by a line chart", "db_id": "entrepreneur", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Date_of_Birth , COUNT(Date_of_Birth) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Investor = \"Simon Woodroffe\" OR T1.Investor = \"Peter Jones\"", "binning": "BIN Date_of_Birth BY YEAR"}, "VQL": "Visualize LINE SELECT Date_of_Birth , COUNT(Date_of_Birth) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Investor = \"Simon Woodroffe\" OR T1.Investor = \"Peter Jones\" BIN Date_of_Birth BY YEAR"}, "hardness": "Extra Hard"}, {"nl_queries": "Compare the number of participants in each participant type code using a bar chart.", "db_id": "local_govt_in_alabama", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code", "binning": ""}, "VQL": "Visualize BAR SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code"}, "hardness": "Easy"}, {"nl_queries": "For those products with a price between 60 and 120, draw a scatter chart about the correlation between  code and  manufacturer , and group by attribute name.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Code , Manufacturer FROM products WHERE price BETWEEN 60 AND 120 GROUP BY Name", "binning": ""}, "VQL": "Visualize SCATTER SELECT Code , Manufacturer FROM products WHERE price BETWEEN 60 AND 120 GROUP BY Name"}, "hardness": "Medium"}, {"nl_queries": "List the dog name and weight of the dogs who have been abandoned in a pie chart.", "db_id": "dog_kennels", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT name , age FROM Dogs WHERE abandoned_yn = 1", "binning": ""}, "VQL": "Visualize PIE SELECT name , age FROM Dogs WHERE abandoned_yn = 1"}, "hardness": "Easy"}, {"nl_queries": "Please show me a bar chart for visualizing the name and revenue of all manufacturers sorted by their revenue in the descending order.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , Revenue FROM manufacturers ORDER BY revenue DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , Revenue FROM manufacturers ORDER BY revenue DESC"}, "hardness": "Easy"}, {"nl_queries": "For those records from the products and each product's manufacturer, visualize a bar chart about the distribution of name and price , and group by attribute headquarter, display from low to high by the x-axis.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter , T1.Name ORDER BY T1.Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter , T1.Name ORDER BY T1.Name ASC"}, "hardness": "Hard"}, {"nl_queries": "Give me the comparison about the sum of ID over the Nationality , and group by attribute Nationality, could you order in descending by the Y-axis please?", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) DESC"}, "hardness": "Medium"}, {"nl_queries": "List all directors along with the number of films directed by each director with a pie chart.", "db_id": "cinema", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Directed_by , count(*) FROM film GROUP BY directed_by", "binning": ""}, "VQL": "Visualize PIE SELECT Directed_by , count(*) FROM film GROUP BY directed_by"}, "hardness": "Easy"}, {"nl_queries": "Find the number of the first name of students who are living in the Smith Hall, and show by the Fname in asc please.", "db_id": "dorm_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Fname , COUNT(Fname) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.dorm_name = 'Smith Hall' GROUP BY Fname ORDER BY Fname ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Fname , COUNT(Fname) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.dorm_name = 'Smith Hall' GROUP BY Fname ORDER BY Fname ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "A bar chart about how many songs were released for each format?, could you rank in asc by the Y?", "db_id": "music_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT formats , count(*) FROM files GROUP BY formats ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT formats , count(*) FROM files GROUP BY formats ORDER BY count(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "Show all the actual delivery dates and bin by year in a line chart, and rank in descending by the x-axis.", "db_id": "cre_Drama_Workshop_Groups", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY Actual_Delivery_Date DESC", "binning": "BIN Actual_Delivery_Date BY YEAR"}, "VQL": "Visualize LINE SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY Actual_Delivery_Date DESC BIN Actual_Delivery_Date BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "How many accounts for different statement details? Plot a pie chart.", "db_id": "cre_Docs_and_Epenses", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Statement_Details , COUNT(Statement_Details) FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id = T2.statement_id GROUP BY Statement_Details", "binning": ""}, "VQL": "Visualize PIE SELECT Statement_Details , COUNT(Statement_Details) FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id = T2.statement_id GROUP BY Statement_Details"}, "hardness": "Medium"}, {"nl_queries": "Compute the total how many city across city as a pie chart.", "db_id": "shop_membership", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT City , COUNT(City) FROM branch GROUP BY City", "binning": ""}, "VQL": "Visualize PIE SELECT City , COUNT(City) FROM branch GROUP BY City"}, "hardness": "Easy"}, {"nl_queries": "Show me a bar chart comparing the total number of captains in each rank, rank in ascending by the Rank.", "db_id": "ship_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank ORDER BY Rank ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank ORDER BY Rank ASC"}, "hardness": "Medium"}, {"nl_queries": "Find Nationality and the sum of meter_100 , and group by attribute Nationality, and visualize them by a bar chart, and order by the x-axis in asc.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC"}, "hardness": "Medium"}, {"nl_queries": "Give me a scatter chart that groups acc road, the x-axis is team id and the y-axis is All_Games_Percent.\n\n", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Road", "binning": ""}, "VQL": "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Road"}, "hardness": "Easy"}, {"nl_queries": "Return a bar chart about the distribution of meter_300 and ID , and show y axis from high to low order.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_300 , ID FROM swimmer ORDER BY ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_300 , ID FROM swimmer ORDER BY ID DESC"}, "hardness": "Easy"}, {"nl_queries": "A bar chart for what are the number of the distinct move in dates of the residents?", "db_id": "local_govt_and_lot", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_moved_in , COUNT(date_moved_in) FROM residents", "binning": "BIN date_moved_in BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM residents BIN date_moved_in BY WEEKDAY"}, "hardness": "Easy"}, {"nl_queries": "A bar chart about what are the ids and details of events that have more than one participants?, could you sort by the x axis in descending?", "db_id": "local_govt_in_alabama", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Event_Details , T1.Event_ID FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY T1.Event_Details ORDER BY T1.Event_Details DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Event_Details , T1.Event_ID FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY T1.Event_Details ORDER BY T1.Event_Details DESC"}, "hardness": "Hard"}, {"nl_queries": "Show the number of courses for each course description in a stacked bar chart The x-axis is course description and group by instructor's first name, and sort x-axis in asc order please.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT CRS_DESCRIPTION , COUNT(CRS_DESCRIPTION) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num GROUP BY EMP_FNAME ,  CRS_DESCRIPTION ORDER BY CRS_DESCRIPTION ASC", "binning": ""}, "VQL": "Visualize BAR SELECT CRS_DESCRIPTION , COUNT(CRS_DESCRIPTION) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num GROUP BY EMP_FNAME ,  CRS_DESCRIPTION ORDER BY CRS_DESCRIPTION ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "Return a bar chart on how many singers are from each country?, sort the total number in desc order.", "db_id": "concert_singer", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "Return the number of the dates of birth for entrepreneurs who have either the investor Simon Woodroffe or Peter Jones, and rank Y-axis in asc order.", "db_id": "entrepreneur", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Date_of_Birth , COUNT(Date_of_Birth) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Investor = \"Simon Woodroffe\" OR T1.Investor = \"Peter Jones\"  ORDER BY COUNT(Date_of_Birth) ASC", "binning": "BIN Date_of_Birth BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Date_of_Birth , COUNT(Date_of_Birth) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Investor = \"Simon Woodroffe\" OR T1.Investor = \"Peter Jones\"  ORDER BY COUNT(Date_of_Birth) ASC BIN Date_of_Birth BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "Draw a bar chart about the distribution of All_Neutral and School_ID , and list from high to low by the X.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Neutral , School_ID FROM basketball_match ORDER BY All_Neutral DESC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Neutral , School_ID FROM basketball_match ORDER BY All_Neutral DESC"}, "hardness": "Easy"}, {"nl_queries": "Draw a bar chart of location versus how many location, and display by the x-axis from low to high.", "db_id": "wrestler", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Location , COUNT(Location) FROM wrestler GROUP BY Location ORDER BY Location ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Location , COUNT(Location) FROM wrestler GROUP BY Location ORDER BY Location ASC"}, "hardness": "Medium"}, {"nl_queries": "Visualize the general trend of the number of courses over the year, and show x-axis from high to low order.", "db_id": "college_2", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT year , count(*) FROM SECTION GROUP BY year ORDER BY year DESC", "binning": ""}, "VQL": "Visualize LINE SELECT year , count(*) FROM SECTION GROUP BY year ORDER BY year DESC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, what is the relationship between  manager_id and  department_id ?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT MANAGER_ID , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)", "binning": ""}, "VQL": "Visualize SCATTER SELECT MANAGER_ID , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)"}, "hardness": "Extra Hard"}, {"nl_queries": "A bar chart showing the number of members in each country.", "db_id": "decoration_competition", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Country , COUNT(Country) FROM member GROUP BY Country", "binning": ""}, "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM member GROUP BY Country"}, "hardness": "Easy"}, {"nl_queries": "Show me about the distribution of Start_from and the average of Employee_ID bin start_from by weekday in a bar chart, and sort from high to low by the Y.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Start_from , AVG(Employee_ID) FROM hiring  ORDER BY AVG(Employee_ID) DESC", "binning": "BIN Start_from BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Start_from , AVG(Employee_ID) FROM hiring  ORDER BY AVG(Employee_ID) DESC BIN Start_from BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "Visualize a pie chart with how many students participated in tryouts for each college by descennding count?", "db_id": "soccer_2", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT cName , count(*) FROM tryout GROUP BY cName ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize PIE SELECT cName , count(*) FROM tryout GROUP BY cName ORDER BY count(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "Show the outcome code of mailshots along with the number of mailshots in each outcome code in a bar chart, list Y in descending order.", "db_id": "customers_campaigns_ecommerce", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT outcome_code , count(*) FROM mailshot_customers GROUP BY outcome_code ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT outcome_code , count(*) FROM mailshot_customers GROUP BY outcome_code ORDER BY count(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "Please compare the credit score of the customers who have some loans by a bar chart, and sort in asc by the y-axis.", "db_id": "loan_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT cust_name , credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id ORDER BY credit_score ASC", "binning": ""}, "VQL": "Visualize BAR SELECT cust_name , credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id ORDER BY credit_score ASC"}, "hardness": "Medium"}, {"nl_queries": "Draw a bar chart of country versus the total number, rank y axis in ascending order.", "db_id": "concert_singer", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, draw a bar chart about the distribution of job_id and the average of employee_id , and group by attribute job_id, rank by the Y-axis in descending.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, give me the trend about commission_pct over hire_date , show in descending by the x-axis.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE DESC", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE DESC"}, "hardness": "Medium"}, {"nl_queries": "What is the average price of the products for each category, Show a pie chart.", "db_id": "customer_complaints", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT product_category_code , avg(product_price) FROM products GROUP BY product_category_code", "binning": ""}, "VQL": "Visualize PIE SELECT product_category_code , avg(product_price) FROM products GROUP BY product_category_code"}, "hardness": "Easy"}, {"nl_queries": "For each submission, group its acceptance result and count them. Visualize them in a bar chart.", "db_id": "workshop_paper", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result", "binning": ""}, "VQL": "Visualize PIE SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result"}, "hardness": "Easy"}, {"nl_queries": "How many treatments in each day? Return a line chart that groups by date of treatment.", "db_id": "dog_kennels", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date_of_treatment , COUNT(date_of_treatment) FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id GROUP BY date_of_treatment", "binning": ""}, "VQL": "Visualize LINE SELECT date_of_treatment , COUNT(date_of_treatment) FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id GROUP BY date_of_treatment"}, "hardness": "Medium"}, {"nl_queries": "What are the number of the paragraph texts for the document with the name 'Customer reviews'?", "db_id": "cre_Doc_Template_Mgt", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Paragraph_Text , COUNT(Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = \"Customer reviews\" GROUP BY Paragraph_Text", "binning": ""}, "VQL": "Visualize BAR SELECT Paragraph_Text , COUNT(Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = \"Customer reviews\" GROUP BY Paragraph_Text"}, "hardness": "Hard"}, {"nl_queries": "Bar graph to show department_id from different last name, I want to display X in ascending order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT LAST_NAME , DEPARTMENT_ID FROM employees ORDER BY LAST_NAME ASC", "binning": ""}, "VQL": "Visualize BAR SELECT LAST_NAME , DEPARTMENT_ID FROM employees ORDER BY LAST_NAME ASC"}, "hardness": "Easy"}, {"nl_queries": "Show me a scatter plot for the relationship between average and minimum age of captains in each class, color different classes.", "db_id": "ship_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT avg(age) , min(age) FROM captain GROUP BY Class", "binning": ""}, "VQL": "Visualize SCATTER SELECT avg(age) , min(age) FROM captain GROUP BY Class"}, "hardness": "Easy"}, {"nl_queries": "For those records from the products and each product's manufacturer, a scatter chart shows the correlation between  code and  revenue .", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code", "binning": ""}, "VQL": "Visualize SCATTER SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code"}, "hardness": "Easy"}, {"nl_queries": "Return a bar chart on what are the names and prices of all products in the store?", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , AVG(Price) FROM products GROUP BY Name", "binning": ""}, "VQL": "Visualize BAR SELECT Name , AVG(Price) FROM products GROUP BY Name"}, "hardness": "Easy"}, {"nl_queries": "Bar chart x axis location y axis sum total passengers, show from low to high by the x axis.", "db_id": "train_station", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Location , sum(total_passengers) FROM station GROUP BY LOCATION ORDER BY Location ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Location , sum(total_passengers) FROM station GROUP BY LOCATION ORDER BY Location ASC"}, "hardness": "Medium"}, {"nl_queries": "List each charge type and its amount in a bar chart, and sort in asc by the y axis.", "db_id": "dog_kennels", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT charge_type , charge_amount FROM Charges ORDER BY charge_amount ASC", "binning": ""}, "VQL": "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_amount ASC"}, "hardness": "Easy"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, return a bar chart about the distribution of job_id and the average of manager_id , and group by attribute job_id, could you order x axis in desc order?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "Show all card type codes and the number of cards in each type Plot them as bar chart, and rank from low to high by the Y.", "db_id": "customers_card_transactions", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT card_type_code , count(*) FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT card_type_code , count(*) FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who did not have any job in the past, return a bar chart about the distribution of job_id and the sum of manager_id , and group by attribute job_id, order in asc by the X.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY JOB_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY JOB_ID ASC"}, "hardness": "Hard"}, {"nl_queries": "List all payment methods and number of payments using each payment methods Plot them as bar chart, display by the y axis from low to high please.", "db_id": "driving_school", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT payment_method_code , count(*) FROM Customer_Payments GROUP BY payment_method_code ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT payment_method_code , count(*) FROM Customer_Payments GROUP BY payment_method_code ORDER BY count(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "Find the number of students whose gpa is lower than the average gpa of all students for different first name in a pie chart.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT STU_FNAME , COUNT(STU_FNAME) FROM student WHERE stu_gpa < (SELECT avg(stu_gpa) FROM student) GROUP BY STU_FNAME", "binning": ""}, "VQL": "Visualize PIE SELECT STU_FNAME , COUNT(STU_FNAME) FROM student WHERE stu_gpa < (SELECT avg(stu_gpa) FROM student) GROUP BY STU_FNAME"}, "hardness": "Medium"}, {"nl_queries": "What is the average age for each city and what are those cities. Show bar chart.", "db_id": "dorm_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT city_code , avg(age) FROM student GROUP BY city_code", "binning": ""}, "VQL": "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code"}, "hardness": "Easy"}, {"nl_queries": "A bar graph listing the services and how many services provided by all stations, and order from high to low by the total number please.", "db_id": "station_weather", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) DESC"}, "hardness": "Medium"}, {"nl_queries": "Draw a bar chart for how many sections does each course have?, could you list bars in desc order?", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY CRS_CODE DESC", "binning": ""}, "VQL": "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY CRS_CODE DESC"}, "hardness": "Medium"}, {"nl_queries": "What are the number of the first names of all students in Smith Hall?, and sort by the how many fname in asc.", "db_id": "dorm_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Fname , COUNT(Fname) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.dorm_name = 'Smith Hall' GROUP BY Fname ORDER BY COUNT(Fname) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Fname , COUNT(Fname) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.dorm_name = 'Smith Hall' GROUP BY Fname ORDER BY COUNT(Fname) ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, return a scatter chart about the correlation between  manager_id and  department_id .", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT MANAGER_ID , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40", "binning": ""}, "VQL": "Visualize SCATTER SELECT MANAGER_ID , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40"}, "hardness": "Medium"}, {"nl_queries": "\u5361\u53f7\u6c42\u548c\u65e0\u610f\u4e49, could you sort y-axis in asc order?", "db_id": "customers_card_transactions", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT card_type_code , SUM(card_number) FROM Customers_cards GROUP BY card_type_code ORDER BY SUM(card_number) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT card_type_code , SUM(card_number) FROM Customers_cards GROUP BY card_type_code ORDER BY SUM(card_number) ASC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who was hired before 2002-06-21, give me the comparison about the average of manager_id over the hire_date bin hire_date by time, show in descending by the y-axis please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(MANAGER_ID) DESC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "List the states of all votes, compute the total number of states, and show the proportion with a pie chart.", "db_id": "voter_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT state , COUNT(state) FROM votes GROUP BY state", "binning": ""}, "VQL": "Visualize PIE SELECT state , COUNT(state) FROM votes GROUP BY state"}, "hardness": "Easy"}, {"nl_queries": "What are the number of the name of rooms booked by customers whose first name has \"ROY\" in part?, and rank x-axis in asc order please.", "db_id": "inn_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT roomName , COUNT(roomName) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId WHERE firstname LIKE '%ROY%' GROUP BY roomName ORDER BY roomName ASC", "binning": ""}, "VQL": "Visualize BAR SELECT roomName , COUNT(roomName) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId WHERE firstname LIKE '%ROY%' GROUP BY roomName ORDER BY roomName ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "Find the oldest age for students with different sex in a bar chart, and I want to list y-axis from high to low order.", "db_id": "dorm_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Sex , max(age) FROM student GROUP BY Sex ORDER BY max(age) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Sex , max(age) FROM student GROUP BY Sex ORDER BY max(age) DESC"}, "hardness": "Easy"}, {"nl_queries": "Show each author and the number of workshops they submitted to Show bar chart, show in asc by the total number.", "db_id": "workshop_paper", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY COUNT(DISTINCT T1.workshop_id) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY COUNT(DISTINCT T1.workshop_id) ASC"}, "hardness": "Medium"}, {"nl_queries": "Give me the comparison about ID over the meter_500 , and show y axis from high to low order.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_500 , ID FROM swimmer ORDER BY ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_500 , ID FROM swimmer ORDER BY ID DESC"}, "hardness": "Easy"}, {"nl_queries": "For those records from the products and each product's manufacturer, a bar chart shows the distribution of founder and the sum of manufacturer , and group by attribute founder, order in desc by the total number of manufacturer.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Founder , SUM(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder ORDER BY SUM(Manufacturer) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Founder , SUM(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder ORDER BY SUM(Manufacturer) DESC"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, a scatter chart shows the correlation between  code and  manufacturer , and group by attribute name.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name", "binning": ""}, "VQL": "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name"}, "hardness": "Medium"}, {"nl_queries": "What is the number of start date of each apartment booking for each year? Return a bar chart, rank by the Y in descending.", "db_id": "apartment_rentals", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id  ORDER BY COUNT(booking_start_date) DESC", "binning": "BIN booking_start_date BY YEAR"}, "VQL": "Visualize BAR SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id  ORDER BY COUNT(booking_start_date) DESC BIN booking_start_date BY YEAR"}, "hardness": "Hard"}, {"nl_queries": "Visualize a bar chart for what is the id and weight of every pet who is older than 1?, and order from low to high by the y axis please.", "db_id": "pets_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT PetID , weight FROM pets WHERE pet_age > 1 ORDER BY weight ASC", "binning": ""}, "VQL": "Visualize BAR SELECT PetID , weight FROM pets WHERE pet_age > 1 ORDER BY weight ASC"}, "hardness": "Medium"}, {"nl_queries": "Show the name and age for all male people who don't have a wedding with a bar chart, and list from high to low by the Y.", "db_id": "wedding", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , Age FROM people WHERE is_male = 'T' AND people_id NOT IN (SELECT male_id FROM wedding) ORDER BY Age DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , Age FROM people WHERE is_male = 'T' AND people_id NOT IN (SELECT male_id FROM wedding) ORDER BY Age DESC"}, "hardness": "Medium"}, {"nl_queries": "Give me the comparison about ID over the meter_300 , display in descending by the X-axis.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_300 , ID FROM swimmer ORDER BY meter_300 DESC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_300 , ID FROM swimmer ORDER BY meter_300 DESC"}, "hardness": "Easy"}, {"nl_queries": "Visualize a pie chart with what is the name of every city that has at least 15 stations and how many stations does it have?", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT city , COUNT(*) FROM station GROUP BY city", "binning": ""}, "VQL": "Visualize PIE SELECT city , COUNT(*) FROM station GROUP BY city"}, "hardness": "Easy"}, {"nl_queries": "Find the number of departments in each school Plot them as bar chart, could you list in ascending by the X?", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY SCHOOL_CODE ASC", "binning": ""}, "VQL": "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY SCHOOL_CODE ASC"}, "hardness": "Medium"}, {"nl_queries": "Visualize a bar chart about the distribution of  date_address_from and the amount of date_address_from , and group by attribute other_details and bin date_address_from by weekday.", "db_id": "behavior_monitoring", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC", "binning": "BIN date_address_from BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "Give me a bar chart to show the theme and their sales of the journal which did not have any of the listed editors serving on the committee.", "db_id": "journal_committee", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Theme , T1.Sales FROM journal EXCEPT SELECT T1.date , T1.theme , T1.sales FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID = T2.journal_ID", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Theme , T1.Sales FROM journal EXCEPT SELECT T1.date , T1.theme , T1.sales FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID = T2.journal_ID"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, draw a scatter chart about the correlation between  salary and  commission_pct .", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT SALARY , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)", "binning": ""}, "VQL": "Visualize SCATTER SELECT SALARY , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)"}, "hardness": "Extra Hard"}, {"nl_queries": "Bar chart x axis acc regular season y axis acc_percent, sort by the ACC_Percent in descending.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match ORDER BY ACC_Percent DESC", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match ORDER BY ACC_Percent DESC"}, "hardness": "Easy"}, {"nl_queries": "Return a bar chart about the distribution of Time and ID , could you show by the X-axis from high to low please?", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Time , ID FROM swimmer ORDER BY Time DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Time , ID FROM swimmer ORDER BY Time DESC"}, "hardness": "Easy"}, {"nl_queries": "Bar chart of maximal product price from each product type code, and list from low to high by the Y.", "db_id": "department_store", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code ORDER BY max(product_price) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code ORDER BY max(product_price) ASC"}, "hardness": "Easy"}, {"nl_queries": "Return a bar chart about the distribution of  ACC_Regular_Season and  ACC_Percent .", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match"}, "hardness": "Easy"}, {"nl_queries": "For all employees who have the letters D or S in their first name, visualize a bar chart about the distribution of job_id and the average of department_id , and group by attribute job_id, and sort from low to high by the X-axis.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "In zip code 94107, on which day neither Fog nor Rain was not observed, and count them by a bar chart", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date , COUNT(date) FROM weather WHERE zip_code = 94107 AND EVENTS != \"Fog\" AND EVENTS != \"Rain\"", "binning": "BIN date BY YEAR"}, "VQL": "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE zip_code = 94107 AND EVENTS != \"Fog\" AND EVENTS != \"Rain\" BIN date BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "Visualize a bar chart about the distribution of  date_address_to and the average of monthly_rental , and group by attribute other_details and bin date_address_to by weekday.", "db_id": "behavior_monitoring", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC", "binning": "BIN date_address_to BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "what are the different budget type codes, and how many documents are there for each?, and order Budget_Type_Code in desc order.", "db_id": "cre_Docs_and_Epenses", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY Budget_Type_Code DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY Budget_Type_Code DESC"}, "hardness": "Medium"}, {"nl_queries": "Show the number of books for each year in descending order by year and visualize in a bar chart.", "db_id": "culture_company", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Year , COUNT(Year) FROM book_club GROUP BY Year ORDER BY YEAR DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Year , COUNT(Year) FROM book_club GROUP BY Year ORDER BY YEAR DESC"}, "hardness": "Medium"}, {"nl_queries": "Visualize a scatter chart about the correlation between  Team_ID and  School_ID .", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Team_ID , School_ID FROM basketball_match", "binning": ""}, "VQL": "Visualize SCATTER SELECT Team_ID , School_ID FROM basketball_match"}, "hardness": "Easy"}, {"nl_queries": "Show different type codes of products and the number of products with each type code in a bar chart.", "db_id": "solvency_ii", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Product_Type_Code , COUNT(*) FROM Products GROUP BY Product_Type_Code", "binning": ""}, "VQL": "Visualize BAR SELECT Product_Type_Code , COUNT(*) FROM Products GROUP BY Product_Type_Code"}, "hardness": "Easy"}, {"nl_queries": "Show different builders of railways, along with the corresponding number of railways using each builder Show bar chart, and show in desc by the Builder.", "db_id": "railway", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Builder , COUNT(*) FROM railway GROUP BY Builder ORDER BY Builder DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Builder , COUNT(*) FROM railway GROUP BY Builder ORDER BY Builder DESC"}, "hardness": "Medium"}, {"nl_queries": "How many courses for each office? Show me a bar chart, and display y-axis from low to high order please.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT PROF_OFFICE , COUNT(PROF_OFFICE) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num GROUP BY PROF_OFFICE ORDER BY COUNT(PROF_OFFICE) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT PROF_OFFICE , COUNT(PROF_OFFICE) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num GROUP BY PROF_OFFICE ORDER BY COUNT(PROF_OFFICE) ASC"}, "hardness": "Hard"}, {"nl_queries": "Give me a bar chart about the number of customer addresses in each premises type, display premises_type in asc order.", "db_id": "customers_campaigns_ecommerce", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT premises_type , COUNT(premises_type) FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id = T2.premise_id GROUP BY premises_type ORDER BY premises_type ASC", "binning": ""}, "VQL": "Visualize BAR SELECT premises_type , COUNT(premises_type) FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id = T2.premise_id GROUP BY premises_type ORDER BY premises_type ASC"}, "hardness": "Hard"}, {"nl_queries": "Show all branch names with the number of members in each branch registered after 2015 with a bar chart, show in ascending by the bars.", "db_id": "shop_membership", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , count(*) FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id WHERE T1.register_year > 2015 GROUP BY T2.branch_id ORDER BY Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , count(*) FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id WHERE T1.register_year > 2015 GROUP BY T2.branch_id ORDER BY Name ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "I want to see trend of sum employee id by start from, and list x axis from high to low order.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Start_from , SUM(Employee_ID) FROM hiring  ORDER BY Start_from DESC", "binning": "BIN Start_from BY YEAR"}, "VQL": "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring  ORDER BY Start_from DESC BIN Start_from BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "Return the names and ids of customers who have TN in their address by a pie chart.", "db_id": "department_store", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT customer_name , customer_id FROM customers WHERE customer_address LIKE \"%TN%\"", "binning": ""}, "VQL": "Visualize PIE SELECT customer_name , customer_id FROM customers WHERE customer_address LIKE \"%TN%\""}, "hardness": "Medium"}, {"nl_queries": "Group by the local authorities and count the number of local authorities, and then group by services.", "db_id": "station_weather", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT services , COUNT(services) FROM station GROUP BY local_authority ,  services", "binning": ""}, "VQL": "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY local_authority ,  services"}, "hardness": "Hard"}, {"nl_queries": "List the number of treatments in each day with a bar chart that bins date of treatment by weekday, and I want to display by the y-axis from high to low please.", "db_id": "dog_kennels", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_of_treatment , COUNT(date_of_treatment) FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id  ORDER BY COUNT(date_of_treatment) DESC", "binning": "BIN date_of_treatment BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_of_treatment , COUNT(date_of_treatment) FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id  ORDER BY COUNT(date_of_treatment) DESC BIN date_of_treatment BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about the average of price over the headquarter , and group by attribute headquarter by a bar chart, and display in ascending by the mean price.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Headquarter , AVG(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY AVG(Price) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Headquarter , AVG(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY AVG(Price) ASC"}, "hardness": "Hard"}, {"nl_queries": "What is the id and trade name of the medicines can interact with at least 3 enzymes, rank by the Trade_Name in asc please.", "db_id": "medicine_enzyme_interaction", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Trade_Name , id FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id ORDER BY Trade_Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Trade_Name , id FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id ORDER BY Trade_Name ASC"}, "hardness": "Medium"}, {"nl_queries": "For all employees who have the letters D or S in their first name, draw a bar chart about the distribution of job_id and the average of salary , and group by attribute job_id, sort in desc by the names.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "Show the number of climbers for each mountain in a bar chart, I want to order names from low to high order.", "db_id": "climbing", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , COUNT(T2.Name) FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID GROUP BY T2.Name ORDER BY T2.Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID GROUP BY T2.Name ORDER BY T2.Name ASC"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, show me about the distribution of name and the average of price , and group by attribute name in a bar chart, and display total number in descending order.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Price DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Price DESC"}, "hardness": "Hard"}, {"nl_queries": "Show each county along with the number of schools, I want to display in desc by the x axis please.", "db_id": "school_finance", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT County , count(*) FROM school GROUP BY county ORDER BY County DESC", "binning": ""}, "VQL": "Visualize BAR SELECT County , count(*) FROM school GROUP BY county ORDER BY County DESC"}, "hardness": "Medium"}, {"nl_queries": "Show each premise type and the number of premises in that type. Show a pie chart.", "db_id": "customers_campaigns_ecommerce", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT premises_type , count(*) FROM premises GROUP BY premises_type", "binning": ""}, "VQL": "Visualize PIE SELECT premises_type , count(*) FROM premises GROUP BY premises_type"}, "hardness": "Easy"}, {"nl_queries": "Return a histogram on what is the average high temperature for each day of week?, show x axis in asc order please.", "db_id": "station_weather", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT day_of_week , avg(high_temperature) FROM weekly_weather GROUP BY day_of_week ORDER BY day_of_week ASC", "binning": ""}, "VQL": "Visualize BAR SELECT day_of_week , avg(high_temperature) FROM weekly_weather GROUP BY day_of_week ORDER BY day_of_week ASC"}, "hardness": "Medium"}, {"nl_queries": "Show different nominees and the number of musicals they have been nominated in a bar chart.", "db_id": "musical", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nominee , COUNT(*) FROM musical GROUP BY Nominee", "binning": ""}, "VQL": "Visualize BAR SELECT Nominee , COUNT(*) FROM musical GROUP BY Nominee"}, "hardness": "Easy"}, {"nl_queries": "How many faculty members do we have for each rank and gender? Plot them as bar chart, and list from low to high by the names.", "db_id": "activity_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Rank , count(*) FROM Faculty GROUP BY Sex ,  Rank ORDER BY Rank ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY Sex ,  Rank ORDER BY Rank ASC"}, "hardness": "Hard"}, {"nl_queries": "Show the names and total passengers for all train stations not in London. Visualize by bar chart.", "db_id": "train_station", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , Total_Passengers FROM station WHERE LOCATION != 'London'", "binning": ""}, "VQL": "Visualize BAR SELECT Name , Total_Passengers FROM station WHERE LOCATION != 'London'"}, "hardness": "Easy"}, {"nl_queries": "For those employees who was hired before 2002-06-21, show me about the correlation between  salary and  commission_pct  in a scatter chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT SALARY , COMMISSION_PCT FROM employees WHERE hire_date < '2002-06-21'", "binning": ""}, "VQL": "Visualize SCATTER SELECT SALARY , COMMISSION_PCT FROM employees WHERE hire_date < '2002-06-21'"}, "hardness": "Easy"}, {"nl_queries": "Stack bar chart of how many home team vs Away_team based on home team, display how many home team from low to high order.", "db_id": "game_injury", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Away_team ,  Home_team ORDER BY COUNT(Home_team) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Away_team ,  Home_team ORDER BY COUNT(Home_team) ASC"}, "hardness": "Hard"}, {"nl_queries": "Compare the number of chips from different company names for the phone whose screen mode type is \"Graphics\" with a bar chart.", "db_id": "phone_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Company_name , COUNT(Company_name) FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type = \"Graphics\" GROUP BY Company_name", "binning": ""}, "VQL": "Visualize BAR SELECT Company_name , COUNT(Company_name) FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type = \"Graphics\" GROUP BY Company_name"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, find name and the sum of price , and group by attribute name, and visualize them by a bar chart, could you sort in asc by the names?", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC"}, "hardness": "Hard"}, {"nl_queries": "List the state names and the number of customers living in each state. ", "db_id": "customer_deliveries", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT state_province_county , count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id = t2.address_id GROUP BY t2.state_province_county", "binning": ""}, "VQL": "Visualize BAR SELECT state_province_county , count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id = t2.address_id GROUP BY t2.state_province_county"}, "hardness": "Medium"}, {"nl_queries": "Show me about the correlation between  School_ID and  ACC_Percent , and group by attribute Team_Name in a scatter chart.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY Team_Name", "binning": ""}, "VQL": "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY Team_Name"}, "hardness": "Easy"}, {"nl_queries": "Give me a bar chart for the total number of each class, sort in desc by the bars.", "db_id": "race_track", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY Class DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY Class DESC"}, "hardness": "Medium"}, {"nl_queries": "What are the number of the payment dates for any payments that have an amount greater than 10 or were handled by a staff member with the first name Elsa?, and show payment_date in asc order.", "db_id": "sakila_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT payment_date , COUNT(payment_date) FROM payment WHERE amount > 10 UNION SELECT T1.payment_date FROM payment AS T1 JOIN staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = 'Elsa' GROUP BY payment_date ORDER BY payment_date ASC", "binning": ""}, "VQL": "Visualize LINE SELECT payment_date , COUNT(payment_date) FROM payment WHERE amount > 10 UNION SELECT T1.payment_date FROM payment AS T1 JOIN staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = 'Elsa' GROUP BY payment_date ORDER BY payment_date ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees who did not have any job in the past, show me about the distribution of job_id and the average of salary , and group by attribute job_id in a bar chart, rank JOB_ID in descending order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY JOB_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY JOB_ID DESC"}, "hardness": "Hard"}, {"nl_queries": "How many total amounts of payments by each method code? You can give me a bar chart, list by the y axis in desc.", "db_id": "insurance_policies", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY SUM(Amount_Payment) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY SUM(Amount_Payment) DESC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, find name and code , and group by attribute headquarter, and visualize them by a bar chart, I want to display by the names in ascending.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter , T1.Name ORDER BY T1.Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter , T1.Name ORDER BY T1.Name ASC"}, "hardness": "Hard"}, {"nl_queries": "Return a bar chart about the distribution of Is_full_time and the average of Shop_ID , and group by attribute Is_full_time, could you rank in asc by the y-axis?", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Is_full_time , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY AVG(Shop_ID) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Is_full_time , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY AVG(Shop_ID) ASC"}, "hardness": "Medium"}, {"nl_queries": "Bar chart of the number of receipt date from each receipt date", "db_id": "cre_Doc_Control_Systems", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT receipt_date , COUNT(receipt_date) FROM Documents", "binning": "BIN receipt_date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT receipt_date , COUNT(receipt_date) FROM Documents BIN receipt_date BY WEEKDAY"}, "hardness": "Easy"}, {"nl_queries": "Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes' with a bar chart, and order from high to low by the Y.", "db_id": "department_management", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , SUM(Num_Employees) FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id WHERE T2.temporary_acting = 'Yes' GROUP BY Name ORDER BY SUM(Num_Employees) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , SUM(Num_Employees) FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id WHERE T2.temporary_acting = 'Yes' GROUP BY Name ORDER BY SUM(Num_Employees) DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "What is the average of credit value of courses with more than one prerequisite for each title? Return a bar chart, list x-axis from high to low order please.", "db_id": "college_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT title , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title ORDER BY title DESC", "binning": ""}, "VQL": "Visualize BAR SELECT title , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title ORDER BY title DESC"}, "hardness": "Hard"}, {"nl_queries": "Find those themes and years for all exhibitions with ticket prices lower than 15, show me a stacked bar chart that groups by themes, counts year, and the x-axis is Year.", "db_id": "theme_gallery", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Year , COUNT(Year) FROM exhibition WHERE ticket_price < 15 GROUP BY Theme", "binning": ""}, "VQL": "Visualize BAR SELECT Year , COUNT(Year) FROM exhibition WHERE ticket_price < 15 GROUP BY Theme"}, "hardness": "Medium"}, {"nl_queries": "For those employees who did not have any job in the past, a line chart shows the change of department_id over hire_date, list HIRE_DATE in descending order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE DESC", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE DESC"}, "hardness": "Medium"}, {"nl_queries": "Please list the years of film market estimations when the market is in country \"Japan\" in descending order, and count them by a bar chart", "db_id": "film_rank", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Year , COUNT(Year) FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID WHERE T2.Country = \"Japan\"  ORDER BY T1.Year DESC", "binning": "BIN Year BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Year , COUNT(Year) FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID WHERE T2.Country = \"Japan\"  ORDER BY T1.Year DESC BIN Year BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "A bar chart about what are the title and maximum price of each film?, display by the price from low to high.", "db_id": "cinema", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title ORDER BY max(T1.price) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title ORDER BY max(T1.price) ASC"}, "hardness": "Medium"}, {"nl_queries": "Visualize a bar chart about the distribution of Team_Name and All_Games_Percent , sort Y in descending order.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Team_Name , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Team_Name , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent DESC"}, "hardness": "Easy"}, {"nl_queries": "Show institution names along with the number of proteins for each institution by a pie chart.", "db_id": "protein_institute", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Institution , count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id = T2.institution_id GROUP BY T1.institution_id", "binning": ""}, "VQL": "Visualize PIE SELECT Institution , count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id = T2.institution_id GROUP BY T1.institution_id"}, "hardness": "Medium"}, {"nl_queries": "Show me the total number by country in a histogram", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Country , count(*) FROM stadium GROUP BY country", "binning": ""}, "VQL": "Visualize BAR SELECT Country , count(*) FROM stadium GROUP BY country"}, "hardness": "Easy"}, {"nl_queries": "Show me the trend about what is the average weight and year for each year?, and I want to rank by the x-axis in asc please.", "db_id": "car_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Year , avg(Weight) FROM CARS_DATA GROUP BY YEAR ORDER BY Year ASC", "binning": ""}, "VQL": "Visualize LINE SELECT Year , avg(Weight) FROM CARS_DATA GROUP BY YEAR ORDER BY Year ASC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, return a scatter chart about the correlation between  price and  code , and group by attribute headquarter.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT T1.Price , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter", "binning": ""}, "VQL": "Visualize SCATTER SELECT T1.Price , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter"}, "hardness": "Medium"}, {"nl_queries": "For each product, show its name and the number of times it was ordered. Plot them as bar chart.", "db_id": "tracking_orders", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T3.product_name , SUM(count(*)) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_name", "binning": ""}, "VQL": "Visualize BAR SELECT T3.product_name , SUM(count(*)) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_name"}, "hardness": "Medium"}, {"nl_queries": "A bar chart about how many wines are there for each grape?, and display by the the total number in desc please.", "db_id": "wine_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Grape , count(*) FROM WINE GROUP BY Grape ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Grape , count(*) FROM WINE GROUP BY Grape ORDER BY count(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, visualize a bar chart about the distribution of job_id and the sum of department_id , and group by attribute job_id, and could you list by the X in descending please?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "Show max(stu gpa) vs minimal stu gpa as scatter plot use a different color for each DEPT_CODE", "db_id": "college_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT max(stu_gpa) , min(stu_gpa) FROM student GROUP BY DEPT_CODE", "binning": ""}, "VQL": "Visualize SCATTER SELECT max(stu_gpa) , min(stu_gpa) FROM student GROUP BY DEPT_CODE"}, "hardness": "Easy"}, {"nl_queries": "Create a pie chart showing the total number across citizenship.", "db_id": "singer", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship", "binning": ""}, "VQL": "Visualize PIE SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship"}, "hardness": "Easy"}, {"nl_queries": "Show a bar chart about the number of results of the battles when the bulgarian commander is not 'Boril', I want to sort from low to high by the Y-axis.", "db_id": "battle_death", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT result , COUNT(result) FROM battle WHERE bulgarian_commander != 'Boril' GROUP BY result ORDER BY COUNT(result) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT result , COUNT(result) FROM battle WHERE bulgarian_commander != 'Boril' GROUP BY result ORDER BY COUNT(result) ASC"}, "hardness": "Hard"}, {"nl_queries": "Find the latest logon date of the students whose family name is \"Jaskolski\" or \"Langosh\", and count them by a bar chart, and could you show from high to low by the Y?", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_of_latest_logon , COUNT(date_of_latest_logon) FROM Students WHERE family_name = \"Jaskolski\" OR family_name = \"Langosh\"  ORDER BY COUNT(date_of_latest_logon) DESC", "binning": "BIN date_of_latest_logon BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_of_latest_logon , COUNT(date_of_latest_logon) FROM Students WHERE family_name = \"Jaskolski\" OR family_name = \"Langosh\"  ORDER BY COUNT(date_of_latest_logon) DESC BIN date_of_latest_logon BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "Create a bar chart showing the total number across bedtype", "db_id": "inn_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT bedType , count(*) FROM Rooms GROUP BY bedType", "binning": ""}, "VQL": "Visualize BAR SELECT bedType , count(*) FROM Rooms GROUP BY bedType"}, "hardness": "Easy"}, {"nl_queries": "List the name of all playlist, and count them by a bar chart, and sort in desc by the X.", "db_id": "store_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY name DESC"}, "hardness": "Medium"}, {"nl_queries": "What is the average song rating for each language Plot them as bar chart, order by the mean rating in ascending please.", "db_id": "music_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY avg(rating) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY avg(rating) ASC"}, "hardness": "Medium"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, find hire_date and the sum of salary bin hire_date by weekday, and visualize them by a bar chart, and sort total number in descending order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(SALARY) DESC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "How many drama workshop groups are there in each city? Return both the city and the count. Plot them as bar chart.", "db_id": "cre_Drama_Workshop_Groups", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT City_Town , count(*) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID = T2.Address_ID GROUP BY T1.City_Town", "binning": ""}, "VQL": "Visualize BAR SELECT City_Town , count(*) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID = T2.Address_ID GROUP BY T1.City_Town"}, "hardness": "Medium"}, {"nl_queries": "For those employees who did not have any job in the past, give me the comparison about the amount of job_id over the job_id , and group by attribute job_id by a bar chart, and could you rank X-axis in desc order?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , COUNT(JOB_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY JOB_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY JOB_ID DESC"}, "hardness": "Hard"}, {"nl_queries": "A bar chart about what is the age and hometown of every teacher?, and I want to list in asc by the Age.", "db_id": "course_teach", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Hometown , Age FROM teacher ORDER BY Age ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Age ASC"}, "hardness": "Easy"}, {"nl_queries": "Show me the trend about the average of Shop_ID over Start_from , and group by attribute Is_full_time and bin start_from by time with a line chart, and sort x-axis in descending order.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Start_from , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC", "binning": "BIN Start_from BY YEAR"}, "VQL": "Visualize LINE SELECT Start_from , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR"}, "hardness": "Extra Hard"}, {"nl_queries": "Show the relation between acc percent and all_games_percent for each ACC_Regular_Season using a scatter chart", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT ACC_Percent , All_Games_Percent FROM basketball_match GROUP BY ACC_Regular_Season", "binning": ""}, "VQL": "Visualize SCATTER SELECT ACC_Percent , All_Games_Percent FROM basketball_match GROUP BY ACC_Regular_Season"}, "hardness": "Easy"}, {"nl_queries": "Give me a bar chart for the average of team id of each acc road, and rank ACC_Road from high to low order.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Road , AVG(Team_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road DESC", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Road , AVG(Team_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road DESC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, for  manager_id,  hire_date, visualize the trend.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)"}, "hardness": "Extra Hard"}, {"nl_queries": "What are the distinct visit dates, and count them by a bar chart", "db_id": "cre_Theme_park", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Visit_Date , COUNT(Visit_Date) FROM VISITS", "binning": "BIN Visit_Date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Visit_Date , COUNT(Visit_Date) FROM VISITS BIN Visit_Date BY WEEKDAY"}, "hardness": "Easy"}, {"nl_queries": "Find  date_address_from and the amount of date_address_from bin date_address_from by weekday, and visualize them by a bar chart.", "db_id": "behavior_monitoring", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses  ORDER BY monthly_rental DESC", "binning": "BIN date_address_from BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "What are the different software platforms for devices, and how many devices have each. ", "db_id": "device", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Software_Platform , COUNT(*) FROM device GROUP BY Software_Platform", "binning": ""}, "VQL": "Visualize BAR SELECT Software_Platform , COUNT(*) FROM device GROUP BY Software_Platform"}, "hardness": "Easy"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, visualize a bar chart about the distribution of  hire_date and the sum of salary bin hire_date by weekday.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "What is the number of singers for each country? Show a bar chart, and list from low to high by the y-axis.", "db_id": "concert_singer", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY COUNT(Country) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY COUNT(Country) ASC"}, "hardness": "Medium"}, {"nl_queries": "How many movie reviews does each director get Show bar chart, sort y-axis in desc order please.", "db_id": "movie_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT director , count(*) FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID GROUP BY T1.director ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT director , count(*) FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID GROUP BY T1.director ORDER BY count(*) DESC"}, "hardness": "Hard"}, {"nl_queries": "Find the number of students in each department with a bar chart.", "db_id": "college_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT dept_name , COUNT(dept_name) FROM student GROUP BY dept_name ORDER BY tot_cred", "binning": ""}, "VQL": "Visualize BAR SELECT dept_name , COUNT(dept_name) FROM student GROUP BY dept_name ORDER BY tot_cred"}, "hardness": "Medium"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, give me the comparison about the amount of job_id over the  job_id , and group by attribute job_id.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , COUNT(JOB_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID"}, "hardness": "Hard"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, give me the comparison about commission_pct over the phone_number , sort in desc by the Y-axis.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT PHONE_NUMBER , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC", "binning": ""}, "VQL": "Visualize BAR SELECT PHONE_NUMBER , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who did not have any job in the past, show me about the distribution of  hire_date and the sum of manager_id bin hire_date by time in a bar chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH"}, "hardness": "Medium"}, {"nl_queries": "For those employees who was hired before 2002-06-21, visualize a bar chart about the distribution of job_id and the average of manager_id , and group by attribute job_id, and rank by the Y-axis from low to high.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(MANAGER_ID) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(MANAGER_ID) ASC"}, "hardness": "Hard"}, {"nl_queries": "A bar chart showing the number of members in each country, and rank by the names in desc.", "db_id": "decoration_competition", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Country , COUNT(Country) FROM member GROUP BY Country ORDER BY Country DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM member GROUP BY Country ORDER BY Country DESC"}, "hardness": "Medium"}, {"nl_queries": "A bar chart shows the distribution of  All_Games and  Team_ID .", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Games , Team_ID FROM basketball_match", "binning": ""}, "VQL": "Visualize BAR SELECT All_Games , Team_ID FROM basketball_match"}, "hardness": "Easy"}, {"nl_queries": "Give me a bar chart for charge_amount of each charge type, could you list by the bars from high to low?", "db_id": "dog_kennels", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT charge_type , charge_amount FROM Charges ORDER BY charge_type DESC", "binning": ""}, "VQL": "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_type DESC"}, "hardness": "Easy"}, {"nl_queries": "Display a bar chart for what is the total revenue of companies started by founder?, and rank by the Y-axis in desc.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Founder , sum(revenue) FROM manufacturers GROUP BY founder ORDER BY sum(revenue) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Founder , sum(revenue) FROM manufacturers GROUP BY founder ORDER BY sum(revenue) DESC"}, "hardness": "Medium"}, {"nl_queries": "What is the number of professors for different school Plot them as bar chart, and show by the names from high to low.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE DESC", "binning": ""}, "VQL": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE DESC"}, "hardness": "Hard"}, {"nl_queries": "Return a histogram on how many professors have a PhD in each department?, and I want to rank by the X-axis in asc.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT DEPT_CODE , count(*) FROM professor WHERE prof_high_degree = 'Ph.D.' GROUP BY dept_code ORDER BY DEPT_CODE ASC", "binning": ""}, "VQL": "Visualize BAR SELECT DEPT_CODE , count(*) FROM professor WHERE prof_high_degree = 'Ph.D.' GROUP BY dept_code ORDER BY DEPT_CODE ASC"}, "hardness": "Hard"}, {"nl_queries": "List the snatch score and clean jerk score of body builders in ascending order of snatch score in a scatter chart", "db_id": "body_builder", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Snatch , Clean_Jerk FROM body_builder", "binning": ""}, "VQL": "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder"}, "hardness": "Easy"}, {"nl_queries": "List the distinct payment method codes with the number of orders mad in a bar chart, list in asc by the y axis.", "db_id": "cre_Drama_Workshop_Groups", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "Visualize a pie chart to show the credit scores of customers who have taken a loan by different names.", "db_id": "loan_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT cust_name , credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id", "binning": ""}, "VQL": "Visualize PIE SELECT cust_name , credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id"}, "hardness": "Easy"}, {"nl_queries": "Find the number of members living in each address Show bar chart, I want to show by the total number in asc.", "db_id": "coffee_shop", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Address , count(*) FROM member GROUP BY address ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Address , count(*) FROM member GROUP BY address ORDER BY count(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "Visualize a pie chart with how many gymnasts are from each hometown?", "db_id": "gymnast", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Hometown , COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown", "binning": ""}, "VQL": "Visualize PIE SELECT Hometown , COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown"}, "hardness": "Medium"}, {"nl_queries": "For those days with the 3 largest maximum gust speeds, can you plot a bar chart to compare the total mean temperature of each day of the weeks?", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date , SUM(mean_temperature_f) FROM weather  ORDER BY max_gust_speed_mph DESC LIMIT 3", "binning": "BIN date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date , SUM(mean_temperature_f) FROM weather  ORDER BY max_gust_speed_mph DESC LIMIT 3 BIN date BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "Give me the number of the descriptions of the service types that cost more than 100, and could you display in asc by the y-axis please?", "db_id": "cre_Drama_Workshop_Groups", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Service_Type_Description , COUNT(Service_Type_Description) FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code WHERE T2.Product_Price > 100 GROUP BY Service_Type_Description ORDER BY COUNT(Service_Type_Description) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Service_Type_Description , COUNT(Service_Type_Description) FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code WHERE T2.Product_Price > 100 GROUP BY Service_Type_Description ORDER BY COUNT(Service_Type_Description) ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "Show all allergies with number of students affected with a bar chart, sort bars in desc order.", "db_id": "allergy_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY Allergy DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY Allergy DESC"}, "hardness": "Medium"}, {"nl_queries": "Visualize a bar chart about the distribution of  Days and the average of Instructor , and group by attribute Days.", "db_id": "college_3", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Days , AVG(Instructor) FROM COURSE GROUP BY Days ORDER BY Credits", "binning": ""}, "VQL": "Visualize BAR SELECT Days , AVG(Instructor) FROM COURSE GROUP BY Days ORDER BY Credits"}, "hardness": "Medium"}, {"nl_queries": "What is the date of enrollment of the course named \"Spanish\", and count them by a bar chart", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\"", "binning": "BIN date_of_enrolment BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\" BIN date_of_enrolment BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "For each citizenship, what is the maximum net worth Visualize by bar chart, sort in asc by the bar.", "db_id": "singer", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY Citizenship ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY Citizenship ASC"}, "hardness": "Easy"}, {"nl_queries": "What are the names of all products, and count them by a bar chart", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM Products GROUP BY Name", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name"}, "hardness": "Easy"}, {"nl_queries": "Find the number of booking start date for the apartments that have more than two bedrooms for each year with a bar chart.", "db_id": "apartment_rentals", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.bedroom_count > 2", "binning": "BIN booking_start_date BY YEAR"}, "VQL": "Visualize BAR SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.bedroom_count > 2 BIN booking_start_date BY YEAR"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, draw a scatter chart about the correlation between  manufacturer and  revenue , and group by attribute founder.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Manufacturer , Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder", "binning": ""}, "VQL": "Visualize SCATTER SELECT Manufacturer , Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder"}, "hardness": "Medium"}, {"nl_queries": "what are the names of the teachers and how many courses do they teach?, and show in asc by the bar please.", "db_id": "course_teach", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name ORDER BY Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name ORDER BY Name ASC"}, "hardness": "Hard"}, {"nl_queries": "Return me a line chart to show the frequency of the year attribute by binning into a weekday interval.", "db_id": "baseball_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT year , COUNT(year) FROM home_game", "binning": "BIN year BY YEAR"}, "VQL": "Visualize LINE SELECT year , COUNT(year) FROM home_game BIN year BY YEAR"}, "hardness": "Easy"}, {"nl_queries": "Visualize a bar chart about the distribution of Sex and the average of Height , and group by attribute Sex, order x-axis from high to low order please.", "db_id": "candidate_poll", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Sex , AVG(Height) FROM people GROUP BY Sex ORDER BY Sex DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Sex , AVG(Height) FROM people GROUP BY Sex ORDER BY Sex DESC"}, "hardness": "Medium"}, {"nl_queries": "What are the different nationalities of pilots? Show each nationality and the number of pilots of each nationality Show bar chart, and sort total number in desc order.", "db_id": "pilot_record", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality ORDER BY COUNT(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality ORDER BY COUNT(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "What is the average of number_of_platforms for each location? Show the comparison with a bar chart, I want to order X-axis from high to low order please.", "db_id": "train_station", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Location , AVG(Number_of_Platforms) FROM station GROUP BY Location ORDER BY Location DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Location , AVG(Number_of_Platforms) FROM station GROUP BY Location ORDER BY Location DESC"}, "hardness": "Medium"}, {"nl_queries": "Find  Time and  ID , and visualize them by a bar chart.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Time , ID FROM swimmer", "binning": ""}, "VQL": "Visualize BAR SELECT Time , ID FROM swimmer"}, "hardness": "Easy"}, {"nl_queries": "Return a bar chart on what are the names of the different bank branches, and what are their total loan amounts?, I want to list in descending by the sum amount.", "db_id": "loan_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT bname , sum(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname ORDER BY sum(amount) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT bname , sum(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname ORDER BY sum(amount) DESC"}, "hardness": "Hard"}, {"nl_queries": "What is the state and enrollment of the colleges where have any students who got accepted in the tryout decision. Plot them as bar chart.", "db_id": "soccer_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT state , enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.decision = 'yes'", "binning": ""}, "VQL": "Visualize BAR SELECT state , enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.decision = 'yes'"}, "hardness": "Medium"}, {"nl_queries": "What is the highest price of product, grouped by product type? Show a bar chart, and display by the names in desc.", "db_id": "department_store", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code ORDER BY product_type_code DESC", "binning": ""}, "VQL": "Visualize BAR SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code ORDER BY product_type_code DESC"}, "hardness": "Easy"}, {"nl_queries": "Draw a bar chart about the distribution of  dept_name and the average of salary , and group by attribute dept_name.", "db_id": "college_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY salary", "binning": ""}, "VQL": "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY salary"}, "hardness": "Medium"}, {"nl_queries": "A bar chart for returning the number of the lot details of lots that belong to investors with details \"l\"?, display by the X in asc.", "db_id": "tracking_share_transactions", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT lot_details , COUNT(lot_details) FROM INVESTORS AS T1 JOIN LOTS AS T2 ON T1.investor_id = T2.investor_id WHERE T1.Investor_details = \"l\" GROUP BY lot_details ORDER BY lot_details ASC", "binning": ""}, "VQL": "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM INVESTORS AS T1 JOIN LOTS AS T2 ON T1.investor_id = T2.investor_id WHERE T1.Investor_details = \"l\" GROUP BY lot_details ORDER BY lot_details ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "What is the average age of captains in different classes?", "db_id": "ship_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Class , avg(age) FROM captain GROUP BY CLASS", "binning": ""}, "VQL": "Visualize BAR SELECT Class , avg(age) FROM captain GROUP BY CLASS"}, "hardness": "Easy"}, {"nl_queries": "For those employees who did not have any job in the past, return a bar chart about the distribution of  hire_date and the sum of department_id bin hire_date by time.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH"}, "hardness": "Medium"}, {"nl_queries": "Show me a bar chart for what is the total rating of channel for each channel owner?", "db_id": "program_share", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Owner , sum(Rating_in_percent) FROM channel GROUP BY OWNER", "binning": ""}, "VQL": "Visualize BAR SELECT Owner , sum(Rating_in_percent) FROM channel GROUP BY OWNER"}, "hardness": "Easy"}, {"nl_queries": "For those employees who did not have any job in the past, give me the trend about  employee_id over  hire_date .", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)"}, "hardness": "Easy"}, {"nl_queries": "Show me about the distribution of Team_Name and School_ID in a bar chart, and display in desc by the Y-axis.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID DESC"}, "hardness": "Easy"}, {"nl_queries": "Visualize a bar chart for what are the average ages for male and female students?, display x axis in asc order please.", "db_id": "allergy_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Sex , avg(age) FROM Student GROUP BY sex ORDER BY Sex ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Sex , avg(age) FROM Student GROUP BY sex ORDER BY Sex ASC"}, "hardness": "Medium"}, {"nl_queries": "For those payments processed with Visa, bin the payment day into the Day of week interval and count them for a bar chart.", "db_id": "insurance_policies", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'", "binning": "BIN Date_Payment_Made BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, a bar chart shows the distribution of name and the average of revenue , and group by attribute name, and I want to display from high to low by the y-axis.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T2.Revenue DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T2.Revenue DESC"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about the average of code over the name , and group by attribute name, I want to show by the y-axis in descending please.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC"}, "hardness": "Hard"}, {"nl_queries": "Draw a bar chart for what are the hometowns of gymnasts and the corresponding number of gymnasts?, could you show in asc by the X?", "db_id": "gymnast", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Hometown , COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown ORDER BY Hometown ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Hometown , COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown ORDER BY Hometown ASC"}, "hardness": "Hard"}, {"nl_queries": "What are the ids and names of the medicine that can interact with two or more enzymes Visualize by bar chart, could you order id from low to high order?", "db_id": "medicine_enzyme_interaction", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , id FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id ORDER BY id ASC", "binning": ""}, "VQL": "Visualize BAR SELECT name , id FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id ORDER BY id ASC"}, "hardness": "Medium"}, {"nl_queries": "Scatter plot to show snatch on x axis and clean_jerk on y axis.", "db_id": "body_builder", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Snatch , Clean_Jerk FROM body_builder", "binning": ""}, "VQL": "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder"}, "hardness": "Easy"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, give me the comparison about manager_id over the first_name , order from low to high by the X.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT FIRST_NAME , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY FIRST_NAME ASC", "binning": ""}, "VQL": "Visualize BAR SELECT FIRST_NAME , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY FIRST_NAME ASC"}, "hardness": "Medium"}, {"nl_queries": "What are the names, and revenues for manufacturers, sorted by revenue descending in a bar graph?", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , Revenue FROM manufacturers ORDER BY revenue DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , Revenue FROM manufacturers ORDER BY revenue DESC"}, "hardness": "Easy"}, {"nl_queries": "A line chart for what are the number of the enrollment dates of all the tests that have result \"Pass\"?", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = \"Pass\" GROUP BY date_of_enrolment", "binning": ""}, "VQL": "Visualize LINE SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = \"Pass\" GROUP BY date_of_enrolment"}, "hardness": "Hard"}, {"nl_queries": "Return the date of birth for all the guests with gender code \"Male\", and count them by a line chart, and display from high to low by the X.", "db_id": "apartment_rentals", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY date_of_birth DESC", "binning": "BIN date_of_birth BY YEAR"}, "VQL": "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY date_of_birth DESC BIN date_of_birth BY YEAR"}, "hardness": "Hard"}, {"nl_queries": "Show all distinct product categories along with the number of mailshots in each category Visualize by bar chart, and could you sort in ascending by the x-axis please?", "db_id": "customers_campaigns_ecommerce", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT product_category , count(*) FROM mailshot_campaigns GROUP BY product_category ORDER BY product_category ASC", "binning": ""}, "VQL": "Visualize BAR SELECT product_category , count(*) FROM mailshot_campaigns GROUP BY product_category ORDER BY product_category ASC"}, "hardness": "Medium"}, {"nl_queries": "A stacked bar chart showing the number of faults for different fault short name and skills required to fix them The x-axis is skill description and group by fault short name, rank in asc by the bar.", "db_id": "assets_maintenance", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT skill_description , COUNT(skill_description) FROM Part_Faults AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.part_fault_id = T2.part_fault_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY fault_short_name ,  skill_description ORDER BY skill_description ASC", "binning": ""}, "VQL": "Visualize BAR SELECT skill_description , COUNT(skill_description) FROM Part_Faults AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.part_fault_id = T2.part_fault_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY fault_short_name ,  skill_description ORDER BY skill_description ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "Compare the total number of competitions for each country, rank Country in ascending order.", "db_id": "sports_competition", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Country , COUNT(Country) FROM competition GROUP BY Country ORDER BY Country ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Country ORDER BY Country ASC"}, "hardness": "Medium"}, {"nl_queries": "Find the name and capacity of products with price greater than 700 (in USD). Show bar chart.", "db_id": "product_catalog", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700", "binning": ""}, "VQL": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700"}, "hardness": "Easy"}, {"nl_queries": "Give me a bar chart that groups and count the job id for all employees in the Finance department, and rank by the y-axis in descending.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID ORDER BY COUNT(JOB_ID) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID ORDER BY COUNT(JOB_ID) DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "What are the first names and support rep ids for employees serving 10 or more customers, and could you show by the X in ascending please?", "db_id": "chinook_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.FirstName ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.FirstName ASC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, a scatter chart shows the correlation between  code and  code , and group by attribute headquarter.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT T1.Code , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter", "binning": ""}, "VQL": "Visualize SCATTER SELECT T1.Code , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter"}, "hardness": "Medium"}, {"nl_queries": "What is the average age for each pet type? Show me a histogram, and could you sort by the Y-axis in desc?", "db_id": "pets_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT PetType , avg(pet_age) FROM pets GROUP BY pettype ORDER BY avg(pet_age) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT PetType , avg(pet_age) FROM pets GROUP BY pettype ORDER BY avg(pet_age) DESC"}, "hardness": "Medium"}, {"nl_queries": "What is the maximum age for each pet type? Please show me a bar chart, order PetType in descending order please.", "db_id": "pets_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT PetType , max(pet_age) FROM pets GROUP BY PetType ORDER BY PetType DESC", "binning": ""}, "VQL": "Visualize BAR SELECT PetType , max(pet_age) FROM pets GROUP BY PetType ORDER BY PetType DESC"}, "hardness": "Easy"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, return a bar chart about the distribution of last_name and employee_id , display LAST_NAME from high to low order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT LAST_NAME , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY LAST_NAME DESC", "binning": ""}, "VQL": "Visualize BAR SELECT LAST_NAME , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY LAST_NAME DESC"}, "hardness": "Medium"}, {"nl_queries": "Show last names for all student who are on scholarship, and count them by a bar chart, could you order X-axis from high to low order?", "db_id": "game_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT LName , COUNT(LName) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T1.onscholarship = 'Y' GROUP BY LName ORDER BY LName DESC", "binning": ""}, "VQL": "Visualize BAR SELECT LName , COUNT(LName) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T1.onscholarship = 'Y' GROUP BY LName ORDER BY LName DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "Compare the frequency of product names using a bar chart, and display in desc by the X-axis.", "db_id": "customers_and_products_contacts", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY product_name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY product_name DESC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, a line chart shows the change of employee_id over hire_date, and could you order x-axis in descending order?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE DESC", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE DESC"}, "hardness": "Medium"}, {"nl_queries": "Show the trend about the number of attendance at home games change over the years, bin year into year interval, I want to show in desc by the X.", "db_id": "baseball_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT year , SUM(attendance) FROM home_game ORDER BY year DESC", "binning": "BIN year BY YEAR"}, "VQL": "Visualize LINE SELECT year , SUM(attendance) FROM home_game ORDER BY year DESC BIN year BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "Return the number of music festivals of each category. Show a pie chart.", "db_id": "music_4", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Category , COUNT(*) FROM music_festival GROUP BY Category", "binning": ""}, "VQL": "Visualize PIE SELECT Category , COUNT(*) FROM music_festival GROUP BY Category"}, "hardness": "Easy"}, {"nl_queries": "Visualize a bar chart, the x-axis is the arrival time, and the y-axis is the total number of trains in each arrival time.", "db_id": "railway", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Arrival , COUNT(Arrival) FROM train GROUP BY Arrival", "binning": ""}, "VQL": "Visualize BAR SELECT Arrival , COUNT(Arrival) FROM train GROUP BY Arrival"}, "hardness": "Easy"}, {"nl_queries": "Plot the total number by grouped by country as a bar graph, and could you sort by the Country from low to high please?", "db_id": "decoration_competition", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Country , COUNT(*) FROM member GROUP BY Country ORDER BY Country ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Country , COUNT(*) FROM member GROUP BY Country ORDER BY Country ASC"}, "hardness": "Medium"}, {"nl_queries": "What are the names and distances for all airplanes Visualize by bar chart, could you rank from high to low by the y-axis?", "db_id": "flight_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , distance FROM Aircraft ORDER BY distance DESC", "binning": ""}, "VQL": "Visualize BAR SELECT name , distance FROM Aircraft ORDER BY distance DESC"}, "hardness": "Easy"}, {"nl_queries": "How many residents does each property have? List property id and resident count with a scatter chart.", "db_id": "local_govt_and_lot", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT T1.property_id , count(*) FROM properties AS T1 JOIN residents AS T2 ON T1.property_id = T2.property_id GROUP BY T1.property_id", "binning": ""}, "VQL": "Visualize SCATTER SELECT T1.property_id , count(*) FROM properties AS T1 JOIN residents AS T2 ON T1.property_id = T2.property_id GROUP BY T1.property_id"}, "hardness": "Medium"}, {"nl_queries": "What are the names and ids of all countries with at least one car maker Show bar chart, rank from high to low by the y-axis.", "db_id": "car_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT CountryName , CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country ORDER BY CountryId DESC", "binning": ""}, "VQL": "Visualize BAR SELECT CountryName , CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country ORDER BY CountryId DESC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who did not have any job in the past, return a bar chart about the distribution of  job_id and the average of salary , and group by attribute job_id.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID"}, "hardness": "Medium"}, {"nl_queries": "Stacked bar chart of the number of country for with each Competition_type in each country, order bar in desc order.", "db_id": "sports_competition", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Country , COUNT(Country) FROM competition GROUP BY Competition_type ,  Country ORDER BY Country DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Competition_type ,  Country ORDER BY Country DESC"}, "hardness": "Hard"}, {"nl_queries": "For all employees who have the letters D or S in their first name, visualize a bar chart about the distribution of job_id and the amount of job_id , and group by attribute job_id, list in descending by the Y-axis.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , COUNT(JOB_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY COUNT(JOB_ID) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY COUNT(JOB_ID) DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "Create a bar chart showing the total number across location, order in descending by the x axis.", "db_id": "cinema", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Location , count(*) FROM cinema GROUP BY LOCATION ORDER BY Location DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Location , count(*) FROM cinema GROUP BY LOCATION ORDER BY Location DESC"}, "hardness": "Medium"}, {"nl_queries": "What are the ids and names of all start stations that were the beginning of at least 200 trips Show bar chart, list by the X-axis in descending.", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT start_station_name , start_station_id FROM trip ORDER BY start_station_name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT start_station_name , start_station_id FROM trip ORDER BY start_station_name DESC"}, "hardness": "Easy"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, return a bar chart about the distribution of last_name and commission_pct , show by the Y from low to high.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT LAST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT ASC", "binning": ""}, "VQL": "Visualize BAR SELECT LAST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT ASC"}, "hardness": "Medium"}, {"nl_queries": "Give me the comparison about meter_100 over the meter_600 , and could you order y axis in asc order please?", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_600 , meter_100 FROM swimmer ORDER BY meter_100 ASC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_600 , meter_100 FROM swimmer ORDER BY meter_100 ASC"}, "hardness": "Easy"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, a bar chart shows the distribution of  phone_number and  manager_id .", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT PHONE_NUMBER , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)", "binning": ""}, "VQL": "Visualize BAR SELECT PHONE_NUMBER , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)"}, "hardness": "Extra Hard"}, {"nl_queries": "For all employees who have the letters D or S in their first name, for salary, hire_date, visualize the trend, and order in asc by the x axis.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , SALARY FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY HIRE_DATE ASC", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY HIRE_DATE ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "Visualize names and market shares of furnitures which no any company is producing in our records by a bar chart, order by the y-axis in asc.", "db_id": "manufacturer", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , Market_Rate FROM furniture WHERE Furniture_ID NOT IN (SELECT Furniture_ID FROM furniture_manufacte) ORDER BY Market_Rate ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , Market_Rate FROM furniture WHERE Furniture_ID NOT IN (SELECT Furniture_ID FROM furniture_manufacte) ORDER BY Market_Rate ASC"}, "hardness": "Medium"}, {"nl_queries": "Find the number of courses offered by Psychology department in each year with a line chart, could you sort by the year in asc?", "db_id": "college_2", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT year , COUNT(year) FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' GROUP BY year ORDER BY year ASC", "binning": ""}, "VQL": "Visualize LINE SELECT year , COUNT(year) FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' GROUP BY year ORDER BY year ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, return a bar chart about the distribution of  name and the average of price , and group by attribute name.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name"}, "hardness": "Medium"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, draw a line chart about the change of department_id over hire_date , and order x axis in asc order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC"}, "hardness": "Medium"}, {"nl_queries": "How many students are advised by each rank of faculty? List the rank and the number of students Plot them as bar chart, and display by the Y in desc.", "db_id": "activity_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Rank , count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.rank ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Rank , count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.rank ORDER BY count(*) DESC"}, "hardness": "Hard"}, {"nl_queries": "Show all artist names and the number of exhibitions for each artist Show bar chart, show X from high to low order.", "db_id": "theme_gallery", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , count(*) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id GROUP BY T1.artist_id ORDER BY Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , count(*) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id GROUP BY T1.artist_id ORDER BY Name DESC"}, "hardness": "Hard"}, {"nl_queries": "How many invoices were billed from each state. Plot them as bar chart.", "db_id": "store_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state", "binning": ""}, "VQL": "Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state"}, "hardness": "Medium"}, {"nl_queries": "A pie chart showing the minimum weight for each gender.", "db_id": "candidate_poll", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Sex , min(weight) FROM people GROUP BY Sex", "binning": ""}, "VQL": "Visualize PIE SELECT Sex , min(weight) FROM people GROUP BY Sex"}, "hardness": "Easy"}, {"nl_queries": "For those employees who did not have any job in the past, return a bar chart about the distribution of hire_date and the amount of hire_date bin hire_date by time, and rank by the Y-axis in ascending please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY COUNT(HIRE_DATE) ASC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "Display a line chart for what is the average prices of wines for each each?", "db_id": "wine_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Year , avg(Price) FROM WINE GROUP BY YEAR", "binning": ""}, "VQL": "Visualize LINE SELECT Year , avg(Price) FROM WINE GROUP BY YEAR"}, "hardness": "Easy"}, {"nl_queries": "For those records from the products and each product's manufacturer, find  founder and the average of price , and group by attribute founder, and visualize them by a bar chart.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Founder , AVG(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder", "binning": ""}, "VQL": "Visualize BAR SELECT Founder , AVG(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder"}, "hardness": "Medium"}, {"nl_queries": "Give me a bar chart to show the names and revenue of the company that earns the highest revenue in each headquarter city, could you display Name in descending order?", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , max(revenue) FROM manufacturers GROUP BY Headquarter ORDER BY Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , max(revenue) FROM manufacturers GROUP BY Headquarter ORDER BY Name DESC"}, "hardness": "Medium"}, {"nl_queries": "Visualize a bar chart about the distribution of  ACC_Regular_Season and  Team_ID .", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Regular_Season , Team_ID FROM basketball_match", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match"}, "hardness": "Easy"}, {"nl_queries": "How many faculty members does each building have? List the result with the name of the building with a bar chart, show from high to low by the x-axis.", "db_id": "activity_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Building , count(*) FROM Faculty GROUP BY building ORDER BY Building DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Building , count(*) FROM Faculty GROUP BY building ORDER BY Building DESC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, give me the comparison about manager_id over the last_name by a bar chart, and could you order in descending by the X?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT LAST_NAME , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY LAST_NAME DESC", "binning": ""}, "VQL": "Visualize BAR SELECT LAST_NAME , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY LAST_NAME DESC"}, "hardness": "Medium"}, {"nl_queries": "Draw a bar chart of open date versus the number of open date, show in ascending by the y axis.", "db_id": "wedding", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Open_Date , COUNT(Open_Date) FROM church  ORDER BY COUNT(Open_Date) ASC", "binning": "BIN Open_Date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Open_Date , COUNT(Open_Date) FROM church  ORDER BY COUNT(Open_Date) ASC BIN Open_Date BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "How many documents for different location code? Plot a bar chart to show the proportion, and show Y in desc order.", "db_id": "cre_Doc_Tracking_DB", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Location_Code , COUNT(Location_Code) FROM Document_locations GROUP BY Location_Code ORDER BY COUNT(Location_Code) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Location_Code , COUNT(Location_Code) FROM Document_locations GROUP BY Location_Code ORDER BY COUNT(Location_Code) DESC"}, "hardness": "Medium"}, {"nl_queries": "Give me the comparison about the amount of Is_full_time over the Is_full_time , and group by attribute Is_full_time by a bar chart, list by the x-axis in asc.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, return a bar chart about the distribution of last_name and employee_id , could you display in desc by the EMPLOYEE_ID?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT LAST_NAME , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY EMPLOYEE_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT LAST_NAME , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY EMPLOYEE_ID DESC"}, "hardness": "Medium"}, {"nl_queries": "I want to see trend of the number of yearid by yearid, and display from low to high by the X-axis.", "db_id": "baseball_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT yearid , COUNT(yearid) FROM hall_of_fame  ORDER BY yearid ASC", "binning": "BIN yearid BY YEAR"}, "VQL": "Visualize LINE SELECT yearid , COUNT(yearid) FROM hall_of_fame  ORDER BY yearid ASC BIN yearid BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "How many faculty members does each building have? List the result with the name of the building with a bar chart.", "db_id": "activity_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Building , count(*) FROM Faculty GROUP BY building", "binning": ""}, "VQL": "Visualize BAR SELECT Building , count(*) FROM Faculty GROUP BY building"}, "hardness": "Easy"}, {"nl_queries": "What are the id of each employee and the number of document destruction authorised by that employee. Visualize by scatter chart.", "db_id": "cre_Doc_Tracking_DB", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Destruction_Authorised_by_Employee_ID , count(*) FROM Documents_to_be_destroyed GROUP BY Destruction_Authorised_by_Employee_ID", "binning": ""}, "VQL": "Visualize SCATTER SELECT Destruction_Authorised_by_Employee_ID , count(*) FROM Documents_to_be_destroyed GROUP BY Destruction_Authorised_by_Employee_ID"}, "hardness": "Easy"}, {"nl_queries": "For each manufacturer's name, what are the prices of their most expensive product?, show by the Name in descending.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , max(T1.Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , max(T1.Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY Name DESC"}, "hardness": "Medium"}, {"nl_queries": "Visualize a scatter chart about the correlation between  Team_ID and  School_ID , and group by attribute All_Road.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Team_ID , School_ID FROM basketball_match GROUP BY All_Road", "binning": ""}, "VQL": "Visualize SCATTER SELECT Team_ID , School_ID FROM basketball_match GROUP BY All_Road"}, "hardness": "Easy"}, {"nl_queries": "For each room, find its name and the number of times reservations were made for it, you can use the data to draw a bar chart, display from low to high by the total number.", "db_id": "inn_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT roomName , count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT roomName , count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room ORDER BY count(*) ASC"}, "hardness": "Hard"}, {"nl_queries": "Visualize the relationship between  ACC_Percent and  All_Games_Percent , and group by attribute ACC_Road.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT ACC_Percent , All_Games_Percent FROM basketball_match GROUP BY ACC_Road", "binning": ""}, "VQL": "Visualize SCATTER SELECT ACC_Percent , All_Games_Percent FROM basketball_match GROUP BY ACC_Road"}, "hardness": "Easy"}, {"nl_queries": "Show me about the distribution of Sex and the amount of Sex , and group by attribute Sex in a bar chart, list by the bars in ascending.", "db_id": "candidate_poll", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY Sex ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY Sex ASC"}, "hardness": "Medium"}, {"nl_queries": "Give me the comparison about the sum of Weight over the Sex , and group by attribute Sex by a bar chart, display by the Y-axis from low to high.", "db_id": "candidate_poll", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Sex , SUM(Weight) FROM people GROUP BY Sex ORDER BY SUM(Weight) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Sex , SUM(Weight) FROM people GROUP BY Sex ORDER BY SUM(Weight) ASC"}, "hardness": "Medium"}, {"nl_queries": "List the number of enginners and group by first name in a bar chart, display by the bar in descending please.", "db_id": "assets_maintenance", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT first_name , COUNT(first_name) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY first_name ORDER BY first_name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT first_name , COUNT(first_name) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY first_name ORDER BY first_name DESC"}, "hardness": "Hard"}, {"nl_queries": "Draw a bar chart about the distribution of Time and meter_100 , I want to display in asc by the y axis please.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Time , meter_100 FROM swimmer ORDER BY meter_100 ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Time , meter_100 FROM swimmer ORDER BY meter_100 ASC"}, "hardness": "Easy"}, {"nl_queries": "Visualize a bar chart about the distribution of  Start_from and the amount of Start_from bin start_from by weekday.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Start_from , COUNT(Start_from) FROM hiring", "binning": "BIN Start_from BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Start_from , COUNT(Start_from) FROM hiring BIN Start_from BY WEEKDAY"}, "hardness": "Easy"}, {"nl_queries": "Find the number of rooms for each bed type Visualize by bar chart, and I want to show in descending by the y axis.", "db_id": "inn_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT bedType , count(*) FROM Rooms GROUP BY bedType ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT bedType , count(*) FROM Rooms GROUP BY bedType ORDER BY count(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "How many courses each teacher taught? Show me a bar chart grouping by course code, sort in ascending by the Y.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT CRS_CODE , COUNT(CRS_CODE) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY CRS_CODE ORDER BY COUNT(CRS_CODE) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT CRS_CODE , COUNT(CRS_CODE) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY CRS_CODE ORDER BY COUNT(CRS_CODE) ASC"}, "hardness": "Hard"}, {"nl_queries": "A pie chart for what are the number of the purchase details of transactions with amount bigger than 10000?", "db_id": "tracking_share_transactions", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT purchase_details , COUNT(purchase_details) FROM PURCHASES AS T1 JOIN TRANSACTIONS AS T2 ON T1.purchase_transaction_id = T2.transaction_id WHERE T2.amount_of_transaction > 10000 GROUP BY purchase_details", "binning": ""}, "VQL": "Visualize PIE SELECT purchase_details , COUNT(purchase_details) FROM PURCHASES AS T1 JOIN TRANSACTIONS AS T2 ON T1.purchase_transaction_id = T2.transaction_id WHERE T2.amount_of_transaction > 10000 GROUP BY purchase_details"}, "hardness": "Hard"}, {"nl_queries": "Line chart, let hire data as X and salary as Y, and filter for employees without the letter M in their first name, display by the x axis in ascending.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , SALARY FROM employees WHERE first_name NOT LIKE '%M%' ORDER BY HIRE_DATE ASC", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE first_name NOT LIKE '%M%' ORDER BY HIRE_DATE ASC"}, "hardness": "Hard"}, {"nl_queries": "What are the ids and names of the medicine that can interact with two or more enzymes Visualize by bar chart, and order by the Y from high to low.", "db_id": "medicine_enzyme_interaction", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , id FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id ORDER BY id DESC", "binning": ""}, "VQL": "Visualize BAR SELECT name , id FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id ORDER BY id DESC"}, "hardness": "Medium"}, {"nl_queries": "What is the relationship between version number and template id for each template? Visualize by a scatter chart.", "db_id": "cre_Doc_Template_Mgt", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Template_ID , Version_Number FROM Templates GROUP BY Template_Type_Code", "binning": ""}, "VQL": "Visualize SCATTER SELECT Template_ID , Version_Number FROM Templates GROUP BY Template_Type_Code"}, "hardness": "Easy"}, {"nl_queries": "Count different addresses of each school Show bar chart, sort from high to low by the Y-axis.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department ORDER BY count(DISTINCT dept_address) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department ORDER BY count(DISTINCT dept_address) DESC"}, "hardness": "Medium"}, {"nl_queries": "Give me a bar chart for sum price of each name, and could you order in ascending by the x axis?", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , SUM(Price) FROM products GROUP BY Name ORDER BY Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , SUM(Price) FROM products GROUP BY Name ORDER BY Name ASC"}, "hardness": "Medium"}, {"nl_queries": "What are all the different product names, and how many complains has each received. Show the proportion.", "db_id": "customer_complaints", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT product_name , count(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id = t2.product_id GROUP BY t1.product_name", "binning": ""}, "VQL": "Visualize PIE SELECT product_name , count(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id = t2.product_id GROUP BY t1.product_name"}, "hardness": "Medium"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, return a bar chart about the distribution of email and employee_id , and I want to sort in desc by the X.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT EMAIL , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY EMAIL DESC", "binning": ""}, "VQL": "Visualize BAR SELECT EMAIL , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY EMAIL DESC"}, "hardness": "Medium"}, {"nl_queries": "A bar chart shows the distribution of  Nationality and the average of ID , and group by attribute Nationality.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nationality , AVG(ID) FROM swimmer GROUP BY Nationality", "binning": ""}, "VQL": "Visualize BAR SELECT Nationality , AVG(ID) FROM swimmer GROUP BY Nationality"}, "hardness": "Easy"}, {"nl_queries": "Draw a bar chart of name versus meter_100, show in descending by the names.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , meter_100 FROM swimmer ORDER BY name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT name , meter_100 FROM swimmer ORDER BY name DESC"}, "hardness": "Easy"}, {"nl_queries": "Give me a bar chart for how many grape of each grape, and I want to order by the bars in descending.", "db_id": "wine_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Grape , COUNT(Grape) FROM WINE GROUP BY Grape ORDER BY Grape DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Grape , COUNT(Grape) FROM WINE GROUP BY Grape ORDER BY Grape DESC"}, "hardness": "Medium"}, {"nl_queries": "Find the name of rooms booked by some customers whose first name contains ROY, and count them by a pie chart", "db_id": "inn_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT roomName , COUNT(roomName) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId WHERE firstname LIKE '%ROY%' GROUP BY roomName", "binning": ""}, "VQL": "Visualize PIE SELECT roomName , COUNT(roomName) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId WHERE firstname LIKE '%ROY%' GROUP BY roomName"}, "hardness": "Extra Hard"}, {"nl_queries": "How many books fall into each category, and rank y-axis in desc order.", "db_id": "culture_company", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY count(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "Compute the total total number of enrollment across affiliation as a pie chart.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation", "binning": ""}, "VQL": "Visualize PIE SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation"}, "hardness": "Easy"}, {"nl_queries": "Return a bar chart about the distribution of  Start_from and the sum of Employee_ID , and group by attribute Is_full_time and bin start_from by weekday.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time", "binning": "BIN Start_from BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time BIN Start_from BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "What are the dates in which the mean sea level pressure was between 303 and 31, and count them by a line chart, list from low to high by the date.", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date , COUNT(date) FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31 GROUP BY date ORDER BY date ASC", "binning": ""}, "VQL": "Visualize LINE SELECT date , COUNT(date) FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31 GROUP BY date ORDER BY date ASC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, a bar chart shows the distribution of  email and  salary .", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT EMAIL , SALARY FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)", "binning": ""}, "VQL": "Visualize BAR SELECT EMAIL , SALARY FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)"}, "hardness": "Extra Hard"}, {"nl_queries": "Find the dates on which more than one revisions were made, and the bin the date of latest revision into weekday interval and count them as a line chart, sort by the x axis from low to high.", "db_id": "product_catalog", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY date_of_latest_revision ASC", "binning": "BIN date_of_latest_revision BY MONTH"}, "VQL": "Visualize LINE SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY date_of_latest_revision ASC BIN date_of_latest_revision BY MONTH"}, "hardness": "Medium"}, {"nl_queries": "Return a histogram on how old is each gender, on average?, rank from high to low by the gender.", "db_id": "network_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT gender , avg(age) FROM Person GROUP BY gender ORDER BY gender DESC", "binning": ""}, "VQL": "Visualize BAR SELECT gender , avg(age) FROM Person GROUP BY gender ORDER BY gender DESC"}, "hardness": "Medium"}, {"nl_queries": "Return a scatter chart about the correlation between  Clean_Jerk and  Total .", "db_id": "body_builder", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Clean_Jerk , Total FROM body_builder", "binning": ""}, "VQL": "Visualize SCATTER SELECT Clean_Jerk , Total FROM body_builder"}, "hardness": "Easy"}, {"nl_queries": "Show the name and age for all male people who don't have a wedding with a bar chart.", "db_id": "wedding", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , Age FROM people WHERE is_male = 'T' AND people_id NOT IN (SELECT male_id FROM wedding)", "binning": ""}, "VQL": "Visualize BAR SELECT Name , Age FROM people WHERE is_male = 'T' AND people_id NOT IN (SELECT male_id FROM wedding)"}, "hardness": "Easy"}, {"nl_queries": "Draw a bar chart of name versus height, I want to sort bars in asc order.", "db_id": "candidate_poll", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , Height FROM people ORDER BY Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , Height FROM people ORDER BY Name ASC"}, "hardness": "Easy"}, {"nl_queries": "Visualize a scatter chart about the correlation between  Team_ID and  School_ID , and group by attribute ACC_Home.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Team_ID , School_ID FROM basketball_match GROUP BY ACC_Home", "binning": ""}, "VQL": "Visualize SCATTER SELECT Team_ID , School_ID FROM basketball_match GROUP BY ACC_Home"}, "hardness": "Easy"}, {"nl_queries": "A bar chart compares the ages of all artists, I want to display in desc by the Y-axis please.", "db_id": "theme_gallery", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , Age FROM artist ORDER BY Age DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , Age FROM artist ORDER BY Age DESC"}, "hardness": "Easy"}, {"nl_queries": "What are the memories and carriers of phones, show in ascending by the sum memory in g.", "db_id": "phone_market", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Carrier , SUM(Memory_in_G) FROM phone GROUP BY Carrier ORDER BY SUM(Memory_in_G) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Carrier , SUM(Memory_in_G) FROM phone GROUP BY Carrier ORDER BY SUM(Memory_in_G) ASC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who was hired before 2002-06-21, find job_id and the sum of department_id , and group by attribute job_id, and visualize them by a bar chart, display by the total number of department id from high to low.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) DESC"}, "hardness": "Hard"}, {"nl_queries": "A line chart shows the change of the sum of Employee_ID over Start_from bin start_from by time, and list x axis from high to low order.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Start_from , SUM(Employee_ID) FROM hiring  ORDER BY Start_from DESC", "binning": "BIN Start_from BY YEAR"}, "VQL": "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring  ORDER BY Start_from DESC BIN Start_from BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "Show me a bar chart that bin all date of transactions into the weekday interval and the y-axis is their total number.", "db_id": "tracking_share_transactions", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS", "binning": "BIN date_of_transaction BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS BIN date_of_transaction BY WEEKDAY"}, "hardness": "Easy"}, {"nl_queries": "Return a bar chart about the distribution of Date_of_Birth and Height , display in desc by the names please.", "db_id": "candidate_poll", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Date_of_Birth , Height FROM people ORDER BY Date_of_Birth DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Date_of_Birth , Height FROM people ORDER BY Date_of_Birth DESC"}, "hardness": "Easy"}, {"nl_queries": "What are the names of technicians with the machine series that they repair? Show me how many machines for each technician's name.", "db_id": "machine_repair", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID GROUP BY Name", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID GROUP BY Name"}, "hardness": "Medium"}, {"nl_queries": "What are the number of the names of all the Japanese constructors that have earned more than 5 points?, and could you show how many name in desc order please?", "db_id": "formula_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name ORDER BY COUNT(name) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name ORDER BY COUNT(name) DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "For each party, return the name of the party and the number of delegates from that party Plot them as bar chart, and rank in asc by the Y.", "db_id": "election", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Party , SUM(COUNT(*)) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY SUM(COUNT(*)) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Party , SUM(COUNT(*)) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY SUM(COUNT(*)) ASC"}, "hardness": "Hard"}, {"nl_queries": "Draw a scatter chart for how many invoices correspond to each order id?", "db_id": "customers_and_invoices", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT order_id , count(*) FROM Invoices GROUP BY order_id", "binning": ""}, "VQL": "Visualize SCATTER SELECT order_id , count(*) FROM Invoices GROUP BY order_id"}, "hardness": "Easy"}, {"nl_queries": "Show me the number of all home by all home in a histogram", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home", "binning": ""}, "VQL": "Visualize BAR SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home"}, "hardness": "Easy"}, {"nl_queries": "What are the number of the dates of transactions with at least 100 share count or amount bigger than 100?, and show total number in desc order.", "db_id": "tracking_share_transactions", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS WHERE share_count >= 100 OR amount_of_transaction >= 100  ORDER BY COUNT(date_of_transaction) DESC", "binning": "BIN date_of_transaction BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS WHERE share_count >= 100 OR amount_of_transaction >= 100  ORDER BY COUNT(date_of_transaction) DESC BIN date_of_transaction BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, give me the comparison about the average of manager_id over the job_id , and group by attribute job_id by a bar chart, I want to order in desc by the mean manager id please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(MANAGER_ID) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(MANAGER_ID) DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "Give me the comparison about the amount of Days over the  Days , and group by attribute Days.", "db_id": "college_3", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Days , COUNT(Days) FROM COURSE GROUP BY Days ORDER BY Credits", "binning": ""}, "VQL": "Visualize BAR SELECT Days , COUNT(Days) FROM COURSE GROUP BY Days ORDER BY Credits"}, "hardness": "Medium"}, {"nl_queries": "Return a bar chart about the distribution of  Nationality and the sum of meter_100 , and group by attribute Nationality.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality", "binning": ""}, "VQL": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality"}, "hardness": "Easy"}, {"nl_queries": "Draw a scatter chart about the correlation between  School_ID and  ACC_Percent , and group by attribute All_Road.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY All_Road", "binning": ""}, "VQL": "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY All_Road"}, "hardness": "Easy"}, {"nl_queries": "Display a bar chart for what is the lowest salary in departments with average salary greater than the overall average, could you list X-axis from high to low order?", "db_id": "college_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name DESC"}, "hardness": "Easy"}, {"nl_queries": "How much does each charge type costs? List both charge type and amount. ", "db_id": "dog_kennels", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT charge_type , charge_amount FROM Charges", "binning": ""}, "VQL": "Visualize BAR SELECT charge_type , charge_amount FROM Charges"}, "hardness": "Easy"}, {"nl_queries": "Give me a bar chart for mean max(score) of each year, and show by the Y-axis from high to low.", "db_id": "wine_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Year , AVG(max(Score)) FROM WINE  ORDER BY AVG(max(Score)) DESC", "binning": "BIN Year BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Year , AVG(max(Score)) FROM WINE  ORDER BY AVG(max(Score)) DESC BIN Year BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "What is the total number of each ship type? Give me a bar chart, display X in asc order.", "db_id": "ship_mission", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY Type ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY Type ASC"}, "hardness": "Medium"}, {"nl_queries": "Return a bar chart on how many bookings does each booking status have? List the booking status code and the number of corresponding bookings, rank by the booking_status_code from high to low.", "db_id": "apartment_rentals", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code DESC", "binning": ""}, "VQL": "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code DESC"}, "hardness": "Medium"}, {"nl_queries": "How many staffs have contacted with each engineer? Give me a bar chart grouping by each engineer's first name, and could you display by the y-axis from low to high?", "db_id": "assets_maintenance", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT first_name , COUNT(first_name) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id = T3.engineer_id GROUP BY first_name ORDER BY COUNT(first_name) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT first_name , COUNT(first_name) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id = T3.engineer_id GROUP BY first_name ORDER BY COUNT(first_name) ASC"}, "hardness": "Hard"}, {"nl_queries": "Show each premise type and the number of premises in that type Visualize by bar chart, display y axis in descending order.", "db_id": "customers_campaigns_ecommerce", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT premises_type , count(*) FROM premises GROUP BY premises_type ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT premises_type , count(*) FROM premises GROUP BY premises_type ORDER BY count(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "Show me a pie chart showing the total number of each ship type.", "db_id": "ship_mission", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Type , COUNT(Type) FROM ship GROUP BY Type", "binning": ""}, "VQL": "Visualize PIE SELECT Type , COUNT(Type) FROM ship GROUP BY Type"}, "hardness": "Easy"}, {"nl_queries": "Show the number of competitions held in each city with a bar chart, list by the bar in desc.", "db_id": "farm", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Official_Name , COUNT(Official_Name) FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY Official_Name ORDER BY Official_Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Official_Name , COUNT(Official_Name) FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY Official_Name ORDER BY Official_Name DESC"}, "hardness": "Hard"}, {"nl_queries": "Return a bar chart on how many regions were affected by each storm?, show in desc by the Y please.", "db_id": "storm_record", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , count(*) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , count(*) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id ORDER BY count(*) DESC"}, "hardness": "Hard"}, {"nl_queries": "Scatter chart for employee id and their salaries.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT EMPLOYEE_ID , SALARY FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T1.employee_id = T2.manager_id", "binning": ""}, "VQL": "Visualize SCATTER SELECT EMPLOYEE_ID , SALARY FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T1.employee_id = T2.manager_id"}, "hardness": "Medium"}, {"nl_queries": "For each room, find its name and the number of times reservations were made for it, you can use the data to draw a bar chart, could you display by the the total number in desc please?", "db_id": "inn_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT roomName , count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT roomName , count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC"}, "hardness": "Hard"}, {"nl_queries": "A bar chart about what are the total number of credits offered by each department?, and I want to display bar from low to high order.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT DEPT_CODE , sum(T1.crs_credit) FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code = T2.crs_code GROUP BY T1.dept_code ORDER BY DEPT_CODE ASC", "binning": ""}, "VQL": "Visualize BAR SELECT DEPT_CODE , sum(T1.crs_credit) FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code = T2.crs_code GROUP BY T1.dept_code ORDER BY DEPT_CODE ASC"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, return a bar chart about the distribution of name and price , and group by attribute founder, sort by the Y from low to high.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder , T1.Name ORDER BY T1.Price ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder , T1.Name ORDER BY T1.Price ASC"}, "hardness": "Hard"}, {"nl_queries": "Draw a bar chart of county versus the total number ", "db_id": "school_finance", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT County , count(*) FROM school GROUP BY county", "binning": ""}, "VQL": "Visualize BAR SELECT County , count(*) FROM school GROUP BY county"}, "hardness": "Easy"}, {"nl_queries": "Show maximal pet age from each pettype, order from high to low by the y-axis.", "db_id": "pets_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT PetType , max(pet_age) FROM pets GROUP BY PetType ORDER BY max(pet_age) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT PetType , max(pet_age) FROM pets GROUP BY PetType ORDER BY max(pet_age) DESC"}, "hardness": "Easy"}, {"nl_queries": "For all course_name from courses table, group by the course name and count them with a bar chart, I want to sort in descending by the x axis.", "db_id": "student_assessment", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name ORDER BY course_name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name ORDER BY course_name DESC"}, "hardness": "Medium"}, {"nl_queries": "Compare the average of maximum score of wines each year, bin the year into the weekday interval and draw a bar chart, and rank from low to high by the Y-axis.", "db_id": "wine_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Year , AVG(max(Score)) FROM WINE  ORDER BY AVG(max(Score)) ASC", "binning": "BIN Year BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Year , AVG(max(Score)) FROM WINE  ORDER BY AVG(max(Score)) ASC BIN Year BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "Show the number of year of the maximum price and score of wines in a bar chart, and bin the year into the weekday interval, and could you order y axis from high to low order?", "db_id": "wine_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Year , COUNT(Year) FROM WINE  ORDER BY COUNT(Year) DESC", "binning": "BIN Year BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Year , COUNT(Year) FROM WINE  ORDER BY COUNT(Year) DESC BIN Year BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "Return a bar chart on how many students have each different allergy?", "db_id": "allergy_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy", "binning": ""}, "VQL": "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy"}, "hardness": "Easy"}, {"nl_queries": "Compare the lowest rating among all movies by each title using a histogram, could you rank from high to low by the X-axis?", "db_id": "movie_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT title , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY title ORDER BY title DESC", "binning": ""}, "VQL": "Visualize BAR SELECT title , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY title ORDER BY title DESC"}, "hardness": "Medium"}, {"nl_queries": "For all employees who have the letters D or S in their first name, draw a bar chart about the distribution of  hire_date and the amount of hire_date bin hire_date by weekday.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "Give me a histogram for how many members are in each party?, and rank from low to high by the bar.", "db_id": "party_people", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Party_name , count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY Party_name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Party_name , count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY Party_name ASC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who did not have any job in the past, a bar chart shows the distribution of  hire_date and the sum of manager_id bin hire_date by time.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about code over the name , and group by attribute name by a bar chart, I want to display x axis from low to high order.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Name ASC"}, "hardness": "Hard"}, {"nl_queries": "Show the number of cards in different card type code in a bar chart.", "db_id": "customers_card_transactions", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT card_type_code , COUNT(card_type_code) FROM Customers_cards GROUP BY card_type_code", "binning": ""}, "VQL": "Visualize BAR SELECT card_type_code , COUNT(card_type_code) FROM Customers_cards GROUP BY card_type_code"}, "hardness": "Easy"}, {"nl_queries": "How many courses for each subject? Plot a bar chart.", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT subject_name , COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id GROUP BY T1.subject_id", "binning": ""}, "VQL": "Visualize BAR SELECT subject_name , COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id GROUP BY T1.subject_id"}, "hardness": "Medium"}, {"nl_queries": "Please use a bar chart to compare the number of customers of each customer's move in date, note that you should bin move in date into Year interval, and list total number in descending order.", "db_id": "local_govt_and_lot", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id  ORDER BY COUNT(date_moved_in) DESC", "binning": "BIN date_moved_in BY YEAR"}, "VQL": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id  ORDER BY COUNT(date_moved_in) DESC BIN date_moved_in BY YEAR"}, "hardness": "Hard"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, visualize a bar chart about the distribution of last_name and manager_id , display by the names in ascending.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT LAST_NAME , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY LAST_NAME ASC", "binning": ""}, "VQL": "Visualize BAR SELECT LAST_NAME , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY LAST_NAME ASC"}, "hardness": "Medium"}, {"nl_queries": "How many delegates in each committee? Return a bar chart, I want to order in descending by the X.", "db_id": "election", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY Committee DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY Committee DESC"}, "hardness": "Medium"}, {"nl_queries": "What is the first name and GPA of every student that has a GPA lower than average. ", "db_id": "college_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT STU_FNAME , SUM(STU_GPA) FROM student WHERE stu_gpa < (SELECT avg(stu_gpa) FROM student) GROUP BY STU_FNAME", "binning": ""}, "VQL": "Visualize PIE SELECT STU_FNAME , SUM(STU_GPA) FROM student WHERE stu_gpa < (SELECT avg(stu_gpa) FROM student) GROUP BY STU_FNAME"}, "hardness": "Medium"}, {"nl_queries": "Give me the comparison about the amount of Start_from over the Start_from bin start_from by weekday, and list in asc by the y axis.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Start_from , COUNT(Start_from) FROM hiring  ORDER BY COUNT(Start_from) ASC", "binning": "BIN Start_from BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Start_from , COUNT(Start_from) FROM hiring  ORDER BY COUNT(Start_from) ASC BIN Start_from BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "Visualize a bar chart about the distribution of Is_full_time and the sum of Shop_ID , and group by attribute Is_full_time, and rank total number from high to low order please.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Shop_ID) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Shop_ID) DESC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, give me the comparison about  commission_pct over the  email .", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT EMAIL , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)", "binning": ""}, "VQL": "Visualize BAR SELECT EMAIL , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)"}, "hardness": "Extra Hard"}, {"nl_queries": "Show me about the distribution of Is_full_time and the average of Employee_ID , and group by attribute Is_full_time in a bar chart, rank from high to low by the Y.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Is_full_time , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY AVG(Employee_ID) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Is_full_time , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY AVG(Employee_ID) DESC"}, "hardness": "Medium"}, {"nl_queries": "Bin the hire date into the day of week interval, and then calculate the average salary of employees in each day for a bar chart, note that just select those employees without the letter M in their first name, and could you list Y in ascending order?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE first_name NOT LIKE '%M%'  ORDER BY AVG(SALARY) ASC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE first_name NOT LIKE '%M%'  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "For all employees who have the letters D or S in their first name, return a bar chart about the distribution of hire_date and the amount of hire_date bin hire_date by weekday, and show y axis from high to low order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY COUNT(HIRE_DATE) DESC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about the average of manufacturer over the name , and group by attribute name by a bar chart, sort total number from low to high order.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Manufacturer ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Manufacturer ASC"}, "hardness": "Hard"}, {"nl_queries": "Find the number of members living in each address Show bar chart, and rank by the Y in desc.", "db_id": "coffee_shop", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Address , count(*) FROM member GROUP BY address ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Address , count(*) FROM member GROUP BY address ORDER BY count(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "Return a scatter chart about the correlation between  Team_ID and  ACC_Percent , and group by attribute Team_Name.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Team_ID , ACC_Percent FROM basketball_match GROUP BY Team_Name", "binning": ""}, "VQL": "Visualize SCATTER SELECT Team_ID , ACC_Percent FROM basketball_match GROUP BY Team_Name"}, "hardness": "Easy"}, {"nl_queries": "For those records from the products and each product's manufacturer, a bar chart shows the distribution of name and the average of price , and group by attribute name, rank by the Y-axis in desc.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Price DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Price DESC"}, "hardness": "Hard"}, {"nl_queries": "For all employees who have the letters D or S in their first name, visualize a bar chart about the distribution of  hire_date and the sum of department_id bin hire_date by weekday.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, show me about the distribution of hire_date and the sum of salary bin hire_date by time in a bar chart, I want to order by the y-axis in descending.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(SALARY) DESC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "Give me the comparison about ACC_Percent over the Team_Name by a bar chart, order by the bars in desc.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Team_Name , ACC_Percent FROM basketball_match ORDER BY Team_Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Team_Name , ACC_Percent FROM basketball_match ORDER BY Team_Name DESC"}, "hardness": "Easy"}, {"nl_queries": "For each origin, how many flights came from there Show bar chart, I want to sort from low to high by the y axis.", "db_id": "flight_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT origin , count(*) FROM Flight GROUP BY origin ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT origin , count(*) FROM Flight GROUP BY origin ORDER BY count(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "Compare all countries with a bar chart, I want to order by the bars in asc.", "db_id": "theme_gallery", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Country , COUNT(Country) FROM artist GROUP BY Country ORDER BY Country ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM artist GROUP BY Country ORDER BY Country ASC"}, "hardness": "Medium"}, {"nl_queries": "Show each author and the number of workshops they submitted to Show bar chart, and I want to order x-axis in descending order.", "db_id": "workshop_paper", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY Author DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY Author DESC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, visualize a bar chart about the distribution of name and the sum of manufacturer , and group by attribute name, and show by the bars in asc.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC"}, "hardness": "Hard"}, {"nl_queries": "Find the id and weight of all pets whose age is older than 1 Visualize by bar chart, and show weight from low to high order.", "db_id": "pets_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT PetID , weight FROM pets WHERE pet_age > 1 ORDER BY weight ASC", "binning": ""}, "VQL": "Visualize BAR SELECT PetID , weight FROM pets WHERE pet_age > 1 ORDER BY weight ASC"}, "hardness": "Medium"}, {"nl_queries": "Return a line chart about the change of the amount of Start_from over  Start_from bin start_from by time.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Start_from , COUNT(Start_from) FROM hiring", "binning": "BIN Start_from BY YEAR"}, "VQL": "Visualize LINE SELECT Start_from , COUNT(Start_from) FROM hiring BIN Start_from BY YEAR"}, "hardness": "Easy"}, {"nl_queries": "A bar chart shows the distribution of meter_600 and ID , could you rank in desc by the X-axis?", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_600 , ID FROM swimmer ORDER BY meter_600 DESC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_600 , ID FROM swimmer ORDER BY meter_600 DESC"}, "hardness": "Easy"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, give me the comparison about employee_id over the last_name , could you sort x-axis from high to low order?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT LAST_NAME , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY LAST_NAME DESC", "binning": ""}, "VQL": "Visualize BAR SELECT LAST_NAME , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY LAST_NAME DESC"}, "hardness": "Medium"}, {"nl_queries": "Visualize a bar chart for what is the average salary for each job title?, and rank by the names in asc.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_TITLE , AVG(salary) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id GROUP BY T2.job_title ORDER BY JOB_TITLE ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_TITLE , AVG(salary) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id GROUP BY T2.job_title ORDER BY JOB_TITLE ASC"}, "hardness": "Hard"}, {"nl_queries": "Bar chart of mean age from each city code, could you show bars in asc order?", "db_id": "dorm_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY city_code ASC", "binning": ""}, "VQL": "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY city_code ASC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, a bar chart shows the distribution of name and the average of code , and group by attribute name, list from low to high by the y axis.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code ASC"}, "hardness": "Hard"}, {"nl_queries": "Draw a bar chart for what is the average high temperature for each day of week?, rank x axis in asc order please.", "db_id": "station_weather", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT day_of_week , avg(high_temperature) FROM weekly_weather GROUP BY day_of_week ORDER BY day_of_week ASC", "binning": ""}, "VQL": "Visualize BAR SELECT day_of_week , avg(high_temperature) FROM weekly_weather GROUP BY day_of_week ORDER BY day_of_week ASC"}, "hardness": "Medium"}, {"nl_queries": "The trend about the the number of season of different Home_team over the season, display by the X from low to high.", "db_id": "game_injury", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ORDER BY Season ASC", "binning": "BIN Season BY YEAR"}, "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ORDER BY Season ASC BIN Season BY YEAR"}, "hardness": "Extra Hard"}, {"nl_queries": "Give me the comparison about School_ID over the ACC_Road , and group by attribute ACC_Home by a bar chart, sort by the X in ascending.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Road , School_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY ACC_Road ASC", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Road , School_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY ACC_Road ASC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, visualize a bar chart about the distribution of job_id and manager_id , and could you list in asc by the MANAGER_ID?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY MANAGER_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY MANAGER_ID ASC"}, "hardness": "Medium"}, {"nl_queries": "Bar chart x axis participant type code y axis the number of participant type code, and sort in desc by the Y please.", "db_id": "local_govt_in_alabama", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code ORDER BY COUNT(Participant_Type_Code) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code ORDER BY COUNT(Participant_Type_Code) DESC"}, "hardness": "Medium"}, {"nl_queries": "Create a bar chart showing how many class across class, could you order Y-axis in desc order?", "db_id": "race_track", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY COUNT(Class) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY COUNT(Class) DESC"}, "hardness": "Medium"}, {"nl_queries": "Compute the total the total number across city as a pie chart.", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT city , COUNT(*) FROM station GROUP BY city", "binning": ""}, "VQL": "Visualize PIE SELECT city , COUNT(*) FROM station GROUP BY city"}, "hardness": "Easy"}, {"nl_queries": "Find  meter_600 and  ID , and visualize them by a bar chart.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_600 , ID FROM swimmer", "binning": ""}, "VQL": "Visualize BAR SELECT meter_600 , ID FROM swimmer"}, "hardness": "Easy"}, {"nl_queries": "For each shop, return the number of employees working there and the name of the shop Plot them as bar chart, I want to show Y-axis in asc order please.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , count(*) FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t2.name ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , count(*) FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t2.name ORDER BY count(*) ASC"}, "hardness": "Hard"}, {"nl_queries": "Give me a bar chart to show how many dates with a max temperature greater than or equal to 80 for each day, and could you show from high to low by the Y?", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date , COUNT(date) FROM weather WHERE max_temperature_f >= 80  ORDER BY COUNT(date) DESC", "binning": "BIN date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE max_temperature_f >= 80  ORDER BY COUNT(date) DESC BIN date BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "For those employees who was hired before 2002-06-21, visualize a bar chart about the distribution of  hire_date and the average of salary bin hire_date by weekday.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21'", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "What is the average price for each type of product Visualize by bar chart, and display in descending by the the average of product price.", "db_id": "department_store", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT product_type_code , avg(product_price) FROM products GROUP BY product_type_code ORDER BY avg(product_price) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT product_type_code , avg(product_price) FROM products GROUP BY product_type_code ORDER BY avg(product_price) DESC"}, "hardness": "Medium"}, {"nl_queries": "Show the relationship between service type code and number of services with a scatter chart.", "db_id": "cre_Drama_Workshop_Groups", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Service_Type_Code , COUNT(*) FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code GROUP BY T2.Service_Type_Code", "binning": ""}, "VQL": "Visualize SCATTER SELECT Service_Type_Code , COUNT(*) FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code GROUP BY T2.Service_Type_Code"}, "hardness": "Medium"}, {"nl_queries": "What is the average base price of rooms, for each bed type. Plot them as bar chart.", "db_id": "inn_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT bedType , avg(basePrice) FROM Rooms GROUP BY bedType", "binning": ""}, "VQL": "Visualize BAR SELECT bedType , avg(basePrice) FROM Rooms GROUP BY bedType"}, "hardness": "Easy"}, {"nl_queries": "Return the completion date for all the tests that have \"Fail\" result, and count them by a bar chart", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_of_completion , COUNT(date_of_completion) FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = \"Fail\"", "binning": "BIN date_of_completion BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_of_completion , COUNT(date_of_completion) FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = \"Fail\" BIN date_of_completion BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, return a bar chart about the distribution of hire_date and the sum of department_id bin hire_date by time, show y axis from high to low order please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(DEPARTMENT_ID) DESC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(DEPARTMENT_ID) DESC BIN HIRE_DATE BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "Show the names and total passengers for all train stations not in London. Plot them as a pie chart.", "db_id": "train_station", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Name , Total_Passengers FROM station WHERE LOCATION != 'London'", "binning": ""}, "VQL": "Visualize PIE SELECT Name , Total_Passengers FROM station WHERE LOCATION != 'London'"}, "hardness": "Easy"}, {"nl_queries": "For those products with a price between 60 and 120, give me the comparison about price over the name , and list from low to high by the Y-axis.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , Price FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Price ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , Price FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Price ASC"}, "hardness": "Medium"}, {"nl_queries": "Give me a histogram for what is the code of each role and the number of employees in each role?, and could you sort y axis in ascending order?", "db_id": "cre_Doc_Tracking_DB", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY count(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "What is the number of documents for each document name? Return a bar chart.", "db_id": "cre_Doc_Template_Mgt", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Document_Name , count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id", "binning": ""}, "VQL": "Visualize BAR SELECT Document_Name , count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id"}, "hardness": "Medium"}, {"nl_queries": "List the number of the phone numbers of all employees, and show Y from low to high order please.", "db_id": "chinook_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY COUNT(Phone) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY COUNT(Phone) ASC"}, "hardness": "Medium"}, {"nl_queries": "For each citizenship, how many singers are from that country. ", "db_id": "singer", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship", "binning": ""}, "VQL": "Visualize BAR SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship"}, "hardness": "Easy"}, {"nl_queries": "Give me a histogram for which parts have more than 2 faults? Show the part name and id, and rank X-axis from low to high order please.", "db_id": "assets_maintenance", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.part_name , T1.part_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id ORDER BY T1.part_name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.part_name , T1.part_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id ORDER BY T1.part_name ASC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, return a bar chart about the distribution of name and the amount of name , and group by attribute name, order x axis in ascending order.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC"}, "hardness": "Hard"}, {"nl_queries": "Return a bar chart showing how many customers whose contact channel code is email for each weekday.", "db_id": "customers_and_addresses", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT active_from_date , COUNT(active_from_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email'", "binning": "BIN active_from_date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT active_from_date , COUNT(active_from_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email' BIN active_from_date BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, return a scatter chart about the correlation between  code and  price .", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT T1.Code , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code", "binning": ""}, "VQL": "Visualize SCATTER SELECT T1.Code , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code"}, "hardness": "Easy"}, {"nl_queries": "Give me a bar chart for the average of weight of each pettype, could you list in desc by the Y?", "db_id": "pets_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT PetType , avg(weight) FROM pets GROUP BY pettype ORDER BY avg(weight) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT PetType , avg(weight) FROM pets GROUP BY pettype ORDER BY avg(weight) DESC"}, "hardness": "Medium"}, {"nl_queries": "Return a line chart about the change of the amount of Start_from over  Start_from , and group by attribute Is_full_time and bin start_from by time.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Start_from , COUNT(Start_from) FROM hiring GROUP BY Is_full_time", "binning": "BIN Start_from BY YEAR"}, "VQL": "Visualize LINE SELECT Start_from , COUNT(Start_from) FROM hiring GROUP BY Is_full_time BIN Start_from BY YEAR"}, "hardness": "Hard"}, {"nl_queries": "Give me a histogram for what are the names and ids of the tourist attractions that are visited at most once?, and rank in asc by the y-axis.", "db_id": "cre_Theme_park", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID ORDER BY T1.Tourist_Attraction_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID ORDER BY T1.Tourist_Attraction_ID ASC"}, "hardness": "Medium"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, visualize a bar chart about the distribution of hire_date and the sum of salary bin hire_date by weekday, and rank from low to high by the total number.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(SALARY) ASC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "Visualize a bar chart for what are the district names and city populations for all districts that between 200,000 and 2,000,000 residents?", "db_id": "store_product", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT District_name , City_Population FROM district WHERE City_Population BETWEEN 200000 AND 2000000", "binning": ""}, "VQL": "Visualize BAR SELECT District_name , City_Population FROM district WHERE City_Population BETWEEN 200000 AND 2000000"}, "hardness": "Easy"}, {"nl_queries": "Return a bar chart about the distribution of All_Neutral and All_Games_Percent , rank by the X in ascending.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral ASC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral ASC"}, "hardness": "Easy"}, {"nl_queries": "Show different ways to get to attractions and the number of attractions that can be accessed in the corresponding way Plot them as bar chart, and could you list the total number in asc order?", "db_id": "cre_Theme_park", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT How_to_Get_There , COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT How_to_Get_There , COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 Visualize by bar chart, display in desc by the Y.", "db_id": "world_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC"}, "hardness": "Medium"}, {"nl_queries": "Show all allergies with number of students affected Show bar chart, and could you list by the X-axis in asc please?", "db_id": "allergy_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY Allergy ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY Allergy ASC"}, "hardness": "Medium"}, {"nl_queries": "Give me a histogram for what are the different parties of representative? Show the party name and the number of representatives in each party, and I want to order the total number from high to low order.", "db_id": "election_representative", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Party , COUNT(*) FROM representative GROUP BY Party ORDER BY COUNT(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Party , COUNT(*) FROM representative GROUP BY Party ORDER BY COUNT(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "Draw a line chart about the change of the sum of Shop_ID over Start_from bin start_from by time, and I want to rank in asc by the x-axis.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Start_from , SUM(Shop_ID) FROM hiring  ORDER BY Start_from ASC", "binning": "BIN Start_from BY YEAR"}, "VQL": "Visualize LINE SELECT Start_from , SUM(Shop_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "A line chart for returning the number of the dates of birth for entrepreneurs who have either the investor Simon Woodroffe or Peter Jones, sort X in ascending order.", "db_id": "entrepreneur", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Date_of_Birth , COUNT(Date_of_Birth) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Investor = \"Simon Woodroffe\" OR T1.Investor = \"Peter Jones\"  ORDER BY Date_of_Birth ASC", "binning": "BIN Date_of_Birth BY YEAR"}, "VQL": "Visualize LINE SELECT Date_of_Birth , COUNT(Date_of_Birth) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Investor = \"Simon Woodroffe\" OR T1.Investor = \"Peter Jones\"  ORDER BY Date_of_Birth ASC BIN Date_of_Birth BY YEAR"}, "hardness": "Extra Hard"}, {"nl_queries": "Show the different headquarters and number of companies at each headquarter with a bar chart, order y axis in ascending order.", "db_id": "company_employee", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Headquarters , COUNT(*) FROM company GROUP BY Headquarters ORDER BY COUNT(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Headquarters , COUNT(*) FROM company GROUP BY Headquarters ORDER BY COUNT(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "A bar chart for finding the number of the parties associated with the delegates from district 1 or 2. Who served as comptrollers of the parties?", "db_id": "election", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Comptroller , COUNT(Comptroller) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.District = 1 OR T1.District = 2 GROUP BY Comptroller", "binning": ""}, "VQL": "Visualize BAR SELECT Comptroller , COUNT(Comptroller) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.District = 1 OR T1.District = 2 GROUP BY Comptroller"}, "hardness": "Extra Hard"}, {"nl_queries": "", "db_id": "entertainment_awards", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Type , COUNT(*) FROM artwork GROUP BY TYPE", "binning": ""}, "VQL": "Visualize BAR SELECT Type , COUNT(*) FROM artwork GROUP BY TYPE"}, "hardness": "Easy"}, {"nl_queries": "Count the number of people of each sex who have a weight higher than 85 by a bar chart, and I want to order by the X in asc.", "db_id": "candidate_poll", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Sex , count(*) FROM people WHERE weight > 85 GROUP BY sex ORDER BY Sex ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Sex , count(*) FROM people WHERE weight > 85 GROUP BY sex ORDER BY Sex ASC"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, draw a bar chart about the distribution of headquarter and the sum of code , and group by attribute headquarter, could you rank y-axis in asc order please?", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T1.Code ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T1.Code ASC"}, "hardness": "Hard"}, {"nl_queries": "What is the sum of credit value of courses with more than one prerequisite for each title? Return a bar chart, and order by the sum credits in desc.", "db_id": "college_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT title , SUM(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title ORDER BY SUM(credits) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT title , SUM(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title ORDER BY SUM(credits) DESC"}, "hardness": "Hard"}, {"nl_queries": "A bar chart about what is the name of each continent and how many car makers are there in each one?, show by the X-axis in desc.", "db_id": "car_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY T1.Continent DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY T1.Continent DESC"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, a scatter chart shows the correlation between  code and  revenue .", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code", "binning": ""}, "VQL": "Visualize SCATTER SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code"}, "hardness": "Easy"}, {"nl_queries": "How many flights in each destination city? Return a bar chart, and display x-axis in asc order please.", "db_id": "flight_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT destination , COUNT(destination) FROM Flight GROUP BY destination ORDER BY destination ASC", "binning": ""}, "VQL": "Visualize BAR SELECT destination , COUNT(destination) FROM Flight GROUP BY destination ORDER BY destination ASC"}, "hardness": "Medium"}, {"nl_queries": "How many apartment bookings for each year? Draw a bar chart binning booking start date by year interval, and list in ascending by the Y please.", "db_id": "apartment_rentals", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id  ORDER BY COUNT(booking_start_date) ASC", "binning": "BIN booking_start_date BY YEAR"}, "VQL": "Visualize BAR SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id  ORDER BY COUNT(booking_start_date) ASC BIN booking_start_date BY YEAR"}, "hardness": "Hard"}, {"nl_queries": "", "db_id": "flight_company", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Country , count(*) FROM airport GROUP BY country", "binning": ""}, "VQL": "Visualize BAR SELECT Country , count(*) FROM airport GROUP BY country"}, "hardness": "Easy"}, {"nl_queries": "Return a bar chart about the distribution of All_Games and School_ID , and rank total number from low to high order.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Games , School_ID FROM basketball_match ORDER BY School_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Games , School_ID FROM basketball_match ORDER BY School_ID ASC"}, "hardness": "Easy"}, {"nl_queries": "For each distinct product name, show its average product price, show X-axis from high to low order.", "db_id": "cre_Drama_Workshop_Groups", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY Product_Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY Product_Name DESC"}, "hardness": "Medium"}, {"nl_queries": "For those products with a price between 60 and 120, draw a scatter chart about the correlation between  code and  manufacturer .", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Code , Manufacturer FROM products WHERE price BETWEEN 60 AND 120", "binning": ""}, "VQL": "Visualize SCATTER SELECT Code , Manufacturer FROM products WHERE price BETWEEN 60 AND 120"}, "hardness": "Easy"}, {"nl_queries": "What is the total cloud cover rates of the dates (bin into day of the week interval) that had the top 5 cloud cover rates? You can show me a bar chart, could you show Y-axis in desc order?", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date , SUM(cloud_cover) FROM weather  ORDER BY SUM(cloud_cover) DESC", "binning": "BIN date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather  ORDER BY SUM(cloud_cover) DESC BIN date BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "Draw a bar chart about the distribution of  Is_full_time and the sum of Shop_ID , and group by attribute Is_full_time.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time", "binning": ""}, "VQL": "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time"}, "hardness": "Easy"}, {"nl_queries": "Show the names of high school students and their corresponding number of friends Plot them as bar chart, and rank in desc by the X-axis.", "db_id": "network_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.name , AVG(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.name , AVG(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name DESC"}, "hardness": "Hard"}, {"nl_queries": "For each company id, what are the companies and how many gas stations does each one operate. Plot them as bar chart.", "db_id": "gas_company", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Company , count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id", "binning": ""}, "VQL": "Visualize BAR SELECT Company , count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id"}, "hardness": "Medium"}, {"nl_queries": "A stacked bar chart about the total number in each competition type, and then split by country, and could you display by the Y-axis from low to high?", "db_id": "sports_competition", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Country , COUNT(Country) FROM competition GROUP BY Competition_type ,  Country ORDER BY COUNT(Country) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Competition_type ,  Country ORDER BY COUNT(Country) ASC"}, "hardness": "Hard"}, {"nl_queries": "List the actual delivery date for all the orders with quantity , and count them by a bar chart", "db_id": "cre_Drama_Workshop_Groups", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID = T2.Order_ID WHERE T2.Order_Quantity = 1", "binning": "BIN Actual_Delivery_Date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID = T2.Order_ID WHERE T2.Order_Quantity = 1 BIN Actual_Delivery_Date BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "A bar chart showing the number of flights with price higher than 300 for each destination city, order in asc by the total number.", "db_id": "flight_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT destination , COUNT(destination) FROM Flight WHERE price > 300 GROUP BY destination ORDER BY COUNT(destination) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT destination , COUNT(destination) FROM Flight WHERE price > 300 GROUP BY destination ORDER BY COUNT(destination) ASC"}, "hardness": "Hard"}, {"nl_queries": "Find the id and location of circuits that belong to France or Belgium Plot them as bar chart, order in asc by the names.", "db_id": "formula_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT location , circuitId FROM circuits WHERE country = \"France\" OR country = \"Belgium\" ORDER BY location ASC", "binning": ""}, "VQL": "Visualize BAR SELECT location , circuitId FROM circuits WHERE country = \"France\" OR country = \"Belgium\" ORDER BY location ASC"}, "hardness": "Hard"}, {"nl_queries": "Please tell me how many employees in the department 80 on each type of job titles using a bar chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_TITLE , COUNT(JOB_TITLE) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T1.department_id = 80 GROUP BY JOB_TITLE", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_TITLE , COUNT(JOB_TITLE) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T1.department_id = 80 GROUP BY JOB_TITLE"}, "hardness": "Hard"}, {"nl_queries": "For those employees who was hired before 2002-06-21, draw a bar chart about the distribution of hire_date and the sum of manager_id bin hire_date by weekday, could you sort in asc by the total number?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(MANAGER_ID) ASC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(MANAGER_ID) ASC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, give me the comparison about  manager_id over the  first_name .", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT FIRST_NAME , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)", "binning": ""}, "VQL": "Visualize BAR SELECT FIRST_NAME , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)"}, "hardness": "Extra Hard"}, {"nl_queries": "Show names of technicians and the number of machines they are assigned to repair with a bar chart, and I want to list bar from low to high order.", "db_id": "machine_repair", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID = T2.technician_ID GROUP BY T2.Name ORDER BY Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID = T2.technician_ID GROUP BY T2.Name ORDER BY Name ASC"}, "hardness": "Hard"}, {"nl_queries": "Give me a stacked bar chart for showing the total number of each ship type and categorize it by ship nationality, and I want to order names in desc order.", "db_id": "ship_mission", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY Type DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY Type DESC"}, "hardness": "Hard"}, {"nl_queries": "List the states of all votes, compute the total number of states, and sum their vote id with a bar chart, I want to sort bar from low to high order.", "db_id": "voter_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT state , SUM(vote_id) FROM votes GROUP BY state ORDER BY state ASC", "binning": ""}, "VQL": "Visualize BAR SELECT state , SUM(vote_id) FROM votes GROUP BY state ORDER BY state ASC"}, "hardness": "Medium"}, {"nl_queries": "List the number of the name of technicians whose team is not \"NYY\", order by the X-axis in desc.", "db_id": "machine_repair", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM technician WHERE Team != \"NYY\" GROUP BY Name ORDER BY Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM technician WHERE Team != \"NYY\" GROUP BY Name ORDER BY Name DESC"}, "hardness": "Hard"}, {"nl_queries": "What is the number of each allergie type? Return a bar chart.", "db_id": "allergy_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT AllergyType , COUNT(AllergyType) FROM Allergy_type GROUP BY AllergyType", "binning": ""}, "VQL": "Visualize BAR SELECT AllergyType , COUNT(AllergyType) FROM Allergy_type GROUP BY AllergyType"}, "hardness": "Easy"}, {"nl_queries": "Find the component amounts and names of all furnitures that have more than 10 components, order by the Num_of_Component in descending.", "db_id": "manufacturer", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , Num_of_Component FROM furniture WHERE Num_of_Component > 10 ORDER BY Num_of_Component DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , Num_of_Component FROM furniture WHERE Num_of_Component > 10 ORDER BY Num_of_Component DESC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who was hired before 2002-06-21, give me the comparison about the average of employee_id over the  hire_date bin hire_date by time.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH"}, "hardness": "Medium"}, {"nl_queries": "What are the dates that have an average sea level pressure between 30.3 and 31, and count them by a bar chart", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date , COUNT(date) FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31", "binning": "BIN date BY YEAR"}, "VQL": "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31 BIN date BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "A bar chart about how many hosts does each nationality have? List the nationality and the count.", "db_id": "party_host", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality", "binning": ""}, "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality"}, "hardness": "Easy"}, {"nl_queries": "What are the ids and trade names of the medicine that can interact with at least 3 enzymes. Show the proportion.", "db_id": "medicine_enzyme_interaction", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Trade_Name , id FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id", "binning": ""}, "VQL": "Visualize PIE SELECT Trade_Name , id FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id"}, "hardness": "Easy"}, {"nl_queries": "Give me a histogram for what are the names and ids of all countries with at least one car maker?", "db_id": "car_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT CountryName , CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country", "binning": ""}, "VQL": "Visualize BAR SELECT CountryName , CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country"}, "hardness": "Easy"}, {"nl_queries": "Bar chart x axis team name y axis school_id, order x axis from high to low order please.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Team_Name , School_ID FROM basketball_match ORDER BY Team_Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY Team_Name DESC"}, "hardness": "Easy"}, {"nl_queries": "Find the enrollment date for all the tests that have \"Pass\" result, and count them by a bar chart, sort by the Y from low to high please.", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = \"Pass\"  ORDER BY COUNT(date_of_enrolment) ASC", "binning": "BIN date_of_enrolment BY MONTH"}, "VQL": "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = \"Pass\"  ORDER BY COUNT(date_of_enrolment) ASC BIN date_of_enrolment BY MONTH"}, "hardness": "Extra Hard"}, {"nl_queries": "List all directors along with the number of films directed by each director Plot them as bar chart, display in ascending by the x-axis.", "db_id": "cinema", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Directed_by , count(*) FROM film GROUP BY directed_by ORDER BY Directed_by ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Directed_by , count(*) FROM film GROUP BY directed_by ORDER BY Directed_by ASC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, find name and code , and group by attribute headquarter, and visualize them by a bar chart, order in asc by the Y-axis.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter , T1.Name ORDER BY T1.Code ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter , T1.Name ORDER BY T1.Code ASC"}, "hardness": "Hard"}, {"nl_queries": "Sum the average weight and bin year into weekday interval for a bar chart.", "db_id": "car_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Year , avg(Weight) FROM CARS_DATA", "binning": "BIN Year BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Year , avg(Weight) FROM CARS_DATA BIN Year BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, return a bar chart about the distribution of founder and the sum of revenue , and group by attribute founder, show by the names from low to high please.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Founder , SUM(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder ORDER BY Founder ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Founder , SUM(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder ORDER BY Founder ASC"}, "hardness": "Hard"}, {"nl_queries": "Show team id vs acc_percent as scatter plot use a different color for each All_Games", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Team_ID , ACC_Percent FROM basketball_match GROUP BY All_Games", "binning": ""}, "VQL": "Visualize SCATTER SELECT Team_ID , ACC_Percent FROM basketball_match GROUP BY All_Games"}, "hardness": "Easy"}, {"nl_queries": "how many entrepreneurs correspond to each investor?, I want to display by the bar in asc.", "db_id": "entrepreneur", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY Investor ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY Investor ASC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, show me about the distribution of name and code , and group by attribute founder in a bar chart, rank in asc by the total number.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder , T1.Name ORDER BY T1.Code ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder , T1.Name ORDER BY T1.Code ASC"}, "hardness": "Hard"}, {"nl_queries": "What are the names of the teachers and how many courses do they teach Plot them as bar chart, order from high to low by the Y-axis.", "db_id": "course_teach", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name ORDER BY COUNT(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name ORDER BY COUNT(*) DESC"}, "hardness": "Hard"}, {"nl_queries": "What are the different classes of races, and how many races correspond to each. Show bar chart.", "db_id": "race_track", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Class , count(*) FROM race GROUP BY CLASS", "binning": ""}, "VQL": "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS"}, "hardness": "Easy"}, {"nl_queries": "Visualize a bar chart for what are the naems of all the projects, and how many scientists were assigned to each of them?, and show by the bar in ascending please.", "db_id": "scientist_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.name ORDER BY Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.name ORDER BY Name ASC"}, "hardness": "Hard"}, {"nl_queries": "Show the name of all trains, count the name and show them with a bar chart, could you rank in asc by the X please?", "db_id": "train_station", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM train GROUP BY Name ORDER BY Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM train GROUP BY Name ORDER BY Name ASC"}, "hardness": "Medium"}, {"nl_queries": "Find meter_500 and meter_100 , and visualize them by a bar chart, and list by the Y-axis in asc.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_500 , meter_100 FROM swimmer ORDER BY meter_100 ASC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_500 , meter_100 FROM swimmer ORDER BY meter_100 ASC"}, "hardness": "Easy"}, {"nl_queries": "For those records from the products and each product's manufacturer, visualize a scatter chart about the correlation between  code and  price , and group by attribute headquarter.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT T1.Code , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter", "binning": ""}, "VQL": "Visualize SCATTER SELECT T1.Code , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter"}, "hardness": "Medium"}, {"nl_queries": "What is the average age for a male in each job Visualize by bar chart, and show total number in asc order.", "db_id": "network_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job ORDER BY avg(age) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job ORDER BY avg(age) ASC"}, "hardness": "Hard"}, {"nl_queries": "count yearid for visualizing a line chart, and sort X in asc order.", "db_id": "baseball_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT yearid , COUNT(yearid) FROM hall_of_fame  ORDER BY yearid ASC", "binning": "BIN yearid BY YEAR"}, "VQL": "Visualize LINE SELECT yearid , COUNT(yearid) FROM hall_of_fame  ORDER BY yearid ASC BIN yearid BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "Which parts have more than 2 faults? Show the part name and id in a bar chart, and list by the Y from high to low.", "db_id": "assets_maintenance", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.part_name , T1.part_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id ORDER BY T1.part_id DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.part_name , T1.part_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id ORDER BY T1.part_id DESC"}, "hardness": "Medium"}, {"nl_queries": "Return a scatter chart about the correlation between  ACC_Percent and  All_Games_Percent , and group by attribute All_Home.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT ACC_Percent , All_Games_Percent FROM basketball_match GROUP BY All_Home", "binning": ""}, "VQL": "Visualize SCATTER SELECT ACC_Percent , All_Games_Percent FROM basketball_match GROUP BY All_Home"}, "hardness": "Easy"}, {"nl_queries": "Please tell me the total star ratings of each movie title using a bar chart, and list from high to low by the y-axis.", "db_id": "movie_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT title , SUM(stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY title ORDER BY SUM(stars) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT title , SUM(stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY title ORDER BY SUM(stars) DESC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who did not have any job in the past, return a bar chart about the distribution of job_id and the average of employee_id , and group by attribute job_id, I want to display x axis in descending order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY JOB_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY JOB_ID DESC"}, "hardness": "Hard"}, {"nl_queries": "Draw a bar chart about the distribution of Start_from and the sum of Employee_ID bin start_from by weekday, show total number in descending order.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Start_from , SUM(Employee_ID) FROM hiring  ORDER BY SUM(Employee_ID) DESC", "binning": "BIN Start_from BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Start_from , SUM(Employee_ID) FROM hiring  ORDER BY SUM(Employee_ID) DESC BIN Start_from BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, show me about the distribution of name and the average of manufacturer , and group by attribute name in a bar chart, and display by the bar in ascending.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC"}, "hardness": "Hard"}, {"nl_queries": "Give me the comparison about  Team_ID over the  ACC_Road , and group by attribute All_Home.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road"}, "hardness": "Extra Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, draw a bar chart about the distribution of name and the amount of name , and group by attribute name, could you show x axis in desc order?", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC"}, "hardness": "Hard"}, {"nl_queries": "How many faculty members participate in each activity? Return the activity names and the number of faculty members by a bar chart, and display Y-axis in asc order.", "db_id": "activity_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT activity_name , count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT activity_name , count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID ORDER BY count(*) ASC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who was hired before 2002-06-21, return a bar chart about the distribution of job_id and the average of salary , and group by attribute job_id, I want to display X-axis from low to high order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID ASC"}, "hardness": "Hard"}, {"nl_queries": "Show the number of accounts for each customer in a bar chart grouping by customer's first name.", "db_id": "customers_and_invoices", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT customer_first_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id", "binning": ""}, "VQL": "Visualize BAR SELECT customer_first_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id"}, "hardness": "Medium"}, {"nl_queries": "How many dorms are there for each gender? Show me a bar chart.", "db_id": "dorm_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT gender , count(*) FROM dorm GROUP BY gender", "binning": ""}, "VQL": "Visualize BAR SELECT gender , count(*) FROM dorm GROUP BY gender"}, "hardness": "Easy"}, {"nl_queries": "For all employees who have the letters D or S in their first name, return a bar chart about the distribution of hire_date and the sum of manager_id bin hire_date by time, sort Y-axis from high to low order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(MANAGER_ID) DESC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, show me about the distribution of hire_date and the sum of employee_id bin hire_date by weekday in a bar chart, could you show y-axis in ascending order?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(EMPLOYEE_ID) ASC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "I want to know the number of districts of markets they are on.", "db_id": "phone_market", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT District , COUNT(District) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY District", "binning": ""}, "VQL": "Visualize BAR SELECT District , COUNT(District) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY District"}, "hardness": "Medium"}, {"nl_queries": "Compare the number of services by services with a bar graph, sort by the y axis from high to low.", "db_id": "station_weather", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) DESC"}, "hardness": "Medium"}, {"nl_queries": "Find the number of the dates of orders which belong to the customer named \"Jeramie\".", "db_id": "tracking_orders", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_order_placed , COUNT(date_order_placed) FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\"", "binning": "BIN date_order_placed BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_order_placed , COUNT(date_order_placed) FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\" BIN date_order_placed BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "Scatter plot to show max(price) on x axis and maximal score on y axis.", "db_id": "wine_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT max(Price) , max(Score) FROM WINE GROUP BY max(Price)", "binning": ""}, "VQL": "Visualize SCATTER SELECT max(Price) , max(Score) FROM WINE GROUP BY max(Price)"}, "hardness": "Easy"}, {"nl_queries": "Compare each editors' ages using a bar chart, sort by the Y in asc.", "db_id": "journal_committee", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , Age FROM editor ORDER BY Age ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , Age FROM editor ORDER BY Age ASC"}, "hardness": "Easy"}, {"nl_queries": "what are all the different product names, and how many complains has each received?, rank in asc by the Y-axis.", "db_id": "customer_complaints", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT product_name , count(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id = t2.product_id GROUP BY t1.product_name ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT product_name , count(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id = t2.product_id GROUP BY t1.product_name ORDER BY count(*) ASC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who was hired before 2002-06-21, a bar chart shows the distribution of job_id and the sum of manager_id , and group by attribute job_id, and list total number of manager id in ascending order please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) ASC"}, "hardness": "Hard"}, {"nl_queries": "Draw a bar chart for what is the average account balance of customers with credit score below 50 for the different account types?", "db_id": "loan_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type", "binning": ""}, "VQL": "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type"}, "hardness": "Medium"}, {"nl_queries": "Show the average amount of transactions for different lots, ordered by average amount of transactions by a scatter chart.", "db_id": "tracking_share_transactions", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT lot_id , avg(amount_of_transaction) FROM TRANSACTIONS AS T1 JOIN Transactions_Lots AS T2 ON T1.transaction_id = T2.transaction_id GROUP BY T2.lot_id ORDER BY avg(amount_of_transaction)", "binning": ""}, "VQL": "Visualize SCATTER SELECT lot_id , avg(amount_of_transaction) FROM TRANSACTIONS AS T1 JOIN Transactions_Lots AS T2 ON T1.transaction_id = T2.transaction_id GROUP BY T2.lot_id ORDER BY avg(amount_of_transaction)"}, "hardness": "Hard"}, {"nl_queries": "For all storms with at least 1 death, show me the dates active and the total number of deaths with a bar chart, and order in ascending by the Y.", "db_id": "storm_record", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Dates_active , Number_Deaths FROM storm WHERE number_deaths >= 1 ORDER BY Number_Deaths ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Dates_active , Number_Deaths FROM storm WHERE number_deaths >= 1 ORDER BY Number_Deaths ASC"}, "hardness": "Medium"}, {"nl_queries": "A bar chart for listing the number of the phone numbers of all employees, list by the total number in desc.", "db_id": "chinook_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY COUNT(Phone) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY COUNT(Phone) DESC"}, "hardness": "Medium"}, {"nl_queries": "Give me a histogram for what are the names of the singers and number of concerts for each person?", "db_id": "concert_singer", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id GROUP BY T2.singer_id", "binning": ""}, "VQL": "Visualize BAR SELECT Name , count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id GROUP BY T2.singer_id"}, "hardness": "Medium"}, {"nl_queries": "What is the relationship between  Team_ID and  All_Games_Percent , and group by attribute All_Games?", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY All_Games", "binning": ""}, "VQL": "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY All_Games"}, "hardness": "Easy"}, {"nl_queries": "For those records from the products and each product's manufacturer, what is the relationship between  code and  revenue , and group by attribute headquarter?", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter", "binning": ""}, "VQL": "Visualize SCATTER SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter"}, "hardness": "Medium"}, {"nl_queries": "I want to know the proportion of the number of templates for each template type code.", "db_id": "cre_Doc_Template_Mgt", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Template_Type_Code , COUNT(Template_Type_Code) FROM Templates GROUP BY Template_Type_Code", "binning": ""}, "VQL": "Visualize PIE SELECT Template_Type_Code , COUNT(Template_Type_Code) FROM Templates GROUP BY Template_Type_Code"}, "hardness": "Easy"}, {"nl_queries": "Find the last name and age of the student who has allergy to both milk and cat Show a bar chart, I want to order in desc by the X.", "db_id": "allergy_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT LName , Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy = \"Cat\") ORDER BY LName DESC", "binning": ""}, "VQL": "Visualize BAR SELECT LName , Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy = \"Cat\") ORDER BY LName DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "Draw a bar chart about the distribution of Sex and the average of Height , and group by attribute Sex, display in asc by the X-axis.", "db_id": "candidate_poll", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Sex , AVG(Height) FROM people GROUP BY Sex ORDER BY Sex ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Sex , AVG(Height) FROM people GROUP BY Sex ORDER BY Sex ASC"}, "hardness": "Medium"}, {"nl_queries": "What is the number of each allergie type the girl named Lisa has? Show bar chart.", "db_id": "allergy_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT AllergyType , COUNT(AllergyType) FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy = T2.Allergy JOIN Student AS T3 ON T3.StuID = T2.StuID WHERE T3.Fname = \"Lisa\" GROUP BY AllergyType", "binning": ""}, "VQL": "Visualize BAR SELECT AllergyType , COUNT(AllergyType) FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy = T2.Allergy JOIN Student AS T3 ON T3.StuID = T2.StuID WHERE T3.Fname = \"Lisa\" GROUP BY AllergyType"}, "hardness": "Hard"}, {"nl_queries": "How many captains with younger than 50 are in each rank, display y axis in asc order.", "db_id": "ship_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) ASC"}, "hardness": "Hard"}, {"nl_queries": "Find the total number of instructors for each department with a bar chart, show by the total number in asc.", "db_id": "college_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.dept_name , count(DISTINCT T3.id) FROM department AS T1 JOIN student AS T2 ON T1.dept_name = T2.dept_name JOIN instructor AS T3 ON T1.dept_name = T3.dept_name ORDER BY count(DISTINCT T3.id) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.dept_name , count(DISTINCT T3.id) FROM department AS T1 JOIN student AS T2 ON T1.dept_name = T2.dept_name JOIN instructor AS T3 ON T1.dept_name = T3.dept_name ORDER BY count(DISTINCT T3.id) ASC"}, "hardness": "Medium"}, {"nl_queries": "Visualize a bar chart for what is the name of each aircraft and how many flights does each one complete?, and could you sort by the Y-axis from high to low?", "db_id": "flight_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT name , count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid ORDER BY count(*) DESC"}, "hardness": "Hard"}, {"nl_queries": "Return a bar chart about the distribution of Nationality and the amount of Nationality , and group by attribute Nationality, list Y-axis in asc order.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nationality , COUNT(Nationality) FROM swimmer GROUP BY Nationality ORDER BY COUNT(Nationality) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM swimmer GROUP BY Nationality ORDER BY COUNT(Nationality) ASC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who was hired before 2002-06-21, show me about the distribution of hire_date and the amount of hire_date bin hire_date by weekday in a bar chart, and could you display the number of hire date in desc order?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY COUNT(HIRE_DATE) DESC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "For all employees who have the letters D or S in their first name, find job_id and the sum of employee_id , and group by attribute job_id, and visualize them by a bar chart, and display by the total number in asc.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, show me the trend about department_id over hire_date with a line chart, show by the X in desc.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE DESC", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE DESC"}, "hardness": "Medium"}, {"nl_queries": "Return the number of music festivals of each category in a bar chart, and could you order x axis in descending order?", "db_id": "music_4", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY Category DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY Category DESC"}, "hardness": "Medium"}, {"nl_queries": "Visualize a bar chart for what are total transaction amounts for each transaction type?, and could you sort in ascending by the Y-axis?", "db_id": "customers_and_invoices", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT transaction_type , sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT transaction_type , sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) ASC"}, "hardness": "Medium"}, {"nl_queries": "Display a bar chart for how many counties correspond to each police force?, and rank X in asc order.", "db_id": "county_public_safety", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force ASC"}, "hardness": "Medium"}, {"nl_queries": "What is the total number of every ship type by categorizing by nationality?, list from high to low by the x axis.", "db_id": "ship_mission", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY Type DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY Type DESC"}, "hardness": "Hard"}, {"nl_queries": "Find all the distinct visit dates, and count them by a bar chart", "db_id": "cre_Theme_park", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Visit_Date , COUNT(Visit_Date) FROM VISITS", "binning": "BIN Visit_Date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Visit_Date , COUNT(Visit_Date) FROM VISITS BIN Visit_Date BY WEEKDAY"}, "hardness": "Easy"}, {"nl_queries": "Show me about the correlation between  School_ID and  All_Games_Percent , and group by attribute All_Road in a scatter chart.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY All_Road", "binning": ""}, "VQL": "Visualize SCATTER SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY All_Road"}, "hardness": "Easy"}, {"nl_queries": "Find all years that have a movie that received a rating of 4 or 5, and sort them in increasing order of year, and count them by a line chart", "db_id": "movie_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT year , COUNT(year) FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID WHERE T2.stars >= 4  ORDER BY T1.year", "binning": "BIN year BY YEAR"}, "VQL": "Visualize LINE SELECT year , COUNT(year) FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID WHERE T2.stars >= 4  ORDER BY T1.year BIN year BY YEAR"}, "hardness": "Extra Hard"}, {"nl_queries": "Give me a bar chart for employee_id of each last name, could you display X-axis from high to low order?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT LAST_NAME , EMPLOYEE_ID FROM employees ORDER BY LAST_NAME DESC", "binning": ""}, "VQL": "Visualize BAR SELECT LAST_NAME , EMPLOYEE_ID FROM employees ORDER BY LAST_NAME DESC"}, "hardness": "Easy"}, {"nl_queries": "Count the number of programs broadcast for each time section of a day in a bar chart.", "db_id": "program_share", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Time_of_day , count(*) FROM broadcast GROUP BY time_of_day", "binning": ""}, "VQL": "Visualize BAR SELECT Time_of_day , count(*) FROM broadcast GROUP BY time_of_day"}, "hardness": "Easy"}, {"nl_queries": "Return a histogram on how many exhibitions has each artist had?, list total number from low to high order.", "db_id": "theme_gallery", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , count(*) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , count(*) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) ASC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, visualize a bar chart about the distribution of hire_date and the average of manager_id bin hire_date by time, and could you list y axis in ascending order?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY AVG(MANAGER_ID) ASC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "For all employees who have the letters D or S in their first name, return a scatter chart about the correlation between  salary and  manager_id .", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT SALARY , MANAGER_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'", "binning": ""}, "VQL": "Visualize SCATTER SELECT SALARY , MANAGER_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'"}, "hardness": "Hard"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, give me the comparison about department_id over the email , and rank x-axis in asc order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT EMAIL , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY EMAIL ASC", "binning": ""}, "VQL": "Visualize BAR SELECT EMAIL , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY EMAIL ASC"}, "hardness": "Medium"}, {"nl_queries": "For those employees whose first name does not contain the letter M, sum their salary by binning the hire date into the day of week interval for visualizing a bar chart, and list from high to low by the y axis.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name NOT LIKE '%M%'  ORDER BY SUM(SALARY) DESC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name NOT LIKE '%M%'  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "What is the oldest age for each gender of student? Return a bar chart, could you order by the Y in asc?", "db_id": "dorm_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Sex , max(age) FROM student GROUP BY Sex ORDER BY max(age) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Sex , max(age) FROM student GROUP BY Sex ORDER BY max(age) ASC"}, "hardness": "Easy"}, {"nl_queries": "Plot how many date from by grouped by date from as a bar graph, list Y in asc order.", "db_id": "tracking_grants_for_research", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_from , COUNT(date_from) FROM Project_Staff ORDER BY COUNT(date_from) ASC", "binning": "BIN date_from BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_from , COUNT(date_from) FROM Project_Staff ORDER BY COUNT(date_from) ASC BIN date_from BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "Show the number of competitions held in each city with a bar chart.", "db_id": "farm", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Official_Name , COUNT(Official_Name) FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY Official_Name", "binning": ""}, "VQL": "Visualize BAR SELECT Official_Name , COUNT(Official_Name) FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY Official_Name"}, "hardness": "Medium"}, {"nl_queries": "Show the number of professors who is in office DRE 102 hired in each weekday with a bar chart, display how many emp hiredate from high to low order.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT EMP_HIREDATE , COUNT(EMP_HIREDATE) FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num WHERE T2.prof_office = 'DRE 102'  ORDER BY COUNT(EMP_HIREDATE) DESC", "binning": "BIN EMP_HIREDATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT EMP_HIREDATE , COUNT(EMP_HIREDATE) FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num WHERE T2.prof_office = 'DRE 102'  ORDER BY COUNT(EMP_HIREDATE) DESC BIN EMP_HIREDATE BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "A bar chart for listing the number of the names of products that are not in any event, order in desc by the bars.", "db_id": "solvency_ii", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Product_Name , COUNT(Product_Name) FROM Products WHERE Product_ID NOT IN (SELECT Product_ID FROM Products_in_Events) GROUP BY Product_Name ORDER BY Product_Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Product_Name , COUNT(Product_Name) FROM Products WHERE Product_ID NOT IN (SELECT Product_ID FROM Products_in_Events) GROUP BY Product_Name ORDER BY Product_Name DESC"}, "hardness": "Hard"}, {"nl_queries": "Return a bar chart on how many musicals has each nominee been nominated for?, and could you order the total number in desc order?", "db_id": "musical", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nominee , COUNT(*) FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Nominee , COUNT(*) FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "Show me a bar chart for how many faculty members does each building have? List the result with the name of the building.", "db_id": "activity_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Building , count(*) FROM Faculty GROUP BY building", "binning": ""}, "VQL": "Visualize BAR SELECT Building , count(*) FROM Faculty GROUP BY building"}, "hardness": "Easy"}, {"nl_queries": "What are the number of the dates that have an average sea level pressure between 30.3 and 31?", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date , COUNT(date) FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31 GROUP BY date", "binning": ""}, "VQL": "Visualize LINE SELECT date , COUNT(date) FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31 GROUP BY date"}, "hardness": "Medium"}, {"nl_queries": "Draw a bar chart for what is the average number of stars that each reviewer awards for a movie?, could you display in ascending by the X-axis?", "db_id": "movie_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID GROUP BY T2.name ORDER BY name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT name , avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID GROUP BY T2.name ORDER BY name ASC"}, "hardness": "Hard"}, {"nl_queries": "A bar chart for what are the number of the wines that have prices lower than 50 and have appelations in Monterey county?, I want to sort by the Y in descending please.", "db_id": "wine_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.County = \"Monterey\" AND T2.price < 50 GROUP BY Name ORDER BY COUNT(Name) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.County = \"Monterey\" AND T2.price < 50 GROUP BY Name ORDER BY COUNT(Name) DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "A scatter chart shows the correlation between  Clean_Jerk and  Total .", "db_id": "body_builder", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Clean_Jerk , Total FROM body_builder", "binning": ""}, "VQL": "Visualize SCATTER SELECT Clean_Jerk , Total FROM body_builder"}, "hardness": "Easy"}, {"nl_queries": "Show different types of ships and the number of ships of each type Show bar chart, list by the Y in desc please.", "db_id": "ship_mission", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "How many courses are provided in each year? Visualize with a group line chart grouping by semester, could you list x axis in desc order?", "db_id": "college_2", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT year , count(*) FROM SECTION GROUP BY semester ,  year ORDER BY year DESC", "binning": ""}, "VQL": "Visualize LINE SELECT year , count(*) FROM SECTION GROUP BY semester ,  year ORDER BY year DESC"}, "hardness": "Hard"}, {"nl_queries": "Show me team_id by all road in a histogram, could you rank x-axis in descending order?", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Road , Team_ID FROM basketball_match ORDER BY All_Road DESC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Road , Team_ID FROM basketball_match ORDER BY All_Road DESC"}, "hardness": "Easy"}, {"nl_queries": "Give me a pie chart showing the proportion of ships' classes that do not have a captain.", "db_id": "ship_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY Class", "binning": ""}, "VQL": "Visualize PIE SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY Class"}, "hardness": "Medium"}, {"nl_queries": "List the description of all aircrafts, and count them by a pie chart", "db_id": "aircraft", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description", "binning": ""}, "VQL": "Visualize PIE SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description"}, "hardness": "Easy"}, {"nl_queries": "Plot the number of investor details by grouped by investor details as a bar graph, and order in ascending by the bar.", "db_id": "tracking_share_transactions", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS GROUP BY Investor_details ORDER BY Investor_details ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS GROUP BY Investor_details ORDER BY Investor_details ASC"}, "hardness": "Medium"}, {"nl_queries": "For each position, what is the average number of points for players in that position Plot them as bar chart, I want to order x axis in asc order.", "db_id": "sports_competition", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Position , avg(Points) FROM player GROUP BY POSITION ORDER BY Position ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Position , avg(Points) FROM player GROUP BY POSITION ORDER BY Position ASC"}, "hardness": "Medium"}, {"nl_queries": "Just show the first name and the manager id with a bar chart, and list by the bar in asc please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.FIRST_NAME , T1.MANAGER_ID FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T1.employee_id = T2.manager_id ORDER BY T1.FIRST_NAME ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.FIRST_NAME , T1.MANAGER_ID FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T1.employee_id = T2.manager_id ORDER BY T1.FIRST_NAME ASC"}, "hardness": "Hard"}, {"nl_queries": "What is the maximum age for each pet type? Please show me a bar chart.", "db_id": "pets_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT PetType , max(pet_age) FROM pets GROUP BY PetType", "binning": ""}, "VQL": "Visualize BAR SELECT PetType , max(pet_age) FROM pets GROUP BY PetType"}, "hardness": "Easy"}, {"nl_queries": "Show the total number of passengers of each location in a bar chart, and sort Y-axis in asc order.", "db_id": "train_station", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Location , sum(total_passengers) FROM station GROUP BY LOCATION ORDER BY sum(total_passengers) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Location , sum(total_passengers) FROM station GROUP BY LOCATION ORDER BY sum(total_passengers) ASC"}, "hardness": "Medium"}, {"nl_queries": "Show me how many home team by home team in a histogram", "db_id": "game_injury", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Home_team", "binning": ""}, "VQL": "Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Home_team"}, "hardness": "Easy"}, {"nl_queries": "For all employees who have the letters D or S in their first name, return a bar chart about the distribution of  job_id and the sum of employee_id , and group by attribute job_id.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID"}, "hardness": "Extra Hard"}, {"nl_queries": "Can you draw the trend of sum budget in billions over the creation?, could you display by the x-axis in descending please?", "db_id": "department_management", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Creation , SUM(Budget_in_Billions) FROM department GROUP BY Creation ORDER BY Creation DESC", "binning": ""}, "VQL": "Visualize LINE SELECT Creation , SUM(Budget_in_Billions) FROM department GROUP BY Creation ORDER BY Creation DESC"}, "hardness": "Medium"}, {"nl_queries": "Show me a pie chart for what are the different card types, and how many transactions have been made with each?", "db_id": "customers_card_transactions", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT card_type_code , count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id = T2.card_id GROUP BY T2.card_type_code", "binning": ""}, "VQL": "Visualize PIE SELECT card_type_code , count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id = T2.card_id GROUP BY T2.card_type_code"}, "hardness": "Medium"}, {"nl_queries": "Among all the claims, which claims have a claimed amount larger than the average? Please Bin the date it was settled into weekday interval and count them to show a bar chart.", "db_id": "insurance_policies", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Claims WHERE Amount_Claimed > ( SELECT avg(Amount_Claimed) FROM Claims )", "binning": "BIN Date_Claim_Settled BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Claims WHERE Amount_Claimed > ( SELECT avg(Amount_Claimed) FROM Claims ) BIN Date_Claim_Settled BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, return a bar chart about the distribution of last_name and employee_id , and I want to sort in ascending by the X.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT LAST_NAME , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY LAST_NAME ASC", "binning": ""}, "VQL": "Visualize BAR SELECT LAST_NAME , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY LAST_NAME ASC"}, "hardness": "Medium"}, {"nl_queries": "What are the number of the countries of all airlines whose names start with Orbit?, and rank from high to low by the y-axis.", "db_id": "flight_4", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT country , COUNT(country) FROM airlines WHERE name LIKE 'Orbit%' GROUP BY country ORDER BY COUNT(country) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT country , COUNT(country) FROM airlines WHERE name LIKE 'Orbit%' GROUP BY country ORDER BY COUNT(country) DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, return a bar chart about the distribution of name and the average of manufacturer , and group by attribute name, and order by the Y in ascending.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Manufacturer ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Manufacturer ASC"}, "hardness": "Hard"}, {"nl_queries": "Calculate the average amount for all the payments processed with Visa of each day of week using a bar chart, and display y-axis in asc order.", "db_id": "insurance_policies", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY AVG(Amount_Payment) ASC", "binning": "BIN Date_Payment_Made BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Date_Payment_Made , AVG(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY AVG(Amount_Payment) ASC BIN Date_Payment_Made BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "Find the organisation ids and details of the organisations which are involved i Visualize by bar chart, I want to show in asc by the Y.", "db_id": "tracking_grants_for_research", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T1.organisation_id ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T1.organisation_id ASC"}, "hardness": "Hard"}, {"nl_queries": "Show all paragraph texts for the document \"Customer reviews\", and count them by a bar chart, I want to sort in asc by the x axis.", "db_id": "cre_Doc_Template_Mgt", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Paragraph_Text , COUNT(Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = \"Customer reviews\" GROUP BY Paragraph_Text ORDER BY Paragraph_Text ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Paragraph_Text , COUNT(Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = \"Customer reviews\" GROUP BY Paragraph_Text ORDER BY Paragraph_Text ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "Visualize the relationship between  Team_ID and  All_Games_Percent , and group by attribute Team_Name.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY Team_Name", "binning": ""}, "VQL": "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY Team_Name"}, "hardness": "Easy"}, {"nl_queries": "Show the number of cities in each country with a  bar chart.", "db_id": "county_public_safety", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , COUNT(T2.Name) FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID GROUP BY T2.Name", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID GROUP BY T2.Name"}, "hardness": "Medium"}, {"nl_queries": "How many dogs who have gone through a treatment arrived in each year? Return a bar chart that bins arrived date by year interval.", "db_id": "dog_kennels", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_arrived , COUNT(date_arrived) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id", "binning": "BIN date_arrived BY YEAR"}, "VQL": "Visualize BAR SELECT date_arrived , COUNT(date_arrived) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id BIN date_arrived BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "Show each location and the number of cinemas there by a bar chart, and I want to show bar in asc order.", "db_id": "cinema", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Location , count(*) FROM cinema GROUP BY LOCATION ORDER BY Location ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Location , count(*) FROM cinema GROUP BY LOCATION ORDER BY Location ASC"}, "hardness": "Medium"}, {"nl_queries": "Bar graph to show total number of cloud cover from different date, list in desc by the total number.", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date , SUM(cloud_cover) FROM weather  ORDER BY SUM(cloud_cover) DESC", "binning": "BIN date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather  ORDER BY SUM(cloud_cover) DESC BIN date BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "Give me the comparison about All_Games_Percent over the All_Games , could you list bar in asc order please?", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Games , All_Games_Percent FROM basketball_match ORDER BY All_Games ASC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Games , All_Games_Percent FROM basketball_match ORDER BY All_Games ASC"}, "hardness": "Easy"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, visualize a bar chart about the distribution of  hire_date and the average of employee_id bin hire_date by time.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) BIN HIRE_DATE BY MONTH"}, "hardness": "Medium"}, {"nl_queries": "For all employees in the same department as Clara excluding Clara, bin their hire date into the month interval, and count how many employees in each month for a bar chart, rank from low to high by the Y.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE department_id = ( SELECT department_id FROM employees WHERE first_name = \"Clara\") AND first_name != \"Clara\"  ORDER BY COUNT(HIRE_DATE) ASC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE department_id = ( SELECT department_id FROM employees WHERE first_name = \"Clara\") AND first_name != \"Clara\"  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "Find the number of professors in each office with a bar chart, and order y axis in descending order.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT PROF_OFFICE , COUNT(PROF_OFFICE) FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num = T2.emp_num GROUP BY PROF_OFFICE ORDER BY COUNT(PROF_OFFICE) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT PROF_OFFICE , COUNT(PROF_OFFICE) FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num = T2.emp_num GROUP BY PROF_OFFICE ORDER BY COUNT(PROF_OFFICE) DESC"}, "hardness": "Hard"}, {"nl_queries": "Find the total student enrollment for different affiliation type schools Plot them as bar chart, could you rank in asc by the bar please?", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY Affiliation ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY Affiliation ASC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who did not have any job in the past, return a bar chart about the distribution of hire_date and the sum of manager_id bin hire_date by time, list y-axis in desc order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY SUM(MANAGER_ID) DESC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "Show me a bar chart for how many gymnasts are from each hometown?, and I want to show from low to high by the total number.", "db_id": "gymnast", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Hometown , COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Hometown , COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) ASC"}, "hardness": "Hard"}, {"nl_queries": "Find all the distinct visit dates, and count them by a line chart, I want to order x axis in desc order.", "db_id": "cre_Theme_park", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Visit_Date , COUNT(Visit_Date) FROM VISITS  ORDER BY Visit_Date DESC", "binning": "BIN Visit_Date BY YEAR"}, "VQL": "Visualize LINE SELECT Visit_Date , COUNT(Visit_Date) FROM VISITS  ORDER BY Visit_Date DESC BIN Visit_Date BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "A bar chart for what are the number of the name of rooms booked by customers whose first name has \"ROY\" in part?, sort by the the number of roomname in ascending please.", "db_id": "inn_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT roomName , COUNT(roomName) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId WHERE firstname LIKE '%ROY%' GROUP BY roomName ORDER BY COUNT(roomName) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT roomName , COUNT(roomName) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId WHERE firstname LIKE '%ROY%' GROUP BY roomName ORDER BY COUNT(roomName) ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "Find the number of departments in each school. Visualize by pie chart.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department", "binning": ""}, "VQL": "Visualize PIE SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department"}, "hardness": "Medium"}, {"nl_queries": "What is the proportion of results for each music festival? Counld you show me the result with a pie chart.", "db_id": "music_4", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result", "binning": ""}, "VQL": "Visualize PIE SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result"}, "hardness": "Easy"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, a line chart shows the trend of  salary over  hire_date .", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , SALARY FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40"}, "hardness": "Medium"}, {"nl_queries": "what are the event details of the services that have the type code 'Marriage', and count them by a pie chart", "db_id": "local_govt_in_alabama", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Event_Details , COUNT(Event_Details) FROM EVENTS AS T1 JOIN Services AS T2 ON T1.Service_ID = T2.Service_ID WHERE T2.Service_Type_Code = 'Marriage' GROUP BY Event_Details", "binning": ""}, "VQL": "Visualize PIE SELECT Event_Details , COUNT(Event_Details) FROM EVENTS AS T1 JOIN Services AS T2 ON T1.Service_ID = T2.Service_ID WHERE T2.Service_Type_Code = 'Marriage' GROUP BY Event_Details"}, "hardness": "Hard"}, {"nl_queries": "Give me a histogram for what is the number of professors for different school?, sort x axis in desc order.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE DESC", "binning": ""}, "VQL": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE DESC"}, "hardness": "Hard"}, {"nl_queries": "A bar chart shows the distribution of All_Neutral and ACC_Percent , and show in desc by the x axis.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral DESC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral DESC"}, "hardness": "Easy"}, {"nl_queries": "Return a bar chart about the distribution of  meter_200 and the sum of ID , and group by attribute meter_200.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_200 , SUM(ID) FROM swimmer GROUP BY meter_200", "binning": ""}, "VQL": "Visualize BAR SELECT meter_200 , SUM(ID) FROM swimmer GROUP BY meter_200"}, "hardness": "Easy"}, {"nl_queries": " Return a scatter chart showing the relationship between the number of tourists and tourist attraction id.", "db_id": "cre_Theme_park", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT T1.Tourist_Attraction_ID , COUNT(*) FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID", "binning": ""}, "VQL": "Visualize SCATTER SELECT T1.Tourist_Attraction_ID , COUNT(*) FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID"}, "hardness": "Medium"}, {"nl_queries": "What is the date of birth of every customer whose status code is 'Good Customer', and count them by a line chart, and show from low to high by the X-axis please.", "db_id": "driving_school", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date_of_birth , COUNT(date_of_birth) FROM Customers WHERE customer_status_code = 'Good Customer'  ORDER BY date_of_birth ASC", "binning": "BIN date_of_birth BY YEAR"}, "VQL": "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Customers WHERE customer_status_code = 'Good Customer'  ORDER BY date_of_birth ASC BIN date_of_birth BY YEAR"}, "hardness": "Hard"}, {"nl_queries": "Ignore movies whose director is NULL. For each director, what are the titles and the highest rating among all of their movies they reviewed? Draw the result by a pie chart.", "db_id": "movie_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT title , max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" GROUP BY title", "binning": ""}, "VQL": "Visualize PIE SELECT title , max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" GROUP BY title"}, "hardness": "Medium"}, {"nl_queries": "For those employees who did not have any job in the past, show me about the change of  department_id over  hire_date  in a line chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)"}, "hardness": "Easy"}, {"nl_queries": "How old is the average person for each job Show bar chart, list X-axis in descending order.", "db_id": "network_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT job , avg(age) FROM Person GROUP BY job ORDER BY job DESC", "binning": ""}, "VQL": "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY job DESC"}, "hardness": "Medium"}, {"nl_queries": "Show each employee's salary using a bar chart, note that use the last name of each employee, and sort by the X-axis in ascending.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT LAST_NAME , SALARY FROM employees ORDER BY LAST_NAME ASC", "binning": ""}, "VQL": "Visualize BAR SELECT LAST_NAME , SALARY FROM employees ORDER BY LAST_NAME ASC"}, "hardness": "Easy"}, {"nl_queries": "For those employees whose first name is ending with the letter m, visualize a bar chart to show each employee's salary by the last name, and could you show in desc by the y-axis please?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT LAST_NAME , SALARY FROM employees WHERE first_name LIKE '%m' ORDER BY SALARY DESC", "binning": ""}, "VQL": "Visualize BAR SELECT LAST_NAME , SALARY FROM employees WHERE first_name LIKE '%m' ORDER BY SALARY DESC"}, "hardness": "Hard"}, {"nl_queries": "What are the names and ids of customers whose address contains TN. Show bar chart.", "db_id": "department_store", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT customer_name , customer_id FROM customers WHERE customer_address LIKE \"%TN%\"", "binning": ""}, "VQL": "Visualize BAR SELECT customer_name , customer_id FROM customers WHERE customer_address LIKE \"%TN%\""}, "hardness": "Medium"}, {"nl_queries": "Show me about the distribution of Team_Name and ACC_Percent in a bar chart, and show by the Y-axis in desc.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Team_Name , ACC_Percent FROM basketball_match ORDER BY ACC_Percent DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Team_Name , ACC_Percent FROM basketball_match ORDER BY ACC_Percent DESC"}, "hardness": "Easy"}, {"nl_queries": "Give me the comparison about the amount of Sex over the  Sex , and group by attribute Sex by a bar chart.", "db_id": "candidate_poll", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex", "binning": ""}, "VQL": "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex"}, "hardness": "Easy"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, a bar chart shows the distribution of hire_date and the amount of hire_date bin hire_date by weekday, rank Y-axis in desc order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY COUNT(HIRE_DATE) DESC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, show me about the distribution of  name and the average of manufacturer , and group by attribute name in a bar chart.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name"}, "hardness": "Medium"}, {"nl_queries": "How many documents are created in each day? Bin the document date by weekday with a bar chart.", "db_id": "cre_Docs_and_Epenses", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code", "binning": "BIN Document_Date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code BIN Document_Date BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "Show the stars of each director by a bar chart, show by the Y in desc.", "db_id": "movie_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID ORDER BY stars DESC", "binning": ""}, "VQL": "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID ORDER BY stars DESC"}, "hardness": "Medium"}, {"nl_queries": "What are the number of the completion dates of all the tests that have result \"Fail\"?, display from low to high by the total number.", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_of_completion , COUNT(date_of_completion) FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = \"Fail\"  ORDER BY COUNT(date_of_completion) ASC", "binning": "BIN date_of_completion BY MONTH"}, "VQL": "Visualize BAR SELECT date_of_completion , COUNT(date_of_completion) FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = \"Fail\"  ORDER BY COUNT(date_of_completion) ASC BIN date_of_completion BY MONTH"}, "hardness": "Extra Hard"}, {"nl_queries": "Plot meter_100 by grouped by meter 300 as a bar graph, could you list in ascending by the bars?", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_300 , meter_100 FROM swimmer ORDER BY meter_300 ASC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_300 , meter_100 FROM swimmer ORDER BY meter_300 ASC"}, "hardness": "Easy"}, {"nl_queries": "For those employees who did not have any job in the past, return a bar chart about the distribution of job_id and the average of manager_id , and group by attribute job_id, list in asc by the Y-axis.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY AVG(MANAGER_ID) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY AVG(MANAGER_ID) ASC"}, "hardness": "Hard"}, {"nl_queries": "Return a bar chart about the distribution of meter_600 and meter_100 , and rank by the bars in ascending.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_600 , meter_100 FROM swimmer ORDER BY meter_600 ASC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_600 , meter_100 FROM swimmer ORDER BY meter_600 ASC"}, "hardness": "Easy"}, {"nl_queries": "What is the proportion of the number of course names in the course table.?", "db_id": "student_assessment", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name", "binning": ""}, "VQL": "Visualize PIE SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name"}, "hardness": "Easy"}, {"nl_queries": "For those records from the products and each product's manufacturer, show me about the distribution of name and the sum of revenue , and group by attribute name in a bar chart, and could you list in ascending by the X-axis?", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC"}, "hardness": "Hard"}, {"nl_queries": "Find the name of each user and number of tweets tweeted by each of them. Visualize by bar chart.", "db_id": "twitter_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid", "binning": ""}, "VQL": "Visualize BAR SELECT name , count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid"}, "hardness": "Medium"}, {"nl_queries": "Show me about the distribution of Sex and the amount of Sex , and group by attribute Sex in a bar chart, rank y-axis from high to low order.", "db_id": "candidate_poll", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY COUNT(Sex) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY COUNT(Sex) DESC"}, "hardness": "Medium"}, {"nl_queries": "A bar chart for what are the number of the category of music festivals with result \"Awarded\"?, could you list Y from low to high order?", "db_id": "music_4", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) ASC"}, "hardness": "Hard"}, {"nl_queries": "Give me the comparison about ID over the meter_700 by a bar chart, order in ascending by the Y.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_700 , ID FROM swimmer ORDER BY ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_700 , ID FROM swimmer ORDER BY ID ASC"}, "hardness": "Easy"}, {"nl_queries": "Bar graph to show meter_100 from different meter 700, and order by the meter_100 from high to low.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 DESC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 DESC"}, "hardness": "Easy"}, {"nl_queries": "For those employees who did not have any job in the past, a bar chart shows the distribution of hire_date and the sum of manager_id bin hire_date by time, could you display in ascending by the Y-axis?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY SUM(MANAGER_ID) ASC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY SUM(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "Find the number of students who took some course and got A or C and group by last name in a pie chart.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT STU_LNAME , COUNT(STU_LNAME) FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A' GROUP BY STU_LNAME", "binning": ""}, "VQL": "Visualize PIE SELECT STU_LNAME , COUNT(STU_LNAME) FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A' GROUP BY STU_LNAME"}, "hardness": "Extra Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, draw a bar chart about the distribution of headquarter and the sum of manufacturer , and group by attribute headquarter, and display Headquarter from high to low order please.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Headquarter , SUM(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Headquarter , SUM(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter DESC"}, "hardness": "Hard"}, {"nl_queries": "Find the number of courses provided in each year with a line chart, and show by the year in desc.", "db_id": "college_2", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT year , count(*) FROM SECTION ORDER BY year DESC", "binning": "BIN year BY YEAR"}, "VQL": "Visualize LINE SELECT year , count(*) FROM SECTION ORDER BY year DESC BIN year BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "For those employees who was hired before 2002-06-21, visualize a line chart about the change of  salary over  hire_date .", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21'", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21'"}, "hardness": "Easy"}, {"nl_queries": "A bar chart about what are the statuses and average populations of each city?, display by the x axis from low to high.", "db_id": "farm", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Status , avg(Population) FROM city GROUP BY Status ORDER BY Status ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Status , avg(Population) FROM city GROUP BY Status ORDER BY Status ASC"}, "hardness": "Medium"}, {"nl_queries": "List the distinct payment method codes with the number of orders mad in a bar chart, and list by the Y from high to low.", "db_id": "cre_Drama_Workshop_Groups", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "Please use a bar chart to compare the number of customers of each customer's move-in date, note that you should bin move-in date into Day Of Week interval, sort in descending by the Y.", "db_id": "local_govt_and_lot", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id  ORDER BY COUNT(date_moved_in) DESC", "binning": "BIN date_moved_in BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id  ORDER BY COUNT(date_moved_in) DESC BIN date_moved_in BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "A scatter chart shows the correlation between  ACC_Percent and  All_Games_Percent , and group by attribute ACC_Home.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT ACC_Percent , All_Games_Percent FROM basketball_match GROUP BY ACC_Home", "binning": ""}, "VQL": "Visualize SCATTER SELECT ACC_Percent , All_Games_Percent FROM basketball_match GROUP BY ACC_Home"}, "hardness": "Easy"}, {"nl_queries": "Does it have something interesting about the manager id and the location id?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT T1.MANAGER_ID , T2.LOCATION_ID FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T1.employee_id = T2.manager_id", "binning": ""}, "VQL": "Visualize SCATTER SELECT T1.MANAGER_ID , T2.LOCATION_ID FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T1.employee_id = T2.manager_id"}, "hardness": "Medium"}, {"nl_queries": "How many students are in each department Visualize by bar chart, and I want to order by the names in ascending.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY DEPT_CODE ASC", "binning": ""}, "VQL": "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY DEPT_CODE ASC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, show me about the distribution of  name and the average of code , and group by attribute name in a bar chart.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name"}, "hardness": "Medium"}, {"nl_queries": "Plot acc_percent by grouped by team name as a bar graph, and could you rank Y-axis in ascending order?", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Team_Name , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Team_Name , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC"}, "hardness": "Easy"}, {"nl_queries": "What are the ids and names of the architects who built at least 3 bridges , I want to rank in asc by the x-axis.", "db_id": "architecture", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.name , T1.id FROM architect AS T1 JOIN bridge AS T2 ON T1.id = T2.architect_id ORDER BY T1.name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.name , T1.id FROM architect AS T1 JOIN bridge AS T2 ON T1.id = T2.architect_id ORDER BY T1.name ASC"}, "hardness": "Medium"}, {"nl_queries": "Show the race class and number of races in each class with a bar chart, and sort in desc by the bars.", "db_id": "race_track", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY Class DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY Class DESC"}, "hardness": "Medium"}, {"nl_queries": "Draw a bar chart of name versus age", "db_id": "journal_committee", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , Age FROM editor", "binning": ""}, "VQL": "Visualize BAR SELECT Name , Age FROM editor"}, "hardness": "Easy"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, draw a scatter chart about the correlation between  commission_pct and  department_id .", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT COMMISSION_PCT , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40", "binning": ""}, "VQL": "Visualize SCATTER SELECT COMMISSION_PCT , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40"}, "hardness": "Medium"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, a scatter chart shows the correlation between  employee_id and  department_id .", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT EMPLOYEE_ID , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)", "binning": ""}, "VQL": "Visualize SCATTER SELECT EMPLOYEE_ID , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)"}, "hardness": "Extra Hard"}, {"nl_queries": "plot scatter on how many accounts does each customer have? List the number and customer id.", "db_id": "customers_and_invoices", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT count(*) , customer_id FROM Accounts GROUP BY customer_id", "binning": ""}, "VQL": "Visualize SCATTER SELECT count(*) , customer_id FROM Accounts GROUP BY customer_id"}, "hardness": "Easy"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, give me the comparison about department_id over the last_name by a bar chart, and could you rank from low to high by the DEPARTMENT_ID please?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT LAST_NAME , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY DEPARTMENT_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT LAST_NAME , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY DEPARTMENT_ID ASC"}, "hardness": "Medium"}, {"nl_queries": "For all employees who have the letters D or S in their first name, give me the comparison about the average of manager_id over the job_id , and group by attribute job_id, and order total number from high to low order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY AVG(MANAGER_ID) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY AVG(MANAGER_ID) DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "Return a bar chart about the distribution of  Start_from and the average of Shop_ID , and group by attribute Is_full_time and bin start_from by weekday.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Start_from , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time", "binning": "BIN Start_from BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Start_from , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time BIN Start_from BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "I want to see trend of how many receipt date by receipt date, and order by the X in desc please.", "db_id": "cre_Doc_Control_Systems", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT receipt_date , COUNT(receipt_date) FROM Documents  ORDER BY receipt_date DESC", "binning": "BIN receipt_date BY YEAR"}, "VQL": "Visualize LINE SELECT receipt_date , COUNT(receipt_date) FROM Documents  ORDER BY receipt_date DESC BIN receipt_date BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "Draw a bar chart for what are the cost and treatment type description of each treatment?, and display X-axis in ascending order please.", "db_id": "dog_kennels", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT treatment_type_description , SUM(cost_of_treatment) FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY treatment_type_description ORDER BY treatment_type_description ASC", "binning": ""}, "VQL": "Visualize BAR SELECT treatment_type_description , SUM(cost_of_treatment) FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY treatment_type_description ORDER BY treatment_type_description ASC"}, "hardness": "Hard"}, {"nl_queries": "Return a bar chart on how many students are older than 20 in each dorm?, and I want to display by the y-axis from high to low.", "db_id": "dorm_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT dorm_name , count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T1.age > 20 GROUP BY T3.dorm_name ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT dorm_name , count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T1.age > 20 GROUP BY T3.dorm_name ORDER BY count(*) DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "Bar chart x axis position y axis how many position", "db_id": "sports_competition", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING avg(Points) >= 20", "binning": ""}, "VQL": "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING avg(Points) >= 20"}, "hardness": "Medium"}, {"nl_queries": "A bar chart groups the lot details, and computes the number of each lot details, I want to display x axis in ascending order.", "db_id": "tracking_share_transactions", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT lot_details , COUNT(lot_details) FROM LOTS GROUP BY lot_details ORDER BY lot_details ASC", "binning": ""}, "VQL": "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM LOTS GROUP BY lot_details ORDER BY lot_details ASC"}, "hardness": "Medium"}, {"nl_queries": "List the name of physicians who took some appointment, and count them by a bar chart, and I want to list from high to low by the bars.", "db_id": "hospital_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID GROUP BY Name ORDER BY Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID GROUP BY Name ORDER BY Name DESC"}, "hardness": "Hard"}, {"nl_queries": "Just compare the number of journal committees of each editor using a histogram, display by the total number in descending please.", "db_id": "journal_committee", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.editor_id ORDER BY COUNT(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.editor_id ORDER BY COUNT(*) DESC"}, "hardness": "Hard"}, {"nl_queries": "Bar graph to show the total number from different address, and could you sort in ascending by the y axis?", "db_id": "coffee_shop", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Address , count(*) FROM member GROUP BY address ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Address , count(*) FROM member GROUP BY address ORDER BY count(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "What are the number of the names of the technicians that are assigned to repair machines with more point values than 70?, order Y in ascending order.", "db_id": "machine_repair", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID WHERE T2.value_points > 70 GROUP BY Name ORDER BY COUNT(Name) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID WHERE T2.value_points > 70 GROUP BY Name ORDER BY COUNT(Name) ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "What are the number of the venues of all the matches? Sort them in the descending order of match date.", "db_id": "city_record", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Venue , COUNT(Venue) FROM MATCH GROUP BY Venue ORDER BY date DESC", "binning": ""}, "VQL": "Visualize PIE SELECT Venue , COUNT(Venue) FROM MATCH GROUP BY Venue ORDER BY date DESC"}, "hardness": "Medium"}, {"nl_queries": "Give me the comparison about ACC_Percent over the ACC_Regular_Season by a bar chart, could you list in descending by the bar?", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match ORDER BY ACC_Regular_Season DESC", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match ORDER BY ACC_Regular_Season DESC"}, "hardness": "Easy"}, {"nl_queries": "Create a bar chart showing how many team across team, display by the y axis in ascending please.", "db_id": "wrestler", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Team , COUNT(Team) FROM elimination GROUP BY Team ORDER BY COUNT(Team) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Team , COUNT(Team) FROM elimination GROUP BY Team ORDER BY COUNT(Team) ASC"}, "hardness": "Medium"}, {"nl_queries": "What are the ids and details of events that have more than one participants, and order by the total number in desc.", "db_id": "local_govt_in_alabama", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Event_Details , T1.Event_ID FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY T1.Event_Details ORDER BY T1.Event_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Event_Details , T1.Event_ID FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY T1.Event_Details ORDER BY T1.Event_ID DESC"}, "hardness": "Hard"}, {"nl_queries": "Show me a line chart of the mean weight change over the year, binning by year", "db_id": "car_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Year , avg(Weight) FROM CARS_DATA", "binning": "BIN Year BY YEAR"}, "VQL": "Visualize LINE SELECT Year , avg(Weight) FROM CARS_DATA BIN Year BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "Show the relation between school id and all_games_percent for each ACC_Road using a scatter chart", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Road", "binning": ""}, "VQL": "Visualize SCATTER SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Road"}, "hardness": "Easy"}, {"nl_queries": "what is the total number of last names of all candidates?, and show Y-axis in desc order.", "db_id": "student_assessment", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT last_name , COUNT(last_name) FROM people GROUP BY last_name ORDER BY COUNT(last_name) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT last_name , COUNT(last_name) FROM people GROUP BY last_name ORDER BY COUNT(last_name) DESC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, find  last_name and  department_id , and visualize them by a bar chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT LAST_NAME , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)", "binning": ""}, "VQL": "Visualize BAR SELECT LAST_NAME , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)"}, "hardness": "Extra Hard"}, {"nl_queries": "Find All_Home and School_ID , and group by attribute ACC_Road, and visualize them by a bar chart, sort bars in ascending order.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC"}, "hardness": "Medium"}, {"nl_queries": "For all employees who have the letters D or S in their first name, visualize a bar chart about the distribution of hire_date and the average of manager_id bin hire_date by time, could you list by the y axis in descending please?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY AVG(MANAGER_ID) DESC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY AVG(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH"}, "hardness": "Extra Hard"}, {"nl_queries": "Return the name of rooms and the number of reservations made for each of the rooms to draw a bar chart, display from low to high by the Y-axis.", "db_id": "inn_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT roomName , count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT roomName , count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room ORDER BY count(*) ASC"}, "hardness": "Hard"}, {"nl_queries": "Find  meter_200 and the sum of meter_100 , and group by attribute meter_200, and visualize them by a bar chart.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_200 , SUM(meter_100) FROM swimmer GROUP BY meter_200", "binning": ""}, "VQL": "Visualize BAR SELECT meter_200 , SUM(meter_100) FROM swimmer GROUP BY meter_200"}, "hardness": "Easy"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, draw a bar chart about the distribution of last_name and department_id , and rank by the bar from high to low.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT LAST_NAME , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY LAST_NAME DESC", "binning": ""}, "VQL": "Visualize BAR SELECT LAST_NAME , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY LAST_NAME DESC"}, "hardness": "Medium"}, {"nl_queries": "Bar graph to show maximal weight from different pettype, list by the Y-axis in asc.", "db_id": "pets_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT PetType , max(weight) FROM pets GROUP BY PetType ORDER BY max(weight) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT PetType , max(weight) FROM pets GROUP BY PetType ORDER BY max(weight) ASC"}, "hardness": "Easy"}, {"nl_queries": "A bar chart for what are the number of the invoice dates for customers with the first name Astrid and the last name Gruber?, order from low to high by the Y-axis.", "db_id": "chinook_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT InvoiceDate , COUNT(InvoiceDate) FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.FirstName = \"Astrid\" AND LastName = \"Gruber\"  ORDER BY COUNT(InvoiceDate) ASC", "binning": "BIN InvoiceDate BY WEEKDAY"}, "VQL": "Visualize BAR SELECT InvoiceDate , COUNT(InvoiceDate) FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.FirstName = \"Astrid\" AND LastName = \"Gruber\"  ORDER BY COUNT(InvoiceDate) ASC BIN InvoiceDate BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "For each type, what is the average tonnage, show from low to high by the Type.", "db_id": "ship_mission", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY Type ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY Type ASC"}, "hardness": "Medium"}, {"nl_queries": "Return a bar chart about the distribution of ACC_Regular_Season and School_ID , and show in descending by the y axis.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Regular_Season , School_ID FROM basketball_match ORDER BY School_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Regular_Season , School_ID FROM basketball_match ORDER BY School_ID DESC"}, "hardness": "Easy"}, {"nl_queries": "Bar chart x axis meter 500 y axis meter_100, sort y axis in desc order.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_500 , meter_100 FROM swimmer ORDER BY meter_100 DESC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_500 , meter_100 FROM swimmer ORDER BY meter_100 DESC"}, "hardness": "Easy"}, {"nl_queries": "Show maximal lat from each city", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT city , max(lat) FROM station GROUP BY city", "binning": ""}, "VQL": "Visualize BAR SELECT city , max(lat) FROM station GROUP BY city"}, "hardness": "Easy"}, {"nl_queries": "How many different products are produced in each headquarter city. Visualize by bar chart.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Headquarter , count(DISTINCT T1.name) FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code", "binning": ""}, "VQL": "Visualize BAR SELECT Headquarter , count(DISTINCT T1.name) FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code"}, "hardness": "Medium"}, {"nl_queries": "What is the number of start date of each apartment booking for each year? Return a bar chart, could you display total number in asc order?", "db_id": "apartment_rentals", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id  ORDER BY COUNT(booking_start_date) ASC", "binning": "BIN booking_start_date BY YEAR"}, "VQL": "Visualize BAR SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id  ORDER BY COUNT(booking_start_date) ASC BIN booking_start_date BY YEAR"}, "hardness": "Hard"}, {"nl_queries": "For each type, how many ships are there Plot them as bar chart, rank by the X-axis in ascending.", "db_id": "ship_mission", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY Type ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY Type ASC"}, "hardness": "Medium"}, {"nl_queries": "Find the ids and names of stations from which at least 200 trips started. ", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT start_station_name , start_station_id FROM trip", "binning": ""}, "VQL": "Visualize BAR SELECT start_station_name , start_station_id FROM trip"}, "hardness": "Easy"}, {"nl_queries": "What is the average base price of different bed type? List bed type and average base price Plot them as bar chart, I want to display by the bar from high to low.", "db_id": "inn_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT bedType , avg(basePrice) FROM Rooms GROUP BY bedType ORDER BY bedType DESC", "binning": ""}, "VQL": "Visualize BAR SELECT bedType , avg(basePrice) FROM Rooms GROUP BY bedType ORDER BY bedType DESC"}, "hardness": "Medium"}, {"nl_queries": "Show institution names along with the number of proteins for each institution in a bar chart, and I want to display by the total number in ascending.", "db_id": "protein_institute", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Institution , count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id = T2.institution_id GROUP BY T1.institution_id ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Institution , count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id = T2.institution_id GROUP BY T1.institution_id ORDER BY count(*) ASC"}, "hardness": "Hard"}, {"nl_queries": "what are the numbers of wines for different grapes?, display by the X-axis in asc.", "db_id": "wine_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Grape , count(*) FROM WINE GROUP BY Grape ORDER BY Grape ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Grape , count(*) FROM WINE GROUP BY Grape ORDER BY Grape ASC"}, "hardness": "Medium"}, {"nl_queries": "What are the number of names of patients who made an appointment?, and I want to display x-axis in desc order.", "db_id": "hospital_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM appointment AS T1 JOIN patient AS T2 ON T1.patient = T2.ssn GROUP BY Name ORDER BY Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM appointment AS T1 JOIN patient AS T2 ON T1.patient = T2.ssn GROUP BY Name ORDER BY Name DESC"}, "hardness": "Hard"}, {"nl_queries": "Bar chart of total number of height from each sex, and list from high to low by the X-axis.", "db_id": "candidate_poll", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Sex , SUM(Height) FROM people GROUP BY Sex ORDER BY Sex DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Sex , SUM(Height) FROM people GROUP BY Sex ORDER BY Sex DESC"}, "hardness": "Medium"}, {"nl_queries": "How many drama workshop groups are there in each city? Return both the city and the count with a bar chart, and order in ascending by the x-axis.", "db_id": "cre_Drama_Workshop_Groups", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT City_Town , count(*) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID = T2.Address_ID GROUP BY T1.City_Town ORDER BY City_Town ASC", "binning": ""}, "VQL": "Visualize BAR SELECT City_Town , count(*) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID = T2.Address_ID GROUP BY T1.City_Town ORDER BY City_Town ASC"}, "hardness": "Hard"}, {"nl_queries": "A bar chart for what are the number of the completion dates of all the tests that have result \"Fail\"?, and list Y in ascending order.", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_of_completion , COUNT(date_of_completion) FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = \"Fail\"  ORDER BY COUNT(date_of_completion) ASC", "binning": "BIN date_of_completion BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_of_completion , COUNT(date_of_completion) FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = \"Fail\"  ORDER BY COUNT(date_of_completion) ASC BIN date_of_completion BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "Visualize a bar chart for what are the nationalities and their average ages of journalists?, order total number in desc order please.", "db_id": "news_report", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nationality , AVG(Age) FROM journalist GROUP BY Nationality ORDER BY AVG(Age) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Nationality , AVG(Age) FROM journalist GROUP BY Nationality ORDER BY AVG(Age) DESC"}, "hardness": "Medium"}, {"nl_queries": "Create a bar chart showing the total number across party, and sort in desc by the y-axis.", "db_id": "school_bus", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Party , count(*) FROM driver GROUP BY party ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Party , count(*) FROM driver GROUP BY party ORDER BY count(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "Create a bar chart showing age across hometown, and I want to rank Y from high to low order.", "db_id": "course_teach", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Hometown , Age FROM teacher ORDER BY Age DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Age DESC"}, "hardness": "Easy"}, {"nl_queries": "Give me the comparison about the average of Shop_ID over the Is_full_time , and group by attribute Is_full_time by a bar chart, I want to show from high to low by the Y-axis.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Is_full_time , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY AVG(Shop_ID) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Is_full_time , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY AVG(Shop_ID) DESC"}, "hardness": "Medium"}, {"nl_queries": "For all employees who have the letters D or S in their first name, what is the relationship between  commission_pct and  department_id ?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT COMMISSION_PCT , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'", "binning": ""}, "VQL": "Visualize SCATTER SELECT COMMISSION_PCT , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'"}, "hardness": "Hard"}, {"nl_queries": "Draw a bar chart for what is the average rating star for each reviewer?, order by the stars in ascending.", "db_id": "movie_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID GROUP BY T2.name ORDER BY avg(T1.stars) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT name , avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID GROUP BY T2.name ORDER BY avg(T1.stars) ASC"}, "hardness": "Hard"}, {"nl_queries": "Bin the hire date into Month interval, and then calculate the total salary of employees in each month for a bar chart, note that just select those employees without the letter M in their first name. ", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name NOT LIKE '%M%'", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name NOT LIKE '%M%' BIN HIRE_DATE BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "Please draw a bar chart to show the total number of different color, rank names in asc order.", "db_id": "mountain_photos", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT color , COUNT(color) FROM photos GROUP BY color ORDER BY color ASC", "binning": ""}, "VQL": "Visualize BAR SELECT color , COUNT(color) FROM photos GROUP BY color ORDER BY color ASC"}, "hardness": "Medium"}, {"nl_queries": "Show the number of heads of departments born in each state with a bar chart, and could you rank Y-axis in asc order?", "db_id": "department_management", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT born_state , COUNT(born_state) FROM head GROUP BY born_state ORDER BY COUNT(born_state) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT born_state , COUNT(born_state) FROM head GROUP BY born_state ORDER BY COUNT(born_state) ASC"}, "hardness": "Medium"}, {"nl_queries": "What is the gpa of the top 5 students with highest gpa? Show me a pie chart.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT STU_FNAME , STU_GPA FROM student ORDER BY stu_gpa DESC LIMIT 5", "binning": ""}, "VQL": "Visualize PIE SELECT STU_FNAME , STU_GPA FROM student ORDER BY stu_gpa DESC LIMIT 5"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, show me about the distribution of founder and the average of price , and group by attribute founder in a bar chart, and rank in desc by the x-axis.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Founder , AVG(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder ORDER BY Founder DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Founder , AVG(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder ORDER BY Founder DESC"}, "hardness": "Hard"}, {"nl_queries": "How many musicals has each nominee been nominated for Plot them as bar chart, I want to order by the X in desc.", "db_id": "musical", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nominee , COUNT(*) FROM musical GROUP BY Nominee ORDER BY Nominee DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Nominee , COUNT(*) FROM musical GROUP BY Nominee ORDER BY Nominee DESC"}, "hardness": "Medium"}, {"nl_queries": "List the first name of the students who do not have any food type allergy and count them in a bar chart, and rank how many fname in asc order.", "db_id": "allergy_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Fname , COUNT(Fname) FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\") GROUP BY Fname ORDER BY COUNT(Fname) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Fname , COUNT(Fname) FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\") GROUP BY Fname ORDER BY COUNT(Fname) ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "A bar chart about how many different professors are there for the different schools?, and show from low to high by the Y-axis.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY count(*) ASC"}, "hardness": "Hard"}, {"nl_queries": "Give me the trend about the average of Shop_ID over Start_from , and group by attribute Is_full_time and bin start_from by time, and list from low to high by the x-axis.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Start_from , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC", "binning": "BIN Start_from BY YEAR"}, "VQL": "Visualize LINE SELECT Start_from , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC BIN Start_from BY YEAR"}, "hardness": "Extra Hard"}, {"nl_queries": "Return a scatter on how many documents correspond with each project id?", "db_id": "cre_Docs_and_Epenses", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Project_ID , count(*) FROM Documents GROUP BY project_id", "binning": ""}, "VQL": "Visualize SCATTER SELECT Project_ID , count(*) FROM Documents GROUP BY project_id"}, "hardness": "Easy"}, {"nl_queries": "How many events are there for each party. Show a pie chart.", "db_id": "party_people", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id", "binning": ""}, "VQL": "Visualize PIE SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id"}, "hardness": "Medium"}, {"nl_queries": "Give me the trend about the amount of Start_from over Start_from , and group by attribute Is_full_time and bin start_from by time, and sort by the X-axis in ascending.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Start_from , COUNT(Start_from) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC", "binning": "BIN Start_from BY YEAR"}, "VQL": "Visualize LINE SELECT Start_from , COUNT(Start_from) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC BIN Start_from BY YEAR"}, "hardness": "Extra Hard"}, {"nl_queries": "Find the number of courses offered by Psychology department in each semester with a pie chart.", "db_id": "college_2", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT semester , COUNT(semester) FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' GROUP BY semester", "binning": ""}, "VQL": "Visualize PIE SELECT semester , COUNT(semester) FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' GROUP BY semester"}, "hardness": "Hard"}, {"nl_queries": "Find the number of rooms for each bed type Visualize by bar chart, and show in ascending by the bars.", "db_id": "inn_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT bedType , count(*) FROM Rooms GROUP BY bedType ORDER BY bedType ASC", "binning": ""}, "VQL": "Visualize BAR SELECT bedType , count(*) FROM Rooms GROUP BY bedType ORDER BY bedType ASC"}, "hardness": "Medium"}, {"nl_queries": "Draw a bar chart about the distribution of meter_700 and ID , and sort by the ID from high to low.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_700 , ID FROM swimmer ORDER BY ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_700 , ID FROM swimmer ORDER BY ID DESC"}, "hardness": "Easy"}, {"nl_queries": "Give me the comparison about the sum of meter_100 over the meter_200 , and group by attribute meter_200 by a bar chart, sort from high to low by the total number of meter 100 please.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_200 , SUM(meter_100) FROM swimmer GROUP BY meter_200 ORDER BY SUM(meter_100) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_200 , SUM(meter_100) FROM swimmer GROUP BY meter_200 ORDER BY SUM(meter_100) DESC"}, "hardness": "Medium"}, {"nl_queries": "Return a line chart about the change of the average of Employee_ID over Start_from bin start_from by time, could you display in ascending by the Start_from?", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Start_from , AVG(Employee_ID) FROM hiring  ORDER BY Start_from ASC", "binning": "BIN Start_from BY YEAR"}, "VQL": "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "Show name and distance for all aircrafts. Visualize by bar chart.", "db_id": "flight_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , distance FROM Aircraft", "binning": ""}, "VQL": "Visualize BAR SELECT name , distance FROM Aircraft"}, "hardness": "Easy"}, {"nl_queries": "Show the outcome code of mailshots along with the number of mailshots in each outcome code in a bar chart.", "db_id": "customers_campaigns_ecommerce", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT outcome_code , count(*) FROM mailshot_customers GROUP BY outcome_code", "binning": ""}, "VQL": "Visualize BAR SELECT outcome_code , count(*) FROM mailshot_customers GROUP BY outcome_code"}, "hardness": "Easy"}, {"nl_queries": "List the number of the venues of debates in ascending order of the number of audience.", "db_id": "debate", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Venue , COUNT(Venue) FROM debate GROUP BY Venue ORDER BY Num_of_Audience ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Venue , COUNT(Venue) FROM debate GROUP BY Venue ORDER BY Num_of_Audience ASC"}, "hardness": "Medium"}, {"nl_queries": "Find names of trains that run through stations for the local authority Chiltern, compare the total number of name in a bar graph.", "db_id": "station_weather", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , COUNT(name) FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id JOIN train AS t3 ON t2.train_id = t3.id WHERE t1.local_authority = \"Chiltern\" GROUP BY name", "binning": ""}, "VQL": "Visualize BAR SELECT name , COUNT(name) FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id JOIN train AS t3 ON t2.train_id = t3.id WHERE t1.local_authority = \"Chiltern\" GROUP BY name"}, "hardness": "Hard"}, {"nl_queries": "Show all ministers who do not belong to Progress Party, and count them by a bar chart, and order in asc by the Y.", "db_id": "party_people", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister ORDER BY COUNT(Minister) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister ORDER BY COUNT(Minister) ASC"}, "hardness": "Hard"}, {"nl_queries": "How many medications are prescribed for each brand Visualize by bar chart, and could you list Y-axis in asc order?", "db_id": "hospital_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , count(*) FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , count(*) FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand ORDER BY count(*) ASC"}, "hardness": "Hard"}, {"nl_queries": "Show the number of start dates of all the apartment bookings made by guests with gender code \"Female\" for each year in a bar chart, and sort total number from low to high order.", "db_id": "apartment_rentals", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id WHERE T2.gender_code = \"Female\"  ORDER BY COUNT(booking_start_date) ASC", "binning": "BIN booking_start_date BY YEAR"}, "VQL": "Visualize BAR SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id WHERE T2.gender_code = \"Female\"  ORDER BY COUNT(booking_start_date) ASC BIN booking_start_date BY YEAR"}, "hardness": "Extra Hard"}, {"nl_queries": "Return a bar chart on how many patients do each physician take care of? List their names and number of patients they take care of, and I want to sort by the bars in ascending.", "db_id": "hospital_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid ORDER BY T1.Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid ORDER BY T1.Name ASC"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, visualize a bar chart about the distribution of name and revenue , and group by attribute name, and display in asc by the X.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Name ASC"}, "hardness": "Hard"}, {"nl_queries": "Compute the total the total number across class room as a pie chart.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT CLASS_ROOM , count(*) FROM CLASS GROUP BY class_room", "binning": ""}, "VQL": "Visualize PIE SELECT CLASS_ROOM , count(*) FROM CLASS GROUP BY class_room"}, "hardness": "Easy"}, {"nl_queries": "Visualize a scatter chart about the correlation between  student_id and  address_id , and group by attribute other_details.", "db_id": "behavior_monitoring", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT student_id , address_id FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC", "binning": ""}, "VQL": "Visualize SCATTER SELECT student_id , address_id FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC"}, "hardness": "Medium"}, {"nl_queries": "Show names of technicians who are assigned to repair machines with value point more than 70, and count them by a bar chart", "db_id": "machine_repair", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID WHERE T2.value_points > 70 GROUP BY Name", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID WHERE T2.value_points > 70 GROUP BY Name"}, "hardness": "Hard"}, {"nl_queries": "How many parties of the time they leave office, binning the leave office into WEEKDAY interval", "db_id": "party_people", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Left_office , COUNT(Left_office) FROM party", "binning": "BIN Left_office BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Left_office , COUNT(Left_office) FROM party BIN Left_office BY WEEKDAY"}, "hardness": "Easy"}, {"nl_queries": "For each film, return the number of cinemas showing that fim in a bar chart.", "db_id": "cinema", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Title , COUNT(Title) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title", "binning": ""}, "VQL": "Visualize BAR SELECT Title , COUNT(Title) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title"}, "hardness": "Medium"}, {"nl_queries": "Return a bar chart about the distribution of  date_address_to and the sum of monthly_rental bin date_address_to by time.", "db_id": "behavior_monitoring", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC", "binning": "BIN date_address_to BY MONTH"}, "VQL": "Visualize BAR SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY MONTH"}, "hardness": "Medium"}, {"nl_queries": "Show all dates of transactions whose type code is \"SALE\", and count them by a bar chart, I want to order by the Y-axis in descending please.", "db_id": "tracking_share_transactions", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code = \"SALE\"  ORDER BY COUNT(date_of_transaction) DESC", "binning": "BIN date_of_transaction BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code = \"SALE\"  ORDER BY COUNT(date_of_transaction) DESC BIN date_of_transaction BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "Bar graph to show the total number from different building, and I want to order in descending by the y-axis.", "db_id": "activity_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Building , count(*) FROM Faculty GROUP BY building ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Building , count(*) FROM Faculty GROUP BY building ORDER BY count(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "How many courses each teacher taught? Show me a stacked bar chart The x-axis is the teacher's first name and group by course description, sort from low to high by the X-axis.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code GROUP BY CRS_DESCRIPTION ,  EMP_FNAME ORDER BY EMP_FNAME ASC", "binning": ""}, "VQL": "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code GROUP BY CRS_DESCRIPTION ,  EMP_FNAME ORDER BY EMP_FNAME ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about price over the name , and group by attribute headquarter by a bar chart, and order by the y axis in descending please.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter , T1.Name ORDER BY T1.Price DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter , T1.Name ORDER BY T1.Price DESC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, show me about the distribution of first_name and employee_id in a bar chart, and I want to list X-axis in ascending order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT FIRST_NAME , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY FIRST_NAME ASC", "binning": ""}, "VQL": "Visualize BAR SELECT FIRST_NAME , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY FIRST_NAME ASC"}, "hardness": "Medium"}, {"nl_queries": "Give me a bar chart that the X-axis is the date_moved_in and the Y-axis is Count them, please bin X-axis into Year interval.", "db_id": "local_govt_and_lot", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_moved_in , COUNT(date_moved_in) FROM customer_events", "binning": "BIN date_moved_in BY YEAR"}, "VQL": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM customer_events BIN date_moved_in BY YEAR"}, "hardness": "Easy"}, {"nl_queries": "Give me a bar chart that bins the year into day of the week interval, and return the average number of times the team Boston Red Stockings won in the postseasons.", "db_id": "baseball_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT year , AVG(count(*)) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings'", "binning": "BIN year BY WEEKDAY"}, "VQL": "Visualize BAR SELECT year , AVG(count(*)) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' BIN year BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "Count the section_description, and group by section_description with a bar chart, and rank by the x-axis in ascending.", "db_id": "student_transcripts_tracking", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description ORDER BY section_description ASC", "binning": ""}, "VQL": "Visualize BAR SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description ORDER BY section_description ASC"}, "hardness": "Medium"}, {"nl_queries": "Visualize a bar chart about the distribution of Nationality and the sum of meter_100 , and group by attribute Nationality, sort by the Y-axis in asc.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about the sum of code over the founder , and group by attribute founder by a bar chart, and order Y from high to low order please.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code DESC"}, "hardness": "Hard"}, {"nl_queries": "Give the proportion of what is the first name and GPA of every student that has a GPA lower than average?", "db_id": "college_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT STU_FNAME , SUM(STU_GPA) FROM student WHERE stu_gpa < (SELECT avg(stu_gpa) FROM student) GROUP BY STU_FNAME", "binning": ""}, "VQL": "Visualize PIE SELECT STU_FNAME , SUM(STU_GPA) FROM student WHERE stu_gpa < (SELECT avg(stu_gpa) FROM student) GROUP BY STU_FNAME"}, "hardness": "Medium"}, {"nl_queries": "How many employees does each role have? Plot a bar chart listing role id and number of employees, rank by the x-axis in asc.", "db_id": "cre_Doc_Control_Systems", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.role_code , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY T1.role_code ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.role_code , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY T1.role_code ASC"}, "hardness": "Hard"}, {"nl_queries": "Find the total number of students enrolled in the colleges that were founded after the year of 1850 for each affiliation type Show bar chart, I want to sort X-axis from low to high order please.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY Affiliation ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY Affiliation ASC"}, "hardness": "Hard"}, {"nl_queries": "A bar chart for listing the number of the name of physicians who took some appointment, list from low to high by the bars please.", "db_id": "hospital_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID GROUP BY Name ORDER BY Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID GROUP BY Name ORDER BY Name ASC"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, visualize a bar chart about the distribution of name and revenue , and group by attribute headquarter, and list by the X from low to high.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter , T1.Name ORDER BY T1.Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter , T1.Name ORDER BY T1.Name ASC"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, show me about the correlation between  manufacturer and  code  in a scatter chart.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT T1.Manufacturer , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code", "binning": ""}, "VQL": "Visualize SCATTER SELECT T1.Manufacturer , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code"}, "hardness": "Easy"}, {"nl_queries": "For those employees who did not have any job in the past, a bar chart shows the distribution of  job_id and the average of salary , and group by attribute job_id.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID"}, "hardness": "Medium"}, {"nl_queries": "For each submission, group its acceptance result and count them Visualize them in a bar chart, and show in ascending by the X please.", "db_id": "workshop_paper", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result ORDER BY Result ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result ORDER BY Result ASC"}, "hardness": "Medium"}, {"nl_queries": "Show all role codes and the number of employees in each role by a bar chart, show in ascending by the Y-axis please.", "db_id": "cre_Doc_Tracking_DB", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY count(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, a bar chart shows the distribution of name and the sum of price , and group by attribute name, sort in desc by the x-axis.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about the average of code over the  name , and group by attribute name.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name"}, "hardness": "Medium"}, {"nl_queries": "Return the date of birth for all the guests with gender code \"Male\", and count them by a bar chart, I want to order the number of date of birth from high to low order.", "db_id": "apartment_rentals", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY COUNT(date_of_birth) DESC", "binning": "BIN date_of_birth BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY COUNT(date_of_birth) DESC BIN date_of_birth BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, find headquarter and the average of code , and group by attribute headquarter, and visualize them by a bar chart, order by the X in asc.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter ASC"}, "hardness": "Hard"}, {"nl_queries": "What is the average base price of different bed type? List bed type and average base price Plot them as bar chart, display Y from low to high order.", "db_id": "inn_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT bedType , avg(basePrice) FROM Rooms GROUP BY bedType ORDER BY avg(basePrice) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT bedType , avg(basePrice) FROM Rooms GROUP BY bedType ORDER BY avg(basePrice) ASC"}, "hardness": "Medium"}, {"nl_queries": "What is total number of show times per dat for each cinema Show bar chart, order in descending by the bars.", "db_id": "cinema", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , sum(T1.show_times_per_day) FROM schedule AS T1 JOIN cinema AS T2 ON T1.cinema_id = T2.cinema_id GROUP BY T1.cinema_id ORDER BY Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , sum(T1.show_times_per_day) FROM schedule AS T1 JOIN cinema AS T2 ON T1.cinema_id = T2.cinema_id GROUP BY T1.cinema_id ORDER BY Name DESC"}, "hardness": "Hard"}, {"nl_queries": "Show the names of people and the number of times they have been on the affirmative side of debates, sort in desc by the y axis.", "db_id": "debate", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(*) FROM debate_people AS T1 JOIN people AS T2 ON T1.Affirmative = T2.People_ID GROUP BY T2.Name ORDER BY COUNT(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(*) FROM debate_people AS T1 JOIN people AS T2 ON T1.Affirmative = T2.People_ID GROUP BY T2.Name ORDER BY COUNT(*) DESC"}, "hardness": "Hard"}, {"nl_queries": "Count the number of players who enter hall of fame for each year with a line chart, rank X-axis in asc order please.", "db_id": "baseball_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid ORDER BY yearid ASC", "binning": ""}, "VQL": "Visualize LINE SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid ORDER BY yearid ASC"}, "hardness": "Medium"}, {"nl_queries": "What is the average prices of wines for each each Visualize by line chart, and rank from high to low by the x axis.", "db_id": "wine_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Year , avg(Price) FROM WINE GROUP BY YEAR ORDER BY Year DESC", "binning": ""}, "VQL": "Visualize LINE SELECT Year , avg(Price) FROM WINE GROUP BY YEAR ORDER BY Year DESC"}, "hardness": "Medium"}, {"nl_queries": "Show the number of courses for each course description in a bar chart, could you order in descending by the y axis?", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT CRS_DESCRIPTION , COUNT(CRS_DESCRIPTION) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num GROUP BY CRS_DESCRIPTION ORDER BY COUNT(CRS_DESCRIPTION) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT CRS_DESCRIPTION , COUNT(CRS_DESCRIPTION) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num GROUP BY CRS_DESCRIPTION ORDER BY COUNT(CRS_DESCRIPTION) DESC"}, "hardness": "Hard"}, {"nl_queries": "A bar chart showing the number of tourist attractions for each attraction name, sort Y from low to high order please.", "db_id": "cre_Theme_park", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(*) FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID ORDER BY COUNT(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(*) FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID ORDER BY COUNT(*) ASC"}, "hardness": "Hard"}, {"nl_queries": "Show me about the correlation between  Team_ID and  All_Games_Percent , and group by attribute ACC_Home in a scatter chart.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Home", "binning": ""}, "VQL": "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Home"}, "hardness": "Easy"}, {"nl_queries": "For those records from the products and each product's manufacturer, show me about the distribution of name and price , and group by attribute founder in a bar chart, and could you sort X-axis in descending order?", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder , T1.Name ORDER BY T1.Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder , T1.Name ORDER BY T1.Name DESC"}, "hardness": "Hard"}, {"nl_queries": "List the number of treatments in each day with a line chart that groups by date of treatment.", "db_id": "dog_kennels", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date_of_treatment , COUNT(date_of_treatment) FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id GROUP BY date_of_treatment", "binning": ""}, "VQL": "Visualize LINE SELECT date_of_treatment , COUNT(date_of_treatment) FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id GROUP BY date_of_treatment"}, "hardness": "Medium"}, {"nl_queries": "Plot season by how many season as a line chart, list in desc by the x axis please.", "db_id": "game_injury", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Season , COUNT(Season) FROM game  ORDER BY Season DESC", "binning": "BIN Season BY YEAR"}, "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game  ORDER BY Season DESC BIN Season BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "what are the names and id of courses having at most 2 sections?", "db_id": "student_transcripts_tracking", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.course_name , T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id", "binning": ""}, "VQL": "Visualize BAR SELECT T1.course_name , T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id"}, "hardness": "Easy"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, show me the trend about employee_id over hire_date with a line chart, and rank by the X-axis in ascending.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC"}, "hardness": "Hard"}, {"nl_queries": "Return the number of the completion date for all the tests that have \"Fail\" result.", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_of_completion , COUNT(date_of_completion) FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = \"Fail\"", "binning": "BIN date_of_completion BY MONTH"}, "VQL": "Visualize BAR SELECT date_of_completion , COUNT(date_of_completion) FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = \"Fail\" BIN date_of_completion BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "Display a bar chart for what is the total revenue of companies started by founder?, and could you list in asc by the total number of revenue?", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Founder , sum(revenue) FROM manufacturers GROUP BY founder ORDER BY sum(revenue) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Founder , sum(revenue) FROM manufacturers GROUP BY founder ORDER BY sum(revenue) ASC"}, "hardness": "Medium"}, {"nl_queries": "Return a bar chart on what are the title and maximum price of each film?", "db_id": "cinema", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title", "binning": ""}, "VQL": "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title"}, "hardness": "Easy"}, {"nl_queries": "For those employees who did not have any job in the past, visualize a bar chart about the distribution of job_id and the sum of department_id , and group by attribute job_id, I want to show by the bar from high to low.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY JOB_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY JOB_ID DESC"}, "hardness": "Hard"}, {"nl_queries": "Draw a bar chart about the distribution of Is_full_time and the sum of Employee_ID , and group by attribute Is_full_time, could you list by the x-axis from high to low?", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC"}, "hardness": "Medium"}, {"nl_queries": "Give me a pie chart showing the number of engineers for different skill description.", "db_id": "assets_maintenance", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT skill_description , COUNT(skill_description) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY skill_description", "binning": ""}, "VQL": "Visualize BAR SELECT skill_description , COUNT(skill_description) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY skill_description"}, "hardness": "Medium"}, {"nl_queries": "Show total number of id from each nationality, sort Nationality in desc order.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC"}, "hardness": "Medium"}, {"nl_queries": "Find Nationality and the amount of Nationality , and group by attribute Nationality, and visualize them by a bar chart, display by the bars in descending.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nationality , COUNT(Nationality) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC"}, "hardness": "Medium"}, {"nl_queries": "Bar chart of sum crs credit from each dept code, list from high to low by the X.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT DEPT_CODE , sum(crs_credit) FROM course GROUP BY dept_code ORDER BY DEPT_CODE DESC", "binning": ""}, "VQL": "Visualize BAR SELECT DEPT_CODE , sum(crs_credit) FROM course GROUP BY dept_code ORDER BY DEPT_CODE DESC"}, "hardness": "Medium"}, {"nl_queries": "Visualize a bar chart about the distribution of Nationality and the amount of Nationality , and group by attribute Nationality, could you sort in asc by the X-axis?", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nationality , COUNT(Nationality) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, find first_name and department_id , and visualize them by a bar chart, and sort by the bar in descending please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT FIRST_NAME , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY FIRST_NAME DESC", "binning": ""}, "VQL": "Visualize BAR SELECT FIRST_NAME , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY FIRST_NAME DESC"}, "hardness": "Medium"}, {"nl_queries": "Find the average age of journalists working on different role type, show the result with a pie chart.", "db_id": "news_report", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Work_Type , avg(t1.age) FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id = t2.journalist_id GROUP BY t2.work_type", "binning": ""}, "VQL": "Visualize PIE SELECT Work_Type , avg(t1.age) FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id = t2.journalist_id GROUP BY t2.work_type"}, "hardness": "Medium"}, {"nl_queries": "Find meter_200 and the average of meter_100 , and group by attribute meter_200, and visualize them by a bar chart, and display in desc by the x-axis.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_200 , AVG(meter_100) FROM swimmer GROUP BY meter_200 ORDER BY meter_200 DESC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_200 , AVG(meter_100) FROM swimmer GROUP BY meter_200 ORDER BY meter_200 DESC"}, "hardness": "Medium"}, {"nl_queries": "A bar chart about what are the average prices of products, grouped by manufacturer name?, I want to list by the y-axis in descending.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , avg(T1.Price) FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name ORDER BY avg(T1.Price) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , avg(T1.Price) FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name ORDER BY avg(T1.Price) DESC"}, "hardness": "Hard"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, give me the comparison about the sum of manager_id over the job_id , and group by attribute job_id by a bar chart, display by the y axis in desc please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees who did not have any job in the past, draw a line chart about the change of  employee_id over  hire_date .", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)"}, "hardness": "Easy"}, {"nl_queries": "A bar chart about the number of faluts for different fault description recorded in the logs.", "db_id": "assets_maintenance", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT fault_description , COUNT(fault_description) FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id GROUP BY fault_description", "binning": ""}, "VQL": "Visualize BAR SELECT fault_description , COUNT(fault_description) FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id GROUP BY fault_description"}, "hardness": "Medium"}, {"nl_queries": "Return the dates of birth for entrepreneurs who have either the investor Simon Woodroffe or Peter Jones, and count them by a bar chart, rank from low to high by the y axis.", "db_id": "entrepreneur", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Date_of_Birth , COUNT(Date_of_Birth) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Investor = \"Simon Woodroffe\" OR T1.Investor = \"Peter Jones\"  ORDER BY COUNT(Date_of_Birth) ASC", "binning": "BIN Date_of_Birth BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Date_of_Birth , COUNT(Date_of_Birth) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Investor = \"Simon Woodroffe\" OR T1.Investor = \"Peter Jones\"  ORDER BY COUNT(Date_of_Birth) ASC BIN Date_of_Birth BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "How many documents in different starting date? Return a bar chart binning starting date by weekday interval.", "db_id": "cre_Doc_Tracking_DB", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations", "binning": "BIN Date_in_Location_From BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations BIN Date_in_Location_From BY WEEKDAY"}, "hardness": "Easy"}, {"nl_queries": "Bar chart x axis sex y axis how many sex", "db_id": "candidate_poll", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex", "binning": ""}, "VQL": "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex"}, "hardness": "Easy"}, {"nl_queries": "Stack bar chart of school_id vs ACC_Road based on all home, and list x axis in desc order.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home DESC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home DESC"}, "hardness": "Medium"}, {"nl_queries": "A pie chart showing the total number of each ship's nationality.", "db_id": "ship_mission", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality", "binning": ""}, "VQL": "Visualize PIE SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality"}, "hardness": "Easy"}, {"nl_queries": "Show party names and the number of events for each party by a pie chart.", "db_id": "party_people", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id", "binning": ""}, "VQL": "Visualize PIE SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id"}, "hardness": "Medium"}, {"nl_queries": "Return the names and ids of customers who have TN in their address by a bar chart.", "db_id": "department_store", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT customer_name , customer_id FROM customers WHERE customer_address LIKE \"%TN%\"", "binning": ""}, "VQL": "Visualize BAR SELECT customer_name , customer_id FROM customers WHERE customer_address LIKE \"%TN%\""}, "hardness": "Medium"}, {"nl_queries": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities in a bar chart, and could you list catalog_entry_name from high to low order please?", "db_id": "product_catalog", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name DESC"}, "hardness": "Medium"}, {"nl_queries": "Give me the comparison about ACC_Percent over the ACC_Regular_Season , sort by the ACC_Percent in ascending.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC"}, "hardness": "Easy"}, {"nl_queries": "Show me about the distribution of All_Games and ACC_Percent in a bar chart, and could you display by the x-axis in asc?", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Games , ACC_Percent FROM basketball_match ORDER BY All_Games ASC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Games , ACC_Percent FROM basketball_match ORDER BY All_Games ASC"}, "hardness": "Easy"}, {"nl_queries": "For all employees who have the letters D or S in their first name, a bar chart shows the distribution of  hire_date and the average of manager_id bin hire_date by weekday.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "what is average age of male for different job title?", "db_id": "network_2", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job", "binning": ""}, "VQL": "Visualize PIE SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job"}, "hardness": "Medium"}, {"nl_queries": "List the number of games in each season and group by home team in a group line chart.", "db_id": "game_injury", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ,  Season", "binning": ""}, "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ,  Season"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, a bar chart shows the distribution of name and revenue , and group by attribute name, order by the y-axis in desc.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T2.Revenue DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T2.Revenue DESC"}, "hardness": "Hard"}, {"nl_queries": "A bar chart for what are the number of the dates with a maximum temperature higher than 85?, and could you display from low to high by the y axis?", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date , COUNT(date) FROM weather WHERE max_temperature_f > 85  ORDER BY COUNT(date) ASC", "binning": "BIN date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE max_temperature_f > 85  ORDER BY COUNT(date) ASC BIN date BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "For those employees who did not have any job in the past, draw a bar chart about the distribution of job_id and the sum of department_id , and group by attribute job_id, could you sort x-axis from high to low order please?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY JOB_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY JOB_ID DESC"}, "hardness": "Hard"}, {"nl_queries": "Give me a bar chart that the X-axis is the date_moved_in and the Y-axis is Count them, please bin X-axis into Day of Week interval, I want to order from low to high by the how many date moved in.", "db_id": "local_govt_and_lot", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_moved_in , COUNT(date_moved_in) FROM customer_events  ORDER BY COUNT(date_moved_in) ASC", "binning": "BIN date_moved_in BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM customer_events  ORDER BY COUNT(date_moved_in) ASC BIN date_moved_in BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, give me the comparison about  commission_pct over the  phone_number .", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT PHONE_NUMBER , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)", "binning": ""}, "VQL": "Visualize BAR SELECT PHONE_NUMBER , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)"}, "hardness": "Extra Hard"}, {"nl_queries": "Pie chart about how many eliminations did each team have?", "db_id": "wrestler", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Team , COUNT(*) FROM elimination GROUP BY Team", "binning": ""}, "VQL": "Visualize PIE SELECT Team , COUNT(*) FROM elimination GROUP BY Team"}, "hardness": "Easy"}, {"nl_queries": "On what day was the order with invoice number 10 placed, and count them by a bar chart", "db_id": "tracking_orders", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_order_placed , COUNT(date_order_placed) FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.invoice_number = 10", "binning": "BIN date_order_placed BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_order_placed , COUNT(date_order_placed) FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.invoice_number = 10 BIN date_order_placed BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "Give me the comparison about  meter_100 over the  meter_700 .", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_700 , meter_100 FROM swimmer", "binning": ""}, "VQL": "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer"}, "hardness": "Easy"}, {"nl_queries": "For those records from the products and each product's manufacturer, return a bar chart about the distribution of  name and the amount of name , and group by attribute name.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name"}, "hardness": "Medium"}, {"nl_queries": "A bar chart about what are the names of the singers and number of concerts for each person?", "db_id": "concert_singer", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id GROUP BY T2.singer_id", "binning": ""}, "VQL": "Visualize BAR SELECT Name , count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id GROUP BY T2.singer_id"}, "hardness": "Medium"}, {"nl_queries": "Bar graph to show how many asset make from different asset make, show total number in asc order.", "db_id": "assets_maintenance", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT asset_make , COUNT(asset_make) FROM Assets GROUP BY asset_make ORDER BY COUNT(asset_make) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT asset_make , COUNT(asset_make) FROM Assets GROUP BY asset_make ORDER BY COUNT(asset_make) ASC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, a bar chart shows the distribution of  name and the average of code , and group by attribute name.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about the average of revenue over the  founder , and group by attribute founder by a bar chart.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Founder , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder", "binning": ""}, "VQL": "Visualize BAR SELECT Founder , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder"}, "hardness": "Medium"}, {"nl_queries": "Return a bar chart on how many wines are there for each grape?", "db_id": "wine_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Grape , count(*) FROM WINE GROUP BY Grape", "binning": ""}, "VQL": "Visualize BAR SELECT Grape , count(*) FROM WINE GROUP BY Grape"}, "hardness": "Easy"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, what is the relationship between  employee_id and  commission_pct ?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT EMPLOYEE_ID , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)", "binning": ""}, "VQL": "Visualize SCATTER SELECT EMPLOYEE_ID , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)"}, "hardness": "Extra Hard"}, {"nl_queries": "Give me the comparison about the sum of School_ID over the ACC_Road , and group by attribute ACC_Road by a bar chart, and I want to show by the Y in ascending.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Road , SUM(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY SUM(School_ID) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Road , SUM(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY SUM(School_ID) ASC"}, "hardness": "Medium"}, {"nl_queries": "Give me the comparison about  meter_100 over the  meter_500  by a bar chart.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_500 , meter_100 FROM swimmer", "binning": ""}, "VQL": "Visualize BAR SELECT meter_500 , meter_100 FROM swimmer"}, "hardness": "Easy"}, {"nl_queries": "Show the number of start dates of all the apartment bookings for each year with a bar chart, sort by the y axis in ascending.", "db_id": "apartment_rentals", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id  ORDER BY COUNT(booking_start_date) ASC", "binning": "BIN booking_start_date BY YEAR"}, "VQL": "Visualize BAR SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id  ORDER BY COUNT(booking_start_date) ASC BIN booking_start_date BY YEAR"}, "hardness": "Hard"}, {"nl_queries": "Show minimal age from each job, and order minimal age from low to high order.", "db_id": "network_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT job , min(age) FROM Person GROUP BY job ORDER BY min(age) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY min(age) ASC"}, "hardness": "Easy"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, show me about the distribution of phone_number and manager_id in a bar chart, list names in asc order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT PHONE_NUMBER , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY PHONE_NUMBER ASC", "binning": ""}, "VQL": "Visualize BAR SELECT PHONE_NUMBER , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY PHONE_NUMBER ASC"}, "hardness": "Medium"}, {"nl_queries": "For each citizenship, what is the maximum net worth Visualize by bar chart, and sort Y in asc order.", "db_id": "singer", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY max(Net_Worth_Millions) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY max(Net_Worth_Millions) ASC"}, "hardness": "Easy"}, {"nl_queries": "A bar chart shows the distribution of All_Road and School_ID , rank by the X from low to high.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Road , School_ID FROM basketball_match ORDER BY All_Road ASC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Road , School_ID FROM basketball_match ORDER BY All_Road ASC"}, "hardness": "Easy"}, {"nl_queries": "Find the name and training hours of players whose hours are below 1500 Show bar chart, show pName in asc order.", "db_id": "soccer_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT pName , HS FROM Player WHERE HS < 1500 ORDER BY pName ASC", "binning": ""}, "VQL": "Visualize BAR SELECT pName , HS FROM Player WHERE HS < 1500 ORDER BY pName ASC"}, "hardness": "Medium"}, {"nl_queries": "Show me a bar chart for what are the total enrollments of universities of each affiliation type?, I want to order by the names in desc.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY Affiliation DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY Affiliation DESC"}, "hardness": "Medium"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, find  job_id and the average of department_id , and group by attribute job_id, and visualize them by a bar chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID"}, "hardness": "Hard"}, {"nl_queries": "A bar chart shows the distribution of  ACC_Road and  Team_ID , and group by attribute ACC_Home.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road"}, "hardness": "Extra Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, find headquarter and the sum of price , and group by attribute headquarter, and visualize them by a bar chart, order by the x axis in descending please.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Headquarter , SUM(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Headquarter , SUM(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter DESC"}, "hardness": "Hard"}, {"nl_queries": "Draw a bar chart of location versus how many location", "db_id": "wrestler", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Location , COUNT(Location) FROM wrestler GROUP BY Location", "binning": ""}, "VQL": "Visualize BAR SELECT Location , COUNT(Location) FROM wrestler GROUP BY Location"}, "hardness": "Easy"}, {"nl_queries": "How many gymnasts are from each hometown Plot them as bar chart, order x axis in desc order.", "db_id": "gymnast", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Hometown , COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown ORDER BY Hometown DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Hometown , COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown ORDER BY Hometown DESC"}, "hardness": "Hard"}, {"nl_queries": "Give me the comparison about School_ID over the All_Home , and group by attribute ACC_Road, and display from low to high by the Y.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID ASC"}, "hardness": "Medium"}, {"nl_queries": "Show the name of each county along with the corresponding number of delegates from that county Plot them as bar chart, and order Y in desc order.", "db_id": "election", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id ORDER BY COUNT(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id ORDER BY COUNT(*) DESC"}, "hardness": "Hard"}, {"nl_queries": "For each user, return the name and the average rating of reviews given by them Plot them as bar chart, and I want to display X-axis from high to low order.", "db_id": "epinions_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , avg(T2.rating) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id GROUP BY T2.u_id ORDER BY name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT name , avg(T2.rating) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id GROUP BY T2.u_id ORDER BY name DESC"}, "hardness": "Hard"}, {"nl_queries": "Show different parties of people along with the number of people in each party Plot them as bar chart, display by the names in descending.", "db_id": "debate", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Party , COUNT(*) FROM people GROUP BY Party ORDER BY Party DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Party , COUNT(*) FROM people GROUP BY Party ORDER BY Party DESC"}, "hardness": "Medium"}, {"nl_queries": "Show me a scatter plot of advisor and the total number for .", "db_id": "allergy_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Advisor , count(*) FROM Student GROUP BY advisor", "binning": ""}, "VQL": "Visualize SCATTER SELECT Advisor , count(*) FROM Student GROUP BY advisor"}, "hardness": "Easy"}, {"nl_queries": "Give me a bar chart showing the number of products supplied by supplier id 3 for different product type code, and could you list by the bar from low to high?", "db_id": "department_store", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT product_type_code , COUNT(product_type_code) FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id WHERE T1.supplier_id = 3 GROUP BY product_type_code ORDER BY product_type_code ASC", "binning": ""}, "VQL": "Visualize BAR SELECT product_type_code , COUNT(product_type_code) FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id WHERE T1.supplier_id = 3 GROUP BY product_type_code ORDER BY product_type_code ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "Show the names and their average grades of each high schooler. ", "db_id": "network_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , AVG(grade) FROM Highschooler GROUP BY name", "binning": ""}, "VQL": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name"}, "hardness": "Easy"}, {"nl_queries": "Return a bar chart for what is the number of areas for all appellations?, I want to display from low to high by the x-axis.", "db_id": "wine_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Area , COUNT(Area) FROM APPELLATIONS GROUP BY Area ORDER BY Area ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Area , COUNT(Area) FROM APPELLATIONS GROUP BY Area ORDER BY Area ASC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, show me about the distribution of  job_id and  salary  in a bar chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SALARY FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SALARY FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)"}, "hardness": "Extra Hard"}, {"nl_queries": "Show me about the distribution of  date_address_from and the average of monthly_rental bin date_address_from by time in a bar chart.", "db_id": "behavior_monitoring", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC", "binning": "BIN date_address_from BY YEAR"}, "VQL": "Visualize BAR SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "What is the maximum age for each pet type? Please show me a bar chart, show in desc by the y-axis please.", "db_id": "pets_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT PetType , max(pet_age) FROM pets GROUP BY PetType ORDER BY max(pet_age) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT PetType , max(pet_age) FROM pets GROUP BY PetType ORDER BY max(pet_age) DESC"}, "hardness": "Easy"}, {"nl_queries": "Find the number of scientists involved for each project name, display from low to high by the names.", "db_id": "scientist_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.name ORDER BY Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.name ORDER BY Name ASC"}, "hardness": "Hard"}, {"nl_queries": "Show the relationship between minimum product price and maximum product price and group by product type code in a group scatter chart.", "db_id": "department_store", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT max(product_price) , min(product_price) FROM products GROUP BY product_type_code", "binning": ""}, "VQL": "Visualize SCATTER SELECT max(product_price) , min(product_price) FROM products GROUP BY product_type_code"}, "hardness": "Easy"}, {"nl_queries": "Show me about the distribution of  dept_name and the amount of dept_name , and group by attribute dept_name in a bar chart.", "db_id": "college_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT dept_name , COUNT(dept_name) FROM instructor GROUP BY dept_name ORDER BY salary", "binning": ""}, "VQL": "Visualize BAR SELECT dept_name , COUNT(dept_name) FROM instructor GROUP BY dept_name ORDER BY salary"}, "hardness": "Medium"}, {"nl_queries": "Bar chart x axis event details y axis how many event details, sort Y-axis in desc order.", "db_id": "local_govt_in_alabama", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Event_Details , COUNT(Event_Details) FROM EVENTS GROUP BY Event_Details ORDER BY COUNT(Event_Details) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Event_Details , COUNT(Event_Details) FROM EVENTS GROUP BY Event_Details ORDER BY COUNT(Event_Details) DESC"}, "hardness": "Medium"}, {"nl_queries": "Return a bar chart on how many bookings does each booking status have? List the booking status code and the number of corresponding bookings, and rank by the y-axis in asc.", "db_id": "apartment_rentals", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "Bar chart x axis lot details y axis the number of lot details, and sort by the names in asc.", "db_id": "tracking_share_transactions", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT lot_details , COUNT(lot_details) FROM LOTS GROUP BY lot_details ORDER BY lot_details ASC", "binning": ""}, "VQL": "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM LOTS GROUP BY lot_details ORDER BY lot_details ASC"}, "hardness": "Medium"}, {"nl_queries": "Draw a pie chart about the proportion of  All_Road and  All_Games_Percent.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT All_Road , All_Games_Percent FROM basketball_match", "binning": ""}, "VQL": "Visualize PIE SELECT All_Road , All_Games_Percent FROM basketball_match"}, "hardness": "Easy"}, {"nl_queries": "Show the of customer addresses and group by premises type and address type code in a stacked bar chart The x-axis is premises type, and I want to sort in descending by the total number please.", "db_id": "customers_campaigns_ecommerce", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT premises_type , COUNT(premises_type) FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id = T2.premise_id GROUP BY address_type_code ,  premises_type ORDER BY COUNT(premises_type) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT premises_type , COUNT(premises_type) FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id = T2.premise_id GROUP BY address_type_code ,  premises_type ORDER BY COUNT(premises_type) DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "A bar chart for what are the number of the countries of all airlines whose names start with Orbit?", "db_id": "flight_4", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT country , COUNT(country) FROM airlines WHERE name LIKE 'Orbit%' GROUP BY country", "binning": ""}, "VQL": "Visualize BAR SELECT country , COUNT(country) FROM airlines WHERE name LIKE 'Orbit%' GROUP BY country"}, "hardness": "Hard"}, {"nl_queries": "Create a bar chart showing the total number across city code, and sort by the total number from high to low.", "db_id": "dorm_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT city_code , count(*) FROM student GROUP BY city_code ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT city_code , count(*) FROM student GROUP BY city_code ORDER BY count(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "Bar chart x axis meter 700 y axis id, could you show in ascending by the meter_700?", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_700 , ID FROM swimmer ORDER BY meter_700 ASC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_700 , ID FROM swimmer ORDER BY meter_700 ASC"}, "hardness": "Easy"}, {"nl_queries": "Return a histogram on what are the names and prices of all products in the store?, and I want to sort by the x axis in asc.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , AVG(Price) FROM products GROUP BY Name ORDER BY Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , AVG(Price) FROM products GROUP BY Name ORDER BY Name ASC"}, "hardness": "Medium"}, {"nl_queries": "Bar chart, the-axis is the state, and the Y axis is each state's the smallest enrollment, could you show by the X-axis in desc?", "db_id": "soccer_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT state , min(enr) FROM college GROUP BY state ORDER BY state DESC", "binning": ""}, "VQL": "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY state DESC"}, "hardness": "Medium"}, {"nl_queries": "Show me about the distribution of All_Neutral and All_Games_Percent in a bar chart, list by the names in desc.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral DESC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral DESC"}, "hardness": "Easy"}, {"nl_queries": "For those products with a price between 60 and 120, a bar chart shows the distribution of name and manufacturer , and display x axis in descending order.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , Manufacturer FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , Manufacturer FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name DESC"}, "hardness": "Medium"}, {"nl_queries": "Draw a bar chart for what are the names and the average grades for each high schooler?, sort Y from high to low order.", "db_id": "network_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) DESC"}, "hardness": "Medium"}, {"nl_queries": "Find the last name of female (sex is F) students in the descending order of age, and count them by a bar chart", "db_id": "college_3", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT LName , COUNT(LName) FROM STUDENT WHERE Sex = \"F\" GROUP BY LName ORDER BY Age DESC", "binning": ""}, "VQL": "Visualize BAR SELECT LName , COUNT(LName) FROM STUDENT WHERE Sex = \"F\" GROUP BY LName ORDER BY Age DESC"}, "hardness": "Hard"}, {"nl_queries": "For all employees who have the letters D or S in their first name, draw a bar chart about the distribution of hire_date and the amount of hire_date bin hire_date by weekday, and rank total number from high to low order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY COUNT(HIRE_DATE) DESC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "How many orchestras does each record company manage Show bar chart, show by the y-axis in desc.", "db_id": "orchestra", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "What is the total number of each ship type? Give me a bar chart, I want to show from low to high by the y axis.", "db_id": "ship_mission", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY COUNT(Type) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY COUNT(Type) ASC"}, "hardness": "Medium"}, {"nl_queries": "Visualize a bar chart about the distribution of  Start_from and the sum of Shop_ID bin start_from by weekday.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Start_from , SUM(Shop_ID) FROM hiring", "binning": "BIN Start_from BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Start_from , SUM(Shop_ID) FROM hiring BIN Start_from BY WEEKDAY"}, "hardness": "Easy"}, {"nl_queries": "Find the names of swimmers who has a result of \"win\", and count them by a bar chart, rank X in asc order.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , COUNT(name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Win' GROUP BY name ORDER BY name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT name , COUNT(name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Win' GROUP BY name ORDER BY name ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees who was hired before 2002-06-21, give me the comparison about the sum of department_id over the job_id , and group by attribute job_id by a bar chart, and display by the total number of department id from high to low.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) DESC"}, "hardness": "Hard"}, {"nl_queries": "Show me how many destination by destination in a histogram, and order y-axis in desc order.", "db_id": "flight_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT destination , COUNT(destination) FROM Flight GROUP BY destination ORDER BY COUNT(destination) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT destination , COUNT(destination) FROM Flight GROUP BY destination ORDER BY COUNT(destination) DESC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, what is the relationship between  code and  manufacturer ?", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code", "binning": ""}, "VQL": "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code"}, "hardness": "Easy"}, {"nl_queries": "What is the sum of capacity of cinemas open for each year? Return a line chart.", "db_id": "cinema", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Openning_year , SUM(Capacity) FROM cinema", "binning": "BIN Openning_year BY YEAR"}, "VQL": "Visualize LINE SELECT Openning_year , SUM(Capacity) FROM cinema BIN Openning_year BY YEAR"}, "hardness": "Easy"}, {"nl_queries": "How many wines are there for each grape, sort y axis from low to high order.", "db_id": "wine_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Grape , count(*) FROM WINE GROUP BY Grape ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Grape , count(*) FROM WINE GROUP BY Grape ORDER BY count(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "Show the different nationalities and the number of journalists of each nationality in a bar chart.", "db_id": "news_report", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nationality , COUNT(*) FROM journalist GROUP BY Nationality", "binning": ""}, "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM journalist GROUP BY Nationality"}, "hardness": "Easy"}, {"nl_queries": "Show birthdates of the professors in charge of ACCT-211 and bin the date by year interval in a line chart, and I want to list by the x axis in descending.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT EMP_DOB , COUNT(EMP_DOB) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE CRS_CODE = \"ACCT-211\"  ORDER BY EMP_DOB DESC", "binning": "BIN EMP_DOB BY YEAR"}, "VQL": "Visualize LINE SELECT EMP_DOB , COUNT(EMP_DOB) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE CRS_CODE = \"ACCT-211\"  ORDER BY EMP_DOB DESC BIN EMP_DOB BY YEAR"}, "hardness": "Extra Hard"}, {"nl_queries": "Count those days and in which zip code was the min dew point lower than any day in zip code 94107 using a bar graph, order by the total number from high to low.", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date , COUNT(date) FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107) GROUP BY date ORDER BY COUNT(date) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107) GROUP BY date ORDER BY COUNT(date) DESC"}, "hardness": "Hard"}, {"nl_queries": "Give me a pie chart showing the number of products supplied by supplier id 3 for different product type code.", "db_id": "department_store", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT product_type_code , COUNT(product_type_code) FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id WHERE T1.supplier_id = 3 GROUP BY product_type_code", "binning": ""}, "VQL": "Visualize PIE SELECT product_type_code , COUNT(product_type_code) FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id WHERE T1.supplier_id = 3 GROUP BY product_type_code"}, "hardness": "Hard"}, {"nl_queries": "For each payment method, return how many customers use it, and list bar in asc order.", "db_id": "department_store", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT payment_method_code , count(*) FROM customers GROUP BY payment_method_code ORDER BY payment_method_code ASC", "binning": ""}, "VQL": "Visualize BAR SELECT payment_method_code , count(*) FROM customers GROUP BY payment_method_code ORDER BY payment_method_code ASC"}, "hardness": "Medium"}, {"nl_queries": "Visualize a bar chart about the distribution of ACC_Regular_Season and ACC_Percent , I want to sort by the names from low to high.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match ORDER BY ACC_Regular_Season ASC", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match ORDER BY ACC_Regular_Season ASC"}, "hardness": "Easy"}, {"nl_queries": "For those employees who did not have any job in the past, show me about the distribution of job_id and the sum of department_id , and group by attribute job_id in a bar chart, and I want to show by the X-axis in ascending.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY JOB_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY JOB_ID ASC"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, show me about the distribution of name and revenue , and group by attribute founder in a bar chart, could you list from low to high by the y axis?", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder , T1.Name ORDER BY T2.Revenue ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder , T1.Name ORDER BY T2.Revenue ASC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, draw a bar chart about the distribution of  hire_date and the sum of salary bin hire_date by weekday.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "Give me the trend about the average of Employee_ID over Start_from , and group by attribute Is_full_time and bin start_from by time, and show by the Start_from in asc.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC", "binning": "BIN Start_from BY YEAR"}, "VQL": "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC BIN Start_from BY YEAR"}, "hardness": "Extra Hard"}, {"nl_queries": "Give me a histogram for what is the lowest salary in departments with average salary greater than the overall average, show by the Y-axis from low to high.", "db_id": "college_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY min(salary) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY min(salary) ASC"}, "hardness": "Easy"}, {"nl_queries": "List the number of companies for each building in a bar chart, and show by the the number of name in descending.", "db_id": "company_office", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.name , COUNT(T2.name) FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id = T2.id JOIN Companies AS T3 ON T1.company_id = T3.id GROUP BY T2.name ORDER BY COUNT(T2.name) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.name , COUNT(T2.name) FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id = T2.id JOIN Companies AS T3 ON T1.company_id = T3.id GROUP BY T2.name ORDER BY COUNT(T2.name) DESC"}, "hardness": "Hard"}, {"nl_queries": "What is the number of names for each product in the store?", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM products GROUP BY Name", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name"}, "hardness": "Easy"}, {"nl_queries": "What are the names of all the Japanese constructors that have earned more than 5 points, and count them by a bar chart", "db_id": "formula_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name", "binning": ""}, "VQL": "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name"}, "hardness": "Hard"}, {"nl_queries": "Stacked bar chart of team_id for with each ACC_Home in each acc road", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road"}, "hardness": "Extra Hard"}, {"nl_queries": "For directors who had more than one movie, bin the year into Year interval and them compute the total number of movies in each year bucket, and group by title The result can be drawn as a trend line, show X-axis in descending order.", "db_id": "movie_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT year , COUNT(year) FROM Movie AS T1 JOIN Movie AS T2 ON T1.director = T2.director WHERE T1.title != T2.title GROUP BY title ORDER BY year DESC", "binning": "BIN year BY YEAR"}, "VQL": "Visualize LINE SELECT year , COUNT(year) FROM Movie AS T1 JOIN Movie AS T2 ON T1.director = T2.director WHERE T1.title != T2.title GROUP BY title ORDER BY year DESC BIN year BY YEAR"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees who was hired before 2002-06-21, give me the comparison about the average of department_id over the job_id , and group by attribute job_id, show x-axis in descending order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC"}, "hardness": "Hard"}, {"nl_queries": "A scatter chart shows the correlation between  Team_ID and  ACC_Percent .", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Team_ID , ACC_Percent FROM basketball_match", "binning": ""}, "VQL": "Visualize SCATTER SELECT Team_ID , ACC_Percent FROM basketball_match"}, "hardness": "Easy"}, {"nl_queries": "For all employees in the same department as Clara excluding Clara, bin their hire date into the month interval, and count how many employees in each month for a bar chart, and could you list by the y axis in desc?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE department_id = ( SELECT department_id FROM employees WHERE first_name = \"Clara\") AND first_name != \"Clara\"  ORDER BY COUNT(HIRE_DATE) DESC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE department_id = ( SELECT department_id FROM employees WHERE first_name = \"Clara\") AND first_name != \"Clara\"  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "Return a bar chart about the distribution of ACC_Road and the sum of School_ID , and group by attribute ACC_Road, and display from low to high by the X-axis.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Road , SUM(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Road , SUM(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC"}, "hardness": "Medium"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, show me about the distribution of  job_id and the sum of employee_id , and group by attribute job_id in a bar chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID"}, "hardness": "Hard"}, {"nl_queries": "How many injured players not suffering from injury of 'Knee problem' in each match? Show me a bar chart grouping by number of matches.", "db_id": "game_injury", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Number_of_matches , COUNT(Number_of_matches) FROM injury_accident WHERE injury != 'Knee problem' GROUP BY Number_of_matches", "binning": ""}, "VQL": "Visualize BAR SELECT Number_of_matches , COUNT(Number_of_matches) FROM injury_accident WHERE injury != 'Knee problem' GROUP BY Number_of_matches"}, "hardness": "Medium"}, {"nl_queries": "Find the number of matches in different competitions. Plot them as pie chart.", "db_id": "city_record", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Competition , count(*) FROM MATCH GROUP BY Competition", "binning": ""}, "VQL": "Visualize PIE SELECT Competition , count(*) FROM MATCH GROUP BY Competition"}, "hardness": "Easy"}, {"nl_queries": "Find the number of the name of all students who were in the tryout sorted in alphabetic order.", "db_id": "soccer_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT pName , COUNT(pName) FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID GROUP BY pName ORDER BY T1.pName", "binning": ""}, "VQL": "Visualize BAR SELECT pName , COUNT(pName) FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID GROUP BY pName ORDER BY T1.pName"}, "hardness": "Hard"}, {"nl_queries": "For all employees who have the letters D or S in their first name, give me the comparison about the sum of employee_id over the job_id , and group by attribute job_id by a bar chart, show Y from low to high order please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "Give me a histogram for how many events are there for each party?, could you order by the x axis from high to low?", "db_id": "party_people", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY Party_name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY Party_name DESC"}, "hardness": "Hard"}, {"nl_queries": "What is the total rating of channel for each channel owner Plot them as bar chart, and I want to list by the sum rating in percent in desc.", "db_id": "program_share", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Owner , sum(Rating_in_percent) FROM channel GROUP BY OWNER ORDER BY sum(Rating_in_percent) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Owner , sum(Rating_in_percent) FROM channel GROUP BY OWNER ORDER BY sum(Rating_in_percent) DESC"}, "hardness": "Medium"}, {"nl_queries": "Return a bar chart showing the number of schools in each county, and rank y axis from high to low order please.", "db_id": "school_finance", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT County , count(*) FROM school GROUP BY county ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT County , count(*) FROM school GROUP BY county ORDER BY count(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "Show the names and their average grades of each high schooler with a bar chart, list in asc by the x axis.", "db_id": "network_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name ASC"}, "hardness": "Medium"}, {"nl_queries": "Find the number of the name of the project for which a scientist whose name contains \u2018Smith\u2019 is assigned to.", "db_id": "scientist_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , COUNT(T2.Name) FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T3.name LIKE '%Smith%' GROUP BY T2.Name", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T3.name LIKE '%Smith%' GROUP BY T2.Name"}, "hardness": "Extra Hard"}, {"nl_queries": "Use a stacked bar chart to show how many films for each title and each type The x-axis is title, I want to display from high to low by the Y.", "db_id": "film_rank", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Title , COUNT(Title) FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID GROUP BY Type ,  Title ORDER BY COUNT(Title) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Title , COUNT(Title) FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID GROUP BY Type ,  Title ORDER BY COUNT(Title) DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "A bar chart about what is the project id and detail for the project with at least two documents?, and show by the Y-axis in ascending.", "db_id": "cre_Docs_and_Epenses", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id ORDER BY T1.Project_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id ORDER BY T1.Project_ID ASC"}, "hardness": "Medium"}, {"nl_queries": "Return the average price of products that have each category code in a bar chart.", "db_id": "customer_complaints", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT product_category_code , avg(product_price) FROM products GROUP BY product_category_code", "binning": ""}, "VQL": "Visualize BAR SELECT product_category_code , avg(product_price) FROM products GROUP BY product_category_code"}, "hardness": "Easy"}, {"nl_queries": "For those employees who was hired before 2002-06-21, show me about the distribution of hire_date and the amount of hire_date bin hire_date by weekday in a bar chart, order by the Y from low to high.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY COUNT(HIRE_DATE) ASC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "How many professors for each first name? Show me a bar chart, could you display Y-axis from low to high order?", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num = T2.emp_num GROUP BY EMP_FNAME ORDER BY COUNT(EMP_FNAME) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num = T2.emp_num GROUP BY EMP_FNAME ORDER BY COUNT(EMP_FNAME) ASC"}, "hardness": "Hard"}, {"nl_queries": "What are the dates of the assessment notes, and count them by a line chart, and display in descending by the X-axis please.", "db_id": "behavior_monitoring", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY date_of_notes DESC", "binning": "BIN date_of_notes BY YEAR"}, "VQL": "Visualize LINE SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY date_of_notes DESC BIN date_of_notes BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "Plot sum capacity over openning year in a line chart", "db_id": "cinema", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Openning_year , SUM(Capacity) FROM cinema", "binning": "BIN Openning_year BY YEAR"}, "VQL": "Visualize LINE SELECT Openning_year , SUM(Capacity) FROM cinema BIN Openning_year BY YEAR"}, "hardness": "Easy"}, {"nl_queries": "List the number of the name of all playlist, display in asc by the names.", "db_id": "store_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY name ASC"}, "hardness": "Medium"}, {"nl_queries": "Show me a bar chart for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?, and rank by the x-axis from low to high.", "db_id": "world_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm ASC", "binning": ""}, "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm ASC"}, "hardness": "Medium"}, {"nl_queries": "Show all ministers who do not belong to Progress Party, and count them by a bar chart", "db_id": "party_people", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister", "binning": ""}, "VQL": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister"}, "hardness": "Medium"}, {"nl_queries": "Return a bar chart on how many engineers did each staff contact? List both the contact staff name and number of engineers contacted, and show in descending by the X.", "db_id": "assets_maintenance", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT staff_name , count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name ORDER BY staff_name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT staff_name , count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name ORDER BY staff_name DESC"}, "hardness": "Hard"}, {"nl_queries": "Visualize a bar chart for what are the different template type codes, and how many templates correspond to each?", "db_id": "cre_Doc_Template_Mgt", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Template_Type_Code , count(*) FROM Templates GROUP BY template_type_code", "binning": ""}, "VQL": "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates GROUP BY template_type_code"}, "hardness": "Easy"}, {"nl_queries": "For each year, return the year and the number of times the team Boston Red Stockings won in the postseasons. Visualize by line chart.", "db_id": "baseball_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT year , count(*) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' GROUP BY T1.year", "binning": ""}, "VQL": "Visualize LINE SELECT year , count(*) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' GROUP BY T1.year"}, "hardness": "Hard"}, {"nl_queries": "Return a bar chart on how many wines are there for each grape?, and I want to list the total number in desc order.", "db_id": "wine_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Grape , count(*) FROM WINE GROUP BY Grape ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Grape , count(*) FROM WINE GROUP BY Grape ORDER BY count(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "Visualize a bar chart for what are the ids and names of all start stations that were the beginning of at least 200 trips?, list by the x-axis from low to high.", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT start_station_name , start_station_id FROM trip ORDER BY start_station_name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT start_station_name , start_station_id FROM trip ORDER BY start_station_name ASC"}, "hardness": "Easy"}, {"nl_queries": "How many templates with version number later than 5 for each template type code? Show me a bar chart, I want to rank in ascending by the Y.", "db_id": "cre_Doc_Template_Mgt", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Template_Type_Code , COUNT(Template_Type_Code) FROM Templates WHERE version_number > 5 GROUP BY Template_Type_Code ORDER BY COUNT(Template_Type_Code) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Template_Type_Code , COUNT(Template_Type_Code) FROM Templates WHERE version_number > 5 GROUP BY Template_Type_Code ORDER BY COUNT(Template_Type_Code) ASC"}, "hardness": "Hard"}, {"nl_queries": "Show the order ids and the number of items in each order with a scatter chart.", "db_id": "customers_and_invoices", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT order_id , count(*) FROM Order_items GROUP BY order_id", "binning": ""}, "VQL": "Visualize SCATTER SELECT order_id , count(*) FROM Order_items GROUP BY order_id"}, "hardness": "Easy"}, {"nl_queries": "What are the dates of the assessment notes, and count them by a line chart, I want to show in ascending by the X-axis.", "db_id": "behavior_monitoring", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY date_of_notes ASC", "binning": "BIN date_of_notes BY YEAR"}, "VQL": "Visualize LINE SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY date_of_notes ASC BIN date_of_notes BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "What are the names and id of courses having at most 2 sections. ", "db_id": "student_transcripts_tracking", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.course_name , T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id", "binning": ""}, "VQL": "Visualize BAR SELECT T1.course_name , T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id"}, "hardness": "Easy"}, {"nl_queries": "Show different nominees and the number of musicals they have been nominated in a pie chart.", "db_id": "musical", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Nominee , COUNT(*) FROM musical GROUP BY Nominee", "binning": ""}, "VQL": "Visualize PIE SELECT Nominee , COUNT(*) FROM musical GROUP BY Nominee"}, "hardness": "Easy"}, {"nl_queries": "Show the ids and names of festivals that have at least two nominations for artworks Plot them as bar chart, and show in desc by the total number.", "db_id": "entertainment_awards", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T3.Festival_Name , T1.Festival_ID FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID = T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID = T3.Festival_ID ORDER BY T1.Festival_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T3.Festival_Name , T1.Festival_ID FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID = T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID = T3.Festival_ID ORDER BY T1.Festival_ID DESC"}, "hardness": "Medium"}, {"nl_queries": "Show the title and score of the movie with a bar chart, show X-axis in descending order.", "db_id": "movie_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT title , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID ORDER BY title DESC", "binning": ""}, "VQL": "Visualize BAR SELECT title , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID ORDER BY title DESC"}, "hardness": "Medium"}, {"nl_queries": "What are the number of the completion dates of all the tests that have result \"Fail\"?, and rank from high to low by the y-axis.", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_of_completion , COUNT(date_of_completion) FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = \"Fail\" GROUP BY date_of_completion ORDER BY COUNT(date_of_completion) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT date_of_completion , COUNT(date_of_completion) FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = \"Fail\" GROUP BY date_of_completion ORDER BY COUNT(date_of_completion) DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "what are different nationalities of people and the corresponding number of people from each nation?, rank from low to high by the bar.", "db_id": "poker_player", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY Nationality ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY Nationality ASC"}, "hardness": "Medium"}, {"nl_queries": "How many car makers are there in each continents? List the continent name and the count with a pie chart.", "db_id": "car_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent", "binning": ""}, "VQL": "Visualize PIE SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent"}, "hardness": "Medium"}, {"nl_queries": "What is the average price of the rooms for each different decor? Show me a bar chart!, list by the x-axis in descending.", "db_id": "inn_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY decor DESC", "binning": ""}, "VQL": "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY decor DESC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who did not have any job in the past, give me the comparison about the sum of employee_id over the job_id , and group by attribute job_id, and sort in asc by the JOB_ID.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY JOB_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY JOB_ID ASC"}, "hardness": "Hard"}, {"nl_queries": "A bar chart shows the distribution of ACC_Regular_Season and All_Games_Percent , and display from low to high by the bars.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY ACC_Regular_Season ASC", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY ACC_Regular_Season ASC"}, "hardness": "Easy"}, {"nl_queries": "Stacked bar chart of the number of country for with each Competition_type in each country, sort in asc by the bar.", "db_id": "sports_competition", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Country , COUNT(Country) FROM competition GROUP BY Competition_type ,  Country ORDER BY Country ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Competition_type ,  Country ORDER BY Country ASC"}, "hardness": "Hard"}, {"nl_queries": "List each charge type and its amount. Show bar chart.", "db_id": "dog_kennels", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT charge_type , charge_amount FROM Charges", "binning": ""}, "VQL": "Visualize BAR SELECT charge_type , charge_amount FROM Charges"}, "hardness": "Easy"}, {"nl_queries": "A bar chart for what are the number of the completion dates of all the tests that have result \"Fail\"?", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_of_completion , COUNT(date_of_completion) FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = \"Fail\" GROUP BY date_of_completion", "binning": ""}, "VQL": "Visualize BAR SELECT date_of_completion , COUNT(date_of_completion) FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = \"Fail\" GROUP BY date_of_completion"}, "hardness": "Hard"}, {"nl_queries": "What are the names of all products, and count them by a bar chart, and I want to list y axis in desc order.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY COUNT(Name) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY COUNT(Name) DESC"}, "hardness": "Medium"}, {"nl_queries": "Show the number of male and female assistant professors Plot them as bar chart, and display in asc by the Sex.", "db_id": "activity_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Sex , count(*) FROM Faculty WHERE rank = \"AsstProf\" GROUP BY sex ORDER BY Sex ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Sex , count(*) FROM Faculty WHERE rank = \"AsstProf\" GROUP BY sex ORDER BY Sex ASC"}, "hardness": "Hard"}, {"nl_queries": "Please return me a bar chart show what are the average smallest rating of different movie title?", "db_id": "movie_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.title , AVG(min(T1.stars)) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T2.title", "binning": ""}, "VQL": "Visualize BAR SELECT T2.title , AVG(min(T1.stars)) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T2.title"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, draw a bar chart about the distribution of name and the sum of code , and group by attribute name, and I want to list by the X in asc.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC"}, "hardness": "Hard"}, {"nl_queries": "For each manufacturer's name, what are the prices of their most expensive product?, order in asc by the bars.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , max(T1.Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , max(T1.Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY Name ASC"}, "hardness": "Medium"}, {"nl_queries": "Give me a stacked bar chart to show how many things in different types of each thing, and the details of the organization that owns it.", "db_id": "local_govt_and_lot", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT organization_details , COUNT(organization_details) FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id = T2.organization_id GROUP BY Type_of_Thing_Code ,  organization_details", "binning": ""}, "VQL": "Visualize BAR SELECT organization_details , COUNT(organization_details) FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id = T2.organization_id GROUP BY Type_of_Thing_Code ,  organization_details"}, "hardness": "Hard"}, {"nl_queries": "Plot the total number by grouped by city code as a bar graph", "db_id": "allergy_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT city_code , count(*) FROM Student GROUP BY city_code", "binning": ""}, "VQL": "Visualize BAR SELECT city_code , count(*) FROM Student GROUP BY city_code"}, "hardness": "Easy"}, {"nl_queries": "Please compare the number of names of parties using a bar chart, show by the y-axis in ascending please.", "db_id": "election", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY COUNT(T2.Party) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY COUNT(T2.Party) ASC"}, "hardness": "Hard"}, {"nl_queries": "Show all the buildings along with the number of faculty members the buildings have Plot them as bar chart, and rank from low to high by the x-axis.", "db_id": "activity_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Building , count(*) FROM Faculty GROUP BY building ORDER BY Building ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Building , count(*) FROM Faculty GROUP BY building ORDER BY Building ASC"}, "hardness": "Medium"}, {"nl_queries": "Return a bar chart showing how many members have visited for each college location, and could you sort bar in desc order?", "db_id": "decoration_competition", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT College_Location , COUNT(College_Location) FROM college AS T1 JOIN member AS T2 ON T1.College_ID = T2.College_ID GROUP BY College_Location ORDER BY College_Location DESC", "binning": ""}, "VQL": "Visualize BAR SELECT College_Location , COUNT(College_Location) FROM college AS T1 JOIN member AS T2 ON T1.College_ID = T2.College_ID GROUP BY College_Location ORDER BY College_Location DESC"}, "hardness": "Hard"}, {"nl_queries": "What is the number of each course name that have at least five enrollments? Show me a bar chart, and display in asc by the CName.", "db_id": "college_3", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.CName , COUNT(T1.CName) FROM COURSE AS T1 JOIN ENROLLED_IN AS T2 ON T1.CID = T2.CID GROUP BY T1.CName T2.CID HAVING COUNT(*) >= 5 ORDER BY T1.CName ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.CName , COUNT(T1.CName) FROM COURSE AS T1 JOIN ENROLLED_IN AS T2 ON T1.CID = T2.CID GROUP BY T1.CName T2.CID HAVING COUNT(*) >= 5 ORDER BY T1.CName ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "How many courses are in the Psychology department for each semester? Return a bar chart.", "db_id": "college_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT semester , COUNT(semester) FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' GROUP BY semester ORDER BY T1.title", "binning": ""}, "VQL": "Visualize BAR SELECT semester , COUNT(semester) FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' GROUP BY semester ORDER BY T1.title"}, "hardness": "Extra Hard"}, {"nl_queries": "Find the number of customers that use email as the contact channel and group by customer name and bin active date by weekday in a stacked bar chart.", "db_id": "customers_and_addresses", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT active_from_date , COUNT(active_from_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email' GROUP BY customer_name", "binning": "BIN active_from_date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT active_from_date , COUNT(active_from_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email' GROUP BY customer_name BIN active_from_date BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "For each origin, how many flights came from there Show bar chart, and list by the X from high to low.", "db_id": "flight_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT origin , count(*) FROM Flight GROUP BY origin ORDER BY origin DESC", "binning": ""}, "VQL": "Visualize BAR SELECT origin , count(*) FROM Flight GROUP BY origin ORDER BY origin DESC"}, "hardness": "Medium"}, {"nl_queries": "For each policy type, return its type code and its count in the record. Visualize by pie chart.", "db_id": "insurance_and_eClaims", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Policy_Type_Code , count(*) FROM policies GROUP BY policy_type_code", "binning": ""}, "VQL": "Visualize PIE SELECT Policy_Type_Code , count(*) FROM policies GROUP BY policy_type_code"}, "hardness": "Easy"}, {"nl_queries": "List the physicians' employee ids together with their primary affiliation departments' ids. Plot them as scatter chart.", "db_id": "hospital_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Physician , Department FROM affiliated_with WHERE primaryaffiliation = 1", "binning": ""}, "VQL": "Visualize SCATTER SELECT Physician , Department FROM affiliated_with WHERE primaryaffiliation = 1"}, "hardness": "Easy"}, {"nl_queries": "Draw a bar chart for what are the hometowns of gymnasts and the corresponding number of gymnasts?, and rank by the Y from low to high.", "db_id": "gymnast", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Hometown , COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Hometown , COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) ASC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who was hired before 2002-06-21, give me the comparison about the average of department_id over the hire_date bin hire_date by time by a bar chart, sort from high to low by the total number.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(DEPARTMENT_ID) DESC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(DEPARTMENT_ID) DESC BIN HIRE_DATE BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "A bar chart for giveing me the number of the dates when the max temperature was higher than 85.", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date , COUNT(date) FROM weather WHERE max_temperature_f > 85", "binning": "BIN date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE max_temperature_f > 85 BIN date BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "What are the countries of perpetrators? Show each country and the corresponding number of perpetrators there Plot them as bar chart, I want to show names from low to high order.", "db_id": "perpetrator", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Country , COUNT(*) FROM perpetrator GROUP BY Country ORDER BY Country ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Country , COUNT(*) FROM perpetrator GROUP BY Country ORDER BY Country ASC"}, "hardness": "Medium"}, {"nl_queries": "Show all document ids and the number of paragraphs in each document. Order by document id in a scatter chart", "db_id": "cre_Doc_Template_Mgt", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Document_ID , count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id", "binning": ""}, "VQL": "Visualize SCATTER SELECT Document_ID , count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id"}, "hardness": "Medium"}, {"nl_queries": "Show the total number from each document type code, and I want to sort y-axis from low to high order.", "db_id": "cre_Docs_and_Epenses", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Document_Type_Code , count(*) FROM Documents GROUP BY document_type_code ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Document_Type_Code , count(*) FROM Documents GROUP BY document_type_code ORDER BY count(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "Show all role codes and the number of employees in each role by a bar chart.", "db_id": "cre_Doc_Tracking_DB", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Role_Code , count(*) FROM Employees GROUP BY role_code", "binning": ""}, "VQL": "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code"}, "hardness": "Easy"}, {"nl_queries": "Create a pie chart showing minimal age across job.", "db_id": "network_2", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT job , min(age) FROM Person GROUP BY job", "binning": ""}, "VQL": "Visualize PIE SELECT job , min(age) FROM Person GROUP BY job"}, "hardness": "Easy"}, {"nl_queries": "Visualize a bar chart that bin the open date into a day of the week interval and count them, and sort from high to low by the Y-axis.", "db_id": "wedding", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Open_Date , COUNT(Open_Date) FROM church  ORDER BY COUNT(Open_Date) DESC", "binning": "BIN Open_Date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Open_Date , COUNT(Open_Date) FROM church  ORDER BY COUNT(Open_Date) DESC BIN Open_Date BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "How many services for each service type description? Use a bar chart to show it, could you order in ascending by the x-axis?", "db_id": "cre_Drama_Workshop_Groups", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Service_Type_Description , COUNT(*) FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code GROUP BY T2.Service_Type_Code ORDER BY Service_Type_Description ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Service_Type_Description , COUNT(*) FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code GROUP BY T2.Service_Type_Code ORDER BY Service_Type_Description ASC"}, "hardness": "Hard"}, {"nl_queries": "What are the names and ids of every course with less than 2 sections Visualize by bar chart, and sort total number from low to high order.", "db_id": "student_transcripts_tracking", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.course_name , T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id ORDER BY T1.course_id ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.course_name , T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id ORDER BY T1.course_id ASC"}, "hardness": "Medium"}, {"nl_queries": "Draw a bar chart for what are the department names and how many employees work in each of them?, and sort from high to low by the DEPARTMENT_NAME please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT DEPARTMENT_NAME , COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id GROUP BY department_name ORDER BY DEPARTMENT_NAME DESC", "binning": ""}, "VQL": "Visualize BAR SELECT DEPARTMENT_NAME , COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id GROUP BY department_name ORDER BY DEPARTMENT_NAME DESC"}, "hardness": "Hard"}, {"nl_queries": "Plot date of transaction by mean share count as a trend line, and sort by the date_of_transaction in ascending please.", "db_id": "tracking_share_transactions", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date_of_transaction , AVG(share_count) FROM TRANSACTIONS  ORDER BY date_of_transaction ASC", "binning": "BIN date_of_transaction BY YEAR"}, "VQL": "Visualize LINE SELECT date_of_transaction , AVG(share_count) FROM TRANSACTIONS  ORDER BY date_of_transaction ASC BIN date_of_transaction BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, show me about the change of commission_pct over hire_date in a line chart, order from low to high by the x-axis.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC"}, "hardness": "Hard"}, {"nl_queries": "Show me a bar chart for what are the different budget type codes, and how many documents are there for each?, sort y axis in asc order please.", "db_id": "cre_Docs_and_Epenses", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about the amount of founder over the founder , and group by attribute founder by a bar chart, and I want to show Founder in desc order.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Founder , COUNT(Founder) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder ORDER BY Founder DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Founder , COUNT(Founder) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder ORDER BY Founder DESC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, show me the trend about employee_id over hire_date with a line chart, I want to display in ascending by the HIRE_DATE.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC"}, "hardness": "Medium"}, {"nl_queries": "A bar chart about what is the id and weight of every pet who is older than 1?, sort weight in desc order.", "db_id": "pets_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT PetID , weight FROM pets WHERE pet_age > 1 ORDER BY weight DESC", "binning": ""}, "VQL": "Visualize BAR SELECT PetID , weight FROM pets WHERE pet_age > 1 ORDER BY weight DESC"}, "hardness": "Medium"}, {"nl_queries": "What are the titles and ids for albums containing tracks with unit price greater than 1, and could you show in ascending by the X-axis?", "db_id": "chinook_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.Title ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.Title ASC"}, "hardness": "Hard"}, {"nl_queries": "For all employees who have the letters D or S in their first name, give me the comparison about the average of manager_id over the job_id , and group by attribute job_id by a bar chart, display JOB_ID from low to high order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "Visualize a bar chart for which catalog contents has price above 700 dollars? Show their catalog entry names and capacities, and show by the y axis from high to low.", "db_id": "product_catalog", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity DESC", "binning": ""}, "VQL": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity DESC"}, "hardness": "Medium"}, {"nl_queries": "How many different professors are there for the different schools Show bar chart, and show in asc by the SCHOOL_CODE.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE ASC", "binning": ""}, "VQL": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE ASC"}, "hardness": "Hard"}, {"nl_queries": "Visualize a bar chart about the distribution of  All_Neutral and  ACC_Percent .", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Neutral , ACC_Percent FROM basketball_match", "binning": ""}, "VQL": "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match"}, "hardness": "Easy"}, {"nl_queries": "Bar chart x axis building y axis the average of capacity, sort bars in asc order.", "db_id": "college_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT building , avg(capacity) FROM classroom GROUP BY building ORDER BY building ASC", "binning": ""}, "VQL": "Visualize BAR SELECT building , avg(capacity) FROM classroom GROUP BY building ORDER BY building ASC"}, "hardness": "Medium"}, {"nl_queries": "Show the number of documents created in each day and bin document date by weekday with a bar chart, and I want to show by the the number of document date in ascending please.", "db_id": "cre_Docs_and_Epenses", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code  ORDER BY COUNT(Document_Date) ASC", "binning": "BIN Document_Date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code  ORDER BY COUNT(Document_Date) ASC BIN Document_Date BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "Count the number of captains younger than 50 of each rank. ", "db_id": "ship_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank", "binning": ""}, "VQL": "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank"}, "hardness": "Medium"}, {"nl_queries": "Count the number of programs broadcast for each time section of a day. Show bar chart.", "db_id": "program_share", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Time_of_day , count(*) FROM broadcast GROUP BY time_of_day", "binning": ""}, "VQL": "Visualize BAR SELECT Time_of_day , count(*) FROM broadcast GROUP BY time_of_day"}, "hardness": "Easy"}, {"nl_queries": "Plot the total number by grouped by time of day as a bar graph, and list Y in descending order.", "db_id": "program_share", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Time_of_day , count(*) FROM broadcast GROUP BY time_of_day ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Time_of_day , count(*) FROM broadcast GROUP BY time_of_day ORDER BY count(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "Visualize a scatter chart about the correlation between  School_ID and  ACC_Percent , and group by attribute All_Neutral.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY All_Neutral", "binning": ""}, "VQL": "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY All_Neutral"}, "hardness": "Easy"}, {"nl_queries": "Group by services attribute in station table and compute the total number of services with a bar chart, I want to list from high to low by the the number of services.", "db_id": "station_weather", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) DESC"}, "hardness": "Medium"}, {"nl_queries": "Show the name of each editor and the number of journal committees they are on using a bar chart.", "db_id": "journal_committee", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.editor_id", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.editor_id"}, "hardness": "Medium"}, {"nl_queries": "Show me a bar chart for what is the average price of the products for each category?, and I want to order bar from high to low order.", "db_id": "customer_complaints", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT product_category_code , avg(product_price) FROM products GROUP BY product_category_code ORDER BY product_category_code DESC", "binning": ""}, "VQL": "Visualize BAR SELECT product_category_code , avg(product_price) FROM products GROUP BY product_category_code ORDER BY product_category_code DESC"}, "hardness": "Medium"}, {"nl_queries": "What are dates of birth of all the guests whose gender is \"Male\", and count them by a bar chart, sort in ascending by the total number please.", "db_id": "apartment_rentals", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY COUNT(date_of_birth) ASC", "binning": "BIN date_of_birth BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY COUNT(date_of_birth) ASC BIN date_of_birth BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "Bar chart x axis date claim settled y axis the number of date claim settled, and sort y-axis in ascending order please.", "db_id": "insurance_policies", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements  ORDER BY COUNT(Date_Claim_Settled) ASC", "binning": "BIN Date_Claim_Settled BY YEAR"}, "VQL": "Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements  ORDER BY COUNT(Date_Claim_Settled) ASC BIN Date_Claim_Settled BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, show me about the distribution of  job_id and the sum of manager_id , and group by attribute job_id in a bar chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID"}, "hardness": "Hard"}, {"nl_queries": "A bar chart for listing the number of the description of the outcomes for all projects, could you sort in ascending by the y axis?", "db_id": "tracking_grants_for_research", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description ORDER BY COUNT(outcome_description) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description ORDER BY COUNT(outcome_description) ASC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, show me about the distribution of email and salary in a bar chart, list in asc by the x-axis.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT EMAIL , SALARY FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY EMAIL ASC", "binning": ""}, "VQL": "Visualize BAR SELECT EMAIL , SALARY FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY EMAIL ASC"}, "hardness": "Medium"}, {"nl_queries": "Show the average age of singers for each country with a bar chart.", "db_id": "concert_singer", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Country , AVG(Age) FROM singer GROUP BY Country", "binning": ""}, "VQL": "Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country"}, "hardness": "Easy"}, {"nl_queries": "Please tell me the average star ratings of each movie title using a bar chart, and display from low to high by the mean stars.", "db_id": "movie_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT title , AVG(stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY title ORDER BY AVG(stars) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT title , AVG(stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY title ORDER BY AVG(stars) ASC"}, "hardness": "Hard"}, {"nl_queries": "Draw a bar chart for what are all the different product names, and how many complains has each received?, sort by the the total number from low to high please.", "db_id": "customer_complaints", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT product_name , count(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id = t2.product_id GROUP BY t1.product_name ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT product_name , count(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id = t2.product_id GROUP BY t1.product_name ORDER BY count(*) ASC"}, "hardness": "Hard"}, {"nl_queries": "Find the number of students for each department Plot them as bar chart, and could you show by the total number in ascending please?", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY count(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "Draw a bar chart for what are the different first names and ages of the students who do have pets?, and order by the Y in desc.", "db_id": "pets_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid ORDER BY Age DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid ORDER BY Age DESC"}, "hardness": "Medium"}, {"nl_queries": "For each record in schedule, show the number of films for each day in a bar chart, display by the y axis in ascending.", "db_id": "cinema", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Date , COUNT(Date) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Date ORDER BY COUNT(Date) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Date , COUNT(Date) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Date ORDER BY COUNT(Date) ASC"}, "hardness": "Hard"}, {"nl_queries": "Return the number of the claim start date for the claims whose claimed amount is no more than the average, rank from high to low by the y axis.", "db_id": "insurance_policies", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Claims WHERE Amount_Settled <= ( SELECT avg(Amount_Settled) FROM Claims )  ORDER BY COUNT(Date_Claim_Made) DESC", "binning": "BIN Date_Claim_Made BY YEAR"}, "VQL": "Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Claims WHERE Amount_Settled <= ( SELECT avg(Amount_Settled) FROM Claims )  ORDER BY COUNT(Date_Claim_Made) DESC BIN Date_Claim_Made BY YEAR"}, "hardness": "Hard"}, {"nl_queries": "What are the ids and details of events that have more than one participants. ", "db_id": "local_govt_in_alabama", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Event_Details , T1.Event_ID FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY T1.Event_Details", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Event_Details , T1.Event_ID FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY T1.Event_Details"}, "hardness": "Medium"}, {"nl_queries": "A bar chart shows the distribution of All_Neutral and School_ID , and rank by the bars in descending please.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Neutral , School_ID FROM basketball_match ORDER BY All_Neutral DESC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Neutral , School_ID FROM basketball_match ORDER BY All_Neutral DESC"}, "hardness": "Easy"}, {"nl_queries": "For those records from the products and each product's manufacturer, draw a bar chart about the distribution of founder and the sum of revenue , and group by attribute founder, and I want to sort in ascending by the names.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Founder , SUM(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder ORDER BY Founder ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Founder , SUM(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder ORDER BY Founder ASC"}, "hardness": "Hard"}, {"nl_queries": "Plot the total number by grouped by carrier as a bar graph, and list in desc by the x axis.", "db_id": "phone_market", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier ORDER BY Carrier DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier ORDER BY Carrier DESC"}, "hardness": "Medium"}, {"nl_queries": "What are the number of the names of all the Japanese constructors that have earned more than 5 points?, and could you show in ascending by the Y?", "db_id": "formula_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name ORDER BY COUNT(name) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name ORDER BY COUNT(name) ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees who was hired before 2002-06-21, visualize a line chart about the change of employee_id over hire_date , and I want to display x axis in desc order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE DESC", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE DESC"}, "hardness": "Medium"}, {"nl_queries": "What are the order dates of orders with price higher than 1000, and count them by a line chart", "db_id": "cre_Drama_Workshop_Groups", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Order_Date , COUNT(Order_Date) FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID = T2.Order_ID JOIN Products AS T3 ON T2.Product_ID = T3.Product_ID WHERE T3.Product_price > 1000", "binning": "BIN Order_Date BY YEAR"}, "VQL": "Visualize LINE SELECT Order_Date , COUNT(Order_Date) FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID = T2.Order_ID JOIN Products AS T3 ON T2.Product_ID = T3.Product_ID WHERE T3.Product_price > 1000 BIN Order_Date BY YEAR"}, "hardness": "Hard"}, {"nl_queries": "Bar graph to show the number of customer details from different customer details, and rank names in ascending order.", "db_id": "local_govt_and_lot", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT customer_details , COUNT(customer_details) FROM Customers GROUP BY customer_details ORDER BY customer_details ASC", "binning": ""}, "VQL": "Visualize BAR SELECT customer_details , COUNT(customer_details) FROM Customers GROUP BY customer_details ORDER BY customer_details ASC"}, "hardness": "Medium"}, {"nl_queries": "Draw a bar chart for what are the destinations and number of flights to each one?", "db_id": "flight_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT destination , count(*) FROM Flight GROUP BY destination", "binning": ""}, "VQL": "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination"}, "hardness": "Easy"}, {"nl_queries": "List all headquarters and the number of companies in each headquarter with a bar chart, show Headquarters in descending order.", "db_id": "gas_company", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY Headquarters DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY Headquarters DESC"}, "hardness": "Medium"}, {"nl_queries": "Draw a scatterplot of team id vs all_games_percent where team id is on the x-axis and points are colored by All_Home", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY All_Home", "binning": ""}, "VQL": "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY All_Home"}, "hardness": "Easy"}, {"nl_queries": "Find the number of rooms with king bed for each decor type. ", "db_id": "inn_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT decor , count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor", "binning": ""}, "VQL": "Visualize BAR SELECT decor , count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor"}, "hardness": "Medium"}, {"nl_queries": "Find the country of the airlines whose name starts with 'Orbit', and count them by a bar chart, rank from low to high by the y axis.", "db_id": "flight_4", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT country , COUNT(country) FROM airlines WHERE name LIKE 'Orbit%' GROUP BY country ORDER BY COUNT(country) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT country , COUNT(country) FROM airlines WHERE name LIKE 'Orbit%' GROUP BY country ORDER BY COUNT(country) ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "Stacked bar chart of team_id for with each ACC_Home in each acc road, sort by the Y in asc.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY Team_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY Team_ID ASC"}, "hardness": "Medium"}, {"nl_queries": "A scatter chart shows the correlation between  School_ID and  All_Games_Percent , and group by attribute Team_Name.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY Team_Name", "binning": ""}, "VQL": "Visualize SCATTER SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY Team_Name"}, "hardness": "Easy"}, {"nl_queries": "For those records from the products and each product's manufacturer, show me about the distribution of founder and the sum of code , and group by attribute founder in a bar chart, I want to rank y axis in desc order.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code DESC"}, "hardness": "Hard"}, {"nl_queries": "Show the names of singers and the total sales of their songs Visualize by bar chart, and order in ascending by the Name.", "db_id": "singer", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name ORDER BY Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name ORDER BY Name ASC"}, "hardness": "Hard"}, {"nl_queries": "I want to know the proportion of the total number for each nominee.", "db_id": "musical", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Nominee , COUNT(*) FROM musical GROUP BY Nominee", "binning": ""}, "VQL": "Visualize PIE SELECT Nominee , COUNT(*) FROM musical GROUP BY Nominee"}, "hardness": "Easy"}, {"nl_queries": "Show the trend about the number of attendance at home games change over the years, bin year into year interval, could you sort X in asc order?", "db_id": "baseball_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT year , SUM(attendance) FROM home_game ORDER BY year ASC", "binning": "BIN year BY YEAR"}, "VQL": "Visualize LINE SELECT year , SUM(attendance) FROM home_game ORDER BY year ASC BIN year BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, visualize a bar chart about the distribution of phone_number and salary , show by the X-axis in descending.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT PHONE_NUMBER , SALARY FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY PHONE_NUMBER DESC", "binning": ""}, "VQL": "Visualize BAR SELECT PHONE_NUMBER , SALARY FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY PHONE_NUMBER DESC"}, "hardness": "Medium"}, {"nl_queries": "Show the country names and the corresponding number of players in a bar chart, could you sort in descending by the bar?", "db_id": "match_season", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Country_name , COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country GROUP BY T1.Country_name ORDER BY Country_name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Country_name , COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country GROUP BY T1.Country_name ORDER BY Country_name DESC"}, "hardness": "Hard"}, {"nl_queries": "What is the number of platforms for each location? Show the comparison with a bar chart.", "db_id": "train_station", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Location , SUM(Number_of_Platforms) FROM station GROUP BY Location", "binning": ""}, "VQL": "Visualize BAR SELECT Location , SUM(Number_of_Platforms) FROM station GROUP BY Location"}, "hardness": "Easy"}, {"nl_queries": "What are the enrollment dates of all the tests that have result \"Pass\", and count them by a bar chart, sort in descending by the y-axis.", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = \"Pass\"  ORDER BY COUNT(date_of_enrolment) DESC", "binning": "BIN date_of_enrolment BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = \"Pass\"  ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "Draw a bar chart about the distribution of  date_address_from and the average of monthly_rental , and group by attribute other_details and bin date_address_from by time.", "db_id": "behavior_monitoring", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC", "binning": "BIN date_address_from BY YEAR"}, "VQL": "Visualize BAR SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY YEAR"}, "hardness": "Extra Hard"}, {"nl_queries": "What are the names and account balances of customers with the letter a in their names, show by the acc_bal in ascending.", "db_id": "loan_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT cust_name , acc_bal FROM customer WHERE cust_name LIKE '%a%' ORDER BY acc_bal ASC", "binning": ""}, "VQL": "Visualize BAR SELECT cust_name , acc_bal FROM customer WHERE cust_name LIKE '%a%' ORDER BY acc_bal ASC"}, "hardness": "Hard"}, {"nl_queries": "Return the claim start date for the claims whose claimed amount is no more than the averag, and count them by a bar chart, and order by the Y-axis in asc.", "db_id": "insurance_policies", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Claims WHERE Amount_Settled <= ( SELECT avg(Amount_Settled) FROM Claims )  ORDER BY COUNT(Date_Claim_Made) ASC", "binning": "BIN Date_Claim_Made BY YEAR"}, "VQL": "Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Claims WHERE Amount_Settled <= ( SELECT avg(Amount_Settled) FROM Claims )  ORDER BY COUNT(Date_Claim_Made) ASC BIN Date_Claim_Made BY YEAR"}, "hardness": "Hard"}, {"nl_queries": "Show birthdates of the professors in charge of ACCT-211 and bin the date by year interval in a line chart, and I want to order x axis in desc order.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT EMP_DOB , COUNT(EMP_DOB) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE CRS_CODE = \"ACCT-211\"  ORDER BY EMP_DOB DESC", "binning": "BIN EMP_DOB BY YEAR"}, "VQL": "Visualize LINE SELECT EMP_DOB , COUNT(EMP_DOB) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE CRS_CODE = \"ACCT-211\"  ORDER BY EMP_DOB DESC BIN EMP_DOB BY YEAR"}, "hardness": "Extra Hard"}, {"nl_queries": "Plot the total number by grouped by competition type as a bar graph, and display names in descending order.", "db_id": "sports_competition", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Competition_type , COUNT(*) FROM competition GROUP BY Competition_type ORDER BY Competition_type DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Competition_type , COUNT(*) FROM competition GROUP BY Competition_type ORDER BY Competition_type DESC"}, "hardness": "Medium"}, {"nl_queries": "Show me the trend about what is the number of wins the team Boston Red Stockings got in the postseasons each year in history?, and list from low to high by the X.", "db_id": "baseball_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT year , count(*) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' GROUP BY T1.year ORDER BY year ASC", "binning": ""}, "VQL": "Visualize LINE SELECT year , count(*) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' GROUP BY T1.year ORDER BY year ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, find name and price , and group by attribute founder, and visualize them by a bar chart, and sort by the Y from low to high.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder , T1.Name ORDER BY T1.Price ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder , T1.Name ORDER BY T1.Price ASC"}, "hardness": "Hard"}, {"nl_queries": "Show me a bar chart for how many players are from each country?", "db_id": "match_season", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Country_name , COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country GROUP BY T1.Country_name", "binning": ""}, "VQL": "Visualize BAR SELECT Country_name , COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country GROUP BY T1.Country_name"}, "hardness": "Medium"}, {"nl_queries": "Give me the comparison about meter_100 over the Time by a bar chart, and could you rank by the X-axis in ascending?", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Time , meter_100 FROM swimmer ORDER BY Time ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Time , meter_100 FROM swimmer ORDER BY Time ASC"}, "hardness": "Easy"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, draw a bar chart about the distribution of email and manager_id , show by the y axis in desc.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT EMAIL , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY MANAGER_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT EMAIL , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY MANAGER_ID DESC"}, "hardness": "Medium"}, {"nl_queries": "Find the organisation ids and details of the organisations which are involved i. Visualize by bar chart.", "db_id": "tracking_grants_for_research", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details", "binning": ""}, "VQL": "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details"}, "hardness": "Medium"}, {"nl_queries": "Return a bar chart about the distribution of All_Home and the amount of All_Home , and group by attribute All_Home, I want to sort by the total number from low to high.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home ORDER BY COUNT(All_Home) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home ORDER BY COUNT(All_Home) ASC"}, "hardness": "Medium"}, {"nl_queries": "What are the number of the wines that have prices lower than 50 and have appelations in Monterey county?, and display by the x-axis in desc.", "db_id": "wine_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.County = \"Monterey\" AND T2.price < 50 GROUP BY Name ORDER BY Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.County = \"Monterey\" AND T2.price < 50 GROUP BY Name ORDER BY Name DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees who did not have any job in the past, show me about the distribution of hire_date and the average of employee_id bin hire_date by time in a bar chart, and list by the Y-axis from low to high.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(EMPLOYEE_ID) ASC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "For those employees who was hired before 2002-06-21, visualize a bar chart about the distribution of job_id and the average of department_id , and group by attribute job_id, display in asc by the total number.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(DEPARTMENT_ID) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(DEPARTMENT_ID) ASC"}, "hardness": "Hard"}, {"nl_queries": "Return a histogram on what is the name of each course and the corresponding number of student enrollment?, and order total number in desc order.", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC"}, "hardness": "Hard"}, {"nl_queries": "Give me a histogram for what are the different names and credit scores of customers who have taken a loan?, and I want to order X in asc order please.", "db_id": "loan_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT cust_name , credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id ORDER BY cust_name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT cust_name , credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id ORDER BY cust_name ASC"}, "hardness": "Medium"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, return a scatter chart about the correlation between  salary and  manager_id .", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT SALARY , MANAGER_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40", "binning": ""}, "VQL": "Visualize SCATTER SELECT SALARY , MANAGER_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40"}, "hardness": "Medium"}, {"nl_queries": "What are the different first names and ages of the students who do have pets Visualize by bar chart, I want to rank in descending by the bar.", "db_id": "pets_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid ORDER BY Fname DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid ORDER BY Fname DESC"}, "hardness": "Medium"}, {"nl_queries": "Show me a scatter plot of avg(baseprice) and minimal baseprice for .", "db_id": "inn_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT avg(basePrice) , min(basePrice) FROM Rooms GROUP BY decor", "binning": ""}, "VQL": "Visualize SCATTER SELECT avg(basePrice) , min(basePrice) FROM Rooms GROUP BY decor"}, "hardness": "Easy"}, {"nl_queries": "Which directors had a movie in either 1999 or 2000, and count them by a bar chart, could you order X-axis in desc order?", "db_id": "culture_company", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Director , COUNT(Director) FROM movie WHERE YEAR = 1999 OR YEAR = 2000 GROUP BY Director ORDER BY Director DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Director , COUNT(Director) FROM movie WHERE YEAR = 1999 OR YEAR = 2000 GROUP BY Director ORDER BY Director DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "A bar chart shows the distribution of  Sex and the amount of Sex , and group by attribute Sex.", "db_id": "candidate_poll", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex", "binning": ""}, "VQL": "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex"}, "hardness": "Easy"}, {"nl_queries": "Show me a line chart of how sum budget in billions change over the creation, I want to rank X-axis in asc order please.", "db_id": "department_management", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Creation , SUM(Budget_in_Billions) FROM department  ORDER BY Creation ASC", "binning": "BIN Creation BY YEAR"}, "VQL": "Visualize LINE SELECT Creation , SUM(Budget_in_Billions) FROM department  ORDER BY Creation ASC BIN Creation BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "Return a bar chart showing how many members have visited for each college location, and I want to show in asc by the bars.", "db_id": "decoration_competition", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT College_Location , COUNT(College_Location) FROM college AS T1 JOIN member AS T2 ON T1.College_ID = T2.College_ID GROUP BY College_Location ORDER BY College_Location ASC", "binning": ""}, "VQL": "Visualize BAR SELECT College_Location , COUNT(College_Location) FROM college AS T1 JOIN member AS T2 ON T1.College_ID = T2.College_ID GROUP BY College_Location ORDER BY College_Location ASC"}, "hardness": "Hard"}, {"nl_queries": "Show the number of dogs that received a treatment arrived in each year in a bar chart that bins arrived date by year interval, and could you sort by the total number in desc?", "db_id": "dog_kennels", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_arrived , COUNT(date_arrived) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id  ORDER BY COUNT(date_arrived) DESC", "binning": "BIN date_arrived BY YEAR"}, "VQL": "Visualize BAR SELECT date_arrived , COUNT(date_arrived) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id  ORDER BY COUNT(date_arrived) DESC BIN date_arrived BY YEAR"}, "hardness": "Hard"}, {"nl_queries": "For those employees who did not have any job in the past, a bar chart shows the distribution of job_id and the sum of manager_id , and group by attribute job_id, order Y-axis in desc order please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC"}, "hardness": "Hard"}, {"nl_queries": "Visualize a bar chart about the distribution of Is_full_time and the sum of Shop_ID , and group by attribute Is_full_time, order by the names in ascending please.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC"}, "hardness": "Medium"}, {"nl_queries": "What is the number of each allergie type? Return a bar chart, I want to sort in ascending by the Y.", "db_id": "allergy_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT AllergyType , COUNT(AllergyType) FROM Allergy_type GROUP BY AllergyType ORDER BY COUNT(AllergyType) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT AllergyType , COUNT(AllergyType) FROM Allergy_type GROUP BY AllergyType ORDER BY COUNT(AllergyType) ASC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who did not have any job in the past, a bar chart shows the distribution of hire_date and the average of manager_id bin hire_date by weekday, show by the y-axis from high to low.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(MANAGER_ID) DESC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(MANAGER_ID) DESC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "List the grape and winery of the wines whose price is bigger than 100, the x-axis is winery and group the grape, and y-axis is the number of wineries, could you show bar in desc order please?", "db_id": "wine_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Grape ,  Winery ORDER BY Winery DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Grape ,  Winery ORDER BY Winery DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "Bar chart x axis product type code y axis the number of product type code, show x axis from low to high order please.", "db_id": "solvency_ii", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Product_Type_Code , COUNT(Product_Type_Code) FROM Products GROUP BY Product_Type_Code ORDER BY Product_Type_Code ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Product_Type_Code , COUNT(Product_Type_Code) FROM Products GROUP BY Product_Type_Code ORDER BY Product_Type_Code ASC"}, "hardness": "Medium"}, {"nl_queries": "Show all distinct product categories along with the number of mailshots in each category in a bar chart, list in desc by the x axis.", "db_id": "customers_campaigns_ecommerce", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT product_category , count(*) FROM mailshot_campaigns GROUP BY product_category ORDER BY product_category DESC", "binning": ""}, "VQL": "Visualize BAR SELECT product_category , count(*) FROM mailshot_campaigns GROUP BY product_category ORDER BY product_category DESC"}, "hardness": "Medium"}, {"nl_queries": "Bar chart of acc_percent from each all neutral, and could you show from low to high by the X please?", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral ASC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral ASC"}, "hardness": "Easy"}, {"nl_queries": "Show the average age of singers for each country with a bar chart, and order in asc by the x axis.", "db_id": "concert_singer", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY Country ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY Country ASC"}, "hardness": "Medium"}, {"nl_queries": "What is the total revenue of companies started by founder. Plot them as bar chart.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Founder , sum(revenue) FROM manufacturers GROUP BY founder", "binning": ""}, "VQL": "Visualize BAR SELECT Founder , sum(revenue) FROM manufacturers GROUP BY founder"}, "hardness": "Easy"}, {"nl_queries": "How many different products are produced in each headquarter city Visualize by bar chart, sort in ascending by the y axis.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Headquarter , count(DISTINCT T1.name) FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code ORDER BY count(DISTINCT T1.name) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Headquarter , count(DISTINCT T1.name) FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code ORDER BY count(DISTINCT T1.name) ASC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, a bar chart shows the distribution of first_name and employee_id , order by the X in ascending.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT FIRST_NAME , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY FIRST_NAME ASC", "binning": ""}, "VQL": "Visualize BAR SELECT FIRST_NAME , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY FIRST_NAME ASC"}, "hardness": "Medium"}, {"nl_queries": "What are the different product names, and what is the sum of quantity ordered for each product. Visualize by bar chart.", "db_id": "customers_and_invoices", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT product_name , sum(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name", "binning": ""}, "VQL": "Visualize BAR SELECT product_name , sum(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name"}, "hardness": "Medium"}, {"nl_queries": "Find  Team_Name and  ACC_Percent , and visualize them by a bar chart.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Team_Name , ACC_Percent FROM basketball_match", "binning": ""}, "VQL": "Visualize BAR SELECT Team_Name , ACC_Percent FROM basketball_match"}, "hardness": "Easy"}, {"nl_queries": "A bar chart for listing the number of the name of technicians whose team is not \"NYY\", I want to display from low to high by the X.", "db_id": "machine_repair", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM technician WHERE Team != \"NYY\" GROUP BY Name ORDER BY Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM technician WHERE Team != \"NYY\" GROUP BY Name ORDER BY Name ASC"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, show me about the distribution of name and the sum of code , and group by attribute name in a bar chart, and I want to display Name in asc order.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC"}, "hardness": "Hard"}, {"nl_queries": "Draw a bar chart for what are the ids and details for all organizations that have grants of more than 6000 dollars?, and order in asc by the y axis.", "db_id": "tracking_grants_for_research", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T1.organisation_id ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T1.organisation_id ASC"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about the sum of manufacturer over the  headquarter , and group by attribute headquarter by a bar chart.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Headquarter , SUM(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter", "binning": ""}, "VQL": "Visualize BAR SELECT Headquarter , SUM(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter"}, "hardness": "Medium"}, {"nl_queries": "Show me a pie chart for what is the name of each continent and how many car makers are there in each one?", "db_id": "car_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent", "binning": ""}, "VQL": "Visualize PIE SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent"}, "hardness": "Medium"}, {"nl_queries": "A pie chart for listing the number of the description of the outcomes for all projects.", "db_id": "tracking_grants_for_research", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description", "binning": ""}, "VQL": "Visualize PIE SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description"}, "hardness": "Medium"}, {"nl_queries": "Draw a bar chart for how many storms occured in each region?, list in descending by the the total number .", "db_id": "storm_record", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Region_name , count(*) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Region_name , count(*) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id ORDER BY count(*) DESC"}, "hardness": "Hard"}, {"nl_queries": "Find the maximum age for each type of pet Return the result with a bar chart, display from low to high by the names please.", "db_id": "pets_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT PetType , max(pet_age) FROM pets GROUP BY PetType ORDER BY PetType ASC", "binning": ""}, "VQL": "Visualize BAR SELECT PetType , max(pet_age) FROM pets GROUP BY PetType ORDER BY PetType ASC"}, "hardness": "Easy"}, {"nl_queries": "Return a bar chart about the distribution of All_Home and the sum of School_ID , and group by attribute All_Home, sort by the y-axis in asc please.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY SUM(School_ID) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY SUM(School_ID) ASC"}, "hardness": "Medium"}, {"nl_queries": "Find the average age of students living in each dorm and the name of dorm Plot them as bar chart, could you sort bar from high to low order please?", "db_id": "dorm_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY dorm_name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY dorm_name DESC"}, "hardness": "Hard"}, {"nl_queries": "Visualize a bar chart for what is average age for different job title?, order by the x-axis in desc.", "db_id": "network_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT job , avg(age) FROM Person GROUP BY job ORDER BY job DESC", "binning": ""}, "VQL": "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY job DESC"}, "hardness": "Medium"}, {"nl_queries": "Draw a bar chart about the distribution of Is_full_time and the amount of Is_full_time , and group by attribute Is_full_time, and display Y in desc order.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY COUNT(Is_full_time) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY COUNT(Is_full_time) DESC"}, "hardness": "Medium"}, {"nl_queries": "Show the number of apartment bookings in each year and bin booking end date by year with a bar chart, could you list Y in ascending order please?", "db_id": "apartment_rentals", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT booking_end_date , COUNT(booking_end_date) FROM Apartment_Bookings  ORDER BY COUNT(booking_end_date) ASC", "binning": "BIN booking_end_date BY YEAR"}, "VQL": "Visualize BAR SELECT booking_end_date , COUNT(booking_end_date) FROM Apartment_Bookings  ORDER BY COUNT(booking_end_date) ASC BIN booking_end_date BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "Return a scatter chart on how many distinct order ids correspond to each product?", "db_id": "customers_and_invoices", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT product_id , count(DISTINCT order_id) FROM Order_items", "binning": ""}, "VQL": "Visualize SCATTER SELECT product_id , count(DISTINCT order_id) FROM Order_items"}, "hardness": "Medium"}, {"nl_queries": "Give the number of each course name with at least five enrollments. Return a bar chart.", "db_id": "college_3", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.CName , COUNT(T1.CName) FROM COURSE AS T1 JOIN ENROLLED_IN AS T2 ON T1.CID = T2.CID GROUP BY T1.CName T2.CID HAVING COUNT(*) >= 5", "binning": ""}, "VQL": "Visualize BAR SELECT T1.CName , COUNT(T1.CName) FROM COURSE AS T1 JOIN ENROLLED_IN AS T2 ON T1.CID = T2.CID GROUP BY T1.CName T2.CID HAVING COUNT(*) >= 5"}, "hardness": "Hard"}, {"nl_queries": "How many professors have a PhD in each department Show bar chart, sort Y-axis in desc order.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT DEPT_CODE , count(*) FROM professor WHERE prof_high_degree = 'Ph.D.' GROUP BY dept_code ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT DEPT_CODE , count(*) FROM professor WHERE prof_high_degree = 'Ph.D.' GROUP BY dept_code ORDER BY count(*) DESC"}, "hardness": "Hard"}, {"nl_queries": "What is the average high temperature for each day of week. Plot them as bar chart.", "db_id": "station_weather", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT day_of_week , avg(high_temperature) FROM weekly_weather GROUP BY day_of_week", "binning": ""}, "VQL": "Visualize BAR SELECT day_of_week , avg(high_temperature) FROM weekly_weather GROUP BY day_of_week"}, "hardness": "Easy"}, {"nl_queries": "Can you draw the trend of how many date in location from over the date in location from?, order by the x-axis in descending.", "db_id": "cre_Doc_Tracking_DB", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations  ORDER BY Date_in_Location_From DESC", "binning": "BIN Date_in_Location_From BY YEAR"}, "VQL": "Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations  ORDER BY Date_in_Location_From DESC BIN Date_in_Location_From BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "Give me the trend about the average of Shop_ID over Start_from , and group by attribute Is_full_time and bin start_from by time, order from high to low by the Start_from please.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Start_from , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC", "binning": "BIN Start_from BY YEAR"}, "VQL": "Visualize LINE SELECT Start_from , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR"}, "hardness": "Extra Hard"}, {"nl_queries": "Compute how many attributes in each name of the attribute definitions with attribute value 0. Show the result with a pie chart.", "db_id": "product_catalog", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT attribute_name , COUNT(attribute_name) FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id = t2.attribute_id WHERE t2.attribute_value = 0 GROUP BY attribute_name", "binning": ""}, "VQL": "Visualize PIE SELECT attribute_name , COUNT(attribute_name) FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id = t2.attribute_id WHERE t2.attribute_value = 0 GROUP BY attribute_name"}, "hardness": "Hard"}, {"nl_queries": "Show all main industry and total market value in each industry in a pie chart.", "db_id": "gas_company", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry", "binning": ""}, "VQL": "Visualize PIE SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry"}, "hardness": "Easy"}, {"nl_queries": "For those employees who did not have any job in the past, return a bar chart about the distribution of job_id and the average of employee_id , and group by attribute job_id, sort the average of employee id in desc order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) DESC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who did not have any job in the past, draw a bar chart about the distribution of job_id and the sum of department_id , and group by attribute job_id, rank by the total number of department id in asc please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) ASC"}, "hardness": "Hard"}, {"nl_queries": "Draw a pie chart about the proportion of  ACC_Road and the sum of Team_ID.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT ACC_Road , SUM(Team_ID) FROM basketball_match GROUP BY ACC_Road", "binning": ""}, "VQL": "Visualize PIE SELECT ACC_Road , SUM(Team_ID) FROM basketball_match GROUP BY ACC_Road"}, "hardness": "Easy"}, {"nl_queries": "List the id of students who registered some courses and the number of their registered courses. Show the correlation.", "db_id": "student_assessment", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT T1.student_id , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id", "binning": ""}, "VQL": "Visualize SCATTER SELECT T1.student_id , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id"}, "hardness": "Medium"}, {"nl_queries": "How many templates with version number later than 5 for each template type code? Give me a pie chart.", "db_id": "cre_Doc_Template_Mgt", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Template_Type_Code , COUNT(Template_Type_Code) FROM Templates WHERE version_number > 5 GROUP BY Template_Type_Code", "binning": ""}, "VQL": "Visualize PIE SELECT Template_Type_Code , COUNT(Template_Type_Code) FROM Templates WHERE version_number > 5 GROUP BY Template_Type_Code"}, "hardness": "Medium"}, {"nl_queries": "For all employees who have the letters D or S in their first name, return a bar chart about the distribution of  job_id and the sum of department_id , and group by attribute job_id.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID"}, "hardness": "Extra Hard"}, {"nl_queries": "How many different products correspond to each order id. Plot them as scatter chart.", "db_id": "customers_and_invoices", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT order_id , count(DISTINCT product_id) FROM Order_items", "binning": ""}, "VQL": "Visualize SCATTER SELECT order_id , count(DISTINCT product_id) FROM Order_items"}, "hardness": "Medium"}, {"nl_queries": "What is the relationship between  ID and  salary ?", "db_id": "college_2", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT ID , salary FROM instructor ORDER BY salary", "binning": ""}, "VQL": "Visualize SCATTER SELECT ID , salary FROM instructor ORDER BY salary"}, "hardness": "Easy"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about the sum of revenue over the name , and group by attribute name, order X-axis from high to low order.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC"}, "hardness": "Hard"}, {"nl_queries": "Bar chart x axis acc road y axis total number of school id, and I want to show by the Y in ascending.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Road , SUM(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY SUM(School_ID) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Road , SUM(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY SUM(School_ID) ASC"}, "hardness": "Medium"}, {"nl_queries": "Show me about the correlation between  Height and  Weight , and group by attribute Sex in a scatter chart.", "db_id": "candidate_poll", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Height , Weight FROM people GROUP BY Sex", "binning": ""}, "VQL": "Visualize SCATTER SELECT Height , Weight FROM people GROUP BY Sex"}, "hardness": "Easy"}, {"nl_queries": "For all employees who have the letters D or S in their first name, show me about the distribution of  job_id and the sum of department_id , and group by attribute job_id in a bar chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID"}, "hardness": "Extra Hard"}, {"nl_queries": "Show the number of document type for different document type description in a bar chart.", "db_id": "cre_Docs_and_Epenses", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types GROUP BY Document_Type_Description", "binning": ""}, "VQL": "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types GROUP BY Document_Type_Description"}, "hardness": "Easy"}, {"nl_queries": "Return a histogram on how old is the average person for each job?", "db_id": "network_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT job , avg(age) FROM Person GROUP BY job", "binning": ""}, "VQL": "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job"}, "hardness": "Easy"}, {"nl_queries": "Return a pie chart on what are the different template type codes, and how many templates correspond to each?", "db_id": "cre_Doc_Template_Mgt", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Template_Type_Code , count(*) FROM Templates GROUP BY template_type_code", "binning": ""}, "VQL": "Visualize PIE SELECT Template_Type_Code , count(*) FROM Templates GROUP BY template_type_code"}, "hardness": "Easy"}, {"nl_queries": "A bar chart about what are the memories and carriers of phones?, could you list in ascending by the y-axis?", "db_id": "phone_market", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Carrier , SUM(Memory_in_G) FROM phone GROUP BY Carrier ORDER BY SUM(Memory_in_G) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Carrier , SUM(Memory_in_G) FROM phone GROUP BY Carrier ORDER BY SUM(Memory_in_G) ASC"}, "hardness": "Medium"}, {"nl_queries": "What is the number of singers for each country? Show a bar chart.", "db_id": "concert_singer", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Country , COUNT(Country) FROM singer GROUP BY Country", "binning": ""}, "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country"}, "hardness": "Easy"}, {"nl_queries": "For those records from the products and each product's manufacturer, return a bar chart about the distribution of name and revenue , and group by attribute headquarter, and could you show from high to low by the X-axis please?", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter , T1.Name ORDER BY T1.Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter , T1.Name ORDER BY T1.Name DESC"}, "hardness": "Hard"}, {"nl_queries": "What are the number of names of patients who made an appointment?", "db_id": "hospital_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM appointment AS T1 JOIN patient AS T2 ON T1.patient = T2.ssn GROUP BY Name", "binning": ""}, "VQL": "Visualize PIE SELECT Name , COUNT(Name) FROM appointment AS T1 JOIN patient AS T2 ON T1.patient = T2.ssn GROUP BY Name"}, "hardness": "Medium"}, {"nl_queries": "List singer names and number of concerts for each singer, and could you sort in descending by the X-axis please?", "db_id": "concert_singer", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id GROUP BY T2.singer_id ORDER BY Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id GROUP BY T2.singer_id ORDER BY Name DESC"}, "hardness": "Hard"}, {"nl_queries": "Show the number of transactions for different investors. Plot them as scatter chart.", "db_id": "tracking_share_transactions", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT investor_id , COUNT(*) FROM TRANSACTIONS GROUP BY investor_id", "binning": ""}, "VQL": "Visualize SCATTER SELECT investor_id , COUNT(*) FROM TRANSACTIONS GROUP BY investor_id"}, "hardness": "Easy"}, {"nl_queries": "Show the number of brand from each brand", "db_id": "mountain_photos", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT brand , COUNT(brand) FROM camera_lens GROUP BY brand", "binning": ""}, "VQL": "Visualize BAR SELECT brand , COUNT(brand) FROM camera_lens GROUP BY brand"}, "hardness": "Easy"}, {"nl_queries": "Bar chart x axis left office y axis the number of left office, show total number from low to high order.", "db_id": "party_people", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Left_office , COUNT(Left_office) FROM party  ORDER BY COUNT(Left_office) ASC", "binning": "BIN Left_office BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Left_office , COUNT(Left_office) FROM party  ORDER BY COUNT(Left_office) ASC BIN Left_office BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "Show white percentages of cities and the crime rates of counties they are in with a scatter chart.", "db_id": "county_public_safety", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT White , Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID", "binning": ""}, "VQL": "Visualize SCATTER SELECT White , Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID"}, "hardness": "Easy"}, {"nl_queries": "Draw a bar chart for what is the number of entry descriptions of each problem?, and show in descending by the X-axis.", "db_id": "tracking_software_problems", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT log_entry_description , COUNT(log_entry_description) FROM problem_log GROUP BY log_entry_description ORDER BY log_entry_description DESC", "binning": ""}, "VQL": "Visualize BAR SELECT log_entry_description , COUNT(log_entry_description) FROM problem_log GROUP BY log_entry_description ORDER BY log_entry_description DESC"}, "hardness": "Medium"}, {"nl_queries": "What is the number of each course name that have at least five enrollments? Show me a bar chart, show y axis from high to low order.", "db_id": "college_3", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.CName , COUNT(T1.CName) FROM COURSE AS T1 JOIN ENROLLED_IN AS T2 ON T1.CID = T2.CID GROUP BY T1.CName T2.CID HAVING COUNT(*) >= 5 ORDER BY COUNT(T1.CName) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.CName , COUNT(T1.CName) FROM COURSE AS T1 JOIN ENROLLED_IN AS T2 ON T1.CID = T2.CID GROUP BY T1.CName T2.CID HAVING COUNT(*) >= 5 ORDER BY COUNT(T1.CName) DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "What are the number of the names of photos taken with the lens brand 'Sigma' or 'Olympus'?, and show in desc by the how many name please.", "db_id": "mountain_photos", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.name , COUNT(T1.name) FROM camera_lens AS T1 JOIN photos AS T2 ON T2.camera_lens_id = T1.id WHERE T1.brand = 'Sigma' OR T1.brand = 'Olympus' GROUP BY T1.name ORDER BY COUNT(T1.name) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.name , COUNT(T1.name) FROM camera_lens AS T1 JOIN photos AS T2 ON T2.camera_lens_id = T1.id WHERE T1.brand = 'Sigma' OR T1.brand = 'Olympus' GROUP BY T1.name ORDER BY COUNT(T1.name) DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "Which Payments were processed with Visa? List the date and the amount using a bar chart.", "db_id": "insurance_policies", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa'", "binning": ""}, "VQL": "Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa'"}, "hardness": "Easy"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, a bar chart shows the distribution of  hire_date and the sum of salary bin hire_date by weekday.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "Draw a bar chart for how many patients do each physician take care of? List their names and number of patients they take care of, and I want to display in asc by the X.", "db_id": "hospital_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid ORDER BY T1.Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid ORDER BY T1.Name ASC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who was hired before 2002-06-21, give me the comparison about the average of manager_id over the job_id , and group by attribute job_id by a bar chart, rank by the total number from high to low.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(MANAGER_ID) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(MANAGER_ID) DESC"}, "hardness": "Hard"}, {"nl_queries": "Show the number of documents in different starting date Bin starting date by year interval and group by location code with a group line chart, sort x axis from low to high order.", "db_id": "cre_Doc_Tracking_DB", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations GROUP BY Location_Code ORDER BY Date_in_Location_From ASC", "binning": "BIN Date_in_Location_From BY YEAR"}, "VQL": "Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations GROUP BY Location_Code ORDER BY Date_in_Location_From ASC BIN Date_in_Location_From BY YEAR"}, "hardness": "Extra Hard"}, {"nl_queries": "Return the lot details, group the lot details, and compute the number of each lot details, list in desc by the y-axis please.", "db_id": "tracking_share_transactions", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT lot_details , COUNT(lot_details) FROM LOTS GROUP BY lot_details ORDER BY COUNT(lot_details) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM LOTS GROUP BY lot_details ORDER BY COUNT(lot_details) DESC"}, "hardness": "Medium"}, {"nl_queries": "Visualize a bar chart about the distribution of  personal_name and  gender_mf .", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT personal_name , gender_mf FROM Course_Authors_and_Tutors ORDER BY personal_name", "binning": ""}, "VQL": "Visualize BAR SELECT personal_name , gender_mf FROM Course_Authors_and_Tutors ORDER BY personal_name"}, "hardness": "Easy"}, {"nl_queries": "For those employees who was hired before 2002-06-21, return a bar chart about the distribution of hire_date and the sum of employee_id bin hire_date by time, could you list by the y axis from low to high?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(EMPLOYEE_ID) ASC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "How many students are from each city, and which cities have more than one cities. Plot them as bar chart.", "db_id": "dorm_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT city_code , count(*) FROM student GROUP BY city_code", "binning": ""}, "VQL": "Visualize BAR SELECT city_code , count(*) FROM student GROUP BY city_code"}, "hardness": "Easy"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about revenue over the name , and group by attribute name, and could you rank from high to low by the bars please?", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Name DESC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, draw a bar chart about the distribution of hire_date and the average of salary bin hire_date by time, I want to rank by the y-axis from low to high.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY AVG(SALARY) ASC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "Stacked bar chart of school_id for with each ACC_Home in each acc road", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Road , School_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Road , School_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road"}, "hardness": "Extra Hard"}, {"nl_queries": "What is the number of singers for each country? Show a bar chart, and sort by the bar from high to low.", "db_id": "concert_singer", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY Country DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY Country DESC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, return a bar chart about the distribution of email and employee_id , and rank from high to low by the total number please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT EMAIL , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY EMPLOYEE_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT EMAIL , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY EMPLOYEE_ID DESC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who did not have any job in the past, return a scatter chart about the correlation between  commission_pct and  manager_id .", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT COMMISSION_PCT , MANAGER_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)", "binning": ""}, "VQL": "Visualize SCATTER SELECT COMMISSION_PCT , MANAGER_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)"}, "hardness": "Easy"}, {"nl_queries": "Find Team_Name and ACC_Percent , and visualize them by a bar chart, could you order by the Team_Name in desc?", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Team_Name , ACC_Percent FROM basketball_match ORDER BY Team_Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Team_Name , ACC_Percent FROM basketball_match ORDER BY Team_Name DESC"}, "hardness": "Easy"}, {"nl_queries": "How many invoices were billed from each state Plot them as bar chart, and I want to show by the billing_state from low to high.", "db_id": "store_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY billing_state ASC", "binning": ""}, "VQL": "Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY billing_state ASC"}, "hardness": "Hard"}, {"nl_queries": "Show the number of companies each investor has invested with a bar chart, and I want to show by the x axis in descending.", "db_id": "entrepreneur", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor ORDER BY Investor DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor ORDER BY Investor DESC"}, "hardness": "Medium"}, {"nl_queries": "Return the number of the categories of music festivals that have the result \"Awarded\".", "db_id": "music_4", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category", "binning": ""}, "VQL": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category"}, "hardness": "Medium"}, {"nl_queries": "How many bookings for each apartment number? Plot a bar chart, I want to sort names in asc order.", "db_id": "apartment_rentals", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT apt_number , COUNT(apt_number) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id GROUP BY apt_number ORDER BY apt_number ASC", "binning": ""}, "VQL": "Visualize BAR SELECT apt_number , COUNT(apt_number) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id GROUP BY apt_number ORDER BY apt_number ASC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, a line chart shows the change of commission_pct over hire_date, and sort X in asc order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC"}, "hardness": "Medium"}, {"nl_queries": "Draw a bar chart about the distribution of  Start_from and the amount of Start_from , and group by attribute Is_full_time and bin start_from by weekday.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Start_from , COUNT(Start_from) FROM hiring GROUP BY Is_full_time", "binning": "BIN Start_from BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Start_from , COUNT(Start_from) FROM hiring GROUP BY Is_full_time BIN Start_from BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "In zip code 94107, on which day neither Fog nor Rain was not observed, and count them by a bar chart, sort in desc by the Y.", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date , COUNT(date) FROM weather WHERE zip_code = 94107 AND EVENTS != \"Fog\" AND EVENTS != \"Rain\"  ORDER BY COUNT(date) DESC", "binning": "BIN date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE zip_code = 94107 AND EVENTS != \"Fog\" AND EVENTS != \"Rain\"  ORDER BY COUNT(date) DESC BIN date BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "Visualize the general trend of the average of shop id over the start from, rank in desc by the x axis.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Start_from , AVG(Shop_ID) FROM hiring  ORDER BY Start_from DESC", "binning": "BIN Start_from BY YEAR"}, "VQL": "Visualize LINE SELECT Start_from , AVG(Shop_ID) FROM hiring  ORDER BY Start_from DESC BIN Start_from BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about the sum of manufacturer over the name , and group by attribute name by a bar chart, and could you show by the Name in descending?", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC"}, "hardness": "Hard"}, {"nl_queries": "What is the date of birth of every customer whose status code is 'Good Customer', and count them by a line chart, could you display by the X in ascending please?", "db_id": "driving_school", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date_of_birth , COUNT(date_of_birth) FROM Customers WHERE customer_status_code = 'Good Customer'  ORDER BY date_of_birth ASC", "binning": "BIN date_of_birth BY YEAR"}, "VQL": "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Customers WHERE customer_status_code = 'Good Customer'  ORDER BY date_of_birth ASC BIN date_of_birth BY YEAR"}, "hardness": "Hard"}, {"nl_queries": "List the number of games in each season with a line chart, and display X in asc order.", "db_id": "game_injury", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Season , COUNT(Season) FROM game GROUP BY Season ORDER BY Season ASC", "binning": ""}, "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Season ORDER BY Season ASC"}, "hardness": "Medium"}, {"nl_queries": "For all employees who have the letters D or S in their first name, give me the comparison about the sum of manager_id over the hire_date bin hire_date by time, and I want to order in desc by the total number.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(MANAGER_ID) DESC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH"}, "hardness": "Extra Hard"}, {"nl_queries": "You can return a bar chart to show the employees' first name and the corresponding department's id.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT FIRST_NAME , DEPARTMENT_ID FROM employees", "binning": ""}, "VQL": "Visualize BAR SELECT FIRST_NAME , DEPARTMENT_ID FROM employees"}, "hardness": "Easy"}, {"nl_queries": "For those employees who was hired before 2002-06-21, return a bar chart about the distribution of  job_id and the sum of manager_id , and group by attribute job_id.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID"}, "hardness": "Medium"}, {"nl_queries": "A bar chart about what are the memories and carriers of phones?", "db_id": "phone_market", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Carrier , AVG(Memory_in_G) FROM phone GROUP BY Carrier", "binning": ""}, "VQL": "Visualize BAR SELECT Carrier , AVG(Memory_in_G) FROM phone GROUP BY Carrier"}, "hardness": "Easy"}, {"nl_queries": "Return a scatter chart on what are the ids and details of all accounts?", "db_id": "cre_Docs_and_Epenses", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Account_ID , Account_Details FROM Accounts", "binning": ""}, "VQL": "Visualize SCATTER SELECT Account_ID , Account_Details FROM Accounts"}, "hardness": "Easy"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, draw a bar chart about the distribution of email and salary , and display y-axis in ascending order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT EMAIL , SALARY FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY SALARY ASC", "binning": ""}, "VQL": "Visualize BAR SELECT EMAIL , SALARY FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY SALARY ASC"}, "hardness": "Medium"}, {"nl_queries": "What are the names of products with price at most 200, and count them by a bar chart, display how many name in desc order.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM products WHERE price <= 200 GROUP BY Name ORDER BY COUNT(Name) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM products WHERE price <= 200 GROUP BY Name ORDER BY COUNT(Name) DESC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, visualize a bar chart about the distribution of  phone_number and  department_id .", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT PHONE_NUMBER , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)", "binning": ""}, "VQL": "Visualize BAR SELECT PHONE_NUMBER , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)"}, "hardness": "Extra Hard"}, {"nl_queries": "Show the number of companies whose headquarters are not from USA fpr each main industry in a bar chart, show X-axis in ascending order please.", "db_id": "gas_company", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE headquarters != 'USA' GROUP BY Main_Industry ORDER BY Main_Industry ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE headquarters != 'USA' GROUP BY Main_Industry ORDER BY Main_Industry ASC"}, "hardness": "Hard"}, {"nl_queries": "Give me a bar chart about the number of countries in the artist table, and list by the Country in asc.", "db_id": "theme_gallery", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Country , COUNT(Country) FROM artist GROUP BY Country ORDER BY Country ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM artist GROUP BY Country ORDER BY Country ASC"}, "hardness": "Medium"}, {"nl_queries": "Create a bar chart showing how many class across class", "db_id": "race_track", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Class , COUNT(Class) FROM race GROUP BY Class", "binning": ""}, "VQL": "Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class"}, "hardness": "Easy"}, {"nl_queries": "Compare the average of maximum price of wines each year, bin the year into the weekday interval, and I want to display in asc by the y axis.", "db_id": "wine_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Year , AVG(max(Price)) FROM WINE  ORDER BY AVG(max(Price)) ASC", "binning": "BIN Year BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Year , AVG(max(Price)) FROM WINE  ORDER BY AVG(max(Price)) ASC BIN Year BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "Sort the gender codes in descending order of their corresponding number of guests. Return both the gender codes and counts with a pie chart.", "db_id": "apartment_rentals", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT gender_code , COUNT(*) FROM Guests GROUP BY gender_code ORDER BY COUNT(*) DESC", "binning": ""}, "VQL": "Visualize PIE SELECT gender_code , COUNT(*) FROM Guests GROUP BY gender_code ORDER BY COUNT(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "Draw a bar chart for what are the names of the high schoolers and how many friends does each have?", "db_id": "network_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.name , SUM(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name", "binning": ""}, "VQL": "Visualize BAR SELECT T2.name , SUM(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name"}, "hardness": "Medium"}, {"nl_queries": "Please compare the credit score of the customers who have some loans by a bar chart, and display credit_score from high to low order please.", "db_id": "loan_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT cust_name , credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id ORDER BY credit_score DESC", "binning": ""}, "VQL": "Visualize BAR SELECT cust_name , credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id ORDER BY credit_score DESC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about the average of price over the name , and group by attribute name by a bar chart, could you list by the bars in desc?", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC"}, "hardness": "Hard"}, {"nl_queries": "what are the different card types, and how many transactions have been made with each?, show in ascending by the card_type_code please.", "db_id": "customers_card_transactions", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT card_type_code , count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id = T2.card_id GROUP BY T2.card_type_code ORDER BY card_type_code ASC", "binning": ""}, "VQL": "Visualize BAR SELECT card_type_code , count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id = T2.card_id GROUP BY T2.card_type_code ORDER BY card_type_code ASC"}, "hardness": "Hard"}, {"nl_queries": "Show the number of accounts in a bar chart that groups by other account details, and order total number in descending order.", "db_id": "customers_and_invoices", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT other_account_details , COUNT(other_account_details) FROM Accounts GROUP BY other_account_details ORDER BY COUNT(other_account_details) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT other_account_details , COUNT(other_account_details) FROM Accounts GROUP BY other_account_details ORDER BY COUNT(other_account_details) DESC"}, "hardness": "Medium"}, {"nl_queries": "For each position, what is the minimum time students spent practicing. Plot them as bar chart.", "db_id": "soccer_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT pPos , min(T2.HS) FROM tryout AS T1 JOIN player AS T2 ON T1.pID = T2.pID GROUP BY pPos", "binning": ""}, "VQL": "Visualize BAR SELECT pPos , min(T2.HS) FROM tryout AS T1 JOIN player AS T2 ON T1.pID = T2.pID GROUP BY pPos"}, "hardness": "Easy"}, {"nl_queries": "For those records from the products and each product's manufacturer, show me about the distribution of name and the sum of code , and group by attribute name in a bar chart, rank bar in asc order.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC"}, "hardness": "Hard"}, {"nl_queries": "Show me about the distribution of All_Home and the sum of Team_ID , and group by attribute All_Home in a bar chart, and rank x-axis in descending order.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home DESC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home DESC"}, "hardness": "Medium"}, {"nl_queries": "A bar chart for what is the number of locations of the wrestlers, and could you order in asc by the Location?", "db_id": "wrestler", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Location , COUNT(Location) FROM wrestler GROUP BY Location ORDER BY Location ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Location , COUNT(Location) FROM wrestler GROUP BY Location ORDER BY Location ASC"}, "hardness": "Medium"}, {"nl_queries": "Scatter plot to show max(stu gpa) on x axis and mean stu gpa on y axis.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT max(stu_gpa) , avg(stu_gpa) FROM student GROUP BY dept_code", "binning": ""}, "VQL": "Visualize SCATTER SELECT max(stu_gpa) , avg(stu_gpa) FROM student GROUP BY dept_code"}, "hardness": "Easy"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about the average of manufacturer over the headquarter , and group by attribute headquarter, I want to sort by the x-axis in descending.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter DESC"}, "hardness": "Hard"}, {"nl_queries": "Draw a bar chart for what are the department names and how many employees work in each of them?, sort the total number from low to high order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT DEPARTMENT_NAME , COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id GROUP BY department_name ORDER BY COUNT(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT DEPARTMENT_NAME , COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id GROUP BY department_name ORDER BY COUNT(*) ASC"}, "hardness": "Hard"}, {"nl_queries": "Show me about the distribution of meter_600 and ID in a bar chart, list by the y-axis from low to high.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_600 , ID FROM swimmer ORDER BY ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_600 , ID FROM swimmer ORDER BY ID ASC"}, "hardness": "Easy"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, a bar chart shows the distribution of hire_date and the sum of department_id bin hire_date by weekday, and show y axis in ascending order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(DEPARTMENT_ID) ASC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "How many companies that have ever operated a flight for each type? Draw a bar chart, I want to rank from low to high by the x axis.", "db_id": "flight_company", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Type , COUNT(Type) FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id GROUP BY Type ORDER BY Type ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Type , COUNT(Type) FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id GROUP BY Type ORDER BY Type ASC"}, "hardness": "Hard"}, {"nl_queries": "What is the number of booking start dates of the apartments with more than 2 bedrooms for each year? Return a bar chart.", "db_id": "apartment_rentals", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.bedroom_count > 2", "binning": "BIN booking_start_date BY YEAR"}, "VQL": "Visualize BAR SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.bedroom_count > 2 BIN booking_start_date BY YEAR"}, "hardness": "Hard"}, {"nl_queries": "Find the minimum gpa of all students in each department with a bar chart, and display in desc by the Y.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT DEPT_CODE , min(stu_gpa) FROM student GROUP BY DEPT_CODE ORDER BY min(stu_gpa) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT DEPT_CODE , min(stu_gpa) FROM student GROUP BY DEPT_CODE ORDER BY min(stu_gpa) DESC"}, "hardness": "Easy"}, {"nl_queries": "What is the number of their teams in elimination? Draw a bar chart.", "db_id": "wrestler", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Team , COUNT(Team) FROM elimination GROUP BY Team", "binning": ""}, "VQL": "Visualize BAR SELECT Team , COUNT(Team) FROM elimination GROUP BY Team"}, "hardness": "Easy"}, {"nl_queries": "A bar chart shows the distribution of Is_full_time and the sum of Employee_ID , and group by attribute Is_full_time, and display by the X from low to high.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC"}, "hardness": "Medium"}, {"nl_queries": "Give me the comparison about the sum of Team_ID over the ACC_Road , and group by attribute ACC_Road, show from low to high by the Y.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Road , SUM(Team_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY SUM(Team_ID) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Road , SUM(Team_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY SUM(Team_ID) ASC"}, "hardness": "Medium"}, {"nl_queries": "Return a pie chart about the proportion of  Sex and the sum of Weight.", "db_id": "candidate_poll", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Sex , SUM(Weight) FROM people GROUP BY Sex", "binning": ""}, "VQL": "Visualize PIE SELECT Sex , SUM(Weight) FROM people GROUP BY Sex"}, "hardness": "Easy"}, {"nl_queries": "What are the descriptions for the aircrafts, and count them by a bar chart", "db_id": "aircraft", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description", "binning": ""}, "VQL": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description"}, "hardness": "Easy"}, {"nl_queries": "How many events have each participants attended? Show their total number by each participant type code using a bar chart, and could you display X-axis from high to low order?", "db_id": "local_govt_in_alabama", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Participant_Type_Code , SUM(count(*)) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID GROUP BY T1.Participant_Type_Code ORDER BY T1.Participant_Type_Code DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Participant_Type_Code , SUM(count(*)) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID GROUP BY T1.Participant_Type_Code ORDER BY T1.Participant_Type_Code DESC"}, "hardness": "Hard"}, {"nl_queries": "A bar chart for what are the number of the dates that have an average sea level pressure between 30.3 and 31?", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date , COUNT(date) FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31", "binning": "BIN date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31 BIN date BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "Draw a bar chart of is full time versus sum employee id, order x axis in ascending order please.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC"}, "hardness": "Medium"}, {"nl_queries": "How many debates are held for each venue? Show a pie chart.", "db_id": "debate", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Venue , COUNT(Venue) FROM debate GROUP BY Venue", "binning": ""}, "VQL": "Visualize PIE SELECT Venue , COUNT(Venue) FROM debate GROUP BY Venue"}, "hardness": "Easy"}, {"nl_queries": "Return the low and high estimates for all film markets in a scatter chart", "db_id": "film_rank", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Low_Estimate , High_Estimate FROM film_market_estimation", "binning": ""}, "VQL": "Visualize SCATTER SELECT Low_Estimate , High_Estimate FROM film_market_estimation"}, "hardness": "Easy"}, {"nl_queries": "What are the number of the dates in which the mean sea level pressure was between 303 and 31?, display date in asc order.", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date , COUNT(date) FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31 GROUP BY date ORDER BY date ASC", "binning": ""}, "VQL": "Visualize LINE SELECT date , COUNT(date) FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31 GROUP BY date ORDER BY date ASC"}, "hardness": "Hard"}, {"nl_queries": "List the distinct payment method codes with the number of orders mad Show bar chart, and display X in asc order.", "db_id": "cre_Drama_Workshop_Groups", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY payment_method_code ASC", "binning": ""}, "VQL": "Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY payment_method_code ASC"}, "hardness": "Medium"}, {"nl_queries": "Show how many committee from each committee, sort from low to high by the y axis please.", "db_id": "election", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY COUNT(Committee) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY COUNT(Committee) ASC"}, "hardness": "Medium"}, {"nl_queries": "Visualize a bar chart about the distribution of  other_details and the sum of monthly_rental , and group by attribute other_details.", "db_id": "behavior_monitoring", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT other_details , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC", "binning": ""}, "VQL": "Visualize BAR SELECT other_details , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, show me about the distribution of name and revenue , and group by attribute founder in a bar chart, and I want to display by the X in desc.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder , T1.Name ORDER BY T1.Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder , T1.Name ORDER BY T1.Name DESC"}, "hardness": "Hard"}, {"nl_queries": "I want to know the proportion of the total number for each country.", "db_id": "perpetrator", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Country , COUNT(*) FROM perpetrator GROUP BY Country", "binning": ""}, "VQL": "Visualize PIE SELECT Country , COUNT(*) FROM perpetrator GROUP BY Country"}, "hardness": "Easy"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, find job_id and the average of department_id , and group by attribute job_id, and visualize them by a bar chart, could you rank in ascending by the names?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "Return a bar chart on what are the allergy types and how many allergies correspond to each one?, and show in descending by the total number please.", "db_id": "allergy_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "Return a histogram on what are the age and hometown of teachers?, and could you list in asc by the Age?", "db_id": "course_teach", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Hometown , Age FROM teacher ORDER BY Age ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Age ASC"}, "hardness": "Easy"}, {"nl_queries": "For those records from the products and each product's manufacturer, show me about the distribution of  name and the average of revenue , and group by attribute name in a bar chart.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name"}, "hardness": "Medium"}, {"nl_queries": "Visualize a pie chart about the proportion of  ACC_Regular_Season and  Team_ID.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT ACC_Regular_Season , Team_ID FROM basketball_match", "binning": ""}, "VQL": "Visualize PIE SELECT ACC_Regular_Season , Team_ID FROM basketball_match"}, "hardness": "Easy"}, {"nl_queries": "What is the total number of every ship type by categorizing by nationality?", "db_id": "ship_mission", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type", "binning": ""}, "VQL": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, a bar chart shows the distribution of name and code , and group by attribute headquarter, and could you sort in desc by the Name?", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter , T1.Name ORDER BY T1.Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter , T1.Name ORDER BY T1.Name DESC"}, "hardness": "Hard"}, {"nl_queries": "Visualize the title and and the average star rating of the movie using a bar chart, display from low to high by the y-axis.", "db_id": "movie_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT title , AVG(stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY title ORDER BY AVG(stars) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT title , AVG(stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY title ORDER BY AVG(stars) ASC"}, "hardness": "Hard"}, {"nl_queries": "Show average of budget in different year and group by department creation time with a line chart.", "db_id": "department_management", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Creation , AVG(Budget_in_Billions) FROM department GROUP BY Creation", "binning": ""}, "VQL": "Visualize LINE SELECT Creation , AVG(Budget_in_Billions) FROM department GROUP BY Creation"}, "hardness": "Easy"}, {"nl_queries": "What is the highest price of product, grouped by product type? Show a bar chart, I want to display by the Y-axis in descending.", "db_id": "department_store", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code ORDER BY max(product_price) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code ORDER BY max(product_price) DESC"}, "hardness": "Easy"}, {"nl_queries": "Show me a bar chart for how many players are from each country?, and display Y-axis from low to high order.", "db_id": "match_season", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Country_name , COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country GROUP BY T1.Country_name ORDER BY COUNT(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Country_name , COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country GROUP BY T1.Country_name ORDER BY COUNT(*) ASC"}, "hardness": "Hard"}, {"nl_queries": "Show the sum of price supplied by supplier id 3 for different product type code in a bar chart.", "db_id": "department_store", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT product_type_code , SUM(product_price) FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id WHERE T1.supplier_id = 3 GROUP BY product_type_code", "binning": ""}, "VQL": "Visualize BAR SELECT product_type_code , SUM(product_price) FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id WHERE T1.supplier_id = 3 GROUP BY product_type_code"}, "hardness": "Hard"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, give me the comparison about  employee_id over the  last_name .", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT LAST_NAME , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)", "binning": ""}, "VQL": "Visualize BAR SELECT LAST_NAME , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)"}, "hardness": "Extra Hard"}, {"nl_queries": "A bar chart showing the number of start date of the apartment bookings made by female guests (gender code \"Female\") for each weekday, and could you show total number in asc order?", "db_id": "apartment_rentals", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id WHERE T2.gender_code = \"Female\"  ORDER BY COUNT(booking_start_date) ASC", "binning": "BIN booking_start_date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id WHERE T2.gender_code = \"Female\"  ORDER BY COUNT(booking_start_date) ASC BIN booking_start_date BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "What are the number of the names of all products?", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM Products GROUP BY Name", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name"}, "hardness": "Easy"}, {"nl_queries": "Give me the trend about the number of church opening in each year.", "db_id": "wedding", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Open_Date , COUNT(Open_Date) FROM Church GROUP BY Open_Date", "binning": ""}, "VQL": "Visualize LINE SELECT Open_Date , COUNT(Open_Date) FROM Church GROUP BY Open_Date"}, "hardness": "Easy"}, {"nl_queries": "what are the main indstries and total market value for each industry?, and could you display bars in asc order?", "db_id": "gas_company", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY Main_Industry ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY Main_Industry ASC"}, "hardness": "Medium"}, {"nl_queries": "Show the number of courses for each course description in a stacked bar chart The x-axis is course description and group by instructor's first name, I want to list y axis from high to low order.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT CRS_DESCRIPTION , COUNT(CRS_DESCRIPTION) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num GROUP BY EMP_FNAME ,  CRS_DESCRIPTION ORDER BY COUNT(CRS_DESCRIPTION) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT CRS_DESCRIPTION , COUNT(CRS_DESCRIPTION) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num GROUP BY EMP_FNAME ,  CRS_DESCRIPTION ORDER BY COUNT(CRS_DESCRIPTION) DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees who was hired before 2002-06-21, draw a bar chart about the distribution of  hire_date and the sum of employee_id bin hire_date by time.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH"}, "hardness": "Medium"}, {"nl_queries": "Show the average age for all female students and group them by first name in a bar chart, and I want to display by the y-axis from high to low.", "db_id": "allergy_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Fname , AVG(Age) FROM Student WHERE Sex = 'F' GROUP BY Fname ORDER BY AVG(Age) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Fname , AVG(Age) FROM Student WHERE Sex = 'F' GROUP BY Fname ORDER BY AVG(Age) DESC"}, "hardness": "Hard"}, {"nl_queries": "Show all destinations and the number of flights to each destination by a bar chart, order in ascending by the the total number .", "db_id": "flight_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT destination , count(*) FROM Flight GROUP BY destination ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination ORDER BY count(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "What is the relationship between  School_ID and  All_Games_Percent , and group by attribute ACC_Regular_Season?", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Regular_Season", "binning": ""}, "VQL": "Visualize SCATTER SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Regular_Season"}, "hardness": "Easy"}, {"nl_queries": "List the number of enrolment students in each month and bin date of enrolment by month interval with a bar chart.", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Student_Course_Enrolment", "binning": "BIN date_of_enrolment BY MONTH"}, "VQL": "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Student_Course_Enrolment BIN date_of_enrolment BY MONTH"}, "hardness": "Easy"}, {"nl_queries": "Please show the trend about the number of days with max temperature reaches 80 change over dates, and could you display x axis from high to low order please?", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date , COUNT(date) FROM weather WHERE max_temperature_f >= 80 GROUP BY date ORDER BY date DESC", "binning": ""}, "VQL": "Visualize LINE SELECT date , COUNT(date) FROM weather WHERE max_temperature_f >= 80 GROUP BY date ORDER BY date DESC"}, "hardness": "Hard"}, {"nl_queries": "Show the number of courses for each instructor in a bar chart, and display bar in descending order please.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num GROUP BY EMP_FNAME ORDER BY EMP_FNAME DESC", "binning": ""}, "VQL": "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num GROUP BY EMP_FNAME ORDER BY EMP_FNAME DESC"}, "hardness": "Hard"}, {"nl_queries": "What are the invoice dates for customers with the first name Astrid and the last name Gruber, and count them by a bar chart, sort in asc by the Y-axis.", "db_id": "chinook_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT InvoiceDate , COUNT(InvoiceDate) FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.FirstName = \"Astrid\" AND LastName = \"Gruber\"  ORDER BY COUNT(InvoiceDate) ASC", "binning": "BIN InvoiceDate BY YEAR"}, "VQL": "Visualize BAR SELECT InvoiceDate , COUNT(InvoiceDate) FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.FirstName = \"Astrid\" AND LastName = \"Gruber\"  ORDER BY COUNT(InvoiceDate) ASC BIN InvoiceDate BY YEAR"}, "hardness": "Extra Hard"}, {"nl_queries": "Visualize a bar chart to show how many players in each occupation.", "db_id": "riding_club", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Occupation , COUNT(Occupation) FROM player GROUP BY Occupation", "binning": ""}, "VQL": "Visualize BAR SELECT Occupation , COUNT(Occupation) FROM player GROUP BY Occupation"}, "hardness": "Easy"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, give me the comparison about the sum of salary over the job_id , and group by attribute job_id, and list by the names from high to low please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "Find  ACC_Regular_Season and  All_Games_Percent , and visualize them by a bar chart.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match"}, "hardness": "Easy"}, {"nl_queries": "Bar chart of mean age from each city code, display from high to low by the Y.", "db_id": "dorm_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) DESC"}, "hardness": "Medium"}, {"nl_queries": "Visualize a scatter chart about the correlation between  student_id and  monthly_rental , and group by attribute other_details.", "db_id": "behavior_monitoring", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT student_id , monthly_rental FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC", "binning": ""}, "VQL": "Visualize SCATTER SELECT student_id , monthly_rental FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC"}, "hardness": "Medium"}, {"nl_queries": "Give me the comparison about ACC_Percent over the Team_Name , and rank in descending by the y-axis.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Team_Name , ACC_Percent FROM basketball_match ORDER BY ACC_Percent DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Team_Name , ACC_Percent FROM basketball_match ORDER BY ACC_Percent DESC"}, "hardness": "Easy"}, {"nl_queries": "Show the number of template type code from each template type code, sort from high to low by the bars please.", "db_id": "cre_Doc_Template_Mgt", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Template_Type_Code , COUNT(Template_Type_Code) FROM Templates GROUP BY Template_Type_Code ORDER BY Template_Type_Code DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Template_Type_Code , COUNT(Template_Type_Code) FROM Templates GROUP BY Template_Type_Code ORDER BY Template_Type_Code DESC"}, "hardness": "Medium"}, {"nl_queries": "Draw a scatter chart about the correlation between  ACC_Percent and  All_Games_Percent , and group by attribute Team_Name.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT ACC_Percent , All_Games_Percent FROM basketball_match GROUP BY Team_Name", "binning": ""}, "VQL": "Visualize SCATTER SELECT ACC_Percent , All_Games_Percent FROM basketball_match GROUP BY Team_Name"}, "hardness": "Easy"}, {"nl_queries": "Create a pie chart showing how many country name across country name.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT COUNTRY_NAME , COUNT(COUNTRY_NAME) FROM countries GROUP BY COUNTRY_NAME", "binning": ""}, "VQL": "Visualize PIE SELECT COUNTRY_NAME , COUNT(COUNTRY_NAME) FROM countries GROUP BY COUNTRY_NAME"}, "hardness": "Easy"}, {"nl_queries": "Bar chart x axis name y axis age, and rank Y in asc order.", "db_id": "theme_gallery", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , Age FROM artist ORDER BY Age ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , Age FROM artist ORDER BY Age ASC"}, "hardness": "Easy"}, {"nl_queries": "List all headquarters and the number of companies in each headquarter with a bar chart, could you display by the the total number from high to low?", "db_id": "gas_company", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY count(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "Return a bar chart on how many bookings does each booking status have? List the booking status code and the number of corresponding bookings, show total number in descending order.", "db_id": "apartment_rentals", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "What are the number of the dates of transactions with at least 100 share count or amount bigger than 100?", "db_id": "tracking_share_transactions", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS WHERE share_count >= 100 OR amount_of_transaction >= 100", "binning": "BIN date_of_transaction BY YEAR"}, "VQL": "Visualize LINE SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS WHERE share_count >= 100 OR amount_of_transaction >= 100 BIN date_of_transaction BY YEAR"}, "hardness": "Hard"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, return a bar chart about the distribution of  hire_date and the sum of manager_id bin hire_date by time.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "For all organizations that have grants of more than 6000 dollars, compare the number of details of the organizations with a bar chart, and I want to list by the bar in desc.", "db_id": "tracking_grants_for_research", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT organisation_details , COUNT(organisation_details) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY organisation_details ORDER BY organisation_details DESC", "binning": ""}, "VQL": "Visualize BAR SELECT organisation_details , COUNT(organisation_details) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY organisation_details ORDER BY organisation_details DESC"}, "hardness": "Hard"}, {"nl_queries": "Give me the comparison about ID over the meter_500 , rank by the ID in asc.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_500 , ID FROM swimmer ORDER BY ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_500 , ID FROM swimmer ORDER BY ID ASC"}, "hardness": "Easy"}, {"nl_queries": "For all employees who have the letters D or S in their first name, give me the comparison about the amount of job_id over the job_id , and group by attribute job_id by a bar chart, I want to order in desc by the Y please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , COUNT(JOB_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY COUNT(JOB_ID) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY COUNT(JOB_ID) DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees who was hired before 2002-06-21, a bar chart shows the distribution of job_id and the average of employee_id , and group by attribute job_id, and rank by the X in asc.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID ASC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who did not have any job in the past, return a bar chart about the distribution of job_id and the average of manager_id , and group by attribute job_id, show by the total number in descending.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY AVG(MANAGER_ID) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY AVG(MANAGER_ID) DESC"}, "hardness": "Hard"}, {"nl_queries": "Count the number of services by services, could you sort X-axis from high to low order?", "db_id": "station_weather", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services DESC", "binning": ""}, "VQL": "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services DESC"}, "hardness": "Medium"}, {"nl_queries": "For each film, show the price and group them by cinema name in a stacked bar chart, I want to list Y-axis from low to high order.", "db_id": "cinema", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , Price FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title ,  Name ORDER BY Price ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , Price FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title ,  Name ORDER BY Price ASC"}, "hardness": "Hard"}, {"nl_queries": "What are the last year of the parties whose theme is \"Spring\" or \"Teqnology\"? Count the last year for a bar chart, could you list by the Y in asc?", "db_id": "party_host", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY Last_year ORDER BY COUNT(Last_year) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY Last_year ORDER BY COUNT(Last_year) ASC"}, "hardness": "Hard"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, find  job_id and the sum of manager_id , and group by attribute job_id, and visualize them by a bar chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID"}, "hardness": "Hard"}, {"nl_queries": "Find ACC_Road and Team_ID , and group by attribute All_Home, and visualize them by a bar chart, order total number from high to low order.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY Team_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY Team_ID DESC"}, "hardness": "Medium"}, {"nl_queries": "A bar chart shows the distribution of Start_from and the average of Employee_ID , and group by attribute Is_full_time and bin start_from by weekday, and I want to list from high to low by the y-axis.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY AVG(Employee_ID) DESC", "binning": "BIN Start_from BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY AVG(Employee_ID) DESC BIN Start_from BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "Visualize a bar chart about the distribution of Sex and the sum of Height , and group by attribute Sex, and could you list in desc by the total number please?", "db_id": "candidate_poll", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Sex , SUM(Height) FROM people GROUP BY Sex ORDER BY SUM(Height) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Sex , SUM(Height) FROM people GROUP BY Sex ORDER BY SUM(Height) DESC"}, "hardness": "Medium"}, {"nl_queries": "Find the number of courses for each subject in a pie chart.", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT subject_name , COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id GROUP BY T1.subject_id", "binning": ""}, "VQL": "Visualize PIE SELECT subject_name , COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id GROUP BY T1.subject_id"}, "hardness": "Medium"}, {"nl_queries": "What are the enrollment dates of all the tests that have result \"Pass\", and count them by a line chart, I want to show by the x axis in desc please.", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = \"Pass\" GROUP BY date_of_enrolment ORDER BY date_of_enrolment DESC", "binning": ""}, "VQL": "Visualize LINE SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = \"Pass\" GROUP BY date_of_enrolment ORDER BY date_of_enrolment DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "Show the number of venue from each venue, rank by the X in asc.", "db_id": "workshop_paper", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY Venue ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY Venue ASC"}, "hardness": "Medium"}, {"nl_queries": "Bar graph to show the number of name from different name, and could you order Y in asc order please?", "db_id": "network_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) ASC"}, "hardness": "Medium"}, {"nl_queries": "Show all card type codes and the number of cards in each type by a bar chart.", "db_id": "customers_card_transactions", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT card_type_code , count(*) FROM Customers_cards GROUP BY card_type_code", "binning": ""}, "VQL": "Visualize BAR SELECT card_type_code , count(*) FROM Customers_cards GROUP BY card_type_code"}, "hardness": "Easy"}, {"nl_queries": "Create a pie chart showing the total number across nationality.", "db_id": "news_report", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Nationality , COUNT(*) FROM journalist GROUP BY Nationality", "binning": ""}, "VQL": "Visualize PIE SELECT Nationality , COUNT(*) FROM journalist GROUP BY Nationality"}, "hardness": "Easy"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, draw a bar chart about the distribution of phone_number and employee_id , and show y axis in desc order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT PHONE_NUMBER , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY EMPLOYEE_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT PHONE_NUMBER , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY EMPLOYEE_ID DESC"}, "hardness": "Medium"}, {"nl_queries": "Give me a bar chart about the number of countries in the artist table, and show by the Y from low to high please.", "db_id": "theme_gallery", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Country , COUNT(Country) FROM artist GROUP BY Country ORDER BY COUNT(Country) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM artist GROUP BY Country ORDER BY COUNT(Country) ASC"}, "hardness": "Medium"}, {"nl_queries": "Show the number of customers for different customer last name in a bar chart, and show in descending by the y-axis.", "db_id": "customers_card_transactions", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT customer_last_name , COUNT(customer_last_name) FROM Customers GROUP BY customer_last_name ORDER BY COUNT(customer_last_name) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT customer_last_name , COUNT(customer_last_name) FROM Customers GROUP BY customer_last_name ORDER BY COUNT(customer_last_name) DESC"}, "hardness": "Medium"}, {"nl_queries": "Show the musical nominee with award \"Bob Fosse\" or \"Cleavant Derricks\", and count them by a bar chart, and could you list from high to low by the total number?", "db_id": "musical", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY COUNT(Nominee) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY COUNT(Nominee) DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, find  name and  price , and group by attribute founder, and visualize them by a bar chart.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder , T1.Name", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder , T1.Name"}, "hardness": "Medium"}, {"nl_queries": "Give me a histogram for how many singers are from each country?", "db_id": "concert_singer", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Country , count(*) FROM singer GROUP BY country", "binning": ""}, "VQL": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country"}, "hardness": "Easy"}, {"nl_queries": "Give me the comparison about the sum of Instructor over the  Days , and group by attribute Days.", "db_id": "college_3", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Days , SUM(Instructor) FROM COURSE GROUP BY Days ORDER BY Credits", "binning": ""}, "VQL": "Visualize BAR SELECT Days , SUM(Instructor) FROM COURSE GROUP BY Days ORDER BY Credits"}, "hardness": "Medium"}, {"nl_queries": "A bar chart shows the distribution of  meter_600 and  ID .", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_600 , ID FROM swimmer", "binning": ""}, "VQL": "Visualize BAR SELECT meter_600 , ID FROM swimmer"}, "hardness": "Easy"}, {"nl_queries": "How many different locations? Show the proportion with a pie chart.", "db_id": "train_station", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Location , COUNT(Location) FROM station GROUP BY Location", "binning": ""}, "VQL": "Visualize PIE SELECT Location , COUNT(Location) FROM station GROUP BY Location"}, "hardness": "Easy"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, draw a bar chart about the distribution of job_id and manager_id , and order by the X-axis from low to high please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID ASC"}, "hardness": "Medium"}, {"nl_queries": "What are the first names and support rep ids for employees serving 10 or more customers, and rank SupportRepId from low to high order.", "db_id": "chinook_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.SupportRepId ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.SupportRepId ASC"}, "hardness": "Medium"}, {"nl_queries": "Visualize a pie chart about the proportion of  Is_full_time and the sum of Employee_ID.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time", "binning": ""}, "VQL": "Visualize PIE SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time"}, "hardness": "Easy"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, show me about the distribution of job_id and department_id in a bar chart, order by the bar in asc.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID ASC"}, "hardness": "Medium"}, {"nl_queries": "For the transaction dates if share count is smaller than 10, bin the dates into the year interval, and count them using a line chart, could you sort X from high to low order?", "db_id": "tracking_share_transactions", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS WHERE share_count < 10  ORDER BY date_of_transaction DESC", "binning": "BIN date_of_transaction BY YEAR"}, "VQL": "Visualize LINE SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS WHERE share_count < 10  ORDER BY date_of_transaction DESC BIN date_of_transaction BY YEAR"}, "hardness": "Hard"}, {"nl_queries": "Find Nationality and the average of meter_100 , and group by attribute Nationality, and visualize them by a bar chart, display in asc by the x-axis.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nationality , AVG(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Nationality , AVG(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC"}, "hardness": "Medium"}, {"nl_queries": "Plot the total number by grouped by nationality as a bar graph", "db_id": "news_report", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nationality , COUNT(*) FROM journalist GROUP BY Nationality", "binning": ""}, "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM journalist GROUP BY Nationality"}, "hardness": "Easy"}, {"nl_queries": "For those records from the products and each product's manufacturer, show me about the distribution of  headquarter and the amount of headquarter , and group by attribute headquarter in a bar chart.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Headquarter , COUNT(Headquarter) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter", "binning": ""}, "VQL": "Visualize BAR SELECT Headquarter , COUNT(Headquarter) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter"}, "hardness": "Medium"}, {"nl_queries": "Draw a bar chart for how many car makers are there in each continents? List the continent name and the count, and order by the Continent in desc please.", "db_id": "car_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY T1.Continent DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY T1.Continent DESC"}, "hardness": "Hard"}, {"nl_queries": "Scatter chart. what is the minimum salary in each department?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT MIN(salary) , DEPARTMENT_ID FROM employees", "binning": ""}, "VQL": "Visualize SCATTER SELECT MIN(salary) , DEPARTMENT_ID FROM employees"}, "hardness": "Easy"}, {"nl_queries": "Give me the comparison about the sum of meter_100 over the Nationality , and group by attribute Nationality, and order x axis in asc order please.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC"}, "hardness": "Medium"}, {"nl_queries": "Show all template type codes and number of templates for each Visualize by bar chart, show Y-axis in descending order.", "db_id": "cre_Doc_Template_Mgt", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Template_Type_Code , count(*) FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, give me the comparison about department_id over the email , show by the EMAIL in descending.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT EMAIL , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY EMAIL DESC", "binning": ""}, "VQL": "Visualize BAR SELECT EMAIL , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY EMAIL DESC"}, "hardness": "Medium"}, {"nl_queries": "Show me distance by name in a histogram, and list from low to high by the Y please.", "db_id": "flight_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , distance FROM Aircraft ORDER BY distance ASC", "binning": ""}, "VQL": "Visualize BAR SELECT name , distance FROM Aircraft ORDER BY distance ASC"}, "hardness": "Easy"}, {"nl_queries": "For employees without the letter M in their first name, give me a line chart to show the salary change over their hire date using a line chart, and sort by the HIRE_DATE in asc.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , SALARY FROM employees WHERE first_name NOT LIKE '%M%' ORDER BY HIRE_DATE ASC", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE first_name NOT LIKE '%M%' ORDER BY HIRE_DATE ASC"}, "hardness": "Hard"}, {"nl_queries": "For those female students with age is older than 18 who are not majoring in 600, tell me how many students of different first names using a bar chart.", "db_id": "restaurant_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Fname , COUNT(Fname) FROM Student WHERE Age > 18 AND Major != 600 AND Sex = 'F' GROUP BY Fname", "binning": ""}, "VQL": "Visualize BAR SELECT Fname , COUNT(Fname) FROM Student WHERE Age > 18 AND Major != 600 AND Sex = 'F' GROUP BY Fname"}, "hardness": "Medium"}, {"nl_queries": "Compute the total number in each competition type, and then split by country, show in desc by the x-axis.", "db_id": "sports_competition", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Country , COUNT(Country) FROM competition GROUP BY Competition_type ,  Country ORDER BY Country DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Competition_type ,  Country ORDER BY Country DESC"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, visualize a bar chart about the distribution of headquarter and the amount of headquarter , and group by attribute headquarter, display by the X from low to high please.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Headquarter , COUNT(Headquarter) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Headquarter , COUNT(Headquarter) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC"}, "hardness": "Hard"}, {"nl_queries": "Give me the comparison about meter_100 over the meter_500 by a bar chart, I want to sort in ascending by the meter_100.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_500 , meter_100 FROM swimmer ORDER BY meter_100 ASC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_500 , meter_100 FROM swimmer ORDER BY meter_100 ASC"}, "hardness": "Easy"}, {"nl_queries": "Compare the frequency of each type of bed by a bar chart, and display by the y-axis from low to high.", "db_id": "inn_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT bedType , COUNT(bedType) FROM Rooms WHERE decor = \"traditional\" GROUP BY bedType ORDER BY COUNT(bedType) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT bedType , COUNT(bedType) FROM Rooms WHERE decor = \"traditional\" GROUP BY bedType ORDER BY COUNT(bedType) ASC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, show me about the distribution of email and employee_id in a bar chart, and rank from high to low by the total number please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT EMAIL , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY EMPLOYEE_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT EMAIL , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY EMPLOYEE_ID DESC"}, "hardness": "Medium"}, {"nl_queries": "Can you give me each end station's latitude and minimum duration for trips ended there with a scatter chart?", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT lat , min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.end_station_id GROUP BY lat", "binning": ""}, "VQL": "Visualize SCATTER SELECT lat , min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.end_station_id GROUP BY lat"}, "hardness": "Easy"}, {"nl_queries": "Find the transaction type descriptions and dates if the share count is smaller than 10, group by transaction type, count the date of transaction, and bin the date into the weekday interval, I want to order by the total number from low to high please.", "db_id": "tracking_share_transactions", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.date_of_transaction , COUNT(T2.date_of_transaction) FROM Ref_Transaction_Types AS T1 JOIN TRANSACTIONS AS T2 ON T1.transaction_type_code = T2.transaction_type_code WHERE T2.share_count < 10 GROUP BY transaction_type_description ORDER BY COUNT(date_of_transaction) ASC", "binning": "BIN date_of_transaction BY WEEKDAY"}, "VQL": "Visualize BAR SELECT T2.date_of_transaction , COUNT(T2.date_of_transaction) FROM Ref_Transaction_Types AS T1 JOIN TRANSACTIONS AS T2 ON T1.transaction_type_code = T2.transaction_type_code WHERE T2.share_count < 10 GROUP BY transaction_type_description ORDER BY COUNT(date_of_transaction) ASC BIN date_of_transaction BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "List each charge type and its amount Show bar chart, and sort by the y axis in desc.", "db_id": "dog_kennels", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT charge_type , charge_amount FROM Charges ORDER BY charge_amount DESC", "binning": ""}, "VQL": "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_amount DESC"}, "hardness": "Easy"}, {"nl_queries": "For all storms with at least 1 death, compare the number of deaths by name with a bar graph, rank by the bars from low to high.", "db_id": "storm_record", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , Number_Deaths FROM storm WHERE number_deaths >= 1 ORDER BY Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , Number_Deaths FROM storm WHERE number_deaths >= 1 ORDER BY Name ASC"}, "hardness": "Medium"}, {"nl_queries": "What are the department names and how many employees work in each of them. Visualize by bar chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT DEPARTMENT_NAME , COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id GROUP BY department_name", "binning": ""}, "VQL": "Visualize BAR SELECT DEPARTMENT_NAME , COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id GROUP BY department_name"}, "hardness": "Medium"}, {"nl_queries": "How many documents in different ending date? Return a bar chart binning ending date by weekday.", "db_id": "cre_Doc_Tracking_DB", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations", "binning": "BIN Date_in_Locaton_To BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations BIN Date_in_Locaton_To BY WEEKDAY"}, "hardness": "Easy"}, {"nl_queries": "Bar chart x axis job y axis the average of age", "db_id": "network_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT job , avg(age) FROM Person GROUP BY job", "binning": ""}, "VQL": "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job"}, "hardness": "Easy"}, {"nl_queries": "Visualize a bar chart for what are the ids and trade names of the medicine that can interact with at least 3 enzymes?, could you sort x-axis in desc order?", "db_id": "medicine_enzyme_interaction", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Trade_Name , id FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id ORDER BY Trade_Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Trade_Name , id FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id ORDER BY Trade_Name DESC"}, "hardness": "Medium"}, {"nl_queries": "A bar chart for what are the number of the package options of all tv channels that are not playing any cartoons directed by Ben Jones?, could you display in asc by the X-axis?", "db_id": "tvshow", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option ASC"}, "hardness": "Hard"}, {"nl_queries": "Group by all home, show the team id and school id in a scatter plot.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Team_ID , School_ID FROM basketball_match GROUP BY All_Home", "binning": ""}, "VQL": "Visualize SCATTER SELECT Team_ID , School_ID FROM basketball_match GROUP BY All_Home"}, "hardness": "Easy"}, {"nl_queries": "For those records from the products and each product's manufacturer, show me about the distribution of name and code , and group by attribute founder in a bar chart, show by the bar from high to low.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder , T1.Name ORDER BY T1.Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder , T1.Name ORDER BY T1.Name DESC"}, "hardness": "Hard"}, {"nl_queries": "List all headquarters and the number of companies in each headquarter, and order the total number in desc order.", "db_id": "gas_company", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY count(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "On which day has it neither been foggy nor rained in the zip code of 94107, and count them by a bar chart", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date , COUNT(date) FROM weather WHERE zip_code = 94107 AND EVENTS != \"Fog\" AND EVENTS != \"Rain\"", "binning": "BIN date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE zip_code = 94107 AND EVENTS != \"Fog\" AND EVENTS != \"Rain\" BIN date BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "For all storms with at least 1 death, show me the name and the total number of deaths with a bar chart, show Y-axis from high to low order.", "db_id": "storm_record", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , Number_Deaths FROM storm WHERE number_deaths >= 1 ORDER BY Number_Deaths DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , Number_Deaths FROM storm WHERE number_deaths >= 1 ORDER BY Number_Deaths DESC"}, "hardness": "Medium"}, {"nl_queries": "Bar chart x axis lot details y axis the number of lot details, and list by the Y-axis in desc please.", "db_id": "tracking_share_transactions", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT lot_details , COUNT(lot_details) FROM LOTS GROUP BY lot_details ORDER BY COUNT(lot_details) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM LOTS GROUP BY lot_details ORDER BY COUNT(lot_details) DESC"}, "hardness": "Medium"}, {"nl_queries": "Find the average age of students living in each dorm and the name of dorm. Plot them as bar chart.", "db_id": "dorm_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name", "binning": ""}, "VQL": "Visualize BAR SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name"}, "hardness": "Medium"}, {"nl_queries": "how many students are in each department?", "db_id": "college_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT dept_name , count(*) FROM student GROUP BY dept_name", "binning": ""}, "VQL": "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name"}, "hardness": "Easy"}, {"nl_queries": "Find the organisation ids and details of the organisations which are involved i Plot them as bar chart, rank total number in desc order please.", "db_id": "tracking_grants_for_research", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T1.organisation_id DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T1.organisation_id DESC"}, "hardness": "Hard"}, {"nl_queries": "You can return a bar chart to show the employees' first name and the corresponding department's id, show in asc by the y-axis.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT FIRST_NAME , DEPARTMENT_ID FROM employees ORDER BY DEPARTMENT_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT FIRST_NAME , DEPARTMENT_ID FROM employees ORDER BY DEPARTMENT_ID ASC"}, "hardness": "Easy"}, {"nl_queries": "Show me about the distribution of meter_300 and meter_100 in a bar chart, and I want to show Y from low to high order.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_300 , meter_100 FROM swimmer ORDER BY meter_100 ASC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_300 , meter_100 FROM swimmer ORDER BY meter_100 ASC"}, "hardness": "Easy"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, what is the relationship between  employee_id and  manager_id ?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT EMPLOYEE_ID , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)", "binning": ""}, "VQL": "Visualize SCATTER SELECT EMPLOYEE_ID , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)"}, "hardness": "Extra Hard"}, {"nl_queries": "A bar chart for finding the number of the name of the project for which a scientist whose name contains \u2018Smith\u2019 is assigned to.", "db_id": "scientist_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , COUNT(T2.Name) FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T3.name LIKE '%Smith%' GROUP BY T2.Name", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T3.name LIKE '%Smith%' GROUP BY T2.Name"}, "hardness": "Extra Hard"}, {"nl_queries": "Give me a pie chart to reflect the proportion of  All_Neutral and  ACC_Percent.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT All_Neutral , ACC_Percent FROM basketball_match", "binning": ""}, "VQL": "Visualize PIE SELECT All_Neutral , ACC_Percent FROM basketball_match"}, "hardness": "Easy"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, show me about the distribution of hire_date and the average of employee_id bin hire_date by time in a bar chart, and could you order in asc by the mean employee id please?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY AVG(EMPLOYEE_ID) ASC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "Bar chart x axis product name y axis how many product name, and display Y in descending order.", "db_id": "solvency_ii", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Product_Name , COUNT(Product_Name) FROM Products GROUP BY Product_Name ORDER BY COUNT(Product_Name) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Product_Name , COUNT(Product_Name) FROM Products GROUP BY Product_Name ORDER BY COUNT(Product_Name) DESC"}, "hardness": "Medium"}, {"nl_queries": "List the number of the name of products in ascending order of price.", "db_id": "solvency_ii", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Product_Name , COUNT(Product_Name) FROM Products GROUP BY Product_Name ORDER BY Product_Price ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Product_Name , COUNT(Product_Name) FROM Products GROUP BY Product_Name ORDER BY Product_Price ASC"}, "hardness": "Medium"}, {"nl_queries": "I want to see trend the number of season over season by Home_team, show x-axis in ascending order.", "db_id": "game_injury", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ,  Season ORDER BY Season ASC", "binning": ""}, "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ,  Season ORDER BY Season ASC"}, "hardness": "Hard"}, {"nl_queries": "Bar chart x axis country y axis the average of age", "db_id": "theme_gallery", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Country , AVG(Age) FROM artist GROUP BY Country", "binning": ""}, "VQL": "Visualize BAR SELECT Country , AVG(Age) FROM artist GROUP BY Country"}, "hardness": "Easy"}, {"nl_queries": "How many workshops did each author submit to? Return the author name and the number of workshops Plot them as bar chart, and list X-axis in asc order.", "db_id": "workshop_paper", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY Author ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY Author ASC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, draw a scatter chart about the correlation between  code and  revenue , and group by attribute founder.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder", "binning": ""}, "VQL": "Visualize SCATTER SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder"}, "hardness": "Medium"}, {"nl_queries": "Show different ways to get to attractions and the number of attractions that can be accessed in the corresponding way. Plot them as bar chart.", "db_id": "cre_Theme_park", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT How_to_Get_There , COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There", "binning": ""}, "VQL": "Visualize BAR SELECT How_to_Get_There , COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There"}, "hardness": "Easy"}, {"nl_queries": "For those records from the products and each product's manufacturer, visualize a bar chart about the distribution of  name and the sum of code , and group by attribute name.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name"}, "hardness": "Medium"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, what is the relationship between  commission_pct and  department_id ?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT COMMISSION_PCT , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40", "binning": ""}, "VQL": "Visualize SCATTER SELECT COMMISSION_PCT , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40"}, "hardness": "Medium"}, {"nl_queries": "A bar chart showing the average weight for each gender, rank in desc by the x-axis.", "db_id": "candidate_poll", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Sex , avg(weight) FROM people GROUP BY sex ORDER BY Sex DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Sex , avg(weight) FROM people GROUP BY sex ORDER BY Sex DESC"}, "hardness": "Medium"}, {"nl_queries": "How many dogs departed in each day? Visualize with a bar chart that bins departed date by weekday.", "db_id": "dog_kennels", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_departed , COUNT(date_departed) FROM Dogs", "binning": "BIN date_departed BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs BIN date_departed BY WEEKDAY"}, "hardness": "Easy"}, {"nl_queries": "Show minimal age from each job, I want to rank by the minimal age from high to low.", "db_id": "network_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT job , min(age) FROM Person GROUP BY job ORDER BY min(age) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY min(age) DESC"}, "hardness": "Easy"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, visualize a bar chart about the distribution of first_name and commission_pct , and I want to display bar from low to high order please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY FIRST_NAME ASC", "binning": ""}, "VQL": "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY FIRST_NAME ASC"}, "hardness": "Medium"}, {"nl_queries": "What is the average age for each gender Visualize by bar chart, and could you rank by the x-axis in descending?", "db_id": "network_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT gender , avg(age) FROM Person GROUP BY gender ORDER BY gender DESC", "binning": ""}, "VQL": "Visualize BAR SELECT gender , avg(age) FROM Person GROUP BY gender ORDER BY gender DESC"}, "hardness": "Medium"}, {"nl_queries": "Plot sum capacity over openning year in a line chart, and could you display X-axis in ascending order?", "db_id": "cinema", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Openning_year , SUM(Capacity) FROM cinema  ORDER BY Openning_year ASC", "binning": "BIN Openning_year BY YEAR"}, "VQL": "Visualize LINE SELECT Openning_year , SUM(Capacity) FROM cinema  ORDER BY Openning_year ASC BIN Openning_year BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "Visualize a pie chart about the proportion of the number of grape of the wines whose price is bigger than 100 ordered by year.", "db_id": "wine_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Grape , COUNT(Grape) FROM WINE WHERE Price > 100 GROUP BY Grape ORDER BY YEAR", "binning": ""}, "VQL": "Visualize BAR SELECT Grape , COUNT(Grape) FROM WINE WHERE Price > 100 GROUP BY Grape ORDER BY YEAR"}, "hardness": "Hard"}, {"nl_queries": "Give me the comparison about ACC_Percent over the All_Neutral , show in desc by the All_Neutral please.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral DESC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral DESC"}, "hardness": "Easy"}, {"nl_queries": "Show me a bar chart for how many stadiums does each country have?", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Country , count(*) FROM stadium GROUP BY country", "binning": ""}, "VQL": "Visualize BAR SELECT Country , count(*) FROM stadium GROUP BY country"}, "hardness": "Easy"}, {"nl_queries": "A bar chart shows the distribution of All_Road and ACC_Percent , and could you display by the y axis from high to low?", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Road , ACC_Percent FROM basketball_match ORDER BY ACC_Percent DESC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Road , ACC_Percent FROM basketball_match ORDER BY ACC_Percent DESC"}, "hardness": "Easy"}, {"nl_queries": "Show different locations and the number of performances at each location Visualize by bar chart, display the total number from low to high order.", "db_id": "performance_attendance", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Location , COUNT(*) FROM performance GROUP BY LOCATION ORDER BY COUNT(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Location , COUNT(*) FROM performance GROUP BY LOCATION ORDER BY COUNT(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, find hire_date and the average of employee_id bin hire_date by time, and visualize them by a bar chart, and could you show by the Y from low to high?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(EMPLOYEE_ID) ASC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH"}, "hardness": "Extra Hard"}, {"nl_queries": "Find times of trains that run through stations for the local authority Chiltern, compare the total number of different times, and I want to order in asc by the Y-axis.", "db_id": "station_weather", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT time , COUNT(time) FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id JOIN train AS t3 ON t2.train_id = t3.id WHERE t1.local_authority = \"Chiltern\" GROUP BY time ORDER BY COUNT(time) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT time , COUNT(time) FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id JOIN train AS t3 ON t2.train_id = t3.id WHERE t1.local_authority = \"Chiltern\" GROUP BY time ORDER BY COUNT(time) ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "Give me the comparison about  All_Games_Percent over the  ACC_Regular_Season  by a bar chart.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match"}, "hardness": "Easy"}, {"nl_queries": "Show how many documents are stored and bin by year in a line chart, and sort by the Date_Stored from high to low please.", "db_id": "cre_Doc_Tracking_DB", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Date_Stored , COUNT(Date_Stored) FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored = T2.calendar_date  ORDER BY Date_Stored DESC", "binning": "BIN Date_Stored BY YEAR"}, "VQL": "Visualize LINE SELECT Date_Stored , COUNT(Date_Stored) FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored = T2.calendar_date  ORDER BY Date_Stored DESC BIN Date_Stored BY YEAR"}, "hardness": "Hard"}, {"nl_queries": "For all employees who have the letters D or S in their first name, show me about the distribution of hire_date and the average of manager_id bin hire_date by time in a bar chart, could you show Y in desc order?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY AVG(MANAGER_ID) DESC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY AVG(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH"}, "hardness": "Extra Hard"}, {"nl_queries": "Compare the number of items in the type of each thing using a bar chart, and sort by the names in descending.", "db_id": "local_govt_and_lot", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Things GROUP BY Type_of_Thing_Code ORDER BY Type_of_Thing_Code DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Things GROUP BY Type_of_Thing_Code ORDER BY Type_of_Thing_Code DESC"}, "hardness": "Medium"}, {"nl_queries": "Show all artist names and ages in a histogram, list from low to high by the bars.", "db_id": "theme_gallery", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , Age FROM artist ORDER BY Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , Age FROM artist ORDER BY Name ASC"}, "hardness": "Easy"}, {"nl_queries": "What are the countries of mountains with height bigger than 5000, and count them by a pie chart", "db_id": "climbing", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country", "binning": ""}, "VQL": "Visualize PIE SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country"}, "hardness": "Medium"}, {"nl_queries": "What are all the calendar dates? Give me a line chart binning calendar dates by year, and list X-axis in desc order.", "db_id": "cre_Doc_Tracking_DB", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Calendar_Date , COUNT(Calendar_Date) FROM Ref_calendar  ORDER BY Calendar_Date DESC", "binning": "BIN Calendar_Date BY YEAR"}, "VQL": "Visualize LINE SELECT Calendar_Date , COUNT(Calendar_Date) FROM Ref_calendar  ORDER BY Calendar_Date DESC BIN Calendar_Date BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "Bar graph to show the number of nationality from different nationality", "db_id": "news_report", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nationality , COUNT(Nationality) FROM journalist GROUP BY Nationality", "binning": ""}, "VQL": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM journalist GROUP BY Nationality"}, "hardness": "Easy"}, {"nl_queries": "Give me the comparison about School_ID over the All_Home , and group by attribute ACC_Road, and show bar in asc order.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC"}, "hardness": "Medium"}, {"nl_queries": "Return the number of the categories of music festivals that have the result \"Awarded\", and display Y from high to low order.", "db_id": "music_4", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) DESC"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about the average of revenue over the headquarter , and group by attribute headquarter, and sort Y from high to low order.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY AVG(Revenue) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY AVG(Revenue) DESC"}, "hardness": "Hard"}, {"nl_queries": "Show me a bar chart for what is the average rating of songs for each language?, and could you sort total number in desc order?", "db_id": "music_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY avg(rating) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY avg(rating) DESC"}, "hardness": "Medium"}, {"nl_queries": "Bar chart x axis time y axis id, and I want to order X-axis in descending order.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Time , ID FROM swimmer ORDER BY Time DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Time , ID FROM swimmer ORDER BY Time DESC"}, "hardness": "Easy"}, {"nl_queries": "Return a pie chart showing the minimum room count of apartments in different type.", "db_id": "apartment_rentals", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT apt_type_code , min(room_count) FROM Apartments GROUP BY apt_type_code", "binning": ""}, "VQL": "Visualize PIE SELECT apt_type_code , min(room_count) FROM Apartments GROUP BY apt_type_code"}, "hardness": "Easy"}, {"nl_queries": "For all employees who have the letters D or S in their first name, give me the comparison about the average of employee_id over the  hire_date bin hire_date by weekday.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "Give me a histogram for what are the names of all the documents, as well as the access counts of each, ordered alphabetically?", "db_id": "document_management", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT document_name , access_count FROM documents ORDER BY document_name", "binning": ""}, "VQL": "Visualize BAR SELECT document_name , access_count FROM documents ORDER BY document_name"}, "hardness": "Easy"}, {"nl_queries": "List the number of dogs departed in each day with a bar chart that bins departed date by day interval, display in descending by the Y please.", "db_id": "dog_kennels", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_departed , COUNT(date_departed) FROM Dogs  ORDER BY COUNT(date_departed) DESC", "binning": "BIN date_departed BY DAY"}, "VQL": "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs  ORDER BY COUNT(date_departed) DESC BIN date_departed BY DAY"}, "hardness": "Medium"}, {"nl_queries": "How many injured players not suffering from injury of 'Knee problem' in each match? Show me a bar chart grouping by number of matches, and sort y-axis in desc order please.", "db_id": "game_injury", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Number_of_matches , COUNT(Number_of_matches) FROM injury_accident WHERE injury != 'Knee problem' GROUP BY Number_of_matches ORDER BY COUNT(Number_of_matches) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Number_of_matches , COUNT(Number_of_matches) FROM injury_accident WHERE injury != 'Knee problem' GROUP BY Number_of_matches ORDER BY COUNT(Number_of_matches) DESC"}, "hardness": "Hard"}, {"nl_queries": "For each faculty rank, show the number of faculty members who have it Show bar chart, and could you show total number from low to high order please?", "db_id": "activity_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Rank , count(*) FROM Faculty GROUP BY rank ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY rank ORDER BY count(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "Show the number of games for each home team in a bar chart, and could you show X in desc order?", "db_id": "game_injury", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Home_team ORDER BY Home_team DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Home_team ORDER BY Home_team DESC"}, "hardness": "Medium"}, {"nl_queries": "A bar chart for what are the number of the names of the singers who performed in a concert in 2014?", "db_id": "concert_singer", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id JOIN concert AS T3 ON T1.concert_id = T3.concert_id WHERE T3.year = 2014 GROUP BY Name", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id JOIN concert AS T3 ON T1.concert_id = T3.concert_id WHERE T3.year = 2014 GROUP BY Name"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, find founder and the average of revenue , and group by attribute founder, and visualize them by a bar chart, could you sort x-axis in ascending order please?", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Founder , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder ORDER BY Founder ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Founder , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder ORDER BY Founder ASC"}, "hardness": "Hard"}, {"nl_queries": "What is the number of each allergie the girl named Lisa has? Plot them as bar chart, and could you rank in desc by the y axis?", "db_id": "allergy_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Allergy , COUNT(T1.Allergy) FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy = T2.Allergy JOIN Student AS T3 ON T3.StuID = T2.StuID WHERE T3.Fname = \"Lisa\" GROUP BY T1.Allergy ORDER BY T1.Allergy DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Allergy , COUNT(T1.Allergy) FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy = T2.Allergy JOIN Student AS T3 ON T3.StuID = T2.StuID WHERE T3.Fname = \"Lisa\" GROUP BY T1.Allergy ORDER BY T1.Allergy DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "Please show the number of films for each type in a bar chart, could you sort names from high to low order?", "db_id": "film_rank", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Type , COUNT(Type) FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID GROUP BY Type ORDER BY Type DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Type , COUNT(Type) FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID GROUP BY Type ORDER BY Type DESC"}, "hardness": "Hard"}, {"nl_queries": "For each grade, show me the relationships between grade and the total number of students in the grade.", "db_id": "student_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Grade , count(*) FROM list GROUP BY grade", "binning": ""}, "VQL": "Visualize SCATTER SELECT Grade , count(*) FROM list GROUP BY grade"}, "hardness": "Easy"}, {"nl_queries": "Show all the faculty ranks and the number of students advised by each rank. Show the proportion.", "db_id": "activity_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Rank , count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.rank", "binning": ""}, "VQL": "Visualize PIE SELECT Rank , count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.rank"}, "hardness": "Medium"}, {"nl_queries": "Draw a scatter chart about the correlation between  Team_ID and  School_ID , and group by attribute All_Road.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Team_ID , School_ID FROM basketball_match GROUP BY All_Road", "binning": ""}, "VQL": "Visualize SCATTER SELECT Team_ID , School_ID FROM basketball_match GROUP BY All_Road"}, "hardness": "Easy"}, {"nl_queries": "Give me a bar chart that bins the payment date into the Year interval and then shows the total amount of each payment, and then sort the bars in ascending order of date.", "db_id": "insurance_policies", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments  ORDER BY Date_Payment_Made ASC", "binning": "BIN Date_Payment_Made BY YEAR"}, "VQL": "Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments  ORDER BY Date_Payment_Made ASC BIN Date_Payment_Made BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "Which Payments were processed with Visa? List the date and the amount using a bar chart, list by the x axis from low to high please.", "db_id": "insurance_policies", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Date_Payment_Made ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Date_Payment_Made ASC"}, "hardness": "Medium"}, {"nl_queries": "For all employees who have the letters D or S in their first name, return a bar chart about the distribution of job_id and the sum of employee_id , and group by attribute job_id, and list in asc by the JOB_ID.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "For each party, use a bar chart to show the number of its delegates, and could you rank in descending by the Y-axis please?", "db_id": "election", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY COUNT(T2.Party) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY COUNT(T2.Party) DESC"}, "hardness": "Hard"}, {"nl_queries": "What are the number of the titles of all movies that have between 3 and 5 stars?, and could you sort the number of title from high to low order?", "db_id": "movie_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT title , COUNT(title) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T1.stars BETWEEN 3 AND 5 GROUP BY title ORDER BY COUNT(title) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT title , COUNT(title) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T1.stars BETWEEN 3 AND 5 GROUP BY title ORDER BY COUNT(title) DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, give me the comparison about the sum of manager_id over the job_id , and group by attribute job_id by a bar chart, and list total number from low to high order please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "what are the different software platforms for devices, and how many devices have each?, and show by the bar in descending.", "db_id": "device", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Software_Platform , COUNT(*) FROM device GROUP BY Software_Platform ORDER BY Software_Platform DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Software_Platform , COUNT(*) FROM device GROUP BY Software_Platform ORDER BY Software_Platform DESC"}, "hardness": "Medium"}, {"nl_queries": "Return a bar chart about the distribution of meter_700 and ID , could you show in ascending by the meter_700?", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_700 , ID FROM swimmer ORDER BY meter_700 ASC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_700 , ID FROM swimmer ORDER BY meter_700 ASC"}, "hardness": "Easy"}, {"nl_queries": "How many stores are headquarted in each city Plot them as bar chart, and list in asc by the total number.", "db_id": "store_product", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Headquartered_City , count(*) FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id GROUP BY t3.headquartered_city ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Headquartered_City , count(*) FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id GROUP BY t3.headquartered_city ORDER BY count(*) ASC"}, "hardness": "Hard"}, {"nl_queries": "Give me the comparison about  author_tutor_ATB over the  middle_name  by a bar chart.", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT middle_name , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name", "binning": ""}, "VQL": "Visualize BAR SELECT middle_name , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name"}, "hardness": "Easy"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, a bar chart shows the distribution of  job_id and the sum of manager_id , and group by attribute job_id.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID"}, "hardness": "Hard"}, {"nl_queries": "For artist names who are not from the United States, how many names in each year?, and show by the how many year join in asc.", "db_id": "theme_gallery", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Year_Join , COUNT(Year_Join) FROM artist WHERE country != 'United States' GROUP BY Name ORDER BY COUNT(Year_Join) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Year_Join , COUNT(Year_Join) FROM artist WHERE country != 'United States' GROUP BY Name ORDER BY COUNT(Year_Join) ASC"}, "hardness": "Hard"}, {"nl_queries": "What are the number of the names of all students who tried out in alphabetical order?", "db_id": "soccer_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT pName , COUNT(pName) FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID GROUP BY pName ORDER BY T1.pName", "binning": ""}, "VQL": "Visualize BAR SELECT pName , COUNT(pName) FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID GROUP BY pName ORDER BY T1.pName"}, "hardness": "Hard"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, a line chart shows the trend of employee_id over hire_date , and rank by the X-axis in ascending.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC"}, "hardness": "Hard"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, return a scatter chart about the correlation between  commission_pct and  department_id .", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT COMMISSION_PCT , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40", "binning": ""}, "VQL": "Visualize SCATTER SELECT COMMISSION_PCT , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40"}, "hardness": "Medium"}, {"nl_queries": "A bar chart shows the distribution of meter_700 and ID , I want to sort in ascending by the bar.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_700 , ID FROM swimmer ORDER BY meter_700 ASC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_700 , ID FROM swimmer ORDER BY meter_700 ASC"}, "hardness": "Easy"}, {"nl_queries": "For all employees who have the letters D or S in their first name, a bar chart shows the distribution of  hire_date and the average of salary bin hire_date by weekday.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "Return a bar chart about the distribution of  All_Road and  Team_ID .", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Road , Team_ID FROM basketball_match", "binning": ""}, "VQL": "Visualize BAR SELECT All_Road , Team_ID FROM basketball_match"}, "hardness": "Easy"}, {"nl_queries": "Return a bar chart on how many rooms have king beds? Report the number for each decor type, and rank Y-axis from low to high order please.", "db_id": "inn_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT decor , count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT decor , count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor ORDER BY count(*) ASC"}, "hardness": "Hard"}, {"nl_queries": "Show all branch names with the number of members in each branch registered after 2015 with a bar chart, and list in descending by the total number.", "db_id": "shop_membership", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , count(*) FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id WHERE T1.register_year > 2015 GROUP BY T2.branch_id ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , count(*) FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id WHERE T1.register_year > 2015 GROUP BY T2.branch_id ORDER BY count(*) DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "How many documents are with document type code BK for each product id. Visualize by scatter chart.", "db_id": "cre_Docs_and_Epenses", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT count(*) , Project_ID FROM Documents WHERE document_type_code = \"BK\" GROUP BY project_id", "binning": ""}, "VQL": "Visualize SCATTER SELECT count(*) , Project_ID FROM Documents WHERE document_type_code = \"BK\" GROUP BY project_id"}, "hardness": "Medium"}, {"nl_queries": "Find All_Neutral and All_Games_Percent , and visualize them by a bar chart, and order y axis from high to low order.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent DESC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent DESC"}, "hardness": "Easy"}, {"nl_queries": "For those records from the products and each product's manufacturer, find headquarter and the amount of headquarter , and group by attribute headquarter, and visualize them by a bar chart, and sort in asc by the X-axis.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Headquarter , COUNT(Headquarter) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Headquarter , COUNT(Headquarter) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, a bar chart shows the distribution of phone_number and commission_pct , I want to show by the x axis from low to high.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT PHONE_NUMBER , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY PHONE_NUMBER ASC", "binning": ""}, "VQL": "Visualize BAR SELECT PHONE_NUMBER , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY PHONE_NUMBER ASC"}, "hardness": "Medium"}, {"nl_queries": "What are the number of the titles of all movies that have between 3 and 5 stars?, rank Y-axis in asc order.", "db_id": "movie_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT title , COUNT(title) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T1.stars BETWEEN 3 AND 5 GROUP BY title ORDER BY COUNT(title) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT title , COUNT(title) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T1.stars BETWEEN 3 AND 5 GROUP BY title ORDER BY COUNT(title) ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "Draw a bar chart of affiliation versus sum enrollment, and I want to display y axis from low to high order please.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY sum(enrollment) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY sum(enrollment) ASC"}, "hardness": "Medium"}, {"nl_queries": "Show all payment method codes and the number of orders for each code by a pie chart.", "db_id": "cre_Drama_Workshop_Groups", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code", "binning": ""}, "VQL": "Visualize PIE SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code"}, "hardness": "Easy"}, {"nl_queries": "How many stores are headquarted in each city Plot them as bar chart, could you rank by the X from high to low?", "db_id": "store_product", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Headquartered_City , count(*) FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id GROUP BY t3.headquartered_city ORDER BY Headquartered_City DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Headquartered_City , count(*) FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id GROUP BY t3.headquartered_city ORDER BY Headquartered_City DESC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who was hired before 2002-06-21, draw a bar chart about the distribution of job_id and the sum of department_id , and group by attribute job_id, I want to order by the total number from high to low.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) DESC"}, "hardness": "Hard"}, {"nl_queries": "Compare the number of items in the type of each thing using a bar chart.", "db_id": "local_govt_and_lot", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Things GROUP BY Type_of_Thing_Code", "binning": ""}, "VQL": "Visualize BAR SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Things GROUP BY Type_of_Thing_Code"}, "hardness": "Easy"}, {"nl_queries": "For all employees who have the letters D or S in their first name, show me about the distribution of hire_date and the average of manager_id bin hire_date by weekday in a bar chart, and I want to order by the y-axis in asc please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY AVG(MANAGER_ID) ASC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "Bar chart x axis nationality y axis the total number, rank in desc by the x axis.", "db_id": "party_host", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC"}, "hardness": "Medium"}, {"nl_queries": "Give me a histogram for what is the first name and GPA of every student that has a GPA lower than average?, could you rank by the y-axis from high to low?", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT STU_FNAME , SUM(STU_GPA) FROM student WHERE stu_gpa < (SELECT avg(stu_gpa) FROM student) GROUP BY STU_FNAME ORDER BY SUM(STU_GPA) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT STU_FNAME , SUM(STU_GPA) FROM student WHERE stu_gpa < (SELECT avg(stu_gpa) FROM student) GROUP BY STU_FNAME ORDER BY SUM(STU_GPA) DESC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who did not have any job in the past, visualize a bar chart about the distribution of job_id and the amount of job_id , and group by attribute job_id, and could you show X-axis in desc order?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , COUNT(JOB_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY JOB_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY JOB_ID DESC"}, "hardness": "Hard"}, {"nl_queries": "how many actors have appeared in each musical?, sort bar in desc order.", "db_id": "musical", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID ORDER BY T2.Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID ORDER BY T2.Name DESC"}, "hardness": "Hard"}, {"nl_queries": "how many actors have appeared in each musical?, could you rank in descending by the Y?", "db_id": "musical", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID ORDER BY COUNT(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID ORDER BY COUNT(*) DESC"}, "hardness": "Hard"}, {"nl_queries": "A bar chart about what is the average price of the products for each category?, sort bars in descending order.", "db_id": "customer_complaints", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT product_category_code , avg(product_price) FROM products GROUP BY product_category_code ORDER BY product_category_code DESC", "binning": ""}, "VQL": "Visualize BAR SELECT product_category_code , avg(product_price) FROM products GROUP BY product_category_code ORDER BY product_category_code DESC"}, "hardness": "Medium"}, {"nl_queries": "Who has friends that are older than the average age? Print their friends and their ages as well using a bar chart, and order by the age in ascending.", "db_id": "network_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT friend , age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T1.age > (SELECT avg(age) FROM person) ORDER BY age ASC", "binning": ""}, "VQL": "Visualize BAR SELECT friend , age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T1.age > (SELECT avg(age) FROM person) ORDER BY age ASC"}, "hardness": "Hard"}, {"nl_queries": "A bar chart for finding the number of the the date of enrollment of the \"Spanish\" course, I want to show by the Y-axis from low to high.", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\"  ORDER BY COUNT(date_of_enrolment) ASC", "binning": "BIN date_of_enrolment BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\"  ORDER BY COUNT(date_of_enrolment) ASC BIN date_of_enrolment BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, draw a bar chart about the distribution of name and code , and group by attribute founder, and show from high to low by the Name.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder , T1.Name ORDER BY T1.Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder , T1.Name ORDER BY T1.Name DESC"}, "hardness": "Hard"}, {"nl_queries": "Give me a bar chart for how many grape of each grape, and sort by the total number in asc.", "db_id": "wine_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Grape , COUNT(Grape) FROM WINE GROUP BY Grape ORDER BY COUNT(Grape) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Grape , COUNT(Grape) FROM WINE GROUP BY Grape ORDER BY COUNT(Grape) ASC"}, "hardness": "Medium"}, {"nl_queries": "Show the number of addrens history for each customer in a bar chart.", "db_id": "customers_and_products_contacts", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.customer_name , COUNT(T2.customer_name) FROM customer_address_history AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id JOIN addresses AS T3 ON T1.address_id = T3.address_id GROUP BY T2.customer_name", "binning": ""}, "VQL": "Visualize BAR SELECT T2.customer_name , COUNT(T2.customer_name) FROM customer_address_history AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id JOIN addresses AS T3 ON T1.address_id = T3.address_id GROUP BY T2.customer_name"}, "hardness": "Medium"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, return a bar chart about the distribution of hire_date and the sum of salary bin hire_date by weekday, and order from low to high by the total number.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(SALARY) ASC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, visualize a bar chart about the distribution of name and the sum of code , and group by attribute name, and display in ascending by the bar.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC"}, "hardness": "Hard"}, {"nl_queries": "Visualize a bar chart for what is the average age for each dorm and what are the names of each dorm?, and show by the y-axis in asc.", "db_id": "dorm_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY avg(T1.age) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY avg(T1.age) ASC"}, "hardness": "Hard"}, {"nl_queries": "A bar chart about how many classes are held in each department?", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT DEPT_CODE , count(*) FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code GROUP BY dept_code", "binning": ""}, "VQL": "Visualize BAR SELECT DEPT_CODE , count(*) FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code GROUP BY dept_code"}, "hardness": "Medium"}, {"nl_queries": "Find the address and staff number of the shops that do not have any happy hour Visualize by bar chart, I want to display Num_of_staff in descending order.", "db_id": "coffee_shop", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Address , Num_of_staff FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM happy_hour) ORDER BY Num_of_staff DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Address , Num_of_staff FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM happy_hour) ORDER BY Num_of_staff DESC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, show me about the distribution of name and manufacturer , and group by attribute name in a bar chart, and sort in descending by the X.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Name DESC"}, "hardness": "Hard"}, {"nl_queries": "How many dogs of the rarest breed in each treatment day? Draw a stacked bar chart that bins date of treatment by weekday and groups by dog's name.", "db_id": "dog_kennels", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_of_treatment , COUNT(date_of_treatment) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 ) name", "binning": "BIN date_of_treatment BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_of_treatment , COUNT(date_of_treatment) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 ) name BIN date_of_treatment BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "Return a bar chart about the distribution of Nationality and the sum of meter_100 , and group by attribute Nationality, and could you list by the total number from low to high?", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC"}, "hardness": "Medium"}, {"nl_queries": "Give me the comparison about the sum of ID over the  Nationality , and group by attribute Nationality by a bar chart.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality", "binning": ""}, "VQL": "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality"}, "hardness": "Easy"}, {"nl_queries": "Find Sex and the amount of Sex , and group by attribute Sex, and visualize them by a bar chart, and rank by the bars in asc.", "db_id": "candidate_poll", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY Sex ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY Sex ASC"}, "hardness": "Medium"}, {"nl_queries": "Show a bar chart about the number of results of the battles when the bulgarian commander is not 'Boril', and order names in descending order.", "db_id": "battle_death", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT result , COUNT(result) FROM battle WHERE bulgarian_commander != 'Boril' GROUP BY result ORDER BY result DESC", "binning": ""}, "VQL": "Visualize BAR SELECT result , COUNT(result) FROM battle WHERE bulgarian_commander != 'Boril' GROUP BY result ORDER BY result DESC"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, visualize a bar chart about the distribution of name and the average of code , and group by attribute name, and sort by the total number in desc.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code DESC"}, "hardness": "Hard"}, {"nl_queries": "Visualize a bar chart about the distribution of Start_from and the sum of Employee_ID , and group by attribute Is_full_time and bin start_from by weekday, rank by the total number from high to low please.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Employee_ID) DESC", "binning": "BIN Start_from BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Employee_ID) DESC BIN Start_from BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "For dates had a minimum dew point smaller than any day in zip code 94107, show the total number of such days for each year using a bar chart, I want to rank Y from high to low order.", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date , COUNT(date) FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107)  ORDER BY COUNT(date) DESC", "binning": "BIN date BY YEAR"}, "VQL": "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107)  ORDER BY COUNT(date) DESC BIN date BY YEAR"}, "hardness": "Hard"}, {"nl_queries": "A bar chart shows the distribution of meter_200 and the average of ID , and group by attribute meter_200, I want to rank by the bars in descending.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_200 , AVG(ID) FROM swimmer GROUP BY meter_200 ORDER BY meter_200 DESC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_200 , AVG(ID) FROM swimmer GROUP BY meter_200 ORDER BY meter_200 DESC"}, "hardness": "Medium"}, {"nl_queries": "Show me how many type by type in a histogram, and I want to display x axis in descending order.", "db_id": "ship_mission", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY Type DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY Type DESC"}, "hardness": "Medium"}, {"nl_queries": "Show names of musicals and the number of actors who have appeared in the musicals Show bar chart, and rank in asc by the names.", "db_id": "musical", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID ORDER BY T2.Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID ORDER BY T2.Name ASC"}, "hardness": "Hard"}, {"nl_queries": "For all employees who have the letters D or S in their first name, show me about the distribution of job_id and the average of employee_id , and group by attribute job_id in a bar chart, and list y axis in asc order please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "For those dates that have the 5 highest cloud cover rates, please bin the date into Year interval and compute their total cloud cover, and order in desc by the total number.", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date , SUM(cloud_cover) FROM weather  ORDER BY SUM(cloud_cover) DESC", "binning": "BIN date BY YEAR"}, "VQL": "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather  ORDER BY SUM(cloud_cover) DESC BIN date BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "Bar graph to show the total number from different team", "db_id": "wrestler", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Team , COUNT(*) FROM elimination GROUP BY Team", "binning": ""}, "VQL": "Visualize BAR SELECT Team , COUNT(*) FROM elimination GROUP BY Team"}, "hardness": "Easy"}, {"nl_queries": "what are the countries having at least one car maker? List name and id, and I want to list in descending by the CountryName.", "db_id": "car_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT CountryName , CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country ORDER BY CountryName DESC", "binning": ""}, "VQL": "Visualize BAR SELECT CountryName , CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country ORDER BY CountryName DESC"}, "hardness": "Medium"}, {"nl_queries": "Draw a bar chart for how many different products are produced in each headquarter city?, and display X-axis from high to low order.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Headquarter , count(DISTINCT T1.name) FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code ORDER BY Headquarter DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Headquarter , count(DISTINCT T1.name) FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code ORDER BY Headquarter DESC"}, "hardness": "Medium"}, {"nl_queries": "Draw a bar chart of product type code versus minimal product price", "db_id": "department_store", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT product_type_code , min(product_price) FROM products GROUP BY product_type_code", "binning": ""}, "VQL": "Visualize BAR SELECT product_type_code , min(product_price) FROM products GROUP BY product_type_code"}, "hardness": "Easy"}, {"nl_queries": "A bar chart about how many students are affected by each allergy type?, and could you rank in descending by the bars?", "db_id": "allergy_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY AllergyType DESC", "binning": ""}, "VQL": "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY AllergyType DESC"}, "hardness": "Hard"}, {"nl_queries": "Give me the comparison about the amount of Sex over the Sex , and group by attribute Sex by a bar chart, order in desc by the how many sex.", "db_id": "candidate_poll", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY COUNT(Sex) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY COUNT(Sex) DESC"}, "hardness": "Medium"}, {"nl_queries": "Give me a bar chart for charge_amount of each charge type, order Y from low to high order.", "db_id": "dog_kennels", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT charge_type , charge_amount FROM Charges ORDER BY charge_amount ASC", "binning": ""}, "VQL": "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_amount ASC"}, "hardness": "Easy"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, visualize a bar chart about the distribution of hire_date and the amount of hire_date bin hire_date by time, and could you list total number in desc order?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY COUNT(HIRE_DATE) DESC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY MONTH"}, "hardness": "Extra Hard"}, {"nl_queries": "A line chart for what are the number of the dates of the assessment notes?, and sort by the x-axis from high to low please.", "db_id": "behavior_monitoring", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY date_of_notes DESC", "binning": "BIN date_of_notes BY YEAR"}, "VQL": "Visualize LINE SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY date_of_notes DESC BIN date_of_notes BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "Show me about the proportion of  Team_ID and  Team_ID in a pie chart.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT All_Games , Team_ID FROM basketball_match", "binning": ""}, "VQL": "Visualize PIE SELECT All_Games , Team_ID FROM basketball_match"}, "hardness": "Easy"}, {"nl_queries": "Can you show a bar chart to visualize the number of carriers?, and list x axis from high to low order.", "db_id": "phone_market", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier ORDER BY Carrier DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier ORDER BY Carrier DESC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about manufacturer over the name , and group by attribute founder, show from low to high by the Y-axis.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder , T1.Name ORDER BY T1.Manufacturer ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder , T1.Name ORDER BY T1.Manufacturer ASC"}, "hardness": "Hard"}, {"nl_queries": "What are the number of the names of products with price at most 200?, list how many name in descending order please.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM products WHERE price <= 200 GROUP BY Name ORDER BY COUNT(Name) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM products WHERE price <= 200 GROUP BY Name ORDER BY COUNT(Name) DESC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, give me the comparison about salary over the first_name by a bar chart, I want to list Y from high to low order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT FIRST_NAME , SALARY FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY SALARY DESC", "binning": ""}, "VQL": "Visualize BAR SELECT FIRST_NAME , SALARY FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY SALARY DESC"}, "hardness": "Medium"}, {"nl_queries": "Find the average age of journalists working on different role type, show the result with a bar chart.", "db_id": "news_report", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Work_Type , avg(t1.age) FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id = t2.journalist_id GROUP BY t2.work_type", "binning": ""}, "VQL": "Visualize BAR SELECT Work_Type , avg(t1.age) FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id = t2.journalist_id GROUP BY t2.work_type"}, "hardness": "Medium"}, {"nl_queries": "Return a pie on how many assets can each parts be used in? List the part name and the number.", "db_id": "assets_maintenance", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT part_name , count(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_name", "binning": ""}, "VQL": "Visualize PIE SELECT part_name , count(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_name"}, "hardness": "Medium"}, {"nl_queries": "Find the number of students in each department that has the top 3 highest number of students. Show the department address and number of students with a pie chart.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT DEPT_ADDRESS , count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3", "binning": ""}, "VQL": "Visualize PIE SELECT DEPT_ADDRESS , count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3"}, "hardness": "Extra Hard"}, {"nl_queries": "For each submission, group its acceptance result and count them Visualize them in a bar chart, rank from high to low by the x axis.", "db_id": "workshop_paper", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result ORDER BY Result DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result ORDER BY Result DESC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, show me about the correlation between  code and  revenue , and group by attribute name in a scatter chart.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name", "binning": ""}, "VQL": "Visualize SCATTER SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name"}, "hardness": "Medium"}, {"nl_queries": "Display a bar chart for what are the numbers of wines for different grapes?, and list from low to high by the bars.", "db_id": "wine_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Grape , count(*) FROM WINE GROUP BY Grape ORDER BY Grape ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Grape , count(*) FROM WINE GROUP BY Grape ORDER BY Grape ASC"}, "hardness": "Medium"}, {"nl_queries": "What are the number of the purchase details of transactions with amount bigger than 10000?, and show by the names in ascending.", "db_id": "tracking_share_transactions", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT purchase_details , COUNT(purchase_details) FROM PURCHASES AS T1 JOIN TRANSACTIONS AS T2 ON T1.purchase_transaction_id = T2.transaction_id WHERE T2.amount_of_transaction > 10000 GROUP BY purchase_details ORDER BY purchase_details ASC", "binning": ""}, "VQL": "Visualize BAR SELECT purchase_details , COUNT(purchase_details) FROM PURCHASES AS T1 JOIN TRANSACTIONS AS T2 ON T1.purchase_transaction_id = T2.transaction_id WHERE T2.amount_of_transaction > 10000 GROUP BY purchase_details ORDER BY purchase_details ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "A bar chart about the number of faults for different fault status of all the faults recoreded in the logs.", "db_id": "assets_maintenance", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT fault_status , COUNT(fault_status) FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id GROUP BY fault_status", "binning": ""}, "VQL": "Visualize BAR SELECT fault_status , COUNT(fault_status) FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id GROUP BY fault_status"}, "hardness": "Medium"}, {"nl_queries": "What is the average price of the products for each category, could you list by the bars in ascending?", "db_id": "customer_complaints", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT product_category_code , avg(product_price) FROM products GROUP BY product_category_code ORDER BY product_category_code ASC", "binning": ""}, "VQL": "Visualize BAR SELECT product_category_code , avg(product_price) FROM products GROUP BY product_category_code ORDER BY product_category_code ASC"}, "hardness": "Medium"}, {"nl_queries": "Return a bar chart about the distribution of  All_Home and  Team_ID , and group by attribute ACC_Road.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home", "binning": ""}, "VQL": "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home"}, "hardness": "Extra Hard"}, {"nl_queries": "Show me about the distribution of  date_address_from and the sum of monthly_rental , and group by attribute other_details and bin date_address_from by weekday in a bar chart.", "db_id": "behavior_monitoring", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC", "binning": "BIN date_address_from BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "Visualize a pie chart about the proportion of  Sex and the sum of Weight.", "db_id": "candidate_poll", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Sex , SUM(Weight) FROM people GROUP BY Sex", "binning": ""}, "VQL": "Visualize PIE SELECT Sex , SUM(Weight) FROM people GROUP BY Sex"}, "hardness": "Easy"}, {"nl_queries": "For those records from the products and each product's manufacturer, find name and code , and group by attribute headquarter, and visualize them by a bar chart, order x axis from high to low order.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter , T1.Name ORDER BY T1.Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter , T1.Name ORDER BY T1.Name DESC"}, "hardness": "Hard"}, {"nl_queries": "What are the countries of mountains with height bigger than 5000, and count them by a bar chart, and I want to list y-axis in asc order.", "db_id": "climbing", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) ASC"}, "hardness": "Hard"}, {"nl_queries": "Visualize a bar chart for how many sections does each course has?, list by the total number in descending.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY count(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, give me the comparison about the average of manager_id over the  hire_date bin hire_date by weekday by a bar chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "For those employees who did not have any job in the past, a line chart shows the trend of manager_id over hire_date , could you order X-axis in ascending order?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE ASC", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE ASC"}, "hardness": "Medium"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, return a line chart about the change of  employee_id over  hire_date .", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40"}, "hardness": "Medium"}, {"nl_queries": "Give me a line chart about the number of competitions held in each year, and display x axis from high to low order.", "db_id": "farm", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Year , COUNT(Year) FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID  ORDER BY Year DESC", "binning": "BIN Year BY YEAR"}, "VQL": "Visualize LINE SELECT Year , COUNT(Year) FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID  ORDER BY Year DESC BIN Year BY YEAR"}, "hardness": "Hard"}, {"nl_queries": "Give me the comparison about meter_100 over the meter_600 by a bar chart, and could you order by the x-axis from high to low please?", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_600 , meter_100 FROM swimmer ORDER BY meter_600 DESC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_600 , meter_100 FROM swimmer ORDER BY meter_600 DESC"}, "hardness": "Easy"}, {"nl_queries": "How many songs were released for each format. Visualize by pie chart.", "db_id": "music_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT formats , count(*) FROM files GROUP BY formats", "binning": ""}, "VQL": "Visualize PIE SELECT formats , count(*) FROM files GROUP BY formats"}, "hardness": "Easy"}, {"nl_queries": "Show the product name and price of its most expensive product using a bar chart, and show from high to low by the total number.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , max(T1.Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY max(T1.Price) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , max(T1.Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY max(T1.Price) DESC"}, "hardness": "Medium"}, {"nl_queries": "Draw a pie chart about the proportion of  ACC_Road and the amount of ACC_Road.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT ACC_Road , COUNT(ACC_Road) FROM basketball_match GROUP BY ACC_Road", "binning": ""}, "VQL": "Visualize PIE SELECT ACC_Road , COUNT(ACC_Road) FROM basketball_match GROUP BY ACC_Road"}, "hardness": "Easy"}, {"nl_queries": "Show the product name and total order quantity for each product with a pie chart.", "db_id": "customers_and_products_contacts", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT T1.product_name , SUM(sum(T2.order_quantity)) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name", "binning": ""}, "VQL": "Visualize PIE SELECT T1.product_name , SUM(sum(T2.order_quantity)) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name"}, "hardness": "Medium"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, visualize a bar chart about the distribution of first_name and employee_id , list x-axis in asc order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT FIRST_NAME , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY FIRST_NAME ASC", "binning": ""}, "VQL": "Visualize BAR SELECT FIRST_NAME , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY FIRST_NAME ASC"}, "hardness": "Medium"}, {"nl_queries": "Give me a bar chart that groups and counts the years played for players from team \"Columbus Crew\", I want to display X-axis in asc order please.", "db_id": "match_season", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Years_Played , COUNT(Years_Played) FROM player AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id WHERE T2.Name = \"Columbus Crew\" GROUP BY Years_Played ORDER BY Years_Played ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Years_Played , COUNT(Years_Played) FROM player AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id WHERE T2.Name = \"Columbus Crew\" GROUP BY Years_Played ORDER BY Years_Played ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "Bar graph to show minimal enr from different cname", "db_id": "soccer_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT cName , min(enr) FROM college GROUP BY state", "binning": ""}, "VQL": "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state"}, "hardness": "Easy"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, draw a bar chart about the distribution of  hire_date and the sum of manager_id bin hire_date by time.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "Visualize a scatter chart about the correlation between  author_tutor_ATB and  gender_mf .", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT author_tutor_ATB , gender_mf FROM Course_Authors_and_Tutors ORDER BY personal_name", "binning": ""}, "VQL": "Visualize SCATTER SELECT author_tutor_ATB , gender_mf FROM Course_Authors_and_Tutors ORDER BY personal_name"}, "hardness": "Easy"}, {"nl_queries": "For all employees who have the letters D or S in their first name, return a bar chart about the distribution of job_id and the sum of department_id , and group by attribute job_id, and list by the Y-axis in descending.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "Return each apartment type code with the number of apartments having that apartment type, in ascending order of the number of apartments by a bar chart.", "db_id": "apartment_rentals", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT apt_type_code , COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT apt_type_code , COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "Show sum transaction amount from each transaction type", "db_id": "customers_and_invoices", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT transaction_type , sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type", "binning": ""}, "VQL": "Visualize BAR SELECT transaction_type , sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type"}, "hardness": "Easy"}, {"nl_queries": "Group and count the city attribute of the location table to visualize a bar chart, show by the names from low to high.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY CITY ASC", "binning": ""}, "VQL": "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY CITY ASC"}, "hardness": "Medium"}, {"nl_queries": "Show me about the distribution of All_Road and ACC_Percent in a bar chart, display from high to low by the Y.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Road , ACC_Percent FROM basketball_match ORDER BY ACC_Percent DESC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Road , ACC_Percent FROM basketball_match ORDER BY ACC_Percent DESC"}, "hardness": "Easy"}, {"nl_queries": "Create a pie chart showing the total number across building.", "db_id": "activity_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Building , count(*) FROM Faculty GROUP BY building", "binning": ""}, "VQL": "Visualize PIE SELECT Building , count(*) FROM Faculty GROUP BY building"}, "hardness": "Easy"}, {"nl_queries": "Display a bar chart for the names and the ages of editors, list by the bar from low to high.", "db_id": "journal_committee", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , Age FROM editor ORDER BY Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , Age FROM editor ORDER BY Name ASC"}, "hardness": "Easy"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, return a bar chart about the distribution of hire_date and the average of employee_id bin hire_date by time, order in ascending by the Y.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(EMPLOYEE_ID) ASC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH"}, "hardness": "Extra Hard"}, {"nl_queries": "Draw a bar chart for what are the id and name of the mountains that have at least 2 photos?, could you order names from low to high order?", "db_id": "mountain_photos", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.name , T1.id FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id ORDER BY T1.name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.name , T1.id FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id ORDER BY T1.name ASC"}, "hardness": "Medium"}, {"nl_queries": "Bar chart x axis occupation y axis how many occupation, and rank by the y-axis from low to high.", "db_id": "riding_club", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Occupation , COUNT(Occupation) FROM player GROUP BY Occupation ORDER BY COUNT(Occupation) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Occupation , COUNT(Occupation) FROM player GROUP BY Occupation ORDER BY COUNT(Occupation) ASC"}, "hardness": "Medium"}, {"nl_queries": "A stacked bar chart that computes the total number of wines with a price is bigger than 100 of each year, and group by grape. Next, Bin the year into the weekday interval. ", "db_id": "wine_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Year , COUNT(Year) FROM WINE WHERE Price > 100 GROUP BY Grape ORDER BY YEAR", "binning": "BIN Year BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Year , COUNT(Year) FROM WINE WHERE Price > 100 GROUP BY Grape ORDER BY YEAR BIN Year BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "For those payments processed with Visa, bin the payment day into the Day of Week interval and compute the total amount payment as the Y-axis.", "db_id": "insurance_policies", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'", "binning": "BIN Date_Payment_Made BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "I want to see trend of day_number by calendar date, rank in descending by the x axis.", "db_id": "cre_Doc_Tracking_DB", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Calendar_Date , Day_Number FROM Ref_calendar ORDER BY Calendar_Date DESC", "binning": ""}, "VQL": "Visualize LINE SELECT Calendar_Date , Day_Number FROM Ref_calendar ORDER BY Calendar_Date DESC"}, "hardness": "Easy"}, {"nl_queries": "Visualize a bar chart that bin the open date into a day of the week interval and count them.", "db_id": "wedding", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Open_Date , COUNT(Open_Date) FROM church", "binning": "BIN Open_Date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Open_Date , COUNT(Open_Date) FROM church BIN Open_Date BY WEEKDAY"}, "hardness": "Easy"}, {"nl_queries": "Visualize a bar chart about the distribution of  Name and  Weight .", "db_id": "candidate_poll", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , Weight FROM people", "binning": ""}, "VQL": "Visualize BAR SELECT Name , Weight FROM people"}, "hardness": "Easy"}, {"nl_queries": "Show the number of documents for different document name in a bar chart, and could you order by the y axis in ascending please?", "db_id": "cre_Docs_and_Epenses", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Document_Name , COUNT(Document_Name) FROM Documents GROUP BY Document_Name ORDER BY COUNT(Document_Name) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Document_Name , COUNT(Document_Name) FROM Documents GROUP BY Document_Name ORDER BY COUNT(Document_Name) ASC"}, "hardness": "Medium"}, {"nl_queries": "Give me a pie to show the total number from different category.", "db_id": "music_4", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Category , COUNT(*) FROM music_festival GROUP BY Category", "binning": ""}, "VQL": "Visualize PIE SELECT Category , COUNT(*) FROM music_festival GROUP BY Category"}, "hardness": "Easy"}, {"nl_queries": "Plot total number of shop id over start from in a line chart, list by the x-axis in asc.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Start_from , SUM(Shop_ID) FROM hiring  ORDER BY Start_from ASC", "binning": "BIN Start_from BY YEAR"}, "VQL": "Visualize LINE SELECT Start_from , SUM(Shop_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "Show names of technicians who are assigned to repair machines with value point more than 70, and count them by a bar chart, order by the y-axis in desc.", "db_id": "machine_repair", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID WHERE T2.value_points > 70 GROUP BY Name ORDER BY COUNT(Name) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID WHERE T2.value_points > 70 GROUP BY Name ORDER BY COUNT(Name) DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, a bar chart shows the distribution of  job_id and the average of manager_id , and group by attribute job_id.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID"}, "hardness": "Hard"}, {"nl_queries": "For those employees who was hired before 2002-06-21, what is the relationship between  employee_id and  manager_id ?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT EMPLOYEE_ID , MANAGER_ID FROM employees WHERE hire_date < '2002-06-21'", "binning": ""}, "VQL": "Visualize SCATTER SELECT EMPLOYEE_ID , MANAGER_ID FROM employees WHERE hire_date < '2002-06-21'"}, "hardness": "Easy"}, {"nl_queries": "Please return me a pie chart show what are the total smallest rating of different movie title?", "db_id": "movie_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT T2.title , SUM(min(T1.stars)) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T2.title", "binning": ""}, "VQL": "Visualize PIE SELECT T2.title , SUM(min(T1.stars)) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T2.title"}, "hardness": "Medium"}, {"nl_queries": "Show the number of accounts opened in each day Bin the account open day by weekday in a bar chart, and order from low to high by the y-axis.", "db_id": "customers_and_invoices", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_account_opened , COUNT(date_account_opened) FROM Accounts  ORDER BY COUNT(date_account_opened) ASC", "binning": "BIN date_account_opened BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_account_opened , COUNT(date_account_opened) FROM Accounts  ORDER BY COUNT(date_account_opened) ASC BIN date_account_opened BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "Plot the number of name by grouped by name as a bar graph, and I want to list the number of name in desc order please.", "db_id": "train_station", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM train GROUP BY Name ORDER BY COUNT(Name) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM train GROUP BY Name ORDER BY COUNT(Name) DESC"}, "hardness": "Medium"}, {"nl_queries": "Show the product name and total order quantity for each product. Plot them as bar chart.", "db_id": "customers_and_products_contacts", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.product_name , SUM(sum(T2.order_quantity)) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name", "binning": ""}, "VQL": "Visualize BAR SELECT T1.product_name , SUM(sum(T2.order_quantity)) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name"}, "hardness": "Medium"}, {"nl_queries": "Display a bar chart for how many products are there for each manufacturer?, and order in asc by the names.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , count(*) FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name ORDER BY T2.Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , count(*) FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name ORDER BY T2.Name ASC"}, "hardness": "Hard"}, {"nl_queries": "Bar chart x axis color y axis the number of color, show in ascending by the y axis please.", "db_id": "mountain_photos", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT color , COUNT(color) FROM photos GROUP BY color ORDER BY COUNT(color) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT color , COUNT(color) FROM photos GROUP BY color ORDER BY COUNT(color) ASC"}, "hardness": "Medium"}, {"nl_queries": "Display a bar chart for what are the ids and locations of all circuits in France or Belgium?, and order by the bar in asc.", "db_id": "formula_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT location , circuitId FROM circuits WHERE country = \"France\" OR country = \"Belgium\" ORDER BY location ASC", "binning": ""}, "VQL": "Visualize BAR SELECT location , circuitId FROM circuits WHERE country = \"France\" OR country = \"Belgium\" ORDER BY location ASC"}, "hardness": "Hard"}, {"nl_queries": "What is the number of types of competition?, I want to display X-axis from high to low order.", "db_id": "sports_competition", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Competition_type , COUNT(Competition_type) FROM competition GROUP BY Competition_type ORDER BY Competition_type DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Competition_type , COUNT(Competition_type) FROM competition GROUP BY Competition_type ORDER BY Competition_type DESC"}, "hardness": "Medium"}, {"nl_queries": "On what dates were employees without the letter M in their first names hired, and count them by a bar chart, I want to list total number in descending order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name NOT LIKE '%M%'  ORDER BY COUNT(HIRE_DATE) DESC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name NOT LIKE '%M%'  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, draw a scatter chart about the correlation between  code and  revenue , and group by attribute name.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name", "binning": ""}, "VQL": "Visualize SCATTER SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name"}, "hardness": "Medium"}, {"nl_queries": "Can you draw the trend of mean attendance over the year? and display in ascending by the year.", "db_id": "baseball_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT year , avg(attendance) FROM home_game ORDER BY year ASC", "binning": "BIN year BY YEAR"}, "VQL": "Visualize LINE SELECT year , avg(attendance) FROM home_game ORDER BY year ASC BIN year BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "Visualize a bar chart showing the average age of captains in each class, order by the y axis in descending.", "db_id": "ship_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY avg(age) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY avg(age) DESC"}, "hardness": "Medium"}, {"nl_queries": "Find the number of scientists involved for the projects that require more than 300 hours Show bar chart, and list X-axis in ascending order.", "db_id": "scientist_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name ORDER BY Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name ORDER BY Name ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "For all employees who have the letters D or S in their first name, return a bar chart about the distribution of hire_date and the sum of department_id bin hire_date by weekday, show by the Y from low to high.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(DEPARTMENT_ID) ASC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, find job_id and the amount of job_id , and group by attribute job_id, and visualize them by a bar chart, I want to show by the total number in descending.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , COUNT(JOB_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY COUNT(JOB_ID) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY COUNT(JOB_ID) DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "Stack bar chart of team_id vs ACC_Home based on all home, show by the total number from high to low.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY Team_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY Team_ID DESC"}, "hardness": "Medium"}, {"nl_queries": "Create a bar chart showing the total number across premises type, I want to order Y in ascending order.", "db_id": "customers_campaigns_ecommerce", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT premises_type , count(*) FROM premises GROUP BY premises_type ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT premises_type , count(*) FROM premises GROUP BY premises_type ORDER BY count(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "Show the average price of the rooms in different decor using a pie chart.", "db_id": "inn_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor", "binning": ""}, "VQL": "Visualize PIE SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor"}, "hardness": "Easy"}, {"nl_queries": "For those employees who was hired before 2002-06-21, visualize a scatter chart about the correlation between  salary and  department_id .", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT SALARY , DEPARTMENT_ID FROM employees WHERE hire_date < '2002-06-21'", "binning": ""}, "VQL": "Visualize SCATTER SELECT SALARY , DEPARTMENT_ID FROM employees WHERE hire_date < '2002-06-21'"}, "hardness": "Easy"}, {"nl_queries": "Return a histogram on how many actors have appeared in each musical?, and order y-axis in desc order please.", "db_id": "musical", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID ORDER BY COUNT(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID ORDER BY COUNT(*) DESC"}, "hardness": "Hard"}, {"nl_queries": "For all employees who have the letters D or S in their first name, give me the comparison about the average of employee_id over the  job_id , and group by attribute job_id by a bar chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID"}, "hardness": "Extra Hard"}, {"nl_queries": "Display a bar chart for how many students are from each city, and which cities have more than one cities?, and list y-axis from high to low order.", "db_id": "dorm_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT city_code , count(*) FROM student GROUP BY city_code ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT city_code , count(*) FROM student GROUP BY city_code ORDER BY count(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, draw a scatter chart about the correlation between  code and  manufacturer , and group by attribute founder.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder", "binning": ""}, "VQL": "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder"}, "hardness": "Medium"}, {"nl_queries": "Find the number of courses that have more than one prerequisites for each department in a bar chart, list from high to low by the the number of dept name.", "db_id": "college_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT dept_name , COUNT(dept_name) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY dept_name ORDER BY COUNT(dept_name) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT dept_name , COUNT(dept_name) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY dept_name ORDER BY COUNT(dept_name) DESC"}, "hardness": "Hard"}, {"nl_queries": "Find the average gpa of all students in each department with a bar chart, could you list by the y axis from low to high?", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT DEPT_CODE , avg(stu_gpa) FROM student GROUP BY dept_code ORDER BY avg(stu_gpa) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT DEPT_CODE , avg(stu_gpa) FROM student GROUP BY dept_code ORDER BY avg(stu_gpa) ASC"}, "hardness": "Medium"}, {"nl_queries": "Give me a pie to show the total number from different position.", "db_id": "match_season", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Position , COUNT(*) FROM match_season GROUP BY POSITION", "binning": ""}, "VQL": "Visualize PIE SELECT Position , COUNT(*) FROM match_season GROUP BY POSITION"}, "hardness": "Easy"}, {"nl_queries": "Show all role codes and the number of employees in each role Show bar chart, and could you show by the bars in desc please?", "db_id": "cre_Doc_Tracking_DB", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY Role_Code DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY Role_Code DESC"}, "hardness": "Medium"}, {"nl_queries": "For all employees who have the letters D or S in their first name, find hire_date and the average of manager_id bin hire_date by time, and visualize them by a bar chart, show by the y axis in ascending.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY AVG(MANAGER_ID) ASC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH"}, "hardness": "Extra Hard"}, {"nl_queries": "What are the number of the dates in which the mean sea level pressure was between 303 and 31?, and could you rank in desc by the y-axis?", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date , COUNT(date) FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31  ORDER BY COUNT(date) DESC", "binning": "BIN date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31  ORDER BY COUNT(date) DESC BIN date BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "Show id and location of railways that are associated with more than one train. Show the proportion.", "db_id": "railway", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT T1.Location , T1.Railway_ID FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID = T2.Railway_ID", "binning": ""}, "VQL": "Visualize PIE SELECT T1.Location , T1.Railway_ID FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID = T2.Railway_ID"}, "hardness": "Easy"}, {"nl_queries": "Show the party and the number of drivers in each party. Plot them as bar chart.", "db_id": "school_bus", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Party , count(*) FROM driver GROUP BY party", "binning": ""}, "VQL": "Visualize BAR SELECT Party , count(*) FROM driver GROUP BY party"}, "hardness": "Easy"}, {"nl_queries": "A bar chart showing the sum of capacity of cinemas open for each year, could you sort in desc by the x-axis?", "db_id": "cinema", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Openning_year , SUM(Capacity) FROM cinema GROUP BY Openning_year ORDER BY Openning_year DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Openning_year , SUM(Capacity) FROM cinema GROUP BY Openning_year ORDER BY Openning_year DESC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about the sum of price over the name , and group by attribute name by a bar chart, show x axis in asc order please.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC"}, "hardness": "Hard"}, {"nl_queries": "How many documents are there of each type. Plot them as pie chart.", "db_id": "cre_Docs_and_Epenses", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Document_Type_Code , count(*) FROM Documents GROUP BY document_type_code", "binning": ""}, "VQL": "Visualize PIE SELECT Document_Type_Code , count(*) FROM Documents GROUP BY document_type_code"}, "hardness": "Easy"}, {"nl_queries": "What is the date of enrollment of the course named \"Spanish\", and count them by a bar chart, and I want to show by the Y-axis from low to high.", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\"  ORDER BY COUNT(date_of_enrolment) ASC", "binning": "BIN date_of_enrolment BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\"  ORDER BY COUNT(date_of_enrolment) ASC BIN date_of_enrolment BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "For each cinema, show the price and group them by film title in a stacked bar chart, and could you list from high to low by the total number?", "db_id": "cinema", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Title , Price FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Name ,  Title ORDER BY Price DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Title , Price FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Name ,  Title ORDER BY Price DESC"}, "hardness": "Hard"}, {"nl_queries": "Count the number of programs broadcast for each time section of a day Show bar chart, could you show by the x-axis in asc please?", "db_id": "program_share", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Time_of_day , count(*) FROM broadcast GROUP BY time_of_day ORDER BY Time_of_day ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Time_of_day , count(*) FROM broadcast GROUP BY time_of_day ORDER BY Time_of_day ASC"}, "hardness": "Medium"}, {"nl_queries": "Show all calendar dates and day Numbers Plot them as line chart, rank by the Calendar_Date from high to low please.", "db_id": "cre_Doc_Tracking_DB", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Calendar_Date , Day_Number FROM Ref_calendar ORDER BY Calendar_Date DESC", "binning": ""}, "VQL": "Visualize LINE SELECT Calendar_Date , Day_Number FROM Ref_calendar ORDER BY Calendar_Date DESC"}, "hardness": "Easy"}, {"nl_queries": "Find the names and publication dates of all catalogs that have catalog level numbers greater than 5 Bin publication dates into Year interval, and count catalog as a bar chart, display by the Y from low to high.", "db_id": "product_catalog", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_of_publication , COUNT(date_of_publication) FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id = t2.catalog_id WHERE catalog_level_number > 5  ORDER BY COUNT(date_of_publication) ASC", "binning": "BIN date_of_publication BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_of_publication , COUNT(date_of_publication) FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id = t2.catalog_id WHERE catalog_level_number > 5  ORDER BY COUNT(date_of_publication) ASC BIN date_of_publication BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, find  name and the sum of code , and group by attribute name, and visualize them by a bar chart.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name"}, "hardness": "Medium"}, {"nl_queries": "How many parties of the time they leave office, binning the leave office into WEEKDAY interval, show by the y-axis in ascending.", "db_id": "party_people", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Left_office , COUNT(Left_office) FROM party  ORDER BY COUNT(Left_office) ASC", "binning": "BIN Left_office BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Left_office , COUNT(Left_office) FROM party  ORDER BY COUNT(Left_office) ASC BIN Left_office BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "Show me about the distribution of  date_address_from and the amount of date_address_from , and group by attribute other_details and bin date_address_from by time in a bar chart.", "db_id": "behavior_monitoring", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC", "binning": "BIN date_address_from BY YEAR"}, "VQL": "Visualize BAR SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY YEAR"}, "hardness": "Extra Hard"}, {"nl_queries": "What are the number of the descriptions for the aircrafts?, sort bar in ascending order.", "db_id": "aircraft", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY Description ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY Description ASC"}, "hardness": "Medium"}, {"nl_queries": "How many enrolment students in each month? Return a bar chart binning date of enrolment by month interval.", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Student_Course_Enrolment", "binning": "BIN date_of_enrolment BY MONTH"}, "VQL": "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Student_Course_Enrolment BIN date_of_enrolment BY MONTH"}, "hardness": "Easy"}, {"nl_queries": "count services by services, and split by local authorities with a stacked bar chart, and could you sort bars from high to low order?", "db_id": "station_weather", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT local_authority , COUNT(local_authority) FROM station GROUP BY services ,  local_authority ORDER BY local_authority DESC", "binning": ""}, "VQL": "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY services ,  local_authority ORDER BY local_authority DESC"}, "hardness": "Hard"}, {"nl_queries": "How many courses have more than one prerequisite for each department? Visualize with a bar chart.", "db_id": "college_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT dept_name , COUNT(dept_name) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY dept_name", "binning": ""}, "VQL": "Visualize BAR SELECT dept_name , COUNT(dept_name) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY dept_name"}, "hardness": "Medium"}, {"nl_queries": "Return a histogram on what is the date and id of the transcript with at least 2 courses listed?, display in desc by the X.", "db_id": "student_transcripts_tracking", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id ORDER BY transcript_date DESC", "binning": ""}, "VQL": "Visualize BAR SELECT transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id ORDER BY transcript_date DESC"}, "hardness": "Medium"}, {"nl_queries": "Return a line chart about the change of the sum of Employee_ID over Start_from bin start_from by time, and rank from low to high by the x-axis.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Start_from , SUM(Employee_ID) FROM hiring  ORDER BY Start_from ASC", "binning": "BIN Start_from BY YEAR"}, "VQL": "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "What are the actual delivery dates of orders with quantity 1, and count them by a bar chart", "db_id": "cre_Drama_Workshop_Groups", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID = T2.Order_ID WHERE T2.Order_Quantity = 1", "binning": "BIN Actual_Delivery_Date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID = T2.Order_ID WHERE T2.Order_Quantity = 1 BIN Actual_Delivery_Date BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "Create a bar chart showing how many allergytype across allergytype, and list in descending by the how many allergytype.", "db_id": "allergy_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT AllergyType , COUNT(AllergyType) FROM Allergy_type GROUP BY AllergyType ORDER BY COUNT(AllergyType) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT AllergyType , COUNT(AllergyType) FROM Allergy_type GROUP BY AllergyType ORDER BY COUNT(AllergyType) DESC"}, "hardness": "Medium"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, what is the relationship between  salary and  commission_pct ?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT SALARY , COMMISSION_PCT FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40", "binning": ""}, "VQL": "Visualize SCATTER SELECT SALARY , COMMISSION_PCT FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40"}, "hardness": "Medium"}, {"nl_queries": "Just show the first name of the employee and list their department's id in the Y-axis of the bar chart, and sort names in ascending order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT FIRST_NAME , DEPARTMENT_ID FROM employees ORDER BY FIRST_NAME ASC", "binning": ""}, "VQL": "Visualize BAR SELECT FIRST_NAME , DEPARTMENT_ID FROM employees ORDER BY FIRST_NAME ASC"}, "hardness": "Easy"}, {"nl_queries": "Show the total number from each payment method code", "db_id": "driving_school", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT payment_method_code , count(*) FROM Customer_Payments GROUP BY payment_method_code", "binning": ""}, "VQL": "Visualize BAR SELECT payment_method_code , count(*) FROM Customer_Payments GROUP BY payment_method_code"}, "hardness": "Easy"}, {"nl_queries": "Show the smallest enrollment of each state.", "db_id": "soccer_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT state , min(enr) FROM college GROUP BY state", "binning": ""}, "VQL": "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state"}, "hardness": "Easy"}, {"nl_queries": "How many dogs who have gone through a treatment arrived in each day? Return a bar chart that bins arrived date by weekday.", "db_id": "dog_kennels", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_arrived , COUNT(date_arrived) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id", "binning": "BIN date_arrived BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_arrived , COUNT(date_arrived) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id BIN date_arrived BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "Give me the comparison about All_Games_Percent over the All_Neutral by a bar chart, I want to order by the x axis in desc.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral DESC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral DESC"}, "hardness": "Easy"}, {"nl_queries": "A bar chart for listing the number of the description of the outcomes for all projects, rank in desc by the Y please.", "db_id": "tracking_grants_for_research", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description ORDER BY COUNT(outcome_description) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description ORDER BY COUNT(outcome_description) DESC"}, "hardness": "Hard"}, {"nl_queries": "What are card ids, customer ids, card types, and card numbers for each customer card?, list y-axis from low to high order please.", "db_id": "customers_card_transactions", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT card_type_code , SUM(card_number) FROM Customers_cards GROUP BY card_type_code ORDER BY SUM(card_number) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT card_type_code , SUM(card_number) FROM Customers_cards GROUP BY card_type_code ORDER BY SUM(card_number) ASC"}, "hardness": "Medium"}, {"nl_queries": "What are the number of the last names for all scholarship students?, rank in desc by the X-axis please.", "db_id": "game_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT LName , COUNT(LName) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T1.onscholarship = 'Y' GROUP BY LName ORDER BY LName DESC", "binning": ""}, "VQL": "Visualize BAR SELECT LName , COUNT(LName) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T1.onscholarship = 'Y' GROUP BY LName ORDER BY LName DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, find  name and  code , and group by attribute founder, and visualize them by a bar chart.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder , T1.Name", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder , T1.Name"}, "hardness": "Medium"}, {"nl_queries": "Bar chart x axis team name y axis school_id", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Team_Name , School_ID FROM basketball_match", "binning": ""}, "VQL": "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match"}, "hardness": "Easy"}, {"nl_queries": "Visualize a bar chart about the distribution of All_Home and School_ID , and group by attribute ACC_Home, and rank from low to high by the x-axis.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home ASC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home ASC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, visualize a bar chart about the distribution of name and revenue , and group by attribute name, list Revenue in ascending order please.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T2.Revenue ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T2.Revenue ASC"}, "hardness": "Hard"}, {"nl_queries": "What is the average number of stars that each reviewer awards for a movie Show bar chart, and rank Y in descending order.", "db_id": "movie_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID GROUP BY T2.name ORDER BY avg(T1.stars) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT name , avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID GROUP BY T2.name ORDER BY avg(T1.stars) DESC"}, "hardness": "Hard"}, {"nl_queries": "Visualize a bar chart about the distribution of  date_address_from and the sum of monthly_rental , and group by attribute other_details and bin date_address_from by time.", "db_id": "behavior_monitoring", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC", "binning": "BIN date_address_from BY YEAR"}, "VQL": "Visualize BAR SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY YEAR"}, "hardness": "Extra Hard"}, {"nl_queries": "Return a pie chart to show how many documents for different budget type code.", "db_id": "cre_Docs_and_Epenses", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT T1.Budget_Type_Code , COUNT(T1.Budget_Type_Code) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY T1.Budget_Type_Code", "binning": ""}, "VQL": "Visualize PIE SELECT T1.Budget_Type_Code , COUNT(T1.Budget_Type_Code) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY T1.Budget_Type_Code"}, "hardness": "Medium"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, visualize a bar chart about the distribution of  job_id and the average of employee_id , and group by attribute job_id.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID"}, "hardness": "Hard"}, {"nl_queries": "Find the number of medications prescribed for each brand Plot them as bar chart, sort in ascending by the y axis.", "db_id": "hospital_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , count(*) FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , count(*) FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand ORDER BY count(*) ASC"}, "hardness": "Hard"}, {"nl_queries": "Bar graph to show age from different name", "db_id": "school_bus", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , Age FROM driver", "binning": ""}, "VQL": "Visualize BAR SELECT Name , Age FROM driver"}, "hardness": "Easy"}, {"nl_queries": "For those products with a price between 60 and 120, show me about the proportion of  code and  code in a pie chart.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120", "binning": ""}, "VQL": "Visualize PIE SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120"}, "hardness": "Easy"}, {"nl_queries": "Return the staff ids and genders for any staff with the title Department Manager. Visualize by scatter chart.", "db_id": "department_store", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT T1.staff_id , T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id WHERE T2.job_title_code = \"Department Manager\"", "binning": ""}, "VQL": "Visualize SCATTER SELECT T1.staff_id , T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id WHERE T2.job_title_code = \"Department Manager\""}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about revenue over the name , and group by attribute name, I want to sort from high to low by the Y-axis.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T2.Revenue DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T2.Revenue DESC"}, "hardness": "Hard"}, {"nl_queries": "Show the names of climbers and the heights of mountains they climb. Show bar chart.", "db_id": "climbing", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID"}, "hardness": "Easy"}, {"nl_queries": "A bar chart compares the ages of all artists, sort by the total number in ascending.", "db_id": "theme_gallery", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , Age FROM artist ORDER BY Age ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , Age FROM artist ORDER BY Age ASC"}, "hardness": "Easy"}, {"nl_queries": "What are the different card types, and how many transactions have been made with each Visualize by bar chart, sort Y-axis in asc order please.", "db_id": "customers_card_transactions", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT card_type_code , count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id = T2.card_id GROUP BY T2.card_type_code ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT card_type_code , count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id = T2.card_id GROUP BY T2.card_type_code ORDER BY count(*) ASC"}, "hardness": "Hard"}, {"nl_queries": "A bar chart about the number of faluts for different fault description recorded in the logs, and could you list names in descending order?", "db_id": "assets_maintenance", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT fault_description , COUNT(fault_description) FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id GROUP BY fault_description ORDER BY fault_description DESC", "binning": ""}, "VQL": "Visualize BAR SELECT fault_description , COUNT(fault_description) FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id GROUP BY fault_description ORDER BY fault_description DESC"}, "hardness": "Hard"}, {"nl_queries": "Find the student ID and personal name of the student with at least two enrollments, and could you display in ascending by the y-axis?", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.personal_name , T1.student_id FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.student_id ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.personal_name , T1.student_id FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.student_id ASC"}, "hardness": "Medium"}, {"nl_queries": "how many rooms have king beds? Report the number for each decor type, and rank by the y axis in ascending.", "db_id": "inn_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT decor , count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT decor , count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor ORDER BY count(*) ASC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, a bar chart shows the distribution of hire_date and the sum of employee_id bin hire_date by weekday, sort by the total number in desc.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(EMPLOYEE_ID) DESC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "What are the student IDs and middle names of the students enrolled in at most two courses, rank x axis from low to high order please.", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.middle_name , T1.student_id FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id ORDER BY T2.middle_name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.middle_name , T1.student_id FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id ORDER BY T2.middle_name ASC"}, "hardness": "Medium"}, {"nl_queries": "What is the lowest salary in departments with average salary greater than the overall average Plot them as bar chart, and sort minimal salary in ascending order please.", "db_id": "college_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY min(salary) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY min(salary) ASC"}, "hardness": "Easy"}, {"nl_queries": "Show all ages and corresponding number of students in a scatter chart", "db_id": "allergy_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Age , count(*) FROM Student GROUP BY age", "binning": ""}, "VQL": "Visualize SCATTER SELECT Age , count(*) FROM Student GROUP BY age"}, "hardness": "Easy"}, {"nl_queries": "Bar chart of school_id from each all games, and list in asc by the X-axis.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Games , School_ID FROM basketball_match ORDER BY All_Games ASC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Games , School_ID FROM basketball_match ORDER BY All_Games ASC"}, "hardness": "Easy"}, {"nl_queries": "How many enrolment students in each day? Return a bar chart binning date of enrolment by weekday, rank the number of date of enrolment from high to low order.", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Student_Course_Enrolment  ORDER BY COUNT(date_of_enrolment) DESC", "binning": "BIN date_of_enrolment BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Student_Course_Enrolment  ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "I want to know the proportion of total number for each product category.", "db_id": "customers_campaigns_ecommerce", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT product_category , count(*) FROM mailshot_campaigns GROUP BY product_category", "binning": ""}, "VQL": "Visualize PIE SELECT product_category , count(*) FROM mailshot_campaigns GROUP BY product_category"}, "hardness": "Easy"}, {"nl_queries": "Find the number of customers that use email as the contact channel for each weekday Visualize with a bar chart, order from low to high by the Y-axis please.", "db_id": "customers_and_addresses", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT active_from_date , COUNT(active_from_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email' ORDER BY COUNT(active_from_date) ASC", "binning": "BIN active_from_date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT active_from_date , COUNT(active_from_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email' ORDER BY COUNT(active_from_date) ASC BIN active_from_date BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "Give me the comparison about  School_ID over the  All_Neutral .", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Neutral , School_ID FROM basketball_match", "binning": ""}, "VQL": "Visualize BAR SELECT All_Neutral , School_ID FROM basketball_match"}, "hardness": "Easy"}, {"nl_queries": "List the problem id and log id which are assigned to the staff named Rylan Homenick. Plot them as scatter chart.", "db_id": "tracking_software_problems", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT problem_id , problem_log_id FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T1.staff_first_name = \"Rylan\" AND T1.staff_last_name = \"Homenick\"", "binning": ""}, "VQL": "Visualize SCATTER SELECT problem_id , problem_log_id FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T1.staff_first_name = \"Rylan\" AND T1.staff_last_name = \"Homenick\""}, "hardness": "Medium"}, {"nl_queries": "Give me the comparison about School_ID over the All_Neutral , and rank All_Neutral in descending order.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Neutral , School_ID FROM basketball_match ORDER BY All_Neutral DESC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Neutral , School_ID FROM basketball_match ORDER BY All_Neutral DESC"}, "hardness": "Easy"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, return a bar chart about the distribution of email and employee_id , and show x axis in ascending order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT EMAIL , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY EMAIL ASC", "binning": ""}, "VQL": "Visualize BAR SELECT EMAIL , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY EMAIL ASC"}, "hardness": "Medium"}, {"nl_queries": "Show me about the distribution of Is_full_time and the amount of Is_full_time , and group by attribute Is_full_time in a bar chart, and order X-axis in descending order please.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC"}, "hardness": "Medium"}, {"nl_queries": "What are the dates with a maximum temperature higher than 85, and count them by a bar chart, list in asc by the y axis.", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date , COUNT(date) FROM weather WHERE max_temperature_f > 85  ORDER BY COUNT(date) ASC", "binning": "BIN date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE max_temperature_f > 85  ORDER BY COUNT(date) ASC BIN date BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "What are the different template type codes, and how many documents use each type Plot them as bar chart, list X-axis from low to high order.", "db_id": "cre_Doc_Template_Mgt", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY Template_Type_Code ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY Template_Type_Code ASC"}, "hardness": "Hard"}, {"nl_queries": "What are the names and ids of all countries with at least one car maker Show bar chart, and could you rank total number from low to high order?", "db_id": "car_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT CountryName , CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country ORDER BY CountryId ASC", "binning": ""}, "VQL": "Visualize BAR SELECT CountryName , CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country ORDER BY CountryId ASC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, for  commission_pct,  hire_date, visualize the trend.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)"}, "hardness": "Extra Hard"}, {"nl_queries": "Show the ids and details of the investors who have at least two transactions with type code \"SALE\" by a bar chart.", "db_id": "tracking_share_transactions", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Investor_details , T1.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.transaction_type_code = \"SALE\"", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Investor_details , T1.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.transaction_type_code = \"SALE\""}, "hardness": "Medium"}, {"nl_queries": "Compare the number of participants in each participant type code using a bar chart, order from low to high by the X-axis please.", "db_id": "local_govt_in_alabama", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code ORDER BY Participant_Type_Code ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code ORDER BY Participant_Type_Code ASC"}, "hardness": "Medium"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, find hire_date and the average of department_id bin hire_date by weekday, and visualize them by a bar chart, could you show in ascending by the total number?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(DEPARTMENT_ID) ASC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(DEPARTMENT_ID) ASC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, find name and the amount of name , and group by attribute name, and visualize them by a bar chart, and rank by the y-axis from low to high.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY COUNT(T2.Name) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY COUNT(T2.Name) ASC"}, "hardness": "Hard"}, {"nl_queries": "A bar chart for listing the number of the names of patients who have made appointments, and order from low to high by the y axis.", "db_id": "hospital_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM appointment AS T1 JOIN patient AS T2 ON T1.patient = T2.ssn GROUP BY Name ORDER BY COUNT(Name) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM appointment AS T1 JOIN patient AS T2 ON T1.patient = T2.ssn GROUP BY Name ORDER BY COUNT(Name) ASC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who was hired before 2002-06-21, visualize a bar chart about the distribution of hire_date and the average of employee_id bin hire_date by weekday, list the average of employee id in descending order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(EMPLOYEE_ID) DESC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "For those employees who did not have any job in the past, return a scatter chart about the correlation between  manager_id and  department_id .", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT MANAGER_ID , DEPARTMENT_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)", "binning": ""}, "VQL": "Visualize SCATTER SELECT MANAGER_ID , DEPARTMENT_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)"}, "hardness": "Easy"}, {"nl_queries": "List the number of dogs departed in each day with a bar chart that groups by departed date.", "db_id": "dog_kennels", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_departed , COUNT(date_departed) FROM Dogs GROUP BY date_departed", "binning": ""}, "VQL": "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs GROUP BY date_departed"}, "hardness": "Easy"}, {"nl_queries": "Return a bar chart on what is the total revenue of each manufacturer?, rank by the Name in asc.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , sum(revenue) FROM manufacturers GROUP BY name ORDER BY Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name ORDER BY Name ASC"}, "hardness": "Medium"}, {"nl_queries": "How many students have each different allergy Show bar chart, and sort by the Y-axis in desc.", "db_id": "allergy_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "Show the location codes and the number of documents in each location. Show a pie chart.", "db_id": "cre_Doc_Tracking_DB", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Location_Code , count(*) FROM Document_locations GROUP BY location_code", "binning": ""}, "VQL": "Visualize PIE SELECT Location_Code , count(*) FROM Document_locations GROUP BY location_code"}, "hardness": "Easy"}, {"nl_queries": "For each record in schedule, show sum of price for each day in a bar chart, order in ascending by the sum price.", "db_id": "cinema", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Date , SUM(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Date ORDER BY SUM(Price) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Date , SUM(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Date ORDER BY SUM(Price) ASC"}, "hardness": "Hard"}, {"nl_queries": "Give the proportion of how many players are there for each hand type?", "db_id": "wta_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT hand , count(*) FROM players GROUP BY hand", "binning": ""}, "VQL": "Visualize PIE SELECT hand , count(*) FROM players GROUP BY hand"}, "hardness": "Easy"}, {"nl_queries": "A bar chart for listing the number of the description of all aircrafts.", "db_id": "aircraft", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description", "binning": ""}, "VQL": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description"}, "hardness": "Easy"}, {"nl_queries": "Visualize a pie chart with what are the number of rooms for each bed type?", "db_id": "inn_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT bedType , count(*) FROM Rooms GROUP BY bedType", "binning": ""}, "VQL": "Visualize PIE SELECT bedType , count(*) FROM Rooms GROUP BY bedType"}, "hardness": "Easy"}, {"nl_queries": "Show the name of track and the number of races in each track Visualize by bar chart, and rank from low to high by the bar.", "db_id": "race_track", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id ORDER BY T2.Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id ORDER BY T2.Name ASC"}, "hardness": "Hard"}, {"nl_queries": "Give me the comparison about the sum of Employee_ID over the Start_from bin start_from by weekday by a bar chart, and I want to sort from high to low by the Y.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Start_from , SUM(Employee_ID) FROM hiring  ORDER BY SUM(Employee_ID) DESC", "binning": "BIN Start_from BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Start_from , SUM(Employee_ID) FROM hiring  ORDER BY SUM(Employee_ID) DESC BIN Start_from BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "How many competitions are held in each city? Draw a pie chart.", "db_id": "farm", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Official_Name , COUNT(Official_Name) FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY Official_Name", "binning": ""}, "VQL": "Visualize PIE SELECT Official_Name , COUNT(Official_Name) FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY Official_Name"}, "hardness": "Medium"}, {"nl_queries": "Create a bar chart showing total number of stu hrs across dept code", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT DEPT_CODE , sum(stu_hrs) FROM student GROUP BY dept_code", "binning": ""}, "VQL": "Visualize BAR SELECT DEPT_CODE , sum(stu_hrs) FROM student GROUP BY dept_code"}, "hardness": "Easy"}, {"nl_queries": "Show order ids and the total quantity in each order by a scatter chart.", "db_id": "customers_and_invoices", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT order_id , sum(product_quantity) FROM Order_items GROUP BY order_id", "binning": ""}, "VQL": "Visualize SCATTER SELECT order_id , sum(product_quantity) FROM Order_items GROUP BY order_id"}, "hardness": "Easy"}, {"nl_queries": "What is the number of start date of each apartment booking for each year? Return a bar chart.", "db_id": "apartment_rentals", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id", "binning": "BIN booking_start_date BY YEAR"}, "VQL": "Visualize BAR SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id BIN booking_start_date BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "Visualize the name and their component amounts with a bar chart for all furnitures that have more than 10 components, show Y in asc order.", "db_id": "manufacturer", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , Num_of_Component FROM furniture WHERE Num_of_Component > 10 ORDER BY Num_of_Component ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , Num_of_Component FROM furniture WHERE Num_of_Component > 10 ORDER BY Num_of_Component ASC"}, "hardness": "Medium"}, {"nl_queries": "For the names and the players of clubs, count the names by names in a bar chart, and order in ascending by the x-axis.", "db_id": "sports_competition", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.name , COUNT(T1.name) FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID GROUP BY T1.name ORDER BY T1.name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.name , COUNT(T1.name) FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID GROUP BY T1.name ORDER BY T1.name ASC"}, "hardness": "Hard"}, {"nl_queries": "Show the number of documents in different starting date and bin starting date by weekday interval with a bar chart, and rank y axis in desc order please.", "db_id": "cre_Doc_Tracking_DB", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations  ORDER BY COUNT(Date_in_Location_From) DESC", "binning": "BIN Date_in_Location_From BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations  ORDER BY COUNT(Date_in_Location_From) DESC BIN Date_in_Location_From BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "Find All_Neutral and All_Games_Percent , and visualize them by a bar chart, display by the Y-axis in ascending.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC"}, "hardness": "Easy"}, {"nl_queries": "Give me a bar chart for mean points of each position, rank total number in descending order.", "db_id": "sports_competition", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Position , avg(Points) FROM player GROUP BY POSITION ORDER BY avg(Points) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Position , avg(Points) FROM player GROUP BY POSITION ORDER BY avg(Points) DESC"}, "hardness": "Medium"}, {"nl_queries": "Show the transaction types and the total amount of transactions, and order by the X-axis from low to high.", "db_id": "customers_and_invoices", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT transaction_type , sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type ORDER BY transaction_type ASC", "binning": ""}, "VQL": "Visualize BAR SELECT transaction_type , sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type ORDER BY transaction_type ASC"}, "hardness": "Medium"}, {"nl_queries": "What are the names and the accumulated prices of all products in the store Plot them as a bar chart, I want to show by the x-axis in ascending please.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , SUM(Price) FROM products GROUP BY Name ORDER BY Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , SUM(Price) FROM products GROUP BY Name ORDER BY Name ASC"}, "hardness": "Medium"}, {"nl_queries": "Find Is_full_time and the average of Employee_ID , and group by attribute Is_full_time, and visualize them by a bar chart, and I want to list by the Is_full_time in desc.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Is_full_time , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Is_full_time , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC"}, "hardness": "Medium"}, {"nl_queries": "For those payments processed with Visa, bin the payment day into the Day of week interval and count them for a bar chart, and sort total number in ascending order.", "db_id": "insurance_policies", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY COUNT(Date_Payment_Made) ASC", "binning": "BIN Date_Payment_Made BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY COUNT(Date_Payment_Made) ASC BIN Date_Payment_Made BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "Show id from each meter 500, order total number in ascending order.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_500 , ID FROM swimmer ORDER BY ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_500 , ID FROM swimmer ORDER BY ID ASC"}, "hardness": "Easy"}, {"nl_queries": "How many sections does each course has Visualize by bar chart, and rank y axis in descending order.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY count(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "Show name and distance for all aircrafts Visualize by bar chart, and display in desc by the names.", "db_id": "flight_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , distance FROM Aircraft ORDER BY name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT name , distance FROM Aircraft ORDER BY name DESC"}, "hardness": "Easy"}, {"nl_queries": "List all singer names in concerts in year 2014, and count them by a bar chart, could you display by the names from low to high?", "db_id": "concert_singer", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id JOIN concert AS T3 ON T1.concert_id = T3.concert_id WHERE T3.year = 2014 GROUP BY Name ORDER BY Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id JOIN concert AS T3 ON T1.concert_id = T3.concert_id WHERE T3.year = 2014 GROUP BY Name ORDER BY Name ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "Show the number of customers for each gender in a scatter chart", "db_id": "customers_and_invoices", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT gender , count(*) FROM Customers GROUP BY gender", "binning": ""}, "VQL": "Visualize SCATTER SELECT gender , count(*) FROM Customers GROUP BY gender"}, "hardness": "Easy"}, {"nl_queries": "Return a scatter chart about the correlation between  People_ID and  Height .", "db_id": "candidate_poll", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT People_ID , Height FROM people", "binning": ""}, "VQL": "Visualize SCATTER SELECT People_ID , Height FROM people"}, "hardness": "Easy"}, {"nl_queries": "Show the transaction types and the total amount of transactions with a bar chart, and sort from high to low by the X-axis.", "db_id": "customers_and_invoices", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT transaction_type , sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type ORDER BY transaction_type DESC", "binning": ""}, "VQL": "Visualize BAR SELECT transaction_type , sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type ORDER BY transaction_type DESC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who did not have any job in the past, return a bar chart about the distribution of job_id and the sum of manager_id , and group by attribute job_id, show in ascending by the y-axis please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) ASC"}, "hardness": "Hard"}, {"nl_queries": "A bar chart shows the distribution of Start_from and the average of Shop_ID bin start_from by weekday, and I want to order by the total number in descending.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Start_from , AVG(Shop_ID) FROM hiring  ORDER BY AVG(Shop_ID) DESC", "binning": "BIN Start_from BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Start_from , AVG(Shop_ID) FROM hiring  ORDER BY AVG(Shop_ID) DESC BIN Start_from BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "What are the dates of the orders made by the customer named \"Jeramie\", and count them by a bar chart", "db_id": "tracking_orders", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_order_placed , COUNT(date_order_placed) FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\"", "binning": "BIN date_order_placed BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_order_placed , COUNT(date_order_placed) FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\" BIN date_order_placed BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "For each title, use a bar chart to show the number of films, I want to rank in desc by the x-axis please.", "db_id": "film_rank", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Title , COUNT(Title) FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID GROUP BY Title ORDER BY Title DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Title , COUNT(Title) FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID GROUP BY Title ORDER BY Title DESC"}, "hardness": "Hard"}, {"nl_queries": "Visualize a bar chart about the distribution of Is_full_time and the sum of Employee_ID , and group by attribute Is_full_time, order Y in descending order.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Employee_ID) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Employee_ID) DESC"}, "hardness": "Medium"}, {"nl_queries": "Return a bar chart about the distribution of All_Games and ACC_Percent , and list y axis in ascending order.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Games , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Games , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC"}, "hardness": "Easy"}, {"nl_queries": "Give me the comparison about  author_id over the  password  by a bar chart.", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT password , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name", "binning": ""}, "VQL": "Visualize BAR SELECT password , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name"}, "hardness": "Easy"}, {"nl_queries": "For those employees who was hired before 2002-06-21, a line chart shows the change of employee_id over hire_date, and sort by the x-axis in asc.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC"}, "hardness": "Medium"}, {"nl_queries": "What is the maximum accelerate for different number of cylinders. Show scatter chart.", "db_id": "car_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT max(Accelerate) , Cylinders FROM CARS_DATA", "binning": ""}, "VQL": "Visualize SCATTER SELECT max(Accelerate) , Cylinders FROM CARS_DATA"}, "hardness": "Easy"}, {"nl_queries": "Give me a pie chart to reflect the proportion of  All_Home and the sum of School_ID.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home", "binning": ""}, "VQL": "Visualize PIE SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home"}, "hardness": "Easy"}, {"nl_queries": "How much does each charge type costs? List both charge type and amount, and I want to show X-axis in desc order.", "db_id": "dog_kennels", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT charge_type , charge_amount FROM Charges ORDER BY charge_type DESC", "binning": ""}, "VQL": "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_type DESC"}, "hardness": "Easy"}, {"nl_queries": "What are the district names and city populations for all districts that between 200,000 and 2,000,000 residents? Show a bar graph, and rank in desc by the X.", "db_id": "store_product", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT District_name , City_Population FROM district WHERE City_Population BETWEEN 200000 AND 2000000 ORDER BY District_name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT District_name , City_Population FROM district WHERE City_Population BETWEEN 200000 AND 2000000 ORDER BY District_name DESC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, a bar chart shows the distribution of first_name and department_id , and I want to list from low to high by the DEPARTMENT_ID.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT FIRST_NAME , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY DEPARTMENT_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT FIRST_NAME , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY DEPARTMENT_ID ASC"}, "hardness": "Medium"}, {"nl_queries": "Return a bar chart showing the number of documents for each document type description, I want to display x axis in desc order.", "db_id": "cre_Docs_and_Epenses", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description ORDER BY Document_Type_Description DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description ORDER BY Document_Type_Description DESC"}, "hardness": "Hard"}, {"nl_queries": "List the number of enrolment students in each month and bin date of enrolment by month interval with a bar chart, list y axis in desc order.", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Student_Course_Enrolment  ORDER BY COUNT(date_of_enrolment) DESC", "binning": "BIN date_of_enrolment BY MONTH"}, "VQL": "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Student_Course_Enrolment  ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY MONTH"}, "hardness": "Medium"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, draw a bar chart about the distribution of email and department_id , I want to list Y-axis from high to low order please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT EMAIL , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY DEPARTMENT_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT EMAIL , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY DEPARTMENT_ID DESC"}, "hardness": "Medium"}, {"nl_queries": "Plot salary by grouped by email as a bar graph, and show y-axis in descending order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT EMAIL , SALARY FROM employees ORDER BY SALARY DESC", "binning": ""}, "VQL": "Visualize BAR SELECT EMAIL , SALARY FROM employees ORDER BY SALARY DESC"}, "hardness": "Easy"}, {"nl_queries": "Show the number of names of high school students with a bar chart.", "db_id": "network_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , COUNT(name) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY name", "binning": ""}, "VQL": "Visualize BAR SELECT name , COUNT(name) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY name"}, "hardness": "Medium"}, {"nl_queries": "Show me a bar chart about the number of areas for all appellations, sort in desc by the total number.", "db_id": "wine_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Area , COUNT(Area) FROM APPELLATIONS GROUP BY Area ORDER BY COUNT(Area) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Area , COUNT(Area) FROM APPELLATIONS GROUP BY Area ORDER BY COUNT(Area) DESC"}, "hardness": "Medium"}, {"nl_queries": "How many accounts are opened in each day for all accounts by the customer with first name 'Meaghan' ? Bin the account open day by weekday in a bar chart, and order y-axis in descending order.", "db_id": "customers_and_invoices", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_account_opened , COUNT(date_account_opened) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = 'Meaghan'  ORDER BY COUNT(date_account_opened) DESC", "binning": "BIN date_account_opened BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_account_opened , COUNT(date_account_opened) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = 'Meaghan'  ORDER BY COUNT(date_account_opened) DESC BIN date_account_opened BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, a bar chart shows the distribution of job_id and the sum of salary , and group by attribute job_id, and order by the JOB_ID from low to high.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "Please visualize a bar chart, that the X-axis is the director and the Y-axis is thier corresponding lowest rating among all movies, and I want to list in ascending by the Y-axis.", "db_id": "movie_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT director , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director ORDER BY min(T1.stars) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT director , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director ORDER BY min(T1.stars) ASC"}, "hardness": "Medium"}, {"nl_queries": "Show all the activity names and the number of faculty involved in each activity in a bar chart, and I want to list bars in ascending order.", "db_id": "activity_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT activity_name , count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID ORDER BY activity_name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT activity_name , count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID ORDER BY activity_name ASC"}, "hardness": "Hard"}, {"nl_queries": "Visualize a bar chart for what is the average age for each dorm and what are the names of each dorm?, and could you show Y-axis from high to low order please?", "db_id": "dorm_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY avg(T1.age) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY avg(T1.age) DESC"}, "hardness": "Hard"}, {"nl_queries": "Find the name and level of catalog structure with level between 5 and 10, show by the total number from high to low.", "db_id": "product_catalog", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number DESC", "binning": ""}, "VQL": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number DESC"}, "hardness": "Medium"}, {"nl_queries": "What are the number of the names of all the Japanese constructors that have earned more than 5 points?", "db_id": "formula_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name", "binning": ""}, "VQL": "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name"}, "hardness": "Hard"}, {"nl_queries": "For those employees whose first name is ending with the letter m, show the frequency of the first name using a bar chart, and rank total number in ascending order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT FIRST_NAME , COUNT(FIRST_NAME) FROM employees WHERE first_name LIKE '%m' GROUP BY FIRST_NAME ORDER BY COUNT(FIRST_NAME) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT FIRST_NAME , COUNT(FIRST_NAME) FROM employees WHERE first_name LIKE '%m' GROUP BY FIRST_NAME ORDER BY COUNT(FIRST_NAME) ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "How many wines with a price higher than 100 of each year? Show a bar chart that converts year into weekday interval, and I want to show by the Y in ascending.", "db_id": "wine_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Year , COUNT(Year) FROM WINE WHERE Price > 100  ORDER BY COUNT(Year) ASC", "binning": "BIN Year BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Year , COUNT(Year) FROM WINE WHERE Price > 100  ORDER BY COUNT(Year) ASC BIN Year BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "The trend about the the number of season of different Home_team over the season", "db_id": "game_injury", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Season , COUNT(Season) FROM game GROUP BY Home_team", "binning": "BIN Season BY YEAR"}, "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Home_team BIN Season BY YEAR"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, find  headquarter and the average of code , and group by attribute headquarter, and visualize them by a bar chart.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter"}, "hardness": "Medium"}, {"nl_queries": "Give me a bar chart for how many name of each name, sort Y-axis in descending order.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY COUNT(Name) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY COUNT(Name) DESC"}, "hardness": "Medium"}, {"nl_queries": "List the number of the description of all aircrafts.", "db_id": "aircraft", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description", "binning": ""}, "VQL": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description"}, "hardness": "Easy"}, {"nl_queries": "Find the number of funiture types produced by each manufacturer as well as the company names Show bar chart, and show by the Y-axis in ascending.", "db_id": "manufacturer", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , count(*) FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id = t2.manufacturer_id GROUP BY t1.manufacturer_id ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , count(*) FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id = t2.manufacturer_id GROUP BY t1.manufacturer_id ORDER BY count(*) ASC"}, "hardness": "Hard"}, {"nl_queries": "What are the names of the technicians and how many machines are they assigned to repair, and could you order bar in ascending order?", "db_id": "machine_repair", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID = T2.technician_ID GROUP BY T2.Name ORDER BY Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID = T2.technician_ID GROUP BY T2.Name ORDER BY Name ASC"}, "hardness": "Hard"}, {"nl_queries": "Show me how many destination by destination in a histogram, display by the bars in ascending.", "db_id": "flight_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT destination , COUNT(destination) FROM Flight GROUP BY destination ORDER BY destination ASC", "binning": ""}, "VQL": "Visualize BAR SELECT destination , COUNT(destination) FROM Flight GROUP BY destination ORDER BY destination ASC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who was hired before 2002-06-21, give me the comparison about the sum of manager_id over the  hire_date bin hire_date by time by a bar chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21'", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH"}, "hardness": "Medium"}, {"nl_queries": "Return a bar chart on how many singers are from each country?, list by the y axis in ascending.", "db_id": "concert_singer", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about code over the name , and group by attribute headquarter by a bar chart, and list total number in ascending order.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter , T1.Name ORDER BY T1.Code ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter , T1.Name ORDER BY T1.Code ASC"}, "hardness": "Hard"}, {"nl_queries": "Scatter chart. what are the faculty id and the number of students each faculty has?", "db_id": "activity_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT FacID , count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.FacID", "binning": ""}, "VQL": "Visualize SCATTER SELECT FacID , count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.FacID"}, "hardness": "Medium"}, {"nl_queries": "Find meter_500 and meter_100 , and visualize them by a bar chart, sort y axis in desc order.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_500 , meter_100 FROM swimmer ORDER BY meter_100 DESC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_500 , meter_100 FROM swimmer ORDER BY meter_100 DESC"}, "hardness": "Easy"}, {"nl_queries": "what are the main indstries and total market value for each industry?", "db_id": "gas_company", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry", "binning": ""}, "VQL": "Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry"}, "hardness": "Easy"}, {"nl_queries": "Display a bar chart for what is the code of each location and the number of documents in that location?, rank in descending by the y-axis.", "db_id": "cre_Doc_Tracking_DB", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Location_Code , count(*) FROM Document_locations GROUP BY location_code ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Location_Code , count(*) FROM Document_locations GROUP BY location_code ORDER BY count(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "A bar chart shows the distribution of  Start_from and the average of Shop_ID bin start_from by weekday.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Start_from , AVG(Shop_ID) FROM hiring", "binning": "BIN Start_from BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Start_from , AVG(Shop_ID) FROM hiring BIN Start_from BY WEEKDAY"}, "hardness": "Easy"}, {"nl_queries": "For those employees who did not have any job in the past, find job_id and the average of salary , and group by attribute job_id, and visualize them by a bar chart, and I want to order by the Y in ascending.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY AVG(SALARY) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY AVG(SALARY) ASC"}, "hardness": "Hard"}, {"nl_queries": "Draw a bar chart about the distribution of  ACC_Road and  School_ID , and group by attribute All_Home.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Road , School_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Road , School_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road"}, "hardness": "Extra Hard"}, {"nl_queries": "Draw a bar chart for what are the hometowns of gymnasts and the corresponding number of gymnasts?, display by the x axis in descending.", "db_id": "gymnast", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Hometown , COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown ORDER BY Hometown DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Hometown , COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown ORDER BY Hometown DESC"}, "hardness": "Hard"}, {"nl_queries": "Bin all date of transactions into the YEAR interval, and sum the share count of each bin. What is the trend?", "db_id": "tracking_share_transactions", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date_of_transaction , SUM(share_count) FROM TRANSACTIONS", "binning": "BIN date_of_transaction BY YEAR"}, "VQL": "Visualize LINE SELECT date_of_transaction , SUM(share_count) FROM TRANSACTIONS BIN date_of_transaction BY YEAR"}, "hardness": "Easy"}, {"nl_queries": "For each film, show the price and group them by cinema name in a stacked bar chart, and sort Name in desc order.", "db_id": "cinema", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , Price FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title ,  Name ORDER BY Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , Price FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title ,  Name ORDER BY Name DESC"}, "hardness": "Hard"}, {"nl_queries": "Show the number of students who are living in a dorm with a TV Lounge and group by first name in a bar chart.", "db_id": "dorm_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Fname , COUNT(Fname) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid WHERE T2.dormid IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid = T4.amenid WHERE T4.amenity_name = 'TV Lounge') GROUP BY Fname", "binning": ""}, "VQL": "Visualize BAR SELECT Fname , COUNT(Fname) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid WHERE T2.dormid IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid = T4.amenid WHERE T4.amenity_name = 'TV Lounge') GROUP BY Fname"}, "hardness": "Hard"}, {"nl_queries": "Visualize a bar chart for what are the ids and trade names of the medicine that can interact with at least 3 enzymes?, display Trade_Name in ascending order.", "db_id": "medicine_enzyme_interaction", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Trade_Name , id FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id ORDER BY Trade_Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Trade_Name , id FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id ORDER BY Trade_Name ASC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, return a bar chart about the distribution of  name and the sum of code , and group by attribute name.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name"}, "hardness": "Medium"}, {"nl_queries": "For those employees who was hired before 2002-06-21, give me the comparison about the average of department_id over the  job_id , and group by attribute job_id.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID"}, "hardness": "Medium"}, {"nl_queries": "Return a pie on how many patients do each physician take care of? List their names and number of patients they take care of.", "db_id": "hospital_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid", "binning": ""}, "VQL": "Visualize PIE SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, show me about the distribution of name and the average of revenue , and group by attribute name in a bar chart, and rank total number in asc order.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T2.Revenue ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T2.Revenue ASC"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, a bar chart shows the distribution of name and code , and group by attribute headquarter, and show in descending by the total number please.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter , T1.Name ORDER BY T1.Code DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter , T1.Name ORDER BY T1.Code DESC"}, "hardness": "Hard"}, {"nl_queries": "I want to visualize the trend about the total appears times of transcript date in the Year interval, sort in ascending by the transcript_date.", "db_id": "student_transcripts_tracking", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT transcript_date , COUNT(transcript_date) FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id  ORDER BY transcript_date ASC", "binning": "BIN transcript_date BY YEAR"}, "VQL": "Visualize LINE SELECT transcript_date , COUNT(transcript_date) FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id  ORDER BY transcript_date ASC BIN transcript_date BY YEAR"}, "hardness": "Hard"}, {"nl_queries": "Visualize a bar chart about the distribution of All_Neutral and ACC_Percent , rank y-axis in ascending order.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC"}, "hardness": "Easy"}, {"nl_queries": "What are the names of the different bank branches, and what are their total loan amounts. Show bar chart.", "db_id": "loan_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT bname , sum(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname", "binning": ""}, "VQL": "Visualize BAR SELECT bname , sum(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname"}, "hardness": "Medium"}, {"nl_queries": "Find the name and capacity of products with price greater than 700 (in USD) Show bar chart, and I want to show in desc by the y axis.", "db_id": "product_catalog", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity DESC", "binning": ""}, "VQL": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity DESC"}, "hardness": "Medium"}, {"nl_queries": "A bar chart about what are the memories and carriers of phones?, and order by the Y-axis in descending.", "db_id": "phone_market", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Carrier , SUM(Memory_in_G) FROM phone GROUP BY Carrier ORDER BY SUM(Memory_in_G) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Carrier , SUM(Memory_in_G) FROM phone GROUP BY Carrier ORDER BY SUM(Memory_in_G) DESC"}, "hardness": "Medium"}, {"nl_queries": "Plot the number of county by grouped by county as a bar graph, display in descending by the x axis.", "db_id": "wine_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT County , COUNT(County) FROM APPELLATIONS GROUP BY County ORDER BY County DESC", "binning": ""}, "VQL": "Visualize BAR SELECT County , COUNT(County) FROM APPELLATIONS GROUP BY County ORDER BY County DESC"}, "hardness": "Medium"}, {"nl_queries": "Show count(*) vs total number of enrollment as scatter plot use a different color for each County", "db_id": "school_finance", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT count(*) , sum(enrollment) FROM school GROUP BY County", "binning": ""}, "VQL": "Visualize SCATTER SELECT count(*) , sum(enrollment) FROM school GROUP BY County"}, "hardness": "Medium"}, {"nl_queries": "What are the names of the singers who performed in a concert in 2014, and count them by a bar chart", "db_id": "concert_singer", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id JOIN concert AS T3 ON T1.concert_id = T3.concert_id WHERE T3.year = 2014 GROUP BY Name", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id JOIN concert AS T3 ON T1.concert_id = T3.concert_id WHERE T3.year = 2014 GROUP BY Name"}, "hardness": "Hard"}, {"nl_queries": "Find the number of the name of rooms booked by some customers whose first name contains ROY, and sort in ascending by the bar.", "db_id": "inn_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT roomName , COUNT(roomName) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId WHERE firstname LIKE '%ROY%' GROUP BY roomName ORDER BY roomName ASC", "binning": ""}, "VQL": "Visualize BAR SELECT roomName , COUNT(roomName) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId WHERE firstname LIKE '%ROY%' GROUP BY roomName ORDER BY roomName ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "Ignore movies whose director is NULL For each director, what are the titles and the highest rating among all of their movies they reviewed? Draw the result by a bar chart, order names in desc order please.", "db_id": "movie_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT title , max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" GROUP BY title ORDER BY title DESC", "binning": ""}, "VQL": "Visualize BAR SELECT title , max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" GROUP BY title ORDER BY title DESC"}, "hardness": "Hard"}, {"nl_queries": "Give me the comparison about the average of Employee_ID over the Is_full_time , and group by attribute Is_full_time by a bar chart, I want to order in asc by the mean employee id.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Is_full_time , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY AVG(Employee_ID) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Is_full_time , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY AVG(Employee_ID) ASC"}, "hardness": "Medium"}, {"nl_queries": "Find the names of stadiums that some Australian swimmers have been to, and count them by a bar chart, I want to show by the y-axis from high to low.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T4.name , COUNT(T4.name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id JOIN event AS t3 ON t2.event_id = t3.id JOIN stadium AS t4 ON t4.id = t3.stadium_id WHERE t1.nationality = 'Australia' GROUP BY T4.name ORDER BY COUNT(T4.name) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T4.name , COUNT(T4.name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id JOIN event AS t3 ON t2.event_id = t3.id JOIN stadium AS t4 ON t4.id = t3.stadium_id WHERE t1.nationality = 'Australia' GROUP BY T4.name ORDER BY COUNT(T4.name) DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "Show names of technicians and the number of machines they are assigned to repair. ", "db_id": "machine_repair", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Name , COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID = T2.technician_ID GROUP BY T2.Name", "binning": ""}, "VQL": "Visualize PIE SELECT Name , COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID = T2.technician_ID GROUP BY T2.Name"}, "hardness": "Medium"}, {"nl_queries": "Show id from each meter 500, and could you sort x axis in descending order?", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_500 , ID FROM swimmer ORDER BY meter_500 DESC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_500 , ID FROM swimmer ORDER BY meter_500 DESC"}, "hardness": "Easy"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, return a scatter chart about the correlation between  employee_id and  salary .", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT EMPLOYEE_ID , SALARY FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40", "binning": ""}, "VQL": "Visualize SCATTER SELECT EMPLOYEE_ID , SALARY FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40"}, "hardness": "Medium"}, {"nl_queries": "What are the district names and city populations for all districts that between 200,000 and 2,000,000 residents? Show a bar graph, I want to rank in asc by the y axis please.", "db_id": "store_product", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT District_name , City_Population FROM district WHERE City_Population BETWEEN 200000 AND 2000000 ORDER BY City_Population ASC", "binning": ""}, "VQL": "Visualize BAR SELECT District_name , City_Population FROM district WHERE City_Population BETWEEN 200000 AND 2000000 ORDER BY City_Population ASC"}, "hardness": "Medium"}, {"nl_queries": "How many assets can each parts be used in? List the part name and the number, could you list in ascending by the x-axis?", "db_id": "assets_maintenance", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT part_name , count(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_name ORDER BY part_name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT part_name , count(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_name ORDER BY part_name ASC"}, "hardness": "Hard"}, {"nl_queries": "Show me a bar chart for what are the apartment number and the room count of each apartment?, list x-axis from high to low order.", "db_id": "apartment_rentals", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT apt_number , room_count FROM Apartments ORDER BY apt_number DESC", "binning": ""}, "VQL": "Visualize BAR SELECT apt_number , room_count FROM Apartments ORDER BY apt_number DESC"}, "hardness": "Easy"}, {"nl_queries": "List the distinct payment method codes with the number of orders mad Show bar chart, and could you order in asc by the y-axis please?", "db_id": "cre_Drama_Workshop_Groups", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about revenue over the name , and group by attribute founder by a bar chart, show from low to high by the x-axis please.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder , T1.Name ORDER BY T1.Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder , T1.Name ORDER BY T1.Name ASC"}, "hardness": "Hard"}, {"nl_queries": "What is the relationship between  Credits and  DNO ?", "db_id": "college_3", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Credits , DNO FROM COURSE ORDER BY Credits", "binning": ""}, "VQL": "Visualize SCATTER SELECT Credits , DNO FROM COURSE ORDER BY Credits"}, "hardness": "Easy"}, {"nl_queries": "How many courses with more than one prerequisite for each title? Return a bar chart, show by the bar in desc.", "db_id": "college_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT title , COUNT(title) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title ORDER BY title DESC", "binning": ""}, "VQL": "Visualize BAR SELECT title , COUNT(title) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title ORDER BY title DESC"}, "hardness": "Hard"}, {"nl_queries": "Return a bar chart on what is the average base price of different bed type? List bed type and average base price, order X from low to high order.", "db_id": "inn_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT bedType , avg(basePrice) FROM Rooms GROUP BY bedType ORDER BY bedType ASC", "binning": ""}, "VQL": "Visualize BAR SELECT bedType , avg(basePrice) FROM Rooms GROUP BY bedType ORDER BY bedType ASC"}, "hardness": "Medium"}, {"nl_queries": "Visualize a bar chart for how films are produced by each studio?", "db_id": "film_rank", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Studio , COUNT(*) FROM film GROUP BY Studio", "binning": ""}, "VQL": "Visualize BAR SELECT Studio , COUNT(*) FROM film GROUP BY Studio"}, "hardness": "Easy"}, {"nl_queries": "A bar chart for finding the number of the dates of the tests taken with result \"Pass\", show X-axis in desc order.", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY date_test_taken DESC", "binning": ""}, "VQL": "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY date_test_taken DESC"}, "hardness": "Hard"}, {"nl_queries": "Find the number of students who are not in the largest major and group by students' first name in a bar chart, could you rank from high to low by the X-axis please?", "db_id": "dorm_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Fname , COUNT(Fname) FROM student WHERE major != (SELECT major FROM student) GROUP BY Fname ORDER BY Fname DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Fname , COUNT(Fname) FROM student WHERE major != (SELECT major FROM student) GROUP BY Fname ORDER BY Fname DESC"}, "hardness": "Hard"}, {"nl_queries": "Find the number of medications prescribed for each brand. Plot them as bar chart.", "db_id": "hospital_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , count(*) FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand", "binning": ""}, "VQL": "Visualize BAR SELECT Name , count(*) FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand"}, "hardness": "Medium"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, draw a bar chart about the distribution of first_name and department_id , and show in descending by the DEPARTMENT_ID.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT FIRST_NAME , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY DEPARTMENT_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT FIRST_NAME , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY DEPARTMENT_ID DESC"}, "hardness": "Medium"}, {"nl_queries": "What are the number of the phone numbers for each employee?, display in descending by the bars.", "db_id": "chinook_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY Phone DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY Phone DESC"}, "hardness": "Medium"}, {"nl_queries": "Show the location codes and the number of documents in each location Visualize by bar chart, and list by the x-axis in asc.", "db_id": "cre_Doc_Tracking_DB", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Location_Code , count(*) FROM Document_locations GROUP BY location_code ORDER BY Location_Code ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Location_Code , count(*) FROM Document_locations GROUP BY location_code ORDER BY Location_Code ASC"}, "hardness": "Medium"}, {"nl_queries": "Draw a pie chart about the proportion of  Is_full_time and the sum of Employee_ID.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time", "binning": ""}, "VQL": "Visualize PIE SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time"}, "hardness": "Easy"}, {"nl_queries": "Show different types of ships and the number of ships of each type with a pie chart.", "db_id": "ship_mission", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Type , COUNT(*) FROM ship GROUP BY TYPE", "binning": ""}, "VQL": "Visualize PIE SELECT Type , COUNT(*) FROM ship GROUP BY TYPE"}, "hardness": "Easy"}, {"nl_queries": "What are the phone numbers for each employee, and count them by a bar chart", "db_id": "chinook_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone", "binning": ""}, "VQL": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone"}, "hardness": "Easy"}, {"nl_queries": "Visualize a scatter chart about the correlation between  Team_ID and  ACC_Percent , and group by attribute All_Games.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Team_ID , ACC_Percent FROM basketball_match GROUP BY All_Games", "binning": ""}, "VQL": "Visualize SCATTER SELECT Team_ID , ACC_Percent FROM basketball_match GROUP BY All_Games"}, "hardness": "Easy"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, draw a bar chart about the distribution of phone_number and department_id , order y-axis from low to high order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT PHONE_NUMBER , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY DEPARTMENT_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT PHONE_NUMBER , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY DEPARTMENT_ID ASC"}, "hardness": "Medium"}, {"nl_queries": "Show the number of apartment bookings in each weekday and bin booking end date by weekday with a bar chart, sort from low to high by the total number.", "db_id": "apartment_rentals", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT booking_end_date , COUNT(booking_end_date) FROM Apartment_Bookings  ORDER BY COUNT(booking_end_date) ASC", "binning": "BIN booking_end_date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT booking_end_date , COUNT(booking_end_date) FROM Apartment_Bookings  ORDER BY COUNT(booking_end_date) ASC BIN booking_end_date BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "For those dates that have the 5 highest cloud cover rates, please bin the date into weekdays interval and compute their total cloud cover.", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date , SUM(cloud_cover) FROM weather", "binning": "BIN date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather BIN date BY WEEKDAY"}, "hardness": "Easy"}, {"nl_queries": "Ignore movies whose director is NULL For each director, what are the titles and ratings for all the movies they reviewed? Show the result by a bar chart, order y-axis in asc order please.", "db_id": "movie_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT title , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" ORDER BY stars ASC", "binning": ""}, "VQL": "Visualize BAR SELECT title , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" ORDER BY stars ASC"}, "hardness": "Hard"}, {"nl_queries": "What are the average price and score of wines for each appellation? Show me a scatter plot.", "db_id": "wine_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT avg(Price) , avg(Score) FROM WINE GROUP BY avg(Price)", "binning": ""}, "VQL": "Visualize SCATTER SELECT avg(Price) , avg(Score) FROM WINE GROUP BY avg(Price)"}, "hardness": "Medium"}, {"nl_queries": "Visualize a scatter chart about the correlation between  People_ID and  Clean_Jerk .", "db_id": "body_builder", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT People_ID , Clean_Jerk FROM body_builder", "binning": ""}, "VQL": "Visualize SCATTER SELECT People_ID , Clean_Jerk FROM body_builder"}, "hardness": "Easy"}, {"nl_queries": "Display a bar chart for what are the names and id of courses having at most 2 sections?, and rank x axis in ascending order.", "db_id": "student_transcripts_tracking", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.course_name , T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id ORDER BY T1.course_name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.course_name , T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id ORDER BY T1.course_name ASC"}, "hardness": "Medium"}, {"nl_queries": "How many students taking a course who received an A or C? Group by students' last name with a bar chart.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT STU_LNAME , COUNT(STU_LNAME) FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A' GROUP BY STU_LNAME", "binning": ""}, "VQL": "Visualize BAR SELECT STU_LNAME , COUNT(STU_LNAME) FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A' GROUP BY STU_LNAME"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, show me about the distribution of phone_number and department_id in a bar chart, display from low to high by the total number.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT PHONE_NUMBER , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY DEPARTMENT_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT PHONE_NUMBER , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY DEPARTMENT_ID ASC"}, "hardness": "Medium"}, {"nl_queries": "List the distinct payment method codes with the number of orders mad. Plot them as pie chart.", "db_id": "cre_Drama_Workshop_Groups", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code", "binning": ""}, "VQL": "Visualize PIE SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code"}, "hardness": "Easy"}, {"nl_queries": "Bar graph to show mean product price from different product type code, and show bar in descending order.", "db_id": "department_store", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT product_type_code , avg(product_price) FROM products GROUP BY product_type_code ORDER BY product_type_code DESC", "binning": ""}, "VQL": "Visualize BAR SELECT product_type_code , avg(product_price) FROM products GROUP BY product_type_code ORDER BY product_type_code DESC"}, "hardness": "Medium"}, {"nl_queries": "Return a scatter chart about the correlation between  Team_ID and  All_Games_Percent .", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Team_ID , All_Games_Percent FROM basketball_match", "binning": ""}, "VQL": "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match"}, "hardness": "Easy"}, {"nl_queries": "Who were the governors of the parties associated with delegates from district 1, and count them by a pie chart", "db_id": "election", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Governor , COUNT(Governor) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.District = 1 GROUP BY Governor", "binning": ""}, "VQL": "Visualize PIE SELECT Governor , COUNT(Governor) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.District = 1 GROUP BY Governor"}, "hardness": "Hard"}, {"nl_queries": "A bar chart about how many students are older than average for each gender?, I want to show from high to low by the total number please.", "db_id": "dorm_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Sex , count(*) FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY Sex ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Sex , count(*) FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY Sex ORDER BY count(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "Bar chart of mean salary from each dept name, and could you order by the Y-axis from high to low?", "db_id": "college_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY AVG(salary) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY AVG(salary) DESC"}, "hardness": "Medium"}, {"nl_queries": "What is the number of booking start dates of the apartments with more than 2 bedrooms for each year? Return a bar chart, and order Y in ascending order.", "db_id": "apartment_rentals", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.bedroom_count > 2  ORDER BY COUNT(booking_start_date) ASC", "binning": "BIN booking_start_date BY YEAR"}, "VQL": "Visualize BAR SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.bedroom_count > 2  ORDER BY COUNT(booking_start_date) ASC BIN booking_start_date BY YEAR"}, "hardness": "Extra Hard"}, {"nl_queries": "Show me the comparison of the total number of every ship type with a bar graph, and sort by the Y in asc.", "db_id": "ship_mission", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY COUNT(Type) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY COUNT(Type) ASC"}, "hardness": "Medium"}, {"nl_queries": "Show the relationship between service type code and number of services and group by service type description with a group scatter chart.", "db_id": "cre_Drama_Workshop_Groups", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Service_Type_Code , COUNT(*) FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code GROUP BY Service_Type_Description", "binning": ""}, "VQL": "Visualize SCATTER SELECT Service_Type_Code , COUNT(*) FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code GROUP BY Service_Type_Description"}, "hardness": "Medium"}, {"nl_queries": "What is the average high temperature for each day of week Plot them as bar chart, rank Y-axis in desc order.", "db_id": "station_weather", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT day_of_week , avg(high_temperature) FROM weekly_weather GROUP BY day_of_week ORDER BY avg(high_temperature) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT day_of_week , avg(high_temperature) FROM weekly_weather GROUP BY day_of_week ORDER BY avg(high_temperature) DESC"}, "hardness": "Medium"}, {"nl_queries": "Please use a bar chart to show the total amount of payment by each payment method code, rank total number in ascending order.", "db_id": "insurance_policies", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY SUM(Amount_Payment) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Payment_Method_Code , SUM(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY SUM(Amount_Payment) ASC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about revenue over the name , and group by attribute name, rank from low to high by the y-axis.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T2.Revenue ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T2.Revenue ASC"}, "hardness": "Hard"}, {"nl_queries": "Visualize a bar chart about the distribution of ACC_Regular_Season and School_ID , sort bar in descending order.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Regular_Season , School_ID FROM basketball_match ORDER BY ACC_Regular_Season DESC", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Regular_Season , School_ID FROM basketball_match ORDER BY ACC_Regular_Season DESC"}, "hardness": "Easy"}, {"nl_queries": "For all employees who have the letters D or S in their first name, find job_id and the average of manager_id , and group by attribute job_id, and visualize them by a bar chart, could you order by the bar in desc please?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "A bar chart for finding the number of the name of rooms booked by some customers whose first name contains ROY, and list by the X-axis in ascending please.", "db_id": "inn_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT roomName , COUNT(roomName) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId WHERE firstname LIKE '%ROY%' GROUP BY roomName ORDER BY roomName ASC", "binning": ""}, "VQL": "Visualize BAR SELECT roomName , COUNT(roomName) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId WHERE firstname LIKE '%ROY%' GROUP BY roomName ORDER BY roomName ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "Show total number of id from each meter 200", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_200 , SUM(ID) FROM swimmer GROUP BY meter_200", "binning": ""}, "VQL": "Visualize BAR SELECT meter_200 , SUM(ID) FROM swimmer GROUP BY meter_200"}, "hardness": "Easy"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, give me the comparison about salary over the phone_number by a bar chart, I want to sort x-axis in ascending order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT PHONE_NUMBER , SALARY FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY PHONE_NUMBER ASC", "binning": ""}, "VQL": "Visualize BAR SELECT PHONE_NUMBER , SALARY FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY PHONE_NUMBER ASC"}, "hardness": "Medium"}, {"nl_queries": "Visualize a bar chart for what are the names of different tracks, and how many races has each had?, and could you list in asc by the Y-axis?", "db_id": "race_track", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id ORDER BY count(*) ASC"}, "hardness": "Hard"}, {"nl_queries": "Give me a bar chart showing the comparison of the pixel aspect ratio and the nation of the tv channels that do not use English, could you sort by the X-axis in ascending please?", "db_id": "tvshow", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY Pixel_aspect_ratio_PAR ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY Pixel_aspect_ratio_PAR ASC"}, "hardness": "Hard"}, {"nl_queries": "A bar chart for what are the number of the countries of all airlines whose names start with Orbit?, could you sort by the y-axis in desc?", "db_id": "flight_4", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT country , COUNT(country) FROM airlines WHERE name LIKE 'Orbit%' GROUP BY country ORDER BY COUNT(country) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT country , COUNT(country) FROM airlines WHERE name LIKE 'Orbit%' GROUP BY country ORDER BY COUNT(country) DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "For all employees who have the letters D or S in their first name, show me about the distribution of  job_id and the sum of salary , and group by attribute job_id in a bar chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID"}, "hardness": "Extra Hard"}, {"nl_queries": "For all employees who have the letters D or S in their first name, draw a bar chart about the distribution of  hire_date and the sum of employee_id bin hire_date by time.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH"}, "hardness": "Extra Hard"}, {"nl_queries": "Plot mean age by grouped by sex as a bar graph", "db_id": "dorm_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Sex , avg(age) FROM student GROUP BY sex", "binning": ""}, "VQL": "Visualize BAR SELECT Sex , avg(age) FROM student GROUP BY sex"}, "hardness": "Easy"}, {"nl_queries": "For those employees who was hired before 2002-06-21, a bar chart shows the distribution of  hire_date and the sum of salary bin hire_date by time.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21'", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH"}, "hardness": "Medium"}, {"nl_queries": "List document type codes and the number of documents in each code Visualize by bar chart, sort from low to high by the Y.", "db_id": "cre_Docs_and_Epenses", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Document_Type_Code , count(*) FROM Documents GROUP BY document_type_code ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Document_Type_Code , count(*) FROM Documents GROUP BY document_type_code ORDER BY count(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "What are the names and ids of all makers with more than 3 models. ", "db_id": "car_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT FullName , Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker", "binning": ""}, "VQL": "Visualize BAR SELECT FullName , Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker"}, "hardness": "Easy"}, {"nl_queries": "A bar chart shows the distribution of Sex and the sum of Height , and group by attribute Sex, and list from high to low by the X-axis.", "db_id": "candidate_poll", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Sex , SUM(Height) FROM people GROUP BY Sex ORDER BY Sex DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Sex , SUM(Height) FROM people GROUP BY Sex ORDER BY Sex DESC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who did not have any job in the past, find hire_date and the average of employee_id bin hire_date by time, and visualize them by a bar chart, display y axis in asc order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(EMPLOYEE_ID) ASC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "Return a histogram on what are the nationalities and the total ages of journalists?", "db_id": "news_report", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality", "binning": ""}, "VQL": "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality"}, "hardness": "Easy"}, {"nl_queries": "For those employees who was hired before 2002-06-21, a bar chart shows the distribution of hire_date and the average of department_id bin hire_date by weekday, list by the Y in ascending please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(DEPARTMENT_ID) ASC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(DEPARTMENT_ID) ASC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "For those employees who did not have any job in the past, give me the comparison about the sum of manager_id over the  hire_date bin hire_date by time by a bar chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH"}, "hardness": "Medium"}, {"nl_queries": "What are the actual delivery dates of orders with quantity 1, and count them by a line chart", "db_id": "cre_Drama_Workshop_Groups", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID = T2.Order_ID WHERE T2.Order_Quantity = 1 GROUP BY Actual_Delivery_Date", "binning": ""}, "VQL": "Visualize LINE SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID = T2.Order_ID WHERE T2.Order_Quantity = 1 GROUP BY Actual_Delivery_Date"}, "hardness": "Hard"}, {"nl_queries": "A bar chart for what are the number of the paragraph texts for the document with the name 'Customer reviews'?", "db_id": "cre_Doc_Template_Mgt", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Paragraph_Text , COUNT(Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = \"Customer reviews\" GROUP BY Paragraph_Text", "binning": ""}, "VQL": "Visualize BAR SELECT Paragraph_Text , COUNT(Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = \"Customer reviews\" GROUP BY Paragraph_Text"}, "hardness": "Hard"}, {"nl_queries": "Find ACC_Regular_Season and School_ID , and visualize them by a bar chart, sort in descending by the bars.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Regular_Season , School_ID FROM basketball_match ORDER BY ACC_Regular_Season DESC", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Regular_Season , School_ID FROM basketball_match ORDER BY ACC_Regular_Season DESC"}, "hardness": "Easy"}, {"nl_queries": "How many flights with price higher than 300 for each destination city? Return a bar chart.", "db_id": "flight_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT destination , COUNT(destination) FROM Flight WHERE price > 300 GROUP BY destination", "binning": ""}, "VQL": "Visualize BAR SELECT destination , COUNT(destination) FROM Flight WHERE price > 300 GROUP BY destination"}, "hardness": "Medium"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, show me about the distribution of hire_date and the amount of hire_date bin hire_date by time in a bar chart, show in desc by the Y please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY COUNT(HIRE_DATE) DESC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "A bar chart for finding the number of the names of stadiums that some Australian swimmers have been to, list from high to low by the names.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T4.name , COUNT(T4.name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id JOIN event AS t3 ON t2.event_id = t3.id JOIN stadium AS t4 ON t4.id = t3.stadium_id WHERE t1.nationality = 'Australia' GROUP BY T4.name ORDER BY T4.name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T4.name , COUNT(T4.name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id JOIN event AS t3 ON t2.event_id = t3.id JOIN stadium AS t4 ON t4.id = t3.stadium_id WHERE t1.nationality = 'Australia' GROUP BY T4.name ORDER BY T4.name DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "Retrieve the close dates of all the policies associated with the customer whose name contains \"Diana\", bin the close dates into the day of week interval and count them for a bar chart.", "db_id": "insurance_fnol", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Date_Closed , COUNT(Date_Closed) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\"", "binning": "BIN Date_Closed BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Date_Closed , COUNT(Date_Closed) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\" BIN Date_Closed BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, visualize a scatter chart about the correlation between  manufacturer and  revenue , and group by attribute headquarter.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Manufacturer , Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter", "binning": ""}, "VQL": "Visualize SCATTER SELECT Manufacturer , Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, visualize a bar chart about the distribution of headquarter and the sum of revenue , and group by attribute headquarter, and display X from high to low order.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Headquarter , SUM(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Headquarter , SUM(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter DESC"}, "hardness": "Hard"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, draw a scatter chart about the correlation between  employee_id and  salary .", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT EMPLOYEE_ID , SALARY FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40", "binning": ""}, "VQL": "Visualize SCATTER SELECT EMPLOYEE_ID , SALARY FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40"}, "hardness": "Medium"}, {"nl_queries": "For all employees who have the letters D or S in their first name, give me the comparison about the sum of manager_id over the hire_date bin hire_date by time by a bar chart, and show in ascending by the y-axis please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(MANAGER_ID) ASC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH"}, "hardness": "Extra Hard"}, {"nl_queries": "How many films for each type? Return a bar chart, and I want to rank in descending by the the number of type please.", "db_id": "film_rank", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Type , COUNT(Type) FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID GROUP BY Type ORDER BY COUNT(Type) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Type , COUNT(Type) FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID GROUP BY Type ORDER BY COUNT(Type) DESC"}, "hardness": "Hard"}, {"nl_queries": "Plot the total number by grouped by how to get there as a bar graph, and show from low to high by the total number.", "db_id": "cre_Theme_park", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT How_to_Get_There , COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT How_to_Get_There , COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "Give me a bar chart for the number of year of each year", "db_id": "wine_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Year , COUNT(Year) FROM WINE", "binning": "BIN Year BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Year , COUNT(Year) FROM WINE BIN Year BY WEEKDAY"}, "hardness": "Easy"}, {"nl_queries": "Create a bar chart showing the total number across builder, I want to list x-axis in desc order.", "db_id": "railway", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Builder , COUNT(*) FROM railway GROUP BY Builder ORDER BY Builder DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Builder , COUNT(*) FROM railway GROUP BY Builder ORDER BY Builder DESC"}, "hardness": "Medium"}, {"nl_queries": "Bar chart x axis nationality y axis the total number, could you list in ascending by the y axis?", "db_id": "party_host", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "Show the card type codes and the number of transactions with a bar chart, and show in ascending by the card_type_code please.", "db_id": "customers_card_transactions", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT card_type_code , count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id = T2.card_id GROUP BY T2.card_type_code ORDER BY card_type_code ASC", "binning": ""}, "VQL": "Visualize BAR SELECT card_type_code , count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id = T2.card_id GROUP BY T2.card_type_code ORDER BY card_type_code ASC"}, "hardness": "Hard"}, {"nl_queries": "Show the name of track and the number of races in each track by a bar chart, and list Y in descending order.", "db_id": "race_track", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC"}, "hardness": "Hard"}, {"nl_queries": "Show school id vs all_games_percent as scatter plot use a different color for each ACC_Regular_Season", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Regular_Season", "binning": ""}, "VQL": "Visualize SCATTER SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Regular_Season"}, "hardness": "Easy"}, {"nl_queries": "Find the number of courses offered by Psychology department in each year with a line chart, show in desc by the x-axis.", "db_id": "college_2", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT year , COUNT(year) FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' GROUP BY year ORDER BY year DESC", "binning": ""}, "VQL": "Visualize LINE SELECT year , COUNT(year) FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' GROUP BY year ORDER BY year DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees who did not have any job in the past, return a bar chart about the distribution of job_id and the sum of salary , and group by attribute job_id, and sort by the Y from high to low.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY SUM(SALARY) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY SUM(SALARY) DESC"}, "hardness": "Hard"}, {"nl_queries": "What is the booking start dates of the apartments with type code \"Duplex\"? Bin the year into weekday interval with a bar chart.", "db_id": "apartment_rentals", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.apt_type_code = \"Duplex\"", "binning": "BIN booking_start_date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.apt_type_code = \"Duplex\" BIN booking_start_date BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "For those employees who was hired before 2002-06-21, a bar chart shows the distribution of  hire_date and the average of manager_id bin hire_date by time.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21'", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH"}, "hardness": "Medium"}, {"nl_queries": "Show the names of countries and the average speed of roller coasters from each country with a bar chart, sort in asc by the bars.", "db_id": "roller_coaster", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , avg(T2.Speed) FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID GROUP BY T1.Name ORDER BY T1.Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , avg(T2.Speed) FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID GROUP BY T1.Name ORDER BY T1.Name ASC"}, "hardness": "Hard"}, {"nl_queries": "Show the number of the musical nominee with award \"Bob Fosse\" or \"Cleavant Derricks\".", "db_id": "musical", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee", "binning": ""}, "VQL": "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee"}, "hardness": "Hard"}, {"nl_queries": "Bar chart x axis name y axis total number of grade", "db_id": "network_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , SUM(grade) FROM Highschooler GROUP BY name", "binning": ""}, "VQL": "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name"}, "hardness": "Easy"}, {"nl_queries": "For all employees who have the letters D or S in their first name, return a bar chart about the distribution of job_id and the sum of employee_id , and group by attribute job_id, and sort y axis in ascending order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "For all employees who have the letters D or S in their first name, find job_id and the average of employee_id , and group by attribute job_id, and visualize them by a bar chart, sort total number from high to low order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "Give me the comparison about the average of Shop_ID over the  Start_from bin start_from by weekday by a bar chart.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Start_from , AVG(Shop_ID) FROM hiring", "binning": "BIN Start_from BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Start_from , AVG(Shop_ID) FROM hiring BIN Start_from BY WEEKDAY"}, "hardness": "Easy"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, return a bar chart about the distribution of  first_name and  commission_pct .", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)", "binning": ""}, "VQL": "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)"}, "hardness": "Extra Hard"}, {"nl_queries": "Find the the customer details and id for the customers who had more than one policy, list total number in desc order.", "db_id": "insurance_policies", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Customer_Details , T1.Customer_ID FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.Customer_id ORDER BY T1.Customer_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Customer_Details , T1.Customer_ID FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.Customer_id ORDER BY T1.Customer_ID DESC"}, "hardness": "Medium"}, {"nl_queries": "Show sum enrollment from each county, and sort by the x axis in ascending.", "db_id": "school_finance", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT County , sum(enrollment) FROM school GROUP BY county ORDER BY County ASC", "binning": ""}, "VQL": "Visualize BAR SELECT County , sum(enrollment) FROM school GROUP BY county ORDER BY County ASC"}, "hardness": "Medium"}, {"nl_queries": "Visualize a bar chart that X-axis is the gender and compute the number of players in each gender as a Y-axis, show total number in descending order.", "db_id": "riding_club", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Gender , COUNT(Gender) FROM player GROUP BY Gender ORDER BY COUNT(Gender) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Gender , COUNT(Gender) FROM player GROUP BY Gender ORDER BY COUNT(Gender) DESC"}, "hardness": "Medium"}, {"nl_queries": "Draw a bar chart about the distribution of meter_600 and meter_100 , and could you order y axis in asc order please?", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_600 , meter_100 FROM swimmer ORDER BY meter_100 ASC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_600 , meter_100 FROM swimmer ORDER BY meter_100 ASC"}, "hardness": "Easy"}, {"nl_queries": "What are the different role codes for users, and how many users have each Show bar chart, order by the the total number from high to low.", "db_id": "document_management", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT role_code , count(*) FROM users GROUP BY role_code ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT role_code , count(*) FROM users GROUP BY role_code ORDER BY count(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "What are the number of the dates that have an average sea level pressure between 303 and 31?, display date in asc order.", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date , COUNT(date) FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31 GROUP BY date ORDER BY date ASC", "binning": ""}, "VQL": "Visualize LINE SELECT date , COUNT(date) FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31 GROUP BY date ORDER BY date ASC"}, "hardness": "Hard"}, {"nl_queries": "How many documents for each document type description? Visualize by a bar chart, list by the y axis in asc.", "db_id": "cre_Docs_and_Epenses", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description ORDER BY COUNT(Document_Type_Description) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description ORDER BY COUNT(Document_Type_Description) ASC"}, "hardness": "Hard"}, {"nl_queries": "Find the max gpa of all students in each department with a pie chart.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT DEPT_CODE , max(stu_gpa) FROM student GROUP BY DEPT_CODE", "binning": ""}, "VQL": "Visualize PIE SELECT DEPT_CODE , max(stu_gpa) FROM student GROUP BY DEPT_CODE"}, "hardness": "Easy"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, draw a bar chart about the distribution of job_id and salary , order y-axis from high to low order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SALARY FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY SALARY DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SALARY FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY SALARY DESC"}, "hardness": "Medium"}, {"nl_queries": "Return a scatter chart about the correlation between  student_id and  address_id .", "db_id": "behavior_monitoring", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT student_id , address_id FROM Student_Addresses ORDER BY monthly_rental DESC", "binning": ""}, "VQL": "Visualize SCATTER SELECT student_id , address_id FROM Student_Addresses ORDER BY monthly_rental DESC"}, "hardness": "Easy"}, {"nl_queries": "I want to visualize the trend about the total appears times of transcript date in the Year interval, and I want to rank X in desc order please.", "db_id": "student_transcripts_tracking", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT transcript_date , COUNT(transcript_date) FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id  ORDER BY transcript_date DESC", "binning": "BIN transcript_date BY YEAR"}, "VQL": "Visualize LINE SELECT transcript_date , COUNT(transcript_date) FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id  ORDER BY transcript_date DESC BIN transcript_date BY YEAR"}, "hardness": "Hard"}, {"nl_queries": "Display a bar chart for what are the names and the average grades for each high schooler?, list in asc by the x axis.", "db_id": "network_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name ASC"}, "hardness": "Medium"}, {"nl_queries": "For each party, return the name of the party and the number of delegates from that party. Plot them as bar chart.", "db_id": "election", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Party , SUM(COUNT(*)) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Party , SUM(COUNT(*)) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party"}, "hardness": "Medium"}, {"nl_queries": "Give me a pie to show how many home team from different home team.", "db_id": "game_injury", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Home_team", "binning": ""}, "VQL": "Visualize PIE SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Home_team"}, "hardness": "Easy"}, {"nl_queries": "Visualize a scatter chart about the correlation between  Team_ID and  School_ID , and group by attribute All_Neutral.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Team_ID , School_ID FROM basketball_match GROUP BY All_Neutral", "binning": ""}, "VQL": "Visualize SCATTER SELECT Team_ID , School_ID FROM basketball_match GROUP BY All_Neutral"}, "hardness": "Easy"}, {"nl_queries": "Show different occupations along with the number of players in each occupation Show bar chart, show in ascending by the bar.", "db_id": "riding_club", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Occupation , COUNT(*) FROM player GROUP BY Occupation ORDER BY Occupation ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Occupation , COUNT(*) FROM player GROUP BY Occupation ORDER BY Occupation ASC"}, "hardness": "Medium"}, {"nl_queries": "Draw a bar chart for what are the average prices of products, grouped by manufacturer name?, and I want to rank x-axis in ascending order.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , avg(T1.Price) FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name ORDER BY T2.Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , avg(T1.Price) FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name ORDER BY T2.Name ASC"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, a bar chart shows the distribution of founder and the sum of revenue , and group by attribute founder, show by the names from low to high please.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Founder , SUM(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder ORDER BY Founder ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Founder , SUM(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder ORDER BY Founder ASC"}, "hardness": "Hard"}, {"nl_queries": "List the number of companies for each building in a bar chart, order from low to high by the Y.", "db_id": "company_office", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.name , COUNT(T2.name) FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id = T2.id JOIN Companies AS T3 ON T1.company_id = T3.id GROUP BY T2.name ORDER BY COUNT(T2.name) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.name , COUNT(T2.name) FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id = T2.id JOIN Companies AS T3 ON T1.company_id = T3.id GROUP BY T2.name ORDER BY COUNT(T2.name) ASC"}, "hardness": "Hard"}, {"nl_queries": "A bar chart for finding the number of the names of swimmers who has a result of \"win\", could you display by the y-axis from high to low?", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , COUNT(name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Win' GROUP BY name ORDER BY COUNT(name) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT name , COUNT(name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Win' GROUP BY name ORDER BY COUNT(name) DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees who was hired before 2002-06-21, visualize a bar chart about the distribution of hire_date and the sum of department_id bin hire_date by weekday, and I want to show from low to high by the Y.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(DEPARTMENT_ID) ASC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "Show how many movies did each director direct in a bar chart.", "db_id": "culture_company", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Director , COUNT(Director) FROM movie GROUP BY Director ORDER BY budget_million", "binning": ""}, "VQL": "Visualize BAR SELECT Director , COUNT(Director) FROM movie GROUP BY Director ORDER BY budget_million"}, "hardness": "Medium"}, {"nl_queries": "Draw a bar chart of description versus the number of description, rank by the total number from high to low.", "db_id": "aircraft", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY COUNT(Description) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY COUNT(Description) DESC"}, "hardness": "Medium"}, {"nl_queries": "Give me the comparison about Team_ID over the ACC_Regular_Season by a bar chart, rank in desc by the x-axis.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY ACC_Regular_Season DESC", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY ACC_Regular_Season DESC"}, "hardness": "Easy"}, {"nl_queries": "A bar chart about how many captains are in each rank?, and I want to list in ascending by the Y-axis.", "db_id": "ship_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY count(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "Show the number of template type code from each template type code, I want to sort in ascending by the Y-axis please.", "db_id": "cre_Doc_Template_Mgt", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Template_Type_Code , COUNT(Template_Type_Code) FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(Template_Type_Code) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Template_Type_Code , COUNT(Template_Type_Code) FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(Template_Type_Code) ASC"}, "hardness": "Medium"}, {"nl_queries": "Give me a pie to show the total number from different card type code.", "db_id": "customers_card_transactions", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT card_type_code , count(*) FROM Customers_cards GROUP BY card_type_code", "binning": ""}, "VQL": "Visualize PIE SELECT card_type_code , count(*) FROM Customers_cards GROUP BY card_type_code"}, "hardness": "Easy"}, {"nl_queries": "Show all branch names with the number of members in each branch registered after 2015 Plot them as bar chart, and could you rank bars in desc order?", "db_id": "shop_membership", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , count(*) FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id WHERE T1.register_year > 2015 GROUP BY T2.branch_id ORDER BY Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , count(*) FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id WHERE T1.register_year > 2015 GROUP BY T2.branch_id ORDER BY Name DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "Bin the hire date of employees into Month interval and count them for visualizing a bar chart, and sort by the Y from high to low please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees  ORDER BY COUNT(HIRE_DATE) DESC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY MONTH"}, "hardness": "Medium"}, {"nl_queries": "Return the number of music festivals of each category, I want to rank by the x-axis in asc.", "db_id": "music_4", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY Category ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY Category ASC"}, "hardness": "Medium"}, {"nl_queries": "List all payment methods and number of payments using each payment methods. Show a pie chart.", "db_id": "driving_school", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT payment_method_code , count(*) FROM Customer_Payments GROUP BY payment_method_code", "binning": ""}, "VQL": "Visualize PIE SELECT payment_method_code , count(*) FROM Customer_Payments GROUP BY payment_method_code"}, "hardness": "Easy"}, {"nl_queries": "Give the number of locations of all wrestlers with a bar chart, display in descending by the y axis.", "db_id": "wrestler", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Location , COUNT(Location) FROM wrestler GROUP BY Location ORDER BY COUNT(Location) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Location , COUNT(Location) FROM wrestler GROUP BY Location ORDER BY COUNT(Location) DESC"}, "hardness": "Medium"}, {"nl_queries": "Show the relation between max(stu gpa) and the average of stu gpa for each DEPT_CODE using a scatter chart", "db_id": "college_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT max(stu_gpa) , avg(stu_gpa) FROM student GROUP BY DEPT_CODE", "binning": ""}, "VQL": "Visualize SCATTER SELECT max(stu_gpa) , avg(stu_gpa) FROM student GROUP BY DEPT_CODE"}, "hardness": "Easy"}, {"nl_queries": "How many dorms are there for each gender? Show me a bar chart, order from low to high by the X-axis.", "db_id": "dorm_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT gender , count(*) FROM dorm GROUP BY gender ORDER BY gender ASC", "binning": ""}, "VQL": "Visualize BAR SELECT gender , count(*) FROM dorm GROUP BY gender ORDER BY gender ASC"}, "hardness": "Medium"}, {"nl_queries": "Draw a bar chart about the distribution of meter_700 and ID , and I want to sort by the Y from low to high.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_700 , ID FROM swimmer ORDER BY ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_700 , ID FROM swimmer ORDER BY ID ASC"}, "hardness": "Easy"}, {"nl_queries": "Show me about the correlation between  CID and  Credits  in a scatter chart.", "db_id": "college_3", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT CID , Credits FROM COURSE ORDER BY Credits", "binning": ""}, "VQL": "Visualize SCATTER SELECT CID , Credits FROM COURSE ORDER BY Credits"}, "hardness": "Easy"}, {"nl_queries": "Show the different nationalities and the number of journalists of each nationality. Visualize by bar chart.", "db_id": "news_report", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nationality , COUNT(*) FROM journalist GROUP BY Nationality", "binning": ""}, "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM journalist GROUP BY Nationality"}, "hardness": "Easy"}, {"nl_queries": "what are all the different product names, and how many complains has each received?, and order from high to low by the Y please.", "db_id": "customer_complaints", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT product_name , count(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id = t2.product_id GROUP BY t1.product_name ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT product_name , count(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id = t2.product_id GROUP BY t1.product_name ORDER BY count(*) DESC"}, "hardness": "Hard"}, {"nl_queries": "Bar graph to show the average of amount payment from different payment method code, and could you rank in ascending by the the average of amount payment please?", "db_id": "insurance_policies", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY AVG(Amount_Payment) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY AVG(Amount_Payment) ASC"}, "hardness": "Medium"}, {"nl_queries": "Draw a bar chart of investor versus the total number, and could you list bars from high to low order?", "db_id": "entrepreneur", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY Investor DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY Investor DESC"}, "hardness": "Medium"}, {"nl_queries": "Create a bar chart showing school_id across all neutral, and rank by the School_ID from high to low.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Neutral , School_ID FROM basketball_match ORDER BY School_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Neutral , School_ID FROM basketball_match ORDER BY School_ID DESC"}, "hardness": "Easy"}, {"nl_queries": "For all employees who have the letters D or S in their first name, give me the comparison about the amount of job_id over the job_id , and group by attribute job_id, and sort in asc by the the number of job id please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , COUNT(JOB_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY COUNT(JOB_ID) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY COUNT(JOB_ID) ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, visualize a line chart about the change of manager_id over hire_date , list X-axis from high to low order please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who was hired before 2002-06-21, visualize a bar chart about the distribution of hire_date and the sum of department_id bin hire_date by time, and order sum department id in ascending order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(DEPARTMENT_ID) ASC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "Return the average price for each product type by a bar chart, and display X in desc order please.", "db_id": "department_store", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT product_type_code , avg(product_price) FROM products GROUP BY product_type_code ORDER BY product_type_code DESC", "binning": ""}, "VQL": "Visualize BAR SELECT product_type_code , avg(product_price) FROM products GROUP BY product_type_code ORDER BY product_type_code DESC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who was hired before 2002-06-21, find job_id and the average of employee_id , and group by attribute job_id, and visualize them by a bar chart, and I want to sort y-axis in descending order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) DESC"}, "hardness": "Hard"}, {"nl_queries": "What are the number of the package options of all tv channels that are not playing any cartoons directed by Ben Jones?", "db_id": "tvshow", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option", "binning": ""}, "VQL": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option"}, "hardness": "Medium"}, {"nl_queries": "Draw a bar chart for what are the different product names, and what is the sum of quantity ordered for each product?", "db_id": "customers_and_invoices", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT product_name , sum(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name", "binning": ""}, "VQL": "Visualize BAR SELECT product_name , sum(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name"}, "hardness": "Medium"}, {"nl_queries": "For all employees who have the letters D or S in their first name, give me the trend about manager_id over hire_date , display in descending by the x-axis.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY HIRE_DATE DESC", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY HIRE_DATE DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees who was hired before 2002-06-21, show me about the distribution of  hire_date and the amount of hire_date bin hire_date by time in a bar chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21'", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH"}, "hardness": "Medium"}, {"nl_queries": "What is the total revenue of each manufacturer. ", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , sum(revenue) FROM manufacturers GROUP BY name", "binning": ""}, "VQL": "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name"}, "hardness": "Easy"}, {"nl_queries": "Return a bar chart about the distribution of Start_from and the average of Employee_ID bin start_from by weekday, and show in asc by the Y-axis.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Start_from , AVG(Employee_ID) FROM hiring  ORDER BY AVG(Employee_ID) ASC", "binning": "BIN Start_from BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Start_from , AVG(Employee_ID) FROM hiring  ORDER BY AVG(Employee_ID) ASC BIN Start_from BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "List all payment methods and number of payments using each payment methods by a bar chart, rank from low to high by the y axis.", "db_id": "driving_school", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT payment_method_code , count(*) FROM Customer_Payments GROUP BY payment_method_code ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT payment_method_code , count(*) FROM Customer_Payments GROUP BY payment_method_code ORDER BY count(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "Draw a scatter chart about the correlation between  Shop_ID and  Employee_ID .", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Shop_ID , Employee_ID FROM hiring", "binning": ""}, "VQL": "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM hiring"}, "hardness": "Easy"}, {"nl_queries": "Ignore movies whose director is NULL For each director, what are the titles and the highest rating among all of their movies they reviewed? Draw the result by a bar chart, order from low to high by the y-axis.", "db_id": "movie_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT title , max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" GROUP BY title ORDER BY max(T1.stars) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT title , max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" GROUP BY title ORDER BY max(T1.stars) ASC"}, "hardness": "Hard"}, {"nl_queries": "List the number of the description of the outcomes for all projects, and list in desc by the the number of outcome description.", "db_id": "tracking_grants_for_research", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description ORDER BY COUNT(outcome_description) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description ORDER BY COUNT(outcome_description) DESC"}, "hardness": "Hard"}, {"nl_queries": "Show total number of shop id from each start from", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Start_from , SUM(Shop_ID) FROM hiring", "binning": "BIN Start_from BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Start_from , SUM(Shop_ID) FROM hiring BIN Start_from BY WEEKDAY"}, "hardness": "Easy"}, {"nl_queries": "For all employees who have the letters D or S in their first name, give me the comparison about the sum of salary over the job_id , and group by attribute job_id, and rank total number in desc order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(SALARY) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(SALARY) DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, for  department_id,  hire_date, visualize the trend.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40"}, "hardness": "Medium"}, {"nl_queries": "Show the number of professors who is in office DRE 102 hired in each weekday with a bar chart.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT EMP_HIREDATE , COUNT(EMP_HIREDATE) FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num WHERE T2.prof_office = 'DRE 102'", "binning": "BIN EMP_HIREDATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT EMP_HIREDATE , COUNT(EMP_HIREDATE) FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num WHERE T2.prof_office = 'DRE 102' BIN EMP_HIREDATE BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "Bar graph to show the number of took office from different took office, I want to sort in desc by the Y please.", "db_id": "party_people", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Took_office , COUNT(Took_office) FROM party  ORDER BY COUNT(Took_office) DESC", "binning": "BIN Took_office BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Took_office , COUNT(Took_office) FROM party  ORDER BY COUNT(Took_office) DESC BIN Took_office BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "A bar chart for what is the number of locations of the wrestlers, and I want to show y-axis in desc order.", "db_id": "wrestler", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Location , COUNT(Location) FROM wrestler GROUP BY Location ORDER BY COUNT(Location) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Location , COUNT(Location) FROM wrestler GROUP BY Location ORDER BY COUNT(Location) DESC"}, "hardness": "Medium"}, {"nl_queries": "Return the average price for each product type Visualize by bar chart, and list by the Y-axis in asc.", "db_id": "department_store", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT product_type_code , avg(product_price) FROM products GROUP BY product_type_code ORDER BY avg(product_price) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT product_type_code , avg(product_price) FROM products GROUP BY product_type_code ORDER BY avg(product_price) ASC"}, "hardness": "Medium"}, {"nl_queries": "What are the average ages for male and female students. ", "db_id": "allergy_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Sex , avg(age) FROM Student GROUP BY sex", "binning": ""}, "VQL": "Visualize PIE SELECT Sex , avg(age) FROM Student GROUP BY sex"}, "hardness": "Easy"}, {"nl_queries": "Frequency of the aircrafts that has win an award, across by its name as a pie chart", "db_id": "aircraft", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Aircraft , COUNT(Aircraft) FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft GROUP BY Aircraft", "binning": ""}, "VQL": "Visualize PIE SELECT Aircraft , COUNT(Aircraft) FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft GROUP BY Aircraft"}, "hardness": "Medium"}, {"nl_queries": "For all employees who have the letters D or S in their first name, give me the comparison about the sum of department_id over the  hire_date bin hire_date by weekday by a bar chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "Give me a stacked bar chart to show how many things in different types of each thing, and the details of the organization that owns it, could you order bars in ascending order?", "db_id": "local_govt_and_lot", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT organization_details , COUNT(organization_details) FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id = T2.organization_id GROUP BY Type_of_Thing_Code ,  organization_details ORDER BY organization_details ASC", "binning": ""}, "VQL": "Visualize BAR SELECT organization_details , COUNT(organization_details) FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id = T2.organization_id GROUP BY Type_of_Thing_Code ,  organization_details ORDER BY organization_details ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, draw a bar chart about the distribution of name and code , and group by attribute name, I want to order in asc by the x axis.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Name ASC"}, "hardness": "Hard"}, {"nl_queries": "Show how many courses in 2008 for every instructor with a bar chart.", "db_id": "college_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , COUNT(name) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 GROUP BY name", "binning": ""}, "VQL": "Visualize BAR SELECT name , COUNT(name) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 GROUP BY name"}, "hardness": "Hard"}, {"nl_queries": "What is the average account balance of customers with credit score below 50 for the different account types Visualize by bar chart, display acc_type from high to low order.", "db_id": "loan_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type ORDER BY acc_type DESC", "binning": ""}, "VQL": "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type ORDER BY acc_type DESC"}, "hardness": "Hard"}, {"nl_queries": "Show different ways to get to attractions and the number of attractions that can be accessed in the corresponding way Plot them as bar chart, could you display by the y axis in descending please?", "db_id": "cre_Theme_park", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT How_to_Get_There , COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT How_to_Get_There , COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, give me the comparison about manager_id over the email by a bar chart, order in descending by the X-axis.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT EMAIL , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY EMAIL DESC", "binning": ""}, "VQL": "Visualize BAR SELECT EMAIL , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY EMAIL DESC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who was hired before 2002-06-21, visualize a bar chart about the distribution of  job_id and the average of department_id , and group by attribute job_id.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, return a bar chart about the distribution of name and the sum of code , and group by attribute name, and display by the bars in descending.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC"}, "hardness": "Hard"}, {"nl_queries": "How many engineers did each staff contact? List both the contact staff name and number of engineers contacted Plot them as bar chart, show the total number in ascending order.", "db_id": "assets_maintenance", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT staff_name , count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT staff_name , count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name ORDER BY count(*) ASC"}, "hardness": "Hard"}, {"nl_queries": "What are the id and name of the mountains that have at least 2 photos. Plot them as pie chart.", "db_id": "mountain_photos", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT T1.name , T1.id FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id", "binning": ""}, "VQL": "Visualize PIE SELECT T1.name , T1.id FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id"}, "hardness": "Easy"}, {"nl_queries": "For those records from the products and each product's manufacturer, show me about the distribution of  founder and the sum of manufacturer , and group by attribute founder in a bar chart.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Founder , SUM(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder", "binning": ""}, "VQL": "Visualize BAR SELECT Founder , SUM(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder"}, "hardness": "Medium"}, {"nl_queries": "For those employees who was hired before 2002-06-21, a bar chart shows the distribution of job_id and the sum of employee_id , and group by attribute job_id, list by the Y from low to high.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) ASC"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, return a bar chart about the distribution of name and manufacturer , and group by attribute founder, and list in ascending by the Y-axis.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder , T1.Name ORDER BY T1.Manufacturer ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder , T1.Name ORDER BY T1.Manufacturer ASC"}, "hardness": "Hard"}, {"nl_queries": "For those dates with a max temperature greater than or equal to 80, I want to see the number of days for each year using a bar chart, and show in asc by the total number.", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date , COUNT(date) FROM weather WHERE max_temperature_f >= 80  ORDER BY COUNT(date) ASC", "binning": "BIN date BY YEAR"}, "VQL": "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE max_temperature_f >= 80  ORDER BY COUNT(date) ASC BIN date BY YEAR"}, "hardness": "Hard"}, {"nl_queries": "How many instructors for every course in 2008? Show me a bar chart grouping by course title, and rank by the y axis in desc.", "db_id": "college_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT title , COUNT(title) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 GROUP BY title ORDER BY COUNT(title) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT title , COUNT(title) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 GROUP BY title ORDER BY COUNT(title) DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "How many hosts does each nationality have? List the nationality and the count Visualize by bar chart, and sort X-axis from high to low order.", "db_id": "party_host", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC"}, "hardness": "Medium"}, {"nl_queries": "List the number of dogs departed in each day with a bar chart that bins departed date by weekday, could you show total number in ascending order?", "db_id": "dog_kennels", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_departed , COUNT(date_departed) FROM Dogs  ORDER BY COUNT(date_departed) ASC", "binning": "BIN date_departed BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs  ORDER BY COUNT(date_departed) ASC BIN date_departed BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "Show me the total number by citizenship in a histogram", "db_id": "singer", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship", "binning": ""}, "VQL": "Visualize BAR SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship"}, "hardness": "Easy"}, {"nl_queries": "How many companies each investor has invested? Show me a bar chart, and I want to show Y in asc order.", "db_id": "entrepreneur", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(Investor) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(Investor) ASC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about the average of revenue over the headquarter , and group by attribute headquarter, sort by the total number in asc please.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY AVG(Revenue) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY AVG(Revenue) ASC"}, "hardness": "Hard"}, {"nl_queries": "What are the names and number of hours spent training for each player who trains for less than 1500 hours Visualize by bar chart, and list in ascending by the names.", "db_id": "soccer_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT pName , HS FROM Player WHERE HS < 1500 ORDER BY pName ASC", "binning": ""}, "VQL": "Visualize BAR SELECT pName , HS FROM Player WHERE HS < 1500 ORDER BY pName ASC"}, "hardness": "Medium"}, {"nl_queries": "Give me a bar chart to show the names and revenue of the company that earns the highest revenue in each headquarter city, list in descending by the y axis.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , max(revenue) FROM manufacturers GROUP BY Headquarter ORDER BY max(revenue) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , max(revenue) FROM manufacturers GROUP BY Headquarter ORDER BY max(revenue) DESC"}, "hardness": "Medium"}, {"nl_queries": "For all artist names who are not from the United States, show the total number of each year, and rank y axis in descending order.", "db_id": "theme_gallery", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Year_Join , COUNT(Year_Join) FROM artist WHERE country != 'United States' GROUP BY Year_Join ORDER BY COUNT(Year_Join) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Year_Join , COUNT(Year_Join) FROM artist WHERE country != 'United States' GROUP BY Year_Join ORDER BY COUNT(Year_Join) DESC"}, "hardness": "Medium"}, {"nl_queries": "What are the record companies of orchestras in descending order of years in which they were founded, and count them by a bar chart", "db_id": "orchestra", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Record_Company , COUNT(Record_Company) FROM orchestra GROUP BY Record_Company ORDER BY Year_of_Founded DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Record_Company , COUNT(Record_Company) FROM orchestra GROUP BY Record_Company ORDER BY Year_of_Founded DESC"}, "hardness": "Medium"}, {"nl_queries": "Visualize a bar chart for what are the names and the total prices of all products in the store?, order y-axis in desc order.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , SUM(Price) FROM products GROUP BY Name ORDER BY SUM(Price) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , SUM(Price) FROM products GROUP BY Name ORDER BY SUM(Price) DESC"}, "hardness": "Medium"}, {"nl_queries": "For all employees who have the letters D or S in their first name, show me about the distribution of  hire_date and the average of manager_id bin hire_date by weekday in a bar chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "Draw a pie chart about the proportion of  ACC_Regular_Season and  All_Games_Percent.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match", "binning": ""}, "VQL": "Visualize PIE SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match"}, "hardness": "Easy"}, {"nl_queries": "For those records from the products and each product's manufacturer, visualize a bar chart about the distribution of  name and the sum of manufacturer , and group by attribute name.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name"}, "hardness": "Medium"}, {"nl_queries": "Draw a bar chart about the distribution of  date_address_from and the sum of monthly_rental , and group by attribute other_details and bin date_address_from by time.", "db_id": "behavior_monitoring", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC", "binning": "BIN date_address_from BY YEAR"}, "VQL": "Visualize BAR SELECT date_address_from , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY YEAR"}, "hardness": "Extra Hard"}, {"nl_queries": "Please draw a bar chart to show the total number of different color.", "db_id": "mountain_photos", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT color , COUNT(color) FROM photos GROUP BY color", "binning": ""}, "VQL": "Visualize BAR SELECT color , COUNT(color) FROM photos GROUP BY color"}, "hardness": "Easy"}, {"nl_queries": "How many faculty members do we have for each faculty rank Show bar chart, I want to list in asc by the Y.", "db_id": "activity_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Rank , count(*) FROM Faculty GROUP BY rank ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY rank ORDER BY count(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "Bar chart of mean price from each name, order names in desc order.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , AVG(Price) FROM products GROUP BY Name ORDER BY Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , AVG(Price) FROM products GROUP BY Name ORDER BY Name DESC"}, "hardness": "Medium"}, {"nl_queries": "Show me a line chart of how mean weight change over the year", "db_id": "car_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Year , avg(Weight) FROM CARS_DATA GROUP BY YEAR", "binning": ""}, "VQL": "Visualize LINE SELECT Year , avg(Weight) FROM CARS_DATA GROUP BY YEAR"}, "hardness": "Easy"}, {"nl_queries": "Show mean max(price) from each year, rank from high to low by the total number.", "db_id": "wine_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Year , AVG(max(Price)) FROM WINE  ORDER BY AVG(max(Price)) DESC", "binning": "BIN Year BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Year , AVG(max(Price)) FROM WINE  ORDER BY AVG(max(Price)) DESC BIN Year BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "Return a histogram on how many professors have a PhD in each department?, and rank in ascending by the y axis.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT DEPT_CODE , count(*) FROM professor WHERE prof_high_degree = 'Ph.D.' GROUP BY dept_code ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT DEPT_CODE , count(*) FROM professor WHERE prof_high_degree = 'Ph.D.' GROUP BY dept_code ORDER BY count(*) ASC"}, "hardness": "Hard"}, {"nl_queries": "How many documents are stored? Bin the store date by weekday in a bar chart, and I want to show in desc by the y-axis.", "db_id": "cre_Doc_Tracking_DB", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Date_Stored , COUNT(Date_Stored) FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored = T2.calendar_date  ORDER BY COUNT(Date_Stored) DESC", "binning": "BIN Date_Stored BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Date_Stored , COUNT(Date_Stored) FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored = T2.calendar_date  ORDER BY COUNT(Date_Stored) DESC BIN Date_Stored BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "For all employees who have the letters D or S in their first name, draw a bar chart about the distribution of hire_date and the average of department_id bin hire_date by time, I want to sort by the Y in ascending.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY AVG(DEPARTMENT_ID) ASC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY AVG(DEPARTMENT_ID) ASC BIN HIRE_DATE BY MONTH"}, "hardness": "Extra Hard"}, {"nl_queries": "How many completion students in each day? Return a bar chart binning date of completion by weekday, display how many date of completion in descending order.", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_of_completion , COUNT(date_of_completion) FROM Student_Course_Enrolment  ORDER BY COUNT(date_of_completion) DESC", "binning": "BIN date_of_completion BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_of_completion , COUNT(date_of_completion) FROM Student_Course_Enrolment  ORDER BY COUNT(date_of_completion) DESC BIN date_of_completion BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "A bar chart showing the number of members in each country, and sort y-axis in desc order.", "db_id": "decoration_competition", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Country , COUNT(Country) FROM member GROUP BY Country ORDER BY COUNT(Country) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM member GROUP BY Country ORDER BY COUNT(Country) DESC"}, "hardness": "Medium"}, {"nl_queries": "What is the total capacity of dorms for each gender? Give me a bar chart, sort by the y-axis in descending.", "db_id": "dorm_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT gender , sum(student_capacity) FROM dorm GROUP BY gender ORDER BY sum(student_capacity) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT gender , sum(student_capacity) FROM dorm GROUP BY gender ORDER BY sum(student_capacity) DESC"}, "hardness": "Medium"}, {"nl_queries": "Show the total number from each flag", "db_id": "ship_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Flag , count(*) FROM ship GROUP BY flag", "binning": ""}, "VQL": "Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag"}, "hardness": "Easy"}, {"nl_queries": "Draw a bar chart about the distribution of Start_from and the average of Shop_ID , and group by attribute Is_full_time and bin start_from by weekday, and I want to list by the y axis from high to low.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Start_from , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY AVG(Shop_ID) DESC", "binning": "BIN Start_from BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Start_from , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY AVG(Shop_ID) DESC BIN Start_from BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "Which tests have \"Pass\" results? Return the dates when the tests were taken, and count them by a bar chart", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken", "binning": ""}, "VQL": "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken"}, "hardness": "Medium"}, {"nl_queries": "Find the average age for students with different sex in a bar chart, could you list by the Y from low to high?", "db_id": "dorm_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Sex , avg(age) FROM student GROUP BY sex ORDER BY avg(age) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Sex , avg(age) FROM student GROUP BY sex ORDER BY avg(age) ASC"}, "hardness": "Medium"}, {"nl_queries": "Visualize a pie chart with what are the top 5 countries by number of invoices and how many do they have?", "db_id": "store_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT billing_country , COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5", "binning": ""}, "VQL": "Visualize PIE SELECT billing_country , COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, return a bar chart about the distribution of name and the sum of code , and group by attribute name, and show from low to high by the total number.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code ASC"}, "hardness": "Hard"}, {"nl_queries": "Show each state and the number of addresses in each state. Show bar chart.", "db_id": "customers_and_products_contacts", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT state_province_county , count(*) FROM addresses GROUP BY state_province_county", "binning": ""}, "VQL": "Visualize BAR SELECT state_province_county , count(*) FROM addresses GROUP BY state_province_county"}, "hardness": "Easy"}, {"nl_queries": "Show the number of accounts opened in each day. Bin the account open day by weekday in a bar chart.", "db_id": "customers_and_invoices", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_account_opened , COUNT(date_account_opened) FROM Accounts", "binning": "BIN date_account_opened BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_account_opened , COUNT(date_account_opened) FROM Accounts BIN date_account_opened BY WEEKDAY"}, "hardness": "Easy"}, {"nl_queries": "Bar chart x axis position y axis how many position, display from low to high by the the number of position.", "db_id": "sports_competition", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING avg(Points) >= 20 ORDER BY COUNT(Position) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING avg(Points) >= 20 ORDER BY COUNT(Position) ASC"}, "hardness": "Hard"}, {"nl_queries": "A bar chart about what are the nationalities and their average ages of journalists?, I want to rank by the x axis from low to high.", "db_id": "news_report", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nationality , AVG(Age) FROM journalist GROUP BY Nationality ORDER BY Nationality ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Nationality , AVG(Age) FROM journalist GROUP BY Nationality ORDER BY Nationality ASC"}, "hardness": "Medium"}, {"nl_queries": "Return a bar chart about the distribution of name and ID , display from low to high by the x axis.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , ID FROM swimmer ORDER BY name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT name , ID FROM swimmer ORDER BY name ASC"}, "hardness": "Easy"}, {"nl_queries": "For all employees who have the letters D or S in their first name, show me about the distribution of hire_date and the amount of hire_date bin hire_date by time in a bar chart, display by the y-axis in descending.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY COUNT(HIRE_DATE) DESC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY MONTH"}, "hardness": "Extra Hard"}, {"nl_queries": "For all employees who have the letters D or S in their first name, a bar chart shows the distribution of  hire_date and the sum of salary bin hire_date by time.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH"}, "hardness": "Extra Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, return a bar chart about the distribution of  headquarter and the sum of manufacturer , and group by attribute headquarter.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Headquarter , SUM(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter", "binning": ""}, "VQL": "Visualize BAR SELECT Headquarter , SUM(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter"}, "hardness": "Medium"}, {"nl_queries": "For each product, return its id and the number of times it was ordered. Show the correlation.", "db_id": "tracking_orders", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT count(*) , T2.product_id FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id", "binning": ""}, "VQL": "Visualize SCATTER SELECT count(*) , T2.product_id FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id"}, "hardness": "Medium"}, {"nl_queries": "A pie chart shows the proportion of  ACC_Regular_Season and  All_Games_Percent.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match", "binning": ""}, "VQL": "Visualize PIE SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match"}, "hardness": "Easy"}, {"nl_queries": "Return a bar chart about the distribution of Date_of_Birth and Height , and order Y-axis from high to low order.", "db_id": "candidate_poll", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Date_of_Birth , Height FROM people ORDER BY Height DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Date_of_Birth , Height FROM people ORDER BY Height DESC"}, "hardness": "Easy"}, {"nl_queries": "For those employees who did not have any job in the past, return a line chart about the change of  salary over  hire_date .", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , SALARY FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)"}, "hardness": "Easy"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, return a bar chart about the distribution of job_id and manager_id , could you sort total number in descending order?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY MANAGER_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY MANAGER_ID DESC"}, "hardness": "Medium"}, {"nl_queries": "What are the venues of all the matches? Sort them in the descending order of match date, and count them by a bar chart", "db_id": "city_record", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Venue , COUNT(Venue) FROM MATCH GROUP BY Venue ORDER BY date DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Venue , COUNT(Venue) FROM MATCH GROUP BY Venue ORDER BY date DESC"}, "hardness": "Medium"}, {"nl_queries": "What are the destinations and number of flights to each one Visualize by bar chart, and display X from low to high order.", "db_id": "flight_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT destination , count(*) FROM Flight GROUP BY destination ORDER BY destination ASC", "binning": ""}, "VQL": "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination ORDER BY destination ASC"}, "hardness": "Medium"}, {"nl_queries": "Visualize by pie chart about different citizenships and the maximum net worth of singers of each citizenship.", "db_id": "singer", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship", "binning": ""}, "VQL": "Visualize PIE SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship"}, "hardness": "Easy"}, {"nl_queries": "A line chart shows the trend of the average of Shop_ID over  Start_from bin start_from by time.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Start_from , AVG(Shop_ID) FROM hiring", "binning": "BIN Start_from BY YEAR"}, "VQL": "Visualize LINE SELECT Start_from , AVG(Shop_ID) FROM hiring BIN Start_from BY YEAR"}, "hardness": "Easy"}, {"nl_queries": "List the description of all aircrafts, and count them by a bar chart, list y-axis in descending order.", "db_id": "aircraft", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY COUNT(Description) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY COUNT(Description) DESC"}, "hardness": "Medium"}, {"nl_queries": "Group and count the years played to draw a bar chart.", "db_id": "match_season", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Years_Played , COUNT(Years_Played) FROM player GROUP BY Years_Played", "binning": ""}, "VQL": "Visualize BAR SELECT Years_Played , COUNT(Years_Played) FROM player GROUP BY Years_Played"}, "hardness": "Easy"}, {"nl_queries": "Compare all train names' total numbers.", "db_id": "station_weather", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , COUNT(name) FROM train GROUP BY name", "binning": ""}, "VQL": "Visualize BAR SELECT name , COUNT(name) FROM train GROUP BY name"}, "hardness": "Easy"}, {"nl_queries": "Give the name of each department and the number of employees in each in a bar chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT DEPARTMENT_NAME , COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id GROUP BY T2.department_name", "binning": ""}, "VQL": "Visualize BAR SELECT DEPARTMENT_NAME , COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id GROUP BY T2.department_name"}, "hardness": "Medium"}, {"nl_queries": "For those employees who did not have any job in the past, find job_id and the average of salary , and group by attribute job_id, and visualize them by a bar chart, and sort from high to low by the Y.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY AVG(SALARY) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY AVG(SALARY) DESC"}, "hardness": "Hard"}, {"nl_queries": "For all employees who have the letters D or S in their first name, draw a bar chart about the distribution of  hire_date and the average of department_id bin hire_date by weekday.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "A bar chart for finding the number of the first name of students who are living in the Smith Hall, could you sort by the how many fname from low to high?", "db_id": "dorm_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Fname , COUNT(Fname) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.dorm_name = 'Smith Hall' GROUP BY Fname ORDER BY COUNT(Fname) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Fname , COUNT(Fname) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.dorm_name = 'Smith Hall' GROUP BY Fname ORDER BY COUNT(Fname) ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "List each charge type and its amount in a bar chart, list in asc by the x-axis.", "db_id": "dog_kennels", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT charge_type , charge_amount FROM Charges ORDER BY charge_type ASC", "binning": ""}, "VQL": "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_type ASC"}, "hardness": "Easy"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, return a bar chart about the distribution of hire_date and the sum of manager_id bin hire_date by time, I want to list by the total number in descending.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(MANAGER_ID) DESC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "Give me the comparison about  Team_ID over the  All_Neutral  by a bar chart.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Neutral , Team_ID FROM basketball_match", "binning": ""}, "VQL": "Visualize BAR SELECT All_Neutral , Team_ID FROM basketball_match"}, "hardness": "Easy"}, {"nl_queries": "Give me the comparison about the sum of Shop_ID over the  Start_from , and group by attribute Is_full_time and bin start_from by weekday.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Start_from , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time", "binning": "BIN Start_from BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Start_from , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time BIN Start_from BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "Show the number of courses each instructor taught in a bar chart, and could you show by the y-axis in desc?", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code GROUP BY EMP_FNAME ORDER BY COUNT(EMP_FNAME) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code GROUP BY EMP_FNAME ORDER BY COUNT(EMP_FNAME) DESC"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, find  name and the sum of price , and group by attribute name, and visualize them by a bar chart.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name"}, "hardness": "Medium"}, {"nl_queries": "How many apartment bookings for each year? Draw a bar chart binning booking start date by year interval, I want to order in desc by the Y-axis.", "db_id": "apartment_rentals", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id  ORDER BY COUNT(booking_start_date) DESC", "binning": "BIN booking_start_date BY YEAR"}, "VQL": "Visualize BAR SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id  ORDER BY COUNT(booking_start_date) DESC BIN booking_start_date BY YEAR"}, "hardness": "Hard"}, {"nl_queries": "Show the number of the dates of transactions if the share count is bigger than 100 or the amount is bigger than 1000, could you list from high to low by the Y?", "db_id": "tracking_share_transactions", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS WHERE share_count > 100 OR amount_of_transaction > 1000  ORDER BY COUNT(date_of_transaction) DESC", "binning": "BIN date_of_transaction BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS WHERE share_count > 100 OR amount_of_transaction > 1000  ORDER BY COUNT(date_of_transaction) DESC BIN date_of_transaction BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "List the number of items by the details of the organization that owns it using a bar chart, and display y-axis in asc order.", "db_id": "local_govt_and_lot", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT organization_details , COUNT(organization_details) FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id = T2.organization_id GROUP BY organization_details ORDER BY COUNT(organization_details) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT organization_details , COUNT(organization_details) FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id = T2.organization_id GROUP BY organization_details ORDER BY COUNT(organization_details) ASC"}, "hardness": "Hard"}, {"nl_queries": "Show different teams in eliminations and the number of eliminations from each team by a bar chart, order by the total number from low to high.", "db_id": "wrestler", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Team , COUNT(*) FROM elimination GROUP BY Team ORDER BY COUNT(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Team , COUNT(*) FROM elimination GROUP BY Team ORDER BY COUNT(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who did not have any job in the past, return a bar chart about the distribution of  job_id and the average of employee_id , and group by attribute job_id.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID"}, "hardness": "Medium"}, {"nl_queries": "How many completion students in each day? Return a line chart grouping by date of completion.", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date_of_completion , COUNT(date_of_completion) FROM Student_Course_Enrolment GROUP BY date_of_completion", "binning": ""}, "VQL": "Visualize LINE SELECT date_of_completion , COUNT(date_of_completion) FROM Student_Course_Enrolment GROUP BY date_of_completion"}, "hardness": "Easy"}, {"nl_queries": "For those records from the products and each product's manufacturer, return a scatter chart about the correlation between  code and  manufacturer .", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code", "binning": ""}, "VQL": "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code"}, "hardness": "Easy"}, {"nl_queries": "Draw a bar chart for what are the names of the high schoolers and how many friends does each have?, and could you rank by the x-axis in desc?", "db_id": "network_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.name , SUM(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.name , SUM(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name DESC"}, "hardness": "Hard"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, give me the comparison about the average of department_id over the job_id , and group by attribute job_id by a bar chart, and sort by the y axis in descending.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(DEPARTMENT_ID) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(DEPARTMENT_ID) DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "Find the number of rooms with king bed for each decor type, could you show in asc by the names?", "db_id": "inn_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT decor , count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor ORDER BY decor ASC", "binning": ""}, "VQL": "Visualize BAR SELECT decor , count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor ORDER BY decor ASC"}, "hardness": "Hard"}, {"nl_queries": "Bar chart x axis date of enrolment y axis the number of date of enrolment, sort in desc by the Y-axis.", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Student_Course_Enrolment  ORDER BY COUNT(date_of_enrolment) DESC", "binning": "BIN date_of_enrolment BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Student_Course_Enrolment  ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "Find all the payment dates for the payments with an amount larger than 10 and the payments handled by a staff person with the first name Elsa, and count them by a bar chart", "db_id": "sakila_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT payment_date , COUNT(payment_date) FROM payment WHERE amount > 10 UNION SELECT T1.payment_date FROM payment AS T1 JOIN staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = 'Elsa'", "binning": "BIN payment_date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT payment_date , COUNT(payment_date) FROM payment WHERE amount > 10 UNION SELECT T1.payment_date FROM payment AS T1 JOIN staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = 'Elsa' BIN payment_date BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "Show me a bar chart for what are the ids and details for all organizations that have grants of more than 6000 dollars?, list from high to low by the x axis.", "db_id": "tracking_grants_for_research", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T2.organisation_details DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T2.organisation_details DESC"}, "hardness": "Hard"}, {"nl_queries": "Give me the comparison about the amount of Start_from over the  Start_from , and group by attribute Is_full_time and bin start_from by weekday.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Start_from , COUNT(Start_from) FROM hiring GROUP BY Is_full_time", "binning": "BIN Start_from BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Start_from , COUNT(Start_from) FROM hiring GROUP BY Is_full_time BIN Start_from BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "Bar chart x axis position y axis how many position, and order X-axis in desc order.", "db_id": "sports_competition", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING avg(Points) >= 20 ORDER BY Position DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING avg(Points) >= 20 ORDER BY Position DESC"}, "hardness": "Hard"}, {"nl_queries": "Show me a bar chart for what is the total credit does each department offer?, and show total number in asc order.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT DEPT_CODE , sum(crs_credit) FROM course GROUP BY dept_code ORDER BY sum(crs_credit) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT DEPT_CODE , sum(crs_credit) FROM course GROUP BY dept_code ORDER BY sum(crs_credit) ASC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who did not have any job in the past, visualize a bar chart about the distribution of  job_id and the average of salary , and group by attribute job_id.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID"}, "hardness": "Medium"}, {"nl_queries": "Find the names of Japanese constructors that have once earned more than 5 points, and count them by a bar chart, and display by the Y in ascending.", "db_id": "formula_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name ORDER BY COUNT(name) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name ORDER BY COUNT(name) ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, draw a bar chart about the distribution of name and the average of code , and group by attribute name, and display in asc by the Y.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code ASC"}, "hardness": "Hard"}, {"nl_queries": "Visualize a bar chart about the distribution of Sex and the average of Height , and group by attribute Sex, I want to order mean height from high to low order.", "db_id": "candidate_poll", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Sex , AVG(Height) FROM people GROUP BY Sex ORDER BY AVG(Height) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Sex , AVG(Height) FROM people GROUP BY Sex ORDER BY AVG(Height) DESC"}, "hardness": "Medium"}, {"nl_queries": "Bar chart x axis duration y axis how many duration, I want to sort in desc by the bar please.", "db_id": "musical", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Duration , COUNT(Duration) FROM actor GROUP BY Duration ORDER BY Duration DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Duration , COUNT(Duration) FROM actor GROUP BY Duration ORDER BY Duration DESC"}, "hardness": "Medium"}, {"nl_queries": "For each branch id, what are the names of the branches that were registered after 2015 Visualize by bar chart, and could you show Name from high to low order?", "db_id": "shop_membership", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , count(*) FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id WHERE T1.register_year > 2015 GROUP BY T2.branch_id ORDER BY Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , count(*) FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id WHERE T1.register_year > 2015 GROUP BY T2.branch_id ORDER BY Name DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, a bar chart shows the distribution of headquarter and the average of code , and group by attribute headquarter, and rank in ascending by the total number.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T1.Code ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T1.Code ASC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who did not have any job in the past, return a bar chart about the distribution of hire_date and the sum of employee_id bin hire_date by weekday, could you order by the y-axis in desc?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY SUM(EMPLOYEE_ID) DESC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "How many tourist attractions for each attraction name? Visualize by a bar chart, sort the total number in desc order please.", "db_id": "cre_Theme_park", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(*) FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID ORDER BY COUNT(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(*) FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID ORDER BY COUNT(*) DESC"}, "hardness": "Hard"}, {"nl_queries": "Find  Is_full_time and the average of Employee_ID , and group by attribute Is_full_time, and visualize them by a bar chart.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Is_full_time , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time", "binning": ""}, "VQL": "Visualize BAR SELECT Is_full_time , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time"}, "hardness": "Easy"}, {"nl_queries": "Give me a bar graph showing the total number of different product names, I want to rank x axis in ascending order.", "db_id": "solvency_ii", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Product_Name , COUNT(Product_Name) FROM Products GROUP BY Product_Name ORDER BY Product_Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Product_Name , COUNT(Product_Name) FROM Products GROUP BY Product_Name ORDER BY Product_Name ASC"}, "hardness": "Medium"}, {"nl_queries": "Show school id vs all_games_percent as scatter plot use a different color for each ACC_Home", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Home", "binning": ""}, "VQL": "Visualize SCATTER SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Home"}, "hardness": "Easy"}, {"nl_queries": "For those employees who did not have any job in the past, find hire_date and the amount of hire_date bin hire_date by time, and visualize them by a bar chart, and rank by the Y-axis in ascending please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY COUNT(HIRE_DATE) ASC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "Bar chart x axis name y axis how many name, sort by the X-axis in descending.", "db_id": "journal_committee", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM editor GROUP BY Name ORDER BY Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM editor GROUP BY Name ORDER BY Name DESC"}, "hardness": "Medium"}, {"nl_queries": "List the types of competition and the number of competitions of each type in a bar chart.", "db_id": "sports_competition", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Competition_type , COUNT(*) FROM competition GROUP BY Competition_type", "binning": ""}, "VQL": "Visualize BAR SELECT Competition_type , COUNT(*) FROM competition GROUP BY Competition_type"}, "hardness": "Easy"}, {"nl_queries": "Draw a bar chart for what are the different classes of races, and how many races correspond to each?, and show in asc by the total number.", "db_id": "race_track", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY count(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "A pie chart for what are the number of the first names of all students in Smith Hall?", "db_id": "dorm_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Fname , COUNT(Fname) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.dorm_name = 'Smith Hall' GROUP BY Fname", "binning": ""}, "VQL": "Visualize PIE SELECT Fname , COUNT(Fname) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.dorm_name = 'Smith Hall' GROUP BY Fname"}, "hardness": "Hard"}, {"nl_queries": "Give me the comparison about ACC_Percent over the ACC_Regular_Season , and rank in desc by the X.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match ORDER BY ACC_Regular_Season DESC", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match ORDER BY ACC_Regular_Season DESC"}, "hardness": "Easy"}, {"nl_queries": "For those employees who was hired before 2002-06-21, show me about the distribution of  job_id and the amount of job_id , and group by attribute job_id in a bar chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , COUNT(JOB_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID"}, "hardness": "Medium"}, {"nl_queries": "For those employees who was hired before 2002-06-21, visualize the relationship between  salary and  manager_id .", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT SALARY , MANAGER_ID FROM employees WHERE hire_date < '2002-06-21'", "binning": ""}, "VQL": "Visualize SCATTER SELECT SALARY , MANAGER_ID FROM employees WHERE hire_date < '2002-06-21'"}, "hardness": "Easy"}, {"nl_queries": "Show me the proportion on what are the countries of perpetrators? Show each country and the corresponding number of perpetrators there.", "db_id": "perpetrator", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Country , COUNT(*) FROM perpetrator GROUP BY Country", "binning": ""}, "VQL": "Visualize PIE SELECT Country , COUNT(*) FROM perpetrator GROUP BY Country"}, "hardness": "Easy"}, {"nl_queries": "Show the musical nominee with award \"Bob Fosse\" or \"Cleavant Derricks\", and count them by a bar chart, I want to sort y axis in ascending order.", "db_id": "musical", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY COUNT(Nominee) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY COUNT(Nominee) ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "How many films for each type? Return a bar chart, show in descending by the X.", "db_id": "film_rank", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Type , COUNT(Type) FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID GROUP BY Type ORDER BY Type DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Type , COUNT(Type) FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID GROUP BY Type ORDER BY Type DESC"}, "hardness": "Hard"}, {"nl_queries": "A bar chart for what are the number of the titles of all movies that have between 3 and 5 stars?, and list X-axis in asc order please.", "db_id": "movie_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT title , COUNT(title) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T1.stars BETWEEN 3 AND 5 GROUP BY title ORDER BY title ASC", "binning": ""}, "VQL": "Visualize BAR SELECT title , COUNT(title) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T1.stars BETWEEN 3 AND 5 GROUP BY title ORDER BY title ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "For each record in schedule, show sum of price for each day in a bar chart, order by the X in descending.", "db_id": "cinema", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Date , SUM(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Date ORDER BY Date DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Date , SUM(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Date ORDER BY Date DESC"}, "hardness": "Hard"}, {"nl_queries": "Give me the comparison about Team_ID over the All_Home , and group by attribute ACC_Home by a bar chart, rank in asc by the y axis.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY Team_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY Team_ID ASC"}, "hardness": "Medium"}, {"nl_queries": "What is the last name of each student who is not allergic to any type of food? Count them with a bar chart, I want to rank in ascending by the bar.", "db_id": "allergy_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT LName , COUNT(LName) FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\") GROUP BY LName ORDER BY LName ASC", "binning": ""}, "VQL": "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\") GROUP BY LName ORDER BY LName ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "List the number of areas of all appellations in the bar chart, rank by the total number from high to low.", "db_id": "wine_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Area , COUNT(Area) FROM APPELLATIONS GROUP BY Area ORDER BY COUNT(Area) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Area , COUNT(Area) FROM APPELLATIONS GROUP BY Area ORDER BY COUNT(Area) DESC"}, "hardness": "Medium"}, {"nl_queries": "What is the number of players who have points less than 30 for each position. ", "db_id": "sports_competition", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Position , count(*) FROM player WHERE points < 30 GROUP BY POSITION", "binning": ""}, "VQL": "Visualize PIE SELECT Position , count(*) FROM player WHERE points < 30 GROUP BY POSITION"}, "hardness": "Medium"}, {"nl_queries": "Show maximal pet age from each pettype, and show from low to high by the total number.", "db_id": "pets_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT PetType , max(pet_age) FROM pets GROUP BY PetType ORDER BY max(pet_age) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT PetType , max(pet_age) FROM pets GROUP BY PetType ORDER BY max(pet_age) ASC"}, "hardness": "Easy"}, {"nl_queries": "Find the number of the name of the project for which a scientist whose name contains \u2018Smith\u2019 is assigned to.", "db_id": "scientist_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT T2.Name , COUNT(T2.Name) FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T3.name LIKE '%Smith%' GROUP BY T2.Name", "binning": ""}, "VQL": "Visualize PIE SELECT T2.Name , COUNT(T2.Name) FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T3.name LIKE '%Smith%' GROUP BY T2.Name"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, return a bar chart about the distribution of phone_number and employee_id , and sort in ascending by the Y.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT PHONE_NUMBER , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY EMPLOYEE_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT PHONE_NUMBER , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY EMPLOYEE_ID ASC"}, "hardness": "Medium"}, {"nl_queries": "Give the name of each department and the number of employees in each. Plot them as bar chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT DEPARTMENT_NAME , COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id GROUP BY T2.department_name", "binning": ""}, "VQL": "Visualize BAR SELECT DEPARTMENT_NAME , COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id GROUP BY T2.department_name"}, "hardness": "Medium"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, return a bar chart about the distribution of job_id and department_id , could you order by the DEPARTMENT_ID in asc please?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY DEPARTMENT_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY DEPARTMENT_ID ASC"}, "hardness": "Medium"}, {"nl_queries": "Give me the trend about the average of Shop_ID over Start_from bin start_from by time, list Start_from in descending order.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Start_from , AVG(Shop_ID) FROM hiring  ORDER BY Start_from DESC", "binning": "BIN Start_from BY YEAR"}, "VQL": "Visualize LINE SELECT Start_from , AVG(Shop_ID) FROM hiring  ORDER BY Start_from DESC BIN Start_from BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "What are the title and maximum price of each film. ", "db_id": "cinema", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title", "binning": ""}, "VQL": "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title"}, "hardness": "Easy"}, {"nl_queries": "Show me a scatter chart for how many documents correspond with each project id?", "db_id": "cre_Docs_and_Epenses", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Project_ID , count(*) FROM Documents GROUP BY project_id", "binning": ""}, "VQL": "Visualize SCATTER SELECT Project_ID , count(*) FROM Documents GROUP BY project_id"}, "hardness": "Easy"}, {"nl_queries": "How many students are advised by each rank of faculty? List the rank and the number of students with a pie chart.", "db_id": "activity_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Rank , count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.rank", "binning": ""}, "VQL": "Visualize PIE SELECT Rank , count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.rank"}, "hardness": "Medium"}, {"nl_queries": "Give me a bar chart shows the distinct registration date, and bin the date into the weekday interval in a bar chart, and sort by the y axis from high to low please.", "db_id": "voter_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Registration_Date , COUNT(Registration_Date) FROM VOTING_RECORD  ORDER BY COUNT(Registration_Date) DESC", "binning": "BIN Registration_Date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Registration_Date , COUNT(Registration_Date) FROM VOTING_RECORD  ORDER BY COUNT(Registration_Date) DESC BIN Registration_Date BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "For all employees who have the letters D or S in their first name, draw a line chart about the change of commission_pct over hire_date , and list in descending by the x-axis please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY HIRE_DATE DESC", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY HIRE_DATE DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "A bar chart listing the number of faults for different description of skills required to fix them, show by the bar in asc.", "db_id": "assets_maintenance", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT skill_description , COUNT(skill_description) FROM Part_Faults AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.part_fault_id = T2.part_fault_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY skill_description ORDER BY skill_description ASC", "binning": ""}, "VQL": "Visualize BAR SELECT skill_description , COUNT(skill_description) FROM Part_Faults AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.part_fault_id = T2.part_fault_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY skill_description ORDER BY skill_description ASC"}, "hardness": "Hard"}, {"nl_queries": "A bar chart about what are the different product names? What is the average product price for each of them?, sort in desc by the y-axis.", "db_id": "cre_Drama_Workshop_Groups", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY avg(Product_Price) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY avg(Product_Price) DESC"}, "hardness": "Medium"}, {"nl_queries": "Give me a histogram for how many students are older than 20 in each dorm?, and could you display by the y axis in descending please?", "db_id": "dorm_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT dorm_name , count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T1.age > 20 GROUP BY T3.dorm_name ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT dorm_name , count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T1.age > 20 GROUP BY T3.dorm_name ORDER BY count(*) DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, visualize a bar chart about the distribution of founder and the sum of code , and group by attribute founder, and I want to order by the x axis from high to low.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T2.Founder DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T2.Founder DESC"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, draw a bar chart about the distribution of headquarter and the sum of revenue , and group by attribute headquarter, I want to rank total number in asc order.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Headquarter , SUM(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY SUM(Revenue) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Headquarter , SUM(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY SUM(Revenue) ASC"}, "hardness": "Hard"}, {"nl_queries": "Find the category descriptions of the products whose descriptions include letter 't', and count them by a bar chart", "db_id": "products_gen_characteristics", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT product_category_description , COUNT(product_category_description) FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code = T2.product_category_code WHERE T2.product_description LIKE '%t%' GROUP BY product_category_description", "binning": ""}, "VQL": "Visualize BAR SELECT product_category_description , COUNT(product_category_description) FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code = T2.product_category_code WHERE T2.product_description LIKE '%t%' GROUP BY product_category_description"}, "hardness": "Extra Hard"}, {"nl_queries": "A bar chart about the number of faults for different fault status of all the faults recoreded in the logs, and rank by the x axis from low to high.", "db_id": "assets_maintenance", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT fault_status , COUNT(fault_status) FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id GROUP BY fault_status ORDER BY fault_status ASC", "binning": ""}, "VQL": "Visualize BAR SELECT fault_status , COUNT(fault_status) FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id GROUP BY fault_status ORDER BY fault_status ASC"}, "hardness": "Hard"}, {"nl_queries": "Show the number of customers for different customer last name in a bar chart.", "db_id": "customers_card_transactions", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT customer_last_name , COUNT(customer_last_name) FROM Customers GROUP BY customer_last_name", "binning": ""}, "VQL": "Visualize BAR SELECT customer_last_name , COUNT(customer_last_name) FROM Customers GROUP BY customer_last_name"}, "hardness": "Easy"}, {"nl_queries": "Draw a bar chart of destination versus the total number ", "db_id": "flight_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT destination , count(*) FROM Flight GROUP BY destination", "binning": ""}, "VQL": "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination"}, "hardness": "Easy"}, {"nl_queries": "For those records from the products and each product's manufacturer, show me about the distribution of name and code , and group by attribute name in a bar chart, and could you show bar in ascending order?", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Name ASC"}, "hardness": "Hard"}, {"nl_queries": "A bar chart showing the number of debates in each venue for those on the affirmative side, and show bar in descending order please.", "db_id": "debate", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Venue , COUNT(Venue) FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID = T2.Debate_ID JOIN people AS T3 ON T1.Affirmative = T3.People_ID GROUP BY Venue ORDER BY Venue DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Venue , COUNT(Venue) FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID = T2.Debate_ID JOIN people AS T3 ON T1.Affirmative = T3.People_ID GROUP BY Venue ORDER BY Venue DESC"}, "hardness": "Hard"}, {"nl_queries": "What is the number of allergy type? Show the proportion.", "db_id": "allergy_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT AllergyType , COUNT(AllergyType) FROM Allergy_type GROUP BY AllergyType", "binning": ""}, "VQL": "Visualize PIE SELECT AllergyType , COUNT(AllergyType) FROM Allergy_type GROUP BY AllergyType"}, "hardness": "Easy"}, {"nl_queries": "What is the minimum price of the rooms for each different decor? Show me a bar chart!", "db_id": "inn_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT decor , min(basePrice) FROM Rooms GROUP BY decor", "binning": ""}, "VQL": "Visualize BAR SELECT decor , min(basePrice) FROM Rooms GROUP BY decor"}, "hardness": "Easy"}, {"nl_queries": "A bar chart about the number of countries for all people whose age is smaller than the average, list in ascending by the x-axis.", "db_id": "wedding", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Country , COUNT(Country) FROM people WHERE age < (SELECT avg(age) FROM people) GROUP BY Country ORDER BY Country ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM people WHERE age < (SELECT avg(age) FROM people) GROUP BY Country ORDER BY Country ASC"}, "hardness": "Hard"}, {"nl_queries": "Give me a histogram for what are the names and ids of the tourist attractions that are visited at most once?, rank by the bars in desc.", "db_id": "cre_Theme_park", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID ORDER BY T1.Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID ORDER BY T1.Name DESC"}, "hardness": "Medium"}, {"nl_queries": "What are the id and name of the stations that have ever had more than 12 bikes available? Plot them as a bar chart, list in descending by the bars.", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , id FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available > 12 ORDER BY name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT name , id FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available > 12 ORDER BY name DESC"}, "hardness": "Hard"}, {"nl_queries": "Visualize a bar chart for which catalog contents has price above 700 dollars? Show their catalog entry names and capacities, order in asc by the y axis please.", "db_id": "product_catalog", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity ASC", "binning": ""}, "VQL": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY capacity ASC"}, "hardness": "Medium"}, {"nl_queries": "Draw a bar chart about the distribution of  Nationality and the amount of Nationality , and group by attribute Nationality.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nationality , COUNT(Nationality) FROM swimmer GROUP BY Nationality", "binning": ""}, "VQL": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM swimmer GROUP BY Nationality"}, "hardness": "Easy"}, {"nl_queries": "For those records from the products and each product's manufacturer, show me about the distribution of name and revenue , and group by attribute name in a bar chart, order in descending by the y-axis.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T2.Revenue DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T2.Revenue DESC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, give me the comparison about commission_pct over the last_name by a bar chart, sort COMMISSION_PCT from low to high order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT LAST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT ASC", "binning": ""}, "VQL": "Visualize BAR SELECT LAST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT ASC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, give me the trend about department_id over hire_date , and could you display by the X-axis in ascending?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC"}, "hardness": "Medium"}, {"nl_queries": "count yearid for visualizing a line chart, and order X-axis in asc order.", "db_id": "baseball_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT yearid , COUNT(yearid) FROM hall_of_fame  ORDER BY yearid ASC", "binning": "BIN yearid BY YEAR"}, "VQL": "Visualize LINE SELECT yearid , COUNT(yearid) FROM hall_of_fame  ORDER BY yearid ASC BIN yearid BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "Visualize a bar chart, the x-axis is the arrival time, and the y-axis is the total number of trains in each arrival time, and order names in descending order please.", "db_id": "railway", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Arrival , COUNT(Arrival) FROM train GROUP BY Arrival ORDER BY Arrival DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Arrival , COUNT(Arrival) FROM train GROUP BY Arrival ORDER BY Arrival DESC"}, "hardness": "Medium"}, {"nl_queries": "What are the countries having at least one car maker? List name and id Visualize by bar chart, sort x-axis in desc order.", "db_id": "car_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT CountryName , CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country ORDER BY CountryName DESC", "binning": ""}, "VQL": "Visualize BAR SELECT CountryName , CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country ORDER BY CountryName DESC"}, "hardness": "Medium"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, find hire_date and the average of manager_id bin hire_date by weekday, and visualize them by a bar chart, display y axis in descending order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(MANAGER_ID) DESC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(MANAGER_ID) DESC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "Show me maximal net worth millions by citizenship in a histogram, sort Y in asc order.", "db_id": "singer", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY max(Net_Worth_Millions) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY max(Net_Worth_Millions) ASC"}, "hardness": "Easy"}, {"nl_queries": "For the sum of Shop_ID,  Start_from, visualize the trend.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Start_from , SUM(Shop_ID) FROM hiring", "binning": "BIN Start_from BY YEAR"}, "VQL": "Visualize LINE SELECT Start_from , SUM(Shop_ID) FROM hiring BIN Start_from BY YEAR"}, "hardness": "Easy"}, {"nl_queries": "Show different publishers together with the number of publications they have. ", "db_id": "book_2", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Publisher , COUNT(*) FROM publication GROUP BY Publisher", "binning": ""}, "VQL": "Visualize PIE SELECT Publisher , COUNT(*) FROM publication GROUP BY Publisher"}, "hardness": "Easy"}, {"nl_queries": "Give me a bar chart showing the number of films for each director, and I want to display by the x-axis in desc please.", "db_id": "cinema", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY Directed_by DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY Directed_by DESC"}, "hardness": "Medium"}, {"nl_queries": "Draw a bar chart of services versus the number of services, and show total number from high to low order.", "db_id": "station_weather", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) DESC"}, "hardness": "Medium"}, {"nl_queries": "Find the number of the category descriptions of the products whose descriptions include letter 't', I want to sort y-axis in descending order.", "db_id": "products_gen_characteristics", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT product_category_description , COUNT(product_category_description) FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code = T2.product_category_code WHERE T2.product_description LIKE '%t%' GROUP BY product_category_description ORDER BY COUNT(product_category_description) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT product_category_description , COUNT(product_category_description) FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code = T2.product_category_code WHERE T2.product_description LIKE '%t%' GROUP BY product_category_description ORDER BY COUNT(product_category_description) DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "Show me a scatter plot of code and minimal price for .", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Code , min(price) FROM products GROUP BY Code", "binning": ""}, "VQL": "Visualize SCATTER SELECT Code , min(price) FROM products GROUP BY Code"}, "hardness": "Easy"}, {"nl_queries": "For each branch id, what are the names of the branches that were registered after 2015 Visualize by bar chart, and sort in ascending by the Name.", "db_id": "shop_membership", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , count(*) FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id WHERE T1.register_year > 2015 GROUP BY T2.branch_id ORDER BY Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , count(*) FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id WHERE T1.register_year > 2015 GROUP BY T2.branch_id ORDER BY Name ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "Bar chart of how many openning year from each openning year, and display by the the number of openning year from high to low.", "db_id": "cinema", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Openning_year , COUNT(Openning_year) FROM cinema GROUP BY Openning_year ORDER BY COUNT(Openning_year) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Openning_year , COUNT(Openning_year) FROM cinema GROUP BY Openning_year ORDER BY COUNT(Openning_year) DESC"}, "hardness": "Medium"}, {"nl_queries": "Bar chart of total number of each rank, and rank X-axis in asc order please.", "db_id": "activity_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Rank , count(Rank) FROM Faculty GROUP BY Rank ORDER BY Rank ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Rank , count(Rank) FROM Faculty GROUP BY Rank ORDER BY Rank ASC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, return a bar chart about the distribution of first_name and manager_id , I want to rank in asc by the y-axis.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT FIRST_NAME , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY MANAGER_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT FIRST_NAME , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY MANAGER_ID ASC"}, "hardness": "Medium"}, {"nl_queries": "Show the number of accounts for different statement details in a bar chart, and rank by the Y-axis from high to low.", "db_id": "cre_Docs_and_Epenses", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Statement_Details , COUNT(Statement_Details) FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id = T2.statement_id GROUP BY Statement_Details ORDER BY COUNT(Statement_Details) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Statement_Details , COUNT(Statement_Details) FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id = T2.statement_id GROUP BY Statement_Details ORDER BY COUNT(Statement_Details) DESC"}, "hardness": "Hard"}, {"nl_queries": "What are the different ids and names of the stations that have had more than 12 bikes available. Plot them as bar chart.", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , id FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available > 12", "binning": ""}, "VQL": "Visualize BAR SELECT name , id FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available > 12"}, "hardness": "Medium"}, {"nl_queries": "Give me a pie to show the total number from different rank.", "db_id": "ship_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Rank , count(*) FROM captain GROUP BY rank", "binning": ""}, "VQL": "Visualize PIE SELECT Rank , count(*) FROM captain GROUP BY rank"}, "hardness": "Easy"}, {"nl_queries": "For directors who had more than one movie, bin the dates of release into Year interval and them compute the total number of movies in each year bucket Show me the result using a line chart, and I want to order by the x-axis from low to high.", "db_id": "movie_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT year , COUNT(year) FROM Movie AS T1 JOIN Movie AS T2 ON T1.director = T2.director WHERE T1.title != T2.title ORDER BY year ASC", "binning": "BIN year BY YEAR"}, "VQL": "Visualize LINE SELECT year , COUNT(year) FROM Movie AS T1 JOIN Movie AS T2 ON T1.director = T2.director WHERE T1.title != T2.title ORDER BY year ASC BIN year BY YEAR"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees who did not have any job in the past, give me the comparison about the average of salary over the  hire_date bin hire_date by weekday by a bar chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, give me the comparison about commission_pct over the last_name by a bar chart, and order bars in desc order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT LAST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY LAST_NAME DESC", "binning": ""}, "VQL": "Visualize BAR SELECT LAST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY LAST_NAME DESC"}, "hardness": "Medium"}, {"nl_queries": "Show the names of singers and the total sales of their songs Visualize by bar chart, and could you display by the y axis from low to high?", "db_id": "singer", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name ORDER BY sum(T2.Sales) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name ORDER BY sum(T2.Sales) ASC"}, "hardness": "Hard"}, {"nl_queries": "Find the number of users in each role. Visualize by pie chart.", "db_id": "document_management", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT role_code , count(*) FROM users GROUP BY role_code", "binning": ""}, "VQL": "Visualize PIE SELECT role_code , count(*) FROM users GROUP BY role_code"}, "hardness": "Easy"}, {"nl_queries": "Draw a bar chart for how many different locations does each school have?", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department", "binning": ""}, "VQL": "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department"}, "hardness": "Medium"}, {"nl_queries": "Give me a histogram for how many documents are there of each type?, and could you rank by the bar from low to high please?", "db_id": "cre_Docs_and_Epenses", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Document_Type_Code , count(*) FROM Documents GROUP BY document_type_code ORDER BY Document_Type_Code ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Document_Type_Code , count(*) FROM Documents GROUP BY document_type_code ORDER BY Document_Type_Code ASC"}, "hardness": "Medium"}, {"nl_queries": "For each policy type, return its type code and its count in the record Visualize by bar chart, and rank the total number from low to high order please.", "db_id": "insurance_and_eClaims", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Policy_Type_Code , count(*) FROM policies GROUP BY policy_type_code ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Policy_Type_Code , count(*) FROM policies GROUP BY policy_type_code ORDER BY count(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "Find the number of the first name of students who are living in the Smith Hall, and display by the bars in desc.", "db_id": "dorm_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Fname , COUNT(Fname) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.dorm_name = 'Smith Hall' GROUP BY Fname ORDER BY Fname DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Fname , COUNT(Fname) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.dorm_name = 'Smith Hall' GROUP BY Fname ORDER BY Fname DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "Bar chart x axis building y axis the average of capacity", "db_id": "college_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT building , avg(capacity) FROM classroom GROUP BY building", "binning": ""}, "VQL": "Visualize BAR SELECT building , avg(capacity) FROM classroom GROUP BY building"}, "hardness": "Easy"}, {"nl_queries": "Give me a bar chart about the number of platforms in different locations", "db_id": "train_station", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Location , SUM(Number_of_Platforms) FROM station GROUP BY Location", "binning": ""}, "VQL": "Visualize BAR SELECT Location , SUM(Number_of_Platforms) FROM station GROUP BY Location"}, "hardness": "Easy"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, give me the comparison about salary over the job_id , and order by the X in descending.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SALARY FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SALARY FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID DESC"}, "hardness": "Medium"}, {"nl_queries": "What is the total number of different types of codes of products?, show x axis from low to high order please.", "db_id": "solvency_ii", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Product_Type_Code , COUNT(Product_Type_Code) FROM Products GROUP BY Product_Type_Code ORDER BY Product_Type_Code ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Product_Type_Code , COUNT(Product_Type_Code) FROM Products GROUP BY Product_Type_Code ORDER BY Product_Type_Code ASC"}, "hardness": "Medium"}, {"nl_queries": "Give me a histogram for how many events are there for each party?", "db_id": "party_people", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id", "binning": ""}, "VQL": "Visualize BAR SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id"}, "hardness": "Medium"}, {"nl_queries": "For each company id, what are the companies and how many gas stations does each one operate Plot them as bar chart, and I want to sort Y in asc order.", "db_id": "gas_company", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Company , count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Company , count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id ORDER BY count(*) ASC"}, "hardness": "Hard"}, {"nl_queries": "Show the name of each party and the corresponding number of delegates from that party in a bar chart, order by the the average of count(*) from low to high please.", "db_id": "election", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Party , AVG(COUNT(*)) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY AVG(COUNT(*)) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Party , AVG(COUNT(*)) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY AVG(COUNT(*)) ASC"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, show me about the correlation between  code and  code  in a scatter chart.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT T1.Code , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code", "binning": ""}, "VQL": "Visualize SCATTER SELECT T1.Code , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code"}, "hardness": "Easy"}, {"nl_queries": "Show id from each meter 300, order by the bars in descending.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_300 , ID FROM swimmer ORDER BY meter_300 DESC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_300 , ID FROM swimmer ORDER BY meter_300 DESC"}, "hardness": "Easy"}, {"nl_queries": "Who are the nominees who were nominated for either of the Bob Fosse or Cleavant Derricks awards, and count them by a bar chart, display x-axis in desc order.", "db_id": "musical", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY Nominee DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY Nominee DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, visualize a bar chart about the distribution of hire_date and the average of salary bin hire_date by weekday, order from high to low by the total number.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(SALARY) DESC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "A bar chart about what is the average price of the products for each category?, and rank product_category_code in ascending order.", "db_id": "customer_complaints", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT product_category_code , avg(product_price) FROM products GROUP BY product_category_code ORDER BY product_category_code ASC", "binning": ""}, "VQL": "Visualize BAR SELECT product_category_code , avg(product_price) FROM products GROUP BY product_category_code ORDER BY product_category_code ASC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, visualize a bar chart about the distribution of  name and the average of manufacturer , and group by attribute name.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name"}, "hardness": "Medium"}, {"nl_queries": "Plot a pie chart to show different nominees and the number of musicals they have been nominated.", "db_id": "musical", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Nominee , COUNT(*) FROM musical GROUP BY Nominee", "binning": ""}, "VQL": "Visualize PIE SELECT Nominee , COUNT(*) FROM musical GROUP BY Nominee"}, "hardness": "Easy"}, {"nl_queries": "Show me a bar chart for what are the names of all genres in alphabetical order, combined with its ratings?", "db_id": "music_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT g_name , rating FROM genre ORDER BY g_name", "binning": ""}, "VQL": "Visualize BAR SELECT g_name , rating FROM genre ORDER BY g_name"}, "hardness": "Easy"}, {"nl_queries": "For those employees who did not have any job in the past, return a bar chart about the distribution of job_id and the average of manager_id , and group by attribute job_id, and I want to order by the bars from low to high.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY JOB_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY JOB_ID ASC"}, "hardness": "Hard"}, {"nl_queries": "List the budget of each department in a bar chart.", "db_id": "department_management", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , Budget_in_Billions FROM department", "binning": ""}, "VQL": "Visualize BAR SELECT Name , Budget_in_Billions FROM department"}, "hardness": "Easy"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, show me about the distribution of job_id and employee_id in a bar chart, I want to show in descending by the bars.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID DESC"}, "hardness": "Medium"}, {"nl_queries": "Plot total number of shop id over start from in a line chart, and could you order in descending by the X?", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Start_from , SUM(Shop_ID) FROM hiring  ORDER BY Start_from DESC", "binning": "BIN Start_from BY YEAR"}, "VQL": "Visualize LINE SELECT Start_from , SUM(Shop_ID) FROM hiring  ORDER BY Start_from DESC BIN Start_from BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "What are the payment dates for any payments that have an amount greater than 10 or were handled by a staff member with the first name Elsa, and count them by a bar chart", "db_id": "sakila_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT payment_date , COUNT(payment_date) FROM payment WHERE amount > 10 UNION SELECT T1.payment_date FROM payment AS T1 JOIN staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = 'Elsa'", "binning": "BIN payment_date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT payment_date , COUNT(payment_date) FROM payment WHERE amount > 10 UNION SELECT T1.payment_date FROM payment AS T1 JOIN staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = 'Elsa' BIN payment_date BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "For all employees who have the letters D or S in their first name, a line chart shows the change of employee_id over hire_date, and list from high to low by the x-axis.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY HIRE_DATE DESC", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY HIRE_DATE DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "How old is the average person for each job. Show a pie chart.", "db_id": "network_2", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT job , avg(age) FROM Person GROUP BY job", "binning": ""}, "VQL": "Visualize PIE SELECT job , avg(age) FROM Person GROUP BY job"}, "hardness": "Easy"}, {"nl_queries": "Find  Time and  meter_100 , and visualize them by a bar chart.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Time , meter_100 FROM swimmer", "binning": ""}, "VQL": "Visualize BAR SELECT Time , meter_100 FROM swimmer"}, "hardness": "Easy"}, {"nl_queries": "Visualize a bar chart for how many players are from each country?", "db_id": "match_season", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Country_name , COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country GROUP BY T1.Country_name", "binning": ""}, "VQL": "Visualize BAR SELECT Country_name , COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country GROUP BY T1.Country_name"}, "hardness": "Medium"}, {"nl_queries": "Give me the trend about the amount of Start_from over  Start_from , and group by attribute Is_full_time and bin start_from by time.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Start_from , COUNT(Start_from) FROM hiring GROUP BY Is_full_time", "binning": "BIN Start_from BY YEAR"}, "VQL": "Visualize LINE SELECT Start_from , COUNT(Start_from) FROM hiring GROUP BY Is_full_time BIN Start_from BY YEAR"}, "hardness": "Hard"}, {"nl_queries": "Show me about the distribution of  All_Neutral and  Team_ID  in a bar chart.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Neutral , Team_ID FROM basketball_match", "binning": ""}, "VQL": "Visualize BAR SELECT All_Neutral , Team_ID FROM basketball_match"}, "hardness": "Easy"}, {"nl_queries": "Stack bar chart of school_id vs All_Home based on acc road, and list y axis in ascending order.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Road , School_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY School_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Road , School_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY School_ID ASC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who was hired before 2002-06-21, give me the comparison about the average of manager_id over the job_id , and group by attribute job_id, order JOB_ID in descending order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC"}, "hardness": "Hard"}, {"nl_queries": "Plot calendar date by how many calendar date as a line chart, list x-axis in descending order please.", "db_id": "cre_Doc_Tracking_DB", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Calendar_Date , COUNT(Calendar_Date) FROM Ref_calendar  ORDER BY Calendar_Date DESC", "binning": "BIN Calendar_Date BY YEAR"}, "VQL": "Visualize LINE SELECT Calendar_Date , COUNT(Calendar_Date) FROM Ref_calendar  ORDER BY Calendar_Date DESC BIN Calendar_Date BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "How many churches open each year? Convert the year into the weekday interval and visualize with a bar chart, and rank total number in desc order.", "db_id": "wedding", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Open_Date , COUNT(Open_Date) FROM Church  ORDER BY COUNT(Open_Date) DESC", "binning": "BIN Open_Date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Open_Date , COUNT(Open_Date) FROM Church  ORDER BY COUNT(Open_Date) DESC BIN Open_Date BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "For all employees who have the letters D or S in their first name, show me about the distribution of job_id and the average of salary , and group by attribute job_id in a bar chart, and could you order y-axis in desc order?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY AVG(SALARY) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY AVG(SALARY) DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "Show the ids and details of the investors who have at least two transactions with type code \"SALE\" with a pie chart.", "db_id": "tracking_share_transactions", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT T1.Investor_details , T1.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.transaction_type_code = \"SALE\"", "binning": ""}, "VQL": "Visualize PIE SELECT T1.Investor_details , T1.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.transaction_type_code = \"SALE\""}, "hardness": "Medium"}, {"nl_queries": "For all employees who have the letters D or S in their first name, a line chart shows the trend of  salary over  hire_date .", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , SALARY FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'"}, "hardness": "Hard"}, {"nl_queries": "List the budget of each department in a bar chart, sort by the Y-axis from high to low please.", "db_id": "department_management", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , Budget_in_Billions FROM department ORDER BY Budget_in_Billions DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , Budget_in_Billions FROM department ORDER BY Budget_in_Billions DESC"}, "hardness": "Easy"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, give me the comparison about the sum of manager_id over the job_id , and group by attribute job_id by a bar chart, could you show in desc by the x axis please?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "What is the total population corresponding to continents that have an average life expectancy of less than 72? Visualize them in a bar chart.", "db_id": "world_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Continent , sum(Population) FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72", "binning": ""}, "VQL": "Visualize BAR SELECT Continent , sum(Population) FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72"}, "hardness": "Medium"}, {"nl_queries": "Draw a bar chart about the distribution of ACC_Regular_Season and Team_ID , and could you order from low to high by the X-axis please?", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY ACC_Regular_Season ASC", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY ACC_Regular_Season ASC"}, "hardness": "Easy"}, {"nl_queries": "Return a bar chart about the distribution of  dept_name and the amount of dept_name , and group by attribute dept_name.", "db_id": "college_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT dept_name , COUNT(dept_name) FROM instructor GROUP BY dept_name ORDER BY salary", "binning": ""}, "VQL": "Visualize BAR SELECT dept_name , COUNT(dept_name) FROM instructor GROUP BY dept_name ORDER BY salary"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, show me about the distribution of name and manufacturer , and group by attribute headquarter in a bar chart, I want to order by the X in desc.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter , T1.Name ORDER BY T1.Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter , T1.Name ORDER BY T1.Name DESC"}, "hardness": "Hard"}, {"nl_queries": "Which ministers are not a part of the Progress Party, and count them by a pie chart", "db_id": "party_people", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister", "binning": ""}, "VQL": "Visualize PIE SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister"}, "hardness": "Medium"}, {"nl_queries": "Display a bar chart for how many faculty members participate in each activity? Return the activity names and the number of faculty members, and sort in ascending by the x-axis.", "db_id": "activity_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT activity_name , count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID ORDER BY activity_name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT activity_name , count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID ORDER BY activity_name ASC"}, "hardness": "Hard"}, {"nl_queries": "How many faculty members do we have for each rank? Show bar chart, order from low to high by the y axis please.", "db_id": "activity_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Rank , count(Rank) FROM Faculty GROUP BY Rank ORDER BY count(Rank) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Rank , count(Rank) FROM Faculty GROUP BY Rank ORDER BY count(Rank) ASC"}, "hardness": "Medium"}, {"nl_queries": "How many accounts for each customer? Show a bar chart that groups by customer's first name, sort by the the total number in ascending.", "db_id": "customers_and_invoices", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT customer_first_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT customer_first_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC"}, "hardness": "Hard"}, {"nl_queries": "Stacked bar chart of the number of start from for with each Is_full_time in each start from", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Start_from , COUNT(Start_from) FROM hiring GROUP BY Is_full_time", "binning": "BIN Start_from BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Start_from , COUNT(Start_from) FROM hiring GROUP BY Is_full_time BIN Start_from BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "For those employees who did not have any job in the past, find hire_date and the average of manager_id bin hire_date by weekday, and visualize them by a bar chart, show by the y-axis from high to low.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(MANAGER_ID) DESC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(MANAGER_ID) DESC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "Draw a scatter chart to show the star rating of the movie and the smallest rating of movie.", "db_id": "movie_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT stars , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY stars", "binning": ""}, "VQL": "Visualize SCATTER SELECT stars , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY stars"}, "hardness": "Easy"}, {"nl_queries": "Find the names of catalog entries with level number 8, and count them by a bar chart, and rank in descending by the y axis.", "db_id": "product_catalog", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT catalog_entry_name , COUNT(catalog_entry_name) FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id WHERE t2.catalog_level_number = \"8\" GROUP BY catalog_entry_name ORDER BY COUNT(catalog_entry_name) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT catalog_entry_name , COUNT(catalog_entry_name) FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id WHERE t2.catalog_level_number = \"8\" GROUP BY catalog_entry_name ORDER BY COUNT(catalog_entry_name) DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "How many competitions are held in each city? Draw a bar chart, and could you display bar in descending order?", "db_id": "farm", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Official_Name , COUNT(Official_Name) FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY Official_Name ORDER BY Official_Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Official_Name , COUNT(Official_Name) FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY Official_Name ORDER BY Official_Name DESC"}, "hardness": "Hard"}, {"nl_queries": "A bar chart for what are the number of the invoice dates for customers with the first name Astrid and the last name Gruber?", "db_id": "chinook_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT InvoiceDate , COUNT(InvoiceDate) FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.FirstName = \"Astrid\" AND LastName = \"Gruber\"", "binning": "BIN InvoiceDate BY YEAR"}, "VQL": "Visualize BAR SELECT InvoiceDate , COUNT(InvoiceDate) FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.FirstName = \"Astrid\" AND LastName = \"Gruber\" BIN InvoiceDate BY YEAR"}, "hardness": "Hard"}, {"nl_queries": "Find the number of students for the cities where have more than one student, and sort by the X-axis from high to low.", "db_id": "dorm_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT city_code , count(*) FROM student GROUP BY city_code ORDER BY city_code DESC", "binning": ""}, "VQL": "Visualize BAR SELECT city_code , count(*) FROM student GROUP BY city_code ORDER BY city_code DESC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about the average of code over the  headquarter , and group by attribute headquarter by a bar chart.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter"}, "hardness": "Medium"}, {"nl_queries": "Which committees have delegates from the Democratic party, and count them by a bar chart, and I want to show bar in asc order.", "db_id": "election", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee ORDER BY Committee ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee ORDER BY Committee ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "What is the total number of captains in each rank and class? Let class as X-axis, and categorize by rank with a stacked bar chart.", "db_id": "ship_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class", "binning": ""}, "VQL": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class"}, "hardness": "Hard"}, {"nl_queries": "Create a bar chart showing all_games_percent across acc regular season, rank X-axis in desc order.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY ACC_Regular_Season DESC", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY ACC_Regular_Season DESC"}, "hardness": "Easy"}, {"nl_queries": "Return a pie on how many departments are in each school?", "db_id": "college_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department", "binning": ""}, "VQL": "Visualize PIE SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department"}, "hardness": "Medium"}, {"nl_queries": "Show the total number of the first year of parties with the theme \"Spring\" or \"Teqnology\" with a bar chart, bin the first year into weekday interval and count the first year, and I want to display y axis from low to high order.", "db_id": "party_host", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT First_year , COUNT(First_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\"  ORDER BY COUNT(First_year) ASC", "binning": "BIN First_year BY WEEKDAY"}, "VQL": "Visualize BAR SELECT First_year , COUNT(First_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\"  ORDER BY COUNT(First_year) ASC BIN First_year BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "Return a pie chart on what are the memories and carriers of phones?", "db_id": "phone_market", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Carrier , SUM(Memory_in_G) FROM phone GROUP BY Carrier", "binning": ""}, "VQL": "Visualize PIE SELECT Carrier , SUM(Memory_in_G) FROM phone GROUP BY Carrier"}, "hardness": "Easy"}, {"nl_queries": "Bin the hire date into the day of week interval, and then calculate the average salary of employees in each day for a bar chart, note that just select those employees without the letter M in their first name.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE first_name NOT LIKE '%M%'", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE first_name NOT LIKE '%M%' BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "Give me the comparison about Team_ID over the ACC_Regular_Season by a bar chart, sort x axis in asc order.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY ACC_Regular_Season ASC", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY ACC_Regular_Season ASC"}, "hardness": "Easy"}, {"nl_queries": "For those records from the products and each product's manufacturer, show me about the distribution of  name and the average of price , and group by attribute name in a bar chart.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name"}, "hardness": "Medium"}, {"nl_queries": "Find the number of students who are not in the largest major and group by students' first name in a bar chart, and rank from high to low by the y axis.", "db_id": "dorm_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Fname , COUNT(Fname) FROM student WHERE major != (SELECT major FROM student) GROUP BY Fname ORDER BY COUNT(Fname) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Fname , COUNT(Fname) FROM student WHERE major != (SELECT major FROM student) GROUP BY Fname ORDER BY COUNT(Fname) DESC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who was hired before 2002-06-21, visualize a line chart about the change of department_id over hire_date , and could you list in descending by the X-axis?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE DESC", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE DESC"}, "hardness": "Medium"}, {"nl_queries": "Return a pie chart on what are the types of competition and number of competitions for that type?", "db_id": "sports_competition", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Competition_type , COUNT(*) FROM competition GROUP BY Competition_type", "binning": ""}, "VQL": "Visualize PIE SELECT Competition_type , COUNT(*) FROM competition GROUP BY Competition_type"}, "hardness": "Easy"}, {"nl_queries": "Show me a bar chart for how many players are there for each hand type?, sort by the x-axis in ascending.", "db_id": "wta_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT hand , count(*) FROM players GROUP BY hand ORDER BY hand ASC", "binning": ""}, "VQL": "Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand ORDER BY hand ASC"}, "hardness": "Medium"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, visualize a bar chart about the distribution of hire_date and the sum of manager_id bin hire_date by weekday, and display by the total number of manager id in ascending.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(MANAGER_ID) ASC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(MANAGER_ID) ASC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees who was hired before 2002-06-21, find hire_date and the average of salary bin hire_date by weekday, and visualize them by a bar chart, list y axis from low to high order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(SALARY) ASC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, visualize a bar chart about the distribution of name and price , and group by attribute headquarter, and rank by the X in desc.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter , T1.Name ORDER BY T1.Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter , T1.Name ORDER BY T1.Name DESC"}, "hardness": "Hard"}, {"nl_queries": "Bin the hire date into Month interval, and then compute the average salary of employees in each month for a bar chart, note that just select those employees without the letter M in their first name, and sort the average of salary in asc order please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE first_name NOT LIKE '%M%'  ORDER BY AVG(SALARY) ASC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE first_name NOT LIKE '%M%'  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH"}, "hardness": "Extra Hard"}, {"nl_queries": "Stacked bar chart of the total number for with each Sex in each rank", "db_id": "activity_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Rank , count(*) FROM Faculty GROUP BY Sex ,  Rank", "binning": ""}, "VQL": "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY Sex ,  Rank"}, "hardness": "Hard"}, {"nl_queries": "Show the average share count of transactions each each investor, ordered by average share count. Visualize by scatter chart.", "db_id": "tracking_share_transactions", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT investor_id , avg(share_count) FROM TRANSACTIONS GROUP BY investor_id ORDER BY avg(share_count)", "binning": ""}, "VQL": "Visualize SCATTER SELECT investor_id , avg(share_count) FROM TRANSACTIONS GROUP BY investor_id ORDER BY avg(share_count)"}, "hardness": "Medium"}, {"nl_queries": "Please give me a bar chart showing institution types, along with the total enrollment for each type, and show Y-axis from low to high order.", "db_id": "protein_institute", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Type , sum(enrollment) FROM institution GROUP BY TYPE ORDER BY sum(enrollment) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Type , sum(enrollment) FROM institution GROUP BY TYPE ORDER BY sum(enrollment) ASC"}, "hardness": "Medium"}, {"nl_queries": "Give me the comparison about the sum of Instructor over the  Days , and group by attribute Days by a bar chart.", "db_id": "college_3", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Days , SUM(Instructor) FROM COURSE GROUP BY Days ORDER BY Credits", "binning": ""}, "VQL": "Visualize BAR SELECT Days , SUM(Instructor) FROM COURSE GROUP BY Days ORDER BY Credits"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, show me about the distribution of  name and the sum of manufacturer , and group by attribute name in a bar chart.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name"}, "hardness": "Medium"}, {"nl_queries": "Create a pie chart showing the total number across competition.", "db_id": "city_record", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Competition , count(*) FROM MATCH GROUP BY Competition", "binning": ""}, "VQL": "Visualize PIE SELECT Competition , count(*) FROM MATCH GROUP BY Competition"}, "hardness": "Easy"}, {"nl_queries": "How many courses are in the Psychology department in each year? Show a group line chart grouping by semester.", "db_id": "college_2", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT year , COUNT(year) FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' GROUP BY semester ORDER BY T1.title", "binning": "BIN year BY YEAR"}, "VQL": "Visualize LINE SELECT year , COUNT(year) FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' GROUP BY semester ORDER BY T1.title BIN year BY YEAR"}, "hardness": "Extra Hard"}, {"nl_queries": "Give me a bar chart for the total number of each product type code, and list in descending by the Y-axis.", "db_id": "solvency_ii", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Product_Type_Code , COUNT(*) FROM Products GROUP BY Product_Type_Code ORDER BY COUNT(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Product_Type_Code , COUNT(*) FROM Products GROUP BY Product_Type_Code ORDER BY COUNT(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, return a bar chart about the distribution of name and the average of manufacturer , and group by attribute name, and order y-axis in descending order.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Manufacturer DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Manufacturer DESC"}, "hardness": "Hard"}, {"nl_queries": "Return me a line chart to show the frequency of the year attribute by binning into a weekday interval, I want to display X-axis from low to high order.", "db_id": "baseball_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT year , COUNT(year) FROM home_game  ORDER BY year ASC", "binning": "BIN year BY YEAR"}, "VQL": "Visualize LINE SELECT year , COUNT(year) FROM home_game  ORDER BY year ASC BIN year BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "What are the number of the descriptions of the categories that products with product descriptions that contain the letter t are in?, I want to display by the names in descending please.", "db_id": "products_gen_characteristics", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT product_category_description , COUNT(product_category_description) FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code = T2.product_category_code WHERE T2.product_description LIKE '%t%' GROUP BY product_category_description ORDER BY product_category_description DESC", "binning": ""}, "VQL": "Visualize BAR SELECT product_category_description , COUNT(product_category_description) FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code = T2.product_category_code WHERE T2.product_description LIKE '%t%' GROUP BY product_category_description ORDER BY product_category_description DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "Compare the average age of drivers from the same home city with a bar chart, display bars in ascending order please.", "db_id": "school_bus", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Home_city , AVG(Age) FROM driver GROUP BY Home_city ORDER BY Home_city ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Home_city , AVG(Age) FROM driver GROUP BY Home_city ORDER BY Home_city ASC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, visualize a bar chart about the distribution of  headquarter and the amount of headquarter , and group by attribute headquarter.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Headquarter , COUNT(Headquarter) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter", "binning": ""}, "VQL": "Visualize BAR SELECT Headquarter , COUNT(Headquarter) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter"}, "hardness": "Medium"}, {"nl_queries": "For each type, how many ships are there Plot them as bar chart, list from high to low by the total number please.", "db_id": "ship_mission", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "A bar chart for what are the number of the countries of mountains with height bigger than 5000?, order by the Y-axis in asc.", "db_id": "climbing", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) ASC"}, "hardness": "Hard"}, {"nl_queries": "Show the name of track and the number of races in each track Visualize by bar chart, and could you order y-axis from low to high order?", "db_id": "race_track", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id ORDER BY count(*) ASC"}, "hardness": "Hard"}, {"nl_queries": "Show the number of documents in different ending date and bin ending date by weekday with a bar chart.", "db_id": "cre_Doc_Tracking_DB", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations", "binning": "BIN Date_in_Locaton_To BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations BIN Date_in_Locaton_To BY WEEKDAY"}, "hardness": "Easy"}, {"nl_queries": "For those employees who was hired before 2002-06-21, find hire_date and the sum of employee_id bin hire_date by weekday, and visualize them by a bar chart, and I want to display in asc by the y axis.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(EMPLOYEE_ID) ASC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, find name and the average of revenue , and group by attribute name, and visualize them by a bar chart, could you display from high to low by the names?", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC"}, "hardness": "Hard"}, {"nl_queries": "For each branch id, what are the names of the branches that were registered after 2015 Visualize by bar chart, could you order the total number in asc order?", "db_id": "shop_membership", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , count(*) FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id WHERE T1.register_year > 2015 GROUP BY T2.branch_id ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , count(*) FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id WHERE T1.register_year > 2015 GROUP BY T2.branch_id ORDER BY count(*) ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "Return a pie chart showing how many members have visited for each college.", "db_id": "decoration_competition", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT T1.Name , COUNT(T1.Name) FROM college AS T1 JOIN member AS T2 ON T1.College_ID = T2.College_ID GROUP BY T1.Name", "binning": ""}, "VQL": "Visualize PIE SELECT T1.Name , COUNT(T1.Name) FROM college AS T1 JOIN member AS T2 ON T1.College_ID = T2.College_ID GROUP BY T1.Name"}, "hardness": "Medium"}, {"nl_queries": "Visualize a bar chart for what are the average ages for male and female students?, could you rank from high to low by the names?", "db_id": "allergy_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Sex , avg(age) FROM Student GROUP BY sex ORDER BY Sex DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Sex , avg(age) FROM Student GROUP BY sex ORDER BY Sex DESC"}, "hardness": "Medium"}, {"nl_queries": "Find the number of professors in each office with a bar chart, show by the x axis in asc please.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT PROF_OFFICE , COUNT(PROF_OFFICE) FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num = T2.emp_num GROUP BY PROF_OFFICE ORDER BY PROF_OFFICE ASC", "binning": ""}, "VQL": "Visualize BAR SELECT PROF_OFFICE , COUNT(PROF_OFFICE) FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num = T2.emp_num GROUP BY PROF_OFFICE ORDER BY PROF_OFFICE ASC"}, "hardness": "Hard"}, {"nl_queries": "Return a bar chart about the number of companies for each industry.", "db_id": "company_employee", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Industry , COUNT(Industry) FROM company GROUP BY Industry", "binning": ""}, "VQL": "Visualize BAR SELECT Industry , COUNT(Industry) FROM company GROUP BY Industry"}, "hardness": "Easy"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, a bar chart shows the distribution of hire_date and the sum of salary bin hire_date by weekday, rank from high to low by the y axis.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(SALARY) DESC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, for department_id, hire_date, visualize the trend, I want to sort by the X-axis from low to high.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC"}, "hardness": "Hard"}, {"nl_queries": "A bar chart for what are the number of the first names of all students in Smith Hall?, and could you display by the Fname from high to low?", "db_id": "dorm_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Fname , COUNT(Fname) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.dorm_name = 'Smith Hall' GROUP BY Fname ORDER BY Fname DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Fname , COUNT(Fname) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.dorm_name = 'Smith Hall' GROUP BY Fname ORDER BY Fname DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "Return a bar chart about the distribution of  Name and  Weight .", "db_id": "candidate_poll", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , Weight FROM people", "binning": ""}, "VQL": "Visualize BAR SELECT Name , Weight FROM people"}, "hardness": "Easy"}, {"nl_queries": "What are the memories and carriers of phones, rank X-axis in descending order.", "db_id": "phone_market", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Carrier , SUM(Memory_in_G) FROM phone GROUP BY Carrier ORDER BY Carrier DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Carrier , SUM(Memory_in_G) FROM phone GROUP BY Carrier ORDER BY Carrier DESC"}, "hardness": "Medium"}, {"nl_queries": "Plot date of latest revision by the number of date of latest revision as a line chart, and list date_of_latest_revision from high to low order.", "db_id": "product_catalog", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY date_of_latest_revision DESC", "binning": "BIN date_of_latest_revision BY MONTH"}, "VQL": "Visualize LINE SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY date_of_latest_revision DESC BIN date_of_latest_revision BY MONTH"}, "hardness": "Medium"}, {"nl_queries": "Show the names of editors that are on the committee of journals with sales bigger than 3000, and count them by a pie chart", "db_id": "journal_committee", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000 GROUP BY Name", "binning": ""}, "VQL": "Visualize PIE SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000 GROUP BY Name"}, "hardness": "Hard"}, {"nl_queries": "How many eliminations did each team have Visualize by bar chart, and rank by the y-axis in ascending.", "db_id": "wrestler", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Team , COUNT(*) FROM elimination GROUP BY Team ORDER BY COUNT(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Team , COUNT(*) FROM elimination GROUP BY Team ORDER BY COUNT(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "What are the number of the actual delivery dates of orders with quantity 1?", "db_id": "cre_Drama_Workshop_Groups", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID = T2.Order_ID WHERE T2.Order_Quantity = 1", "binning": "BIN Actual_Delivery_Date BY YEAR"}, "VQL": "Visualize LINE SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID = T2.Order_ID WHERE T2.Order_Quantity = 1 BIN Actual_Delivery_Date BY YEAR"}, "hardness": "Hard"}, {"nl_queries": "Bar chart x axis hand y axis the total number, display by the x axis from low to high.", "db_id": "wta_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT hand , count(*) FROM players GROUP BY hand ORDER BY hand ASC", "binning": ""}, "VQL": "Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand ORDER BY hand ASC"}, "hardness": "Medium"}, {"nl_queries": "Give me the comparison about ACC_Percent over the ACC_Regular_Season , and rank in asc by the bar.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match ORDER BY ACC_Regular_Season ASC", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match ORDER BY ACC_Regular_Season ASC"}, "hardness": "Easy"}, {"nl_queries": "A bar chart for what are the number of the dates when customers with ids between 10 and 20 became customers?, display by the y-axis in descending.", "db_id": "customers_and_addresses", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_became_customer , COUNT(date_became_customer) FROM customers WHERE customer_id BETWEEN 10 AND 20  ORDER BY COUNT(date_became_customer) DESC", "binning": "BIN date_became_customer BY MONTH"}, "VQL": "Visualize BAR SELECT date_became_customer , COUNT(date_became_customer) FROM customers WHERE customer_id BETWEEN 10 AND 20  ORDER BY COUNT(date_became_customer) DESC BIN date_became_customer BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "Bar chart x axis location y axis how many location, and rank by the bars in asc.", "db_id": "performance_attendance", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Location , COUNT(Location) FROM performance GROUP BY Location ORDER BY Location ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Location , COUNT(Location) FROM performance GROUP BY Location ORDER BY Location ASC"}, "hardness": "Medium"}, {"nl_queries": "Show the number of teachers of each course with a bar chart, list x-axis from low to high order.", "db_id": "course_teach", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Course , COUNT(Course) FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID GROUP BY Course ORDER BY Course ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Course , COUNT(Course) FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID GROUP BY Course ORDER BY Course ASC"}, "hardness": "Hard"}, {"nl_queries": "Count the number of programs broadcast for each time section of a day in a bar chart, sort names from low to high order.", "db_id": "program_share", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Time_of_day , count(*) FROM broadcast GROUP BY time_of_day ORDER BY Time_of_day ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Time_of_day , count(*) FROM broadcast GROUP BY time_of_day ORDER BY Time_of_day ASC"}, "hardness": "Medium"}, {"nl_queries": "Visualize a pie chart about the proportion of  ACC_Road and the sum of School_ID.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT ACC_Road , SUM(School_ID) FROM basketball_match GROUP BY ACC_Road", "binning": ""}, "VQL": "Visualize PIE SELECT ACC_Road , SUM(School_ID) FROM basketball_match GROUP BY ACC_Road"}, "hardness": "Easy"}, {"nl_queries": "List the number of treatments in each day with a line chart that groups by date of treatment, and rank X in ascending order please.", "db_id": "dog_kennels", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date_of_treatment , COUNT(date_of_treatment) FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id GROUP BY date_of_treatment ORDER BY date_of_treatment ASC", "binning": ""}, "VQL": "Visualize LINE SELECT date_of_treatment , COUNT(date_of_treatment) FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id GROUP BY date_of_treatment ORDER BY date_of_treatment ASC"}, "hardness": "Hard"}, {"nl_queries": "Show all payment method codes and the number of orders for each code in a bar chart, show by the y axis from low to high please.", "db_id": "cre_Drama_Workshop_Groups", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, draw a bar chart about the distribution of  name and the sum of code , and group by attribute name.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name"}, "hardness": "Medium"}, {"nl_queries": "Display a pie chart for what are the names and average prices of products for manufacturers whose products cost on average 150 or more?", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT T2.Name , avg(T1.Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.name", "binning": ""}, "VQL": "Visualize PIE SELECT T2.Name , avg(T1.Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.name"}, "hardness": "Medium"}, {"nl_queries": "Show the race class and number of races in each class with a bar chart, and list by the y-axis from high to low.", "db_id": "race_track", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY count(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "Show me a bar chart for how many matches were played in each year?, and display x-axis in asc order.", "db_id": "wta_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY year ASC", "binning": ""}, "VQL": "Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR ORDER BY year ASC"}, "hardness": "Medium"}, {"nl_queries": "What is the relationship between age and weight of the dogs who have been abandoned? Return a group scatter chart that groups by dog's name.", "db_id": "dog_kennels", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT age , weight FROM Dogs WHERE abandoned_yn = 1 GROUP BY name", "binning": ""}, "VQL": "Visualize SCATTER SELECT age , weight FROM Dogs WHERE abandoned_yn = 1 GROUP BY name"}, "hardness": "Medium"}, {"nl_queries": "Return a histogram on what are the titles and ids for albums containing tracks with unit price greater than 1?, and display by the Y from high to low please.", "db_id": "chinook_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.AlbumId DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.AlbumId DESC"}, "hardness": "Hard"}, {"nl_queries": "Use a stacked bar chart to show how many films for each title and each type. The x-axis is title.", "db_id": "film_rank", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Title , COUNT(Title) FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID GROUP BY Type ,  Title", "binning": ""}, "VQL": "Visualize BAR SELECT Title , COUNT(Title) FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID GROUP BY Type ,  Title"}, "hardness": "Hard"}, {"nl_queries": "What is the total number of flags of ships that do not have a captain with the rank of Midshipman? Show the result using a bar chart, and rank by the X-axis in descending.", "db_id": "ship_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Flag , COUNT(Flag) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank = 'Midshipman') GROUP BY Flag ORDER BY Flag DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Flag , COUNT(Flag) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank = 'Midshipman') GROUP BY Flag ORDER BY Flag DESC"}, "hardness": "Hard"}, {"nl_queries": "how many regions were affected by each storm?, display x-axis in asc order.", "db_id": "storm_record", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , count(*) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id ORDER BY Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , count(*) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id ORDER BY Name ASC"}, "hardness": "Hard"}, {"nl_queries": "What are the number of the descriptions of the categories that products with product descriptions that contain the letter t are in?", "db_id": "products_gen_characteristics", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT product_category_description , COUNT(product_category_description) FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code = T2.product_category_code WHERE T2.product_description LIKE '%t%' GROUP BY product_category_description", "binning": ""}, "VQL": "Visualize PIE SELECT product_category_description , COUNT(product_category_description) FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code = T2.product_category_code WHERE T2.product_description LIKE '%t%' GROUP BY product_category_description"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees who did not have any job in the past, return a bar chart about the distribution of hire_date and the average of salary bin hire_date by time, and show in asc by the Y-axis please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(SALARY) ASC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, draw a bar chart about the distribution of founder and the average of code , and group by attribute founder, rank y-axis in asc order.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code ASC"}, "hardness": "Hard"}, {"nl_queries": "List the state names and the number of customers living in each state, and order by the bars from low to high please.", "db_id": "customer_deliveries", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT state_province_county , count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id = t2.address_id GROUP BY t2.state_province_county ORDER BY state_province_county ASC", "binning": ""}, "VQL": "Visualize BAR SELECT state_province_county , count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id = t2.address_id GROUP BY t2.state_province_county ORDER BY state_province_county ASC"}, "hardness": "Hard"}, {"nl_queries": "Visualize a bar chart about the distribution of  Start_from and the sum of Employee_ID , and group by attribute Is_full_time and bin start_from by weekday.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time", "binning": "BIN Start_from BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time BIN Start_from BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "How many invoices were billed from each state Plot them as bar chart, and rank by the the total number in descending please.", "db_id": "store_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC"}, "hardness": "Hard"}, {"nl_queries": "List the name for storms and the number of affected regions for each storm, order by the y-axis from high to low.", "db_id": "storm_record", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , count(*) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , count(*) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id ORDER BY count(*) DESC"}, "hardness": "Hard"}, {"nl_queries": "Show all paragraph texts for the document \"Customer reviews\", and count them by a bar chart, and show Paragraph_Text from high to low order.", "db_id": "cre_Doc_Template_Mgt", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Paragraph_Text , COUNT(Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = \"Customer reviews\" GROUP BY Paragraph_Text ORDER BY Paragraph_Text DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Paragraph_Text , COUNT(Paragraph_Text) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = \"Customer reviews\" GROUP BY Paragraph_Text ORDER BY Paragraph_Text DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "Find  All_Home and  School_ID , and group by attribute ACC_Road, and visualize them by a bar chart.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home", "binning": ""}, "VQL": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home"}, "hardness": "Extra Hard"}, {"nl_queries": "Show the trend about the number of attendance at home games change over the years, bin year into year interval, order year in ascending order please.", "db_id": "baseball_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT year , SUM(attendance) FROM home_game ORDER BY year ASC", "binning": "BIN year BY YEAR"}, "VQL": "Visualize LINE SELECT year , SUM(attendance) FROM home_game ORDER BY year ASC BIN year BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, draw a bar chart about the distribution of founder and the average of code , and group by attribute founder, display in ascending by the X please.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T2.Founder ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T2.Founder ASC"}, "hardness": "Hard"}, {"nl_queries": "How many singers are from each country. Visualize by pie chart.", "db_id": "concert_singer", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Country , count(*) FROM singer GROUP BY country", "binning": ""}, "VQL": "Visualize PIE SELECT Country , count(*) FROM singer GROUP BY country"}, "hardness": "Easy"}, {"nl_queries": "What is the project id and detail for the project with at least two documents Plot them as bar chart, and sort in ascending by the X-axis.", "db_id": "cre_Docs_and_Epenses", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id ORDER BY T1.Project_Details ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id ORDER BY T1.Project_Details ASC"}, "hardness": "Medium"}, {"nl_queries": "Compute the total the total number across nationality as a pie chart.", "db_id": "pilot_record", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality", "binning": ""}, "VQL": "Visualize PIE SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality"}, "hardness": "Easy"}, {"nl_queries": "What are the nationalities and the taotal ages of journalists Visualize by a bar chart, sort y-axis from low to high order.", "db_id": "news_report", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY SUM(Age) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY SUM(Age) ASC"}, "hardness": "Medium"}, {"nl_queries": "Show how many courses in 2008 for every instructor with a bar chart, display from high to low by the x axis.", "db_id": "college_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , COUNT(name) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 GROUP BY name ORDER BY name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT name , COUNT(name) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 GROUP BY name ORDER BY name DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "Show me about the distribution of  date_address_to and the average of monthly_rental , and group by attribute other_details and bin date_address_to by weekday in a bar chart.", "db_id": "behavior_monitoring", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC", "binning": "BIN date_address_to BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "Find the number of the latest logon date of the students whose family name is \"Jaskolski\" or \"Langosh\", and sort in descending by the Y please.", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_of_latest_logon , COUNT(date_of_latest_logon) FROM Students WHERE family_name = \"Jaskolski\" OR family_name = \"Langosh\"  ORDER BY COUNT(date_of_latest_logon) DESC", "binning": "BIN date_of_latest_logon BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_of_latest_logon , COUNT(date_of_latest_logon) FROM Students WHERE family_name = \"Jaskolski\" OR family_name = \"Langosh\"  ORDER BY COUNT(date_of_latest_logon) DESC BIN date_of_latest_logon BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "How many buildings are managed by \"Kyle\"? Return a bar chart grouping by apartment type codes.", "db_id": "apartment_rentals", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT apt_type_code , COUNT(apt_type_code) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T1.building_manager = \"Kyle\" GROUP BY apt_type_code", "binning": ""}, "VQL": "Visualize BAR SELECT apt_type_code , COUNT(apt_type_code) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T1.building_manager = \"Kyle\" GROUP BY apt_type_code"}, "hardness": "Hard"}, {"nl_queries": "Bar chart of how many local authority from each local authority, and could you order names in descending order?", "db_id": "station_weather", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT local_authority , COUNT(local_authority) FROM station GROUP BY local_authority ORDER BY local_authority DESC", "binning": ""}, "VQL": "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY local_authority ORDER BY local_authority DESC"}, "hardness": "Medium"}, {"nl_queries": "Return the ids and details corresponding to projects for which there are more than two documents Show bar chart, could you show by the X in desc?", "db_id": "cre_Docs_and_Epenses", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id ORDER BY T1.Project_Details DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id ORDER BY T1.Project_Details DESC"}, "hardness": "Medium"}, {"nl_queries": "Plot total number of memory in g by grouped by carrier as a bar graph, and I want to list by the y axis from high to low.", "db_id": "phone_market", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Carrier , SUM(Memory_in_G) FROM phone GROUP BY Carrier ORDER BY SUM(Memory_in_G) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Carrier , SUM(Memory_in_G) FROM phone GROUP BY Carrier ORDER BY SUM(Memory_in_G) DESC"}, "hardness": "Medium"}, {"nl_queries": "what is the average price for each type of product?, and order y axis from low to high order.", "db_id": "department_store", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT product_type_code , avg(product_price) FROM products GROUP BY product_type_code ORDER BY avg(product_price) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT product_type_code , avg(product_price) FROM products GROUP BY product_type_code ORDER BY avg(product_price) ASC"}, "hardness": "Medium"}, {"nl_queries": "For each continent where the average life expectancy is shorter than 72, show their total population with a bar chart, and list by the X-axis from low to high.", "db_id": "world_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Continent , sum(Population) FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72 ORDER BY Continent ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Continent , sum(Population) FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72 ORDER BY Continent ASC"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, return a bar chart about the distribution of  founder and the average of code , and group by attribute founder.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, visualize a bar chart about the distribution of  name and the amount of name , and group by attribute name.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name"}, "hardness": "Medium"}, {"nl_queries": "Return a histogram on how many students are in each department?, and sort in desc by the Y-axis.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY count(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, a line chart shows the change of  commission_pct over  hire_date ", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees who did not have any job in the past, visualize a bar chart about the distribution of job_id and the average of department_id , and group by attribute job_id, display by the total number in asc.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY AVG(DEPARTMENT_ID) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY AVG(DEPARTMENT_ID) ASC"}, "hardness": "Hard"}, {"nl_queries": "Find the number of male students (with sex M) from each city in a bar chart, display from high to low by the X.", "db_id": "dorm_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT city_code , count(*) FROM student WHERE sex = 'M' GROUP BY city_code ORDER BY city_code DESC", "binning": ""}, "VQL": "Visualize BAR SELECT city_code , count(*) FROM student WHERE sex = 'M' GROUP BY city_code ORDER BY city_code DESC"}, "hardness": "Hard"}, {"nl_queries": "Visualize the relationship between  ID and  salary .", "db_id": "college_2", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT ID , salary FROM instructor ORDER BY salary", "binning": ""}, "VQL": "Visualize SCATTER SELECT ID , salary FROM instructor ORDER BY salary"}, "hardness": "Easy"}, {"nl_queries": "Please give me a bar chart showing institution types, along with the total enrollment for each type.", "db_id": "protein_institute", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Type , sum(enrollment) FROM institution GROUP BY TYPE", "binning": ""}, "VQL": "Visualize BAR SELECT Type , sum(enrollment) FROM institution GROUP BY TYPE"}, "hardness": "Easy"}, {"nl_queries": "For all employees who have the letters D or S in their first name, return a bar chart about the distribution of job_id and the average of salary , and group by attribute job_id, I want to sort by the Y-axis in descending please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY AVG(SALARY) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY AVG(SALARY) DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "Return the ids and details corresponding to projects for which there are more than two documents. Show bar chart.", "db_id": "cre_Docs_and_Epenses", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id"}, "hardness": "Easy"}, {"nl_queries": "How many accounts are opened in each year? Show a group line chart that group by other account details, and could you order by the x axis in desc?", "db_id": "customers_and_invoices", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date_account_opened , COUNT(date_account_opened) FROM Accounts GROUP BY other_account_details ORDER BY date_account_opened DESC", "binning": "BIN date_account_opened BY YEAR"}, "VQL": "Visualize LINE SELECT date_account_opened , COUNT(date_account_opened) FROM Accounts GROUP BY other_account_details ORDER BY date_account_opened DESC BIN date_account_opened BY YEAR"}, "hardness": "Extra Hard"}, {"nl_queries": "Bar chart x axis role code y axis the total number ", "db_id": "cre_Doc_Tracking_DB", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Role_Code , count(*) FROM Employees GROUP BY role_code", "binning": ""}, "VQL": "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code"}, "hardness": "Easy"}, {"nl_queries": "Return a histogram on what are the names and ids of customers whose address contains TN?, and show by the customer_id in descending please.", "db_id": "department_store", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT customer_name , customer_id FROM customers WHERE customer_address LIKE \"%TN%\" ORDER BY customer_id DESC", "binning": ""}, "VQL": "Visualize BAR SELECT customer_name , customer_id FROM customers WHERE customer_address LIKE \"%TN%\" ORDER BY customer_id DESC"}, "hardness": "Hard"}, {"nl_queries": "Return the number of the dates of birth for entrepreneurs who have either the investor Simon Woodroffe or Peter Jones, and I want to rank by the Date_of_Birth in asc.", "db_id": "entrepreneur", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Date_of_Birth , COUNT(Date_of_Birth) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Investor = \"Simon Woodroffe\" OR T1.Investor = \"Peter Jones\"  ORDER BY Date_of_Birth ASC", "binning": "BIN Date_of_Birth BY YEAR"}, "VQL": "Visualize LINE SELECT Date_of_Birth , COUNT(Date_of_Birth) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Investor = \"Simon Woodroffe\" OR T1.Investor = \"Peter Jones\"  ORDER BY Date_of_Birth ASC BIN Date_of_Birth BY YEAR"}, "hardness": "Extra Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, draw a bar chart about the distribution of founder and the sum of manufacturer , and group by attribute founder, and I want to sort X-axis in asc order.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Founder , SUM(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder ORDER BY Founder ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Founder , SUM(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder ORDER BY Founder ASC"}, "hardness": "Hard"}, {"nl_queries": "A bar chart showing the average weight for each gender, and display x-axis in ascending order.", "db_id": "candidate_poll", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Sex , avg(weight) FROM people GROUP BY sex ORDER BY Sex ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Sex , avg(weight) FROM people GROUP BY sex ORDER BY Sex ASC"}, "hardness": "Medium"}, {"nl_queries": "Find the number of the first name of students who are living in the Smith Hall, I want to show Y in ascending order.", "db_id": "dorm_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Fname , COUNT(Fname) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.dorm_name = 'Smith Hall' GROUP BY Fname ORDER BY COUNT(Fname) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Fname , COUNT(Fname) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.dorm_name = 'Smith Hall' GROUP BY Fname ORDER BY COUNT(Fname) ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "A bar chart about what are the different product names? What is the average product price for each of them?", "db_id": "cre_Drama_Workshop_Groups", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name", "binning": ""}, "VQL": "Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name"}, "hardness": "Easy"}, {"nl_queries": "What is the average base price of rooms, for each bed type. Show a pie chart.", "db_id": "inn_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT bedType , avg(basePrice) FROM Rooms GROUP BY bedType", "binning": ""}, "VQL": "Visualize PIE SELECT bedType , avg(basePrice) FROM Rooms GROUP BY bedType"}, "hardness": "Easy"}, {"nl_queries": "What is the number of cities in each country? Return a bar chart.", "db_id": "county_public_safety", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , COUNT(T2.Name) FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID GROUP BY T2.Name", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID GROUP BY T2.Name"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, find name and the average of manufacturer , and group by attribute name, and visualize them by a bar chart, and sort by the bars from high to low.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC"}, "hardness": "Hard"}, {"nl_queries": "Visualize a bar chart about the distribution of All_Games and ACC_Percent , I want to display by the X-axis in ascending.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Games , ACC_Percent FROM basketball_match ORDER BY All_Games ASC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Games , ACC_Percent FROM basketball_match ORDER BY All_Games ASC"}, "hardness": "Easy"}, {"nl_queries": "What are the number of the names of all students who tried out in alphabetical order?", "db_id": "soccer_2", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT pName , COUNT(pName) FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID GROUP BY pName ORDER BY T1.pName", "binning": ""}, "VQL": "Visualize PIE SELECT pName , COUNT(pName) FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID GROUP BY pName ORDER BY T1.pName"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, a bar chart shows the distribution of  name and the average of price , and group by attribute name.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, visualize a scatter chart about the correlation between  price and  manufacturer , and group by attribute headquarter.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Price , Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter", "binning": ""}, "VQL": "Visualize SCATTER SELECT Price , Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter"}, "hardness": "Medium"}, {"nl_queries": "For those employees who was hired before 2002-06-21, give me the comparison about the average of salary over the  hire_date bin hire_date by weekday.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21'", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "Find the pixel aspect ratio and the nation of the tv channels that do not use English. Show the proportion of the pixel aspect ratio with a pie chart.", "db_id": "tvshow", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR", "binning": ""}, "VQL": "Visualize PIE SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR"}, "hardness": "Medium"}, {"nl_queries": "For those employees who did not have any job in the past, a bar chart shows the distribution of hire_date and the sum of manager_id bin hire_date by time, list in descending by the y-axis.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY SUM(MANAGER_ID) DESC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about the average of code over the founder , and group by attribute founder by a bar chart, display by the names in asc.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T2.Founder ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T2.Founder ASC"}, "hardness": "Hard"}, {"nl_queries": "How many dogs who have gone through a treatment departed in each year? Return a bar chart that bins arrived date by day interval, list by the Y-axis in descending.", "db_id": "dog_kennels", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_departed , COUNT(date_departed) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id  ORDER BY COUNT(date_departed) DESC", "binning": "BIN date_departed BY DAY"}, "VQL": "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id  ORDER BY COUNT(date_departed) DESC BIN date_departed BY DAY"}, "hardness": "Hard"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, draw a bar chart about the distribution of job_id and the sum of department_id , and group by attribute job_id, and sort total number in asc order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "Which committees have delegates from the Democratic party, and count them by a bar chart", "db_id": "election", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee", "binning": ""}, "VQL": "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about the average of code over the founder , and group by attribute founder by a bar chart, and sort the average of code in ascending order.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code ASC"}, "hardness": "Hard"}, {"nl_queries": "A bar chart showing the minimum weight for each gender, and show by the total number in descending.", "db_id": "candidate_poll", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Sex , min(weight) FROM people GROUP BY Sex ORDER BY min(weight) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Sex , min(weight) FROM people GROUP BY Sex ORDER BY min(weight) DESC"}, "hardness": "Easy"}, {"nl_queries": "what is the average weight for each type of pet?, I want to list Y from high to low order.", "db_id": "pets_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT PetType , avg(weight) FROM pets GROUP BY pettype ORDER BY avg(weight) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT PetType , avg(weight) FROM pets GROUP BY pettype ORDER BY avg(weight) DESC"}, "hardness": "Medium"}, {"nl_queries": "For all employees who have the letters D or S in their first name, give me the comparison about the amount of job_id over the job_id , and group by attribute job_id, and show from high to low by the y axis please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , COUNT(JOB_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY COUNT(JOB_ID) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY COUNT(JOB_ID) DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "Show me a bar chart for the average of how many matches were played each year?", "db_id": "wta_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT year , count(year) FROM matches", "binning": "BIN year BY YEAR"}, "VQL": "Visualize BAR SELECT year , count(year) FROM matches BIN year BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, draw a bar chart about the distribution of job_id and the average of department_id , and group by attribute job_id, and I want to show from low to high by the names.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "What is the average price range of hotels for each each star rating code. Show scatter chart.", "db_id": "cre_Theme_park", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT star_rating_code , avg(price_range) FROM HOTELS GROUP BY star_rating_code", "binning": ""}, "VQL": "Visualize SCATTER SELECT star_rating_code , avg(price_range) FROM HOTELS GROUP BY star_rating_code"}, "hardness": "Easy"}, {"nl_queries": "Bar graph to show the average of age from different gender, and I want to display in asc by the X-axis.", "db_id": "network_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT gender , avg(age) FROM Person GROUP BY gender ORDER BY gender ASC", "binning": ""}, "VQL": "Visualize BAR SELECT gender , avg(age) FROM Person GROUP BY gender ORDER BY gender ASC"}, "hardness": "Medium"}, {"nl_queries": "Please visualize a bar chart, that the X-axis is the director and the Y-axis is thier corresponding lowest rating among all movies. ", "db_id": "movie_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT director , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director", "binning": ""}, "VQL": "Visualize BAR SELECT director , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director"}, "hardness": "Easy"}, {"nl_queries": "Compute the total how many minister across minister as a pie chart.", "db_id": "party_people", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister", "binning": ""}, "VQL": "Visualize PIE SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister"}, "hardness": "Easy"}, {"nl_queries": "Return a line chart about the change of the average of Shop_ID over  Start_from bin start_from by time.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Start_from , AVG(Shop_ID) FROM hiring", "binning": "BIN Start_from BY YEAR"}, "VQL": "Visualize LINE SELECT Start_from , AVG(Shop_ID) FROM hiring BIN Start_from BY YEAR"}, "hardness": "Easy"}, {"nl_queries": "A line chart shows the change of the sum of Shop_ID over Start_from , and group by attribute Is_full_time and bin start_from by time, and sort x axis from high to low order.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Start_from , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC", "binning": "BIN Start_from BY YEAR"}, "VQL": "Visualize LINE SELECT Start_from , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR"}, "hardness": "Extra Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, visualize a bar chart about the distribution of name and code , and group by attribute headquarter, show by the X in descending.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter , T1.Name ORDER BY T1.Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter , T1.Name ORDER BY T1.Name DESC"}, "hardness": "Hard"}, {"nl_queries": "Show the number of courses for each course description in a stacked bar chart. The x-axis is course description and group by instructor's name.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT CRS_DESCRIPTION , COUNT(CRS_DESCRIPTION) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code GROUP BY EMP_FNAME ,  CRS_DESCRIPTION", "binning": ""}, "VQL": "Visualize BAR SELECT CRS_DESCRIPTION , COUNT(CRS_DESCRIPTION) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code GROUP BY EMP_FNAME ,  CRS_DESCRIPTION"}, "hardness": "Hard"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, visualize a scatter chart about the correlation between  salary and  department_id .", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT SALARY , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40", "binning": ""}, "VQL": "Visualize SCATTER SELECT SALARY , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40"}, "hardness": "Medium"}, {"nl_queries": "A bar chart for what are the number of the wines that have prices lower than 50 and have appelations in Monterey county?, and display by the x-axis in desc please.", "db_id": "wine_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.County = \"Monterey\" AND T2.price < 50 GROUP BY Name ORDER BY Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.County = \"Monterey\" AND T2.price < 50 GROUP BY Name ORDER BY Name DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "Return a scatter chart about the correlation between  address_id and  monthly_rental , and group by attribute other_details.", "db_id": "behavior_monitoring", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT address_id , monthly_rental FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC", "binning": ""}, "VQL": "Visualize SCATTER SELECT address_id , monthly_rental FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC"}, "hardness": "Medium"}, {"nl_queries": "Draw a bar chart of name versus age, and I want to rank by the y-axis in descending.", "db_id": "journal_committee", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , Age FROM editor ORDER BY Age DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , Age FROM editor ORDER BY Age DESC"}, "hardness": "Easy"}, {"nl_queries": "Give me a histogram for what are the names of the technicians and how many machines are they assigned to repair?, sort in descending by the y axis.", "db_id": "machine_repair", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID = T2.technician_ID GROUP BY T2.Name ORDER BY COUNT(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID = T2.technician_ID GROUP BY T2.Name ORDER BY COUNT(*) DESC"}, "hardness": "Hard"}, {"nl_queries": "Draw a bar chart of services versus the number of services, and sort by the names in asc.", "db_id": "station_weather", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services ASC", "binning": ""}, "VQL": "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services ASC"}, "hardness": "Medium"}, {"nl_queries": "For all employees who have the letters D or S in their first name, give me the comparison about the sum of salary over the job_id , and group by attribute job_id, and could you sort X-axis in descending order?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about the average of revenue over the founder , and group by attribute founder, and order by the the average of revenue in ascending.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Founder , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder ORDER BY AVG(Revenue) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Founder , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder ORDER BY AVG(Revenue) ASC"}, "hardness": "Hard"}, {"nl_queries": "Show me mean age by born state in a histogram, and list names in desc order.", "db_id": "department_management", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT born_state , AVG(age) FROM head GROUP BY born_state ORDER BY born_state DESC", "binning": ""}, "VQL": "Visualize BAR SELECT born_state , AVG(age) FROM head GROUP BY born_state ORDER BY born_state DESC"}, "hardness": "Medium"}, {"nl_queries": "Return a bar chart about the distribution of  date_address_to and the amount of date_address_to bin date_address_to by time.", "db_id": "behavior_monitoring", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses  ORDER BY monthly_rental DESC", "binning": "BIN date_address_to BY MONTH"}, "VQL": "Visualize BAR SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY MONTH"}, "hardness": "Medium"}, {"nl_queries": "Bar chart of mean age from each city code, sort y-axis from high to low order.", "db_id": "dorm_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) DESC"}, "hardness": "Medium"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, return a bar chart about the distribution of hire_date and the sum of employee_id bin hire_date by weekday, and list by the total number from high to low.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) DESC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "For the attribute  All_Road and  Team_ID, show their proportion by a pie chart.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT All_Road , Team_ID FROM basketball_match", "binning": ""}, "VQL": "Visualize PIE SELECT All_Road , Team_ID FROM basketball_match"}, "hardness": "Easy"}, {"nl_queries": "Visualize a scatter chart about the correlation between  Snatch and  Clean_Jerk .", "db_id": "body_builder", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Snatch , Clean_Jerk FROM body_builder", "binning": ""}, "VQL": "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder"}, "hardness": "Easy"}, {"nl_queries": "Find the number of students whose age is younger than the average age and group by students' first name in a bar chart, and show by the X in ascending.", "db_id": "dorm_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Fname , COUNT(Fname) FROM student WHERE age < (SELECT avg(age) FROM student) GROUP BY Fname ORDER BY Fname ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Fname , COUNT(Fname) FROM student WHERE age < (SELECT avg(age) FROM student) GROUP BY Fname ORDER BY Fname ASC"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, a scatter chart shows the correlation between  code and  revenue , and group by attribute headquarter.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter", "binning": ""}, "VQL": "Visualize SCATTER SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter"}, "hardness": "Medium"}, {"nl_queries": "For each continent where the average life expectancy is shorter than 72, show their total population with a bar chart, rank in desc by the Continent.", "db_id": "world_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Continent , sum(Population) FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72 ORDER BY Continent DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Continent , sum(Population) FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72 ORDER BY Continent DESC"}, "hardness": "Hard"}, {"nl_queries": "A bar chart listing the number of battle date, show bar in ascending order.", "db_id": "battle_death", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date , COUNT(date) FROM battle GROUP BY date ORDER BY date ASC", "binning": ""}, "VQL": "Visualize BAR SELECT date , COUNT(date) FROM battle GROUP BY date ORDER BY date ASC"}, "hardness": "Medium"}, {"nl_queries": "For all employees who have the letters D or S in their first name, give me the trend about salary over hire_date , and sort x axis in ascending order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , SALARY FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY HIRE_DATE ASC", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY HIRE_DATE ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "Plot all_games_percent by grouped by all games as a bar graph, order y axis in desc order.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Games , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent DESC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Games , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent DESC"}, "hardness": "Easy"}, {"nl_queries": "Show all template type codes and the number of documents using each type with a bar chart, display by the x axis in descending.", "db_id": "cre_Doc_Template_Mgt", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY Template_Type_Code DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY Template_Type_Code DESC"}, "hardness": "Hard"}, {"nl_queries": "Pie chart. how many people are under 40 for each gender?", "db_id": "network_2", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT gender , count(*) FROM Person WHERE age < 40 GROUP BY gender", "binning": ""}, "VQL": "Visualize PIE SELECT gender , count(*) FROM Person WHERE age < 40 GROUP BY gender"}, "hardness": "Medium"}, {"nl_queries": "Please return me a histogram to show the friends, and ages of all people who are older than the average age of a person? ", "db_id": "network_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT friend , age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T1.age > (SELECT avg(age) FROM person)", "binning": ""}, "VQL": "Visualize BAR SELECT friend , age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T1.age > (SELECT avg(age) FROM person)"}, "hardness": "Medium"}, {"nl_queries": "What is the average price of the products for each category, list y axis from low to high order.", "db_id": "customer_complaints", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT product_category_code , avg(product_price) FROM products GROUP BY product_category_code ORDER BY avg(product_price) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT product_category_code , avg(product_price) FROM products GROUP BY product_category_code ORDER BY avg(product_price) ASC"}, "hardness": "Medium"}, {"nl_queries": "Show the number of documents created in each day and bin document date by year interval and group by document type description with a group line chart.", "db_id": "cre_Docs_and_Epenses", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description", "binning": "BIN Document_Date BY YEAR"}, "VQL": "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description BIN Document_Date BY YEAR"}, "hardness": "Extra Hard"}, {"nl_queries": "Find the number of records of each policy type and its type code. Plot them as pie chart.", "db_id": "insurance_and_eClaims", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Policy_Type_Code , count(*) FROM policies GROUP BY policy_type_code", "binning": ""}, "VQL": "Visualize PIE SELECT Policy_Type_Code , count(*) FROM policies GROUP BY policy_type_code"}, "hardness": "Easy"}, {"nl_queries": "Show the number of teachers of each course with a pie chart.", "db_id": "course_teach", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Course , COUNT(Course) FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID GROUP BY Course ORDER BY T3.Name", "binning": ""}, "VQL": "Visualize PIE SELECT Course , COUNT(Course) FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID GROUP BY Course ORDER BY T3.Name"}, "hardness": "Hard"}, {"nl_queries": "Visualize a bar chart for how many workshops did each author submit to? Return the author name and the number of workshops, sort workshop_id) in ascending order.", "db_id": "workshop_paper", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY COUNT(DISTINCT T1.workshop_id) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY COUNT(DISTINCT T1.workshop_id) ASC"}, "hardness": "Medium"}, {"nl_queries": "Bar graph to show how many order date from different order date", "db_id": "cre_Drama_Workshop_Groups", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Order_Date , COUNT(Order_Date) FROM BOOKINGS", "binning": "BIN Order_Date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Order_Date , COUNT(Order_Date) FROM BOOKINGS BIN Order_Date BY WEEKDAY"}, "hardness": "Easy"}, {"nl_queries": "Give me a pie to show the total number from different party.", "db_id": "school_bus", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Party , count(*) FROM driver GROUP BY party", "binning": ""}, "VQL": "Visualize PIE SELECT Party , count(*) FROM driver GROUP BY party"}, "hardness": "Easy"}, {"nl_queries": "Return a scatter chart about the correlation between  author_tutor_ATB and  gender_mf .", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT author_tutor_ATB , gender_mf FROM Course_Authors_and_Tutors ORDER BY personal_name", "binning": ""}, "VQL": "Visualize SCATTER SELECT author_tutor_ATB , gender_mf FROM Course_Authors_and_Tutors ORDER BY personal_name"}, "hardness": "Easy"}, {"nl_queries": "How many students have each different allergy. Show bar chart.", "db_id": "allergy_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy", "binning": ""}, "VQL": "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy"}, "hardness": "Easy"}, {"nl_queries": "For those records from the products and each product's manufacturer, return a bar chart about the distribution of name and the average of manufacturer , and group by attribute name, and I want to order in desc by the y axis please.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Manufacturer DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Manufacturer DESC"}, "hardness": "Hard"}, {"nl_queries": "For all employees who have the letters D or S in their first name, show me about the distribution of job_id and the sum of department_id , and group by attribute job_id in a bar chart, and sort by the total number in asc.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, draw a bar chart about the distribution of phone_number and department_id , and I want to show in desc by the x axis.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT PHONE_NUMBER , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY PHONE_NUMBER DESC", "binning": ""}, "VQL": "Visualize BAR SELECT PHONE_NUMBER , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY PHONE_NUMBER DESC"}, "hardness": "Medium"}, {"nl_queries": "Show each location and the number of cinemas there Show bar chart, I want to display in ascending by the X-axis.", "db_id": "cinema", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Location , count(*) FROM cinema GROUP BY LOCATION ORDER BY Location ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Location , count(*) FROM cinema GROUP BY LOCATION ORDER BY Location ASC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about the sum of revenue over the headquarter , and group by attribute headquarter, and could you list in descending by the Headquarter?", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Headquarter , SUM(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Headquarter , SUM(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter DESC"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, return a bar chart about the distribution of name and the sum of manufacturer , and group by attribute name, and list X-axis in ascending order.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC"}, "hardness": "Hard"}, {"nl_queries": "Bar chart x axis hand y axis the total number, and display by the Y-axis in desc.", "db_id": "wta_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT hand , count(*) FROM players GROUP BY hand ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand ORDER BY count(*) DESC"}, "hardness": "Medium"}, {"nl_queries": ", order by the bars from low to high.", "db_id": "company_office", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry ORDER BY Industry ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry ORDER BY Industry ASC"}, "hardness": "Medium"}, {"nl_queries": "A bar chart for what are the number of the countries of all airlines whose names start with Orbit?, sort from high to low by the names.", "db_id": "flight_4", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT country , COUNT(country) FROM airlines WHERE name LIKE 'Orbit%' GROUP BY country ORDER BY country DESC", "binning": ""}, "VQL": "Visualize BAR SELECT country , COUNT(country) FROM airlines WHERE name LIKE 'Orbit%' GROUP BY country ORDER BY country DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "I want to compare the number of the names of phones by a bar chart.", "db_id": "phone_market", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY Name", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY Name"}, "hardness": "Medium"}, {"nl_queries": "How many dogs who have gone through a treatment arrived in each day? Return a line chart that groups by arrived date, and list date_arrived from high to low order.", "db_id": "dog_kennels", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date_arrived , COUNT(date_arrived) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id GROUP BY date_arrived ORDER BY date_arrived DESC", "binning": ""}, "VQL": "Visualize LINE SELECT date_arrived , COUNT(date_arrived) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id GROUP BY date_arrived ORDER BY date_arrived DESC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, give me the comparison about employee_id over the email , and I want to order X-axis in descending order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT EMAIL , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY EMAIL DESC", "binning": ""}, "VQL": "Visualize BAR SELECT EMAIL , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY EMAIL DESC"}, "hardness": "Medium"}, {"nl_queries": "For all employees who have the letters D or S in their first name, a line chart shows the change of manager_id over hire_date, sort X-axis in asc order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY HIRE_DATE ASC", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY HIRE_DATE ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "A scatter plot shows the correlation between grade and the total number of students in the grade.", "db_id": "student_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Grade , count(*) FROM list GROUP BY grade", "binning": ""}, "VQL": "Visualize SCATTER SELECT Grade , count(*) FROM list GROUP BY grade"}, "hardness": "Easy"}, {"nl_queries": "For those products with a price between 60 and 120, a bar chart shows the distribution of  name and  code .", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120", "binning": ""}, "VQL": "Visualize BAR SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120"}, "hardness": "Easy"}, {"nl_queries": "What are the ids and trade names of the medicine that can interact with at least 3 enzymes, and show from low to high by the Trade_Name.", "db_id": "medicine_enzyme_interaction", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Trade_Name , id FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id ORDER BY Trade_Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Trade_Name , id FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id ORDER BY Trade_Name ASC"}, "hardness": "Medium"}, {"nl_queries": "Visualize the title and their average smallest ratings of the movie using a bar chart.", "db_id": "movie_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.title , AVG(min(T1.stars)) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T2.title", "binning": ""}, "VQL": "Visualize BAR SELECT T2.title , AVG(min(T1.stars)) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T2.title"}, "hardness": "Medium"}, {"nl_queries": "Bar chart of sum shop id from each is full time", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time", "binning": ""}, "VQL": "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time"}, "hardness": "Easy"}, {"nl_queries": "A bar chart about how many songs were released for each format?", "db_id": "music_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT formats , count(*) FROM files GROUP BY formats", "binning": ""}, "VQL": "Visualize BAR SELECT formats , count(*) FROM files GROUP BY formats"}, "hardness": "Easy"}, {"nl_queries": "Show me the trend about what is the number of wins the team Boston Red Stockings got in the postseasons each year in history?", "db_id": "baseball_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT year , count(*) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' GROUP BY T1.year", "binning": ""}, "VQL": "Visualize LINE SELECT year , count(*) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' GROUP BY T1.year"}, "hardness": "Hard"}, {"nl_queries": "Visualize a bar chart about the distribution of All_Home and Team_ID , and group by attribute ACC_Road, I want to order in descending by the Y please.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY Team_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY Team_ID DESC"}, "hardness": "Medium"}, {"nl_queries": "Show different carriers of phones together with the number of phones with each carrier Plot them as bar chart, show by the Y-axis in desc.", "db_id": "phone_market", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier ORDER BY COUNT(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier ORDER BY COUNT(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who did not have any job in the past, show me about the distribution of hire_date and the sum of salary bin hire_date by time in a bar chart, and order from low to high by the Y.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY SUM(SALARY) ASC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "How many events are there for each party, show by the x-axis from high to low.", "db_id": "party_people", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY Party_name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY Party_name DESC"}, "hardness": "Hard"}, {"nl_queries": "A bar chart shows the distribution of  All_Road and  School_ID .", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Road , School_ID FROM basketball_match", "binning": ""}, "VQL": "Visualize BAR SELECT All_Road , School_ID FROM basketball_match"}, "hardness": "Easy"}, {"nl_queries": "A pie chart about the proportion of the number of faults for different fault description recorded in the logs.", "db_id": "assets_maintenance", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT fault_description , COUNT(fault_description) FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id GROUP BY fault_description", "binning": ""}, "VQL": "Visualize PIE SELECT fault_description , COUNT(fault_description) FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id GROUP BY fault_description"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about the average of price over the headquarter , and group by attribute headquarter, and show in asc by the Headquarter.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Headquarter , AVG(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Headquarter , AVG(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC"}, "hardness": "Hard"}, {"nl_queries": "Return each apartment type code with the number of apartments having that apartment type, in ascending order of the number of apartments. Visualize by pie chart.", "db_id": "apartment_rentals", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT apt_type_code , COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC", "binning": ""}, "VQL": "Visualize PIE SELECT apt_type_code , COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "Draw a bar chart that counts the number of venues of each workshop, could you rank by the total number in asc?", "db_id": "workshop_paper", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY COUNT(Venue) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY COUNT(Venue) ASC"}, "hardness": "Medium"}, {"nl_queries": "Show weight from each date of birth, list X in desc order.", "db_id": "candidate_poll", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Date_of_Birth , Weight FROM people ORDER BY Date_of_Birth DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Date_of_Birth , Weight FROM people ORDER BY Date_of_Birth DESC"}, "hardness": "Easy"}, {"nl_queries": "Give me the trend about the average of Shop_ID over  Start_from bin start_from by time.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Start_from , AVG(Shop_ID) FROM hiring", "binning": "BIN Start_from BY YEAR"}, "VQL": "Visualize LINE SELECT Start_from , AVG(Shop_ID) FROM hiring BIN Start_from BY YEAR"}, "hardness": "Easy"}, {"nl_queries": "Plot a scatter chart, account id by account_name.", "db_id": "customers_card_transactions", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT account_id , account_name FROM Accounts", "binning": ""}, "VQL": "Visualize SCATTER SELECT account_id , account_name FROM Accounts"}, "hardness": "Easy"}, {"nl_queries": "Show the position of players and the corresponding number of players with a bar chart, and show the total number in asc order.", "db_id": "match_season", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Position , COUNT(*) FROM match_season GROUP BY POSITION ORDER BY COUNT(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Position , COUNT(*) FROM match_season GROUP BY POSITION ORDER BY COUNT(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "Draw a bar chart about the distribution of Nationality and the sum of ID , and group by attribute Nationality, order in asc by the y axis.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) ASC"}, "hardness": "Medium"}, {"nl_queries": "Return the dates of birth for entrepreneurs who have either the investor Simon Woodroffe or Peter Jones, and count them by a bar chart, and rank by the how many date of birth from high to low.", "db_id": "entrepreneur", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Date_of_Birth , COUNT(Date_of_Birth) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Investor = \"Simon Woodroffe\" OR T1.Investor = \"Peter Jones\"  ORDER BY COUNT(Date_of_Birth) DESC", "binning": "BIN Date_of_Birth BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Date_of_Birth , COUNT(Date_of_Birth) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Investor = \"Simon Woodroffe\" OR T1.Investor = \"Peter Jones\"  ORDER BY COUNT(Date_of_Birth) DESC BIN Date_of_Birth BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "Show me the trend aboutthe maximum score of wines for each year, rank Year in desc order please.", "db_id": "wine_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Year , max(Score) FROM WINE GROUP BY Year ORDER BY Year DESC", "binning": ""}, "VQL": "Visualize LINE SELECT Year , max(Score) FROM WINE GROUP BY Year ORDER BY Year DESC"}, "hardness": "Easy"}, {"nl_queries": "Show the race class and number of races in each class, and could you rank Y-axis in desc order?", "db_id": "race_track", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY count(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "Find all the distinct visit dates, and count them by a bar chart, and rank total number from low to high order.", "db_id": "cre_Theme_park", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Visit_Date , COUNT(Visit_Date) FROM VISITS  ORDER BY COUNT(Visit_Date) ASC", "binning": "BIN Visit_Date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Visit_Date , COUNT(Visit_Date) FROM VISITS  ORDER BY COUNT(Visit_Date) ASC BIN Visit_Date BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "Find the number of professors for each first name with a bar chart, I want to show from high to low by the bar.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num = T2.emp_num GROUP BY EMP_FNAME ORDER BY EMP_FNAME DESC", "binning": ""}, "VQL": "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num = T2.emp_num GROUP BY EMP_FNAME ORDER BY EMP_FNAME DESC"}, "hardness": "Hard"}, {"nl_queries": "List the grape and winery of the wines whose price is bigger than 100, visualize them with a stacked bar chart, the x-axis is winery and group the grape, and y-axis is the number of wineries, and show y-axis in asc order.", "db_id": "wine_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Grape ,  Winery ORDER BY COUNT(Winery) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Grape ,  Winery ORDER BY COUNT(Winery) ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, draw a scatter chart about the correlation between  price and  code , and group by attribute headquarter.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT T1.Price , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter", "binning": ""}, "VQL": "Visualize SCATTER SELECT T1.Price , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter"}, "hardness": "Medium"}, {"nl_queries": "Give me a histogram for what are the types of competition and number of competitions for that type?, and order in asc by the the total number please.", "db_id": "sports_competition", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Competition_type , COUNT(*) FROM competition GROUP BY Competition_type ORDER BY COUNT(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Competition_type , COUNT(*) FROM competition GROUP BY Competition_type ORDER BY COUNT(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "For all employees who have the letters D or S in their first name, draw a bar chart about the distribution of hire_date and the average of department_id bin hire_date by weekday, I want to display y axis in desc order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY AVG(DEPARTMENT_ID) DESC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY AVG(DEPARTMENT_ID) DESC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "A bar chart for finding the number of the name of rooms booked by some customers whose first name contains ROY, and rank from high to low by the y-axis.", "db_id": "inn_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT roomName , COUNT(roomName) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId WHERE firstname LIKE '%ROY%' GROUP BY roomName ORDER BY COUNT(roomName) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT roomName , COUNT(roomName) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId WHERE firstname LIKE '%ROY%' GROUP BY roomName ORDER BY COUNT(roomName) DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "Give me a bar chart, that just lists the participant ids as Y and their details as X-axis.", "db_id": "local_govt_in_alabama", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Participant_Details , Participant_ID FROM Participants", "binning": ""}, "VQL": "Visualize BAR SELECT Participant_Details , Participant_ID FROM Participants"}, "hardness": "Easy"}, {"nl_queries": "For those records from the products and each product's manufacturer, visualize a bar chart about the distribution of  name and  code , and group by attribute headquarter.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter , T1.Name", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter , T1.Name"}, "hardness": "Medium"}, {"nl_queries": "Draw a pie chart for how many registed students do each course have? List course name and the number of their registered students?", "db_id": "student_assessment", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT course_name , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id", "binning": ""}, "VQL": "Visualize PIE SELECT course_name , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id"}, "hardness": "Medium"}, {"nl_queries": "How many wines are there for each grape, and show x-axis from high to low order.", "db_id": "wine_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Grape , count(*) FROM WINE GROUP BY Grape ORDER BY Grape DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Grape , count(*) FROM WINE GROUP BY Grape ORDER BY Grape DESC"}, "hardness": "Medium"}, {"nl_queries": "For all employees who have the letters D or S in their first name, visualize a line chart about the change of department_id over hire_date , sort HIRE_DATE in descending order please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY HIRE_DATE DESC", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY HIRE_DATE DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "Visualize a bar chart about the number of winery of the wines whose price is bigger than 100, and rank by the Y-axis in asc.", "db_id": "wine_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Winery ORDER BY COUNT(Winery) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Winery ORDER BY COUNT(Winery) ASC"}, "hardness": "Hard"}, {"nl_queries": "Draw a bar chart of last name versus department_id, and order from low to high by the X.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT LAST_NAME , DEPARTMENT_ID FROM employees ORDER BY LAST_NAME ASC", "binning": ""}, "VQL": "Visualize BAR SELECT LAST_NAME , DEPARTMENT_ID FROM employees ORDER BY LAST_NAME ASC"}, "hardness": "Easy"}, {"nl_queries": "List the number of dogs departed in each day with a bar chart that groups by departed date, and sort x axis in desc order.", "db_id": "dog_kennels", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_departed , COUNT(date_departed) FROM Dogs GROUP BY date_departed ORDER BY date_departed DESC", "binning": ""}, "VQL": "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs GROUP BY date_departed ORDER BY date_departed DESC"}, "hardness": "Medium"}, {"nl_queries": "What are the number of the enrollment dates of all the tests that have result \"Pass\"?, and rank by the X-axis in desc.", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = \"Pass\" GROUP BY date_of_enrolment ORDER BY date_of_enrolment DESC", "binning": ""}, "VQL": "Visualize LINE SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = \"Pass\" GROUP BY date_of_enrolment ORDER BY date_of_enrolment DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "For all employees who have the letters D or S in their first name, give me the comparison about the amount of hire_date over the  hire_date bin hire_date by time by a bar chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH"}, "hardness": "Extra Hard"}, {"nl_queries": "Stacked bar chart of the total number for with each Sex in each rank, I want to show in desc by the the total number .", "db_id": "activity_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Rank , count(*) FROM Faculty GROUP BY Sex ,  Rank ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY Sex ,  Rank ORDER BY count(*) DESC"}, "hardness": "Hard"}, {"nl_queries": "Group by all acc road, show the school id and All_Games_Percent in a scatter plot.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Road", "binning": ""}, "VQL": "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Road"}, "hardness": "Easy"}, {"nl_queries": "For those employees who was hired before 2002-06-21, draw a bar chart about the distribution of job_id and the amount of job_id , and group by attribute job_id, rank in descending by the the number of job id.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , COUNT(JOB_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY COUNT(JOB_ID) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY COUNT(JOB_ID) DESC"}, "hardness": "Hard"}, {"nl_queries": "For all employees who have the letters D or S in their first name, a line chart shows the change of  commission_pct over  hire_date ", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'"}, "hardness": "Hard"}, {"nl_queries": "For all employees who have the letters D or S in their first name, give me the comparison about the average of department_id over the job_id , and group by attribute job_id by a bar chart, rank by the total number in asc.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY AVG(DEPARTMENT_ID) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY AVG(DEPARTMENT_ID) ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "A bar chart about what is average age for different job title?, and display names from low to high order.", "db_id": "network_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT job , avg(age) FROM Person GROUP BY job ORDER BY job ASC", "binning": ""}, "VQL": "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY job ASC"}, "hardness": "Medium"}, {"nl_queries": "what is minimum age for different job title?", "db_id": "network_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT job , min(age) FROM Person GROUP BY job", "binning": ""}, "VQL": "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job"}, "hardness": "Easy"}, {"nl_queries": "Visualize a bar chart about the distribution of All_Neutral and ACC_Percent , and display from high to low by the ACC_Percent.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY ACC_Percent DESC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY ACC_Percent DESC"}, "hardness": "Easy"}, {"nl_queries": "What is the maximum price of wines in each year?, sort in desc by the Year.", "db_id": "wine_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Year , max(Price) FROM WINE GROUP BY Year ORDER BY Year DESC", "binning": ""}, "VQL": "Visualize LINE SELECT Year , max(Price) FROM WINE GROUP BY Year ORDER BY Year DESC"}, "hardness": "Easy"}, {"nl_queries": "Draw a bar chart of main industry versus total number of market value, and display y-axis in descending order.", "db_id": "gas_company", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC"}, "hardness": "Medium"}, {"nl_queries": "Plot a scatter chart, count(*) by sum enrollment.", "db_id": "school_finance", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT count(*) , sum(enrollment) FROM school GROUP BY county", "binning": ""}, "VQL": "Visualize SCATTER SELECT count(*) , sum(enrollment) FROM school GROUP BY county"}, "hardness": "Medium"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, give me the comparison about the amount of hire_date over the  hire_date bin hire_date by weekday by a bar chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "Please use a bar chart to show the average amount of payment by each payment method code, and could you display by the bar in descending?", "db_id": "insurance_policies", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code DESC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, a scatter chart shows the correlation between  manufacturer and  code , and group by attribute name.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT T1.Manufacturer , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name", "binning": ""}, "VQL": "Visualize SCATTER SELECT T1.Manufacturer , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name"}, "hardness": "Medium"}, {"nl_queries": "For all employees who have the letters D or S in their first name, give me the comparison about the amount of job_id over the  job_id , and group by attribute job_id.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , COUNT(JOB_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID"}, "hardness": "Extra Hard"}, {"nl_queries": "What is the total number of each fate? Give me the result in a bar graph, list X-axis in asc order.", "db_id": "ship_mission", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Fate , COUNT(Fate) FROM mission GROUP BY Fate ORDER BY Fate ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Fate , COUNT(Fate) FROM mission GROUP BY Fate ORDER BY Fate ASC"}, "hardness": "Easy"}, {"nl_queries": "Visualize a bar chart about the distribution of ACC_Regular_Season and School_ID , and I want to show total number in ascending order please.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Regular_Season , School_ID FROM basketball_match ORDER BY School_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Regular_Season , School_ID FROM basketball_match ORDER BY School_ID ASC"}, "hardness": "Easy"}, {"nl_queries": "A bar chart for finding the number of the name of the project for which a scientist whose name contains \u2018Smith\u2019 is assigned to, I want to order in asc by the total number.", "db_id": "scientist_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , COUNT(T2.Name) FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T3.name LIKE '%Smith%' GROUP BY T2.Name ORDER BY COUNT(T2.Name) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T3.name LIKE '%Smith%' GROUP BY T2.Name ORDER BY COUNT(T2.Name) ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "Show me the total number by studio in a histogram, and show Y-axis in asc order.", "db_id": "film_rank", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Studio , COUNT(*) FROM film GROUP BY Studio ORDER BY COUNT(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Studio , COUNT(*) FROM film GROUP BY Studio ORDER BY COUNT(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "Scatterplot of minimal stu gpa vs avg(stu gpa) by DEPT_CODE", "db_id": "college_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT avg(stu_gpa) , min(stu_gpa) FROM student GROUP BY DEPT_CODE", "binning": ""}, "VQL": "Visualize SCATTER SELECT avg(stu_gpa) , min(stu_gpa) FROM student GROUP BY DEPT_CODE"}, "hardness": "Easy"}, {"nl_queries": "Find the number of students whose age is older than the average age for each gender, and I want to show from high to low by the total number please.", "db_id": "dorm_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Sex , count(*) FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY Sex ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Sex , count(*) FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY Sex ORDER BY count(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "How many instructors for every course in 2008? Show me a bar chart grouping by course title, and I want to rank by the y-axis in asc.", "db_id": "college_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT title , COUNT(title) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 GROUP BY title ORDER BY COUNT(title) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT title , COUNT(title) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 GROUP BY title ORDER BY COUNT(title) ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "For all employees who have the letters D or S in their first name, give me the comparison about the sum of salary over the hire_date bin hire_date by weekday, sort total number of salary in descending order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(SALARY) DESC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, show me about the correlation between  salary and  department_id  in a scatter chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT SALARY , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)", "binning": ""}, "VQL": "Visualize SCATTER SELECT SALARY , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)"}, "hardness": "Extra Hard"}, {"nl_queries": "For each type of store, how many of them are there Plot them as bar chart, and sort from low to high by the X.", "db_id": "store_product", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Type , count(*) FROM store GROUP BY TYPE ORDER BY Type ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Type , count(*) FROM store GROUP BY TYPE ORDER BY Type ASC"}, "hardness": "Medium"}, {"nl_queries": "Compare the average of maximum score of wines each year, bin the year into the weekday interval and draw a bar chart.", "db_id": "wine_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Year , AVG(max(Score)) FROM WINE", "binning": "BIN Year BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Year , AVG(max(Score)) FROM WINE BIN Year BY WEEKDAY"}, "hardness": "Easy"}, {"nl_queries": "Draw a bar chart of transaction type versus the total number, show from low to high by the the total number .", "db_id": "customers_card_transactions", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT transaction_type , count(*) FROM Financial_transactions GROUP BY transaction_type ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT transaction_type , count(*) FROM Financial_transactions GROUP BY transaction_type ORDER BY count(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "Find the first name and gpa of the students whose gpa is lower than the average gpa of all students. Visualize by pie chart.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT STU_FNAME , SUM(STU_GPA) FROM student WHERE stu_gpa < (SELECT avg(stu_gpa) FROM student) GROUP BY STU_FNAME", "binning": ""}, "VQL": "Visualize PIE SELECT STU_FNAME , SUM(STU_GPA) FROM student WHERE stu_gpa < (SELECT avg(stu_gpa) FROM student) GROUP BY STU_FNAME"}, "hardness": "Medium"}, {"nl_queries": "Show the county name and population of all counties. Show bar chart.", "db_id": "election", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT County_name , Population FROM county", "binning": ""}, "VQL": "Visualize BAR SELECT County_name , Population FROM county"}, "hardness": "Easy"}, {"nl_queries": "Draw a scatter chart about the correlation between  People_ID and  Height , and group by attribute Sex.", "db_id": "candidate_poll", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT People_ID , Height FROM people GROUP BY Sex", "binning": ""}, "VQL": "Visualize SCATTER SELECT People_ID , Height FROM people GROUP BY Sex"}, "hardness": "Easy"}, {"nl_queries": "Find the altitude (or elevation) of the airports in the city of New York with a bar chart, order in ascending by the elevation.", "db_id": "flight_4", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , elevation FROM airports WHERE city = 'New York' ORDER BY elevation ASC", "binning": ""}, "VQL": "Visualize BAR SELECT name , elevation FROM airports WHERE city = 'New York' ORDER BY elevation ASC"}, "hardness": "Medium"}, {"nl_queries": "A bar chart shows the distribution of Sex and the sum of Weight , and group by attribute Sex, and order Y-axis from high to low order.", "db_id": "candidate_poll", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Sex , SUM(Weight) FROM people GROUP BY Sex ORDER BY SUM(Weight) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Sex , SUM(Weight) FROM people GROUP BY Sex ORDER BY SUM(Weight) DESC"}, "hardness": "Medium"}, {"nl_queries": "What are the names of all the playlists, and count them by a bar chart", "db_id": "store_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , COUNT(name) FROM playlists GROUP BY name", "binning": ""}, "VQL": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name"}, "hardness": "Easy"}, {"nl_queries": "What is the proportion of each customer's move in date? You can show me a bar chart that bins move in date into Weekday interval, and could you show in descending by the Y?", "db_id": "local_govt_and_lot", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id  ORDER BY COUNT(date_moved_in) DESC", "binning": "BIN date_moved_in BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id  ORDER BY COUNT(date_moved_in) DESC BIN date_moved_in BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "For each director, return the director's name together with the highest rating among all of their movies and ignore movies whose director is NULL Could you plot the result with a bar chart?, order by the y axis from high to low.", "db_id": "movie_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT director , max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" GROUP BY director ORDER BY max(T1.stars) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT director , max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" GROUP BY director ORDER BY max(T1.stars) DESC"}, "hardness": "Hard"}, {"nl_queries": "For those dates with a max temperature greater than or equal to 80, I would like a line chart to show the tendency, display by the X in asc.", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date , COUNT(date) FROM weather WHERE max_temperature_f >= 80 GROUP BY date ORDER BY date ASC", "binning": ""}, "VQL": "Visualize LINE SELECT date , COUNT(date) FROM weather WHERE max_temperature_f >= 80 GROUP BY date ORDER BY date ASC"}, "hardness": "Hard"}, {"nl_queries": "Return a histogram on how old is the average person for each job?, and display y axis in asc order.", "db_id": "network_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT job , avg(age) FROM Person GROUP BY job ORDER BY avg(age) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY avg(age) ASC"}, "hardness": "Medium"}, {"nl_queries": "Return a bar chart showing how many customers whose contact channel code is email for each year, could you sort from low to high by the y-axis?", "db_id": "customers_and_addresses", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT active_from_date , COUNT(active_from_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email' ORDER BY COUNT(active_from_date) ASC", "binning": "BIN active_from_date BY YEAR"}, "VQL": "Visualize BAR SELECT active_from_date , COUNT(active_from_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email' ORDER BY COUNT(active_from_date) ASC BIN active_from_date BY YEAR"}, "hardness": "Extra Hard"}, {"nl_queries": "A bar chart about how many different professors are there for the different schools?, and list y axis from high to low order.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY count(*) DESC"}, "hardness": "Hard"}, {"nl_queries": "What are the different account ids that have made financial transactions, as well as how many transactions correspond to each. Show the correlation.", "db_id": "customers_card_transactions", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT account_id , count(*) FROM Financial_transactions GROUP BY account_id", "binning": ""}, "VQL": "Visualize SCATTER SELECT account_id , count(*) FROM Financial_transactions GROUP BY account_id"}, "hardness": "Easy"}, {"nl_queries": "Show different type codes of products and the number of products with each type code. Visualize by bar chart.", "db_id": "solvency_ii", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Product_Type_Code , COUNT(*) FROM Products GROUP BY Product_Type_Code", "binning": ""}, "VQL": "Visualize BAR SELECT Product_Type_Code , COUNT(*) FROM Products GROUP BY Product_Type_Code"}, "hardness": "Easy"}, {"nl_queries": "Compare the total enrollment in each county with a bar chart, and list by the names from low to high please.", "db_id": "school_finance", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT County , sum(enrollment) FROM school GROUP BY county ORDER BY County ASC", "binning": ""}, "VQL": "Visualize BAR SELECT County , sum(enrollment) FROM school GROUP BY county ORDER BY County ASC"}, "hardness": "Medium"}, {"nl_queries": "Visualize a bar chart for how much does each charge type costs? List both charge type and amount, sort by the Y in descending.", "db_id": "dog_kennels", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT charge_type , charge_amount FROM Charges ORDER BY charge_amount DESC", "binning": ""}, "VQL": "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_amount DESC"}, "hardness": "Easy"}, {"nl_queries": "Show order ids and the number of products in each order by a scatter chart.", "db_id": "customers_and_invoices", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT order_id , count(DISTINCT product_id) FROM Order_items", "binning": ""}, "VQL": "Visualize SCATTER SELECT order_id , count(DISTINCT product_id) FROM Order_items"}, "hardness": "Medium"}, {"nl_queries": "Show the average of account details for different statement details in a bar chart, and order by the Y in ascending.", "db_id": "cre_Docs_and_Epenses", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Statement_Details , AVG(Account_Details) FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id = T2.statement_id GROUP BY Statement_Details ORDER BY AVG(Account_Details) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Statement_Details , AVG(Account_Details) FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id = T2.statement_id GROUP BY Statement_Details ORDER BY AVG(Account_Details) ASC"}, "hardness": "Hard"}, {"nl_queries": "Show the number of courses each teacher teaches in a bar chart, show in ascending by the x axis.", "db_id": "course_teach", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID GROUP BY Name ORDER BY Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID GROUP BY Name ORDER BY Name ASC"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about the sum of code over the founder , and group by attribute founder by a bar chart, and show Y in descending order.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code DESC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who did not have any job in the past, visualize a bar chart about the distribution of job_id and the sum of manager_id , and group by attribute job_id, and I want to display in descending by the X.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY JOB_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY JOB_ID DESC"}, "hardness": "Hard"}, {"nl_queries": "Give the maximum product price for each product type in a bar chart, and show in desc by the bar.", "db_id": "department_store", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code ORDER BY product_type_code DESC", "binning": ""}, "VQL": "Visualize BAR SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code ORDER BY product_type_code DESC"}, "hardness": "Easy"}, {"nl_queries": "Count the number of local authorities by the local authority, and order Y-axis from low to high order.", "db_id": "station_weather", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT local_authority , COUNT(local_authority) FROM station GROUP BY local_authority ORDER BY COUNT(local_authority) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY local_authority ORDER BY COUNT(local_authority) ASC"}, "hardness": "Medium"}, {"nl_queries": "Give the neames of wines with prices below 50 and with appelations in Monterey county, and count them by a bar chart, sort X from low to high order.", "db_id": "wine_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.County = \"Monterey\" AND T2.price < 50 GROUP BY Name ORDER BY Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.County = \"Monterey\" AND T2.price < 50 GROUP BY Name ORDER BY Name ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "For each headquarter, what are the headquarter and how many companies are centered there Visualize by bar chart, and show from low to high by the total number please.", "db_id": "gas_company", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY count(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "Show me a bar chart for what are the first names and support rep ids for employees serving 10 or more customers?, I want to rank from high to low by the Y please.", "db_id": "chinook_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.SupportRepId DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.SupportRepId DESC"}, "hardness": "Medium"}, {"nl_queries": "Compare the lowest rating among all movies by each title using a histogram, list from low to high by the title.", "db_id": "movie_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT title , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY title ORDER BY title ASC", "binning": ""}, "VQL": "Visualize BAR SELECT title , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY title ORDER BY title ASC"}, "hardness": "Medium"}, {"nl_queries": "What are the draft pick numbers and draft classes for players who play the Defender position Show bar chart, and could you order x-axis in descending order?", "db_id": "match_season", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Draft_Class , Draft_Pick_Number FROM match_season WHERE POSITION = \"Defender\" ORDER BY Draft_Class DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Draft_Class , Draft_Pick_Number FROM match_season WHERE POSITION = \"Defender\" ORDER BY Draft_Class DESC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, show me about the distribution of email and manager_id in a bar chart, and display by the y-axis from high to low.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT EMAIL , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY MANAGER_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT EMAIL , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY MANAGER_ID DESC"}, "hardness": "Medium"}, {"nl_queries": "Give me a histogram for what are the name and level of catalog structure with level number between 5 and 10, could you order X-axis from low to high order?", "db_id": "product_catalog", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_name ASC"}, "hardness": "Medium"}, {"nl_queries": "Bar graph to show the average of high temperature from different day of week, I want to rank by the bars from low to high.", "db_id": "station_weather", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT day_of_week , avg(high_temperature) FROM weekly_weather GROUP BY day_of_week ORDER BY day_of_week ASC", "binning": ""}, "VQL": "Visualize BAR SELECT day_of_week , avg(high_temperature) FROM weekly_weather GROUP BY day_of_week ORDER BY day_of_week ASC"}, "hardness": "Medium"}, {"nl_queries": "Create a bar chart showing the total number across sex, could you order in desc by the Sex?", "db_id": "activity_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Sex , count(*) FROM Faculty GROUP BY Sex ORDER BY Sex DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Sex , count(*) FROM Faculty GROUP BY Sex ORDER BY Sex DESC"}, "hardness": "Medium"}, {"nl_queries": "A bar chart shows the distribution of  date_address_to and the sum of monthly_rental , and group by attribute other_details and bin date_address_to by time.", "db_id": "behavior_monitoring", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC", "binning": "BIN date_address_to BY MONTH"}, "VQL": "Visualize BAR SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY MONTH"}, "hardness": "Extra Hard"}, {"nl_queries": "Find the maximum capacity among rooms in each building with a bar chart, list by the names in ascending please.", "db_id": "college_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT building , max(capacity) FROM classroom GROUP BY building ORDER BY building ASC", "binning": ""}, "VQL": "Visualize BAR SELECT building , max(capacity) FROM classroom GROUP BY building ORDER BY building ASC"}, "hardness": "Easy"}, {"nl_queries": "Bar chart x axis acc road y axis total number of school id", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Road , SUM(School_ID) FROM basketball_match GROUP BY ACC_Road", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Road , SUM(School_ID) FROM basketball_match GROUP BY ACC_Road"}, "hardness": "Easy"}, {"nl_queries": "Return the results of all music festivals using a pie chart.", "db_id": "music_4", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result", "binning": ""}, "VQL": "Visualize PIE SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result"}, "hardness": "Easy"}, {"nl_queries": "Show me mean rating by languages in a histogram, order by the mean rating in ascending please.", "db_id": "music_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY avg(rating) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY avg(rating) ASC"}, "hardness": "Medium"}, {"nl_queries": "Show all advisors and corresponding number of students by a scatter chart.", "db_id": "allergy_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Advisor , count(*) FROM Student GROUP BY advisor", "binning": ""}, "VQL": "Visualize SCATTER SELECT Advisor , count(*) FROM Student GROUP BY advisor"}, "hardness": "Easy"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, visualize a bar chart about the distribution of job_id and the average of employee_id , and group by attribute job_id, could you show in desc by the X-axis please?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "Show all sport name and the number of students Show bar chart, and sort in asc by the bar.", "db_id": "game_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT SportName , count(*) FROM Sportsinfo GROUP BY sportname ORDER BY SportName ASC", "binning": ""}, "VQL": "Visualize BAR SELECT SportName , count(*) FROM Sportsinfo GROUP BY sportname ORDER BY SportName ASC"}, "hardness": "Medium"}, {"nl_queries": "Scatter plot to show template id on x axis and version_number on y axis.", "db_id": "cre_Doc_Template_Mgt", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Template_ID , Version_Number FROM Templates", "binning": ""}, "VQL": "Visualize SCATTER SELECT Template_ID , Version_Number FROM Templates"}, "hardness": "Easy"}, {"nl_queries": "Visualize a bar chart for what are the ids and locations of all circuits in France or Belgium?, order in asc by the Y.", "db_id": "formula_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT location , circuitId FROM circuits WHERE country = \"France\" OR country = \"Belgium\" ORDER BY circuitId ASC", "binning": ""}, "VQL": "Visualize BAR SELECT location , circuitId FROM circuits WHERE country = \"France\" OR country = \"Belgium\" ORDER BY circuitId ASC"}, "hardness": "Hard"}, {"nl_queries": "How many movie reviews does each director get Show bar chart, and rank y axis in ascending order.", "db_id": "movie_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT director , count(*) FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID GROUP BY T1.director ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT director , count(*) FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID GROUP BY T1.director ORDER BY count(*) ASC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, find last_name and salary , and visualize them by a bar chart, and I want to order by the total number from high to low.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT LAST_NAME , SALARY FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY SALARY DESC", "binning": ""}, "VQL": "Visualize BAR SELECT LAST_NAME , SALARY FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY SALARY DESC"}, "hardness": "Medium"}, {"nl_queries": "Show all countries and the number of singers in each country in a bar chart, and order Y from low to high order.", "db_id": "concert_singer", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "List the dog name and age of the dogs who have been abandoned in a bar chart, rank by the X-axis in asc.", "db_id": "dog_kennels", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , age FROM Dogs WHERE abandoned_yn = 1 ORDER BY name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT name , age FROM Dogs WHERE abandoned_yn = 1 ORDER BY name ASC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, visualize a bar chart about the distribution of name and the average of revenue , and group by attribute name, and could you order from low to high by the bar?", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC"}, "hardness": "Hard"}, {"nl_queries": "Show budget type codes and the number of documents in each budget type with a bar chart.", "db_id": "cre_Docs_and_Epenses", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code", "binning": ""}, "VQL": "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code"}, "hardness": "Easy"}, {"nl_queries": "Show the product name and price of its most expensive product  using a bar chart.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , max(T1.Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , max(T1.Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name"}, "hardness": "Easy"}, {"nl_queries": "How many engineers did each staff contact? List both the contact staff name and number of engineers contacted in a bar chart.", "db_id": "assets_maintenance", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT staff_name , count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name", "binning": ""}, "VQL": "Visualize BAR SELECT staff_name , count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name"}, "hardness": "Medium"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, give me the comparison about employee_id over the phone_number by a bar chart, show in ascending by the EMPLOYEE_ID.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT PHONE_NUMBER , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY EMPLOYEE_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT PHONE_NUMBER , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY EMPLOYEE_ID ASC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, a bar chart shows the distribution of hire_date and the sum of employee_id bin hire_date by time, and display total number from high to low order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(EMPLOYEE_ID) DESC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "For the attribute  All_Road and  All_Games_Percent, show their proportion by a pie chart.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT All_Road , All_Games_Percent FROM basketball_match", "binning": ""}, "VQL": "Visualize PIE SELECT All_Road , All_Games_Percent FROM basketball_match"}, "hardness": "Easy"}, {"nl_queries": "Show me a bar chart for how many invoices were billed from each state?", "db_id": "store_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state", "binning": ""}, "VQL": "Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state"}, "hardness": "Medium"}, {"nl_queries": "List all directors along with the number of films directed by each director. Visualize by pie chart.", "db_id": "cinema", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Directed_by , count(*) FROM film GROUP BY directed_by", "binning": ""}, "VQL": "Visualize PIE SELECT Directed_by , count(*) FROM film GROUP BY directed_by"}, "hardness": "Easy"}, {"nl_queries": "What are the different classes of races, and how many races correspond to each Show bar chart, could you list y-axis in desc order?", "db_id": "race_track", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY count(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "The trend about the the number of season of different Home_team over the season, and I want to show in ascending by the x-axis.", "db_id": "game_injury", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ORDER BY Season ASC", "binning": "BIN Season BY YEAR"}, "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ORDER BY Season ASC BIN Season BY YEAR"}, "hardness": "Extra Hard"}, {"nl_queries": "Return a histogram on what are the names and distances for all airplanes?, display in descending by the total number.", "db_id": "flight_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , distance FROM Aircraft ORDER BY distance DESC", "binning": ""}, "VQL": "Visualize BAR SELECT name , distance FROM Aircraft ORDER BY distance DESC"}, "hardness": "Easy"}, {"nl_queries": "How many courses each teacher taught? Show me a bar chart grouping by course code, sort names in ascending order please.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT CRS_CODE , COUNT(CRS_CODE) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY CRS_CODE ORDER BY CRS_CODE ASC", "binning": ""}, "VQL": "Visualize BAR SELECT CRS_CODE , COUNT(CRS_CODE) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY CRS_CODE ORDER BY CRS_CODE ASC"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, find name and the sum of code , and group by attribute name, and visualize them by a bar chart, and sort by the Y-axis from high to low.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC"}, "hardness": "Hard"}, {"nl_queries": "For all employees who have the letters D or S in their first name, find hire_date and the sum of manager_id bin hire_date by weekday, and visualize them by a bar chart, and I want to order from high to low by the Y.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(MANAGER_ID) DESC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "Give me the comparison about the sum of Weight over the Sex , and group by attribute Sex by a bar chart, and list by the X-axis in ascending.", "db_id": "candidate_poll", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Sex , SUM(Weight) FROM people GROUP BY Sex ORDER BY Sex ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Sex , SUM(Weight) FROM people GROUP BY Sex ORDER BY Sex ASC"}, "hardness": "Medium"}, {"nl_queries": "Give me a bar chart for all_games_percent of each team name, could you list in asc by the y axis please?", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Team_Name , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Team_Name , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC"}, "hardness": "Easy"}, {"nl_queries": "Bar chart of the average of pet age from each pettype, display y-axis in asc order.", "db_id": "pets_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT PetType , avg(pet_age) FROM pets GROUP BY pettype ORDER BY avg(pet_age) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT PetType , avg(pet_age) FROM pets GROUP BY pettype ORDER BY avg(pet_age) ASC"}, "hardness": "Medium"}, {"nl_queries": "Draw a scatter chart about the correlation between  Body_Builder_ID and  Total .", "db_id": "body_builder", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Body_Builder_ID , Total FROM body_builder", "binning": ""}, "VQL": "Visualize SCATTER SELECT Body_Builder_ID , Total FROM body_builder"}, "hardness": "Easy"}, {"nl_queries": "Give me a histogram for what are the names of projects that require more than 300 hours, and how many scientists are assigned to each?, and list by the Name in desc.", "db_id": "scientist_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name ORDER BY Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name ORDER BY Name DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "List the states of all votes, compute the total number of states, and sum their vote id with a bar chart, could you list in descending by the X please?", "db_id": "voter_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT state , SUM(vote_id) FROM votes GROUP BY state ORDER BY state DESC", "binning": ""}, "VQL": "Visualize BAR SELECT state , SUM(vote_id) FROM votes GROUP BY state ORDER BY state DESC"}, "hardness": "Medium"}, {"nl_queries": "Find the component amounts and names of all furnitures that have more than 10 components, and could you order by the bar in asc?", "db_id": "manufacturer", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , Num_of_Component FROM furniture WHERE Num_of_Component > 10 ORDER BY Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , Num_of_Component FROM furniture WHERE Num_of_Component > 10 ORDER BY Name ASC"}, "hardness": "Medium"}, {"nl_queries": "Draw a scatter chart about the correlation between  ID and  salary .", "db_id": "college_2", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT ID , salary FROM instructor ORDER BY salary", "binning": ""}, "VQL": "Visualize SCATTER SELECT ID , salary FROM instructor ORDER BY salary"}, "hardness": "Easy"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, return a bar chart about the distribution of first_name and department_id , sort by the bar in descending please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT FIRST_NAME , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY FIRST_NAME DESC", "binning": ""}, "VQL": "Visualize BAR SELECT FIRST_NAME , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY FIRST_NAME DESC"}, "hardness": "Medium"}, {"nl_queries": "Show me mean age by sex in a histogram, and could you show in descending by the y-axis?", "db_id": "allergy_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Sex , avg(age) FROM Student GROUP BY sex ORDER BY avg(age) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Sex , avg(age) FROM Student GROUP BY sex ORDER BY avg(age) DESC"}, "hardness": "Medium"}, {"nl_queries": "Give me the comparison about Team_ID over the All_Home , and group by attribute ACC_Road, rank in asc by the names please.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC"}, "hardness": "Medium"}, {"nl_queries": "Compare the average salary by each hire date (bin it into the day of week interval) of employees using a bar chart, and list by the Y-axis in asc.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(SALARY) FROM employees  ORDER BY AVG(SALARY) ASC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "Show me about the correlation between  ACC_Percent and  All_Games_Percent , and group by attribute All_Games in a scatter chart.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT ACC_Percent , All_Games_Percent FROM basketball_match GROUP BY All_Games", "binning": ""}, "VQL": "Visualize SCATTER SELECT ACC_Percent , All_Games_Percent FROM basketball_match GROUP BY All_Games"}, "hardness": "Easy"}, {"nl_queries": "Show me about the proportion of  All_Games_Percent and  All_Games_Percent in a pie chart.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Team_Name , All_Games_Percent FROM basketball_match", "binning": ""}, "VQL": "Visualize PIE SELECT Team_Name , All_Games_Percent FROM basketball_match"}, "hardness": "Easy"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, find first_name and employee_id , and visualize them by a bar chart, and sort by the y axis in descending.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT FIRST_NAME , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY EMPLOYEE_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT FIRST_NAME , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY EMPLOYEE_ID DESC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who did not have any job in the past, visualize a bar chart about the distribution of hire_date and the sum of salary bin hire_date by weekday, and I want to sort y axis in descending order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY SUM(SALARY) DESC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "Show the number of different competition types with a bar graph, list in asc by the Y please.", "db_id": "sports_competition", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Competition_type , COUNT(Competition_type) FROM competition GROUP BY Competition_type ORDER BY COUNT(Competition_type) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Competition_type , COUNT(Competition_type) FROM competition GROUP BY Competition_type ORDER BY COUNT(Competition_type) ASC"}, "hardness": "Medium"}, {"nl_queries": "Bar chart of mean age from each city code", "db_id": "dorm_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT city_code , avg(age) FROM student GROUP BY city_code", "binning": ""}, "VQL": "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code"}, "hardness": "Easy"}, {"nl_queries": "How many orchestras does each record company manage Show bar chart, I want to rank in ascending by the the total number .", "db_id": "orchestra", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "Return a bar chart about the distribution of Sex and the amount of Sex , and group by attribute Sex, and rank in desc by the names.", "db_id": "candidate_poll", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY Sex DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY Sex DESC"}, "hardness": "Medium"}, {"nl_queries": "Bar chart x axis log entry description y axis the number of log entry description, could you show in asc by the log_entry_description please?", "db_id": "tracking_software_problems", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT log_entry_description , COUNT(log_entry_description) FROM problem_log GROUP BY log_entry_description ORDER BY log_entry_description ASC", "binning": ""}, "VQL": "Visualize BAR SELECT log_entry_description , COUNT(log_entry_description) FROM problem_log GROUP BY log_entry_description ORDER BY log_entry_description ASC"}, "hardness": "Medium"}, {"nl_queries": "Show how many committee from each committee", "db_id": "election", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee", "binning": ""}, "VQL": "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee"}, "hardness": "Easy"}, {"nl_queries": "Return a pie chart on what is the average price of the products for each category?", "db_id": "customer_complaints", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT product_category_code , avg(product_price) FROM products GROUP BY product_category_code", "binning": ""}, "VQL": "Visualize PIE SELECT product_category_code , avg(product_price) FROM products GROUP BY product_category_code"}, "hardness": "Easy"}, {"nl_queries": "", "db_id": "soccer_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT preferred_foot , count(*) FROM Player_Attributes WHERE overall_rating > 80 GROUP BY preferred_foot", "binning": ""}, "VQL": "Visualize BAR SELECT preferred_foot , count(*) FROM Player_Attributes WHERE overall_rating > 80 GROUP BY preferred_foot"}, "hardness": "Medium"}, {"nl_queries": "What are the average prices of wines for different years Show the trend, and list x axis in asc order please.", "db_id": "wine_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Year , avg(Price) FROM WINE GROUP BY YEAR ORDER BY Year ASC", "binning": ""}, "VQL": "Visualize LINE SELECT Year , avg(Price) FROM WINE GROUP BY YEAR ORDER BY Year ASC"}, "hardness": "Medium"}, {"nl_queries": "Plot openning year by how many openning year as a trend line", "db_id": "cinema", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Openning_year , COUNT(Openning_year) FROM cinema", "binning": "BIN Openning_year BY YEAR"}, "VQL": "Visualize LINE SELECT Openning_year , COUNT(Openning_year) FROM cinema BIN Openning_year BY YEAR"}, "hardness": "Easy"}, {"nl_queries": "I want to see trend of the number of yearid by yearid, show x axis in desc order.", "db_id": "baseball_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT yearid , COUNT(yearid) FROM hall_of_fame  ORDER BY yearid DESC", "binning": "BIN yearid BY YEAR"}, "VQL": "Visualize LINE SELECT yearid , COUNT(yearid) FROM hall_of_fame  ORDER BY yearid DESC BIN yearid BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, show me about the distribution of  first_name and  department_id  in a bar chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT FIRST_NAME , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)", "binning": ""}, "VQL": "Visualize BAR SELECT FIRST_NAME , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)"}, "hardness": "Extra Hard"}, {"nl_queries": "Bar chart x axis other details y axis resident_id", "db_id": "local_govt_and_lot", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT other_details , resident_id FROM Residents", "binning": ""}, "VQL": "Visualize BAR SELECT other_details , resident_id FROM Residents"}, "hardness": "Easy"}, {"nl_queries": "Show the booking status code and the corresponding number of bookings in a bar chart, rank by the names from high to low please.", "db_id": "apartment_rentals", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code DESC", "binning": ""}, "VQL": "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code DESC"}, "hardness": "Medium"}, {"nl_queries": "Show all role codes and the number of employees in each role by a bar chart, could you sort from low to high by the names?", "db_id": "cre_Doc_Tracking_DB", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY Role_Code ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY Role_Code ASC"}, "hardness": "Medium"}, {"nl_queries": "Draw a bar chart about the distribution of Sex and the average of Height , and group by attribute Sex, and display in ascending by the Y.", "db_id": "candidate_poll", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Sex , AVG(Height) FROM people GROUP BY Sex ORDER BY AVG(Height) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Sex , AVG(Height) FROM people GROUP BY Sex ORDER BY AVG(Height) ASC"}, "hardness": "Medium"}, {"nl_queries": "Give me a bar chart for employee_id of each last name, and show in asc by the y-axis.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT LAST_NAME , EMPLOYEE_ID FROM employees ORDER BY EMPLOYEE_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT LAST_NAME , EMPLOYEE_ID FROM employees ORDER BY EMPLOYEE_ID ASC"}, "hardness": "Easy"}, {"nl_queries": "Show me a bar chart for how many players are from each country?, could you list in desc by the X-axis?", "db_id": "match_season", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Country_name , COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country GROUP BY T1.Country_name ORDER BY Country_name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Country_name , COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country GROUP BY T1.Country_name ORDER BY Country_name DESC"}, "hardness": "Hard"}, {"nl_queries": "Show sum of budget in different year and group by department creation time with a line chart, and display by the X-axis from low to high please.", "db_id": "department_management", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Creation , SUM(Budget_in_Billions) FROM department GROUP BY Creation ORDER BY Creation ASC", "binning": ""}, "VQL": "Visualize LINE SELECT Creation , SUM(Budget_in_Billions) FROM department GROUP BY Creation ORDER BY Creation ASC"}, "hardness": "Medium"}, {"nl_queries": "Find the total credits of all classes offered by each department Visualize by bar chart, and I want to display in ascending by the names.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT DEPT_CODE , sum(T1.crs_credit) FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code = T2.crs_code GROUP BY T1.dept_code ORDER BY DEPT_CODE ASC", "binning": ""}, "VQL": "Visualize BAR SELECT DEPT_CODE , sum(T1.crs_credit) FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code = T2.crs_code GROUP BY T1.dept_code ORDER BY DEPT_CODE ASC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who was hired before 2002-06-21, a bar chart shows the distribution of job_id and the sum of salary , and group by attribute job_id, could you show by the x-axis in asc?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID ASC"}, "hardness": "Hard"}, {"nl_queries": "A bar chart about what are the different software platforms for devices, and how many devices have each?", "db_id": "device", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Software_Platform , COUNT(*) FROM device GROUP BY Software_Platform", "binning": ""}, "VQL": "Visualize BAR SELECT Software_Platform , COUNT(*) FROM device GROUP BY Software_Platform"}, "hardness": "Easy"}, {"nl_queries": "What is the average price for each type of product Visualize by bar chart, list by the Y-axis in asc.", "db_id": "department_store", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT product_type_code , avg(product_price) FROM products GROUP BY product_type_code ORDER BY avg(product_price) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT product_type_code , avg(product_price) FROM products GROUP BY product_type_code ORDER BY avg(product_price) ASC"}, "hardness": "Medium"}, {"nl_queries": "Find the number of web accelerators used for each Operating system, I want to display in ascending by the X.", "db_id": "browser_web", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Operating_system , count(*) FROM web_client_accelerator GROUP BY Operating_system ORDER BY Operating_system ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Operating_system , count(*) FROM web_client_accelerator GROUP BY Operating_system ORDER BY Operating_system ASC"}, "hardness": "Medium"}, {"nl_queries": "Find the id and local authority of the station whose maximum precipitation is higher than 50. Plot them as pie chart.", "db_id": "station_weather", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT local_authority , id FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id = t2.id", "binning": ""}, "VQL": "Visualize PIE SELECT local_authority , id FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id = t2.id"}, "hardness": "Easy"}, {"nl_queries": "For those records from the products and each product's manufacturer, show me about the distribution of name and the sum of revenue , and group by attribute name in a bar chart, and sort in descending by the total number.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T2.Revenue DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T2.Revenue DESC"}, "hardness": "Hard"}, {"nl_queries": "How many players are from each country Visualize by bar chart, list by the Y in asc.", "db_id": "match_season", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Country_name , COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country GROUP BY T1.Country_name ORDER BY COUNT(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Country_name , COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country GROUP BY T1.Country_name ORDER BY COUNT(*) ASC"}, "hardness": "Hard"}, {"nl_queries": "A bar chart for listing the number of the actual delivery date for all the orders with quantity 1", "db_id": "cre_Drama_Workshop_Groups", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID = T2.Order_ID WHERE T2.Order_Quantity = 1", "binning": "BIN Actual_Delivery_Date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID = T2.Order_ID WHERE T2.Order_Quantity = 1 BIN Actual_Delivery_Date BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "What are the number of the countries of mountains with height bigger than 5000?, I want to display X-axis in ascending order.", "db_id": "climbing", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country ASC"}, "hardness": "Hard"}, {"nl_queries": "Display a bar chart for what is the name of each continent and how many car makers are there in each one?, and I want to order in ascending by the Continent.", "db_id": "car_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY T1.Continent ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY T1.Continent ASC"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, find founder and the average of price , and group by attribute founder, and visualize them by a bar chart, and could you rank by the Founder in asc?", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Founder , AVG(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder ORDER BY Founder ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Founder , AVG(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder ORDER BY Founder ASC"}, "hardness": "Hard"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, return a bar chart about the distribution of  hire_date and the sum of salary bin hire_date by time.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "Create a pie chart showing the total number across outcome code.", "db_id": "customers_campaigns_ecommerce", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT outcome_code , count(*) FROM mailshot_customers GROUP BY outcome_code", "binning": ""}, "VQL": "Visualize PIE SELECT outcome_code , count(*) FROM mailshot_customers GROUP BY outcome_code"}, "hardness": "Easy"}, {"nl_queries": "What are the number of the names of all races held between 2009 and 2011?, and order X-axis in ascending order.", "db_id": "formula_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , COUNT(name) FROM races WHERE YEAR BETWEEN 2009 AND 2011 GROUP BY name ORDER BY name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT name , COUNT(name) FROM races WHERE YEAR BETWEEN 2009 AND 2011 GROUP BY name ORDER BY name ASC"}, "hardness": "Hard"}, {"nl_queries": "Return a bar chart about the distribution of  date_address_from and the average of monthly_rental , and group by attribute other_details and bin date_address_from by weekday.", "db_id": "behavior_monitoring", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC", "binning": "BIN date_address_from BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, show me about the correlation between  price and  manufacturer , and group by attribute headquarter in a scatter chart.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Price , Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter", "binning": ""}, "VQL": "Visualize SCATTER SELECT Price , Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter"}, "hardness": "Medium"}, {"nl_queries": "Compare the frequency of each type of bed by a bar chart, and list bedType from high to low order.", "db_id": "inn_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT bedType , COUNT(bedType) FROM Rooms WHERE decor = \"traditional\" GROUP BY bedType ORDER BY bedType DESC", "binning": ""}, "VQL": "Visualize BAR SELECT bedType , COUNT(bedType) FROM Rooms WHERE decor = \"traditional\" GROUP BY bedType ORDER BY bedType DESC"}, "hardness": "Hard"}, {"nl_queries": "Stacked bar chart of team_id for with each All_Home in each acc road", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road"}, "hardness": "Extra Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, find founder and the average of price , and group by attribute founder, and visualize them by a bar chart, and sort by the Y in descending.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Founder , AVG(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder ORDER BY AVG(Price) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Founder , AVG(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder ORDER BY AVG(Price) DESC"}, "hardness": "Hard"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, find job_id and the sum of manager_id , and group by attribute job_id, and visualize them by a bar chart, and list by the X in desc.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, return a bar chart about the distribution of founder and the average of code , and group by attribute founder, and order in descending by the total number.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code DESC"}, "hardness": "Hard"}, {"nl_queries": "What is the booking end dates of the apartments with type code \"Duplex\"? Bin the year into weekday interval with a bar chart, and sort by the Y in asc.", "db_id": "apartment_rentals", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT booking_end_date , COUNT(booking_end_date) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.apt_type_code = \"Duplex\"  ORDER BY COUNT(booking_start_date) ASC", "binning": "BIN booking_start_date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT booking_end_date , COUNT(booking_end_date) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.apt_type_code = \"Duplex\"  ORDER BY COUNT(booking_start_date) ASC BIN booking_start_date BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "Give the years and official names of the cities of each competition, and sort the number of year in descending order.", "db_id": "farm", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Year , COUNT(Year) FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID  ORDER BY COUNT(Year) DESC", "binning": "BIN Year BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Year , COUNT(Year) FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID  ORDER BY COUNT(Year) DESC BIN Year BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "Show me a bar chart for what is the id and trade name of the medicines can interact with at least 3 enzymes?, and show total number from high to low order.", "db_id": "medicine_enzyme_interaction", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Trade_Name , id FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id ORDER BY id DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Trade_Name , id FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id ORDER BY id DESC"}, "hardness": "Medium"}, {"nl_queries": "Plot how many party by grouped by party as a bar graph", "db_id": "election_representative", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Party , COUNT(Party) FROM representative GROUP BY Party", "binning": ""}, "VQL": "Visualize BAR SELECT Party , COUNT(Party) FROM representative GROUP BY Party"}, "hardness": "Easy"}, {"nl_queries": "Show me the total number by country in a histogram, and could you display by the x axis in asc?", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Country , count(*) FROM stadium GROUP BY country ORDER BY Country ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Country , count(*) FROM stadium GROUP BY country ORDER BY Country ASC"}, "hardness": "Medium"}, {"nl_queries": "Create a bar chart showing total number of stu hrs across dept code, and list by the x axis from low to high.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT DEPT_CODE , sum(stu_hrs) FROM student GROUP BY dept_code ORDER BY DEPT_CODE ASC", "binning": ""}, "VQL": "Visualize BAR SELECT DEPT_CODE , sum(stu_hrs) FROM student GROUP BY dept_code ORDER BY DEPT_CODE ASC"}, "hardness": "Medium"}, {"nl_queries": "Give me a bar chart for mean team id of each all home, and I want to show in descending by the All_Home.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Home , AVG(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home DESC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Home , AVG(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home DESC"}, "hardness": "Medium"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, give me the comparison about the sum of department_id over the  hire_date bin hire_date by time by a bar chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "Give me the comparison about Team_ID over the All_Neutral by a bar chart, show from high to low by the All_Neutral please.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Neutral , Team_ID FROM basketball_match ORDER BY All_Neutral DESC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Neutral , Team_ID FROM basketball_match ORDER BY All_Neutral DESC"}, "hardness": "Easy"}, {"nl_queries": "Return the number of the completion date for all the tests that have \"Fail\" result, sort Y-axis in asc order please.", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_of_completion , COUNT(date_of_completion) FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = \"Fail\"  ORDER BY COUNT(date_of_completion) ASC", "binning": "BIN date_of_completion BY MONTH"}, "VQL": "Visualize BAR SELECT date_of_completion , COUNT(date_of_completion) FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = \"Fail\"  ORDER BY COUNT(date_of_completion) ASC BIN date_of_completion BY MONTH"}, "hardness": "Extra Hard"}, {"nl_queries": "Show the total number from each rank", "db_id": "ship_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Rank , count(*) FROM captain GROUP BY rank", "binning": ""}, "VQL": "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank"}, "hardness": "Easy"}, {"nl_queries": "Show the comparison of the total number of the home city of all drivers with a bar chart.", "db_id": "school_bus", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Home_city , COUNT(Home_city) FROM driver GROUP BY Home_city", "binning": ""}, "VQL": "Visualize BAR SELECT Home_city , COUNT(Home_city) FROM driver GROUP BY Home_city"}, "hardness": "Easy"}, {"nl_queries": "Give me the comparison about  gender_mf over the  personal_name  by a bar chart.", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT personal_name , gender_mf FROM Course_Authors_and_Tutors ORDER BY personal_name", "binning": ""}, "VQL": "Visualize BAR SELECT personal_name , gender_mf FROM Course_Authors_and_Tutors ORDER BY personal_name"}, "hardness": "Easy"}, {"nl_queries": "Compare the frequency of each type of bed by a bar chart, and I want to list by the y-axis in desc.", "db_id": "inn_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT bedType , COUNT(bedType) FROM Rooms WHERE decor = \"traditional\" GROUP BY bedType ORDER BY COUNT(bedType) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT bedType , COUNT(bedType) FROM Rooms WHERE decor = \"traditional\" GROUP BY bedType ORDER BY COUNT(bedType) DESC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who was hired before 2002-06-21, a line chart shows the change of  manager_id over  hire_date ", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE hire_date < '2002-06-21'", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE hire_date < '2002-06-21'"}, "hardness": "Easy"}, {"nl_queries": "How many students taking a course who received an A or C? Group by students' first name with a bar chart, I want to rank X-axis from low to high order please.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT STU_FNAME , COUNT(STU_FNAME) FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A' GROUP BY STU_FNAME ORDER BY STU_FNAME ASC", "binning": ""}, "VQL": "Visualize BAR SELECT STU_FNAME , COUNT(STU_FNAME) FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A' GROUP BY STU_FNAME ORDER BY STU_FNAME ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "List the names of aircrafts and the number of times it won matches Plot them as bar chart, could you list from low to high by the y-axis please?", "db_id": "aircraft", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Aircraft , COUNT(*) FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft ORDER BY COUNT(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Aircraft , COUNT(*) FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft ORDER BY COUNT(*) ASC"}, "hardness": "Hard"}, {"nl_queries": "Count the names of each high schooler using a bar chart, order in desc by the how many name.", "db_id": "network_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) DESC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, find  name and the sum of manufacturer , and group by attribute name, and visualize them by a bar chart.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name"}, "hardness": "Medium"}, {"nl_queries": "Find Nationality and the average of ID , and group by attribute Nationality, and visualize them by a bar chart, could you sort bars from high to low order?", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nationality , AVG(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Nationality , AVG(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC"}, "hardness": "Medium"}, {"nl_queries": "Give me a histogram for what are the names of projects that require more than 300 hours, and how many scientists are assigned to each?, and display in asc by the x axis.", "db_id": "scientist_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name ORDER BY Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name ORDER BY Name ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "What are the cost and treatment type description of each treatment. Show bar chart.", "db_id": "dog_kennels", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT treatment_type_description , AVG(cost_of_treatment) FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY treatment_type_description", "binning": ""}, "VQL": "Visualize BAR SELECT treatment_type_description , AVG(cost_of_treatment) FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY treatment_type_description"}, "hardness": "Medium"}, {"nl_queries": "What are the names of all races held between 2009 and 2011, and count them by a bar chart", "db_id": "formula_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , COUNT(name) FROM races WHERE YEAR BETWEEN 2009 AND 2011 GROUP BY name", "binning": ""}, "VQL": "Visualize BAR SELECT name , COUNT(name) FROM races WHERE YEAR BETWEEN 2009 AND 2011 GROUP BY name"}, "hardness": "Medium"}, {"nl_queries": "For all employees who have the letters D or S in their first name, find job_id and the average of employee_id , and group by attribute job_id, and visualize them by a bar chart, rank in asc by the y-axis please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, a scatter chart shows the correlation between  commission_pct and  department_id .", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT COMMISSION_PCT , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)", "binning": ""}, "VQL": "Visualize SCATTER SELECT COMMISSION_PCT , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, return a bar chart about the distribution of  last_name and  employee_id .", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT LAST_NAME , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)", "binning": ""}, "VQL": "Visualize BAR SELECT LAST_NAME , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)"}, "hardness": "Extra Hard"}, {"nl_queries": "What are the names of device shops, and what are the carriers that they carry devices in stock for?, could you sort in ascending by the x-axis?", "db_id": "device", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Carrier , COUNT(Carrier) FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID = T2.Device_ID JOIN shop AS T3 ON T1.Shop_ID = T3.Shop_ID GROUP BY Carrier ORDER BY Carrier ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID = T2.Device_ID JOIN shop AS T3 ON T1.Shop_ID = T3.Shop_ID GROUP BY Carrier ORDER BY Carrier ASC"}, "hardness": "Hard"}, {"nl_queries": "List the number of dogs arrived in each year with a bar chart, and order in ascending by the total number please.", "db_id": "dog_kennels", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_arrived , COUNT(date_arrived) FROM Dogs  ORDER BY COUNT(date_arrived) ASC", "binning": "BIN date_arrived BY YEAR"}, "VQL": "Visualize BAR SELECT date_arrived , COUNT(date_arrived) FROM Dogs  ORDER BY COUNT(date_arrived) ASC BIN date_arrived BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "For those employees who was hired before 2002-06-21, show me the trend about  commission_pct over  hire_date  with a line chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE hire_date < '2002-06-21'", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE hire_date < '2002-06-21'"}, "hardness": "Easy"}, {"nl_queries": "Plot sum capacity over openning year in a line chart, I want to display by the X in descending.", "db_id": "cinema", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Openning_year , SUM(Capacity) FROM cinema  ORDER BY Openning_year DESC", "binning": "BIN Openning_year BY YEAR"}, "VQL": "Visualize LINE SELECT Openning_year , SUM(Capacity) FROM cinema  ORDER BY Openning_year DESC BIN Openning_year BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "Find the name of all students who were in the tryout sorted in alphabetic order, and count them by a bar chart", "db_id": "soccer_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT pName , COUNT(pName) FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID GROUP BY pName ORDER BY T1.pName", "binning": ""}, "VQL": "Visualize BAR SELECT pName , COUNT(pName) FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID GROUP BY pName ORDER BY T1.pName"}, "hardness": "Hard"}, {"nl_queries": "Show the draft pick numbers and draft classes of players whose positions are defenders Show bar chart, I want to list by the x-axis from low to high.", "db_id": "match_season", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Draft_Class , Draft_Pick_Number FROM match_season WHERE POSITION = \"Defender\" ORDER BY Draft_Class ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Draft_Class , Draft_Pick_Number FROM match_season WHERE POSITION = \"Defender\" ORDER BY Draft_Class ASC"}, "hardness": "Medium"}, {"nl_queries": "How many movie reviews does each director get. Show bar chart.", "db_id": "movie_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT director , count(*) FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID GROUP BY T1.director", "binning": ""}, "VQL": "Visualize BAR SELECT director , count(*) FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID GROUP BY T1.director"}, "hardness": "Medium"}, {"nl_queries": "For those employees who did not have any job in the past, a line chart shows the trend of department_id over hire_date , order by the X in ascending.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE ASC", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE ASC"}, "hardness": "Medium"}, {"nl_queries": "Show the number of documents in each day for all documents on project with details 'Graph Database project' and bin document date by year interval and group by document name with a group line chart.", "db_id": "cre_Docs_and_Epenses", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Document_Date , COUNT(Document_Date) FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'Graph Database project' GROUP BY Document_Name", "binning": "BIN Document_Date BY YEAR"}, "VQL": "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'Graph Database project' GROUP BY Document_Name BIN Document_Date BY YEAR"}, "hardness": "Extra Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, visualize a bar chart about the distribution of headquarter and the amount of headquarter , and group by attribute headquarter, and list in descending by the y axis.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Headquarter , COUNT(Headquarter) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY COUNT(Headquarter) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Headquarter , COUNT(Headquarter) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY COUNT(Headquarter) DESC"}, "hardness": "Hard"}, {"nl_queries": "A scatter chart shows the correlation between  Height and  Weight .", "db_id": "candidate_poll", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Height , Weight FROM people", "binning": ""}, "VQL": "Visualize SCATTER SELECT Height , Weight FROM people"}, "hardness": "Easy"}, {"nl_queries": "For those records from the products and each product's manufacturer, draw a bar chart about the distribution of name and revenue , and group by attribute name, display from low to high by the Name.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Name ASC"}, "hardness": "Hard"}, {"nl_queries": "What are the ids and details for all organizations that have grants of more than 6000 dollars Show bar chart, and sort by the names from high to low.", "db_id": "tracking_grants_for_research", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T2.organisation_details DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T2.organisation_details DESC"}, "hardness": "Hard"}, {"nl_queries": "List the dog name and age of the dogs who have been abandoned in a bar chart, and list in ascending by the y-axis please.", "db_id": "dog_kennels", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , age FROM Dogs WHERE abandoned_yn = 1 ORDER BY age ASC", "binning": ""}, "VQL": "Visualize BAR SELECT name , age FROM Dogs WHERE abandoned_yn = 1 ORDER BY age ASC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, show me about the distribution of name and price , and group by attribute founder in a bar chart, and I want to rank by the Price from high to low.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder , T1.Name ORDER BY T1.Price DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder , T1.Name ORDER BY T1.Price DESC"}, "hardness": "Hard"}, {"nl_queries": "For all employees who have the letters D or S in their first name, visualize a bar chart about the distribution of  job_id and the amount of job_id , and group by attribute job_id.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , COUNT(JOB_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID"}, "hardness": "Extra Hard"}, {"nl_queries": "A bar chart shows the distribution of Sex and the sum of Weight , and group by attribute Sex, list Y-axis in asc order please.", "db_id": "candidate_poll", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Sex , SUM(Weight) FROM people GROUP BY Sex ORDER BY SUM(Weight) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Sex , SUM(Weight) FROM people GROUP BY Sex ORDER BY SUM(Weight) ASC"}, "hardness": "Medium"}, {"nl_queries": "For all employees who have the letters D or S in their first name, draw a bar chart about the distribution of hire_date and the average of manager_id bin hire_date by weekday, show by the the average of manager id in descending.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY AVG(MANAGER_ID) DESC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY AVG(MANAGER_ID) DESC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "What are the number of the titles of all movies that have rating star is between 3 and 5?, list by the y axis in desc.", "db_id": "movie_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT title , COUNT(title) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T1.stars BETWEEN 3 AND 5 GROUP BY title ORDER BY COUNT(title) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT title , COUNT(title) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T1.stars BETWEEN 3 AND 5 GROUP BY title ORDER BY COUNT(title) DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "Plot the total number by grouped by nationality as a bar graph, I want to list by the Y in ascending.", "db_id": "news_report", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nationality , COUNT(*) FROM journalist GROUP BY Nationality ORDER BY COUNT(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM journalist GROUP BY Nationality ORDER BY COUNT(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "Please tell the names and revenues of the companies with the highest revenues in each headquarter city, display Name in asc order please.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , max(revenue) FROM manufacturers GROUP BY Headquarter ORDER BY Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , max(revenue) FROM manufacturers GROUP BY Headquarter ORDER BY Name ASC"}, "hardness": "Medium"}, {"nl_queries": "Return a pie chart about the proportion of  Team_Name and  Team_ID.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Team_Name , Team_ID FROM basketball_match", "binning": ""}, "VQL": "Visualize PIE SELECT Team_Name , Team_ID FROM basketball_match"}, "hardness": "Easy"}, {"nl_queries": "Show the party and the number of drivers in each party with a bar chart, and sort bars in descending order.", "db_id": "school_bus", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Party , count(*) FROM driver GROUP BY party ORDER BY Party DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Party , count(*) FROM driver GROUP BY party ORDER BY Party DESC"}, "hardness": "Medium"}, {"nl_queries": "Plot how many class by grouped by class as a bar graph, and display by the X-axis in descending.", "db_id": "ship_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class DESC"}, "hardness": "Medium"}, {"nl_queries": "Show me start_station_id by start station name in a histogram", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT start_station_name , start_station_id FROM trip", "binning": ""}, "VQL": "Visualize BAR SELECT start_station_name , start_station_id FROM trip"}, "hardness": "Easy"}, {"nl_queries": "Give me a histogram for what are the name and level of catalog structure with level number between 5 and 10, and sort y-axis in asc order.", "db_id": "product_catalog", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number ASC", "binning": ""}, "VQL": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number ASC"}, "hardness": "Medium"}, {"nl_queries": "For each type of store, how many of them are there Plot them as bar chart, and display by the X from high to low.", "db_id": "store_product", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Type , count(*) FROM store GROUP BY TYPE ORDER BY Type DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Type , count(*) FROM store GROUP BY TYPE ORDER BY Type DESC"}, "hardness": "Medium"}, {"nl_queries": "Return a histogram on what is the code of each role and the number of employees in each role?, and I want to display bars in ascending order.", "db_id": "cre_Doc_Tracking_DB", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY Role_Code ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY Role_Code ASC"}, "hardness": "Medium"}, {"nl_queries": "Plot year by the average of attendance as a line chart, order X-axis in desc order please.", "db_id": "baseball_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT year , avg(attendance) FROM home_game GROUP BY YEAR ORDER BY year DESC", "binning": ""}, "VQL": "Visualize LINE SELECT year , avg(attendance) FROM home_game GROUP BY YEAR ORDER BY year DESC"}, "hardness": "Medium"}, {"nl_queries": "Bar graph to show how many result from different result", "db_id": "workshop_paper", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result", "binning": ""}, "VQL": "Visualize BAR SELECT Result , COUNT(Result) FROM acceptance GROUP BY Result"}, "hardness": "Easy"}, {"nl_queries": "Show me a scatter plot of council tax id and cmi_cross_ref_id for .", "db_id": "local_govt_mdm", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT council_tax_id , cmi_cross_ref_id FROM parking_fines", "binning": ""}, "VQL": "Visualize SCATTER SELECT council_tax_id , cmi_cross_ref_id FROM parking_fines"}, "hardness": "Easy"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, show me about the correlation between  employee_id and  commission_pct  in a scatter chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT EMPLOYEE_ID , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)", "binning": ""}, "VQL": "Visualize SCATTER SELECT EMPLOYEE_ID , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)"}, "hardness": "Extra Hard"}, {"nl_queries": "How many faculty members do we have for each rank? render a bar chart, and sort from high to low by the Y.", "db_id": "activity_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Rank , count(Rank) FROM Faculty GROUP BY Rank ORDER BY count(Rank) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Rank , count(Rank) FROM Faculty GROUP BY Rank ORDER BY count(Rank) DESC"}, "hardness": "Medium"}, {"nl_queries": "A bar chart for finding the number of the parties associated with the delegates from district 1 Who served as governors of the parties?, display in ascending by the total number.", "db_id": "election", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Governor , COUNT(Governor) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.District = 1 GROUP BY Governor ORDER BY COUNT(Governor) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Governor , COUNT(Governor) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.District = 1 GROUP BY Governor ORDER BY COUNT(Governor) ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "Draw a bar chart for how many storms occured in each region?, could you rank in desc by the bars?", "db_id": "storm_record", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Region_name , count(*) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id ORDER BY Region_name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Region_name , count(*) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id ORDER BY Region_name DESC"}, "hardness": "Hard"}, {"nl_queries": "Count the hometown by hometown.", "db_id": "shop_membership", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Hometown , COUNT(Hometown) FROM member GROUP BY Hometown", "binning": ""}, "VQL": "Visualize BAR SELECT Hometown , COUNT(Hometown) FROM member GROUP BY Hometown"}, "hardness": "Easy"}, {"nl_queries": "Give me the comparison about the sum of Credits over the  Days , and group by attribute Days by a bar chart.", "db_id": "college_3", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Days , SUM(Credits) FROM COURSE GROUP BY Days ORDER BY Credits", "binning": ""}, "VQL": "Visualize BAR SELECT Days , SUM(Credits) FROM COURSE GROUP BY Days ORDER BY Credits"}, "hardness": "Medium"}, {"nl_queries": "Find the number of employees hired in each shop; show the shop name as well Plot them as bar chart, and display from low to high by the bar.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , count(*) FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t2.name ORDER BY Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , count(*) FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t2.name ORDER BY Name ASC"}, "hardness": "Hard"}, {"nl_queries": "Return the results of all music festivals using a bar chart, list in descending by the X.", "db_id": "music_4", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result ORDER BY Result DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result ORDER BY Result DESC"}, "hardness": "Medium"}, {"nl_queries": "A bar chart for returning the number of the dates of birth for entrepreneurs who have either the investor Simon Woodroffe or Peter Jones.", "db_id": "entrepreneur", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Date_of_Birth , COUNT(Date_of_Birth) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Investor = \"Simon Woodroffe\" OR T1.Investor = \"Peter Jones\"", "binning": "BIN Date_of_Birth BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Date_of_Birth , COUNT(Date_of_Birth) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Investor = \"Simon Woodroffe\" OR T1.Investor = \"Peter Jones\" BIN Date_of_Birth BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees who was hired before 2002-06-21, show me the trend about salary over hire_date with a line chart, and rank in ascending by the HIRE_DATE please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC"}, "hardness": "Medium"}, {"nl_queries": "Show a bar chart about the number of results of the battles when the bulgarian commander is not 'Boril', and I want to rank by the bars in asc.", "db_id": "battle_death", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT result , COUNT(result) FROM battle WHERE bulgarian_commander != 'Boril' GROUP BY result ORDER BY result ASC", "binning": ""}, "VQL": "Visualize BAR SELECT result , COUNT(result) FROM battle WHERE bulgarian_commander != 'Boril' GROUP BY result ORDER BY result ASC"}, "hardness": "Hard"}, {"nl_queries": "For those wines whose price is bigger than 100, count their total number of each year and sort by year in a bar chart.", "db_id": "wine_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Year , COUNT(Year) FROM WINE WHERE Price > 100 GROUP BY Grape ,  Year ORDER BY YEAR", "binning": ""}, "VQL": "Visualize BAR SELECT Year , COUNT(Year) FROM WINE WHERE Price > 100 GROUP BY Grape ,  Year ORDER BY YEAR"}, "hardness": "Extra Hard"}, {"nl_queries": "Give me a histogram for what are the names and average salaries for departments with average salary higher than 42000?", "db_id": "college_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name", "binning": ""}, "VQL": "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, visualize a bar chart about the distribution of founder and the average of price , and group by attribute founder, display by the X-axis from low to high please.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Founder , AVG(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder ORDER BY Founder ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Founder , AVG(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder ORDER BY Founder ASC"}, "hardness": "Hard"}, {"nl_queries": " what is the average price range of hotels for each each star rating code?", "db_id": "cre_Theme_park", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT star_rating_code , avg(price_range) FROM HOTELS GROUP BY star_rating_code", "binning": ""}, "VQL": "Visualize SCATTER SELECT star_rating_code , avg(price_range) FROM HOTELS GROUP BY star_rating_code"}, "hardness": "Easy"}, {"nl_queries": "Give me the comparison about ID over the meter_400 by a bar chart, and list in desc by the names.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_400 , ID FROM swimmer ORDER BY meter_400 DESC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_400 , ID FROM swimmer ORDER BY meter_400 DESC"}, "hardness": "Easy"}, {"nl_queries": "Give me the comparison about Height over the Name by a bar chart, and could you rank y-axis in desc order please?", "db_id": "candidate_poll", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , Height FROM people ORDER BY Height DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC"}, "hardness": "Easy"}, {"nl_queries": "Show all book categories and the number of books in each category with a bar chart, and I want to sort by the X in asc.", "db_id": "culture_company", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY Category ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY Category ASC"}, "hardness": "Medium"}, {"nl_queries": "Return the number of the claim start date for the claims whose claimed amount is no more than the average", "db_id": "insurance_policies", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Claims WHERE Amount_Settled <= ( SELECT avg(Amount_Settled) FROM Claims )", "binning": "BIN Date_Claim_Made BY YEAR"}, "VQL": "Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Claims WHERE Amount_Settled <= ( SELECT avg(Amount_Settled) FROM Claims ) BIN Date_Claim_Made BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "Give me the comparison about the amount of All_Home over the  All_Home , and group by attribute All_Home by a bar chart.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home", "binning": ""}, "VQL": "Visualize BAR SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home"}, "hardness": "Easy"}, {"nl_queries": "Show the of customer addresses and group by premises type and address type code in a stacked bar chart The x-axis is premises type, and rank by the names from high to low.", "db_id": "customers_campaigns_ecommerce", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT premises_type , COUNT(premises_type) FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id = T2.premise_id GROUP BY address_type_code ,  premises_type ORDER BY premises_type DESC", "binning": ""}, "VQL": "Visualize BAR SELECT premises_type , COUNT(premises_type) FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id = T2.premise_id GROUP BY address_type_code ,  premises_type ORDER BY premises_type DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "What is the relationship between customer id and account name? Show me a scatter chart.", "db_id": "customers_card_transactions", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT customer_id , account_name FROM Accounts", "binning": ""}, "VQL": "Visualize SCATTER SELECT customer_id , account_name FROM Accounts"}, "hardness": "Easy"}, {"nl_queries": "Please give me a bar chart showing institution types, along with the total enrollment for each type, could you order by the x axis in desc?", "db_id": "protein_institute", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Type , sum(enrollment) FROM institution GROUP BY TYPE ORDER BY Type DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Type , sum(enrollment) FROM institution GROUP BY TYPE ORDER BY Type DESC"}, "hardness": "Medium"}, {"nl_queries": "Please return me a bar chart show what are the total smallest rating of different movie title?, and list in ascending by the X.", "db_id": "movie_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.title , SUM(min(T1.stars)) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T2.title ORDER BY T2.title ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.title , SUM(min(T1.stars)) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T2.title ORDER BY T2.title ASC"}, "hardness": "Hard"}, {"nl_queries": "Compute the total number of chips of different company names for all the phones that were launched in year 2002 or have RAM size greater than 32.", "db_id": "phone_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Company_name , COUNT(Company_name) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE T1.Launch_year = 2002 OR T1.RAM_MiB > 32 GROUP BY Company_name", "binning": ""}, "VQL": "Visualize BAR SELECT Company_name , COUNT(Company_name) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE T1.Launch_year = 2002 OR T1.RAM_MiB > 32 GROUP BY Company_name"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, give me the comparison about the average of salary over the hire_date bin hire_date by time, show by the y-axis in ascending please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(SALARY) ASC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH"}, "hardness": "Extra Hard"}, {"nl_queries": "List the number of dogs each owner has in a bar chart that groups by owner's last name, and I want to order how many last name in ascending order please.", "db_id": "dog_kennels", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT last_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name ORDER BY COUNT(last_name) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT last_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name ORDER BY COUNT(last_name) ASC"}, "hardness": "Hard"}, {"nl_queries": "how many rooms have king beds? Report the number for each decor type, and could you order by the y-axis from high to low please?", "db_id": "inn_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT decor , count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT decor , count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor ORDER BY count(*) DESC"}, "hardness": "Hard"}, {"nl_queries": "Show me a scatter plot for the relationship between average and minimum age of captains in each class.", "db_id": "ship_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT avg(age) , min(age) FROM captain GROUP BY CLASS", "binning": ""}, "VQL": "Visualize SCATTER SELECT avg(age) , min(age) FROM captain GROUP BY CLASS"}, "hardness": "Easy"}, {"nl_queries": "Show the different countries and the number of members from each with a bar chart, rank by the bar in ascending.", "db_id": "decoration_competition", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Country , COUNT(*) FROM member GROUP BY Country ORDER BY Country ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Country , COUNT(*) FROM member GROUP BY Country ORDER BY Country ASC"}, "hardness": "Medium"}, {"nl_queries": "Show the name of each county along with the corresponding number of delegates from that county. ", "db_id": "election", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id", "binning": ""}, "VQL": "Visualize PIE SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id"}, "hardness": "Medium"}, {"nl_queries": "Show all allergy type with number of students affected with a bar chart, and order X-axis from high to low order.", "db_id": "allergy_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY AllergyType DESC", "binning": ""}, "VQL": "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY AllergyType DESC"}, "hardness": "Hard"}, {"nl_queries": "What is the total cloud cover rates of the dates (bin into day of the week interval) that had the top 5 cloud cover rates? You can show me a bar chart.", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date , SUM(cloud_cover) FROM weather", "binning": "BIN date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather BIN date BY WEEKDAY"}, "hardness": "Easy"}, {"nl_queries": "Return a bar chart on what are the names of all genres in alphabetical order, combined with its ratings?", "db_id": "music_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT g_name , rating FROM genre ORDER BY g_name", "binning": ""}, "VQL": "Visualize BAR SELECT g_name , rating FROM genre ORDER BY g_name"}, "hardness": "Easy"}, {"nl_queries": "Return the name of each physician and the number of patients he or she treats, and show bars from high to low order.", "db_id": "hospital_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid ORDER BY T1.Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid ORDER BY T1.Name DESC"}, "hardness": "Hard"}, {"nl_queries": "Find the total student enrollment for different affiliation type schools. ", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation", "binning": ""}, "VQL": "Visualize PIE SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation"}, "hardness": "Easy"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, find first_name and employee_id , and visualize them by a bar chart, order from low to high by the bars.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT FIRST_NAME , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY FIRST_NAME ASC", "binning": ""}, "VQL": "Visualize BAR SELECT FIRST_NAME , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY FIRST_NAME ASC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, visualize a bar chart about the distribution of hire_date and the average of employee_id bin hire_date by time, and I want to rank in ascending by the y-axis.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY AVG(EMPLOYEE_ID) ASC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "Return a line chart about the change of the amount of date_address_to over  date_address_to , and group by attribute date_address_to.", "db_id": "behavior_monitoring", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC", "binning": ""}, "VQL": "Visualize LINE SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY date_address_to ORDER BY monthly_rental DESC"}, "hardness": "Medium"}, {"nl_queries": "Find the number of matches happened in each year. Plot them as bar chart.", "db_id": "wta_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT year , count(*) FROM matches GROUP BY YEAR", "binning": ""}, "VQL": "Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR"}, "hardness": "Easy"}, {"nl_queries": "For those records from the products and each product's manufacturer, draw a bar chart about the distribution of headquarter and the average of revenue , and group by attribute headquarter, and I want to order by the Headquarter from low to high please.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC"}, "hardness": "Hard"}, {"nl_queries": "Return the completion date for all the tests that have \"Fail\" result, and count them by a bar chart", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_of_completion , COUNT(date_of_completion) FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = \"Fail\"", "binning": "BIN date_of_completion BY MONTH"}, "VQL": "Visualize BAR SELECT date_of_completion , COUNT(date_of_completion) FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = \"Fail\" BIN date_of_completion BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, give me the comparison about manager_id over the first_name , could you display by the names from high to low?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT FIRST_NAME , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY FIRST_NAME DESC", "binning": ""}, "VQL": "Visualize BAR SELECT FIRST_NAME , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY FIRST_NAME DESC"}, "hardness": "Medium"}, {"nl_queries": "Bar graph to show the number of name from different name, display in descending by the y axis.", "db_id": "network_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) DESC"}, "hardness": "Medium"}, {"nl_queries": "Bar chart x axis time y axis id", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Time , ID FROM swimmer", "binning": ""}, "VQL": "Visualize BAR SELECT Time , ID FROM swimmer"}, "hardness": "Easy"}, {"nl_queries": "What are the names and their total grades for each high schooler? Show me the result using a bar chart, I want to sort by the y-axis in asc.", "db_id": "network_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) ASC"}, "hardness": "Medium"}, {"nl_queries": "Compare the total enrollment in each county with a bar chart.", "db_id": "school_finance", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT County , sum(enrollment) FROM school GROUP BY county", "binning": ""}, "VQL": "Visualize BAR SELECT County , sum(enrollment) FROM school GROUP BY county"}, "hardness": "Easy"}, {"nl_queries": "Return a histogram on how many matches were played in each year, list in desc by the total number.", "db_id": "wta_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT year , count(*) FROM matches ORDER BY count(*) DESC", "binning": "BIN year BY YEAR"}, "VQL": "Visualize BAR SELECT year , count(*) FROM matches ORDER BY count(*) DESC BIN year BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "Give me a histogram to show the date and the amount for all the payments processed with Visa, and show in asc by the Y-axis please.", "db_id": "insurance_policies", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Amount_Payment ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Amount_Payment ASC"}, "hardness": "Medium"}, {"nl_queries": "Stack bar chart of school_id vs ACC_Home based on all home, and list from high to low by the bars.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home DESC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home DESC"}, "hardness": "Medium"}, {"nl_queries": "How many engineers did each staff contact? List both the contact staff name and number of engineers contacted Plot them as bar chart, and I want to rank from low to high by the bar.", "db_id": "assets_maintenance", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT staff_name , count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name ORDER BY staff_name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT staff_name , count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name ORDER BY staff_name ASC"}, "hardness": "Hard"}, {"nl_queries": "What are the number of the names of photos taken with the lens brand 'Sigma' or 'Olympus'?", "db_id": "mountain_photos", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.name , COUNT(T1.name) FROM camera_lens AS T1 JOIN photos AS T2 ON T2.camera_lens_id = T1.id WHERE T1.brand = 'Sigma' OR T1.brand = 'Olympus' GROUP BY T1.name", "binning": ""}, "VQL": "Visualize BAR SELECT T1.name , COUNT(T1.name) FROM camera_lens AS T1 JOIN photos AS T2 ON T2.camera_lens_id = T1.id WHERE T1.brand = 'Sigma' OR T1.brand = 'Olympus' GROUP BY T1.name"}, "hardness": "Extra Hard"}, {"nl_queries": "Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes' by a bar chart.", "db_id": "department_management", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , AVG(Num_Employees) FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id WHERE T2.temporary_acting = 'Yes' GROUP BY Name", "binning": ""}, "VQL": "Visualize BAR SELECT Name , AVG(Num_Employees) FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id WHERE T2.temporary_acting = 'Yes' GROUP BY Name"}, "hardness": "Hard"}, {"nl_queries": "Visualize a bar chart about the distribution of ACC_Road and the average of School_ID , and group by attribute ACC_Road, could you order in ascending by the names?", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC"}, "hardness": "Medium"}, {"nl_queries": "List the height and weight of people in descending order of height in a scatter chart", "db_id": "body_builder", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Height , Weight FROM people", "binning": ""}, "VQL": "Visualize SCATTER SELECT Height , Weight FROM people"}, "hardness": "Easy"}, {"nl_queries": "Scatterplot of acc_percent vs school id by ACC_Regular_Season", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Regular_Season", "binning": ""}, "VQL": "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Regular_Season"}, "hardness": "Easy"}, {"nl_queries": "Give the proportion of what are the name and population of each county?", "db_id": "election", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT County_name , Population FROM county", "binning": ""}, "VQL": "Visualize PIE SELECT County_name , Population FROM county"}, "hardness": "Easy"}, {"nl_queries": "Return a histogram on what are the names and distances for all airplanes?", "db_id": "flight_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , distance FROM Aircraft", "binning": ""}, "VQL": "Visualize BAR SELECT name , distance FROM Aircraft"}, "hardness": "Easy"}, {"nl_queries": "Show the average of account details for different statement details in a bar chart, and sort bar in descending order.", "db_id": "cre_Docs_and_Epenses", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Statement_Details , AVG(Account_Details) FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id = T2.statement_id GROUP BY Statement_Details ORDER BY Statement_Details DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Statement_Details , AVG(Account_Details) FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id = T2.statement_id GROUP BY Statement_Details ORDER BY Statement_Details DESC"}, "hardness": "Hard"}, {"nl_queries": "Show the ids and details of the investors who have at least two transactions with type code \"SALE\" by a bar chart, rank in descending by the bar.", "db_id": "tracking_share_transactions", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Investor_details , T1.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.transaction_type_code = \"SALE\" ORDER BY T1.Investor_details DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Investor_details , T1.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.transaction_type_code = \"SALE\" ORDER BY T1.Investor_details DESC"}, "hardness": "Hard"}, {"nl_queries": "Show all card type codes and the number of cards in each type by a bar chart, and rank y-axis from low to high order.", "db_id": "customers_card_transactions", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT card_type_code , count(*) FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT card_type_code , count(*) FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "A line chart for giveing me the number of the dates when the max temperature was higher than 85, show by the X-axis in descending.", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date , COUNT(date) FROM weather WHERE max_temperature_f > 85 GROUP BY date ORDER BY date DESC", "binning": ""}, "VQL": "Visualize LINE SELECT date , COUNT(date) FROM weather WHERE max_temperature_f > 85 GROUP BY date ORDER BY date DESC"}, "hardness": "Hard"}, {"nl_queries": "What are the number of the dates in which the mean sea level pressure was between 30.3 and 31?", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date , COUNT(date) FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31", "binning": "BIN date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31 BIN date BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "Return a bar chart on what are the different template type codes, and how many templates correspond to each?", "db_id": "cre_Doc_Template_Mgt", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Template_Type_Code , count(*) FROM Templates GROUP BY template_type_code", "binning": ""}, "VQL": "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates GROUP BY template_type_code"}, "hardness": "Easy"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, a bar chart shows the distribution of hire_date and the amount of hire_date bin hire_date by time, and could you order by the Y from low to high?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY COUNT(HIRE_DATE) ASC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "Return the number of the date of birth for all the guests with gender code \"Male\", list x axis in descending order.", "db_id": "apartment_rentals", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY date_of_birth DESC", "binning": "BIN date_of_birth BY YEAR"}, "VQL": "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY date_of_birth DESC BIN date_of_birth BY YEAR"}, "hardness": "Hard"}, {"nl_queries": "Find the number of professors with a PhD degree in each department Show bar chart, and I want to sort x-axis in desc order.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT DEPT_CODE , count(*) FROM professor WHERE prof_high_degree = 'Ph.D.' GROUP BY dept_code ORDER BY DEPT_CODE DESC", "binning": ""}, "VQL": "Visualize BAR SELECT DEPT_CODE , count(*) FROM professor WHERE prof_high_degree = 'Ph.D.' GROUP BY dept_code ORDER BY DEPT_CODE DESC"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, a bar chart shows the distribution of name and manufacturer , and group by attribute headquarter, could you show from low to high by the y-axis?", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter , T1.Name ORDER BY T1.Manufacturer ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter , T1.Name ORDER BY T1.Manufacturer ASC"}, "hardness": "Hard"}, {"nl_queries": "Plot a scatter chart, age by the total number .", "db_id": "allergy_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Age , count(*) FROM Student GROUP BY age", "binning": ""}, "VQL": "Visualize SCATTER SELECT Age , count(*) FROM Student GROUP BY age"}, "hardness": "Easy"}, {"nl_queries": "For those employees who was hired before 2002-06-21, a line chart shows the change of employee_id over hire_date, and rank X-axis from high to low order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE DESC", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE DESC"}, "hardness": "Medium"}, {"nl_queries": "A bar chart about what are the destinations and number of flights to each one?", "db_id": "flight_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT destination , count(*) FROM Flight GROUP BY destination", "binning": ""}, "VQL": "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination"}, "hardness": "Easy"}, {"nl_queries": "For those records from the products and each product's manufacturer, find name and the average of revenue , and group by attribute name, and visualize them by a bar chart, list in descending by the y axis please.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T2.Revenue DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T2.Revenue DESC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who was hired before 2002-06-21, give me the comparison about the sum of employee_id over the hire_date bin hire_date by time by a bar chart, I want to rank in desc by the sum employee id.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(EMPLOYEE_ID) DESC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "What is the average age for each gender Visualize by bar chart, I want to order by the Y in asc please.", "db_id": "network_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT gender , avg(age) FROM Person GROUP BY gender ORDER BY avg(age) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT gender , avg(age) FROM Person GROUP BY gender ORDER BY avg(age) ASC"}, "hardness": "Medium"}, {"nl_queries": "Bar chart x axis location y axis how many location, and order by the Y-axis from low to high.", "db_id": "performance_attendance", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Location , COUNT(Location) FROM performance GROUP BY Location ORDER BY COUNT(Location) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Location , COUNT(Location) FROM performance GROUP BY Location ORDER BY COUNT(Location) ASC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about  code over the  name , and group by attribute headquarter by a bar chart.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter , T1.Name", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter , T1.Name"}, "hardness": "Medium"}, {"nl_queries": "Show the names and their average grades of each high schooler with a bar chart, and I want to rank by the bars in descending.", "db_id": "network_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC"}, "hardness": "Medium"}, {"nl_queries": "Just show the employee's last name and their manager's id using a bar chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT LAST_NAME , MANAGER_ID FROM employees", "binning": ""}, "VQL": "Visualize BAR SELECT LAST_NAME , MANAGER_ID FROM employees"}, "hardness": "Easy"}, {"nl_queries": "Find the number of classes offered for all class rooms that held at least 2 classes Show bar chart, and order from low to high by the Y.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT CLASS_ROOM , count(*) FROM CLASS GROUP BY class_room ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT CLASS_ROOM , count(*) FROM CLASS GROUP BY class_room ORDER BY count(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, a bar chart shows the distribution of  hire_date and the average of department_id bin hire_date by weekday.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "Show the number of brand from each brand, and I want to show by the how many brand from high to low.", "db_id": "mountain_photos", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT brand , COUNT(brand) FROM camera_lens GROUP BY brand ORDER BY COUNT(brand) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT brand , COUNT(brand) FROM camera_lens GROUP BY brand ORDER BY COUNT(brand) DESC"}, "hardness": "Medium"}, {"nl_queries": "Plot how many date to by grouped by date to as a bar graph, I want to sort y axis in desc order please.", "db_id": "tracking_grants_for_research", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_to , COUNT(date_to) FROM Project_Staff ORDER BY COUNT(date_to) DESC", "binning": "BIN date_to BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_to , COUNT(date_to) FROM Project_Staff ORDER BY COUNT(date_to) DESC BIN date_to BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "Visualize a bar chart for how many books fall into each category?, sort the total number in descending order.", "db_id": "culture_company", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY count(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "Show the different headquarters and number of companies at each headquarter, and I want to show y axis in descending order.", "db_id": "company_employee", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Headquarters , COUNT(*) FROM company GROUP BY Headquarters ORDER BY COUNT(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Headquarters , COUNT(*) FROM company GROUP BY Headquarters ORDER BY COUNT(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who was hired before 2002-06-21, a bar chart shows the distribution of  hire_date and the average of manager_id bin hire_date by weekday.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21'", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "Draw a bar chart about the distribution of All_Home and the sum of School_ID , and group by attribute All_Home, and order sum school id from low to high order.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY SUM(School_ID) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY SUM(School_ID) ASC"}, "hardness": "Medium"}, {"nl_queries": "Count the number of captains that have each rank Visualize by bar chart, rank by the the total number in descending.", "db_id": "ship_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY count(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "Bar chart of maximal product price from each product type code, show in desc by the maximal product price please.", "db_id": "department_store", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code ORDER BY max(product_price) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code ORDER BY max(product_price) DESC"}, "hardness": "Easy"}, {"nl_queries": "Show the number of debates for each person on the affirmative side in a bar chart.", "db_id": "debate", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID = T2.Debate_ID JOIN people AS T3 ON T1.Affirmative = T3.People_ID GROUP BY Name", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID = T2.Debate_ID JOIN people AS T3 ON T1.Affirmative = T3.People_ID GROUP BY Name"}, "hardness": "Medium"}, {"nl_queries": "How many dogs arrived in each day? Visualize with a bar chart that bins arrived date by weekday.", "db_id": "dog_kennels", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_arrived , COUNT(date_arrived) FROM Dogs", "binning": "BIN date_arrived BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_arrived , COUNT(date_arrived) FROM Dogs BIN date_arrived BY WEEKDAY"}, "hardness": "Easy"}, {"nl_queries": "Show me a bar chart for what is the average song rating for each language?, and list from low to high by the y axis.", "db_id": "music_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY avg(rating) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY avg(rating) ASC"}, "hardness": "Medium"}, {"nl_queries": "Visualize a bar chart about the number of winery of the wines whose price is bigger than 100.", "db_id": "wine_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Winery", "binning": ""}, "VQL": "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Winery"}, "hardness": "Medium"}, {"nl_queries": "Please give me a bar chart to compare the stars by directors, sort by the x axis in asc.", "db_id": "movie_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID ORDER BY director ASC", "binning": ""}, "VQL": "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID ORDER BY director ASC"}, "hardness": "Medium"}, {"nl_queries": "What are the last names for all scholarship students, and count them by a bar chart, and rank by the y axis from low to high please.", "db_id": "game_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT LName , COUNT(LName) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T1.onscholarship = 'Y' GROUP BY LName ORDER BY COUNT(LName) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT LName , COUNT(LName) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T1.onscholarship = 'Y' GROUP BY LName ORDER BY COUNT(LName) ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, visualize a bar chart about the distribution of founder and the sum of code , and group by attribute founder, and I want to sort in desc by the bar.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T2.Founder DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T2.Founder DESC"}, "hardness": "Hard"}, {"nl_queries": "Return a bar chart that the name as the X-axis, and the number of floors for all buildings as Y-axis, and ordered by the number of floors.", "db_id": "protein_institute", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , Floors FROM building ORDER BY floors", "binning": ""}, "VQL": "Visualize BAR SELECT Name , Floors FROM building ORDER BY floors"}, "hardness": "Easy"}, {"nl_queries": "For those employees who did not have any job in the past, give me the comparison about the sum of manager_id over the job_id , and group by attribute job_id by a bar chart, I want to sort by the names from high to low.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY JOB_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY JOB_ID DESC"}, "hardness": "Hard"}, {"nl_queries": "List singer names and number of concerts for each singer with a bar chart, and rank in ascending by the y-axis.", "db_id": "concert_singer", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id GROUP BY T2.singer_id ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id GROUP BY T2.singer_id ORDER BY count(*) ASC"}, "hardness": "Hard"}, {"nl_queries": "Show the number of headquarters from each headquarters, and I want to show y-axis from high to low order please.", "db_id": "company_employee", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY COUNT(Headquarters) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY COUNT(Headquarters) DESC"}, "hardness": "Medium"}, {"nl_queries": "For those payments processed with Visa, show me the number of payments of each day of the week using a bar chart, show from high to low by the Y.", "db_id": "insurance_policies", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY COUNT(Date_Payment_Made) DESC", "binning": "BIN Date_Payment_Made BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY COUNT(Date_Payment_Made) DESC BIN Date_Payment_Made BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "Find the number of the names of Japanese constructors that have once earned more than 5 points?, and sort in desc by the names.", "db_id": "formula_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name ORDER BY name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name ORDER BY name DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees who did not have any job in the past, give me the trend about  commission_pct over  hire_date .", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)"}, "hardness": "Easy"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, show me about the distribution of job_id and salary in a bar chart, rank by the X-axis from low to high.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SALARY FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SALARY FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID ASC"}, "hardness": "Medium"}, {"nl_queries": "A line chart shows the change of the average of Shop_ID over Start_from , and group by attribute Is_full_time and bin start_from by time, and rank from low to high by the Start_from.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Start_from , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC", "binning": "BIN Start_from BY YEAR"}, "VQL": "Visualize LINE SELECT Start_from , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC BIN Start_from BY YEAR"}, "hardness": "Extra Hard"}, {"nl_queries": "A bar chart shows the distribution of meter_600 and ID , order in asc by the ID.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_600 , ID FROM swimmer ORDER BY ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_600 , ID FROM swimmer ORDER BY ID ASC"}, "hardness": "Easy"}, {"nl_queries": "Show minimal enr from each state, could you display by the bar in desc?", "db_id": "soccer_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT state , min(enr) FROM college GROUP BY state ORDER BY state DESC", "binning": ""}, "VQL": "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY state DESC"}, "hardness": "Medium"}, {"nl_queries": "Show me about the distribution of  ACC_Regular_Season and  All_Games_Percent  in a bar chart.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match"}, "hardness": "Easy"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, give me the comparison about the sum of employee_id over the hire_date bin hire_date by weekday by a bar chart, rank Y-axis from low to high order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(EMPLOYEE_ID) ASC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about the average of revenue over the name , and group by attribute name by a bar chart, and could you display x axis in ascending order?", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC"}, "hardness": "Hard"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, a bar chart shows the distribution of  hire_date and the sum of manager_id bin hire_date by weekday.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "Visualize a bar chart for what are the different classes of races, and how many races correspond to each?, and sort in desc by the bars.", "db_id": "race_track", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY Class DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY Class DESC"}, "hardness": "Medium"}, {"nl_queries": "Find the total rating ratio for each channel owner. Show a pie chart.", "db_id": "program_share", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Owner , sum(Rating_in_percent) FROM channel GROUP BY OWNER", "binning": ""}, "VQL": "Visualize PIE SELECT Owner , sum(Rating_in_percent) FROM channel GROUP BY OWNER"}, "hardness": "Easy"}, {"nl_queries": "Draw a bar chart about the distribution of ACC_Road and Team_ID , and group by attribute ACC_Home, I want to list in asc by the Team_ID please.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY Team_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY Team_ID ASC"}, "hardness": "Medium"}, {"nl_queries": "A pie chart about how many credits does the department offer?", "db_id": "college_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT DEPT_CODE , sum(crs_credit) FROM course GROUP BY dept_code", "binning": ""}, "VQL": "Visualize PIE SELECT DEPT_CODE , sum(crs_credit) FROM course GROUP BY dept_code"}, "hardness": "Easy"}, {"nl_queries": "How many students are in each department Plot them as bar chart, and order by the x axis from low to high.", "db_id": "college_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY dept_name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY dept_name ASC"}, "hardness": "Medium"}, {"nl_queries": "Find all the distinct visit dates, and count them by a line chart", "db_id": "cre_Theme_park", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Visit_Date , COUNT(Visit_Date) FROM VISITS", "binning": "BIN Visit_Date BY YEAR"}, "VQL": "Visualize LINE SELECT Visit_Date , COUNT(Visit_Date) FROM VISITS BIN Visit_Date BY YEAR"}, "hardness": "Easy"}, {"nl_queries": "Bar chart x axis left office y axis the number of left office", "db_id": "party_people", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Left_office , COUNT(Left_office) FROM party", "binning": "BIN Left_office BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Left_office , COUNT(Left_office) FROM party BIN Left_office BY WEEKDAY"}, "hardness": "Easy"}, {"nl_queries": "Show all director names who have a movie in the year 1999 or 2000, and count them by a bar chart, order by the Y-axis in desc.", "db_id": "culture_company", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Director , COUNT(Director) FROM movie WHERE YEAR = 1999 OR YEAR = 2000 GROUP BY Director ORDER BY COUNT(Director) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Director , COUNT(Director) FROM movie WHERE YEAR = 1999 OR YEAR = 2000 GROUP BY Director ORDER BY COUNT(Director) DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "List the positions of players whose average number of points scored by that position is larger than 20, compare the number of positions.", "db_id": "sports_competition", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING avg(Points) >= 20", "binning": ""}, "VQL": "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING avg(Points) >= 20"}, "hardness": "Medium"}, {"nl_queries": "Draw a bar chart for what is the number of entry descriptions of each problem?, and list total number in ascending order.", "db_id": "tracking_software_problems", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT log_entry_description , COUNT(log_entry_description) FROM problem_log GROUP BY log_entry_description ORDER BY COUNT(log_entry_description) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT log_entry_description , COUNT(log_entry_description) FROM problem_log GROUP BY log_entry_description ORDER BY COUNT(log_entry_description) ASC"}, "hardness": "Medium"}, {"nl_queries": "What are the different first names and ages of the students who do have pets. Visualize by pie chart.", "db_id": "pets_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid", "binning": ""}, "VQL": "Visualize PIE SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid"}, "hardness": "Easy"}, {"nl_queries": "Plot total number of salary by grouped by hire date as a bar graph, could you display in ascending by the Y-axis?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(SALARY) FROM employees  ORDER BY SUM(SALARY) ASC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "Bar chart x axis location y axis sum total passengers, I want to sort in descending by the Location please.", "db_id": "train_station", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Location , sum(total_passengers) FROM station GROUP BY LOCATION ORDER BY Location DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Location , sum(total_passengers) FROM station GROUP BY LOCATION ORDER BY Location DESC"}, "hardness": "Medium"}, {"nl_queries": "A bar chart for finding the number of the dates of assessment notes for students with first name \"Fanny\", and sort Y-axis in descending order.", "db_id": "behavior_monitoring", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\"  ORDER BY COUNT(date_of_notes) DESC", "binning": "BIN date_of_notes BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\"  ORDER BY COUNT(date_of_notes) DESC BIN date_of_notes BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "Draw a bar chart of continent versus mean lifeexpectancy, list from high to low by the total number.", "db_id": "world_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) DESC"}, "hardness": "Medium"}, {"nl_queries": "Show the number of faculty members for each rank in a bar chart, list in desc by the names please.", "db_id": "activity_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY Rank DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY Rank DESC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, a bar chart shows the distribution of name and the sum of code , and group by attribute name, show from high to low by the bars.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC"}, "hardness": "Hard"}, {"nl_queries": "Show all countries and the number of singers in each country. Show the proportion.", "db_id": "concert_singer", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Country , count(*) FROM singer GROUP BY country", "binning": ""}, "VQL": "Visualize PIE SELECT Country , count(*) FROM singer GROUP BY country"}, "hardness": "Easy"}, {"nl_queries": "For those records from the products and each product's manufacturer, return a bar chart about the distribution of name and the average of revenue , and group by attribute name, and I want to rank bars from low to high order.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC"}, "hardness": "Hard"}, {"nl_queries": "What are the memories and carriers of phones. Show bar chart.", "db_id": "phone_market", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Carrier , AVG(Memory_in_G) FROM phone GROUP BY Carrier", "binning": ""}, "VQL": "Visualize BAR SELECT Carrier , AVG(Memory_in_G) FROM phone GROUP BY Carrier"}, "hardness": "Easy"}, {"nl_queries": "What is the average account balance of customers with credit score below 50 for the different account types Visualize by bar chart, display the average of acc bal from high to low order.", "db_id": "loan_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type ORDER BY avg(acc_bal) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type ORDER BY avg(acc_bal) DESC"}, "hardness": "Hard"}, {"nl_queries": "Give me a pie chart to reflect the proportion of  All_Home and the amount of All_Home.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home", "binning": ""}, "VQL": "Visualize PIE SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home"}, "hardness": "Easy"}, {"nl_queries": "What is the greatest capacity for rooms in each building? Draw a bar chart, and list by the names in ascending please.", "db_id": "college_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT building , max(capacity) FROM classroom GROUP BY building ORDER BY building ASC", "binning": ""}, "VQL": "Visualize BAR SELECT building , max(capacity) FROM classroom GROUP BY building ORDER BY building ASC"}, "hardness": "Easy"}, {"nl_queries": "Plot the total number by grouped by carrier as a bar graph", "db_id": "phone_market", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier", "binning": ""}, "VQL": "Visualize BAR SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier"}, "hardness": "Easy"}, {"nl_queries": "Draw a line chart about the change of the sum of monthly_rental over  date_address_to , and group by attribute other_details.", "db_id": "behavior_monitoring", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC", "binning": ""}, "VQL": "Visualize LINE SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who did not have any job in the past, give me the comparison about the average of department_id over the job_id , and group by attribute job_id by a bar chart, and display from high to low by the JOB_ID.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY JOB_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY JOB_ID DESC"}, "hardness": "Hard"}, {"nl_queries": "Bar chart x axis dept code y axis minimal stu gpa, I want to rank in ascending by the y axis.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT DEPT_CODE , min(stu_gpa) FROM student GROUP BY DEPT_CODE ORDER BY min(stu_gpa) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT DEPT_CODE , min(stu_gpa) FROM student GROUP BY DEPT_CODE ORDER BY min(stu_gpa) ASC"}, "hardness": "Easy"}, {"nl_queries": "Return a bar chart on how many wines are there for each grape?, order by the Y from low to high.", "db_id": "wine_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Grape , count(*) FROM WINE GROUP BY Grape ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Grape , count(*) FROM WINE GROUP BY Grape ORDER BY count(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "Give me the comparison about the sum of Team_ID over the  All_Home , and group by attribute All_Home by a bar chart.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home", "binning": ""}, "VQL": "Visualize BAR SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home"}, "hardness": "Easy"}, {"nl_queries": "Visualize a bar chart for what are the names and account balances of customers with the letter 'a' in their names?, could you sort from high to low by the y axis?", "db_id": "loan_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT cust_name , acc_bal FROM customer WHERE cust_name LIKE '%a%' ORDER BY acc_bal DESC", "binning": ""}, "VQL": "Visualize BAR SELECT cust_name , acc_bal FROM customer WHERE cust_name LIKE '%a%' ORDER BY acc_bal DESC"}, "hardness": "Hard"}, {"nl_queries": "How many treatments for each dog of the rarest breed? Give me a bar chart.", "db_id": "dog_kennels", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , COUNT(name) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )", "binning": ""}, "VQL": "Visualize BAR SELECT name , COUNT(name) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )"}, "hardness": "Extra Hard"}, {"nl_queries": "A bar chart for what are the number of the names of all the playlists?", "db_id": "store_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , COUNT(name) FROM playlists GROUP BY name", "binning": ""}, "VQL": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name"}, "hardness": "Easy"}, {"nl_queries": "Count the section_description, and group by section_description with a bar chart.", "db_id": "student_transcripts_tracking", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description", "binning": ""}, "VQL": "Visualize BAR SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description"}, "hardness": "Easy"}, {"nl_queries": "Return a histogram on what are the first names and ids for customers who have two or more accounts?, could you rank in ascending by the customer_id?", "db_id": "customers_and_invoices", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.customer_id ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.customer_id ASC"}, "hardness": "Medium"}, {"nl_queries": "Show all card type codes and the number of cards in each type in a pie chart.", "db_id": "customers_card_transactions", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT card_type_code , count(*) FROM Customers_cards GROUP BY card_type_code", "binning": ""}, "VQL": "Visualize PIE SELECT card_type_code , count(*) FROM Customers_cards GROUP BY card_type_code"}, "hardness": "Easy"}, {"nl_queries": "Visualize a bar chart to show how many players in each occupation, and I want to show by the Y-axis from high to low please.", "db_id": "riding_club", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Occupation , COUNT(Occupation) FROM player GROUP BY Occupation ORDER BY COUNT(Occupation) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Occupation , COUNT(Occupation) FROM player GROUP BY Occupation ORDER BY COUNT(Occupation) DESC"}, "hardness": "Medium"}, {"nl_queries": "Show the name of each county along with the corresponding number of delegates from that county Plot them as bar chart, display bar from high to low order.", "db_id": "election", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id ORDER BY County_name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id ORDER BY County_name DESC"}, "hardness": "Hard"}, {"nl_queries": "What is the highest student GPA for every department? Return a bar chart, and display in desc by the bars.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT DEPT_CODE , max(stu_gpa) FROM student GROUP BY DEPT_CODE ORDER BY DEPT_CODE DESC", "binning": ""}, "VQL": "Visualize BAR SELECT DEPT_CODE , max(stu_gpa) FROM student GROUP BY DEPT_CODE ORDER BY DEPT_CODE DESC"}, "hardness": "Easy"}, {"nl_queries": "For those employees who did not have any job in the past, find hire_date and the average of department_id bin hire_date by weekday, and visualize them by a bar chart, rank by the total number in descending.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(DEPARTMENT_ID) DESC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(DEPARTMENT_ID) DESC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "Return a bar chart showing the number of teachers of each course.", "db_id": "course_teach", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Course , COUNT(Course) FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID GROUP BY Course ORDER BY T3.Name", "binning": ""}, "VQL": "Visualize BAR SELECT Course , COUNT(Course) FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID GROUP BY Course ORDER BY T3.Name"}, "hardness": "Hard"}, {"nl_queries": "What are the names and the accumulated prices of all products in the store Plot them as a bar chart, show by the total number from high to low please.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , SUM(Price) FROM products GROUP BY Name ORDER BY SUM(Price) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , SUM(Price) FROM products GROUP BY Name ORDER BY SUM(Price) DESC"}, "hardness": "Medium"}, {"nl_queries": "Show the number of documents created in each day and bin document date by year interval and group by document type with a group line chart, show from low to high by the Document_Date please.", "db_id": "cre_Docs_and_Epenses", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Name ORDER BY Document_Date ASC", "binning": "BIN Document_Date BY YEAR"}, "VQL": "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Name ORDER BY Document_Date ASC BIN Document_Date BY YEAR"}, "hardness": "Extra Hard"}, {"nl_queries": "Show me about the change of the amount of date_address_to over  date_address_to , and group by attribute other_details in a line chart.", "db_id": "behavior_monitoring", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC", "binning": ""}, "VQL": "Visualize LINE SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC"}, "hardness": "Hard"}, {"nl_queries": "Show the number of courses each instructor taught with a bar chart grouping by course code, and display how many crs code in descending order.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT CRS_CODE , COUNT(CRS_CODE) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY CRS_CODE ORDER BY COUNT(CRS_CODE) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT CRS_CODE , COUNT(CRS_CODE) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY CRS_CODE ORDER BY COUNT(CRS_CODE) DESC"}, "hardness": "Hard"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, give me the comparison about the sum of salary over the job_id , and group by attribute job_id by a bar chart, list y axis in asc order please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(SALARY) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(SALARY) ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about price over the name , and group by attribute headquarter by a bar chart, rank by the X in desc.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter , T1.Name ORDER BY T1.Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter , T1.Name ORDER BY T1.Name DESC"}, "hardness": "Hard"}, {"nl_queries": "Compare the lowest rating among all movies by each title using a histogram, and I want to show Y-axis from low to high order.", "db_id": "movie_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT title , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY title ORDER BY min(T1.stars) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT title , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY title ORDER BY min(T1.stars) ASC"}, "hardness": "Medium"}, {"nl_queries": "How many companies that have ever operated a flight for each type? Draw a bar chart.", "db_id": "flight_company", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Type , COUNT(Type) FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id GROUP BY Type", "binning": ""}, "VQL": "Visualize BAR SELECT Type , COUNT(Type) FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id GROUP BY Type"}, "hardness": "Medium"}, {"nl_queries": "For each citizenship, what is the maximum net worth Visualize by bar chart, and rank by the X in descending.", "db_id": "singer", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY Citizenship DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY Citizenship DESC"}, "hardness": "Easy"}, {"nl_queries": "For all employees who have the letters D or S in their first name, return a bar chart about the distribution of hire_date and the sum of manager_id bin hire_date by time, could you display by the Y in ascending?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(MANAGER_ID) ASC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees who did not have any job in the past, a scatter chart shows the correlation between  commission_pct and  department_id .", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT COMMISSION_PCT , DEPARTMENT_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)", "binning": ""}, "VQL": "Visualize SCATTER SELECT COMMISSION_PCT , DEPARTMENT_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)"}, "hardness": "Easy"}, {"nl_queries": "For each faculty rank, show the number of faculty members who have it. Show bar chart.", "db_id": "activity_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Rank , count(*) FROM Faculty GROUP BY rank", "binning": ""}, "VQL": "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY rank"}, "hardness": "Easy"}, {"nl_queries": "List the number of dogs departed in each day with a bar chart that bins departed date by day interval, and list the number of date departed in asc order.", "db_id": "dog_kennels", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_departed , COUNT(date_departed) FROM Dogs  ORDER BY COUNT(date_departed) ASC", "binning": "BIN date_departed BY DAY"}, "VQL": "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs  ORDER BY COUNT(date_departed) ASC BIN date_departed BY DAY"}, "hardness": "Medium"}, {"nl_queries": "Show me a pie chart for what are the total number of credits offered by each department?", "db_id": "college_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT DEPT_CODE , sum(T1.crs_credit) FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code = T2.crs_code GROUP BY T1.dept_code", "binning": ""}, "VQL": "Visualize PIE SELECT DEPT_CODE , sum(T1.crs_credit) FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code = T2.crs_code GROUP BY T1.dept_code"}, "hardness": "Medium"}, {"nl_queries": "Return a scatter chart about the correlation between  ACC_Percent and  All_Games_Percent , and group by attribute ACC_Regular_Season.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT ACC_Percent , All_Games_Percent FROM basketball_match GROUP BY ACC_Regular_Season", "binning": ""}, "VQL": "Visualize SCATTER SELECT ACC_Percent , All_Games_Percent FROM basketball_match GROUP BY ACC_Regular_Season"}, "hardness": "Easy"}, {"nl_queries": "Which Payments were processed with Visa? List the date and the amount using a bar chart, and could you show in desc by the bar please?", "db_id": "insurance_policies", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Date_Payment_Made DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Date_Payment_Made DESC"}, "hardness": "Medium"}, {"nl_queries": "Draw a bar chart about the distribution of  All_Home and the sum of Team_ID , and group by attribute All_Home.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home", "binning": ""}, "VQL": "Visualize BAR SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home"}, "hardness": "Easy"}, {"nl_queries": "For those products with a price between 60 and 120, return a scatter chart about the correlation between  code and  manufacturer .", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Code , Manufacturer FROM products WHERE price BETWEEN 60 AND 120", "binning": ""}, "VQL": "Visualize SCATTER SELECT Code , Manufacturer FROM products WHERE price BETWEEN 60 AND 120"}, "hardness": "Easy"}, {"nl_queries": "A bar chart for finding the number of the category descriptions of the products whose descriptions include letter 't', and I want to display by the bar from high to low please.", "db_id": "products_gen_characteristics", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT product_category_description , COUNT(product_category_description) FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code = T2.product_category_code WHERE T2.product_description LIKE '%t%' GROUP BY product_category_description ORDER BY product_category_description DESC", "binning": ""}, "VQL": "Visualize BAR SELECT product_category_description , COUNT(product_category_description) FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code = T2.product_category_code WHERE T2.product_description LIKE '%t%' GROUP BY product_category_description ORDER BY product_category_description DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "Find dates and attendance for exhibitions that happened in 2004, show me the comparison of attendance by date, I want to sort by the names in ascending.", "db_id": "theme_gallery", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Date , T1.Attendance FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T2.year = 2004 ORDER BY Date ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Date , T1.Attendance FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T2.year = 2004 ORDER BY Date ASC"}, "hardness": "Hard"}, {"nl_queries": "Bar graph to show the number of name from different name", "db_id": "network_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , COUNT(name) FROM Highschooler GROUP BY name", "binning": ""}, "VQL": "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name"}, "hardness": "Easy"}, {"nl_queries": "Visualize a bar chart about the distribution of Team_Name and School_ID , and display in desc by the Y-axis.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID DESC"}, "hardness": "Easy"}, {"nl_queries": "What are the names and ages of editors? Show me a bar chart, and sort Y-axis in ascending order please.", "db_id": "journal_committee", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , Age FROM editor ORDER BY Age ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , Age FROM editor ORDER BY Age ASC"}, "hardness": "Easy"}, {"nl_queries": "Please give me a bar chart that counts the number of grape of wine, could you sort Y from high to low order?", "db_id": "wine_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Grape , COUNT(Grape) FROM WINE GROUP BY Grape ORDER BY COUNT(Grape) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Grape , COUNT(Grape) FROM WINE GROUP BY Grape ORDER BY COUNT(Grape) DESC"}, "hardness": "Medium"}, {"nl_queries": "Give me a bar chart to show how many dates with a max temperature greater than or equal to 80 for each day, and list by the the number of date from low to high.", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date , COUNT(date) FROM weather WHERE max_temperature_f >= 80  ORDER BY COUNT(date) ASC", "binning": "BIN date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE max_temperature_f >= 80  ORDER BY COUNT(date) ASC BIN date BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "For all employees who have the letters D or S in their first name, give me the comparison about the average of manager_id over the job_id , and group by attribute job_id by a bar chart, and sort from low to high by the y axis please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY AVG(MANAGER_ID) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY AVG(MANAGER_ID) ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees who did not have any job in the past, return a scatter chart about the correlation between  salary and  department_id .", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT SALARY , DEPARTMENT_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)", "binning": ""}, "VQL": "Visualize SCATTER SELECT SALARY , DEPARTMENT_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)"}, "hardness": "Easy"}, {"nl_queries": "Find the name and credit score of the customers who have some loans. ", "db_id": "loan_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT cust_name , credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id", "binning": ""}, "VQL": "Visualize BAR SELECT cust_name , credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id"}, "hardness": "Easy"}, {"nl_queries": "Draw a bar chart about the distribution of meter_500 and ID , rank by the ID in asc.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_500 , ID FROM swimmer ORDER BY ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_500 , ID FROM swimmer ORDER BY ID ASC"}, "hardness": "Easy"}, {"nl_queries": "Bar graph to show mean grade from different name, and could you rank in descending by the names?", "db_id": "network_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, find headquarter and the average of manufacturer , and group by attribute headquarter, and visualize them by a bar chart, and order X-axis in ascending order.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC"}, "hardness": "Hard"}, {"nl_queries": "Bar chart of the total number from each headquarters, and rank in desc by the x axis.", "db_id": "gas_company", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY Headquarters DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY Headquarters DESC"}, "hardness": "Medium"}, {"nl_queries": "What are the naems of all the projects, and how many scientists were assigned to each of them, list total number from low to high order please.", "db_id": "scientist_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.name ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.name ORDER BY count(*) ASC"}, "hardness": "Hard"}, {"nl_queries": "Visualize a bar chart for what are the names of different tracks, and how many races has each had?", "db_id": "race_track", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id"}, "hardness": "Medium"}, {"nl_queries": "Visualize a bar chart for what is the number of their teams in elimination?", "db_id": "wrestler", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Team , COUNT(Team) FROM elimination GROUP BY Team", "binning": ""}, "VQL": "Visualize BAR SELECT Team , COUNT(Team) FROM elimination GROUP BY Team"}, "hardness": "Easy"}, {"nl_queries": "Show all the faculty ranks and the number of students advised by each rank with a pie chart.", "db_id": "activity_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Rank , count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.rank", "binning": ""}, "VQL": "Visualize PIE SELECT Rank , count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.rank"}, "hardness": "Medium"}, {"nl_queries": "Draw a bar chart for what is the average rating star for each reviewer?, show from high to low by the bar please.", "db_id": "movie_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID GROUP BY T2.name ORDER BY name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT name , avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID GROUP BY T2.name ORDER BY name DESC"}, "hardness": "Hard"}, {"nl_queries": "Return a histogram on how many actors have appeared in each musical?", "db_id": "musical", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID"}, "hardness": "Medium"}, {"nl_queries": "A stacked bar chart showing the number of faults for different fault short name and skills required to fix them The x-axis is falut short name and group by skill description, and list by the bars from high to low.", "db_id": "assets_maintenance", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT fault_short_name , COUNT(fault_short_name) FROM Part_Faults AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.part_fault_id = T2.part_fault_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY skill_description ,  fault_short_name ORDER BY fault_short_name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT fault_short_name , COUNT(fault_short_name) FROM Part_Faults AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.part_fault_id = T2.part_fault_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY skill_description ,  fault_short_name ORDER BY fault_short_name DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees who did not have any job in the past, return a bar chart about the distribution of job_id and the average of salary , and group by attribute job_id, and show Y-axis in desc order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY AVG(SALARY) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY AVG(SALARY) DESC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, find job_id and commission_pct , and visualize them by a bar chart, and could you rank Y-axis in descending order?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC"}, "hardness": "Medium"}, {"nl_queries": "Return a bar chart on what is the number of professors for different school?", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code", "binning": ""}, "VQL": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code"}, "hardness": "Medium"}, {"nl_queries": "How many students live in each city, I want to show total number from high to low order.", "db_id": "allergy_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT city_code , count(*) FROM Student GROUP BY city_code ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT city_code , count(*) FROM Student GROUP BY city_code ORDER BY count(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "Give me a bar graph for what is the total number of last names of all candidates?, I want to rank in asc by the how many last name please.", "db_id": "student_assessment", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT last_name , COUNT(last_name) FROM people GROUP BY last_name ORDER BY COUNT(last_name) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT last_name , COUNT(last_name) FROM people GROUP BY last_name ORDER BY COUNT(last_name) ASC"}, "hardness": "Medium"}, {"nl_queries": "Find the total credits of courses provided by different department. Plot them as bar chart.", "db_id": "college_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT dept_name , sum(credits) FROM course GROUP BY dept_name", "binning": ""}, "VQL": "Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name"}, "hardness": "Easy"}, {"nl_queries": "For all employees who have the letters D or S in their first name, for  department_id,  hire_date, visualize the trend.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'"}, "hardness": "Hard"}, {"nl_queries": "Retrieve the close dates of all the policies associated with the customer whose name contains \"Diana\", bin the close dates into the day of week interval and count them for a bar chart, and display from high to low by the total number.", "db_id": "insurance_fnol", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Date_Closed , COUNT(Date_Closed) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\"  ORDER BY COUNT(Date_Closed) DESC", "binning": "BIN Date_Closed BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Date_Closed , COUNT(Date_Closed) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\"  ORDER BY COUNT(Date_Closed) DESC BIN Date_Closed BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, find name and the amount of name , and group by attribute name, and visualize them by a bar chart, and rank by the total number in desc.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY COUNT(T2.Name) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY COUNT(T2.Name) DESC"}, "hardness": "Hard"}, {"nl_queries": "Bar chart x axis product name y axis how many product name, rank by the the number of product name in ascending.", "db_id": "solvency_ii", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Product_Name , COUNT(Product_Name) FROM Products GROUP BY Product_Name ORDER BY COUNT(Product_Name) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Product_Name , COUNT(Product_Name) FROM Products GROUP BY Product_Name ORDER BY COUNT(Product_Name) ASC"}, "hardness": "Medium"}, {"nl_queries": "Show the trend about the total amount of each payment about the payment day, line chart. Note that, you should order the payment day in ascending order.", "db_id": "insurance_policies", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments GROUP BY Date_Payment_Made ORDER BY Date_Payment_Made ASC", "binning": ""}, "VQL": "Visualize LINE SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments GROUP BY Date_Payment_Made ORDER BY Date_Payment_Made ASC"}, "hardness": "Medium"}, {"nl_queries": "Bar graph to show the number of nationality from different nationality, and rank from low to high by the Y.", "db_id": "news_report", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nationality , COUNT(Nationality) FROM journalist GROUP BY Nationality ORDER BY COUNT(Nationality) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM journalist GROUP BY Nationality ORDER BY COUNT(Nationality) ASC"}, "hardness": "Medium"}, {"nl_queries": "Plot all_games_percent by grouped by all games as a bar graph", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Games , All_Games_Percent FROM basketball_match", "binning": ""}, "VQL": "Visualize BAR SELECT All_Games , All_Games_Percent FROM basketball_match"}, "hardness": "Easy"}, {"nl_queries": "Please compare the frequency of the customer details using a bar chart.", "db_id": "local_govt_and_lot", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT customer_details , COUNT(customer_details) FROM Customers GROUP BY customer_details", "binning": ""}, "VQL": "Visualize BAR SELECT customer_details , COUNT(customer_details) FROM Customers GROUP BY customer_details"}, "hardness": "Easy"}, {"nl_queries": "What are the number of the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?", "db_id": "car_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Year , COUNT(Year) FROM cars_data where weight between 3000 and 4000", "binning": "BIN Year BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Year , COUNT(Year) FROM cars_data where weight between 3000 and 4000 BIN Year BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "Plot mean age by grouped by sex as a bar graph, order by the the average of age in descending.", "db_id": "dorm_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Sex , avg(age) FROM student GROUP BY sex ORDER BY avg(age) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Sex , avg(age) FROM student GROUP BY sex ORDER BY avg(age) DESC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, a bar chart shows the distribution of job_id and commission_pct , order in ascending by the total number.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT ASC"}, "hardness": "Medium"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, return a line chart about the change of commission_pct over hire_date , show in asc by the X-axis.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC"}, "hardness": "Hard"}, {"nl_queries": "For directors who had more than one movie, bin the year into Year interval and them compute the total number of movies in each year bucket, and group by title The result can be drawn as a trend line, display by the x-axis from high to low please.", "db_id": "movie_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT year , COUNT(year) FROM Movie AS T1 JOIN Movie AS T2 ON T1.director = T2.director WHERE T1.title != T2.title GROUP BY title ORDER BY year DESC", "binning": "BIN year BY YEAR"}, "VQL": "Visualize LINE SELECT year , COUNT(year) FROM Movie AS T1 JOIN Movie AS T2 ON T1.director = T2.director WHERE T1.title != T2.title GROUP BY title ORDER BY year DESC BIN year BY YEAR"}, "hardness": "Extra Hard"}, {"nl_queries": "Find the dates of orders which belong to the customer named \"Jeramie\", and count them by a line chart", "db_id": "tracking_orders", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date_order_placed , COUNT(date_order_placed) FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\"", "binning": "BIN date_order_placed BY YEAR"}, "VQL": "Visualize LINE SELECT date_order_placed , COUNT(date_order_placed) FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\" BIN date_order_placed BY YEAR"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, find headquarter and the sum of price , and group by attribute headquarter, and visualize them by a bar chart, and show by the y-axis in ascending please.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Headquarter , SUM(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY SUM(Price) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Headquarter , SUM(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY SUM(Price) ASC"}, "hardness": "Hard"}, {"nl_queries": "For each city, what is the highest latitude for its stations. Visualize by pie chart.", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT city , max(lat) FROM station GROUP BY city", "binning": ""}, "VQL": "Visualize PIE SELECT city , max(lat) FROM station GROUP BY city"}, "hardness": "Easy"}, {"nl_queries": "Draw a bar chart about the distribution of All_Road and School_ID , order by the Y-axis from low to high please.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Road , School_ID FROM basketball_match ORDER BY School_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Road , School_ID FROM basketball_match ORDER BY School_ID ASC"}, "hardness": "Easy"}, {"nl_queries": "Bar chart x axis state y axis the number of state, could you list in asc by the bars?", "db_id": "voter_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT DISTINCT state , COUNT(state) FROM votes GROUP BY state ORDER BY state ASC", "binning": ""}, "VQL": "Visualize BAR SELECT DISTINCT state , COUNT(state) FROM votes GROUP BY state ORDER BY state ASC"}, "hardness": "Medium"}, {"nl_queries": "Draw a bar chart about the distribution of  middle_name and  gender_mf .", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT middle_name , gender_mf FROM Course_Authors_and_Tutors ORDER BY personal_name", "binning": ""}, "VQL": "Visualize BAR SELECT middle_name , gender_mf FROM Course_Authors_and_Tutors ORDER BY personal_name"}, "hardness": "Easy"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, find  hire_date and the sum of manager_id bin hire_date by time, and visualize them by a bar chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "Give me a bar chart for how many name of each name, and order by the names in ascending.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY Name ASC"}, "hardness": "Medium"}, {"nl_queries": "Show me about the distribution of Name and Weight in a bar chart, could you display from high to low by the x axis?", "db_id": "candidate_poll", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , Weight FROM people ORDER BY Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , Weight FROM people ORDER BY Name DESC"}, "hardness": "Easy"}, {"nl_queries": "Which workshop groups have bookings with status code \"stop\"? Give me the names, and count them by a bar chart", "db_id": "cre_Drama_Workshop_Groups", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Store_Name , COUNT(Store_Name) FROM Bookings AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Workshop_Group_ID = T2.Workshop_Group_ID WHERE T1.Status_Code = \"stop\" GROUP BY Store_Name", "binning": ""}, "VQL": "Visualize BAR SELECT Store_Name , COUNT(Store_Name) FROM Bookings AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Workshop_Group_ID = T2.Workshop_Group_ID WHERE T1.Status_Code = \"stop\" GROUP BY Store_Name"}, "hardness": "Hard"}, {"nl_queries": "For those products with a price between 60 and 120, visualize a bar chart about the distribution of name and price , order in ascending by the Y.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , Price FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Price ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , Price FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Price ASC"}, "hardness": "Medium"}, {"nl_queries": "Display a bar chart for what are the names of the technicians and how many machines are they assigned to repair?, and could you rank in ascending by the X-axis?", "db_id": "machine_repair", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID = T2.technician_ID GROUP BY T2.Name ORDER BY Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID = T2.technician_ID GROUP BY T2.Name ORDER BY Name ASC"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, draw a bar chart about the distribution of headquarter and the sum of code , and group by attribute headquarter, rank bar from high to low order.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC"}, "hardness": "Hard"}, {"nl_queries": "Show all account ids and account details. Plot them as scatter chart.", "db_id": "cre_Docs_and_Epenses", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Account_ID , Account_Details FROM Accounts", "binning": ""}, "VQL": "Visualize SCATTER SELECT Account_ID , Account_Details FROM Accounts"}, "hardness": "Easy"}, {"nl_queries": "What is the number of each allergie that the student with first name Lisa has? Draw a bar chart.", "db_id": "allergy_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Allergy , COUNT(T1.Allergy) FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy = T2.Allergy JOIN Student AS T3 ON T3.StuID = T2.StuID WHERE T3.Fname = \"Lisa\" GROUP BY T1.Allergy", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Allergy , COUNT(T1.Allergy) FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy = T2.Allergy JOIN Student AS T3 ON T3.StuID = T2.StuID WHERE T3.Fname = \"Lisa\" GROUP BY T1.Allergy"}, "hardness": "Hard"}, {"nl_queries": "How many stadiums does each country have Show bar chart, and I want to display from low to high by the Country.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Country , count(*) FROM stadium GROUP BY country ORDER BY Country ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Country , count(*) FROM stadium GROUP BY country ORDER BY Country ASC"}, "hardness": "Medium"}, {"nl_queries": "What are the number of the payment dates for any payments that have an amount greater than 10 or were handled by a staff member with the first name Elsa?, and could you display by the X from high to low?", "db_id": "sakila_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT payment_date , COUNT(payment_date) FROM payment WHERE amount > 10 UNION SELECT T1.payment_date FROM payment AS T1 JOIN staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = 'Elsa' GROUP BY payment_date ORDER BY payment_date DESC", "binning": ""}, "VQL": "Visualize LINE SELECT payment_date , COUNT(payment_date) FROM payment WHERE amount > 10 UNION SELECT T1.payment_date FROM payment AS T1 JOIN staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = 'Elsa' GROUP BY payment_date ORDER BY payment_date DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "Show names of musicals and the number of actors who have appeared in the musicals in a bar chart, and list from low to high by the y-axis please.", "db_id": "musical", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID ORDER BY COUNT(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID ORDER BY COUNT(*) ASC"}, "hardness": "Hard"}, {"nl_queries": "List the number of documents for each document description in a bar chart, I want to sort in descending by the the number of document description.", "db_id": "cre_Doc_Template_Mgt", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Document_Description , COUNT(Document_Description) FROM Documents GROUP BY Document_Description ORDER BY COUNT(Document_Description) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Document_Description , COUNT(Document_Description) FROM Documents GROUP BY Document_Description ORDER BY COUNT(Document_Description) DESC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, visualize a bar chart about the distribution of hire_date and the sum of employee_id bin hire_date by weekday, list y axis in desc order please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(EMPLOYEE_ID) DESC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "For those employees who was hired before 2002-06-21, show me about the change of  employee_id over  hire_date  in a line chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE hire_date < '2002-06-21'", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE hire_date < '2002-06-21'"}, "hardness": "Easy"}, {"nl_queries": "For those records from the products and each product's manufacturer, draw a bar chart about the distribution of  name and the sum of price , and group by attribute name.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name"}, "hardness": "Medium"}, {"nl_queries": "What is the date of enrollment of the course named \"Spanish\", and count them by a bar chart, and rank Y-axis in descending order please.", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\"  ORDER BY COUNT(date_of_enrolment) DESC", "binning": "BIN date_of_enrolment BY MONTH"}, "VQL": "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\"  ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY MONTH"}, "hardness": "Extra Hard"}, {"nl_queries": "Compare the total salary by each hire date (bin it into the day of week interval) of employees using a bar chart, display from low to high by the y-axis.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(SALARY) FROM employees  ORDER BY SUM(SALARY) ASC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "Bar graph to show the total number from different year, binning by year by, display from high to low by the count year.", "db_id": "wta_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT year , count(year) FROM matches ORDER BY count(year) DESC", "binning": "BIN year BY YEAR"}, "VQL": "Visualize BAR SELECT year , count(year) FROM matches ORDER BY count(year) DESC BIN year BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "count services by services, and split by local authorities with a stacked bar chart, and order Y-axis from low to high order.", "db_id": "station_weather", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT local_authority , COUNT(local_authority) FROM station GROUP BY services ,  local_authority ORDER BY COUNT(local_authority) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY services ,  local_authority ORDER BY COUNT(local_authority) ASC"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about code over the name , and group by attribute headquarter, show bar from low to high order.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter , T1.Name ORDER BY T1.Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter , T1.Name ORDER BY T1.Name ASC"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, draw a bar chart about the distribution of name and price , and group by attribute name, show Y-axis from low to high order.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Price ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Price ASC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who did not have any job in the past, give me the comparison about the sum of salary over the  hire_date bin hire_date by weekday.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "What are the cost and treatment type description of each treatment, order in asc by the y axis.", "db_id": "dog_kennels", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT treatment_type_description , SUM(cost_of_treatment) FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY treatment_type_description ORDER BY SUM(cost_of_treatment) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT treatment_type_description , SUM(cost_of_treatment) FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY treatment_type_description ORDER BY SUM(cost_of_treatment) ASC"}, "hardness": "Hard"}, {"nl_queries": "What is average age of male for different job title. Show the proportion.", "db_id": "network_2", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job", "binning": ""}, "VQL": "Visualize PIE SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job"}, "hardness": "Medium"}, {"nl_queries": "Visualize a bar chart about the distribution of  meter_300 and  meter_100 .", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_300 , meter_100 FROM swimmer", "binning": ""}, "VQL": "Visualize BAR SELECT meter_300 , meter_100 FROM swimmer"}, "hardness": "Easy"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about price over the name , and group by attribute founder, and show in asc by the x-axis.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder , T1.Name ORDER BY T1.Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder , T1.Name ORDER BY T1.Name ASC"}, "hardness": "Hard"}, {"nl_queries": "Compare the number of services by services with a bar graph, I want to show Y in ascending order.", "db_id": "station_weather", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) ASC"}, "hardness": "Medium"}, {"nl_queries": "For all employees who have the letters D or S in their first name, find  hire_date and the average of manager_id bin hire_date by time, and visualize them by a bar chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH"}, "hardness": "Extra Hard"}, {"nl_queries": "Draw a line chart about the change of the average of Shop_ID over  Start_from , and group by attribute Is_full_time and bin start_from by time.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Start_from , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time", "binning": "BIN Start_from BY YEAR"}, "VQL": "Visualize LINE SELECT Start_from , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time BIN Start_from BY YEAR"}, "hardness": "Hard"}, {"nl_queries": "How many staff does each project has? List the project id and the number in an ascending order with a scatter chart.", "db_id": "tracking_grants_for_research", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT T1.project_id , count(*) FROM Project_Staff AS T1 JOIN Projects AS T2 ON T1.project_id = T2.project_id GROUP BY T1.project_id ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize SCATTER SELECT T1.project_id , count(*) FROM Project_Staff AS T1 JOIN Projects AS T2 ON T1.project_id = T2.project_id GROUP BY T1.project_id ORDER BY count(*) ASC"}, "hardness": "Hard"}, {"nl_queries": "Give me the comparison about the average of meter_100 over the  meter_200 , and group by attribute meter_200 by a bar chart.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_200 , AVG(meter_100) FROM swimmer GROUP BY meter_200", "binning": ""}, "VQL": "Visualize BAR SELECT meter_200 , AVG(meter_100) FROM swimmer GROUP BY meter_200"}, "hardness": "Easy"}, {"nl_queries": "A bar chart for what are the number of the name of rooms booked by customers whose first name has \"ROY\" in part?", "db_id": "inn_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT roomName , COUNT(roomName) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId WHERE firstname LIKE '%ROY%' GROUP BY roomName", "binning": ""}, "VQL": "Visualize BAR SELECT roomName , COUNT(roomName) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId WHERE firstname LIKE '%ROY%' GROUP BY roomName"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees who did not have any job in the past, draw a bar chart about the distribution of job_id and the sum of salary , and group by attribute job_id, and rank in ascending by the JOB_ID.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY JOB_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY JOB_ID ASC"}, "hardness": "Hard"}, {"nl_queries": "how many students are in each department?, and display X from high to low order.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY DEPT_CODE DESC", "binning": ""}, "VQL": "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY DEPT_CODE DESC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, visualize a scatter chart about the correlation between  code and  code , and group by attribute founder.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT T1.Code , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder", "binning": ""}, "VQL": "Visualize SCATTER SELECT T1.Code , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, find  name and the average of revenue , and group by attribute name, and visualize them by a bar chart.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name"}, "hardness": "Medium"}, {"nl_queries": "Draw a scatter chart about the correlation between  CID and  DNO .", "db_id": "college_3", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT CID , DNO FROM COURSE ORDER BY Credits", "binning": ""}, "VQL": "Visualize SCATTER SELECT CID , DNO FROM COURSE ORDER BY Credits"}, "hardness": "Easy"}, {"nl_queries": "Return the apartment number and the number of rooms for each apartment, list in descending by the y-axis.", "db_id": "apartment_rentals", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT apt_number , room_count FROM Apartments ORDER BY room_count DESC", "binning": ""}, "VQL": "Visualize BAR SELECT apt_number , room_count FROM Apartments ORDER BY room_count DESC"}, "hardness": "Easy"}, {"nl_queries": "Show the names of countries and the average speed of roller coasters from each country with a bar chart.", "db_id": "roller_coaster", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , avg(T2.Speed) FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID GROUP BY T1.Name", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , avg(T2.Speed) FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID GROUP BY T1.Name"}, "hardness": "Medium"}, {"nl_queries": "For all employees who have the letters D or S in their first name, a bar chart shows the distribution of hire_date and the average of department_id bin hire_date by weekday, display by the the average of department id in asc.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY AVG(DEPARTMENT_ID) ASC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY AVG(DEPARTMENT_ID) ASC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "Group and count the state province attribute of the location table to visualize a bar chart, and show in descending by the y axis.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT STATE_PROVINCE , COUNT(STATE_PROVINCE) FROM locations GROUP BY STATE_PROVINCE ORDER BY COUNT(STATE_PROVINCE) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT STATE_PROVINCE , COUNT(STATE_PROVINCE) FROM locations GROUP BY STATE_PROVINCE ORDER BY COUNT(STATE_PROVINCE) DESC"}, "hardness": "Medium"}, {"nl_queries": "Find meter_300 and meter_100 , and visualize them by a bar chart, and could you display in desc by the y-axis?", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_300 , meter_100 FROM swimmer ORDER BY meter_100 DESC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_300 , meter_100 FROM swimmer ORDER BY meter_100 DESC"}, "hardness": "Easy"}, {"nl_queries": "How many customers using email as the contact channel? Group by customer name and bin active date by year in a stacked bar chart, and show total number in descending order.", "db_id": "customers_and_addresses", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT active_from_date , COUNT(active_from_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email' GROUP BY customer_name ORDER BY COUNT(active_from_date) DESC", "binning": "BIN active_from_date BY YEAR"}, "VQL": "Visualize BAR SELECT active_from_date , COUNT(active_from_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email' GROUP BY customer_name ORDER BY COUNT(active_from_date) DESC BIN active_from_date BY YEAR"}, "hardness": "Extra Hard"}, {"nl_queries": "Return a bar chart about the distribution of meter_500 and ID , and rank in desc by the meter_500.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_500 , ID FROM swimmer ORDER BY meter_500 DESC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_500 , ID FROM swimmer ORDER BY meter_500 DESC"}, "hardness": "Easy"}, {"nl_queries": "What is minimum age for different job title, and show in asc by the y-axis please.", "db_id": "network_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT job , min(age) FROM Person GROUP BY job ORDER BY min(age) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY min(age) ASC"}, "hardness": "Easy"}, {"nl_queries": "For those records from the products and each product's manufacturer, return a bar chart about the distribution of  name and the average of code , and group by attribute name.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name"}, "hardness": "Medium"}, {"nl_queries": "Plot total number of memory in g by grouped by carrier as a bar graph, display by the sum memory in g in asc.", "db_id": "phone_market", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Carrier , SUM(Memory_in_G) FROM phone GROUP BY Carrier ORDER BY SUM(Memory_in_G) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Carrier , SUM(Memory_in_G) FROM phone GROUP BY Carrier ORDER BY SUM(Memory_in_G) ASC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who did not have any job in the past, for department_id, hire_date, visualize the trend, order by the X in ascending.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE ASC", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE ASC"}, "hardness": "Medium"}, {"nl_queries": "Return a histogram on what is the total credit does each department offer?", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT DEPT_CODE , sum(crs_credit) FROM course GROUP BY dept_code", "binning": ""}, "VQL": "Visualize BAR SELECT DEPT_CODE , sum(crs_credit) FROM course GROUP BY dept_code"}, "hardness": "Easy"}, {"nl_queries": "Show the number of documents in each day for all documents on project with details 'Graph Database project' and bin document date by year interval with a line chart.", "db_id": "cre_Docs_and_Epenses", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Document_Date , COUNT(Document_Date) FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'Graph Database project'", "binning": "BIN Document_Date BY YEAR"}, "VQL": "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'Graph Database project' BIN Document_Date BY YEAR"}, "hardness": "Hard"}, {"nl_queries": "How many workshops did each author submit to? Return the author name and the number of workshops by a pie chart.", "db_id": "workshop_paper", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID", "binning": ""}, "VQL": "Visualize PIE SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID"}, "hardness": "Medium"}, {"nl_queries": "Bar chart x axis headquarters y axis the total number, and sort y-axis in asc order.", "db_id": "company_employee", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Headquarters , COUNT(*) FROM company GROUP BY Headquarters ORDER BY COUNT(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Headquarters , COUNT(*) FROM company GROUP BY Headquarters ORDER BY COUNT(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "Draw a bar chart of dept code versus the total number, rank by the bar in descending.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY DEPT_CODE DESC", "binning": ""}, "VQL": "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY DEPT_CODE DESC"}, "hardness": "Medium"}, {"nl_queries": "Find the number of the order dates of the orders with price above 1000.", "db_id": "cre_Drama_Workshop_Groups", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Order_Date , COUNT(Order_Date) FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID = T2.Order_ID JOIN Products AS T3 ON T2.Product_ID = T3.Product_ID WHERE T3.Product_price > 1000 GROUP BY Order_Date", "binning": ""}, "VQL": "Visualize LINE SELECT Order_Date , COUNT(Order_Date) FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID = T2.Order_ID JOIN Products AS T3 ON T2.Product_ID = T3.Product_ID WHERE T3.Product_price > 1000 GROUP BY Order_Date"}, "hardness": "Hard"}, {"nl_queries": "For those employees who was hired before 2002-06-21, return a bar chart about the distribution of hire_date and the sum of department_id bin hire_date by weekday, display in desc by the y-axis.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(DEPARTMENT_ID) DESC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(DEPARTMENT_ID) DESC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, draw a bar chart about the distribution of  founder and the sum of manufacturer , and group by attribute founder.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Founder , SUM(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder", "binning": ""}, "VQL": "Visualize BAR SELECT Founder , SUM(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder"}, "hardness": "Medium"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, visualize a bar chart about the distribution of hire_date and the average of salary bin hire_date by weekday, I want to rank Y-axis from high to low order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY AVG(SALARY) DESC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "Draw a bar chart about the distribution of Is_full_time and the sum of Employee_ID , and group by attribute Is_full_time, show in desc by the total number of employee id.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Employee_ID) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Employee_ID) DESC"}, "hardness": "Medium"}, {"nl_queries": "Show me about the distribution of Nationality and the average of meter_100 , and group by attribute Nationality in a bar chart, and order Y in desc order.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nationality , AVG(meter_100) FROM swimmer GROUP BY Nationality ORDER BY AVG(meter_100) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Nationality , AVG(meter_100) FROM swimmer GROUP BY Nationality ORDER BY AVG(meter_100) DESC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, return a bar chart about the distribution of first_name and commission_pct , I want to show by the Y-axis from high to low.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC", "binning": ""}, "VQL": "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC"}, "hardness": "Medium"}, {"nl_queries": "Show me acc_percent by all road in a histogram, display by the bar in ascending.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Road , ACC_Percent FROM basketball_match ORDER BY All_Road ASC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Road , ACC_Percent FROM basketball_match ORDER BY All_Road ASC"}, "hardness": "Easy"}, {"nl_queries": "Visualize a bar chart for how many hours do the students spend studying in each department?, could you display Y in desc order please?", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT DEPT_CODE , sum(stu_hrs) FROM student GROUP BY dept_code ORDER BY sum(stu_hrs) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT DEPT_CODE , sum(stu_hrs) FROM student GROUP BY dept_code ORDER BY sum(stu_hrs) DESC"}, "hardness": "Medium"}, {"nl_queries": "Show the relationship between account id and name for all accounts in a scatter chart.", "db_id": "customers_and_invoices", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT account_id , account_name FROM Accounts GROUP BY other_account_details", "binning": ""}, "VQL": "Visualize SCATTER SELECT account_id , account_name FROM Accounts GROUP BY other_account_details"}, "hardness": "Easy"}, {"nl_queries": "List the number of the names of products that are not in any event, and sort y-axis in asc order.", "db_id": "solvency_ii", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Product_Name , COUNT(Product_Name) FROM Products WHERE Product_ID NOT IN (SELECT Product_ID FROM Products_in_Events) GROUP BY Product_Name ORDER BY COUNT(Product_Name) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Product_Name , COUNT(Product_Name) FROM Products WHERE Product_ID NOT IN (SELECT Product_ID FROM Products_in_Events) GROUP BY Product_Name ORDER BY COUNT(Product_Name) ASC"}, "hardness": "Hard"}, {"nl_queries": "Draw a bar chart about the distribution of All_Home and School_ID , and group by attribute ACC_Road, and sort by the Y-axis in descending.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID DESC"}, "hardness": "Medium"}, {"nl_queries": "What are the venues of all the matches? Sort them in the descending order of match date, and count them by a pie chart", "db_id": "city_record", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Venue , COUNT(Venue) FROM MATCH GROUP BY Venue ORDER BY date DESC", "binning": ""}, "VQL": "Visualize PIE SELECT Venue , COUNT(Venue) FROM MATCH GROUP BY Venue ORDER BY date DESC"}, "hardness": "Medium"}, {"nl_queries": "Draw a bar chart about the distribution of Start_from and the sum of Shop_ID bin start_from by weekday, and could you show from low to high by the Y-axis?", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Start_from , SUM(Shop_ID) FROM hiring  ORDER BY SUM(Shop_ID) ASC", "binning": "BIN Start_from BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Start_from , SUM(Shop_ID) FROM hiring  ORDER BY SUM(Shop_ID) ASC BIN Start_from BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "Give me a pie to show the number of rank from different rank.", "db_id": "ship_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank", "binning": ""}, "VQL": "Visualize PIE SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank"}, "hardness": "Easy"}, {"nl_queries": "Please tell me how many employees in the department 80 on each type of job titles using a bar chart, and show by the Y-axis in descending.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_TITLE , COUNT(JOB_TITLE) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T1.department_id = 80 GROUP BY JOB_TITLE ORDER BY COUNT(JOB_TITLE) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_TITLE , COUNT(JOB_TITLE) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T1.department_id = 80 GROUP BY JOB_TITLE ORDER BY COUNT(JOB_TITLE) DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "For all employees who have the letters D or S in their first name, visualize a bar chart about the distribution of hire_date and the average of salary bin hire_date by weekday, and order by the y-axis from high to low.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY AVG(SALARY) DESC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, visualize a line chart about the change of  employee_id over  hire_date .", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)"}, "hardness": "Extra Hard"}, {"nl_queries": "For each location, give me a scatter chart showing the relationships between the number of total_passengers and the number of platforms.", "db_id": "train_station", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT sum(number_of_platforms) , sum(total_passengers) FROM station GROUP BY Location", "binning": ""}, "VQL": "Visualize SCATTER SELECT sum(number_of_platforms) , sum(total_passengers) FROM station GROUP BY Location"}, "hardness": "Medium"}, {"nl_queries": "For each advisor, report the total number of students advised by him or her. Plot them as scatter chart.", "db_id": "voter_2", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Advisor , count(*) FROM STUDENT GROUP BY Advisor", "binning": ""}, "VQL": "Visualize SCATTER SELECT Advisor , count(*) FROM STUDENT GROUP BY Advisor"}, "hardness": "Easy"}, {"nl_queries": "List the grape and winery of the wines whose price is bigger than 100, visualize them with a stacked bar chart, the x-axis is winery and group the grape, and y-axis is the number of wineries, and display in ascending by the bars.", "db_id": "wine_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Grape ,  Winery ORDER BY Winery ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Grape ,  Winery ORDER BY Winery ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "Draw a pie chart about the proportion of  other_details and the amount of other_details.", "db_id": "behavior_monitoring", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT other_details , COUNT(other_details) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC", "binning": ""}, "VQL": "Visualize PIE SELECT other_details , COUNT(other_details) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC"}, "hardness": "Medium"}, {"nl_queries": "How many climbers are from each country, could you list by the total number from high to low please?", "db_id": "climbing", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY COUNT(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY COUNT(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "Show the number of courses each instructor taught in a stacked bar chart The x-axis is the instructor's first name and group by course description, and could you show X from high to low order?", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code GROUP BY CRS_DESCRIPTION ,  EMP_FNAME ORDER BY EMP_FNAME DESC", "binning": ""}, "VQL": "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code GROUP BY CRS_DESCRIPTION ,  EMP_FNAME ORDER BY EMP_FNAME DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees who was hired before 2002-06-21, give me the comparison about the average of manager_id over the job_id , and group by attribute job_id, and could you list by the X-axis in asc?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID ASC"}, "hardness": "Hard"}, {"nl_queries": "How many patients do each physician take care of? List their names and number of patients they take care of Show bar chart, and order Y in asc order.", "db_id": "hospital_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid ORDER BY count(*) ASC"}, "hardness": "Hard"}, {"nl_queries": "For all employees who have the letters D or S in their first name, a bar chart shows the distribution of job_id and the sum of employee_id , and group by attribute job_id, and could you rank in asc by the sum employee id?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "Find the altitude (or elevation) of the airports in the city of New York with a bar chart, could you display in asc by the X?", "db_id": "flight_4", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , elevation FROM airports WHERE city = 'New York' ORDER BY name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT name , elevation FROM airports WHERE city = 'New York' ORDER BY name ASC"}, "hardness": "Medium"}, {"nl_queries": "Show the trend about the average of the number of attendance at home games change over the years, bin year into year interval, I want to list in asc by the x-axis.", "db_id": "baseball_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT year , avg(attendance) FROM home_game ORDER BY year ASC", "binning": "BIN year BY YEAR"}, "VQL": "Visualize LINE SELECT year , avg(attendance) FROM home_game ORDER BY year ASC BIN year BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "Show different ways to get to attractions and the number of attractions that can be accessed in the corresponding way in a bar chart, I want to rank total number from high to low order.", "db_id": "cre_Theme_park", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT How_to_Get_There , COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT How_to_Get_There , COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "Find the relationship between average and maximum gpa of all students in each department with a scatter chart grouping by department code.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT max(stu_gpa) , avg(stu_gpa) FROM student GROUP BY DEPT_CODE", "binning": ""}, "VQL": "Visualize SCATTER SELECT max(stu_gpa) , avg(stu_gpa) FROM student GROUP BY DEPT_CODE"}, "hardness": "Easy"}, {"nl_queries": "For those days with the 3 largest maximum gust speeds, can you plot a bar chart to compare the average of mean humidity of each day of the weeks?", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date , AVG(mean_humidity) FROM weather  ORDER BY max_gust_speed_mph DESC LIMIT 3", "binning": "BIN date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date , AVG(mean_humidity) FROM weather  ORDER BY max_gust_speed_mph DESC LIMIT 3 BIN date BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "Find ACC_Road and the average of Team_ID , and group by attribute ACC_Road, and visualize them by a bar chart, and order in desc by the bars.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Road , AVG(Team_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road DESC", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Road , AVG(Team_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road DESC"}, "hardness": "Medium"}, {"nl_queries": "What is the number of employees from each city. ", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT City , count(*) FROM employee GROUP BY city", "binning": ""}, "VQL": "Visualize BAR SELECT City , count(*) FROM employee GROUP BY city"}, "hardness": "Easy"}, {"nl_queries": "Show me a bar chart about the number of races held in each year after 2014, and order X-axis from high to low order please.", "db_id": "formula_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY year ORDER BY year DESC", "binning": ""}, "VQL": "Visualize BAR SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY year ORDER BY year DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "Draw a bar chart about the distribution of  Nationality and the average of ID , and group by attribute Nationality.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nationality , AVG(ID) FROM swimmer GROUP BY Nationality", "binning": ""}, "VQL": "Visualize BAR SELECT Nationality , AVG(ID) FROM swimmer GROUP BY Nationality"}, "hardness": "Easy"}, {"nl_queries": "Find the average age of students living in each dorm and the name of dorm Plot them as bar chart, I want to show by the y axis in descending.", "db_id": "dorm_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY avg(T1.age) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY avg(T1.age) DESC"}, "hardness": "Hard"}, {"nl_queries": "Who were the comptrollers of the parties associated with the delegates from district 1 or district 2, and count them by a bar chart, and rank from low to high by the total number.", "db_id": "election", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Comptroller , COUNT(Comptroller) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.District = 1 OR T1.District = 2 GROUP BY Comptroller ORDER BY COUNT(Comptroller) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Comptroller , COUNT(Comptroller) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.District = 1 OR T1.District = 2 GROUP BY Comptroller ORDER BY COUNT(Comptroller) ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "How many courses for each course description? Show me a stacked bar chart. The x-axis is course description and group by instructor's first name.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT CRS_DESCRIPTION , COUNT(CRS_DESCRIPTION) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num GROUP BY EMP_FNAME ,  CRS_DESCRIPTION", "binning": ""}, "VQL": "Visualize BAR SELECT CRS_DESCRIPTION , COUNT(CRS_DESCRIPTION) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num GROUP BY EMP_FNAME ,  CRS_DESCRIPTION"}, "hardness": "Hard"}, {"nl_queries": "Return a bar chart about the distribution of ACC_Road and the amount of ACC_Road , and group by attribute ACC_Road, sort Y in asc order.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Road , COUNT(ACC_Road) FROM basketball_match GROUP BY ACC_Road ORDER BY COUNT(ACC_Road) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Road , COUNT(ACC_Road) FROM basketball_match GROUP BY ACC_Road ORDER BY COUNT(ACC_Road) ASC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about the amount of founder over the founder , and group by attribute founder by a bar chart, display in ascending by the Y.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Founder , COUNT(Founder) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder ORDER BY COUNT(Founder) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Founder , COUNT(Founder) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder ORDER BY COUNT(Founder) ASC"}, "hardness": "Hard"}, {"nl_queries": "A bar chart showing the number of films each cinema has, order Y-axis from low to high order.", "db_id": "cinema", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Name ORDER BY COUNT(Name) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Name ORDER BY COUNT(Name) ASC"}, "hardness": "Hard"}, {"nl_queries": "Plot how many date in location from over date in location from in a line chart", "db_id": "cre_Doc_Tracking_DB", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations GROUP BY Date_in_Location_From", "binning": ""}, "VQL": "Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations GROUP BY Date_in_Location_From"}, "hardness": "Easy"}, {"nl_queries": "What is the total revenue of each manufacturer, could you display total number from high to low order?", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , sum(revenue) FROM manufacturers GROUP BY name ORDER BY sum(revenue) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name ORDER BY sum(revenue) DESC"}, "hardness": "Medium"}, {"nl_queries": "Bin all date of transactions into the weekday interval, and sum the share count of each bin Return the result using a bar chart, order in asc by the total number of share count please.", "db_id": "tracking_share_transactions", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_of_transaction , SUM(share_count) FROM TRANSACTIONS  ORDER BY SUM(share_count) ASC", "binning": "BIN date_of_transaction BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_of_transaction , SUM(share_count) FROM TRANSACTIONS  ORDER BY SUM(share_count) ASC BIN date_of_transaction BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "How many sections does each course have Visualize by bar chart, and list the total number from high to low order please.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY count(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "A bar chart about what are the title and maximum price of each film?, and I want to order X in descending order.", "db_id": "cinema", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title ORDER BY Title DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title ORDER BY Title DESC"}, "hardness": "Medium"}, {"nl_queries": "How old is each student and how many students are each age. Visualize by scatter chart.", "db_id": "allergy_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Age , count(*) FROM Student GROUP BY age", "binning": ""}, "VQL": "Visualize SCATTER SELECT Age , count(*) FROM Student GROUP BY age"}, "hardness": "Easy"}, {"nl_queries": "Show all the faculty ranks and the number of students advised by each rank in a bar chart, and I want to order in asc by the bar.", "db_id": "activity_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Rank , count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.rank ORDER BY Rank ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Rank , count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.rank ORDER BY Rank ASC"}, "hardness": "Hard"}, {"nl_queries": "Find the number of students whose age is older than the average age for each gender, show by the Y in ascending.", "db_id": "dorm_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Sex , count(*) FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY Sex ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Sex , count(*) FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY Sex ORDER BY count(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, a scatter chart shows the correlation between  salary and  manager_id .", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT SALARY , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)", "binning": ""}, "VQL": "Visualize SCATTER SELECT SALARY , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)"}, "hardness": "Extra Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, a bar chart shows the distribution of  name and  code , and group by attribute founder.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder , T1.Name", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder , T1.Name"}, "hardness": "Medium"}, {"nl_queries": "Give the proportion of what is the average price for each type of product?", "db_id": "department_store", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT product_type_code , avg(product_price) FROM products GROUP BY product_type_code", "binning": ""}, "VQL": "Visualize PIE SELECT product_type_code , avg(product_price) FROM products GROUP BY product_type_code"}, "hardness": "Easy"}, {"nl_queries": "For those products with a price between 60 and 120, visualize a bar chart about the distribution of name and manufacturer , order in descending by the X-axis.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , Manufacturer FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , Manufacturer FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name DESC"}, "hardness": "Medium"}, {"nl_queries": "Show the director and their lowest rating among all movies in a bar chart, display by the x axis from high to low please.", "db_id": "movie_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT director , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director ORDER BY director DESC", "binning": ""}, "VQL": "Visualize BAR SELECT director , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director ORDER BY director DESC"}, "hardness": "Medium"}, {"nl_queries": "Visualize a bar chart about the distribution of All_Home and the sum of Team_ID , and group by attribute All_Home, and I want to show in ascending by the x axis please.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC"}, "hardness": "Medium"}, {"nl_queries": "How many documents for different document name? Draw a bar chart, could you sort in ascending by the Y?", "db_id": "cre_Docs_and_Epenses", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Document_Name , COUNT(Document_Name) FROM Documents GROUP BY Document_Name ORDER BY COUNT(Document_Name) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Document_Name , COUNT(Document_Name) FROM Documents GROUP BY Document_Name ORDER BY COUNT(Document_Name) ASC"}, "hardness": "Medium"}, {"nl_queries": "Draw a bar chart about the distribution of Nationality and the amount of Nationality , and group by attribute Nationality, and I want to rank by the how many nationality from high to low.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nationality , COUNT(Nationality) FROM swimmer GROUP BY Nationality ORDER BY COUNT(Nationality) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM swimmer GROUP BY Nationality ORDER BY COUNT(Nationality) DESC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who did not have any job in the past, visualize a line chart about the change of manager_id over hire_date , and show HIRE_DATE in asc order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE ASC", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE ASC"}, "hardness": "Medium"}, {"nl_queries": "For all employees who have the letters D or S in their first name, return a bar chart about the distribution of hire_date and the average of manager_id bin hire_date by weekday, and could you order the average of manager id in ascending order?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY AVG(MANAGER_ID) ASC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "A bar chart showing the number of debates in each venue for those on the affirmative side, I want to list X-axis in asc order.", "db_id": "debate", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Venue , COUNT(Venue) FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID = T2.Debate_ID JOIN people AS T3 ON T1.Affirmative = T3.People_ID GROUP BY Venue ORDER BY Venue ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Venue , COUNT(Venue) FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID = T2.Debate_ID JOIN people AS T3 ON T1.Affirmative = T3.People_ID GROUP BY Venue ORDER BY Venue ASC"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about code over the name , and group by attribute headquarter by a bar chart, and sort x-axis in descending order.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter , T1.Name ORDER BY T1.Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter , T1.Name ORDER BY T1.Name DESC"}, "hardness": "Hard"}, {"nl_queries": "Scatter plot to show shop id on x axis and employee_id on y axis.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Shop_ID , Employee_ID FROM hiring", "binning": ""}, "VQL": "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM hiring"}, "hardness": "Easy"}, {"nl_queries": "Display a bar chart for what are the different card types, and how many cards are there of each?, sort names from high to low order please.", "db_id": "customers_card_transactions", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT card_type_code , count(*) FROM Customers_cards GROUP BY card_type_code ORDER BY card_type_code DESC", "binning": ""}, "VQL": "Visualize BAR SELECT card_type_code , count(*) FROM Customers_cards GROUP BY card_type_code ORDER BY card_type_code DESC"}, "hardness": "Medium"}, {"nl_queries": "Draw a bar chart of affiliation versus sum enrollment, I want to show by the sum enrollment in desc.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY sum(enrollment) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY sum(enrollment) DESC"}, "hardness": "Medium"}, {"nl_queries": "\u5361\u53f7\u6c42\u548c\u65e0\u610f\u4e49, and sort in desc by the bars.", "db_id": "customers_card_transactions", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT card_type_code , SUM(card_number) FROM Customers_cards GROUP BY card_type_code ORDER BY card_type_code DESC", "binning": ""}, "VQL": "Visualize BAR SELECT card_type_code , SUM(card_number) FROM Customers_cards GROUP BY card_type_code ORDER BY card_type_code DESC"}, "hardness": "Medium"}, {"nl_queries": "Compare the prices of each manufacturer's most expensive product with a bar chart, and could you order x-axis in descending order?", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , max(T1.Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , max(T1.Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY Name DESC"}, "hardness": "Medium"}, {"nl_queries": "How many courses each teacher taught? Show me a bar chart grouping by course code, list in desc by the total number.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT CRS_CODE , COUNT(CRS_CODE) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY CRS_CODE ORDER BY COUNT(CRS_CODE) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT CRS_CODE , COUNT(CRS_CODE) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY CRS_CODE ORDER BY COUNT(CRS_CODE) DESC"}, "hardness": "Hard"}, {"nl_queries": "What is the number of professors for different school Plot them as bar chart, display X-axis from low to high order.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE ASC", "binning": ""}, "VQL": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE ASC"}, "hardness": "Hard"}, {"nl_queries": "Give me a histogram for what are the statuses and average populations of each city?, could you sort Y from high to low order?", "db_id": "farm", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Status , avg(Population) FROM city GROUP BY Status ORDER BY avg(Population) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Status , avg(Population) FROM city GROUP BY Status ORDER BY avg(Population) DESC"}, "hardness": "Medium"}, {"nl_queries": "Find the number of courses offered by Psychology department in each year with a line chart.", "db_id": "college_2", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT year , COUNT(year) FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' GROUP BY year", "binning": ""}, "VQL": "Visualize LINE SELECT year , COUNT(year) FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' GROUP BY year"}, "hardness": "Hard"}, {"nl_queries": "A pie chart about what are the names of projects that require more than 300 hours, and how many scientists are assigned to each?", "db_id": "scientist_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name", "binning": ""}, "VQL": "Visualize PIE SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, return a bar chart about the distribution of founder and the amount of founder , and group by attribute founder, display in descending by the Founder.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Founder , COUNT(Founder) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder ORDER BY Founder DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Founder , COUNT(Founder) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder ORDER BY Founder DESC"}, "hardness": "Hard"}, {"nl_queries": "How many students that has a GPA lower than average? Show me a bar chart grouping by student's first name, sort bars in ascending order.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT STU_FNAME , COUNT(STU_FNAME) FROM student WHERE stu_gpa < (SELECT avg(stu_gpa) FROM student) GROUP BY STU_FNAME ORDER BY STU_FNAME ASC", "binning": ""}, "VQL": "Visualize BAR SELECT STU_FNAME , COUNT(STU_FNAME) FROM student WHERE stu_gpa < (SELECT avg(stu_gpa) FROM student) GROUP BY STU_FNAME ORDER BY STU_FNAME ASC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who was hired before 2002-06-21, give me the comparison about the average of manager_id over the hire_date bin hire_date by time, list in asc by the Y-axis.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(MANAGER_ID) ASC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "Show the number of singers in each country with a bar chart, and list by the x-axis from low to high please.", "db_id": "concert_singer", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY Country ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY Country ASC"}, "hardness": "Medium"}, {"nl_queries": "Visualize a bar chart for what are the names of different tracks, and how many races has each had?, and display y axis from high to low order.", "db_id": "race_track", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC"}, "hardness": "Hard"}, {"nl_queries": "What are the different ship flags, and how many ships have each Plot them as bar chart, and could you display bar from low to high order?", "db_id": "ship_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY Flag ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY Flag ASC"}, "hardness": "Medium"}, {"nl_queries": "Draw a bar chart about the distribution of Is_full_time and the sum of Shop_ID , and group by attribute Is_full_time, and list in descending by the x axis please.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, visualize a bar chart about the distribution of name and code , and group by attribute name, could you show Code in ascending order?", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Code ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Code ASC"}, "hardness": "Hard"}, {"nl_queries": "How many sections does each course have. Visualize by bar chart.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code", "binning": ""}, "VQL": "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code"}, "hardness": "Easy"}, {"nl_queries": "For those employees who was hired before 2002-06-21, give me the comparison about the average of salary over the hire_date bin hire_date by weekday, display in descending by the Y-axis please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(SALARY) DESC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "Stack bar chart of how many home team vs Away_team based on home team, and I want to sort from high to low by the Home_team.", "db_id": "game_injury", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Away_team ,  Home_team ORDER BY Home_team DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Away_team ,  Home_team ORDER BY Home_team DESC"}, "hardness": "Hard"}, {"nl_queries": "Find Nationality and the sum of meter_100 , and group by attribute Nationality, and visualize them by a bar chart, and sort by the X-axis from high to low.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC"}, "hardness": "Medium"}, {"nl_queries": "For each type, what is the average tonnage, and rank by the Y in desc please.", "db_id": "ship_mission", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY avg(Tonnage) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY avg(Tonnage) DESC"}, "hardness": "Medium"}, {"nl_queries": "Can you draw the trend of sum budget in billions over the creation?, could you show by the x-axis in asc?", "db_id": "department_management", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Creation , SUM(Budget_in_Billions) FROM department GROUP BY Creation ORDER BY Creation ASC", "binning": ""}, "VQL": "Visualize LINE SELECT Creation , SUM(Budget_in_Billions) FROM department GROUP BY Creation ORDER BY Creation ASC"}, "hardness": "Medium"}, {"nl_queries": "I want to see trend the number of date in locaton to over date in locaton to by Location_Code, and sort by the Date_in_Locaton_To in asc.", "db_id": "cre_Doc_Tracking_DB", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Location_Code ,  Date_in_Locaton_To ORDER BY Date_in_Locaton_To ASC", "binning": ""}, "VQL": "Visualize LINE SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Location_Code ,  Date_in_Locaton_To ORDER BY Date_in_Locaton_To ASC"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about the average of code over the  name , and group by attribute name.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name"}, "hardness": "Medium"}, {"nl_queries": "Show me population by county name in a histogram, list by the Population in asc.", "db_id": "election", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT County_name , Population FROM county ORDER BY Population ASC", "binning": ""}, "VQL": "Visualize BAR SELECT County_name , Population FROM county ORDER BY Population ASC"}, "hardness": "Easy"}, {"nl_queries": "Show the title and score of the movie with a bar chart, I want to display in asc by the x-axis.", "db_id": "movie_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT title , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID ORDER BY title ASC", "binning": ""}, "VQL": "Visualize BAR SELECT title , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID ORDER BY title ASC"}, "hardness": "Medium"}, {"nl_queries": "Give me the comparison about the sum of School_ID over the ACC_Road , and group by attribute ACC_Road by a bar chart, display in desc by the x axis please.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Road , SUM(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road DESC", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Road , SUM(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road DESC"}, "hardness": "Medium"}, {"nl_queries": "Provide the frequency of the last names of employees earning more than the employee with id 163 using a bar chart, list X in asc order please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT LAST_NAME , COUNT(LAST_NAME) FROM employees WHERE salary > (SELECT salary FROM employees WHERE employee_id = 163 ) GROUP BY LAST_NAME ORDER BY LAST_NAME ASC", "binning": ""}, "VQL": "Visualize BAR SELECT LAST_NAME , COUNT(LAST_NAME) FROM employees WHERE salary > (SELECT salary FROM employees WHERE employee_id = 163 ) GROUP BY LAST_NAME ORDER BY LAST_NAME ASC"}, "hardness": "Hard"}, {"nl_queries": "Visualize a bar chart for how many rooms cost more than 120, for each different decor?, and list by the names in ascending.", "db_id": "inn_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT decor , count(*) FROM Rooms WHERE basePrice > 120 GROUP BY decor ORDER BY decor ASC", "binning": ""}, "VQL": "Visualize BAR SELECT decor , count(*) FROM Rooms WHERE basePrice > 120 GROUP BY decor ORDER BY decor ASC"}, "hardness": "Hard"}, {"nl_queries": "Find the number of trains starting from each origin. Plot them as bar chart.", "db_id": "station_weather", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT origin , count(*) FROM train GROUP BY origin", "binning": ""}, "VQL": "Visualize BAR SELECT origin , count(*) FROM train GROUP BY origin"}, "hardness": "Easy"}, {"nl_queries": "How many courses for each course description? Show me a stacked bar chart The x-axis is course description and group by instructor's name, and show Y in descending order.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT CRS_DESCRIPTION , COUNT(CRS_DESCRIPTION) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code GROUP BY EMP_FNAME ,  CRS_DESCRIPTION ORDER BY COUNT(CRS_DESCRIPTION) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT CRS_DESCRIPTION , COUNT(CRS_DESCRIPTION) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code GROUP BY EMP_FNAME ,  CRS_DESCRIPTION ORDER BY COUNT(CRS_DESCRIPTION) DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "What is the number of start dates for incidents with incident type code \"NOISE\"? Bin by weekday and return a bar chart.", "db_id": "behavior_monitoring", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_incident_end , COUNT(date_incident_end) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\"", "binning": "BIN date_incident_end BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_incident_end , COUNT(date_incident_end) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\" BIN date_incident_end BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "Return the number of booking start date for the apartments that have type code \"Duplex\" for each year in a bar chart.", "db_id": "apartment_rentals", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.apt_type_code = \"Duplex\"", "binning": "BIN booking_start_date BY YEAR"}, "VQL": "Visualize BAR SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.apt_type_code = \"Duplex\" BIN booking_start_date BY YEAR"}, "hardness": "Hard"}, {"nl_queries": "Give me a histogram for what is the number of players who have points less than 30 for each position?, and I want to sort bars in descending order.", "db_id": "sports_competition", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Position , count(*) FROM player WHERE points < 30 GROUP BY POSITION ORDER BY Position DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Position , count(*) FROM player WHERE points < 30 GROUP BY POSITION ORDER BY Position DESC"}, "hardness": "Hard"}, {"nl_queries": "Visualize a scatter chart about the correlation between  address_id and  monthly_rental .", "db_id": "behavior_monitoring", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT address_id , monthly_rental FROM Student_Addresses ORDER BY monthly_rental DESC", "binning": ""}, "VQL": "Visualize SCATTER SELECT address_id , monthly_rental FROM Student_Addresses ORDER BY monthly_rental DESC"}, "hardness": "Easy"}, {"nl_queries": "Give me the comparison about All_Games_Percent over the All_Neutral , could you list y axis in descending order?", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent DESC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent DESC"}, "hardness": "Easy"}, {"nl_queries": "Find the dates of assessment notes for students with first name \"Fanny\", and count them by a bar chart, and I want to sort from high to low by the Y please.", "db_id": "behavior_monitoring", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\"  ORDER BY COUNT(date_of_notes) DESC", "binning": "BIN date_of_notes BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\"  ORDER BY COUNT(date_of_notes) DESC BIN date_of_notes BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "Show the total number from each flag, display the total number in desc order.", "db_id": "ship_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY count(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "Compare the prices of furnitures which some companies are manufacturing by each name using a bar chart.", "db_id": "manufacturer", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , Price_in_Dollar FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID = t2.Furniture_ID", "binning": ""}, "VQL": "Visualize BAR SELECT Name , Price_in_Dollar FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID = t2.Furniture_ID"}, "hardness": "Easy"}, {"nl_queries": "Find the number of the parties associated with the delegates from district 1 or 2 Who served as comptrollers of the parties?, rank X from high to low order.", "db_id": "election", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Comptroller , COUNT(Comptroller) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.District = 1 OR T1.District = 2 GROUP BY Comptroller ORDER BY Comptroller DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Comptroller , COUNT(Comptroller) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.District = 1 OR T1.District = 2 GROUP BY Comptroller ORDER BY Comptroller DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, show me about the distribution of job_id and the sum of manager_id , and group by attribute job_id in a bar chart, order in asc by the Y.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "Bar graph to show how many yearid from different yearid, list in descending by the Y-axis.", "db_id": "baseball_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT yearid , COUNT(yearid) FROM hall_of_fame  ORDER BY COUNT(yearid) DESC", "binning": "BIN yearid BY WEEKDAY"}, "VQL": "Visualize BAR SELECT yearid , COUNT(yearid) FROM hall_of_fame  ORDER BY COUNT(yearid) DESC BIN yearid BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, visualize a bar chart about the distribution of hire_date and the amount of hire_date bin hire_date by weekday, list total number in desc order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY COUNT(HIRE_DATE) DESC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "Give me the comparison about the sum of ID over the Nationality , and group by attribute Nationality, and order in asc by the total number.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) ASC"}, "hardness": "Medium"}, {"nl_queries": "Give me a bar chart for mean product price of each product name, I want to list in asc by the x-axis.", "db_id": "cre_Drama_Workshop_Groups", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY Product_Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY Product_Name ASC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, find name and the average of revenue , and group by attribute name, and visualize them by a bar chart, could you show y-axis in desc order?", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Revenue DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Revenue DESC"}, "hardness": "Hard"}, {"nl_queries": "Show the proportion of the districts of markets they are on, a pie chart.", "db_id": "phone_market", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT District , COUNT(District) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY District", "binning": ""}, "VQL": "Visualize PIE SELECT District , COUNT(District) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY District"}, "hardness": "Medium"}, {"nl_queries": "Visualize a bar chart about the distribution of  All_Road and  School_ID .", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Road , School_ID FROM basketball_match", "binning": ""}, "VQL": "Visualize BAR SELECT All_Road , School_ID FROM basketball_match"}, "hardness": "Easy"}, {"nl_queries": "Return a histogram on what are the names and ids of customers whose address contains TN?, and show by the customer_name in desc please.", "db_id": "department_store", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT customer_name , customer_id FROM customers WHERE customer_address LIKE \"%TN%\" ORDER BY customer_name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT customer_name , customer_id FROM customers WHERE customer_address LIKE \"%TN%\" ORDER BY customer_name DESC"}, "hardness": "Hard"}, {"nl_queries": "Visualize a scatter chart about the correlation between  Credits and  DNO .", "db_id": "college_3", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Credits , DNO FROM COURSE ORDER BY Credits", "binning": ""}, "VQL": "Visualize SCATTER SELECT Credits , DNO FROM COURSE ORDER BY Credits"}, "hardness": "Easy"}, {"nl_queries": "Visualize a bar chart for what are the cost and treatment type description of each treatment?, and order from low to high by the bars.", "db_id": "dog_kennels", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT treatment_type_description , AVG(cost_of_treatment) FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY treatment_type_description ORDER BY treatment_type_description ASC", "binning": ""}, "VQL": "Visualize BAR SELECT treatment_type_description , AVG(cost_of_treatment) FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY treatment_type_description ORDER BY treatment_type_description ASC"}, "hardness": "Hard"}, {"nl_queries": "Return a bar chart about the distribution of  name and  ID .", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , ID FROM swimmer", "binning": ""}, "VQL": "Visualize BAR SELECT name , ID FROM swimmer"}, "hardness": "Easy"}, {"nl_queries": "Find the number of booking start date for the apartments that have more than two bedrooms for each year with a bar chart.", "db_id": "apartment_rentals", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.bedroom_count > 2", "binning": "BIN booking_start_date BY YEAR"}, "VQL": "Visualize BAR SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.bedroom_count > 2 BIN booking_start_date BY YEAR"}, "hardness": "Hard"}, {"nl_queries": "Give me a bar graph showing the total number of different product names, list x axis from high to low order please.", "db_id": "solvency_ii", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Product_Name , COUNT(Product_Name) FROM Products GROUP BY Product_Name ORDER BY Product_Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Product_Name , COUNT(Product_Name) FROM Products GROUP BY Product_Name ORDER BY Product_Name DESC"}, "hardness": "Medium"}, {"nl_queries": "Show the number of documents in each day for all documents on project with details 'Graph Database project' and bin document date by weekday with a bar chart, and I want to display how many document date from low to high order.", "db_id": "cre_Docs_and_Epenses", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Document_Date , COUNT(Document_Date) FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'Graph Database project'  ORDER BY COUNT(Document_Date) ASC", "binning": "BIN Document_Date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'Graph Database project'  ORDER BY COUNT(Document_Date) ASC BIN Document_Date BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "Visualize a bar chart for what are total transaction amounts for each transaction type?, rank by the y-axis in descending.", "db_id": "customers_and_invoices", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT transaction_type , sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT transaction_type , sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) DESC"}, "hardness": "Medium"}, {"nl_queries": "For all employees who have the letters D or S in their first name, give me the trend about department_id over hire_date , and I want to show in asc by the HIRE_DATE.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY HIRE_DATE ASC", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY HIRE_DATE ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "Show me about the distribution of All_Road and ACC_Percent in a bar chart, display by the total number in ascending.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Road , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Road , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC"}, "hardness": "Easy"}, {"nl_queries": "For those employees who did not have any job in the past, return a scatter chart about the correlation between  employee_id and  department_id .", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT EMPLOYEE_ID , DEPARTMENT_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)", "binning": ""}, "VQL": "Visualize SCATTER SELECT EMPLOYEE_ID , DEPARTMENT_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)"}, "hardness": "Easy"}, {"nl_queries": "List the name and assets of each company in ascending order of company name in a bar chart.", "db_id": "company_office", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , Assets_billion FROM Companies ORDER BY name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT name , Assets_billion FROM Companies ORDER BY name ASC"}, "hardness": "Easy"}, {"nl_queries": "Bar chart x axis first name y axis salary, and rank in desc by the y axis.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT FIRST_NAME , SALARY FROM employees ORDER BY SALARY DESC", "binning": ""}, "VQL": "Visualize BAR SELECT FIRST_NAME , SALARY FROM employees ORDER BY SALARY DESC"}, "hardness": "Easy"}, {"nl_queries": "For those employees who did not have any job in the past, show me about the distribution of  hire_date and the average of department_id bin hire_date by time in a bar chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, return a bar chart about the distribution of name and revenue , and group by attribute headquarter, could you sort total number in desc order?", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter , T1.Name ORDER BY T2.Revenue DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter , T1.Name ORDER BY T2.Revenue DESC"}, "hardness": "Hard"}, {"nl_queries": "Find the dates on which more than one revisions were made, and the bin the date of latest revision into weekday interval and count them as a bar chart, and I want to list in desc by the Y-axis.", "db_id": "product_catalog", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY COUNT(date_of_latest_revision) DESC", "binning": "BIN date_of_latest_revision BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_of_latest_revision , COUNT(date_of_latest_revision) FROM Catalogs  ORDER BY COUNT(date_of_latest_revision) DESC BIN date_of_latest_revision BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about code over the name , and group by attribute name by a bar chart, and sort from low to high by the Code.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Code ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Code ASC"}, "hardness": "Hard"}, {"nl_queries": "what is the average account balance of customers with credit score below 50 for the different account types?", "db_id": "loan_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type", "binning": ""}, "VQL": "Visualize PIE SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type"}, "hardness": "Medium"}, {"nl_queries": "What are the countries of all airlines whose names start with Orbit, and count them by a bar chart, and display X in ascending order.", "db_id": "flight_4", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT country , COUNT(country) FROM airlines WHERE name LIKE 'Orbit%' GROUP BY country ORDER BY country ASC", "binning": ""}, "VQL": "Visualize BAR SELECT country , COUNT(country) FROM airlines WHERE name LIKE 'Orbit%' GROUP BY country ORDER BY country ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "Give me a histogram for how many students play each sport?, and sort bars in descending order.", "db_id": "game_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT SportName , count(*) FROM Sportsinfo GROUP BY sportname ORDER BY SportName DESC", "binning": ""}, "VQL": "Visualize BAR SELECT SportName , count(*) FROM Sportsinfo GROUP BY sportname ORDER BY SportName DESC"}, "hardness": "Medium"}, {"nl_queries": "Display a bar chart for what are the ids and details for all organizations that have grants of more than 6000 dollars?", "db_id": "tracking_grants_for_research", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details", "binning": ""}, "VQL": "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details"}, "hardness": "Medium"}, {"nl_queries": "Return a pie on what are the ids and names of the web accelerators that are compatible with two or more browsers?", "db_id": "browser_web", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT name , id FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id", "binning": ""}, "VQL": "Visualize PIE SELECT name , id FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id"}, "hardness": "Easy"}, {"nl_queries": "Show all payment method codes and the number of orders for each code. Show bar chart.", "db_id": "cre_Drama_Workshop_Groups", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code", "binning": ""}, "VQL": "Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code"}, "hardness": "Easy"}, {"nl_queries": "Show the number of gas stations for each manager in a bar chart, and show by the names in ascending.", "db_id": "gas_company", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Manager_Name , COUNT(Manager_Name) FROM gas_station GROUP BY Manager_Name ORDER BY Manager_Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Manager_Name , COUNT(Manager_Name) FROM gas_station GROUP BY Manager_Name ORDER BY Manager_Name ASC"}, "hardness": "Medium"}, {"nl_queries": "Show different carriers of phones together with the number of phones with each carrier by a pie chart.", "db_id": "phone_market", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier", "binning": ""}, "VQL": "Visualize PIE SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier"}, "hardness": "Easy"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about the average of code over the name , and group by attribute name, and list Y in descending order.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC"}, "hardness": "Hard"}, {"nl_queries": "Show me about the distribution of All_Games and ACC_Percent in a bar chart, and list from low to high by the total number please.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Games , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Games , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC"}, "hardness": "Easy"}, {"nl_queries": "Return a bar chart on how many different professors are there for the different schools?", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code", "binning": ""}, "VQL": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code"}, "hardness": "Medium"}, {"nl_queries": "Find the name and budget of departments whose budgets are more than the average budget Visualize by bar chart, I want to order from low to high by the x-axis please.", "db_id": "college_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT dept_name , budget FROM department WHERE budget > (SELECT avg(budget) FROM department) ORDER BY dept_name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT dept_name , budget FROM department WHERE budget > (SELECT avg(budget) FROM department) ORDER BY dept_name ASC"}, "hardness": "Medium"}, {"nl_queries": "Draw a bar chart for how many medications are prescribed for each brand?, and display in asc by the total number.", "db_id": "hospital_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , count(*) FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , count(*) FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand ORDER BY count(*) ASC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who was hired before 2002-06-21, draw a bar chart about the distribution of  hire_date and the average of department_id bin hire_date by time.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21'", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH"}, "hardness": "Medium"}, {"nl_queries": "A pie chart for finding the number of the first name of students who are living in the Smith Hall.", "db_id": "dorm_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Fname , COUNT(Fname) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.dorm_name = 'Smith Hall' GROUP BY Fname", "binning": ""}, "VQL": "Visualize PIE SELECT Fname , COUNT(Fname) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.dorm_name = 'Smith Hall' GROUP BY Fname"}, "hardness": "Hard"}, {"nl_queries": "What is the date of enrollment of the course named \"Spanish\", and count them by a bar chart, and list by the total number in desc.", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\"  ORDER BY COUNT(date_of_enrolment) DESC", "binning": "BIN date_of_enrolment BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\"  ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "Bar chart x axis type y axis the total number ", "db_id": "ship_mission", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Type , COUNT(*) FROM ship GROUP BY TYPE", "binning": ""}, "VQL": "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE"}, "hardness": "Easy"}, {"nl_queries": "How many faculty members does each building have? List the result with the name of the building with a bar chart, and could you display in desc by the y-axis?", "db_id": "activity_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Building , count(*) FROM Faculty GROUP BY building ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Building , count(*) FROM Faculty GROUP BY building ORDER BY count(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "Return a bar chart on what are the allergy types and how many allergies correspond to each one?, and display from low to high by the X-axis.", "db_id": "allergy_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY AllergyType ASC", "binning": ""}, "VQL": "Visualize BAR SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY AllergyType ASC"}, "hardness": "Medium"}, {"nl_queries": "Show the number of customer address history for each city in a bar chart, and show by the x axis from high to low.", "db_id": "customers_and_products_contacts", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T3.city , COUNT(T3.city) FROM customer_address_history AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id JOIN addresses AS T3 ON T1.address_id = T3.address_id GROUP BY T3.city ORDER BY T3.city DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T3.city , COUNT(T3.city) FROM customer_address_history AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id JOIN addresses AS T3 ON T1.address_id = T3.address_id GROUP BY T3.city ORDER BY T3.city DESC"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about the average of manufacturer over the name , and group by attribute name, display in ascending by the x axis.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC"}, "hardness": "Hard"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, return a bar chart about the distribution of  hire_date and the sum of department_id bin hire_date by weekday.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "A bar chart for returning the number of the lot details of lots that belong to investors with details \"l\"?, I want to rank by the how many lot details in descending.", "db_id": "tracking_share_transactions", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT lot_details , COUNT(lot_details) FROM INVESTORS AS T1 JOIN LOTS AS T2 ON T1.investor_id = T2.investor_id WHERE T1.Investor_details = \"l\" GROUP BY lot_details ORDER BY COUNT(lot_details) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM INVESTORS AS T1 JOIN LOTS AS T2 ON T1.investor_id = T2.investor_id WHERE T1.Investor_details = \"l\" GROUP BY lot_details ORDER BY COUNT(lot_details) DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, find job_id and the average of employee_id , and group by attribute job_id, and visualize them by a bar chart, could you display X in descending order?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "What are the different card types, and how many transactions have been made with each Visualize by bar chart, I want to order in desc by the Y-axis.", "db_id": "customers_card_transactions", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT card_type_code , count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id = T2.card_id GROUP BY T2.card_type_code ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT card_type_code , count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id = T2.card_id GROUP BY T2.card_type_code ORDER BY count(*) DESC"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, visualize a bar chart about the distribution of name and the average of revenue , and group by attribute name, rank total number in asc order.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T2.Revenue ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T2.Revenue ASC"}, "hardness": "Hard"}, {"nl_queries": "A bar chart shows the distribution of  All_Neutral and  ACC_Percent .", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Neutral , ACC_Percent FROM basketball_match", "binning": ""}, "VQL": "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match"}, "hardness": "Easy"}, {"nl_queries": "Show all the ranks and the number of male and female faculty for each rank in a bar chart, list by the bar in desc.", "db_id": "activity_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Rank , count(*) FROM Faculty GROUP BY Sex ,  Rank ORDER BY Rank DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY Sex ,  Rank ORDER BY Rank DESC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, return a bar chart about the distribution of hire_date and the average of department_id bin hire_date by time, sort total number in asc order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY AVG(DEPARTMENT_ID) ASC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY AVG(DEPARTMENT_ID) ASC BIN HIRE_DATE BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, show me about the distribution of  headquarter and the average of revenue , and group by attribute headquarter in a bar chart.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter", "binning": ""}, "VQL": "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter"}, "hardness": "Medium"}, {"nl_queries": "For those employees who was hired before 2002-06-21, draw a line chart about the change of department_id over hire_date , and rank from high to low by the X-axis.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE DESC", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE DESC"}, "hardness": "Medium"}, {"nl_queries": "Give me the times and numbers of all trains that go to Chennai, ordered by time with a bar chart.", "db_id": "station_weather", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT time , train_number FROM train WHERE destination = 'Chennai' ORDER BY TIME", "binning": ""}, "VQL": "Visualize BAR SELECT time , train_number FROM train WHERE destination = 'Chennai' ORDER BY TIME"}, "hardness": "Medium"}, {"nl_queries": "Give me the comparison about the sum of ID over the Nationality , and group by attribute Nationality by a bar chart, sort by the bars in desc.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC"}, "hardness": "Medium"}, {"nl_queries": "Show different citizenships and the maximum net worth of singers of each citizenship, and rank by the bars from low to high.", "db_id": "singer", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY Citizenship ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY Citizenship ASC"}, "hardness": "Easy"}, {"nl_queries": "Just show employees' salaries by their first name in a bar chart, I want to order by the Y in desc.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT FIRST_NAME , SALARY FROM employees ORDER BY SALARY DESC", "binning": ""}, "VQL": "Visualize BAR SELECT FIRST_NAME , SALARY FROM employees ORDER BY SALARY DESC"}, "hardness": "Easy"}, {"nl_queries": "Visualize a bar chart about the distribution of meter_300 and meter_100 , and list X in descending order.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_300 , meter_100 FROM swimmer ORDER BY meter_300 DESC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_300 , meter_100 FROM swimmer ORDER BY meter_300 DESC"}, "hardness": "Easy"}, {"nl_queries": "How many departments whose budget is more than the average budget in each building? Show me a bar chart, and order X from low to high order please.", "db_id": "college_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT building , COUNT(building) FROM department WHERE budget > (SELECT avg(budget) FROM department) GROUP BY building ORDER BY building ASC", "binning": ""}, "VQL": "Visualize BAR SELECT building , COUNT(building) FROM department WHERE budget > (SELECT avg(budget) FROM department) GROUP BY building ORDER BY building ASC"}, "hardness": "Hard"}, {"nl_queries": "What is total number of show times per dat for each cinema. Show bar chart.", "db_id": "cinema", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , sum(T1.show_times_per_day) FROM schedule AS T1 JOIN cinema AS T2 ON T1.cinema_id = T2.cinema_id GROUP BY T1.cinema_id", "binning": ""}, "VQL": "Visualize BAR SELECT Name , sum(T1.show_times_per_day) FROM schedule AS T1 JOIN cinema AS T2 ON T1.cinema_id = T2.cinema_id GROUP BY T1.cinema_id"}, "hardness": "Medium"}, {"nl_queries": "What are the number of the names of products with price at most 200?, and order by the X-axis in asc.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM products WHERE price <= 200 GROUP BY Name ORDER BY Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM products WHERE price <= 200 GROUP BY Name ORDER BY Name ASC"}, "hardness": "Hard"}, {"nl_queries": "Scatter plot to show statement id on x axis and the total number on y axis.", "db_id": "cre_Docs_and_Epenses", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Statement_ID , count(*) FROM Accounts GROUP BY STATEMENT_ID", "binning": ""}, "VQL": "Visualize SCATTER SELECT Statement_ID , count(*) FROM Accounts GROUP BY STATEMENT_ID"}, "hardness": "Easy"}, {"nl_queries": "What are the last year of the parties whose theme is \"Spring\" or \"Teqnology\"? Bin the last year into weekday interval and count them, and could you display y-axis in descending order please?", "db_id": "party_host", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\"  ORDER BY COUNT(Last_year) DESC", "binning": "BIN Last_year BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\"  ORDER BY COUNT(Last_year) DESC BIN Last_year BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "A bar chart for what are the number of the names of the workshop groups that have bookings with status code \"stop\"?, display x-axis in descending order.", "db_id": "cre_Drama_Workshop_Groups", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Store_Name , COUNT(Store_Name) FROM Bookings AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Workshop_Group_ID = T2.Workshop_Group_ID WHERE T1.Status_Code = \"stop\" GROUP BY Store_Name ORDER BY Store_Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Store_Name , COUNT(Store_Name) FROM Bookings AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Workshop_Group_ID = T2.Workshop_Group_ID WHERE T1.Status_Code = \"stop\" GROUP BY Store_Name ORDER BY Store_Name DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "Give the maximum product price for each product type in a bar chart, and I want to order by the x axis from low to high.", "db_id": "department_store", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code ORDER BY product_type_code ASC", "binning": ""}, "VQL": "Visualize BAR SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code ORDER BY product_type_code ASC"}, "hardness": "Easy"}, {"nl_queries": "Draw a line chart about the change of the average of Shop_ID over Start_from , and group by attribute Is_full_time and bin start_from by time, display by the Start_from from low to high.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Start_from , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC", "binning": "BIN Start_from BY YEAR"}, "VQL": "Visualize LINE SELECT Start_from , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC BIN Start_from BY YEAR"}, "hardness": "Extra Hard"}, {"nl_queries": "Draw a bar chart about the distribution of  All_Home and  Team_ID , and group by attribute ACC_Home.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home", "binning": ""}, "VQL": "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home"}, "hardness": "Extra Hard"}, {"nl_queries": "How many faculty members do we have for each rank and gender? Plot them as bar chart, and list by the names in desc.", "db_id": "activity_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Rank , count(*) FROM Faculty GROUP BY Sex ,  Rank ORDER BY Rank DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY Sex ,  Rank ORDER BY Rank DESC"}, "hardness": "Hard"}, {"nl_queries": "For days had a minimum dew point smaller than any day in zip code 94107, show the total number of such days using a bar chart, and show in asc by the names.", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date , COUNT(date) FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107) GROUP BY date ORDER BY date ASC", "binning": ""}, "VQL": "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107) GROUP BY date ORDER BY date ASC"}, "hardness": "Hard"}, {"nl_queries": "What are the names of all students who tried out in alphabetical order, and count them by a pie chart", "db_id": "soccer_2", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT pName , COUNT(pName) FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID GROUP BY pName ORDER BY T1.pName", "binning": ""}, "VQL": "Visualize PIE SELECT pName , COUNT(pName) FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID GROUP BY pName ORDER BY T1.pName"}, "hardness": "Hard"}, {"nl_queries": "Show me about the distribution of meter_400 and ID in a bar chart, sort by the X-axis in ascending.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_400 , ID FROM swimmer ORDER BY meter_400 ASC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_400 , ID FROM swimmer ORDER BY meter_400 ASC"}, "hardness": "Easy"}, {"nl_queries": "Show all book categories and the number of books in each category with a bar chart.", "db_id": "culture_company", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Category , count(*) FROM book_club GROUP BY category", "binning": ""}, "VQL": "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category"}, "hardness": "Easy"}, {"nl_queries": "Show all branch names with the number of members in each branch registered after 2015 Plot them as bar chart, and sort in descending by the Y please.", "db_id": "shop_membership", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , count(*) FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id WHERE T1.register_year > 2015 GROUP BY T2.branch_id ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , count(*) FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id WHERE T1.register_year > 2015 GROUP BY T2.branch_id ORDER BY count(*) DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, show me about the distribution of  email and  salary  in a bar chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT EMAIL , SALARY FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)", "binning": ""}, "VQL": "Visualize BAR SELECT EMAIL , SALARY FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)"}, "hardness": "Extra Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, visualize the relationship between  code and  revenue , and group by attribute headquarter.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter", "binning": ""}, "VQL": "Visualize SCATTER SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter"}, "hardness": "Medium"}, {"nl_queries": "What is the average weight of cars each year, I want to display by the X in asc.", "db_id": "car_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Year , avg(Weight) FROM CARS_DATA GROUP BY YEAR ORDER BY Year ASC", "binning": ""}, "VQL": "Visualize LINE SELECT Year , avg(Weight) FROM CARS_DATA GROUP BY YEAR ORDER BY Year ASC"}, "hardness": "Medium"}, {"nl_queries": "Return a bar chart showing the proportion of the number of orders that have the status \"Delivered\" for each customer name.", "db_id": "customers_and_addresses", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT customer_name , COUNT(customer_name) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id WHERE order_status = \"Delivered\" GROUP BY customer_name", "binning": ""}, "VQL": "Visualize BAR SELECT customer_name , COUNT(customer_name) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id WHERE order_status = \"Delivered\" GROUP BY customer_name"}, "hardness": "Hard"}, {"nl_queries": "For all employees who have the letters D or S in their first name, return a line chart about the change of  commission_pct over  hire_date .", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'"}, "hardness": "Hard"}, {"nl_queries": "Show a bar chart about how many employees does each role have?, and I want to display Y in ascending order please.", "db_id": "cre_Doc_Control_Systems", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT role_description , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT role_description , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY count(*) ASC"}, "hardness": "Hard"}, {"nl_queries": "Find meter_400 and ID , and visualize them by a bar chart, and display x axis in desc order please.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_400 , ID FROM swimmer ORDER BY meter_400 DESC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_400 , ID FROM swimmer ORDER BY meter_400 DESC"}, "hardness": "Easy"}, {"nl_queries": "How many people are under 40 for each gender Plot them as bar chart, and could you show by the X in descending?", "db_id": "network_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT gender , count(*) FROM Person WHERE age < 40 GROUP BY gender ORDER BY gender DESC", "binning": ""}, "VQL": "Visualize BAR SELECT gender , count(*) FROM Person WHERE age < 40 GROUP BY gender ORDER BY gender DESC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who did not have any job in the past, draw a bar chart about the distribution of hire_date and the average of department_id bin hire_date by weekday, sort by the Y-axis in desc.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(DEPARTMENT_ID) DESC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(DEPARTMENT_ID) DESC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "For those employees who did not have any job in the past, visualize a scatter chart about the correlation between  employee_id and  department_id .", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT EMPLOYEE_ID , DEPARTMENT_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)", "binning": ""}, "VQL": "Visualize SCATTER SELECT EMPLOYEE_ID , DEPARTMENT_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)"}, "hardness": "Easy"}, {"nl_queries": "Show different parties of people along with the number of people in each party with a bar chart.", "db_id": "debate", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Party , COUNT(*) FROM people GROUP BY Party", "binning": ""}, "VQL": "Visualize BAR SELECT Party , COUNT(*) FROM people GROUP BY Party"}, "hardness": "Easy"}, {"nl_queries": "Give me a bar chart for the number of country of each country, and list in descending by the the number of country.", "db_id": "concert_singer", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY COUNT(Country) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY COUNT(Country) DESC"}, "hardness": "Medium"}, {"nl_queries": "What is the code of each location and the number of documents in that location. Visualize by pie chart.", "db_id": "cre_Doc_Tracking_DB", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Location_Code , count(*) FROM Document_locations GROUP BY location_code", "binning": ""}, "VQL": "Visualize PIE SELECT Location_Code , count(*) FROM Document_locations GROUP BY location_code"}, "hardness": "Easy"}, {"nl_queries": "On which day has it neither been foggy nor rained in the zip code of 94107, and count them by a bar chart", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date , COUNT(date) FROM weather WHERE zip_code = 94107 AND EVENTS != \"Fog\" AND EVENTS != \"Rain\"", "binning": "BIN date BY YEAR"}, "VQL": "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE zip_code = 94107 AND EVENTS != \"Fog\" AND EVENTS != \"Rain\" BIN date BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "For those employees who did not have any job in the past, draw a bar chart about the distribution of job_id and the average of manager_id , and group by attribute job_id, rank by the bar in ascending.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY JOB_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY JOB_ID ASC"}, "hardness": "Hard"}, {"nl_queries": "A bar chart that computes the total number of wines with a price is bigger than 100. Next, Bin the year into the weekday interval.", "db_id": "wine_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Year , COUNT(Year) FROM WINE WHERE Price > 100", "binning": "BIN Year BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Year , COUNT(Year) FROM WINE WHERE Price > 100 BIN Year BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, show me about the distribution of name and the average of price , and group by attribute name in a bar chart, rank by the bar in ascending please.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, show me about the distribution of hire_date and the average of employee_id bin hire_date by time in a bar chart, and order by the Y in descending.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY AVG(EMPLOYEE_ID) DESC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY AVG(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "How many courses with more than one prerequisite for each title? Return a bar chart.", "db_id": "college_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT title , COUNT(title) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title", "binning": ""}, "VQL": "Visualize BAR SELECT title , COUNT(title) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title"}, "hardness": "Medium"}, {"nl_queries": "Give me the comparison about meter_100 over the meter_500 , and I want to rank by the X-axis in desc.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_500 , meter_100 FROM swimmer ORDER BY meter_500 DESC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_500 , meter_100 FROM swimmer ORDER BY meter_500 DESC"}, "hardness": "Easy"}, {"nl_queries": "I want to know the proportion of the total number for each transaction type.", "db_id": "customers_card_transactions", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT transaction_type , count(*) FROM Financial_transactions GROUP BY transaction_type", "binning": ""}, "VQL": "Visualize PIE SELECT transaction_type , count(*) FROM Financial_transactions GROUP BY transaction_type"}, "hardness": "Easy"}, {"nl_queries": "Give me the comparison about Team_ID over the All_Games , and rank from low to high by the bar please.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Games , Team_ID FROM basketball_match ORDER BY All_Games ASC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Games , Team_ID FROM basketball_match ORDER BY All_Games ASC"}, "hardness": "Easy"}, {"nl_queries": "Show me about the distribution of Sex and the sum of Height , and group by attribute Sex in a bar chart, and list X in descending order.", "db_id": "candidate_poll", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Sex , SUM(Height) FROM people GROUP BY Sex ORDER BY Sex DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Sex , SUM(Height) FROM people GROUP BY Sex ORDER BY Sex DESC"}, "hardness": "Medium"}, {"nl_queries": "List the number of counties of all appellations in a bar chart, show by the y-axis from low to high.", "db_id": "wine_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT County , COUNT(County) FROM APPELLATIONS GROUP BY County ORDER BY COUNT(County) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT County , COUNT(County) FROM APPELLATIONS GROUP BY County ORDER BY COUNT(County) ASC"}, "hardness": "Medium"}, {"nl_queries": "Plot how many minister by grouped by minister as a bar graph, display y-axis in ascending order.", "db_id": "party_people", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY COUNT(Minister) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY COUNT(Minister) ASC"}, "hardness": "Medium"}, {"nl_queries": "Visualize a bar chart for what are the countries of perpetrators? Show each country and the corresponding number of perpetrators there, and display by the Y-axis in descending please.", "db_id": "perpetrator", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Country , COUNT(*) FROM perpetrator GROUP BY Country ORDER BY COUNT(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Country , COUNT(*) FROM perpetrator GROUP BY Country ORDER BY COUNT(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "A pie chart for what are the number of the names of all students who tried out in alphabetical order?", "db_id": "soccer_2", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT pName , COUNT(pName) FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID GROUP BY pName ORDER BY T1.pName", "binning": ""}, "VQL": "Visualize PIE SELECT pName , COUNT(pName) FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID GROUP BY pName ORDER BY T1.pName"}, "hardness": "Hard"}, {"nl_queries": "I want a bar chart to show the frequency of the dates that have the 5 highest cloud cover rates each day.", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date , COUNT(date) FROM weather", "binning": "BIN date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date , COUNT(date) FROM weather BIN date BY WEEKDAY"}, "hardness": "Easy"}, {"nl_queries": "Please tell the names and revenues of the companies with the highest revenues in each headquarter city.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , max(revenue) FROM manufacturers GROUP BY Headquarter", "binning": ""}, "VQL": "Visualize BAR SELECT Name , max(revenue) FROM manufacturers GROUP BY Headquarter"}, "hardness": "Easy"}, {"nl_queries": "Find the number of courses offered by Psychology department in each year with a line chart.", "db_id": "college_2", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT year , COUNT(year) FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology'", "binning": "BIN year BY YEAR"}, "VQL": "Visualize LINE SELECT year , COUNT(year) FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' BIN year BY YEAR"}, "hardness": "Hard"}, {"nl_queries": "Bar chart x axis participant type code y axis the number of participant type code, and sort in ascending by the x axis.", "db_id": "local_govt_in_alabama", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code ORDER BY Participant_Type_Code ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code ORDER BY Participant_Type_Code ASC"}, "hardness": "Medium"}, {"nl_queries": "What are the number of the names of all the Japanese constructors that have earned more than 5 points?, display in ascending by the x-axis please.", "db_id": "formula_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name ORDER BY name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name ORDER BY name ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "Please give me a bar chart to show the average age for each type of pet, and could you list by the Y-axis in asc?", "db_id": "pets_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT PetType , avg(pet_age) FROM pets GROUP BY pettype ORDER BY avg(pet_age) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT PetType , avg(pet_age) FROM pets GROUP BY pettype ORDER BY avg(pet_age) ASC"}, "hardness": "Medium"}, {"nl_queries": "A bar chart shows the distribution of  Is_full_time and the sum of Shop_ID , and group by attribute Is_full_time.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time", "binning": ""}, "VQL": "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time"}, "hardness": "Easy"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, return a line chart about the change of employee_id over hire_date , and list in ascending by the X.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, show me about the distribution of  first_name and  employee_id  in a bar chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT FIRST_NAME , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)", "binning": ""}, "VQL": "Visualize BAR SELECT FIRST_NAME , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees who was hired before 2002-06-21, draw a bar chart about the distribution of hire_date and the sum of salary bin hire_date by weekday, I want to display by the Y-axis in desc.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(SALARY) DESC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "Bar chart of how many headquarters from each headquarters, and list in ascending by the y axis.", "db_id": "gas_company", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY COUNT(Headquarters) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY COUNT(Headquarters) ASC"}, "hardness": "Medium"}, {"nl_queries": "Show the number of dogs that received a treatment arrived in each day in a line chart that groups by arrived date, and list X in descending order.", "db_id": "dog_kennels", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date_arrived , COUNT(date_arrived) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id GROUP BY date_arrived ORDER BY date_arrived DESC", "binning": ""}, "VQL": "Visualize LINE SELECT date_arrived , COUNT(date_arrived) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id GROUP BY date_arrived ORDER BY date_arrived DESC"}, "hardness": "Hard"}, {"nl_queries": "What is the number of their teams in elimination? Draw a bar chart, and I want to list by the y-axis from high to low.", "db_id": "wrestler", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Team , COUNT(Team) FROM elimination GROUP BY Team ORDER BY COUNT(Team) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Team , COUNT(Team) FROM elimination GROUP BY Team ORDER BY COUNT(Team) DESC"}, "hardness": "Medium"}, {"nl_queries": "How many dogs departed in each day? Visualize with a bar chart that bins departed date by weekday, and sort in descending by the total number.", "db_id": "dog_kennels", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_departed , COUNT(date_departed) FROM Dogs  ORDER BY COUNT(date_departed) DESC", "binning": "BIN date_departed BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs  ORDER BY COUNT(date_departed) DESC BIN date_departed BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "What are the title and maximum price of each film, order total number from high to low order.", "db_id": "cinema", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title ORDER BY max(T1.price) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title ORDER BY max(T1.price) DESC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, visualize a bar chart about the distribution of  job_id and  commission_pct .", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)"}, "hardness": "Extra Hard"}, {"nl_queries": "Give me the comparison about meter_100 over the meter_300 by a bar chart, and could you list in ascending by the bars?", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_300 , meter_100 FROM swimmer ORDER BY meter_300 ASC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_300 , meter_100 FROM swimmer ORDER BY meter_300 ASC"}, "hardness": "Easy"}, {"nl_queries": "A bar chart for showing the number of the musical nominee with award \"Bob Fosse\" or \"Cleavant Derricks\", and display x-axis in desc order.", "db_id": "musical", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY Nominee DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY Nominee DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "For all players, show the number of different club names they come from, and display y axis in desc order.", "db_id": "sports_competition", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.name , COUNT(T1.name) FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID GROUP BY T1.name ORDER BY COUNT(T1.name) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.name , COUNT(T1.name) FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID GROUP BY T1.name ORDER BY COUNT(T1.name) DESC"}, "hardness": "Hard"}, {"nl_queries": "List the number of courses in year 2008 for each instructor in a bar chart, display y axis in ascending order.", "db_id": "college_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , COUNT(name) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 GROUP BY name ORDER BY COUNT(name) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT name , COUNT(name) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 GROUP BY name ORDER BY COUNT(name) ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "Count the names of all the products in the store and return me a bar chart.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM products GROUP BY Name", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name"}, "hardness": "Easy"}, {"nl_queries": "Draw a bar chart about the distribution of meter_500 and ID , list by the meter_500 in descending.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_500 , ID FROM swimmer ORDER BY meter_500 DESC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_500 , ID FROM swimmer ORDER BY meter_500 DESC"}, "hardness": "Easy"}, {"nl_queries": "A scatter chart shows the correlation between  Team_ID and  All_Games_Percent .", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Team_ID , All_Games_Percent FROM basketball_match", "binning": ""}, "VQL": "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match"}, "hardness": "Easy"}, {"nl_queries": "Find the \"date became customers\" of the customers whose ID is between 10 and 20, and count them by a bar chart", "db_id": "customers_and_addresses", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_became_customer , COUNT(date_became_customer) FROM customers WHERE customer_id BETWEEN 10 AND 20", "binning": "BIN date_became_customer BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_became_customer , COUNT(date_became_customer) FROM customers WHERE customer_id BETWEEN 10 AND 20 BIN date_became_customer BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "How many actors have appeared in each musical Plot them as bar chart, list in ascending by the Y-axis.", "db_id": "musical", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID ORDER BY COUNT(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID ORDER BY COUNT(*) ASC"}, "hardness": "Hard"}, {"nl_queries": "Find All_Home and the average of School_ID , and group by attribute All_Home, and visualize them by a bar chart, show in asc by the x-axis please.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Home , AVG(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Home , AVG(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC"}, "hardness": "Medium"}, {"nl_queries": "How many players having an injury of 'Foot injury' or 'Knee problem' in each season? Draw a bar chart, and list y-axis from low to high order.", "db_id": "game_injury", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Season , COUNT(Season) FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id WHERE T3.injury = 'Foot injury' OR T3.injury = 'Knee problem'  ORDER BY COUNT(Season) ASC", "binning": "BIN Season BY YEAR"}, "VQL": "Visualize BAR SELECT Season , COUNT(Season) FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id WHERE T3.injury = 'Foot injury' OR T3.injury = 'Knee problem'  ORDER BY COUNT(Season) ASC BIN Season BY YEAR"}, "hardness": "Extra Hard"}, {"nl_queries": "How many workshops did each author submit to? Return the author name and the number of workshops Plot them as bar chart, display in descending by the Y.", "db_id": "workshop_paper", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY COUNT(DISTINCT T1.workshop_id) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY COUNT(DISTINCT T1.workshop_id) DESC"}, "hardness": "Medium"}, {"nl_queries": "For all employees who have the letters D or S in their first name, draw a bar chart about the distribution of hire_date and the average of department_id bin hire_date by weekday, and sort by the y axis from low to high please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY AVG(DEPARTMENT_ID) ASC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY AVG(DEPARTMENT_ID) ASC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, find  name and the average of revenue , and group by attribute name, and visualize them by a bar chart.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name"}, "hardness": "Medium"}, {"nl_queries": "How many students are enrolled in colleges that have student accepted during tryouts, and in which states are those colleges Show bar chart, and sort by the Y-axis in desc please.", "db_id": "soccer_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT state , enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.decision = 'yes' ORDER BY enr DESC", "binning": ""}, "VQL": "Visualize BAR SELECT state , enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.decision = 'yes' ORDER BY enr DESC"}, "hardness": "Hard"}, {"nl_queries": "Please give me a bar chart to show the market share of different furniture name, which no any company is producing in our records by a pie chart.", "db_id": "manufacturer", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , Market_Rate FROM furniture WHERE Furniture_ID NOT IN (SELECT Furniture_ID FROM furniture_manufacte)", "binning": ""}, "VQL": "Visualize BAR SELECT Name , Market_Rate FROM furniture WHERE Furniture_ID NOT IN (SELECT Furniture_ID FROM furniture_manufacte)"}, "hardness": "Easy"}, {"nl_queries": "How many dogs departed in each day? Visualize with a line chart that groups by departed date, sort in descending by the x-axis.", "db_id": "dog_kennels", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date_arrived , COUNT(date_arrived) FROM Dogs GROUP BY date_arrived ORDER BY date_arrived DESC", "binning": ""}, "VQL": "Visualize LINE SELECT date_arrived , COUNT(date_arrived) FROM Dogs GROUP BY date_arrived ORDER BY date_arrived DESC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who was hired before 2002-06-21, show me about the distribution of  hire_date and the amount of hire_date bin hire_date by weekday in a bar chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21'", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "Show the proportion of the number of customers for each payment method code in a pie chart.", "db_id": "customers_and_products_contacts", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT payment_method_code , COUNT(payment_method_code) FROM customers GROUP BY payment_method_code", "binning": ""}, "VQL": "Visualize PIE SELECT payment_method_code , COUNT(payment_method_code) FROM customers GROUP BY payment_method_code"}, "hardness": "Easy"}, {"nl_queries": "Bar chart of how many local authority from each local authority, and display in asc by the X-axis.", "db_id": "station_weather", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT local_authority , COUNT(local_authority) FROM station GROUP BY local_authority ORDER BY local_authority ASC", "binning": ""}, "VQL": "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY local_authority ORDER BY local_authority ASC"}, "hardness": "Medium"}, {"nl_queries": "Return a bar chart on what are the countries of perpetrators? Show each country and the corresponding number of perpetrators there.", "db_id": "perpetrator", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Country , COUNT(*) FROM perpetrator GROUP BY Country", "binning": ""}, "VQL": "Visualize BAR SELECT Country , COUNT(*) FROM perpetrator GROUP BY Country"}, "hardness": "Easy"}, {"nl_queries": "How many assets can each parts be used in? List the part name and the number with a bar chart, and show by the y axis from low to high.", "db_id": "assets_maintenance", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT part_name , count(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_name ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT part_name , count(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_name ORDER BY count(*) ASC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, a bar chart shows the distribution of first_name and salary , list in desc by the x-axis.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT FIRST_NAME , SALARY FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY FIRST_NAME DESC", "binning": ""}, "VQL": "Visualize BAR SELECT FIRST_NAME , SALARY FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY FIRST_NAME DESC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who did not have any job in the past, find hire_date and the sum of employee_id bin hire_date by time, and visualize them by a bar chart, show y axis in desc order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY SUM(EMPLOYEE_ID) DESC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "For those employees who was hired before 2002-06-21, give me the comparison about the sum of manager_id over the hire_date bin hire_date by time by a bar chart, I want to show from low to high by the y axis.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(MANAGER_ID) ASC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "Give me the trend about  Employee_ID over  Start_from .", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Start_from , Employee_ID FROM hiring", "binning": ""}, "VQL": "Visualize LINE SELECT Start_from , Employee_ID FROM hiring"}, "hardness": "Easy"}, {"nl_queries": "Show the number of races that had any driver whose forename is Lewis in each year with a line chart, show in descending by the X-axis.", "db_id": "formula_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT year , COUNT(year) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = \"Lewis\" GROUP BY year ORDER BY year DESC", "binning": ""}, "VQL": "Visualize LINE SELECT year , COUNT(year) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = \"Lewis\" GROUP BY year ORDER BY year DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "A pie chart for what are the number of the package options of all tv channels that are not playing any cartoons directed by Ben Jones?", "db_id": "tvshow", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option", "binning": ""}, "VQL": "Visualize PIE SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option"}, "hardness": "Medium"}, {"nl_queries": "A bar chart for what are the number of the facility codes of the apartments with more than four bedrooms?, I want to list by the bars from low to high.", "db_id": "apartment_rentals", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT facility_code , COUNT(facility_code) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.bedroom_count > 4 GROUP BY facility_code ORDER BY facility_code ASC", "binning": ""}, "VQL": "Visualize BAR SELECT facility_code , COUNT(facility_code) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.bedroom_count > 4 GROUP BY facility_code ORDER BY facility_code ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "Find the names of stadiums that some Australian swimmers have been to, and count them by a bar chart, could you display total number in ascending order?", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T4.name , COUNT(T4.name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id JOIN event AS t3 ON t2.event_id = t3.id JOIN stadium AS t4 ON t4.id = t3.stadium_id WHERE t1.nationality = 'Australia' GROUP BY T4.name ORDER BY COUNT(T4.name) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T4.name , COUNT(T4.name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id JOIN event AS t3 ON t2.event_id = t3.id JOIN stadium AS t4 ON t4.id = t3.stadium_id WHERE t1.nationality = 'Australia' GROUP BY T4.name ORDER BY COUNT(T4.name) ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "Return a bar chart about the distribution of  ACC_Road and  School_ID , and group by attribute ACC_Home.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Road , School_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Road , School_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees who did not have any job in the past, return a bar chart about the distribution of hire_date and the amount of hire_date bin hire_date by time, and display total number from high to low order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY COUNT(HIRE_DATE) DESC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "Create a pie chart showing acc_percent across team name.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Team_Name , ACC_Percent FROM basketball_match", "binning": ""}, "VQL": "Visualize PIE SELECT Team_Name , ACC_Percent FROM basketball_match"}, "hardness": "Easy"}, {"nl_queries": "Please give me a bar chart that bins the installation date of stations into Year interval as the X-axis, and count for showing how many stations are installed each year, and sort y-axis from low to high order please.", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT installation_date , COUNT(installation_date) FROM station  ORDER BY COUNT(installation_date) ASC", "binning": "BIN installation_date BY YEAR"}, "VQL": "Visualize BAR SELECT installation_date , COUNT(installation_date) FROM station  ORDER BY COUNT(installation_date) ASC BIN installation_date BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "Find All_Games and ACC_Percent , and visualize them by a bar chart, and order x axis from low to high order.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Games , ACC_Percent FROM basketball_match ORDER BY All_Games ASC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Games , ACC_Percent FROM basketball_match ORDER BY All_Games ASC"}, "hardness": "Easy"}, {"nl_queries": "For those records from the products and each product's manufacturer, draw a bar chart about the distribution of founder and the sum of revenue , and group by attribute founder, and show Y-axis in asc order.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Founder , SUM(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder ORDER BY SUM(Revenue) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Founder , SUM(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder ORDER BY SUM(Revenue) ASC"}, "hardness": "Hard"}, {"nl_queries": "Stacked bar of date in locaton to and the number of date in locaton to colored by Location_Code", "db_id": "cre_Doc_Tracking_DB", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Location_Code", "binning": "BIN Date_in_Locaton_To BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Location_Code BIN Date_in_Locaton_To BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "What are total transaction amounts for each transaction type, show Y-axis in desc order.", "db_id": "customers_and_invoices", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT transaction_type , sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT transaction_type , sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) DESC"}, "hardness": "Medium"}, {"nl_queries": "What are the last names for all scholarship students, and count them by a bar chart, I want to rank x axis in desc order.", "db_id": "game_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT LName , COUNT(LName) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T1.onscholarship = 'Y' GROUP BY LName ORDER BY LName DESC", "binning": ""}, "VQL": "Visualize BAR SELECT LName , COUNT(LName) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T1.onscholarship = 'Y' GROUP BY LName ORDER BY LName DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "Bar chart x axis is full time y axis mean employee id", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Is_full_time , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time", "binning": ""}, "VQL": "Visualize BAR SELECT Is_full_time , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time"}, "hardness": "Easy"}, {"nl_queries": "Draw a line chart about the change of the average of Employee_ID over Start_from bin start_from by time, rank by the X-axis from high to low.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Start_from , AVG(Employee_ID) FROM hiring  ORDER BY Start_from DESC", "binning": "BIN Start_from BY YEAR"}, "VQL": "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring  ORDER BY Start_from DESC BIN Start_from BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, a scatter chart shows the correlation between  employee_id and  salary .", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT EMPLOYEE_ID , SALARY FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40", "binning": ""}, "VQL": "Visualize SCATTER SELECT EMPLOYEE_ID , SALARY FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40"}, "hardness": "Medium"}, {"nl_queries": "List the number of the names of products that are not in any event, I want to display in ascending by the X-axis.", "db_id": "solvency_ii", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Product_Name , COUNT(Product_Name) FROM Products WHERE Product_ID NOT IN (SELECT Product_ID FROM Products_in_Events) GROUP BY Product_Name ORDER BY Product_Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Product_Name , COUNT(Product_Name) FROM Products WHERE Product_ID NOT IN (SELECT Product_ID FROM Products_in_Events) GROUP BY Product_Name ORDER BY Product_Name ASC"}, "hardness": "Hard"}, {"nl_queries": "Draw a line chart about the change of the sum of Employee_ID over Start_from bin start_from by time, rank x-axis in descending order.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Start_from , SUM(Employee_ID) FROM hiring  ORDER BY Start_from DESC", "binning": "BIN Start_from BY YEAR"}, "VQL": "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring  ORDER BY Start_from DESC BIN Start_from BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "Visualize a scatter chart on what are total salaries and department id for each department that has more than 2 employees?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT DEPARTMENT_ID , SUM(salary) FROM employees GROUP BY department_id", "binning": ""}, "VQL": "Visualize SCATTER SELECT DEPARTMENT_ID , SUM(salary) FROM employees GROUP BY department_id"}, "hardness": "Easy"}, {"nl_queries": "Return a scatter chart about the correlation between  People_ID and  Clean_Jerk .", "db_id": "body_builder", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT People_ID , Clean_Jerk FROM body_builder", "binning": ""}, "VQL": "Visualize SCATTER SELECT People_ID , Clean_Jerk FROM body_builder"}, "hardness": "Easy"}, {"nl_queries": "For those records from the products and each product's manufacturer, show me about the distribution of  name and the average of code , and group by attribute name in a bar chart.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name"}, "hardness": "Medium"}, {"nl_queries": "Show me about the distribution of All_Neutral and ACC_Percent in a bar chart, and could you list X in asc order?", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral ASC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral ASC"}, "hardness": "Easy"}, {"nl_queries": "Give me a histogram for how many students play each sport?, sort from high to low by the Y.", "db_id": "game_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT SportName , count(*) FROM Sportsinfo GROUP BY sportname ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT SportName , count(*) FROM Sportsinfo GROUP BY sportname ORDER BY count(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "What are the statuses and average populations of each city Plot them as bar chart, and show in descending by the Y-axis.", "db_id": "farm", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Status , avg(Population) FROM city GROUP BY Status ORDER BY avg(Population) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Status , avg(Population) FROM city GROUP BY Status ORDER BY avg(Population) DESC"}, "hardness": "Medium"}, {"nl_queries": "Visualize a bar chart, the x-axis is the arrival time, and the y-axis is the total number of trains in each arrival time, and show Y in ascending order.", "db_id": "railway", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Arrival , COUNT(Arrival) FROM train GROUP BY Arrival ORDER BY COUNT(Arrival) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Arrival , COUNT(Arrival) FROM train GROUP BY Arrival ORDER BY COUNT(Arrival) ASC"}, "hardness": "Medium"}, {"nl_queries": "How many people are there of each nationality. Visualize by bar chart.", "db_id": "poker_player", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality", "binning": ""}, "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality"}, "hardness": "Easy"}, {"nl_queries": "Show me a bar chart for what are the names and their total grades for each high schooler?, and order x-axis in asc order.", "db_id": "network_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name ASC"}, "hardness": "Medium"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, return a bar chart about the distribution of job_id and the average of salary , and group by attribute job_id, and display in asc by the X.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about the amount of founder over the founder , and group by attribute founder by a bar chart, sort from low to high by the bars.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Founder , COUNT(Founder) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder ORDER BY Founder ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Founder , COUNT(Founder) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder ORDER BY Founder ASC"}, "hardness": "Hard"}, {"nl_queries": "How many faculty members participate in each activity? Return the activity names and the number of faculty members by a bar chart, and display from high to low by the activity_name.", "db_id": "activity_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT activity_name , count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID ORDER BY activity_name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT activity_name , count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID ORDER BY activity_name DESC"}, "hardness": "Hard"}, {"nl_queries": "What is the gpa of the top 5 students with highest gpa? Show me a bar chart.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT STU_FNAME , STU_GPA FROM student ORDER BY stu_gpa DESC LIMIT 5", "binning": ""}, "VQL": "Visualize BAR SELECT STU_FNAME , STU_GPA FROM student ORDER BY stu_gpa DESC LIMIT 5"}, "hardness": "Medium"}, {"nl_queries": "Find the maximum weight for each type of pet. List the maximum weight and pet type. Visualize by bar chart.", "db_id": "pets_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT PetType , max(weight) FROM pets GROUP BY PetType", "binning": ""}, "VQL": "Visualize BAR SELECT PetType , max(weight) FROM pets GROUP BY PetType"}, "hardness": "Easy"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, show me about the distribution of phone_number and department_id in a bar chart, and I want to sort from high to low by the Y-axis.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT PHONE_NUMBER , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY DEPARTMENT_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT PHONE_NUMBER , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY DEPARTMENT_ID DESC"}, "hardness": "Medium"}, {"nl_queries": "Plot the average of age by grouped by class as a bar graph, and show in desc by the total number.", "db_id": "ship_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY avg(age) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY avg(age) DESC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, a bar chart shows the distribution of name and revenue , and group by attribute name, display in asc by the X.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Name ASC"}, "hardness": "Hard"}, {"nl_queries": "Bar chart x axis away team y axis the number of away team, and list from low to high by the the number of away team please.", "db_id": "game_injury", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Away_team ORDER BY COUNT(Away_team) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Away_team ORDER BY COUNT(Away_team) ASC"}, "hardness": "Medium"}, {"nl_queries": "What are the number of the names of the technicians that are assigned to repair machines with more point values than 70?", "db_id": "machine_repair", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID WHERE T2.value_points > 70 GROUP BY Name", "binning": ""}, "VQL": "Visualize PIE SELECT Name , COUNT(Name) FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID WHERE T2.value_points > 70 GROUP BY Name"}, "hardness": "Hard"}, {"nl_queries": "List the cost of each treatment and the corresponding treatment type description. ", "db_id": "dog_kennels", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT treatment_type_description , SUM(cost_of_treatment) FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY treatment_type_description", "binning": ""}, "VQL": "Visualize BAR SELECT treatment_type_description , SUM(cost_of_treatment) FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY treatment_type_description"}, "hardness": "Medium"}, {"nl_queries": "School_ID across all road attribute in a pie chart.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT All_Road , School_ID FROM basketball_match", "binning": ""}, "VQL": "Visualize PIE SELECT All_Road , School_ID FROM basketball_match"}, "hardness": "Easy"}, {"nl_queries": "how many exhibitions has each artist had?, and could you order Y in ascending order?", "db_id": "theme_gallery", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , count(*) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , count(*) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) ASC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who was hired before 2002-06-21, show me the trend about  department_id over  hire_date  with a line chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE hire_date < '2002-06-21'", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE hire_date < '2002-06-21'"}, "hardness": "Easy"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, return a bar chart about the distribution of job_id and the sum of department_id , and group by attribute job_id, and display from high to low by the y axis.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees who was hired before 2002-06-21, draw a bar chart about the distribution of job_id and the average of employee_id , and group by attribute job_id, and I want to order y axis from low to high order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) ASC"}, "hardness": "Hard"}, {"nl_queries": "A line chart shows the change of the sum of Shop_ID over Start_from bin start_from by time, display x-axis in asc order.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Start_from , SUM(Shop_ID) FROM hiring  ORDER BY Start_from ASC", "binning": "BIN Start_from BY YEAR"}, "VQL": "Visualize LINE SELECT Start_from , SUM(Shop_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "What are the different affiliations, and what is the total enrollment of schools founded after 1850 for each enrollment type Visualize by bar chart, and I want to rank from low to high by the total number of enrollment please.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY sum(Enrollment) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY sum(Enrollment) ASC"}, "hardness": "Hard"}, {"nl_queries": "What are the main indstries and total market value for each industry Visualize by bar chart, list in descending by the X.", "db_id": "gas_company", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY Main_Industry DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY Main_Industry DESC"}, "hardness": "Medium"}, {"nl_queries": "Show the countries that have managers of age above 50 or below 46, and count them by a bar chart, order by the y axis from low to high.", "db_id": "railway", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country ORDER BY COUNT(Country) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country ORDER BY COUNT(Country) ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "Return a bar chart about the distribution of All_Road and Team_ID , show by the bars from high to low.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Road , Team_ID FROM basketball_match ORDER BY All_Road DESC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Road , Team_ID FROM basketball_match ORDER BY All_Road DESC"}, "hardness": "Easy"}, {"nl_queries": "A bar chart about what are the cost and treatment type description of each treatment?, I want to show by the names in ascending.", "db_id": "dog_kennels", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT treatment_type_description , SUM(cost_of_treatment) FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY treatment_type_description ORDER BY treatment_type_description ASC", "binning": ""}, "VQL": "Visualize BAR SELECT treatment_type_description , SUM(cost_of_treatment) FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY treatment_type_description ORDER BY treatment_type_description ASC"}, "hardness": "Hard"}, {"nl_queries": "Show the average of id from each nationality, and list in desc by the X please.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nationality , AVG(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Nationality , AVG(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC"}, "hardness": "Medium"}, {"nl_queries": "Count the number of programs broadcast for each time section of a day Show bar chart, could you rank by the the total number in desc?", "db_id": "program_share", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Time_of_day , count(*) FROM broadcast GROUP BY time_of_day ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Time_of_day , count(*) FROM broadcast GROUP BY time_of_day ORDER BY count(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "Display a pie chart for what are the names and ids of the tourist attractions that are visited at most once?", "db_id": "cre_Theme_park", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT T1.Name , T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID", "binning": ""}, "VQL": "Visualize PIE SELECT T1.Name , T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID"}, "hardness": "Easy"}, {"nl_queries": "How many workshops did each author submit to? Return the author name and the number of workshops Plot them as bar chart, and display bar in desc order.", "db_id": "workshop_paper", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY Author DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY Author DESC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, show me about the distribution of  name and the amount of name , and group by attribute name in a bar chart.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name"}, "hardness": "Medium"}, {"nl_queries": "List the names of aircrafts and the number of times it won matches by a bar chart, and list y axis in desc order.", "db_id": "aircraft", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Aircraft , COUNT(*) FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft ORDER BY COUNT(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Aircraft , COUNT(*) FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft ORDER BY COUNT(*) DESC"}, "hardness": "Hard"}, {"nl_queries": "Bar chart x axis name y axis how many name, could you sort by the Y in descending please?", "db_id": "store_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY COUNT(name) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY COUNT(name) DESC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about the sum of price over the founder , and group by attribute founder by a bar chart, order by the x-axis in asc.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Founder , SUM(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder ORDER BY Founder ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Founder , SUM(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder ORDER BY Founder ASC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who did not have any job in the past, return a line chart about the change of employee_id over hire_date , show by the X from high to low.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE DESC", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE DESC"}, "hardness": "Medium"}, {"nl_queries": "Return a bar chart about the distribution of Start_from and the sum of Employee_ID bin start_from by weekday, and display in asc by the total number.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Start_from , SUM(Employee_ID) FROM hiring  ORDER BY SUM(Employee_ID) ASC", "binning": "BIN Start_from BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Start_from , SUM(Employee_ID) FROM hiring  ORDER BY SUM(Employee_ID) ASC BIN Start_from BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "Show the average age of heads of departments born in each state with a bar chart, and show in asc by the born_state.", "db_id": "department_management", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT born_state , AVG(age) FROM head GROUP BY born_state ORDER BY born_state ASC", "binning": ""}, "VQL": "Visualize BAR SELECT born_state , AVG(age) FROM head GROUP BY born_state ORDER BY born_state ASC"}, "hardness": "Medium"}, {"nl_queries": "How many dogs for each size code? Return a bar chart, and could you show by the y axis in desc?", "db_id": "dog_kennels", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT size_code , COUNT(size_code) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY size_code ORDER BY COUNT(size_code) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT size_code , COUNT(size_code) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY size_code ORDER BY COUNT(size_code) DESC"}, "hardness": "Hard"}, {"nl_queries": "Draw a bar chart about the distribution of ACC_Road and the average of Team_ID , and group by attribute ACC_Road, and I want to display from low to high by the total number.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Road , AVG(Team_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(Team_ID) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Road , AVG(Team_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(Team_ID) ASC"}, "hardness": "Medium"}, {"nl_queries": "Return a bar chart showing how many shops in each location, I want to display X from high to low order.", "db_id": "device", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Location , COUNT(Location) FROM shop GROUP BY Location ORDER BY Location DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Location , COUNT(Location) FROM shop GROUP BY Location ORDER BY Location DESC"}, "hardness": "Medium"}, {"nl_queries": "Return me a bar chart to show the average experience working length of journalists working on different role type, rank by the x axis in descending.", "db_id": "news_report", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Work_Type , avg(Years_working) FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id = t2.journalist_id GROUP BY t2.work_type ORDER BY Work_Type DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Work_Type , avg(Years_working) FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id = t2.journalist_id GROUP BY t2.work_type ORDER BY Work_Type DESC"}, "hardness": "Hard"}, {"nl_queries": "Return a bar chart to show how many documents for different budget type code, rank Y-axis from high to low order.", "db_id": "cre_Docs_and_Epenses", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Budget_Type_Code , COUNT(T1.Budget_Type_Code) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY T1.Budget_Type_Code ORDER BY COUNT(T1.Budget_Type_Code) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Budget_Type_Code , COUNT(T1.Budget_Type_Code) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY T1.Budget_Type_Code ORDER BY COUNT(T1.Budget_Type_Code) DESC"}, "hardness": "Hard"}, {"nl_queries": "List the number of the name of all playlist.", "db_id": "store_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , COUNT(name) FROM playlists GROUP BY name", "binning": ""}, "VQL": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name"}, "hardness": "Easy"}, {"nl_queries": "For the attribute All_Road and  School_ID, show their proportion by a pie chart.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT All_Road , School_ID FROM basketball_match", "binning": ""}, "VQL": "Visualize PIE SELECT All_Road , School_ID FROM basketball_match"}, "hardness": "Easy"}, {"nl_queries": "Show the number of apartment bookings for each weekday and bin booking start date by weekday interval in a bar chart, and sort y axis in desc order.", "db_id": "apartment_rentals", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id  ORDER BY COUNT(booking_start_date) DESC", "binning": "BIN booking_start_date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id  ORDER BY COUNT(booking_start_date) DESC BIN booking_start_date BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "A bar chart about how films are produced by each studio?, sort by the bars from high to low.", "db_id": "film_rank", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Studio , COUNT(*) FROM film GROUP BY Studio ORDER BY Studio DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Studio , COUNT(*) FROM film GROUP BY Studio ORDER BY Studio DESC"}, "hardness": "Medium"}, {"nl_queries": "Show me about the distribution of Team_Name and Team_ID in a bar chart, sort X-axis from low to high order.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Team_Name , Team_ID FROM basketball_match ORDER BY Team_Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Team_Name , Team_ID FROM basketball_match ORDER BY Team_Name ASC"}, "hardness": "Easy"}, {"nl_queries": "Give me the comparison about the amount of Is_full_time over the  Is_full_time , and group by attribute Is_full_time by a bar chart.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time", "binning": ""}, "VQL": "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time"}, "hardness": "Easy"}, {"nl_queries": "How many documents for each document type name? Visualize by a ar chart, sort in desc by the x-axis.", "db_id": "cre_Docs_and_Epenses", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Document_Type_Name , COUNT(Document_Type_Name) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Name ORDER BY Document_Type_Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Document_Type_Name , COUNT(Document_Type_Name) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Name ORDER BY Document_Type_Name DESC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who was hired before 2002-06-21, visualize a bar chart about the distribution of  hire_date and the sum of department_id bin hire_date by time.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21'", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH"}, "hardness": "Medium"}, {"nl_queries": "Find employee with ID and name of the country presently where (s)he is working. Visualize by bar chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT COUNTRY_NAME , SUM(EMPLOYEE_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id JOIN locations AS T3 ON T2.location_id = T3.location_id JOIN countries AS T4 ON T3.country_id = T4.country_id GROUP BY COUNTRY_NAME", "binning": ""}, "VQL": "Visualize BAR SELECT COUNTRY_NAME , SUM(EMPLOYEE_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id JOIN locations AS T3 ON T2.location_id = T3.location_id JOIN countries AS T4 ON T3.country_id = T4.country_id GROUP BY COUNTRY_NAME"}, "hardness": "Medium"}, {"nl_queries": "Give me the comparison about Team_ID over the ACC_Road , and group by attribute All_Home, and rank Y-axis from high to low order.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY Team_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY Team_ID DESC"}, "hardness": "Medium"}, {"nl_queries": "Find the maximum weight for each type of pet List the maximum weight and pet type Visualize by bar chart, and order by the x axis from high to low.", "db_id": "pets_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT PetType , max(weight) FROM pets GROUP BY PetType ORDER BY PetType DESC", "binning": ""}, "VQL": "Visualize BAR SELECT PetType , max(weight) FROM pets GROUP BY PetType ORDER BY PetType DESC"}, "hardness": "Easy"}, {"nl_queries": "Plot the number of name by grouped by name as a bar graph, could you list Y in ascending order?", "db_id": "train_station", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM train GROUP BY Name ORDER BY COUNT(Name) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM train GROUP BY Name ORDER BY COUNT(Name) ASC"}, "hardness": "Medium"}, {"nl_queries": "Visualize a bar chart for how many books fall into each category?, show by the names from high to low.", "db_id": "culture_company", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY Category DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY Category DESC"}, "hardness": "Medium"}, {"nl_queries": "For each room, find its the number of times reservations were made for it Visualize them using a bar chart, and display by the the total number from low to high.", "db_id": "inn_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Room , count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Room , count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room ORDER BY count(*) ASC"}, "hardness": "Hard"}, {"nl_queries": "What are the names of all the playlists, and count them by a bar chart, and could you show by the bar in descending please?", "db_id": "store_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY name DESC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, show me about the correlation between  manufacturer and  code , and group by attribute founder in a scatter chart.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT T1.Manufacturer , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder", "binning": ""}, "VQL": "Visualize SCATTER SELECT T1.Manufacturer , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder"}, "hardness": "Medium"}, {"nl_queries": "Group by the local authorities and count the number of local authorities, and then group by services, could you rank by the Y in desc?", "db_id": "station_weather", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT services , COUNT(services) FROM station GROUP BY local_authority ,  services ORDER BY COUNT(services) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY local_authority ,  services ORDER BY COUNT(services) DESC"}, "hardness": "Hard"}, {"nl_queries": "Visualize a bar chart about the distribution of  ACC_Road and the amount of ACC_Road , and group by attribute ACC_Road.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Road , COUNT(ACC_Road) FROM basketball_match GROUP BY ACC_Road", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Road , COUNT(ACC_Road) FROM basketball_match GROUP BY ACC_Road"}, "hardness": "Easy"}, {"nl_queries": "Draw a bar chart for what are the ids and names of the architects who built at least 3 bridges ?, and could you display by the total number in desc?", "db_id": "architecture", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.name , T1.id FROM architect AS T1 JOIN bridge AS T2 ON T1.id = T2.architect_id ORDER BY T1.id DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.name , T1.id FROM architect AS T1 JOIN bridge AS T2 ON T1.id = T2.architect_id ORDER BY T1.id DESC"}, "hardness": "Medium"}, {"nl_queries": "What is the average capacity for rooms in each building? Draw a bar chart, display by the y axis from high to low.", "db_id": "college_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT building , avg(capacity) FROM classroom GROUP BY building ORDER BY avg(capacity) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT building , avg(capacity) FROM classroom GROUP BY building ORDER BY avg(capacity) DESC"}, "hardness": "Medium"}, {"nl_queries": "Return a bar chart about the distribution of  cName and  enr .", "db_id": "soccer_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT cName , enr FROM College ORDER BY enr", "binning": ""}, "VQL": "Visualize BAR SELECT cName , enr FROM College ORDER BY enr"}, "hardness": "Easy"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, find phone_number and department_id , and visualize them by a bar chart, order y-axis from low to high order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT PHONE_NUMBER , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY DEPARTMENT_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT PHONE_NUMBER , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY DEPARTMENT_ID ASC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, show me about the distribution of headquarter and the amount of headquarter , and group by attribute headquarter in a bar chart, order by the how many headquarter from low to high please.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Headquarter , COUNT(Headquarter) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY COUNT(Headquarter) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Headquarter , COUNT(Headquarter) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY COUNT(Headquarter) ASC"}, "hardness": "Hard"}, {"nl_queries": "Give me a bar chart, that just lists the participant ids as Y and their details as X-axis, and show in desc by the bar.", "db_id": "local_govt_in_alabama", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Participant_Details , Participant_ID FROM Participants ORDER BY Participant_Details DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Participant_Details , Participant_ID FROM Participants ORDER BY Participant_Details DESC"}, "hardness": "Easy"}, {"nl_queries": "Bar graph to show how many location from different location, and list total number from low to high order.", "db_id": "train_station", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Location , COUNT(Location) FROM station GROUP BY Location ORDER BY COUNT(Location) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location ORDER BY COUNT(Location) ASC"}, "hardness": "Medium"}, {"nl_queries": "For the sum of Employee_ID, Start_from, visualize the trend, and I want to list by the X in asc.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC", "binning": "BIN Start_from BY YEAR"}, "VQL": "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC BIN Start_from BY YEAR"}, "hardness": "Extra Hard"}, {"nl_queries": "Return a bar chart on what are the different card types, and how many transactions have been made with each?, and list in desc by the X.", "db_id": "customers_card_transactions", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT card_type_code , count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id = T2.card_id GROUP BY T2.card_type_code ORDER BY card_type_code DESC", "binning": ""}, "VQL": "Visualize BAR SELECT card_type_code , count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id = T2.card_id GROUP BY T2.card_type_code ORDER BY card_type_code DESC"}, "hardness": "Hard"}, {"nl_queries": "For all employees who have the letters D or S in their first name, a bar chart shows the distribution of job_id and the sum of employee_id , and group by attribute job_id, show in desc by the Y.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "Show me a bar chart for what are 3 most highly rated episodes in the TV series table and what were those ratings?", "db_id": "tvshow", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Episode , Rating FROM TV_series ORDER BY Rating DESC LIMIT 3", "binning": ""}, "VQL": "Visualize BAR SELECT Episode , Rating FROM TV_series ORDER BY Rating DESC LIMIT 3"}, "hardness": "Medium"}, {"nl_queries": "Display a pie chart for what are the names of the different bank branches, and what are their total loan amounts?", "db_id": "loan_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT bname , sum(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname", "binning": ""}, "VQL": "Visualize PIE SELECT bname , sum(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname"}, "hardness": "Medium"}, {"nl_queries": "Which parts have more than 2 faults? Show the part name and id Plot them as bar chart, list in asc by the names.", "db_id": "assets_maintenance", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.part_name , T1.part_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id ORDER BY T1.part_name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.part_name , T1.part_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id ORDER BY T1.part_name ASC"}, "hardness": "Medium"}, {"nl_queries": "How many completion students in each month? Return a bar chart binning date of completion by month interval, show total number in ascending order.", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_of_completion , COUNT(date_of_completion) FROM Student_Course_Enrolment  ORDER BY COUNT(date_of_completion) ASC", "binning": "BIN date_of_completion BY MONTH"}, "VQL": "Visualize BAR SELECT date_of_completion , COUNT(date_of_completion) FROM Student_Course_Enrolment  ORDER BY COUNT(date_of_completion) ASC BIN date_of_completion BY MONTH"}, "hardness": "Medium"}, {"nl_queries": "Draw a bar chart for what are the ids and details for all organizations that have grants of more than 6000 dollars?, rank total number in desc order please.", "db_id": "tracking_grants_for_research", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T1.organisation_id DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T1.organisation_id DESC"}, "hardness": "Hard"}, {"nl_queries": "Create a pie chart showing the number of venue across venue.", "db_id": "debate", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Venue , COUNT(Venue) FROM debate GROUP BY Venue", "binning": ""}, "VQL": "Visualize PIE SELECT Venue , COUNT(Venue) FROM debate GROUP BY Venue"}, "hardness": "Easy"}, {"nl_queries": "Show each premise type and the number of premises in that type Visualize by bar chart, and could you show premises_type in ascending order?", "db_id": "customers_campaigns_ecommerce", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT premises_type , count(*) FROM premises GROUP BY premises_type ORDER BY premises_type ASC", "binning": ""}, "VQL": "Visualize BAR SELECT premises_type , count(*) FROM premises GROUP BY premises_type ORDER BY premises_type ASC"}, "hardness": "Medium"}, {"nl_queries": "Show the average price of hotels for each star rating code. Show the correlation.", "db_id": "cre_Theme_park", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT star_rating_code , avg(price_range) FROM HOTELS GROUP BY star_rating_code", "binning": ""}, "VQL": "Visualize SCATTER SELECT star_rating_code , avg(price_range) FROM HOTELS GROUP BY star_rating_code"}, "hardness": "Easy"}, {"nl_queries": "Show me a bar chart for what are the total enrollments of universities of each affiliation type?, display by the y axis from low to high please.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY sum(enrollment) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY sum(enrollment) ASC"}, "hardness": "Medium"}, {"nl_queries": "how old is the youngest person for each job?, and sort in descending by the X.", "db_id": "network_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT job , min(age) FROM Person GROUP BY job ORDER BY job DESC", "binning": ""}, "VQL": "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY job DESC"}, "hardness": "Easy"}, {"nl_queries": "For those records from the products and each product's manufacturer, show me about the distribution of name and code , and group by attribute founder in a bar chart, and display X-axis in ascending order please.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder , T1.Name ORDER BY T1.Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder , T1.Name ORDER BY T1.Name ASC"}, "hardness": "Hard"}, {"nl_queries": "Display a pie chart for what are the names of the singers and number of concerts for each person?", "db_id": "concert_singer", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Name , count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id GROUP BY T2.singer_id", "binning": ""}, "VQL": "Visualize PIE SELECT Name , count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id GROUP BY T2.singer_id"}, "hardness": "Medium"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, give me the comparison about commission_pct over the job_id , and could you rank Y-axis in descending order?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, a bar chart shows the distribution of headquarter and the sum of price , and group by attribute headquarter, and I want to list in desc by the x axis.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Headquarter , SUM(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Headquarter , SUM(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter DESC"}, "hardness": "Hard"}, {"nl_queries": "Which physicians are trained in procedures that are more expensive than 5000, and count them by a bar chart, and display by the total number in descending.", "db_id": "hospital_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , COUNT(T1.Name) FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T3.cost > 5000 GROUP BY T1.Name ORDER BY COUNT(T1.Name) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T3.cost > 5000 GROUP BY T1.Name ORDER BY COUNT(T1.Name) DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "Find the number of web accelerators used for each Operating system, show from high to low by the total number.", "db_id": "browser_web", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Operating_system , count(*) FROM web_client_accelerator GROUP BY Operating_system ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Operating_system , count(*) FROM web_client_accelerator GROUP BY Operating_system ORDER BY count(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "Draw a bar chart about the distribution of Nationality and the average of meter_100 , and group by attribute Nationality, and show the average of meter 100 in asc order.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nationality , AVG(meter_100) FROM swimmer GROUP BY Nationality ORDER BY AVG(meter_100) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Nationality , AVG(meter_100) FROM swimmer GROUP BY Nationality ORDER BY AVG(meter_100) ASC"}, "hardness": "Medium"}, {"nl_queries": "A line chart for what are the number of the dates of transactions with at least 100 share count or amount bigger than 100?, and sort from high to low by the X-axis.", "db_id": "tracking_share_transactions", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS WHERE share_count >= 100 OR amount_of_transaction >= 100  ORDER BY date_of_transaction DESC", "binning": "BIN date_of_transaction BY YEAR"}, "VQL": "Visualize LINE SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS WHERE share_count >= 100 OR amount_of_transaction >= 100  ORDER BY date_of_transaction DESC BIN date_of_transaction BY YEAR"}, "hardness": "Extra Hard"}, {"nl_queries": "What are the number of the dates with a maximum temperature higher than 85?, and sort by the the number of date in desc.", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date , COUNT(date) FROM weather WHERE max_temperature_f > 85  ORDER BY COUNT(date) DESC", "binning": "BIN date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE max_temperature_f > 85  ORDER BY COUNT(date) DESC BIN date BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "What is the official language used in the country the name of whose head of state is Beatrix, and count them by a bar chart, rank in ascending by the the number of language please.", "db_id": "world_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Language , COUNT(Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = \"Beatrix\" AND T2.IsOfficial = \"T\" GROUP BY Language ORDER BY COUNT(Language) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Language , COUNT(Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = \"Beatrix\" AND T2.IsOfficial = \"T\" GROUP BY Language ORDER BY COUNT(Language) ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about the average of code over the founder , and group by attribute founder by a bar chart, and rank Founder in descending order please.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T2.Founder DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T2.Founder DESC"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, what is the relationship between  code and  revenue ?", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code", "binning": ""}, "VQL": "Visualize SCATTER SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code"}, "hardness": "Easy"}, {"nl_queries": "For those employees who did not have any job in the past, give me the comparison about the average of employee_id over the hire_date bin hire_date by weekday, and show in ascending by the y axis.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(EMPLOYEE_ID) ASC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "Return a histogram on what are the names and ids of customers whose address contains TN?, rank in asc by the y-axis.", "db_id": "department_store", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT customer_name , customer_id FROM customers WHERE customer_address LIKE \"%TN%\" ORDER BY customer_id ASC", "binning": ""}, "VQL": "Visualize BAR SELECT customer_name , customer_id FROM customers WHERE customer_address LIKE \"%TN%\" ORDER BY customer_id ASC"}, "hardness": "Hard"}, {"nl_queries": "Find All_Home and the sum of School_ID , and group by attribute All_Home, and visualize them by a bar chart, could you order from low to high by the x-axis please?", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC"}, "hardness": "Medium"}, {"nl_queries": "Show sum transaction amount from each transaction type, could you order in ascending by the X?", "db_id": "customers_and_invoices", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT transaction_type , sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type ORDER BY transaction_type ASC", "binning": ""}, "VQL": "Visualize BAR SELECT transaction_type , sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type ORDER BY transaction_type ASC"}, "hardness": "Medium"}, {"nl_queries": "Give me the title and highest price for each film in a bar chart, order total number from high to low order.", "db_id": "cinema", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title ORDER BY max(T1.price) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title ORDER BY max(T1.price) DESC"}, "hardness": "Medium"}, {"nl_queries": "List the types of competition and the number of competitions of each type in a bar chart, sort by the bars in asc please.", "db_id": "sports_competition", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Competition_type , COUNT(*) FROM competition GROUP BY Competition_type ORDER BY Competition_type ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Competition_type , COUNT(*) FROM competition GROUP BY Competition_type ORDER BY Competition_type ASC"}, "hardness": "Medium"}, {"nl_queries": " how many staff does each project has? List the project id and the number in an ascending order.", "db_id": "tracking_grants_for_research", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT T1.project_id , count(*) FROM Project_Staff AS T1 JOIN Projects AS T2 ON T1.project_id = T2.project_id GROUP BY T1.project_id ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize SCATTER SELECT T1.project_id , count(*) FROM Project_Staff AS T1 JOIN Projects AS T2 ON T1.project_id = T2.project_id GROUP BY T1.project_id ORDER BY count(*) ASC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who was hired before 2002-06-21, return a bar chart about the distribution of hire_date and the amount of hire_date bin hire_date by time, could you sort y axis in ascending order?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY COUNT(HIRE_DATE) ASC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "Bar chart x axis start from y axis the average of employee id, and display total number in ascending order.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Start_from , AVG(Employee_ID) FROM hiring  ORDER BY AVG(Employee_ID) ASC", "binning": "BIN Start_from BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Start_from , AVG(Employee_ID) FROM hiring  ORDER BY AVG(Employee_ID) ASC BIN Start_from BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, visualize a bar chart about the distribution of  hire_date and the average of manager_id bin hire_date by time.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "Visualize the relationship between  School_ID and  ACC_Percent , and group by attribute All_Neutral.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY All_Neutral", "binning": ""}, "VQL": "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY All_Neutral"}, "hardness": "Easy"}, {"nl_queries": "What are the number of the descriptions of all the project outcomes?, I want to rank y axis in ascending order.", "db_id": "tracking_grants_for_research", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description ORDER BY COUNT(outcome_description) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description ORDER BY COUNT(outcome_description) ASC"}, "hardness": "Hard"}, {"nl_queries": "Return a bar chart showing the number of companies in each building, and rank X-axis from low to high order please.", "db_id": "company_office", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.name , COUNT(T2.name) FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id = T2.id JOIN Companies AS T3 ON T1.company_id = T3.id GROUP BY T2.name ORDER BY T2.name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.name , COUNT(T2.name) FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id = T2.id JOIN Companies AS T3 ON T1.company_id = T3.id GROUP BY T2.name ORDER BY T2.name ASC"}, "hardness": "Hard"}, {"nl_queries": "Find the number of students whose age is older than the average age for each gender. ", "db_id": "dorm_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Sex , count(*) FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY Sex", "binning": ""}, "VQL": "Visualize BAR SELECT Sex , count(*) FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY Sex"}, "hardness": "Medium"}, {"nl_queries": "Pie. what is the first name and GPA of every student that has a GPA lower than average?", "db_id": "college_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT STU_FNAME , SUM(STU_GPA) FROM student WHERE stu_gpa < (SELECT avg(stu_gpa) FROM student) GROUP BY STU_FNAME", "binning": ""}, "VQL": "Visualize PIE SELECT STU_FNAME , SUM(STU_GPA) FROM student WHERE stu_gpa < (SELECT avg(stu_gpa) FROM student) GROUP BY STU_FNAME"}, "hardness": "Medium"}, {"nl_queries": "Count the names of all the products in the store and return me a bar chart, could you order Name in asc order?", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY Name ASC"}, "hardness": "Medium"}, {"nl_queries": "Bar graph to show the number of investor from different investor, and display Y-axis in descending order please.", "db_id": "entrepreneur", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(Investor) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(Investor) DESC"}, "hardness": "Medium"}, {"nl_queries": "Find the physicians who are trained in a procedure that costs more than 5000, and count them by a bar chart, list by the x axis in descending.", "db_id": "hospital_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , COUNT(T1.Name) FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T3.cost > 5000 GROUP BY T1.Name ORDER BY T1.Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T3.cost > 5000 GROUP BY T1.Name ORDER BY T1.Name DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "Find the market values of the companies in the banking industry with a pie chart.", "db_id": "gas_company", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Company , Market_Value FROM company WHERE main_industry = 'Banking'", "binning": ""}, "VQL": "Visualize PIE SELECT Company , Market_Value FROM company WHERE main_industry = 'Banking'"}, "hardness": "Easy"}, {"nl_queries": "For those employees who did not have any job in the past, return a bar chart about the distribution of  hire_date and the average of department_id bin hire_date by time.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH"}, "hardness": "Medium"}, {"nl_queries": "What are the number of dates of birth of all the guests whose gender is \"Male\"?", "db_id": "apartment_rentals", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"", "binning": "BIN date_of_birth BY YEAR"}, "VQL": "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\" BIN date_of_birth BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, a bar chart shows the distribution of job_id and the sum of employee_id , and group by attribute job_id, rank by the x-axis in ascending.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "What is the relationship between  Team_ID and  School_ID , and group by attribute Team_Name?", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Team_ID , School_ID FROM basketball_match GROUP BY Team_Name", "binning": ""}, "VQL": "Visualize SCATTER SELECT Team_ID , School_ID FROM basketball_match GROUP BY Team_Name"}, "hardness": "Easy"}, {"nl_queries": "For those records from the products and each product's manufacturer, return a bar chart about the distribution of  name and the sum of code , and group by attribute name.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name"}, "hardness": "Medium"}, {"nl_queries": "A bar chart about the number of end dates for incidents with incident type code \"NOISE\"?, and rank from high to low by the y-axis.", "db_id": "behavior_monitoring", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_incident_end , COUNT(date_incident_end) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\" GROUP BY date_incident_end ORDER BY COUNT(date_incident_end) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT date_incident_end , COUNT(date_incident_end) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\" GROUP BY date_incident_end ORDER BY COUNT(date_incident_end) DESC"}, "hardness": "Hard"}, {"nl_queries": "What are the completion dates of all the tests that have result \"Fail\", and count them by a bar chart", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_of_completion , COUNT(date_of_completion) FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = \"Fail\"", "binning": "BIN date_of_completion BY MONTH"}, "VQL": "Visualize BAR SELECT date_of_completion , COUNT(date_of_completion) FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = \"Fail\" BIN date_of_completion BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, return a bar chart about the distribution of  first_name and  manager_id .", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT FIRST_NAME , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)", "binning": ""}, "VQL": "Visualize BAR SELECT FIRST_NAME , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)"}, "hardness": "Extra Hard"}, {"nl_queries": "Return a bar chart about the distribution of All_Home and the average of Team_ID , and group by attribute All_Home, and could you sort by the X in asc?", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Home , AVG(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Home , AVG(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC"}, "hardness": "Medium"}, {"nl_queries": "Show me the frequency of those years (bin year into year interval) that the team Boston Red Stockings won in the postseasons with a bar chart, and I want to show x-axis in desc order.", "db_id": "baseball_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT year , COUNT(year) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' ORDER BY year DESC", "binning": "BIN year BY YEAR"}, "VQL": "Visualize LINE SELECT year , COUNT(year) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' ORDER BY year DESC BIN year BY YEAR"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, give me the comparison about commission_pct over the phone_number , and I want to display from high to low by the PHONE_NUMBER.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT PHONE_NUMBER , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY PHONE_NUMBER DESC", "binning": ""}, "VQL": "Visualize BAR SELECT PHONE_NUMBER , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY PHONE_NUMBER DESC"}, "hardness": "Medium"}, {"nl_queries": "Give me a bar chart for how many name of each name, and could you show x-axis from high to low order?", "db_id": "railway", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM train GROUP BY Name ORDER BY Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM train GROUP BY Name ORDER BY Name DESC"}, "hardness": "Medium"}, {"nl_queries": "What are the names of projects that require more than 300 hours, and how many scientists are assigned to each, and show bar in ascending order.", "db_id": "scientist_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name ORDER BY Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name ORDER BY Name ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "Show me the relationship between version number and template id for all templates in a scatter chart.", "db_id": "cre_Doc_Template_Mgt", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Template_ID , Version_Number FROM Templates GROUP BY Template_Type_Code", "binning": ""}, "VQL": "Visualize SCATTER SELECT Template_ID , Version_Number FROM Templates GROUP BY Template_Type_Code"}, "hardness": "Easy"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, find job_id and commission_pct , and visualize them by a bar chart, rank by the names in asc.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID ASC"}, "hardness": "Medium"}, {"nl_queries": "Give me the trend about the sum of Shop_ID over Start_from bin start_from by time, and rank X in asc order please.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Start_from , SUM(Shop_ID) FROM hiring  ORDER BY Start_from ASC", "binning": "BIN Start_from BY YEAR"}, "VQL": "Visualize LINE SELECT Start_from , SUM(Shop_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "Give me the number of the descriptions of the service types that cost more than 100, could you sort X-axis from high to low order?", "db_id": "cre_Drama_Workshop_Groups", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Service_Type_Description , COUNT(Service_Type_Description) FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code WHERE T2.Product_Price > 100 GROUP BY Service_Type_Description ORDER BY Service_Type_Description DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Service_Type_Description , COUNT(Service_Type_Description) FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code WHERE T2.Product_Price > 100 GROUP BY Service_Type_Description ORDER BY Service_Type_Description DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "Show details of all investors if they make any transaction with share count greater than 100, and count them by a bar chart, I want to show by the y-axis from high to low.", "db_id": "tracking_share_transactions", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.share_count > 100 GROUP BY Investor_details ORDER BY COUNT(Investor_details) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.share_count > 100 GROUP BY Investor_details ORDER BY COUNT(Investor_details) DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "For those products with a price between 60 and 120, show me about the correlation between  code and  manufacturer  in a scatter chart.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Code , Manufacturer FROM products WHERE price BETWEEN 60 AND 120", "binning": ""}, "VQL": "Visualize SCATTER SELECT Code , Manufacturer FROM products WHERE price BETWEEN 60 AND 120"}, "hardness": "Easy"}, {"nl_queries": "What is the official language spoken in the country whose head of state is Beatrix, and count them by a bar chart, and rank by the total number from high to low.", "db_id": "world_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Language , COUNT(Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = \"Beatrix\" AND T2.IsOfficial = \"T\" GROUP BY Language ORDER BY COUNT(Language) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Language , COUNT(Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = \"Beatrix\" AND T2.IsOfficial = \"T\" GROUP BY Language ORDER BY COUNT(Language) DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "Show the names of journalists and the number of events they reported. Visualize by bar chart.", "db_id": "news_report", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T3.Name , COUNT(*) FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID = T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID = T3.journalist_ID GROUP BY T3.Name", "binning": ""}, "VQL": "Visualize BAR SELECT T3.Name , COUNT(*) FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID = T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID = T3.journalist_ID GROUP BY T3.Name"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, what is the relationship between  price and  code , and group by attribute name?", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT T1.Price , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name", "binning": ""}, "VQL": "Visualize SCATTER SELECT T1.Price , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name"}, "hardness": "Medium"}, {"nl_queries": "Bar chart x axis state y axis the number of state, and sort by the how many state in descending.", "db_id": "voter_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT DISTINCT state , COUNT(state) FROM votes GROUP BY state ORDER BY COUNT(state) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT DISTINCT state , COUNT(state) FROM votes GROUP BY state ORDER BY COUNT(state) DESC"}, "hardness": "Medium"}, {"nl_queries": "Count the number of employees for each city with a bar chart.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT City , count(*) FROM employee GROUP BY city", "binning": ""}, "VQL": "Visualize BAR SELECT City , count(*) FROM employee GROUP BY city"}, "hardness": "Easy"}, {"nl_queries": "For those employees who did not have any job in the past, draw a bar chart about the distribution of job_id and the average of employee_id , and group by attribute job_id, and display by the bars in desc.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY JOB_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY JOB_ID DESC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who was hired before 2002-06-21, show me about the distribution of  hire_date and the average of salary bin hire_date by time in a bar chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21'", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH"}, "hardness": "Medium"}, {"nl_queries": "For all organizations that have grants of more than 6000 dollars, compare the number of details of the organizations with a bar chart, display y-axis in ascending order.", "db_id": "tracking_grants_for_research", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT organisation_details , COUNT(organisation_details) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY organisation_details ORDER BY COUNT(organisation_details) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT organisation_details , COUNT(organisation_details) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY organisation_details ORDER BY COUNT(organisation_details) ASC"}, "hardness": "Hard"}, {"nl_queries": "Visualize a bar chart for what is the name of each aircraft and how many flights does each one complete?", "db_id": "flight_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid", "binning": ""}, "VQL": "Visualize BAR SELECT name , count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid"}, "hardness": "Medium"}, {"nl_queries": "Visualize a pie chart with how many players are there for each hand type?", "db_id": "wta_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT hand , count(*) FROM players GROUP BY hand", "binning": ""}, "VQL": "Visualize PIE SELECT hand , count(*) FROM players GROUP BY hand"}, "hardness": "Easy"}, {"nl_queries": "What are the names and the average grades for each high schooler Plot them as a bar chart, and could you list in desc by the y axis?", "db_id": "network_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) DESC"}, "hardness": "Medium"}, {"nl_queries": "Show the number of courses each instructor taught in a stacked bar chart The x-axis is the instructor's first name and group by course code, and show by the bars from low to high please.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY CRS_CODE ,  EMP_FNAME ORDER BY EMP_FNAME ASC", "binning": ""}, "VQL": "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY CRS_CODE ,  EMP_FNAME ORDER BY EMP_FNAME ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "For the sale details with amount smaller than 3000, visualize a bar chart that x-axis is the sales details and count them as y, and rank by the y axis from low to high please.", "db_id": "tracking_share_transactions", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT sales_details , COUNT(sales_details) FROM SALES AS T1 JOIN TRANSACTIONS AS T2 ON T1.sales_transaction_id = T2.transaction_id WHERE T2.amount_of_transaction < 3000 GROUP BY sales_details ORDER BY COUNT(sales_details) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT sales_details , COUNT(sales_details) FROM SALES AS T1 JOIN TRANSACTIONS AS T2 ON T1.sales_transaction_id = T2.transaction_id WHERE T2.amount_of_transaction < 3000 GROUP BY sales_details ORDER BY COUNT(sales_details) ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "Compare the total number of locations in each location using a bar graph, and list bars in asc order.", "db_id": "performance_attendance", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Location , COUNT(Location) FROM performance GROUP BY Location ORDER BY Location ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Location , COUNT(Location) FROM performance GROUP BY Location ORDER BY Location ASC"}, "hardness": "Medium"}, {"nl_queries": "Draw a bar chart about the distribution of meter_200 and the average of meter_100 , and group by attribute meter_200, sort by the Y in asc.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_200 , AVG(meter_100) FROM swimmer GROUP BY meter_200 ORDER BY AVG(meter_100) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_200 , AVG(meter_100) FROM swimmer GROUP BY meter_200 ORDER BY AVG(meter_100) ASC"}, "hardness": "Medium"}, {"nl_queries": "Return a bar chart on what is the average age for each gender?", "db_id": "network_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT gender , avg(age) FROM Person GROUP BY gender", "binning": ""}, "VQL": "Visualize BAR SELECT gender , avg(age) FROM Person GROUP BY gender"}, "hardness": "Easy"}, {"nl_queries": "How many templates with version number later than 5 for each template type code? Show me a bar chart, I want to display in desc by the X-axis.", "db_id": "cre_Doc_Template_Mgt", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Template_Type_Code , COUNT(Template_Type_Code) FROM Templates WHERE version_number > 5 GROUP BY Template_Type_Code ORDER BY Template_Type_Code DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Template_Type_Code , COUNT(Template_Type_Code) FROM Templates WHERE version_number > 5 GROUP BY Template_Type_Code ORDER BY Template_Type_Code DESC"}, "hardness": "Hard"}, {"nl_queries": "Show the number of documents in different starting date. Bin starting date by year interval and group by location code with a group line chart.", "db_id": "cre_Doc_Tracking_DB", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations GROUP BY Location_Code", "binning": "BIN Date_in_Location_From BY YEAR"}, "VQL": "Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations GROUP BY Location_Code BIN Date_in_Location_From BY YEAR"}, "hardness": "Hard"}, {"nl_queries": "A bar chart about the number of countries for all people whose age is smaller than the average, and display by the total number in descending.", "db_id": "wedding", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Country , COUNT(Country) FROM people WHERE age < (SELECT avg(age) FROM people) GROUP BY Country ORDER BY COUNT(Country) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM people WHERE age < (SELECT avg(age) FROM people) GROUP BY Country ORDER BY COUNT(Country) DESC"}, "hardness": "Hard"}, {"nl_queries": "Show the number of courses for each office in a bar chart, and I want to display X in ascending order please.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT PROF_OFFICE , COUNT(PROF_OFFICE) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num GROUP BY PROF_OFFICE ORDER BY PROF_OFFICE ASC", "binning": ""}, "VQL": "Visualize BAR SELECT PROF_OFFICE , COUNT(PROF_OFFICE) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num GROUP BY PROF_OFFICE ORDER BY PROF_OFFICE ASC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who was hired before 2002-06-21, find hire_date and the average of department_id bin hire_date by time, and visualize them by a bar chart, and display by the y-axis from high to low.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(DEPARTMENT_ID) DESC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(DEPARTMENT_ID) DESC BIN HIRE_DATE BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "Bar graph to show the average of high temperature from different day of week, and could you order by the bars in desc?", "db_id": "station_weather", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT day_of_week , avg(high_temperature) FROM weekly_weather GROUP BY day_of_week ORDER BY day_of_week DESC", "binning": ""}, "VQL": "Visualize BAR SELECT day_of_week , avg(high_temperature) FROM weekly_weather GROUP BY day_of_week ORDER BY day_of_week DESC"}, "hardness": "Medium"}, {"nl_queries": "Can you draw the trend of how many date from over the date from?", "db_id": "tracking_grants_for_research", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date_from , COUNT(date_from) FROM Project_Staff", "binning": "BIN date_from BY YEAR"}, "VQL": "Visualize LINE SELECT date_from , COUNT(date_from) FROM Project_Staff BIN date_from BY YEAR"}, "hardness": "Easy"}, {"nl_queries": "What are the different ship flags, and how many ships have each Plot them as bar chart, rank Y-axis in descending order.", "db_id": "ship_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY count(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "What are the allergy types and how many allergies correspond to each one. Show a pie chart.", "db_id": "allergy_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype", "binning": ""}, "VQL": "Visualize PIE SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype"}, "hardness": "Easy"}, {"nl_queries": "Find the total amount of loans offered by each bank branch, and sort in desc by the bar.", "db_id": "loan_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT bname , sum(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname ORDER BY bname DESC", "binning": ""}, "VQL": "Visualize BAR SELECT bname , sum(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname ORDER BY bname DESC"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about manufacturer over the name , and group by attribute name by a bar chart, and I want to list y axis from low to high order please.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Manufacturer ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Manufacturer ASC"}, "hardness": "Hard"}, {"nl_queries": "A line chart shows the trend of the sum of Employee_ID over Start_from bin start_from by time, I want to sort by the x-axis from low to high.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Start_from , SUM(Employee_ID) FROM hiring  ORDER BY Start_from ASC", "binning": "BIN Start_from BY YEAR"}, "VQL": "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, show me about the change of  commission_pct over  hire_date  in a line chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40"}, "hardness": "Medium"}, {"nl_queries": "Sum the number of matches that happened each year. Plot them as a bar chart.", "db_id": "wta_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT year , count(*) FROM matches", "binning": "BIN year BY YEAR"}, "VQL": "Visualize BAR SELECT year , count(*) FROM matches BIN year BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, a bar chart shows the distribution of job_id and employee_id , and sort in asc by the X-axis.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID ASC"}, "hardness": "Medium"}, {"nl_queries": "What are the number of the category of music festivals with result \"Awarded\"?, I want to rank y-axis in desc order please.", "db_id": "music_4", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) DESC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, visualize a bar chart about the distribution of first_name and salary , and I want to show by the bar in ascending.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT FIRST_NAME , SALARY FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY FIRST_NAME ASC", "binning": ""}, "VQL": "Visualize BAR SELECT FIRST_NAME , SALARY FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY FIRST_NAME ASC"}, "hardness": "Medium"}, {"nl_queries": "A bar chart showing the average price of each cinema.", "db_id": "cinema", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Name", "binning": ""}, "VQL": "Visualize BAR SELECT Name , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Name"}, "hardness": "Medium"}, {"nl_queries": "Return a bar chart about the distribution of  Sex and the average of Weight , and group by attribute Sex.", "db_id": "candidate_poll", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Sex , AVG(Weight) FROM people GROUP BY Sex", "binning": ""}, "VQL": "Visualize BAR SELECT Sex , AVG(Weight) FROM people GROUP BY Sex"}, "hardness": "Easy"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, show me about the distribution of  hire_date and the amount of hire_date bin hire_date by time in a bar chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "Give me the comparison about the sum of Shop_ID over the  Start_from , and group by attribute Is_full_time and bin start_from by weekday by a bar chart.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Start_from , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time", "binning": "BIN Start_from BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Start_from , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time BIN Start_from BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "A pie chart shows the proportion of  ACC_Regular_Season and  ACC_Percent.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match", "binning": ""}, "VQL": "Visualize PIE SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match"}, "hardness": "Easy"}, {"nl_queries": "Visualize a bar chart for what are the different template type codes, and how many templates correspond to each?, and order by the the total number in ascending.", "db_id": "cre_Doc_Template_Mgt", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Template_Type_Code , count(*) FROM Templates GROUP BY template_type_code ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates GROUP BY template_type_code ORDER BY count(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "Return a scatter chart about the correlation between  Team_ID and  School_ID , and group by attribute ACC_Regular_Season.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Team_ID , School_ID FROM basketball_match GROUP BY ACC_Regular_Season", "binning": ""}, "VQL": "Visualize SCATTER SELECT Team_ID , School_ID FROM basketball_match GROUP BY ACC_Regular_Season"}, "hardness": "Easy"}, {"nl_queries": "Show the names of people and the number of times they have been on the affirmative side of debates by a bar chart, and list from low to high by the X.", "db_id": "debate", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(*) FROM debate_people AS T1 JOIN people AS T2 ON T1.Affirmative = T2.People_ID GROUP BY T2.Name ORDER BY Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(*) FROM debate_people AS T1 JOIN people AS T2 ON T1.Affirmative = T2.People_ID GROUP BY T2.Name ORDER BY Name ASC"}, "hardness": "Hard"}, {"nl_queries": "Show me salary by last name in a histogram, display X-axis in ascending order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT LAST_NAME , SALARY FROM employees ORDER BY LAST_NAME ASC", "binning": ""}, "VQL": "Visualize BAR SELECT LAST_NAME , SALARY FROM employees ORDER BY LAST_NAME ASC"}, "hardness": "Easy"}, {"nl_queries": "What is the average weight of cars each year. ", "db_id": "car_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Year , avg(Weight) FROM CARS_DATA GROUP BY YEAR", "binning": ""}, "VQL": "Visualize LINE SELECT Year , avg(Weight) FROM CARS_DATA GROUP BY YEAR"}, "hardness": "Easy"}, {"nl_queries": "For those employees who was hired before 2002-06-21, find job_id and the sum of employee_id , and group by attribute job_id, and visualize them by a bar chart, and sort y-axis from high to low order please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) DESC"}, "hardness": "Hard"}, {"nl_queries": "Show me about the distribution of  date_address_to and the amount of date_address_to , and group by attribute other_details and bin date_address_to by weekday in a bar chart.", "db_id": "behavior_monitoring", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC", "binning": "BIN date_address_to BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "What is the average of credit value of courses with more than one prerequisite for each department? Return a bar chart, list by the bar in descending please.", "db_id": "college_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT dept_name , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY dept_name ORDER BY dept_name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT dept_name , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY dept_name ORDER BY dept_name DESC"}, "hardness": "Hard"}, {"nl_queries": "Create a bar chart showing the total number across premises type, could you sort by the x axis from low to high?", "db_id": "customers_campaigns_ecommerce", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT premises_type , count(*) FROM premises GROUP BY premises_type ORDER BY premises_type ASC", "binning": ""}, "VQL": "Visualize BAR SELECT premises_type , count(*) FROM premises GROUP BY premises_type ORDER BY premises_type ASC"}, "hardness": "Medium"}, {"nl_queries": "Give the maximum product price for each product type in a bar chart, show in descending by the Y-axis.", "db_id": "department_store", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code ORDER BY max(product_price) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code ORDER BY max(product_price) DESC"}, "hardness": "Easy"}, {"nl_queries": "Show the number of services for each service type description with a pie chart.", "db_id": "cre_Drama_Workshop_Groups", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Service_Type_Description , COUNT(*) FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code GROUP BY T2.Service_Type_Code", "binning": ""}, "VQL": "Visualize PIE SELECT Service_Type_Description , COUNT(*) FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code GROUP BY T2.Service_Type_Code"}, "hardness": "Medium"}, {"nl_queries": "Show different ways to get to attractions and the number of attractions that can be accessed in the corresponding way in a bar chart.", "db_id": "cre_Theme_park", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT How_to_Get_There , COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There", "binning": ""}, "VQL": "Visualize BAR SELECT How_to_Get_There , COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There"}, "hardness": "Easy"}, {"nl_queries": "For those payments processed with Visa, bin the payment day into Year interval and compute the total amount payment as the Y-axis.", "db_id": "insurance_policies", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'", "binning": "BIN Date_Payment_Made BY YEAR"}, "VQL": "Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "How many courses are provided in each year? binning by year and visualize with a grouping line chart by different semesters .", "db_id": "college_2", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT year , count(*) FROM SECTION GROUP BY semester", "binning": "BIN year BY YEAR"}, "VQL": "Visualize LINE SELECT year , count(*) FROM SECTION GROUP BY semester BIN year BY YEAR"}, "hardness": "Hard"}, {"nl_queries": "Show all template type codes and number of templates for each with a bar chart, I want to list by the X-axis from low to high.", "db_id": "cre_Doc_Template_Mgt", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Template_Type_Code , count(*) FROM Templates GROUP BY template_type_code ORDER BY Template_Type_Code ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates GROUP BY template_type_code ORDER BY Template_Type_Code ASC"}, "hardness": "Medium"}, {"nl_queries": "Return a bar chart on what are the different ship flags, and how many ships have each?", "db_id": "ship_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Flag , count(*) FROM ship GROUP BY flag", "binning": ""}, "VQL": "Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag"}, "hardness": "Easy"}, {"nl_queries": "Visualize a pie chart, count and group by nationality from the journalist table.", "db_id": "news_report", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Nationality , COUNT(Nationality) FROM journalist GROUP BY Nationality", "binning": ""}, "VQL": "Visualize PIE SELECT Nationality , COUNT(Nationality) FROM journalist GROUP BY Nationality"}, "hardness": "Easy"}, {"nl_queries": "For those records from the products and each product's manufacturer, draw a bar chart about the distribution of founder and the average of code , and group by attribute founder, I want to sort by the the average of code from high to low.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code DESC"}, "hardness": "Hard"}, {"nl_queries": "Find the correlation between average age and experience working length of journalists working on different role type with a scatter plot.", "db_id": "news_report", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT avg(t1.age) , avg(Years_working) FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id = t2.journalist_id GROUP BY Work_Type", "binning": ""}, "VQL": "Visualize SCATTER SELECT avg(t1.age) , avg(Years_working) FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id = t2.journalist_id GROUP BY Work_Type"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about the average of manufacturer over the name , and group by attribute name by a bar chart, could you rank Y in desc order?", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Manufacturer DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Manufacturer DESC"}, "hardness": "Hard"}, {"nl_queries": "List the number of enginners in a stacked bar chart The x-axis is last name and group by skill description, rank bars from low to high order.", "db_id": "assets_maintenance", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT last_name , COUNT(last_name) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY skill_description ,  last_name ORDER BY last_name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT last_name , COUNT(last_name) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY skill_description ,  last_name ORDER BY last_name ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, give me the comparison about employee_id over the phone_number by a bar chart, rank from low to high by the x axis.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT PHONE_NUMBER , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY PHONE_NUMBER ASC", "binning": ""}, "VQL": "Visualize BAR SELECT PHONE_NUMBER , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY PHONE_NUMBER ASC"}, "hardness": "Medium"}, {"nl_queries": "Visualize a bar chart about the distribution of All_Home and the average of School_ID , and group by attribute All_Home, display X from low to high order.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Home , AVG(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Home , AVG(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC"}, "hardness": "Medium"}, {"nl_queries": "how many registed students do each course have? List course name and the number of their registered students?, and I want to show from low to high by the y-axis.", "db_id": "student_assessment", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT course_name , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT course_name , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id ORDER BY count(*) ASC"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, find  headquarter and the sum of price , and group by attribute headquarter, and visualize them by a bar chart.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Headquarter , SUM(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter", "binning": ""}, "VQL": "Visualize BAR SELECT Headquarter , SUM(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter"}, "hardness": "Medium"}, {"nl_queries": "List all customer status codes and the number of customers having each status code in a bar chart.", "db_id": "driving_school", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT customer_status_code , count(*) FROM Customers GROUP BY customer_status_code", "binning": ""}, "VQL": "Visualize BAR SELECT customer_status_code , count(*) FROM Customers GROUP BY customer_status_code"}, "hardness": "Easy"}, {"nl_queries": "Bar chart x axis acc road y axis total number of school id, order in descending by the total number of school id.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Road , SUM(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY SUM(School_ID) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Road , SUM(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY SUM(School_ID) DESC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about the average of price over the  name , and group by attribute name by a bar chart.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name"}, "hardness": "Medium"}, {"nl_queries": "Give me the names and prices of furnitures which some companies are manufacturing with a bar chart, and I want to display by the names in descending.", "db_id": "manufacturer", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , Price_in_Dollar FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID = t2.Furniture_ID ORDER BY Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , Price_in_Dollar FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID = t2.Furniture_ID ORDER BY Name DESC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who was hired before 2002-06-21, return a bar chart about the distribution of hire_date and the sum of manager_id bin hire_date by time, order by the Y in descending.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(MANAGER_ID) DESC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "Show me about the distribution of All_Home and the amount of All_Home , and group by attribute All_Home in a bar chart, and could you order by the y-axis from low to high?", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home ORDER BY COUNT(All_Home) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home ORDER BY COUNT(All_Home) ASC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, visualize a line chart about the change of commission_pct over hire_date , and show by the HIRE_DATE in asc.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC"}, "hardness": "Medium"}, {"nl_queries": "For all storms with at least 1 death, compare the total number of deaths by dates_active attribute, and list in descending by the Y-axis.", "db_id": "storm_record", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Dates_active , Number_Deaths FROM storm WHERE number_deaths >= 1 ORDER BY Number_Deaths DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Dates_active , Number_Deaths FROM storm WHERE number_deaths >= 1 ORDER BY Number_Deaths DESC"}, "hardness": "Medium"}, {"nl_queries": "What is the average rating of songs for each language Plot them as bar chart, and could you list from high to low by the total number?", "db_id": "music_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY avg(rating) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY avg(rating) DESC"}, "hardness": "Medium"}, {"nl_queries": "How many students live in each city? Show a bar chart.", "db_id": "dorm_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT city_code , count(*) FROM student GROUP BY city_code", "binning": ""}, "VQL": "Visualize BAR SELECT city_code , count(*) FROM student GROUP BY city_code"}, "hardness": "Easy"}, {"nl_queries": "How about grouping and counting the district for visualizing a pie chart?", "db_id": "phone_market", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT District , COUNT(District) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY District", "binning": ""}, "VQL": "Visualize PIE SELECT District , COUNT(District) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY District"}, "hardness": "Medium"}, {"nl_queries": "For those employees who did not have any job in the past, give me the comparison about the sum of department_id over the job_id , and group by attribute job_id, list in desc by the names.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY JOB_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY JOB_ID DESC"}, "hardness": "Hard"}, {"nl_queries": "Compare the number of items in each color scheme using a bar chart.", "db_id": "mountain_photos", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT color , COUNT(color) FROM photos GROUP BY color", "binning": ""}, "VQL": "Visualize BAR SELECT color , COUNT(color) FROM photos GROUP BY color"}, "hardness": "Easy"}, {"nl_queries": "For those employees who was hired before 2002-06-21, find  hire_date and the average of salary bin hire_date by time, and visualize them by a bar chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21'", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH"}, "hardness": "Medium"}, {"nl_queries": "Show me about the distribution of meter_200 and the amount of meter_200 , and group by attribute meter_200 in a bar chart, order bars in asc order.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_200 , COUNT(meter_200) FROM swimmer GROUP BY meter_200 ORDER BY meter_200 ASC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_200 , COUNT(meter_200) FROM swimmer GROUP BY meter_200 ORDER BY meter_200 ASC"}, "hardness": "Medium"}, {"nl_queries": "For the attribute  ACC_Regular_Season and  ACC_Percent, show their proportion by a pie chart.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match", "binning": ""}, "VQL": "Visualize PIE SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match"}, "hardness": "Easy"}, {"nl_queries": "What are the id of each employee and the number of document destroyed by that employee. Visualize by scatter chart.", "db_id": "cre_Doc_Tracking_DB", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Destroyed_by_Employee_ID , count(*) FROM Documents_to_be_destroyed GROUP BY Destroyed_by_Employee_ID", "binning": ""}, "VQL": "Visualize SCATTER SELECT Destroyed_by_Employee_ID , count(*) FROM Documents_to_be_destroyed GROUP BY Destroyed_by_Employee_ID"}, "hardness": "Easy"}, {"nl_queries": "What is the average cloud cover rates of the dates (bin into weekdays interval) that had the top 5 cloud cover rates? You can draw me a bar chart for this purpose, rank by the mean cloud cover in asc.", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date , AVG(cloud_cover) FROM weather  ORDER BY AVG(cloud_cover) ASC", "binning": "BIN date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date , AVG(cloud_cover) FROM weather  ORDER BY AVG(cloud_cover) ASC BIN date BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "Give me a bar chart to show the number of names of high schoolers who have likes, and sort by the X in descending please.", "db_id": "network_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , COUNT(name) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY name ORDER BY name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT name , COUNT(name) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY name ORDER BY name DESC"}, "hardness": "Hard"}, {"nl_queries": "Visualize a bar chart about the distribution of Start_from and the sum of Shop_ID bin start_from by weekday, and sort Y in descending order.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Start_from , SUM(Shop_ID) FROM hiring  ORDER BY SUM(Shop_ID) DESC", "binning": "BIN Start_from BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Start_from , SUM(Shop_ID) FROM hiring  ORDER BY SUM(Shop_ID) DESC BIN Start_from BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "What are the number of the first names of all students in Smith Hall?", "db_id": "dorm_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Fname , COUNT(Fname) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.dorm_name = 'Smith Hall' GROUP BY Fname", "binning": ""}, "VQL": "Visualize PIE SELECT Fname , COUNT(Fname) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.dorm_name = 'Smith Hall' GROUP BY Fname"}, "hardness": "Hard"}, {"nl_queries": "Visualize the general trend of the average of shop id over the start from.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Start_from , AVG(Shop_ID) FROM hiring", "binning": "BIN Start_from BY YEAR"}, "VQL": "Visualize LINE SELECT Start_from , AVG(Shop_ID) FROM hiring BIN Start_from BY YEAR"}, "hardness": "Easy"}, {"nl_queries": "How many events have each participants attended? Show their average number by each participant type code using a bar chart, and list by the x axis in desc.", "db_id": "local_govt_in_alabama", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Participant_Type_Code , AVG(count(*)) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID GROUP BY T1.Participant_Type_Code ORDER BY T1.Participant_Type_Code DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Participant_Type_Code , AVG(count(*)) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID GROUP BY T1.Participant_Type_Code ORDER BY T1.Participant_Type_Code DESC"}, "hardness": "Hard"}, {"nl_queries": "Draw a scatter chart about the correlation between  School_ID and  All_Games_Percent .", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT School_ID , All_Games_Percent FROM basketball_match", "binning": ""}, "VQL": "Visualize SCATTER SELECT School_ID , All_Games_Percent FROM basketball_match"}, "hardness": "Easy"}, {"nl_queries": "Show me the trend about the average of Shop_ID over  Start_from bin start_from by time with a line chart.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Start_from , AVG(Shop_ID) FROM hiring", "binning": "BIN Start_from BY YEAR"}, "VQL": "Visualize LINE SELECT Start_from , AVG(Shop_ID) FROM hiring BIN Start_from BY YEAR"}, "hardness": "Easy"}, {"nl_queries": "Find  date_address_to and the sum of monthly_rental bin date_address_to by weekday, and visualize them by a bar chart.", "db_id": "behavior_monitoring", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC", "binning": "BIN date_address_to BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "Bar chart x axis meter 500 y axis meter_100, sort y-axis in ascending order.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_500 , meter_100 FROM swimmer ORDER BY meter_100 ASC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_500 , meter_100 FROM swimmer ORDER BY meter_100 ASC"}, "hardness": "Easy"}, {"nl_queries": "Show the number of accounts opened in each day Bin the account open day by weekday and group by other account details in a stacked bar chart, I want to show the number of date account opened in descending order.", "db_id": "customers_and_invoices", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_account_opened , COUNT(date_account_opened) FROM Accounts GROUP BY other_account_details ORDER BY COUNT(date_account_opened) DESC", "binning": "BIN date_account_opened BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_account_opened , COUNT(date_account_opened) FROM Accounts GROUP BY other_account_details ORDER BY COUNT(date_account_opened) DESC BIN date_account_opened BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, draw a bar chart about the distribution of hire_date and the sum of employee_id bin hire_date by weekday, and show by the Y in desc.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) DESC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, give me the comparison about the sum of employee_id over the hire_date bin hire_date by time, and sort in desc by the Y-axis please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(EMPLOYEE_ID) DESC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "Show me about the distribution of ACC_Road and the sum of Team_ID , and group by attribute ACC_Road in a bar chart, show from low to high by the Y.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Road , SUM(Team_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY SUM(Team_ID) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Road , SUM(Team_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY SUM(Team_ID) ASC"}, "hardness": "Medium"}, {"nl_queries": "plot scatter on how many order items correspond to each order id?", "db_id": "customers_and_invoices", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT order_id , count(*) FROM Order_items GROUP BY order_id", "binning": ""}, "VQL": "Visualize SCATTER SELECT order_id , count(*) FROM Order_items GROUP BY order_id"}, "hardness": "Easy"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, give me the comparison about employee_id over the first_name by a bar chart, show in ascending by the X-axis.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT FIRST_NAME , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY FIRST_NAME ASC", "binning": ""}, "VQL": "Visualize BAR SELECT FIRST_NAME , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY FIRST_NAME ASC"}, "hardness": "Medium"}, {"nl_queries": "Show the title and the lowest rating among all movies in a bar chart.", "db_id": "movie_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT title , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY title", "binning": ""}, "VQL": "Visualize BAR SELECT title , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY title"}, "hardness": "Easy"}, {"nl_queries": "Bar chart x axis product name y axis how many product name, I want to show in ascending by the Product_Name.", "db_id": "solvency_ii", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Product_Name , COUNT(Product_Name) FROM Products GROUP BY Product_Name ORDER BY Product_Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Product_Name , COUNT(Product_Name) FROM Products GROUP BY Product_Name ORDER BY Product_Name ASC"}, "hardness": "Medium"}, {"nl_queries": "Show how many cinemas open for each year in a line chart, and rank by the x-axis in asc.", "db_id": "cinema", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Openning_year , COUNT(Openning_year) FROM cinema  ORDER BY Openning_year ASC", "binning": "BIN Openning_year BY YEAR"}, "VQL": "Visualize LINE SELECT Openning_year , COUNT(Openning_year) FROM cinema  ORDER BY Openning_year ASC BIN Openning_year BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "What other details can you tell me about students in reverse alphabetical order, and count them by a bar chart", "db_id": "student_transcripts_tracking", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT other_student_details , COUNT(other_student_details) FROM Students GROUP BY other_student_details ORDER BY other_student_details DESC", "binning": ""}, "VQL": "Visualize BAR SELECT other_student_details , COUNT(other_student_details) FROM Students GROUP BY other_student_details ORDER BY other_student_details DESC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, return a scatter chart about the correlation between  code and  revenue , and group by attribute founder.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder", "binning": ""}, "VQL": "Visualize SCATTER SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder"}, "hardness": "Medium"}, {"nl_queries": "What are the names and the accumulated prices of all products in the store. Plot them as a bar chart.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , SUM(Price) FROM products GROUP BY Name", "binning": ""}, "VQL": "Visualize BAR SELECT Name , SUM(Price) FROM products GROUP BY Name"}, "hardness": "Easy"}, {"nl_queries": "Return a bar chart about the distribution of Team_Name and School_ID , could you order by the X-axis in ascending?", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Team_Name , School_ID FROM basketball_match ORDER BY Team_Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY Team_Name ASC"}, "hardness": "Easy"}, {"nl_queries": "What are the name and primarily affiliated department name of each physician?", "db_id": "hospital_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T3.Name , COUNT(T3.Name) FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID WHERE T2.PrimaryAffiliation = 1 GROUP BY T3.Name", "binning": ""}, "VQL": "Visualize BAR SELECT T3.Name , COUNT(T3.Name) FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID WHERE T2.PrimaryAffiliation = 1 GROUP BY T3.Name"}, "hardness": "Hard"}, {"nl_queries": "For each classroom with at least 2 classes, how many classes are offered, list from high to low by the y axis please.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT CLASS_ROOM , count(*) FROM CLASS GROUP BY class_room ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT CLASS_ROOM , count(*) FROM CLASS GROUP BY class_room ORDER BY count(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "Bar chart of acc_percent from each all neutral, and show in ascending by the Y please.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC"}, "hardness": "Easy"}, {"nl_queries": "Show me a bar chart for what are the names and ids of all makers with more than 3 models?, show FullName in ascending order.", "db_id": "car_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT FullName , Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker ORDER BY FullName ASC", "binning": ""}, "VQL": "Visualize BAR SELECT FullName , Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker ORDER BY FullName ASC"}, "hardness": "Medium"}, {"nl_queries": "plot scatter on how many companies operates airlines in each airport?", "db_id": "flight_company", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT T1.id , count(*) FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id JOIN airport AS T3 ON T2.airport_id = T3.id GROUP BY T3.id", "binning": ""}, "VQL": "Visualize SCATTER SELECT T1.id , count(*) FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id JOIN airport AS T3 ON T2.airport_id = T3.id GROUP BY T3.id"}, "hardness": "Medium"}, {"nl_queries": "A bar chart about how many students are enrolled in colleges that have student accepted during tryouts, and in which states are those colleges?, order enr in asc order.", "db_id": "soccer_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT state , enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.decision = 'yes' ORDER BY enr ASC", "binning": ""}, "VQL": "Visualize BAR SELECT state , enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.decision = 'yes' ORDER BY enr ASC"}, "hardness": "Hard"}, {"nl_queries": "Show all payment method codes and the number of orders for each code Show bar chart, order from high to low by the Y.", "db_id": "cre_Drama_Workshop_Groups", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "Give me the comparison about the average of meter_100 over the meter_200 , and group by attribute meter_200, and order in ascending by the meter_200.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_200 , AVG(meter_100) FROM swimmer GROUP BY meter_200 ORDER BY meter_200 ASC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_200 , AVG(meter_100) FROM swimmer GROUP BY meter_200 ORDER BY meter_200 ASC"}, "hardness": "Medium"}, {"nl_queries": "Show the facility codes of apartments with more than 4 bedrooms, and count them by a bar chart, list facility_code from high to low order.", "db_id": "apartment_rentals", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT facility_code , COUNT(facility_code) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.bedroom_count > 4 GROUP BY facility_code ORDER BY facility_code DESC", "binning": ""}, "VQL": "Visualize BAR SELECT facility_code , COUNT(facility_code) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.bedroom_count > 4 GROUP BY facility_code ORDER BY facility_code DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "A scatter chart showing the correlation between age and purchase time for each coffee shop.", "db_id": "coffee_shop", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Time_of_purchase , Age FROM member GROUP BY Address ORDER BY Time_of_purchase", "binning": ""}, "VQL": "Visualize SCATTER SELECT Time_of_purchase , Age FROM member GROUP BY Address ORDER BY Time_of_purchase"}, "hardness": "Medium"}, {"nl_queries": "Show all card type codes and the number of cards in each type Plot them as bar chart, could you rank from high to low by the names?", "db_id": "customers_card_transactions", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT card_type_code , count(*) FROM Customers_cards GROUP BY card_type_code ORDER BY card_type_code DESC", "binning": ""}, "VQL": "Visualize BAR SELECT card_type_code , count(*) FROM Customers_cards GROUP BY card_type_code ORDER BY card_type_code DESC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, return a bar chart about the distribution of  name and  manufacturer , and group by attribute headquarter.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter , T1.Name", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter , T1.Name"}, "hardness": "Medium"}, {"nl_queries": "A bar chart for what are the number of the descriptions of the categories that products with product descriptions that contain the letter t are in?, and display by the y-axis from high to low.", "db_id": "products_gen_characteristics", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT product_category_description , COUNT(product_category_description) FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code = T2.product_category_code WHERE T2.product_description LIKE '%t%' GROUP BY product_category_description ORDER BY COUNT(product_category_description) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT product_category_description , COUNT(product_category_description) FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code = T2.product_category_code WHERE T2.product_description LIKE '%t%' GROUP BY product_category_description ORDER BY COUNT(product_category_description) DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "Compare the total number of different ranks using a bar graph, and sort from low to high by the Y.", "db_id": "ship_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank ORDER BY COUNT(Rank) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank ORDER BY COUNT(Rank) ASC"}, "hardness": "Medium"}, {"nl_queries": "A bar chart for what are the number of the names of all the Japanese constructors that have earned more than 5 points?, rank in desc by the Y-axis.", "db_id": "formula_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name ORDER BY COUNT(name) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name ORDER BY COUNT(name) DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "Show me the average of capacity by openning year in a histogram", "db_id": "cinema", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Openning_year , AVG(Capacity) FROM cinema GROUP BY Openning_year", "binning": ""}, "VQL": "Visualize BAR SELECT Openning_year , AVG(Capacity) FROM cinema GROUP BY Openning_year"}, "hardness": "Easy"}, {"nl_queries": "For those employees who was hired before 2002-06-21, give me the comparison about the average of department_id over the job_id , and group by attribute job_id, order in desc by the y-axis.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(DEPARTMENT_ID) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(DEPARTMENT_ID) DESC"}, "hardness": "Hard"}, {"nl_queries": "How many faculty members does each building have? List the result with the name of the building with a bar chart, and display Y in ascending order.", "db_id": "activity_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Building , count(*) FROM Faculty GROUP BY building ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Building , count(*) FROM Faculty GROUP BY building ORDER BY count(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "For all employees who have the letters D or S in their first name, return a bar chart about the distribution of job_id and the average of employee_id , and group by attribute job_id, and rank in asc by the y-axis.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "Find Team_Name and All_Games_Percent , and visualize them by a bar chart, and order by the x axis from high to low.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Team_Name , All_Games_Percent FROM basketball_match ORDER BY Team_Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Team_Name , All_Games_Percent FROM basketball_match ORDER BY Team_Name DESC"}, "hardness": "Easy"}, {"nl_queries": "Show the number of documents in different ending date Bin ending date by weekday and group by location code with a stacked bar chart, order by the Y in ascending.", "db_id": "cre_Doc_Tracking_DB", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Location_Code ORDER BY COUNT(Date_in_Locaton_To) ASC", "binning": "BIN Date_in_Locaton_To BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Location_Code ORDER BY COUNT(Date_in_Locaton_To) ASC BIN Date_in_Locaton_To BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "Please tell the revenues of the companies with the highest revenues in each headquarter city, and could you sort by the X in asc?", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Headquarter , max(revenue) FROM manufacturers GROUP BY Headquarter ORDER BY Headquarter ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Headquarter , max(revenue) FROM manufacturers GROUP BY Headquarter ORDER BY Headquarter ASC"}, "hardness": "Medium"}, {"nl_queries": "What are the number of the titles of all movies that have rating star is between 3 and 5?, list by the names from low to high.", "db_id": "movie_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT title , COUNT(title) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T1.stars BETWEEN 3 AND 5 GROUP BY title ORDER BY title ASC", "binning": ""}, "VQL": "Visualize BAR SELECT title , COUNT(title) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T1.stars BETWEEN 3 AND 5 GROUP BY title ORDER BY title ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "Visualize a bar chart for what are the nationalities and their average ages of journalists?", "db_id": "news_report", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nationality , AVG(Age) FROM journalist GROUP BY Nationality", "binning": ""}, "VQL": "Visualize BAR SELECT Nationality , AVG(Age) FROM journalist GROUP BY Nationality"}, "hardness": "Easy"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, draw a bar chart about the distribution of email and employee_id , rank from high to low by the total number please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT EMAIL , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY EMPLOYEE_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT EMAIL , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY EMPLOYEE_ID DESC"}, "hardness": "Medium"}, {"nl_queries": "What are the date and mean humidity for the top 3 days with the largest max gust speeds? Return me a bar chart.", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date , mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3", "binning": ""}, "VQL": "Visualize BAR SELECT date , mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3"}, "hardness": "Medium"}, {"nl_queries": "What are the countries of mountains with height bigger than 5000, and count them by a bar chart, and could you show in ascending by the bars?", "db_id": "climbing", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country ASC"}, "hardness": "Hard"}, {"nl_queries": "A bar chart shows the distribution of  All_Road and  ACC_Percent .", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Road , ACC_Percent FROM basketball_match", "binning": ""}, "VQL": "Visualize BAR SELECT All_Road , ACC_Percent FROM basketball_match"}, "hardness": "Easy"}, {"nl_queries": "Plot a scatter chart, gameid by sum hours played.", "db_id": "game_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT GameID , sum(hours_played) FROM Plays_games GROUP BY gameid", "binning": ""}, "VQL": "Visualize SCATTER SELECT GameID , sum(hours_played) FROM Plays_games GROUP BY gameid"}, "hardness": "Easy"}, {"nl_queries": "Find each target user's name and average trust score Visualize by bar chart, and sort by the x-axis from high to low.", "db_id": "epinions_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , avg(trust) FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.target_u_id GROUP BY T2.target_u_id ORDER BY name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT name , avg(trust) FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.target_u_id GROUP BY T2.target_u_id ORDER BY name DESC"}, "hardness": "Hard"}, {"nl_queries": "Visualize a bar chart about the distribution of Start_from and the average of Shop_ID , and group by attribute Is_full_time and bin start_from by weekday, and I want to show by the y-axis from low to high please.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Start_from , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY AVG(Shop_ID) ASC", "binning": "BIN Start_from BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Start_from , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY AVG(Shop_ID) ASC BIN Start_from BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "what is the id and trade name of the medicines can interact with at least 3 enzymes?, and could you order in ascending by the Y-axis?", "db_id": "medicine_enzyme_interaction", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Trade_Name , id FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id ORDER BY id ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Trade_Name , id FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id ORDER BY id ASC"}, "hardness": "Medium"}, {"nl_queries": "Let the shortest duration as bar chart's X-axis and the most poorly rated song for each genre as the Y, and order X-axis in descending order.", "db_id": "music_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT min(T1.duration) , min(T2.rating) FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id GROUP BY min(T1.duration) ORDER BY min(T1.duration) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT min(T1.duration) , min(T2.rating) FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id GROUP BY min(T1.duration) ORDER BY min(T1.duration) DESC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who did not have any job in the past, visualize a bar chart about the distribution of hire_date and the average of department_id bin hire_date by weekday, and sort by the the average of department id from high to low.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(DEPARTMENT_ID) DESC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(DEPARTMENT_ID) DESC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "Show the proportion of the number of customers for each payment method code in a bar chart.", "db_id": "customers_and_products_contacts", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT payment_method_code , COUNT(payment_method_code) FROM customers GROUP BY payment_method_code ORDER BY customer_number DESC", "binning": ""}, "VQL": "Visualize BAR SELECT payment_method_code , COUNT(payment_method_code) FROM customers GROUP BY payment_method_code ORDER BY customer_number DESC"}, "hardness": "Medium"}, {"nl_queries": "Can you draw the trend of sum budget in billions over the creation?, I want to rank x axis from low to high order.", "db_id": "department_management", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Creation , SUM(Budget_in_Billions) FROM department GROUP BY Creation ORDER BY Creation ASC", "binning": ""}, "VQL": "Visualize LINE SELECT Creation , SUM(Budget_in_Billions) FROM department GROUP BY Creation ORDER BY Creation ASC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, show me about the correlation between  commission_pct and  department_id  in a scatter chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT COMMISSION_PCT , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)", "binning": ""}, "VQL": "Visualize SCATTER SELECT COMMISSION_PCT , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)"}, "hardness": "Extra Hard"}, {"nl_queries": "Show the number of courses for each course description in a stacked bar chart. The x-axis is course description and group by instructor's first name.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT CRS_DESCRIPTION , COUNT(CRS_DESCRIPTION) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num GROUP BY EMP_FNAME ,  CRS_DESCRIPTION", "binning": ""}, "VQL": "Visualize BAR SELECT CRS_DESCRIPTION , COUNT(CRS_DESCRIPTION) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num GROUP BY EMP_FNAME ,  CRS_DESCRIPTION"}, "hardness": "Hard"}, {"nl_queries": "What is the average cloud cover rates of the dates (bin into year interval) that had the top 5 cloud cover rates? You can draw me a bar chart for this purpose.", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date , AVG(cloud_cover) FROM weather", "binning": "BIN date BY YEAR"}, "VQL": "Visualize BAR SELECT date , AVG(cloud_cover) FROM weather BIN date BY YEAR"}, "hardness": "Easy"}, {"nl_queries": "Give the proportion of what is the project id and detail for the project with at least two documents?", "db_id": "cre_Docs_and_Epenses", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id", "binning": ""}, "VQL": "Visualize PIE SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id"}, "hardness": "Easy"}, {"nl_queries": "Bar chart of department_id from each first name, and sort from low to high by the x axis.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT FIRST_NAME , DEPARTMENT_ID FROM employees ORDER BY FIRST_NAME ASC", "binning": ""}, "VQL": "Visualize BAR SELECT FIRST_NAME , DEPARTMENT_ID FROM employees ORDER BY FIRST_NAME ASC"}, "hardness": "Easy"}, {"nl_queries": "A bar chart for showing the number of the countries that have managers of age above 50 or below 46.", "db_id": "railway", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country", "binning": ""}, "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country"}, "hardness": "Hard"}, {"nl_queries": "Show the number of documents in each day for all documents on project with details 'Graph Database project' and bin document date by year interval and group by document name with a group line chart, I want to list in descending by the x-axis.", "db_id": "cre_Docs_and_Epenses", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Document_Date , COUNT(Document_Date) FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'Graph Database project' GROUP BY Document_Name ORDER BY Document_Date DESC", "binning": "BIN Document_Date BY YEAR"}, "VQL": "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'Graph Database project' GROUP BY Document_Name ORDER BY Document_Date DESC BIN Document_Date BY YEAR"}, "hardness": "Extra Hard"}, {"nl_queries": "A bar chart for listing the number of the name of all playlist, and list x axis from low to high order.", "db_id": "store_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY name ASC"}, "hardness": "Medium"}, {"nl_queries": "Line chart, let hire data as X and salary as Y, and filter for employees without the letter M in their first name, show HIRE_DATE in descending order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , SALARY FROM employees WHERE first_name NOT LIKE '%M%' ORDER BY HIRE_DATE DESC", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE first_name NOT LIKE '%M%' ORDER BY HIRE_DATE DESC"}, "hardness": "Hard"}, {"nl_queries": "Which parts have more than 2 faults? Show the part name and id by a pie chart.", "db_id": "assets_maintenance", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT T1.part_name , T1.part_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id", "binning": ""}, "VQL": "Visualize PIE SELECT T1.part_name , T1.part_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id"}, "hardness": "Easy"}, {"nl_queries": "For those records from the products and each product's manufacturer, find  name and the average of code , and group by attribute name, and visualize them by a bar chart.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name"}, "hardness": "Medium"}, {"nl_queries": "Please give me a pie chart to show the proportion of the home city of all drivers ", "db_id": "school_bus", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Home_city , COUNT(Home_city) FROM driver GROUP BY Home_city", "binning": ""}, "VQL": "Visualize PIE SELECT Home_city , COUNT(Home_city) FROM driver GROUP BY Home_city"}, "hardness": "Easy"}, {"nl_queries": "Return a bar chart on what are different nationalities of people and the corresponding number of people from each nation?, display bar from high to low order.", "db_id": "poker_player", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY Nationality DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY Nationality DESC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who did not have any job in the past, give me the comparison about the sum of employee_id over the  hire_date bin hire_date by weekday by a bar chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "Show me about the distribution of meter_200 and the average of ID , and group by attribute meter_200 in a bar chart, order total number in asc order.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_200 , AVG(ID) FROM swimmer GROUP BY meter_200 ORDER BY AVG(ID) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_200 , AVG(ID) FROM swimmer GROUP BY meter_200 ORDER BY AVG(ID) ASC"}, "hardness": "Medium"}, {"nl_queries": "Please return me a bar chart show what are the average smallest rating of different movie title?, and sort by the x axis in descending.", "db_id": "movie_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.title , AVG(min(T1.stars)) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T2.title ORDER BY T2.title DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.title , AVG(min(T1.stars)) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T2.title ORDER BY T2.title DESC"}, "hardness": "Hard"}, {"nl_queries": "Bar graph to show mean school id from different all home", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Home , AVG(School_ID) FROM basketball_match GROUP BY All_Home", "binning": ""}, "VQL": "Visualize BAR SELECT All_Home , AVG(School_ID) FROM basketball_match GROUP BY All_Home"}, "hardness": "Easy"}, {"nl_queries": "Show the average of account details for different statement details in a bar chart, and show by the names from low to high.", "db_id": "cre_Docs_and_Epenses", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Statement_Details , AVG(Account_Details) FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id = T2.statement_id GROUP BY Statement_Details ORDER BY Statement_Details ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Statement_Details , AVG(Account_Details) FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id = T2.statement_id GROUP BY Statement_Details ORDER BY Statement_Details ASC"}, "hardness": "Hard"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, give me the comparison about the average of manager_id over the job_id , and group by attribute job_id by a bar chart, and could you order bar in asc order?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "Show all the planned delivery dates and bin by year in a line chart, could you rank by the x-axis in ascending please?", "db_id": "cre_Drama_Workshop_Groups", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS  ORDER BY Planned_Delivery_Date ASC", "binning": "BIN Planned_Delivery_Date BY YEAR"}, "VQL": "Visualize LINE SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS  ORDER BY Planned_Delivery_Date ASC BIN Planned_Delivery_Date BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "For those employees who did not have any job in the past, a scatter chart shows the correlation between  manager_id and  department_id .", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT MANAGER_ID , DEPARTMENT_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)", "binning": ""}, "VQL": "Visualize SCATTER SELECT MANAGER_ID , DEPARTMENT_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)"}, "hardness": "Easy"}, {"nl_queries": "Draw a scatter chart about the correlation between  School_ID and  All_Games_Percent , and group by attribute Team_Name.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY Team_Name", "binning": ""}, "VQL": "Visualize SCATTER SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY Team_Name"}, "hardness": "Easy"}, {"nl_queries": "Return a bar chart on how many departments are in each school?, and list by the count(DISTINCTdept_name) in ascending.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) ASC"}, "hardness": "Medium"}, {"nl_queries": "Show me about the distribution of  Is_full_time and the average of Employee_ID , and group by attribute Is_full_time in a bar chart.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Is_full_time , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time", "binning": ""}, "VQL": "Visualize BAR SELECT Is_full_time , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time"}, "hardness": "Easy"}, {"nl_queries": "For all employees who have the letters D or S in their first name, show me about the correlation between  salary and  commission_pct  in a scatter chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT SALARY , COMMISSION_PCT FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'", "binning": ""}, "VQL": "Visualize SCATTER SELECT SALARY , COMMISSION_PCT FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'"}, "hardness": "Hard"}, {"nl_queries": "What are the number of dates of birth of all the guests whose gender is \"Male\"?", "db_id": "apartment_rentals", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"", "binning": "BIN date_of_birth BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\" BIN date_of_birth BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "Stack bar chart of school_id vs All_Home based on acc road, and display in descending by the X.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Road , School_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY ACC_Road DESC", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Road , School_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY ACC_Road DESC"}, "hardness": "Medium"}, {"nl_queries": "Give me a histogram for which parts have more than 2 faults? Show the part name and id, and display from high to low by the part_id.", "db_id": "assets_maintenance", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.part_name , T1.part_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id ORDER BY T1.part_id DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.part_name , T1.part_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id ORDER BY T1.part_id DESC"}, "hardness": "Medium"}, {"nl_queries": "Give me the comparison about the average of Weight over the Sex , and group by attribute Sex by a bar chart, and show by the Y-axis from low to high.", "db_id": "candidate_poll", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Sex , AVG(Weight) FROM people GROUP BY Sex ORDER BY AVG(Weight) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Sex , AVG(Weight) FROM people GROUP BY Sex ORDER BY AVG(Weight) ASC"}, "hardness": "Medium"}, {"nl_queries": "Create a bar chart showing the number of date claim made across date claim made, I want to sort in descending by the how many date claim made please.", "db_id": "insurance_policies", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements  ORDER BY COUNT(Date_Claim_Made) DESC", "binning": "BIN Date_Claim_Made BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements  ORDER BY COUNT(Date_Claim_Made) DESC BIN Date_Claim_Made BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "Find the total number of tours for each ranking date. ", "db_id": "wta_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT sum(tours) , ranking_date FROM rankings GROUP BY ranking_date", "binning": ""}, "VQL": "Visualize SCATTER SELECT sum(tours) , ranking_date FROM rankings GROUP BY ranking_date"}, "hardness": "Easy"}, {"nl_queries": "List the number of dogs each owner has in a bar chart that groups by owner's last name, and I want to list in descending by the y axis.", "db_id": "dog_kennels", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT last_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name ORDER BY COUNT(last_name) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT last_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name ORDER BY COUNT(last_name) DESC"}, "hardness": "Hard"}, {"nl_queries": "Show the number of train names in a bar chart, list by the x-axis in desc.", "db_id": "station_weather", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , COUNT(name) FROM train GROUP BY name ORDER BY name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT name , COUNT(name) FROM train GROUP BY name ORDER BY name DESC"}, "hardness": "Medium"}, {"nl_queries": "Which ministers are not a part of the Progress Party, and count them by a bar chart", "db_id": "party_people", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister", "binning": ""}, "VQL": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about  manufacturer over the  name , and group by attribute name by a bar chart.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name"}, "hardness": "Medium"}, {"nl_queries": "How many courses for each teacher? Show me a stacked bar chart. The x-axis is teacher's first name and group by course description.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num GROUP BY CRS_DESCRIPTION ,  EMP_FNAME", "binning": ""}, "VQL": "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num GROUP BY CRS_DESCRIPTION ,  EMP_FNAME"}, "hardness": "Hard"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, visualize a bar chart about the distribution of job_id and the sum of manager_id , and group by attribute job_id, I want to sort by the Y in descending.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "Visualize the title and and the total star rating of the movie using a bar chart, could you display bars in descending order?", "db_id": "movie_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT title , SUM(stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY title ORDER BY title DESC", "binning": ""}, "VQL": "Visualize BAR SELECT title , SUM(stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY title ORDER BY title DESC"}, "hardness": "Hard"}, {"nl_queries": "Just list the employee id and the management id using a scatter chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT T1.EMPLOYEE_ID , T1.MANAGER_ID FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T1.employee_id = T2.manager_id", "binning": ""}, "VQL": "Visualize SCATTER SELECT T1.EMPLOYEE_ID , T1.MANAGER_ID FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T1.employee_id = T2.manager_id"}, "hardness": "Medium"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, draw a line chart about the change of commission_pct over hire_date , rank x axis in ascending order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC"}, "hardness": "Hard"}, {"nl_queries": "Select the names of all the products in the store, and count them by a bar chart, could you order X-axis in asc order?", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name ASC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who did not have any job in the past, give me the comparison about the sum of department_id over the job_id , and group by attribute job_id, and I want to rank in asc by the total number.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) ASC"}, "hardness": "Hard"}, {"nl_queries": "Bar chart x axis meter 600 y axis id, sort X-axis in descending order.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_600 , ID FROM swimmer ORDER BY meter_600 DESC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_600 , ID FROM swimmer ORDER BY meter_600 DESC"}, "hardness": "Easy"}, {"nl_queries": "For those employees who was hired before 2002-06-21, draw a bar chart about the distribution of hire_date and the average of department_id bin hire_date by time, and order by the y-axis in desc.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(DEPARTMENT_ID) DESC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(DEPARTMENT_ID) DESC BIN HIRE_DATE BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "Give the name of each department and the number of employees in each Plot them as bar chart, show by the Y-axis in descending please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT DEPARTMENT_NAME , COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id GROUP BY T2.department_name ORDER BY COUNT(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT DEPARTMENT_NAME , COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id GROUP BY T2.department_name ORDER BY COUNT(*) DESC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, a bar chart shows the distribution of hire_date and the sum of manager_id bin hire_date by weekday, show y axis from low to high order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(MANAGER_ID) ASC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(MANAGER_ID) ASC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "A bar chart about the number of end dates for incidents with incident type code \"NOISE\" and bin by month.", "db_id": "behavior_monitoring", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_incident_end , COUNT(date_incident_end) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\"", "binning": "BIN date_incident_end BY MONTH"}, "VQL": "Visualize BAR SELECT date_incident_end , COUNT(date_incident_end) FROM Behavior_Incident WHERE incident_type_code = \"NOISE\" BIN date_incident_end BY MONTH"}, "hardness": "Medium"}, {"nl_queries": "How many faculty members do we have for each gender? Draw a bar chart.", "db_id": "activity_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Sex , count(*) FROM Faculty GROUP BY Sex", "binning": ""}, "VQL": "Visualize BAR SELECT Sex , count(*) FROM Faculty GROUP BY Sex"}, "hardness": "Medium"}, {"nl_queries": "Draw a bar chart for how many different locations does each school have?, I want to list X-axis in ascending order.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department ORDER BY SCHOOL_CODE ASC", "binning": ""}, "VQL": "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department ORDER BY SCHOOL_CODE ASC"}, "hardness": "Medium"}, {"nl_queries": "What are the different parties of representative? Show the party name and the number of representatives in each party, list by the x axis in ascending.", "db_id": "election_representative", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Party , COUNT(*) FROM representative GROUP BY Party ORDER BY Party ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Party , COUNT(*) FROM representative GROUP BY Party ORDER BY Party ASC"}, "hardness": "Medium"}, {"nl_queries": " For those employees whose first name does not contain the letter M, display their average salary by binning the hire date into the day of week interval for visualizing a bar chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE first_name NOT LIKE '%M%'", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE first_name NOT LIKE '%M%' BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "A scatter chart shows the correlation between  Height and  Weight , and group by attribute Sex.", "db_id": "candidate_poll", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Height , Weight FROM people GROUP BY Sex", "binning": ""}, "VQL": "Visualize SCATTER SELECT Height , Weight FROM people GROUP BY Sex"}, "hardness": "Easy"}, {"nl_queries": "Visualize a bar chart about the number of winery of the wines whose price is bigger than 100, sort bars from high to low order please.", "db_id": "wine_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Winery ORDER BY Winery DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Winery ORDER BY Winery DESC"}, "hardness": "Hard"}, {"nl_queries": "What is the highest price of product, grouped by product type? Show a bar chart, list by the maximal product price in desc.", "db_id": "department_store", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code ORDER BY max(product_price) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code ORDER BY max(product_price) DESC"}, "hardness": "Easy"}, {"nl_queries": "Give me a bar chart for the number of year of each year, order by the how many year in ascending.", "db_id": "wine_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Year , COUNT(Year) FROM WINE  ORDER BY COUNT(Year) ASC", "binning": "BIN Year BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Year , COUNT(Year) FROM WINE  ORDER BY COUNT(Year) ASC BIN Year BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "Show me the proportion on what are the last names and ages of the students who are allergic to milk and cat?", "db_id": "allergy_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT LName , Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy = \"Cat\")", "binning": ""}, "VQL": "Visualize PIE SELECT LName , Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy = \"Cat\")"}, "hardness": "Extra Hard"}, {"nl_queries": "Bar chart x axis policy type code y axis the total number, could you list the total number from low to high order please?", "db_id": "insurance_and_eClaims", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Policy_Type_Code , count(*) FROM policies GROUP BY policy_type_code ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Policy_Type_Code , count(*) FROM policies GROUP BY policy_type_code ORDER BY count(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, visualize a scatter chart about the correlation between  commission_pct and  manager_id .", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT COMMISSION_PCT , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)", "binning": ""}, "VQL": "Visualize SCATTER SELECT COMMISSION_PCT , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)"}, "hardness": "Extra Hard"}, {"nl_queries": "For the attribute  All_Neutral and School_ID, show their proportion by a pie chart.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT All_Neutral , School_ID FROM basketball_match", "binning": ""}, "VQL": "Visualize PIE SELECT All_Neutral , School_ID FROM basketball_match"}, "hardness": "Easy"}, {"nl_queries": "Plot the total number by grouped by directed by as a bar graph, sort from high to low by the Y.", "db_id": "cinema", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Directed_by , count(*) FROM film GROUP BY directed_by ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Directed_by , count(*) FROM film GROUP BY directed_by ORDER BY count(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "A pie chart showing the proportion of the smallest enrollment of schools in each state", "db_id": "soccer_2", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT cName , min(enr) FROM college GROUP BY state", "binning": ""}, "VQL": "Visualize PIE SELECT cName , min(enr) FROM college GROUP BY state"}, "hardness": "Easy"}, {"nl_queries": "Show all cities along with the number of drama workshop groups in each city with a bar chart.", "db_id": "cre_Drama_Workshop_Groups", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT City_Town , count(*) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID = T2.Address_ID GROUP BY T1.City_Town", "binning": ""}, "VQL": "Visualize BAR SELECT City_Town , count(*) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID = T2.Address_ID GROUP BY T1.City_Town"}, "hardness": "Medium"}, {"nl_queries": "For all employees who have the letters D or S in their first name, a line chart shows the trend of  manager_id over  hire_date .", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'"}, "hardness": "Hard"}, {"nl_queries": "For those employees who was hired before 2002-06-21, visualize a bar chart about the distribution of  job_id and the sum of manager_id , and group by attribute job_id.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID"}, "hardness": "Medium"}, {"nl_queries": "How many workshops did each author submit to? Return the author name and the number of workshops in a bar chart, rank Y-axis from low to high order.", "db_id": "workshop_paper", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY COUNT(DISTINCT T1.workshop_id) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY COUNT(DISTINCT T1.workshop_id) ASC"}, "hardness": "Medium"}, {"nl_queries": "Show me the minimal weight by sex in a histogram, sort the bars in desc order.", "db_id": "candidate_poll", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Sex , min(weight) FROM people GROUP BY Sex ORDER BY min(weight) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Sex , min(weight) FROM people GROUP BY Sex ORDER BY min(weight) DESC"}, "hardness": "Easy"}, {"nl_queries": "Visualize the general trend of maximal price over the year.", "db_id": "wine_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Year , max(Price) FROM WINE GROUP BY Year", "binning": ""}, "VQL": "Visualize LINE SELECT Year , max(Price) FROM WINE GROUP BY Year"}, "hardness": "Easy"}, {"nl_queries": "What is the number of teachers for each course? Return a pie chart.", "db_id": "course_teach", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Course , COUNT(Course) FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID GROUP BY Course", "binning": ""}, "VQL": "Visualize PIE SELECT Course , COUNT(Course) FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID GROUP BY Course"}, "hardness": "Medium"}, {"nl_queries": "For those products with a price between 60 and 120, a bar chart shows the distribution of name and manufacturer , display by the X from low to high.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , Manufacturer FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , Manufacturer FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name ASC"}, "hardness": "Medium"}, {"nl_queries": "What are the total number of credits offered by each department Show bar chart, display X-axis from high to low order.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT DEPT_CODE , sum(T1.crs_credit) FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code = T2.crs_code GROUP BY T1.dept_code ORDER BY DEPT_CODE DESC", "binning": ""}, "VQL": "Visualize BAR SELECT DEPT_CODE , sum(T1.crs_credit) FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code = T2.crs_code GROUP BY T1.dept_code ORDER BY DEPT_CODE DESC"}, "hardness": "Hard"}, {"nl_queries": "Draw a bar chart for what is minimum age for different job title?", "db_id": "network_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT job , min(age) FROM Person GROUP BY job", "binning": ""}, "VQL": "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job"}, "hardness": "Easy"}, {"nl_queries": "Show different type codes of products and the number of products with each type code with a pie chart.", "db_id": "solvency_ii", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Product_Type_Code , COUNT(*) FROM Products GROUP BY Product_Type_Code", "binning": ""}, "VQL": "Visualize PIE SELECT Product_Type_Code , COUNT(*) FROM Products GROUP BY Product_Type_Code"}, "hardness": "Easy"}, {"nl_queries": "List each charge type and its amount in a bar chart, and sort by the Y in descending.", "db_id": "dog_kennels", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT charge_type , charge_amount FROM Charges ORDER BY charge_amount DESC", "binning": ""}, "VQL": "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_amount DESC"}, "hardness": "Easy"}, {"nl_queries": "Show the names of countries and the average speed of roller coasters from each country. Plot them as bar chart.", "db_id": "roller_coaster", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , avg(T2.Speed) FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID GROUP BY T1.Name", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , avg(T2.Speed) FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID GROUP BY T1.Name"}, "hardness": "Medium"}, {"nl_queries": "For all employees who have the letters D or S in their first name, a scatter chart shows the correlation between  salary and  manager_id .", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT SALARY , MANAGER_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'", "binning": ""}, "VQL": "Visualize SCATTER SELECT SALARY , MANAGER_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'"}, "hardness": "Hard"}, {"nl_queries": "Draw a scatter chart about the correlation between  School_ID and  ACC_Percent , and group by attribute ACC_Regular_Season.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Regular_Season", "binning": ""}, "VQL": "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Regular_Season"}, "hardness": "Easy"}, {"nl_queries": "A bar chart for finding the number of the \"date became customers\" of the customers whose ID is between 10 and 20, and display by the y axis in asc please.", "db_id": "customers_and_addresses", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_became_customer , COUNT(date_became_customer) FROM customers WHERE customer_id BETWEEN 10 AND 20  ORDER BY COUNT(date_became_customer) ASC", "binning": "BIN date_became_customer BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_became_customer , COUNT(date_became_customer) FROM customers WHERE customer_id BETWEEN 10 AND 20  ORDER BY COUNT(date_became_customer) ASC BIN date_became_customer BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "Find  ACC_Road and the average of Team_ID , and group by attribute ACC_Road, and visualize them by a bar chart.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Road , AVG(Team_ID) FROM basketball_match GROUP BY ACC_Road", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Road , AVG(Team_ID) FROM basketball_match GROUP BY ACC_Road"}, "hardness": "Easy"}, {"nl_queries": "Bar chart x axis job y axis the average of age, list by the y-axis in desc.", "db_id": "network_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT job , avg(age) FROM Person GROUP BY job ORDER BY avg(age) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY avg(age) DESC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, give me the comparison about manager_id over the last_name , show Y in descending order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT LAST_NAME , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY MANAGER_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT LAST_NAME , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY MANAGER_ID DESC"}, "hardness": "Medium"}, {"nl_queries": "Compare the total number of journalist with different nationality using a bar chart, I want to order by the names in ascending.", "db_id": "news_report", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nationality , COUNT(Nationality) FROM journalist GROUP BY Nationality ORDER BY Nationality ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM journalist GROUP BY Nationality ORDER BY Nationality ASC"}, "hardness": "Medium"}, {"nl_queries": "Give the proportion of how many male and female assistant professors do we have?", "db_id": "activity_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Sex , count(*) FROM Faculty WHERE rank = \"AsstProf\" GROUP BY sex", "binning": ""}, "VQL": "Visualize PIE SELECT Sex , count(*) FROM Faculty WHERE rank = \"AsstProf\" GROUP BY sex"}, "hardness": "Medium"}, {"nl_queries": "Visualize a bar chart for how many books fall into each category?, order by the Y in ascending.", "db_id": "culture_company", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY count(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "Find the number of the dates of orders which belong to the customer named \"Jeramie\".", "db_id": "tracking_orders", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date_order_placed , COUNT(date_order_placed) FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\"", "binning": "BIN date_order_placed BY YEAR"}, "VQL": "Visualize LINE SELECT date_order_placed , COUNT(date_order_placed) FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\" BIN date_order_placed BY YEAR"}, "hardness": "Hard"}, {"nl_queries": "Find the names of Japanese constructors that have once earned more than 5 points, and count them by a bar chart, could you order total number from high to low order please?", "db_id": "formula_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name ORDER BY COUNT(name) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name ORDER BY COUNT(name) DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "Return the lot details, group the lot details, and compute the number of each lot details, list X-axis from low to high order please.", "db_id": "tracking_share_transactions", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT lot_details , COUNT(lot_details) FROM LOTS GROUP BY lot_details ORDER BY lot_details ASC", "binning": ""}, "VQL": "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM LOTS GROUP BY lot_details ORDER BY lot_details ASC"}, "hardness": "Medium"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, show me the trend about department_id over hire_date with a line chart, show by the x-axis in desc.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC"}, "hardness": "Hard"}, {"nl_queries": "Show the names and ids of tourist attractions that are visited at most once, display by the bar in desc.", "db_id": "cre_Theme_park", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID ORDER BY T1.Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID ORDER BY T1.Name DESC"}, "hardness": "Medium"}, {"nl_queries": "What is the proportion of carriers of phones? ", "db_id": "phone_market", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier", "binning": ""}, "VQL": "Visualize PIE SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier"}, "hardness": "Easy"}, {"nl_queries": "Show the number of dogs that received a treatment arrived in each day in a line chart that groups by arrived date, could you list x axis in ascending order?", "db_id": "dog_kennels", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date_arrived , COUNT(date_arrived) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id GROUP BY date_arrived ORDER BY date_arrived ASC", "binning": ""}, "VQL": "Visualize LINE SELECT date_arrived , COUNT(date_arrived) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id GROUP BY date_arrived ORDER BY date_arrived ASC"}, "hardness": "Hard"}, {"nl_queries": "For all employees who have the letters D or S in their first name, return a bar chart about the distribution of hire_date and the average of employee_id bin hire_date by weekday, display in descending by the Y please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY AVG(EMPLOYEE_ID) DESC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY AVG(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "Please give me a pie chart to show the number of home cities of all drivers", "db_id": "school_bus", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Home_city , COUNT(Home_city) FROM driver GROUP BY Home_city", "binning": ""}, "VQL": "Visualize BAR SELECT Home_city , COUNT(Home_city) FROM driver GROUP BY Home_city"}, "hardness": "Easy"}, {"nl_queries": "Bar chart x axis name y axis total number of grade, show by the y-axis from high to low please.", "db_id": "network_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) DESC"}, "hardness": "Medium"}, {"nl_queries": "Show the names and ids of tourist attractions that are visited at least two times with a bar chart, rank Y-axis in desc order.", "db_id": "cre_Theme_park", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID ORDER BY T1.Tourist_Attraction_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID ORDER BY T1.Tourist_Attraction_ID DESC"}, "hardness": "Medium"}, {"nl_queries": "For all employees who have the letters D or S in their first name, give me the comparison about the sum of manager_id over the  job_id , and group by attribute job_id by a bar chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID"}, "hardness": "Extra Hard"}, {"nl_queries": "Compute the number of services by services and then split by local authorities Show the result with a stacked bar graph, and I want to show by the y-axis from high to low.", "db_id": "station_weather", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT local_authority , COUNT(local_authority) FROM station GROUP BY services ,  local_authority ORDER BY COUNT(local_authority) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY services ,  local_authority ORDER BY COUNT(local_authority) DESC"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, a scatter chart shows the correlation between  price and  revenue , and group by attribute headquarter.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Price , Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter", "binning": ""}, "VQL": "Visualize SCATTER SELECT Price , Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter"}, "hardness": "Medium"}, {"nl_queries": "Show the smallest enrollment of each state using a bar chart, and show in descending by the y axis.", "db_id": "soccer_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT state , min(enr) FROM college GROUP BY state ORDER BY min(enr) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY min(enr) DESC"}, "hardness": "Medium"}, {"nl_queries": "Show employee_id from each email, and display from high to low by the total number.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT EMAIL , EMPLOYEE_ID FROM employees ORDER BY EMPLOYEE_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT EMAIL , EMPLOYEE_ID FROM employees ORDER BY EMPLOYEE_ID DESC"}, "hardness": "Easy"}, {"nl_queries": "Find  ACC_Road and  Team_ID , and group by attribute ACC_Home, and visualize them by a bar chart.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road"}, "hardness": "Extra Hard"}, {"nl_queries": "Draw a bar chart of country versus the total number, and sort the total number in desc order.", "db_id": "concert_singer", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, draw a line chart about the change of  manager_id over  hire_date .", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40"}, "hardness": "Medium"}, {"nl_queries": "What are the number of the descriptions of all the project outcomes?, and could you list y-axis in desc order?", "db_id": "tracking_grants_for_research", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description ORDER BY COUNT(outcome_description) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description ORDER BY COUNT(outcome_description) DESC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who did not have any job in the past, a bar chart shows the distribution of  hire_date and the amount of hire_date bin hire_date by weekday.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "Find the number of classes in each department. Plot them as pie chart.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT DEPT_CODE , count(*) FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code GROUP BY dept_code", "binning": ""}, "VQL": "Visualize PIE SELECT DEPT_CODE , count(*) FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code GROUP BY dept_code"}, "hardness": "Medium"}, {"nl_queries": "Bar graph, the X-axis is the pet types and the Y-axis is their max pet age, and list Y in asc order.", "db_id": "pets_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT PetType , max(pet_age) FROM pets GROUP BY PetType ORDER BY max(pet_age) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT PetType , max(pet_age) FROM pets GROUP BY PetType ORDER BY max(pet_age) ASC"}, "hardness": "Easy"}, {"nl_queries": "Find meter_200 and the amount of meter_200 , and group by attribute meter_200, and visualize them by a bar chart, show in ascending by the bar.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_200 , COUNT(meter_200) FROM swimmer GROUP BY meter_200 ORDER BY meter_200 ASC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_200 , COUNT(meter_200) FROM swimmer GROUP BY meter_200 ORDER BY meter_200 ASC"}, "hardness": "Medium"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, give me the comparison about the sum of salary over the job_id , and group by attribute job_id, sort by the bar in ascending.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "Give me a bar chart for sum weight of each sex, could you list X-axis from low to high order?", "db_id": "candidate_poll", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Sex , SUM(Weight) FROM people GROUP BY Sex ORDER BY Sex ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Sex , SUM(Weight) FROM people GROUP BY Sex ORDER BY Sex ASC"}, "hardness": "Medium"}, {"nl_queries": "For all employees who have the letters D or S in their first name, show me about the distribution of job_id and the amount of job_id , and group by attribute job_id in a bar chart, sort in asc by the X please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , COUNT(JOB_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, return a bar chart about the distribution of name and code , and group by attribute founder, show from high to low by the Name.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder , T1.Name ORDER BY T1.Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder , T1.Name ORDER BY T1.Name DESC"}, "hardness": "Hard"}, {"nl_queries": "Find the number of classes in each department Visualize by bar chart, and order Y in ascending order.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT DEPT_CODE , count(*) FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code GROUP BY dept_code ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT DEPT_CODE , count(*) FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code GROUP BY dept_code ORDER BY count(*) ASC"}, "hardness": "Hard"}, {"nl_queries": "Show names of teachers and the number of courses they teach Visualize by bar chart, and show in asc by the bar please.", "db_id": "course_teach", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name ORDER BY Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name ORDER BY Name ASC"}, "hardness": "Hard"}, {"nl_queries": "Visualize a bar chart for what is the id and weight of every pet who is older than 1?, order Y from high to low order.", "db_id": "pets_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT PetID , weight FROM pets WHERE pet_age > 1 ORDER BY weight DESC", "binning": ""}, "VQL": "Visualize BAR SELECT PetID , weight FROM pets WHERE pet_age > 1 ORDER BY weight DESC"}, "hardness": "Medium"}, {"nl_queries": "Show all template type codes and number of templates for each with a bar chart, order from high to low by the x-axis please.", "db_id": "cre_Doc_Template_Mgt", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Template_Type_Code , count(*) FROM Templates GROUP BY template_type_code ORDER BY Template_Type_Code DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates GROUP BY template_type_code ORDER BY Template_Type_Code DESC"}, "hardness": "Medium"}, {"nl_queries": "Give me a bar chart for mean team id of each all home, sort from low to high by the bars please.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Home , AVG(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Home , AVG(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC"}, "hardness": "Medium"}, {"nl_queries": "What are the number of the dates in which the mean sea level pressure was between 303 and 31?, display in desc by the Y-axis.", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date , COUNT(date) FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31  ORDER BY COUNT(date) DESC", "binning": "BIN date BY YEAR"}, "VQL": "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31  ORDER BY COUNT(date) DESC BIN date BY YEAR"}, "hardness": "Hard"}, {"nl_queries": "What are the number of the dates of transactions with at least 100 share count or amount bigger than 100?, order by the Y in ascending.", "db_id": "tracking_share_transactions", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS WHERE share_count >= 100 OR amount_of_transaction >= 100  ORDER BY COUNT(date_of_transaction) ASC", "binning": "BIN date_of_transaction BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS WHERE share_count >= 100 OR amount_of_transaction >= 100  ORDER BY COUNT(date_of_transaction) ASC BIN date_of_transaction BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "Show the total number from each category, I want to list in desc by the bars.", "db_id": "culture_company", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY Category DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY Category DESC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who did not have any job in the past, visualize the relationship between  salary and  department_id .", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT SALARY , DEPARTMENT_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)", "binning": ""}, "VQL": "Visualize SCATTER SELECT SALARY , DEPARTMENT_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)"}, "hardness": "Easy"}, {"nl_queries": "Find  Days and the average of Instructor , and group by attribute Days, and visualize them by a bar chart.", "db_id": "college_3", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Days , AVG(Instructor) FROM COURSE GROUP BY Days ORDER BY Credits", "binning": ""}, "VQL": "Visualize BAR SELECT Days , AVG(Instructor) FROM COURSE GROUP BY Days ORDER BY Credits"}, "hardness": "Medium"}, {"nl_queries": "Bar chart x axis venue y axis how many venue, order in ascending by the x axis.", "db_id": "debate", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Venue , COUNT(Venue) FROM debate GROUP BY Venue ORDER BY Venue ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Venue , COUNT(Venue) FROM debate GROUP BY Venue ORDER BY Venue ASC"}, "hardness": "Medium"}, {"nl_queries": "What is the number of different grapes of each wine? Show me a bar chart, and sort y axis in asc order please.", "db_id": "wine_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Grape , COUNT(Grape) FROM WINE GROUP BY Grape ORDER BY COUNT(Grape) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Grape , COUNT(Grape) FROM WINE GROUP BY Grape ORDER BY COUNT(Grape) ASC"}, "hardness": "Medium"}, {"nl_queries": "A bar chart for finding the number of the names of stadiums that some Australian swimmers have been to, and could you display Y in asc order?", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T4.name , COUNT(T4.name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id JOIN event AS t3 ON t2.event_id = t3.id JOIN stadium AS t4 ON t4.id = t3.stadium_id WHERE t1.nationality = 'Australia' GROUP BY T4.name ORDER BY COUNT(T4.name) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T4.name , COUNT(T4.name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id JOIN event AS t3 ON t2.event_id = t3.id JOIN stadium AS t4 ON t4.id = t3.stadium_id WHERE t1.nationality = 'Australia' GROUP BY T4.name ORDER BY COUNT(T4.name) ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "Draw a bar chart about the distribution of ACC_Road and the sum of School_ID , and group by attribute ACC_Road, show from low to high by the bar please.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Road , SUM(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Road , SUM(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, find  founder and the sum of price , and group by attribute founder, and visualize them by a bar chart.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Founder , SUM(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder", "binning": ""}, "VQL": "Visualize BAR SELECT Founder , SUM(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder"}, "hardness": "Medium"}, {"nl_queries": "Find dates and attendance for exhibitions that happened in 2004, show me the attendance by date with a bar chart, and rank in ascending by the X-axis.", "db_id": "theme_gallery", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Date , T1.Attendance FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T2.year = 2004 ORDER BY Date ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Date , T1.Attendance FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T2.year = 2004 ORDER BY Date ASC"}, "hardness": "Hard"}, {"nl_queries": "A bar chart for returning the number of the date of birth for all the guests with gender code \"Male\".", "db_id": "apartment_rentals", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"", "binning": "BIN date_of_birth BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\" BIN date_of_birth BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "Find the id and cell phone of the professionals who operate two or more types of treatments, could you order in asc by the Y-axis?", "db_id": "dog_kennels", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.cell_number , T1.professional_id FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id ORDER BY T1.professional_id ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.cell_number , T1.professional_id FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id ORDER BY T1.professional_id ASC"}, "hardness": "Medium"}, {"nl_queries": "A bar chart about what is the total rating of channel for each channel owner?, I want to list by the y-axis in descending.", "db_id": "program_share", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Owner , sum(Rating_in_percent) FROM channel GROUP BY OWNER ORDER BY sum(Rating_in_percent) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Owner , sum(Rating_in_percent) FROM channel GROUP BY OWNER ORDER BY sum(Rating_in_percent) DESC"}, "hardness": "Medium"}, {"nl_queries": "How many students are from each city, and which cities have more than one cities Plot them as bar chart, and I want to list y axis in asc order.", "db_id": "dorm_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT city_code , count(*) FROM student GROUP BY city_code ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT city_code , count(*) FROM student GROUP BY city_code ORDER BY count(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "Show me about the correlation between  School_ID and  All_Games_Percent , and group by attribute Team_Name in a scatter chart.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY Team_Name", "binning": ""}, "VQL": "Visualize SCATTER SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY Team_Name"}, "hardness": "Easy"}, {"nl_queries": "For each record in schedule, show average of the price for each day in a bar chart, and order x-axis in ascending order.", "db_id": "cinema", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Date , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Date ORDER BY Date ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Date , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Date ORDER BY Date ASC"}, "hardness": "Hard"}, {"nl_queries": "count yearid for visualizing a line chart, and sort X-axis in descending order.", "db_id": "baseball_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT yearid , COUNT(yearid) FROM hall_of_fame  ORDER BY yearid DESC", "binning": "BIN yearid BY YEAR"}, "VQL": "Visualize LINE SELECT yearid , COUNT(yearid) FROM hall_of_fame  ORDER BY yearid DESC BIN yearid BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "how many products are there for each manufacturer?, I want to list in desc by the the total number .", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , count(*) FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , count(*) FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name ORDER BY count(*) DESC"}, "hardness": "Hard"}, {"nl_queries": "What are the names and ids of the tourist attractions that are visited at most once Visualize by bar chart, rank by the Y-axis in descending.", "db_id": "cre_Theme_park", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID ORDER BY T1.Tourist_Attraction_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID ORDER BY T1.Tourist_Attraction_ID DESC"}, "hardness": "Medium"}, {"nl_queries": "List the number of the names of patients who have made appointments.", "db_id": "hospital_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM appointment AS T1 JOIN patient AS T2 ON T1.patient = T2.ssn GROUP BY Name", "binning": ""}, "VQL": "Visualize PIE SELECT Name , COUNT(Name) FROM appointment AS T1 JOIN patient AS T2 ON T1.patient = T2.ssn GROUP BY Name"}, "hardness": "Medium"}, {"nl_queries": "A bar chart compares the ages of all artists, rank by the X from low to high.", "db_id": "theme_gallery", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , Age FROM artist ORDER BY Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , Age FROM artist ORDER BY Name ASC"}, "hardness": "Easy"}, {"nl_queries": "Give me a bar chart for sum price of each name, and display from low to high by the y-axis please.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , SUM(Price) FROM products GROUP BY Name ORDER BY SUM(Price) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , SUM(Price) FROM products GROUP BY Name ORDER BY SUM(Price) ASC"}, "hardness": "Medium"}, {"nl_queries": "Visualize a scatter chart about the correlation between  Team_ID and  School_ID , and group by attribute Team_Name.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Team_ID , School_ID FROM basketball_match GROUP BY Team_Name", "binning": ""}, "VQL": "Visualize SCATTER SELECT Team_ID , School_ID FROM basketball_match GROUP BY Team_Name"}, "hardness": "Easy"}, {"nl_queries": "Show the names of high school students and their corresponding number of friends with a bar chart, I want to order by the x axis in desc.", "db_id": "network_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.name , SUM(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.name , SUM(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name DESC"}, "hardness": "Hard"}, {"nl_queries": "Show names of teachers and the number of courses they teach with a bar chart, and order from high to low by the Y-axis.", "db_id": "course_teach", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name ORDER BY COUNT(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name ORDER BY COUNT(*) DESC"}, "hardness": "Hard"}, {"nl_queries": "Give me a scatter chart that groups by all home, the x-axis is team id and the y-axis is school id.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Team_ID , School_ID FROM basketball_match GROUP BY All_Home", "binning": ""}, "VQL": "Visualize SCATTER SELECT Team_ID , School_ID FROM basketball_match GROUP BY All_Home"}, "hardness": "Easy"}, {"nl_queries": "A bar chart about what is average age for different job title?, and rank by the the average of age in desc.", "db_id": "network_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT job , avg(age) FROM Person GROUP BY job ORDER BY avg(age) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY avg(age) DESC"}, "hardness": "Medium"}, {"nl_queries": "Just plot the manager id and the department id in a scatter chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT T1.MANAGER_ID , T1.DEPARTMENT_ID FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T1.employee_id = T2.manager_id", "binning": ""}, "VQL": "Visualize SCATTER SELECT T1.MANAGER_ID , T1.DEPARTMENT_ID FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T1.employee_id = T2.manager_id"}, "hardness": "Medium"}, {"nl_queries": "Show the minimum room count of apartments in different type with a bar chart, and I want to rank by the Y-axis in desc please.", "db_id": "apartment_rentals", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT apt_type_code , min(room_count) FROM Apartments GROUP BY apt_type_code ORDER BY min(room_count) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT apt_type_code , min(room_count) FROM Apartments GROUP BY apt_type_code ORDER BY min(room_count) DESC"}, "hardness": "Easy"}, {"nl_queries": "Compare the number of the names of phones by a bar chart, I want to rank Y-axis in desc order.", "db_id": "phone_market", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY Name ORDER BY COUNT(Name) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY Name ORDER BY COUNT(Name) DESC"}, "hardness": "Hard"}, {"nl_queries": "For all employees who have the letters D or S in their first name, visualize a line chart about the change of salary over hire_date , sort x axis in ascending order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , SALARY FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY HIRE_DATE ASC", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY HIRE_DATE ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "For all employees who have the letters D or S in their first name, visualize the relationship between  employee_id and  manager_id .", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT EMPLOYEE_ID , MANAGER_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'", "binning": ""}, "VQL": "Visualize SCATTER SELECT EMPLOYEE_ID , MANAGER_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'"}, "hardness": "Hard"}, {"nl_queries": "Please compare the frequency of the position of the pilots using a bar chart, and could you sort from low to high by the bar please?", "db_id": "pilot_record", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Position , COUNT(Position) FROM pilot GROUP BY Position ORDER BY Position ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Position , COUNT(Position) FROM pilot GROUP BY Position ORDER BY Position ASC"}, "hardness": "Medium"}, {"nl_queries": "List all customer status codes and the number of customers having each status code in a bar chart, could you rank bar in descending order?", "db_id": "driving_school", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT customer_status_code , count(*) FROM Customers GROUP BY customer_status_code ORDER BY customer_status_code DESC", "binning": ""}, "VQL": "Visualize BAR SELECT customer_status_code , count(*) FROM Customers GROUP BY customer_status_code ORDER BY customer_status_code DESC"}, "hardness": "Medium"}, {"nl_queries": "Show me a line chart of how the number of visit date change over the visit date, and order by the X in asc.", "db_id": "cre_Theme_park", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Visit_Date , COUNT(Visit_Date) FROM VISITS  ORDER BY Visit_Date ASC", "binning": "BIN Visit_Date BY YEAR"}, "VQL": "Visualize LINE SELECT Visit_Date , COUNT(Visit_Date) FROM VISITS  ORDER BY Visit_Date ASC BIN Visit_Date BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "Show the average price of hotels for each star rating code in a scatter chart", "db_id": "cre_Theme_park", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT star_rating_code , avg(price_range) FROM HOTELS GROUP BY star_rating_code", "binning": ""}, "VQL": "Visualize SCATTER SELECT star_rating_code , avg(price_range) FROM HOTELS GROUP BY star_rating_code"}, "hardness": "Easy"}, {"nl_queries": "Bar chart x axis all games y axis acc_percent, I want to order from high to low by the Y-axis.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Games , ACC_Percent FROM basketball_match ORDER BY ACC_Percent DESC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Games , ACC_Percent FROM basketball_match ORDER BY ACC_Percent DESC"}, "hardness": "Easy"}, {"nl_queries": "What are the ids and details for all organizations that have grants of more than 6000 dollars, list total number from low to high order.", "db_id": "tracking_grants_for_research", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T1.organisation_id ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T1.organisation_id ASC"}, "hardness": "Hard"}, {"nl_queries": "Show me total number of vote id by state in a histogram, and I want to list in desc by the y-axis.", "db_id": "voter_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT state , SUM(vote_id) FROM votes GROUP BY state ORDER BY SUM(vote_id) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT state , SUM(vote_id) FROM votes GROUP BY state ORDER BY SUM(vote_id) DESC"}, "hardness": "Medium"}, {"nl_queries": "How many treatments in each day? Return a line chart that groups by date of treatment, and I want to sort by the date_of_treatment in ascending.", "db_id": "dog_kennels", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date_of_treatment , COUNT(date_of_treatment) FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id GROUP BY date_of_treatment ORDER BY date_of_treatment ASC", "binning": ""}, "VQL": "Visualize LINE SELECT date_of_treatment , COUNT(date_of_treatment) FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id GROUP BY date_of_treatment ORDER BY date_of_treatment ASC"}, "hardness": "Hard"}, {"nl_queries": "A bar chart for what is the number of locations of the wrestlers, and sort by the x-axis in descending.", "db_id": "wrestler", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Location , COUNT(Location) FROM wrestler GROUP BY Location ORDER BY Location DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Location , COUNT(Location) FROM wrestler GROUP BY Location ORDER BY Location DESC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, draw a bar chart about the distribution of name and the average of revenue , and group by attribute name, display in asc by the total number.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T2.Revenue ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T2.Revenue ASC"}, "hardness": "Hard"}, {"nl_queries": "Return a bar chart about the distribution of Is_full_time and the amount of Is_full_time , and group by attribute Is_full_time, order X-axis in descending order please.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC"}, "hardness": "Medium"}, {"nl_queries": "Return a bar chart about the distribution of  family_name and  author_tutor_ATB .", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT family_name , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name", "binning": ""}, "VQL": "Visualize BAR SELECT family_name , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name"}, "hardness": "Easy"}, {"nl_queries": "List name and damage for all storms in a descending order of max speed with a bar chart.", "db_id": "storm_record", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , Damage_millions_USD FROM storm ORDER BY max_speed DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , Damage_millions_USD FROM storm ORDER BY max_speed DESC"}, "hardness": "Easy"}, {"nl_queries": "Find the number of the dates of the tests taken with result \"Pass\", order x-axis from high to low order.", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\"  ORDER BY date_test_taken DESC", "binning": "BIN date_test_taken BY DAY"}, "VQL": "Visualize LINE SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\"  ORDER BY date_test_taken DESC BIN date_test_taken BY DAY"}, "hardness": "Hard"}, {"nl_queries": "How many different locations does each school have. Show the proportion.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department", "binning": ""}, "VQL": "Visualize PIE SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department"}, "hardness": "Medium"}, {"nl_queries": "What are the different budget type codes, and how many documents are there for each Plot them as bar chart, and list bars in desc order.", "db_id": "cre_Docs_and_Epenses", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY Budget_Type_Code DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY Budget_Type_Code DESC"}, "hardness": "Medium"}, {"nl_queries": "Find the number of students for the cities where have more than one student, and display total number in descending order.", "db_id": "dorm_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT city_code , count(*) FROM student GROUP BY city_code ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT city_code , count(*) FROM student GROUP BY city_code ORDER BY count(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "Find the relationship between the average and maximum age for each type of pet using a scatter plot.", "db_id": "pets_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT avg(pet_age) , max(pet_age) FROM pets GROUP BY pettype", "binning": ""}, "VQL": "Visualize SCATTER SELECT avg(pet_age) , max(pet_age) FROM pets GROUP BY pettype"}, "hardness": "Easy"}, {"nl_queries": "For all employees who have the letters D or S in their first name, a bar chart shows the distribution of hire_date and the average of salary bin hire_date by weekday, and sort in descending by the mean salary please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY AVG(SALARY) DESC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about the sum of price over the name , and group by attribute name by a bar chart, I want to rank by the Y-axis in asc.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Price ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Price ASC"}, "hardness": "Hard"}, {"nl_queries": "Show the name of the product that is cheapest in each product category with their minimum price with a bar graph.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , min(price) FROM products GROUP BY Name", "binning": ""}, "VQL": "Visualize BAR SELECT Name , min(price) FROM products GROUP BY Name"}, "hardness": "Easy"}, {"nl_queries": "A bar chart about what is the name of every city that has at least 15 stations and how many stations does it have?, and rank in asc by the bars.", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT city , COUNT(*) FROM station GROUP BY city ORDER BY city ASC", "binning": ""}, "VQL": "Visualize BAR SELECT city , COUNT(*) FROM station GROUP BY city ORDER BY city ASC"}, "hardness": "Medium"}, {"nl_queries": "What are the dates of birth of entrepreneurs with investor \"Simon Woodroffe\" or \"Peter Jones\", and count them by a line chart, show from low to high by the x-axis.", "db_id": "entrepreneur", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Date_of_Birth , COUNT(Date_of_Birth) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Investor = \"Simon Woodroffe\" OR T1.Investor = \"Peter Jones\"  ORDER BY Date_of_Birth ASC", "binning": "BIN Date_of_Birth BY YEAR"}, "VQL": "Visualize LINE SELECT Date_of_Birth , COUNT(Date_of_Birth) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Investor = \"Simon Woodroffe\" OR T1.Investor = \"Peter Jones\"  ORDER BY Date_of_Birth ASC BIN Date_of_Birth BY YEAR"}, "hardness": "Extra Hard"}, {"nl_queries": "Show the number of start dates of all the apartment bookings for each weekday with a bar chart, show in descending by the total number please.", "db_id": "apartment_rentals", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id  ORDER BY COUNT(booking_start_date) DESC", "binning": "BIN booking_start_date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id  ORDER BY COUNT(booking_start_date) DESC BIN booking_start_date BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "Show sum team id from each all home, and list Y in ascending order.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY SUM(Team_ID) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY SUM(Team_ID) ASC"}, "hardness": "Medium"}, {"nl_queries": "Display a bar chart for which catalog contents has price above 700 dollars? Show their catalog entry names and capacities, display by the names from low to high please.", "db_id": "product_catalog", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700 ORDER BY catalog_entry_name ASC"}, "hardness": "Medium"}, {"nl_queries": "For all employees who have the letters D or S in their first name, visualize a scatter chart about the correlation between  manager_id and  department_id .", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT MANAGER_ID , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'", "binning": ""}, "VQL": "Visualize SCATTER SELECT MANAGER_ID , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'"}, "hardness": "Hard"}, {"nl_queries": "A bar chart for what are the number of the facility codes of the apartments with more than four bedrooms?, and list Y in descending order.", "db_id": "apartment_rentals", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT facility_code , COUNT(facility_code) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.bedroom_count > 4 GROUP BY facility_code ORDER BY COUNT(facility_code) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT facility_code , COUNT(facility_code) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.bedroom_count > 4 GROUP BY facility_code ORDER BY COUNT(facility_code) DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "What are all the different product names, and how many complains has each received Show bar chart, and rank Y-axis in descending order.", "db_id": "customer_complaints", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT product_name , count(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id = t2.product_id GROUP BY t1.product_name ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT product_name , count(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id = t2.product_id GROUP BY t1.product_name ORDER BY count(*) DESC"}, "hardness": "Hard"}, {"nl_queries": "Return a bar chart about the distribution of Is_full_time and the sum of Shop_ID , and group by attribute Is_full_time, and I want to order by the Y in desc.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Shop_ID) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Shop_ID) DESC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, visualize a bar chart about the distribution of first_name and salary , and display by the total number in asc.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT FIRST_NAME , SALARY FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY SALARY ASC", "binning": ""}, "VQL": "Visualize BAR SELECT FIRST_NAME , SALARY FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY SALARY ASC"}, "hardness": "Medium"}, {"nl_queries": "What are the descriptions of all the project outcomes, and count them by a bar chart", "db_id": "tracking_grants_for_research", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description", "binning": ""}, "VQL": "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, find name and the sum of code , and group by attribute name, and visualize them by a bar chart, and show by the x axis in descending please.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC"}, "hardness": "Hard"}, {"nl_queries": "Plot id by grouped by name as a bar graph, and display ID in ascending order please.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , ID FROM swimmer ORDER BY ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT name , ID FROM swimmer ORDER BY ID ASC"}, "hardness": "Easy"}, {"nl_queries": "For those employees who was hired before 2002-06-21, give me the comparison about the average of manager_id over the  hire_date bin hire_date by time by a bar chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21'", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, return a scatter chart about the correlation between  code and  revenue .", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code", "binning": ""}, "VQL": "Visualize SCATTER SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code"}, "hardness": "Easy"}, {"nl_queries": " Ignore movies whose director is NULL. For each director, what are the titles and ratings for all the movies they reviewed? Show the result by a bar chart.", "db_id": "movie_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT title , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\"", "binning": ""}, "VQL": "Visualize BAR SELECT title , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\""}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about  code over the  name , and group by attribute name by a bar chart.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name"}, "hardness": "Medium"}, {"nl_queries": "For all employees who have the letters D or S in their first name, show me the trend about salary over hire_date with a line chart, I want to show x axis in desc order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , SALARY FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY HIRE_DATE DESC", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY HIRE_DATE DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "Show the average amount of transactions for different lots. Show the correlation.", "db_id": "tracking_share_transactions", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT lot_id , avg(amount_of_transaction) FROM TRANSACTIONS AS T1 JOIN Transactions_Lots AS T2 ON T1.transaction_id = T2.transaction_id GROUP BY T2.lot_id", "binning": ""}, "VQL": "Visualize SCATTER SELECT lot_id , avg(amount_of_transaction) FROM TRANSACTIONS AS T1 JOIN Transactions_Lots AS T2 ON T1.transaction_id = T2.transaction_id GROUP BY T2.lot_id"}, "hardness": "Medium"}, {"nl_queries": "Show the booking status code and the corresponding number of bookings. Show bar chart.", "db_id": "apartment_rentals", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code", "binning": ""}, "VQL": "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code"}, "hardness": "Easy"}, {"nl_queries": "Return a bar chart about the distribution of meter_600 and ID , and rank in descending by the y axis please.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_600 , ID FROM swimmer ORDER BY ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_600 , ID FROM swimmer ORDER BY ID DESC"}, "hardness": "Easy"}, {"nl_queries": "Show all branch names with the number of members in each branch registered after 2015 Plot them as bar chart, and show by the bar from low to high.", "db_id": "shop_membership", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , count(*) FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id WHERE T1.register_year > 2015 GROUP BY T2.branch_id ORDER BY Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , count(*) FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id WHERE T1.register_year > 2015 GROUP BY T2.branch_id ORDER BY Name ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "Find the student ID and middle name for all the students with at most two enrollments, display in descending by the bar.", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.middle_name , T1.student_id FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id ORDER BY T2.middle_name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.middle_name , T1.student_id FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id ORDER BY T2.middle_name DESC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, find name and manufacturer , and group by attribute founder, and visualize them by a bar chart, could you display by the Manufacturer in asc?", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder , T1.Name ORDER BY T1.Manufacturer ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder , T1.Name ORDER BY T1.Manufacturer ASC"}, "hardness": "Hard"}, {"nl_queries": "Stacked bar chart of the number of country for with each Competition_type in each country", "db_id": "sports_competition", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Country , COUNT(Country) FROM competition GROUP BY Competition_type ,  Country", "binning": ""}, "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Competition_type ,  Country"}, "hardness": "Hard"}, {"nl_queries": "Visualize the general trend of sum share count over the date of transaction, list x-axis in ascending order.", "db_id": "tracking_share_transactions", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date_of_transaction , SUM(share_count) FROM TRANSACTIONS  ORDER BY date_of_transaction ASC", "binning": "BIN date_of_transaction BY YEAR"}, "VQL": "Visualize LINE SELECT date_of_transaction , SUM(share_count) FROM TRANSACTIONS  ORDER BY date_of_transaction ASC BIN date_of_transaction BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "List the name and count of each product in all orders. ", "db_id": "tracking_orders", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T3.product_name , AVG(count(*)) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_name", "binning": ""}, "VQL": "Visualize BAR SELECT T3.product_name , AVG(count(*)) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_name"}, "hardness": "Medium"}, {"nl_queries": "A bar chart shows the distribution of  meter_500 and  ID .", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_500 , ID FROM swimmer", "binning": ""}, "VQL": "Visualize BAR SELECT meter_500 , ID FROM swimmer"}, "hardness": "Easy"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, show me about the distribution of hire_date and the sum of department_id bin hire_date by time in a bar chart, and show in ascending by the y-axis.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(DEPARTMENT_ID) ASC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "Display a bar chart for what are the investors of entrepreneurs and the corresponding number of entrepreneurs invested by each investor?, and I want to display in asc by the y axis.", "db_id": "entrepreneur", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "Tell me the average of capacity of cinemas open for each year in a line chart.", "db_id": "cinema", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Openning_year , AVG(Capacity) FROM cinema", "binning": "BIN Openning_year BY YEAR"}, "VQL": "Visualize LINE SELECT Openning_year , AVG(Capacity) FROM cinema BIN Openning_year BY YEAR"}, "hardness": "Easy"}, {"nl_queries": "I want a bar chart to show the average cloud cover of the dates that have the 5 highest cloud cover rates each year, and rank by the y axis from high to low.", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date , AVG(cloud_cover) FROM weather  ORDER BY AVG(cloud_cover) DESC", "binning": "BIN date BY YEAR"}, "VQL": "Visualize BAR SELECT date , AVG(cloud_cover) FROM weather  ORDER BY AVG(cloud_cover) DESC BIN date BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "Show me about the distribution of meter_700 and meter_100 in a bar chart, could you sort by the meter_700 in asc?", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_700 ASC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_700 ASC"}, "hardness": "Easy"}, {"nl_queries": "For directors who had more than one movie, bin the dates of release into Year interval and them compute the total number of movies in each year bucket Show me the result using a line chart, and rank by the year from high to low.", "db_id": "movie_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT year , COUNT(year) FROM Movie AS T1 JOIN Movie AS T2 ON T1.director = T2.director WHERE T1.title != T2.title ORDER BY year DESC", "binning": "BIN year BY YEAR"}, "VQL": "Visualize LINE SELECT year , COUNT(year) FROM Movie AS T1 JOIN Movie AS T2 ON T1.director = T2.director WHERE T1.title != T2.title ORDER BY year DESC BIN year BY YEAR"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees who did not have any job in the past, a bar chart shows the distribution of job_id and the average of salary , and group by attribute job_id, and I want to show bars in asc order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY JOB_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY JOB_ID ASC"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, draw a bar chart about the distribution of name and the sum of code , and group by attribute name, and show from low to high by the total number.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code ASC"}, "hardness": "Hard"}, {"nl_queries": "Bar chart x axis acc regular season y axis acc_percent, display ACC_Percent in ascending order.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC"}, "hardness": "Easy"}, {"nl_queries": "For the attribute  All_Road and  ACC_Percent, show their proportion by a pie chart.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT All_Road , ACC_Percent FROM basketball_match", "binning": ""}, "VQL": "Visualize PIE SELECT All_Road , ACC_Percent FROM basketball_match"}, "hardness": "Easy"}, {"nl_queries": "A bar chart for what are the number of the enrollment dates of all the tests that have result \"Pass\"?, I want to show by the the number of date of enrolment in descending.", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = \"Pass\"  ORDER BY COUNT(date_of_enrolment) DESC", "binning": "BIN date_of_enrolment BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = \"Pass\"  ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "Show sum enrollment from each county, and I want to list X in desc order please.", "db_id": "school_finance", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT County , sum(enrollment) FROM school GROUP BY county ORDER BY County DESC", "binning": ""}, "VQL": "Visualize BAR SELECT County , sum(enrollment) FROM school GROUP BY county ORDER BY County DESC"}, "hardness": "Medium"}, {"nl_queries": "Give me a histogram for what are the naems of all the projects, and how many scientists were assigned to each of them?, and show y-axis in desc order.", "db_id": "scientist_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.name ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.name ORDER BY count(*) DESC"}, "hardness": "Hard"}, {"nl_queries": "Give me the comparison about meter_100 over the meter_400 , could you order in asc by the x axis?", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_400 , meter_100 FROM swimmer ORDER BY meter_400 ASC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_400 , meter_100 FROM swimmer ORDER BY meter_400 ASC"}, "hardness": "Easy"}, {"nl_queries": "List the number of enginners in a stacked bar chart The x-axis is first name and group by skill description, could you rank Y-axis in ascending order?", "db_id": "assets_maintenance", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT first_name , COUNT(first_name) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY skill_description ,  first_name ORDER BY COUNT(first_name) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT first_name , COUNT(first_name) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY skill_description ,  first_name ORDER BY COUNT(first_name) ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "How many documents for each document description? Show me a bar chart, I want to sort in descending by the the number of document description.", "db_id": "cre_Doc_Template_Mgt", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Document_Description , COUNT(Document_Description) FROM Documents GROUP BY Document_Description ORDER BY COUNT(Document_Description) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Document_Description , COUNT(Document_Description) FROM Documents GROUP BY Document_Description ORDER BY COUNT(Document_Description) DESC"}, "hardness": "Medium"}, {"nl_queries": "Return the room and number of reservations made for each of the rooms to draw a bar chart, order by the x axis in asc.", "db_id": "inn_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Room , count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room ORDER BY Room ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Room , count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room ORDER BY Room ASC"}, "hardness": "Hard"}, {"nl_queries": "Return a histogram on how many entrepreneurs correspond to each investor?, and I want to sort from low to high by the Y-axis.", "db_id": "entrepreneur", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "Show me about the change of the amount of Start_from over Start_from bin start_from by time in a line chart, and could you show by the X-axis in ascending?", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Start_from , COUNT(Start_from) FROM hiring  ORDER BY Start_from ASC", "binning": "BIN Start_from BY YEAR"}, "VQL": "Visualize LINE SELECT Start_from , COUNT(Start_from) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "I want to see trend of how many date account opened by date account opened, order by the date_account_opened in descending.", "db_id": "customers_and_invoices", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date_account_opened , COUNT(date_account_opened) FROM Accounts  ORDER BY date_account_opened DESC", "binning": "BIN date_account_opened BY YEAR"}, "VQL": "Visualize LINE SELECT date_account_opened , COUNT(date_account_opened) FROM Accounts  ORDER BY date_account_opened DESC BIN date_account_opened BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "What are the different role codes for users, and how many users have each. Show bar chart.", "db_id": "document_management", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT role_code , count(*) FROM users GROUP BY role_code", "binning": ""}, "VQL": "Visualize BAR SELECT role_code , count(*) FROM users GROUP BY role_code"}, "hardness": "Easy"}, {"nl_queries": "For all employees who have the letters D or S in their first name, draw a bar chart about the distribution of hire_date and the sum of employee_id bin hire_date by time, and I want to order y-axis in asc order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) ASC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH"}, "hardness": "Extra Hard"}, {"nl_queries": "List all the possible ways to get to attractions, together with the number of attractions accessible by these methods. Show a pie chart.", "db_id": "cre_Theme_park", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT How_to_Get_There , COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There", "binning": ""}, "VQL": "Visualize PIE SELECT How_to_Get_There , COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There"}, "hardness": "Easy"}, {"nl_queries": "For those employees who was hired before 2002-06-21, give me the comparison about the sum of department_id over the job_id , and group by attribute job_id, and order in ascending by the names.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID ASC"}, "hardness": "Hard"}, {"nl_queries": "A bar chart shows the distribution of Nationality and the average of ID , and group by attribute Nationality, and rank from low to high by the mean id.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nationality , AVG(ID) FROM swimmer GROUP BY Nationality ORDER BY AVG(ID) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Nationality , AVG(ID) FROM swimmer GROUP BY Nationality ORDER BY AVG(ID) ASC"}, "hardness": "Medium"}, {"nl_queries": "Return a bar chart about the number bookings for each apartment number, and could you sort from low to high by the X?", "db_id": "apartment_rentals", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT apt_number , COUNT(apt_number) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id GROUP BY apt_number ORDER BY apt_number ASC", "binning": ""}, "VQL": "Visualize BAR SELECT apt_number , COUNT(apt_number) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id GROUP BY apt_number ORDER BY apt_number ASC"}, "hardness": "Hard"}, {"nl_queries": "Return a bar chart about the distribution of  meter_300 and  ID .", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_300 , ID FROM swimmer", "binning": ""}, "VQL": "Visualize BAR SELECT meter_300 , ID FROM swimmer"}, "hardness": "Easy"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, show me about the distribution of phone_number and employee_id in a bar chart, I want to show names in desc order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT PHONE_NUMBER , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY PHONE_NUMBER DESC", "binning": ""}, "VQL": "Visualize BAR SELECT PHONE_NUMBER , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY PHONE_NUMBER DESC"}, "hardness": "Medium"}, {"nl_queries": "Please tell the salary of each hire date using a line chart, I want to list x-axis in ascending order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , SALARY FROM employees ORDER BY HIRE_DATE ASC", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees ORDER BY HIRE_DATE ASC"}, "hardness": "Easy"}, {"nl_queries": "Give me the comparison about  ID over the  name .", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , ID FROM swimmer", "binning": ""}, "VQL": "Visualize BAR SELECT name , ID FROM swimmer"}, "hardness": "Easy"}, {"nl_queries": "Give me a histogram for how many drama workshop groups are there in each city? Return both the city and the count.", "db_id": "cre_Drama_Workshop_Groups", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT City_Town , count(*) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID = T2.Address_ID GROUP BY T1.City_Town", "binning": ""}, "VQL": "Visualize BAR SELECT City_Town , count(*) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID = T2.Address_ID GROUP BY T1.City_Town"}, "hardness": "Medium"}, {"nl_queries": "Show me the correlation about what are the ids of the trips that lasted the longest and how long did they last?", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT id , duration FROM trip ORDER BY duration DESC LIMIT 3", "binning": ""}, "VQL": "Visualize SCATTER SELECT id , duration FROM trip ORDER BY duration DESC LIMIT 3"}, "hardness": "Medium"}, {"nl_queries": "Please use a bar chart to compare the number of customers of each customer's move in date, could you rank by the how many date moved in from high to low?", "db_id": "local_govt_and_lot", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) DESC"}, "hardness": "Hard"}, {"nl_queries": "Draw a bar chart about the distribution of  date_address_to and the amount of date_address_to , and group by attribute other_details and bin date_address_to by weekday.", "db_id": "behavior_monitoring", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC", "binning": "BIN date_address_to BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "Find the pixel aspect ratio and the nation of the tv channels that do not use English Show the number of different pixel aspect ratios with a bar chart\n\n\n\n, I want to show by the Pixel_aspect_ratio_PAR in ascending.", "db_id": "tvshow", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY Pixel_aspect_ratio_PAR ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY Pixel_aspect_ratio_PAR ASC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, draw a bar chart about the distribution of  first_name and  manager_id .", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT FIRST_NAME , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)", "binning": ""}, "VQL": "Visualize BAR SELECT FIRST_NAME , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)"}, "hardness": "Extra Hard"}, {"nl_queries": "What is the sum of capacity of cinemas open for each year? Return a line chart, could you show in descending by the X-axis?", "db_id": "cinema", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Openning_year , SUM(Capacity) FROM cinema  ORDER BY Openning_year DESC", "binning": "BIN Openning_year BY YEAR"}, "VQL": "Visualize LINE SELECT Openning_year , SUM(Capacity) FROM cinema  ORDER BY Openning_year DESC BIN Openning_year BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "Visualize a bar chart for how many students are in each department?, and could you sort y axis in descending order?", "db_id": "college_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY count(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "For each bed type, find the average room price Show bar chart, rank bar in desc order.", "db_id": "inn_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT bedType , avg(basePrice) FROM Rooms GROUP BY bedType ORDER BY bedType DESC", "binning": ""}, "VQL": "Visualize BAR SELECT bedType , avg(basePrice) FROM Rooms GROUP BY bedType ORDER BY bedType DESC"}, "hardness": "Medium"}, {"nl_queries": "List the types of competition and the number of competitions of each type in a bar chart, show Y in asc order.", "db_id": "sports_competition", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Competition_type , COUNT(*) FROM competition GROUP BY Competition_type ORDER BY COUNT(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Competition_type , COUNT(*) FROM competition GROUP BY Competition_type ORDER BY COUNT(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "Return a histogram on what are the different transaction types, and how many transactions of each have taken place?, and rank total number from high to low order please.", "db_id": "customers_card_transactions", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT transaction_type , count(*) FROM Financial_transactions GROUP BY transaction_type ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT transaction_type , count(*) FROM Financial_transactions GROUP BY transaction_type ORDER BY count(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "Show different publishers together with the number of publications they have Plot them as bar chart, and I want to order by the bars in asc.", "db_id": "book_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Publisher , COUNT(*) FROM publication GROUP BY Publisher ORDER BY Publisher ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Publisher , COUNT(*) FROM publication GROUP BY Publisher ORDER BY Publisher ASC"}, "hardness": "Medium"}, {"nl_queries": "Return a bar chart showing the minimum room count of apartments in different type.", "db_id": "apartment_rentals", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT apt_type_code , min(room_count) FROM Apartments GROUP BY apt_type_code", "binning": ""}, "VQL": "Visualize BAR SELECT apt_type_code , min(room_count) FROM Apartments GROUP BY apt_type_code"}, "hardness": "Easy"}, {"nl_queries": "Visualize a bar chart about the distribution of Name and Weight , could you sort from high to low by the Name?", "db_id": "candidate_poll", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , Weight FROM people ORDER BY Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , Weight FROM people ORDER BY Name DESC"}, "hardness": "Easy"}, {"nl_queries": "Show me about the correlation between  Shop_ID and  Employee_ID , and group by attribute Is_full_time in a scatter chart.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Shop_ID , Employee_ID FROM hiring GROUP BY Is_full_time", "binning": ""}, "VQL": "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM hiring GROUP BY Is_full_time"}, "hardness": "Easy"}, {"nl_queries": "What is the maximum age for each pet type? Please show me a bar chart, and show y-axis from low to high order.", "db_id": "pets_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT PetType , max(pet_age) FROM pets GROUP BY PetType ORDER BY max(pet_age) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT PetType , max(pet_age) FROM pets GROUP BY PetType ORDER BY max(pet_age) ASC"}, "hardness": "Easy"}, {"nl_queries": "A bar chart for showing the number of the dates of performances with attending members whose roles are \"Violin\", and I want to list X in ascending order.", "db_id": "performance_attendance", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Date , COUNT(Date) FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID = T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID = T3.Performance_ID WHERE T2.Role = \"Violin\" GROUP BY Date ORDER BY Date ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Date , COUNT(Date) FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID = T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID = T3.Performance_ID WHERE T2.Role = \"Violin\" GROUP BY Date ORDER BY Date ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "Plot the number of phone by grouped by phone as a bar graph, and could you list X in asc order please?", "db_id": "chinook_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY Phone ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY Phone ASC"}, "hardness": "Medium"}, {"nl_queries": "How many competitions for each country?, and list in asc by the X-axis.", "db_id": "sports_competition", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Country , COUNT(Country) FROM competition GROUP BY Country ORDER BY Country ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Country ORDER BY Country ASC"}, "hardness": "Medium"}, {"nl_queries": "Show different types of ships and the average tonnage of ships of each type in a bar chart, rank total number in descending order please.", "db_id": "ship_mission", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY avg(Tonnage) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY avg(Tonnage) DESC"}, "hardness": "Medium"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, show me about the change of manager_id over hire_date in a line chart, and show from high to low by the x-axis.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC"}, "hardness": "Hard"}, {"nl_queries": "Visualize a bar chart showing each location's total number of passengers, show by the y-axis from high to low.", "db_id": "train_station", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Location , sum(total_passengers) FROM station GROUP BY LOCATION ORDER BY sum(total_passengers) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Location , sum(total_passengers) FROM station GROUP BY LOCATION ORDER BY sum(total_passengers) DESC"}, "hardness": "Medium"}, {"nl_queries": "Show me the number of card type code by card type code in a histogram, sort X-axis in ascending order.", "db_id": "customers_card_transactions", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT card_type_code , COUNT(card_type_code) FROM Customers_cards GROUP BY card_type_code ORDER BY card_type_code ASC", "binning": ""}, "VQL": "Visualize BAR SELECT card_type_code , COUNT(card_type_code) FROM Customers_cards GROUP BY card_type_code ORDER BY card_type_code ASC"}, "hardness": "Medium"}, {"nl_queries": "A bar chart about what is the date and id of the transcript with at least 2 courses listed?, sort from high to low by the transcript_id please.", "db_id": "student_transcripts_tracking", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id ORDER BY T1.transcript_id DESC", "binning": ""}, "VQL": "Visualize BAR SELECT transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id ORDER BY T1.transcript_id DESC"}, "hardness": "Medium"}, {"nl_queries": "How many dogs departed in each day? Visualize with a line chart that groups by departed date, display in asc by the X-axis.", "db_id": "dog_kennels", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date_arrived , COUNT(date_arrived) FROM Dogs GROUP BY date_arrived ORDER BY date_arrived ASC", "binning": ""}, "VQL": "Visualize LINE SELECT date_arrived , COUNT(date_arrived) FROM Dogs GROUP BY date_arrived ORDER BY date_arrived ASC"}, "hardness": "Medium"}, {"nl_queries": "Show the average of cloud cover from each date, and I want to show Y-axis from high to low order please.", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date , AVG(cloud_cover) FROM weather  ORDER BY AVG(cloud_cover) DESC", "binning": "BIN date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date , AVG(cloud_cover) FROM weather  ORDER BY AVG(cloud_cover) DESC BIN date BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "A bar chart about what are the average ages for male and female students?", "db_id": "allergy_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Sex , avg(age) FROM Student GROUP BY sex", "binning": ""}, "VQL": "Visualize BAR SELECT Sex , avg(age) FROM Student GROUP BY sex"}, "hardness": "Easy"}, {"nl_queries": "How many courses are in the Psychology department for each year? Return a line chart, and order X from low to high order.", "db_id": "college_2", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT year , COUNT(year) FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology'  ORDER BY year ASC", "binning": "BIN year BY YEAR"}, "VQL": "Visualize LINE SELECT year , COUNT(year) FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology'  ORDER BY year ASC BIN year BY YEAR"}, "hardness": "Extra Hard"}, {"nl_queries": "What is the average of number_of_platforms for each location? Show the comparison with a bar chart, could you list x-axis in ascending order?", "db_id": "train_station", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Location , AVG(Number_of_Platforms) FROM station GROUP BY Location ORDER BY Location ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Location , AVG(Number_of_Platforms) FROM station GROUP BY Location ORDER BY Location ASC"}, "hardness": "Medium"}, {"nl_queries": "Visualize a bar chart about the distribution of All_Road and All_Games_Percent , and sort in desc by the All_Road.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Road , All_Games_Percent FROM basketball_match ORDER BY All_Road DESC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Road , All_Games_Percent FROM basketball_match ORDER BY All_Road DESC"}, "hardness": "Easy"}, {"nl_queries": "Give me the comparison about meter_100 over the meter_400 , could you show by the meter_100 in ascending?", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_400 , meter_100 FROM swimmer ORDER BY meter_100 ASC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_400 , meter_100 FROM swimmer ORDER BY meter_100 ASC"}, "hardness": "Easy"}, {"nl_queries": "How many climbers are from each country, order in descending by the x axis.", "db_id": "climbing", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY Country DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY Country DESC"}, "hardness": "Medium"}, {"nl_queries": "How many enrolment students in each month? Return a bar chart binning date of enrolment by month interval, and I want to order in asc by the y-axis.", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Student_Course_Enrolment  ORDER BY COUNT(date_of_enrolment) ASC", "binning": "BIN date_of_enrolment BY MONTH"}, "VQL": "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Student_Course_Enrolment  ORDER BY COUNT(date_of_enrolment) ASC BIN date_of_enrolment BY MONTH"}, "hardness": "Medium"}, {"nl_queries": "What are the titles of all movies that have rating star is between 3 and 5, and count them by a bar chart, and I want to show by the y axis in asc.", "db_id": "movie_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT title , COUNT(title) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T1.stars BETWEEN 3 AND 5 GROUP BY title ORDER BY COUNT(title) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT title , COUNT(title) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T1.stars BETWEEN 3 AND 5 GROUP BY title ORDER BY COUNT(title) ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "What are the number of the category of music festivals with result \"Awarded\"?, show in descending by the x axis.", "db_id": "music_4", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC"}, "hardness": "Hard"}, {"nl_queries": "For those payments processed with Visa, bin the payment day into Year interval and compute the total amount payment as the Y-axis, and sort by the y axis in descending please.", "db_id": "insurance_policies", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY SUM(Amount_Payment) DESC", "binning": "BIN Date_Payment_Made BY YEAR"}, "VQL": "Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY SUM(Amount_Payment) DESC BIN Date_Payment_Made BY YEAR"}, "hardness": "Hard"}, {"nl_queries": "Give me the comparison about All_Games_Percent over the ACC_Regular_Season by a bar chart, rank All_Games_Percent from low to high order.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC"}, "hardness": "Easy"}, {"nl_queries": "Give me a histogram for which parts have more than 2 faults? Show the part name and id.", "db_id": "assets_maintenance", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.part_name , T1.part_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id", "binning": ""}, "VQL": "Visualize BAR SELECT T1.part_name , T1.part_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id"}, "hardness": "Easy"}, {"nl_queries": "Plot a scatter chart, star rating code by the average of price range.", "db_id": "cre_Theme_park", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT star_rating_code , avg(price_range) FROM HOTELS GROUP BY star_rating_code", "binning": ""}, "VQL": "Visualize SCATTER SELECT star_rating_code , avg(price_range) FROM HOTELS GROUP BY star_rating_code"}, "hardness": "Easy"}, {"nl_queries": "Draw a bar chart about the distribution of  Start_from and the average of Employee_ID bin start_from by weekday.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Start_from , AVG(Employee_ID) FROM hiring", "binning": "BIN Start_from BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Start_from , AVG(Employee_ID) FROM hiring BIN Start_from BY WEEKDAY"}, "hardness": "Easy"}, {"nl_queries": "A bar chart for what are the number of the last names for all scholarship students?, sort in descending by the x axis.", "db_id": "game_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT LName , COUNT(LName) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T1.onscholarship = 'Y' GROUP BY LName ORDER BY LName DESC", "binning": ""}, "VQL": "Visualize BAR SELECT LName , COUNT(LName) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T1.onscholarship = 'Y' GROUP BY LName ORDER BY LName DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "I want to see trend of the number of date of notes by date of notes, and show x-axis from low to high order.", "db_id": "behavior_monitoring", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY date_of_notes ASC", "binning": "BIN date_of_notes BY YEAR"}, "VQL": "Visualize LINE SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY date_of_notes ASC BIN date_of_notes BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, find founder and the sum of price , and group by attribute founder, and visualize them by a bar chart, and could you display X-axis in desc order?", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Founder , SUM(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder ORDER BY Founder DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Founder , SUM(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder ORDER BY Founder DESC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, visualize a bar chart about the distribution of phone_number and manager_id , order by the x axis in descending.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT PHONE_NUMBER , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY PHONE_NUMBER DESC", "binning": ""}, "VQL": "Visualize BAR SELECT PHONE_NUMBER , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY PHONE_NUMBER DESC"}, "hardness": "Medium"}, {"nl_queries": "For all employees who have the letters D or S in their first name, visualize a bar chart about the distribution of hire_date and the sum of department_id bin hire_date by time, I want to list by the sum department id in ascending.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(DEPARTMENT_ID) ASC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY MONTH"}, "hardness": "Extra Hard"}, {"nl_queries": "Find the number of courses for each subject in a bar chart, and rank x-axis in ascending order please.", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT subject_name , COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id GROUP BY T1.subject_id ORDER BY subject_name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT subject_name , COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id GROUP BY T1.subject_id ORDER BY subject_name ASC"}, "hardness": "Hard"}, {"nl_queries": "Give me the comparison about meter_100 over the meter_300 by a bar chart, list X in descending order.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_300 , meter_100 FROM swimmer ORDER BY meter_300 DESC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_300 , meter_100 FROM swimmer ORDER BY meter_300 DESC"}, "hardness": "Easy"}, {"nl_queries": "Draw a bar chart about the distribution of ACC_Road and School_ID , and group by attribute All_Home, and display by the total number in descending.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Road , School_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY School_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Road , School_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY School_ID DESC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, return a bar chart about the distribution of  hire_date and the sum of manager_id bin hire_date by time.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) BIN HIRE_DATE BY MONTH"}, "hardness": "Medium"}, {"nl_queries": "Stacked bar chart of team_id for with each All_Home in each acc road, and rank Y-axis from high to low order.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY Team_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY Team_ID DESC"}, "hardness": "Medium"}, {"nl_queries": "Draw a bar chart for what are the ids and names of the battles that led to more than 10 people killed in total.", "db_id": "battle_death", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.name , T1.id FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle JOIN death AS T3 ON T2.id = T3.caused_by_ship_id", "binning": ""}, "VQL": "Visualize BAR SELECT T1.name , T1.id FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle JOIN death AS T3 ON T2.id = T3.caused_by_ship_id"}, "hardness": "Extra Hard"}, {"nl_queries": "Please compare the total enrollment for each type using a bar chart, display by the x axis in asc please.", "db_id": "protein_institute", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Type , sum(enrollment) FROM institution GROUP BY TYPE ORDER BY Type ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Type , sum(enrollment) FROM institution GROUP BY TYPE ORDER BY Type ASC"}, "hardness": "Medium"}, {"nl_queries": "How many companies in each headquarter? Plot a bar chart.", "db_id": "gas_company", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters", "binning": ""}, "VQL": "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters"}, "hardness": "Easy"}, {"nl_queries": "List document type codes and the number of documents in each code. ", "db_id": "cre_Docs_and_Epenses", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Document_Type_Code , count(*) FROM Documents GROUP BY document_type_code", "binning": ""}, "VQL": "Visualize PIE SELECT Document_Type_Code , count(*) FROM Documents GROUP BY document_type_code"}, "hardness": "Easy"}, {"nl_queries": "For each record in schedule, show the number of films for each day in a bar chart, and list Date from high to low order.", "db_id": "cinema", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Date , COUNT(Date) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Date ORDER BY Date DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Date , COUNT(Date) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Date ORDER BY Date DESC"}, "hardness": "Hard"}, {"nl_queries": "Find the average of credits of courses that have more than one prerequisite for each title with a bar chart.", "db_id": "college_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT title , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title", "binning": ""}, "VQL": "Visualize BAR SELECT title , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title"}, "hardness": "Medium"}, {"nl_queries": "Draw a bar chart about the distribution of Start_from and the sum of Shop_ID , and group by attribute Is_full_time and bin start_from by weekday, and display total number of shop id in asc order.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Start_from , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Shop_ID) ASC", "binning": "BIN Start_from BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Start_from , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Shop_ID) ASC BIN Start_from BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "For events that have more than one participant, count the event details for a bar chart.", "db_id": "local_govt_in_alabama", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Event_Details , COUNT(Event_Details) FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY Event_Details", "binning": ""}, "VQL": "Visualize PIE SELECT Event_Details , COUNT(Event_Details) FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY Event_Details"}, "hardness": "Medium"}, {"nl_queries": "Show how many physicians for each department name they primarily affiliated in a pie chart.", "db_id": "hospital_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT T3.Name , COUNT(T3.Name) FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID WHERE T2.PrimaryAffiliation = 1 GROUP BY T3.Name", "binning": ""}, "VQL": "Visualize PIE SELECT T3.Name , COUNT(T3.Name) FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID WHERE T2.PrimaryAffiliation = 1 GROUP BY T3.Name"}, "hardness": "Hard"}, {"nl_queries": "Visualize a scatter chart about the correlation between  School_ID and  ACC_Percent , and group by attribute Team_Name.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY Team_Name", "binning": ""}, "VQL": "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY Team_Name"}, "hardness": "Easy"}, {"nl_queries": "How many customers use each payment method. ", "db_id": "department_store", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT payment_method_code , count(*) FROM customers GROUP BY payment_method_code", "binning": ""}, "VQL": "Visualize BAR SELECT payment_method_code , count(*) FROM customers GROUP BY payment_method_code"}, "hardness": "Easy"}, {"nl_queries": "For all employees who have the letters D or S in their first name, visualize a bar chart about the distribution of hire_date and the sum of department_id bin hire_date by weekday, and could you display by the sum department id in ascending?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(DEPARTMENT_ID) ASC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "Show the country names and the corresponding number of players. Plot them as pie chart.", "db_id": "match_season", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Country_name , COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country GROUP BY T1.Country_name", "binning": ""}, "VQL": "Visualize PIE SELECT Country_name , COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country GROUP BY T1.Country_name"}, "hardness": "Medium"}, {"nl_queries": "How many departments whose budget is more than the average budget in each building? Show me a bar chart.", "db_id": "college_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT building , COUNT(building) FROM department WHERE budget > (SELECT avg(budget) FROM department) GROUP BY building", "binning": ""}, "VQL": "Visualize BAR SELECT building , COUNT(building) FROM department WHERE budget > (SELECT avg(budget) FROM department) GROUP BY building"}, "hardness": "Medium"}, {"nl_queries": "For those employees who did not have any job in the past, give me the comparison about the sum of department_id over the hire_date bin hire_date by time by a bar chart, display y-axis in desc order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY SUM(DEPARTMENT_ID) DESC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY SUM(DEPARTMENT_ID) DESC BIN HIRE_DATE BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "For all employees who have the letters D or S in their first name, draw a bar chart about the distribution of  hire_date and the sum of manager_id bin hire_date by time.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH"}, "hardness": "Extra Hard"}, {"nl_queries": "What are the ids and details of events that have more than one participants Visualize by bar chart, and I want to show by the y-axis from high to low.", "db_id": "local_govt_in_alabama", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Event_Details , T1.Event_ID FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY T1.Event_Details ORDER BY T1.Event_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Event_Details , T1.Event_ID FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY T1.Event_Details ORDER BY T1.Event_ID DESC"}, "hardness": "Hard"}, {"nl_queries": "Show me about the distribution of meter_400 and ID in a bar chart, and could you order in descending by the y-axis?", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_400 , ID FROM swimmer ORDER BY ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_400 , ID FROM swimmer ORDER BY ID DESC"}, "hardness": "Easy"}, {"nl_queries": "Show the number of documents created in each day and bin document date by weekday and group by document type with a stacked bar chart, and could you order Y in descending order?", "db_id": "cre_Docs_and_Epenses", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Name ORDER BY COUNT(Document_Date) DESC", "binning": "BIN Document_Date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Name ORDER BY COUNT(Document_Date) DESC BIN Document_Date BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "Show the number of courses each instructor taught in a stacked bar chart The x-axis is the instructor's first name and group by course code, list from high to low by the names.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY CRS_CODE ,  EMP_FNAME ORDER BY EMP_FNAME DESC", "binning": ""}, "VQL": "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY CRS_CODE ,  EMP_FNAME ORDER BY EMP_FNAME DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "Show the location codes and the number of documents in each location in a bar chart, and I want to display by the names from high to low.", "db_id": "cre_Doc_Tracking_DB", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Location_Code , count(*) FROM Document_locations GROUP BY location_code ORDER BY Location_Code DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Location_Code , count(*) FROM Document_locations GROUP BY location_code ORDER BY Location_Code DESC"}, "hardness": "Medium"}, {"nl_queries": "How many professors for each first name? Show me a bar chart, and rank the number of emp fname in desc order please.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num = T2.emp_num GROUP BY EMP_FNAME ORDER BY COUNT(EMP_FNAME) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num = T2.emp_num GROUP BY EMP_FNAME ORDER BY COUNT(EMP_FNAME) DESC"}, "hardness": "Hard"}, {"nl_queries": "What is the average weight for each type of pet. Show a pie chart.", "db_id": "pets_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT PetType , avg(weight) FROM pets GROUP BY pettype", "binning": ""}, "VQL": "Visualize PIE SELECT PetType , avg(weight) FROM pets GROUP BY pettype"}, "hardness": "Easy"}, {"nl_queries": "Give me the comparison about meter_100 over the meter_700 , and sort by the X-axis in ascending.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_700 ASC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_700 ASC"}, "hardness": "Easy"}, {"nl_queries": "A bar chart showing the number of members in each country, I want to display y-axis in asc order.", "db_id": "decoration_competition", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Country , COUNT(Country) FROM member GROUP BY Country ORDER BY COUNT(Country) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM member GROUP BY Country ORDER BY COUNT(Country) ASC"}, "hardness": "Medium"}, {"nl_queries": "A bar chart shows the distribution of Name and Weight , and sort by the Name from low to high.", "db_id": "candidate_poll", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , Weight FROM people ORDER BY Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , Weight FROM people ORDER BY Name ASC"}, "hardness": "Easy"}, {"nl_queries": "Draw a bar chart for what is the average age for each city and what are those cities?, and sort by the X-axis from low to high.", "db_id": "dorm_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY city_code ASC", "binning": ""}, "VQL": "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY city_code ASC"}, "hardness": "Medium"}, {"nl_queries": "Show me about the distribution of Is_full_time and the average of Employee_ID , and group by attribute Is_full_time in a bar chart, sort in ascending by the bars.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Is_full_time , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Is_full_time , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC"}, "hardness": "Medium"}, {"nl_queries": "For those payments processed with Visa, show me the number of payments of each day of the week using a bar chart, and sort total number in ascending order.", "db_id": "insurance_policies", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY COUNT(Date_Payment_Made) ASC", "binning": "BIN Date_Payment_Made BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments WHERE Payment_Method_Code = 'Visa'  ORDER BY COUNT(Date_Payment_Made) ASC BIN Date_Payment_Made BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "For all employees who have the letters D or S in their first name, a scatter chart shows the correlation between  employee_id and  manager_id .", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT EMPLOYEE_ID , MANAGER_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'", "binning": ""}, "VQL": "Visualize SCATTER SELECT EMPLOYEE_ID , MANAGER_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'"}, "hardness": "Hard"}, {"nl_queries": "For all employees in the same department as Clara excluding Clara, bin their hire date into the month interval, and count how many employees in each month for a bar chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE department_id = ( SELECT department_id FROM employees WHERE first_name = \"Clara\") AND first_name != \"Clara\"", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE department_id = ( SELECT department_id FROM employees WHERE first_name = \"Clara\") AND first_name != \"Clara\" BIN HIRE_DATE BY MONTH"}, "hardness": "Medium"}, {"nl_queries": "Create a bar chart showing total number of number of platforms across location, and show total number in asc order.", "db_id": "train_station", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Location , SUM(Number_of_Platforms) FROM station GROUP BY Location ORDER BY SUM(Number_of_Platforms) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Location , SUM(Number_of_Platforms) FROM station GROUP BY Location ORDER BY SUM(Number_of_Platforms) ASC"}, "hardness": "Medium"}, {"nl_queries": "For all employees who have the letters D or S in their first name, a bar chart shows the distribution of  hire_date and the sum of salary bin hire_date by weekday.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "Give me the comparison about the average of Employee_ID over the  Is_full_time , and group by attribute Is_full_time by a bar chart.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Is_full_time , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time", "binning": ""}, "VQL": "Visualize BAR SELECT Is_full_time , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time"}, "hardness": "Easy"}, {"nl_queries": "Show how many flights each pilot has flied in a pie chart.", "db_id": "flight_company", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Pilot , COUNT(Pilot) FROM flight GROUP BY Pilot", "binning": ""}, "VQL": "Visualize PIE SELECT Pilot , COUNT(Pilot) FROM flight GROUP BY Pilot"}, "hardness": "Easy"}, {"nl_queries": "For each customer status code, how many customers are classified that way Visualize by bar chart, and I want to rank y axis in descending order.", "db_id": "driving_school", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT customer_status_code , count(*) FROM Customers GROUP BY customer_status_code ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT customer_status_code , count(*) FROM Customers GROUP BY customer_status_code ORDER BY count(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "What is the relationship between  CID and  DNO ?", "db_id": "college_3", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT CID , DNO FROM COURSE ORDER BY Credits", "binning": ""}, "VQL": "Visualize SCATTER SELECT CID , DNO FROM COURSE ORDER BY Credits"}, "hardness": "Easy"}, {"nl_queries": "What are the names and ids of every course with less than 2 sections. Visualize by bar chart.", "db_id": "student_transcripts_tracking", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.course_name , T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id", "binning": ""}, "VQL": "Visualize BAR SELECT T1.course_name , T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id"}, "hardness": "Easy"}, {"nl_queries": "Just list the first name of the employee and show the location id of the corresponding department using a bar chart, show bars from low to high order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT FIRST_NAME , LOCATION_ID FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T1.employee_id = T2.manager_id ORDER BY FIRST_NAME ASC", "binning": ""}, "VQL": "Visualize BAR SELECT FIRST_NAME , LOCATION_ID FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T1.employee_id = T2.manager_id ORDER BY FIRST_NAME ASC"}, "hardness": "Hard"}, {"nl_queries": "Give me a bar chart about the average of number_of_platforms in different locations.", "db_id": "train_station", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Location , AVG(Number_of_Platforms) FROM station GROUP BY Location", "binning": ""}, "VQL": "Visualize BAR SELECT Location , AVG(Number_of_Platforms) FROM station GROUP BY Location"}, "hardness": "Easy"}, {"nl_queries": "Draw a bar chart for what is average age of male for different job title?, order by the job in asc.", "db_id": "network_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job ORDER BY job ASC", "binning": ""}, "VQL": "Visualize BAR SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job ORDER BY job ASC"}, "hardness": "Hard"}, {"nl_queries": "Find the total number of students enrolled in the colleges that were founded after the year of 1850 for each affiliation type Show bar chart, show total number of enrollment in descending order please.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY sum(Enrollment) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY sum(Enrollment) DESC"}, "hardness": "Hard"}, {"nl_queries": "Return a bar chart about the distribution of Name and Weight , and could you sort in desc by the Name please?", "db_id": "candidate_poll", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , Weight FROM people ORDER BY Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , Weight FROM people ORDER BY Name DESC"}, "hardness": "Easy"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, show me about the distribution of email and department_id in a bar chart, sort by the EMAIL in descending please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT EMAIL , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY EMAIL DESC", "binning": ""}, "VQL": "Visualize BAR SELECT EMAIL , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY EMAIL DESC"}, "hardness": "Medium"}, {"nl_queries": "For each position, what is the minimum time students spent practicing Plot them as bar chart, and I want to display by the total number in descending please.", "db_id": "soccer_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT pPos , min(T2.HS) FROM tryout AS T1 JOIN player AS T2 ON T1.pID = T2.pID GROUP BY pPos ORDER BY min(T2.HS) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT pPos , min(T2.HS) FROM tryout AS T1 JOIN player AS T2 ON T1.pID = T2.pID GROUP BY pPos ORDER BY min(T2.HS) DESC"}, "hardness": "Medium"}, {"nl_queries": "I want to know the proportion of different industry types.", "db_id": "company_office", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry", "binning": ""}, "VQL": "Visualize PIE SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry"}, "hardness": "Easy"}, {"nl_queries": "What are the countries for applications with at most 3 wines? Return the result in a bar chart, and could you display County in ascending order?", "db_id": "wine_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT County , COUNT(County) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation GROUP BY County ORDER BY County ASC", "binning": ""}, "VQL": "Visualize BAR SELECT County , COUNT(County) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation GROUP BY County ORDER BY County ASC"}, "hardness": "Hard"}, {"nl_queries": "Display a bar chart for what are the names of climbers and the corresponding heights of the mountains that they climb?, and show by the Height in descending.", "db_id": "climbing", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID ORDER BY T2.Height DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID ORDER BY T2.Height DESC"}, "hardness": "Medium"}, {"nl_queries": "How many parties of the time they took office, binning the took office into Weekday interval, and then split by the minister's name, and show y axis from high to low order.", "db_id": "party_people", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Took_office , COUNT(Took_office) FROM party GROUP BY Minister ORDER BY COUNT(Took_office) DESC", "binning": "BIN Took_office BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Took_office , COUNT(Took_office) FROM party GROUP BY Minister ORDER BY COUNT(Took_office) DESC BIN Took_office BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "What are the first names and support rep ids for employees serving 10 or more customers, and order X-axis in descending order.", "db_id": "chinook_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.FirstName DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.FirstName DESC"}, "hardness": "Medium"}, {"nl_queries": "Visualize a bar chart about the distribution of meter_200 and the average of ID , and group by attribute meter_200, display from low to high by the X-axis.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_200 , AVG(ID) FROM swimmer GROUP BY meter_200 ORDER BY meter_200 ASC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_200 , AVG(ID) FROM swimmer GROUP BY meter_200 ORDER BY meter_200 ASC"}, "hardness": "Medium"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, show me about the distribution of job_id and the sum of employee_id , and group by attribute job_id in a bar chart, and show in descending by the bar.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees who did not have any job in the past, return a bar chart about the distribution of job_id and the sum of manager_id , and group by attribute job_id, and could you list from high to low by the sum manager id?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, find name and manufacturer , and group by attribute name, and visualize them by a bar chart, and display y-axis in asc order.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Manufacturer ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Manufacturer ASC"}, "hardness": "Hard"}, {"nl_queries": "How many students are older than 20 in each dorm Visualize by bar chart, and display in descending by the bar.", "db_id": "dorm_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT dorm_name , count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T1.age > 20 GROUP BY T3.dorm_name ORDER BY dorm_name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT dorm_name , count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T1.age > 20 GROUP BY T3.dorm_name ORDER BY dorm_name DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "Give me the comparison about the average of monthly_rental over the  date_address_from , and group by attribute other_details and bin date_address_from by weekday by a bar chart.", "db_id": "behavior_monitoring", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC", "binning": "BIN date_address_from BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "What are the number of the venues of all the matches? Sort them in the descending order of match date.", "db_id": "city_record", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Venue , COUNT(Venue) FROM MATCH GROUP BY Venue ORDER BY date DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Venue , COUNT(Venue) FROM MATCH GROUP BY Venue ORDER BY date DESC"}, "hardness": "Medium"}, {"nl_queries": "What are the investors of entrepreneurs and the corresponding number of entrepreneurs invested by each investor, and could you display Y in asc order?", "db_id": "entrepreneur", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "Show the number of courses each teacher teaches in a bar chart, I want to list total number in desc order.", "db_id": "course_teach", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID GROUP BY Name ORDER BY COUNT(Name) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID GROUP BY Name ORDER BY COUNT(Name) DESC"}, "hardness": "Hard"}, {"nl_queries": "What are the dates in which the mean sea level pressure was between 303 and 31, and count them by a bar chart, and order y axis in descending order please.", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date , COUNT(date) FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31  ORDER BY COUNT(date) DESC", "binning": "BIN date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31  ORDER BY COUNT(date) DESC BIN date BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "Give me a histogram for what are the names and total prices of all products in the store?, could you order in ascending by the x axis?", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , SUM(Price) FROM products GROUP BY Name ORDER BY Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , SUM(Price) FROM products GROUP BY Name ORDER BY Name ASC"}, "hardness": "Medium"}, {"nl_queries": "Draw a pie chart about the proportion of all home and the sum of School_ID.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home", "binning": ""}, "VQL": "Visualize PIE SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home"}, "hardness": "Easy"}, {"nl_queries": "Find the enrollment date for all the tests that have \"Pass\" result, and count them by a bar chart", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = \"Pass\"", "binning": "BIN date_of_enrolment BY MONTH"}, "VQL": "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = \"Pass\" BIN date_of_enrolment BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, return a bar chart about the distribution of name and the average of price , and group by attribute name, and order X-axis in asc order.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC"}, "hardness": "Hard"}, {"nl_queries": "I want to see trend of the average of budget in billions by creation, list from high to low by the X-axis.", "db_id": "department_management", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Creation , AVG(Budget_in_Billions) FROM department  ORDER BY Creation DESC", "binning": "BIN Creation BY YEAR"}, "VQL": "Visualize LINE SELECT Creation , AVG(Budget_in_Billions) FROM department  ORDER BY Creation DESC BIN Creation BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "What are the total number of credits offered by each department Show bar chart, could you show in ascending by the bar?", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT DEPT_CODE , sum(T1.crs_credit) FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code = T2.crs_code GROUP BY T1.dept_code ORDER BY DEPT_CODE ASC", "binning": ""}, "VQL": "Visualize BAR SELECT DEPT_CODE , sum(T1.crs_credit) FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code = T2.crs_code GROUP BY T1.dept_code ORDER BY DEPT_CODE ASC"}, "hardness": "Hard"}, {"nl_queries": "For each continent where the average life expectancy is shorter than 72, draw a bar chart to show their average life expectancy, and display by the Continent from high to low.", "db_id": "world_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent DESC"}, "hardness": "Medium"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, return a bar chart about the distribution of job_id and the sum of department_id , and group by attribute job_id, could you rank bars in descending order?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "Visualize a bar chart about the distribution of meter_400 and meter_100 , I want to show by the bar in ascending please.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_400 , meter_100 FROM swimmer ORDER BY meter_400 ASC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_400 , meter_100 FROM swimmer ORDER BY meter_400 ASC"}, "hardness": "Easy"}, {"nl_queries": "How many faculty members do we have for each rank? Render a bar chart.", "db_id": "activity_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Rank , count(Rank) FROM Faculty GROUP BY Rank", "binning": ""}, "VQL": "Visualize BAR SELECT Rank , count(Rank) FROM Faculty GROUP BY Rank"}, "hardness": "Medium"}, {"nl_queries": "Visualize a pie chart about the proportion of the number of grape of the wines whose price is bigger than 100 ordered by year.", "db_id": "wine_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Grape , COUNT(Grape) FROM WINE WHERE Price > 100 GROUP BY Grape", "binning": ""}, "VQL": "Visualize PIE SELECT Grape , COUNT(Grape) FROM WINE WHERE Price > 100 GROUP BY Grape"}, "hardness": "Medium"}, {"nl_queries": "Draw a bar chart about the distribution of name and meter_100 , sort y axis in desc order.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , meter_100 FROM swimmer ORDER BY meter_100 DESC", "binning": ""}, "VQL": "Visualize BAR SELECT name , meter_100 FROM swimmer ORDER BY meter_100 DESC"}, "hardness": "Easy"}, {"nl_queries": "How many students are enrolled in colleges that have student accepted during tryouts, and in which states are those colleges. Plot them as pie chart.", "db_id": "soccer_2", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT state , enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.decision = 'yes'", "binning": ""}, "VQL": "Visualize PIE SELECT state , enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.decision = 'yes'"}, "hardness": "Medium"}, {"nl_queries": "For those employees who was hired before 2002-06-21, give me the comparison about the sum of salary over the  job_id , and group by attribute job_id.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID"}, "hardness": "Medium"}, {"nl_queries": "Return a bar chart on what are the id and name of the mountains that have at least 2 photos?, could you order by the bars in ascending please?", "db_id": "mountain_photos", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.name , T1.id FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id ORDER BY T1.name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.name , T1.id FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id ORDER BY T1.name ASC"}, "hardness": "Medium"}, {"nl_queries": "Give me the comparison about Team_ID over the All_Home , and group by attribute ACC_Home by a bar chart, and order bars in desc order.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home DESC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home DESC"}, "hardness": "Medium"}, {"nl_queries": "Plot the total number by grouped by booking status code as a bar graph, sort in ascending by the Y.", "db_id": "apartment_rentals", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who did not have any job in the past, return a bar chart about the distribution of job_id and the sum of employee_id , and group by attribute job_id, list by the X-axis in ascending please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY JOB_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY JOB_ID ASC"}, "hardness": "Hard"}, {"nl_queries": "How many faculty members do we have for each faculty rank Show bar chart, display in asc by the bars.", "db_id": "activity_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Rank , count(*) FROM Faculty GROUP BY rank ORDER BY Rank ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY rank ORDER BY Rank ASC"}, "hardness": "Medium"}, {"nl_queries": "Show me the trend about what are all the calendar dates and day Numbers?", "db_id": "cre_Doc_Tracking_DB", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Calendar_Date , Day_Number FROM Ref_calendar", "binning": ""}, "VQL": "Visualize LINE SELECT Calendar_Date , Day_Number FROM Ref_calendar"}, "hardness": "Easy"}, {"nl_queries": "What are the completion dates of all the tests that have result \"Fail\", and count them by a bar chart, and show in desc by the y axis.", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_of_completion , COUNT(date_of_completion) FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = \"Fail\"  ORDER BY COUNT(date_of_completion) DESC", "binning": "BIN date_of_completion BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_of_completion , COUNT(date_of_completion) FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = \"Fail\"  ORDER BY COUNT(date_of_completion) DESC BIN date_of_completion BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "A bar chart compares the ages of all artists, and rank in desc by the names.", "db_id": "theme_gallery", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , Age FROM artist ORDER BY Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , Age FROM artist ORDER BY Name DESC"}, "hardness": "Easy"}, {"nl_queries": "Show the relationship between card number and card id with a scatter chart.", "db_id": "customers_card_transactions", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT card_id , card_number FROM Customers_cards", "binning": ""}, "VQL": "Visualize SCATTER SELECT card_id , card_number FROM Customers_cards"}, "hardness": "Easy"}, {"nl_queries": "What are the names of all products, and count them by a bar chart, and could you list by the Y-axis from low to high?", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY COUNT(Name) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY COUNT(Name) ASC"}, "hardness": "Medium"}, {"nl_queries": "I want to compare the number of the names of phones by a bar chart, and show bars from high to low order.", "db_id": "phone_market", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY Name ORDER BY Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY Name ORDER BY Name DESC"}, "hardness": "Hard"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, a bar chart shows the distribution of hire_date and the average of manager_id bin hire_date by time, and order by the Y in asc.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(MANAGER_ID) ASC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH"}, "hardness": "Extra Hard"}, {"nl_queries": "Bar chart x axis participant type code y axis the number of participant type code, and list in ascending by the y-axis.", "db_id": "local_govt_in_alabama", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code ORDER BY COUNT(Participant_Type_Code) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code ORDER BY COUNT(Participant_Type_Code) ASC"}, "hardness": "Medium"}, {"nl_queries": "What is the date of enrollment of the course named \"Spanish\", and count them by a bar chart", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\"", "binning": "BIN date_of_enrolment BY MONTH"}, "VQL": "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\" BIN date_of_enrolment BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "Return a bar chart on what are the different ship flags, and how many ships have each?, order in asc by the bar.", "db_id": "ship_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY Flag ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY Flag ASC"}, "hardness": "Medium"}, {"nl_queries": "Show the company name with the number of gas station in a pie chart.", "db_id": "gas_company", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Company , count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id", "binning": ""}, "VQL": "Visualize PIE SELECT Company , count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id"}, "hardness": "Medium"}, {"nl_queries": "Show the names of high school students and their corresponding number of friends in a bar chart, and order in descending by the x axis.", "db_id": "network_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.name , AVG(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.name , AVG(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name DESC"}, "hardness": "Hard"}, {"nl_queries": "What are the ids and names of the companies that operated more than one flight. Show the proportion.", "db_id": "flight_company", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT T1.name , T1.id FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id", "binning": ""}, "VQL": "Visualize PIE SELECT T1.name , T1.id FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id"}, "hardness": "Easy"}, {"nl_queries": "A bar chart showing the number of debates in each venue for those on the negative side.", "db_id": "debate", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Venue , COUNT(Venue) FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID = T2.Debate_ID JOIN people AS T3 ON T1.Negative = T3.People_ID GROUP BY Venue", "binning": ""}, "VQL": "Visualize PIE SELECT Venue , COUNT(Venue) FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID = T2.Debate_ID JOIN people AS T3 ON T1.Negative = T3.People_ID GROUP BY Venue"}, "hardness": "Medium"}, {"nl_queries": "Visualize a bar chart about the distribution of  All_Home and  School_ID , and group by attribute ACC_Road.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home", "binning": ""}, "VQL": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home"}, "hardness": "Extra Hard"}, {"nl_queries": "A pie chart for what are the number of the descriptions for the aircrafts?", "db_id": "aircraft", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description", "binning": ""}, "VQL": "Visualize PIE SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description"}, "hardness": "Easy"}, {"nl_queries": "Find the name and account balance of the customer whose name includes the letter \u2018a\u2019 Visualize them using a bar chart, and I want to sort bars from high to low order.", "db_id": "loan_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT cust_name , acc_bal FROM customer WHERE cust_name LIKE '%a%' ORDER BY cust_name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT cust_name , acc_bal FROM customer WHERE cust_name LIKE '%a%' ORDER BY cust_name DESC"}, "hardness": "Hard"}, {"nl_queries": "What is the average rating of songs for each language Plot them as bar chart, I want to sort languages in ascending order.", "db_id": "music_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY languages ASC", "binning": ""}, "VQL": "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY languages ASC"}, "hardness": "Medium"}, {"nl_queries": "Give me a bar chart showing the number of films for each director.", "db_id": "cinema", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by", "binning": ""}, "VQL": "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by"}, "hardness": "Easy"}, {"nl_queries": "A bar chart shows the distribution of meter_200 and the average of ID , and group by attribute meter_200, and rank in ascending by the bar.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_200 , AVG(ID) FROM swimmer GROUP BY meter_200 ORDER BY meter_200 ASC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_200 , AVG(ID) FROM swimmer GROUP BY meter_200 ORDER BY meter_200 ASC"}, "hardness": "Medium"}, {"nl_queries": "What are the names of all the physicians who took appointments, and count them by a bar chart, and I want to show in desc by the the number of name.", "db_id": "hospital_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID GROUP BY Name ORDER BY COUNT(Name) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID GROUP BY Name ORDER BY COUNT(Name) DESC"}, "hardness": "Hard"}, {"nl_queries": "What are the statuses and average populations of each city Plot them as bar chart, and rank in asc by the x axis please.", "db_id": "farm", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Status , avg(Population) FROM city GROUP BY Status ORDER BY Status ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Status , avg(Population) FROM city GROUP BY Status ORDER BY Status ASC"}, "hardness": "Medium"}, {"nl_queries": "How many events have each participants attended? Show their average number by each participant type code using a bar chart, could you show by the Y-axis in ascending please?", "db_id": "local_govt_in_alabama", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Participant_Type_Code , AVG(count(*)) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID GROUP BY T1.Participant_Type_Code ORDER BY AVG(count(*)) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Participant_Type_Code , AVG(count(*)) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID GROUP BY T1.Participant_Type_Code ORDER BY AVG(count(*)) ASC"}, "hardness": "Hard"}, {"nl_queries": "A bar chart shows the distribution of  Name and  Weight .", "db_id": "candidate_poll", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , Weight FROM people", "binning": ""}, "VQL": "Visualize BAR SELECT Name , Weight FROM people"}, "hardness": "Easy"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, return a bar chart about the distribution of email and commission_pct , and sort in ascending by the EMAIL.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT EMAIL , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY EMAIL ASC", "binning": ""}, "VQL": "Visualize BAR SELECT EMAIL , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY EMAIL ASC"}, "hardness": "Medium"}, {"nl_queries": "Visualize a pie chart about the proportion of  other_details and the amount of other_details.", "db_id": "behavior_monitoring", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT other_details , COUNT(other_details) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC", "binning": ""}, "VQL": "Visualize PIE SELECT other_details , COUNT(other_details) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about the sum of code over the founder , and group by attribute founder, and rank by the bar in asc please.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T2.Founder ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T2.Founder ASC"}, "hardness": "Hard"}, {"nl_queries": "How many dogs who have gone through a treatment arrived in each day? Return a line chart that groups by arrived date, and could you order date_arrived in asc order?", "db_id": "dog_kennels", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date_arrived , COUNT(date_arrived) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id GROUP BY date_arrived ORDER BY date_arrived ASC", "binning": ""}, "VQL": "Visualize LINE SELECT date_arrived , COUNT(date_arrived) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id GROUP BY date_arrived ORDER BY date_arrived ASC"}, "hardness": "Hard"}, {"nl_queries": "Show me a bar chart for what is the average price of the products for each category?, could you show from high to low by the y axis?", "db_id": "customer_complaints", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT product_category_code , avg(product_price) FROM products GROUP BY product_category_code ORDER BY avg(product_price) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT product_category_code , avg(product_price) FROM products GROUP BY product_category_code ORDER BY avg(product_price) DESC"}, "hardness": "Medium"}, {"nl_queries": "A bar chart about what is the name of every city that has at least 15 stations and how many stations does it have?", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT city , COUNT(*) FROM station GROUP BY city", "binning": ""}, "VQL": "Visualize BAR SELECT city , COUNT(*) FROM station GROUP BY city"}, "hardness": "Easy"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about the average of manufacturer over the name , and group by attribute name by a bar chart, and order mean manufacturer from low to high order.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Manufacturer ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Manufacturer ASC"}, "hardness": "Hard"}, {"nl_queries": "Bar chart of mean salary from each dept name", "db_id": "college_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name", "binning": ""}, "VQL": "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name"}, "hardness": "Medium"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, show me about the distribution of job_id and the sum of employee_id , and group by attribute job_id in a bar chart, rank y axis in descending order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "Compare the total number of journalist with different nationality using a bar chart.", "db_id": "news_report", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nationality , COUNT(Nationality) FROM journalist GROUP BY Nationality", "binning": ""}, "VQL": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM journalist GROUP BY Nationality"}, "hardness": "Easy"}, {"nl_queries": "Show me minimal weight by sex in a histogram, order total number from high to low order.", "db_id": "candidate_poll", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Sex , min(weight) FROM people GROUP BY Sex ORDER BY min(weight) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Sex , min(weight) FROM people GROUP BY Sex ORDER BY min(weight) DESC"}, "hardness": "Easy"}, {"nl_queries": "Visualize a bar chart about the distribution of Is_full_time and the sum of Employee_ID , and group by attribute Is_full_time, could you rank in asc by the names?", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC"}, "hardness": "Medium"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, a bar chart shows the distribution of  hire_date and the amount of hire_date bin hire_date by weekday.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "For those employees who did not have any job in the past, return a line chart about the change of department_id over hire_date , list HIRE_DATE in descending order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE DESC", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE DESC"}, "hardness": "Medium"}, {"nl_queries": "List each language and the number of TV Channels using it in a bar chart, could you sort names in desc order?", "db_id": "tvshow", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language DESC"}, "hardness": "Medium"}, {"nl_queries": "Show me team_id by acc regular season in a histogram, and display from low to high by the y-axis.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY Team_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY Team_ID ASC"}, "hardness": "Easy"}, {"nl_queries": "Display a bar chart for what are the cost and treatment type description of each treatment?, and order from high to low by the bar.", "db_id": "dog_kennels", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT treatment_type_description , AVG(cost_of_treatment) FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY treatment_type_description ORDER BY treatment_type_description DESC", "binning": ""}, "VQL": "Visualize BAR SELECT treatment_type_description , AVG(cost_of_treatment) FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY treatment_type_description ORDER BY treatment_type_description DESC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who was hired before 2002-06-21, visualize a bar chart about the distribution of hire_date and the sum of department_id bin hire_date by time, and show Y-axis in desc order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(DEPARTMENT_ID) DESC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(DEPARTMENT_ID) DESC BIN HIRE_DATE BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "Draw a bar chart for how many stores are headquarted in each city?, list from high to low by the bar please.", "db_id": "store_product", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Headquartered_City , count(*) FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id GROUP BY t3.headquartered_city ORDER BY Headquartered_City DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Headquartered_City , count(*) FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id GROUP BY t3.headquartered_city ORDER BY Headquartered_City DESC"}, "hardness": "Hard"}, {"nl_queries": "How many songs were released for each format Show bar chart, and display Y-axis in ascending order.", "db_id": "music_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT formats , count(*) FROM files GROUP BY formats ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT formats , count(*) FROM files GROUP BY formats ORDER BY count(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "How many assets can each parts be used in? List the part name and the number, I want to order Y-axis in descending order.", "db_id": "assets_maintenance", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT part_name , count(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_name ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT part_name , count(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_name ORDER BY count(*) DESC"}, "hardness": "Hard"}, {"nl_queries": "Bar graph to show the average of product price from different product category code, and show bar in descending order.", "db_id": "customer_complaints", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT product_category_code , avg(product_price) FROM products GROUP BY product_category_code ORDER BY product_category_code DESC", "binning": ""}, "VQL": "Visualize BAR SELECT product_category_code , avg(product_price) FROM products GROUP BY product_category_code ORDER BY product_category_code DESC"}, "hardness": "Medium"}, {"nl_queries": "I want to know the proportion of employees for each role code.", "db_id": "cre_Doc_Tracking_DB", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Role_Code , count(*) FROM Employees GROUP BY role_code", "binning": ""}, "VQL": "Visualize PIE SELECT Role_Code , count(*) FROM Employees GROUP BY role_code"}, "hardness": "Easy"}, {"nl_queries": "Give me the comparison about Team_ID over the ACC_Regular_Season by a bar chart, and could you rank by the total number from low to high please?", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY Team_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY Team_ID ASC"}, "hardness": "Easy"}, {"nl_queries": "For all employees who have the letters D or S in their first name, a bar chart shows the distribution of job_id and the sum of department_id , and group by attribute job_id, and I want to show by the Y-axis in ascending.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "Bar chart of minimal price from each name", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , min(price) FROM products GROUP BY Name", "binning": ""}, "VQL": "Visualize BAR SELECT Name , min(price) FROM products GROUP BY Name"}, "hardness": "Easy"}, {"nl_queries": "A pie chart shows the proportion of  other_details and the amount of other_details.", "db_id": "behavior_monitoring", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT other_details , COUNT(other_details) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC", "binning": ""}, "VQL": "Visualize PIE SELECT other_details , COUNT(other_details) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC"}, "hardness": "Medium"}, {"nl_queries": "A bar chart for returning the number of the completion date for all the tests that have \"Fail\" result, and rank from low to high by the the number of date of completion.", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_of_completion , COUNT(date_of_completion) FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = \"Fail\" GROUP BY date_of_completion ORDER BY COUNT(date_of_completion) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT date_of_completion , COUNT(date_of_completion) FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = \"Fail\" GROUP BY date_of_completion ORDER BY COUNT(date_of_completion) ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "Show all allergy types and the number of allergies in each type. Visualize by pie chart.", "db_id": "allergy_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype", "binning": ""}, "VQL": "Visualize PIE SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype"}, "hardness": "Easy"}, {"nl_queries": "Give me the comparison about the sum of monthly_rental over the  date_address_to bin date_address_to by time.", "db_id": "behavior_monitoring", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC", "binning": "BIN date_address_to BY MONTH"}, "VQL": "Visualize BAR SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY MONTH"}, "hardness": "Medium"}, {"nl_queries": "Give me the comparison about School_ID over the ACC_Regular_Season by a bar chart, and order in desc by the names please.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Regular_Season , School_ID FROM basketball_match ORDER BY ACC_Regular_Season DESC", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Regular_Season , School_ID FROM basketball_match ORDER BY ACC_Regular_Season DESC"}, "hardness": "Easy"}, {"nl_queries": "For those records from the products and each product's manufacturer, a bar chart shows the distribution of headquarter and the average of manufacturer , and group by attribute headquarter, and I want to order by the y-axis from high to low.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY AVG(Manufacturer) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY AVG(Manufacturer) DESC"}, "hardness": "Hard"}, {"nl_queries": "Find the oldest age for students with different sex in a pie chart.", "db_id": "dorm_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Sex , max(age) FROM student GROUP BY Sex", "binning": ""}, "VQL": "Visualize PIE SELECT Sex , max(age) FROM student GROUP BY Sex"}, "hardness": "Easy"}, {"nl_queries": "Show me the trend about  the maximum price of wines for each year.", "db_id": "wine_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Year , max(Price) FROM WINE GROUP BY Year", "binning": ""}, "VQL": "Visualize LINE SELECT Year , max(Price) FROM WINE GROUP BY Year"}, "hardness": "Easy"}, {"nl_queries": "What are the nationalities and their average ages of journalists Show me a bar chart, and order by the Y from low to high please.", "db_id": "news_report", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nationality , AVG(Age) FROM journalist GROUP BY Nationality ORDER BY AVG(Age) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Nationality , AVG(Age) FROM journalist GROUP BY Nationality ORDER BY AVG(Age) ASC"}, "hardness": "Medium"}, {"nl_queries": "How many students taking a course who received an A or C? Group by students' first name with a bar chart.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT STU_FNAME , COUNT(STU_FNAME) FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A' GROUP BY STU_FNAME", "binning": ""}, "VQL": "Visualize BAR SELECT STU_FNAME , COUNT(STU_FNAME) FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A' GROUP BY STU_FNAME"}, "hardness": "Extra Hard"}, {"nl_queries": "Find the number of the parties associated with the delegates from district 1 Who served as governors of the parties?, and rank the number of governor from high to low order.", "db_id": "election", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Governor , COUNT(Governor) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.District = 1 GROUP BY Governor ORDER BY COUNT(Governor) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Governor , COUNT(Governor) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.District = 1 GROUP BY Governor ORDER BY COUNT(Governor) DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "What is the project id and detail for the project with at least two documents. Plot them as bar chart.", "db_id": "cre_Docs_and_Epenses", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id"}, "hardness": "Easy"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, draw a bar chart about the distribution of hire_date and the average of salary bin hire_date by time, and could you sort by the Y in ascending?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(SALARY) ASC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH"}, "hardness": "Extra Hard"}, {"nl_queries": "List the distinct payment method codes with the number of orders mad by a pie chart.", "db_id": "cre_Drama_Workshop_Groups", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code", "binning": ""}, "VQL": "Visualize PIE SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code"}, "hardness": "Easy"}, {"nl_queries": "Display a bar chart for how old is the average person for each job?, sort by the X in ascending.", "db_id": "network_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT job , avg(age) FROM Person GROUP BY job ORDER BY job ASC", "binning": ""}, "VQL": "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY job ASC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, show me about the distribution of name and the average of code , and group by attribute name in a bar chart, and could you show by the Y-axis in ascending?", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code ASC"}, "hardness": "Hard"}, {"nl_queries": "Find the ids and names of stations from which at least 200 trips started, and show total number in ascending order.", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT start_station_name , start_station_id FROM trip ORDER BY start_station_id ASC", "binning": ""}, "VQL": "Visualize BAR SELECT start_station_name , start_station_id FROM trip ORDER BY start_station_id ASC"}, "hardness": "Easy"}, {"nl_queries": "For all employees who have the letters D or S in their first name, draw a bar chart about the distribution of job_id and the sum of employee_id , and group by attribute job_id, and list in descending by the JOB_ID please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, show me about the distribution of headquarter and the average of revenue , and group by attribute headquarter in a bar chart, show x-axis in asc order.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC"}, "hardness": "Hard"}, {"nl_queries": "Show the number of the names of editors that are on the committee of journals with sales bigger than 3000, and display in descending by the total number.", "db_id": "journal_committee", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000 GROUP BY Name ORDER BY COUNT(Name) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000 GROUP BY Name ORDER BY COUNT(Name) DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "For those products with a price between 60 and 120, draw a bar chart about the distribution of name and manufacturer , display by the X from low to high.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , Manufacturer FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , Manufacturer FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name ASC"}, "hardness": "Medium"}, {"nl_queries": "Count the number of people of each sex who have a weight higher than 85, I want to sort by the Y in desc.", "db_id": "candidate_poll", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Sex , count(*) FROM people WHERE weight > 85 GROUP BY sex ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Sex , count(*) FROM people WHERE weight > 85 GROUP BY sex ORDER BY count(*) DESC"}, "hardness": "Hard"}, {"nl_queries": "What is the total number of ships with different nationalities and ship types?, sort in descending by the total number.", "db_id": "ship_mission", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY COUNT(Nationality) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY COUNT(Nationality) DESC"}, "hardness": "Hard"}, {"nl_queries": "Show different nationalities along with the number of hosts of each nationality Visualize by bar chart, and show from high to low by the X.", "db_id": "party_host", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC"}, "hardness": "Medium"}, {"nl_queries": "Visualize a scatter chart about the correlation between  Shop_ID and  Employee_ID .", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Shop_ID , Employee_ID FROM hiring", "binning": ""}, "VQL": "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM hiring"}, "hardness": "Easy"}, {"nl_queries": "What is the relationship between  People_ID and  Clean_Jerk ?", "db_id": "body_builder", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT People_ID , Clean_Jerk FROM body_builder", "binning": ""}, "VQL": "Visualize SCATTER SELECT People_ID , Clean_Jerk FROM body_builder"}, "hardness": "Easy"}, {"nl_queries": "For those records from the products and each product's manufacturer, show me about the distribution of name and revenue , and group by attribute headquarter in a bar chart, and show in desc by the names.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter , T1.Name ORDER BY T1.Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter , T1.Name ORDER BY T1.Name DESC"}, "hardness": "Hard"}, {"nl_queries": "Draw a bar chart about the distribution of Is_full_time and the average of Employee_ID , and group by attribute Is_full_time, and sort in ascending by the bars.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Is_full_time , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Is_full_time , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who was hired before 2002-06-21, for commission_pct, hire_date, visualize the trend, sort from high to low by the X.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE DESC", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE DESC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, give me the comparison about  commission_pct over the  phone_number  by a bar chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT PHONE_NUMBER , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)", "binning": ""}, "VQL": "Visualize BAR SELECT PHONE_NUMBER , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)"}, "hardness": "Extra Hard"}, {"nl_queries": "Show the number of start dates of all the apartment bookings for each weekday with a bar chart, sort in ascending by the the number of booking start date please.", "db_id": "apartment_rentals", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id  ORDER BY COUNT(booking_start_date) ASC", "binning": "BIN booking_start_date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id  ORDER BY COUNT(booking_start_date) ASC BIN booking_start_date BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "Find  dept_name and the sum of salary , and group by attribute dept_name, and visualize them by a bar chart.", "db_id": "college_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT dept_name , SUM(salary) FROM instructor GROUP BY dept_name ORDER BY salary", "binning": ""}, "VQL": "Visualize BAR SELECT dept_name , SUM(salary) FROM instructor GROUP BY dept_name ORDER BY salary"}, "hardness": "Medium"}, {"nl_queries": "Bar chart x axis start from y axis the average of shop id, and display total number in ascending order.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Start_from , AVG(Shop_ID) FROM hiring  ORDER BY AVG(Shop_ID) ASC", "binning": "BIN Start_from BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Start_from , AVG(Shop_ID) FROM hiring  ORDER BY AVG(Shop_ID) ASC BIN Start_from BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "Find the average of credits of courses that have more than one prerequisite for each title with a bar chart, and display X in descending order.", "db_id": "college_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT title , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title ORDER BY title DESC", "binning": ""}, "VQL": "Visualize BAR SELECT title , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title ORDER BY title DESC"}, "hardness": "Hard"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, return a line chart about the change of employee_id over hire_date , display in desc by the x-axis.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC"}, "hardness": "Hard"}, {"nl_queries": "Show all payment method codes and the number of orders for each code in a bar chart.", "db_id": "cre_Drama_Workshop_Groups", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code", "binning": ""}, "VQL": "Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code"}, "hardness": "Easy"}, {"nl_queries": "A line chart shows the change of  Shop_ID over  Start_from ", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Start_from , Shop_ID FROM hiring", "binning": ""}, "VQL": "Visualize LINE SELECT Start_from , Shop_ID FROM hiring"}, "hardness": "Easy"}, {"nl_queries": "For those records from the products and each product's manufacturer, show me about the distribution of founder and the sum of revenue , and group by attribute founder in a bar chart, and display y-axis in asc order please.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Founder , SUM(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder ORDER BY SUM(Revenue) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Founder , SUM(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder ORDER BY SUM(Revenue) ASC"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about code over the name , and group by attribute headquarter by a bar chart, I want to order by the X-axis in asc please.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter , T1.Name ORDER BY T1.Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter , T1.Name ORDER BY T1.Name ASC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who was hired before 2002-06-21, draw a bar chart about the distribution of  job_id and the sum of manager_id , and group by attribute job_id.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID"}, "hardness": "Medium"}, {"nl_queries": "For those products with a price between 60 and 120, draw a bar chart about the distribution of name and manufacturer , show in descending by the X please.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , Manufacturer FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , Manufacturer FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name DESC"}, "hardness": "Medium"}, {"nl_queries": "Show the number of documents created in each day and bin document date by year interval with a line chart, and rank x-axis from high to low order.", "db_id": "cre_Docs_and_Epenses", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code  ORDER BY Document_Date DESC", "binning": "BIN Document_Date BY YEAR"}, "VQL": "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code  ORDER BY Document_Date DESC BIN Document_Date BY YEAR"}, "hardness": "Hard"}, {"nl_queries": "Find the last name and age of the student who has allergy to both milk and cat. Show a pie chart.", "db_id": "allergy_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT LName , Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy = \"Cat\")", "binning": ""}, "VQL": "Visualize PIE SELECT LName , Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy = \"Cat\")"}, "hardness": "Extra Hard"}, {"nl_queries": "Show school id vs acc_percent as scatter plot use a different color for each All_Road", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY All_Road", "binning": ""}, "VQL": "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY All_Road"}, "hardness": "Easy"}, {"nl_queries": " how old is each student and how many students are each age?", "db_id": "allergy_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Age , count(*) FROM Student GROUP BY age", "binning": ""}, "VQL": "Visualize SCATTER SELECT Age , count(*) FROM Student GROUP BY age"}, "hardness": "Easy"}, {"nl_queries": "Find the relationship between total number of students and total number of instructors in a scatter chart.", "db_id": "college_2", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT count(DISTINCT T2.id) , count(DISTINCT T3.id) FROM department AS T1 JOIN student AS T2 ON T1.dept_name = T2.dept_name JOIN instructor AS T3 ON T1.dept_name = T3.dept_name", "binning": ""}, "VQL": "Visualize SCATTER SELECT count(DISTINCT T2.id) , count(DISTINCT T3.id) FROM department AS T1 JOIN student AS T2 ON T1.dept_name = T2.dept_name JOIN instructor AS T3 ON T1.dept_name = T3.dept_name"}, "hardness": "Extra Hard"}, {"nl_queries": "Show me about the distribution of ACC_Road and the average of School_ID , and group by attribute ACC_Road in a bar chart, and sort in ascending by the Y.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(School_ID) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(School_ID) ASC"}, "hardness": "Medium"}, {"nl_queries": "List the name for storms and the number of affected regions for each storm, order bars from high to low order.", "db_id": "storm_record", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , count(*) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id ORDER BY Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , count(*) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id ORDER BY Name DESC"}, "hardness": "Hard"}, {"nl_queries": "Plot mean meter 100 by grouped by meter 200 as a bar graph", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_200 , AVG(meter_100) FROM swimmer GROUP BY meter_200", "binning": ""}, "VQL": "Visualize BAR SELECT meter_200 , AVG(meter_100) FROM swimmer GROUP BY meter_200"}, "hardness": "Easy"}, {"nl_queries": "Show the relation between acc percent and all_games_percent for each ACC_Home using a scatter chart", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT ACC_Percent , All_Games_Percent FROM basketball_match GROUP BY ACC_Home", "binning": ""}, "VQL": "Visualize SCATTER SELECT ACC_Percent , All_Games_Percent FROM basketball_match GROUP BY ACC_Home"}, "hardness": "Easy"}, {"nl_queries": "What are the ids and names of all start stations that were the beginning of at least 200 trips Show bar chart, and rank from low to high by the X-axis.", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT start_station_name , start_station_id FROM trip ORDER BY start_station_name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT start_station_name , start_station_id FROM trip ORDER BY start_station_name ASC"}, "hardness": "Easy"}, {"nl_queries": "How many trains in each name category, give me the result with a bar chart, and could you order y axis in desc order?", "db_id": "railway", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM train GROUP BY Name ORDER BY COUNT(Name) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM train GROUP BY Name ORDER BY COUNT(Name) DESC"}, "hardness": "Medium"}, {"nl_queries": "Find all the payment dates for the payments with an amount larger than 10 and the payments handled by a staff person with the first name Elsa, and count them by a bar chart, and list total number from low to high order.", "db_id": "sakila_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT payment_date , COUNT(payment_date) FROM payment WHERE amount > 10 UNION SELECT T1.payment_date FROM payment AS T1 JOIN staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = 'Elsa' ORDER BY COUNT(payment_date) ASC", "binning": "BIN payment_date BY MONTH"}, "VQL": "Visualize BAR SELECT payment_date , COUNT(payment_date) FROM payment WHERE amount > 10 UNION SELECT T1.payment_date FROM payment AS T1 JOIN staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = 'Elsa' ORDER BY COUNT(payment_date) ASC BIN payment_date BY MONTH"}, "hardness": "Extra Hard"}, {"nl_queries": "Show the ages of editors and the theme of journals for which they serve on committees by a bar chart, and list the bars in ascending alphabetical order of theme.", "db_id": "journal_committee", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Theme , Age FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID ORDER BY T3.Theme ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Theme , Age FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID ORDER BY T3.Theme ASC"}, "hardness": "Medium"}, {"nl_queries": "Show the number of courses each instructor taught in a stacked bar chart The x-axis is the instructor's first name and group by course description, could you order total number from low to high order please?", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code GROUP BY CRS_DESCRIPTION ,  EMP_FNAME ORDER BY COUNT(EMP_FNAME) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code GROUP BY CRS_DESCRIPTION ,  EMP_FNAME ORDER BY COUNT(EMP_FNAME) ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "Show me department_id by first name in a histogram, I want to list by the bars in asc.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT FIRST_NAME , DEPARTMENT_ID FROM employees ORDER BY FIRST_NAME ASC", "binning": ""}, "VQL": "Visualize BAR SELECT FIRST_NAME , DEPARTMENT_ID FROM employees ORDER BY FIRST_NAME ASC"}, "hardness": "Easy"}, {"nl_queries": "Give me the comparison about  Team_ID over the  All_Home , and group by attribute ACC_Road.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home", "binning": ""}, "VQL": "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home"}, "hardness": "Extra Hard"}, {"nl_queries": "Return the completion date for all the tests that have \"Fail\" result, and count them by a bar chart, I want to sort from low to high by the the number of date of completion please.", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_of_completion , COUNT(date_of_completion) FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = \"Fail\" GROUP BY date_of_completion ORDER BY COUNT(date_of_completion) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT date_of_completion , COUNT(date_of_completion) FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = \"Fail\" GROUP BY date_of_completion ORDER BY COUNT(date_of_completion) ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "For each station, bin its longitude divided by zero as buckets, and count the frequency in each bucket, and I want to show by the Y in ascending.", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT long , COUNT(long) FROM station  ORDER BY COUNT(long) ASC", "binning": "BIN long BY ZERO"}, "VQL": "Visualize BAR SELECT long , COUNT(long) FROM station  ORDER BY COUNT(long) ASC BIN long BY ZERO"}, "hardness": "Medium"}, {"nl_queries": "Visualize the relationship between  author_id and  gender_mf .", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT author_id , gender_mf FROM Course_Authors_and_Tutors ORDER BY personal_name", "binning": ""}, "VQL": "Visualize SCATTER SELECT author_id , gender_mf FROM Course_Authors_and_Tutors ORDER BY personal_name"}, "hardness": "Easy"}, {"nl_queries": "Draw a bar chart about the distribution of  Team_Name and  All_Games_Percent .", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Team_Name , All_Games_Percent FROM basketball_match", "binning": ""}, "VQL": "Visualize BAR SELECT Team_Name , All_Games_Percent FROM basketball_match"}, "hardness": "Easy"}, {"nl_queries": "Give me a bar chart showing how many physicians for each department name they primarily affiliated in, list Y from low to high order.", "db_id": "hospital_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T3.Name , COUNT(T3.Name) FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID WHERE T2.PrimaryAffiliation = 1 GROUP BY T3.Name ORDER BY COUNT(T3.Name) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T3.Name , COUNT(T3.Name) FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID WHERE T2.PrimaryAffiliation = 1 GROUP BY T3.Name ORDER BY COUNT(T3.Name) ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "Show me about the distribution of  Sex and the amount of Sex , and group by attribute Sex in a bar chart.", "db_id": "candidate_poll", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex", "binning": ""}, "VQL": "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex"}, "hardness": "Easy"}, {"nl_queries": "I want to know the proportion of the total number for each competition type.", "db_id": "sports_competition", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Competition_type , COUNT(*) FROM competition GROUP BY Competition_type", "binning": ""}, "VQL": "Visualize PIE SELECT Competition_type , COUNT(*) FROM competition GROUP BY Competition_type"}, "hardness": "Easy"}, {"nl_queries": "Show team_id from each team name, and display y axis in desc order.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Team_Name , Team_ID FROM basketball_match ORDER BY Team_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Team_Name , Team_ID FROM basketball_match ORDER BY Team_ID DESC"}, "hardness": "Easy"}, {"nl_queries": "Compare the number of winery of the wines whose price is bigger than 100, I want to show by the y axis from high to low.", "db_id": "wine_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Winery ORDER BY COUNT(Winery) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Winery ORDER BY COUNT(Winery) DESC"}, "hardness": "Hard"}, {"nl_queries": "Visualize a bar chart for what is the id and weight of every pet who is older than 1?, and I want to list in desc by the X.", "db_id": "pets_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT PetID , weight FROM pets WHERE pet_age > 1 ORDER BY PetID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT PetID , weight FROM pets WHERE pet_age > 1 ORDER BY PetID DESC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, find last_name and salary , and visualize them by a bar chart, and show in descending by the X.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT LAST_NAME , SALARY FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY LAST_NAME DESC", "binning": ""}, "VQL": "Visualize BAR SELECT LAST_NAME , SALARY FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY LAST_NAME DESC"}, "hardness": "Medium"}, {"nl_queries": "What is the average salary of employees who have a commission percentage that is not null. Show scatter chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT DEPARTMENT_ID , AVG(salary) FROM employees WHERE commission_pct != \"null\" GROUP BY department_id", "binning": ""}, "VQL": "Visualize SCATTER SELECT DEPARTMENT_ID , AVG(salary) FROM employees WHERE commission_pct != \"null\" GROUP BY department_id"}, "hardness": "Medium"}, {"nl_queries": "Show the position of players and the corresponding number of players with a bar chart.", "db_id": "match_season", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Position , COUNT(*) FROM match_season GROUP BY POSITION", "binning": ""}, "VQL": "Visualize BAR SELECT Position , COUNT(*) FROM match_season GROUP BY POSITION"}, "hardness": "Easy"}, {"nl_queries": "Create a bar chart showing the total number across location code, and could you show X from high to low order?", "db_id": "cre_Doc_Tracking_DB", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Location_Code , count(*) FROM Document_locations GROUP BY location_code ORDER BY Location_Code DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Location_Code , count(*) FROM Document_locations GROUP BY location_code ORDER BY Location_Code DESC"}, "hardness": "Medium"}, {"nl_queries": "Plot the total number by grouped by country as a bar graph, and could you rank by the x-axis in desc?", "db_id": "decoration_competition", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Country , COUNT(*) FROM member GROUP BY Country ORDER BY Country DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Country , COUNT(*) FROM member GROUP BY Country ORDER BY Country DESC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, a bar chart shows the distribution of headquarter and the average of revenue , and group by attribute headquarter, sort from high to low by the mean revenue.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY AVG(Revenue) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY AVG(Revenue) DESC"}, "hardness": "Hard"}, {"nl_queries": "Draw a bar chart about the distribution of  All_Home and the sum of School_ID , and group by attribute All_Home.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home", "binning": ""}, "VQL": "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home"}, "hardness": "Easy"}, {"nl_queries": "How many patients do each physician take care of? List their names and number of patients they take care of. Show bar chart.", "db_id": "hospital_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid"}, "hardness": "Medium"}, {"nl_queries": "Show me a bar chart for what are the titles and ids for albums containing tracks with unit price greater than 1?", "db_id": "chinook_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1"}, "hardness": "Medium"}, {"nl_queries": "Draw a bar chart for what is the number of employees from each city?, I want to display by the Y-axis from high to low.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT City , count(*) FROM employee GROUP BY city ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT City , count(*) FROM employee GROUP BY city ORDER BY count(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "How many documents in different ending date? Return a bar chart binning ending date by weekday, and rank by the total number in descending.", "db_id": "cre_Doc_Tracking_DB", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations  ORDER BY COUNT(Date_in_Locaton_To) DESC", "binning": "BIN Date_in_Locaton_To BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations  ORDER BY COUNT(Date_in_Locaton_To) DESC BIN Date_in_Locaton_To BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "Please give me a pie chart for the proportion of the total enrollment in each county.", "db_id": "school_finance", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT County , sum(enrollment) FROM school GROUP BY county", "binning": ""}, "VQL": "Visualize PIE SELECT County , sum(enrollment) FROM school GROUP BY county"}, "hardness": "Easy"}, {"nl_queries": "Bin the year attribute into the Year interval and count them for a bar chart, and rank total number in desc order.", "db_id": "wine_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Year , COUNT(Year) FROM WINE  ORDER BY COUNT(Year) DESC", "binning": "BIN Year BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Year , COUNT(Year) FROM WINE  ORDER BY COUNT(Year) DESC BIN Year BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "Visualize a bar chart about the distribution of ACC_Road and the sum of School_ID , and group by attribute ACC_Road, show in descending by the bars please.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Road , SUM(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road DESC", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Road , SUM(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road DESC"}, "hardness": "Medium"}, {"nl_queries": "Show the names of products and the number of events they are in Visualize by bar chart, and order by the Y in descending.", "db_id": "solvency_ii", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Product_Name , COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID = T2.Product_ID GROUP BY T1.Product_Name ORDER BY COUNT(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Product_Name , COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID = T2.Product_ID GROUP BY T1.Product_Name ORDER BY COUNT(*) DESC"}, "hardness": "Hard"}, {"nl_queries": "Show me about the distribution of Nationality and the average of meter_100 , and group by attribute Nationality in a bar chart, sort from high to low by the X.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nationality , AVG(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Nationality , AVG(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC"}, "hardness": "Medium"}, {"nl_queries": "Can you draw the trend of how many date from over the date from?, I want to rank in desc by the X-axis.", "db_id": "tracking_grants_for_research", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date_from , COUNT(date_from) FROM Project_Staff ORDER BY date_from DESC", "binning": "BIN date_from BY YEAR"}, "VQL": "Visualize LINE SELECT date_from , COUNT(date_from) FROM Project_Staff ORDER BY date_from DESC BIN date_from BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "Compare the number of winery of the wines whose price is bigger than 100, and could you sort total number from low to high order?", "db_id": "wine_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Winery ORDER BY COUNT(Winery) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Winery ORDER BY COUNT(Winery) ASC"}, "hardness": "Hard"}, {"nl_queries": "Show the average transaction amount for different transaction types. ", "db_id": "tracking_share_transactions", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code", "binning": ""}, "VQL": "Visualize BAR SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code"}, "hardness": "Easy"}, {"nl_queries": "For those records from the products and each product's manufacturer, find name and the sum of manufacturer , and group by attribute name, and visualize them by a bar chart, order from low to high by the Name.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC"}, "hardness": "Hard"}, {"nl_queries": "Show me the comparison of the total number of all ships' nationalities with a bar graph, and order Nationality in asc order.", "db_id": "ship_mission", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY Nationality ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY Nationality ASC"}, "hardness": "Medium"}, {"nl_queries": "A bar chart showing the number of flights with price higher than 300 for each destination city.", "db_id": "flight_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT destination , COUNT(destination) FROM Flight WHERE price > 300 GROUP BY destination", "binning": ""}, "VQL": "Visualize BAR SELECT destination , COUNT(destination) FROM Flight WHERE price > 300 GROUP BY destination"}, "hardness": "Medium"}, {"nl_queries": "Give me the comparison about meter_100 over the meter_600 , and I want to rank x-axis in ascending order please.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_600 , meter_100 FROM swimmer ORDER BY meter_600 ASC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_600 , meter_100 FROM swimmer ORDER BY meter_600 ASC"}, "hardness": "Easy"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, give me the comparison about salary over the job_id , and rank by the X-axis in asc.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SALARY FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SALARY FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID ASC"}, "hardness": "Medium"}, {"nl_queries": "Draw a bar chart of date versus how many date, and could you display by the Y-axis in desc?", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date , COUNT(date) FROM weather  ORDER BY COUNT(date) DESC", "binning": "BIN date BY YEAR"}, "VQL": "Visualize BAR SELECT date , COUNT(date) FROM weather  ORDER BY COUNT(date) DESC BIN date BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "For each year, return the year and the average number of attendance at home games, and I want to list by the X in desc please.", "db_id": "baseball_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT year , avg(attendance) FROM home_game GROUP BY YEAR ORDER BY year DESC", "binning": ""}, "VQL": "Visualize LINE SELECT year , avg(attendance) FROM home_game GROUP BY YEAR ORDER BY year DESC"}, "hardness": "Medium"}, {"nl_queries": "List the number of dogs of the rarest breed in each treatment day with a bar chart that bins date of treatment by weekday.", "db_id": "dog_kennels", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_of_treatment , COUNT(date_of_treatment) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )", "binning": ""}, "VQL": "Visualize BAR SELECT date_of_treatment , COUNT(date_of_treatment) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )"}, "hardness": "Extra Hard"}, {"nl_queries": "Give me the trend about the average of Employee_ID over  Start_from , and group by attribute Is_full_time and bin start_from by time.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time", "binning": "BIN Start_from BY YEAR"}, "VQL": "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time BIN Start_from BY YEAR"}, "hardness": "Hard"}, {"nl_queries": "A bar chart about the number of last name for all female students whose sex is F, and sort in asc by the LName.", "db_id": "allergy_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY LName ASC", "binning": ""}, "VQL": "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY LName ASC"}, "hardness": "Hard"}, {"nl_queries": "What is the relationship between  People_ID and  Weight , and group by attribute Sex?", "db_id": "candidate_poll", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT People_ID , Weight FROM people GROUP BY Sex", "binning": ""}, "VQL": "Visualize SCATTER SELECT People_ID , Weight FROM people GROUP BY Sex"}, "hardness": "Easy"}, {"nl_queries": "Visualize a bar chart for what is the average weight for each type of pet?, and display by the PetType from low to high.", "db_id": "pets_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT PetType , avg(weight) FROM pets GROUP BY pettype ORDER BY PetType ASC", "binning": ""}, "VQL": "Visualize BAR SELECT PetType , avg(weight) FROM pets GROUP BY pettype ORDER BY PetType ASC"}, "hardness": "Medium"}, {"nl_queries": "Show me mean age by sex in a histogram, rank by the X in desc.", "db_id": "allergy_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Sex , avg(age) FROM Student GROUP BY sex ORDER BY Sex DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Sex , avg(age) FROM Student GROUP BY sex ORDER BY Sex DESC"}, "hardness": "Medium"}, {"nl_queries": "A bar chart for what are the number of the package options of all tv channels that are not playing any cartoons directed by Ben Jones?, and list in desc by the total number.", "db_id": "tvshow", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC"}, "hardness": "Hard"}, {"nl_queries": "Return a histogram on what are the names and prices of all products in the store?", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , AVG(Price) FROM products GROUP BY Name", "binning": ""}, "VQL": "Visualize BAR SELECT Name , AVG(Price) FROM products GROUP BY Name"}, "hardness": "Easy"}, {"nl_queries": "List all the possible ways to get to attractions, together with the number of attractions accessible by these methods by a pie chart.", "db_id": "cre_Theme_park", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT How_to_Get_There , COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There", "binning": ""}, "VQL": "Visualize PIE SELECT How_to_Get_There , COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There"}, "hardness": "Easy"}, {"nl_queries": "What are the average star ratings of each movie title? Could you return me a bar chart?, and I want to show total number in asc order.", "db_id": "movie_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT title , AVG(stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY title ORDER BY AVG(stars) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT title , AVG(stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY title ORDER BY AVG(stars) ASC"}, "hardness": "Hard"}, {"nl_queries": "For all employees who have the letters D or S in their first name, a line chart shows the change of employee_id over hire_date, and could you sort by the X in ascending?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY HIRE_DATE ASC", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY HIRE_DATE ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees who was hired before 2002-06-21, visualize a bar chart about the distribution of hire_date and the average of salary bin hire_date by weekday, list by the y-axis in desc.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(SALARY) DESC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "what is the average age for a male in each job?, and sort y axis in descending order.", "db_id": "network_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job ORDER BY avg(age) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job ORDER BY avg(age) DESC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, give me the comparison about the average of department_id over the hire_date bin hire_date by weekday by a bar chart, list in asc by the y axis.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY AVG(DEPARTMENT_ID) ASC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY AVG(DEPARTMENT_ID) ASC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "Find the number of employees of each gender whose salary is lower than 50000 Visualize by bar chart, I want to rank by the Y in descending.", "db_id": "company_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Sex , count(*) FROM employee WHERE salary < 50000 GROUP BY sex ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Sex , count(*) FROM employee WHERE salary < 50000 GROUP BY sex ORDER BY count(*) DESC"}, "hardness": "Hard"}, {"nl_queries": "For all employees who have the letters D or S in their first name, return a scatter chart about the correlation between  salary and  department_id .", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT SALARY , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'", "binning": ""}, "VQL": "Visualize SCATTER SELECT SALARY , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'"}, "hardness": "Hard"}, {"nl_queries": "For all employees who have the letters D or S in their first name, return a bar chart about the distribution of job_id and the sum of salary , and group by attribute job_id, display by the bars in asc please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "Show all cities and corresponding number of students by a bar chart.", "db_id": "allergy_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT city_code , count(*) FROM Student GROUP BY city_code", "binning": ""}, "VQL": "Visualize BAR SELECT city_code , count(*) FROM Student GROUP BY city_code"}, "hardness": "Easy"}, {"nl_queries": "For those records from the products and each product's manufacturer, a bar chart shows the distribution of name and the sum of code , and group by attribute name, could you show by the Y-axis from low to high?", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code ASC"}, "hardness": "Hard"}, {"nl_queries": "For each continent where the average life expectancy is shorter than 72, show their total population with a bar chart.", "db_id": "world_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Continent , sum(Population) FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72", "binning": ""}, "VQL": "Visualize BAR SELECT Continent , sum(Population) FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72"}, "hardness": "Medium"}, {"nl_queries": "Draw a bar chart for how many people are there of each nationality?, and list X in asc order.", "db_id": "poker_player", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY Nationality ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY Nationality ASC"}, "hardness": "Medium"}, {"nl_queries": "What is the state and enrollment of the colleges where have any students who got accepted in the tryout decision Plot them as bar chart, could you display Y in asc order?", "db_id": "soccer_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT state , enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.decision = 'yes' ORDER BY enr ASC", "binning": ""}, "VQL": "Visualize BAR SELECT state , enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.decision = 'yes' ORDER BY enr ASC"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about the average of code over the name , and group by attribute name by a bar chart, and I want to display Y-axis from low to high order.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code ASC"}, "hardness": "Hard"}, {"nl_queries": "A bar chart shows the distribution of  family_name and  author_tutor_ATB .", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT family_name , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name", "binning": ""}, "VQL": "Visualize BAR SELECT family_name , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name"}, "hardness": "Easy"}, {"nl_queries": "How many courses for each office? Show me a bar chart, display in descending by the y axis.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT PROF_OFFICE , COUNT(PROF_OFFICE) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num GROUP BY PROF_OFFICE ORDER BY COUNT(PROF_OFFICE) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT PROF_OFFICE , COUNT(PROF_OFFICE) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num GROUP BY PROF_OFFICE ORDER BY COUNT(PROF_OFFICE) DESC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, find hire_date and the sum of manager_id bin hire_date by weekday, and visualize them by a bar chart, rank Y in ascending order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(MANAGER_ID) ASC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(MANAGER_ID) ASC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating. Show bar chart.", "db_id": "tvshow", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Episode , Rating FROM TV_series ORDER BY Rating DESC LIMIT 3", "binning": ""}, "VQL": "Visualize BAR SELECT Episode , Rating FROM TV_series ORDER BY Rating DESC LIMIT 3"}, "hardness": "Medium"}, {"nl_queries": "What details are there on the research staff? List the result in ascending alphabetical order, and count them by a bar chart", "db_id": "tracking_grants_for_research", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT staff_details , COUNT(staff_details) FROM Research_Staff GROUP BY staff_details ORDER BY staff_details ASC", "binning": ""}, "VQL": "Visualize BAR SELECT staff_details , COUNT(staff_details) FROM Research_Staff GROUP BY staff_details ORDER BY staff_details ASC"}, "hardness": "Medium"}, {"nl_queries": "Please show the trend about the number of days with max temperature reaches 80 change over dates, order x axis from high to low order.", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date , COUNT(date) FROM weather WHERE max_temperature_f >= 80 GROUP BY date ORDER BY date DESC", "binning": ""}, "VQL": "Visualize LINE SELECT date , COUNT(date) FROM weather WHERE max_temperature_f >= 80 GROUP BY date ORDER BY date DESC"}, "hardness": "Hard"}, {"nl_queries": "List the types of competition and the number of competitions of each type Visualize by bar chart, and I want to order the total number from high to low order.", "db_id": "sports_competition", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Competition_type , COUNT(*) FROM competition GROUP BY Competition_type ORDER BY COUNT(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Competition_type , COUNT(*) FROM competition GROUP BY Competition_type ORDER BY COUNT(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "How many races that had any driver whose forename is Lewis? Show me a line chart, sort in ascending by the x-axis.", "db_id": "formula_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT year , COUNT(year) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = \"Lewis\" GROUP BY year ORDER BY year ASC", "binning": ""}, "VQL": "Visualize LINE SELECT year , COUNT(year) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = \"Lewis\" GROUP BY year ORDER BY year ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, draw a bar chart about the distribution of last_name and department_id , and I want to show in asc by the LAST_NAME.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT LAST_NAME , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY LAST_NAME ASC", "binning": ""}, "VQL": "Visualize BAR SELECT LAST_NAME , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY LAST_NAME ASC"}, "hardness": "Medium"}, {"nl_queries": "Draw a bar chart about the distribution of ACC_Regular_Season and Team_ID , I want to order by the Team_ID in ascending.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY Team_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY Team_ID ASC"}, "hardness": "Easy"}, {"nl_queries": "Show the reign and days held of wrestlers in a scatter chart", "db_id": "wrestler", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Reign , Days_held FROM wrestler", "binning": ""}, "VQL": "Visualize SCATTER SELECT Reign , Days_held FROM wrestler"}, "hardness": "Easy"}, {"nl_queries": "List the builders of railways in ascending alphabetical order, and count them by a bar chart", "db_id": "railway", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Builder , COUNT(Builder) FROM railway GROUP BY Builder ORDER BY Builder ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Builder , COUNT(Builder) FROM railway GROUP BY Builder ORDER BY Builder ASC"}, "hardness": "Medium"}, {"nl_queries": "Draw a scatter chart about the correlation between  Team_ID and  ACC_Percent , and group by attribute All_Home.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Team_ID , ACC_Percent FROM basketball_match GROUP BY All_Home", "binning": ""}, "VQL": "Visualize SCATTER SELECT Team_ID , ACC_Percent FROM basketball_match GROUP BY All_Home"}, "hardness": "Easy"}, {"nl_queries": "Give me a bar chart for budget_in_billions of each name, and sort by the Y-axis from high to low please.", "db_id": "department_management", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , Budget_in_Billions FROM department ORDER BY Budget_in_Billions DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , Budget_in_Billions FROM department ORDER BY Budget_in_Billions DESC"}, "hardness": "Easy"}, {"nl_queries": "Show the number of games in each season and group by away team in a group line chart The x-axis is season, and list Season in descending order.", "db_id": "game_injury", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ORDER BY Season DESC", "binning": "BIN Season BY YEAR"}, "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ORDER BY Season DESC BIN Season BY YEAR"}, "hardness": "Extra Hard"}, {"nl_queries": "How many regions were affected by each storm Visualize by bar chart, and rank from high to low by the y-axis.", "db_id": "storm_record", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , count(*) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , count(*) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id ORDER BY count(*) DESC"}, "hardness": "Hard"}, {"nl_queries": "How many apartment bookings in each weekday? Show me a bar chart binning booking start date by weekday, could you order by the how many booking start date in descending?", "db_id": "apartment_rentals", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings  ORDER BY COUNT(booking_start_date) DESC", "binning": "BIN booking_start_date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings  ORDER BY COUNT(booking_start_date) DESC BIN booking_start_date BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "A bar chart shows the distribution of  All_Games and  All_Games_Percent .", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Games , All_Games_Percent FROM basketball_match", "binning": ""}, "VQL": "Visualize BAR SELECT All_Games , All_Games_Percent FROM basketball_match"}, "hardness": "Easy"}, {"nl_queries": "Show id and location of railways that are associated with more than one train Visualize by bar chart, could you sort x axis in desc order?", "db_id": "railway", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Location , T1.Railway_ID FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID = T2.Railway_ID ORDER BY T1.Location DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Location , T1.Railway_ID FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID = T2.Railway_ID ORDER BY T1.Location DESC"}, "hardness": "Medium"}, {"nl_queries": "Find the category descriptions of the products whose descriptions include letter 't', and count them by a bar chart, order from low to high by the total number.", "db_id": "products_gen_characteristics", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT product_category_description , COUNT(product_category_description) FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code = T2.product_category_code WHERE T2.product_description LIKE '%t%' GROUP BY product_category_description ORDER BY COUNT(product_category_description) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT product_category_description , COUNT(product_category_description) FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code = T2.product_category_code WHERE T2.product_description LIKE '%t%' GROUP BY product_category_description ORDER BY COUNT(product_category_description) ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "Count the number of programs broadcast for each time section of a day in a bar chart, and could you order in desc by the x axis?", "db_id": "program_share", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Time_of_day , count(*) FROM broadcast GROUP BY time_of_day ORDER BY Time_of_day DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Time_of_day , count(*) FROM broadcast GROUP BY time_of_day ORDER BY Time_of_day DESC"}, "hardness": "Medium"}, {"nl_queries": "What is the average song rating for each language Plot them as bar chart, and show by the languages in desc.", "db_id": "music_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY languages DESC", "binning": ""}, "VQL": "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY languages DESC"}, "hardness": "Medium"}, {"nl_queries": "Give me a bar chart for the number of area of each area, sort by the Y from high to low.", "db_id": "wine_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Area , COUNT(Area) FROM APPELLATIONS GROUP BY Area ORDER BY COUNT(Area) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Area , COUNT(Area) FROM APPELLATIONS GROUP BY Area ORDER BY COUNT(Area) DESC"}, "hardness": "Medium"}, {"nl_queries": "A bar chart for what are the number of the phone numbers for each employee?, and could you show in descending by the Phone please?", "db_id": "chinook_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY Phone DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY Phone DESC"}, "hardness": "Medium"}, {"nl_queries": "Compute the total number in each competition type, and then split by country, and could you order by the y-axis in desc?", "db_id": "sports_competition", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Country , COUNT(Country) FROM competition GROUP BY Competition_type ,  Country ORDER BY COUNT(Country) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Competition_type ,  Country ORDER BY COUNT(Country) DESC"}, "hardness": "Hard"}, {"nl_queries": "what is the number of employees from each city?, and I want to list from low to high by the bars.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT City , count(*) FROM employee GROUP BY city ORDER BY City ASC", "binning": ""}, "VQL": "Visualize BAR SELECT City , count(*) FROM employee GROUP BY city ORDER BY City ASC"}, "hardness": "Medium"}, {"nl_queries": "A line chart for finding the number of the dates of the tests taken with result \"Pass\", order X in asc order.", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\"  ORDER BY date_test_taken ASC", "binning": "BIN date_test_taken BY DAY"}, "VQL": "Visualize LINE SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\"  ORDER BY date_test_taken ASC BIN date_test_taken BY DAY"}, "hardness": "Hard"}, {"nl_queries": "A bar chart about what is the age and hometown of every teacher?", "db_id": "course_teach", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Hometown , Age FROM teacher", "binning": ""}, "VQL": "Visualize BAR SELECT Hometown , Age FROM teacher"}, "hardness": "Easy"}, {"nl_queries": "Find dates and attendance for exhibitions that happened in 2004, show me the attendance by date with a bar chart.", "db_id": "theme_gallery", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Date , T1.Attendance FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T2.year = 2004", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Date , T1.Attendance FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T2.year = 2004"}, "hardness": "Medium"}, {"nl_queries": "For those employees who was hired before 2002-06-21, show me the trend about commission_pct over hire_date with a line chart, and order from high to low by the x axis.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE DESC", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE DESC"}, "hardness": "Medium"}, {"nl_queries": "Find  All_Home and the sum of School_ID , and group by attribute All_Home, and visualize them by a bar chart.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home", "binning": ""}, "VQL": "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home"}, "hardness": "Easy"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, draw a line chart about the change of employee_id over hire_date , and rank by the x axis in asc.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC"}, "hardness": "Medium"}, {"nl_queries": "Return a bar chart about the distribution of ACC_Regular_Season and ACC_Percent , order in asc by the ACC_Regular_Season.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match ORDER BY ACC_Regular_Season ASC", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match ORDER BY ACC_Regular_Season ASC"}, "hardness": "Easy"}, {"nl_queries": "How many total credits are offered by each department Show bar chart, and order by the total number from high to low.", "db_id": "college_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY sum(credits) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT dept_name , sum(credits) FROM course GROUP BY dept_name ORDER BY sum(credits) DESC"}, "hardness": "Medium"}, {"nl_queries": "Draw a pie chart for what are the names of the teachers and how many courses do they teach?", "db_id": "course_teach", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Name , COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name", "binning": ""}, "VQL": "Visualize PIE SELECT Name , COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name"}, "hardness": "Medium"}, {"nl_queries": "How many professors for each first name? Show me a bar chart.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num = T2.emp_num GROUP BY EMP_FNAME", "binning": ""}, "VQL": "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num = T2.emp_num GROUP BY EMP_FNAME"}, "hardness": "Medium"}, {"nl_queries": "What are the title and maximum price of each film. Show a pie chart.", "db_id": "cinema", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title", "binning": ""}, "VQL": "Visualize PIE SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title"}, "hardness": "Easy"}, {"nl_queries": "How many dogs departed in each day? Visualize with a bar chart that bins departed date by day interval.", "db_id": "dog_kennels", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_departed , COUNT(date_departed) FROM Dogs", "binning": "BIN date_departed BY DAY"}, "VQL": "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs BIN date_departed BY DAY"}, "hardness": "Easy"}, {"nl_queries": "Draw a bar chart of decor versus minimal baseprice, and sort by the X-axis in desc please.", "db_id": "inn_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT decor , min(basePrice) FROM Rooms GROUP BY decor ORDER BY decor DESC", "binning": ""}, "VQL": "Visualize BAR SELECT decor , min(basePrice) FROM Rooms GROUP BY decor ORDER BY decor DESC"}, "hardness": "Easy"}, {"nl_queries": "Compute the total sum enrollment across county as a pie chart.", "db_id": "school_finance", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT County , sum(enrollment) FROM school GROUP BY county", "binning": ""}, "VQL": "Visualize PIE SELECT County , sum(enrollment) FROM school GROUP BY county"}, "hardness": "Easy"}, {"nl_queries": "For those employees who did not have any job in the past, return a bar chart about the distribution of job_id and the sum of salary , and group by attribute job_id, and could you sort by the Y in ascending please?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY SUM(SALARY) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY SUM(SALARY) ASC"}, "hardness": "Hard"}, {"nl_queries": "How many documents for different location code? Plot a bar chart to show the proportion, and sort in desc by the Location_Code please.", "db_id": "cre_Doc_Tracking_DB", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Location_Code , COUNT(Location_Code) FROM Document_locations GROUP BY Location_Code ORDER BY Location_Code DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Location_Code , COUNT(Location_Code) FROM Document_locations GROUP BY Location_Code ORDER BY Location_Code DESC"}, "hardness": "Medium"}, {"nl_queries": "Show me the comparison of the total number of every ship type with a bar graph, sort X in asc order.", "db_id": "ship_mission", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY Type ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY Type ASC"}, "hardness": "Medium"}, {"nl_queries": "A pie chart about what are the different software platforms for devices, and how many devices have each?", "db_id": "device", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Software_Platform , COUNT(*) FROM device GROUP BY Software_Platform", "binning": ""}, "VQL": "Visualize PIE SELECT Software_Platform , COUNT(*) FROM device GROUP BY Software_Platform"}, "hardness": "Easy"}, {"nl_queries": "Please tell the salary of each hire date using a line chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , SALARY FROM employees", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees"}, "hardness": "Easy"}, {"nl_queries": "Return a bar chart on what is the average base price of rooms, for each bed type?", "db_id": "inn_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT bedType , avg(basePrice) FROM Rooms GROUP BY bedType", "binning": ""}, "VQL": "Visualize BAR SELECT bedType , avg(basePrice) FROM Rooms GROUP BY bedType"}, "hardness": "Easy"}, {"nl_queries": "Show the number of documents created in each day and bin document date by year interval and group by document type with a group line chart, and I want to order by the x-axis in asc.", "db_id": "cre_Docs_and_Epenses", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Name ORDER BY Document_Date ASC", "binning": "BIN Document_Date BY YEAR"}, "VQL": "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Name ORDER BY Document_Date ASC BIN Document_Date BY YEAR"}, "hardness": "Extra Hard"}, {"nl_queries": "Visualize a bar chart about the distribution of Nationality and the average of meter_100 , and group by attribute Nationality, and display by the y-axis in ascending.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nationality , AVG(meter_100) FROM swimmer GROUP BY Nationality ORDER BY AVG(meter_100) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Nationality , AVG(meter_100) FROM swimmer GROUP BY Nationality ORDER BY AVG(meter_100) ASC"}, "hardness": "Medium"}, {"nl_queries": "Visualize a bar chart that X-axis is the gender and compute the number of players in each gender as a Y-axis, and rank from high to low by the bars please.", "db_id": "riding_club", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Gender , COUNT(Gender) FROM player GROUP BY Gender ORDER BY Gender DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Gender , COUNT(Gender) FROM player GROUP BY Gender ORDER BY Gender DESC"}, "hardness": "Medium"}, {"nl_queries": "What is the proportion of the number of each winning aircraft?", "db_id": "aircraft", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Aircraft , COUNT(Aircraft) FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft GROUP BY Aircraft", "binning": ""}, "VQL": "Visualize PIE SELECT Aircraft , COUNT(Aircraft) FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft GROUP BY Aircraft"}, "hardness": "Medium"}, {"nl_queries": "Draw a bar chart for what are the names of the high schoolers and how many friends does each have?, rank in ascending by the Y.", "db_id": "network_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.name , SUM(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY SUM(count(*)) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.name , SUM(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY SUM(count(*)) ASC"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, find name and the sum of manufacturer , and group by attribute name, and visualize them by a bar chart, and I want to show in desc by the x axis.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC"}, "hardness": "Hard"}, {"nl_queries": "Show me a scatter plot of people id and weight for .", "db_id": "candidate_poll", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT People_ID , Weight FROM people", "binning": ""}, "VQL": "Visualize SCATTER SELECT People_ID , Weight FROM people"}, "hardness": "Easy"}, {"nl_queries": "How many eliminations did each team have Visualize by bar chart, I want to rank by the X-axis in descending please.", "db_id": "wrestler", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Team , COUNT(*) FROM elimination GROUP BY Team ORDER BY Team DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Team , COUNT(*) FROM elimination GROUP BY Team ORDER BY Team DESC"}, "hardness": "Medium"}, {"nl_queries": "Visualize a bar chart for showing the total number of different product type codes, and order from low to high by the total number.", "db_id": "solvency_ii", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Product_Type_Code , COUNT(Product_Type_Code) FROM Products GROUP BY Product_Type_Code ORDER BY COUNT(Product_Type_Code) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Product_Type_Code , COUNT(Product_Type_Code) FROM Products GROUP BY Product_Type_Code ORDER BY COUNT(Product_Type_Code) ASC"}, "hardness": "Medium"}, {"nl_queries": "Bar chart x axis industry y axis the number of industry, I want to show y axis from high to low order.", "db_id": "company_employee", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Industry , COUNT(Industry) FROM company GROUP BY Industry ORDER BY COUNT(Industry) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Industry , COUNT(Industry) FROM company GROUP BY Industry ORDER BY COUNT(Industry) DESC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, find hire_date and the average of manager_id bin hire_date by time, and visualize them by a bar chart, and could you sort Y-axis in ascending order?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY AVG(MANAGER_ID) ASC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "What is the number of singers for each country? Show a bar chart, display by the names in ascending.", "db_id": "concert_singer", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY Country ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY Country ASC"}, "hardness": "Medium"}, {"nl_queries": "Give me a bar chart about the number of platforms in different locations, sort by the x-axis in desc.", "db_id": "train_station", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Location , SUM(Number_of_Platforms) FROM station GROUP BY Location ORDER BY Location DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Location , SUM(Number_of_Platforms) FROM station GROUP BY Location ORDER BY Location DESC"}, "hardness": "Medium"}, {"nl_queries": "Find All_Home and Team_ID , and group by attribute ACC_Road, and visualize them by a bar chart, and order in desc by the x axis.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home DESC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home DESC"}, "hardness": "Medium"}, {"nl_queries": "For all employees who have the letters D or S in their first name, find  hire_date and the amount of hire_date bin hire_date by weekday, and visualize them by a bar chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "Bar chart of the total number from each class room", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT CLASS_ROOM , count(*) FROM CLASS GROUP BY class_room", "binning": ""}, "VQL": "Visualize BAR SELECT CLASS_ROOM , count(*) FROM CLASS GROUP BY class_room"}, "hardness": "Easy"}, {"nl_queries": "Return a pie on what is the number of professors for different school?", "db_id": "college_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code", "binning": ""}, "VQL": "Visualize PIE SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code"}, "hardness": "Medium"}, {"nl_queries": "A bar chart about what are the title and maximum price of each film?, and could you show by the Y-axis in descending?", "db_id": "cinema", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title ORDER BY max(T1.price) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title ORDER BY max(T1.price) DESC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, a bar chart shows the distribution of hire_date and the sum of department_id bin hire_date by time, order in asc by the sum department id.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(DEPARTMENT_ID) ASC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "Create a bar chart showing sum student capacity across gender, and order by the bar in asc please.", "db_id": "dorm_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT gender , sum(student_capacity) FROM dorm GROUP BY gender ORDER BY gender ASC", "binning": ""}, "VQL": "Visualize BAR SELECT gender , sum(student_capacity) FROM dorm GROUP BY gender ORDER BY gender ASC"}, "hardness": "Medium"}, {"nl_queries": "Return a bar chart about the distribution of Sex and the amount of Sex , and group by attribute Sex, and could you display y axis in descending order?", "db_id": "candidate_poll", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY COUNT(Sex) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY COUNT(Sex) DESC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, return a bar chart about the distribution of  founder and the sum of code , and group by attribute founder.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder"}, "hardness": "Medium"}, {"nl_queries": "Give me a pie to show how many industry from different industry.", "db_id": "company_employee", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Industry , COUNT(Industry) FROM company GROUP BY Industry", "binning": ""}, "VQL": "Visualize PIE SELECT Industry , COUNT(Industry) FROM company GROUP BY Industry"}, "hardness": "Easy"}, {"nl_queries": "For those employees who was hired before 2002-06-21, show me about the change of employee_id over hire_date in a line chart, order X-axis in descending order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE DESC", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE DESC"}, "hardness": "Medium"}, {"nl_queries": "Give me a bar chart for the total number of each dept name", "db_id": "college_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT dept_name , count(*) FROM student GROUP BY dept_name", "binning": ""}, "VQL": "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name"}, "hardness": "Easy"}, {"nl_queries": "For those employees who was hired before 2002-06-21, show me about the distribution of  hire_date and the sum of salary bin hire_date by time in a bar chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21'", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH"}, "hardness": "Medium"}, {"nl_queries": "A pie chart for listing the number of the description of all aircrafts.", "db_id": "aircraft", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description", "binning": ""}, "VQL": "Visualize PIE SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description"}, "hardness": "Easy"}, {"nl_queries": "Draw a bar chart of description versus the number of description, show by the x-axis in descending.", "db_id": "aircraft", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY Description DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY Description DESC"}, "hardness": "Medium"}, {"nl_queries": "What are the number of the name of rooms booked by customers whose first name has \"ROY\" in part?, could you display from high to low by the names?", "db_id": "inn_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT roomName , COUNT(roomName) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId WHERE firstname LIKE '%ROY%' GROUP BY roomName ORDER BY roomName DESC", "binning": ""}, "VQL": "Visualize BAR SELECT roomName , COUNT(roomName) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId WHERE firstname LIKE '%ROY%' GROUP BY roomName ORDER BY roomName DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, show me about the distribution of name and manufacturer , and group by attribute name in a bar chart, sort from low to high by the bar please.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Name ASC"}, "hardness": "Hard"}, {"nl_queries": "Find the number of the first name of students who are living in the Smith Hall.", "db_id": "dorm_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Fname , COUNT(Fname) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.dorm_name = 'Smith Hall' GROUP BY Fname", "binning": ""}, "VQL": "Visualize PIE SELECT Fname , COUNT(Fname) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.dorm_name = 'Smith Hall' GROUP BY Fname"}, "hardness": "Hard"}, {"nl_queries": "Return a bar chart about the distribution of ACC_Road and School_ID , and group by attribute ACC_Home, and order by the ACC_Road in asc.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Road , School_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY ACC_Road ASC", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Road , School_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY ACC_Road ASC"}, "hardness": "Medium"}, {"nl_queries": "Give me the comparison about the sum of meter_100 over the meter_200 , and group by attribute meter_200, rank in ascending by the bar.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_200 , SUM(meter_100) FROM swimmer GROUP BY meter_200 ORDER BY meter_200 ASC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_200 , SUM(meter_100) FROM swimmer GROUP BY meter_200 ORDER BY meter_200 ASC"}, "hardness": "Medium"}, {"nl_queries": "How many models does each car maker produce? List id and the number in a scatter chart.", "db_id": "car_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Id , count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id", "binning": ""}, "VQL": "Visualize SCATTER SELECT Id , count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, find  headquarter and the average of manufacturer , and group by attribute headquarter, and visualize them by a bar chart.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter", "binning": ""}, "VQL": "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter"}, "hardness": "Medium"}, {"nl_queries": "What are the names of device shops, and what are the carriers that they carry devices in stock for?, and could you rank by the X-axis from high to low?", "db_id": "device", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Carrier , COUNT(Carrier) FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID = T2.Device_ID JOIN shop AS T3 ON T1.Shop_ID = T3.Shop_ID GROUP BY Carrier ORDER BY Carrier DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID = T2.Device_ID JOIN shop AS T3 ON T1.Shop_ID = T3.Shop_ID GROUP BY Carrier ORDER BY Carrier DESC"}, "hardness": "Hard"}, {"nl_queries": "What is the number of the faculty members for each rank? Visualize in bar chart.", "db_id": "activity_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank", "binning": ""}, "VQL": "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank"}, "hardness": "Easy"}, {"nl_queries": "Show the names of climbers and the heights of mountains they climb by a bar chart, and display from low to high by the bars please.", "db_id": "climbing", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID ORDER BY T1.Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID ORDER BY T1.Name ASC"}, "hardness": "Medium"}, {"nl_queries": "Plot openning year by how many openning year as a trend line, and show x-axis from low to high order.", "db_id": "cinema", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Openning_year , COUNT(Openning_year) FROM cinema  ORDER BY Openning_year ASC", "binning": "BIN Openning_year BY YEAR"}, "VQL": "Visualize LINE SELECT Openning_year , COUNT(Openning_year) FROM cinema  ORDER BY Openning_year ASC BIN Openning_year BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "For each type of store, how many of them are there. Plot them as bar chart.", "db_id": "store_product", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Type , count(*) FROM store GROUP BY TYPE", "binning": ""}, "VQL": "Visualize BAR SELECT Type , count(*) FROM store GROUP BY TYPE"}, "hardness": "Easy"}, {"nl_queries": "Compute the total sum team id across all home as a pie chart.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home", "binning": ""}, "VQL": "Visualize PIE SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home"}, "hardness": "Easy"}, {"nl_queries": "Find the average age of all students living in the each city Show bar chart, show in desc by the Y-axis.", "db_id": "dorm_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) DESC"}, "hardness": "Medium"}, {"nl_queries": "Show all main industry and total market value in each industry by a bar chart, show in asc by the y-axis please.", "db_id": "gas_company", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY sum(market_value) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry ORDER BY sum(market_value) ASC"}, "hardness": "Medium"}, {"nl_queries": "Plot how many class by grouped by class as a bar graph, and show by the Y-axis in asc.", "db_id": "ship_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY COUNT(Class) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY COUNT(Class) ASC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, a bar chart shows the distribution of phone_number and manager_id , and order in ascending by the Y-axis.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT PHONE_NUMBER , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY MANAGER_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT PHONE_NUMBER , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY MANAGER_ID ASC"}, "hardness": "Medium"}, {"nl_queries": "Please give me a bar chart that bins the installation date of stations into the day of week interval as the X-axis, and count for showing how many stations are installed each year.", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT installation_date , COUNT(installation_date) FROM station", "binning": "BIN installation_date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT installation_date , COUNT(installation_date) FROM station BIN installation_date BY WEEKDAY"}, "hardness": "Easy"}, {"nl_queries": "For each distinct product name, show its average product price. Plot them as pie chart.", "db_id": "cre_Drama_Workshop_Groups", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name", "binning": ""}, "VQL": "Visualize PIE SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name"}, "hardness": "Easy"}, {"nl_queries": "Compute the number of services by services and then split by local authorities Show the result with a stacked bar graph, show by the X-axis from low to high.", "db_id": "station_weather", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT local_authority , COUNT(local_authority) FROM station GROUP BY services ,  local_authority ORDER BY local_authority ASC", "binning": ""}, "VQL": "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY services ,  local_authority ORDER BY local_authority ASC"}, "hardness": "Hard"}, {"nl_queries": "Draw a scatter chart about the correlation between  ID and  meter_100 .", "db_id": "swimming", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT ID , meter_100 FROM swimmer", "binning": ""}, "VQL": "Visualize SCATTER SELECT ID , meter_100 FROM swimmer"}, "hardness": "Easy"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, visualize a line chart about the change of employee_id over hire_date , display in desc by the x-axis.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC"}, "hardness": "Hard"}, {"nl_queries": "How many car makers are there in each continents? List the continent name and the count Visualize by bar chart, and order names in asc order.", "db_id": "car_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY T1.Continent ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY T1.Continent ASC"}, "hardness": "Hard"}, {"nl_queries": "Show me about the distribution of All_Neutral and Team_ID in a bar chart, and show bars in descending order please.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Neutral , Team_ID FROM basketball_match ORDER BY All_Neutral DESC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Neutral , Team_ID FROM basketball_match ORDER BY All_Neutral DESC"}, "hardness": "Easy"}, {"nl_queries": "For all employees who have the letters D or S in their first name, draw a bar chart about the distribution of job_id and the sum of employee_id , and group by attribute job_id, and display Y-axis in descending order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "Show me a bar chart for how many invoices were billed from each state?, show by the bar in desc.", "db_id": "store_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY billing_state DESC", "binning": ""}, "VQL": "Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY billing_state DESC"}, "hardness": "Hard"}, {"nl_queries": "Find the number of matches in different competitions Visualize by bar chart, I want to display in asc by the X-axis.", "db_id": "city_record", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Competition , count(*) FROM MATCH GROUP BY Competition ORDER BY Competition ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Competition , count(*) FROM MATCH GROUP BY Competition ORDER BY Competition ASC"}, "hardness": "Medium"}, {"nl_queries": "Give me line charts of worldwide gross sum employee id over year start from by major genres Is_full_time, and I want to sort by the x-axis from low to high.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC", "binning": "BIN Start_from BY YEAR"}, "VQL": "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC BIN Start_from BY YEAR"}, "hardness": "Extra Hard"}, {"nl_queries": "Show the number of documents created in each day and bin document date by year interval with a line chart.", "db_id": "cre_Docs_and_Epenses", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code", "binning": "BIN Document_Date BY YEAR"}, "VQL": "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code BIN Document_Date BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "Show me how many home team by home team in a histogram, rank from high to low by the bar please.", "db_id": "game_injury", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Home_team ORDER BY Home_team DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Home_team ORDER BY Home_team DESC"}, "hardness": "Medium"}, {"nl_queries": "Count the number of services by services, and display Y-axis from low to high order please.", "db_id": "station_weather", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) ASC"}, "hardness": "Medium"}, {"nl_queries": "Find the number of employees of each gender whose salary is lower than 50000 Visualize by bar chart, could you rank in descending by the Sex?", "db_id": "company_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Sex , count(*) FROM employee WHERE salary < 50000 GROUP BY sex ORDER BY Sex DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Sex , count(*) FROM employee WHERE salary < 50000 GROUP BY sex ORDER BY Sex DESC"}, "hardness": "Hard"}, {"nl_queries": "Return a bar chart showing how many members have visited for each college location.", "db_id": "decoration_competition", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT College_Location , COUNT(College_Location) FROM college AS T1 JOIN member AS T2 ON T1.College_ID = T2.College_ID GROUP BY College_Location", "binning": ""}, "VQL": "Visualize BAR SELECT College_Location , COUNT(College_Location) FROM college AS T1 JOIN member AS T2 ON T1.College_ID = T2.College_ID GROUP BY College_Location"}, "hardness": "Medium"}, {"nl_queries": "For those employees who was hired before 2002-06-21, show me about the distribution of job_id and the amount of job_id , and group by attribute job_id in a bar chart, rank names in ascending order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , COUNT(JOB_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID ASC"}, "hardness": "Hard"}, {"nl_queries": "How many faculty members does each building have? List the result with the name of the building. Show a pie chart.", "db_id": "activity_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Building , count(*) FROM Faculty GROUP BY building", "binning": ""}, "VQL": "Visualize PIE SELECT Building , count(*) FROM Faculty GROUP BY building"}, "hardness": "Easy"}, {"nl_queries": "Return a bar chart on what are the names of the different bank branches, and what are their total loan amounts?", "db_id": "loan_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT bname , sum(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname", "binning": ""}, "VQL": "Visualize BAR SELECT bname , sum(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname"}, "hardness": "Medium"}, {"nl_queries": "A bar chart about what are the number of rooms for each bed type?, could you sort in descending by the x-axis?", "db_id": "inn_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT bedType , count(*) FROM Rooms GROUP BY bedType ORDER BY bedType DESC", "binning": ""}, "VQL": "Visualize BAR SELECT bedType , count(*) FROM Rooms GROUP BY bedType ORDER BY bedType DESC"}, "hardness": "Medium"}, {"nl_queries": "Return a bar chart about the distribution of All_Home and the sum of School_ID , and group by attribute All_Home, and display in asc by the bars please.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC"}, "hardness": "Medium"}, {"nl_queries": "List the number of departments for each building with a bar chart, show by the how many building from high to low.", "db_id": "college_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT building , COUNT(building) FROM department GROUP BY building ORDER BY COUNT(building) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT building , COUNT(building) FROM department GROUP BY building ORDER BY COUNT(building) DESC"}, "hardness": "Medium"}, {"nl_queries": "What is the number of each allergie that the student with first name Lisa has? Draw a bar chart, and could you list by the total number in desc?", "db_id": "allergy_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Allergy , COUNT(T1.Allergy) FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy = T2.Allergy JOIN Student AS T3 ON T3.StuID = T2.StuID WHERE T3.Fname = \"Lisa\" GROUP BY T1.Allergy ORDER BY T1.Allergy DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Allergy , COUNT(T1.Allergy) FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy = T2.Allergy JOIN Student AS T3 ON T3.StuID = T2.StuID WHERE T3.Fname = \"Lisa\" GROUP BY T1.Allergy ORDER BY T1.Allergy DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "Bar graph to show the total number from different team, show in desc by the Team.", "db_id": "wrestler", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Team , COUNT(*) FROM elimination GROUP BY Team ORDER BY Team DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Team , COUNT(*) FROM elimination GROUP BY Team ORDER BY Team DESC"}, "hardness": "Medium"}, {"nl_queries": "Return a bar chart showing the total number of each ship type.", "db_id": "ship_mission", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Type , COUNT(Type) FROM ship GROUP BY Type", "binning": ""}, "VQL": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type"}, "hardness": "Easy"}, {"nl_queries": "What is the relationship between highest and average student GPA for every department? Give me a scatter chart.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT max(stu_gpa) , avg(stu_gpa) FROM student GROUP BY dept_code", "binning": ""}, "VQL": "Visualize SCATTER SELECT max(stu_gpa) , avg(stu_gpa) FROM student GROUP BY dept_code"}, "hardness": "Easy"}, {"nl_queries": "Give me a pie chart to reflect the proportion of  other_details and the amount of other_details.", "db_id": "behavior_monitoring", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT other_details , COUNT(other_details) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC", "binning": ""}, "VQL": "Visualize PIE SELECT other_details , COUNT(other_details) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC"}, "hardness": "Medium"}, {"nl_queries": "Find the dates of assessment notes for students with first name \"Fanny\", and count them by a bar chart, and I want to order by the how many date of notes from high to low.", "db_id": "behavior_monitoring", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\"  ORDER BY COUNT(date_of_notes) DESC", "binning": "BIN date_of_notes BY YEAR"}, "VQL": "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\"  ORDER BY COUNT(date_of_notes) DESC BIN date_of_notes BY YEAR"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees who was hired before 2002-06-21, draw a bar chart about the distribution of  hire_date and the average of salary bin hire_date by time.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21'", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, what is the relationship between  code and  revenue , and group by attribute name?", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name", "binning": ""}, "VQL": "Visualize SCATTER SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name"}, "hardness": "Medium"}, {"nl_queries": "Who has friends that are older than the average age? Print their names and their ages as well using a pie chart.", "db_id": "network_2", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT T1.name , T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T1.age > (SELECT avg(age) FROM person)", "binning": ""}, "VQL": "Visualize PIE SELECT T1.name , T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T1.age > (SELECT avg(age) FROM person)"}, "hardness": "Medium"}, {"nl_queries": "Visualize the relationship between  CID and  DNO .", "db_id": "college_3", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT CID , DNO FROM COURSE ORDER BY Credits", "binning": ""}, "VQL": "Visualize SCATTER SELECT CID , DNO FROM COURSE ORDER BY Credits"}, "hardness": "Easy"}, {"nl_queries": "Stacked bar chart of team_id for with each ACC_Road in each all home, and I want to show total number from high to low order please.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY Team_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY Team_ID DESC"}, "hardness": "Medium"}, {"nl_queries": "Draw a bar chart to compare the stars of each movie by title, and rank by the names in asc.", "db_id": "movie_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT title , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID ORDER BY title ASC", "binning": ""}, "VQL": "Visualize BAR SELECT title , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID ORDER BY title ASC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who did not have any job in the past, a bar chart shows the distribution of  hire_date and the sum of department_id bin hire_date by time.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH"}, "hardness": "Medium"}, {"nl_queries": "For each title, use a bar chart to show the number of films.", "db_id": "film_rank", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Title , COUNT(Title) FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID GROUP BY Title", "binning": ""}, "VQL": "Visualize BAR SELECT Title , COUNT(Title) FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID GROUP BY Title"}, "hardness": "Medium"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, a bar chart shows the distribution of  job_id and the sum of employee_id , and group by attribute job_id.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID"}, "hardness": "Hard"}, {"nl_queries": "Find Start_from and the sum of Shop_ID bin start_from by weekday, and visualize them by a bar chart, could you rank in desc by the total number?", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Start_from , SUM(Shop_ID) FROM hiring  ORDER BY SUM(Shop_ID) DESC", "binning": "BIN Start_from BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Start_from , SUM(Shop_ID) FROM hiring  ORDER BY SUM(Shop_ID) DESC BIN Start_from BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "Bar chart of minimal price from each name, order by the bar in descending.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , min(price) FROM products GROUP BY Name ORDER BY Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , min(price) FROM products GROUP BY Name ORDER BY Name DESC"}, "hardness": "Easy"}, {"nl_queries": "Bar chart x axis product type code y axis maximal product price, and could you sort by the maximal product price in ascending?", "db_id": "department_store", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code ORDER BY max(product_price) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code ORDER BY max(product_price) ASC"}, "hardness": "Easy"}, {"nl_queries": "Bar graph to show how many country name from different country name, and show by the y-axis from low to high.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT COUNTRY_NAME , COUNT(COUNTRY_NAME) FROM countries GROUP BY COUNTRY_NAME ORDER BY COUNT(COUNTRY_NAME) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT COUNTRY_NAME , COUNT(COUNTRY_NAME) FROM countries GROUP BY COUNTRY_NAME ORDER BY COUNT(COUNTRY_NAME) ASC"}, "hardness": "Medium"}, {"nl_queries": "Show the number of dogs that received a treatment arrived in each day in a bar chart that bins arrived date by weekday.", "db_id": "dog_kennels", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_arrived , COUNT(date_arrived) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id", "binning": "BIN date_arrived BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_arrived , COUNT(date_arrived) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id BIN date_arrived BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, visualize a bar chart about the distribution of job_id and employee_id , I want to list from high to low by the Y-axis.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY EMPLOYEE_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY EMPLOYEE_ID DESC"}, "hardness": "Medium"}, {"nl_queries": "Visualize the name and their component amounts with a bar chart for all furnitures that have more than 10 components.", "db_id": "manufacturer", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , Num_of_Component FROM furniture WHERE Num_of_Component > 10", "binning": ""}, "VQL": "Visualize BAR SELECT Name , Num_of_Component FROM furniture WHERE Num_of_Component > 10"}, "hardness": "Easy"}, {"nl_queries": "Show me about the correlation between  Body_Builder_ID and  Total  in a scatter chart.", "db_id": "body_builder", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Body_Builder_ID , Total FROM body_builder", "binning": ""}, "VQL": "Visualize SCATTER SELECT Body_Builder_ID , Total FROM body_builder"}, "hardness": "Easy"}, {"nl_queries": "Visualize a bar chart about the distribution of ACC_Road and School_ID , and group by attribute ACC_Home, and sort from low to high by the y-axis.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Road , School_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY School_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Road , School_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY School_ID ASC"}, "hardness": "Medium"}, {"nl_queries": "Show how many section description from each section description, I want to display total number from low to high order.", "db_id": "student_transcripts_tracking", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description ORDER BY COUNT(section_description) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description ORDER BY COUNT(section_description) ASC"}, "hardness": "Medium"}, {"nl_queries": "A bar chart about what is minimum hours of the students playing in different position?", "db_id": "soccer_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT pPos , min(T2.HS) FROM tryout AS T1 JOIN player AS T2 ON T1.pID = T2.pID GROUP BY pPos", "binning": ""}, "VQL": "Visualize BAR SELECT pPos , min(T2.HS) FROM tryout AS T1 JOIN player AS T2 ON T1.pID = T2.pID GROUP BY pPos"}, "hardness": "Easy"}, {"nl_queries": "Give me a pie chart to show the proportion of each type of the thing that has the status 'Close' or has a status record before the date '2017-06-19 02:59:21'.", "db_id": "local_govt_and_lot", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Timed_Status_of_Things AS T1 JOIN Things AS T2 ON T1.thing_id = T2.thing_id WHERE T1.Status_of_Thing_Code = 'Close' OR T1.Date_and_Date < '2017-06-19 02:59:21' GROUP BY Type_of_Thing_Code", "binning": ""}, "VQL": "Visualize PIE SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Timed_Status_of_Things AS T1 JOIN Things AS T2 ON T1.thing_id = T2.thing_id WHERE T1.Status_of_Thing_Code = 'Close' OR T1.Date_and_Date < '2017-06-19 02:59:21' GROUP BY Type_of_Thing_Code"}, "hardness": "Extra Hard"}, {"nl_queries": "For each competition, count the number of matches. Visualize by pie chart.", "db_id": "city_record", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Competition , count(*) FROM MATCH GROUP BY Competition", "binning": ""}, "VQL": "Visualize PIE SELECT Competition , count(*) FROM MATCH GROUP BY Competition"}, "hardness": "Easy"}, {"nl_queries": "Show all the activity names and the number of faculty involved in each activity. Show bar chart.", "db_id": "activity_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT activity_name , count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID", "binning": ""}, "VQL": "Visualize BAR SELECT activity_name , count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID"}, "hardness": "Medium"}, {"nl_queries": "Bar chart of the total number from each location, I want to order bars in asc order.", "db_id": "performance_attendance", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Location , COUNT(*) FROM performance GROUP BY LOCATION ORDER BY Location ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Location , COUNT(*) FROM performance GROUP BY LOCATION ORDER BY Location ASC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, show me about the distribution of  hire_date and the average of employee_id bin hire_date by time in a bar chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) BIN HIRE_DATE BY MONTH"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, visualize the relationship between  code and  code , and group by attribute founder.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT T1.Code , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder", "binning": ""}, "VQL": "Visualize SCATTER SELECT T1.Code , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder"}, "hardness": "Medium"}, {"nl_queries": "Give me the comparison about All_Games_Percent over the All_Neutral by a bar chart, sort by the y axis from high to low.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent DESC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent DESC"}, "hardness": "Easy"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, give me the comparison about the average of department_id over the hire_date bin hire_date by time by a bar chart, and list mean department id from high to low order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(DEPARTMENT_ID) DESC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(DEPARTMENT_ID) DESC BIN HIRE_DATE BY MONTH"}, "hardness": "Extra Hard"}, {"nl_queries": ", and order by the bar in desc.", "db_id": "entertainment_awards", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Type , COUNT(*) FROM artwork GROUP BY TYPE ORDER BY Type DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Type , COUNT(*) FROM artwork GROUP BY TYPE ORDER BY Type DESC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about the average of manufacturer over the founder , and group by attribute founder by a bar chart, and list from high to low by the Y-axis.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Founder , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder ORDER BY AVG(Manufacturer) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Founder , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder ORDER BY AVG(Manufacturer) DESC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, show me about the distribution of job_id and commission_pct in a bar chart, rank in ascending by the x axis.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID ASC"}, "hardness": "Medium"}, {"nl_queries": "List venues of all matches in the order of their dates starting from the most recent one, and count them by a bar chart", "db_id": "city_record", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Venue , COUNT(Venue) FROM MATCH GROUP BY Venue ORDER BY date DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Venue , COUNT(Venue) FROM MATCH GROUP BY Venue ORDER BY date DESC"}, "hardness": "Medium"}, {"nl_queries": "Show different citizenships and the maximum net worth of singers of each citizenship in a bar chart, and order in descending by the X-axis.", "db_id": "singer", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY Citizenship DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY Citizenship DESC"}, "hardness": "Easy"}, {"nl_queries": "Show me about the distribution of Date_of_Birth and Height in a bar chart, and list by the bar in ascending.", "db_id": "candidate_poll", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Date_of_Birth , Height FROM people ORDER BY Date_of_Birth ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Date_of_Birth , Height FROM people ORDER BY Date_of_Birth ASC"}, "hardness": "Easy"}, {"nl_queries": "A bar chart for returning the number of the claim start date for the claims whose claimed amount is no more than the average, and sort Y in desc order.", "db_id": "insurance_policies", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Claims WHERE Amount_Settled <= ( SELECT avg(Amount_Settled) FROM Claims )  ORDER BY COUNT(Date_Claim_Made) DESC", "binning": "BIN Date_Claim_Made BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Claims WHERE Amount_Settled <= ( SELECT avg(Amount_Settled) FROM Claims )  ORDER BY COUNT(Date_Claim_Made) DESC BIN Date_Claim_Made BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, visualize a bar chart about the distribution of job_id and the sum of manager_id , and group by attribute job_id, order in asc by the Y.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees who did not have any job in the past, visualize a bar chart about the distribution of job_id and the sum of department_id , and group by attribute job_id, and I want to list in desc by the Y.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) DESC"}, "hardness": "Hard"}, {"nl_queries": "Stack bar chart of the number of type vs Nationality based on type, I want to rank the number of type in asc order.", "db_id": "ship_mission", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY COUNT(Type) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY COUNT(Type) ASC"}, "hardness": "Hard"}, {"nl_queries": "Give me the comparison about the average of Shop_ID over the Start_from bin start_from by weekday by a bar chart, could you order by the y-axis from low to high?", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Start_from , AVG(Shop_ID) FROM hiring  ORDER BY AVG(Shop_ID) ASC", "binning": "BIN Start_from BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Start_from , AVG(Shop_ID) FROM hiring  ORDER BY AVG(Shop_ID) ASC BIN Start_from BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "For each singer name, what is the total sales for their songs Plot them as bar chart, and I want to display in desc by the names.", "db_id": "singer", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name ORDER BY Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name ORDER BY Name DESC"}, "hardness": "Hard"}, {"nl_queries": "Show party names and the number of events for each party. Visualize by pie chart.", "db_id": "party_people", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id", "binning": ""}, "VQL": "Visualize PIE SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id"}, "hardness": "Medium"}, {"nl_queries": "Show me a bar chart for what are the names of the teachers and how many courses do they teach?, could you show Y-axis in descending order?", "db_id": "course_teach", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name ORDER BY COUNT(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name ORDER BY COUNT(*) DESC"}, "hardness": "Hard"}, {"nl_queries": "Visualize a scatter chart on what are the average prices of products, grouped by manufacturer code?", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT AVG(Price) , Manufacturer FROM Products GROUP BY Manufacturer", "binning": ""}, "VQL": "Visualize SCATTER SELECT AVG(Price) , Manufacturer FROM Products GROUP BY Manufacturer"}, "hardness": "Easy"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, draw a bar chart about the distribution of email and employee_id , display in asc by the y-axis.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT EMAIL , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY EMPLOYEE_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT EMAIL , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY EMPLOYEE_ID ASC"}, "hardness": "Medium"}, {"nl_queries": "Plot mean meter 100 by grouped by meter 200 as a bar graph, I want to display in desc by the total number.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_200 , AVG(meter_100) FROM swimmer GROUP BY meter_200 ORDER BY AVG(meter_100) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_200 , AVG(meter_100) FROM swimmer GROUP BY meter_200 ORDER BY AVG(meter_100) DESC"}, "hardness": "Medium"}, {"nl_queries": "Find ACC_Road and School_ID , and group by attribute All_Home, and visualize them by a bar chart, order by the Y from high to low.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Road , School_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY School_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Road , School_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY School_ID DESC"}, "hardness": "Medium"}, {"nl_queries": "What are the different template type codes, and how many documents use each type Plot them as bar chart, and show by the bar from high to low.", "db_id": "cre_Doc_Template_Mgt", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY Template_Type_Code DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY Template_Type_Code DESC"}, "hardness": "Hard"}, {"nl_queries": "List the number of completion students in each day and bin date of completion by weekday with a bar chart, rank in ascending by the y axis.", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_of_completion , COUNT(date_of_completion) FROM Student_Course_Enrolment  ORDER BY COUNT(date_of_completion) ASC", "binning": "BIN date_of_completion BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_of_completion , COUNT(date_of_completion) FROM Student_Course_Enrolment  ORDER BY COUNT(date_of_completion) ASC BIN date_of_completion BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "How many companies are there in each headquarters? Return a stacked bar chart to group by industry and headquearters, and count by headquarters, show by the bar in ascending.", "db_id": "company_employee", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Industry ,  Headquarters ORDER BY Headquarters ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Industry ,  Headquarters ORDER BY Headquarters ASC"}, "hardness": "Hard"}, {"nl_queries": "Find the average of credits of courses that have more than one prerequisite for each title with a bar chart, and show x axis in ascending order.", "db_id": "college_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT title , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title ORDER BY title ASC", "binning": ""}, "VQL": "Visualize BAR SELECT title , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title ORDER BY title ASC"}, "hardness": "Hard"}, {"nl_queries": "How many stores are headquarted in each city Plot them as bar chart, and show in descending by the y axis please.", "db_id": "store_product", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Headquartered_City , count(*) FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id GROUP BY t3.headquartered_city ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Headquartered_City , count(*) FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id GROUP BY t3.headquartered_city ORDER BY count(*) DESC"}, "hardness": "Hard"}, {"nl_queries": "Count the number of employees for each city with a bar chart, display total number from low to high order.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT City , count(*) FROM employee GROUP BY city ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT City , count(*) FROM employee GROUP BY city ORDER BY count(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "A bar chart for what are the number of the dates in which the mean sea level pressure was between 303 and 31?, sort in asc by the how many date please.", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date , COUNT(date) FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31  ORDER BY COUNT(date) ASC", "binning": "BIN date BY YEAR"}, "VQL": "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31  ORDER BY COUNT(date) ASC BIN date BY YEAR"}, "hardness": "Hard"}, {"nl_queries": "For those employees who did not have any job in the past, visualize a bar chart about the distribution of job_id and the sum of salary , and group by attribute job_id, display y-axis from low to high order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY SUM(SALARY) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY SUM(SALARY) ASC"}, "hardness": "Hard"}, {"nl_queries": "List singer names and number of concerts for each singer. Show the proportion.", "db_id": "concert_singer", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Name , count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id GROUP BY T2.singer_id", "binning": ""}, "VQL": "Visualize PIE SELECT Name , count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id GROUP BY T2.singer_id"}, "hardness": "Medium"}, {"nl_queries": "Display a bar chart for what are the names of climbers and the corresponding heights of the mountains that they climb?, rank x axis in desc order.", "db_id": "climbing", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID ORDER BY T1.Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID ORDER BY T1.Name DESC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about the average of price over the founder , and group by attribute founder by a bar chart, list from high to low by the Y-axis.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Founder , AVG(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder ORDER BY AVG(Price) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Founder , AVG(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder ORDER BY AVG(Price) DESC"}, "hardness": "Hard"}, {"nl_queries": "Visualize a bar chart about the distribution of Start_from and the amount of Start_from bin start_from by weekday, show by the y axis in descending please.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Start_from , COUNT(Start_from) FROM hiring  ORDER BY COUNT(Start_from) DESC", "binning": "BIN Start_from BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Start_from , COUNT(Start_from) FROM hiring  ORDER BY COUNT(Start_from) DESC BIN Start_from BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "Show the different nationalities and the number of journalists of each nationality Visualize by bar chart, order y axis in descending order.", "db_id": "news_report", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nationality , COUNT(*) FROM journalist GROUP BY Nationality ORDER BY COUNT(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM journalist GROUP BY Nationality ORDER BY COUNT(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "Show me distance by name in a histogram, and order names from low to high order please.", "db_id": "flight_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , distance FROM Aircraft ORDER BY name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT name , distance FROM Aircraft ORDER BY name ASC"}, "hardness": "Easy"}, {"nl_queries": "A pie chart for what are the number of the names of all the Japanese constructors that have earned more than 5 points?", "db_id": "formula_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name", "binning": ""}, "VQL": "Visualize PIE SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name"}, "hardness": "Hard"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, give me the comparison about the average of manager_id over the  job_id , and group by attribute job_id by a bar chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID"}, "hardness": "Hard"}, {"nl_queries": "What are the descriptions of the service types with product price above 100, and count them by a bar chart", "db_id": "cre_Drama_Workshop_Groups", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Service_Type_Description , COUNT(Service_Type_Description) FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code WHERE T2.Product_Price > 100 GROUP BY Service_Type_Description", "binning": ""}, "VQL": "Visualize BAR SELECT Service_Type_Description , COUNT(Service_Type_Description) FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code WHERE T2.Product_Price > 100 GROUP BY Service_Type_Description"}, "hardness": "Hard"}, {"nl_queries": "How many players played each position Plot them as bar chart, and could you display y axis from high to low order?", "db_id": "match_season", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Position , COUNT(*) FROM match_season GROUP BY POSITION ORDER BY COUNT(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Position , COUNT(*) FROM match_season GROUP BY POSITION ORDER BY COUNT(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "Visualize a bar chart for what are the name and level of catalog structure with level number between 5 and 10, and I want to list in ascending by the y axis.", "db_id": "product_catalog", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number ASC", "binning": ""}, "VQL": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number ASC"}, "hardness": "Medium"}, {"nl_queries": "A line chart for what are the number of the dates of birth of entrepreneurs with investor \"Simon Woodroffe\" or \"Peter Jones\"?, sort by the Date_of_Birth in desc.", "db_id": "entrepreneur", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Date_of_Birth , COUNT(Date_of_Birth) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Investor = \"Simon Woodroffe\" OR T1.Investor = \"Peter Jones\"  ORDER BY Date_of_Birth DESC", "binning": "BIN Date_of_Birth BY YEAR"}, "VQL": "Visualize LINE SELECT Date_of_Birth , COUNT(Date_of_Birth) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Investor = \"Simon Woodroffe\" OR T1.Investor = \"Peter Jones\"  ORDER BY Date_of_Birth DESC BIN Date_of_Birth BY YEAR"}, "hardness": "Extra Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about the average of code over the name , and group by attribute name, order from low to high by the Name.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC"}, "hardness": "Hard"}, {"nl_queries": "Show sum salary from each hire date", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(SALARY) FROM employees", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees BIN HIRE_DATE BY MONTH"}, "hardness": "Easy"}, {"nl_queries": "Who has friends that are older than the average age? Print their friends and their ages as well using a bar chart, and display by the Y-axis from high to low.", "db_id": "network_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT friend , age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T1.age > (SELECT avg(age) FROM person) ORDER BY age DESC", "binning": ""}, "VQL": "Visualize BAR SELECT friend , age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T1.age > (SELECT avg(age) FROM person) ORDER BY age DESC"}, "hardness": "Hard"}, {"nl_queries": "What are the dates that have an average sea level pressure between 303 and 31, and count them by a bar chart, and rank by the y-axis in ascending please.", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date , COUNT(date) FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31  ORDER BY COUNT(date) ASC", "binning": "BIN date BY YEAR"}, "VQL": "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31  ORDER BY COUNT(date) ASC BIN date BY YEAR"}, "hardness": "Hard"}, {"nl_queries": "What is the highest price of product, grouped by product type? Show a pie chart.", "db_id": "department_store", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code", "binning": ""}, "VQL": "Visualize PIE SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code"}, "hardness": "Easy"}, {"nl_queries": "Show me the number of born state by born state in a histogram, show by the y axis from low to high.", "db_id": "department_management", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT born_state , COUNT(born_state) FROM head GROUP BY born_state ORDER BY COUNT(born_state) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT born_state , COUNT(born_state) FROM head GROUP BY born_state ORDER BY COUNT(born_state) ASC"}, "hardness": "Medium"}, {"nl_queries": "Display a bar chart for how many counties correspond to each police force?, and I want to rank by the the total number in ascending please.", "db_id": "county_public_safety", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY COUNT(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY COUNT(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "Show sum enrollment from each county", "db_id": "school_finance", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT County , sum(enrollment) FROM school GROUP BY county", "binning": ""}, "VQL": "Visualize BAR SELECT County , sum(enrollment) FROM school GROUP BY county"}, "hardness": "Easy"}, {"nl_queries": "List the order dates of all the bookings, and count them by a line chart", "db_id": "cre_Drama_Workshop_Groups", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Order_Date , COUNT(Order_Date) FROM BOOKINGS", "binning": "BIN Order_Date BY YEAR"}, "VQL": "Visualize LINE SELECT Order_Date , COUNT(Order_Date) FROM BOOKINGS BIN Order_Date BY YEAR"}, "hardness": "Easy"}, {"nl_queries": "For those employees who was hired before 2002-06-21, draw a bar chart about the distribution of job_id and the amount of job_id , and group by attribute job_id, order by the total number in asc.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , COUNT(JOB_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY COUNT(JOB_ID) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY COUNT(JOB_ID) ASC"}, "hardness": "Hard"}, {"nl_queries": "Compare the number of songs each singer has using a bar chart, order x-axis from high to low order.", "db_id": "singer", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY Name ORDER BY Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY Name ORDER BY Name DESC"}, "hardness": "Hard"}, {"nl_queries": "Compare the distribution of the players' gender using a bar chart, and rank in descending by the bar please.", "db_id": "riding_club", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Gender , COUNT(Gender) FROM player GROUP BY Gender ORDER BY Gender DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Gender , COUNT(Gender) FROM player GROUP BY Gender ORDER BY Gender DESC"}, "hardness": "Medium"}, {"nl_queries": "Create a bar chart showing how many hire date across hire date", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees BIN HIRE_DATE BY MONTH"}, "hardness": "Easy"}, {"nl_queries": "Draw a bar chart for what are the different first names and ages of the students who do have pets?, rank by the X-axis in asc.", "db_id": "pets_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid ORDER BY Fname ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid ORDER BY Fname ASC"}, "hardness": "Medium"}, {"nl_queries": "Return a bar chart on how many customers use each payment method?, and I want to rank x-axis from low to high order.", "db_id": "department_store", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT payment_method_code , count(*) FROM customers GROUP BY payment_method_code ORDER BY payment_method_code ASC", "binning": ""}, "VQL": "Visualize BAR SELECT payment_method_code , count(*) FROM customers GROUP BY payment_method_code ORDER BY payment_method_code ASC"}, "hardness": "Medium"}, {"nl_queries": "Show the total number from each payment method code, rank in asc by the x-axis please.", "db_id": "driving_school", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT payment_method_code , count(*) FROM Customer_Payments GROUP BY payment_method_code ORDER BY payment_method_code ASC", "binning": ""}, "VQL": "Visualize BAR SELECT payment_method_code , count(*) FROM Customer_Payments GROUP BY payment_method_code ORDER BY payment_method_code ASC"}, "hardness": "Medium"}, {"nl_queries": "how many credits does the department offer?, I want to display Y in descending order please.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT DEPT_CODE , sum(crs_credit) FROM course GROUP BY dept_code ORDER BY sum(crs_credit) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT DEPT_CODE , sum(crs_credit) FROM course GROUP BY dept_code ORDER BY sum(crs_credit) DESC"}, "hardness": "Medium"}, {"nl_queries": "What is the proportion of the minimum price of the rooms for each different decor? Show me a pie chart!", "db_id": "inn_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT decor , min(basePrice) FROM Rooms GROUP BY decor", "binning": ""}, "VQL": "Visualize PIE SELECT decor , min(basePrice) FROM Rooms GROUP BY decor"}, "hardness": "Easy"}, {"nl_queries": "Show the average price of each film in a bar chart.", "db_id": "cinema", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Title , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title", "binning": ""}, "VQL": "Visualize BAR SELECT Title , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title"}, "hardness": "Medium"}, {"nl_queries": "For those employees who was hired before 2002-06-21, show me about the change of  salary over  hire_date  in a line chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21'", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21'"}, "hardness": "Easy"}, {"nl_queries": "Can you draw the trend of the number of start from over the start from?", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Start_from , COUNT(Start_from) FROM hiring", "binning": "BIN Start_from BY YEAR"}, "VQL": "Visualize LINE SELECT Start_from , COUNT(Start_from) FROM hiring BIN Start_from BY YEAR"}, "hardness": "Easy"}, {"nl_queries": "Scatterplot of school_id vs team id by Team_Name", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Team_ID , School_ID FROM basketball_match GROUP BY Team_Name", "binning": ""}, "VQL": "Visualize SCATTER SELECT Team_ID , School_ID FROM basketball_match GROUP BY Team_Name"}, "hardness": "Easy"}, {"nl_queries": "A pie chart listing the number of faults for different description of skills required to fix them.", "db_id": "assets_maintenance", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT skill_description , COUNT(skill_description) FROM Part_Faults AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.part_fault_id = T2.part_fault_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY skill_description", "binning": ""}, "VQL": "Visualize PIE SELECT skill_description , COUNT(skill_description) FROM Part_Faults AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.part_fault_id = T2.part_fault_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY skill_description"}, "hardness": "Medium"}, {"nl_queries": "Scatter plot to show min(age) on x axis and maximal age on y axis for different majors.", "db_id": "game_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT min(age) , max(age) , major FROM Student GROUP BY major", "binning": ""}, "VQL": "Visualize SCATTER SELECT min(age) , max(age) , major FROM Student GROUP BY major"}, "hardness": "Medium"}, {"nl_queries": "A bar chart for finding the number of the dates of the tests taken with result \"Pass\", I want to show by the y-axis in ascending.", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY COUNT(date_test_taken) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY COUNT(date_test_taken) ASC"}, "hardness": "Hard"}, {"nl_queries": "Bar chart x axis lot details y axis the number of lot details, rank in ascending by the total number.", "db_id": "tracking_share_transactions", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT lot_details , COUNT(lot_details) FROM LOTS GROUP BY lot_details ORDER BY COUNT(lot_details) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM LOTS GROUP BY lot_details ORDER BY COUNT(lot_details) ASC"}, "hardness": "Medium"}, {"nl_queries": "Show the GPA of the students with the top 5 GPAs in a pie chart.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT STU_FNAME , STU_GPA FROM student ORDER BY stu_gpa DESC LIMIT 5", "binning": ""}, "VQL": "Visualize PIE SELECT STU_FNAME , STU_GPA FROM student ORDER BY stu_gpa DESC LIMIT 5"}, "hardness": "Medium"}, {"nl_queries": "Bar chart x axis open date y axis how many open date, and order in asc by the y-axis.", "db_id": "wedding", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Open_Date , COUNT(Open_Date) FROM Church  ORDER BY COUNT(Open_Date) ASC", "binning": "BIN Open_Date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Open_Date , COUNT(Open_Date) FROM Church  ORDER BY COUNT(Open_Date) ASC BIN Open_Date BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "List the number of dogs for each size code in a bar chart.", "db_id": "dog_kennels", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT size_code , COUNT(size_code) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY size_code", "binning": ""}, "VQL": "Visualize BAR SELECT size_code , COUNT(size_code) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY size_code"}, "hardness": "Medium"}, {"nl_queries": "What are the average star ratings of each movie title? Could you return me a bar chart?, show names from high to low order please.", "db_id": "movie_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT title , AVG(stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY title ORDER BY title DESC", "binning": ""}, "VQL": "Visualize BAR SELECT title , AVG(stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY title ORDER BY title DESC"}, "hardness": "Hard"}, {"nl_queries": "What are the number of rooms for each bed type Show bar chart, list from high to low by the X-axis please.", "db_id": "inn_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT bedType , count(*) FROM Rooms GROUP BY bedType ORDER BY bedType DESC", "binning": ""}, "VQL": "Visualize BAR SELECT bedType , count(*) FROM Rooms GROUP BY bedType ORDER BY bedType DESC"}, "hardness": "Medium"}, {"nl_queries": "Find  date_address_to and the amount of date_address_to , and group by attribute other_details and bin date_address_to by time, and visualize them by a bar chart.", "db_id": "behavior_monitoring", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC", "binning": "BIN date_address_to BY MONTH"}, "VQL": "Visualize BAR SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_to BY MONTH"}, "hardness": "Extra Hard"}, {"nl_queries": "What are the number of the names of photos taken with the lens brand 'Sigma' or 'Olympus'?, and show bar from high to low order.", "db_id": "mountain_photos", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.name , COUNT(T1.name) FROM camera_lens AS T1 JOIN photos AS T2 ON T2.camera_lens_id = T1.id WHERE T1.brand = 'Sigma' OR T1.brand = 'Olympus' GROUP BY T1.name ORDER BY T1.name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.name , COUNT(T1.name) FROM camera_lens AS T1 JOIN photos AS T2 ON T2.camera_lens_id = T1.id WHERE T1.brand = 'Sigma' OR T1.brand = 'Olympus' GROUP BY T1.name ORDER BY T1.name DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, find hire_date and the sum of employee_id bin hire_date by time, and visualize them by a bar chart, display by the y axis in descending please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) DESC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH"}, "hardness": "Extra Hard"}, {"nl_queries": "For each director, how many reviews have they received. Visualize by bar chart.", "db_id": "movie_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT director , count(*) FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID GROUP BY T1.director", "binning": ""}, "VQL": "Visualize BAR SELECT director , count(*) FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID GROUP BY T1.director"}, "hardness": "Medium"}, {"nl_queries": "Draw a line chart about the change of Employee_ID over Start_from , and order X-axis from low to high order please.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Start_from , Employee_ID FROM hiring ORDER BY Start_from ASC", "binning": ""}, "VQL": "Visualize LINE SELECT Start_from , Employee_ID FROM hiring ORDER BY Start_from ASC"}, "hardness": "Easy"}, {"nl_queries": "Return a bar chart on what is the number of professors for different school?, and show by the names from high to low.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE DESC", "binning": ""}, "VQL": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE DESC"}, "hardness": "Hard"}, {"nl_queries": "Show the average amount of transactions for different investors. Plot them as scatter chart.", "db_id": "tracking_share_transactions", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT investor_id , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY investor_id", "binning": ""}, "VQL": "Visualize SCATTER SELECT investor_id , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY investor_id"}, "hardness": "Easy"}, {"nl_queries": "Return a histogram on how many students are in each department?, and order by the y-axis from low to high.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY count(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "Give me the comparison about ID over the meter_300 , and show by the y axis in descending.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_300 , ID FROM swimmer ORDER BY ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_300 , ID FROM swimmer ORDER BY ID DESC"}, "hardness": "Easy"}, {"nl_queries": "What are the number of the titles of all movies that have between 3 and 5 stars?, display X-axis in ascending order.", "db_id": "movie_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT title , COUNT(title) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T1.stars BETWEEN 3 AND 5 GROUP BY title ORDER BY title ASC", "binning": ""}, "VQL": "Visualize BAR SELECT title , COUNT(title) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T1.stars BETWEEN 3 AND 5 GROUP BY title ORDER BY title ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "List the states of all votes, group states and count them in a bar chart, order by the total number in asc.", "db_id": "voter_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT state , COUNT(state) FROM votes GROUP BY state ORDER BY COUNT(state) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT state , COUNT(state) FROM votes GROUP BY state ORDER BY COUNT(state) ASC"}, "hardness": "Medium"}, {"nl_queries": "how old is the youngest person for each job?", "db_id": "network_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT job , min(age) FROM Person GROUP BY job", "binning": ""}, "VQL": "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job"}, "hardness": "Easy"}, {"nl_queries": "Draw a bar chart for what is the average account balance of customers with credit score below 50 for the different account types?, and show by the y-axis in ascending.", "db_id": "loan_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type ORDER BY avg(acc_bal) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type ORDER BY avg(acc_bal) ASC"}, "hardness": "Hard"}, {"nl_queries": "What are the number of the descriptions of the service types with product price above 100?", "db_id": "cre_Drama_Workshop_Groups", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Service_Type_Description , COUNT(Service_Type_Description) FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code WHERE T2.Product_Price > 100 GROUP BY Service_Type_Description", "binning": ""}, "VQL": "Visualize PIE SELECT Service_Type_Description , COUNT(Service_Type_Description) FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code WHERE T2.Product_Price > 100 GROUP BY Service_Type_Description"}, "hardness": "Hard"}, {"nl_queries": "Show all origins and the number of flights from each origin by a bar chart, list by the X from high to low.", "db_id": "flight_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT origin , count(*) FROM Flight GROUP BY origin ORDER BY origin DESC", "binning": ""}, "VQL": "Visualize BAR SELECT origin , count(*) FROM Flight GROUP BY origin ORDER BY origin DESC"}, "hardness": "Medium"}, {"nl_queries": "Visualize a bar chart for how many players are from each country?, could you show by the Country_name from low to high?", "db_id": "match_season", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Country_name , COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country GROUP BY T1.Country_name ORDER BY Country_name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Country_name , COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country GROUP BY T1.Country_name ORDER BY Country_name ASC"}, "hardness": "Hard"}, {"nl_queries": "List the cost of each treatment and the corresponding treatment type description by a bar chart, and could you sort in desc by the y axis?", "db_id": "dog_kennels", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT treatment_type_description , AVG(cost_of_treatment) FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY treatment_type_description ORDER BY AVG(cost_of_treatment) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT treatment_type_description , AVG(cost_of_treatment) FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY treatment_type_description ORDER BY AVG(cost_of_treatment) DESC"}, "hardness": "Hard"}, {"nl_queries": "A line chart shows the trend of the amount of Start_from over Start_from bin start_from by time, and display by the x axis in ascending.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Start_from , COUNT(Start_from) FROM hiring  ORDER BY Start_from ASC", "binning": "BIN Start_from BY YEAR"}, "VQL": "Visualize LINE SELECT Start_from , COUNT(Start_from) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "Give me a histogram for how many engineers did each staff contact? List both the contact staff name and number of engineers contacted, list by the total number in descending.", "db_id": "assets_maintenance", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT staff_name , count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT staff_name , count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name ORDER BY count(*) DESC"}, "hardness": "Hard"}, {"nl_queries": "What are the ids and names of the companies that operated more than one flight, I want to list by the X-axis from high to low please.", "db_id": "flight_company", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.name , T1.id FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id ORDER BY T1.name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.name , T1.id FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id ORDER BY T1.name DESC"}, "hardness": "Medium"}, {"nl_queries": "Bar chart of the number of state from each state, and show x axis in asc order.", "db_id": "voter_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT state , COUNT(state) FROM votes GROUP BY state ORDER BY state ASC", "binning": ""}, "VQL": "Visualize BAR SELECT state , COUNT(state) FROM votes GROUP BY state ORDER BY state ASC"}, "hardness": "Medium"}, {"nl_queries": "Show the number of assets and group by asset make in a bar chart.", "db_id": "assets_maintenance", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT asset_make , COUNT(asset_make) FROM Assets GROUP BY asset_make", "binning": ""}, "VQL": "Visualize BAR SELECT asset_make , COUNT(asset_make) FROM Assets GROUP BY asset_make"}, "hardness": "Easy"}, {"nl_queries": "What is minimum age for different job title. Show a pie chart.", "db_id": "network_2", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT job , min(age) FROM Person GROUP BY job", "binning": ""}, "VQL": "Visualize PIE SELECT job , min(age) FROM Person GROUP BY job"}, "hardness": "Easy"}, {"nl_queries": "how many car makers are there in each continents? List the continent name and the count, display by the x axis from high to low.", "db_id": "car_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY T1.Continent DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY T1.Continent DESC"}, "hardness": "Hard"}, {"nl_queries": "What is the relationship between service type code and number of services? Show me a scatter chart.", "db_id": "cre_Drama_Workshop_Groups", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Service_Type_Code , COUNT(*) FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code GROUP BY T2.Service_Type_Code", "binning": ""}, "VQL": "Visualize SCATTER SELECT Service_Type_Code , COUNT(*) FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code GROUP BY T2.Service_Type_Code"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, visualize a scatter chart about the correlation between  price and  revenue , and group by attribute founder.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Price , Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder", "binning": ""}, "VQL": "Visualize SCATTER SELECT Price , Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder"}, "hardness": "Medium"}, {"nl_queries": "what is the average base price of different bed type? List bed type and average base price, could you list in asc by the Y?", "db_id": "inn_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT bedType , avg(basePrice) FROM Rooms GROUP BY bedType ORDER BY avg(basePrice) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT bedType , avg(basePrice) FROM Rooms GROUP BY bedType ORDER BY avg(basePrice) ASC"}, "hardness": "Medium"}, {"nl_queries": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones, and count them by a bar chart, and rank by the total number in ascending.", "db_id": "tvshow", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) ASC"}, "hardness": "Hard"}, {"nl_queries": "Show me school_id by all road in a histogram, sort in desc by the x axis.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Road , School_ID FROM basketball_match ORDER BY All_Road DESC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Road , School_ID FROM basketball_match ORDER BY All_Road DESC"}, "hardness": "Easy"}, {"nl_queries": "Return a bar chart about the distribution of All_Home and the sum of School_ID , and group by attribute All_Home, and display by the y axis in descending.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY SUM(School_ID) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY SUM(School_ID) DESC"}, "hardness": "Medium"}, {"nl_queries": "For those products with a price between 60 and 120, find name and code , and visualize them by a bar chart, sort by the X from low to high.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name ASC"}, "hardness": "Medium"}, {"nl_queries": "What are the top 10 customers' first names with the highest gross sales, and also what are the sales? Visualize the result with a bar chart.", "db_id": "store_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT first_name , SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10", "binning": ""}, "VQL": "Visualize BAR SELECT first_name , SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10"}, "hardness": "Extra Hard"}, {"nl_queries": "Give me a bar chart showing the comparison of the pixel aspect ratio and the nation of the tv channels that do not use English.", "db_id": "tvshow", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR", "binning": ""}, "VQL": "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR"}, "hardness": "Medium"}, {"nl_queries": "Bar chart x axis name y axis total number of grade, display by the bar in desc.", "db_id": "network_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name DESC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, give me the trend about employee_id over hire_date , rank by the x axis in asc.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC"}, "hardness": "Medium"}, {"nl_queries": "Show the relationship between card id and customer id and group by card type code in a group scatter chart.", "db_id": "customers_card_transactions", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT card_id , customer_id FROM Customers_cards GROUP BY card_type_code", "binning": ""}, "VQL": "Visualize SCATTER SELECT card_id , customer_id FROM Customers_cards GROUP BY card_type_code"}, "hardness": "Easy"}, {"nl_queries": "Visualize a bar chart about the distribution of ACC_Regular_Season and School_ID , and display Y-axis in desc order please.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Regular_Season , School_ID FROM basketball_match ORDER BY School_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Regular_Season , School_ID FROM basketball_match ORDER BY School_ID DESC"}, "hardness": "Easy"}, {"nl_queries": "Show the name and age for all male people who don't have a wedding by a pie chart.", "db_id": "wedding", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Name , Age FROM people WHERE is_male = 'T' AND people_id NOT IN (SELECT male_id FROM wedding)", "binning": ""}, "VQL": "Visualize PIE SELECT Name , Age FROM people WHERE is_male = 'T' AND people_id NOT IN (SELECT male_id FROM wedding)"}, "hardness": "Easy"}, {"nl_queries": "What are the number of the descriptions for the aircrafts?, and rank by the Y-axis in desc please.", "db_id": "aircraft", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY COUNT(Description) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY COUNT(Description) DESC"}, "hardness": "Medium"}, {"nl_queries": "For all employees who have the letters D or S in their first name, give me the trend about salary over hire_date , and could you order by the x axis from high to low?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , SALARY FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY HIRE_DATE DESC", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY HIRE_DATE DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "Give me the comparison about ACC_Percent over the Team_Name , show in desc by the bars.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Team_Name , ACC_Percent FROM basketball_match ORDER BY Team_Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Team_Name , ACC_Percent FROM basketball_match ORDER BY Team_Name DESC"}, "hardness": "Easy"}, {"nl_queries": "A bar chart for finding the number of the name of the project for which a scientist whose name contains \u2018Smith\u2019 is assigned to, rank from high to low by the bars.", "db_id": "scientist_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , COUNT(T2.Name) FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T3.name LIKE '%Smith%' GROUP BY T2.Name ORDER BY T2.Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T3.name LIKE '%Smith%' GROUP BY T2.Name ORDER BY T2.Name DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "Bar chart x axis date claim settled y axis the number of date claim settled, order Y-axis from low to high order.", "db_id": "insurance_policies", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements  ORDER BY COUNT(Date_Claim_Settled) ASC", "binning": "BIN Date_Claim_Settled BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Date_Claim_Settled , COUNT(Date_Claim_Settled) FROM Settlements  ORDER BY COUNT(Date_Claim_Settled) ASC BIN Date_Claim_Settled BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "For all employees who have the letters D or S in their first name, draw a bar chart about the distribution of  hire_date and the average of department_id bin hire_date by time.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH"}, "hardness": "Extra Hard"}, {"nl_queries": "How many accounts are opened in each year? Show a line chart, order in desc by the X.", "db_id": "customers_and_invoices", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date_account_opened , COUNT(date_account_opened) FROM Accounts  ORDER BY date_account_opened DESC", "binning": "BIN date_account_opened BY YEAR"}, "VQL": "Visualize LINE SELECT date_account_opened , COUNT(date_account_opened) FROM Accounts  ORDER BY date_account_opened DESC BIN date_account_opened BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "Show the number of courses each teacher teaches in a bar chart.", "db_id": "course_teach", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID GROUP BY Name", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID GROUP BY Name"}, "hardness": "Medium"}, {"nl_queries": "Show all origins and the number of flights from each origin by a bar chart, could you list in ascending by the Y?", "db_id": "flight_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT origin , count(*) FROM Flight GROUP BY origin ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT origin , count(*) FROM Flight GROUP BY origin ORDER BY count(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "Visualize a bar chart about the distribution of ACC_Regular_Season and School_ID , list x axis from low to high order.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Regular_Season , School_ID FROM basketball_match ORDER BY ACC_Regular_Season ASC", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Regular_Season , School_ID FROM basketball_match ORDER BY ACC_Regular_Season ASC"}, "hardness": "Easy"}, {"nl_queries": "Show all payment method codes and the number of orders for each code. Visualize by pie chart.", "db_id": "cre_Drama_Workshop_Groups", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code", "binning": ""}, "VQL": "Visualize PIE SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code"}, "hardness": "Easy"}, {"nl_queries": "What are the number of the category of music festivals with result \"Awarded\"?", "db_id": "music_4", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category", "binning": ""}, "VQL": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category"}, "hardness": "Medium"}, {"nl_queries": "What are the names and ids of the tourist attractions that are visited at most once. Show the proportion.", "db_id": "cre_Theme_park", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT T1.Name , T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID", "binning": ""}, "VQL": "Visualize PIE SELECT T1.Name , T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID"}, "hardness": "Easy"}, {"nl_queries": "What is the number of players who have points less than 30 for each position Plot them as bar chart, and list by the names in desc.", "db_id": "sports_competition", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Position , count(*) FROM player WHERE points < 30 GROUP BY POSITION ORDER BY Position DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Position , count(*) FROM player WHERE points < 30 GROUP BY POSITION ORDER BY Position DESC"}, "hardness": "Hard"}, {"nl_queries": "Show the draft pick numbers and draft classes of players whose positions are defenders in a bar chart, could you order by the Y-axis in ascending?", "db_id": "match_season", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Draft_Class , Draft_Pick_Number FROM match_season WHERE POSITION = \"Defender\" ORDER BY Draft_Pick_Number ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Draft_Class , Draft_Pick_Number FROM match_season WHERE POSITION = \"Defender\" ORDER BY Draft_Pick_Number ASC"}, "hardness": "Medium"}, {"nl_queries": "Return a pie chart about the proportion of  state and  enr.", "db_id": "soccer_2", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT state , enr FROM College ORDER BY enr", "binning": ""}, "VQL": "Visualize PIE SELECT state , enr FROM College ORDER BY enr"}, "hardness": "Easy"}, {"nl_queries": "Show the authors of their total submissions with a pie chart.", "db_id": "workshop_paper", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Author , COUNT(Author) FROM submission GROUP BY Author", "binning": ""}, "VQL": "Visualize PIE SELECT Author , COUNT(Author) FROM submission GROUP BY Author"}, "hardness": "Easy"}, {"nl_queries": "Draw a bar chart about the distribution of meter_200 and the amount of meter_200 , and group by attribute meter_200, and order from low to high by the bars.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_200 , COUNT(meter_200) FROM swimmer GROUP BY meter_200 ORDER BY meter_200 ASC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_200 , COUNT(meter_200) FROM swimmer GROUP BY meter_200 ORDER BY meter_200 ASC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who was hired before 2002-06-21, find job_id and the sum of employee_id , and group by attribute job_id, and visualize them by a bar chart, could you order x-axis in desc order?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, show me about the distribution of hire_date and the amount of hire_date bin hire_date by weekday in a bar chart, and sort in ascending by the total number please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY COUNT(HIRE_DATE) ASC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "Show me about the distribution of All_Home and the average of Team_ID , and group by attribute All_Home in a bar chart, and sort by the X in descending.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Home , AVG(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home DESC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Home , AVG(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home DESC"}, "hardness": "Medium"}, {"nl_queries": "List singer names and number of concerts for each singer, and could you sort X-axis in asc order?", "db_id": "concert_singer", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id GROUP BY T2.singer_id ORDER BY Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id GROUP BY T2.singer_id ORDER BY Name ASC"}, "hardness": "Hard"}, {"nl_queries": "Give the number of locations of all wrestlers with a bar chart.", "db_id": "wrestler", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Location , COUNT(Location) FROM wrestler GROUP BY Location", "binning": ""}, "VQL": "Visualize BAR SELECT Location , COUNT(Location) FROM wrestler GROUP BY Location"}, "hardness": "Easy"}, {"nl_queries": "For those employees who was hired before 2002-06-21, draw a bar chart about the distribution of hire_date and the average of salary bin hire_date by time, and could you rank from low to high by the Y-axis?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(SALARY) ASC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, show me about the distribution of first_name and salary in a bar chart, I want to rank by the total number in ascending.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT FIRST_NAME , SALARY FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY SALARY ASC", "binning": ""}, "VQL": "Visualize BAR SELECT FIRST_NAME , SALARY FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY SALARY ASC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, return a bar chart about the distribution of headquarter and the average of revenue , and group by attribute headquarter, and I want to list from low to high by the Headquarter.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC"}, "hardness": "Hard"}, {"nl_queries": "What are the age and hometown of teachers Visualize by bar chart, rank y axis from high to low order please.", "db_id": "course_teach", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Hometown , Age FROM teacher ORDER BY Age DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Hometown , Age FROM teacher ORDER BY Age DESC"}, "hardness": "Easy"}, {"nl_queries": "Find  All_Neutral and  Team_ID , and visualize them by a bar chart.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Neutral , Team_ID FROM basketball_match", "binning": ""}, "VQL": "Visualize BAR SELECT All_Neutral , Team_ID FROM basketball_match"}, "hardness": "Easy"}, {"nl_queries": "Show the number of accounts opened in each year for all accounts and group by other account details in a group line chart.", "db_id": "customers_and_invoices", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date_account_opened , COUNT(date_account_opened) FROM Accounts GROUP BY other_account_details", "binning": "BIN date_account_opened BY YEAR"}, "VQL": "Visualize LINE SELECT date_account_opened , COUNT(date_account_opened) FROM Accounts GROUP BY other_account_details BIN date_account_opened BY YEAR"}, "hardness": "Hard"}, {"nl_queries": "Return a histogram on what is the total credit does each department offer?, and I want to list X in desc order.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT DEPT_CODE , sum(crs_credit) FROM course GROUP BY dept_code ORDER BY DEPT_CODE DESC", "binning": ""}, "VQL": "Visualize BAR SELECT DEPT_CODE , sum(crs_credit) FROM course GROUP BY dept_code ORDER BY DEPT_CODE DESC"}, "hardness": "Medium"}, {"nl_queries": "Return a bar chart about the distribution of All_Home and the amount of All_Home , and group by attribute All_Home, sort by the x axis from high to low.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home ORDER BY All_Home DESC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home ORDER BY All_Home DESC"}, "hardness": "Medium"}, {"nl_queries": "Find the number of the enrollment date for all the tests that have \"Pass\" result.", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = \"Pass\" GROUP BY date_of_enrolment", "binning": ""}, "VQL": "Visualize LINE SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = \"Pass\" GROUP BY date_of_enrolment"}, "hardness": "Hard"}, {"nl_queries": "Draw a bar chart about the distribution of  dept_name and the amount of dept_name , and group by attribute dept_name.", "db_id": "college_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT dept_name , COUNT(dept_name) FROM instructor GROUP BY dept_name ORDER BY salary", "binning": ""}, "VQL": "Visualize BAR SELECT dept_name , COUNT(dept_name) FROM instructor GROUP BY dept_name ORDER BY salary"}, "hardness": "Medium"}, {"nl_queries": "For all employees who have the letters D or S in their first name, show me about the distribution of  hire_date and the amount of hire_date bin hire_date by time in a bar chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH"}, "hardness": "Extra Hard"}, {"nl_queries": "Plot the total number by grouped by industry as a bar graph, and rank from high to low by the bars.", "db_id": "company_office", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry ORDER BY Industry DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry ORDER BY Industry DESC"}, "hardness": "Medium"}, {"nl_queries": "Find Nationality and the sum of meter_100 , and group by attribute Nationality, and visualize them by a bar chart, and could you sort in descending by the total number of meter 100?", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) DESC"}, "hardness": "Medium"}, {"nl_queries": "A bar chart for what are the number of the phone numbers for each employee?, I want to list by the y axis in descending please.", "db_id": "chinook_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY COUNT(Phone) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY COUNT(Phone) DESC"}, "hardness": "Medium"}, {"nl_queries": "What is the number of carriers of phones? Give me a bar chart, and sort X in asc order.", "db_id": "phone_market", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier ORDER BY Carrier ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier ORDER BY Carrier ASC"}, "hardness": "Medium"}, {"nl_queries": "Plot the number of home city by grouped by home city as a bar graph, I want to rank in descending by the bars.", "db_id": "school_bus", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Home_city , COUNT(Home_city) FROM driver GROUP BY Home_city ORDER BY Home_city DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Home_city , COUNT(Home_city) FROM driver GROUP BY Home_city ORDER BY Home_city DESC"}, "hardness": "Medium"}, {"nl_queries": "Stack bar chart of school_id vs All_Home based on acc road", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Road , School_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Road , School_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road"}, "hardness": "Extra Hard"}, {"nl_queries": "Return a bar chart about the distribution of meter_200 and the sum of ID , and group by attribute meter_200, I want to list from high to low by the total number.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_200 , SUM(ID) FROM swimmer GROUP BY meter_200 ORDER BY SUM(ID) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_200 , SUM(ID) FROM swimmer GROUP BY meter_200 ORDER BY SUM(ID) DESC"}, "hardness": "Medium"}, {"nl_queries": "What are the descriptions of the service types with product price above 100, and count them by a bar chart, could you order y axis in desc order?", "db_id": "cre_Drama_Workshop_Groups", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Service_Type_Description , COUNT(Service_Type_Description) FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code WHERE T2.Product_Price > 100 GROUP BY Service_Type_Description ORDER BY COUNT(Service_Type_Description) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Service_Type_Description , COUNT(Service_Type_Description) FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code WHERE T2.Product_Price > 100 GROUP BY Service_Type_Description ORDER BY COUNT(Service_Type_Description) DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "Create a bar chart showing the total number across denomination", "db_id": "school_player", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Denomination , COUNT(*) FROM school GROUP BY Denomination", "binning": ""}, "VQL": "Visualize BAR SELECT Denomination , COUNT(*) FROM school GROUP BY Denomination"}, "hardness": "Easy"}, {"nl_queries": "A bar chart for what is the number of locations of the wrestlers, and show total number in ascending order.", "db_id": "wrestler", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Location , COUNT(Location) FROM wrestler GROUP BY Location ORDER BY COUNT(Location) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Location , COUNT(Location) FROM wrestler GROUP BY Location ORDER BY COUNT(Location) ASC"}, "hardness": "Medium"}, {"nl_queries": "Use a histogram to show the department's id and corresponding employees' first name.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT FIRST_NAME , DEPARTMENT_ID FROM employees", "binning": ""}, "VQL": "Visualize BAR SELECT FIRST_NAME , DEPARTMENT_ID FROM employees"}, "hardness": "Easy"}, {"nl_queries": "For those employees who was hired before 2002-06-21, what is the relationship between  commission_pct and  department_id ?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT COMMISSION_PCT , DEPARTMENT_ID FROM employees WHERE hire_date < '2002-06-21'", "binning": ""}, "VQL": "Visualize SCATTER SELECT COMMISSION_PCT , DEPARTMENT_ID FROM employees WHERE hire_date < '2002-06-21'"}, "hardness": "Easy"}, {"nl_queries": "A bar chart about how many different professors are there for the different schools?, and I want to list from high to low by the X.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE DESC", "binning": ""}, "VQL": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE DESC"}, "hardness": "Hard"}, {"nl_queries": "List the maximum weight and type for each type of pet with a bar chart, order by the Y-axis in ascending please.", "db_id": "pets_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT PetType , max(weight) FROM pets GROUP BY PetType ORDER BY max(weight) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT PetType , max(weight) FROM pets GROUP BY PetType ORDER BY max(weight) ASC"}, "hardness": "Easy"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, show me about the distribution of email and employee_id in a bar chart, and order X in desc order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT EMAIL , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY EMAIL DESC", "binning": ""}, "VQL": "Visualize BAR SELECT EMAIL , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY EMAIL DESC"}, "hardness": "Medium"}, {"nl_queries": "Show the names of countries and the average speed of roller coasters from each country. Show a pie chart.", "db_id": "roller_coaster", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT T1.Name , avg(T2.Speed) FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID GROUP BY T1.Name", "binning": ""}, "VQL": "Visualize PIE SELECT T1.Name , avg(T2.Speed) FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID GROUP BY T1.Name"}, "hardness": "Medium"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, visualize a bar chart about the distribution of first_name and salary , and list in desc by the Y.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT FIRST_NAME , SALARY FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY SALARY DESC", "binning": ""}, "VQL": "Visualize BAR SELECT FIRST_NAME , SALARY FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY SALARY DESC"}, "hardness": "Medium"}, {"nl_queries": "What are the name and level of catalog structure with level number between 5 and 1 Show bar chart, and rank by the Y-axis in descending.", "db_id": "product_catalog", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number DESC", "binning": ""}, "VQL": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number DESC"}, "hardness": "Medium"}, {"nl_queries": "For all employees who have the letters D or S in their first name, show me about the distribution of  hire_date and the amount of hire_date bin hire_date by weekday in a bar chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "Show the smallest enrollment of each state, and list in descending by the x-axis.", "db_id": "soccer_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT state , min(enr) FROM college GROUP BY state ORDER BY state DESC", "binning": ""}, "VQL": "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY state DESC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, visualize a bar chart about the distribution of name and the amount of name , and group by attribute name, display by the y-axis in descending.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY COUNT(T1.Name) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY COUNT(T1.Name) DESC"}, "hardness": "Hard"}, {"nl_queries": "What are the average prices of products, grouped by manufacturer code. Visualize by scatter chart.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT AVG(Price) , Manufacturer FROM Products GROUP BY Manufacturer", "binning": ""}, "VQL": "Visualize SCATTER SELECT AVG(Price) , Manufacturer FROM Products GROUP BY Manufacturer"}, "hardness": "Easy"}, {"nl_queries": "Show me about the distribution of Nationality and the sum of ID , and group by attribute Nationality in a bar chart, and display by the total number in desc.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) DESC"}, "hardness": "Medium"}, {"nl_queries": "Draw a pie chart about the proportion of  Is_full_time and the amount of Is_full_time.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time", "binning": ""}, "VQL": "Visualize PIE SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time"}, "hardness": "Easy"}, {"nl_queries": "Return a bar chart on how many hours do the students spend studying in each department?, could you sort in descending by the sum stu hrs please?", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT DEPT_CODE , sum(stu_hrs) FROM student GROUP BY dept_code ORDER BY sum(stu_hrs) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT DEPT_CODE , sum(stu_hrs) FROM student GROUP BY dept_code ORDER BY sum(stu_hrs) DESC"}, "hardness": "Medium"}, {"nl_queries": "Return a histogram on what are the different names and credit scores of customers who have taken a loan?, and display bars in ascending order please.", "db_id": "loan_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT cust_name , credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id ORDER BY cust_name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT cust_name , credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id ORDER BY cust_name ASC"}, "hardness": "Medium"}, {"nl_queries": "Show me a bar chart for what are the different transaction types, and how many transactions of each have taken place?, list by the bar in ascending.", "db_id": "customers_card_transactions", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT transaction_type , count(*) FROM Financial_transactions GROUP BY transaction_type ORDER BY transaction_type ASC", "binning": ""}, "VQL": "Visualize BAR SELECT transaction_type , count(*) FROM Financial_transactions GROUP BY transaction_type ORDER BY transaction_type ASC"}, "hardness": "Medium"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, a scatter chart shows the correlation between  employee_id and  department_id .", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT EMPLOYEE_ID , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40", "binning": ""}, "VQL": "Visualize SCATTER SELECT EMPLOYEE_ID , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40"}, "hardness": "Medium"}, {"nl_queries": "For all employees who have the letters D or S in their first name, give me the trend about manager_id over hire_date , display HIRE_DATE from low to high order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY HIRE_DATE ASC", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY HIRE_DATE ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "Give me line charts of worldwide gross how many date account opened over year date account opened by major genres other_account_details, list in descending by the x axis please.", "db_id": "customers_and_invoices", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date_account_opened , COUNT(date_account_opened) FROM Accounts GROUP BY other_account_details ORDER BY date_account_opened DESC", "binning": "BIN date_account_opened BY YEAR"}, "VQL": "Visualize LINE SELECT date_account_opened , COUNT(date_account_opened) FROM Accounts GROUP BY other_account_details ORDER BY date_account_opened DESC BIN date_account_opened BY YEAR"}, "hardness": "Extra Hard"}, {"nl_queries": "Please give me a bar chart to show the number of players in each years played, and display by the y-axis in ascending.", "db_id": "match_season", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Years_Played , COUNT(Years_Played) FROM player GROUP BY Years_Played ORDER BY COUNT(Years_Played) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Years_Played , COUNT(Years_Played) FROM player GROUP BY Years_Played ORDER BY COUNT(Years_Played) ASC"}, "hardness": "Medium"}, {"nl_queries": "Give the proportion of how many students are in each department?", "db_id": "college_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code", "binning": ""}, "VQL": "Visualize PIE SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code"}, "hardness": "Easy"}, {"nl_queries": "Return a histogram on how many matches were played in each year?", "db_id": "wta_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT year , count(*) FROM matches GROUP BY YEAR", "binning": ""}, "VQL": "Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR"}, "hardness": "Easy"}, {"nl_queries": "Show me about the correlation between  Snatch and  Total  in a scatter chart.", "db_id": "body_builder", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Snatch , Total FROM body_builder", "binning": ""}, "VQL": "Visualize SCATTER SELECT Snatch , Total FROM body_builder"}, "hardness": "Easy"}, {"nl_queries": "Show the total number from each type, and I want to sort in descending by the y-axis.", "db_id": "entertainment_awards", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Type , COUNT(*) FROM artwork GROUP BY TYPE ORDER BY COUNT(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Type , COUNT(*) FROM artwork GROUP BY TYPE ORDER BY COUNT(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "Plot the average of budget in billions over creation in a line chart, and show Creation in asc order.", "db_id": "department_management", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Creation , AVG(Budget_in_Billions) FROM department GROUP BY Creation ORDER BY Creation ASC", "binning": ""}, "VQL": "Visualize LINE SELECT Creation , AVG(Budget_in_Billions) FROM department GROUP BY Creation ORDER BY Creation ASC"}, "hardness": "Medium"}, {"nl_queries": "Return a bar chart on what are the names of all the documents, as well as the access counts of each, ordered alphabetically?", "db_id": "document_management", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT document_name , access_count FROM documents ORDER BY document_name", "binning": ""}, "VQL": "Visualize BAR SELECT document_name , access_count FROM documents ORDER BY document_name"}, "hardness": "Easy"}, {"nl_queries": "Show the number of faculty members for each rank in a bar chart, I want to order by the y-axis from low to high.", "db_id": "activity_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY COUNT(Rank) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY COUNT(Rank) ASC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, return a bar chart about the distribution of first_name and manager_id , sort FIRST_NAME in desc order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT FIRST_NAME , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY FIRST_NAME DESC", "binning": ""}, "VQL": "Visualize BAR SELECT FIRST_NAME , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY FIRST_NAME DESC"}, "hardness": "Medium"}, {"nl_queries": "Please show me how many employees working on different countries using a bar chart, could you list from high to low by the bars?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT COUNTRY_NAME , COUNT(COUNTRY_NAME) FROM countries GROUP BY COUNTRY_NAME ORDER BY COUNTRY_NAME DESC", "binning": ""}, "VQL": "Visualize BAR SELECT COUNTRY_NAME , COUNT(COUNTRY_NAME) FROM countries GROUP BY COUNTRY_NAME ORDER BY COUNTRY_NAME DESC"}, "hardness": "Medium"}, {"nl_queries": "Can you draw a bar chart to show the number of positions of the pilots?", "db_id": "pilot_record", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Position , COUNT(Position) FROM pilot GROUP BY Position", "binning": ""}, "VQL": "Visualize BAR SELECT Position , COUNT(Position) FROM pilot GROUP BY Position"}, "hardness": "Easy"}, {"nl_queries": "For all the claims whose claimed amount is larger than the average, bin the claim date into day of week interval and count them for visualizing a bar chart, order from high to low by the y axis.", "db_id": "insurance_policies", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Claims WHERE Amount_Claimed > ( SELECT avg(Amount_Claimed) FROM Claims )  ORDER BY COUNT(Date_Claim_Made) DESC", "binning": "BIN Date_Claim_Made BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Claims WHERE Amount_Claimed > ( SELECT avg(Amount_Claimed) FROM Claims )  ORDER BY COUNT(Date_Claim_Made) DESC BIN Date_Claim_Made BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "Show the transaction type and the number of transactions by a bar chart, and show in descending by the transaction_type.", "db_id": "customers_card_transactions", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT transaction_type , count(*) FROM Financial_transactions GROUP BY transaction_type ORDER BY transaction_type DESC", "binning": ""}, "VQL": "Visualize BAR SELECT transaction_type , count(*) FROM Financial_transactions GROUP BY transaction_type ORDER BY transaction_type DESC"}, "hardness": "Medium"}, {"nl_queries": "Create a bar chart showing the total number across party", "db_id": "school_bus", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Party , count(*) FROM driver GROUP BY party", "binning": ""}, "VQL": "Visualize BAR SELECT Party , count(*) FROM driver GROUP BY party"}, "hardness": "Easy"}, {"nl_queries": "What is the number of start date of each apartment booking for each year? Return a bar chart, and I want to list by the y axis in desc please.", "db_id": "apartment_rentals", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id  ORDER BY COUNT(booking_start_date) DESC", "binning": "BIN booking_start_date BY YEAR"}, "VQL": "Visualize BAR SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id  ORDER BY COUNT(booking_start_date) DESC BIN booking_start_date BY YEAR"}, "hardness": "Hard"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, a bar chart shows the distribution of phone_number and salary , and show by the X-axis in descending.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT PHONE_NUMBER , SALARY FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY PHONE_NUMBER DESC", "binning": ""}, "VQL": "Visualize BAR SELECT PHONE_NUMBER , SALARY FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY PHONE_NUMBER DESC"}, "hardness": "Medium"}, {"nl_queries": "Create a bar chart showing how many hire date across hire date, and I want to list by the y-axis in asc.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees  ORDER BY COUNT(HIRE_DATE) ASC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY MONTH"}, "hardness": "Medium"}, {"nl_queries": "How many regions were affected by each storm. Visualize by bar chart.", "db_id": "storm_record", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , count(*) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id", "binning": ""}, "VQL": "Visualize BAR SELECT Name , count(*) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id"}, "hardness": "Medium"}, {"nl_queries": "Show the names of products and the number of events they are in Visualize by bar chart, and I want to sort by the total number in asc.", "db_id": "solvency_ii", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Product_Name , COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID = T2.Product_ID GROUP BY T1.Product_Name ORDER BY COUNT(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Product_Name , COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID = T2.Product_ID GROUP BY T1.Product_Name ORDER BY COUNT(*) ASC"}, "hardness": "Hard"}, {"nl_queries": "Bar chart x axis other account details y axis how many other account details, and list by the Y-axis in desc.", "db_id": "customers_and_invoices", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT other_account_details , COUNT(other_account_details) FROM Accounts GROUP BY other_account_details ORDER BY COUNT(other_account_details) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT other_account_details , COUNT(other_account_details) FROM Accounts GROUP BY other_account_details ORDER BY COUNT(other_account_details) DESC"}, "hardness": "Medium"}, {"nl_queries": "How many transactions correspond to each invoice number. Plot them as scatter chart.", "db_id": "customers_and_invoices", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT invoice_number , count(*) FROM Financial_transactions GROUP BY invoice_number", "binning": ""}, "VQL": "Visualize SCATTER SELECT invoice_number , count(*) FROM Financial_transactions GROUP BY invoice_number"}, "hardness": "Easy"}, {"nl_queries": "Show the number of fate from each fate, and could you order Y-axis from low to high order?", "db_id": "ship_mission", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Fate , COUNT(Fate) FROM mission GROUP BY Fate ORDER BY COUNT(Fate) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Fate , COUNT(Fate) FROM mission GROUP BY Fate ORDER BY COUNT(Fate) ASC"}, "hardness": "Medium"}, {"nl_queries": "Return a scatter chart about the correlation between  School_ID and  All_Games_Percent , and group by attribute All_Games.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY All_Games", "binning": ""}, "VQL": "Visualize SCATTER SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY All_Games"}, "hardness": "Easy"}, {"nl_queries": "Find the number of students whose age is younger than the average age and group by students' last name in a bar chart, and could you order X-axis in ascending order?", "db_id": "dorm_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT LName , COUNT(LName) FROM student WHERE age < (SELECT avg(age) FROM student) GROUP BY LName ORDER BY LName ASC", "binning": ""}, "VQL": "Visualize BAR SELECT LName , COUNT(LName) FROM student WHERE age < (SELECT avg(age) FROM student) GROUP BY LName ORDER BY LName ASC"}, "hardness": "Hard"}, {"nl_queries": "Group and count the move in date in a bar chart, and rank bar from high to low order.", "db_id": "local_govt_and_lot", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_moved_in , COUNT(date_moved_in) FROM customer_events GROUP BY date_moved_in ORDER BY date_moved_in DESC", "binning": ""}, "VQL": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM customer_events GROUP BY date_moved_in ORDER BY date_moved_in DESC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who was hired before 2002-06-21, give me the comparison about the average of manager_id over the job_id , and group by attribute job_id, and list Y-axis in desc order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(MANAGER_ID) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(MANAGER_ID) DESC"}, "hardness": "Hard"}, {"nl_queries": "How many musicals has each nominee been nominated for Plot them as bar chart, show in asc by the total number.", "db_id": "musical", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nominee , COUNT(*) FROM musical GROUP BY Nominee ORDER BY COUNT(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Nominee , COUNT(*) FROM musical GROUP BY Nominee ORDER BY COUNT(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, visualize a scatter chart about the correlation between  employee_id and  salary .", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT EMPLOYEE_ID , SALARY FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)", "binning": ""}, "VQL": "Visualize SCATTER SELECT EMPLOYEE_ID , SALARY FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)"}, "hardness": "Extra Hard"}, {"nl_queries": "Give me a bar chart for the total number of each budget type code, and I want to list by the total number in desc please.", "db_id": "cre_Docs_and_Epenses", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "Draw a bar chart for what is the average rating of songs for each language?", "db_id": "music_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT languages , avg(rating) FROM song GROUP BY languages", "binning": ""}, "VQL": "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages"}, "hardness": "Easy"}, {"nl_queries": "Plot the total number by grouped by how to get there as a bar graph, and rank from high to low by the x axis.", "db_id": "cre_Theme_park", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT How_to_Get_There , COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY How_to_Get_There DESC", "binning": ""}, "VQL": "Visualize BAR SELECT How_to_Get_There , COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY How_to_Get_There DESC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, visualize a bar chart about the distribution of founder and the sum of code , and group by attribute founder, I want to list by the Y from low to high please.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code ASC"}, "hardness": "Hard"}, {"nl_queries": "What are the completion dates of all the tests that have result \"Fail\", and count them by a bar chart, and display Y from high to low order.", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_of_completion , COUNT(date_of_completion) FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = \"Fail\"  ORDER BY COUNT(date_of_completion) DESC", "binning": "BIN date_of_completion BY MONTH"}, "VQL": "Visualize BAR SELECT date_of_completion , COUNT(date_of_completion) FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = \"Fail\"  ORDER BY COUNT(date_of_completion) DESC BIN date_of_completion BY MONTH"}, "hardness": "Extra Hard"}, {"nl_queries": "Show the number of documents created in each day and bin document date by weekday and group by document type with a stacked bar chart, and sort by the the number of document date from low to high.", "db_id": "cre_Docs_and_Epenses", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Name ORDER BY COUNT(Document_Date) ASC", "binning": "BIN Document_Date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Name ORDER BY COUNT(Document_Date) ASC BIN Document_Date BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "Give me the comparison about meter_100 over the name by a bar chart, display in asc by the y-axis.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , meter_100 FROM swimmer ORDER BY meter_100 ASC", "binning": ""}, "VQL": "Visualize BAR SELECT name , meter_100 FROM swimmer ORDER BY meter_100 ASC"}, "hardness": "Easy"}, {"nl_queries": "Bar chart x axis meter 600 y axis id, and sort Y from low to high order please.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_600 , ID FROM swimmer ORDER BY ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_600 , ID FROM swimmer ORDER BY ID ASC"}, "hardness": "Easy"}, {"nl_queries": "Group by services attribute in station table and compute the total number of services with a bar chart.", "db_id": "station_weather", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT services , COUNT(services) FROM station GROUP BY services", "binning": ""}, "VQL": "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services"}, "hardness": "Easy"}, {"nl_queries": "Show sum team id from each all home, and display by the X-axis from high to low.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home DESC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home DESC"}, "hardness": "Medium"}, {"nl_queries": "Show the number of start dates of all the apartment bookings made by guests with gender code \"Female\" for each year with a bar chart, and list by the y axis in asc.", "db_id": "apartment_rentals", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id WHERE T2.gender_code = \"Female\"  ORDER BY COUNT(booking_start_date) ASC", "binning": "BIN booking_start_date BY YEAR"}, "VQL": "Visualize BAR SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id WHERE T2.gender_code = \"Female\"  ORDER BY COUNT(booking_start_date) ASC BIN booking_start_date BY YEAR"}, "hardness": "Extra Hard"}, {"nl_queries": "Find the number of students who took some course and got A or C and group by last name in a bar chart, show by the y-axis from low to high.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT STU_LNAME , COUNT(STU_LNAME) FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A' GROUP BY STU_LNAME ORDER BY COUNT(STU_LNAME) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT STU_LNAME , COUNT(STU_LNAME) FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A' GROUP BY STU_LNAME ORDER BY COUNT(STU_LNAME) ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "Show me about the distribution of  date_address_to and the sum of monthly_rental bin date_address_to by weekday in a bar chart.", "db_id": "behavior_monitoring", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC", "binning": "BIN date_address_to BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "How many injured players not suffering from injury of 'Knee problem' in each match? Show me a bar chart grouping by number of matches, I want to display from high to low by the bar please.", "db_id": "game_injury", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Number_of_matches , COUNT(Number_of_matches) FROM injury_accident WHERE injury != 'Knee problem' GROUP BY Number_of_matches ORDER BY Number_of_matches DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Number_of_matches , COUNT(Number_of_matches) FROM injury_accident WHERE injury != 'Knee problem' GROUP BY Number_of_matches ORDER BY Number_of_matches DESC"}, "hardness": "Hard"}, {"nl_queries": "For the attribute  Sex and the amount of Sex, show their proportion by a pie chart.", "db_id": "candidate_poll", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex", "binning": ""}, "VQL": "Visualize PIE SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex"}, "hardness": "Easy"}, {"nl_queries": "For all employees who have the letters D or S in their first name, return a scatter chart about the correlation between  manager_id and  department_id .", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT MANAGER_ID , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'", "binning": ""}, "VQL": "Visualize SCATTER SELECT MANAGER_ID , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'"}, "hardness": "Hard"}, {"nl_queries": "Show the amount for all the payments processed with Visa distributing the payment date with a bar chart, rank in asc by the x-axis.", "db_id": "insurance_policies", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Date_Payment_Made ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa' ORDER BY Date_Payment_Made ASC"}, "hardness": "Medium"}, {"nl_queries": "Give the name of each department and the number of employees in each Plot them as bar chart, and could you display from low to high by the y-axis?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT DEPARTMENT_NAME , COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id GROUP BY T2.department_name ORDER BY COUNT(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT DEPARTMENT_NAME , COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id GROUP BY T2.department_name ORDER BY COUNT(*) ASC"}, "hardness": "Hard"}, {"nl_queries": "What are the total number of credits offered by each department. Show bar chart.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT DEPT_CODE , sum(T1.crs_credit) FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code = T2.crs_code GROUP BY T1.dept_code", "binning": ""}, "VQL": "Visualize BAR SELECT DEPT_CODE , sum(T1.crs_credit) FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code = T2.crs_code GROUP BY T1.dept_code"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, draw a bar chart about the distribution of  headquarter and the average of code , and group by attribute headquarter.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter"}, "hardness": "Medium"}, {"nl_queries": "For those employees who was hired before 2002-06-21, visualize the relationship between  commission_pct and  manager_id .", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT COMMISSION_PCT , MANAGER_ID FROM employees WHERE hire_date < '2002-06-21'", "binning": ""}, "VQL": "Visualize SCATTER SELECT COMMISSION_PCT , MANAGER_ID FROM employees WHERE hire_date < '2002-06-21'"}, "hardness": "Easy"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about the sum of revenue over the  name , and group by attribute name.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name"}, "hardness": "Medium"}, {"nl_queries": "Return a bar chart about the distribution of Time and ID , and sort by the Y-axis from high to low.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Time , ID FROM swimmer ORDER BY ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Time , ID FROM swimmer ORDER BY ID DESC"}, "hardness": "Easy"}, {"nl_queries": "Show the average age of heads of departments born in each state with a bar chart, and show y-axis from low to high order.", "db_id": "department_management", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT born_state , AVG(age) FROM head GROUP BY born_state ORDER BY AVG(age) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT born_state , AVG(age) FROM head GROUP BY born_state ORDER BY AVG(age) ASC"}, "hardness": "Medium"}, {"nl_queries": "A bar chart shows the distribution of ACC_Regular_Season and Team_ID , could you rank Y in descending order?", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY Team_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY Team_ID DESC"}, "hardness": "Easy"}, {"nl_queries": "For those employees who was hired before 2002-06-21, visualize a bar chart about the distribution of  hire_date and the amount of hire_date bin hire_date by time.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21'", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH"}, "hardness": "Medium"}, {"nl_queries": "Draw a bar chart for how many medications are prescribed for each brand?, order from low to high by the X-axis please.", "db_id": "hospital_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , count(*) FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand ORDER BY Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , count(*) FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand ORDER BY Name ASC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who was hired before 2002-06-21, draw a scatter chart about the correlation between  commission_pct and  manager_id .", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT COMMISSION_PCT , MANAGER_ID FROM employees WHERE hire_date < '2002-06-21'", "binning": ""}, "VQL": "Visualize SCATTER SELECT COMMISSION_PCT , MANAGER_ID FROM employees WHERE hire_date < '2002-06-21'"}, "hardness": "Easy"}, {"nl_queries": "Show names of teachers and the number of courses they teach with a bar chart, list bar in asc order.", "db_id": "course_teach", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name ORDER BY Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name ORDER BY Name ASC"}, "hardness": "Hard"}, {"nl_queries": "How many courses each teacher taught? Show me a bar chart, I want to rank bars in ascending order please.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code GROUP BY EMP_FNAME ORDER BY EMP_FNAME ASC", "binning": ""}, "VQL": "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code GROUP BY EMP_FNAME ORDER BY EMP_FNAME ASC"}, "hardness": "Hard"}, {"nl_queries": "Find all invoice dates corresponding to customers with first name Astrid and last name Gruber, and count them by a bar chart, I want to show by the total number from low to high please.", "db_id": "chinook_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT InvoiceDate , COUNT(InvoiceDate) FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.FirstName = \"Astrid\" AND LastName = \"Gruber\"  ORDER BY COUNT(InvoiceDate) ASC", "binning": "BIN InvoiceDate BY YEAR"}, "VQL": "Visualize BAR SELECT InvoiceDate , COUNT(InvoiceDate) FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.FirstName = \"Astrid\" AND LastName = \"Gruber\"  ORDER BY COUNT(InvoiceDate) ASC BIN InvoiceDate BY YEAR"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees who did not have any job in the past, show me about the change of department_id over hire_date in a line chart, sort in ascending by the HIRE_DATE.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE ASC", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE ASC"}, "hardness": "Medium"}, {"nl_queries": "How many races are held in each year after 2014? Show me a bar chart, and could you sort by the Y in desc?", "db_id": "formula_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014  ORDER BY COUNT(year) DESC", "binning": "BIN year BY YEAR"}, "VQL": "Visualize BAR SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014  ORDER BY COUNT(year) DESC BIN year BY YEAR"}, "hardness": "Extra Hard"}, {"nl_queries": "A bar chart about how many departments are in each school?, and I want to order by the x axis from high to low.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY SCHOOL_CODE DESC", "binning": ""}, "VQL": "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY SCHOOL_CODE DESC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, a bar chart shows the distribution of  name and the average of code , and group by attribute name.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name"}, "hardness": "Medium"}, {"nl_queries": "What is the booking start dates of the apartments with type code \"Duplex\"? Bin the year into weekday interval with a bar chart, show by the total number in asc.", "db_id": "apartment_rentals", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.apt_type_code = \"Duplex\"  ORDER BY COUNT(booking_start_date) ASC", "binning": "BIN booking_start_date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.apt_type_code = \"Duplex\"  ORDER BY COUNT(booking_start_date) ASC BIN booking_start_date BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees who was hired before 2002-06-21, return a bar chart about the distribution of  hire_date and the average of salary bin hire_date by weekday.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21'", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "Pie. what is the code of each location and the number of documents in that location?", "db_id": "cre_Doc_Tracking_DB", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Location_Code , count(*) FROM Document_locations GROUP BY location_code", "binning": ""}, "VQL": "Visualize PIE SELECT Location_Code , count(*) FROM Document_locations GROUP BY location_code"}, "hardness": "Easy"}, {"nl_queries": "Give me the comparison about Team_ID over the All_Neutral , and could you rank by the total number in asc please?", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Neutral , Team_ID FROM basketball_match ORDER BY Team_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Neutral , Team_ID FROM basketball_match ORDER BY Team_ID ASC"}, "hardness": "Easy"}, {"nl_queries": "Compute the total number of chips of different company names for all the phones that were launched in year 2002 or have RAM size greater than 32, I want to order by the X-axis from high to low.", "db_id": "phone_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Company_name , COUNT(Company_name) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE T1.Launch_year = 2002 OR T1.RAM_MiB > 32 GROUP BY Company_name ORDER BY Company_name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Company_name , COUNT(Company_name) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE T1.Launch_year = 2002 OR T1.RAM_MiB > 32 GROUP BY Company_name ORDER BY Company_name DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "A bar chart shows the distribution of meter_400 and ID , and order by the total number from high to low.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_400 , ID FROM swimmer ORDER BY ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_400 , ID FROM swimmer ORDER BY ID DESC"}, "hardness": "Easy"}, {"nl_queries": "Group and count details for the events using a bar chart.", "db_id": "local_govt_in_alabama", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Event_Details , COUNT(Event_Details) FROM EVENTS GROUP BY Event_Details", "binning": ""}, "VQL": "Visualize BAR SELECT Event_Details , COUNT(Event_Details) FROM EVENTS GROUP BY Event_Details"}, "hardness": "Easy"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, give me the comparison about manager_id over the last_name by a bar chart, list by the LAST_NAME from low to high please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT LAST_NAME , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY LAST_NAME ASC", "binning": ""}, "VQL": "Visualize BAR SELECT LAST_NAME , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY LAST_NAME ASC"}, "hardness": "Medium"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, give me the comparison about the sum of salary over the job_id , and group by attribute job_id by a bar chart, I want to rank by the sum salary in descending please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(SALARY) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(SALARY) DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "Return the name of rooms and the number of reservations made for each of the rooms to draw a bar chart, and rank in descending by the X-axis.", "db_id": "inn_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT roomName , count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room ORDER BY roomName DESC", "binning": ""}, "VQL": "Visualize BAR SELECT roomName , count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room ORDER BY roomName DESC"}, "hardness": "Hard"}, {"nl_queries": "Give me the number of professionals who did not perform any treatment on dogs for each role in a bar chart, and sort x-axis from high to low order.", "db_id": "dog_kennels", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.role_code , COUNT(T1.role_code) FROM Professionals EXCEPT SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.role_code ORDER BY T1.role_code DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.role_code , COUNT(T1.role_code) FROM Professionals EXCEPT SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.role_code ORDER BY T1.role_code DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "What are the last year of the parties whose theme is \"Spring\" or \"Teqnology\"? Count the last year for a bar chart.", "db_id": "party_host", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY Last_year", "binning": ""}, "VQL": "Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY Last_year"}, "hardness": "Medium"}, {"nl_queries": "Stack bar chart of how many took office vs Minister based on took office, list by the y-axis from high to low please.", "db_id": "party_people", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Took_office , COUNT(Took_office) FROM party GROUP BY Minister ORDER BY COUNT(Took_office) DESC", "binning": "BIN Took_office BY YEAR"}, "VQL": "Visualize BAR SELECT Took_office , COUNT(Took_office) FROM party GROUP BY Minister ORDER BY COUNT(Took_office) DESC BIN Took_office BY YEAR"}, "hardness": "Extra Hard"}, {"nl_queries": "Return a histogram on how many actors have appeared in each musical?, and show x axis in asc order.", "db_id": "musical", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID ORDER BY T2.Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID ORDER BY T2.Name ASC"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about price over the name , and group by attribute name by a bar chart, display Name from low to high order.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Name ASC"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about the sum of revenue over the headquarter , and group by attribute headquarter, I want to display by the y-axis in desc please.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Headquarter , SUM(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY SUM(Revenue) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Headquarter , SUM(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY SUM(Revenue) DESC"}, "hardness": "Hard"}, {"nl_queries": "How many dogs arrived in each day? Visualize with a bar chart that bins arrived date by weekday, rank in descending by the y-axis.", "db_id": "dog_kennels", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_arrived , COUNT(date_arrived) FROM Dogs  ORDER BY COUNT(date_arrived) DESC", "binning": "BIN date_arrived BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_arrived , COUNT(date_arrived) FROM Dogs  ORDER BY COUNT(date_arrived) DESC BIN date_arrived BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "Visualize a scatter chart about the correlation between  Shop_ID and  Employee_ID , and group by attribute Is_full_time.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Shop_ID , Employee_ID FROM hiring GROUP BY Is_full_time", "binning": ""}, "VQL": "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM hiring GROUP BY Is_full_time"}, "hardness": "Easy"}, {"nl_queries": "A bar chart groups the lot details, and computes the number of each lot details, and list y axis in asc order please.", "db_id": "tracking_share_transactions", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT lot_details , COUNT(lot_details) FROM LOTS GROUP BY lot_details ORDER BY COUNT(lot_details) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM LOTS GROUP BY lot_details ORDER BY COUNT(lot_details) ASC"}, "hardness": "Medium"}, {"nl_queries": "Show all allergies with number of students affected. Show bar chart.", "db_id": "allergy_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy", "binning": ""}, "VQL": "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy"}, "hardness": "Easy"}, {"nl_queries": "Show the number of courses each instructor taught in a bar chart, and order in descending by the names please.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY EMP_FNAME ORDER BY EMP_FNAME DESC", "binning": ""}, "VQL": "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY EMP_FNAME ORDER BY EMP_FNAME DESC"}, "hardness": "Hard"}, {"nl_queries": "For employees with first names that end with the letter m, groups and count the first name to visualize a bar graph, and could you rank total number in ascending order please?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT FIRST_NAME , COUNT(FIRST_NAME) FROM employees WHERE first_name LIKE '%m' GROUP BY FIRST_NAME ORDER BY COUNT(FIRST_NAME) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT FIRST_NAME , COUNT(FIRST_NAME) FROM employees WHERE first_name LIKE '%m' GROUP BY FIRST_NAME ORDER BY COUNT(FIRST_NAME) ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, show me about the distribution of  first_name and  manager_id  in a bar chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT FIRST_NAME , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)", "binning": ""}, "VQL": "Visualize BAR SELECT FIRST_NAME , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, return a bar chart about the distribution of job_id and department_id , and sort in descending by the y axis.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY DEPARTMENT_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY DEPARTMENT_ID DESC"}, "hardness": "Medium"}, {"nl_queries": "For the names and the players of clubs, count the names by names in a bar chart, sort in ascending by the Y-axis.", "db_id": "sports_competition", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.name , COUNT(T1.name) FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID GROUP BY T1.name ORDER BY COUNT(T1.name) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.name , COUNT(T1.name) FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID GROUP BY T1.name ORDER BY COUNT(T1.name) ASC"}, "hardness": "Hard"}, {"nl_queries": "Give me the comparison about ID over the meter_300 , and I want to list by the bar from low to high.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_300 , ID FROM swimmer ORDER BY meter_300 ASC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_300 , ID FROM swimmer ORDER BY meter_300 ASC"}, "hardness": "Easy"}, {"nl_queries": "A bar chart for how many competitions for each country, and rank by the the number of country in desc.", "db_id": "sports_competition", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Country , COUNT(Country) FROM competition GROUP BY Country ORDER BY COUNT(Country) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Country ORDER BY COUNT(Country) DESC"}, "hardness": "Medium"}, {"nl_queries": "Show the names of high school students and their corresponding number of friends, and could you rank by the x-axis in desc?", "db_id": "network_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.name , SUM(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.name , SUM(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name DESC"}, "hardness": "Hard"}, {"nl_queries": "Show me about the distribution of  date_address_to and the amount of date_address_to bin date_address_to by weekday in a bar chart.", "db_id": "behavior_monitoring", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses  ORDER BY monthly_rental DESC", "binning": "BIN date_address_to BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "What are the payment dates for any payments that have an amount greater than 10 or were handled by a staff member with the first name Elsa, and count them by a bar chart, and order Y in desc order.", "db_id": "sakila_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT payment_date , COUNT(payment_date) FROM payment WHERE amount > 10 UNION SELECT T1.payment_date FROM payment AS T1 JOIN staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = 'Elsa' ORDER BY COUNT(payment_date) DESC", "binning": "BIN payment_date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT payment_date , COUNT(payment_date) FROM payment WHERE amount > 10 UNION SELECT T1.payment_date FROM payment AS T1 JOIN staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = 'Elsa' ORDER BY COUNT(payment_date) DESC BIN payment_date BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "List the position of players and the average number of points of players of each position by a bar chart, rank by the bars in desc.", "db_id": "sports_competition", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Position , avg(Points) FROM player GROUP BY POSITION ORDER BY Position DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Position , avg(Points) FROM player GROUP BY POSITION ORDER BY Position DESC"}, "hardness": "Medium"}, {"nl_queries": "What are the number of the order dates of orders with price higher than 1000?", "db_id": "cre_Drama_Workshop_Groups", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Order_Date , COUNT(Order_Date) FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID = T2.Order_ID JOIN Products AS T3 ON T2.Product_ID = T3.Product_ID WHERE T3.Product_price > 1000", "binning": "BIN Order_Date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Order_Date , COUNT(Order_Date) FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID = T2.Order_ID JOIN Products AS T3 ON T2.Product_ID = T3.Product_ID WHERE T3.Product_price > 1000 BIN Order_Date BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "For all employees who have the letters D or S in their first name, visualize a bar chart about the distribution of hire_date and the average of salary bin hire_date by time, and order by the y-axis from high to low.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY AVG(SALARY) DESC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY MONTH"}, "hardness": "Extra Hard"}, {"nl_queries": "Give me the comparison about the sum of ID over the  Nationality , and group by attribute Nationality.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality", "binning": ""}, "VQL": "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality"}, "hardness": "Easy"}, {"nl_queries": "How many storms occured in each region. Visualize by bar chart.", "db_id": "storm_record", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Region_name , count(*) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id", "binning": ""}, "VQL": "Visualize BAR SELECT Region_name , count(*) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id"}, "hardness": "Medium"}, {"nl_queries": "How many courses for each subject? Plot a bar chart, could you display bar in ascending order?", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT subject_name , COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id GROUP BY T1.subject_id ORDER BY subject_name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT subject_name , COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id GROUP BY T1.subject_id ORDER BY subject_name ASC"}, "hardness": "Hard"}, {"nl_queries": "Show the number of professors who is in office DRE 102 hired in each month with a bar chart, list by the how many emp hiredate in asc.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT EMP_HIREDATE , COUNT(EMP_HIREDATE) FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num WHERE T2.prof_office = 'DRE 102'  ORDER BY COUNT(EMP_HIREDATE) ASC", "binning": "BIN EMP_HIREDATE BY MONTH"}, "VQL": "Visualize BAR SELECT EMP_HIREDATE , COUNT(EMP_HIREDATE) FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num WHERE T2.prof_office = 'DRE 102'  ORDER BY COUNT(EMP_HIREDATE) ASC BIN EMP_HIREDATE BY MONTH"}, "hardness": "Extra Hard"}, {"nl_queries": "Draw a bar chart for what are the first names and support rep ids for employees serving 10 or more customers?, and display by the x-axis in descending please.", "db_id": "chinook_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.FirstName DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.FirstName DESC"}, "hardness": "Medium"}, {"nl_queries": "Return a bar chart on what is the state and enrollment of the colleges where have any students who got accepted in the tryout decision, I want to order Y-axis from low to high order.", "db_id": "soccer_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT state , enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.decision = 'yes' ORDER BY enr ASC", "binning": ""}, "VQL": "Visualize BAR SELECT state , enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.decision = 'yes' ORDER BY enr ASC"}, "hardness": "Hard"}, {"nl_queries": "Give me the comparison about the amount of ACC_Road over the ACC_Road , and group by attribute ACC_Road, display x-axis in desc order.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Road , COUNT(ACC_Road) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road DESC", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Road , COUNT(ACC_Road) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road DESC"}, "hardness": "Medium"}, {"nl_queries": "Group and count the years played to draw a bar chart, list y axis in descending order.", "db_id": "match_season", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Years_Played , COUNT(Years_Played) FROM player GROUP BY Years_Played ORDER BY COUNT(Years_Played) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Years_Played , COUNT(Years_Played) FROM player GROUP BY Years_Played ORDER BY COUNT(Years_Played) DESC"}, "hardness": "Medium"}, {"nl_queries": "Return the lot details, group the lot details, and compute the number of each lot details, and show y-axis in ascending order.", "db_id": "tracking_share_transactions", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT lot_details , COUNT(lot_details) FROM LOTS GROUP BY lot_details ORDER BY COUNT(lot_details) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM LOTS GROUP BY lot_details ORDER BY COUNT(lot_details) ASC"}, "hardness": "Medium"}, {"nl_queries": "Show me the frequency of those years (bin year into year interval) that the team Boston Red Stockings won in the postseasons with a bar chart.", "db_id": "baseball_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT year , COUNT(year) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings'", "binning": "BIN year BY YEAR"}, "VQL": "Visualize LINE SELECT year , COUNT(year) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' BIN year BY YEAR"}, "hardness": "Hard"}, {"nl_queries": "Visualize the title and their total smallest ratings of the movie using a pie chart.", "db_id": "movie_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT T2.title , SUM(min(T1.stars)) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T2.title", "binning": ""}, "VQL": "Visualize PIE SELECT T2.title , SUM(min(T1.stars)) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T2.title"}, "hardness": "Medium"}, {"nl_queries": "For those employees who was hired before 2002-06-21, show me about the distribution of hire_date and the average of salary bin hire_date by time in a bar chart, and order total number from low to high order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(SALARY) ASC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, draw a bar chart about the distribution of headquarter and the sum of price , and group by attribute headquarter, and display by the bars in ascending.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Headquarter , SUM(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Headquarter , SUM(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC"}, "hardness": "Hard"}, {"nl_queries": "Visualize the name and their component amounts all furnitures that have more than 10 components. ", "db_id": "manufacturer", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Name , Num_of_Component FROM furniture WHERE Num_of_Component > 10", "binning": ""}, "VQL": "Visualize PIE SELECT Name , Num_of_Component FROM furniture WHERE Num_of_Component > 10"}, "hardness": "Easy"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, give me the comparison about commission_pct over the last_name , and could you sort by the COMMISSION_PCT in descending?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT LAST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC", "binning": ""}, "VQL": "Visualize BAR SELECT LAST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC"}, "hardness": "Medium"}, {"nl_queries": "Show different locations and the number of performances at each location Visualize by bar chart, and display by the Y-axis in descending.", "db_id": "performance_attendance", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Location , COUNT(*) FROM performance GROUP BY LOCATION ORDER BY COUNT(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Location , COUNT(*) FROM performance GROUP BY LOCATION ORDER BY COUNT(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, draw a bar chart about the distribution of  name and  code , and group by attribute name.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name"}, "hardness": "Medium"}, {"nl_queries": "A bar chart for finding the number of the names of catalog entries with level number 8, and I want to show x-axis in desc order.", "db_id": "product_catalog", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT catalog_entry_name , COUNT(catalog_entry_name) FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id WHERE t2.catalog_level_number = \"8\" GROUP BY catalog_entry_name ORDER BY catalog_entry_name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT catalog_entry_name , COUNT(catalog_entry_name) FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id WHERE t2.catalog_level_number = \"8\" GROUP BY catalog_entry_name ORDER BY catalog_entry_name DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "Sum the amount for all the payments processed with Visa by each year using a bar chart.", "db_id": "insurance_policies", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa'", "binning": "BIN Date_Payment_Made BY YEAR"}, "VQL": "Visualize BAR SELECT Date_Payment_Made , SUM(Amount_Payment) FROM Payments WHERE Payment_Method_Code = 'Visa' BIN Date_Payment_Made BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "A bar chart shows the distribution of Name and Height , and show in ascending by the X please.", "db_id": "candidate_poll", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , Height FROM people ORDER BY Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , Height FROM people ORDER BY Name ASC"}, "hardness": "Easy"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, give me the comparison about the average of department_id over the job_id , and group by attribute job_id, could you order y-axis in ascending order?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(DEPARTMENT_ID) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(DEPARTMENT_ID) ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "What are the names and areas of countries with the top 5 largest area. ", "db_id": "world_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5", "binning": ""}, "VQL": "Visualize PIE SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5"}, "hardness": "Medium"}, {"nl_queries": "Show all role codes and the number of employees in each role Show bar chart, and show from low to high by the y axis.", "db_id": "cre_Doc_Tracking_DB", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY count(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "Show the name for regions and the number of storms for each region, rank in descending by the bars.", "db_id": "storm_record", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Region_name , count(*) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id ORDER BY Region_name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Region_name , count(*) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id ORDER BY Region_name DESC"}, "hardness": "Hard"}, {"nl_queries": "What are the name and population of each county Plot them as bar chart, and I want to display in desc by the x-axis please.", "db_id": "election", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT County_name , Population FROM county ORDER BY County_name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT County_name , Population FROM county ORDER BY County_name DESC"}, "hardness": "Easy"}, {"nl_queries": "A bar chart for finding the number of the dates of the tests taken with result \"Pass\".", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken", "binning": ""}, "VQL": "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken"}, "hardness": "Medium"}, {"nl_queries": "Give me a pie to show the total number from different headquarters.", "db_id": "gas_company", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Headquarters , count(*) FROM company GROUP BY headquarters", "binning": ""}, "VQL": "Visualize PIE SELECT Headquarters , count(*) FROM company GROUP BY headquarters"}, "hardness": "Easy"}, {"nl_queries": "Show different citizenship of singers and the number of singers of each citizenship in a bar chart, and I want to list by the Y-axis from low to high.", "db_id": "singer", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship ORDER BY COUNT(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship ORDER BY COUNT(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "Create a bar chart showing the total number across police force, show by the names in desc.", "db_id": "county_public_safety", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force DESC"}, "hardness": "Medium"}, {"nl_queries": "Show me how many year by year in a histogram, could you display y axis in asc order?", "db_id": "theme_gallery", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Year , COUNT(Year) FROM exhibition  ORDER BY COUNT(Year) ASC", "binning": "BIN Year BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Year , COUNT(Year) FROM exhibition  ORDER BY COUNT(Year) ASC BIN Year BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "Find Nationality and the average of meter_100 , and group by attribute Nationality, and visualize them by a bar chart, and display in descending by the Y-axis.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nationality , AVG(meter_100) FROM swimmer GROUP BY Nationality ORDER BY AVG(meter_100) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Nationality , AVG(meter_100) FROM swimmer GROUP BY Nationality ORDER BY AVG(meter_100) DESC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who did not have any job in the past, find hire_date and the average of department_id bin hire_date by weekday, and visualize them by a bar chart, and could you display by the Y-axis in ascending?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(DEPARTMENT_ID) ASC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(DEPARTMENT_ID) ASC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "Show me about the distribution of  Date_of_Birth and  Weight  in a bar chart.", "db_id": "candidate_poll", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Date_of_Birth , Weight FROM people", "binning": ""}, "VQL": "Visualize BAR SELECT Date_of_Birth , Weight FROM people"}, "hardness": "Easy"}, {"nl_queries": "Find the number of the country of the airlines whose name starts with 'Orbit', show by the the number of country from high to low please.", "db_id": "flight_4", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT country , COUNT(country) FROM airlines WHERE name LIKE 'Orbit%' GROUP BY country ORDER BY COUNT(country) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT country , COUNT(country) FROM airlines WHERE name LIKE 'Orbit%' GROUP BY country ORDER BY COUNT(country) DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "Return a pie chart on what are the number of rooms for each bed type?", "db_id": "inn_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT bedType , count(*) FROM Rooms GROUP BY bedType", "binning": ""}, "VQL": "Visualize PIE SELECT bedType , count(*) FROM Rooms GROUP BY bedType"}, "hardness": "Easy"}, {"nl_queries": "What is the highest price of product, grouped by product type? Show a bar chart, rank in asc by the y-axis.", "db_id": "department_store", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code ORDER BY max(product_price) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code ORDER BY max(product_price) ASC"}, "hardness": "Easy"}, {"nl_queries": "Please compare the frequency of the customer details using a bar chart, and sort in desc by the Y-axis.", "db_id": "local_govt_and_lot", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT customer_details , COUNT(customer_details) FROM Customers GROUP BY customer_details ORDER BY COUNT(customer_details) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT customer_details , COUNT(customer_details) FROM Customers GROUP BY customer_details ORDER BY COUNT(customer_details) DESC"}, "hardness": "Medium"}, {"nl_queries": "How many apartment bookings in each day? Show me a line chart grouping by booking end date, and I want to sort by the x axis in asc.", "db_id": "apartment_rentals", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT booking_end_date , COUNT(booking_end_date) FROM Apartment_Bookings GROUP BY booking_end_date ORDER BY booking_end_date ASC", "binning": ""}, "VQL": "Visualize LINE SELECT booking_end_date , COUNT(booking_end_date) FROM Apartment_Bookings GROUP BY booking_end_date ORDER BY booking_end_date ASC"}, "hardness": "Medium"}, {"nl_queries": "Show me team_id by all road in a histogram, and rank by the y-axis in ascending.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Road , Team_ID FROM basketball_match ORDER BY Team_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Road , Team_ID FROM basketball_match ORDER BY Team_ID ASC"}, "hardness": "Easy"}, {"nl_queries": "How many eliminations did each team have. Plot them as pie chart.", "db_id": "wrestler", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Team , COUNT(*) FROM elimination GROUP BY Team", "binning": ""}, "VQL": "Visualize PIE SELECT Team , COUNT(*) FROM elimination GROUP BY Team"}, "hardness": "Easy"}, {"nl_queries": "Draw a bar chart for what are all the different product names, and how many complains has each received?, show from high to low by the Y-axis.", "db_id": "customer_complaints", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT product_name , count(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id = t2.product_id GROUP BY t1.product_name ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT product_name , count(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id = t2.product_id GROUP BY t1.product_name ORDER BY count(*) DESC"}, "hardness": "Hard"}, {"nl_queries": "How many movie reviews does each director get Show bar chart, and could you sort in desc by the X-axis?", "db_id": "movie_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT director , count(*) FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID GROUP BY T1.director ORDER BY director DESC", "binning": ""}, "VQL": "Visualize BAR SELECT director , count(*) FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID GROUP BY T1.director ORDER BY director DESC"}, "hardness": "Hard"}, {"nl_queries": "Bar chart of the number of position from each position", "db_id": "pilot_record", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Position , COUNT(Position) FROM pilot GROUP BY Position", "binning": ""}, "VQL": "Visualize BAR SELECT Position , COUNT(Position) FROM pilot GROUP BY Position"}, "hardness": "Easy"}, {"nl_queries": "Return a histogram on what are the different card types, and how many cards are there of each?, could you rank from high to low by the names?", "db_id": "customers_card_transactions", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT card_type_code , count(*) FROM Customers_cards GROUP BY card_type_code ORDER BY card_type_code DESC", "binning": ""}, "VQL": "Visualize BAR SELECT card_type_code , count(*) FROM Customers_cards GROUP BY card_type_code ORDER BY card_type_code DESC"}, "hardness": "Medium"}, {"nl_queries": "What are the names of the high schoolers and how many friends does each have Show bar chart, and rank by the Y-axis in asc please.", "db_id": "network_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.name , AVG(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY AVG(count(*)) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.name , AVG(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY AVG(count(*)) ASC"}, "hardness": "Hard"}, {"nl_queries": "Create a bar chart showing total number of stu hrs across dept code, could you display Y-axis from high to low order please?", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT DEPT_CODE , sum(stu_hrs) FROM student GROUP BY dept_code ORDER BY sum(stu_hrs) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT DEPT_CODE , sum(stu_hrs) FROM student GROUP BY dept_code ORDER BY sum(stu_hrs) DESC"}, "hardness": "Medium"}, {"nl_queries": "For all employees who have the letters D or S in their first name, return a bar chart about the distribution of job_id and the amount of job_id , and group by attribute job_id, could you list in descending by the names?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , COUNT(JOB_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, give me the comparison about employee_id over the email , and I want to list from high to low by the EMPLOYEE_ID please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT EMAIL , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY EMPLOYEE_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT EMAIL , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY EMPLOYEE_ID DESC"}, "hardness": "Medium"}, {"nl_queries": "Bar graph to show the number of investor from different investor, show by the total number in ascending.", "db_id": "entrepreneur", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(Investor) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(Investor) ASC"}, "hardness": "Medium"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, draw a bar chart about the distribution of job_id and the sum of department_id , and group by attribute job_id, and display by the bar in asc.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, visualize a scatter chart about the correlation between  employee_id and  commission_pct .", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT EMPLOYEE_ID , COMMISSION_PCT FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40", "binning": ""}, "VQL": "Visualize SCATTER SELECT EMPLOYEE_ID , COMMISSION_PCT FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40"}, "hardness": "Medium"}, {"nl_queries": "Find the number of courses for each subject in a bar chart.", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT subject_name , COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id GROUP BY T1.subject_id", "binning": ""}, "VQL": "Visualize BAR SELECT subject_name , COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id GROUP BY T1.subject_id"}, "hardness": "Medium"}, {"nl_queries": "Give me a bar chart, that group by location and count them.", "db_id": "party_host", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Location , COUNT(Location) FROM party GROUP BY Location", "binning": ""}, "VQL": "Visualize BAR SELECT Location , COUNT(Location) FROM party GROUP BY Location"}, "hardness": "Easy"}, {"nl_queries": "Give me a bar chart to show the revenue of the company that earns the highest revenue in each headquarter city, display from high to low by the x axis.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Headquarter , max(revenue) FROM manufacturers GROUP BY Headquarter ORDER BY Headquarter DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Headquarter , max(revenue) FROM manufacturers GROUP BY Headquarter ORDER BY Headquarter DESC"}, "hardness": "Medium"}, {"nl_queries": "Compare the number of songs each singer has using a bar chart, list Y in ascending order.", "db_id": "singer", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY Name ORDER BY COUNT(Name) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY Name ORDER BY COUNT(Name) ASC"}, "hardness": "Hard"}, {"nl_queries": "What are the countries of all airlines whose names start with Orbit, and count them by a bar chart, could you display Y in desc order?", "db_id": "flight_4", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT country , COUNT(country) FROM airlines WHERE name LIKE 'Orbit%' GROUP BY country ORDER BY COUNT(country) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT country , COUNT(country) FROM airlines WHERE name LIKE 'Orbit%' GROUP BY country ORDER BY COUNT(country) DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "For all employees who have the letters D or S in their first name, visualize a scatter chart about the correlation between  employee_id and  commission_pct .", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT EMPLOYEE_ID , COMMISSION_PCT FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'", "binning": ""}, "VQL": "Visualize SCATTER SELECT EMPLOYEE_ID , COMMISSION_PCT FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'"}, "hardness": "Hard"}, {"nl_queries": "Show all countries and the number of people from each country in a pie chart.", "db_id": "wedding", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Country , count(*) FROM people GROUP BY country", "binning": ""}, "VQL": "Visualize PIE SELECT Country , count(*) FROM people GROUP BY country"}, "hardness": "Easy"}, {"nl_queries": "How many books fall into each category, list by the total number from low to high.", "db_id": "culture_company", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY count(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "Bar graph to show how many year from different year, and rank y-axis from low to high order.", "db_id": "wine_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Year , COUNT(Year) FROM WINE  ORDER BY COUNT(Year) ASC", "binning": "BIN Year BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Year , COUNT(Year) FROM WINE  ORDER BY COUNT(Year) ASC BIN Year BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about the average of revenue over the  founder , and group by attribute founder.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Founder , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder", "binning": ""}, "VQL": "Visualize BAR SELECT Founder , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder"}, "hardness": "Medium"}, {"nl_queries": "Show the number of debates for each person on the affirmative side in a pie chart.", "db_id": "debate", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID = T2.Debate_ID JOIN people AS T3 ON T1.Affirmative = T3.People_ID GROUP BY Name", "binning": ""}, "VQL": "Visualize PIE SELECT Name , COUNT(Name) FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID = T2.Debate_ID JOIN people AS T3 ON T1.Affirmative = T3.People_ID GROUP BY Name"}, "hardness": "Medium"}, {"nl_queries": "Please give me a bar chart showing institution types, along with the number of institutions for each type, I want to rank in desc by the total number.", "db_id": "protein_institute", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Type , count(*) FROM institution GROUP BY TYPE ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Type , count(*) FROM institution GROUP BY TYPE ORDER BY count(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "What are the descriptions of all the project outcomes, and count them by a bar chart, and could you list from high to low by the Y-axis?", "db_id": "tracking_grants_for_research", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description ORDER BY COUNT(outcome_description) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description ORDER BY COUNT(outcome_description) DESC"}, "hardness": "Hard"}, {"nl_queries": "List the number of games in each season and group by home team in a group line chart, and I want to show by the Season in ascending.", "db_id": "game_injury", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ,  Season ORDER BY Season ASC", "binning": ""}, "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ,  Season ORDER BY Season ASC"}, "hardness": "Hard"}, {"nl_queries": "Show all countries and the number of singers in each country in a bar chart, and I want to order by the bars from high to low.", "db_id": "concert_singer", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country DESC"}, "hardness": "Medium"}, {"nl_queries": "what are different nationalities of people and the corresponding number of people from each nation?, display in asc by the y axis.", "db_id": "poker_player", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY COUNT(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY COUNT(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "Compare all train names' total numbers, and display by the total number from low to high.", "db_id": "station_weather", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , COUNT(name) FROM train GROUP BY name ORDER BY COUNT(name) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT name , COUNT(name) FROM train GROUP BY name ORDER BY COUNT(name) ASC"}, "hardness": "Medium"}, {"nl_queries": "Visualize a bar chart about the distribution of All_Neutral and ACC_Percent , and sort by the x-axis in asc.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral ASC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral ASC"}, "hardness": "Easy"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, give me the comparison about  commission_pct over the  last_name  by a bar chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT LAST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)", "binning": ""}, "VQL": "Visualize BAR SELECT LAST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)"}, "hardness": "Extra Hard"}, {"nl_queries": "Find the number of rooms with price higher than 120 for different decor. Show the proportion.", "db_id": "inn_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT decor , count(*) FROM Rooms WHERE basePrice > 120 GROUP BY decor", "binning": ""}, "VQL": "Visualize PIE SELECT decor , count(*) FROM Rooms WHERE basePrice > 120 GROUP BY decor"}, "hardness": "Medium"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, show me about the distribution of  hire_date and the sum of manager_id bin hire_date by weekday in a bar chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "Visualize a bar chart for what is the average salary for each job title?, and show by the JOB_TITLE from high to low.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_TITLE , AVG(salary) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id GROUP BY T2.job_title ORDER BY JOB_TITLE DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_TITLE , AVG(salary) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id GROUP BY T2.job_title ORDER BY JOB_TITLE DESC"}, "hardness": "Hard"}, {"nl_queries": "What are the different ship flags, and how many ships have each. Show a pie chart.", "db_id": "ship_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Flag , count(*) FROM ship GROUP BY flag", "binning": ""}, "VQL": "Visualize PIE SELECT Flag , count(*) FROM ship GROUP BY flag"}, "hardness": "Easy"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, give me the comparison about  manager_id over the  last_name .", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT LAST_NAME , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)", "binning": ""}, "VQL": "Visualize BAR SELECT LAST_NAME , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, return a bar chart about the distribution of phone_number and salary , and could you order by the y-axis in ascending?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT PHONE_NUMBER , SALARY FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY SALARY ASC", "binning": ""}, "VQL": "Visualize BAR SELECT PHONE_NUMBER , SALARY FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY SALARY ASC"}, "hardness": "Medium"}, {"nl_queries": "Show me a bar chart for how many faculty members do we have for each faculty rank?, and sort by the Y-axis from high to low.", "db_id": "activity_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Rank , count(*) FROM Faculty GROUP BY rank ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY rank ORDER BY count(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "List all headquarters and the number of companies in each headquarter with a bar chart, show from low to high by the total number please.", "db_id": "gas_company", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY count(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "What is the number of singers for each country? Return a pie chart.", "db_id": "concert_singer", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Country , COUNT(Country) FROM singer GROUP BY Country", "binning": ""}, "VQL": "Visualize PIE SELECT Country , COUNT(Country) FROM singer GROUP BY Country"}, "hardness": "Easy"}, {"nl_queries": "Show me maximal stu gpa by dept code in a histogram, and display in desc by the bars.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT DEPT_CODE , max(stu_gpa) FROM student GROUP BY DEPT_CODE ORDER BY DEPT_CODE DESC", "binning": ""}, "VQL": "Visualize BAR SELECT DEPT_CODE , max(stu_gpa) FROM student GROUP BY DEPT_CODE ORDER BY DEPT_CODE DESC"}, "hardness": "Easy"}, {"nl_queries": "Show a bar chart to show different names and credit scores of customers who have taken a loan, show Y from low to high order please.", "db_id": "loan_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT cust_name , credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id ORDER BY credit_score ASC", "binning": ""}, "VQL": "Visualize BAR SELECT cust_name , credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id ORDER BY credit_score ASC"}, "hardness": "Medium"}, {"nl_queries": "What is the relationship between customer id and card number? Return a scatter chart.", "db_id": "customers_card_transactions", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT customer_id , card_number FROM Customers_cards", "binning": ""}, "VQL": "Visualize SCATTER SELECT customer_id , card_number FROM Customers_cards"}, "hardness": "Easy"}, {"nl_queries": "Show each county along with the number of schools, and display in ascending by the the total number .", "db_id": "school_finance", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT County , count(*) FROM school GROUP BY county ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT County , count(*) FROM school GROUP BY county ORDER BY count(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "Draw a bar chart of nationality versus the total number ", "db_id": "poker_player", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality", "binning": ""}, "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality"}, "hardness": "Easy"}, {"nl_queries": "For those products with a price between 60 and 120, visualize a bar chart about the distribution of name and price , show by the x-axis in descending.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , Price FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , Price FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name DESC"}, "hardness": "Medium"}, {"nl_queries": "Draw a bar chart about the distribution of All_Neutral and School_ID , and I want to sort in descending by the School_ID.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Neutral , School_ID FROM basketball_match ORDER BY School_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Neutral , School_ID FROM basketball_match ORDER BY School_ID DESC"}, "hardness": "Easy"}, {"nl_queries": "Return a histogram on what is the name of each course and the corresponding number of student enrollment?, rank Y in asc order.", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) ASC"}, "hardness": "Hard"}, {"nl_queries": "Find the number of the parties associated with the delegates from district 1. Who served as governors of the parties?", "db_id": "election", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Governor , COUNT(Governor) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.District = 1 GROUP BY Governor", "binning": ""}, "VQL": "Visualize PIE SELECT Governor , COUNT(Governor) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.District = 1 GROUP BY Governor"}, "hardness": "Hard"}, {"nl_queries": "For all employees who have the letters D or S in their first name, give me the comparison about the sum of salary over the job_id , and group by attribute job_id, and could you list x-axis from low to high order?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "Count the number of people of each sex who have a weight higher than 85 by a bar chart, show from high to low by the bar.", "db_id": "candidate_poll", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Sex , count(*) FROM people WHERE weight > 85 GROUP BY sex ORDER BY Sex DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Sex , count(*) FROM people WHERE weight > 85 GROUP BY sex ORDER BY Sex DESC"}, "hardness": "Hard"}, {"nl_queries": "A bar chart for what are the number of the package options of all tv channels that are not playing any cartoons directed by Ben Jones?, and order from low to high by the Y please.", "db_id": "tvshow", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) ASC"}, "hardness": "Hard"}, {"nl_queries": "Show the number of games for each away team in a pie chart.", "db_id": "game_injury", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Away_team", "binning": ""}, "VQL": "Visualize PIE SELECT Away_team , COUNT(Away_team) FROM game GROUP BY Away_team"}, "hardness": "Easy"}, {"nl_queries": "For those employees who was hired before 2002-06-21, show me about the distribution of hire_date and the sum of manager_id bin hire_date by weekday in a bar chart, and list in desc by the total number of manager id please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(MANAGER_ID) DESC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "Return a line chart about the change of the average of Shop_ID over Start_from bin start_from by time, order by the X from high to low.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Start_from , AVG(Shop_ID) FROM hiring  ORDER BY Start_from DESC", "binning": "BIN Start_from BY YEAR"}, "VQL": "Visualize LINE SELECT Start_from , AVG(Shop_ID) FROM hiring  ORDER BY Start_from DESC BIN Start_from BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "Use a histogram to show the department's id and corresponding employees' first name, and order by the y axis in desc please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT FIRST_NAME , DEPARTMENT_ID FROM employees ORDER BY DEPARTMENT_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT FIRST_NAME , DEPARTMENT_ID FROM employees ORDER BY DEPARTMENT_ID DESC"}, "hardness": "Easy"}, {"nl_queries": "Show the number of services for each service type description with a bar chart.", "db_id": "cre_Drama_Workshop_Groups", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Service_Type_Description , COUNT(*) FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code GROUP BY T2.Service_Type_Code", "binning": ""}, "VQL": "Visualize BAR SELECT Service_Type_Description , COUNT(*) FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code GROUP BY T2.Service_Type_Code"}, "hardness": "Medium"}, {"nl_queries": "What is the relationship between  Body_Builder_ID and  Total ?", "db_id": "body_builder", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Body_Builder_ID , Total FROM body_builder", "binning": ""}, "VQL": "Visualize SCATTER SELECT Body_Builder_ID , Total FROM body_builder"}, "hardness": "Easy"}, {"nl_queries": "For all organizations that have grants of more than 6000 dollars, compare the number of details of the organizations with a bar chart.", "db_id": "tracking_grants_for_research", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT organisation_details , COUNT(organisation_details) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY organisation_details", "binning": ""}, "VQL": "Visualize BAR SELECT organisation_details , COUNT(organisation_details) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY organisation_details"}, "hardness": "Medium"}, {"nl_queries": "What are the names of all products, and count them by a bar chart, sort by the x-axis in desc.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name DESC"}, "hardness": "Medium"}, {"nl_queries": "Give me the comparison about the sum of Shop_ID over the Start_from bin start_from by weekday by a bar chart, and could you show from low to high by the Y-axis?", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Start_from , SUM(Shop_ID) FROM hiring  ORDER BY SUM(Shop_ID) ASC", "binning": "BIN Start_from BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Start_from , SUM(Shop_ID) FROM hiring  ORDER BY SUM(Shop_ID) ASC BIN Start_from BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "List the number of games for each home team and group by away team in a stacked bar chart The x-axis is home team, and I want to list x-axis in descending order.", "db_id": "game_injury", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Away_team ,  Home_team ORDER BY Home_team DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Away_team ,  Home_team ORDER BY Home_team DESC"}, "hardness": "Hard"}, {"nl_queries": "Bar chart x axis start from y axis the average of shop id, and could you display in desc by the Y?", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Start_from , AVG(Shop_ID) FROM hiring  ORDER BY AVG(Shop_ID) DESC", "binning": "BIN Start_from BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Start_from , AVG(Shop_ID) FROM hiring  ORDER BY AVG(Shop_ID) DESC BIN Start_from BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "Return a bar chart on how many counties correspond to each police force?", "db_id": "county_public_safety", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force", "binning": ""}, "VQL": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force"}, "hardness": "Easy"}, {"nl_queries": "Show me a bar chart for what are the different product names? What is the average product price for each of them?, and list Y-axis in descending order.", "db_id": "cre_Drama_Workshop_Groups", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY avg(Product_Price) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY avg(Product_Price) DESC"}, "hardness": "Medium"}, {"nl_queries": "Show me a bar chart for what are the department names and how many employees work in each of them?, could you list from low to high by the Y-axis?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT DEPARTMENT_NAME , COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id GROUP BY department_name ORDER BY COUNT(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT DEPARTMENT_NAME , COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id GROUP BY department_name ORDER BY COUNT(*) ASC"}, "hardness": "Hard"}, {"nl_queries": "Show me about the distribution of Time and ID in a bar chart, could you sort y-axis in desc order?", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Time , ID FROM swimmer ORDER BY ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Time , ID FROM swimmer ORDER BY ID DESC"}, "hardness": "Easy"}, {"nl_queries": "Bar chart of the number of planned delivery date from each planned delivery date, list by the total number in asc.", "db_id": "cre_Drama_Workshop_Groups", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS  ORDER BY COUNT(Planned_Delivery_Date) ASC", "binning": "BIN Planned_Delivery_Date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS  ORDER BY COUNT(Planned_Delivery_Date) ASC BIN Planned_Delivery_Date BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, visualize a bar chart about the distribution of name and revenue , and group by attribute name, order by the y-axis in desc.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T2.Revenue DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T2.Revenue DESC"}, "hardness": "Hard"}, {"nl_queries": "What are the nationalities and the total ages of journalists. Return me a pie chart.", "db_id": "news_report", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality", "binning": ""}, "VQL": "Visualize PIE SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality"}, "hardness": "Easy"}, {"nl_queries": "Find the student ID and middle name for all the students with at most two enrollments. ", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.middle_name , T1.student_id FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id", "binning": ""}, "VQL": "Visualize BAR SELECT T2.middle_name , T1.student_id FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id"}, "hardness": "Easy"}, {"nl_queries": "Give me a histogram for how many musicals has each nominee been nominated for?, and display from low to high by the x axis.", "db_id": "musical", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nominee , COUNT(*) FROM musical GROUP BY Nominee ORDER BY Nominee ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Nominee , COUNT(*) FROM musical GROUP BY Nominee ORDER BY Nominee ASC"}, "hardness": "Medium"}, {"nl_queries": "What are the number of the phone numbers for each employee?, rank by the Y from high to low.", "db_id": "chinook_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY COUNT(Phone) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Phone , COUNT(Phone) FROM EMPLOYEE GROUP BY Phone ORDER BY COUNT(Phone) DESC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, visualize a bar chart about the distribution of first_name and employee_id , could you sort total number from low to high order?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT FIRST_NAME , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY EMPLOYEE_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT FIRST_NAME , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY EMPLOYEE_ID ASC"}, "hardness": "Medium"}, {"nl_queries": "Stacked bar chart of team_id for with each All_Home in each acc road, and could you list by the Y in ascending?", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY Team_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY Team_ID ASC"}, "hardness": "Medium"}, {"nl_queries": "A bar chart shows the distribution of All_Games and Team_ID , could you display by the x-axis in desc?", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Games , Team_ID FROM basketball_match ORDER BY All_Games DESC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Games , Team_ID FROM basketball_match ORDER BY All_Games DESC"}, "hardness": "Easy"}, {"nl_queries": "Visualize a pie chart with what are the allergy types and how many allergies correspond to each one?", "db_id": "allergy_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype", "binning": ""}, "VQL": "Visualize PIE SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype"}, "hardness": "Easy"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, draw a bar chart about the distribution of hire_date and the average of employee_id bin hire_date by weekday, show by the y-axis in descending.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY AVG(EMPLOYEE_ID) DESC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY AVG(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, what is the relationship between  employee_id and  manager_id ?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT EMPLOYEE_ID , MANAGER_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40", "binning": ""}, "VQL": "Visualize SCATTER SELECT EMPLOYEE_ID , MANAGER_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40"}, "hardness": "Medium"}, {"nl_queries": "Visualize a bar chart about the distribution of All_Neutral and Team_ID , rank in ascending by the y-axis.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Neutral , Team_ID FROM basketball_match ORDER BY Team_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Neutral , Team_ID FROM basketball_match ORDER BY Team_ID ASC"}, "hardness": "Easy"}, {"nl_queries": "Give me a histogram for what are the name and level of catalog structure with level number between 5 and 10, and could you sort Y-axis from high to low order?", "db_id": "product_catalog", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number DESC", "binning": ""}, "VQL": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number DESC"}, "hardness": "Medium"}, {"nl_queries": "A bar chart shows the distribution of ACC_Regular_Season and All_Games_Percent , and rank by the Y-axis in descending.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent DESC", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent DESC"}, "hardness": "Easy"}, {"nl_queries": "Show me about the distribution of All_Home and Team_ID , and group by attribute ACC_Home in a bar chart, and order total number in ascending order.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY Team_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY Team_ID ASC"}, "hardness": "Medium"}, {"nl_queries": "For all employees who have the letters D or S in their first name, find hire_date and the sum of employee_id bin hire_date by time, and visualize them by a bar chart, order y-axis from low to high order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) ASC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH"}, "hardness": "Extra Hard"}, {"nl_queries": "For each film, show the price and group them by cinema name in a stacked bar chart, and list Y from high to low order.", "db_id": "cinema", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , Price FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title ,  Name ORDER BY Price DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , Price FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title ,  Name ORDER BY Price DESC"}, "hardness": "Hard"}, {"nl_queries": "Visualize a bar chart for what are the total enrollments of universities of each affiliation type?, I want to show by the sum enrollment in desc.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY sum(enrollment) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY sum(enrollment) DESC"}, "hardness": "Medium"}, {"nl_queries": "Show the number of courses each instructor taught in a stacked bar chart. The x-axis is the instructor's first name and group by course description.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code GROUP BY CRS_DESCRIPTION ,  EMP_FNAME", "binning": ""}, "VQL": "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code GROUP BY CRS_DESCRIPTION ,  EMP_FNAME"}, "hardness": "Hard"}, {"nl_queries": "For those employees who did not have any job in the past, a bar chart shows the distribution of hire_date and the average of salary bin hire_date by weekday, rank by the mean salary from high to low please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(SALARY) DESC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, visualize a bar chart about the distribution of founder and the sum of code , and group by attribute founder, display y-axis from low to high order please.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code ASC"}, "hardness": "Hard"}, {"nl_queries": "A pie chart for what are the number of the category of music festivals with result \"Awarded\"?", "db_id": "music_4", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category", "binning": ""}, "VQL": "Visualize PIE SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category"}, "hardness": "Medium"}, {"nl_queries": "Draw a pie chart for how many actors have appeared in each musical?", "db_id": "musical", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT T2.Name , COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID", "binning": ""}, "VQL": "Visualize PIE SELECT T2.Name , COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID"}, "hardness": "Medium"}, {"nl_queries": "A bar chart for returning the number of the claim start date for the claims whose claimed amount is no more than the average", "db_id": "insurance_policies", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Claims WHERE Amount_Settled <= ( SELECT avg(Amount_Settled) FROM Claims )", "binning": "BIN Date_Claim_Made BY YEAR"}, "VQL": "Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Claims WHERE Amount_Settled <= ( SELECT avg(Amount_Settled) FROM Claims ) BIN Date_Claim_Made BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "For those employees whose first name is ending with the letter m, compute their average salary for visualizing a bar chart, and I want to list in descending by the y-axis please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT FIRST_NAME , AVG(SALARY) FROM employees WHERE first_name LIKE '%m' GROUP BY FIRST_NAME ORDER BY AVG(SALARY) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT FIRST_NAME , AVG(SALARY) FROM employees WHERE first_name LIKE '%m' GROUP BY FIRST_NAME ORDER BY AVG(SALARY) DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "Return a histogram on what are the first names and ids for customers who have two or more accounts?, and display in descending by the names.", "db_id": "customers_and_invoices", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.customer_first_name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.customer_first_name DESC"}, "hardness": "Medium"}, {"nl_queries": "For each record in schedule, show the number of films for each day in a bar chart.", "db_id": "cinema", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Date , COUNT(Date) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Date", "binning": ""}, "VQL": "Visualize BAR SELECT Date , COUNT(Date) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Date"}, "hardness": "Medium"}, {"nl_queries": "Bar chart x axis headquarters y axis the total number, could you list x-axis in desc order?", "db_id": "company_employee", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Headquarters , COUNT(*) FROM company GROUP BY Headquarters ORDER BY Headquarters DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Headquarters , COUNT(*) FROM company GROUP BY Headquarters ORDER BY Headquarters DESC"}, "hardness": "Medium"}, {"nl_queries": "How many players are there for each hand type Visualize by bar chart, and could you sort by the bar in descending?", "db_id": "wta_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT hand , count(*) FROM players GROUP BY hand ORDER BY hand DESC", "binning": ""}, "VQL": "Visualize BAR SELECT hand , count(*) FROM players GROUP BY hand ORDER BY hand DESC"}, "hardness": "Medium"}, {"nl_queries": "Bar chart of sum shop id from each is full time, display from low to high by the names please.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC"}, "hardness": "Medium"}, {"nl_queries": "For all employees who have the letters D or S in their first name, give me the comparison about the sum of employee_id over the job_id , and group by attribute job_id by a bar chart, and list in asc by the JOB_ID.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "A bar chart for what are the number of the name of rooms booked by customers whose first name has \"ROY\" in part?, rank from low to high by the roomName.", "db_id": "inn_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT roomName , COUNT(roomName) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId WHERE firstname LIKE '%ROY%' GROUP BY roomName ORDER BY roomName ASC", "binning": ""}, "VQL": "Visualize BAR SELECT roomName , COUNT(roomName) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId WHERE firstname LIKE '%ROY%' GROUP BY roomName ORDER BY roomName ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "What are the wines that have prices lower than 50 and have appelations in Monterey county, and count them by a bar chart, list x axis from high to low order.", "db_id": "wine_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.County = \"Monterey\" AND T2.price < 50 GROUP BY Name ORDER BY Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.County = \"Monterey\" AND T2.price < 50 GROUP BY Name ORDER BY Name DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "A bar chart showing the number of male and female faculty, order by the Y-axis in desc please.", "db_id": "activity_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Sex , count(*) FROM Faculty GROUP BY Sex ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Sex , count(*) FROM Faculty GROUP BY Sex ORDER BY count(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "A bar chart showing the sum of capacity of cinemas open for each year, and could you show y axis from high to low order?", "db_id": "cinema", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Openning_year , SUM(Capacity) FROM cinema GROUP BY Openning_year ORDER BY SUM(Capacity) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Openning_year , SUM(Capacity) FROM cinema GROUP BY Openning_year ORDER BY SUM(Capacity) DESC"}, "hardness": "Medium"}, {"nl_queries": "A bar chart about how many professors have a PhD in each department?, display from high to low by the X.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT DEPT_CODE , count(*) FROM professor WHERE prof_high_degree = 'Ph.D.' GROUP BY dept_code ORDER BY DEPT_CODE DESC", "binning": ""}, "VQL": "Visualize BAR SELECT DEPT_CODE , count(*) FROM professor WHERE prof_high_degree = 'Ph.D.' GROUP BY dept_code ORDER BY DEPT_CODE DESC"}, "hardness": "Hard"}, {"nl_queries": "For all employees who have the letters D or S in their first name, find job_id and the average of employee_id , and group by attribute job_id, and visualize them by a bar chart, could you rank in descending by the bar?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "Visualize a bar chart about the distribution of Team_Name and Team_ID , I want to order in asc by the y-axis.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Team_Name , Team_ID FROM basketball_match ORDER BY Team_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Team_Name , Team_ID FROM basketball_match ORDER BY Team_ID ASC"}, "hardness": "Easy"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, return a bar chart about the distribution of first_name and department_id , and I want to sort from low to high by the total number.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT FIRST_NAME , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY DEPARTMENT_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT FIRST_NAME , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY DEPARTMENT_ID ASC"}, "hardness": "Medium"}, {"nl_queries": "Show all role codes and the number of employees in each role Show bar chart, I want to rank from high to low by the Y-axis please.", "db_id": "cre_Doc_Tracking_DB", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY count(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "For each citizenship, what is the maximum net worth Visualize by bar chart, and list by the y-axis in descending.", "db_id": "singer", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY max(Net_Worth_Millions) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY max(Net_Worth_Millions) DESC"}, "hardness": "Easy"}, {"nl_queries": "Display a bar chart for what is the average salary for each job title?, I want to order Y in ascending order please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_TITLE , AVG(salary) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id GROUP BY T2.job_title ORDER BY AVG(salary) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_TITLE , AVG(salary) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id GROUP BY T2.job_title ORDER BY AVG(salary) ASC"}, "hardness": "Hard"}, {"nl_queries": "What is the code of each role and the number of employees in each role Show bar chart, could you sort y axis in ascending order?", "db_id": "cre_Doc_Tracking_DB", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY count(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "A line chart shows the trend of Employee_ID over Start_from , order X-axis from low to high order please.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Start_from , Employee_ID FROM hiring ORDER BY Start_from ASC", "binning": ""}, "VQL": "Visualize LINE SELECT Start_from , Employee_ID FROM hiring ORDER BY Start_from ASC"}, "hardness": "Easy"}, {"nl_queries": "What are the names and ids of all makers with more than 3 models, display by the X-axis from high to low.", "db_id": "car_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT FullName , Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker ORDER BY FullName DESC", "binning": ""}, "VQL": "Visualize BAR SELECT FullName , Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker ORDER BY FullName DESC"}, "hardness": "Medium"}, {"nl_queries": "Find ACC_Road and Team_ID , and group by attribute ACC_Home, and visualize them by a bar chart, I want to show in ascending by the X-axis.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY ACC_Road ASC", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY ACC_Road ASC"}, "hardness": "Medium"}, {"nl_queries": "Display a bar chart for what is the name of each course and the corresponding number of student enrollment?, show by the names in descending please.", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY course_name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY course_name DESC"}, "hardness": "Hard"}, {"nl_queries": "How many races are held in each year after 2014? Show me a bar chart, and rank total number from low to high order please.", "db_id": "formula_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014  ORDER BY COUNT(year) ASC", "binning": "BIN year BY YEAR"}, "VQL": "Visualize BAR SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014  ORDER BY COUNT(year) ASC BIN year BY YEAR"}, "hardness": "Extra Hard"}, {"nl_queries": "What are the names of projects that require more than 300 hours, and how many scientists are assigned to each, and list from high to low by the the total number .", "db_id": "scientist_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name ORDER BY count(*) DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "Show me a bar chart for what are the titles and ids for albums containing tracks with unit price greater than 1?, and rank in descending by the AlbumId.", "db_id": "chinook_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.AlbumId DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.AlbumId DESC"}, "hardness": "Hard"}, {"nl_queries": "Visualize a bar chart for what is the average salary for each job title?, and sort by the Y from high to low.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_TITLE , AVG(salary) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id GROUP BY T2.job_title ORDER BY AVG(salary) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_TITLE , AVG(salary) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id GROUP BY T2.job_title ORDER BY AVG(salary) DESC"}, "hardness": "Hard"}, {"nl_queries": "Give the proportion of how many registed students do each course have? List course name and the number of their registered students?", "db_id": "student_assessment", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT course_name , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id", "binning": ""}, "VQL": "Visualize PIE SELECT course_name , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id"}, "hardness": "Medium"}, {"nl_queries": "Show maximal pet age from each pettype, I want to order from low to high by the bars.", "db_id": "pets_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT PetType , max(pet_age) FROM pets GROUP BY PetType ORDER BY PetType ASC", "binning": ""}, "VQL": "Visualize BAR SELECT PetType , max(pet_age) FROM pets GROUP BY PetType ORDER BY PetType ASC"}, "hardness": "Easy"}, {"nl_queries": "Return a bar chart about the distribution of meter_400 and meter_100 , and show from low to high by the bar please.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_400 , meter_100 FROM swimmer ORDER BY meter_400 ASC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_400 , meter_100 FROM swimmer ORDER BY meter_400 ASC"}, "hardness": "Easy"}, {"nl_queries": "Show the relationship between number of accounts and customer id in a scatter chart.", "db_id": "customers_and_invoices", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT T1.customer_id , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id", "binning": ""}, "VQL": "Visualize SCATTER SELECT T1.customer_id , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id"}, "hardness": "Medium"}, {"nl_queries": "For those employees whose first name does not contain the letter M, display their average salary by binning the hire date into the day of week interval for visualizing a bar chart, show by the Y in descending.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE first_name NOT LIKE '%M%'  ORDER BY AVG(SALARY) DESC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE first_name NOT LIKE '%M%'  ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, give me the comparison about the average of manager_id over the job_id , and group by attribute job_id, and rank in asc by the X-axis please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "how many songs were released for each format?, and sort in descending by the y axis.", "db_id": "music_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT formats , count(*) FROM files GROUP BY formats ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT formats , count(*) FROM files GROUP BY formats ORDER BY count(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "For all employees who have the letters D or S in their first name, give me the comparison about the sum of department_id over the hire_date bin hire_date by time by a bar chart, and rank by the Y from low to high.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(DEPARTMENT_ID) ASC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY MONTH"}, "hardness": "Extra Hard"}, {"nl_queries": "Compute the total mean age across sex as a pie chart.", "db_id": "dorm_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Sex , avg(age) FROM student GROUP BY sex", "binning": ""}, "VQL": "Visualize PIE SELECT Sex , avg(age) FROM student GROUP BY sex"}, "hardness": "Easy"}, {"nl_queries": "Please tell the names and revenues of the companies with the highest revenues in each headquarter city, and sort in desc by the bars please.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , max(revenue) FROM manufacturers GROUP BY Headquarter ORDER BY Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , max(revenue) FROM manufacturers GROUP BY Headquarter ORDER BY Name DESC"}, "hardness": "Medium"}, {"nl_queries": "Please use a bar chart to show the average amount of payment by each payment method code, rank x-axis from low to high order.", "db_id": "insurance_policies", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Payment_Method_Code , AVG(Amount_Payment) FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Method_Code ASC"}, "hardness": "Medium"}, {"nl_queries": "Draw a line chart about the change of the sum of Shop_ID over Start_from , and group by attribute Is_full_time and bin start_from by time, I want to order by the x-axis from high to low.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Start_from , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC", "binning": "BIN Start_from BY YEAR"}, "VQL": "Visualize LINE SELECT Start_from , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR"}, "hardness": "Extra Hard"}, {"nl_queries": "For the top five players in terms of potential, bin their birthday into YEAR interval, and show me the distribution of their birthday.", "db_id": "soccer_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT birthday , COUNT(birthday) FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id  ORDER BY potential DESC LIMIT 5", "binning": "BIN birthday BY YEAR"}, "VQL": "Visualize LINE SELECT birthday , COUNT(birthday) FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id  ORDER BY potential DESC LIMIT 5 BIN birthday BY YEAR"}, "hardness": "Extra Hard"}, {"nl_queries": "How many bookings for each apartment number? Plot a bar chart, display y axis in asc order.", "db_id": "apartment_rentals", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT apt_number , COUNT(apt_number) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id GROUP BY apt_number ORDER BY COUNT(apt_number) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT apt_number , COUNT(apt_number) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id GROUP BY apt_number ORDER BY COUNT(apt_number) ASC"}, "hardness": "Hard"}, {"nl_queries": "Create a bar chart showing the number of city across city", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY", "binning": ""}, "VQL": "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY"}, "hardness": "Easy"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, draw a bar chart about the distribution of phone_number and department_id , rank by the x axis in asc.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT PHONE_NUMBER , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY PHONE_NUMBER ASC", "binning": ""}, "VQL": "Visualize BAR SELECT PHONE_NUMBER , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY PHONE_NUMBER ASC"}, "hardness": "Medium"}, {"nl_queries": "A pie chart for finding the number of the names of catalog entries with level number 8.", "db_id": "product_catalog", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT catalog_entry_name , COUNT(catalog_entry_name) FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id WHERE t2.catalog_level_number = \"8\" GROUP BY catalog_entry_name", "binning": ""}, "VQL": "Visualize PIE SELECT catalog_entry_name , COUNT(catalog_entry_name) FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id WHERE t2.catalog_level_number = \"8\" GROUP BY catalog_entry_name"}, "hardness": "Hard"}, {"nl_queries": "Show the name and age for all drivers with a bar chart.", "db_id": "school_bus", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , Age FROM driver", "binning": ""}, "VQL": "Visualize BAR SELECT Name , Age FROM driver"}, "hardness": "Easy"}, {"nl_queries": "What are the names of different tracks, and how many races has each had Plot them as bar chart, and could you sort in asc by the x axis?", "db_id": "race_track", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id ORDER BY T2.Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id ORDER BY T2.Name ASC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who did not have any job in the past, show me about the distribution of  job_id and the average of department_id , and group by attribute job_id in a bar chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID"}, "hardness": "Medium"}, {"nl_queries": "Show me about the distribution of All_Road and All_Games_Percent in a bar chart, and rank by the Y in asc.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Road , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Road , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC"}, "hardness": "Easy"}, {"nl_queries": "Show the number of students who are living in a dorm with a TV Lounge and group by first name in a bar chart, and rank in ascending by the Y-axis.", "db_id": "dorm_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Fname , COUNT(Fname) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid WHERE T2.dormid IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid = T4.amenid WHERE T4.amenity_name = 'TV Lounge') GROUP BY Fname ORDER BY COUNT(Fname) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Fname , COUNT(Fname) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid WHERE T2.dormid IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid = T4.amenid WHERE T4.amenity_name = 'TV Lounge') GROUP BY Fname ORDER BY COUNT(Fname) ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "Visualize a bar chart for simply displaying the email address of the employee and the corresponding salary, sort total number in asc order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT EMAIL , SALARY FROM employees ORDER BY SALARY ASC", "binning": ""}, "VQL": "Visualize BAR SELECT EMAIL , SALARY FROM employees ORDER BY SALARY ASC"}, "hardness": "Easy"}, {"nl_queries": "Pie. how many departments are in each school?", "db_id": "college_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department", "binning": ""}, "VQL": "Visualize PIE SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department"}, "hardness": "Medium"}, {"nl_queries": "For those dates that have the 5 highest cloud cover rates, please bin the date into the day of week interval and count their frequency.", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date , COUNT(date) FROM weather", "binning": "BIN date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date , COUNT(date) FROM weather BIN date BY WEEKDAY"}, "hardness": "Easy"}, {"nl_queries": "For those employees who was hired before 2002-06-21, show me the trend about  employee_id over  hire_date  with a line chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE hire_date < '2002-06-21'", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE hire_date < '2002-06-21'"}, "hardness": "Easy"}, {"nl_queries": "For those records from the products and each product's manufacturer, find name and the average of price , and group by attribute name, and visualize them by a bar chart, could you list in asc by the y axis please?", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Price ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Price ASC"}, "hardness": "Hard"}, {"nl_queries": "Show me a line chart for what is the average weight and year for each year?", "db_id": "car_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Year , avg(Weight) FROM CARS_DATA GROUP BY YEAR", "binning": ""}, "VQL": "Visualize LINE SELECT Year , avg(Weight) FROM CARS_DATA GROUP BY YEAR"}, "hardness": "Easy"}, {"nl_queries": "Show names of teachers and the number of courses they teach by a pie chart.", "db_id": "course_teach", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Name , COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name", "binning": ""}, "VQL": "Visualize PIE SELECT Name , COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name"}, "hardness": "Medium"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, show me about the distribution of hire_date and the amount of hire_date bin hire_date by weekday in a bar chart, rank Y-axis from high to low order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY COUNT(HIRE_DATE) DESC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, find  first_name and  department_id , and visualize them by a bar chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT FIRST_NAME , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)", "binning": ""}, "VQL": "Visualize BAR SELECT FIRST_NAME , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)"}, "hardness": "Extra Hard"}, {"nl_queries": "Draw a bar chart that counts the number of venues of each workshop, and I want to order in ascending by the X.", "db_id": "workshop_paper", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY Venue ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY Venue ASC"}, "hardness": "Medium"}, {"nl_queries": "Draw a bar chart about the distribution of name and meter_100 , and list in asc by the total number.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , meter_100 FROM swimmer ORDER BY meter_100 ASC", "binning": ""}, "VQL": "Visualize BAR SELECT name , meter_100 FROM swimmer ORDER BY meter_100 ASC"}, "hardness": "Easy"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, show me about the distribution of first_name and manager_id in a bar chart, and sort by the y axis from high to low.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT FIRST_NAME , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY MANAGER_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT FIRST_NAME , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY MANAGER_ID DESC"}, "hardness": "Medium"}, {"nl_queries": "Give me a histogram for how old is each gender, on average?", "db_id": "network_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT gender , avg(age) FROM Person GROUP BY gender", "binning": ""}, "VQL": "Visualize BAR SELECT gender , avg(age) FROM Person GROUP BY gender"}, "hardness": "Easy"}, {"nl_queries": "Find  middle_name and  author_id , and visualize them by a bar chart.", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT middle_name , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name", "binning": ""}, "VQL": "Visualize BAR SELECT middle_name , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name"}, "hardness": "Easy"}, {"nl_queries": "Show the names of high school students and their corresponding number of friends in a bar chart, rank in ascending by the y axis.", "db_id": "network_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.name , AVG(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY AVG(count(*)) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.name , AVG(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY AVG(count(*)) ASC"}, "hardness": "Hard"}, {"nl_queries": "Bar graph to show the number of document type description from different document type description, and I want to list in descending by the x axis.", "db_id": "cre_Docs_and_Epenses", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types GROUP BY Document_Type_Description ORDER BY Document_Type_Description DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types GROUP BY Document_Type_Description ORDER BY Document_Type_Description DESC"}, "hardness": "Medium"}, {"nl_queries": "How many players having an injury of 'Foot injury' or 'Knee problem' in each season? Draw a bar chart.", "db_id": "game_injury", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Season , COUNT(Season) FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id WHERE T3.injury = 'Foot injury' OR T3.injury = 'Knee problem'", "binning": "BIN Season BY YEAR"}, "VQL": "Visualize BAR SELECT Season , COUNT(Season) FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id WHERE T3.injury = 'Foot injury' OR T3.injury = 'Knee problem' BIN Season BY YEAR"}, "hardness": "Extra Hard"}, {"nl_queries": "Count the number of people of each sex who have a weight higher than 85, and display x-axis from high to low order.", "db_id": "candidate_poll", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Sex , count(*) FROM people WHERE weight > 85 GROUP BY sex ORDER BY Sex DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Sex , count(*) FROM people WHERE weight > 85 GROUP BY sex ORDER BY Sex DESC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, a bar chart shows the distribution of job_id and salary , list by the y-axis from high to low.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SALARY FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY SALARY DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SALARY FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY SALARY DESC"}, "hardness": "Medium"}, {"nl_queries": "Give the proportion of what are the different template type codes, and how many documents use each type?", "db_id": "cre_Doc_Template_Mgt", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code", "binning": ""}, "VQL": "Visualize PIE SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code"}, "hardness": "Medium"}, {"nl_queries": "List the maximum weight and type for each type of pet, could you rank maximal weight from low to high order please?", "db_id": "pets_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT PetType , max(weight) FROM pets GROUP BY PetType ORDER BY max(weight) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT PetType , max(weight) FROM pets GROUP BY PetType ORDER BY max(weight) ASC"}, "hardness": "Easy"}, {"nl_queries": "Find All_Home and Team_ID , and group by attribute ACC_Home, and visualize them by a bar chart, order total number in ascending order.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY Team_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY Team_ID ASC"}, "hardness": "Medium"}, {"nl_queries": "What are the last names and ages of the students who are allergic to milk and cat? Plot them as bar chart, show from high to low by the x axis.", "db_id": "allergy_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT LName , Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy = \"Cat\") ORDER BY LName DESC", "binning": ""}, "VQL": "Visualize BAR SELECT LName , Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy = \"Cat\") ORDER BY LName DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "For all employees who have the letters D or S in their first name, show me about the distribution of  hire_date and the average of department_id bin hire_date by time in a bar chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH"}, "hardness": "Extra Hard"}, {"nl_queries": "Plot the number of county by grouped by county as a bar graph, and I want to list in ascending by the bars.", "db_id": "wine_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT County , COUNT(County) FROM APPELLATIONS GROUP BY County ORDER BY County ASC", "binning": ""}, "VQL": "Visualize BAR SELECT County , COUNT(County) FROM APPELLATIONS GROUP BY County ORDER BY County ASC"}, "hardness": "Medium"}, {"nl_queries": "Draw a bar chart of asset make versus the number of asset make, I want to order y axis from low to high order.", "db_id": "assets_maintenance", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT asset_make , COUNT(asset_make) FROM Assets GROUP BY asset_make ORDER BY COUNT(asset_make) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT asset_make , COUNT(asset_make) FROM Assets GROUP BY asset_make ORDER BY COUNT(asset_make) ASC"}, "hardness": "Medium"}, {"nl_queries": "List the name for storms and the number of affected regions for each storm with a bar chart, and could you sort bar in descending order?", "db_id": "storm_record", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , count(*) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id ORDER BY Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , count(*) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id ORDER BY Name DESC"}, "hardness": "Hard"}, {"nl_queries": "What are the names of the high schoolers and how many friends does each have Visualize by bar chart, and order by the Y in descending.", "db_id": "network_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.name , SUM(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY SUM(count(*)) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.name , SUM(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY SUM(count(*)) DESC"}, "hardness": "Hard"}, {"nl_queries": "Give me the comparison about  Team_ID over the  ACC_Regular_Season  by a bar chart.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Regular_Season , Team_ID FROM basketball_match", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match"}, "hardness": "Easy"}, {"nl_queries": "How many companies each investor has invested? Show me a bar chart, and display Y-axis in descending order please.", "db_id": "entrepreneur", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(Investor) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(Investor) DESC"}, "hardness": "Medium"}, {"nl_queries": "A bar chart shows the distribution of meter_700 and meter_100 , sort Y from low to high order.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 ASC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 ASC"}, "hardness": "Easy"}, {"nl_queries": "Draw a bar chart of name versus height, and rank by the y-axis in ascending.", "db_id": "candidate_poll", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , Height FROM people ORDER BY Height ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , Height FROM people ORDER BY Height ASC"}, "hardness": "Easy"}, {"nl_queries": "A line chart shows the change of the sum of monthly_rental over  date_address_to , and group by attribute other_details", "db_id": "behavior_monitoring", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC", "binning": ""}, "VQL": "Visualize LINE SELECT date_address_to , SUM(monthly_rental) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC"}, "hardness": "Hard"}, {"nl_queries": "Plot the average of shop id by grouped by is full time as a bar graph, could you order Y-axis from high to low order?", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Is_full_time , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY AVG(Shop_ID) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Is_full_time , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY AVG(Shop_ID) DESC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, show me about the distribution of  name and the sum of revenue , and group by attribute name in a bar chart.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name"}, "hardness": "Medium"}, {"nl_queries": "Bar graph to show the average of age from different gender", "db_id": "network_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT gender , avg(age) FROM Person GROUP BY gender", "binning": ""}, "VQL": "Visualize BAR SELECT gender , avg(age) FROM Person GROUP BY gender"}, "hardness": "Easy"}, {"nl_queries": "what are the names and ids of customers whose address contains TN?, and sort in ascending by the y axis please.", "db_id": "department_store", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT customer_name , customer_id FROM customers WHERE customer_address LIKE \"%TN%\" ORDER BY customer_id ASC", "binning": ""}, "VQL": "Visualize BAR SELECT customer_name , customer_id FROM customers WHERE customer_address LIKE \"%TN%\" ORDER BY customer_id ASC"}, "hardness": "Hard"}, {"nl_queries": "What are the first names of all students in Smith Hall, and count them by a bar chart, order by the X-axis in descending.", "db_id": "dorm_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Fname , COUNT(Fname) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.dorm_name = 'Smith Hall' GROUP BY Fname ORDER BY Fname DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Fname , COUNT(Fname) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.dorm_name = 'Smith Hall' GROUP BY Fname ORDER BY Fname DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "A bar chart shows the distribution of  other_details and the amount of other_details , and group by attribute other_details.", "db_id": "behavior_monitoring", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT other_details , COUNT(other_details) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC", "binning": ""}, "VQL": "Visualize BAR SELECT other_details , COUNT(other_details) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, visualize a bar chart about the distribution of name and the sum of code , and group by attribute name, and show bar in desc order please.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC"}, "hardness": "Hard"}, {"nl_queries": "Display a bar chart for what are the names of climbers and the corresponding heights of the mountains that they climb?, rank y axis from low to high order.", "db_id": "climbing", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID ORDER BY T2.Height ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID ORDER BY T2.Height ASC"}, "hardness": "Medium"}, {"nl_queries": "How many people are under 40 for each gender. Show a pie chart.", "db_id": "network_2", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT gender , count(*) FROM Person WHERE age < 40 GROUP BY gender", "binning": ""}, "VQL": "Visualize PIE SELECT gender , count(*) FROM Person WHERE age < 40 GROUP BY gender"}, "hardness": "Medium"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, a bar chart shows the distribution of  first_name and  employee_id .", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT FIRST_NAME , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)", "binning": ""}, "VQL": "Visualize BAR SELECT FIRST_NAME , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)"}, "hardness": "Extra Hard"}, {"nl_queries": "How many competitions for each country?, and list by the total number in asc.", "db_id": "sports_competition", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Country , COUNT(Country) FROM competition GROUP BY Country ORDER BY COUNT(Country) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Country ORDER BY COUNT(Country) ASC"}, "hardness": "Medium"}, {"nl_queries": "Draw a bar chart of first name versus manager_id, and list bar from high to low order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT FIRST_NAME , MANAGER_ID FROM employees ORDER BY FIRST_NAME DESC", "binning": ""}, "VQL": "Visualize BAR SELECT FIRST_NAME , MANAGER_ID FROM employees ORDER BY FIRST_NAME DESC"}, "hardness": "Easy"}, {"nl_queries": "For those records from the products and each product's manufacturer, a bar chart shows the distribution of name and the sum of price , and group by attribute name, sort bar in ascending order.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC"}, "hardness": "Hard"}, {"nl_queries": "how many car makers are there in each continents? List the continent name and the count, rank by the Y from low to high.", "db_id": "car_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY count(*) ASC"}, "hardness": "Hard"}, {"nl_queries": "How many drama workshop groups are there in each city? Return both the city and the count with a bar chart, and I want to rank by the City_Town in descending.", "db_id": "cre_Drama_Workshop_Groups", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT City_Town , count(*) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID = T2.Address_ID GROUP BY T1.City_Town ORDER BY City_Town DESC", "binning": ""}, "VQL": "Visualize BAR SELECT City_Town , count(*) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID = T2.Address_ID GROUP BY T1.City_Town ORDER BY City_Town DESC"}, "hardness": "Hard"}, {"nl_queries": "List the description of all aircrafts, and count them by a bar chart, list in asc by the Y.", "db_id": "aircraft", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY COUNT(Description) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY COUNT(Description) ASC"}, "hardness": "Medium"}, {"nl_queries": "Display a bar chart for how many students participated in tryouts for each college by descennding count?", "db_id": "soccer_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT cName , count(*) FROM tryout GROUP BY cName ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT cName , count(*) FROM tryout GROUP BY cName ORDER BY count(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "A bar chart shows the distribution of All_Home and the average of School_ID , and group by attribute All_Home, and sort total number from low to high order.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Home , AVG(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY AVG(School_ID) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Home , AVG(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY AVG(School_ID) ASC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about the sum of code over the  headquarter , and group by attribute headquarter.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter"}, "hardness": "Medium"}, {"nl_queries": "how many songs were released for each format?, show from high to low by the x axis.", "db_id": "music_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT formats , count(*) FROM files GROUP BY formats ORDER BY formats DESC", "binning": ""}, "VQL": "Visualize BAR SELECT formats , count(*) FROM files GROUP BY formats ORDER BY formats DESC"}, "hardness": "Medium"}, {"nl_queries": "Bar chart x axis state y axis the number of state, and I want to order Y-axis in asc order.", "db_id": "voter_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT DISTINCT state , COUNT(state) FROM votes GROUP BY state ORDER BY COUNT(state) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT DISTINCT state , COUNT(state) FROM votes GROUP BY state ORDER BY COUNT(state) ASC"}, "hardness": "Medium"}, {"nl_queries": "Give me a bar chart to compare the number of departments located in different cities, and I want to order by the Y-axis in asc.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY COUNT(CITY) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY COUNT(CITY) ASC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who did not have any job in the past, give me the comparison about the sum of salary over the hire_date bin hire_date by time, could you sort by the Y in desc?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY SUM(SALARY) DESC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "Bar chart x axis competition y axis the total number, could you order by the Y from low to high?", "db_id": "city_record", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Competition , count(*) FROM MATCH GROUP BY Competition ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Competition , count(*) FROM MATCH GROUP BY Competition ORDER BY count(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "List the number of enginners in a stacked bar chart. The x-axis is last name and group by skill description.", "db_id": "assets_maintenance", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT last_name , COUNT(last_name) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY skill_description ,  last_name", "binning": ""}, "VQL": "Visualize BAR SELECT last_name , COUNT(last_name) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY skill_description ,  last_name"}, "hardness": "Hard"}, {"nl_queries": "What is the official language used in the country the name of whose head of state is Beatrix, and count them by a pie chart", "db_id": "world_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Language , COUNT(Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = \"Beatrix\" AND T2.IsOfficial = \"T\" GROUP BY Language", "binning": ""}, "VQL": "Visualize PIE SELECT Language , COUNT(Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = \"Beatrix\" AND T2.IsOfficial = \"T\" GROUP BY Language"}, "hardness": "Hard"}, {"nl_queries": "Bar chart x axis name y axis how many name, display in asc by the names.", "db_id": "store_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY name ASC"}, "hardness": "Medium"}, {"nl_queries": "Plot total number of mean weight by grouped by year as a bar graph, and rank total number in ascending order.", "db_id": "car_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Year , avg(Weight) FROM CARS_DATA ORDER BY avg(Weight) ASC", "binning": "BIN Year BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Year , avg(Weight) FROM CARS_DATA ORDER BY avg(Weight) ASC BIN Year BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "Find meter_700 and meter_100 , and visualize them by a bar chart, order by the x axis from low to high.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_700 ASC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_700 ASC"}, "hardness": "Easy"}, {"nl_queries": "Plot season by how many season as a line chart", "db_id": "game_injury", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Season , COUNT(Season) FROM game", "binning": "BIN Season BY YEAR"}, "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game BIN Season BY YEAR"}, "hardness": "Easy"}, {"nl_queries": "What is the total capacity of dorms for each gender? Give me a bar chart.", "db_id": "dorm_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT gender , sum(student_capacity) FROM dorm GROUP BY gender", "binning": ""}, "VQL": "Visualize BAR SELECT gender , sum(student_capacity) FROM dorm GROUP BY gender"}, "hardness": "Easy"}, {"nl_queries": "Bar chart x axis date of enrolment y axis the number of date of enrolment", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Student_Course_Enrolment", "binning": "BIN date_of_enrolment BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Student_Course_Enrolment BIN date_of_enrolment BY WEEKDAY"}, "hardness": "Easy"}, {"nl_queries": "Visualize a pie chart with what is average age of male for different job title?", "db_id": "network_2", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job", "binning": ""}, "VQL": "Visualize PIE SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job"}, "hardness": "Medium"}, {"nl_queries": "Please use a bar chart to compare the number of customers of each customer's move in date, note that you should bin move in date into Year interval.", "db_id": "local_govt_and_lot", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id", "binning": "BIN date_moved_in BY YEAR"}, "VQL": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id BIN date_moved_in BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "For those employees who did not have any job in the past, give me the comparison about the average of manager_id over the hire_date bin hire_date by time, and I want to order total number from low to high order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(MANAGER_ID) ASC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, show me about the distribution of job_id and the average of employee_id , and group by attribute job_id in a bar chart, could you rank in ascending by the X-axis?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "What are the purchase details of transactions with amount bigger than 10000, and count them by a bar chart, list by the the number of purchase details from low to high.", "db_id": "tracking_share_transactions", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT purchase_details , COUNT(purchase_details) FROM PURCHASES AS T1 JOIN TRANSACTIONS AS T2 ON T1.purchase_transaction_id = T2.transaction_id WHERE T2.amount_of_transaction > 10000 GROUP BY purchase_details ORDER BY COUNT(purchase_details) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT purchase_details , COUNT(purchase_details) FROM PURCHASES AS T1 JOIN TRANSACTIONS AS T2 ON T1.purchase_transaction_id = T2.transaction_id WHERE T2.amount_of_transaction > 10000 GROUP BY purchase_details ORDER BY COUNT(purchase_details) ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, find phone_number and department_id , and visualize them by a bar chart, I want to show in desc by the x axis.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT PHONE_NUMBER , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY PHONE_NUMBER DESC", "binning": ""}, "VQL": "Visualize BAR SELECT PHONE_NUMBER , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY PHONE_NUMBER DESC"}, "hardness": "Medium"}, {"nl_queries": "Find Start_from and the amount of Start_from bin start_from by weekday, and visualize them by a bar chart, could you show in descending by the Y?", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Start_from , COUNT(Start_from) FROM hiring  ORDER BY COUNT(Start_from) DESC", "binning": "BIN Start_from BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Start_from , COUNT(Start_from) FROM hiring  ORDER BY COUNT(Start_from) DESC BIN Start_from BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "For all employees who have the letters D or S in their first name, show me about the distribution of hire_date and the average of employee_id bin hire_date by time in a bar chart, and show by the total number in desc.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY AVG(EMPLOYEE_ID) DESC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY AVG(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH"}, "hardness": "Extra Hard"}, {"nl_queries": "Show the county name and population of all counties with a bar chart, I want to sort by the x axis in asc.", "db_id": "election", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT County_name , Population FROM county ORDER BY County_name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT County_name , Population FROM county ORDER BY County_name ASC"}, "hardness": "Easy"}, {"nl_queries": "For those records from the products and each product's manufacturer, draw a bar chart about the distribution of name and code , and group by attribute founder, and I want to show total number in ascending order.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder , T1.Name ORDER BY T1.Code ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder , T1.Name ORDER BY T1.Code ASC"}, "hardness": "Hard"}, {"nl_queries": "Show me the total number of the flag of ships that are not steered by any captain with Midshipman rank using a bar graph.", "db_id": "ship_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Flag , COUNT(Flag) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank = 'Midshipman') GROUP BY Flag", "binning": ""}, "VQL": "Visualize BAR SELECT Flag , COUNT(Flag) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank = 'Midshipman') GROUP BY Flag"}, "hardness": "Medium"}, {"nl_queries": "Give me a pie to show the total number from different premises type.", "db_id": "customers_campaigns_ecommerce", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT premises_type , count(*) FROM premises GROUP BY premises_type", "binning": ""}, "VQL": "Visualize PIE SELECT premises_type , count(*) FROM premises GROUP BY premises_type"}, "hardness": "Easy"}, {"nl_queries": "Find the organisation ids and details of the organisations which are involved i Visualize by bar chart, list by the x axis in descending.", "db_id": "tracking_grants_for_research", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T2.organisation_details DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T2.organisation_details DESC"}, "hardness": "Hard"}, {"nl_queries": "Show the number of documents for each location code in a pie chart.", "db_id": "cre_Doc_Tracking_DB", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Location_Code , COUNT(Location_Code) FROM Document_locations GROUP BY Location_Code", "binning": ""}, "VQL": "Visualize PIE SELECT Location_Code , COUNT(Location_Code) FROM Document_locations GROUP BY Location_Code"}, "hardness": "Easy"}, {"nl_queries": "For those records from the products and each product's manufacturer, draw a bar chart about the distribution of name and code , and group by attribute founder, and display in desc by the X-axis.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder , T1.Name ORDER BY T1.Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder , T1.Name ORDER BY T1.Name DESC"}, "hardness": "Hard"}, {"nl_queries": "Return the number of the countries of the mountains that have a height larger than 5000, and I want to list y axis from low to high order.", "db_id": "climbing", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) ASC"}, "hardness": "Hard"}, {"nl_queries": "Find the max gpa of all students in each department with a bar chart, and I want to order in asc by the y axis please.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT DEPT_CODE , max(stu_gpa) FROM student GROUP BY DEPT_CODE ORDER BY max(stu_gpa) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT DEPT_CODE , max(stu_gpa) FROM student GROUP BY DEPT_CODE ORDER BY max(stu_gpa) ASC"}, "hardness": "Easy"}, {"nl_queries": "Bar graph to show the average of product price from different product category code, and order Y in desc order please.", "db_id": "customer_complaints", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT product_category_code , avg(product_price) FROM products GROUP BY product_category_code ORDER BY avg(product_price) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT product_category_code , avg(product_price) FROM products GROUP BY product_category_code ORDER BY avg(product_price) DESC"}, "hardness": "Medium"}, {"nl_queries": "For employees with first names that end with the letter m, give me a bar chart to show their total salary, I want to display by the bar in ascending.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT FIRST_NAME , SUM(SALARY) FROM employees WHERE first_name LIKE '%m' GROUP BY FIRST_NAME ORDER BY FIRST_NAME ASC", "binning": ""}, "VQL": "Visualize BAR SELECT FIRST_NAME , SUM(SALARY) FROM employees WHERE first_name LIKE '%m' GROUP BY FIRST_NAME ORDER BY FIRST_NAME ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "Return a bar chart about the distribution of meter_200 and the average of ID , and group by attribute meter_200, and order from high to low by the bars.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_200 , AVG(ID) FROM swimmer GROUP BY meter_200 ORDER BY meter_200 DESC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_200 , AVG(ID) FROM swimmer GROUP BY meter_200 ORDER BY meter_200 DESC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, show me about the distribution of name and the average of manufacturer , and group by attribute name in a bar chart, and I want to order in desc by the y axis please.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Manufacturer DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Manufacturer DESC"}, "hardness": "Hard"}, {"nl_queries": "Plot the total number by grouped by city code as a bar graph, display by the city_code in ascending.", "db_id": "allergy_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT city_code , count(*) FROM Student GROUP BY city_code ORDER BY city_code ASC", "binning": ""}, "VQL": "Visualize BAR SELECT city_code , count(*) FROM Student GROUP BY city_code ORDER BY city_code ASC"}, "hardness": "Medium"}, {"nl_queries": "Show me distance by name in a histogram", "db_id": "flight_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , distance FROM Aircraft", "binning": ""}, "VQL": "Visualize BAR SELECT name , distance FROM Aircraft"}, "hardness": "Easy"}, {"nl_queries": "Show the draft pick numbers and draft classes of players whose positions are defenders in a bar chart.", "db_id": "match_season", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Draft_Class , Draft_Pick_Number FROM match_season WHERE POSITION = \"Defender\"", "binning": ""}, "VQL": "Visualize BAR SELECT Draft_Class , Draft_Pick_Number FROM match_season WHERE POSITION = \"Defender\""}, "hardness": "Easy"}, {"nl_queries": "For the average of Employee_ID, Start_from, visualize the trend, and display by the x-axis from high to low.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC", "binning": "BIN Start_from BY YEAR"}, "VQL": "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR"}, "hardness": "Extra Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about the sum of price over the name , and group by attribute name, and could you sort from low to high by the y axis?", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Price ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Price ASC"}, "hardness": "Hard"}, {"nl_queries": "Show the average age for male and female students Visualize by bar chart, I want to rank by the mean age in asc please.", "db_id": "allergy_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Sex , avg(age) FROM Student GROUP BY sex ORDER BY avg(age) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Sex , avg(age) FROM Student GROUP BY sex ORDER BY avg(age) ASC"}, "hardness": "Medium"}, {"nl_queries": "Give me a pie to show the average of age from different sex.", "db_id": "allergy_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Sex , avg(age) FROM Student GROUP BY sex", "binning": ""}, "VQL": "Visualize PIE SELECT Sex , avg(age) FROM Student GROUP BY sex"}, "hardness": "Easy"}, {"nl_queries": "For those employees who did not have any job in the past, return a bar chart about the distribution of job_id and the sum of salary , and group by attribute job_id, rank by the x axis from low to high.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY JOB_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY JOB_ID ASC"}, "hardness": "Hard"}, {"nl_queries": "Draw a bar chart about the distribution of  All_Home and  Team_ID , and group by attribute ACC_Road.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home", "binning": ""}, "VQL": "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home"}, "hardness": "Extra Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, return a bar chart about the distribution of name and the average of code , and group by attribute name, and could you sort from low to high by the bars?", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC"}, "hardness": "Hard"}, {"nl_queries": "A bar chart about how many faculty members do we have for each faculty rank?, and display by the Y in ascending.", "db_id": "activity_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Rank , count(*) FROM Faculty GROUP BY rank ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY rank ORDER BY count(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "Find the last name and age of the student who has allergy to both milk and cat Show a bar chart, order in asc by the Y.", "db_id": "allergy_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT LName , Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy = \"Cat\") ORDER BY Age ASC", "binning": ""}, "VQL": "Visualize BAR SELECT LName , Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy = \"Cat\") ORDER BY Age ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, show me about the correlation between  code and  manufacturer , and group by attribute founder in a scatter chart.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder", "binning": ""}, "VQL": "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder"}, "hardness": "Medium"}, {"nl_queries": "For all storms with at least 1 death, show me the name and the total number of deaths with a bar chart, sort in asc by the y axis please.", "db_id": "storm_record", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , Number_Deaths FROM storm WHERE number_deaths >= 1 ORDER BY Number_Deaths ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , Number_Deaths FROM storm WHERE number_deaths >= 1 ORDER BY Number_Deaths ASC"}, "hardness": "Medium"}, {"nl_queries": "Show me about the distribution of All_Home and the average of Team_ID , and group by attribute All_Home in a bar chart, sort by the y-axis in ascending please.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Home , AVG(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY AVG(Team_ID) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Home , AVG(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY AVG(Team_ID) ASC"}, "hardness": "Medium"}, {"nl_queries": "Show each county along with the number of schools, and could you rank by the x-axis in asc?", "db_id": "school_finance", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT County , count(*) FROM school GROUP BY county ORDER BY County ASC", "binning": ""}, "VQL": "Visualize BAR SELECT County , count(*) FROM school GROUP BY county ORDER BY County ASC"}, "hardness": "Medium"}, {"nl_queries": "Give me the comparison about  meter_100 over the  meter_300  by a bar chart.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_300 , meter_100 FROM swimmer", "binning": ""}, "VQL": "Visualize BAR SELECT meter_300 , meter_100 FROM swimmer"}, "hardness": "Easy"}, {"nl_queries": "how many students are enrolled in colleges that have student accepted during tryouts, and in which states are those colleges?, show names from low to high order.", "db_id": "soccer_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT state , enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.decision = 'yes' ORDER BY state ASC", "binning": ""}, "VQL": "Visualize BAR SELECT state , enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.decision = 'yes' ORDER BY state ASC"}, "hardness": "Hard"}, {"nl_queries": "Show school id vs acc_percent as scatter plot use a different color for each All_Neutral", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY All_Neutral", "binning": ""}, "VQL": "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY All_Neutral"}, "hardness": "Easy"}, {"nl_queries": "What is the frequency of the dates (bin into year interval) that had the top 5 cloud cover rates? You can draw me a bar chart for this purpose, I want to sort Y in descending order.", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date , COUNT(date) FROM weather  ORDER BY COUNT(date) DESC", "binning": "BIN date BY YEAR"}, "VQL": "Visualize BAR SELECT date , COUNT(date) FROM weather  ORDER BY COUNT(date) DESC BIN date BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, show me about the distribution of job_id and the average of employee_id , and group by attribute job_id in a bar chart, and rank X-axis in descending order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "For each account type, find the average account balance of customers with credit score lower than 50. Show bar chart.", "db_id": "loan_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type", "binning": ""}, "VQL": "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, return a bar chart about the distribution of headquarter and the sum of code , and group by attribute headquarter, and list in asc by the y-axis.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T1.Code ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T1.Code ASC"}, "hardness": "Hard"}, {"nl_queries": "Find the id and cell phone of the professionals who operate two or more types of treatments, order by the x axis in asc please.", "db_id": "dog_kennels", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.cell_number , T1.professional_id FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id ORDER BY T1.cell_number ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.cell_number , T1.professional_id FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id ORDER BY T1.cell_number ASC"}, "hardness": "Medium"}, {"nl_queries": "A bar chart for what are the number of the descriptions for the aircrafts?, and show by the Description in descending.", "db_id": "aircraft", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY Description DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY Description DESC"}, "hardness": "Medium"}, {"nl_queries": "Show the employee ids and the number of documents destroyed by each employee by a scatter chart.", "db_id": "cre_Doc_Tracking_DB", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Destroyed_by_Employee_ID , count(*) FROM Documents_to_be_destroyed GROUP BY Destroyed_by_Employee_ID", "binning": ""}, "VQL": "Visualize SCATTER SELECT Destroyed_by_Employee_ID , count(*) FROM Documents_to_be_destroyed GROUP BY Destroyed_by_Employee_ID"}, "hardness": "Easy"}, {"nl_queries": "A pie chart shows the proportion of  Sex and the sum of Height.", "db_id": "candidate_poll", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Sex , SUM(Height) FROM people GROUP BY Sex", "binning": ""}, "VQL": "Visualize PIE SELECT Sex , SUM(Height) FROM people GROUP BY Sex"}, "hardness": "Easy"}, {"nl_queries": "Give me a histogram for how many students are older than 20 in each dorm?, display x axis from high to low order.", "db_id": "dorm_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT dorm_name , count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T1.age > 20 GROUP BY T3.dorm_name ORDER BY dorm_name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT dorm_name , count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T1.age > 20 GROUP BY T3.dorm_name ORDER BY dorm_name DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "Count the hometown by hometown using a bar chart.", "db_id": "shop_membership", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Hometown , COUNT(Hometown) FROM member GROUP BY Hometown", "binning": ""}, "VQL": "Visualize BAR SELECT Hometown , COUNT(Hometown) FROM member GROUP BY Hometown"}, "hardness": "Easy"}, {"nl_queries": "Show the average of age from each country, and show from low to high by the X please.", "db_id": "concert_singer", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY Country ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY Country ASC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who did not have any job in the past, show me about the distribution of job_id and the average of salary , and group by attribute job_id in a bar chart, rank Y in descending order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY AVG(SALARY) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY AVG(SALARY) DESC"}, "hardness": "Hard"}, {"nl_queries": "Show me a bar chart for how many faculty members do we have for each faculty rank?, display in asc by the bars.", "db_id": "activity_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Rank , count(*) FROM Faculty GROUP BY rank ORDER BY Rank ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY rank ORDER BY Rank ASC"}, "hardness": "Medium"}, {"nl_queries": "A bar chart for finding the number of the dates of assessment notes for students with first name \"Fanny\", and sort by the total number from low to high.", "db_id": "behavior_monitoring", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\"  ORDER BY COUNT(date_of_notes) ASC", "binning": "BIN date_of_notes BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\"  ORDER BY COUNT(date_of_notes) ASC BIN date_of_notes BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "Draw a bar chart about the distribution of All_Home and the sum of Team_ID , and group by attribute All_Home, and I want to show from high to low by the All_Home.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home DESC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home DESC"}, "hardness": "Medium"}, {"nl_queries": "Return a bar chart about the distribution of Name and Height , I want to list Height in asc order.", "db_id": "candidate_poll", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , Height FROM people ORDER BY Height ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , Height FROM people ORDER BY Height ASC"}, "hardness": "Easy"}, {"nl_queries": "A stacked bar about the number of faults for different fault description and fault status of all the faults recoreded in the logs, and show Y from high to low order.", "db_id": "assets_maintenance", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT fault_status , COUNT(fault_status) FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id GROUP BY fault_description ,  fault_status ORDER BY COUNT(fault_status) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT fault_status , COUNT(fault_status) FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id GROUP BY fault_description ,  fault_status ORDER BY COUNT(fault_status) DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, find name and revenue , and group by attribute headquarter, and visualize them by a bar chart, list by the Y in ascending.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter , T1.Name ORDER BY T2.Revenue ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter , T1.Name ORDER BY T2.Revenue ASC"}, "hardness": "Hard"}, {"nl_queries": "List the name and the number of stations for all the cities that have at least 15 stations Show bar chart, and order by the x axis in desc.", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT city , COUNT(*) FROM station GROUP BY city ORDER BY city DESC", "binning": ""}, "VQL": "Visualize BAR SELECT city , COUNT(*) FROM station GROUP BY city ORDER BY city DESC"}, "hardness": "Medium"}, {"nl_queries": "What is the total number of different types of codes of products?, order from high to low by the total number please.", "db_id": "solvency_ii", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Product_Type_Code , COUNT(Product_Type_Code) FROM Products GROUP BY Product_Type_Code ORDER BY COUNT(Product_Type_Code) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Product_Type_Code , COUNT(Product_Type_Code) FROM Products GROUP BY Product_Type_Code ORDER BY COUNT(Product_Type_Code) DESC"}, "hardness": "Medium"}, {"nl_queries": "A bar chart for what are the number of the names of photos taken with the lens brand 'Sigma' or 'Olympus'?, and sort by the how many name from low to high please.", "db_id": "mountain_photos", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.name , COUNT(T1.name) FROM camera_lens AS T1 JOIN photos AS T2 ON T2.camera_lens_id = T1.id WHERE T1.brand = 'Sigma' OR T1.brand = 'Olympus' GROUP BY T1.name ORDER BY COUNT(T1.name) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.name , COUNT(T1.name) FROM camera_lens AS T1 JOIN photos AS T2 ON T2.camera_lens_id = T1.id WHERE T1.brand = 'Sigma' OR T1.brand = 'Olympus' GROUP BY T1.name ORDER BY COUNT(T1.name) ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "Show order ids and the number of products in each order. Plot them as scatter chart.", "db_id": "customers_and_invoices", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT order_id , count(DISTINCT product_id) FROM Order_items", "binning": ""}, "VQL": "Visualize SCATTER SELECT order_id , count(DISTINCT product_id) FROM Order_items"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, visualize the relationship between  price and  manufacturer , and group by attribute founder.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Price , Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder", "binning": ""}, "VQL": "Visualize SCATTER SELECT Price , Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder"}, "hardness": "Medium"}, {"nl_queries": "Visualize the total smallest rating of different movie title using a bar chart, and sort by the X in asc please.", "db_id": "movie_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.title , SUM(min(T1.stars)) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T2.title ORDER BY T2.title ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.title , SUM(min(T1.stars)) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T2.title ORDER BY T2.title ASC"}, "hardness": "Hard"}, {"nl_queries": "Show names of teachers and the number of courses they teach. Show a pie chart.", "db_id": "course_teach", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Name , COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name", "binning": ""}, "VQL": "Visualize PIE SELECT Name , COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name"}, "hardness": "Medium"}, {"nl_queries": "Give me a bar chart for mean product price of each product name, show from low to high by the total number.", "db_id": "cre_Drama_Workshop_Groups", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY avg(Product_Price) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name ORDER BY avg(Product_Price) ASC"}, "hardness": "Medium"}, {"nl_queries": "Show each employee's salary using a bar chart, note that use the last name of each employee.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT LAST_NAME , SALARY FROM employees", "binning": ""}, "VQL": "Visualize BAR SELECT LAST_NAME , SALARY FROM employees"}, "hardness": "Easy"}, {"nl_queries": "What are the descriptions of the service types with product price above 100, and count them by a pie chart", "db_id": "cre_Drama_Workshop_Groups", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Service_Type_Description , COUNT(Service_Type_Description) FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code WHERE T2.Product_Price > 100 GROUP BY Service_Type_Description", "binning": ""}, "VQL": "Visualize PIE SELECT Service_Type_Description , COUNT(Service_Type_Description) FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code WHERE T2.Product_Price > 100 GROUP BY Service_Type_Description"}, "hardness": "Hard"}, {"nl_queries": "Please use a bar chart to compare the number of customers of each customer's move in date, and order by the bars from low to high.", "db_id": "local_govt_and_lot", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY date_moved_in ASC", "binning": ""}, "VQL": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY date_moved_in ASC"}, "hardness": "Hard"}, {"nl_queries": "Give me a bar chart to show the names and revenue of the company that earns the highest revenue in each headquarter city, could you display from low to high by the X please?", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , max(revenue) FROM manufacturers GROUP BY Headquarter ORDER BY Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , max(revenue) FROM manufacturers GROUP BY Headquarter ORDER BY Name ASC"}, "hardness": "Medium"}, {"nl_queries": "Show me about the distribution of All_Home and School_ID , and group by attribute ACC_Home in a bar chart, sort by the X from low to high.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home ASC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home ASC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, draw a scatter chart about the correlation between  price and  revenue , and group by attribute founder.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Price , Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder", "binning": ""}, "VQL": "Visualize SCATTER SELECT Price , Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder"}, "hardness": "Medium"}, {"nl_queries": "Plot how many party by grouped by party as a bar graph, list bar in asc order.", "db_id": "election_representative", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Party , COUNT(Party) FROM representative GROUP BY Party ORDER BY Party ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Party , COUNT(Party) FROM representative GROUP BY Party ORDER BY Party ASC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who did not have any job in the past, visualize a bar chart about the distribution of  hire_date and the average of manager_id bin hire_date by time.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH"}, "hardness": "Medium"}, {"nl_queries": "Show me about the distribution of Time and ID in a bar chart, and rank by the bars from low to high.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Time , ID FROM swimmer ORDER BY Time ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Time , ID FROM swimmer ORDER BY Time ASC"}, "hardness": "Easy"}, {"nl_queries": "List the number of invoices from the US, grouped by state by a bar chart, and list X from high to low order.", "db_id": "store_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY billing_state DESC", "binning": ""}, "VQL": "Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY billing_state DESC"}, "hardness": "Hard"}, {"nl_queries": "For directors who had more than one movie, bin the dates of release into Year interval and them compute the total number of movies in each year bucket Show me the result using a line chart, and list x axis from high to low order.", "db_id": "movie_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT year , COUNT(year) FROM Movie AS T1 JOIN Movie AS T2 ON T1.director = T2.director WHERE T1.title != T2.title ORDER BY year DESC", "binning": "BIN year BY YEAR"}, "VQL": "Visualize LINE SELECT year , COUNT(year) FROM Movie AS T1 JOIN Movie AS T2 ON T1.director = T2.director WHERE T1.title != T2.title ORDER BY year DESC BIN year BY YEAR"}, "hardness": "Extra Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about the average of code over the name , and group by attribute name by a bar chart, and I want to list by the bar from low to high.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC"}, "hardness": "Hard"}, {"nl_queries": "Find the number of the enrollment date for all the tests that have \"Pass\" result, and could you order by the Y-axis in desc?", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = \"Pass\"  ORDER BY COUNT(date_of_enrolment) DESC", "binning": "BIN date_of_enrolment BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = \"Pass\"  ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "Who has friends that are older than the average age? Print their name and their ages as well using a bar chart, rank by the y axis in asc.", "db_id": "network_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.name , T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T1.age > (SELECT avg(age) FROM person) ORDER BY T1.age ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.name , T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T1.age > (SELECT avg(age) FROM person) ORDER BY T1.age ASC"}, "hardness": "Hard"}, {"nl_queries": "What is the average salary for each job title Show bar chart, display by the names from low to high.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_TITLE , AVG(salary) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id GROUP BY T2.job_title ORDER BY JOB_TITLE ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_TITLE , AVG(salary) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id GROUP BY T2.job_title ORDER BY JOB_TITLE ASC"}, "hardness": "Hard"}, {"nl_queries": "What are the first names of all students in Smith Hall, and count them by a bar chart, and rank how many fname in asc order please.", "db_id": "dorm_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Fname , COUNT(Fname) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.dorm_name = 'Smith Hall' GROUP BY Fname ORDER BY COUNT(Fname) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Fname , COUNT(Fname) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.dorm_name = 'Smith Hall' GROUP BY Fname ORDER BY COUNT(Fname) ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, a bar chart shows the distribution of  hire_date and the sum of department_id bin hire_date by weekday.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "Return a histogram on what are the different card types, and how many cards are there of each?", "db_id": "customers_card_transactions", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT card_type_code , count(*) FROM Customers_cards GROUP BY card_type_code", "binning": ""}, "VQL": "Visualize BAR SELECT card_type_code , count(*) FROM Customers_cards GROUP BY card_type_code"}, "hardness": "Easy"}, {"nl_queries": "Show the number of documents in different ending date and bin ending date by year interval with a line chart, and list by the x axis in asc.", "db_id": "cre_Doc_Tracking_DB", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations  ORDER BY Date_in_Locaton_To ASC", "binning": "BIN Date_in_Locaton_To BY YEAR"}, "VQL": "Visualize LINE SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations  ORDER BY Date_in_Locaton_To ASC BIN Date_in_Locaton_To BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "How many races are held in each year after 2014? Show me a bar chart, and rank in desc by the bar please.", "db_id": "formula_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY year ORDER BY year DESC", "binning": ""}, "VQL": "Visualize BAR SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY year ORDER BY year DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees who was hired before 2002-06-21, give me the comparison about the average of employee_id over the hire_date bin hire_date by time, and show in ascending by the Y.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(EMPLOYEE_ID) ASC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "How many events are there for each party, and sort in asc by the the total number .", "db_id": "party_people", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY count(*) ASC"}, "hardness": "Hard"}, {"nl_queries": "Please plot a scatter chart to tell me what is the correlation between average and maximum age for each pet type?", "db_id": "pets_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT avg(pet_age) , max(pet_age) FROM pets GROUP BY pettype", "binning": ""}, "VQL": "Visualize SCATTER SELECT avg(pet_age) , max(pet_age) FROM pets GROUP BY pettype"}, "hardness": "Easy"}, {"nl_queries": "Show me a bar chart for what is the average song rating for each language?, list from high to low by the languages please.", "db_id": "music_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY languages DESC", "binning": ""}, "VQL": "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY languages DESC"}, "hardness": "Medium"}, {"nl_queries": "Show the ids and details of the investors who have at least two transactions with type code \"SALE\" Plot them as bar chart, sort in desc by the y-axis.", "db_id": "tracking_share_transactions", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Investor_details , T1.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.transaction_type_code = \"SALE\" ORDER BY T1.investor_id DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Investor_details , T1.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.transaction_type_code = \"SALE\" ORDER BY T1.investor_id DESC"}, "hardness": "Hard"}, {"nl_queries": "What is the number of each allergie that the student with first name Lisa has? Draw a bar chart, order by the Y from low to high please.", "db_id": "allergy_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Allergy , COUNT(T1.Allergy) FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy = T2.Allergy JOIN Student AS T3 ON T3.StuID = T2.StuID WHERE T3.Fname = \"Lisa\" GROUP BY T1.Allergy ORDER BY T1.Allergy ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Allergy , COUNT(T1.Allergy) FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy = T2.Allergy JOIN Student AS T3 ON T3.StuID = T2.StuID WHERE T3.Fname = \"Lisa\" GROUP BY T1.Allergy ORDER BY T1.Allergy ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "How many templates for each template type code? Show a bar chart, and could you list by the the number of template type code from low to high?", "db_id": "cre_Doc_Template_Mgt", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Template_Type_Code , COUNT(Template_Type_Code) FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(Template_Type_Code) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Template_Type_Code , COUNT(Template_Type_Code) FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(Template_Type_Code) ASC"}, "hardness": "Medium"}, {"nl_queries": "Show the number of date arrived from each date arrived, I want to sort Y in desc order.", "db_id": "dog_kennels", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_arrived , COUNT(date_arrived) FROM Dogs  ORDER BY COUNT(date_arrived) DESC", "binning": "BIN date_arrived BY YEAR"}, "VQL": "Visualize BAR SELECT date_arrived , COUNT(date_arrived) FROM Dogs  ORDER BY COUNT(date_arrived) DESC BIN date_arrived BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "Bar graph to show mean grade from different name, could you order from low to high by the Y please?", "db_id": "network_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) ASC"}, "hardness": "Medium"}, {"nl_queries": "Show me the trend about the amount of date_address_to over  date_address_to , and group by attribute other_details with a line chart.", "db_id": "behavior_monitoring", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC", "binning": ""}, "VQL": "Visualize LINE SELECT date_address_to , COUNT(date_address_to) FROM Student_Addresses GROUP BY other_details ,  date_address_to ORDER BY monthly_rental DESC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who did not have any job in the past, return a bar chart about the distribution of job_id and the sum of department_id , and group by attribute job_id, and order by the x axis from high to low please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY JOB_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY JOB_ID DESC"}, "hardness": "Hard"}, {"nl_queries": "Draw a bar chart for how many patients do each physician take care of? List their names and number of patients they take care of, sort total number from high to low order.", "db_id": "hospital_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid ORDER BY count(*) DESC"}, "hardness": "Hard"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, give me the comparison about the average of manager_id over the hire_date bin hire_date by weekday by a bar chart, and could you sort by the Y-axis in ascending?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(MANAGER_ID) ASC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "Show the different countries and the number of members from each Visualize by bar chart, rank by the bar in ascending.", "db_id": "decoration_competition", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Country , COUNT(*) FROM member GROUP BY Country ORDER BY Country ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Country , COUNT(*) FROM member GROUP BY Country ORDER BY Country ASC"}, "hardness": "Medium"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, draw a bar chart about the distribution of  hire_date and the average of employee_id bin hire_date by time.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "Show me about the distribution of Team_Name and School_ID in a bar chart, display bars in ascending order.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Team_Name , School_ID FROM basketball_match ORDER BY Team_Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY Team_Name ASC"}, "hardness": "Easy"}, {"nl_queries": "Find the number of students in each department that has the top 3 highest number of students with a pie chart.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT DEPT_NAME , count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3", "binning": ""}, "VQL": "Visualize PIE SELECT DEPT_NAME , count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3"}, "hardness": "Extra Hard"}, {"nl_queries": "Return a bar chart on what are the ids and details of events that have more than one participants?, and show in asc by the Y.", "db_id": "local_govt_in_alabama", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Event_Details , T1.Event_ID FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY T1.Event_Details ORDER BY T1.Event_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Event_Details , T1.Event_ID FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY T1.Event_Details ORDER BY T1.Event_ID ASC"}, "hardness": "Hard"}, {"nl_queries": "For each manufacturer, what are the names and prices of their most expensive product?, could you sort in ascending by the bars?", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , max(T1.Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , max(T1.Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY Name ASC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, return a bar chart about the distribution of founder and the average of code , and group by attribute founder, could you rank from high to low by the Founder?", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T2.Founder DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T2.Founder DESC"}, "hardness": "Hard"}, {"nl_queries": "For all employees who have the letters D or S in their first name, draw a line chart about the change of commission_pct over hire_date , rank HIRE_DATE in ascending order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY HIRE_DATE ASC", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY HIRE_DATE ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "A bar chart groups the lot details, and computes the number of each lot details, and list by the how many lot details in desc.", "db_id": "tracking_share_transactions", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT lot_details , COUNT(lot_details) FROM LOTS GROUP BY lot_details ORDER BY COUNT(lot_details) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM LOTS GROUP BY lot_details ORDER BY COUNT(lot_details) DESC"}, "hardness": "Medium"}, {"nl_queries": "What is the relationship between  ACC_Percent and  All_Games_Percent , and group by attribute All_Road?", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT ACC_Percent , All_Games_Percent FROM basketball_match GROUP BY All_Road", "binning": ""}, "VQL": "Visualize SCATTER SELECT ACC_Percent , All_Games_Percent FROM basketball_match GROUP BY All_Road"}, "hardness": "Easy"}, {"nl_queries": "For all employees who have the letters D or S in their first name, show me about the change of department_id over hire_date in a line chart, rank by the X-axis in asc.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY HIRE_DATE ASC", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY HIRE_DATE ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "Compute the number of local authorities by local authorities and then split by services Show the result with a stacked bar graph, I want to order y axis from low to high order please.", "db_id": "station_weather", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT services , COUNT(services) FROM station GROUP BY local_authority ,  services ORDER BY COUNT(services) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY local_authority ,  services ORDER BY COUNT(services) ASC"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, find name and the average of revenue , and group by attribute name, and visualize them by a bar chart, I want to display in descending by the X.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC"}, "hardness": "Hard"}, {"nl_queries": "List the council tax ids and their related cmi cross references of all the parking fines by a scatter chart.", "db_id": "local_govt_mdm", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT council_tax_id , cmi_cross_ref_id FROM parking_fines", "binning": ""}, "VQL": "Visualize SCATTER SELECT council_tax_id , cmi_cross_ref_id FROM parking_fines"}, "hardness": "Easy"}, {"nl_queries": "What are the department names and how many employees work in each of them Visualize by bar chart, and I want to order by the names in descending.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT DEPARTMENT_NAME , COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id GROUP BY department_name ORDER BY DEPARTMENT_NAME DESC", "binning": ""}, "VQL": "Visualize BAR SELECT DEPARTMENT_NAME , COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id GROUP BY department_name ORDER BY DEPARTMENT_NAME DESC"}, "hardness": "Hard"}, {"nl_queries": "Show how many competitions are held in each year with a line chart, and could you order by the x-axis in asc?", "db_id": "farm", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Year , COUNT(Year) FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID  ORDER BY Year ASC", "binning": "BIN Year BY YEAR"}, "VQL": "Visualize LINE SELECT Year , COUNT(Year) FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID  ORDER BY Year ASC BIN Year BY YEAR"}, "hardness": "Hard"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, give me the comparison about the sum of salary over the  hire_date bin hire_date by weekday by a bar chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "List the names of all genres in alphabetical oder, together with its ratings. Plot them as bar chart.", "db_id": "music_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT g_name , rating FROM genre ORDER BY g_name", "binning": ""}, "VQL": "Visualize BAR SELECT g_name , rating FROM genre ORDER BY g_name"}, "hardness": "Easy"}, {"nl_queries": "Give me the comparison about  author_tutor_ATB over the  login_name  by a bar chart.", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT login_name , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name", "binning": ""}, "VQL": "Visualize BAR SELECT login_name , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name"}, "hardness": "Easy"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, visualize a bar chart about the distribution of phone_number and department_id , and could you list from low to high by the bars?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT PHONE_NUMBER , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY PHONE_NUMBER ASC", "binning": ""}, "VQL": "Visualize BAR SELECT PHONE_NUMBER , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY PHONE_NUMBER ASC"}, "hardness": "Medium"}, {"nl_queries": "Show me a line chart of how sum budget in billions change over the creation, could you show from low to high by the x-axis?", "db_id": "department_management", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Creation , SUM(Budget_in_Billions) FROM department  ORDER BY Creation ASC", "binning": "BIN Creation BY YEAR"}, "VQL": "Visualize LINE SELECT Creation , SUM(Budget_in_Billions) FROM department  ORDER BY Creation ASC BIN Creation BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "Show names and seatings for all tracks opened after 2000 by a pie chart.", "db_id": "race_track", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Name , Seating FROM track WHERE year_opened > 2000", "binning": ""}, "VQL": "Visualize PIE SELECT Name , Seating FROM track WHERE year_opened > 2000"}, "hardness": "Easy"}, {"nl_queries": "Find the the date of enrollment of the \"Spanish\" course, and count them by a bar chart", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\"", "binning": "BIN date_of_enrolment BY MONTH"}, "VQL": "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\" BIN date_of_enrolment BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, show me about the distribution of  founder and the sum of revenue , and group by attribute founder in a bar chart.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Founder , SUM(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder", "binning": ""}, "VQL": "Visualize BAR SELECT Founder , SUM(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder"}, "hardness": "Medium"}, {"nl_queries": "How many credits does the department offer Show bar chart, I want to sort y-axis in desc order.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT DEPT_CODE , sum(crs_credit) FROM course GROUP BY dept_code ORDER BY sum(crs_credit) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT DEPT_CODE , sum(crs_credit) FROM course GROUP BY dept_code ORDER BY sum(crs_credit) DESC"}, "hardness": "Medium"}, {"nl_queries": "Show the number of products with price higher than 1000 or lower than 500 for each product type code in a bar chart.", "db_id": "customers_and_products_contacts", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT product_type_code , COUNT(product_type_code) FROM products WHERE product_price > 1000 OR product_price < 500 GROUP BY product_type_code", "binning": ""}, "VQL": "Visualize BAR SELECT product_type_code , COUNT(product_type_code) FROM products WHERE product_price > 1000 OR product_price < 500 GROUP BY product_type_code"}, "hardness": "Hard"}, {"nl_queries": "A pie chart about what are the names and areas of countries with the top 5 largest area?", "db_id": "world_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5", "binning": ""}, "VQL": "Visualize PIE SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5"}, "hardness": "Medium"}, {"nl_queries": "A bar chart shows the distribution of Team_Name and School_ID , order by the School_ID in asc.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID ASC"}, "hardness": "Easy"}, {"nl_queries": "Show the relationship between the rank and market values of the companies in the banking industry with a scatter chart.", "db_id": "gas_company", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Rank , Market_Value FROM company WHERE main_industry = 'Banking'", "binning": ""}, "VQL": "Visualize SCATTER SELECT Rank , Market_Value FROM company WHERE main_industry = 'Banking'"}, "hardness": "Easy"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, draw a bar chart about the distribution of  email and  department_id .", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT EMAIL , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)", "binning": ""}, "VQL": "Visualize BAR SELECT EMAIL , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)"}, "hardness": "Extra Hard"}, {"nl_queries": "Scatter plot to show max(product price) on x axis and minimal product price on y axis.", "db_id": "department_store", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT max(product_price) , min(product_price) FROM products", "binning": ""}, "VQL": "Visualize SCATTER SELECT max(product_price) , min(product_price) FROM products"}, "hardness": "Easy"}, {"nl_queries": "For those records from the products and each product's manufacturer, visualize a bar chart about the distribution of  name and  price , and group by attribute name.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name"}, "hardness": "Medium"}, {"nl_queries": "How many professionals did not operate any treatment on dogs for each role? Draw a pie chart.", "db_id": "dog_kennels", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT T1.role_code , COUNT(T1.role_code) FROM Professionals EXCEPT SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.role_code", "binning": ""}, "VQL": "Visualize PIE SELECT T1.role_code , COUNT(T1.role_code) FROM Professionals EXCEPT SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.role_code"}, "hardness": "Extra Hard"}, {"nl_queries": "Group and count the durations for each actor with a bar graph, and I want to rank Y-axis in desc order.", "db_id": "musical", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Duration , COUNT(Duration) FROM actor GROUP BY Duration ORDER BY COUNT(Duration) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Duration , COUNT(Duration) FROM actor GROUP BY Duration ORDER BY COUNT(Duration) DESC"}, "hardness": "Medium"}, {"nl_queries": "Show the average of id from each nationality, display mean id in desc order.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nationality , AVG(ID) FROM swimmer GROUP BY Nationality ORDER BY AVG(ID) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Nationality , AVG(ID) FROM swimmer GROUP BY Nationality ORDER BY AVG(ID) DESC"}, "hardness": "Medium"}, {"nl_queries": "Give me the comparison about the sum of School_ID over the All_Home , and group by attribute All_Home, and display by the x-axis from low to high.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC"}, "hardness": "Medium"}, {"nl_queries": "What are total transaction amounts for each transaction type, could you show by the Y-axis from low to high?", "db_id": "customers_and_invoices", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT transaction_type , sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT transaction_type , sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) ASC"}, "hardness": "Medium"}, {"nl_queries": "Find Sex and the sum of Weight , and group by attribute Sex, and visualize them by a bar chart, could you show Sex in desc order?", "db_id": "candidate_poll", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Sex , SUM(Weight) FROM people GROUP BY Sex ORDER BY Sex DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Sex , SUM(Weight) FROM people GROUP BY Sex ORDER BY Sex DESC"}, "hardness": "Medium"}, {"nl_queries": "Show the trend about the average of the number of attendance at home games change over the years, bin year into year interval, sort x axis from high to low order.", "db_id": "baseball_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT year , avg(attendance) FROM home_game ORDER BY year DESC", "binning": "BIN year BY YEAR"}, "VQL": "Visualize LINE SELECT year , avg(attendance) FROM home_game ORDER BY year DESC BIN year BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "Please give me a bar chart showing institution types, along with the number of institutions for each type, and could you rank x-axis in asc order?", "db_id": "protein_institute", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Type , count(*) FROM institution GROUP BY TYPE ORDER BY Type ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Type , count(*) FROM institution GROUP BY TYPE ORDER BY Type ASC"}, "hardness": "Medium"}, {"nl_queries": "Visualize a bar chart for what are the different classes of races, and how many races correspond to each?", "db_id": "race_track", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Class , count(*) FROM race GROUP BY CLASS", "binning": ""}, "VQL": "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS"}, "hardness": "Easy"}, {"nl_queries": "Give me the comparison about the sum of ID over the meter_200 , and group by attribute meter_200 by a bar chart, order Y in descending order please.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_200 , SUM(ID) FROM swimmer GROUP BY meter_200 ORDER BY SUM(ID) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_200 , SUM(ID) FROM swimmer GROUP BY meter_200 ORDER BY SUM(ID) DESC"}, "hardness": "Medium"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, draw a bar chart about the distribution of job_id and the average of department_id , and group by attribute job_id, and order total number in desc order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(DEPARTMENT_ID) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(DEPARTMENT_ID) DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "Show total number of shop id from each start from, and I want to show by the y axis from high to low.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Start_from , SUM(Shop_ID) FROM hiring  ORDER BY SUM(Shop_ID) DESC", "binning": "BIN Start_from BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Start_from , SUM(Shop_ID) FROM hiring  ORDER BY SUM(Shop_ID) DESC BIN Start_from BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "Give me the dates when the max temperature was higher than 85, and count them by a line chart", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date , COUNT(date) FROM weather WHERE max_temperature_f > 85 GROUP BY date", "binning": ""}, "VQL": "Visualize LINE SELECT date , COUNT(date) FROM weather WHERE max_temperature_f > 85 GROUP BY date"}, "hardness": "Medium"}, {"nl_queries": "Show the number of addrens history for each customer in a bar chart, list by the total number from low to high.", "db_id": "customers_and_products_contacts", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.customer_name , COUNT(T2.customer_name) FROM customer_address_history AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id JOIN addresses AS T3 ON T1.address_id = T3.address_id GROUP BY T2.customer_name ORDER BY COUNT(T2.customer_name) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.customer_name , COUNT(T2.customer_name) FROM customer_address_history AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id JOIN addresses AS T3 ON T1.address_id = T3.address_id GROUP BY T2.customer_name ORDER BY COUNT(T2.customer_name) ASC"}, "hardness": "Hard"}, {"nl_queries": "Give me the names and prices of furnitures which some companies are manufacturing with a bar chart, and rank in descending by the Price_in_Dollar.", "db_id": "manufacturer", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , Price_in_Dollar FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID = t2.Furniture_ID ORDER BY Price_in_Dollar DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , Price_in_Dollar FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID = t2.Furniture_ID ORDER BY Price_in_Dollar DESC"}, "hardness": "Medium"}, {"nl_queries": "Show the capacity for each cinema in a bar chart, and sort from high to low by the y axis.", "db_id": "cinema", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , Capacity FROM cinema ORDER BY Capacity DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , Capacity FROM cinema ORDER BY Capacity DESC"}, "hardness": "Easy"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, show me about the distribution of hire_date and the sum of department_id bin hire_date by weekday in a bar chart, display by the y axis from low to high.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(DEPARTMENT_ID) ASC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "Find the the customer details and id for the customers who had more than one policy, and order in descending by the X.", "db_id": "insurance_policies", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Customer_Details , T1.Customer_ID FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.Customer_id ORDER BY T1.Customer_Details DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Customer_Details , T1.Customer_ID FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.Customer_id ORDER BY T1.Customer_Details DESC"}, "hardness": "Medium"}, {"nl_queries": "Show me a bar chart for what are the names and ids of all makers with more than 3 models?", "db_id": "car_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT FullName , Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker", "binning": ""}, "VQL": "Visualize BAR SELECT FullName , Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker"}, "hardness": "Easy"}, {"nl_queries": "For all players, show the number of different club names they come from, and rank by the bar in desc.", "db_id": "sports_competition", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.name , COUNT(T1.name) FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID GROUP BY T1.name ORDER BY T1.name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.name , COUNT(T1.name) FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID GROUP BY T1.name ORDER BY T1.name DESC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, draw a scatter chart about the correlation between  employee_id and  department_id .", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT EMPLOYEE_ID , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)", "binning": ""}, "VQL": "Visualize SCATTER SELECT EMPLOYEE_ID , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)"}, "hardness": "Extra Hard"}, {"nl_queries": "Show the different countries and the number of members from each with a bar chart, and could you order in asc by the Y-axis?", "db_id": "decoration_competition", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Country , COUNT(*) FROM member GROUP BY Country ORDER BY COUNT(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Country , COUNT(*) FROM member GROUP BY Country ORDER BY COUNT(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "Find the number of the parties associated with the delegates from district 1 Who served as governors of the parties?, order by the y-axis in asc.", "db_id": "election", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Governor , COUNT(Governor) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.District = 1 GROUP BY Governor ORDER BY COUNT(Governor) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Governor , COUNT(Governor) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.District = 1 GROUP BY Governor ORDER BY COUNT(Governor) ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "Return a bar chart about the distribution of All_Road and All_Games_Percent , sort in desc by the All_Road.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Road , All_Games_Percent FROM basketball_match ORDER BY All_Road DESC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Road , All_Games_Percent FROM basketball_match ORDER BY All_Road DESC"}, "hardness": "Easy"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, give me the comparison about salary over the first_name , and list in ascending by the total number.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT FIRST_NAME , SALARY FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY SALARY ASC", "binning": ""}, "VQL": "Visualize BAR SELECT FIRST_NAME , SALARY FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY SALARY ASC"}, "hardness": "Medium"}, {"nl_queries": "Plot the total number by grouped by industry as a bar graph, and list by the the total number from high to low.", "db_id": "company_office", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about the average of price over the name , and group by attribute name by a bar chart, and could you show by the X-axis in desc?", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC"}, "hardness": "Hard"}, {"nl_queries": "A pie chart for showing the number of the musical nominee with award \"Bob Fosse\" or \"Cleavant Derricks\".", "db_id": "musical", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee", "binning": ""}, "VQL": "Visualize PIE SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee"}, "hardness": "Hard"}, {"nl_queries": "For those employees who did not have any job in the past, show me the trend about commission_pct over hire_date with a line chart, I want to rank HIRE_DATE in descending order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE DESC", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE DESC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who did not have any job in the past, a bar chart shows the distribution of job_id and the sum of manager_id , and group by attribute job_id, display x axis in desc order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY JOB_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY JOB_ID DESC"}, "hardness": "Hard"}, {"nl_queries": "What are the names and the average grades for each high schooler Plot them as a bar chart, I want to show from high to low by the X please.", "db_id": "network_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC"}, "hardness": "Medium"}, {"nl_queries": "What are the different ids and names of the stations that have had more than 12 bikes available Plot them as bar chart, I want to rank from low to high by the y-axis.", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , id FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available > 12 ORDER BY id ASC", "binning": ""}, "VQL": "Visualize BAR SELECT name , id FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available > 12 ORDER BY id ASC"}, "hardness": "Hard"}, {"nl_queries": "Give me a pie to show how many event details from different event details.", "db_id": "local_govt_in_alabama", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Event_Details , COUNT(Event_Details) FROM EVENTS GROUP BY Event_Details", "binning": ""}, "VQL": "Visualize PIE SELECT Event_Details , COUNT(Event_Details) FROM EVENTS GROUP BY Event_Details"}, "hardness": "Easy"}, {"nl_queries": "A bar chart about what are the different template type codes, and how many documents use each type?", "db_id": "cre_Doc_Template_Mgt", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code", "binning": ""}, "VQL": "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code"}, "hardness": "Medium"}, {"nl_queries": "List the number of games in each season and group by away team in a group line chart, and sort in descending by the Season.", "db_id": "game_injury", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ,  Season ORDER BY Season DESC", "binning": ""}, "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ,  Season ORDER BY Season DESC"}, "hardness": "Hard"}, {"nl_queries": "List the number of dogs each owner has in a bar chart that groups by owner's first name, and could you sort y-axis from high to low order?", "db_id": "dog_kennels", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT first_name , COUNT(first_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY first_name ORDER BY COUNT(first_name) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT first_name , COUNT(first_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY first_name ORDER BY COUNT(first_name) DESC"}, "hardness": "Hard"}, {"nl_queries": "Draw a bar chart about the distribution of  family_name and  author_id .", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT family_name , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name", "binning": ""}, "VQL": "Visualize BAR SELECT family_name , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name"}, "hardness": "Easy"}, {"nl_queries": "For those products with a price between 60 and 120, show me about the correlation between  code and  manufacturer , and group by attribute name in a scatter chart.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Code , Manufacturer FROM products WHERE price BETWEEN 60 AND 120 GROUP BY Name", "binning": ""}, "VQL": "Visualize SCATTER SELECT Code , Manufacturer FROM products WHERE price BETWEEN 60 AND 120 GROUP BY Name"}, "hardness": "Medium"}, {"nl_queries": "Show the country names and the corresponding number of players in a bar chart, sort total number in asc order.", "db_id": "match_season", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Country_name , COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country GROUP BY T1.Country_name ORDER BY COUNT(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Country_name , COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country GROUP BY T1.Country_name ORDER BY COUNT(*) ASC"}, "hardness": "Hard"}, {"nl_queries": "Show all product names and the total quantity ordered for each product name. ", "db_id": "customers_and_invoices", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT product_name , sum(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name", "binning": ""}, "VQL": "Visualize BAR SELECT product_name , sum(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name"}, "hardness": "Medium"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, a bar chart shows the distribution of job_id and the sum of department_id , and group by attribute job_id, I want to display in desc by the sum department id.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "List the number of games in each season with a line chart.", "db_id": "game_injury", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Season , COUNT(Season) FROM game GROUP BY Season", "binning": ""}, "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Season"}, "hardness": "Easy"}, {"nl_queries": "How many documents in different starting date? Return a line chart binning starting date by year interval.", "db_id": "cre_Doc_Tracking_DB", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations", "binning": "BIN Date_in_Location_From BY YEAR"}, "VQL": "Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations BIN Date_in_Location_From BY YEAR"}, "hardness": "Easy"}, {"nl_queries": "For those employees who did not have any job in the past, show me about the distribution of hire_date and the sum of manager_id bin hire_date by weekday in a bar chart, and rank by the Y from high to low please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY SUM(MANAGER_ID) DESC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "For those employees who did not have any job in the past, for commission_pct, hire_date, visualize the trend, and sort X in asc order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE ASC", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE ASC"}, "hardness": "Medium"}, {"nl_queries": "For all employees who have the letters D or S in their first name, draw a scatter chart about the correlation between  salary and  commission_pct .", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT SALARY , COMMISSION_PCT FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'", "binning": ""}, "VQL": "Visualize SCATTER SELECT SALARY , COMMISSION_PCT FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, a bar chart shows the distribution of name and code , and group by attribute founder, and show by the bar from high to low.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder , T1.Name ORDER BY T1.Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder , T1.Name ORDER BY T1.Name DESC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, a bar chart shows the distribution of hire_date and the amount of hire_date bin hire_date by time, I want to rank from high to low by the y-axis.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY COUNT(HIRE_DATE) DESC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "Find Nationality and the average of ID , and group by attribute Nationality, and visualize them by a bar chart, and I want to display in ascending by the Y.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nationality , AVG(ID) FROM swimmer GROUP BY Nationality ORDER BY AVG(ID) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Nationality , AVG(ID) FROM swimmer GROUP BY Nationality ORDER BY AVG(ID) ASC"}, "hardness": "Medium"}, {"nl_queries": "Show me about the distribution of ACC_Road and Team_ID , and group by attribute ACC_Home in a bar chart, could you order by the Y in ascending?", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY Team_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY Team_ID ASC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who was hired before 2002-06-21, return a bar chart about the distribution of  hire_date and the average of department_id bin hire_date by time.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21'", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH"}, "hardness": "Medium"}, {"nl_queries": "Give me the comparison about the average of monthly_rental over the  date_address_from bin date_address_from by weekday.", "db_id": "behavior_monitoring", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC", "binning": "BIN date_address_from BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_address_from , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_from BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "For those products with a price between 60 and 120, give me the comparison about price over the name , and I want to display bars in asc order.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , Price FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , Price FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name ASC"}, "hardness": "Medium"}, {"nl_queries": "Return the categories of music festivals that have the result \"Awarded\", and count them by a bar chart, sort by the X in desc please.", "db_id": "music_4", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who was hired before 2002-06-21, find job_id and the average of department_id , and group by attribute job_id, and visualize them by a bar chart, display by the JOB_ID in ascending.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID ASC"}, "hardness": "Hard"}, {"nl_queries": "Give me the comparison about meter_100 over the meter_300 , and display in desc by the Y.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_300 , meter_100 FROM swimmer ORDER BY meter_100 DESC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_300 , meter_100 FROM swimmer ORDER BY meter_100 DESC"}, "hardness": "Easy"}, {"nl_queries": "What is the total number of each ship type? Give me a pie chart.", "db_id": "ship_mission", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Type , COUNT(Type) FROM ship GROUP BY Type", "binning": ""}, "VQL": "Visualize PIE SELECT Type , COUNT(Type) FROM ship GROUP BY Type"}, "hardness": "Easy"}, {"nl_queries": "What are the names and ids of the tourist attractions that are visited at most once Visualize by bar chart, rank by the bar in ascending.", "db_id": "cre_Theme_park", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID ORDER BY T1.Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID ORDER BY T1.Name ASC"}, "hardness": "Medium"}, {"nl_queries": "Show the number of names of phones in a bar chart, and list by the X in descending.", "db_id": "phone_market", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY Name ORDER BY Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY Name ORDER BY Name DESC"}, "hardness": "Hard"}, {"nl_queries": "Plot the number of result by grouped by result as a bar graph, and show by the y axis in ascending please.", "db_id": "music_4", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result ORDER BY COUNT(Result) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result ORDER BY COUNT(Result) ASC"}, "hardness": "Medium"}, {"nl_queries": "Return the number of venues of each workshop in a pie chart.", "db_id": "workshop_paper", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue", "binning": ""}, "VQL": "Visualize PIE SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue"}, "hardness": "Easy"}, {"nl_queries": "Draw a line chart about the change of the amount of Start_from over Start_from bin start_from by time, display x-axis in descending order.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Start_from , COUNT(Start_from) FROM hiring  ORDER BY Start_from DESC", "binning": "BIN Start_from BY YEAR"}, "VQL": "Visualize LINE SELECT Start_from , COUNT(Start_from) FROM hiring  ORDER BY Start_from DESC BIN Start_from BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "List the number of games in each season and group by home team in a group line chart, order by the X-axis from high to low.", "db_id": "game_injury", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ,  Season ORDER BY Season DESC", "binning": ""}, "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ,  Season ORDER BY Season DESC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who did not have any job in the past, draw a bar chart about the distribution of job_id and the average of manager_id , and group by attribute job_id, could you list in desc by the y-axis?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY AVG(MANAGER_ID) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY AVG(MANAGER_ID) DESC"}, "hardness": "Hard"}, {"nl_queries": "Give me the number of professionals who did not perform any treatment on dogs for each role in a bar chart, list from low to high by the y axis.", "db_id": "dog_kennels", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.role_code , COUNT(T1.role_code) FROM Professionals EXCEPT SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.role_code ORDER BY COUNT(T1.role_code) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.role_code , COUNT(T1.role_code) FROM Professionals EXCEPT SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.role_code ORDER BY COUNT(T1.role_code) ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, show me about the distribution of name and code , and group by attribute headquarter in a bar chart, and sort by the Name in asc.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter , T1.Name ORDER BY T1.Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter , T1.Name ORDER BY T1.Name ASC"}, "hardness": "Hard"}, {"nl_queries": "For each product, show its name and the number of times it was ordered. Plot them as bar chart.", "db_id": "tracking_orders", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T3.product_name , AVG(count(*)) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_name", "binning": ""}, "VQL": "Visualize BAR SELECT T3.product_name , AVG(count(*)) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_name"}, "hardness": "Medium"}, {"nl_queries": "What are the total enrollments of universities of each affiliation type Plot them as bar chart, and display in descending by the bar.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY Affiliation DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY Affiliation DESC"}, "hardness": "Medium"}, {"nl_queries": "Show me how many home team by home team in a histogram, and I want to show by the bar in ascending.", "db_id": "game_injury", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Home_team ORDER BY Home_team ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Home_team ORDER BY Home_team ASC"}, "hardness": "Medium"}, {"nl_queries": "List all payment methods and number of payments using each payment methods by a bar chart, rank by the payment_method_code from low to high.", "db_id": "driving_school", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT payment_method_code , count(*) FROM Customer_Payments GROUP BY payment_method_code ORDER BY payment_method_code ASC", "binning": ""}, "VQL": "Visualize BAR SELECT payment_method_code , count(*) FROM Customer_Payments GROUP BY payment_method_code ORDER BY payment_method_code ASC"}, "hardness": "Medium"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, give me the comparison about the sum of manager_id over the  hire_date bin hire_date by time.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "what are 3 most highly rated episodes in the TV series table and what were those ratings?", "db_id": "tvshow", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Episode , Rating FROM TV_series ORDER BY Rating DESC LIMIT 3", "binning": ""}, "VQL": "Visualize PIE SELECT Episode , Rating FROM TV_series ORDER BY Rating DESC LIMIT 3"}, "hardness": "Medium"}, {"nl_queries": "What are the names of catalog entries with level number 8, and count them by a bar chart, and order by the X in descending.", "db_id": "product_catalog", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT catalog_entry_name , COUNT(catalog_entry_name) FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id WHERE t2.catalog_level_number = \"8\" GROUP BY catalog_entry_name ORDER BY catalog_entry_name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT catalog_entry_name , COUNT(catalog_entry_name) FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id WHERE t2.catalog_level_number = \"8\" GROUP BY catalog_entry_name ORDER BY catalog_entry_name DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "Visualize a pie chart with how many events are there for each party?", "db_id": "party_people", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id", "binning": ""}, "VQL": "Visualize PIE SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id"}, "hardness": "Medium"}, {"nl_queries": "For all employees who have the letters D or S in their first name, draw a scatter chart about the correlation between  manager_id and  department_id .", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT MANAGER_ID , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'", "binning": ""}, "VQL": "Visualize SCATTER SELECT MANAGER_ID , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'"}, "hardness": "Hard"}, {"nl_queries": "Count the last year of parties with theme \"Spring\" or \"Teqnology\" with a bar grpah, I want to rank in descending by the Y.", "db_id": "party_host", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY Last_year ORDER BY COUNT(Last_year) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY Last_year ORDER BY COUNT(Last_year) DESC"}, "hardness": "Hard"}, {"nl_queries": "Find the number of students whose age is older than the average age for each gender, order x-axis from low to high order.", "db_id": "dorm_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Sex , count(*) FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY Sex ORDER BY Sex ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Sex , count(*) FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY Sex ORDER BY Sex ASC"}, "hardness": "Medium"}, {"nl_queries": "A bar chart showing the number of flights with price higher than 300 for each destination city, and list in descending by the Y.", "db_id": "flight_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT destination , COUNT(destination) FROM Flight WHERE price > 300 GROUP BY destination ORDER BY COUNT(destination) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT destination , COUNT(destination) FROM Flight WHERE price > 300 GROUP BY destination ORDER BY COUNT(destination) DESC"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about the sum of revenue over the name , and group by attribute name by a bar chart, sort y axis in ascending order.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Revenue ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Revenue ASC"}, "hardness": "Hard"}, {"nl_queries": "Show names of teachers and the number of courses they teach. Visualize by bar chart.", "db_id": "course_teach", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name"}, "hardness": "Medium"}, {"nl_queries": "What are the number of the dates with a maximum temperature higher than 85?, and order by the X from low to high.", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date , COUNT(date) FROM weather WHERE max_temperature_f > 85 GROUP BY date ORDER BY date ASC", "binning": ""}, "VQL": "Visualize LINE SELECT date , COUNT(date) FROM weather WHERE max_temperature_f > 85 GROUP BY date ORDER BY date ASC"}, "hardness": "Hard"}, {"nl_queries": "Show me about the distribution of All_Home and the amount of All_Home , and group by attribute All_Home in a bar chart, and show in asc by the x-axis please.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC"}, "hardness": "Medium"}, {"nl_queries": "Show me a bar chart for what are the ids and trade names of the medicine that can interact with at least 3 enzymes?, and I want to order from low to high by the x axis.", "db_id": "medicine_enzyme_interaction", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Trade_Name , id FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id ORDER BY Trade_Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Trade_Name , id FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id ORDER BY Trade_Name ASC"}, "hardness": "Medium"}, {"nl_queries": "Visualize a bar chart for how many students are older than average for each gender?, sort by the Sex in descending.", "db_id": "dorm_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Sex , count(*) FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY Sex ORDER BY Sex DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Sex , count(*) FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY Sex ORDER BY Sex DESC"}, "hardness": "Medium"}, {"nl_queries": "Show the minimum of the rooms in different decor using a bar chart.", "db_id": "inn_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT decor , min(basePrice) FROM Rooms GROUP BY decor", "binning": ""}, "VQL": "Visualize BAR SELECT decor , min(basePrice) FROM Rooms GROUP BY decor"}, "hardness": "Easy"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, a line chart shows the trend of salary over hire_date , I want to order by the X in ascending.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , SALARY FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC"}, "hardness": "Medium"}, {"nl_queries": "Give me the comparison about the average of monthly_rental over the  date_address_to bin date_address_to by time by a bar chart.", "db_id": "behavior_monitoring", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC", "binning": "BIN date_address_to BY MONTH"}, "VQL": "Visualize BAR SELECT date_address_to , AVG(monthly_rental) FROM Student_Addresses  ORDER BY monthly_rental DESC BIN date_address_to BY MONTH"}, "hardness": "Medium"}, {"nl_queries": "What are the completion dates of all the tests that have result \"Fail\", and count them by a bar chart, list from high to low by the Y-axis.", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_of_completion , COUNT(date_of_completion) FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = \"Fail\" GROUP BY date_of_completion ORDER BY COUNT(date_of_completion) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT date_of_completion , COUNT(date_of_completion) FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = \"Fail\" GROUP BY date_of_completion ORDER BY COUNT(date_of_completion) DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "What are the number of the dates of the assessment notes?, list y-axis in asc order.", "db_id": "behavior_monitoring", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY COUNT(date_of_notes) ASC", "binning": "BIN date_of_notes BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY COUNT(date_of_notes) ASC BIN date_of_notes BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "Draw a bar chart about the distribution of Nationality and the sum of meter_100 , and group by attribute Nationality, and I want to display by the total number in ascending.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC"}, "hardness": "Medium"}, {"nl_queries": "A bar chart for finding the number of the names of catalog entries with level number 8, and order names in ascending order.", "db_id": "product_catalog", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT catalog_entry_name , COUNT(catalog_entry_name) FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id WHERE t2.catalog_level_number = \"8\" GROUP BY catalog_entry_name ORDER BY catalog_entry_name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT catalog_entry_name , COUNT(catalog_entry_name) FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id WHERE t2.catalog_level_number = \"8\" GROUP BY catalog_entry_name ORDER BY catalog_entry_name ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "For each policy type, return its type code and its count in the record Visualize by bar chart, could you rank bar in ascending order?", "db_id": "insurance_and_eClaims", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Policy_Type_Code , count(*) FROM policies GROUP BY policy_type_code ORDER BY Policy_Type_Code ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Policy_Type_Code , count(*) FROM policies GROUP BY policy_type_code ORDER BY Policy_Type_Code ASC"}, "hardness": "Medium"}, {"nl_queries": "A bar chart about the number of faluts for different fault description recorded in the logs, and could you list from high to low by the y-axis?", "db_id": "assets_maintenance", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT fault_description , COUNT(fault_description) FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id GROUP BY fault_description ORDER BY COUNT(fault_description) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT fault_description , COUNT(fault_description) FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id GROUP BY fault_description ORDER BY COUNT(fault_description) DESC"}, "hardness": "Hard"}, {"nl_queries": "Return a bar chart on what are different nationalities of people and the corresponding number of people from each nation?, and I want to rank in asc by the X-axis please.", "db_id": "poker_player", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY Nationality ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY Nationality ASC"}, "hardness": "Medium"}, {"nl_queries": "Draw a bar chart for how many sections does each course have?", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code", "binning": ""}, "VQL": "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code"}, "hardness": "Easy"}, {"nl_queries": "Visualize a pie chart about the proportion of  Sex and the amount of Sex.", "db_id": "candidate_poll", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex", "binning": ""}, "VQL": "Visualize PIE SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex"}, "hardness": "Easy"}, {"nl_queries": "Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes', could you display Name from high to low order?", "db_id": "department_management", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , SUM(Num_Employees) FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id WHERE T2.temporary_acting = 'Yes' GROUP BY Name ORDER BY Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , SUM(Num_Employees) FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id WHERE T2.temporary_acting = 'Yes' GROUP BY Name ORDER BY Name DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "Show me about the distribution of  middle_name and  author_tutor_ATB  in a bar chart.", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT middle_name , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name", "binning": ""}, "VQL": "Visualize BAR SELECT middle_name , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name"}, "hardness": "Easy"}, {"nl_queries": "Find the last name and age of the student who has allergy to both milk and cat Show a bar chart, sort from low to high by the LName.", "db_id": "allergy_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT LName , Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy = \"Cat\") ORDER BY LName ASC", "binning": ""}, "VQL": "Visualize BAR SELECT LName , Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy = \"Cat\") ORDER BY LName ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "Compare the average age of drivers from the same home city with a bar chart, sort in descending by the X.", "db_id": "school_bus", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Home_city , AVG(Age) FROM driver GROUP BY Home_city ORDER BY Home_city DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Home_city , AVG(Age) FROM driver GROUP BY Home_city ORDER BY Home_city DESC"}, "hardness": "Medium"}, {"nl_queries": "What are the maximum score of wines in each year?, and list by the Year in descending please.", "db_id": "wine_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Year , max(Score) FROM WINE GROUP BY Year ORDER BY Year DESC", "binning": ""}, "VQL": "Visualize LINE SELECT Year , max(Score) FROM WINE GROUP BY Year ORDER BY Year DESC"}, "hardness": "Easy"}, {"nl_queries": "Find the number of students in one classroom. Plot them as scatter chart.", "db_id": "student_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT count(*) , Classroom FROM list GROUP BY classroom", "binning": ""}, "VQL": "Visualize SCATTER SELECT count(*) , Classroom FROM list GROUP BY classroom"}, "hardness": "Easy"}, {"nl_queries": "A bar chart listing the number of faults for different description of skills required to fix them.", "db_id": "assets_maintenance", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT skill_description , COUNT(skill_description) FROM Part_Faults AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.part_fault_id = T2.part_fault_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY skill_description", "binning": ""}, "VQL": "Visualize BAR SELECT skill_description , COUNT(skill_description) FROM Part_Faults AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.part_fault_id = T2.part_fault_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY skill_description"}, "hardness": "Medium"}, {"nl_queries": "Draw a bar chart of dept code versus the total number, display by the bars in ascending.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY DEPT_CODE ASC", "binning": ""}, "VQL": "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY DEPT_CODE ASC"}, "hardness": "Medium"}, {"nl_queries": "Show sum transaction amount from each transaction type, could you order total number of transaction amount in desc order?", "db_id": "customers_and_invoices", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT transaction_type , sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT transaction_type , sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) DESC"}, "hardness": "Medium"}, {"nl_queries": "Visualize the general trend of the average of shop id over the start from, could you sort in ascending by the X?", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Start_from , AVG(Shop_ID) FROM hiring  ORDER BY Start_from ASC", "binning": "BIN Start_from BY YEAR"}, "VQL": "Visualize LINE SELECT Start_from , AVG(Shop_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "Return a line on what are all the calendar dates and day Numbers?, and rank in descending by the X-axis.", "db_id": "cre_Doc_Tracking_DB", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Calendar_Date , Day_Number FROM Ref_calendar ORDER BY Calendar_Date DESC", "binning": ""}, "VQL": "Visualize LINE SELECT Calendar_Date , Day_Number FROM Ref_calendar ORDER BY Calendar_Date DESC"}, "hardness": "Easy"}, {"nl_queries": "For those employees who was hired before 2002-06-21, find  job_id and the sum of employee_id , and group by attribute job_id, and visualize them by a bar chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID"}, "hardness": "Medium"}, {"nl_queries": "List the number of items by the details of the organization that owns it using a bar chart, and could you order X-axis in descending order?", "db_id": "local_govt_and_lot", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT organization_details , COUNT(organization_details) FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id = T2.organization_id GROUP BY organization_details ORDER BY organization_details DESC", "binning": ""}, "VQL": "Visualize BAR SELECT organization_details , COUNT(organization_details) FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id = T2.organization_id GROUP BY organization_details ORDER BY organization_details DESC"}, "hardness": "Hard"}, {"nl_queries": "Which tests have \"Pass\" results? Return the dates when the tests were taken, and count them by a bar chart, order by the Y in asc.", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY COUNT(date_test_taken) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY COUNT(date_test_taken) ASC"}, "hardness": "Hard"}, {"nl_queries": "What are the number of the first names of all students in Smith Hall?, list by the bar in ascending please.", "db_id": "dorm_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Fname , COUNT(Fname) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.dorm_name = 'Smith Hall' GROUP BY Fname ORDER BY Fname ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Fname , COUNT(Fname) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.dorm_name = 'Smith Hall' GROUP BY Fname ORDER BY Fname ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "Group and count the city attribute of the location table to visualize a bar chart, display from low to high by the y axis please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY COUNT(CITY) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY COUNT(CITY) ASC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about the sum of code over the name , and group by attribute name, list total number of code in ascending order.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code ASC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who was hired before 2002-06-21, draw a bar chart about the distribution of job_id and the sum of salary , and group by attribute job_id, display X from low to high order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID ASC"}, "hardness": "Hard"}, {"nl_queries": "For each director, return the highest rating among all of movies and the value of that rating by a scatter chart. Ignore movies whose director is NULL.", "db_id": "movie_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT stars , max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" GROUP BY stars", "binning": ""}, "VQL": "Visualize SCATTER SELECT stars , max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" GROUP BY stars"}, "hardness": "Medium"}, {"nl_queries": "Draw a bar chart about the distribution of meter_200 and the sum of ID , and group by attribute meter_200, and display in asc by the Y-axis.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_200 , SUM(ID) FROM swimmer GROUP BY meter_200 ORDER BY SUM(ID) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_200 , SUM(ID) FROM swimmer GROUP BY meter_200 ORDER BY SUM(ID) ASC"}, "hardness": "Medium"}, {"nl_queries": "Give me a pie chart to show the proportion of each event details.", "db_id": "local_govt_in_alabama", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Event_Details , COUNT(Event_Details) FROM EVENTS GROUP BY Event_Details", "binning": ""}, "VQL": "Visualize PIE SELECT Event_Details , COUNT(Event_Details) FROM EVENTS GROUP BY Event_Details"}, "hardness": "Easy"}, {"nl_queries": "Bar chart x axis sportname y axis the total number, order by the y axis in ascending.", "db_id": "game_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT SportName , count(*) FROM Sportsinfo GROUP BY sportname ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT SportName , count(*) FROM Sportsinfo GROUP BY sportname ORDER BY count(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "Use a bar chart to show the number of start dates of all the apartment bookings made by guests with gender code \"Female\" for each weekday, display Y from low to high order.", "db_id": "apartment_rentals", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id WHERE T2.gender_code = \"Female\"  ORDER BY COUNT(booking_start_date) ASC", "binning": "BIN booking_start_date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id WHERE T2.gender_code = \"Female\"  ORDER BY COUNT(booking_start_date) ASC BIN booking_start_date BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "Show all the buildings along with the number of faculty members the buildings have with a bar chart, could you rank by the bar from low to high?", "db_id": "activity_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Building , count(*) FROM Faculty GROUP BY building ORDER BY Building ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Building , count(*) FROM Faculty GROUP BY building ORDER BY Building ASC"}, "hardness": "Medium"}, {"nl_queries": "Show the number of dogs that received a treatment departed in each day in a bar chart, order in asc by the how many date departed.", "db_id": "dog_kennels", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_departed , COUNT(date_departed) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id GROUP BY date_departed ORDER BY COUNT(date_departed) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id GROUP BY date_departed ORDER BY COUNT(date_departed) ASC"}, "hardness": "Hard"}, {"nl_queries": "Plot the binning year and count their total number as a trend line, list x axis in ascending order.", "db_id": "college_2", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT year , count(*) FROM SECTION ORDER BY year ASC", "binning": "BIN year BY YEAR"}, "VQL": "Visualize LINE SELECT year , count(*) FROM SECTION ORDER BY year ASC BIN year BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, a bar chart shows the distribution of name and the average of code , and group by attribute name, and show Y from low to high order.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code ASC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, give me the comparison about salary over the email , list by the names in asc.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT EMAIL , SALARY FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY EMAIL ASC", "binning": ""}, "VQL": "Visualize BAR SELECT EMAIL , SALARY FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY EMAIL ASC"}, "hardness": "Medium"}, {"nl_queries": "what are the draft pick numbers and draft classes for players who play the Defender position?, and list by the Draft_Class from high to low.", "db_id": "match_season", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Draft_Class , Draft_Pick_Number FROM match_season WHERE POSITION = \"Defender\" ORDER BY Draft_Class DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Draft_Class , Draft_Pick_Number FROM match_season WHERE POSITION = \"Defender\" ORDER BY Draft_Class DESC"}, "hardness": "Medium"}, {"nl_queries": "List the name of all products along with the number of complaints that they have received with a bar chart.", "db_id": "customer_complaints", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT product_name , count(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id = t2.product_id GROUP BY t1.product_name", "binning": ""}, "VQL": "Visualize BAR SELECT product_name , count(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id = t2.product_id GROUP BY t1.product_name"}, "hardness": "Medium"}, {"nl_queries": "Display a bar chart for how many rooms in each building have a capacity of over 50?", "db_id": "college_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT building , count(*) FROM classroom WHERE capacity > 50 GROUP BY building", "binning": ""}, "VQL": "Visualize BAR SELECT building , count(*) FROM classroom WHERE capacity > 50 GROUP BY building"}, "hardness": "Medium"}, {"nl_queries": "For those employees who was hired before 2002-06-21, draw a scatter chart about the correlation between  salary and  commission_pct .", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT SALARY , COMMISSION_PCT FROM employees WHERE hire_date < '2002-06-21'", "binning": ""}, "VQL": "Visualize SCATTER SELECT SALARY , COMMISSION_PCT FROM employees WHERE hire_date < '2002-06-21'"}, "hardness": "Easy"}, {"nl_queries": "What are the number of the names of all the playlists?, I want to rank x-axis in asc order.", "db_id": "store_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY name ASC"}, "hardness": "Medium"}, {"nl_queries": "Return a bar chart about the number of companies for each industry, order bar in asc order.", "db_id": "company_employee", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Industry , COUNT(Industry) FROM company GROUP BY Industry ORDER BY Industry ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Industry , COUNT(Industry) FROM company GROUP BY Industry ORDER BY Industry ASC"}, "hardness": "Medium"}, {"nl_queries": "Return a pie on what are the names and areas of countries with the top 5 largest area?", "db_id": "world_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5", "binning": ""}, "VQL": "Visualize PIE SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5"}, "hardness": "Medium"}, {"nl_queries": "Give me a histogram for how many registed students do each course have? List course name and the number of their registered students?, I want to show from low to high by the y-axis.", "db_id": "student_assessment", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT course_name , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT course_name , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id ORDER BY count(*) ASC"}, "hardness": "Hard"}, {"nl_queries": "Draw a bar chart about the distribution of meter_600 and meter_100 , and could you display x axis in descending order?", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_600 , meter_100 FROM swimmer ORDER BY meter_600 DESC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_600 , meter_100 FROM swimmer ORDER BY meter_600 DESC"}, "hardness": "Easy"}, {"nl_queries": "Visualize a bar chart for what are the countries having at least one car maker? List name and id, I want to display from low to high by the y-axis.", "db_id": "car_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT CountryName , CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country ORDER BY CountryId ASC", "binning": ""}, "VQL": "Visualize BAR SELECT CountryName , CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country ORDER BY CountryId ASC"}, "hardness": "Medium"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, give me the comparison about the average of manager_id over the job_id , and group by attribute job_id, rank names in desc order please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, give me the comparison about the amount of job_id over the job_id , and group by attribute job_id by a bar chart, and I want to rank in desc by the names.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , COUNT(JOB_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "Bin the claim date into the Year interval and count them for visualizing a bar chart.", "db_id": "insurance_policies", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements", "binning": "BIN Date_Claim_Made BY YEAR"}, "VQL": "Visualize BAR SELECT Date_Claim_Made , COUNT(Date_Claim_Made) FROM Settlements BIN Date_Claim_Made BY YEAR"}, "hardness": "Easy"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, return a bar chart about the distribution of hire_date and the sum of manager_id bin hire_date by time, show by the Y-axis from low to high.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(MANAGER_ID) ASC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, show me about the distribution of job_id and the average of salary , and group by attribute job_id in a bar chart, display in ascending by the Y.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(SALARY) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(SALARY) ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees who was hired before 2002-06-21, a bar chart shows the distribution of hire_date and the sum of salary bin hire_date by weekday, could you order from low to high by the y axis?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(SALARY) ASC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "Bar chart x axis date of transaction y axis mean share count, and could you list by the Y in asc?", "db_id": "tracking_share_transactions", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_of_transaction , AVG(share_count) FROM TRANSACTIONS  ORDER BY AVG(share_count) ASC", "binning": "BIN date_of_transaction BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_of_transaction , AVG(share_count) FROM TRANSACTIONS  ORDER BY AVG(share_count) ASC BIN date_of_transaction BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "Visualize a bar chart for showing the total number of different product type codes, and could you order in descending by the names?", "db_id": "solvency_ii", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Product_Type_Code , COUNT(Product_Type_Code) FROM Products GROUP BY Product_Type_Code ORDER BY Product_Type_Code DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Product_Type_Code , COUNT(Product_Type_Code) FROM Products GROUP BY Product_Type_Code ORDER BY Product_Type_Code DESC"}, "hardness": "Medium"}, {"nl_queries": "What is the age of every singer? Return a bar chart in descending order of age?", "db_id": "concert_singer", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , Age FROM singer ORDER BY age DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , Age FROM singer ORDER BY age DESC"}, "hardness": "Easy"}, {"nl_queries": "List the state names and the number of customers living in each state with a bar chart.", "db_id": "customer_deliveries", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT state_province_county , count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id = t2.address_id GROUP BY t2.state_province_county", "binning": ""}, "VQL": "Visualize BAR SELECT state_province_county , count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id = t2.address_id GROUP BY t2.state_province_county"}, "hardness": "Medium"}, {"nl_queries": "For those employees who did not have any job in the past, return a bar chart about the distribution of hire_date and the sum of department_id bin hire_date by weekday, and list y axis in desc order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY SUM(DEPARTMENT_ID) DESC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY SUM(DEPARTMENT_ID) DESC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "How many flights in each destination city? Return a bar chart, and list in descending by the y axis please.", "db_id": "flight_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT destination , COUNT(destination) FROM Flight GROUP BY destination ORDER BY COUNT(destination) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT destination , COUNT(destination) FROM Flight GROUP BY destination ORDER BY COUNT(destination) DESC"}, "hardness": "Medium"}, {"nl_queries": "List the number of enginners and group by first name in a bar chart.", "db_id": "assets_maintenance", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT first_name , COUNT(first_name) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY first_name", "binning": ""}, "VQL": "Visualize BAR SELECT first_name , COUNT(first_name) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY first_name"}, "hardness": "Medium"}, {"nl_queries": "For those products with a price between 60 and 120, visualize a bar chart about the distribution of  name and  code .", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120", "binning": ""}, "VQL": "Visualize BAR SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120"}, "hardness": "Easy"}, {"nl_queries": "Show me about the distribution of  Date_of_Birth and  Height  in a bar chart.", "db_id": "candidate_poll", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Date_of_Birth , Height FROM people", "binning": ""}, "VQL": "Visualize BAR SELECT Date_of_Birth , Height FROM people"}, "hardness": "Easy"}, {"nl_queries": "A line chart for what are the number of the dates that have an average sea level pressure between 303 and 31?, and list by the X-axis in descending.", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date , COUNT(date) FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31 GROUP BY date ORDER BY date DESC", "binning": ""}, "VQL": "Visualize LINE SELECT date , COUNT(date) FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31 GROUP BY date ORDER BY date DESC"}, "hardness": "Hard"}, {"nl_queries": "What are the names of photos taken with the lens brand 'Sigma' or 'Olympus', and count them by a pie chart", "db_id": "mountain_photos", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT T1.name , COUNT(T1.name) FROM camera_lens AS T1 JOIN photos AS T2 ON T2.camera_lens_id = T1.id WHERE T1.brand = 'Sigma' OR T1.brand = 'Olympus' GROUP BY T1.name", "binning": ""}, "VQL": "Visualize PIE SELECT T1.name , COUNT(T1.name) FROM camera_lens AS T1 JOIN photos AS T2 ON T2.camera_lens_id = T1.id WHERE T1.brand = 'Sigma' OR T1.brand = 'Olympus' GROUP BY T1.name"}, "hardness": "Extra Hard"}, {"nl_queries": "Visualize the relationship between  People_ID and  Clean_Jerk .", "db_id": "body_builder", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT People_ID , Clean_Jerk FROM body_builder", "binning": ""}, "VQL": "Visualize SCATTER SELECT People_ID , Clean_Jerk FROM body_builder"}, "hardness": "Easy"}, {"nl_queries": "Visualize a scatter chart about the correlation between  School_ID and  ACC_Percent , and group by attribute ACC_Home.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Home", "binning": ""}, "VQL": "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Home"}, "hardness": "Easy"}, {"nl_queries": "For those employees who was hired before 2002-06-21, find job_id and the average of employee_id , and group by attribute job_id, and visualize them by a bar chart, and rank by the X from high to low please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC"}, "hardness": "Hard"}, {"nl_queries": "Give me a bar chart about the average of number_of_platforms in different locations, and rank total number in descending order.", "db_id": "train_station", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Location , AVG(Number_of_Platforms) FROM station GROUP BY Location ORDER BY AVG(Number_of_Platforms) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Location , AVG(Number_of_Platforms) FROM station GROUP BY Location ORDER BY AVG(Number_of_Platforms) DESC"}, "hardness": "Medium"}, {"nl_queries": "Find Sex and the sum of Weight , and group by attribute Sex, and visualize them by a bar chart, sort by the Y in descending.", "db_id": "candidate_poll", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Sex , SUM(Weight) FROM people GROUP BY Sex ORDER BY SUM(Weight) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Sex , SUM(Weight) FROM people GROUP BY Sex ORDER BY SUM(Weight) DESC"}, "hardness": "Medium"}, {"nl_queries": "Stacked bar chart of the number of left office for with each Minister in each left office", "db_id": "party_people", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Left_office , COUNT(Left_office) FROM party GROUP BY Minister", "binning": "BIN Left_office BY YEAR"}, "VQL": "Visualize BAR SELECT Left_office , COUNT(Left_office) FROM party GROUP BY Minister BIN Left_office BY YEAR"}, "hardness": "Hard"}, {"nl_queries": "How many dogs who have gone through a treatment arrived in each day? Return a line chart that groups by arrived date.", "db_id": "dog_kennels", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date_arrived , COUNT(date_arrived) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id GROUP BY date_arrived", "binning": ""}, "VQL": "Visualize LINE SELECT date_arrived , COUNT(date_arrived) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id GROUP BY date_arrived"}, "hardness": "Medium"}, {"nl_queries": "How many students are advised by each rank of faculty? List the rank and the number of students in a bar chart, and rank by the Y in ascending.", "db_id": "activity_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Rank , count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.rank ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Rank , count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.rank ORDER BY count(*) ASC"}, "hardness": "Hard"}, {"nl_queries": "Show the name of each county along with the corresponding number of delegates from that county with a bar chart, I want to rank by the Y from high to low.", "db_id": "election", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id ORDER BY COUNT(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id ORDER BY COUNT(*) DESC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, give me the comparison about salary over the phone_number by a bar chart, and order from high to low by the Y.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT PHONE_NUMBER , SALARY FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY SALARY DESC", "binning": ""}, "VQL": "Visualize BAR SELECT PHONE_NUMBER , SALARY FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY SALARY DESC"}, "hardness": "Medium"}, {"nl_queries": "Show the minimum room count of apartments in different type with a bar chart.", "db_id": "apartment_rentals", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT apt_type_code , min(room_count) FROM Apartments GROUP BY apt_type_code", "binning": ""}, "VQL": "Visualize BAR SELECT apt_type_code , min(room_count) FROM Apartments GROUP BY apt_type_code"}, "hardness": "Easy"}, {"nl_queries": "Display a bar chart for what are the hometowns of gymnasts and the corresponding number of gymnasts?, display in descending by the Y-axis.", "db_id": "gymnast", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Hometown , COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Hometown , COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC"}, "hardness": "Hard"}, {"nl_queries": "Find Nationality and the average of meter_100 , and group by attribute Nationality, and visualize them by a bar chart, and I want to display in ascending by the the average of meter 100.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nationality , AVG(meter_100) FROM swimmer GROUP BY Nationality ORDER BY AVG(meter_100) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Nationality , AVG(meter_100) FROM swimmer GROUP BY Nationality ORDER BY AVG(meter_100) ASC"}, "hardness": "Medium"}, {"nl_queries": "Bar chart x axis date moved in y axis how many date moved in, could you order by the total number in descending?", "db_id": "local_govt_and_lot", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_moved_in , COUNT(date_moved_in) FROM customer_events  ORDER BY COUNT(date_moved_in) DESC", "binning": "BIN date_moved_in BY YEAR"}, "VQL": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM customer_events  ORDER BY COUNT(date_moved_in) DESC BIN date_moved_in BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "Calculate the number of actors in each duration of actors using a bar chart, order by the how many duration in descending.", "db_id": "musical", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Duration , COUNT(Duration) FROM actor GROUP BY Duration ORDER BY COUNT(Duration) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Duration , COUNT(Duration) FROM actor GROUP BY Duration ORDER BY COUNT(Duration) DESC"}, "hardness": "Medium"}, {"nl_queries": "What are the different ids and names of the stations that have had more than 12 bikes available Plot them as bar chart, display total number in desc order.", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , id FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available > 12 ORDER BY id DESC", "binning": ""}, "VQL": "Visualize BAR SELECT name , id FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available > 12 ORDER BY id DESC"}, "hardness": "Hard"}, {"nl_queries": "Show the names of high school students and their corresponding number of friends Plot them as bar chart, rank in ascending by the y axis.", "db_id": "network_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.name , AVG(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY AVG(count(*)) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.name , AVG(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY AVG(count(*)) ASC"}, "hardness": "Hard"}, {"nl_queries": "Visualize a bar chart for what are the names and account balances of customers with the letter 'a' in their names?, show by the bar in descending.", "db_id": "loan_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT cust_name , acc_bal FROM customer WHERE cust_name LIKE '%a%' ORDER BY cust_name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT cust_name , acc_bal FROM customer WHERE cust_name LIKE '%a%' ORDER BY cust_name DESC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who did not have any job in the past, show me about the distribution of job_id and the amount of job_id , and group by attribute job_id in a bar chart, and could you list by the Y in descending please?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , COUNT(JOB_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY COUNT(JOB_ID) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY COUNT(JOB_ID) DESC"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, find founder and the sum of price , and group by attribute founder, and visualize them by a bar chart, and list by the X in ascending please.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Founder , SUM(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder ORDER BY Founder ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Founder , SUM(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder ORDER BY Founder ASC"}, "hardness": "Hard"}, {"nl_queries": "Find the number of employees of each gender whose salary is lower than 50000 Visualize by bar chart, could you rank Y-axis in ascending order?", "db_id": "company_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Sex , count(*) FROM employee WHERE salary < 50000 GROUP BY sex ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Sex , count(*) FROM employee WHERE salary < 50000 GROUP BY sex ORDER BY count(*) ASC"}, "hardness": "Hard"}, {"nl_queries": "A pie chart for showing the number of the names of editors that are on the committee of journals with sales bigger than 3000.", "db_id": "journal_committee", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000 GROUP BY Name", "binning": ""}, "VQL": "Visualize PIE SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000 GROUP BY Name"}, "hardness": "Hard"}, {"nl_queries": "A bar chart for what are the number of the dates with a maximum temperature higher than 85?, order y axis from low to high order please.", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date , COUNT(date) FROM weather WHERE max_temperature_f > 85  ORDER BY COUNT(date) ASC", "binning": "BIN date BY YEAR"}, "VQL": "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE max_temperature_f > 85  ORDER BY COUNT(date) ASC BIN date BY YEAR"}, "hardness": "Hard"}, {"nl_queries": "Bar chart, X is bed type and the Y-axis is their appearance frequency, show by the names in ascending.", "db_id": "inn_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT bedType , COUNT(bedType) FROM Rooms WHERE decor = \"traditional\" GROUP BY bedType ORDER BY bedType ASC", "binning": ""}, "VQL": "Visualize BAR SELECT bedType , COUNT(bedType) FROM Rooms WHERE decor = \"traditional\" GROUP BY bedType ORDER BY bedType ASC"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about the sum of revenue over the headquarter , and group by attribute headquarter by a bar chart, and list by the X from high to low.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Headquarter , SUM(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Headquarter , SUM(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter DESC"}, "hardness": "Hard"}, {"nl_queries": "Tell me how many cinemas open for each year in a bar chart, and sort X-axis from high to low order.", "db_id": "cinema", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Openning_year , COUNT(Openning_year) FROM cinema GROUP BY Openning_year ORDER BY Openning_year DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Openning_year , COUNT(Openning_year) FROM cinema GROUP BY Openning_year ORDER BY Openning_year DESC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, visualize a scatter chart about the correlation between  manufacturer and  code , and group by attribute founder.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT T1.Manufacturer , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder", "binning": ""}, "VQL": "Visualize SCATTER SELECT T1.Manufacturer , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder"}, "hardness": "Medium"}, {"nl_queries": "Give me a bar chart for total number of school id of each all home, and rank by the y axis from high to low.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY SUM(School_ID) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY SUM(School_ID) DESC"}, "hardness": "Medium"}, {"nl_queries": "List the budget of each department in a bar chart, I want to sort in ascending by the Budget_in_Billions.", "db_id": "department_management", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , Budget_in_Billions FROM department ORDER BY Budget_in_Billions ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , Budget_in_Billions FROM department ORDER BY Budget_in_Billions ASC"}, "hardness": "Easy"}, {"nl_queries": "Show different teams in eliminations and the number of eliminations from each team by a bar chart.", "db_id": "wrestler", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Team , COUNT(*) FROM elimination GROUP BY Team", "binning": ""}, "VQL": "Visualize BAR SELECT Team , COUNT(*) FROM elimination GROUP BY Team"}, "hardness": "Easy"}, {"nl_queries": "Show the number of courses each instructor taught in a bar chart, and I want to display by the the number of emp fname in asc.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code GROUP BY EMP_FNAME ORDER BY COUNT(EMP_FNAME) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code GROUP BY EMP_FNAME ORDER BY COUNT(EMP_FNAME) ASC"}, "hardness": "Hard"}, {"nl_queries": "List the grape and winery of the wines whose price is bigger than 100, the x-axis is winery and group the grape, and y-axis is the number of wineries, and display by the total number from low to high.", "db_id": "wine_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Grape ,  Winery ORDER BY COUNT(Winery) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Grape ,  Winery ORDER BY COUNT(Winery) ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, find name and code , and group by attribute name, and visualize them by a bar chart, and sort from low to high by the Code.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Code ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Code ASC"}, "hardness": "Hard"}, {"nl_queries": "What is the total population corresponding to continents that have an average life expectancy of less than 72? Visualize them in a bar chart, and show in ascending by the Y-axis please.", "db_id": "world_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Continent , sum(Population) FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72 ORDER BY sum(Population) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Continent , sum(Population) FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72 ORDER BY sum(Population) ASC"}, "hardness": "Hard"}, {"nl_queries": "Find ACC_Road and the average of School_ID , and group by attribute ACC_Road, and visualize them by a bar chart, I want to list by the bar from low to high.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC"}, "hardness": "Medium"}, {"nl_queries": "Give me line charts of worldwide gross how many date in locaton to over year date in locaton to by major genres Location_Code", "db_id": "cre_Doc_Tracking_DB", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Location_Code", "binning": "BIN Date_in_Locaton_To BY YEAR"}, "VQL": "Visualize LINE SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Location_Code BIN Date_in_Locaton_To BY YEAR"}, "hardness": "Hard"}, {"nl_queries": "Group and count the years played to draw a bar chart, I want to display from low to high by the bars.", "db_id": "match_season", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Years_Played , COUNT(Years_Played) FROM player GROUP BY Years_Played ORDER BY Years_Played ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Years_Played , COUNT(Years_Played) FROM player GROUP BY Years_Played ORDER BY Years_Played ASC"}, "hardness": "Medium"}, {"nl_queries": "Show the different nationalities and the number of journalists of each nationality in a bar chart, and could you display from high to low by the Y?", "db_id": "news_report", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nationality , COUNT(*) FROM journalist GROUP BY Nationality ORDER BY COUNT(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM journalist GROUP BY Nationality ORDER BY COUNT(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "How many members are there in each country? Visualize in a pie chart.", "db_id": "decoration_competition", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Country , COUNT(Country) FROM member GROUP BY Country", "binning": ""}, "VQL": "Visualize PIE SELECT Country , COUNT(Country) FROM member GROUP BY Country"}, "hardness": "Easy"}, {"nl_queries": "For those records from the products and each product's manufacturer, find headquarter and the sum of code , and group by attribute headquarter, and visualize them by a bar chart, I want to order by the X-axis in descending.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC"}, "hardness": "Hard"}, {"nl_queries": "Show the title and the lowest rating among all movies in a bar chart, I want to rank in ascending by the Y.", "db_id": "movie_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT title , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY title ORDER BY min(T1.stars) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT title , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY title ORDER BY min(T1.stars) ASC"}, "hardness": "Medium"}, {"nl_queries": "I want a bar chart to show the average cloud cover of the dates that have the 5 highest cloud cover rates each day, rank from high to low by the Y-axis.", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date , AVG(cloud_cover) FROM weather  ORDER BY AVG(cloud_cover) DESC", "binning": "BIN date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date , AVG(cloud_cover) FROM weather  ORDER BY AVG(cloud_cover) DESC BIN date BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "Show the number of courses for each course description in a bar chart, show in asc by the total number.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT CRS_DESCRIPTION , COUNT(CRS_DESCRIPTION) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num GROUP BY CRS_DESCRIPTION ORDER BY COUNT(CRS_DESCRIPTION) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT CRS_DESCRIPTION , COUNT(CRS_DESCRIPTION) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num GROUP BY CRS_DESCRIPTION ORDER BY COUNT(CRS_DESCRIPTION) ASC"}, "hardness": "Hard"}, {"nl_queries": "Show me the frequency of names of high schoolers who have likes with a bar chart, and sort in asc by the names.", "db_id": "network_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , COUNT(name) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY name ORDER BY name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT name , COUNT(name) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY name ORDER BY name ASC"}, "hardness": "Hard"}, {"nl_queries": "Return a bar chart on what are the names and ids of all countries with at least one car maker?", "db_id": "car_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT CountryName , CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country", "binning": ""}, "VQL": "Visualize BAR SELECT CountryName , CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country"}, "hardness": "Easy"}, {"nl_queries": "Return a bar chart about the distribution of All_Games and School_ID , list by the School_ID in descending.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Games , School_ID FROM basketball_match ORDER BY School_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Games , School_ID FROM basketball_match ORDER BY School_ID DESC"}, "hardness": "Easy"}, {"nl_queries": "For those records from the products and each product's manufacturer, return a bar chart about the distribution of name and the sum of code , and group by attribute name, and display by the y axis in asc.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code ASC"}, "hardness": "Hard"}, {"nl_queries": "List all the customers in increasing order of IDs by a bar chart.", "db_id": "insurance_fnol", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Customer_name , Customer_ID FROM customers ORDER BY customer_id ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Customer_name , Customer_ID FROM customers ORDER BY customer_id ASC"}, "hardness": "Easy"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about manufacturer over the name , and group by attribute founder, list bar from low to high order.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder , T1.Name ORDER BY T1.Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder , T1.Name ORDER BY T1.Name ASC"}, "hardness": "Hard"}, {"nl_queries": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 , and count them by a bar chart, order how many year in desc order.", "db_id": "car_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Year , COUNT(Year) FROM cars_data where weight between 3000 and 4000  ORDER BY COUNT(Year) DESC", "binning": "BIN Year BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Year , COUNT(Year) FROM cars_data where weight between 3000 and 4000  ORDER BY COUNT(Year) DESC BIN Year BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "Find the number of the names of catalog entries with level number 8.", "db_id": "product_catalog", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT catalog_entry_name , COUNT(catalog_entry_name) FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id WHERE t2.catalog_level_number = \"8\" GROUP BY catalog_entry_name", "binning": ""}, "VQL": "Visualize BAR SELECT catalog_entry_name , COUNT(catalog_entry_name) FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id WHERE t2.catalog_level_number = \"8\" GROUP BY catalog_entry_name"}, "hardness": "Hard"}, {"nl_queries": "Show me about the distribution of meter_500 and ID in a bar chart, order names in asc order please.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_500 , ID FROM swimmer ORDER BY meter_500 ASC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_500 , ID FROM swimmer ORDER BY meter_500 ASC"}, "hardness": "Easy"}, {"nl_queries": "Which tests have \"Pass\" results? Return the dates when the tests were taken, and count them by a bar chart, rank by the X in desc.", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY date_test_taken DESC", "binning": ""}, "VQL": "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY date_test_taken DESC"}, "hardness": "Hard"}, {"nl_queries": "Display a bar chart for what are the cost and treatment type description of each treatment?", "db_id": "dog_kennels", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT treatment_type_description , AVG(cost_of_treatment) FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY treatment_type_description", "binning": ""}, "VQL": "Visualize BAR SELECT treatment_type_description , AVG(cost_of_treatment) FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY treatment_type_description"}, "hardness": "Medium"}, {"nl_queries": "Show how many section description from each section description, and could you rank bar from high to low order please?", "db_id": "student_transcripts_tracking", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description ORDER BY section_description DESC", "binning": ""}, "VQL": "Visualize BAR SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description ORDER BY section_description DESC"}, "hardness": "Medium"}, {"nl_queries": "Show the draft pick numbers and draft classes of players whose positions are defenders Show bar chart, show Y-axis in descending order please.", "db_id": "match_season", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Draft_Class , Draft_Pick_Number FROM match_season WHERE POSITION = \"Defender\" ORDER BY Draft_Pick_Number DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Draft_Class , Draft_Pick_Number FROM match_season WHERE POSITION = \"Defender\" ORDER BY Draft_Pick_Number DESC"}, "hardness": "Medium"}, {"nl_queries": "Give me a bar chart for how many name of each name", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM products GROUP BY Name", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name"}, "hardness": "Easy"}, {"nl_queries": "Draw a bar chart for what is the average number of stars that each reviewer awards for a movie?, rank in ascending by the y-axis.", "db_id": "movie_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID GROUP BY T2.name ORDER BY avg(T1.stars) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT name , avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID GROUP BY T2.name ORDER BY avg(T1.stars) ASC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who did not have any job in the past, show me about the change of salary over hire_date in a line chart, and order X from high to low order please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , SALARY FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE DESC", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE DESC"}, "hardness": "Medium"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, show me about the distribution of job_id and the sum of salary , and group by attribute job_id in a bar chart, list X in asc order.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "Show me how many in each class of all races using a bar chart, and show by the X-axis in ascending.", "db_id": "race_track", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY Class ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY Class ASC"}, "hardness": "Medium"}, {"nl_queries": "Show the number of the names of editors that are on the committee of journals with sales bigger than 3000, list in asc by the x-axis please.", "db_id": "journal_committee", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000 GROUP BY Name ORDER BY Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000 GROUP BY Name ORDER BY Name ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "Give me a group line chart showing the number of documents in different ending date The x-axis is ending date and group by location code, rank by the x axis from low to high please.", "db_id": "cre_Doc_Tracking_DB", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Location_Code ,  Date_in_Locaton_To ORDER BY Date_in_Locaton_To ASC", "binning": ""}, "VQL": "Visualize LINE SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Location_Code ,  Date_in_Locaton_To ORDER BY Date_in_Locaton_To ASC"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, return a bar chart about the distribution of  founder and the average of price , and group by attribute founder.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Founder , AVG(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder", "binning": ""}, "VQL": "Visualize BAR SELECT Founder , AVG(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder"}, "hardness": "Medium"}, {"nl_queries": "Plot the total number by grouped by industry as a bar graph", "db_id": "company_office", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry", "binning": ""}, "VQL": "Visualize BAR SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry"}, "hardness": "Easy"}, {"nl_queries": "List the number of treatments in each month with a bar chart, and show by the Y in asc.", "db_id": "dog_kennels", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_of_treatment , COUNT(date_of_treatment) FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id  ORDER BY COUNT(date_of_treatment) ASC", "binning": "BIN date_of_treatment BY MONTH"}, "VQL": "Visualize BAR SELECT date_of_treatment , COUNT(date_of_treatment) FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id  ORDER BY COUNT(date_of_treatment) ASC BIN date_of_treatment BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "How much does each charge type costs? List both charge type and amount, and sort by the Y in descending.", "db_id": "dog_kennels", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT charge_type , charge_amount FROM Charges ORDER BY charge_amount DESC", "binning": ""}, "VQL": "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_amount DESC"}, "hardness": "Easy"}, {"nl_queries": "Show the comparison of the total number of the home city of all drivers with a bar chart, and rank Y in asc order.", "db_id": "school_bus", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Home_city , COUNT(Home_city) FROM driver GROUP BY Home_city ORDER BY COUNT(Home_city) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Home_city , COUNT(Home_city) FROM driver GROUP BY Home_city ORDER BY COUNT(Home_city) ASC"}, "hardness": "Medium"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, show me about the distribution of hire_date and the sum of salary bin hire_date by time in a bar chart, and sort total number of salary from high to low order please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(SALARY) DESC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY MONTH"}, "hardness": "Extra Hard"}, {"nl_queries": "Return the number of the lot details of lots that belong to investors with details \"l\"?, sort total number in asc order.", "db_id": "tracking_share_transactions", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT lot_details , COUNT(lot_details) FROM INVESTORS AS T1 JOIN LOTS AS T2 ON T1.investor_id = T2.investor_id WHERE T1.Investor_details = \"l\" GROUP BY lot_details ORDER BY COUNT(lot_details) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM INVESTORS AS T1 JOIN LOTS AS T2 ON T1.investor_id = T2.investor_id WHERE T1.Investor_details = \"l\" GROUP BY lot_details ORDER BY COUNT(lot_details) ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "Return the number of the lot details of lots that belong to investors with details \"l\"?, and order by the lot_details in ascending.", "db_id": "tracking_share_transactions", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT lot_details , COUNT(lot_details) FROM INVESTORS AS T1 JOIN LOTS AS T2 ON T1.investor_id = T2.investor_id WHERE T1.Investor_details = \"l\" GROUP BY lot_details ORDER BY lot_details ASC", "binning": ""}, "VQL": "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM INVESTORS AS T1 JOIN LOTS AS T2 ON T1.investor_id = T2.investor_id WHERE T1.Investor_details = \"l\" GROUP BY lot_details ORDER BY lot_details ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "Find the number of courses offered by Psychology department in each year with a group line chart grouping by semester.", "db_id": "college_2", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT year , COUNT(year) FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' GROUP BY semester ,  year ORDER BY T1.title", "binning": ""}, "VQL": "Visualize LINE SELECT year , COUNT(year) FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' GROUP BY semester ,  year ORDER BY T1.title"}, "hardness": "Extra Hard"}, {"nl_queries": "Stack bar chart of school_id vs ACC_Home based on all home, list by the y-axis in descending.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID DESC"}, "hardness": "Medium"}, {"nl_queries": "Which physicians are trained in procedures that are more expensive than 5000, and count them by a bar chart, display by the how many name from low to high.", "db_id": "hospital_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , COUNT(T1.Name) FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T3.cost > 5000 GROUP BY T1.Name ORDER BY COUNT(T1.Name) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T3.cost > 5000 GROUP BY T1.Name ORDER BY COUNT(T1.Name) ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, draw a bar chart about the distribution of name and the sum of code , and group by attribute name, could you list in descending by the bars?", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC"}, "hardness": "Hard"}, {"nl_queries": "Find Time and meter_100 , and visualize them by a bar chart, list in desc by the y axis.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Time , meter_100 FROM swimmer ORDER BY meter_100 DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Time , meter_100 FROM swimmer ORDER BY meter_100 DESC"}, "hardness": "Easy"}, {"nl_queries": "For those employees who did not have any job in the past, visualize a bar chart about the distribution of hire_date and the average of salary bin hire_date by time, rank in ascending by the total number.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(SALARY) ASC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "Bar chart of the total number from each language, show X-axis in descending order.", "db_id": "tvshow", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language DESC"}, "hardness": "Medium"}, {"nl_queries": "Show the company name with the number of gas station Show bar chart, rank in descending by the y-axis please.", "db_id": "gas_company", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Company , count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Company , count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id ORDER BY count(*) DESC"}, "hardness": "Hard"}, {"nl_queries": "A bar chart about what are the ids and details of events that have more than one participants?, and order X in asc order.", "db_id": "local_govt_in_alabama", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Event_Details , T1.Event_ID FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY T1.Event_Details ORDER BY T1.Event_Details ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Event_Details , T1.Event_ID FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY T1.Event_Details ORDER BY T1.Event_Details ASC"}, "hardness": "Hard"}, {"nl_queries": "Return a bar chart about the distribution of  dept_name and the average of salary , and group by attribute dept_name.", "db_id": "college_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY salary", "binning": ""}, "VQL": "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY salary"}, "hardness": "Medium"}, {"nl_queries": "Visualize a bar chart about the distribution of  meter_600 and  meter_100 .", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_600 , meter_100 FROM swimmer", "binning": ""}, "VQL": "Visualize BAR SELECT meter_600 , meter_100 FROM swimmer"}, "hardness": "Easy"}, {"nl_queries": "What is the relationship between  Body_Builder_ID and  People_ID ?", "db_id": "body_builder", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Body_Builder_ID , People_ID FROM body_builder", "binning": ""}, "VQL": "Visualize SCATTER SELECT Body_Builder_ID , People_ID FROM body_builder"}, "hardness": "Easy"}, {"nl_queries": "What is the date of birth of every customer whose status code is 'Good Customer', and count them by a line chart, list X-axis in descending order please.", "db_id": "driving_school", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date_of_birth , COUNT(date_of_birth) FROM Customers WHERE customer_status_code = 'Good Customer'  ORDER BY date_of_birth DESC", "binning": "BIN date_of_birth BY YEAR"}, "VQL": "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Customers WHERE customer_status_code = 'Good Customer'  ORDER BY date_of_birth DESC BIN date_of_birth BY YEAR"}, "hardness": "Hard"}, {"nl_queries": "Display a pie chart for what are the ids and details for all organizations that have grants of more than 6000 dollars?", "db_id": "tracking_grants_for_research", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details", "binning": ""}, "VQL": "Visualize PIE SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details"}, "hardness": "Medium"}, {"nl_queries": "For all employees who have the letters D or S in their first name, show me about the change of commission_pct over hire_date in a line chart, could you display by the X in asc?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY HIRE_DATE ASC", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY HIRE_DATE ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "List the name of all playlist, and count them by a bar chart, show by the X-axis in ascending.", "db_id": "store_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT name , COUNT(name) FROM playlists GROUP BY name ORDER BY name ASC"}, "hardness": "Medium"}, {"nl_queries": "Return a line chart about the change of the sum of Shop_ID over  Start_from , and group by attribute Is_full_time and bin start_from by time.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Start_from , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time", "binning": "BIN Start_from BY YEAR"}, "VQL": "Visualize LINE SELECT Start_from , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time BIN Start_from BY YEAR"}, "hardness": "Hard"}, {"nl_queries": "What are the last names and ages of the students who are allergic to milk and cat. ", "db_id": "allergy_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT LName , Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy = \"Cat\")", "binning": ""}, "VQL": "Visualize PIE SELECT LName , Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy = \"Cat\")"}, "hardness": "Extra Hard"}, {"nl_queries": "Bar graph to show the number of nationality from different nationality, list in descending by the Nationality.", "db_id": "news_report", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nationality , COUNT(Nationality) FROM journalist GROUP BY Nationality ORDER BY Nationality DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM journalist GROUP BY Nationality ORDER BY Nationality DESC"}, "hardness": "Medium"}, {"nl_queries": "Show the number of the dates of performances with attending members whose roles are \"Violin\", and order by the total number in ascending.", "db_id": "performance_attendance", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Date , COUNT(Date) FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID = T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID = T3.Performance_ID WHERE T2.Role = \"Violin\" GROUP BY Date ORDER BY COUNT(Date) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Date , COUNT(Date) FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID = T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID = T3.Performance_ID WHERE T2.Role = \"Violin\" GROUP BY Date ORDER BY COUNT(Date) ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "Show the number of games for each home team in a bar chart, sort by the y-axis in desc please.", "db_id": "game_injury", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Home_team ORDER BY COUNT(Home_team) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Home_team ORDER BY COUNT(Home_team) DESC"}, "hardness": "Medium"}, {"nl_queries": "Find All_Home and School_ID , and group by attribute ACC_Road, and visualize them by a bar chart, and could you show x axis in descending order?", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home DESC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home DESC"}, "hardness": "Medium"}, {"nl_queries": "Show the number of teams in elimination in a bar chart, could you display y axis in ascending order?", "db_id": "wrestler", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Team , COUNT(Team) FROM elimination GROUP BY Team ORDER BY COUNT(Team) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Team , COUNT(Team) FROM elimination GROUP BY Team ORDER BY COUNT(Team) ASC"}, "hardness": "Medium"}, {"nl_queries": "For each policy type, return its type code and its count in the record Visualize by bar chart, and could you order y-axis in desc order?", "db_id": "insurance_and_eClaims", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Policy_Type_Code , count(*) FROM policies GROUP BY policy_type_code ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Policy_Type_Code , count(*) FROM policies GROUP BY policy_type_code ORDER BY count(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "List all customer status codes and the number of customers having each status code by a pie chart.", "db_id": "driving_school", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT customer_status_code , count(*) FROM Customers GROUP BY customer_status_code", "binning": ""}, "VQL": "Visualize PIE SELECT customer_status_code , count(*) FROM Customers GROUP BY customer_status_code"}, "hardness": "Easy"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, give me the comparison about the average of department_id over the hire_date bin hire_date by time, display in desc by the y-axis please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY AVG(DEPARTMENT_ID) DESC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY AVG(DEPARTMENT_ID) DESC BIN HIRE_DATE BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "Plot the average of shop id by grouped by is full time as a bar graph", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Is_full_time , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time", "binning": ""}, "VQL": "Visualize BAR SELECT Is_full_time , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time"}, "hardness": "Easy"}, {"nl_queries": "For each faculty rank, show the number of faculty members who have it Show bar chart, display by the y axis from high to low please.", "db_id": "activity_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Rank , count(*) FROM Faculty GROUP BY rank ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY rank ORDER BY count(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "A bar chart for finding the number of the dates of the tests taken with result \"Pass\", and order total number from low to high order.", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\"  ORDER BY COUNT(date_test_taken) ASC", "binning": "BIN date_test_taken BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\"  ORDER BY COUNT(date_test_taken) ASC BIN date_test_taken BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, show me about the distribution of  job_id and the average of manager_id , and group by attribute job_id in a bar chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID"}, "hardness": "Hard"}, {"nl_queries": "Bin all date of transactions into the YEAR interval, and sum the share count of each bin What is the trend?, and order by the X-axis from high to low please.", "db_id": "tracking_share_transactions", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date_of_transaction , SUM(share_count) FROM TRANSACTIONS  ORDER BY date_of_transaction DESC", "binning": "BIN date_of_transaction BY YEAR"}, "VQL": "Visualize LINE SELECT date_of_transaction , SUM(share_count) FROM TRANSACTIONS  ORDER BY date_of_transaction DESC BIN date_of_transaction BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "Show the number of teachers of each course with a pie chart.", "db_id": "course_teach", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Course , COUNT(Course) FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID GROUP BY Course", "binning": ""}, "VQL": "Visualize PIE SELECT Course , COUNT(Course) FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID GROUP BY Course"}, "hardness": "Medium"}, {"nl_queries": "Show me the correlation about how many distinct order ids correspond to each product?", "db_id": "customers_and_invoices", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT product_id , count(DISTINCT order_id) FROM Order_items", "binning": ""}, "VQL": "Visualize SCATTER SELECT product_id , count(DISTINCT order_id) FROM Order_items"}, "hardness": "Medium"}, {"nl_queries": "Show the names of climbers and the heights of mountains they climb by a bar chart, show from low to high by the Y-axis please.", "db_id": "climbing", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID ORDER BY T2.Height ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID ORDER BY T2.Height ASC"}, "hardness": "Medium"}, {"nl_queries": "Find the number of the names of swimmers who has a result of \"win\", show names in ascending order please.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , COUNT(name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Win' GROUP BY name ORDER BY name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT name , COUNT(name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Win' GROUP BY name ORDER BY name ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, draw a bar chart about the distribution of last_name and commission_pct , and show from high to low by the Y.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT LAST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC", "binning": ""}, "VQL": "Visualize BAR SELECT LAST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC"}, "hardness": "Medium"}, {"nl_queries": "Give me the title and highest price for each film. ", "db_id": "cinema", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title", "binning": ""}, "VQL": "Visualize PIE SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title"}, "hardness": "Easy"}, {"nl_queries": "Draw a scatter chart about the correlation between  Team_ID and  All_Games_Percent .", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Team_ID , All_Games_Percent FROM basketball_match", "binning": ""}, "VQL": "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match"}, "hardness": "Easy"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about the average of manufacturer over the founder , and group by attribute founder, I want to sort in descending by the X-axis please.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Founder , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder ORDER BY Founder DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Founder , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder ORDER BY Founder DESC"}, "hardness": "Hard"}, {"nl_queries": "List the grape and winery of the wines whose price is bigger than 100, visualize them with a stacked bar chart, the x-axis is winery and group the grape, and y-axis is the number of wineries, display by the X in desc.", "db_id": "wine_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Grape ,  Winery ORDER BY Winery DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Grape ,  Winery ORDER BY Winery DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees who did not have any job in the past, show me about the distribution of hire_date and the average of salary bin hire_date by time in a bar chart, could you order by the Y in descending?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(SALARY) DESC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "Return a bar graph for the name of the school that has the smallest enrollment in each state, and list total number in asc order.", "db_id": "soccer_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT cName , min(enr) FROM college GROUP BY state ORDER BY min(enr) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY min(enr) ASC"}, "hardness": "Medium"}, {"nl_queries": "Bar chart x axis occupation y axis the total number, and show in ascending by the bar.", "db_id": "riding_club", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Occupation , COUNT(*) FROM player GROUP BY Occupation ORDER BY Occupation ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Occupation , COUNT(*) FROM player GROUP BY Occupation ORDER BY Occupation ASC"}, "hardness": "Medium"}, {"nl_queries": "Show the names and ids of tourist attractions that are visited at most once, could you display in ascending by the Y?", "db_id": "cre_Theme_park", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID ORDER BY T1.Tourist_Attraction_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID ORDER BY T1.Tourist_Attraction_ID ASC"}, "hardness": "Medium"}, {"nl_queries": "Show me the total number by product category in a histogram, and I want to sort in asc by the x-axis.", "db_id": "customers_campaigns_ecommerce", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT product_category , count(*) FROM mailshot_campaigns GROUP BY product_category ORDER BY product_category ASC", "binning": ""}, "VQL": "Visualize BAR SELECT product_category , count(*) FROM mailshot_campaigns GROUP BY product_category ORDER BY product_category ASC"}, "hardness": "Medium"}, {"nl_queries": "Give me the comparison about the sum of School_ID over the ACC_Road , and group by attribute ACC_Road, and display in ascending by the total number.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Road , SUM(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY SUM(School_ID) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Road , SUM(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY SUM(School_ID) ASC"}, "hardness": "Medium"}, {"nl_queries": "Return a bar chart on what is the average age for a male in each job?, rank from low to high by the x-axis.", "db_id": "network_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job ORDER BY job ASC", "binning": ""}, "VQL": "Visualize BAR SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job ORDER BY job ASC"}, "hardness": "Hard"}, {"nl_queries": "What are the ids and locations of all circuits in France or Belgium Show bar chart, sort by the total number in desc.", "db_id": "formula_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT location , circuitId FROM circuits WHERE country = \"France\" OR country = \"Belgium\" ORDER BY circuitId DESC", "binning": ""}, "VQL": "Visualize BAR SELECT location , circuitId FROM circuits WHERE country = \"France\" OR country = \"Belgium\" ORDER BY circuitId DESC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who did not have any job in the past, visualize a bar chart about the distribution of  hire_date and the sum of salary bin hire_date by time.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH"}, "hardness": "Medium"}, {"nl_queries": "Show the average age for all female students and group them by last name with a bar chart, could you list by the total number in asc please?", "db_id": "allergy_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT LName , AVG(Age) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY AVG(Age) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT LName , AVG(Age) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY AVG(Age) ASC"}, "hardness": "Hard"}, {"nl_queries": "Show the number of accounts in a bar chart that groups by other account details, and sort in desc by the x-axis please.", "db_id": "customers_and_invoices", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT other_account_details , COUNT(other_account_details) FROM Accounts GROUP BY other_account_details ORDER BY other_account_details DESC", "binning": ""}, "VQL": "Visualize BAR SELECT other_account_details , COUNT(other_account_details) FROM Accounts GROUP BY other_account_details ORDER BY other_account_details DESC"}, "hardness": "Medium"}, {"nl_queries": "Show vote_percent from each date, could you show y axis from high to low order please?", "db_id": "election_representative", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Date , Vote_Percent FROM election ORDER BY Vote_Percent DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Date , Vote_Percent FROM election ORDER BY Vote_Percent DESC"}, "hardness": "Easy"}, {"nl_queries": "Bar graph to show the average of high temperature from different day of week", "db_id": "station_weather", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT day_of_week , avg(high_temperature) FROM weekly_weather GROUP BY day_of_week", "binning": ""}, "VQL": "Visualize BAR SELECT day_of_week , avg(high_temperature) FROM weekly_weather GROUP BY day_of_week"}, "hardness": "Easy"}, {"nl_queries": "What is the proportion of each customer's move in date? Show me the bar chart.", "db_id": "local_govt_and_lot", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in", "binning": ""}, "VQL": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in"}, "hardness": "Medium"}, {"nl_queries": "Return a bar chart about the distribution of Team_Name and All_Games_Percent , and order y-axis from low to high order.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Team_Name , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Team_Name , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC"}, "hardness": "Easy"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, show me about the correlation between  salary and  manager_id  in a scatter chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT SALARY , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)", "binning": ""}, "VQL": "Visualize SCATTER SELECT SALARY , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)"}, "hardness": "Extra Hard"}, {"nl_queries": "Show the number of courses for each office in a bar chart, and could you list by the y axis from low to high?", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT PROF_OFFICE , COUNT(PROF_OFFICE) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num GROUP BY PROF_OFFICE ORDER BY COUNT(PROF_OFFICE) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT PROF_OFFICE , COUNT(PROF_OFFICE) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num GROUP BY PROF_OFFICE ORDER BY COUNT(PROF_OFFICE) ASC"}, "hardness": "Hard"}, {"nl_queries": "Show each premise type and the number of premises in that type Visualize by bar chart, and I want to rank X-axis from high to low order.", "db_id": "customers_campaigns_ecommerce", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT premises_type , count(*) FROM premises GROUP BY premises_type ORDER BY premises_type DESC", "binning": ""}, "VQL": "Visualize BAR SELECT premises_type , count(*) FROM premises GROUP BY premises_type ORDER BY premises_type DESC"}, "hardness": "Medium"}, {"nl_queries": "Return a line chart about the change of the amount of Start_from over Start_from , and group by attribute Is_full_time and bin start_from by time, and could you rank by the Start_from from low to high?", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Start_from , COUNT(Start_from) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC", "binning": "BIN Start_from BY YEAR"}, "VQL": "Visualize LINE SELECT Start_from , COUNT(Start_from) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC BIN Start_from BY YEAR"}, "hardness": "Extra Hard"}, {"nl_queries": "A bar chart for what are the number of the names of the technicians that are assigned to repair machines with more point values than 70?, list in asc by the names.", "db_id": "machine_repair", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(Name) FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID WHERE T2.value_points > 70 GROUP BY Name ORDER BY Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID WHERE T2.value_points > 70 GROUP BY Name ORDER BY Name ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, return a bar chart about the distribution of name and the average of revenue , and group by attribute name, and could you display from high to low by the names?", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC"}, "hardness": "Hard"}, {"nl_queries": "List the number of each company whose office is in the building in a bar chart, and display from high to low by the names.", "db_id": "company_office", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T3.name , COUNT(T3.name) FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id = T2.id JOIN Companies AS T3 ON T1.company_id = T3.id GROUP BY T3.name ORDER BY T3.name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T3.name , COUNT(T3.name) FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id = T2.id JOIN Companies AS T3 ON T1.company_id = T3.id GROUP BY T3.name ORDER BY T3.name DESC"}, "hardness": "Hard"}, {"nl_queries": "Bar graph to show sum revenue from different name, order by the y axis from low to high please.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , sum(revenue) FROM manufacturers GROUP BY name ORDER BY sum(revenue) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name ORDER BY sum(revenue) ASC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, return a bar chart about the distribution of name and code , and group by attribute founder, could you show by the x axis from low to high?", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder , T1.Name ORDER BY T1.Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder , T1.Name ORDER BY T1.Name ASC"}, "hardness": "Hard"}, {"nl_queries": "Visualize the title and and the average star rating of the movie using a bar chart.", "db_id": "movie_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT title , AVG(stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY title", "binning": ""}, "VQL": "Visualize BAR SELECT title , AVG(stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY title"}, "hardness": "Medium"}, {"nl_queries": "Show different type codes of products and the number of products with each type code in a bar chart, list in descending by the Y-axis.", "db_id": "solvency_ii", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Product_Type_Code , COUNT(*) FROM Products GROUP BY Product_Type_Code ORDER BY COUNT(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Product_Type_Code , COUNT(*) FROM Products GROUP BY Product_Type_Code ORDER BY COUNT(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "Draw a bar chart of name versus age, sort Y-axis in ascending order please.", "db_id": "journal_committee", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , Age FROM editor ORDER BY Age ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , Age FROM editor ORDER BY Age ASC"}, "hardness": "Easy"}, {"nl_queries": "Please show the number of films for each type in a bar chart, and could you order Y in asc order please?", "db_id": "film_rank", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Type , COUNT(Type) FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID GROUP BY Type ORDER BY COUNT(Type) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Type , COUNT(Type) FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID GROUP BY Type ORDER BY COUNT(Type) ASC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, a bar chart shows the distribution of  phone_number and  commission_pct .", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT PHONE_NUMBER , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)", "binning": ""}, "VQL": "Visualize BAR SELECT PHONE_NUMBER , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)"}, "hardness": "Extra Hard"}, {"nl_queries": "What is the average student GPA for every department? Return a bar chart, and I want to show from high to low by the DEPT_CODE.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT DEPT_CODE , avg(stu_gpa) FROM student GROUP BY dept_code ORDER BY DEPT_CODE DESC", "binning": ""}, "VQL": "Visualize BAR SELECT DEPT_CODE , avg(stu_gpa) FROM student GROUP BY dept_code ORDER BY DEPT_CODE DESC"}, "hardness": "Medium"}, {"nl_queries": "For each building, show the name of the building and the number of institutions in it Plot them as bar chart, and display X from low to high order.", "db_id": "protein_institute", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , count(*) FROM building AS T1 JOIN institution AS T2 ON T1.building_id = T2.building_id GROUP BY T1.building_id ORDER BY Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , count(*) FROM building AS T1 JOIN institution AS T2 ON T1.building_id = T2.building_id GROUP BY T1.building_id ORDER BY Name ASC"}, "hardness": "Hard"}, {"nl_queries": "Return a bar chart on what is the average age for a male in each job?, I want to rank by the X from high to low please.", "db_id": "network_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job ORDER BY job DESC", "binning": ""}, "VQL": "Visualize BAR SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job ORDER BY job DESC"}, "hardness": "Hard"}, {"nl_queries": "Show all sport name and the number of students Show bar chart, could you sort by the Y-axis in ascending please?", "db_id": "game_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT SportName , count(*) FROM Sportsinfo GROUP BY sportname ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT SportName , count(*) FROM Sportsinfo GROUP BY sportname ORDER BY count(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "What are the number of the descriptions for the aircrafts?, and could you list in descending by the Description?", "db_id": "aircraft", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY Description DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY Description DESC"}, "hardness": "Medium"}, {"nl_queries": "How many players enter hall of fame each year Show the tendency, and I want to list by the X from low to high.", "db_id": "baseball_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid ORDER BY yearid ASC", "binning": ""}, "VQL": "Visualize LINE SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid ORDER BY yearid ASC"}, "hardness": "Medium"}, {"nl_queries": "Return a histogram on what are the names and distances for all airplanes?, could you order by the x-axis in desc?", "db_id": "flight_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , distance FROM Aircraft ORDER BY name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT name , distance FROM Aircraft ORDER BY name DESC"}, "hardness": "Easy"}, {"nl_queries": "Show the number of accounts in a bar chart that groups by other account details, rank Y-axis from low to high order.", "db_id": "customers_and_invoices", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT other_account_details , COUNT(other_account_details) FROM Accounts GROUP BY other_account_details ORDER BY COUNT(other_account_details) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT other_account_details , COUNT(other_account_details) FROM Accounts GROUP BY other_account_details ORDER BY COUNT(other_account_details) ASC"}, "hardness": "Medium"}, {"nl_queries": "For those products with a price between 60 and 120, a bar chart shows the distribution of name and code , and list in desc by the Y please.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Code DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Code DESC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, return a bar chart about the distribution of phone_number and department_id , and display in asc by the y-axis.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT PHONE_NUMBER , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY DEPARTMENT_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT PHONE_NUMBER , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY DEPARTMENT_ID ASC"}, "hardness": "Medium"}, {"nl_queries": "Count the number of players who enter hall of fame for each year with a line chart.", "db_id": "baseball_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid", "binning": ""}, "VQL": "Visualize LINE SELECT yearid , count(*) FROM hall_of_fame GROUP BY yearid"}, "hardness": "Easy"}, {"nl_queries": "A bar chart for what are the number of the distinct visit dates?, and rank total number from low to high order.", "db_id": "cre_Theme_park", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Visit_Date , COUNT(Visit_Date) FROM VISITS  ORDER BY COUNT(Visit_Date) ASC", "binning": "BIN Visit_Date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Visit_Date , COUNT(Visit_Date) FROM VISITS  ORDER BY COUNT(Visit_Date) ASC BIN Visit_Date BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "For those employees who was hired before 2002-06-21, show me about the distribution of hire_date and the sum of salary bin hire_date by time in a bar chart, could you display from low to high by the total number?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(SALARY) ASC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "A bar chart shows the distribution of All_Home and the average of School_ID , and group by attribute All_Home, rank by the names in asc.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Home , AVG(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Home , AVG(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC"}, "hardness": "Medium"}, {"nl_queries": "Bar graph to show how many yearid from different yearid, I want to rank by the total number from low to high.", "db_id": "baseball_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT yearid , COUNT(yearid) FROM hall_of_fame  ORDER BY COUNT(yearid) ASC", "binning": "BIN yearid BY WEEKDAY"}, "VQL": "Visualize BAR SELECT yearid , COUNT(yearid) FROM hall_of_fame  ORDER BY COUNT(yearid) ASC BIN yearid BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "Find the number of funiture types produced by each manufacturer as well as the company names Show bar chart, and sort in descending by the Y-axis.", "db_id": "manufacturer", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , count(*) FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id = t2.manufacturer_id GROUP BY t1.manufacturer_id ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , count(*) FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id = t2.manufacturer_id GROUP BY t1.manufacturer_id ORDER BY count(*) DESC"}, "hardness": "Hard"}, {"nl_queries": "How many students are from each city, and which cities have more than one cities Plot them as bar chart, and sort by the names from low to high please.", "db_id": "dorm_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT city_code , count(*) FROM student GROUP BY city_code ORDER BY city_code ASC", "binning": ""}, "VQL": "Visualize BAR SELECT city_code , count(*) FROM student GROUP BY city_code ORDER BY city_code ASC"}, "hardness": "Medium"}, {"nl_queries": "Show the names of journalists and the number of events they reported Visualize by bar chart, and list by the bar in ascending.", "db_id": "news_report", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T3.Name , COUNT(*) FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID = T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID = T3.journalist_ID GROUP BY T3.Name ORDER BY T3.Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T3.Name , COUNT(*) FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID = T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID = T3.journalist_ID GROUP BY T3.Name ORDER BY T3.Name ASC"}, "hardness": "Hard"}, {"nl_queries": "Show a bar graph, the data is those times of trains that run through stations for the local authority Chiltern, and the Y axis is the total number of different times, and I want to sort by the X from high to low.", "db_id": "station_weather", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT time , COUNT(time) FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id JOIN train AS t3 ON t2.train_id = t3.id WHERE t1.local_authority = \"Chiltern\" GROUP BY time ORDER BY time DESC", "binning": ""}, "VQL": "Visualize BAR SELECT time , COUNT(time) FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id JOIN train AS t3 ON t2.train_id = t3.id WHERE t1.local_authority = \"Chiltern\" GROUP BY time ORDER BY time DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "For each cinema, show the price and group them by film title in a stacked bar chart, could you display by the Price in asc?", "db_id": "cinema", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Title , Price FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Name ,  Title ORDER BY Price ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Title , Price FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Name ,  Title ORDER BY Price ASC"}, "hardness": "Hard"}, {"nl_queries": "List the name and the number of stations for all the cities that have at least 15 stations Show bar chart, and list in desc by the Y.", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT city , COUNT(*) FROM station GROUP BY city ORDER BY COUNT(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT city , COUNT(*) FROM station GROUP BY city ORDER BY COUNT(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "Return a bar chart about the distribution of All_Games and ACC_Percent , display from low to high by the X-axis.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Games , ACC_Percent FROM basketball_match ORDER BY All_Games ASC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Games , ACC_Percent FROM basketball_match ORDER BY All_Games ASC"}, "hardness": "Easy"}, {"nl_queries": "List the studios of each film and the number of films produced by that studio Show bar chart, and show the total number in desc order.", "db_id": "film_rank", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Studio , COUNT(*) FROM film GROUP BY Studio ORDER BY COUNT(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Studio , COUNT(*) FROM film GROUP BY Studio ORDER BY COUNT(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, visualize a bar chart about the distribution of  hire_date and the average of department_id bin hire_date by time.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "Show all destinations and the number of flights to each destination by a bar chart, display by the X-axis in ascending please.", "db_id": "flight_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT destination , count(*) FROM Flight GROUP BY destination ORDER BY destination ASC", "binning": ""}, "VQL": "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination ORDER BY destination ASC"}, "hardness": "Medium"}, {"nl_queries": "Return a bar chart on what are the different card types, and how many transactions have been made with each?, and I want to display Y in desc order.", "db_id": "customers_card_transactions", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT card_type_code , count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id = T2.card_id GROUP BY T2.card_type_code ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT card_type_code , count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id = T2.card_id GROUP BY T2.card_type_code ORDER BY count(*) DESC"}, "hardness": "Hard"}, {"nl_queries": "Give me a bar chart that the x-axis is the services and the Y is the count(services), and show total number from high to low order.", "db_id": "station_weather", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) DESC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, draw a bar chart about the distribution of  founder and the amount of founder , and group by attribute founder.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Founder , COUNT(Founder) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder", "binning": ""}, "VQL": "Visualize BAR SELECT Founder , COUNT(Founder) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, return a bar chart about the distribution of  name and the average of revenue , and group by attribute name.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name"}, "hardness": "Medium"}, {"nl_queries": "what are the top 5 countries by number of invoices and how many do they have?", "db_id": "store_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT billing_country , COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5", "binning": ""}, "VQL": "Visualize BAR SELECT billing_country , COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5"}, "hardness": "Hard"}, {"nl_queries": "For those employees who did not have any job in the past, return a bar chart about the distribution of hire_date and the sum of employee_id bin hire_date by weekday, order in asc by the y-axis.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY SUM(EMPLOYEE_ID) ASC", "binning": "BIN HIRE_DATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "Show the number of document type for different document type description in a pie chart.", "db_id": "cre_Docs_and_Epenses", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types GROUP BY Document_Type_Description", "binning": ""}, "VQL": "Visualize PIE SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types GROUP BY Document_Type_Description"}, "hardness": "Easy"}, {"nl_queries": "A bar chart shows the venue for each workshop, and show by the x-axis from high to low.", "db_id": "workshop_paper", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY Venue DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY Venue DESC"}, "hardness": "Medium"}, {"nl_queries": "How many faculty members do we have for each gender? Draw a bar chart, display from low to high by the Y-axis.", "db_id": "activity_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Sex , count(*) FROM Faculty GROUP BY Sex ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Sex , count(*) FROM Faculty GROUP BY Sex ORDER BY count(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "What is the average age of singers for each country? Visualize with a bar chart, show X-axis in ascending order.", "db_id": "concert_singer", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY Country ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY Country ASC"}, "hardness": "Medium"}, {"nl_queries": "Show me about the distribution of meter_500 and meter_100 in a bar chart, rank by the bar from low to high.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_500 , meter_100 FROM swimmer ORDER BY meter_500 ASC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_500 , meter_100 FROM swimmer ORDER BY meter_500 ASC"}, "hardness": "Easy"}, {"nl_queries": "Find ACC_Regular_Season and ACC_Percent , and visualize them by a bar chart, display from low to high by the X-axis.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match ORDER BY ACC_Regular_Season ASC", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match ORDER BY ACC_Regular_Season ASC"}, "hardness": "Easy"}, {"nl_queries": "For those products with a price between 60 and 120, return a bar chart about the distribution of  name and  price .", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , Price FROM products WHERE price BETWEEN 60 AND 120", "binning": ""}, "VQL": "Visualize BAR SELECT Name , Price FROM products WHERE price BETWEEN 60 AND 120"}, "hardness": "Easy"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, what is the relationship between  employee_id and  department_id ?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT EMPLOYEE_ID , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)", "binning": ""}, "VQL": "Visualize SCATTER SELECT EMPLOYEE_ID , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees who did not have any job in the past, give me the comparison about the average of manager_id over the job_id , and group by attribute job_id, could you order X from high to low order?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY JOB_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY JOB_ID DESC"}, "hardness": "Hard"}, {"nl_queries": "Count different addresses of each school. Plot them as pie chart.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department", "binning": ""}, "VQL": "Visualize PIE SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department"}, "hardness": "Medium"}, {"nl_queries": "What is the name of every city that has at least 15 stations and how many stations does it have. Show the proportion.", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT city , COUNT(*) FROM station GROUP BY city", "binning": ""}, "VQL": "Visualize PIE SELECT city , COUNT(*) FROM station GROUP BY city"}, "hardness": "Easy"}, {"nl_queries": "How many students live in each city? Show a bar chart, I want to rank by the bar in ascending.", "db_id": "dorm_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT city_code , count(*) FROM student GROUP BY city_code ORDER BY city_code ASC", "binning": ""}, "VQL": "Visualize BAR SELECT city_code , count(*) FROM student GROUP BY city_code ORDER BY city_code ASC"}, "hardness": "Medium"}, {"nl_queries": "A bar chart about how many students are enrolled in colleges that have student accepted during tryouts, and in which states are those colleges?, and rank by the state in descending.", "db_id": "soccer_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT state , enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.decision = 'yes' ORDER BY state DESC", "binning": ""}, "VQL": "Visualize BAR SELECT state , enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.decision = 'yes' ORDER BY state DESC"}, "hardness": "Hard"}, {"nl_queries": "How many dorms are there for each gender? Plot apie chart.", "db_id": "dorm_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT gender , count(*) FROM dorm GROUP BY gender", "binning": ""}, "VQL": "Visualize PIE SELECT gender , count(*) FROM dorm GROUP BY gender"}, "hardness": "Easy"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about the average of manufacturer over the name , and group by attribute name by a bar chart, order by the names in ascending.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC"}, "hardness": "Hard"}, {"nl_queries": "How many stadiums does each country have Show bar chart, could you display Y in asc order?", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Country , count(*) FROM stadium GROUP BY country ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Country , count(*) FROM stadium GROUP BY country ORDER BY count(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "Visualize a bar chart for what are the ids and names of all start stations that were the beginning of at least 200 trips?", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT start_station_name , start_station_id FROM trip", "binning": ""}, "VQL": "Visualize BAR SELECT start_station_name , start_station_id FROM trip"}, "hardness": "Easy"}, {"nl_queries": "Show the relationship between the subject ID and the corresponding number of courses for each subject in a scatter chart.", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT T1.subject_id , COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id GROUP BY T1.subject_id", "binning": ""}, "VQL": "Visualize SCATTER SELECT T1.subject_id , COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id GROUP BY T1.subject_id"}, "hardness": "Medium"}, {"nl_queries": "A bar chart shows the distribution of  login_name and  author_tutor_ATB .", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT login_name , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name", "binning": ""}, "VQL": "Visualize BAR SELECT login_name , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name"}, "hardness": "Easy"}, {"nl_queries": "List the maximum weight and type for each type of pet with a bar chart, and show by the PetType in asc.", "db_id": "pets_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT PetType , max(weight) FROM pets GROUP BY PetType ORDER BY PetType ASC", "binning": ""}, "VQL": "Visualize BAR SELECT PetType , max(weight) FROM pets GROUP BY PetType ORDER BY PetType ASC"}, "hardness": "Easy"}, {"nl_queries": "Create a bar chart showing the total number across party, and order y-axis in asc order.", "db_id": "school_bus", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Party , count(*) FROM driver GROUP BY party ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Party , count(*) FROM driver GROUP BY party ORDER BY count(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "What is the date of birth of professors teaching course ACCT-211? Bin the date by year interval in a line chart, and sort by the EMP_DOB in asc please.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT EMP_DOB , COUNT(EMP_DOB) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE CRS_CODE = \"ACCT-211\"  ORDER BY EMP_DOB ASC", "binning": "BIN EMP_DOB BY YEAR"}, "VQL": "Visualize LINE SELECT EMP_DOB , COUNT(EMP_DOB) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE CRS_CODE = \"ACCT-211\"  ORDER BY EMP_DOB ASC BIN EMP_DOB BY YEAR"}, "hardness": "Extra Hard"}, {"nl_queries": "Show the number of singers in each country with a bar chart, display by the the number of country in asc.", "db_id": "concert_singer", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY COUNT(Country) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY COUNT(Country) ASC"}, "hardness": "Medium"}, {"nl_queries": "Visualize a bar chart about the distribution of Is_full_time and the sum of Employee_ID , and group by attribute Is_full_time, could you list by the total number in asc?", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Employee_ID) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Employee_ID) ASC"}, "hardness": "Medium"}, {"nl_queries": "When do all the researcher role staff start to work? Bin the time into YEAR interval and count them with a line chart, and rank X from high to low order.", "db_id": "tracking_grants_for_research", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date_from , COUNT(date_from) FROM Project_Staff ORDER BY date_from DESC", "binning": "BIN date_from BY YEAR"}, "VQL": "Visualize LINE SELECT date_from , COUNT(date_from) FROM Project_Staff ORDER BY date_from DESC BIN date_from BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "Show the names and the total grades of each high schooler by a bar chart, list by the total number in descending.", "db_id": "network_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) DESC"}, "hardness": "Medium"}, {"nl_queries": "Find Is_full_time and the average of Shop_ID , and group by attribute Is_full_time, and visualize them by a bar chart, sort Y-axis in desc order please.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Is_full_time , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY AVG(Shop_ID) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Is_full_time , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY AVG(Shop_ID) DESC"}, "hardness": "Medium"}, {"nl_queries": "Return a bar chart about the distribution of ACC_Regular_Season and School_ID , and could you rank by the x-axis from low to high?", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Regular_Season , School_ID FROM basketball_match ORDER BY ACC_Regular_Season ASC", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Regular_Season , School_ID FROM basketball_match ORDER BY ACC_Regular_Season ASC"}, "hardness": "Easy"}, {"nl_queries": "Show the names of people and the number of times they have been on the affirmative side of debates, could you show by the Y in asc?", "db_id": "debate", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , COUNT(*) FROM debate_people AS T1 JOIN people AS T2 ON T1.Affirmative = T2.People_ID GROUP BY T2.Name ORDER BY COUNT(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , COUNT(*) FROM debate_people AS T1 JOIN people AS T2 ON T1.Affirmative = T2.People_ID GROUP BY T2.Name ORDER BY COUNT(*) ASC"}, "hardness": "Hard"}, {"nl_queries": "what are the different software platforms for devices, and how many devices have each?, order in ascending by the the total number please.", "db_id": "device", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Software_Platform , COUNT(*) FROM device GROUP BY Software_Platform ORDER BY COUNT(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Software_Platform , COUNT(*) FROM device GROUP BY Software_Platform ORDER BY COUNT(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, find  founder and the average of revenue , and group by attribute founder, and visualize them by a bar chart.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Founder , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder", "binning": ""}, "VQL": "Visualize BAR SELECT Founder , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder"}, "hardness": "Medium"}, {"nl_queries": "Show vote_percent from each date", "db_id": "election_representative", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Date , Vote_Percent FROM election", "binning": ""}, "VQL": "Visualize BAR SELECT Date , Vote_Percent FROM election"}, "hardness": "Easy"}, {"nl_queries": "Find the number of stores in each city Plot them as bar chart, and show in descending by the y axis please.", "db_id": "store_product", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Headquartered_City , count(*) FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id GROUP BY t3.headquartered_city ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Headquartered_City , count(*) FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id GROUP BY t3.headquartered_city ORDER BY count(*) DESC"}, "hardness": "Hard"}, {"nl_queries": "What is the minimum price of the rooms for each different decor? Show me a bar chart!, I want to sort in descending by the bars.", "db_id": "inn_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT decor , min(basePrice) FROM Rooms GROUP BY decor ORDER BY decor DESC", "binning": ""}, "VQL": "Visualize BAR SELECT decor , min(basePrice) FROM Rooms GROUP BY decor ORDER BY decor DESC"}, "hardness": "Easy"}, {"nl_queries": "For those employees who was hired before 2002-06-21, give me the comparison about the average of employee_id over the  job_id , and group by attribute job_id by a bar chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID"}, "hardness": "Medium"}, {"nl_queries": "What are the names and ids of all makers with more than 3 models. Plot them as pie chart.", "db_id": "car_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT FullName , Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker", "binning": ""}, "VQL": "Visualize PIE SELECT FullName , Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker"}, "hardness": "Easy"}, {"nl_queries": "Give me the comparison about School_ID over the All_Home , and group by attribute ACC_Road by a bar chart, and sort names in ascending order please.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC", "binning": ""}, "VQL": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC"}, "hardness": "Medium"}, {"nl_queries": "Give me the comparison about the amount of date_address_from over the  date_address_from , and group by attribute other_details and bin date_address_from by time by a bar chart.", "db_id": "behavior_monitoring", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC", "binning": "BIN date_address_from BY YEAR"}, "VQL": "Visualize BAR SELECT date_address_from , COUNT(date_address_from) FROM Student_Addresses GROUP BY other_details ORDER BY monthly_rental DESC BIN date_address_from BY YEAR"}, "hardness": "Extra Hard"}, {"nl_queries": "Find the number of the country of the airlines whose name starts with 'Orbit'.", "db_id": "flight_4", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT country , COUNT(country) FROM airlines WHERE name LIKE 'Orbit%' GROUP BY country", "binning": ""}, "VQL": "Visualize BAR SELECT country , COUNT(country) FROM airlines WHERE name LIKE 'Orbit%' GROUP BY country"}, "hardness": "Hard"}, {"nl_queries": "what are the different template type codes, and how many documents use each type?, and could you display in asc by the y-axis?", "db_id": "cre_Doc_Template_Mgt", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) ASC"}, "hardness": "Hard"}, {"nl_queries": "Visualize a bar chart about the distribution of ACC_Regular_Season and Team_ID , and show by the Y-axis in desc.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY Team_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY Team_ID DESC"}, "hardness": "Easy"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, return a bar chart about the distribution of email and department_id , and order from low to high by the y-axis please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT EMAIL , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY DEPARTMENT_ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT EMAIL , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY DEPARTMENT_ID ASC"}, "hardness": "Medium"}, {"nl_queries": "Create a bar chart showing the number of state province across state province, and rank by the y-axis from high to low.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT STATE_PROVINCE , COUNT(STATE_PROVINCE) FROM locations GROUP BY STATE_PROVINCE ORDER BY COUNT(STATE_PROVINCE) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT STATE_PROVINCE , COUNT(STATE_PROVINCE) FROM locations GROUP BY STATE_PROVINCE ORDER BY COUNT(STATE_PROVINCE) DESC"}, "hardness": "Medium"}, {"nl_queries": "Give me a scatter chart to show the least rating star of the movie and the star rating of the movie, group the title.", "db_id": "movie_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT stars , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY title", "binning": ""}, "VQL": "Visualize SCATTER SELECT stars , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY title"}, "hardness": "Medium"}, {"nl_queries": "Return a bar chart about the distribution of name and ID , sort from high to low by the ID.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , ID FROM swimmer ORDER BY ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT name , ID FROM swimmer ORDER BY ID DESC"}, "hardness": "Easy"}, {"nl_queries": "Return a histogram on what are the nationalities and the total ages of journalists?, and list by the Y in asc.", "db_id": "news_report", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY SUM(Age) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY SUM(Age) ASC"}, "hardness": "Medium"}, {"nl_queries": "What is the lowest salary in departments with average salary greater than the overall average Plot them as bar chart, and could you rank by the bar in desc?", "db_id": "college_2", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name DESC"}, "hardness": "Easy"}, {"nl_queries": "What are the destinations and number of flights to each one Visualize by bar chart, and sort y-axis in desc order.", "db_id": "flight_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT destination , count(*) FROM Flight GROUP BY destination ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination ORDER BY count(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "Visualize a line chart about the change of the sum of Shop_ID over Start_from , and group by attribute Is_full_time and bin start_from by time, and display by the Start_from in descending.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT Start_from , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC", "binning": "BIN Start_from BY YEAR"}, "VQL": "Visualize LINE SELECT Start_from , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR"}, "hardness": "Extra Hard"}, {"nl_queries": "What are the names and the average grades for each high schooler. Plot them as a bar chart.", "db_id": "network_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT name , AVG(grade) FROM Highschooler GROUP BY name", "binning": ""}, "VQL": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name"}, "hardness": "Easy"}, {"nl_queries": "For those employees who was hired before 2002-06-21, return a line chart about the change of  department_id over  hire_date .", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE hire_date < '2002-06-21'", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE hire_date < '2002-06-21'"}, "hardness": "Easy"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about  revenue over the  name , and group by attribute name.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name"}, "hardness": "Medium"}, {"nl_queries": "Show me about the correlation between  School_ID and  All_Games_Percent , and group by attribute ACC_Home in a scatter chart.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Home", "binning": ""}, "VQL": "Visualize SCATTER SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Home"}, "hardness": "Easy"}, {"nl_queries": "For those records from the products and each product's manufacturer, return a scatter chart about the correlation between  manufacturer and  revenue , and group by attribute founder.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Manufacturer , Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder", "binning": ""}, "VQL": "Visualize SCATTER SELECT Manufacturer , Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder"}, "hardness": "Medium"}, {"nl_queries": "For each product that has problems, find the number of problems reported after 1986-11-13 and the product id. Visualize by scatter chart.", "db_id": "tracking_software_problems", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT count(*) , T1.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > \"1986-11-13\" GROUP BY T2.product_id", "binning": ""}, "VQL": "Visualize SCATTER SELECT count(*) , T1.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > \"1986-11-13\" GROUP BY T2.product_id"}, "hardness": "Hard"}, {"nl_queries": "For artist names who are not from the United States, how many names in each year?, and I want to sort by the y axis in descending.", "db_id": "theme_gallery", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Year_Join , COUNT(Year_Join) FROM artist WHERE country != 'United States' GROUP BY Name ORDER BY COUNT(Year_Join) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Year_Join , COUNT(Year_Join) FROM artist WHERE country != 'United States' GROUP BY Name ORDER BY COUNT(Year_Join) DESC"}, "hardness": "Hard"}, {"nl_queries": "Give the minimum product price for each product type in a pie chart.", "db_id": "department_store", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT product_type_code , min(product_price) FROM products GROUP BY product_type_code ORDER BY product_type_code", "binning": ""}, "VQL": "Visualize PIE SELECT product_type_code , min(product_price) FROM products GROUP BY product_type_code ORDER BY product_type_code"}, "hardness": "Easy"}, {"nl_queries": "Bar chart x axis log entry description y axis the number of log entry description", "db_id": "tracking_software_problems", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT log_entry_description , COUNT(log_entry_description) FROM problem_log GROUP BY log_entry_description", "binning": ""}, "VQL": "Visualize BAR SELECT log_entry_description , COUNT(log_entry_description) FROM problem_log GROUP BY log_entry_description"}, "hardness": "Easy"}, {"nl_queries": "Show all origins and the number of flights from each origin by a bar chart, display by the y axis in descending.", "db_id": "flight_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT origin , count(*) FROM Flight GROUP BY origin ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT origin , count(*) FROM Flight GROUP BY origin ORDER BY count(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "Return a scatter chart showing the relationship between major id and average age.", "db_id": "game_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Major , avg(age) FROM Student GROUP BY major", "binning": ""}, "VQL": "Visualize SCATTER SELECT Major , avg(age) FROM Student GROUP BY major"}, "hardness": "Easy"}, {"nl_queries": "What are the cost and treatment type description of each treatment Show bar chart, and show in descending by the Y-axis.", "db_id": "dog_kennels", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT treatment_type_description , AVG(cost_of_treatment) FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY treatment_type_description ORDER BY AVG(cost_of_treatment) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT treatment_type_description , AVG(cost_of_treatment) FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY treatment_type_description ORDER BY AVG(cost_of_treatment) DESC"}, "hardness": "Hard"}, {"nl_queries": "Bar chart x axis sportname y axis the total number, list in desc by the Y.", "db_id": "game_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT SportName , count(*) FROM Sportsinfo GROUP BY sportname ORDER BY count(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT SportName , count(*) FROM Sportsinfo GROUP BY sportname ORDER BY count(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "Show names of musicals and the number of actors who have appeared in the musicals Show bar chart, sort bar in desc order.", "db_id": "musical", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID ORDER BY T2.Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID ORDER BY T2.Name DESC"}, "hardness": "Hard"}, {"nl_queries": "Return the number of the dates of birth for entrepreneurs who have either the investor Simon Woodroffe or Peter Jones.", "db_id": "entrepreneur", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Date_of_Birth , COUNT(Date_of_Birth) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Investor = \"Simon Woodroffe\" OR T1.Investor = \"Peter Jones\"", "binning": "BIN Date_of_Birth BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Date_of_Birth , COUNT(Date_of_Birth) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Investor = \"Simon Woodroffe\" OR T1.Investor = \"Peter Jones\" BIN Date_of_Birth BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "Return a histogram on what is the name of each course and the corresponding number of student enrollment?, could you list in desc by the x axis?", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY course_name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY course_name DESC"}, "hardness": "Hard"}, {"nl_queries": "Show me a bar chart for how many matches were played in each year?", "db_id": "wta_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT year , count(*) FROM matches GROUP BY YEAR", "binning": ""}, "VQL": "Visualize BAR SELECT year , count(*) FROM matches GROUP BY YEAR"}, "hardness": "Easy"}, {"nl_queries": "For those records from the products and each product's manufacturer, draw a scatter chart about the correlation between  price and  revenue .", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Price , Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code", "binning": ""}, "VQL": "Visualize SCATTER SELECT Price , Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code"}, "hardness": "Easy"}, {"nl_queries": "For players whose occupation is not \"Researcher\", tell me the distribution of their residences with a bar chart, and list names in ascending order.", "db_id": "riding_club", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Residence , COUNT(Residence) FROM player WHERE Occupation != \"Researcher\" GROUP BY Residence ORDER BY Residence ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Residence , COUNT(Residence) FROM player WHERE Occupation != \"Researcher\" GROUP BY Residence ORDER BY Residence ASC"}, "hardness": "Hard"}, {"nl_queries": "Find the number of employees hired in each shop; show the shop name as well Plot them as bar chart, and display from low to high by the y-axis please.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , count(*) FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t2.name ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , count(*) FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t2.name ORDER BY count(*) ASC"}, "hardness": "Hard"}, {"nl_queries": "List the research staff details, and order in ascending order, and count them by a bar chart", "db_id": "tracking_grants_for_research", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT staff_details , COUNT(staff_details) FROM Research_Staff GROUP BY staff_details ORDER BY staff_details ASC", "binning": ""}, "VQL": "Visualize BAR SELECT staff_details , COUNT(staff_details) FROM Research_Staff GROUP BY staff_details ORDER BY staff_details ASC"}, "hardness": "Medium"}, {"nl_queries": "What are the types of competition and number of competitions for that type. Show bar chart.", "db_id": "sports_competition", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Competition_type , COUNT(*) FROM competition GROUP BY Competition_type", "binning": ""}, "VQL": "Visualize BAR SELECT Competition_type , COUNT(*) FROM competition GROUP BY Competition_type"}, "hardness": "Easy"}, {"nl_queries": "Show the proportion of the total number of passengers in each location with a pie chart.", "db_id": "train_station", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Location , sum(total_passengers) FROM station GROUP BY LOCATION", "binning": ""}, "VQL": "Visualize PIE SELECT Location , sum(total_passengers) FROM station GROUP BY LOCATION"}, "hardness": "Easy"}, {"nl_queries": "Show me about the distribution of meter_200 and the average of meter_100 , and group by attribute meter_200 in a bar chart, display Y in descending order please.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_200 , AVG(meter_100) FROM swimmer GROUP BY meter_200 ORDER BY AVG(meter_100) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_200 , AVG(meter_100) FROM swimmer GROUP BY meter_200 ORDER BY AVG(meter_100) DESC"}, "hardness": "Medium"}, {"nl_queries": "Create a bar chart showing the number of author across author, and order total number from low to high order.", "db_id": "workshop_paper", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY COUNT(Author) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY COUNT(Author) ASC"}, "hardness": "Medium"}, {"nl_queries": "Please tell me the average star ratings of each movie title using a bar chart, and could you show by the bar in desc?", "db_id": "movie_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT title , AVG(stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY title ORDER BY title DESC", "binning": ""}, "VQL": "Visualize BAR SELECT title , AVG(stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY title ORDER BY title DESC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who did not have any job in the past, visualize the relationship between  employee_id and  salary .", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT EMPLOYEE_ID , SALARY FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)", "binning": ""}, "VQL": "Visualize SCATTER SELECT EMPLOYEE_ID , SALARY FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)"}, "hardness": "Easy"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about the sum of revenue over the name , and group by attribute name, and list by the Y-axis in ascending.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T2.Revenue ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T2.Revenue ASC"}, "hardness": "Hard"}, {"nl_queries": "How many residents does each property have? List property id and resident count. Visualize by scatter chart.", "db_id": "local_govt_and_lot", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT T1.property_id , count(*) FROM properties AS T1 JOIN residents AS T2 ON T1.property_id = T2.property_id GROUP BY T1.property_id", "binning": ""}, "VQL": "Visualize SCATTER SELECT T1.property_id , count(*) FROM properties AS T1 JOIN residents AS T2 ON T1.property_id = T2.property_id GROUP BY T1.property_id"}, "hardness": "Medium"}, {"nl_queries": "Show me a pie chart for what are the names and ids of the tourist attractions that are visited at most once?", "db_id": "cre_Theme_park", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT T1.Name , T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID", "binning": ""}, "VQL": "Visualize PIE SELECT T1.Name , T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID"}, "hardness": "Easy"}, {"nl_queries": "For all employees who have the letters D or S in their first name, return a bar chart about the distribution of  hire_date and the sum of salary bin hire_date by time.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH"}, "hardness": "Extra Hard"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, give me the comparison about the average of department_id over the job_id , and group by attribute job_id, I want to sort by the x-axis in desc.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC"}, "hardness": "Extra Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, draw a bar chart about the distribution of name and manufacturer , and group by attribute founder, sort from low to high by the x-axis.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder , T1.Name ORDER BY T1.Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder , T1.Name ORDER BY T1.Name ASC"}, "hardness": "Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, give me the comparison about the average of manufacturer over the  founder , and group by attribute founder by a bar chart.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Founder , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder", "binning": ""}, "VQL": "Visualize BAR SELECT Founder , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder"}, "hardness": "Medium"}, {"nl_queries": "I want to visualize the trend about the total appears times of transcript date in the Year interval.", "db_id": "student_transcripts_tracking", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT transcript_date , COUNT(transcript_date) FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id", "binning": "BIN transcript_date BY YEAR"}, "VQL": "Visualize LINE SELECT transcript_date , COUNT(transcript_date) FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id BIN transcript_date BY YEAR"}, "hardness": "Medium"}, {"nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, a scatter chart shows the correlation between  commission_pct and  manager_id .", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT COMMISSION_PCT , MANAGER_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40", "binning": ""}, "VQL": "Visualize SCATTER SELECT COMMISSION_PCT , MANAGER_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40"}, "hardness": "Medium"}, {"nl_queries": "List the grape and winery of the wines whose price is bigger than 100, the x-axis is winery and group the grape, and y-axis is the number of wineries, order x axis in asc order.", "db_id": "wine_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Grape ,  Winery ORDER BY Winery ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Grape ,  Winery ORDER BY Winery ASC"}, "hardness": "Extra Hard"}, {"nl_queries": "Scatterplot of minimal product price vs max(product price) by product_type_code", "db_id": "department_store", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT max(product_price) , min(product_price) FROM products GROUP BY product_type_code", "binning": ""}, "VQL": "Visualize SCATTER SELECT max(product_price) , min(product_price) FROM products GROUP BY product_type_code"}, "hardness": "Easy"}, {"nl_queries": "For those records from the products and each product's manufacturer, find name and code , and group by attribute name, and visualize them by a bar chart, I want to show in desc by the Y.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Code DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Code DESC"}, "hardness": "Hard"}, {"nl_queries": "List singer names and number of concerts for each singer with a bar chart, and I want to sort by the Name in desc.", "db_id": "concert_singer", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Name , count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id GROUP BY T2.singer_id ORDER BY Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Name , count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id GROUP BY T2.singer_id ORDER BY Name DESC"}, "hardness": "Hard"}, {"nl_queries": "What is the number of entry descriptions of each problem?, list Y-axis from high to low order.", "db_id": "tracking_software_problems", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT log_entry_description , COUNT(log_entry_description) FROM problem_log GROUP BY log_entry_description ORDER BY COUNT(log_entry_description) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT log_entry_description , COUNT(log_entry_description) FROM problem_log GROUP BY log_entry_description ORDER BY COUNT(log_entry_description) DESC"}, "hardness": "Medium"}, {"nl_queries": "Bar chart x axis state y axis the average of vote id, and order by the mean vote id in ascending please.", "db_id": "voter_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT state , AVG(vote_id) FROM votes GROUP BY state ORDER BY AVG(vote_id) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT state , AVG(vote_id) FROM votes GROUP BY state ORDER BY AVG(vote_id) ASC"}, "hardness": "Medium"}, {"nl_queries": "Show the code of the product that is cheapest in each product category and the minimum price with a scatterplot.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Code , min(price) FROM products GROUP BY Code", "binning": ""}, "VQL": "Visualize SCATTER SELECT Code , min(price) FROM products GROUP BY Code"}, "hardness": "Easy"}, {"nl_queries": "What are the lengths and heights of roller coasters. Show scatter chart.", "db_id": "roller_coaster", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Length , Height FROM roller_coaster", "binning": ""}, "VQL": "Visualize SCATTER SELECT Length , Height FROM roller_coaster"}, "hardness": "Easy"}, {"nl_queries": "For those records from the products and each product's manufacturer, return a bar chart about the distribution of name and the average of manufacturer , and group by attribute name, display from high to low by the x axis.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC"}, "hardness": "Hard"}, {"nl_queries": "For those employees who did not have any job in the past, return a bar chart about the distribution of job_id and the sum of employee_id , and group by attribute job_id, order by the total number in asc.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) ASC"}, "hardness": "Hard"}, {"nl_queries": "Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes'. Show the proportion.", "db_id": "department_management", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Name , SUM(Num_Employees) FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id WHERE T2.temporary_acting = 'Yes' GROUP BY Name", "binning": ""}, "VQL": "Visualize PIE SELECT Name , SUM(Num_Employees) FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id WHERE T2.temporary_acting = 'Yes' GROUP BY Name"}, "hardness": "Hard"}, {"nl_queries": "What is the number of countries in the artist table?, I want to order by the bars in asc.", "db_id": "theme_gallery", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Country , COUNT(Country) FROM artist GROUP BY Country ORDER BY Country ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM artist GROUP BY Country ORDER BY Country ASC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who did not have any job in the past, give me the comparison about the sum of manager_id over the job_id , and group by attribute job_id by a bar chart, sort Y-axis in descending order please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC"}, "hardness": "Hard"}, {"nl_queries": "Bar chart x axis location code y axis how many location code, and I want to order from high to low by the bars.", "db_id": "cre_Doc_Tracking_DB", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Location_Code , COUNT(Location_Code) FROM Document_locations GROUP BY Location_Code ORDER BY Location_Code DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Location_Code , COUNT(Location_Code) FROM Document_locations GROUP BY Location_Code ORDER BY Location_Code DESC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who was hired before 2002-06-21, give me the comparison about the average of manager_id over the hire_date bin hire_date by time by a bar chart, and could you display y axis in ascending order?", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(MANAGER_ID) ASC", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH"}, "hardness": "Hard"}, {"nl_queries": "For all employees who have the letters D or S in their first name, draw a bar chart about the distribution of  hire_date and the average of employee_id bin hire_date by time.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'", "binning": "BIN HIRE_DATE BY MONTH"}, "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH"}, "hardness": "Extra Hard"}, {"nl_queries": "Return the room and number of reservations made for each of the rooms to draw a bar chart.", "db_id": "inn_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Room , count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room", "binning": ""}, "VQL": "Visualize BAR SELECT Room , count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room"}, "hardness": "Medium"}, {"nl_queries": "A bar chart showing the number of start date of the apartment bookings made by female guests (gender code \"Female\") for each weekday.", "db_id": "apartment_rentals", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id WHERE T2.gender_code = \"Female\"", "binning": "BIN booking_start_date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id WHERE T2.gender_code = \"Female\" BIN booking_start_date BY WEEKDAY"}, "hardness": "Hard"}, {"nl_queries": "Show the number of customer address history in each day and group by date to with a line chart, I want to list in ascending by the x axis.", "db_id": "customers_and_products_contacts", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date_to , COUNT(date_to) FROM customer_address_history AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id JOIN addresses AS T3 ON T1.address_id = T3.address_id GROUP BY date_to ORDER BY date_to ASC", "binning": ""}, "VQL": "Visualize LINE SELECT date_to , COUNT(date_to) FROM customer_address_history AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id JOIN addresses AS T3 ON T1.address_id = T3.address_id GROUP BY date_to ORDER BY date_to ASC"}, "hardness": "Hard"}, {"nl_queries": "How many sections does each course have Visualize by bar chart, and I want to rank by the names in ascending please.", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY CRS_CODE ASC", "binning": ""}, "VQL": "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY CRS_CODE ASC"}, "hardness": "Medium"}, {"nl_queries": "Show all dates of transactions whose type code is \"SALE\", and count them by a line chart, show from low to high by the x-axis.", "db_id": "tracking_share_transactions", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code = \"SALE\"  ORDER BY date_of_transaction ASC", "binning": "BIN date_of_transaction BY YEAR"}, "VQL": "Visualize LINE SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code = \"SALE\"  ORDER BY date_of_transaction ASC BIN date_of_transaction BY YEAR"}, "hardness": "Hard"}, {"nl_queries": "Show the different nationalities and the number of journalists of each nationality Visualize by bar chart, could you display by the x axis in desc?", "db_id": "news_report", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Nationality , COUNT(*) FROM journalist GROUP BY Nationality ORDER BY Nationality DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM journalist GROUP BY Nationality ORDER BY Nationality DESC"}, "hardness": "Medium"}, {"nl_queries": "Show the number of engineers for different other details in a bar chart.", "db_id": "assets_maintenance", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT other_details , COUNT(other_details) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY other_details", "binning": ""}, "VQL": "Visualize BAR SELECT other_details , COUNT(other_details) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY other_details"}, "hardness": "Medium"}, {"nl_queries": "Find the number of the dates of the tests taken with result \"Pass\".", "db_id": "e_learning", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\"", "binning": "BIN date_test_taken BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" BIN date_test_taken BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "A bar chart shows the distribution of meter_500 and ID , and I want to rank y axis from low to high order.", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_500 , ID FROM swimmer ORDER BY ID ASC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_500 , ID FROM swimmer ORDER BY ID ASC"}, "hardness": "Easy"}, {"nl_queries": "Show all template type codes and number of templates for each Visualize by bar chart, I want to list in ascending by the Y-axis please.", "db_id": "cre_Doc_Template_Mgt", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Template_Type_Code , count(*) FROM Templates GROUP BY template_type_code ORDER BY count(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates GROUP BY template_type_code ORDER BY count(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "Return a scatter chart about the correlation between  Team_ID and  All_Games_Percent , and group by attribute All_Road.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize SCATTER", "data_part": {"sql_part": "SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY All_Road", "binning": ""}, "VQL": "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY All_Road"}, "hardness": "Easy"}, {"nl_queries": "What is the proportion of flags of ships that do not have a captain with the rank of Midshipman? Show the result using a pie chart.", "db_id": "ship_1", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Flag , COUNT(Flag) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank = 'Midshipman') GROUP BY Flag", "binning": ""}, "VQL": "Visualize PIE SELECT Flag , COUNT(Flag) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank = 'Midshipman') GROUP BY Flag"}, "hardness": "Medium"}, {"nl_queries": "Show different types of ships and the number of ships of each type in a bar chart, I want to list from low to high by the names.", "db_id": "ship_mission", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY Type ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY Type ASC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, find name and code , and group by attribute founder, and visualize them by a bar chart, and show in ascending by the Name please.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder , T1.Name ORDER BY T1.Name ASC", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder , T1.Name ORDER BY T1.Name ASC"}, "hardness": "Hard"}, {"nl_queries": "Give me a bar chart for the total number of each payment method code, and could you display by the names in descending?", "db_id": "cre_Drama_Workshop_Groups", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY payment_method_code DESC", "binning": ""}, "VQL": "Visualize BAR SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code ORDER BY payment_method_code DESC"}, "hardness": "Medium"}, {"nl_queries": "For those records from the products and each product's manufacturer, return a bar chart about the distribution of  name and  code , and group by attribute headquarter.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter , T1.Name", "binning": ""}, "VQL": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter , T1.Name"}, "hardness": "Medium"}, {"nl_queries": "Return a bar chart on what are the countries of perpetrators? Show each country and the corresponding number of perpetrators there, and list in descending by the y axis please.", "db_id": "perpetrator", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Country , COUNT(*) FROM perpetrator GROUP BY Country ORDER BY COUNT(*) DESC", "binning": ""}, "VQL": "Visualize BAR SELECT Country , COUNT(*) FROM perpetrator GROUP BY Country ORDER BY COUNT(*) DESC"}, "hardness": "Medium"}, {"nl_queries": "What are the dates with a maximum temperature higher than 85, and count them by a bar chart", "db_id": "bike_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT date , COUNT(date) FROM weather WHERE max_temperature_f > 85", "binning": "BIN date BY WEEKDAY"}, "VQL": "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE max_temperature_f > 85 BIN date BY WEEKDAY"}, "hardness": "Medium"}, {"nl_queries": "Create a bar chart showing the total number across city code", "db_id": "dorm_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT city_code , count(*) FROM student GROUP BY city_code", "binning": ""}, "VQL": "Visualize BAR SELECT city_code , count(*) FROM student GROUP BY city_code"}, "hardness": "Easy"}, {"nl_queries": "Return a bar chart on how many events are there for each party?", "db_id": "party_people", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id", "binning": ""}, "VQL": "Visualize BAR SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id"}, "hardness": "Medium"}, {"nl_queries": "How many parties of the time they took office, binning the took office into WEEKDAY interval", "db_id": "party_people", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Took_office , COUNT(Took_office) FROM party", "binning": "BIN Took_office BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Took_office , COUNT(Took_office) FROM party BIN Took_office BY WEEKDAY"}, "hardness": "Easy"}, {"nl_queries": "Draw a bar chart for how many stores are headquarted in each city?, and I want to display by the x axis from low to high.", "db_id": "store_product", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Headquartered_City , count(*) FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id GROUP BY t3.headquartered_city ORDER BY Headquartered_City ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Headquartered_City , count(*) FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id GROUP BY t3.headquartered_city ORDER BY Headquartered_City ASC"}, "hardness": "Hard"}, {"nl_queries": "Give me the comparison about the average of Shop_ID over the Start_from , and group by attribute Is_full_time and bin start_from by weekday by a bar chart, show in desc by the total number.", "db_id": "employee_hire_evaluation", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Start_from , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY AVG(Shop_ID) DESC", "binning": "BIN Start_from BY WEEKDAY"}, "VQL": "Visualize BAR SELECT Start_from , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY AVG(Shop_ID) DESC BIN Start_from BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "For those records from the products and each product's manufacturer, show me about the distribution of  name and the sum of price , and group by attribute name in a bar chart.", "db_id": "manufactory_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT T2.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name", "binning": ""}, "VQL": "Visualize BAR SELECT T2.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name"}, "hardness": "Medium"}, {"nl_queries": "Find the name and level of catalog structure with level between 5 and 10, and list by the y axis in ascending.", "db_id": "product_catalog", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number ASC", "binning": ""}, "VQL": "Visualize BAR SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10 ORDER BY catalog_level_number ASC"}, "hardness": "Medium"}, {"nl_queries": "Return a pie chart about the proportion of  Team_Name and  All_Games_Percent.", "db_id": "university_basketball", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Team_Name , All_Games_Percent FROM basketball_match", "binning": ""}, "VQL": "Visualize PIE SELECT Team_Name , All_Games_Percent FROM basketball_match"}, "hardness": "Easy"}, {"nl_queries": "For each type, how many ships are there Plot them as bar chart, list y-axis in asc order.", "db_id": "ship_mission", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY COUNT(*) ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY COUNT(*) ASC"}, "hardness": "Medium"}, {"nl_queries": "Show all artist names and the number of exhibitions for each artist in a pie chart.", "db_id": "theme_gallery", "vis_query": {"vis_part": "Visualize PIE", "data_part": {"sql_part": "SELECT Name , count(*) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id GROUP BY T1.artist_id", "binning": ""}, "VQL": "Visualize PIE SELECT Name , count(*) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id GROUP BY T1.artist_id"}, "hardness": "Medium"}, {"nl_queries": "Show me a bar chart for how many gymnasts are from each hometown?, and display X in asc order.", "db_id": "gymnast", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT Hometown , COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown ORDER BY Hometown ASC", "binning": ""}, "VQL": "Visualize BAR SELECT Hometown , COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown ORDER BY Hometown ASC"}, "hardness": "Hard"}, {"nl_queries": "Return a bar graph to visualize the average age for each pet type. ", "db_id": "pets_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT PetType , avg(pet_age) FROM pets GROUP BY pettype", "binning": ""}, "VQL": "Visualize BAR SELECT PetType , avg(pet_age) FROM pets GROUP BY pettype"}, "hardness": "Easy"}, {"nl_queries": "For those employees who did not have any job in the past, visualize a line chart about the change of commission_pct over hire_date , order X from high to low order please.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize LINE", "data_part": {"sql_part": "SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE DESC", "binning": ""}, "VQL": "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE DESC"}, "hardness": "Medium"}, {"nl_queries": "How many professors whose office is located in DRE 102 are hired in each weekday? Return a bar chart, and could you sort in ascending by the Y-axis?", "db_id": "college_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT EMP_HIREDATE , COUNT(EMP_HIREDATE) FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num WHERE T2.prof_office = 'DRE 102'  ORDER BY COUNT(EMP_HIREDATE) ASC", "binning": "BIN EMP_HIREDATE BY WEEKDAY"}, "VQL": "Visualize BAR SELECT EMP_HIREDATE , COUNT(EMP_HIREDATE) FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num WHERE T2.prof_office = 'DRE 102'  ORDER BY COUNT(EMP_HIREDATE) ASC BIN EMP_HIREDATE BY WEEKDAY"}, "hardness": "Extra Hard"}, {"nl_queries": "Show me about the distribution of meter_200 and the average of ID , and group by attribute meter_200 in a bar chart, and could you rank bar in asc order?", "db_id": "swimming", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT meter_200 , AVG(ID) FROM swimmer GROUP BY meter_200 ORDER BY meter_200 ASC", "binning": ""}, "VQL": "Visualize BAR SELECT meter_200 , AVG(ID) FROM swimmer GROUP BY meter_200 ORDER BY meter_200 ASC"}, "hardness": "Medium"}, {"nl_queries": "For those employees who do not work in departments with managers that have ids between 100 and 200, give me the comparison about  employee_id over the  first_name  by a bar chart.", "db_id": "hr_1", "vis_query": {"vis_part": "Visualize BAR", "data_part": {"sql_part": "SELECT FIRST_NAME , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)", "binning": ""}, "VQL": "Visualize BAR SELECT FIRST_NAME , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)"}, "hardness": "Extra Hard"}]